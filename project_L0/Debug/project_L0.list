
project_L0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b338  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ba0  0800b3f8  0800b3f8  0001b3f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf98  0800bf98  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800bf98  0800bf98  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bf98  0800bf98  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf98  0800bf98  0001bf98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf9c  0800bf9c  0001bf9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0800bfa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  200000d0  0800c070  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  0800c070  000203a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a101  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003362  00000000  00000000  0003a1f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001400  00000000  00000000  0003d560  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001250  00000000  00000000  0003e960  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000183fe  00000000  00000000  0003fbb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011911  00000000  00000000  00057fae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008dc43  00000000  00000000  000698bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f7502  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c2c  00000000  00000000  000f7580  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000d0 	.word	0x200000d0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b3e0 	.word	0x0800b3e0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000d4 	.word	0x200000d4
 8000104:	0800b3e0 	.word	0x0800b3e0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cfrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	1c08      	adds	r0, r1, #0
 8000408:	4661      	mov	r1, ip
 800040a:	e7ff      	b.n	800040c <__aeabi_cfcmpeq>

0800040c <__aeabi_cfcmpeq>:
 800040c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800040e:	f000 f8c1 	bl	8000594 <__lesf2>
 8000412:	2800      	cmp	r0, #0
 8000414:	d401      	bmi.n	800041a <__aeabi_cfcmpeq+0xe>
 8000416:	2100      	movs	r1, #0
 8000418:	42c8      	cmn	r0, r1
 800041a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800041c <__aeabi_fcmpeq>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f000 f843 	bl	80004a8 <__eqsf2>
 8000422:	4240      	negs	r0, r0
 8000424:	3001      	adds	r0, #1
 8000426:	bd10      	pop	{r4, pc}

08000428 <__aeabi_fcmplt>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 f8b3 	bl	8000594 <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	db01      	blt.n	8000436 <__aeabi_fcmplt+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_fcmple>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 f8a9 	bl	8000594 <__lesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dd01      	ble.n	800044a <__aeabi_fcmple+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_fcmpgt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 f851 	bl	80004f8 <__gesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	dc01      	bgt.n	800045e <__aeabi_fcmpgt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_fcmpge>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 f847 	bl	80004f8 <__gesf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	da01      	bge.n	8000472 <__aeabi_fcmpge+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_f2uiz>:
 8000478:	219e      	movs	r1, #158	; 0x9e
 800047a:	b510      	push	{r4, lr}
 800047c:	05c9      	lsls	r1, r1, #23
 800047e:	1c04      	adds	r4, r0, #0
 8000480:	f7ff fff0 	bl	8000464 <__aeabi_fcmpge>
 8000484:	2800      	cmp	r0, #0
 8000486:	d103      	bne.n	8000490 <__aeabi_f2uiz+0x18>
 8000488:	1c20      	adds	r0, r4, #0
 800048a:	f000 fa97 	bl	80009bc <__aeabi_f2iz>
 800048e:	bd10      	pop	{r4, pc}
 8000490:	219e      	movs	r1, #158	; 0x9e
 8000492:	1c20      	adds	r0, r4, #0
 8000494:	05c9      	lsls	r1, r1, #23
 8000496:	f000 f8cd 	bl	8000634 <__aeabi_fsub>
 800049a:	f000 fa8f 	bl	80009bc <__aeabi_f2iz>
 800049e:	2380      	movs	r3, #128	; 0x80
 80004a0:	061b      	lsls	r3, r3, #24
 80004a2:	469c      	mov	ip, r3
 80004a4:	4460      	add	r0, ip
 80004a6:	e7f2      	b.n	800048e <__aeabi_f2uiz+0x16>

080004a8 <__eqsf2>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	0042      	lsls	r2, r0, #1
 80004ac:	024e      	lsls	r6, r1, #9
 80004ae:	004c      	lsls	r4, r1, #1
 80004b0:	0245      	lsls	r5, r0, #9
 80004b2:	0a6d      	lsrs	r5, r5, #9
 80004b4:	0e12      	lsrs	r2, r2, #24
 80004b6:	0fc3      	lsrs	r3, r0, #31
 80004b8:	0a76      	lsrs	r6, r6, #9
 80004ba:	0e24      	lsrs	r4, r4, #24
 80004bc:	0fc9      	lsrs	r1, r1, #31
 80004be:	2aff      	cmp	r2, #255	; 0xff
 80004c0:	d00f      	beq.n	80004e2 <__eqsf2+0x3a>
 80004c2:	2cff      	cmp	r4, #255	; 0xff
 80004c4:	d011      	beq.n	80004ea <__eqsf2+0x42>
 80004c6:	2001      	movs	r0, #1
 80004c8:	42a2      	cmp	r2, r4
 80004ca:	d000      	beq.n	80004ce <__eqsf2+0x26>
 80004cc:	bd70      	pop	{r4, r5, r6, pc}
 80004ce:	42b5      	cmp	r5, r6
 80004d0:	d1fc      	bne.n	80004cc <__eqsf2+0x24>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d00d      	beq.n	80004f2 <__eqsf2+0x4a>
 80004d6:	2a00      	cmp	r2, #0
 80004d8:	d1f8      	bne.n	80004cc <__eqsf2+0x24>
 80004da:	0028      	movs	r0, r5
 80004dc:	1e45      	subs	r5, r0, #1
 80004de:	41a8      	sbcs	r0, r5
 80004e0:	e7f4      	b.n	80004cc <__eqsf2+0x24>
 80004e2:	2001      	movs	r0, #1
 80004e4:	2d00      	cmp	r5, #0
 80004e6:	d1f1      	bne.n	80004cc <__eqsf2+0x24>
 80004e8:	e7eb      	b.n	80004c2 <__eqsf2+0x1a>
 80004ea:	2001      	movs	r0, #1
 80004ec:	2e00      	cmp	r6, #0
 80004ee:	d1ed      	bne.n	80004cc <__eqsf2+0x24>
 80004f0:	e7e9      	b.n	80004c6 <__eqsf2+0x1e>
 80004f2:	2000      	movs	r0, #0
 80004f4:	e7ea      	b.n	80004cc <__eqsf2+0x24>
 80004f6:	46c0      	nop			; (mov r8, r8)

080004f8 <__gesf2>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	004a      	lsls	r2, r1, #1
 80004fc:	024e      	lsls	r6, r1, #9
 80004fe:	0245      	lsls	r5, r0, #9
 8000500:	0044      	lsls	r4, r0, #1
 8000502:	0a6d      	lsrs	r5, r5, #9
 8000504:	0e24      	lsrs	r4, r4, #24
 8000506:	0fc3      	lsrs	r3, r0, #31
 8000508:	0a76      	lsrs	r6, r6, #9
 800050a:	0e12      	lsrs	r2, r2, #24
 800050c:	0fc9      	lsrs	r1, r1, #31
 800050e:	2cff      	cmp	r4, #255	; 0xff
 8000510:	d015      	beq.n	800053e <__gesf2+0x46>
 8000512:	2aff      	cmp	r2, #255	; 0xff
 8000514:	d00e      	beq.n	8000534 <__gesf2+0x3c>
 8000516:	2c00      	cmp	r4, #0
 8000518:	d115      	bne.n	8000546 <__gesf2+0x4e>
 800051a:	2a00      	cmp	r2, #0
 800051c:	d101      	bne.n	8000522 <__gesf2+0x2a>
 800051e:	2e00      	cmp	r6, #0
 8000520:	d01c      	beq.n	800055c <__gesf2+0x64>
 8000522:	2d00      	cmp	r5, #0
 8000524:	d014      	beq.n	8000550 <__gesf2+0x58>
 8000526:	428b      	cmp	r3, r1
 8000528:	d027      	beq.n	800057a <__gesf2+0x82>
 800052a:	2002      	movs	r0, #2
 800052c:	3b01      	subs	r3, #1
 800052e:	4018      	ands	r0, r3
 8000530:	3801      	subs	r0, #1
 8000532:	bd70      	pop	{r4, r5, r6, pc}
 8000534:	2e00      	cmp	r6, #0
 8000536:	d0ee      	beq.n	8000516 <__gesf2+0x1e>
 8000538:	2002      	movs	r0, #2
 800053a:	4240      	negs	r0, r0
 800053c:	e7f9      	b.n	8000532 <__gesf2+0x3a>
 800053e:	2d00      	cmp	r5, #0
 8000540:	d1fa      	bne.n	8000538 <__gesf2+0x40>
 8000542:	2aff      	cmp	r2, #255	; 0xff
 8000544:	d00e      	beq.n	8000564 <__gesf2+0x6c>
 8000546:	2a00      	cmp	r2, #0
 8000548:	d10e      	bne.n	8000568 <__gesf2+0x70>
 800054a:	2e00      	cmp	r6, #0
 800054c:	d0ed      	beq.n	800052a <__gesf2+0x32>
 800054e:	e00b      	b.n	8000568 <__gesf2+0x70>
 8000550:	2301      	movs	r3, #1
 8000552:	3901      	subs	r1, #1
 8000554:	4399      	bics	r1, r3
 8000556:	0008      	movs	r0, r1
 8000558:	3001      	adds	r0, #1
 800055a:	e7ea      	b.n	8000532 <__gesf2+0x3a>
 800055c:	2000      	movs	r0, #0
 800055e:	2d00      	cmp	r5, #0
 8000560:	d0e7      	beq.n	8000532 <__gesf2+0x3a>
 8000562:	e7e2      	b.n	800052a <__gesf2+0x32>
 8000564:	2e00      	cmp	r6, #0
 8000566:	d1e7      	bne.n	8000538 <__gesf2+0x40>
 8000568:	428b      	cmp	r3, r1
 800056a:	d1de      	bne.n	800052a <__gesf2+0x32>
 800056c:	4294      	cmp	r4, r2
 800056e:	dd05      	ble.n	800057c <__gesf2+0x84>
 8000570:	2102      	movs	r1, #2
 8000572:	1e58      	subs	r0, r3, #1
 8000574:	4008      	ands	r0, r1
 8000576:	3801      	subs	r0, #1
 8000578:	e7db      	b.n	8000532 <__gesf2+0x3a>
 800057a:	2400      	movs	r4, #0
 800057c:	42a2      	cmp	r2, r4
 800057e:	dc04      	bgt.n	800058a <__gesf2+0x92>
 8000580:	42b5      	cmp	r5, r6
 8000582:	d8d2      	bhi.n	800052a <__gesf2+0x32>
 8000584:	2000      	movs	r0, #0
 8000586:	42b5      	cmp	r5, r6
 8000588:	d2d3      	bcs.n	8000532 <__gesf2+0x3a>
 800058a:	1e58      	subs	r0, r3, #1
 800058c:	2301      	movs	r3, #1
 800058e:	4398      	bics	r0, r3
 8000590:	3001      	adds	r0, #1
 8000592:	e7ce      	b.n	8000532 <__gesf2+0x3a>

08000594 <__lesf2>:
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	0042      	lsls	r2, r0, #1
 8000598:	0244      	lsls	r4, r0, #9
 800059a:	024d      	lsls	r5, r1, #9
 800059c:	0fc3      	lsrs	r3, r0, #31
 800059e:	0048      	lsls	r0, r1, #1
 80005a0:	0a64      	lsrs	r4, r4, #9
 80005a2:	0e12      	lsrs	r2, r2, #24
 80005a4:	0a6d      	lsrs	r5, r5, #9
 80005a6:	0e00      	lsrs	r0, r0, #24
 80005a8:	0fc9      	lsrs	r1, r1, #31
 80005aa:	2aff      	cmp	r2, #255	; 0xff
 80005ac:	d012      	beq.n	80005d4 <__lesf2+0x40>
 80005ae:	28ff      	cmp	r0, #255	; 0xff
 80005b0:	d00c      	beq.n	80005cc <__lesf2+0x38>
 80005b2:	2a00      	cmp	r2, #0
 80005b4:	d112      	bne.n	80005dc <__lesf2+0x48>
 80005b6:	2800      	cmp	r0, #0
 80005b8:	d119      	bne.n	80005ee <__lesf2+0x5a>
 80005ba:	2d00      	cmp	r5, #0
 80005bc:	d117      	bne.n	80005ee <__lesf2+0x5a>
 80005be:	2c00      	cmp	r4, #0
 80005c0:	d02b      	beq.n	800061a <__lesf2+0x86>
 80005c2:	2002      	movs	r0, #2
 80005c4:	3b01      	subs	r3, #1
 80005c6:	4018      	ands	r0, r3
 80005c8:	3801      	subs	r0, #1
 80005ca:	e026      	b.n	800061a <__lesf2+0x86>
 80005cc:	2d00      	cmp	r5, #0
 80005ce:	d0f0      	beq.n	80005b2 <__lesf2+0x1e>
 80005d0:	2002      	movs	r0, #2
 80005d2:	e022      	b.n	800061a <__lesf2+0x86>
 80005d4:	2c00      	cmp	r4, #0
 80005d6:	d1fb      	bne.n	80005d0 <__lesf2+0x3c>
 80005d8:	28ff      	cmp	r0, #255	; 0xff
 80005da:	d01f      	beq.n	800061c <__lesf2+0x88>
 80005dc:	2800      	cmp	r0, #0
 80005de:	d11f      	bne.n	8000620 <__lesf2+0x8c>
 80005e0:	2d00      	cmp	r5, #0
 80005e2:	d11d      	bne.n	8000620 <__lesf2+0x8c>
 80005e4:	2002      	movs	r0, #2
 80005e6:	3b01      	subs	r3, #1
 80005e8:	4018      	ands	r0, r3
 80005ea:	3801      	subs	r0, #1
 80005ec:	e015      	b.n	800061a <__lesf2+0x86>
 80005ee:	2c00      	cmp	r4, #0
 80005f0:	d00e      	beq.n	8000610 <__lesf2+0x7c>
 80005f2:	428b      	cmp	r3, r1
 80005f4:	d1e5      	bne.n	80005c2 <__lesf2+0x2e>
 80005f6:	2200      	movs	r2, #0
 80005f8:	4290      	cmp	r0, r2
 80005fa:	dc04      	bgt.n	8000606 <__lesf2+0x72>
 80005fc:	42ac      	cmp	r4, r5
 80005fe:	d8e0      	bhi.n	80005c2 <__lesf2+0x2e>
 8000600:	2000      	movs	r0, #0
 8000602:	42ac      	cmp	r4, r5
 8000604:	d209      	bcs.n	800061a <__lesf2+0x86>
 8000606:	1e58      	subs	r0, r3, #1
 8000608:	2301      	movs	r3, #1
 800060a:	4398      	bics	r0, r3
 800060c:	3001      	adds	r0, #1
 800060e:	e004      	b.n	800061a <__lesf2+0x86>
 8000610:	2301      	movs	r3, #1
 8000612:	3901      	subs	r1, #1
 8000614:	4399      	bics	r1, r3
 8000616:	0008      	movs	r0, r1
 8000618:	3001      	adds	r0, #1
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	2d00      	cmp	r5, #0
 800061e:	d1d7      	bne.n	80005d0 <__lesf2+0x3c>
 8000620:	428b      	cmp	r3, r1
 8000622:	d1ce      	bne.n	80005c2 <__lesf2+0x2e>
 8000624:	4282      	cmp	r2, r0
 8000626:	dde7      	ble.n	80005f8 <__lesf2+0x64>
 8000628:	2102      	movs	r1, #2
 800062a:	1e58      	subs	r0, r3, #1
 800062c:	4008      	ands	r0, r1
 800062e:	3801      	subs	r0, #1
 8000630:	e7f3      	b.n	800061a <__lesf2+0x86>
 8000632:	46c0      	nop			; (mov r8, r8)

08000634 <__aeabi_fsub>:
 8000634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000636:	4647      	mov	r7, r8
 8000638:	46ce      	mov	lr, r9
 800063a:	0044      	lsls	r4, r0, #1
 800063c:	0fc2      	lsrs	r2, r0, #31
 800063e:	b580      	push	{r7, lr}
 8000640:	0247      	lsls	r7, r0, #9
 8000642:	0248      	lsls	r0, r1, #9
 8000644:	0a40      	lsrs	r0, r0, #9
 8000646:	4684      	mov	ip, r0
 8000648:	4666      	mov	r6, ip
 800064a:	0048      	lsls	r0, r1, #1
 800064c:	0a7f      	lsrs	r7, r7, #9
 800064e:	0e24      	lsrs	r4, r4, #24
 8000650:	00f6      	lsls	r6, r6, #3
 8000652:	0025      	movs	r5, r4
 8000654:	4690      	mov	r8, r2
 8000656:	00fb      	lsls	r3, r7, #3
 8000658:	0e00      	lsrs	r0, r0, #24
 800065a:	0fc9      	lsrs	r1, r1, #31
 800065c:	46b1      	mov	r9, r6
 800065e:	28ff      	cmp	r0, #255	; 0xff
 8000660:	d100      	bne.n	8000664 <__aeabi_fsub+0x30>
 8000662:	e085      	b.n	8000770 <__aeabi_fsub+0x13c>
 8000664:	2601      	movs	r6, #1
 8000666:	4071      	eors	r1, r6
 8000668:	1a26      	subs	r6, r4, r0
 800066a:	4291      	cmp	r1, r2
 800066c:	d057      	beq.n	800071e <__aeabi_fsub+0xea>
 800066e:	2e00      	cmp	r6, #0
 8000670:	dd43      	ble.n	80006fa <__aeabi_fsub+0xc6>
 8000672:	2800      	cmp	r0, #0
 8000674:	d000      	beq.n	8000678 <__aeabi_fsub+0x44>
 8000676:	e07f      	b.n	8000778 <__aeabi_fsub+0x144>
 8000678:	4649      	mov	r1, r9
 800067a:	2900      	cmp	r1, #0
 800067c:	d100      	bne.n	8000680 <__aeabi_fsub+0x4c>
 800067e:	e0aa      	b.n	80007d6 <__aeabi_fsub+0x1a2>
 8000680:	3e01      	subs	r6, #1
 8000682:	2e00      	cmp	r6, #0
 8000684:	d000      	beq.n	8000688 <__aeabi_fsub+0x54>
 8000686:	e0f7      	b.n	8000878 <__aeabi_fsub+0x244>
 8000688:	1a5b      	subs	r3, r3, r1
 800068a:	015a      	lsls	r2, r3, #5
 800068c:	d400      	bmi.n	8000690 <__aeabi_fsub+0x5c>
 800068e:	e08b      	b.n	80007a8 <__aeabi_fsub+0x174>
 8000690:	019b      	lsls	r3, r3, #6
 8000692:	099c      	lsrs	r4, r3, #6
 8000694:	0020      	movs	r0, r4
 8000696:	f001 f815 	bl	80016c4 <__clzsi2>
 800069a:	3805      	subs	r0, #5
 800069c:	4084      	lsls	r4, r0
 800069e:	4285      	cmp	r5, r0
 80006a0:	dd00      	ble.n	80006a4 <__aeabi_fsub+0x70>
 80006a2:	e0d3      	b.n	800084c <__aeabi_fsub+0x218>
 80006a4:	1b45      	subs	r5, r0, r5
 80006a6:	0023      	movs	r3, r4
 80006a8:	2020      	movs	r0, #32
 80006aa:	3501      	adds	r5, #1
 80006ac:	40eb      	lsrs	r3, r5
 80006ae:	1b45      	subs	r5, r0, r5
 80006b0:	40ac      	lsls	r4, r5
 80006b2:	1e62      	subs	r2, r4, #1
 80006b4:	4194      	sbcs	r4, r2
 80006b6:	4323      	orrs	r3, r4
 80006b8:	2407      	movs	r4, #7
 80006ba:	2500      	movs	r5, #0
 80006bc:	401c      	ands	r4, r3
 80006be:	2201      	movs	r2, #1
 80006c0:	4641      	mov	r1, r8
 80006c2:	400a      	ands	r2, r1
 80006c4:	2c00      	cmp	r4, #0
 80006c6:	d004      	beq.n	80006d2 <__aeabi_fsub+0x9e>
 80006c8:	210f      	movs	r1, #15
 80006ca:	4019      	ands	r1, r3
 80006cc:	2904      	cmp	r1, #4
 80006ce:	d000      	beq.n	80006d2 <__aeabi_fsub+0x9e>
 80006d0:	3304      	adds	r3, #4
 80006d2:	0159      	lsls	r1, r3, #5
 80006d4:	d400      	bmi.n	80006d8 <__aeabi_fsub+0xa4>
 80006d6:	e080      	b.n	80007da <__aeabi_fsub+0x1a6>
 80006d8:	3501      	adds	r5, #1
 80006da:	b2ec      	uxtb	r4, r5
 80006dc:	2dff      	cmp	r5, #255	; 0xff
 80006de:	d000      	beq.n	80006e2 <__aeabi_fsub+0xae>
 80006e0:	e0a3      	b.n	800082a <__aeabi_fsub+0x1f6>
 80006e2:	24ff      	movs	r4, #255	; 0xff
 80006e4:	2300      	movs	r3, #0
 80006e6:	025b      	lsls	r3, r3, #9
 80006e8:	05e4      	lsls	r4, r4, #23
 80006ea:	0a58      	lsrs	r0, r3, #9
 80006ec:	07d2      	lsls	r2, r2, #31
 80006ee:	4320      	orrs	r0, r4
 80006f0:	4310      	orrs	r0, r2
 80006f2:	bc0c      	pop	{r2, r3}
 80006f4:	4690      	mov	r8, r2
 80006f6:	4699      	mov	r9, r3
 80006f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006fa:	2e00      	cmp	r6, #0
 80006fc:	d174      	bne.n	80007e8 <__aeabi_fsub+0x1b4>
 80006fe:	1c60      	adds	r0, r4, #1
 8000700:	b2c0      	uxtb	r0, r0
 8000702:	2801      	cmp	r0, #1
 8000704:	dc00      	bgt.n	8000708 <__aeabi_fsub+0xd4>
 8000706:	e0a7      	b.n	8000858 <__aeabi_fsub+0x224>
 8000708:	464a      	mov	r2, r9
 800070a:	1a9c      	subs	r4, r3, r2
 800070c:	0162      	lsls	r2, r4, #5
 800070e:	d500      	bpl.n	8000712 <__aeabi_fsub+0xde>
 8000710:	e0b6      	b.n	8000880 <__aeabi_fsub+0x24c>
 8000712:	2c00      	cmp	r4, #0
 8000714:	d1be      	bne.n	8000694 <__aeabi_fsub+0x60>
 8000716:	2200      	movs	r2, #0
 8000718:	2400      	movs	r4, #0
 800071a:	2300      	movs	r3, #0
 800071c:	e7e3      	b.n	80006e6 <__aeabi_fsub+0xb2>
 800071e:	2e00      	cmp	r6, #0
 8000720:	dc00      	bgt.n	8000724 <__aeabi_fsub+0xf0>
 8000722:	e085      	b.n	8000830 <__aeabi_fsub+0x1fc>
 8000724:	2800      	cmp	r0, #0
 8000726:	d046      	beq.n	80007b6 <__aeabi_fsub+0x182>
 8000728:	2cff      	cmp	r4, #255	; 0xff
 800072a:	d049      	beq.n	80007c0 <__aeabi_fsub+0x18c>
 800072c:	2280      	movs	r2, #128	; 0x80
 800072e:	4648      	mov	r0, r9
 8000730:	04d2      	lsls	r2, r2, #19
 8000732:	4310      	orrs	r0, r2
 8000734:	4681      	mov	r9, r0
 8000736:	2201      	movs	r2, #1
 8000738:	2e1b      	cmp	r6, #27
 800073a:	dc09      	bgt.n	8000750 <__aeabi_fsub+0x11c>
 800073c:	2020      	movs	r0, #32
 800073e:	464c      	mov	r4, r9
 8000740:	1b80      	subs	r0, r0, r6
 8000742:	4084      	lsls	r4, r0
 8000744:	464a      	mov	r2, r9
 8000746:	0020      	movs	r0, r4
 8000748:	40f2      	lsrs	r2, r6
 800074a:	1e44      	subs	r4, r0, #1
 800074c:	41a0      	sbcs	r0, r4
 800074e:	4302      	orrs	r2, r0
 8000750:	189b      	adds	r3, r3, r2
 8000752:	015a      	lsls	r2, r3, #5
 8000754:	d528      	bpl.n	80007a8 <__aeabi_fsub+0x174>
 8000756:	3501      	adds	r5, #1
 8000758:	2dff      	cmp	r5, #255	; 0xff
 800075a:	d100      	bne.n	800075e <__aeabi_fsub+0x12a>
 800075c:	e0a8      	b.n	80008b0 <__aeabi_fsub+0x27c>
 800075e:	2201      	movs	r2, #1
 8000760:	2407      	movs	r4, #7
 8000762:	4994      	ldr	r1, [pc, #592]	; (80009b4 <__aeabi_fsub+0x380>)
 8000764:	401a      	ands	r2, r3
 8000766:	085b      	lsrs	r3, r3, #1
 8000768:	400b      	ands	r3, r1
 800076a:	4313      	orrs	r3, r2
 800076c:	401c      	ands	r4, r3
 800076e:	e7a6      	b.n	80006be <__aeabi_fsub+0x8a>
 8000770:	2e00      	cmp	r6, #0
 8000772:	d000      	beq.n	8000776 <__aeabi_fsub+0x142>
 8000774:	e778      	b.n	8000668 <__aeabi_fsub+0x34>
 8000776:	e775      	b.n	8000664 <__aeabi_fsub+0x30>
 8000778:	2cff      	cmp	r4, #255	; 0xff
 800077a:	d054      	beq.n	8000826 <__aeabi_fsub+0x1f2>
 800077c:	2280      	movs	r2, #128	; 0x80
 800077e:	4649      	mov	r1, r9
 8000780:	04d2      	lsls	r2, r2, #19
 8000782:	4311      	orrs	r1, r2
 8000784:	4689      	mov	r9, r1
 8000786:	2201      	movs	r2, #1
 8000788:	2e1b      	cmp	r6, #27
 800078a:	dc09      	bgt.n	80007a0 <__aeabi_fsub+0x16c>
 800078c:	2120      	movs	r1, #32
 800078e:	4648      	mov	r0, r9
 8000790:	1b89      	subs	r1, r1, r6
 8000792:	4088      	lsls	r0, r1
 8000794:	464a      	mov	r2, r9
 8000796:	0001      	movs	r1, r0
 8000798:	40f2      	lsrs	r2, r6
 800079a:	1e48      	subs	r0, r1, #1
 800079c:	4181      	sbcs	r1, r0
 800079e:	430a      	orrs	r2, r1
 80007a0:	1a9b      	subs	r3, r3, r2
 80007a2:	015a      	lsls	r2, r3, #5
 80007a4:	d500      	bpl.n	80007a8 <__aeabi_fsub+0x174>
 80007a6:	e773      	b.n	8000690 <__aeabi_fsub+0x5c>
 80007a8:	2201      	movs	r2, #1
 80007aa:	4641      	mov	r1, r8
 80007ac:	400a      	ands	r2, r1
 80007ae:	0759      	lsls	r1, r3, #29
 80007b0:	d000      	beq.n	80007b4 <__aeabi_fsub+0x180>
 80007b2:	e789      	b.n	80006c8 <__aeabi_fsub+0x94>
 80007b4:	e011      	b.n	80007da <__aeabi_fsub+0x1a6>
 80007b6:	4648      	mov	r0, r9
 80007b8:	2800      	cmp	r0, #0
 80007ba:	d158      	bne.n	800086e <__aeabi_fsub+0x23a>
 80007bc:	2cff      	cmp	r4, #255	; 0xff
 80007be:	d10c      	bne.n	80007da <__aeabi_fsub+0x1a6>
 80007c0:	08db      	lsrs	r3, r3, #3
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d100      	bne.n	80007c8 <__aeabi_fsub+0x194>
 80007c6:	e78c      	b.n	80006e2 <__aeabi_fsub+0xae>
 80007c8:	2080      	movs	r0, #128	; 0x80
 80007ca:	03c0      	lsls	r0, r0, #15
 80007cc:	4303      	orrs	r3, r0
 80007ce:	025b      	lsls	r3, r3, #9
 80007d0:	0a5b      	lsrs	r3, r3, #9
 80007d2:	24ff      	movs	r4, #255	; 0xff
 80007d4:	e787      	b.n	80006e6 <__aeabi_fsub+0xb2>
 80007d6:	2cff      	cmp	r4, #255	; 0xff
 80007d8:	d025      	beq.n	8000826 <__aeabi_fsub+0x1f2>
 80007da:	08db      	lsrs	r3, r3, #3
 80007dc:	2dff      	cmp	r5, #255	; 0xff
 80007de:	d0f0      	beq.n	80007c2 <__aeabi_fsub+0x18e>
 80007e0:	025b      	lsls	r3, r3, #9
 80007e2:	0a5b      	lsrs	r3, r3, #9
 80007e4:	b2ec      	uxtb	r4, r5
 80007e6:	e77e      	b.n	80006e6 <__aeabi_fsub+0xb2>
 80007e8:	2c00      	cmp	r4, #0
 80007ea:	d04d      	beq.n	8000888 <__aeabi_fsub+0x254>
 80007ec:	28ff      	cmp	r0, #255	; 0xff
 80007ee:	d018      	beq.n	8000822 <__aeabi_fsub+0x1ee>
 80007f0:	2480      	movs	r4, #128	; 0x80
 80007f2:	04e4      	lsls	r4, r4, #19
 80007f4:	4272      	negs	r2, r6
 80007f6:	4323      	orrs	r3, r4
 80007f8:	2a1b      	cmp	r2, #27
 80007fa:	dd00      	ble.n	80007fe <__aeabi_fsub+0x1ca>
 80007fc:	e0c4      	b.n	8000988 <__aeabi_fsub+0x354>
 80007fe:	001c      	movs	r4, r3
 8000800:	2520      	movs	r5, #32
 8000802:	40d4      	lsrs	r4, r2
 8000804:	1aaa      	subs	r2, r5, r2
 8000806:	4093      	lsls	r3, r2
 8000808:	1e5a      	subs	r2, r3, #1
 800080a:	4193      	sbcs	r3, r2
 800080c:	4323      	orrs	r3, r4
 800080e:	464a      	mov	r2, r9
 8000810:	0005      	movs	r5, r0
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	4688      	mov	r8, r1
 8000816:	e738      	b.n	800068a <__aeabi_fsub+0x56>
 8000818:	1c72      	adds	r2, r6, #1
 800081a:	d0f8      	beq.n	800080e <__aeabi_fsub+0x1da>
 800081c:	43f2      	mvns	r2, r6
 800081e:	28ff      	cmp	r0, #255	; 0xff
 8000820:	d1ea      	bne.n	80007f8 <__aeabi_fsub+0x1c4>
 8000822:	000a      	movs	r2, r1
 8000824:	464b      	mov	r3, r9
 8000826:	25ff      	movs	r5, #255	; 0xff
 8000828:	e7d7      	b.n	80007da <__aeabi_fsub+0x1a6>
 800082a:	019b      	lsls	r3, r3, #6
 800082c:	0a5b      	lsrs	r3, r3, #9
 800082e:	e75a      	b.n	80006e6 <__aeabi_fsub+0xb2>
 8000830:	2e00      	cmp	r6, #0
 8000832:	d141      	bne.n	80008b8 <__aeabi_fsub+0x284>
 8000834:	1c65      	adds	r5, r4, #1
 8000836:	b2e9      	uxtb	r1, r5
 8000838:	2901      	cmp	r1, #1
 800083a:	dd45      	ble.n	80008c8 <__aeabi_fsub+0x294>
 800083c:	2dff      	cmp	r5, #255	; 0xff
 800083e:	d100      	bne.n	8000842 <__aeabi_fsub+0x20e>
 8000840:	e74f      	b.n	80006e2 <__aeabi_fsub+0xae>
 8000842:	2407      	movs	r4, #7
 8000844:	444b      	add	r3, r9
 8000846:	085b      	lsrs	r3, r3, #1
 8000848:	401c      	ands	r4, r3
 800084a:	e738      	b.n	80006be <__aeabi_fsub+0x8a>
 800084c:	2207      	movs	r2, #7
 800084e:	4b5a      	ldr	r3, [pc, #360]	; (80009b8 <__aeabi_fsub+0x384>)
 8000850:	1a2d      	subs	r5, r5, r0
 8000852:	4023      	ands	r3, r4
 8000854:	4014      	ands	r4, r2
 8000856:	e732      	b.n	80006be <__aeabi_fsub+0x8a>
 8000858:	2c00      	cmp	r4, #0
 800085a:	d11d      	bne.n	8000898 <__aeabi_fsub+0x264>
 800085c:	2b00      	cmp	r3, #0
 800085e:	d17a      	bne.n	8000956 <__aeabi_fsub+0x322>
 8000860:	464b      	mov	r3, r9
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_fsub+0x234>
 8000866:	e091      	b.n	800098c <__aeabi_fsub+0x358>
 8000868:	000a      	movs	r2, r1
 800086a:	2500      	movs	r5, #0
 800086c:	e7b5      	b.n	80007da <__aeabi_fsub+0x1a6>
 800086e:	3e01      	subs	r6, #1
 8000870:	2e00      	cmp	r6, #0
 8000872:	d119      	bne.n	80008a8 <__aeabi_fsub+0x274>
 8000874:	444b      	add	r3, r9
 8000876:	e76c      	b.n	8000752 <__aeabi_fsub+0x11e>
 8000878:	2cff      	cmp	r4, #255	; 0xff
 800087a:	d184      	bne.n	8000786 <__aeabi_fsub+0x152>
 800087c:	25ff      	movs	r5, #255	; 0xff
 800087e:	e7ac      	b.n	80007da <__aeabi_fsub+0x1a6>
 8000880:	464a      	mov	r2, r9
 8000882:	4688      	mov	r8, r1
 8000884:	1ad4      	subs	r4, r2, r3
 8000886:	e705      	b.n	8000694 <__aeabi_fsub+0x60>
 8000888:	2b00      	cmp	r3, #0
 800088a:	d1c5      	bne.n	8000818 <__aeabi_fsub+0x1e4>
 800088c:	000a      	movs	r2, r1
 800088e:	28ff      	cmp	r0, #255	; 0xff
 8000890:	d0c8      	beq.n	8000824 <__aeabi_fsub+0x1f0>
 8000892:	0005      	movs	r5, r0
 8000894:	464b      	mov	r3, r9
 8000896:	e7a0      	b.n	80007da <__aeabi_fsub+0x1a6>
 8000898:	2b00      	cmp	r3, #0
 800089a:	d149      	bne.n	8000930 <__aeabi_fsub+0x2fc>
 800089c:	464b      	mov	r3, r9
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d077      	beq.n	8000992 <__aeabi_fsub+0x35e>
 80008a2:	000a      	movs	r2, r1
 80008a4:	25ff      	movs	r5, #255	; 0xff
 80008a6:	e798      	b.n	80007da <__aeabi_fsub+0x1a6>
 80008a8:	2cff      	cmp	r4, #255	; 0xff
 80008aa:	d000      	beq.n	80008ae <__aeabi_fsub+0x27a>
 80008ac:	e743      	b.n	8000736 <__aeabi_fsub+0x102>
 80008ae:	e787      	b.n	80007c0 <__aeabi_fsub+0x18c>
 80008b0:	000a      	movs	r2, r1
 80008b2:	24ff      	movs	r4, #255	; 0xff
 80008b4:	2300      	movs	r3, #0
 80008b6:	e716      	b.n	80006e6 <__aeabi_fsub+0xb2>
 80008b8:	2c00      	cmp	r4, #0
 80008ba:	d115      	bne.n	80008e8 <__aeabi_fsub+0x2b4>
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d157      	bne.n	8000970 <__aeabi_fsub+0x33c>
 80008c0:	28ff      	cmp	r0, #255	; 0xff
 80008c2:	d1e6      	bne.n	8000892 <__aeabi_fsub+0x25e>
 80008c4:	464b      	mov	r3, r9
 80008c6:	e77b      	b.n	80007c0 <__aeabi_fsub+0x18c>
 80008c8:	2c00      	cmp	r4, #0
 80008ca:	d120      	bne.n	800090e <__aeabi_fsub+0x2da>
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d057      	beq.n	8000980 <__aeabi_fsub+0x34c>
 80008d0:	4649      	mov	r1, r9
 80008d2:	2900      	cmp	r1, #0
 80008d4:	d053      	beq.n	800097e <__aeabi_fsub+0x34a>
 80008d6:	444b      	add	r3, r9
 80008d8:	015a      	lsls	r2, r3, #5
 80008da:	d568      	bpl.n	80009ae <__aeabi_fsub+0x37a>
 80008dc:	2407      	movs	r4, #7
 80008de:	4a36      	ldr	r2, [pc, #216]	; (80009b8 <__aeabi_fsub+0x384>)
 80008e0:	401c      	ands	r4, r3
 80008e2:	2501      	movs	r5, #1
 80008e4:	4013      	ands	r3, r2
 80008e6:	e6ea      	b.n	80006be <__aeabi_fsub+0x8a>
 80008e8:	28ff      	cmp	r0, #255	; 0xff
 80008ea:	d0eb      	beq.n	80008c4 <__aeabi_fsub+0x290>
 80008ec:	2280      	movs	r2, #128	; 0x80
 80008ee:	04d2      	lsls	r2, r2, #19
 80008f0:	4276      	negs	r6, r6
 80008f2:	4313      	orrs	r3, r2
 80008f4:	2e1b      	cmp	r6, #27
 80008f6:	dc53      	bgt.n	80009a0 <__aeabi_fsub+0x36c>
 80008f8:	2520      	movs	r5, #32
 80008fa:	1bad      	subs	r5, r5, r6
 80008fc:	001a      	movs	r2, r3
 80008fe:	40ab      	lsls	r3, r5
 8000900:	40f2      	lsrs	r2, r6
 8000902:	1e5c      	subs	r4, r3, #1
 8000904:	41a3      	sbcs	r3, r4
 8000906:	4313      	orrs	r3, r2
 8000908:	444b      	add	r3, r9
 800090a:	0005      	movs	r5, r0
 800090c:	e721      	b.n	8000752 <__aeabi_fsub+0x11e>
 800090e:	2b00      	cmp	r3, #0
 8000910:	d0d8      	beq.n	80008c4 <__aeabi_fsub+0x290>
 8000912:	4649      	mov	r1, r9
 8000914:	2900      	cmp	r1, #0
 8000916:	d100      	bne.n	800091a <__aeabi_fsub+0x2e6>
 8000918:	e752      	b.n	80007c0 <__aeabi_fsub+0x18c>
 800091a:	2180      	movs	r1, #128	; 0x80
 800091c:	03c9      	lsls	r1, r1, #15
 800091e:	420f      	tst	r7, r1
 8000920:	d100      	bne.n	8000924 <__aeabi_fsub+0x2f0>
 8000922:	e74d      	b.n	80007c0 <__aeabi_fsub+0x18c>
 8000924:	4660      	mov	r0, ip
 8000926:	4208      	tst	r0, r1
 8000928:	d000      	beq.n	800092c <__aeabi_fsub+0x2f8>
 800092a:	e749      	b.n	80007c0 <__aeabi_fsub+0x18c>
 800092c:	464b      	mov	r3, r9
 800092e:	e747      	b.n	80007c0 <__aeabi_fsub+0x18c>
 8000930:	4648      	mov	r0, r9
 8000932:	25ff      	movs	r5, #255	; 0xff
 8000934:	2800      	cmp	r0, #0
 8000936:	d100      	bne.n	800093a <__aeabi_fsub+0x306>
 8000938:	e74f      	b.n	80007da <__aeabi_fsub+0x1a6>
 800093a:	2280      	movs	r2, #128	; 0x80
 800093c:	03d2      	lsls	r2, r2, #15
 800093e:	4217      	tst	r7, r2
 8000940:	d004      	beq.n	800094c <__aeabi_fsub+0x318>
 8000942:	4660      	mov	r0, ip
 8000944:	4210      	tst	r0, r2
 8000946:	d101      	bne.n	800094c <__aeabi_fsub+0x318>
 8000948:	464b      	mov	r3, r9
 800094a:	4688      	mov	r8, r1
 800094c:	2201      	movs	r2, #1
 800094e:	4641      	mov	r1, r8
 8000950:	25ff      	movs	r5, #255	; 0xff
 8000952:	400a      	ands	r2, r1
 8000954:	e741      	b.n	80007da <__aeabi_fsub+0x1a6>
 8000956:	4648      	mov	r0, r9
 8000958:	2800      	cmp	r0, #0
 800095a:	d01f      	beq.n	800099c <__aeabi_fsub+0x368>
 800095c:	1a1a      	subs	r2, r3, r0
 800095e:	0150      	lsls	r0, r2, #5
 8000960:	d520      	bpl.n	80009a4 <__aeabi_fsub+0x370>
 8000962:	464a      	mov	r2, r9
 8000964:	2407      	movs	r4, #7
 8000966:	1ad3      	subs	r3, r2, r3
 8000968:	401c      	ands	r4, r3
 800096a:	4688      	mov	r8, r1
 800096c:	2500      	movs	r5, #0
 800096e:	e6a6      	b.n	80006be <__aeabi_fsub+0x8a>
 8000970:	1c74      	adds	r4, r6, #1
 8000972:	d0c9      	beq.n	8000908 <__aeabi_fsub+0x2d4>
 8000974:	43f6      	mvns	r6, r6
 8000976:	28ff      	cmp	r0, #255	; 0xff
 8000978:	d1bc      	bne.n	80008f4 <__aeabi_fsub+0x2c0>
 800097a:	464b      	mov	r3, r9
 800097c:	e720      	b.n	80007c0 <__aeabi_fsub+0x18c>
 800097e:	4699      	mov	r9, r3
 8000980:	464b      	mov	r3, r9
 8000982:	2500      	movs	r5, #0
 8000984:	08db      	lsrs	r3, r3, #3
 8000986:	e72b      	b.n	80007e0 <__aeabi_fsub+0x1ac>
 8000988:	2301      	movs	r3, #1
 800098a:	e740      	b.n	800080e <__aeabi_fsub+0x1da>
 800098c:	2200      	movs	r2, #0
 800098e:	2300      	movs	r3, #0
 8000990:	e6a9      	b.n	80006e6 <__aeabi_fsub+0xb2>
 8000992:	2380      	movs	r3, #128	; 0x80
 8000994:	2200      	movs	r2, #0
 8000996:	03db      	lsls	r3, r3, #15
 8000998:	24ff      	movs	r4, #255	; 0xff
 800099a:	e6a4      	b.n	80006e6 <__aeabi_fsub+0xb2>
 800099c:	2500      	movs	r5, #0
 800099e:	e71c      	b.n	80007da <__aeabi_fsub+0x1a6>
 80009a0:	2301      	movs	r3, #1
 80009a2:	e7b1      	b.n	8000908 <__aeabi_fsub+0x2d4>
 80009a4:	2a00      	cmp	r2, #0
 80009a6:	d0f1      	beq.n	800098c <__aeabi_fsub+0x358>
 80009a8:	0013      	movs	r3, r2
 80009aa:	2500      	movs	r5, #0
 80009ac:	e6fc      	b.n	80007a8 <__aeabi_fsub+0x174>
 80009ae:	2500      	movs	r5, #0
 80009b0:	e6fa      	b.n	80007a8 <__aeabi_fsub+0x174>
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	7dffffff 	.word	0x7dffffff
 80009b8:	fbffffff 	.word	0xfbffffff

080009bc <__aeabi_f2iz>:
 80009bc:	0241      	lsls	r1, r0, #9
 80009be:	0042      	lsls	r2, r0, #1
 80009c0:	0fc3      	lsrs	r3, r0, #31
 80009c2:	0a49      	lsrs	r1, r1, #9
 80009c4:	0e12      	lsrs	r2, r2, #24
 80009c6:	2000      	movs	r0, #0
 80009c8:	2a7e      	cmp	r2, #126	; 0x7e
 80009ca:	d90d      	bls.n	80009e8 <__aeabi_f2iz+0x2c>
 80009cc:	2a9d      	cmp	r2, #157	; 0x9d
 80009ce:	d80c      	bhi.n	80009ea <__aeabi_f2iz+0x2e>
 80009d0:	2080      	movs	r0, #128	; 0x80
 80009d2:	0400      	lsls	r0, r0, #16
 80009d4:	4301      	orrs	r1, r0
 80009d6:	2a95      	cmp	r2, #149	; 0x95
 80009d8:	dc0a      	bgt.n	80009f0 <__aeabi_f2iz+0x34>
 80009da:	2096      	movs	r0, #150	; 0x96
 80009dc:	1a82      	subs	r2, r0, r2
 80009de:	40d1      	lsrs	r1, r2
 80009e0:	4248      	negs	r0, r1
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d100      	bne.n	80009e8 <__aeabi_f2iz+0x2c>
 80009e6:	0008      	movs	r0, r1
 80009e8:	4770      	bx	lr
 80009ea:	4a03      	ldr	r2, [pc, #12]	; (80009f8 <__aeabi_f2iz+0x3c>)
 80009ec:	1898      	adds	r0, r3, r2
 80009ee:	e7fb      	b.n	80009e8 <__aeabi_f2iz+0x2c>
 80009f0:	3a96      	subs	r2, #150	; 0x96
 80009f2:	4091      	lsls	r1, r2
 80009f4:	e7f4      	b.n	80009e0 <__aeabi_f2iz+0x24>
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	7fffffff 	.word	0x7fffffff

080009fc <__aeabi_ddiv>:
 80009fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009fe:	4657      	mov	r7, sl
 8000a00:	46de      	mov	lr, fp
 8000a02:	464e      	mov	r6, r9
 8000a04:	4645      	mov	r5, r8
 8000a06:	b5e0      	push	{r5, r6, r7, lr}
 8000a08:	4683      	mov	fp, r0
 8000a0a:	0007      	movs	r7, r0
 8000a0c:	030e      	lsls	r6, r1, #12
 8000a0e:	0048      	lsls	r0, r1, #1
 8000a10:	b085      	sub	sp, #20
 8000a12:	4692      	mov	sl, r2
 8000a14:	001c      	movs	r4, r3
 8000a16:	0b36      	lsrs	r6, r6, #12
 8000a18:	0d40      	lsrs	r0, r0, #21
 8000a1a:	0fcd      	lsrs	r5, r1, #31
 8000a1c:	2800      	cmp	r0, #0
 8000a1e:	d100      	bne.n	8000a22 <__aeabi_ddiv+0x26>
 8000a20:	e09d      	b.n	8000b5e <__aeabi_ddiv+0x162>
 8000a22:	4b95      	ldr	r3, [pc, #596]	; (8000c78 <__aeabi_ddiv+0x27c>)
 8000a24:	4298      	cmp	r0, r3
 8000a26:	d039      	beq.n	8000a9c <__aeabi_ddiv+0xa0>
 8000a28:	2380      	movs	r3, #128	; 0x80
 8000a2a:	00f6      	lsls	r6, r6, #3
 8000a2c:	041b      	lsls	r3, r3, #16
 8000a2e:	431e      	orrs	r6, r3
 8000a30:	4a92      	ldr	r2, [pc, #584]	; (8000c7c <__aeabi_ddiv+0x280>)
 8000a32:	0f7b      	lsrs	r3, r7, #29
 8000a34:	4333      	orrs	r3, r6
 8000a36:	4699      	mov	r9, r3
 8000a38:	4694      	mov	ip, r2
 8000a3a:	0003      	movs	r3, r0
 8000a3c:	4463      	add	r3, ip
 8000a3e:	9300      	str	r3, [sp, #0]
 8000a40:	2300      	movs	r3, #0
 8000a42:	2600      	movs	r6, #0
 8000a44:	00ff      	lsls	r7, r7, #3
 8000a46:	9302      	str	r3, [sp, #8]
 8000a48:	0323      	lsls	r3, r4, #12
 8000a4a:	0b1b      	lsrs	r3, r3, #12
 8000a4c:	4698      	mov	r8, r3
 8000a4e:	0063      	lsls	r3, r4, #1
 8000a50:	0fe4      	lsrs	r4, r4, #31
 8000a52:	4652      	mov	r2, sl
 8000a54:	0d5b      	lsrs	r3, r3, #21
 8000a56:	9401      	str	r4, [sp, #4]
 8000a58:	d100      	bne.n	8000a5c <__aeabi_ddiv+0x60>
 8000a5a:	e0b3      	b.n	8000bc4 <__aeabi_ddiv+0x1c8>
 8000a5c:	4986      	ldr	r1, [pc, #536]	; (8000c78 <__aeabi_ddiv+0x27c>)
 8000a5e:	428b      	cmp	r3, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_ddiv+0x68>
 8000a62:	e09e      	b.n	8000ba2 <__aeabi_ddiv+0x1a6>
 8000a64:	4642      	mov	r2, r8
 8000a66:	00d1      	lsls	r1, r2, #3
 8000a68:	2280      	movs	r2, #128	; 0x80
 8000a6a:	0412      	lsls	r2, r2, #16
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	4651      	mov	r1, sl
 8000a70:	0f49      	lsrs	r1, r1, #29
 8000a72:	4311      	orrs	r1, r2
 8000a74:	468b      	mov	fp, r1
 8000a76:	4981      	ldr	r1, [pc, #516]	; (8000c7c <__aeabi_ddiv+0x280>)
 8000a78:	4652      	mov	r2, sl
 8000a7a:	468c      	mov	ip, r1
 8000a7c:	9900      	ldr	r1, [sp, #0]
 8000a7e:	4463      	add	r3, ip
 8000a80:	1acb      	subs	r3, r1, r3
 8000a82:	2100      	movs	r1, #0
 8000a84:	00d2      	lsls	r2, r2, #3
 8000a86:	9300      	str	r3, [sp, #0]
 8000a88:	002b      	movs	r3, r5
 8000a8a:	4063      	eors	r3, r4
 8000a8c:	469a      	mov	sl, r3
 8000a8e:	2e0f      	cmp	r6, #15
 8000a90:	d900      	bls.n	8000a94 <__aeabi_ddiv+0x98>
 8000a92:	e105      	b.n	8000ca0 <__aeabi_ddiv+0x2a4>
 8000a94:	4b7a      	ldr	r3, [pc, #488]	; (8000c80 <__aeabi_ddiv+0x284>)
 8000a96:	00b6      	lsls	r6, r6, #2
 8000a98:	599b      	ldr	r3, [r3, r6]
 8000a9a:	469f      	mov	pc, r3
 8000a9c:	465b      	mov	r3, fp
 8000a9e:	4333      	orrs	r3, r6
 8000aa0:	4699      	mov	r9, r3
 8000aa2:	d000      	beq.n	8000aa6 <__aeabi_ddiv+0xaa>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_ddiv+0x21c>
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	2608      	movs	r6, #8
 8000aaa:	2700      	movs	r7, #0
 8000aac:	9000      	str	r0, [sp, #0]
 8000aae:	9302      	str	r3, [sp, #8]
 8000ab0:	e7ca      	b.n	8000a48 <__aeabi_ddiv+0x4c>
 8000ab2:	46cb      	mov	fp, r9
 8000ab4:	003a      	movs	r2, r7
 8000ab6:	9902      	ldr	r1, [sp, #8]
 8000ab8:	9501      	str	r5, [sp, #4]
 8000aba:	9b01      	ldr	r3, [sp, #4]
 8000abc:	469a      	mov	sl, r3
 8000abe:	2902      	cmp	r1, #2
 8000ac0:	d027      	beq.n	8000b12 <__aeabi_ddiv+0x116>
 8000ac2:	2903      	cmp	r1, #3
 8000ac4:	d100      	bne.n	8000ac8 <__aeabi_ddiv+0xcc>
 8000ac6:	e280      	b.n	8000fca <__aeabi_ddiv+0x5ce>
 8000ac8:	2901      	cmp	r1, #1
 8000aca:	d044      	beq.n	8000b56 <__aeabi_ddiv+0x15a>
 8000acc:	496d      	ldr	r1, [pc, #436]	; (8000c84 <__aeabi_ddiv+0x288>)
 8000ace:	9b00      	ldr	r3, [sp, #0]
 8000ad0:	468c      	mov	ip, r1
 8000ad2:	4463      	add	r3, ip
 8000ad4:	001c      	movs	r4, r3
 8000ad6:	2c00      	cmp	r4, #0
 8000ad8:	dd38      	ble.n	8000b4c <__aeabi_ddiv+0x150>
 8000ada:	0753      	lsls	r3, r2, #29
 8000adc:	d000      	beq.n	8000ae0 <__aeabi_ddiv+0xe4>
 8000ade:	e213      	b.n	8000f08 <__aeabi_ddiv+0x50c>
 8000ae0:	08d2      	lsrs	r2, r2, #3
 8000ae2:	465b      	mov	r3, fp
 8000ae4:	01db      	lsls	r3, r3, #7
 8000ae6:	d509      	bpl.n	8000afc <__aeabi_ddiv+0x100>
 8000ae8:	4659      	mov	r1, fp
 8000aea:	4b67      	ldr	r3, [pc, #412]	; (8000c88 <__aeabi_ddiv+0x28c>)
 8000aec:	4019      	ands	r1, r3
 8000aee:	468b      	mov	fp, r1
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	00c9      	lsls	r1, r1, #3
 8000af4:	468c      	mov	ip, r1
 8000af6:	9b00      	ldr	r3, [sp, #0]
 8000af8:	4463      	add	r3, ip
 8000afa:	001c      	movs	r4, r3
 8000afc:	4b63      	ldr	r3, [pc, #396]	; (8000c8c <__aeabi_ddiv+0x290>)
 8000afe:	429c      	cmp	r4, r3
 8000b00:	dc07      	bgt.n	8000b12 <__aeabi_ddiv+0x116>
 8000b02:	465b      	mov	r3, fp
 8000b04:	0564      	lsls	r4, r4, #21
 8000b06:	075f      	lsls	r7, r3, #29
 8000b08:	025b      	lsls	r3, r3, #9
 8000b0a:	4317      	orrs	r7, r2
 8000b0c:	0b1b      	lsrs	r3, r3, #12
 8000b0e:	0d62      	lsrs	r2, r4, #21
 8000b10:	e002      	b.n	8000b18 <__aeabi_ddiv+0x11c>
 8000b12:	2300      	movs	r3, #0
 8000b14:	2700      	movs	r7, #0
 8000b16:	4a58      	ldr	r2, [pc, #352]	; (8000c78 <__aeabi_ddiv+0x27c>)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	031b      	lsls	r3, r3, #12
 8000b1c:	0b1c      	lsrs	r4, r3, #12
 8000b1e:	0d0b      	lsrs	r3, r1, #20
 8000b20:	051b      	lsls	r3, r3, #20
 8000b22:	4323      	orrs	r3, r4
 8000b24:	0514      	lsls	r4, r2, #20
 8000b26:	4a5a      	ldr	r2, [pc, #360]	; (8000c90 <__aeabi_ddiv+0x294>)
 8000b28:	0038      	movs	r0, r7
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	431c      	orrs	r4, r3
 8000b2e:	4653      	mov	r3, sl
 8000b30:	0064      	lsls	r4, r4, #1
 8000b32:	07db      	lsls	r3, r3, #31
 8000b34:	0864      	lsrs	r4, r4, #1
 8000b36:	431c      	orrs	r4, r3
 8000b38:	0021      	movs	r1, r4
 8000b3a:	b005      	add	sp, #20
 8000b3c:	bc3c      	pop	{r2, r3, r4, r5}
 8000b3e:	4690      	mov	r8, r2
 8000b40:	4699      	mov	r9, r3
 8000b42:	46a2      	mov	sl, r4
 8000b44:	46ab      	mov	fp, r5
 8000b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b48:	2201      	movs	r2, #1
 8000b4a:	4252      	negs	r2, r2
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	1b1b      	subs	r3, r3, r4
 8000b50:	2b38      	cmp	r3, #56	; 0x38
 8000b52:	dc00      	bgt.n	8000b56 <__aeabi_ddiv+0x15a>
 8000b54:	e1ad      	b.n	8000eb2 <__aeabi_ddiv+0x4b6>
 8000b56:	2200      	movs	r2, #0
 8000b58:	2300      	movs	r3, #0
 8000b5a:	2700      	movs	r7, #0
 8000b5c:	e7dc      	b.n	8000b18 <__aeabi_ddiv+0x11c>
 8000b5e:	465b      	mov	r3, fp
 8000b60:	4333      	orrs	r3, r6
 8000b62:	4699      	mov	r9, r3
 8000b64:	d05e      	beq.n	8000c24 <__aeabi_ddiv+0x228>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d100      	bne.n	8000b6c <__aeabi_ddiv+0x170>
 8000b6a:	e18a      	b.n	8000e82 <__aeabi_ddiv+0x486>
 8000b6c:	0030      	movs	r0, r6
 8000b6e:	f000 fda9 	bl	80016c4 <__clzsi2>
 8000b72:	0003      	movs	r3, r0
 8000b74:	3b0b      	subs	r3, #11
 8000b76:	2b1c      	cmp	r3, #28
 8000b78:	dd00      	ble.n	8000b7c <__aeabi_ddiv+0x180>
 8000b7a:	e17b      	b.n	8000e74 <__aeabi_ddiv+0x478>
 8000b7c:	221d      	movs	r2, #29
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	465a      	mov	r2, fp
 8000b82:	0001      	movs	r1, r0
 8000b84:	40da      	lsrs	r2, r3
 8000b86:	3908      	subs	r1, #8
 8000b88:	408e      	lsls	r6, r1
 8000b8a:	0013      	movs	r3, r2
 8000b8c:	465f      	mov	r7, fp
 8000b8e:	4333      	orrs	r3, r6
 8000b90:	4699      	mov	r9, r3
 8000b92:	408f      	lsls	r7, r1
 8000b94:	4b3f      	ldr	r3, [pc, #252]	; (8000c94 <__aeabi_ddiv+0x298>)
 8000b96:	2600      	movs	r6, #0
 8000b98:	1a1b      	subs	r3, r3, r0
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	9302      	str	r3, [sp, #8]
 8000ba0:	e752      	b.n	8000a48 <__aeabi_ddiv+0x4c>
 8000ba2:	4641      	mov	r1, r8
 8000ba4:	4653      	mov	r3, sl
 8000ba6:	430b      	orrs	r3, r1
 8000ba8:	493b      	ldr	r1, [pc, #236]	; (8000c98 <__aeabi_ddiv+0x29c>)
 8000baa:	469b      	mov	fp, r3
 8000bac:	468c      	mov	ip, r1
 8000bae:	9b00      	ldr	r3, [sp, #0]
 8000bb0:	4463      	add	r3, ip
 8000bb2:	9300      	str	r3, [sp, #0]
 8000bb4:	465b      	mov	r3, fp
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d13b      	bne.n	8000c32 <__aeabi_ddiv+0x236>
 8000bba:	2302      	movs	r3, #2
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	431e      	orrs	r6, r3
 8000bc0:	2102      	movs	r1, #2
 8000bc2:	e761      	b.n	8000a88 <__aeabi_ddiv+0x8c>
 8000bc4:	4643      	mov	r3, r8
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	469b      	mov	fp, r3
 8000bca:	d037      	beq.n	8000c3c <__aeabi_ddiv+0x240>
 8000bcc:	4643      	mov	r3, r8
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_ddiv+0x1d8>
 8000bd2:	e162      	b.n	8000e9a <__aeabi_ddiv+0x49e>
 8000bd4:	4640      	mov	r0, r8
 8000bd6:	f000 fd75 	bl	80016c4 <__clzsi2>
 8000bda:	0003      	movs	r3, r0
 8000bdc:	3b0b      	subs	r3, #11
 8000bde:	2b1c      	cmp	r3, #28
 8000be0:	dd00      	ble.n	8000be4 <__aeabi_ddiv+0x1e8>
 8000be2:	e153      	b.n	8000e8c <__aeabi_ddiv+0x490>
 8000be4:	0002      	movs	r2, r0
 8000be6:	4641      	mov	r1, r8
 8000be8:	3a08      	subs	r2, #8
 8000bea:	4091      	lsls	r1, r2
 8000bec:	4688      	mov	r8, r1
 8000bee:	211d      	movs	r1, #29
 8000bf0:	1acb      	subs	r3, r1, r3
 8000bf2:	4651      	mov	r1, sl
 8000bf4:	40d9      	lsrs	r1, r3
 8000bf6:	000b      	movs	r3, r1
 8000bf8:	4641      	mov	r1, r8
 8000bfa:	430b      	orrs	r3, r1
 8000bfc:	469b      	mov	fp, r3
 8000bfe:	4653      	mov	r3, sl
 8000c00:	4093      	lsls	r3, r2
 8000c02:	001a      	movs	r2, r3
 8000c04:	9b00      	ldr	r3, [sp, #0]
 8000c06:	4925      	ldr	r1, [pc, #148]	; (8000c9c <__aeabi_ddiv+0x2a0>)
 8000c08:	469c      	mov	ip, r3
 8000c0a:	4460      	add	r0, ip
 8000c0c:	0003      	movs	r3, r0
 8000c0e:	468c      	mov	ip, r1
 8000c10:	4463      	add	r3, ip
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	2100      	movs	r1, #0
 8000c16:	e737      	b.n	8000a88 <__aeabi_ddiv+0x8c>
 8000c18:	2303      	movs	r3, #3
 8000c1a:	46b1      	mov	r9, r6
 8000c1c:	9000      	str	r0, [sp, #0]
 8000c1e:	260c      	movs	r6, #12
 8000c20:	9302      	str	r3, [sp, #8]
 8000c22:	e711      	b.n	8000a48 <__aeabi_ddiv+0x4c>
 8000c24:	2300      	movs	r3, #0
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	2604      	movs	r6, #4
 8000c2c:	2700      	movs	r7, #0
 8000c2e:	9302      	str	r3, [sp, #8]
 8000c30:	e70a      	b.n	8000a48 <__aeabi_ddiv+0x4c>
 8000c32:	2303      	movs	r3, #3
 8000c34:	46c3      	mov	fp, r8
 8000c36:	431e      	orrs	r6, r3
 8000c38:	2103      	movs	r1, #3
 8000c3a:	e725      	b.n	8000a88 <__aeabi_ddiv+0x8c>
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	431e      	orrs	r6, r3
 8000c40:	2200      	movs	r2, #0
 8000c42:	2101      	movs	r1, #1
 8000c44:	e720      	b.n	8000a88 <__aeabi_ddiv+0x8c>
 8000c46:	2300      	movs	r3, #0
 8000c48:	469a      	mov	sl, r3
 8000c4a:	2380      	movs	r3, #128	; 0x80
 8000c4c:	2700      	movs	r7, #0
 8000c4e:	031b      	lsls	r3, r3, #12
 8000c50:	4a09      	ldr	r2, [pc, #36]	; (8000c78 <__aeabi_ddiv+0x27c>)
 8000c52:	e761      	b.n	8000b18 <__aeabi_ddiv+0x11c>
 8000c54:	2380      	movs	r3, #128	; 0x80
 8000c56:	4649      	mov	r1, r9
 8000c58:	031b      	lsls	r3, r3, #12
 8000c5a:	4219      	tst	r1, r3
 8000c5c:	d100      	bne.n	8000c60 <__aeabi_ddiv+0x264>
 8000c5e:	e0e2      	b.n	8000e26 <__aeabi_ddiv+0x42a>
 8000c60:	4659      	mov	r1, fp
 8000c62:	4219      	tst	r1, r3
 8000c64:	d000      	beq.n	8000c68 <__aeabi_ddiv+0x26c>
 8000c66:	e0de      	b.n	8000e26 <__aeabi_ddiv+0x42a>
 8000c68:	430b      	orrs	r3, r1
 8000c6a:	031b      	lsls	r3, r3, #12
 8000c6c:	0017      	movs	r7, r2
 8000c6e:	0b1b      	lsrs	r3, r3, #12
 8000c70:	46a2      	mov	sl, r4
 8000c72:	4a01      	ldr	r2, [pc, #4]	; (8000c78 <__aeabi_ddiv+0x27c>)
 8000c74:	e750      	b.n	8000b18 <__aeabi_ddiv+0x11c>
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	000007ff 	.word	0x000007ff
 8000c7c:	fffffc01 	.word	0xfffffc01
 8000c80:	0800b670 	.word	0x0800b670
 8000c84:	000003ff 	.word	0x000003ff
 8000c88:	feffffff 	.word	0xfeffffff
 8000c8c:	000007fe 	.word	0x000007fe
 8000c90:	800fffff 	.word	0x800fffff
 8000c94:	fffffc0d 	.word	0xfffffc0d
 8000c98:	fffff801 	.word	0xfffff801
 8000c9c:	000003f3 	.word	0x000003f3
 8000ca0:	45d9      	cmp	r9, fp
 8000ca2:	d900      	bls.n	8000ca6 <__aeabi_ddiv+0x2aa>
 8000ca4:	e0cb      	b.n	8000e3e <__aeabi_ddiv+0x442>
 8000ca6:	d100      	bne.n	8000caa <__aeabi_ddiv+0x2ae>
 8000ca8:	e0c6      	b.n	8000e38 <__aeabi_ddiv+0x43c>
 8000caa:	003c      	movs	r4, r7
 8000cac:	4648      	mov	r0, r9
 8000cae:	2700      	movs	r7, #0
 8000cb0:	9b00      	ldr	r3, [sp, #0]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	465b      	mov	r3, fp
 8000cb8:	0e16      	lsrs	r6, r2, #24
 8000cba:	021b      	lsls	r3, r3, #8
 8000cbc:	431e      	orrs	r6, r3
 8000cbe:	0213      	lsls	r3, r2, #8
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	0433      	lsls	r3, r6, #16
 8000cc4:	0c1b      	lsrs	r3, r3, #16
 8000cc6:	4699      	mov	r9, r3
 8000cc8:	0c31      	lsrs	r1, r6, #16
 8000cca:	9101      	str	r1, [sp, #4]
 8000ccc:	f7ff faaa 	bl	8000224 <__aeabi_uidivmod>
 8000cd0:	464a      	mov	r2, r9
 8000cd2:	4342      	muls	r2, r0
 8000cd4:	040b      	lsls	r3, r1, #16
 8000cd6:	0c21      	lsrs	r1, r4, #16
 8000cd8:	0005      	movs	r5, r0
 8000cda:	4319      	orrs	r1, r3
 8000cdc:	428a      	cmp	r2, r1
 8000cde:	d907      	bls.n	8000cf0 <__aeabi_ddiv+0x2f4>
 8000ce0:	1989      	adds	r1, r1, r6
 8000ce2:	3d01      	subs	r5, #1
 8000ce4:	428e      	cmp	r6, r1
 8000ce6:	d803      	bhi.n	8000cf0 <__aeabi_ddiv+0x2f4>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	d901      	bls.n	8000cf0 <__aeabi_ddiv+0x2f4>
 8000cec:	1e85      	subs	r5, r0, #2
 8000cee:	1989      	adds	r1, r1, r6
 8000cf0:	1a88      	subs	r0, r1, r2
 8000cf2:	9901      	ldr	r1, [sp, #4]
 8000cf4:	f7ff fa96 	bl	8000224 <__aeabi_uidivmod>
 8000cf8:	0409      	lsls	r1, r1, #16
 8000cfa:	468c      	mov	ip, r1
 8000cfc:	464a      	mov	r2, r9
 8000cfe:	0421      	lsls	r1, r4, #16
 8000d00:	4664      	mov	r4, ip
 8000d02:	4342      	muls	r2, r0
 8000d04:	0c09      	lsrs	r1, r1, #16
 8000d06:	0003      	movs	r3, r0
 8000d08:	4321      	orrs	r1, r4
 8000d0a:	428a      	cmp	r2, r1
 8000d0c:	d904      	bls.n	8000d18 <__aeabi_ddiv+0x31c>
 8000d0e:	1989      	adds	r1, r1, r6
 8000d10:	3b01      	subs	r3, #1
 8000d12:	428e      	cmp	r6, r1
 8000d14:	d800      	bhi.n	8000d18 <__aeabi_ddiv+0x31c>
 8000d16:	e0f1      	b.n	8000efc <__aeabi_ddiv+0x500>
 8000d18:	042d      	lsls	r5, r5, #16
 8000d1a:	431d      	orrs	r5, r3
 8000d1c:	46ab      	mov	fp, r5
 8000d1e:	4643      	mov	r3, r8
 8000d20:	1a89      	subs	r1, r1, r2
 8000d22:	4642      	mov	r2, r8
 8000d24:	0c28      	lsrs	r0, r5, #16
 8000d26:	0412      	lsls	r2, r2, #16
 8000d28:	0c1d      	lsrs	r5, r3, #16
 8000d2a:	465b      	mov	r3, fp
 8000d2c:	0c14      	lsrs	r4, r2, #16
 8000d2e:	0022      	movs	r2, r4
 8000d30:	041b      	lsls	r3, r3, #16
 8000d32:	0c1b      	lsrs	r3, r3, #16
 8000d34:	435a      	muls	r2, r3
 8000d36:	9403      	str	r4, [sp, #12]
 8000d38:	436b      	muls	r3, r5
 8000d3a:	4344      	muls	r4, r0
 8000d3c:	9502      	str	r5, [sp, #8]
 8000d3e:	4368      	muls	r0, r5
 8000d40:	191b      	adds	r3, r3, r4
 8000d42:	0c15      	lsrs	r5, r2, #16
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	429c      	cmp	r4, r3
 8000d48:	d903      	bls.n	8000d52 <__aeabi_ddiv+0x356>
 8000d4a:	2480      	movs	r4, #128	; 0x80
 8000d4c:	0264      	lsls	r4, r4, #9
 8000d4e:	46a4      	mov	ip, r4
 8000d50:	4460      	add	r0, ip
 8000d52:	0c1c      	lsrs	r4, r3, #16
 8000d54:	0415      	lsls	r5, r2, #16
 8000d56:	041b      	lsls	r3, r3, #16
 8000d58:	0c2d      	lsrs	r5, r5, #16
 8000d5a:	1820      	adds	r0, r4, r0
 8000d5c:	195d      	adds	r5, r3, r5
 8000d5e:	4281      	cmp	r1, r0
 8000d60:	d377      	bcc.n	8000e52 <__aeabi_ddiv+0x456>
 8000d62:	d073      	beq.n	8000e4c <__aeabi_ddiv+0x450>
 8000d64:	1a0c      	subs	r4, r1, r0
 8000d66:	4aa2      	ldr	r2, [pc, #648]	; (8000ff0 <__aeabi_ddiv+0x5f4>)
 8000d68:	1b7d      	subs	r5, r7, r5
 8000d6a:	42af      	cmp	r7, r5
 8000d6c:	41bf      	sbcs	r7, r7
 8000d6e:	4694      	mov	ip, r2
 8000d70:	9b00      	ldr	r3, [sp, #0]
 8000d72:	427f      	negs	r7, r7
 8000d74:	4463      	add	r3, ip
 8000d76:	1be0      	subs	r0, r4, r7
 8000d78:	001c      	movs	r4, r3
 8000d7a:	4286      	cmp	r6, r0
 8000d7c:	d100      	bne.n	8000d80 <__aeabi_ddiv+0x384>
 8000d7e:	e0db      	b.n	8000f38 <__aeabi_ddiv+0x53c>
 8000d80:	9901      	ldr	r1, [sp, #4]
 8000d82:	f7ff fa4f 	bl	8000224 <__aeabi_uidivmod>
 8000d86:	464a      	mov	r2, r9
 8000d88:	4342      	muls	r2, r0
 8000d8a:	040b      	lsls	r3, r1, #16
 8000d8c:	0c29      	lsrs	r1, r5, #16
 8000d8e:	0007      	movs	r7, r0
 8000d90:	4319      	orrs	r1, r3
 8000d92:	428a      	cmp	r2, r1
 8000d94:	d907      	bls.n	8000da6 <__aeabi_ddiv+0x3aa>
 8000d96:	1989      	adds	r1, r1, r6
 8000d98:	3f01      	subs	r7, #1
 8000d9a:	428e      	cmp	r6, r1
 8000d9c:	d803      	bhi.n	8000da6 <__aeabi_ddiv+0x3aa>
 8000d9e:	428a      	cmp	r2, r1
 8000da0:	d901      	bls.n	8000da6 <__aeabi_ddiv+0x3aa>
 8000da2:	1e87      	subs	r7, r0, #2
 8000da4:	1989      	adds	r1, r1, r6
 8000da6:	1a88      	subs	r0, r1, r2
 8000da8:	9901      	ldr	r1, [sp, #4]
 8000daa:	f7ff fa3b 	bl	8000224 <__aeabi_uidivmod>
 8000dae:	0409      	lsls	r1, r1, #16
 8000db0:	464a      	mov	r2, r9
 8000db2:	4689      	mov	r9, r1
 8000db4:	0429      	lsls	r1, r5, #16
 8000db6:	464d      	mov	r5, r9
 8000db8:	4342      	muls	r2, r0
 8000dba:	0c09      	lsrs	r1, r1, #16
 8000dbc:	0003      	movs	r3, r0
 8000dbe:	4329      	orrs	r1, r5
 8000dc0:	428a      	cmp	r2, r1
 8000dc2:	d907      	bls.n	8000dd4 <__aeabi_ddiv+0x3d8>
 8000dc4:	1989      	adds	r1, r1, r6
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	428e      	cmp	r6, r1
 8000dca:	d803      	bhi.n	8000dd4 <__aeabi_ddiv+0x3d8>
 8000dcc:	428a      	cmp	r2, r1
 8000dce:	d901      	bls.n	8000dd4 <__aeabi_ddiv+0x3d8>
 8000dd0:	1e83      	subs	r3, r0, #2
 8000dd2:	1989      	adds	r1, r1, r6
 8000dd4:	043f      	lsls	r7, r7, #16
 8000dd6:	1a89      	subs	r1, r1, r2
 8000dd8:	003a      	movs	r2, r7
 8000dda:	9f03      	ldr	r7, [sp, #12]
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	0038      	movs	r0, r7
 8000de0:	0413      	lsls	r3, r2, #16
 8000de2:	0c1b      	lsrs	r3, r3, #16
 8000de4:	4358      	muls	r0, r3
 8000de6:	4681      	mov	r9, r0
 8000de8:	9802      	ldr	r0, [sp, #8]
 8000dea:	0c15      	lsrs	r5, r2, #16
 8000dec:	436f      	muls	r7, r5
 8000dee:	4343      	muls	r3, r0
 8000df0:	4345      	muls	r5, r0
 8000df2:	4648      	mov	r0, r9
 8000df4:	0c00      	lsrs	r0, r0, #16
 8000df6:	4684      	mov	ip, r0
 8000df8:	19db      	adds	r3, r3, r7
 8000dfa:	4463      	add	r3, ip
 8000dfc:	429f      	cmp	r7, r3
 8000dfe:	d903      	bls.n	8000e08 <__aeabi_ddiv+0x40c>
 8000e00:	2080      	movs	r0, #128	; 0x80
 8000e02:	0240      	lsls	r0, r0, #9
 8000e04:	4684      	mov	ip, r0
 8000e06:	4465      	add	r5, ip
 8000e08:	4648      	mov	r0, r9
 8000e0a:	0c1f      	lsrs	r7, r3, #16
 8000e0c:	0400      	lsls	r0, r0, #16
 8000e0e:	041b      	lsls	r3, r3, #16
 8000e10:	0c00      	lsrs	r0, r0, #16
 8000e12:	197d      	adds	r5, r7, r5
 8000e14:	1818      	adds	r0, r3, r0
 8000e16:	42a9      	cmp	r1, r5
 8000e18:	d200      	bcs.n	8000e1c <__aeabi_ddiv+0x420>
 8000e1a:	e084      	b.n	8000f26 <__aeabi_ddiv+0x52a>
 8000e1c:	d100      	bne.n	8000e20 <__aeabi_ddiv+0x424>
 8000e1e:	e07f      	b.n	8000f20 <__aeabi_ddiv+0x524>
 8000e20:	2301      	movs	r3, #1
 8000e22:	431a      	orrs	r2, r3
 8000e24:	e657      	b.n	8000ad6 <__aeabi_ddiv+0xda>
 8000e26:	2380      	movs	r3, #128	; 0x80
 8000e28:	464a      	mov	r2, r9
 8000e2a:	031b      	lsls	r3, r3, #12
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	031b      	lsls	r3, r3, #12
 8000e30:	0b1b      	lsrs	r3, r3, #12
 8000e32:	46aa      	mov	sl, r5
 8000e34:	4a6f      	ldr	r2, [pc, #444]	; (8000ff4 <__aeabi_ddiv+0x5f8>)
 8000e36:	e66f      	b.n	8000b18 <__aeabi_ddiv+0x11c>
 8000e38:	42ba      	cmp	r2, r7
 8000e3a:	d900      	bls.n	8000e3e <__aeabi_ddiv+0x442>
 8000e3c:	e735      	b.n	8000caa <__aeabi_ddiv+0x2ae>
 8000e3e:	464b      	mov	r3, r9
 8000e40:	07dc      	lsls	r4, r3, #31
 8000e42:	0858      	lsrs	r0, r3, #1
 8000e44:	087b      	lsrs	r3, r7, #1
 8000e46:	431c      	orrs	r4, r3
 8000e48:	07ff      	lsls	r7, r7, #31
 8000e4a:	e734      	b.n	8000cb6 <__aeabi_ddiv+0x2ba>
 8000e4c:	2400      	movs	r4, #0
 8000e4e:	42af      	cmp	r7, r5
 8000e50:	d289      	bcs.n	8000d66 <__aeabi_ddiv+0x36a>
 8000e52:	4447      	add	r7, r8
 8000e54:	4547      	cmp	r7, r8
 8000e56:	41a4      	sbcs	r4, r4
 8000e58:	465b      	mov	r3, fp
 8000e5a:	4264      	negs	r4, r4
 8000e5c:	19a4      	adds	r4, r4, r6
 8000e5e:	1864      	adds	r4, r4, r1
 8000e60:	3b01      	subs	r3, #1
 8000e62:	42a6      	cmp	r6, r4
 8000e64:	d21e      	bcs.n	8000ea4 <__aeabi_ddiv+0x4a8>
 8000e66:	42a0      	cmp	r0, r4
 8000e68:	d86d      	bhi.n	8000f46 <__aeabi_ddiv+0x54a>
 8000e6a:	d100      	bne.n	8000e6e <__aeabi_ddiv+0x472>
 8000e6c:	e0b6      	b.n	8000fdc <__aeabi_ddiv+0x5e0>
 8000e6e:	1a24      	subs	r4, r4, r0
 8000e70:	469b      	mov	fp, r3
 8000e72:	e778      	b.n	8000d66 <__aeabi_ddiv+0x36a>
 8000e74:	0003      	movs	r3, r0
 8000e76:	465a      	mov	r2, fp
 8000e78:	3b28      	subs	r3, #40	; 0x28
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	2700      	movs	r7, #0
 8000e7e:	4691      	mov	r9, r2
 8000e80:	e688      	b.n	8000b94 <__aeabi_ddiv+0x198>
 8000e82:	4658      	mov	r0, fp
 8000e84:	f000 fc1e 	bl	80016c4 <__clzsi2>
 8000e88:	3020      	adds	r0, #32
 8000e8a:	e672      	b.n	8000b72 <__aeabi_ddiv+0x176>
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	4652      	mov	r2, sl
 8000e90:	3b28      	subs	r3, #40	; 0x28
 8000e92:	409a      	lsls	r2, r3
 8000e94:	4693      	mov	fp, r2
 8000e96:	2200      	movs	r2, #0
 8000e98:	e6b4      	b.n	8000c04 <__aeabi_ddiv+0x208>
 8000e9a:	4650      	mov	r0, sl
 8000e9c:	f000 fc12 	bl	80016c4 <__clzsi2>
 8000ea0:	3020      	adds	r0, #32
 8000ea2:	e69a      	b.n	8000bda <__aeabi_ddiv+0x1de>
 8000ea4:	42a6      	cmp	r6, r4
 8000ea6:	d1e2      	bne.n	8000e6e <__aeabi_ddiv+0x472>
 8000ea8:	45b8      	cmp	r8, r7
 8000eaa:	d9dc      	bls.n	8000e66 <__aeabi_ddiv+0x46a>
 8000eac:	1a34      	subs	r4, r6, r0
 8000eae:	469b      	mov	fp, r3
 8000eb0:	e759      	b.n	8000d66 <__aeabi_ddiv+0x36a>
 8000eb2:	2b1f      	cmp	r3, #31
 8000eb4:	dc65      	bgt.n	8000f82 <__aeabi_ddiv+0x586>
 8000eb6:	4c50      	ldr	r4, [pc, #320]	; (8000ff8 <__aeabi_ddiv+0x5fc>)
 8000eb8:	9900      	ldr	r1, [sp, #0]
 8000eba:	46a4      	mov	ip, r4
 8000ebc:	465c      	mov	r4, fp
 8000ebe:	4461      	add	r1, ip
 8000ec0:	0008      	movs	r0, r1
 8000ec2:	408c      	lsls	r4, r1
 8000ec4:	0011      	movs	r1, r2
 8000ec6:	4082      	lsls	r2, r0
 8000ec8:	40d9      	lsrs	r1, r3
 8000eca:	1e50      	subs	r0, r2, #1
 8000ecc:	4182      	sbcs	r2, r0
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	4314      	orrs	r4, r2
 8000ed2:	465a      	mov	r2, fp
 8000ed4:	40da      	lsrs	r2, r3
 8000ed6:	0013      	movs	r3, r2
 8000ed8:	0762      	lsls	r2, r4, #29
 8000eda:	d009      	beq.n	8000ef0 <__aeabi_ddiv+0x4f4>
 8000edc:	220f      	movs	r2, #15
 8000ede:	4022      	ands	r2, r4
 8000ee0:	2a04      	cmp	r2, #4
 8000ee2:	d005      	beq.n	8000ef0 <__aeabi_ddiv+0x4f4>
 8000ee4:	0022      	movs	r2, r4
 8000ee6:	1d14      	adds	r4, r2, #4
 8000ee8:	4294      	cmp	r4, r2
 8000eea:	4189      	sbcs	r1, r1
 8000eec:	4249      	negs	r1, r1
 8000eee:	185b      	adds	r3, r3, r1
 8000ef0:	021a      	lsls	r2, r3, #8
 8000ef2:	d562      	bpl.n	8000fba <__aeabi_ddiv+0x5be>
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	2700      	movs	r7, #0
 8000efa:	e60d      	b.n	8000b18 <__aeabi_ddiv+0x11c>
 8000efc:	428a      	cmp	r2, r1
 8000efe:	d800      	bhi.n	8000f02 <__aeabi_ddiv+0x506>
 8000f00:	e70a      	b.n	8000d18 <__aeabi_ddiv+0x31c>
 8000f02:	1e83      	subs	r3, r0, #2
 8000f04:	1989      	adds	r1, r1, r6
 8000f06:	e707      	b.n	8000d18 <__aeabi_ddiv+0x31c>
 8000f08:	230f      	movs	r3, #15
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	2b04      	cmp	r3, #4
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_ddiv+0x516>
 8000f10:	e5e6      	b.n	8000ae0 <__aeabi_ddiv+0xe4>
 8000f12:	1d17      	adds	r7, r2, #4
 8000f14:	4297      	cmp	r7, r2
 8000f16:	4192      	sbcs	r2, r2
 8000f18:	4253      	negs	r3, r2
 8000f1a:	449b      	add	fp, r3
 8000f1c:	08fa      	lsrs	r2, r7, #3
 8000f1e:	e5e0      	b.n	8000ae2 <__aeabi_ddiv+0xe6>
 8000f20:	2800      	cmp	r0, #0
 8000f22:	d100      	bne.n	8000f26 <__aeabi_ddiv+0x52a>
 8000f24:	e5d7      	b.n	8000ad6 <__aeabi_ddiv+0xda>
 8000f26:	1871      	adds	r1, r6, r1
 8000f28:	1e53      	subs	r3, r2, #1
 8000f2a:	42b1      	cmp	r1, r6
 8000f2c:	d327      	bcc.n	8000f7e <__aeabi_ddiv+0x582>
 8000f2e:	42a9      	cmp	r1, r5
 8000f30:	d315      	bcc.n	8000f5e <__aeabi_ddiv+0x562>
 8000f32:	d058      	beq.n	8000fe6 <__aeabi_ddiv+0x5ea>
 8000f34:	001a      	movs	r2, r3
 8000f36:	e773      	b.n	8000e20 <__aeabi_ddiv+0x424>
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	dc00      	bgt.n	8000f3e <__aeabi_ddiv+0x542>
 8000f3c:	e604      	b.n	8000b48 <__aeabi_ddiv+0x14c>
 8000f3e:	2301      	movs	r3, #1
 8000f40:	2200      	movs	r2, #0
 8000f42:	449b      	add	fp, r3
 8000f44:	e5cd      	b.n	8000ae2 <__aeabi_ddiv+0xe6>
 8000f46:	2302      	movs	r3, #2
 8000f48:	4447      	add	r7, r8
 8000f4a:	4547      	cmp	r7, r8
 8000f4c:	4189      	sbcs	r1, r1
 8000f4e:	425b      	negs	r3, r3
 8000f50:	469c      	mov	ip, r3
 8000f52:	4249      	negs	r1, r1
 8000f54:	1989      	adds	r1, r1, r6
 8000f56:	190c      	adds	r4, r1, r4
 8000f58:	44e3      	add	fp, ip
 8000f5a:	1a24      	subs	r4, r4, r0
 8000f5c:	e703      	b.n	8000d66 <__aeabi_ddiv+0x36a>
 8000f5e:	4643      	mov	r3, r8
 8000f60:	005f      	lsls	r7, r3, #1
 8000f62:	4547      	cmp	r7, r8
 8000f64:	419b      	sbcs	r3, r3
 8000f66:	46b8      	mov	r8, r7
 8000f68:	425b      	negs	r3, r3
 8000f6a:	199e      	adds	r6, r3, r6
 8000f6c:	3a02      	subs	r2, #2
 8000f6e:	1989      	adds	r1, r1, r6
 8000f70:	42a9      	cmp	r1, r5
 8000f72:	d000      	beq.n	8000f76 <__aeabi_ddiv+0x57a>
 8000f74:	e754      	b.n	8000e20 <__aeabi_ddiv+0x424>
 8000f76:	4540      	cmp	r0, r8
 8000f78:	d000      	beq.n	8000f7c <__aeabi_ddiv+0x580>
 8000f7a:	e751      	b.n	8000e20 <__aeabi_ddiv+0x424>
 8000f7c:	e5ab      	b.n	8000ad6 <__aeabi_ddiv+0xda>
 8000f7e:	001a      	movs	r2, r3
 8000f80:	e7f6      	b.n	8000f70 <__aeabi_ddiv+0x574>
 8000f82:	211f      	movs	r1, #31
 8000f84:	465f      	mov	r7, fp
 8000f86:	4249      	negs	r1, r1
 8000f88:	1b0c      	subs	r4, r1, r4
 8000f8a:	40e7      	lsrs	r7, r4
 8000f8c:	2b20      	cmp	r3, #32
 8000f8e:	d007      	beq.n	8000fa0 <__aeabi_ddiv+0x5a4>
 8000f90:	491a      	ldr	r1, [pc, #104]	; (8000ffc <__aeabi_ddiv+0x600>)
 8000f92:	9b00      	ldr	r3, [sp, #0]
 8000f94:	468c      	mov	ip, r1
 8000f96:	4463      	add	r3, ip
 8000f98:	0018      	movs	r0, r3
 8000f9a:	465b      	mov	r3, fp
 8000f9c:	4083      	lsls	r3, r0
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	1e50      	subs	r0, r2, #1
 8000fa2:	4182      	sbcs	r2, r0
 8000fa4:	433a      	orrs	r2, r7
 8000fa6:	2707      	movs	r7, #7
 8000fa8:	2300      	movs	r3, #0
 8000faa:	4017      	ands	r7, r2
 8000fac:	d009      	beq.n	8000fc2 <__aeabi_ddiv+0x5c6>
 8000fae:	210f      	movs	r1, #15
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	4011      	ands	r1, r2
 8000fb4:	0014      	movs	r4, r2
 8000fb6:	2904      	cmp	r1, #4
 8000fb8:	d195      	bne.n	8000ee6 <__aeabi_ddiv+0x4ea>
 8000fba:	0022      	movs	r2, r4
 8000fbc:	075f      	lsls	r7, r3, #29
 8000fbe:	025b      	lsls	r3, r3, #9
 8000fc0:	0b1b      	lsrs	r3, r3, #12
 8000fc2:	08d2      	lsrs	r2, r2, #3
 8000fc4:	4317      	orrs	r7, r2
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	e5a6      	b.n	8000b18 <__aeabi_ddiv+0x11c>
 8000fca:	2380      	movs	r3, #128	; 0x80
 8000fcc:	4659      	mov	r1, fp
 8000fce:	031b      	lsls	r3, r3, #12
 8000fd0:	430b      	orrs	r3, r1
 8000fd2:	031b      	lsls	r3, r3, #12
 8000fd4:	0017      	movs	r7, r2
 8000fd6:	0b1b      	lsrs	r3, r3, #12
 8000fd8:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <__aeabi_ddiv+0x5f8>)
 8000fda:	e59d      	b.n	8000b18 <__aeabi_ddiv+0x11c>
 8000fdc:	42bd      	cmp	r5, r7
 8000fde:	d8b2      	bhi.n	8000f46 <__aeabi_ddiv+0x54a>
 8000fe0:	469b      	mov	fp, r3
 8000fe2:	2400      	movs	r4, #0
 8000fe4:	e6bf      	b.n	8000d66 <__aeabi_ddiv+0x36a>
 8000fe6:	4580      	cmp	r8, r0
 8000fe8:	d3b9      	bcc.n	8000f5e <__aeabi_ddiv+0x562>
 8000fea:	001a      	movs	r2, r3
 8000fec:	e7c3      	b.n	8000f76 <__aeabi_ddiv+0x57a>
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	000003ff 	.word	0x000003ff
 8000ff4:	000007ff 	.word	0x000007ff
 8000ff8:	0000041e 	.word	0x0000041e
 8000ffc:	0000043e 	.word	0x0000043e

08001000 <__aeabi_dmul>:
 8001000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001002:	4657      	mov	r7, sl
 8001004:	46de      	mov	lr, fp
 8001006:	464e      	mov	r6, r9
 8001008:	4645      	mov	r5, r8
 800100a:	b5e0      	push	{r5, r6, r7, lr}
 800100c:	4683      	mov	fp, r0
 800100e:	0006      	movs	r6, r0
 8001010:	030f      	lsls	r7, r1, #12
 8001012:	0048      	lsls	r0, r1, #1
 8001014:	b087      	sub	sp, #28
 8001016:	4692      	mov	sl, r2
 8001018:	001d      	movs	r5, r3
 800101a:	0b3f      	lsrs	r7, r7, #12
 800101c:	0d40      	lsrs	r0, r0, #21
 800101e:	0fcc      	lsrs	r4, r1, #31
 8001020:	2800      	cmp	r0, #0
 8001022:	d100      	bne.n	8001026 <__aeabi_dmul+0x26>
 8001024:	e06f      	b.n	8001106 <__aeabi_dmul+0x106>
 8001026:	4bde      	ldr	r3, [pc, #888]	; (80013a0 <__aeabi_dmul+0x3a0>)
 8001028:	4298      	cmp	r0, r3
 800102a:	d038      	beq.n	800109e <__aeabi_dmul+0x9e>
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	00ff      	lsls	r7, r7, #3
 8001030:	041b      	lsls	r3, r3, #16
 8001032:	431f      	orrs	r7, r3
 8001034:	0f73      	lsrs	r3, r6, #29
 8001036:	433b      	orrs	r3, r7
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	4bda      	ldr	r3, [pc, #872]	; (80013a4 <__aeabi_dmul+0x3a4>)
 800103c:	2700      	movs	r7, #0
 800103e:	4699      	mov	r9, r3
 8001040:	2300      	movs	r3, #0
 8001042:	469b      	mov	fp, r3
 8001044:	00f6      	lsls	r6, r6, #3
 8001046:	4481      	add	r9, r0
 8001048:	032b      	lsls	r3, r5, #12
 800104a:	0069      	lsls	r1, r5, #1
 800104c:	0b1b      	lsrs	r3, r3, #12
 800104e:	4652      	mov	r2, sl
 8001050:	4698      	mov	r8, r3
 8001052:	0d49      	lsrs	r1, r1, #21
 8001054:	0fed      	lsrs	r5, r5, #31
 8001056:	2900      	cmp	r1, #0
 8001058:	d100      	bne.n	800105c <__aeabi_dmul+0x5c>
 800105a:	e085      	b.n	8001168 <__aeabi_dmul+0x168>
 800105c:	4bd0      	ldr	r3, [pc, #832]	; (80013a0 <__aeabi_dmul+0x3a0>)
 800105e:	4299      	cmp	r1, r3
 8001060:	d100      	bne.n	8001064 <__aeabi_dmul+0x64>
 8001062:	e073      	b.n	800114c <__aeabi_dmul+0x14c>
 8001064:	4643      	mov	r3, r8
 8001066:	00da      	lsls	r2, r3, #3
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	041b      	lsls	r3, r3, #16
 800106c:	4313      	orrs	r3, r2
 800106e:	4652      	mov	r2, sl
 8001070:	48cc      	ldr	r0, [pc, #816]	; (80013a4 <__aeabi_dmul+0x3a4>)
 8001072:	0f52      	lsrs	r2, r2, #29
 8001074:	4684      	mov	ip, r0
 8001076:	4313      	orrs	r3, r2
 8001078:	4652      	mov	r2, sl
 800107a:	2000      	movs	r0, #0
 800107c:	4461      	add	r1, ip
 800107e:	00d2      	lsls	r2, r2, #3
 8001080:	4489      	add	r9, r1
 8001082:	0021      	movs	r1, r4
 8001084:	4069      	eors	r1, r5
 8001086:	9100      	str	r1, [sp, #0]
 8001088:	468c      	mov	ip, r1
 800108a:	2101      	movs	r1, #1
 800108c:	4449      	add	r1, r9
 800108e:	468a      	mov	sl, r1
 8001090:	2f0f      	cmp	r7, #15
 8001092:	d900      	bls.n	8001096 <__aeabi_dmul+0x96>
 8001094:	e090      	b.n	80011b8 <__aeabi_dmul+0x1b8>
 8001096:	49c4      	ldr	r1, [pc, #784]	; (80013a8 <__aeabi_dmul+0x3a8>)
 8001098:	00bf      	lsls	r7, r7, #2
 800109a:	59cf      	ldr	r7, [r1, r7]
 800109c:	46bf      	mov	pc, r7
 800109e:	465b      	mov	r3, fp
 80010a0:	433b      	orrs	r3, r7
 80010a2:	9301      	str	r3, [sp, #4]
 80010a4:	d000      	beq.n	80010a8 <__aeabi_dmul+0xa8>
 80010a6:	e16a      	b.n	800137e <__aeabi_dmul+0x37e>
 80010a8:	2302      	movs	r3, #2
 80010aa:	2708      	movs	r7, #8
 80010ac:	2600      	movs	r6, #0
 80010ae:	4681      	mov	r9, r0
 80010b0:	469b      	mov	fp, r3
 80010b2:	e7c9      	b.n	8001048 <__aeabi_dmul+0x48>
 80010b4:	0032      	movs	r2, r6
 80010b6:	4658      	mov	r0, fp
 80010b8:	9b01      	ldr	r3, [sp, #4]
 80010ba:	4661      	mov	r1, ip
 80010bc:	9100      	str	r1, [sp, #0]
 80010be:	2802      	cmp	r0, #2
 80010c0:	d100      	bne.n	80010c4 <__aeabi_dmul+0xc4>
 80010c2:	e075      	b.n	80011b0 <__aeabi_dmul+0x1b0>
 80010c4:	2803      	cmp	r0, #3
 80010c6:	d100      	bne.n	80010ca <__aeabi_dmul+0xca>
 80010c8:	e1fe      	b.n	80014c8 <__aeabi_dmul+0x4c8>
 80010ca:	2801      	cmp	r0, #1
 80010cc:	d000      	beq.n	80010d0 <__aeabi_dmul+0xd0>
 80010ce:	e12c      	b.n	800132a <__aeabi_dmul+0x32a>
 80010d0:	2300      	movs	r3, #0
 80010d2:	2700      	movs	r7, #0
 80010d4:	2600      	movs	r6, #0
 80010d6:	2500      	movs	r5, #0
 80010d8:	033f      	lsls	r7, r7, #12
 80010da:	0d2a      	lsrs	r2, r5, #20
 80010dc:	0b3f      	lsrs	r7, r7, #12
 80010de:	48b3      	ldr	r0, [pc, #716]	; (80013ac <__aeabi_dmul+0x3ac>)
 80010e0:	0512      	lsls	r2, r2, #20
 80010e2:	433a      	orrs	r2, r7
 80010e4:	4002      	ands	r2, r0
 80010e6:	051b      	lsls	r3, r3, #20
 80010e8:	4313      	orrs	r3, r2
 80010ea:	9a00      	ldr	r2, [sp, #0]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	07d1      	lsls	r1, r2, #31
 80010f0:	085b      	lsrs	r3, r3, #1
 80010f2:	430b      	orrs	r3, r1
 80010f4:	0030      	movs	r0, r6
 80010f6:	0019      	movs	r1, r3
 80010f8:	b007      	add	sp, #28
 80010fa:	bc3c      	pop	{r2, r3, r4, r5}
 80010fc:	4690      	mov	r8, r2
 80010fe:	4699      	mov	r9, r3
 8001100:	46a2      	mov	sl, r4
 8001102:	46ab      	mov	fp, r5
 8001104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001106:	465b      	mov	r3, fp
 8001108:	433b      	orrs	r3, r7
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	d100      	bne.n	8001110 <__aeabi_dmul+0x110>
 800110e:	e12f      	b.n	8001370 <__aeabi_dmul+0x370>
 8001110:	2f00      	cmp	r7, #0
 8001112:	d100      	bne.n	8001116 <__aeabi_dmul+0x116>
 8001114:	e1a5      	b.n	8001462 <__aeabi_dmul+0x462>
 8001116:	0038      	movs	r0, r7
 8001118:	f000 fad4 	bl	80016c4 <__clzsi2>
 800111c:	0003      	movs	r3, r0
 800111e:	3b0b      	subs	r3, #11
 8001120:	2b1c      	cmp	r3, #28
 8001122:	dd00      	ble.n	8001126 <__aeabi_dmul+0x126>
 8001124:	e196      	b.n	8001454 <__aeabi_dmul+0x454>
 8001126:	221d      	movs	r2, #29
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	465a      	mov	r2, fp
 800112c:	0001      	movs	r1, r0
 800112e:	40da      	lsrs	r2, r3
 8001130:	465e      	mov	r6, fp
 8001132:	3908      	subs	r1, #8
 8001134:	408f      	lsls	r7, r1
 8001136:	0013      	movs	r3, r2
 8001138:	408e      	lsls	r6, r1
 800113a:	433b      	orrs	r3, r7
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	4b9c      	ldr	r3, [pc, #624]	; (80013b0 <__aeabi_dmul+0x3b0>)
 8001140:	2700      	movs	r7, #0
 8001142:	1a1b      	subs	r3, r3, r0
 8001144:	4699      	mov	r9, r3
 8001146:	2300      	movs	r3, #0
 8001148:	469b      	mov	fp, r3
 800114a:	e77d      	b.n	8001048 <__aeabi_dmul+0x48>
 800114c:	4641      	mov	r1, r8
 800114e:	4653      	mov	r3, sl
 8001150:	430b      	orrs	r3, r1
 8001152:	4993      	ldr	r1, [pc, #588]	; (80013a0 <__aeabi_dmul+0x3a0>)
 8001154:	468c      	mov	ip, r1
 8001156:	44e1      	add	r9, ip
 8001158:	2b00      	cmp	r3, #0
 800115a:	d000      	beq.n	800115e <__aeabi_dmul+0x15e>
 800115c:	e11a      	b.n	8001394 <__aeabi_dmul+0x394>
 800115e:	2202      	movs	r2, #2
 8001160:	2002      	movs	r0, #2
 8001162:	4317      	orrs	r7, r2
 8001164:	2200      	movs	r2, #0
 8001166:	e78c      	b.n	8001082 <__aeabi_dmul+0x82>
 8001168:	4313      	orrs	r3, r2
 800116a:	d100      	bne.n	800116e <__aeabi_dmul+0x16e>
 800116c:	e10d      	b.n	800138a <__aeabi_dmul+0x38a>
 800116e:	4643      	mov	r3, r8
 8001170:	2b00      	cmp	r3, #0
 8001172:	d100      	bne.n	8001176 <__aeabi_dmul+0x176>
 8001174:	e181      	b.n	800147a <__aeabi_dmul+0x47a>
 8001176:	4640      	mov	r0, r8
 8001178:	f000 faa4 	bl	80016c4 <__clzsi2>
 800117c:	0002      	movs	r2, r0
 800117e:	3a0b      	subs	r2, #11
 8001180:	2a1c      	cmp	r2, #28
 8001182:	dd00      	ble.n	8001186 <__aeabi_dmul+0x186>
 8001184:	e172      	b.n	800146c <__aeabi_dmul+0x46c>
 8001186:	0001      	movs	r1, r0
 8001188:	4643      	mov	r3, r8
 800118a:	3908      	subs	r1, #8
 800118c:	408b      	lsls	r3, r1
 800118e:	4698      	mov	r8, r3
 8001190:	231d      	movs	r3, #29
 8001192:	1a9a      	subs	r2, r3, r2
 8001194:	4653      	mov	r3, sl
 8001196:	40d3      	lsrs	r3, r2
 8001198:	001a      	movs	r2, r3
 800119a:	4643      	mov	r3, r8
 800119c:	4313      	orrs	r3, r2
 800119e:	4652      	mov	r2, sl
 80011a0:	408a      	lsls	r2, r1
 80011a2:	4649      	mov	r1, r9
 80011a4:	1a08      	subs	r0, r1, r0
 80011a6:	4982      	ldr	r1, [pc, #520]	; (80013b0 <__aeabi_dmul+0x3b0>)
 80011a8:	4689      	mov	r9, r1
 80011aa:	4481      	add	r9, r0
 80011ac:	2000      	movs	r0, #0
 80011ae:	e768      	b.n	8001082 <__aeabi_dmul+0x82>
 80011b0:	4b7b      	ldr	r3, [pc, #492]	; (80013a0 <__aeabi_dmul+0x3a0>)
 80011b2:	2700      	movs	r7, #0
 80011b4:	2600      	movs	r6, #0
 80011b6:	e78e      	b.n	80010d6 <__aeabi_dmul+0xd6>
 80011b8:	0c14      	lsrs	r4, r2, #16
 80011ba:	0412      	lsls	r2, r2, #16
 80011bc:	0c12      	lsrs	r2, r2, #16
 80011be:	0011      	movs	r1, r2
 80011c0:	0c37      	lsrs	r7, r6, #16
 80011c2:	0436      	lsls	r6, r6, #16
 80011c4:	0c35      	lsrs	r5, r6, #16
 80011c6:	4379      	muls	r1, r7
 80011c8:	0028      	movs	r0, r5
 80011ca:	468c      	mov	ip, r1
 80011cc:	002e      	movs	r6, r5
 80011ce:	4360      	muls	r0, r4
 80011d0:	4460      	add	r0, ip
 80011d2:	4683      	mov	fp, r0
 80011d4:	4356      	muls	r6, r2
 80011d6:	0021      	movs	r1, r4
 80011d8:	0c30      	lsrs	r0, r6, #16
 80011da:	4680      	mov	r8, r0
 80011dc:	4658      	mov	r0, fp
 80011de:	4379      	muls	r1, r7
 80011e0:	4440      	add	r0, r8
 80011e2:	9102      	str	r1, [sp, #8]
 80011e4:	4584      	cmp	ip, r0
 80011e6:	d906      	bls.n	80011f6 <__aeabi_dmul+0x1f6>
 80011e8:	4688      	mov	r8, r1
 80011ea:	2180      	movs	r1, #128	; 0x80
 80011ec:	0249      	lsls	r1, r1, #9
 80011ee:	468c      	mov	ip, r1
 80011f0:	44e0      	add	r8, ip
 80011f2:	4641      	mov	r1, r8
 80011f4:	9102      	str	r1, [sp, #8]
 80011f6:	0436      	lsls	r6, r6, #16
 80011f8:	0c01      	lsrs	r1, r0, #16
 80011fa:	0c36      	lsrs	r6, r6, #16
 80011fc:	0400      	lsls	r0, r0, #16
 80011fe:	468b      	mov	fp, r1
 8001200:	1981      	adds	r1, r0, r6
 8001202:	0c1e      	lsrs	r6, r3, #16
 8001204:	041b      	lsls	r3, r3, #16
 8001206:	0c1b      	lsrs	r3, r3, #16
 8001208:	9103      	str	r1, [sp, #12]
 800120a:	0019      	movs	r1, r3
 800120c:	4379      	muls	r1, r7
 800120e:	468c      	mov	ip, r1
 8001210:	0028      	movs	r0, r5
 8001212:	4375      	muls	r5, r6
 8001214:	4465      	add	r5, ip
 8001216:	46a8      	mov	r8, r5
 8001218:	4358      	muls	r0, r3
 800121a:	0c05      	lsrs	r5, r0, #16
 800121c:	4445      	add	r5, r8
 800121e:	4377      	muls	r7, r6
 8001220:	42a9      	cmp	r1, r5
 8001222:	d903      	bls.n	800122c <__aeabi_dmul+0x22c>
 8001224:	2180      	movs	r1, #128	; 0x80
 8001226:	0249      	lsls	r1, r1, #9
 8001228:	468c      	mov	ip, r1
 800122a:	4467      	add	r7, ip
 800122c:	0c29      	lsrs	r1, r5, #16
 800122e:	468c      	mov	ip, r1
 8001230:	0039      	movs	r1, r7
 8001232:	0400      	lsls	r0, r0, #16
 8001234:	0c00      	lsrs	r0, r0, #16
 8001236:	042d      	lsls	r5, r5, #16
 8001238:	182d      	adds	r5, r5, r0
 800123a:	4461      	add	r1, ip
 800123c:	44ab      	add	fp, r5
 800123e:	9105      	str	r1, [sp, #20]
 8001240:	4659      	mov	r1, fp
 8001242:	9104      	str	r1, [sp, #16]
 8001244:	9901      	ldr	r1, [sp, #4]
 8001246:	040f      	lsls	r7, r1, #16
 8001248:	0c3f      	lsrs	r7, r7, #16
 800124a:	0c08      	lsrs	r0, r1, #16
 800124c:	0039      	movs	r1, r7
 800124e:	4351      	muls	r1, r2
 8001250:	4342      	muls	r2, r0
 8001252:	4690      	mov	r8, r2
 8001254:	0002      	movs	r2, r0
 8001256:	468c      	mov	ip, r1
 8001258:	0c09      	lsrs	r1, r1, #16
 800125a:	468b      	mov	fp, r1
 800125c:	4362      	muls	r2, r4
 800125e:	437c      	muls	r4, r7
 8001260:	4444      	add	r4, r8
 8001262:	445c      	add	r4, fp
 8001264:	45a0      	cmp	r8, r4
 8001266:	d903      	bls.n	8001270 <__aeabi_dmul+0x270>
 8001268:	2180      	movs	r1, #128	; 0x80
 800126a:	0249      	lsls	r1, r1, #9
 800126c:	4688      	mov	r8, r1
 800126e:	4442      	add	r2, r8
 8001270:	0c21      	lsrs	r1, r4, #16
 8001272:	4688      	mov	r8, r1
 8001274:	4661      	mov	r1, ip
 8001276:	0409      	lsls	r1, r1, #16
 8001278:	0c09      	lsrs	r1, r1, #16
 800127a:	468c      	mov	ip, r1
 800127c:	0039      	movs	r1, r7
 800127e:	4359      	muls	r1, r3
 8001280:	4343      	muls	r3, r0
 8001282:	4370      	muls	r0, r6
 8001284:	437e      	muls	r6, r7
 8001286:	0c0f      	lsrs	r7, r1, #16
 8001288:	18f6      	adds	r6, r6, r3
 800128a:	0424      	lsls	r4, r4, #16
 800128c:	19be      	adds	r6, r7, r6
 800128e:	4464      	add	r4, ip
 8001290:	4442      	add	r2, r8
 8001292:	468c      	mov	ip, r1
 8001294:	42b3      	cmp	r3, r6
 8001296:	d903      	bls.n	80012a0 <__aeabi_dmul+0x2a0>
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	025b      	lsls	r3, r3, #9
 800129c:	4698      	mov	r8, r3
 800129e:	4440      	add	r0, r8
 80012a0:	9b02      	ldr	r3, [sp, #8]
 80012a2:	4661      	mov	r1, ip
 80012a4:	4698      	mov	r8, r3
 80012a6:	9b04      	ldr	r3, [sp, #16]
 80012a8:	0437      	lsls	r7, r6, #16
 80012aa:	4443      	add	r3, r8
 80012ac:	469b      	mov	fp, r3
 80012ae:	45ab      	cmp	fp, r5
 80012b0:	41ad      	sbcs	r5, r5
 80012b2:	426b      	negs	r3, r5
 80012b4:	040d      	lsls	r5, r1, #16
 80012b6:	9905      	ldr	r1, [sp, #20]
 80012b8:	0c2d      	lsrs	r5, r5, #16
 80012ba:	468c      	mov	ip, r1
 80012bc:	197f      	adds	r7, r7, r5
 80012be:	4467      	add	r7, ip
 80012c0:	18fd      	adds	r5, r7, r3
 80012c2:	46a8      	mov	r8, r5
 80012c4:	465d      	mov	r5, fp
 80012c6:	192d      	adds	r5, r5, r4
 80012c8:	42a5      	cmp	r5, r4
 80012ca:	41a4      	sbcs	r4, r4
 80012cc:	4693      	mov	fp, r2
 80012ce:	4264      	negs	r4, r4
 80012d0:	46a4      	mov	ip, r4
 80012d2:	44c3      	add	fp, r8
 80012d4:	44dc      	add	ip, fp
 80012d6:	428f      	cmp	r7, r1
 80012d8:	41bf      	sbcs	r7, r7
 80012da:	4598      	cmp	r8, r3
 80012dc:	419b      	sbcs	r3, r3
 80012de:	4593      	cmp	fp, r2
 80012e0:	4192      	sbcs	r2, r2
 80012e2:	45a4      	cmp	ip, r4
 80012e4:	41a4      	sbcs	r4, r4
 80012e6:	425b      	negs	r3, r3
 80012e8:	427f      	negs	r7, r7
 80012ea:	431f      	orrs	r7, r3
 80012ec:	0c36      	lsrs	r6, r6, #16
 80012ee:	4252      	negs	r2, r2
 80012f0:	4264      	negs	r4, r4
 80012f2:	19bf      	adds	r7, r7, r6
 80012f4:	4322      	orrs	r2, r4
 80012f6:	18bf      	adds	r7, r7, r2
 80012f8:	4662      	mov	r2, ip
 80012fa:	1838      	adds	r0, r7, r0
 80012fc:	0243      	lsls	r3, r0, #9
 80012fe:	0dd2      	lsrs	r2, r2, #23
 8001300:	9903      	ldr	r1, [sp, #12]
 8001302:	4313      	orrs	r3, r2
 8001304:	026a      	lsls	r2, r5, #9
 8001306:	430a      	orrs	r2, r1
 8001308:	1e50      	subs	r0, r2, #1
 800130a:	4182      	sbcs	r2, r0
 800130c:	4661      	mov	r1, ip
 800130e:	0ded      	lsrs	r5, r5, #23
 8001310:	432a      	orrs	r2, r5
 8001312:	024e      	lsls	r6, r1, #9
 8001314:	4332      	orrs	r2, r6
 8001316:	01d9      	lsls	r1, r3, #7
 8001318:	d400      	bmi.n	800131c <__aeabi_dmul+0x31c>
 800131a:	e0b3      	b.n	8001484 <__aeabi_dmul+0x484>
 800131c:	2601      	movs	r6, #1
 800131e:	0850      	lsrs	r0, r2, #1
 8001320:	4032      	ands	r2, r6
 8001322:	4302      	orrs	r2, r0
 8001324:	07de      	lsls	r6, r3, #31
 8001326:	4332      	orrs	r2, r6
 8001328:	085b      	lsrs	r3, r3, #1
 800132a:	4c22      	ldr	r4, [pc, #136]	; (80013b4 <__aeabi_dmul+0x3b4>)
 800132c:	4454      	add	r4, sl
 800132e:	2c00      	cmp	r4, #0
 8001330:	dd62      	ble.n	80013f8 <__aeabi_dmul+0x3f8>
 8001332:	0751      	lsls	r1, r2, #29
 8001334:	d009      	beq.n	800134a <__aeabi_dmul+0x34a>
 8001336:	200f      	movs	r0, #15
 8001338:	4010      	ands	r0, r2
 800133a:	2804      	cmp	r0, #4
 800133c:	d005      	beq.n	800134a <__aeabi_dmul+0x34a>
 800133e:	1d10      	adds	r0, r2, #4
 8001340:	4290      	cmp	r0, r2
 8001342:	4192      	sbcs	r2, r2
 8001344:	4252      	negs	r2, r2
 8001346:	189b      	adds	r3, r3, r2
 8001348:	0002      	movs	r2, r0
 800134a:	01d9      	lsls	r1, r3, #7
 800134c:	d504      	bpl.n	8001358 <__aeabi_dmul+0x358>
 800134e:	2480      	movs	r4, #128	; 0x80
 8001350:	4819      	ldr	r0, [pc, #100]	; (80013b8 <__aeabi_dmul+0x3b8>)
 8001352:	00e4      	lsls	r4, r4, #3
 8001354:	4003      	ands	r3, r0
 8001356:	4454      	add	r4, sl
 8001358:	4818      	ldr	r0, [pc, #96]	; (80013bc <__aeabi_dmul+0x3bc>)
 800135a:	4284      	cmp	r4, r0
 800135c:	dd00      	ble.n	8001360 <__aeabi_dmul+0x360>
 800135e:	e727      	b.n	80011b0 <__aeabi_dmul+0x1b0>
 8001360:	075e      	lsls	r6, r3, #29
 8001362:	025b      	lsls	r3, r3, #9
 8001364:	08d2      	lsrs	r2, r2, #3
 8001366:	0b1f      	lsrs	r7, r3, #12
 8001368:	0563      	lsls	r3, r4, #21
 800136a:	4316      	orrs	r6, r2
 800136c:	0d5b      	lsrs	r3, r3, #21
 800136e:	e6b2      	b.n	80010d6 <__aeabi_dmul+0xd6>
 8001370:	2300      	movs	r3, #0
 8001372:	4699      	mov	r9, r3
 8001374:	3301      	adds	r3, #1
 8001376:	2704      	movs	r7, #4
 8001378:	2600      	movs	r6, #0
 800137a:	469b      	mov	fp, r3
 800137c:	e664      	b.n	8001048 <__aeabi_dmul+0x48>
 800137e:	2303      	movs	r3, #3
 8001380:	9701      	str	r7, [sp, #4]
 8001382:	4681      	mov	r9, r0
 8001384:	270c      	movs	r7, #12
 8001386:	469b      	mov	fp, r3
 8001388:	e65e      	b.n	8001048 <__aeabi_dmul+0x48>
 800138a:	2201      	movs	r2, #1
 800138c:	2001      	movs	r0, #1
 800138e:	4317      	orrs	r7, r2
 8001390:	2200      	movs	r2, #0
 8001392:	e676      	b.n	8001082 <__aeabi_dmul+0x82>
 8001394:	2303      	movs	r3, #3
 8001396:	2003      	movs	r0, #3
 8001398:	431f      	orrs	r7, r3
 800139a:	4643      	mov	r3, r8
 800139c:	e671      	b.n	8001082 <__aeabi_dmul+0x82>
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	000007ff 	.word	0x000007ff
 80013a4:	fffffc01 	.word	0xfffffc01
 80013a8:	0800b6b0 	.word	0x0800b6b0
 80013ac:	800fffff 	.word	0x800fffff
 80013b0:	fffffc0d 	.word	0xfffffc0d
 80013b4:	000003ff 	.word	0x000003ff
 80013b8:	feffffff 	.word	0xfeffffff
 80013bc:	000007fe 	.word	0x000007fe
 80013c0:	2300      	movs	r3, #0
 80013c2:	2780      	movs	r7, #128	; 0x80
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	033f      	lsls	r7, r7, #12
 80013c8:	2600      	movs	r6, #0
 80013ca:	4b43      	ldr	r3, [pc, #268]	; (80014d8 <__aeabi_dmul+0x4d8>)
 80013cc:	e683      	b.n	80010d6 <__aeabi_dmul+0xd6>
 80013ce:	9b01      	ldr	r3, [sp, #4]
 80013d0:	0032      	movs	r2, r6
 80013d2:	46a4      	mov	ip, r4
 80013d4:	4658      	mov	r0, fp
 80013d6:	e670      	b.n	80010ba <__aeabi_dmul+0xba>
 80013d8:	46ac      	mov	ip, r5
 80013da:	e66e      	b.n	80010ba <__aeabi_dmul+0xba>
 80013dc:	2780      	movs	r7, #128	; 0x80
 80013de:	9901      	ldr	r1, [sp, #4]
 80013e0:	033f      	lsls	r7, r7, #12
 80013e2:	4239      	tst	r1, r7
 80013e4:	d02d      	beq.n	8001442 <__aeabi_dmul+0x442>
 80013e6:	423b      	tst	r3, r7
 80013e8:	d12b      	bne.n	8001442 <__aeabi_dmul+0x442>
 80013ea:	431f      	orrs	r7, r3
 80013ec:	033f      	lsls	r7, r7, #12
 80013ee:	0b3f      	lsrs	r7, r7, #12
 80013f0:	9500      	str	r5, [sp, #0]
 80013f2:	0016      	movs	r6, r2
 80013f4:	4b38      	ldr	r3, [pc, #224]	; (80014d8 <__aeabi_dmul+0x4d8>)
 80013f6:	e66e      	b.n	80010d6 <__aeabi_dmul+0xd6>
 80013f8:	2501      	movs	r5, #1
 80013fa:	1b2d      	subs	r5, r5, r4
 80013fc:	2d38      	cmp	r5, #56	; 0x38
 80013fe:	dd00      	ble.n	8001402 <__aeabi_dmul+0x402>
 8001400:	e666      	b.n	80010d0 <__aeabi_dmul+0xd0>
 8001402:	2d1f      	cmp	r5, #31
 8001404:	dc40      	bgt.n	8001488 <__aeabi_dmul+0x488>
 8001406:	4835      	ldr	r0, [pc, #212]	; (80014dc <__aeabi_dmul+0x4dc>)
 8001408:	001c      	movs	r4, r3
 800140a:	4450      	add	r0, sl
 800140c:	0016      	movs	r6, r2
 800140e:	4082      	lsls	r2, r0
 8001410:	4084      	lsls	r4, r0
 8001412:	40ee      	lsrs	r6, r5
 8001414:	1e50      	subs	r0, r2, #1
 8001416:	4182      	sbcs	r2, r0
 8001418:	4334      	orrs	r4, r6
 800141a:	4314      	orrs	r4, r2
 800141c:	40eb      	lsrs	r3, r5
 800141e:	0762      	lsls	r2, r4, #29
 8001420:	d009      	beq.n	8001436 <__aeabi_dmul+0x436>
 8001422:	220f      	movs	r2, #15
 8001424:	4022      	ands	r2, r4
 8001426:	2a04      	cmp	r2, #4
 8001428:	d005      	beq.n	8001436 <__aeabi_dmul+0x436>
 800142a:	0022      	movs	r2, r4
 800142c:	1d14      	adds	r4, r2, #4
 800142e:	4294      	cmp	r4, r2
 8001430:	4180      	sbcs	r0, r0
 8001432:	4240      	negs	r0, r0
 8001434:	181b      	adds	r3, r3, r0
 8001436:	021a      	lsls	r2, r3, #8
 8001438:	d53e      	bpl.n	80014b8 <__aeabi_dmul+0x4b8>
 800143a:	2301      	movs	r3, #1
 800143c:	2700      	movs	r7, #0
 800143e:	2600      	movs	r6, #0
 8001440:	e649      	b.n	80010d6 <__aeabi_dmul+0xd6>
 8001442:	2780      	movs	r7, #128	; 0x80
 8001444:	9b01      	ldr	r3, [sp, #4]
 8001446:	033f      	lsls	r7, r7, #12
 8001448:	431f      	orrs	r7, r3
 800144a:	033f      	lsls	r7, r7, #12
 800144c:	0b3f      	lsrs	r7, r7, #12
 800144e:	9400      	str	r4, [sp, #0]
 8001450:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <__aeabi_dmul+0x4d8>)
 8001452:	e640      	b.n	80010d6 <__aeabi_dmul+0xd6>
 8001454:	0003      	movs	r3, r0
 8001456:	465a      	mov	r2, fp
 8001458:	3b28      	subs	r3, #40	; 0x28
 800145a:	409a      	lsls	r2, r3
 800145c:	2600      	movs	r6, #0
 800145e:	9201      	str	r2, [sp, #4]
 8001460:	e66d      	b.n	800113e <__aeabi_dmul+0x13e>
 8001462:	4658      	mov	r0, fp
 8001464:	f000 f92e 	bl	80016c4 <__clzsi2>
 8001468:	3020      	adds	r0, #32
 800146a:	e657      	b.n	800111c <__aeabi_dmul+0x11c>
 800146c:	0003      	movs	r3, r0
 800146e:	4652      	mov	r2, sl
 8001470:	3b28      	subs	r3, #40	; 0x28
 8001472:	409a      	lsls	r2, r3
 8001474:	0013      	movs	r3, r2
 8001476:	2200      	movs	r2, #0
 8001478:	e693      	b.n	80011a2 <__aeabi_dmul+0x1a2>
 800147a:	4650      	mov	r0, sl
 800147c:	f000 f922 	bl	80016c4 <__clzsi2>
 8001480:	3020      	adds	r0, #32
 8001482:	e67b      	b.n	800117c <__aeabi_dmul+0x17c>
 8001484:	46ca      	mov	sl, r9
 8001486:	e750      	b.n	800132a <__aeabi_dmul+0x32a>
 8001488:	201f      	movs	r0, #31
 800148a:	001e      	movs	r6, r3
 800148c:	4240      	negs	r0, r0
 800148e:	1b04      	subs	r4, r0, r4
 8001490:	40e6      	lsrs	r6, r4
 8001492:	2d20      	cmp	r5, #32
 8001494:	d003      	beq.n	800149e <__aeabi_dmul+0x49e>
 8001496:	4c12      	ldr	r4, [pc, #72]	; (80014e0 <__aeabi_dmul+0x4e0>)
 8001498:	4454      	add	r4, sl
 800149a:	40a3      	lsls	r3, r4
 800149c:	431a      	orrs	r2, r3
 800149e:	1e50      	subs	r0, r2, #1
 80014a0:	4182      	sbcs	r2, r0
 80014a2:	4332      	orrs	r2, r6
 80014a4:	2607      	movs	r6, #7
 80014a6:	2700      	movs	r7, #0
 80014a8:	4016      	ands	r6, r2
 80014aa:	d009      	beq.n	80014c0 <__aeabi_dmul+0x4c0>
 80014ac:	200f      	movs	r0, #15
 80014ae:	2300      	movs	r3, #0
 80014b0:	4010      	ands	r0, r2
 80014b2:	0014      	movs	r4, r2
 80014b4:	2804      	cmp	r0, #4
 80014b6:	d1b9      	bne.n	800142c <__aeabi_dmul+0x42c>
 80014b8:	0022      	movs	r2, r4
 80014ba:	075e      	lsls	r6, r3, #29
 80014bc:	025b      	lsls	r3, r3, #9
 80014be:	0b1f      	lsrs	r7, r3, #12
 80014c0:	08d2      	lsrs	r2, r2, #3
 80014c2:	4316      	orrs	r6, r2
 80014c4:	2300      	movs	r3, #0
 80014c6:	e606      	b.n	80010d6 <__aeabi_dmul+0xd6>
 80014c8:	2780      	movs	r7, #128	; 0x80
 80014ca:	033f      	lsls	r7, r7, #12
 80014cc:	431f      	orrs	r7, r3
 80014ce:	033f      	lsls	r7, r7, #12
 80014d0:	0b3f      	lsrs	r7, r7, #12
 80014d2:	0016      	movs	r6, r2
 80014d4:	4b00      	ldr	r3, [pc, #0]	; (80014d8 <__aeabi_dmul+0x4d8>)
 80014d6:	e5fe      	b.n	80010d6 <__aeabi_dmul+0xd6>
 80014d8:	000007ff 	.word	0x000007ff
 80014dc:	0000041e 	.word	0x0000041e
 80014e0:	0000043e 	.word	0x0000043e

080014e4 <__aeabi_i2d>:
 80014e4:	b570      	push	{r4, r5, r6, lr}
 80014e6:	2800      	cmp	r0, #0
 80014e8:	d02d      	beq.n	8001546 <__aeabi_i2d+0x62>
 80014ea:	17c3      	asrs	r3, r0, #31
 80014ec:	18c5      	adds	r5, r0, r3
 80014ee:	405d      	eors	r5, r3
 80014f0:	0fc4      	lsrs	r4, r0, #31
 80014f2:	0028      	movs	r0, r5
 80014f4:	f000 f8e6 	bl	80016c4 <__clzsi2>
 80014f8:	4b15      	ldr	r3, [pc, #84]	; (8001550 <__aeabi_i2d+0x6c>)
 80014fa:	1a1b      	subs	r3, r3, r0
 80014fc:	055b      	lsls	r3, r3, #21
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	280a      	cmp	r0, #10
 8001502:	dd15      	ble.n	8001530 <__aeabi_i2d+0x4c>
 8001504:	380b      	subs	r0, #11
 8001506:	4085      	lsls	r5, r0
 8001508:	2200      	movs	r2, #0
 800150a:	032d      	lsls	r5, r5, #12
 800150c:	0b2d      	lsrs	r5, r5, #12
 800150e:	2100      	movs	r1, #0
 8001510:	0010      	movs	r0, r2
 8001512:	032d      	lsls	r5, r5, #12
 8001514:	0d0a      	lsrs	r2, r1, #20
 8001516:	0b2d      	lsrs	r5, r5, #12
 8001518:	0512      	lsls	r2, r2, #20
 800151a:	432a      	orrs	r2, r5
 800151c:	4d0d      	ldr	r5, [pc, #52]	; (8001554 <__aeabi_i2d+0x70>)
 800151e:	051b      	lsls	r3, r3, #20
 8001520:	402a      	ands	r2, r5
 8001522:	4313      	orrs	r3, r2
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	07e4      	lsls	r4, r4, #31
 8001528:	085b      	lsrs	r3, r3, #1
 800152a:	4323      	orrs	r3, r4
 800152c:	0019      	movs	r1, r3
 800152e:	bd70      	pop	{r4, r5, r6, pc}
 8001530:	0002      	movs	r2, r0
 8001532:	0029      	movs	r1, r5
 8001534:	3215      	adds	r2, #21
 8001536:	4091      	lsls	r1, r2
 8001538:	000a      	movs	r2, r1
 800153a:	210b      	movs	r1, #11
 800153c:	1a08      	subs	r0, r1, r0
 800153e:	40c5      	lsrs	r5, r0
 8001540:	032d      	lsls	r5, r5, #12
 8001542:	0b2d      	lsrs	r5, r5, #12
 8001544:	e7e3      	b.n	800150e <__aeabi_i2d+0x2a>
 8001546:	2400      	movs	r4, #0
 8001548:	2300      	movs	r3, #0
 800154a:	2500      	movs	r5, #0
 800154c:	2200      	movs	r2, #0
 800154e:	e7de      	b.n	800150e <__aeabi_i2d+0x2a>
 8001550:	0000041e 	.word	0x0000041e
 8001554:	800fffff 	.word	0x800fffff

08001558 <__aeabi_ui2d>:
 8001558:	b510      	push	{r4, lr}
 800155a:	1e04      	subs	r4, r0, #0
 800155c:	d025      	beq.n	80015aa <__aeabi_ui2d+0x52>
 800155e:	f000 f8b1 	bl	80016c4 <__clzsi2>
 8001562:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <__aeabi_ui2d+0x5c>)
 8001564:	1a1b      	subs	r3, r3, r0
 8001566:	055b      	lsls	r3, r3, #21
 8001568:	0d5b      	lsrs	r3, r3, #21
 800156a:	280a      	cmp	r0, #10
 800156c:	dd12      	ble.n	8001594 <__aeabi_ui2d+0x3c>
 800156e:	380b      	subs	r0, #11
 8001570:	4084      	lsls	r4, r0
 8001572:	2200      	movs	r2, #0
 8001574:	0324      	lsls	r4, r4, #12
 8001576:	0b24      	lsrs	r4, r4, #12
 8001578:	2100      	movs	r1, #0
 800157a:	0010      	movs	r0, r2
 800157c:	0324      	lsls	r4, r4, #12
 800157e:	0d0a      	lsrs	r2, r1, #20
 8001580:	0b24      	lsrs	r4, r4, #12
 8001582:	0512      	lsls	r2, r2, #20
 8001584:	4322      	orrs	r2, r4
 8001586:	4c0c      	ldr	r4, [pc, #48]	; (80015b8 <__aeabi_ui2d+0x60>)
 8001588:	051b      	lsls	r3, r3, #20
 800158a:	4022      	ands	r2, r4
 800158c:	4313      	orrs	r3, r2
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	0859      	lsrs	r1, r3, #1
 8001592:	bd10      	pop	{r4, pc}
 8001594:	0002      	movs	r2, r0
 8001596:	0021      	movs	r1, r4
 8001598:	3215      	adds	r2, #21
 800159a:	4091      	lsls	r1, r2
 800159c:	000a      	movs	r2, r1
 800159e:	210b      	movs	r1, #11
 80015a0:	1a08      	subs	r0, r1, r0
 80015a2:	40c4      	lsrs	r4, r0
 80015a4:	0324      	lsls	r4, r4, #12
 80015a6:	0b24      	lsrs	r4, r4, #12
 80015a8:	e7e6      	b.n	8001578 <__aeabi_ui2d+0x20>
 80015aa:	2300      	movs	r3, #0
 80015ac:	2400      	movs	r4, #0
 80015ae:	2200      	movs	r2, #0
 80015b0:	e7e2      	b.n	8001578 <__aeabi_ui2d+0x20>
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	0000041e 	.word	0x0000041e
 80015b8:	800fffff 	.word	0x800fffff

080015bc <__aeabi_d2f>:
 80015bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015be:	004c      	lsls	r4, r1, #1
 80015c0:	0d64      	lsrs	r4, r4, #21
 80015c2:	030b      	lsls	r3, r1, #12
 80015c4:	1c62      	adds	r2, r4, #1
 80015c6:	0a5b      	lsrs	r3, r3, #9
 80015c8:	0f46      	lsrs	r6, r0, #29
 80015ca:	0552      	lsls	r2, r2, #21
 80015cc:	0fc9      	lsrs	r1, r1, #31
 80015ce:	431e      	orrs	r6, r3
 80015d0:	00c5      	lsls	r5, r0, #3
 80015d2:	0d52      	lsrs	r2, r2, #21
 80015d4:	2a01      	cmp	r2, #1
 80015d6:	dd29      	ble.n	800162c <__aeabi_d2f+0x70>
 80015d8:	4b37      	ldr	r3, [pc, #220]	; (80016b8 <__aeabi_d2f+0xfc>)
 80015da:	18e7      	adds	r7, r4, r3
 80015dc:	2ffe      	cmp	r7, #254	; 0xfe
 80015de:	dc1c      	bgt.n	800161a <__aeabi_d2f+0x5e>
 80015e0:	2f00      	cmp	r7, #0
 80015e2:	dd3b      	ble.n	800165c <__aeabi_d2f+0xa0>
 80015e4:	0180      	lsls	r0, r0, #6
 80015e6:	1e43      	subs	r3, r0, #1
 80015e8:	4198      	sbcs	r0, r3
 80015ea:	2207      	movs	r2, #7
 80015ec:	00f3      	lsls	r3, r6, #3
 80015ee:	0f6d      	lsrs	r5, r5, #29
 80015f0:	4303      	orrs	r3, r0
 80015f2:	432b      	orrs	r3, r5
 80015f4:	401a      	ands	r2, r3
 80015f6:	2a00      	cmp	r2, #0
 80015f8:	d004      	beq.n	8001604 <__aeabi_d2f+0x48>
 80015fa:	220f      	movs	r2, #15
 80015fc:	401a      	ands	r2, r3
 80015fe:	2a04      	cmp	r2, #4
 8001600:	d000      	beq.n	8001604 <__aeabi_d2f+0x48>
 8001602:	3304      	adds	r3, #4
 8001604:	2280      	movs	r2, #128	; 0x80
 8001606:	04d2      	lsls	r2, r2, #19
 8001608:	401a      	ands	r2, r3
 800160a:	d024      	beq.n	8001656 <__aeabi_d2f+0x9a>
 800160c:	3701      	adds	r7, #1
 800160e:	b2fa      	uxtb	r2, r7
 8001610:	2fff      	cmp	r7, #255	; 0xff
 8001612:	d002      	beq.n	800161a <__aeabi_d2f+0x5e>
 8001614:	019b      	lsls	r3, r3, #6
 8001616:	0a58      	lsrs	r0, r3, #9
 8001618:	e001      	b.n	800161e <__aeabi_d2f+0x62>
 800161a:	22ff      	movs	r2, #255	; 0xff
 800161c:	2000      	movs	r0, #0
 800161e:	0240      	lsls	r0, r0, #9
 8001620:	05d2      	lsls	r2, r2, #23
 8001622:	0a40      	lsrs	r0, r0, #9
 8001624:	07c9      	lsls	r1, r1, #31
 8001626:	4310      	orrs	r0, r2
 8001628:	4308      	orrs	r0, r1
 800162a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800162c:	4335      	orrs	r5, r6
 800162e:	2c00      	cmp	r4, #0
 8001630:	d104      	bne.n	800163c <__aeabi_d2f+0x80>
 8001632:	2d00      	cmp	r5, #0
 8001634:	d10a      	bne.n	800164c <__aeabi_d2f+0x90>
 8001636:	2200      	movs	r2, #0
 8001638:	2000      	movs	r0, #0
 800163a:	e7f0      	b.n	800161e <__aeabi_d2f+0x62>
 800163c:	2d00      	cmp	r5, #0
 800163e:	d0ec      	beq.n	800161a <__aeabi_d2f+0x5e>
 8001640:	2080      	movs	r0, #128	; 0x80
 8001642:	03c0      	lsls	r0, r0, #15
 8001644:	4330      	orrs	r0, r6
 8001646:	22ff      	movs	r2, #255	; 0xff
 8001648:	e7e9      	b.n	800161e <__aeabi_d2f+0x62>
 800164a:	2400      	movs	r4, #0
 800164c:	2300      	movs	r3, #0
 800164e:	025b      	lsls	r3, r3, #9
 8001650:	0a58      	lsrs	r0, r3, #9
 8001652:	b2e2      	uxtb	r2, r4
 8001654:	e7e3      	b.n	800161e <__aeabi_d2f+0x62>
 8001656:	08db      	lsrs	r3, r3, #3
 8001658:	003c      	movs	r4, r7
 800165a:	e7f8      	b.n	800164e <__aeabi_d2f+0x92>
 800165c:	003b      	movs	r3, r7
 800165e:	3317      	adds	r3, #23
 8001660:	dbf3      	blt.n	800164a <__aeabi_d2f+0x8e>
 8001662:	2380      	movs	r3, #128	; 0x80
 8001664:	041b      	lsls	r3, r3, #16
 8001666:	4333      	orrs	r3, r6
 8001668:	261e      	movs	r6, #30
 800166a:	1bf6      	subs	r6, r6, r7
 800166c:	2e1f      	cmp	r6, #31
 800166e:	dd14      	ble.n	800169a <__aeabi_d2f+0xde>
 8001670:	2202      	movs	r2, #2
 8001672:	4252      	negs	r2, r2
 8001674:	1bd7      	subs	r7, r2, r7
 8001676:	001a      	movs	r2, r3
 8001678:	40fa      	lsrs	r2, r7
 800167a:	0017      	movs	r7, r2
 800167c:	2e20      	cmp	r6, #32
 800167e:	d004      	beq.n	800168a <__aeabi_d2f+0xce>
 8001680:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <__aeabi_d2f+0x100>)
 8001682:	4694      	mov	ip, r2
 8001684:	4464      	add	r4, ip
 8001686:	40a3      	lsls	r3, r4
 8001688:	431d      	orrs	r5, r3
 800168a:	002b      	movs	r3, r5
 800168c:	1e5d      	subs	r5, r3, #1
 800168e:	41ab      	sbcs	r3, r5
 8001690:	2207      	movs	r2, #7
 8001692:	433b      	orrs	r3, r7
 8001694:	401a      	ands	r2, r3
 8001696:	2700      	movs	r7, #0
 8001698:	e7ad      	b.n	80015f6 <__aeabi_d2f+0x3a>
 800169a:	4a09      	ldr	r2, [pc, #36]	; (80016c0 <__aeabi_d2f+0x104>)
 800169c:	0028      	movs	r0, r5
 800169e:	18a2      	adds	r2, r4, r2
 80016a0:	4095      	lsls	r5, r2
 80016a2:	4093      	lsls	r3, r2
 80016a4:	1e6c      	subs	r4, r5, #1
 80016a6:	41a5      	sbcs	r5, r4
 80016a8:	40f0      	lsrs	r0, r6
 80016aa:	2207      	movs	r2, #7
 80016ac:	432b      	orrs	r3, r5
 80016ae:	4303      	orrs	r3, r0
 80016b0:	401a      	ands	r2, r3
 80016b2:	2700      	movs	r7, #0
 80016b4:	e79f      	b.n	80015f6 <__aeabi_d2f+0x3a>
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	fffffc80 	.word	0xfffffc80
 80016bc:	fffffca2 	.word	0xfffffca2
 80016c0:	fffffc82 	.word	0xfffffc82

080016c4 <__clzsi2>:
 80016c4:	211c      	movs	r1, #28
 80016c6:	2301      	movs	r3, #1
 80016c8:	041b      	lsls	r3, r3, #16
 80016ca:	4298      	cmp	r0, r3
 80016cc:	d301      	bcc.n	80016d2 <__clzsi2+0xe>
 80016ce:	0c00      	lsrs	r0, r0, #16
 80016d0:	3910      	subs	r1, #16
 80016d2:	0a1b      	lsrs	r3, r3, #8
 80016d4:	4298      	cmp	r0, r3
 80016d6:	d301      	bcc.n	80016dc <__clzsi2+0x18>
 80016d8:	0a00      	lsrs	r0, r0, #8
 80016da:	3908      	subs	r1, #8
 80016dc:	091b      	lsrs	r3, r3, #4
 80016de:	4298      	cmp	r0, r3
 80016e0:	d301      	bcc.n	80016e6 <__clzsi2+0x22>
 80016e2:	0900      	lsrs	r0, r0, #4
 80016e4:	3904      	subs	r1, #4
 80016e6:	a202      	add	r2, pc, #8	; (adr r2, 80016f0 <__clzsi2+0x2c>)
 80016e8:	5c10      	ldrb	r0, [r2, r0]
 80016ea:	1840      	adds	r0, r0, r1
 80016ec:	4770      	bx	lr
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	02020304 	.word	0x02020304
 80016f4:	01010101 	.word	0x01010101
	...

08001700 <SPI_CS_LOW>:
static uint8_t textSize;
static uint16_t textColor;
static uint16_t bg;

// ---- lower level functions ----
void SPI_CS_LOW() {HAL_GPIO_WritePin(CS_GPIO, CS_PIN, GPIO_PIN_RESET);}
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
 8001704:	4b04      	ldr	r3, [pc, #16]	; (8001718 <SPI_CS_LOW+0x18>)
 8001706:	2200      	movs	r2, #0
 8001708:	2180      	movs	r1, #128	; 0x80
 800170a:	0018      	movs	r0, r3
 800170c:	f005 ff93 	bl	8007636 <HAL_GPIO_WritePin>
 8001710:	46c0      	nop			; (mov r8, r8)
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	50000800 	.word	0x50000800

0800171c <SPI_CS_HIGH>:

void SPI_CS_HIGH() {HAL_GPIO_WritePin(CS_GPIO, CS_PIN, GPIO_PIN_SET);}
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <SPI_CS_HIGH+0x18>)
 8001722:	2201      	movs	r2, #1
 8001724:	2180      	movs	r1, #128	; 0x80
 8001726:	0018      	movs	r0, r3
 8001728:	f005 ff85 	bl	8007636 <HAL_GPIO_WritePin>
 800172c:	46c0      	nop			; (mov r8, r8)
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	50000800 	.word	0x50000800

08001738 <SPI_DC_LOW>:

void SPI_DC_LOW() {HAL_GPIO_WritePin(DC_GPIO, DC_PIN, GPIO_PIN_RESET);}
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <SPI_DC_LOW+0x18>)
 800173e:	2200      	movs	r2, #0
 8001740:	2140      	movs	r1, #64	; 0x40
 8001742:	0018      	movs	r0, r3
 8001744:	f005 ff77 	bl	8007636 <HAL_GPIO_WritePin>
 8001748:	46c0      	nop			; (mov r8, r8)
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	50000400 	.word	0x50000400

08001754 <SPI_DC_HIGH>:

void SPI_DC_HIGH() {HAL_GPIO_WritePin(DC_GPIO, DC_PIN, GPIO_PIN_SET);}
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <SPI_DC_HIGH+0x18>)
 800175a:	2201      	movs	r2, #1
 800175c:	2140      	movs	r1, #64	; 0x40
 800175e:	0018      	movs	r0, r3
 8001760:	f005 ff69 	bl	8007636 <HAL_GPIO_WritePin>
 8001764:	46c0      	nop			; (mov r8, r8)
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	50000400 	.word	0x50000400

08001770 <sendCommand>:

// still ripped but now im changing it
void sendCommand(uint8_t cmd, uint8_t *args, uint16_t numArgs, SPI_HandleTypeDef *hspi) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	0011      	movs	r1, r2
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	230f      	movs	r3, #15
 800177e:	18fb      	adds	r3, r7, r3
 8001780:	1c02      	adds	r2, r0, #0
 8001782:	701a      	strb	r2, [r3, #0]
 8001784:	230c      	movs	r3, #12
 8001786:	18fb      	adds	r3, r7, r3
 8001788:	1c0a      	adds	r2, r1, #0
 800178a:	801a      	strh	r2, [r3, #0]
	while (HAL_SPI_GetState(hspi) == HAL_SPI_STATE_BUSY_TX);		// block next transfer request while DMA transfer is ongoing
 800178c:	46c0      	nop			; (mov r8, r8)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	0018      	movs	r0, r3
 8001792:	f008 f977 	bl	8009a84 <HAL_SPI_GetState>
 8001796:	0003      	movs	r3, r0
 8001798:	2b03      	cmp	r3, #3
 800179a:	d0f8      	beq.n	800178e <sendCommand+0x1e>
	SPI_CS_LOW();	// chip select
 800179c:	f7ff ffb0 	bl	8001700 <SPI_CS_LOW>

	SPI_DC_LOW();	// command mode
 80017a0:	f7ff ffca 	bl	8001738 <SPI_DC_LOW>
	HAL_SPI_Transmit(hspi, &cmd, 1, 1000);	// not using DMA bc it's only 1 byte
 80017a4:	23fa      	movs	r3, #250	; 0xfa
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	220f      	movs	r2, #15
 80017aa:	18b9      	adds	r1, r7, r2
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f007 fe86 	bl	80094c0 <HAL_SPI_Transmit>

	SPI_DC_HIGH();	// data mode
 80017b4:	f7ff ffce 	bl	8001754 <SPI_DC_HIGH>
	if (numArgs) {
 80017b8:	230c      	movs	r3, #12
 80017ba:	18fb      	adds	r3, r7, r3
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d007      	beq.n	80017d2 <sendCommand+0x62>
		HAL_SPI_Transmit_IT(hspi, args, numArgs);
 80017c2:	230c      	movs	r3, #12
 80017c4:	18fb      	adds	r3, r7, r3
 80017c6:	881a      	ldrh	r2, [r3, #0]
 80017c8:	68b9      	ldr	r1, [r7, #8]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	0018      	movs	r0, r3
 80017ce:	f007 ffc5 	bl	800975c <HAL_SPI_Transmit_IT>
//		HAL_SPI_Transmit_DMA(hspi, args, numArgs);
	}

//	SPI_CS_HIGH();	// chip select disable
}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	46bd      	mov	sp, r7
 80017d6:	b004      	add	sp, #16
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <HAL_SPI_TxCpltCallback>:

// DMA callback on transfer compelete
// using only for sending data, but not commands
// dont send request when transfer is ongoing
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(CS_GPIO, CS_PIN) == GPIO_PIN_RESET) SPI_CS_HIGH();	// chip select disable
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_SPI_TxCpltCallback+0x24>)
 80017e6:	2180      	movs	r1, #128	; 0x80
 80017e8:	0018      	movs	r0, r3
 80017ea:	f005 ff07 	bl	80075fc <HAL_GPIO_ReadPin>
 80017ee:	1e03      	subs	r3, r0, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_SPI_TxCpltCallback+0x1a>
 80017f2:	f7ff ff93 	bl	800171c <SPI_CS_HIGH>
}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	46bd      	mov	sp, r7
 80017fa:	b002      	add	sp, #8
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	50000800 	.word	0x50000800

08001804 <displayInit>:

// array parser heavily based on Adafruit library code
void displayInit(uint8_t *args, SPI_HandleTypeDef *hspi) {
 8001804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
	uint8_t  numCommands, cmd, numArgs;
	uint16_t ms;
	uint8_t index = 0;
 800180e:	220b      	movs	r2, #11
 8001810:	0011      	movs	r1, r2
 8001812:	18bb      	adds	r3, r7, r2
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	numCommands = args[index++];   // Number of commands to follow
 8001818:	000a      	movs	r2, r1
 800181a:	18bb      	adds	r3, r7, r2
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	18ba      	adds	r2, r7, r2
 8001820:	1c59      	adds	r1, r3, #1
 8001822:	7011      	strb	r1, [r2, #0]
 8001824:	001a      	movs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	189a      	adds	r2, r3, r2
 800182a:	230f      	movs	r3, #15
 800182c:	18fb      	adds	r3, r7, r3
 800182e:	7812      	ldrb	r2, [r2, #0]
 8001830:	701a      	strb	r2, [r3, #0]
	while(numCommands--) {                 // For each command...
 8001832:	e05e      	b.n	80018f2 <displayInit+0xee>
		cmd = args[index++];         // Read command
 8001834:	200b      	movs	r0, #11
 8001836:	183b      	adds	r3, r7, r0
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	183a      	adds	r2, r7, r0
 800183c:	1c59      	adds	r1, r3, #1
 800183e:	7011      	strb	r1, [r2, #0]
 8001840:	001a      	movs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	189a      	adds	r2, r3, r2
 8001846:	230a      	movs	r3, #10
 8001848:	18fb      	adds	r3, r7, r3
 800184a:	7812      	ldrb	r2, [r2, #0]
 800184c:	701a      	strb	r2, [r3, #0]
		numArgs  = args[index++];    // Number of args to follow
 800184e:	183b      	adds	r3, r7, r0
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	183a      	adds	r2, r7, r0
 8001854:	1c59      	adds	r1, r3, #1
 8001856:	7011      	strb	r1, [r2, #0]
 8001858:	001a      	movs	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	189a      	adds	r2, r3, r2
 800185e:	2609      	movs	r6, #9
 8001860:	19bb      	adds	r3, r7, r6
 8001862:	7812      	ldrb	r2, [r2, #0]
 8001864:	701a      	strb	r2, [r3, #0]
		ms       = numArgs & ST_CMD_DELAY;   // If hibit set, delay follows args
 8001866:	19bb      	adds	r3, r7, r6
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	b29a      	uxth	r2, r3
 800186c:	210c      	movs	r1, #12
 800186e:	187b      	adds	r3, r7, r1
 8001870:	2180      	movs	r1, #128	; 0x80
 8001872:	400a      	ands	r2, r1
 8001874:	801a      	strh	r2, [r3, #0]
		numArgs &= ~ST_CMD_DELAY;            // Mask out delay bit
 8001876:	19bb      	adds	r3, r7, r6
 8001878:	19ba      	adds	r2, r7, r6
 800187a:	7812      	ldrb	r2, [r2, #0]
 800187c:	217f      	movs	r1, #127	; 0x7f
 800187e:	400a      	ands	r2, r1
 8001880:	701a      	strb	r2, [r3, #0]
		sendCommand(cmd, &args[index], numArgs, hspi);
 8001882:	0005      	movs	r5, r0
 8001884:	183b      	adds	r3, r7, r0
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	18d1      	adds	r1, r2, r3
 800188c:	19bb      	adds	r3, r7, r6
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	b29a      	uxth	r2, r3
 8001892:	683c      	ldr	r4, [r7, #0]
 8001894:	230a      	movs	r3, #10
 8001896:	18fb      	adds	r3, r7, r3
 8001898:	7818      	ldrb	r0, [r3, #0]
 800189a:	0023      	movs	r3, r4
 800189c:	f7ff ff68 	bl	8001770 <sendCommand>
		index += numArgs;
 80018a0:	0028      	movs	r0, r5
 80018a2:	183b      	adds	r3, r7, r0
 80018a4:	1839      	adds	r1, r7, r0
 80018a6:	19ba      	adds	r2, r7, r6
 80018a8:	7809      	ldrb	r1, [r1, #0]
 80018aa:	7812      	ldrb	r2, [r2, #0]
 80018ac:	188a      	adds	r2, r1, r2
 80018ae:	701a      	strb	r2, [r3, #0]

		if(ms) {
 80018b0:	210c      	movs	r1, #12
 80018b2:	187b      	adds	r3, r7, r1
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d01b      	beq.n	80018f2 <displayInit+0xee>
			ms = args[index++]; // Read post-command delay time (ms)
 80018ba:	220b      	movs	r2, #11
 80018bc:	18bb      	adds	r3, r7, r2
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	18ba      	adds	r2, r7, r2
 80018c2:	1c59      	adds	r1, r3, #1
 80018c4:	7011      	strb	r1, [r2, #0]
 80018c6:	001a      	movs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	189b      	adds	r3, r3, r2
 80018cc:	781a      	ldrb	r2, [r3, #0]
 80018ce:	210c      	movs	r1, #12
 80018d0:	187b      	adds	r3, r7, r1
 80018d2:	801a      	strh	r2, [r3, #0]
			if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 80018d4:	187b      	adds	r3, r7, r1
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	2bff      	cmp	r3, #255	; 0xff
 80018da:	d104      	bne.n	80018e6 <displayInit+0xe2>
 80018dc:	230c      	movs	r3, #12
 80018de:	18fb      	adds	r3, r7, r3
 80018e0:	22fa      	movs	r2, #250	; 0xfa
 80018e2:	0052      	lsls	r2, r2, #1
 80018e4:	801a      	strh	r2, [r3, #0]
			HAL_Delay(ms);
 80018e6:	230c      	movs	r3, #12
 80018e8:	18fb      	adds	r3, r7, r3
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	0018      	movs	r0, r3
 80018ee:	f004 fdc5 	bl	800647c <HAL_Delay>
	while(numCommands--) {                 // For each command...
 80018f2:	220f      	movs	r2, #15
 80018f4:	18bb      	adds	r3, r7, r2
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	18ba      	adds	r2, r7, r2
 80018fa:	1e59      	subs	r1, r3, #1
 80018fc:	7011      	strb	r1, [r2, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d198      	bne.n	8001834 <displayInit+0x30>
		}
	}

	// note: this line may be doing more work than I think
	// (hard to read in datasheet)
	data = 0xC0;
 8001902:	2108      	movs	r1, #8
 8001904:	187b      	adds	r3, r7, r1
 8001906:	22c0      	movs	r2, #192	; 0xc0
 8001908:	701a      	strb	r2, [r3, #0]
	sendCommand(ST77XX_MADCTL, &data, 1, hspi);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	1879      	adds	r1, r7, r1
 800190e:	2201      	movs	r2, #1
 8001910:	2036      	movs	r0, #54	; 0x36
 8001912:	f7ff ff2d 	bl	8001770 <sendCommand>
}
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	46bd      	mov	sp, r7
 800191a:	b005      	add	sp, #20
 800191c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001920 <TFT_startup>:

void TFT_startup(SPI_HandleTypeDef *hspi) {
 8001920:	b590      	push	{r4, r7, lr}
 8001922:	b0a3      	sub	sp, #140	; 0x8c
 8001924:	af02      	add	r7, sp, #8
 8001926:	6078      	str	r0, [r7, #4]
	// startup sequence: rcmd1->rcmd2red->rcmd3
	uint8_t initCommands[] = {
 8001928:	240c      	movs	r4, #12
 800192a:	193a      	adds	r2, r7, r4
 800192c:	4b14      	ldr	r3, [pc, #80]	; (8001980 <TFT_startup+0x60>)
 800192e:	0010      	movs	r0, r2
 8001930:	0019      	movs	r1, r3
 8001932:	2371      	movs	r3, #113	; 0x71
 8001934:	001a      	movs	r2, r3
 8001936:	f009 f935 	bl	800aba4 <memcpy>
			10,                           //     10 ms delay
		ST77XX_DISPON,    ST_CMD_DELAY, //  4: Main screen turn on, no args w/delay
			100	                        //     100 ms delay
	};

	displayInit(initCommands, hspi);
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	193b      	adds	r3, r7, r4
 800193e:	0011      	movs	r1, r2
 8001940:	0018      	movs	r0, r3
 8001942:	f7ff ff5f 	bl	8001804 <displayInit>
	setAddrWindow(0, 0, WIDTH, HEIGHT, hspi);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	23a0      	movs	r3, #160	; 0xa0
 800194c:	2280      	movs	r2, #128	; 0x80
 800194e:	2100      	movs	r1, #0
 8001950:	2000      	movs	r0, #0
 8001952:	f000 f821 	bl	8001998 <setAddrWindow>

	// set the global variables
	cursorX = 0;
 8001956:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <TFT_startup+0x64>)
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]
	cursorY = 0;
 800195c:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <TFT_startup+0x68>)
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
	textSize = 1;
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <TFT_startup+0x6c>)
 8001964:	2201      	movs	r2, #1
 8001966:	701a      	strb	r2, [r3, #0]
	textColor = ST77XX_BLACK;
 8001968:	4b09      	ldr	r3, [pc, #36]	; (8001990 <TFT_startup+0x70>)
 800196a:	2200      	movs	r2, #0
 800196c:	801a      	strh	r2, [r3, #0]
	bg = ST77XX_WHITE;
 800196e:	4b09      	ldr	r3, [pc, #36]	; (8001994 <TFT_startup+0x74>)
 8001970:	2201      	movs	r2, #1
 8001972:	4252      	negs	r2, r2
 8001974:	801a      	strh	r2, [r3, #0]
}
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	46bd      	mov	sp, r7
 800197a:	b021      	add	sp, #132	; 0x84
 800197c:	bd90      	pop	{r4, r7, pc}
 800197e:	46c0      	nop			; (mov r8, r8)
 8001980:	0800b3f8 	.word	0x0800b3f8
 8001984:	200000ec 	.word	0x200000ec
 8001988:	200000ed 	.word	0x200000ed
 800198c:	200000ee 	.word	0x200000ee
 8001990:	200000f0 	.word	0x200000f0
 8001994:	200000f2 	.word	0x200000f2

08001998 <setAddrWindow>:

// draw something: set addr window -> write to ram memory
// sets specific area on display to write pixels to
// x and y for upper left corner, w for width, h for height
void setAddrWindow(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SPI_HandleTypeDef *hspi) {
 8001998:	b5b0      	push	{r4, r5, r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	0005      	movs	r5, r0
 80019a0:	000c      	movs	r4, r1
 80019a2:	0010      	movs	r0, r2
 80019a4:	0019      	movs	r1, r3
 80019a6:	1dbb      	adds	r3, r7, #6
 80019a8:	1c2a      	adds	r2, r5, #0
 80019aa:	801a      	strh	r2, [r3, #0]
 80019ac:	1d3b      	adds	r3, r7, #4
 80019ae:	1c22      	adds	r2, r4, #0
 80019b0:	801a      	strh	r2, [r3, #0]
 80019b2:	1cbb      	adds	r3, r7, #2
 80019b4:	1c02      	adds	r2, r0, #0
 80019b6:	801a      	strh	r2, [r3, #0]
 80019b8:	003b      	movs	r3, r7
 80019ba:	1c0a      	adds	r2, r1, #0
 80019bc:	801a      	strh	r2, [r3, #0]
	// not really needed for our display
	x += _xstart;
 80019be:	1dbb      	adds	r3, r7, #6
 80019c0:	1dba      	adds	r2, r7, #6
 80019c2:	8812      	ldrh	r2, [r2, #0]
 80019c4:	801a      	strh	r2, [r3, #0]
	y += _ystart;
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	1d3a      	adds	r2, r7, #4
 80019ca:	8812      	ldrh	r2, [r2, #0]
 80019cc:	801a      	strh	r2, [r3, #0]

	uint8_t temp[4];
	temp[0] = (x & (0xFF00)) >> 8;
 80019ce:	1dbb      	adds	r3, r7, #6
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	0a1b      	lsrs	r3, r3, #8
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	210c      	movs	r1, #12
 80019da:	187b      	adds	r3, r7, r1
 80019dc:	701a      	strb	r2, [r3, #0]
	temp[1] = x & (0xFF);
 80019de:	1dbb      	adds	r3, r7, #6
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	187b      	adds	r3, r7, r1
 80019e6:	705a      	strb	r2, [r3, #1]
	temp[2] = ((x+w-1) & (0xFF00)) >> 8;
 80019e8:	1dbb      	adds	r3, r7, #6
 80019ea:	881a      	ldrh	r2, [r3, #0]
 80019ec:	1cbb      	adds	r3, r7, #2
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	18d3      	adds	r3, r2, r3
 80019f2:	3b01      	subs	r3, #1
 80019f4:	121b      	asrs	r3, r3, #8
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	187b      	adds	r3, r7, r1
 80019fa:	709a      	strb	r2, [r3, #2]
	temp[3] = (x+w-1) & (0xFF);
 80019fc:	1dbb      	adds	r3, r7, #6
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	1cbb      	adds	r3, r7, #2
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	18d3      	adds	r3, r2, r3
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	187b      	adds	r3, r7, r1
 8001a12:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_CASET, temp, 4, hspi);
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	000c      	movs	r4, r1
 8001a18:	1879      	adds	r1, r7, r1
 8001a1a:	2204      	movs	r2, #4
 8001a1c:	202a      	movs	r0, #42	; 0x2a
 8001a1e:	f7ff fea7 	bl	8001770 <sendCommand>

	temp[0] = (y & (0xFF00)) >> 8;
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	0a1b      	lsrs	r3, r3, #8
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	0021      	movs	r1, r4
 8001a2e:	187b      	adds	r3, r7, r1
 8001a30:	701a      	strb	r2, [r3, #0]
	temp[1] = y & (0xFF);
 8001a32:	1d3b      	adds	r3, r7, #4
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	187b      	adds	r3, r7, r1
 8001a3a:	705a      	strb	r2, [r3, #1]
	temp[2] = ((y+h-1) & (0xFF00)) >> 8;
 8001a3c:	1d3b      	adds	r3, r7, #4
 8001a3e:	881a      	ldrh	r2, [r3, #0]
 8001a40:	003b      	movs	r3, r7
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	18d3      	adds	r3, r2, r3
 8001a46:	3b01      	subs	r3, #1
 8001a48:	121b      	asrs	r3, r3, #8
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	187b      	adds	r3, r7, r1
 8001a4e:	709a      	strb	r2, [r3, #2]
	temp[3] = (y+h-1) & (0x00FF);
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	881b      	ldrh	r3, [r3, #0]
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	003b      	movs	r3, r7
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	18d3      	adds	r3, r2, r3
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	3b01      	subs	r3, #1
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	187b      	adds	r3, r7, r1
 8001a66:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_RASET, temp, 4, hspi);
 8001a68:	6a3b      	ldr	r3, [r7, #32]
 8001a6a:	1879      	adds	r1, r7, r1
 8001a6c:	2204      	movs	r2, #4
 8001a6e:	202b      	movs	r0, #43	; 0x2b
 8001a70:	f7ff fe7e 	bl	8001770 <sendCommand>
}
 8001a74:	46c0      	nop			; (mov r8, r8)
 8001a76:	46bd      	mov	sp, r7
 8001a78:	b004      	add	sp, #16
 8001a7a:	bdb0      	pop	{r4, r5, r7, pc}

08001a7c <turnDisplayOn>:

void turnDisplayOn(SPI_HandleTypeDef *hspi) {sendCommand(ST77XX_DISPON, NULL, 0, hspi);}		// no args, null shouldn't be accessed by sendCommand func
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	2100      	movs	r1, #0
 8001a8a:	2029      	movs	r0, #41	; 0x29
 8001a8c:	f7ff fe70 	bl	8001770 <sendCommand>
 8001a90:	46c0      	nop			; (mov r8, r8)
 8001a92:	46bd      	mov	sp, r7
 8001a94:	b002      	add	sp, #8
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <colorFixer>:
// 8-bit spi bus wants msb first; in array, lowest index is sent first
// because L4 is little-endian
//   for 16-bit value, it sends lower byte before upper byte
//   resulting in device thinking lower byte is upper byte
// this switches byte order around
uint16_t colorFixer(uint16_t color) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	0002      	movs	r2, r0
 8001aa0:	1dbb      	adds	r3, r7, #6
 8001aa2:	801a      	strh	r2, [r3, #0]
	uint8_t a = color & 0xFF;
 8001aa4:	210f      	movs	r1, #15
 8001aa6:	187b      	adds	r3, r7, r1
 8001aa8:	1dba      	adds	r2, r7, #6
 8001aaa:	8812      	ldrh	r2, [r2, #0]
 8001aac:	701a      	strb	r2, [r3, #0]
	uint8_t b = (color & 0xFF00) >> 8;
 8001aae:	1dbb      	adds	r3, r7, #6
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	0a1b      	lsrs	r3, r3, #8
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	200e      	movs	r0, #14
 8001ab8:	183b      	adds	r3, r7, r0
 8001aba:	701a      	strb	r2, [r3, #0]
	uint16_t ret = (a << 8) | b;
 8001abc:	187b      	adds	r3, r7, r1
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	021b      	lsls	r3, r3, #8
 8001ac2:	b21a      	sxth	r2, r3
 8001ac4:	183b      	adds	r3, r7, r0
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	b21b      	sxth	r3, r3
 8001aca:	4313      	orrs	r3, r2
 8001acc:	b21a      	sxth	r2, r3
 8001ace:	210c      	movs	r1, #12
 8001ad0:	187b      	adds	r3, r7, r1
 8001ad2:	801a      	strh	r2, [r3, #0]

	return ret;
 8001ad4:	187b      	adds	r3, r7, r1
 8001ad6:	881b      	ldrh	r3, [r3, #0]
}
 8001ad8:	0018      	movs	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	b004      	add	sp, #16
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <drawHLine>:
	setAddrWindow(x, y, 1, 1, hspi);
	uint16_t tempColor = colorFixer(color);		// else we're using address of something passed by value
	sendCommand(ST77XX_RAMWR, &tempColor, 2, hspi);
}

void drawHLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 8001ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae2:	b091      	sub	sp, #68	; 0x44
 8001ae4:	af02      	add	r7, sp, #8
 8001ae6:	000c      	movs	r4, r1
 8001ae8:	0016      	movs	r6, r2
 8001aea:	0019      	movs	r1, r3
 8001aec:	2327      	movs	r3, #39	; 0x27
 8001aee:	18fa      	adds	r2, r7, r3
 8001af0:	1c03      	adds	r3, r0, #0
 8001af2:	7013      	strb	r3, [r2, #0]
 8001af4:	2326      	movs	r3, #38	; 0x26
 8001af6:	18fb      	adds	r3, r7, r3
 8001af8:	1c22      	adds	r2, r4, #0
 8001afa:	701a      	strb	r2, [r3, #0]
 8001afc:	2325      	movs	r3, #37	; 0x25
 8001afe:	18fb      	adds	r3, r7, r3
 8001b00:	1c32      	adds	r2, r6, #0
 8001b02:	701a      	strb	r2, [r3, #0]
 8001b04:	2322      	movs	r3, #34	; 0x22
 8001b06:	18fb      	adds	r3, r7, r3
 8001b08:	1c0a      	adds	r2, r1, #0
 8001b0a:	801a      	strh	r2, [r3, #0]
 8001b0c:	466b      	mov	r3, sp
 8001b0e:	001e      	movs	r6, r3
	// bounds checking
	if (x < 0) x = 0;						// don't set x out of bounds
	if (x > WIDTH) x = WIDTH;
 8001b10:	2327      	movs	r3, #39	; 0x27
 8001b12:	18fb      	adds	r3, r7, r3
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b80      	cmp	r3, #128	; 0x80
 8001b18:	d903      	bls.n	8001b22 <drawHLine+0x42>
 8001b1a:	2327      	movs	r3, #39	; 0x27
 8001b1c:	18fb      	adds	r3, r7, r3
 8001b1e:	2280      	movs	r2, #128	; 0x80
 8001b20:	701a      	strb	r2, [r3, #0]
	if (x+size > WIDTH) size = WIDTH-x;		// don't set size so line draws out of bounds
 8001b22:	2327      	movs	r3, #39	; 0x27
 8001b24:	18fb      	adds	r3, r7, r3
 8001b26:	781a      	ldrb	r2, [r3, #0]
 8001b28:	2325      	movs	r3, #37	; 0x25
 8001b2a:	18fb      	adds	r3, r7, r3
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	18d3      	adds	r3, r2, r3
 8001b30:	2b80      	cmp	r3, #128	; 0x80
 8001b32:	dd08      	ble.n	8001b46 <drawHLine+0x66>
 8001b34:	2325      	movs	r3, #37	; 0x25
 8001b36:	18fb      	adds	r3, r7, r3
 8001b38:	2227      	movs	r2, #39	; 0x27
 8001b3a:	18ba      	adds	r2, r7, r2
 8001b3c:	7812      	ldrb	r2, [r2, #0]
 8001b3e:	2180      	movs	r1, #128	; 0x80
 8001b40:	4249      	negs	r1, r1
 8001b42:	1a8a      	subs	r2, r1, r2
 8001b44:	701a      	strb	r2, [r3, #0]
	if (x+size < 0) size = 0-x;
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 8001b46:	2326      	movs	r3, #38	; 0x26
 8001b48:	18fb      	adds	r3, r7, r3
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2ba0      	cmp	r3, #160	; 0xa0
 8001b4e:	d868      	bhi.n	8001c22 <drawHLine+0x142>

	setAddrWindow(x, y, size, 1, hspi);
 8001b50:	2327      	movs	r3, #39	; 0x27
 8001b52:	18fb      	adds	r3, r7, r3
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	b298      	uxth	r0, r3
 8001b58:	2326      	movs	r3, #38	; 0x26
 8001b5a:	18fb      	adds	r3, r7, r3
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	b299      	uxth	r1, r3
 8001b60:	2325      	movs	r3, #37	; 0x25
 8001b62:	18fb      	adds	r3, r7, r3
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	f7ff ff13 	bl	8001998 <setAddrWindow>
	uint16_t colors[size];
 8001b72:	2325      	movs	r3, #37	; 0x25
 8001b74:	18fb      	adds	r3, r7, r3
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	001a      	movs	r2, r3
 8001b7a:	3a01      	subs	r2, #1
 8001b7c:	633a      	str	r2, [r7, #48]	; 0x30
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	2200      	movs	r2, #0
 8001b82:	60fa      	str	r2, [r7, #12]
 8001b84:	68b8      	ldr	r0, [r7, #8]
 8001b86:	68f9      	ldr	r1, [r7, #12]
 8001b88:	0002      	movs	r2, r0
 8001b8a:	0f12      	lsrs	r2, r2, #28
 8001b8c:	000c      	movs	r4, r1
 8001b8e:	0124      	lsls	r4, r4, #4
 8001b90:	61fc      	str	r4, [r7, #28]
 8001b92:	69fc      	ldr	r4, [r7, #28]
 8001b94:	4314      	orrs	r4, r2
 8001b96:	61fc      	str	r4, [r7, #28]
 8001b98:	0002      	movs	r2, r0
 8001b9a:	0112      	lsls	r2, r2, #4
 8001b9c:	61ba      	str	r2, [r7, #24]
 8001b9e:	603b      	str	r3, [r7, #0]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	607a      	str	r2, [r7, #4]
 8001ba4:	6838      	ldr	r0, [r7, #0]
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	0002      	movs	r2, r0
 8001baa:	0f12      	lsrs	r2, r2, #28
 8001bac:	000c      	movs	r4, r1
 8001bae:	0124      	lsls	r4, r4, #4
 8001bb0:	617c      	str	r4, [r7, #20]
 8001bb2:	697c      	ldr	r4, [r7, #20]
 8001bb4:	4314      	orrs	r4, r2
 8001bb6:	617c      	str	r4, [r7, #20]
 8001bb8:	0002      	movs	r2, r0
 8001bba:	0112      	lsls	r2, r2, #4
 8001bbc:	613a      	str	r2, [r7, #16]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	3307      	adds	r3, #7
 8001bc4:	08db      	lsrs	r3, r3, #3
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	466a      	mov	r2, sp
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	469d      	mov	sp, r3
 8001bce:	ab02      	add	r3, sp, #8
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	085b      	lsrs	r3, r3, #1
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {		// better way to make array of 1 color; SPI without moving address of sent?
 8001bd8:	2300      	movs	r3, #0
 8001bda:	637b      	str	r3, [r7, #52]	; 0x34
 8001bdc:	e00e      	b.n	8001bfc <drawHLine+0x11c>
		colors[i] = colorFixer(color);
 8001bde:	2322      	movs	r3, #34	; 0x22
 8001be0:	18fb      	adds	r3, r7, r3
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	0018      	movs	r0, r3
 8001be6:	f7ff ff57 	bl	8001a98 <colorFixer>
 8001bea:	0003      	movs	r3, r0
 8001bec:	0019      	movs	r1, r3
 8001bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bf2:	0052      	lsls	r2, r2, #1
 8001bf4:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {		// better way to make array of 1 color; SPI without moving address of sent?
 8001bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8001bfc:	2325      	movs	r3, #37	; 0x25
 8001bfe:	18fb      	adds	r3, r7, r3
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c04:	429a      	cmp	r2, r3
 8001c06:	dbea      	blt.n	8001bde <drawHLine+0xfe>
//		colors[i] = color;
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 8001c08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c0a:	2325      	movs	r3, #37	; 0x25
 8001c0c:	18fb      	adds	r3, r7, r3
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	18db      	adds	r3, r3, r3
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c18:	202c      	movs	r0, #44	; 0x2c
 8001c1a:	f7ff fda9 	bl	8001770 <sendCommand>
 8001c1e:	46b5      	mov	sp, r6
 8001c20:	e001      	b.n	8001c26 <drawHLine+0x146>
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	46b5      	mov	sp, r6
}
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b00f      	add	sp, #60	; 0x3c
 8001c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c2c <drawVLine>:

void drawVLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 8001c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c2e:	b091      	sub	sp, #68	; 0x44
 8001c30:	af02      	add	r7, sp, #8
 8001c32:	000c      	movs	r4, r1
 8001c34:	0016      	movs	r6, r2
 8001c36:	0019      	movs	r1, r3
 8001c38:	2327      	movs	r3, #39	; 0x27
 8001c3a:	18fa      	adds	r2, r7, r3
 8001c3c:	1c03      	adds	r3, r0, #0
 8001c3e:	7013      	strb	r3, [r2, #0]
 8001c40:	2326      	movs	r3, #38	; 0x26
 8001c42:	18fb      	adds	r3, r7, r3
 8001c44:	1c22      	adds	r2, r4, #0
 8001c46:	701a      	strb	r2, [r3, #0]
 8001c48:	2325      	movs	r3, #37	; 0x25
 8001c4a:	18fb      	adds	r3, r7, r3
 8001c4c:	1c32      	adds	r2, r6, #0
 8001c4e:	701a      	strb	r2, [r3, #0]
 8001c50:	2322      	movs	r3, #34	; 0x22
 8001c52:	18fb      	adds	r3, r7, r3
 8001c54:	1c0a      	adds	r2, r1, #0
 8001c56:	801a      	strh	r2, [r3, #0]
 8001c58:	466b      	mov	r3, sp
 8001c5a:	001e      	movs	r6, r3
	// bounds checking
	if (y < 0) y = 0;						// don't set x out of bounds
	if (y > HEIGHT) y = HEIGHT;
 8001c5c:	2326      	movs	r3, #38	; 0x26
 8001c5e:	18fb      	adds	r3, r7, r3
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2ba0      	cmp	r3, #160	; 0xa0
 8001c64:	d903      	bls.n	8001c6e <drawVLine+0x42>
 8001c66:	2326      	movs	r3, #38	; 0x26
 8001c68:	18fb      	adds	r3, r7, r3
 8001c6a:	22a0      	movs	r2, #160	; 0xa0
 8001c6c:	701a      	strb	r2, [r3, #0]
	if (y+size > HEIGHT) size = HEIGHT-y;	// don't set size so line draws out of bounds
 8001c6e:	2326      	movs	r3, #38	; 0x26
 8001c70:	18fb      	adds	r3, r7, r3
 8001c72:	781a      	ldrb	r2, [r3, #0]
 8001c74:	2325      	movs	r3, #37	; 0x25
 8001c76:	18fb      	adds	r3, r7, r3
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	18d3      	adds	r3, r2, r3
 8001c7c:	2ba0      	cmp	r3, #160	; 0xa0
 8001c7e:	dd08      	ble.n	8001c92 <drawVLine+0x66>
 8001c80:	2325      	movs	r3, #37	; 0x25
 8001c82:	18fb      	adds	r3, r7, r3
 8001c84:	2226      	movs	r2, #38	; 0x26
 8001c86:	18ba      	adds	r2, r7, r2
 8001c88:	7812      	ldrb	r2, [r2, #0]
 8001c8a:	2160      	movs	r1, #96	; 0x60
 8001c8c:	4249      	negs	r1, r1
 8001c8e:	1a8a      	subs	r2, r1, r2
 8001c90:	701a      	strb	r2, [r3, #0]
	if (y+size < 0) size = 0-y;
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if x is out of bounds
 8001c92:	2327      	movs	r3, #39	; 0x27
 8001c94:	18fb      	adds	r3, r7, r3
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b80      	cmp	r3, #128	; 0x80
 8001c9a:	d869      	bhi.n	8001d70 <drawVLine+0x144>

	setAddrWindow(x, y, 1, size, hspi);
 8001c9c:	2327      	movs	r3, #39	; 0x27
 8001c9e:	18fb      	adds	r3, r7, r3
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	b298      	uxth	r0, r3
 8001ca4:	2326      	movs	r3, #38	; 0x26
 8001ca6:	18fb      	adds	r3, r7, r3
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	b299      	uxth	r1, r3
 8001cac:	2325      	movs	r3, #37	; 0x25
 8001cae:	18fb      	adds	r3, r7, r3
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	0013      	movs	r3, r2
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f7ff fe6c 	bl	8001998 <setAddrWindow>
	uint16_t colors[size];
 8001cc0:	2325      	movs	r3, #37	; 0x25
 8001cc2:	18fb      	adds	r3, r7, r3
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	001a      	movs	r2, r3
 8001cc8:	3a01      	subs	r2, #1
 8001cca:	633a      	str	r2, [r7, #48]	; 0x30
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	60fa      	str	r2, [r7, #12]
 8001cd2:	68b8      	ldr	r0, [r7, #8]
 8001cd4:	68f9      	ldr	r1, [r7, #12]
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	0f12      	lsrs	r2, r2, #28
 8001cda:	000c      	movs	r4, r1
 8001cdc:	0124      	lsls	r4, r4, #4
 8001cde:	61fc      	str	r4, [r7, #28]
 8001ce0:	69fc      	ldr	r4, [r7, #28]
 8001ce2:	4314      	orrs	r4, r2
 8001ce4:	61fc      	str	r4, [r7, #28]
 8001ce6:	0002      	movs	r2, r0
 8001ce8:	0112      	lsls	r2, r2, #4
 8001cea:	61ba      	str	r2, [r7, #24]
 8001cec:	603b      	str	r3, [r7, #0]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	6838      	ldr	r0, [r7, #0]
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	0002      	movs	r2, r0
 8001cf8:	0f12      	lsrs	r2, r2, #28
 8001cfa:	000c      	movs	r4, r1
 8001cfc:	0124      	lsls	r4, r4, #4
 8001cfe:	617c      	str	r4, [r7, #20]
 8001d00:	697c      	ldr	r4, [r7, #20]
 8001d02:	4314      	orrs	r4, r2
 8001d04:	617c      	str	r4, [r7, #20]
 8001d06:	0002      	movs	r2, r0
 8001d08:	0112      	lsls	r2, r2, #4
 8001d0a:	613a      	str	r2, [r7, #16]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	3301      	adds	r3, #1
 8001d10:	3307      	adds	r3, #7
 8001d12:	08db      	lsrs	r3, r3, #3
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	466a      	mov	r2, sp
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	469d      	mov	sp, r3
 8001d1c:	ab02      	add	r3, sp, #8
 8001d1e:	3301      	adds	r3, #1
 8001d20:	085b      	lsrs	r3, r3, #1
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {		// there has to be a better way to make array of 1 color
 8001d26:	2300      	movs	r3, #0
 8001d28:	637b      	str	r3, [r7, #52]	; 0x34
 8001d2a:	e00e      	b.n	8001d4a <drawVLine+0x11e>
											// SPI without moving address of sent buffer?
		colors[i] = colorFixer(color);
 8001d2c:	2322      	movs	r3, #34	; 0x22
 8001d2e:	18fb      	adds	r3, r7, r3
 8001d30:	881b      	ldrh	r3, [r3, #0]
 8001d32:	0018      	movs	r0, r3
 8001d34:	f7ff feb0 	bl	8001a98 <colorFixer>
 8001d38:	0003      	movs	r3, r0
 8001d3a:	0019      	movs	r1, r3
 8001d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d40:	0052      	lsls	r2, r2, #1
 8001d42:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {		// there has to be a better way to make array of 1 color
 8001d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d46:	3301      	adds	r3, #1
 8001d48:	637b      	str	r3, [r7, #52]	; 0x34
 8001d4a:	2325      	movs	r3, #37	; 0x25
 8001d4c:	18fb      	adds	r3, r7, r3
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d52:	429a      	cmp	r2, r3
 8001d54:	dbea      	blt.n	8001d2c <drawVLine+0x100>
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 8001d56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d58:	2325      	movs	r3, #37	; 0x25
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	18db      	adds	r3, r3, r3
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d66:	202c      	movs	r0, #44	; 0x2c
 8001d68:	f7ff fd02 	bl	8001770 <sendCommand>
 8001d6c:	46b5      	mov	sp, r6
 8001d6e:	e001      	b.n	8001d74 <drawVLine+0x148>
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if x is out of bounds
 8001d70:	46c0      	nop			; (mov r8, r8)
 8001d72:	46b5      	mov	sp, r6
}
 8001d74:	46bd      	mov	sp, r7
 8001d76:	b00f      	add	sp, #60	; 0x3c
 8001d78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d7a <drawBuffer>:

void drawBuffer(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t *buffer, uint16_t bufferSize, SPI_HandleTypeDef *hspi) {
 8001d7a:	b5b0      	push	{r4, r5, r7, lr}
 8001d7c:	b084      	sub	sp, #16
 8001d7e:	af02      	add	r7, sp, #8
 8001d80:	0005      	movs	r5, r0
 8001d82:	000c      	movs	r4, r1
 8001d84:	0010      	movs	r0, r2
 8001d86:	0019      	movs	r1, r3
 8001d88:	1dfb      	adds	r3, r7, #7
 8001d8a:	1c2a      	adds	r2, r5, #0
 8001d8c:	701a      	strb	r2, [r3, #0]
 8001d8e:	1dbb      	adds	r3, r7, #6
 8001d90:	1c22      	adds	r2, r4, #0
 8001d92:	701a      	strb	r2, [r3, #0]
 8001d94:	1d7b      	adds	r3, r7, #5
 8001d96:	1c02      	adds	r2, r0, #0
 8001d98:	701a      	strb	r2, [r3, #0]
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	1c0a      	adds	r2, r1, #0
 8001d9e:	701a      	strb	r2, [r3, #0]
	// just dont call this with out-of-range vals pls.
	if (x+w > WIDTH || y+h > HEIGHT) return;
 8001da0:	1dfb      	adds	r3, r7, #7
 8001da2:	781a      	ldrb	r2, [r3, #0]
 8001da4:	1d7b      	adds	r3, r7, #5
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	18d3      	adds	r3, r2, r3
 8001daa:	2b80      	cmp	r3, #128	; 0x80
 8001dac:	dc29      	bgt.n	8001e02 <drawBuffer+0x88>
 8001dae:	1dbb      	adds	r3, r7, #6
 8001db0:	781a      	ldrb	r2, [r3, #0]
 8001db2:	1d3b      	adds	r3, r7, #4
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	18d3      	adds	r3, r2, r3
 8001db8:	2ba0      	cmp	r3, #160	; 0xa0
 8001dba:	dc22      	bgt.n	8001e02 <drawBuffer+0x88>

	// also don't call this with buffer size too big bc there's not enough ram for all pixels of display
	if (bufferSize > 10240) return;
 8001dbc:	231c      	movs	r3, #28
 8001dbe:	18fb      	adds	r3, r7, r3
 8001dc0:	881a      	ldrh	r2, [r3, #0]
 8001dc2:	23a0      	movs	r3, #160	; 0xa0
 8001dc4:	019b      	lsls	r3, r3, #6
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d81d      	bhi.n	8001e06 <drawBuffer+0x8c>

	setAddrWindow(x, y, w, h, hspi);
 8001dca:	1dfb      	adds	r3, r7, #7
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	b298      	uxth	r0, r3
 8001dd0:	1dbb      	adds	r3, r7, #6
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	b299      	uxth	r1, r3
 8001dd6:	1d7b      	adds	r3, r7, #5
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	1d3b      	adds	r3, r7, #4
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	b29c      	uxth	r4, r3
 8001de2:	6a3b      	ldr	r3, [r7, #32]
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	0023      	movs	r3, r4
 8001de8:	f7ff fdd6 	bl	8001998 <setAddrWindow>
	sendCommand(ST77XX_RAMWR, buffer, bufferSize*2, hspi);
 8001dec:	231c      	movs	r3, #28
 8001dee:	18fb      	adds	r3, r7, r3
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	18db      	adds	r3, r3, r3
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	69b9      	ldr	r1, [r7, #24]
 8001dfa:	202c      	movs	r0, #44	; 0x2c
 8001dfc:	f7ff fcb8 	bl	8001770 <sendCommand>
 8001e00:	e002      	b.n	8001e08 <drawBuffer+0x8e>
	if (x+w > WIDTH || y+h > HEIGHT) return;
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	e000      	b.n	8001e08 <drawBuffer+0x8e>
	if (bufferSize > 10240) return;
 8001e06:	46c0      	nop			; (mov r8, r8)
}
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	b002      	add	sp, #8
 8001e0c:	bdb0      	pop	{r4, r5, r7, pc}

08001e0e <drawRect>:
			err -= 1;
		}
	}
}

void drawRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color, SPI_HandleTypeDef *hspi) {
 8001e0e:	b5b0      	push	{r4, r5, r7, lr}
 8001e10:	b084      	sub	sp, #16
 8001e12:	af02      	add	r7, sp, #8
 8001e14:	0005      	movs	r5, r0
 8001e16:	000c      	movs	r4, r1
 8001e18:	0010      	movs	r0, r2
 8001e1a:	0019      	movs	r1, r3
 8001e1c:	1dfb      	adds	r3, r7, #7
 8001e1e:	1c2a      	adds	r2, r5, #0
 8001e20:	701a      	strb	r2, [r3, #0]
 8001e22:	1dbb      	adds	r3, r7, #6
 8001e24:	1c22      	adds	r2, r4, #0
 8001e26:	701a      	strb	r2, [r3, #0]
 8001e28:	1d7b      	adds	r3, r7, #5
 8001e2a:	1c02      	adds	r2, r0, #0
 8001e2c:	701a      	strb	r2, [r3, #0]
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	1c0a      	adds	r2, r1, #0
 8001e32:	701a      	strb	r2, [r3, #0]
	drawHLine(x, y, w, color, hspi);
 8001e34:	2518      	movs	r5, #24
 8001e36:	197b      	adds	r3, r7, r5
 8001e38:	881c      	ldrh	r4, [r3, #0]
 8001e3a:	1d7b      	adds	r3, r7, #5
 8001e3c:	781a      	ldrb	r2, [r3, #0]
 8001e3e:	1dbb      	adds	r3, r7, #6
 8001e40:	7819      	ldrb	r1, [r3, #0]
 8001e42:	1dfb      	adds	r3, r7, #7
 8001e44:	7818      	ldrb	r0, [r3, #0]
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	0023      	movs	r3, r4
 8001e4c:	f7ff fe48 	bl	8001ae0 <drawHLine>
	drawHLine(x, y+h-1, w, color, hspi);
 8001e50:	1dba      	adds	r2, r7, #6
 8001e52:	1d3b      	adds	r3, r7, #4
 8001e54:	7812      	ldrb	r2, [r2, #0]
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	18d3      	adds	r3, r2, r3
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	b2d9      	uxtb	r1, r3
 8001e60:	197b      	adds	r3, r7, r5
 8001e62:	881c      	ldrh	r4, [r3, #0]
 8001e64:	1d7b      	adds	r3, r7, #5
 8001e66:	781a      	ldrb	r2, [r3, #0]
 8001e68:	1dfb      	adds	r3, r7, #7
 8001e6a:	7818      	ldrb	r0, [r3, #0]
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	0023      	movs	r3, r4
 8001e72:	f7ff fe35 	bl	8001ae0 <drawHLine>
	drawVLine(x, y, h, color, hspi);
 8001e76:	197b      	adds	r3, r7, r5
 8001e78:	881c      	ldrh	r4, [r3, #0]
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	781a      	ldrb	r2, [r3, #0]
 8001e7e:	1dbb      	adds	r3, r7, #6
 8001e80:	7819      	ldrb	r1, [r3, #0]
 8001e82:	1dfb      	adds	r3, r7, #7
 8001e84:	7818      	ldrb	r0, [r3, #0]
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	0023      	movs	r3, r4
 8001e8c:	f7ff fece 	bl	8001c2c <drawVLine>
	drawVLine(x+w-1, y, h, color, hspi);
 8001e90:	1dfa      	adds	r2, r7, #7
 8001e92:	1d7b      	adds	r3, r7, #5
 8001e94:	7812      	ldrb	r2, [r2, #0]
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	18d3      	adds	r3, r2, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	b2d8      	uxtb	r0, r3
 8001ea0:	197b      	adds	r3, r7, r5
 8001ea2:	881c      	ldrh	r4, [r3, #0]
 8001ea4:	1d3b      	adds	r3, r7, #4
 8001ea6:	781a      	ldrb	r2, [r3, #0]
 8001ea8:	1dbb      	adds	r3, r7, #6
 8001eaa:	7819      	ldrb	r1, [r3, #0]
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	0023      	movs	r3, r4
 8001eb2:	f7ff febb 	bl	8001c2c <drawVLine>
}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b002      	add	sp, #8
 8001ebc:	bdb0      	pop	{r4, r5, r7, pc}

08001ebe <fillRect>:

void fillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color, SPI_HandleTypeDef *hspi) {
 8001ebe:	b5b0      	push	{r4, r5, r7, lr}
 8001ec0:	b086      	sub	sp, #24
 8001ec2:	af02      	add	r7, sp, #8
 8001ec4:	0005      	movs	r5, r0
 8001ec6:	000c      	movs	r4, r1
 8001ec8:	0010      	movs	r0, r2
 8001eca:	0019      	movs	r1, r3
 8001ecc:	1dfb      	adds	r3, r7, #7
 8001ece:	1c2a      	adds	r2, r5, #0
 8001ed0:	701a      	strb	r2, [r3, #0]
 8001ed2:	1dbb      	adds	r3, r7, #6
 8001ed4:	1c22      	adds	r2, r4, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
 8001ed8:	1d7b      	adds	r3, r7, #5
 8001eda:	1c02      	adds	r2, r0, #0
 8001edc:	701a      	strb	r2, [r3, #0]
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	1c0a      	adds	r2, r1, #0
 8001ee2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < h; i++) {
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	e014      	b.n	8001f14 <fillRect+0x56>
		drawHLine(x, y+i, w, color, hspi);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	1dbb      	adds	r3, r7, #6
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	18d3      	adds	r3, r2, r3
 8001ef4:	b2d9      	uxtb	r1, r3
 8001ef6:	2320      	movs	r3, #32
 8001ef8:	18fb      	adds	r3, r7, r3
 8001efa:	881c      	ldrh	r4, [r3, #0]
 8001efc:	1d7b      	adds	r3, r7, #5
 8001efe:	781a      	ldrb	r2, [r3, #0]
 8001f00:	1dfb      	adds	r3, r7, #7
 8001f02:	7818      	ldrb	r0, [r3, #0]
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	0023      	movs	r3, r4
 8001f0a:	f7ff fde9 	bl	8001ae0 <drawHLine>
	for (int i = 0; i < h; i++) {
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	3301      	adds	r3, #1
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	dbe5      	blt.n	8001eea <fillRect+0x2c>
	}
}
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	46bd      	mov	sp, r7
 8001f22:	b004      	add	sp, #16
 8001f24:	bdb0      	pop	{r4, r5, r7, pc}

08001f26 <fillScreen>:

void fillScreen(uint16_t color, SPI_HandleTypeDef *hspi) {
 8001f26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f28:	b091      	sub	sp, #68	; 0x44
 8001f2a:	af04      	add	r7, sp, #16
 8001f2c:	61b9      	str	r1, [r7, #24]
 8001f2e:	221e      	movs	r2, #30
 8001f30:	18ba      	adds	r2, r7, r2
 8001f32:	1c01      	adds	r1, r0, #0
 8001f34:	8011      	strh	r1, [r2, #0]
 8001f36:	466a      	mov	r2, sp
 8001f38:	607a      	str	r2, [r7, #4]
	uint16_t bufferSize = WIDTH*HEIGHT/4;
 8001f3a:	2012      	movs	r0, #18
 8001f3c:	2218      	movs	r2, #24
 8001f3e:	18b9      	adds	r1, r7, r2
 8001f40:	180a      	adds	r2, r1, r0
 8001f42:	21a0      	movs	r1, #160	; 0xa0
 8001f44:	0149      	lsls	r1, r1, #5
 8001f46:	8011      	strh	r1, [r2, #0]
	uint16_t buffer[bufferSize];
 8001f48:	2218      	movs	r2, #24
 8001f4a:	18ba      	adds	r2, r7, r2
 8001f4c:	1812      	adds	r2, r2, r0
 8001f4e:	8812      	ldrh	r2, [r2, #0]
 8001f50:	0011      	movs	r1, r2
 8001f52:	3901      	subs	r1, #1
 8001f54:	6279      	str	r1, [r7, #36]	; 0x24
 8001f56:	613a      	str	r2, [r7, #16]
 8001f58:	2100      	movs	r1, #0
 8001f5a:	6179      	str	r1, [r7, #20]
 8001f5c:	6939      	ldr	r1, [r7, #16]
 8001f5e:	0f09      	lsrs	r1, r1, #28
 8001f60:	6978      	ldr	r0, [r7, #20]
 8001f62:	0106      	lsls	r6, r0, #4
 8001f64:	430e      	orrs	r6, r1
 8001f66:	6939      	ldr	r1, [r7, #16]
 8001f68:	010d      	lsls	r5, r1, #4
 8001f6a:	60ba      	str	r2, [r7, #8]
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	60f9      	str	r1, [r7, #12]
 8001f70:	68bd      	ldr	r5, [r7, #8]
 8001f72:	68fe      	ldr	r6, [r7, #12]
 8001f74:	0029      	movs	r1, r5
 8001f76:	0f09      	lsrs	r1, r1, #28
 8001f78:	0030      	movs	r0, r6
 8001f7a:	0104      	lsls	r4, r0, #4
 8001f7c:	430c      	orrs	r4, r1
 8001f7e:	0029      	movs	r1, r5
 8001f80:	010b      	lsls	r3, r1, #4
 8001f82:	0013      	movs	r3, r2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	3301      	adds	r3, #1
 8001f88:	3307      	adds	r3, #7
 8001f8a:	08db      	lsrs	r3, r3, #3
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	466a      	mov	r2, sp
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	469d      	mov	sp, r3
 8001f94:	ab04      	add	r3, sp, #16
 8001f96:	3301      	adds	r3, #1
 8001f98:	085b      	lsrs	r3, r3, #1
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	623b      	str	r3, [r7, #32]
	int i;
	for (i = 0; i < bufferSize; i++) {
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fa2:	e00e      	b.n	8001fc2 <fillScreen+0x9c>
		buffer[i] = colorFixer(color);
 8001fa4:	231e      	movs	r3, #30
 8001fa6:	18fb      	adds	r3, r7, r3
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	0018      	movs	r0, r3
 8001fac:	f7ff fd74 	bl	8001a98 <colorFixer>
 8001fb0:	0003      	movs	r3, r0
 8001fb2:	0019      	movs	r1, r3
 8001fb4:	6a3b      	ldr	r3, [r7, #32]
 8001fb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fb8:	0052      	lsls	r2, r2, #1
 8001fba:	52d1      	strh	r1, [r2, r3]
	for (i = 0; i < bufferSize; i++) {
 8001fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fc2:	2312      	movs	r3, #18
 8001fc4:	2218      	movs	r2, #24
 8001fc6:	4694      	mov	ip, r2
 8001fc8:	44bc      	add	ip, r7
 8001fca:	4463      	add	r3, ip
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	dbe7      	blt.n	8001fa4 <fillScreen+0x7e>
	}

	for (i = 0; i < 4; i++) {
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fd8:	e017      	b.n	800200a <fillScreen+0xe4>
		drawBuffer(0, HEIGHT/4*i, WIDTH, HEIGHT/4, buffer, bufferSize, hspi);
 8001fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2228      	movs	r2, #40	; 0x28
 8001fe0:	4353      	muls	r3, r2
 8001fe2:	b2d9      	uxtb	r1, r3
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	9202      	str	r2, [sp, #8]
 8001fea:	2212      	movs	r2, #18
 8001fec:	2018      	movs	r0, #24
 8001fee:	4684      	mov	ip, r0
 8001ff0:	44bc      	add	ip, r7
 8001ff2:	4462      	add	r2, ip
 8001ff4:	8812      	ldrh	r2, [r2, #0]
 8001ff6:	9201      	str	r2, [sp, #4]
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	2328      	movs	r3, #40	; 0x28
 8001ffc:	2280      	movs	r2, #128	; 0x80
 8001ffe:	2000      	movs	r0, #0
 8002000:	f7ff febb 	bl	8001d7a <drawBuffer>
	for (i = 0; i < 4; i++) {
 8002004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002006:	3301      	adds	r3, #1
 8002008:	62fb      	str	r3, [r7, #44]	; 0x2c
 800200a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200c:	2b03      	cmp	r3, #3
 800200e:	dde4      	ble.n	8001fda <fillScreen+0xb4>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	469d      	mov	sp, r3
	}
}
 8002014:	46c0      	nop			; (mov r8, r8)
 8002016:	46bd      	mov	sp, r7
 8002018:	b00d      	add	sp, #52	; 0x34
 800201a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800201c <drawCenteredText>:
// ---- end of basic shapes and lines ----

// ---- start of more complicated graphics ----
void drawCenteredText(uint8_t x_center, uint8_t y, const char *str, SPI_HandleTypeDef *hspi) {
 800201c:	b590      	push	{r4, r7, lr}
 800201e:	b089      	sub	sp, #36	; 0x24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60ba      	str	r2, [r7, #8]
 8002024:	607b      	str	r3, [r7, #4]
 8002026:	230f      	movs	r3, #15
 8002028:	18fb      	adds	r3, r7, r3
 800202a:	1c02      	adds	r2, r0, #0
 800202c:	701a      	strb	r2, [r3, #0]
 800202e:	240e      	movs	r4, #14
 8002030:	193b      	adds	r3, r7, r4
 8002032:	1c0a      	adds	r2, r1, #0
 8002034:	701a      	strb	r2, [r3, #0]
	uint8_t strSize = strlen(str);
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	0018      	movs	r0, r3
 800203a:	f7fe f865 	bl	8000108 <strlen>
 800203e:	0002      	movs	r2, r0
 8002040:	231f      	movs	r3, #31
 8002042:	18fb      	adds	r3, r7, r3
 8002044:	701a      	strb	r2, [r3, #0]
	// bounds checking. text box needed to print text should not end up out of bounds
	if (y+textSize*8 > HEIGHT) return;
 8002046:	193b      	adds	r3, r7, r4
 8002048:	781a      	ldrb	r2, [r3, #0]
 800204a:	4b24      	ldr	r3, [pc, #144]	; (80020dc <drawCenteredText+0xc0>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	18d3      	adds	r3, r2, r3
 8002052:	2ba0      	cmp	r3, #160	; 0xa0
 8002054:	dc3a      	bgt.n	80020cc <drawCenteredText+0xb0>
	int leftBound = x_center-(strSize*textSize*6)/2;
 8002056:	230f      	movs	r3, #15
 8002058:	18fb      	adds	r3, r7, r3
 800205a:	7819      	ldrb	r1, [r3, #0]
 800205c:	231f      	movs	r3, #31
 800205e:	18fb      	adds	r3, r7, r3
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	4a1e      	ldr	r2, [pc, #120]	; (80020dc <drawCenteredText+0xc0>)
 8002064:	7812      	ldrb	r2, [r2, #0]
 8002066:	435a      	muls	r2, r3
 8002068:	0013      	movs	r3, r2
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	189b      	adds	r3, r3, r2
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	d500      	bpl.n	8002074 <drawCenteredText+0x58>
 8002072:	3301      	adds	r3, #1
 8002074:	105b      	asrs	r3, r3, #1
 8002076:	425b      	negs	r3, r3
 8002078:	18cb      	adds	r3, r1, r3
 800207a:	61bb      	str	r3, [r7, #24]
	int rightBound = x_center+(strSize*textSize*6)/2;
 800207c:	230f      	movs	r3, #15
 800207e:	18fb      	adds	r3, r7, r3
 8002080:	7819      	ldrb	r1, [r3, #0]
 8002082:	231f      	movs	r3, #31
 8002084:	18fb      	adds	r3, r7, r3
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	4a14      	ldr	r2, [pc, #80]	; (80020dc <drawCenteredText+0xc0>)
 800208a:	7812      	ldrb	r2, [r2, #0]
 800208c:	435a      	muls	r2, r3
 800208e:	0013      	movs	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	189b      	adds	r3, r3, r2
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	d500      	bpl.n	800209a <drawCenteredText+0x7e>
 8002098:	3301      	adds	r3, #1
 800209a:	105b      	asrs	r3, r3, #1
 800209c:	18cb      	adds	r3, r1, r3
 800209e:	617b      	str	r3, [r7, #20]
	if (leftBound < 0) return;
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	db14      	blt.n	80020d0 <drawCenteredText+0xb4>
	if (rightBound > WIDTH) return;
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	2b80      	cmp	r3, #128	; 0x80
 80020aa:	dc13      	bgt.n	80020d4 <drawCenteredText+0xb8>

	setCursor(leftBound, y);
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	230e      	movs	r3, #14
 80020b2:	18fb      	adds	r3, r7, r3
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	0019      	movs	r1, r3
 80020b8:	0010      	movs	r0, r2
 80020ba:	f000 fce7 	bl	8002a8c <setCursor>
	drawText(str, hspi);
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	0011      	movs	r1, r2
 80020c4:	0018      	movs	r0, r3
 80020c6:	f000 fc53 	bl	8002970 <drawText>
 80020ca:	e004      	b.n	80020d6 <drawCenteredText+0xba>
	if (y+textSize*8 > HEIGHT) return;
 80020cc:	46c0      	nop			; (mov r8, r8)
 80020ce:	e002      	b.n	80020d6 <drawCenteredText+0xba>
	if (leftBound < 0) return;
 80020d0:	46c0      	nop			; (mov r8, r8)
 80020d2:	e000      	b.n	80020d6 <drawCenteredText+0xba>
	if (rightBound > WIDTH) return;
 80020d4:	46c0      	nop			; (mov r8, r8)
}
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b009      	add	sp, #36	; 0x24
 80020da:	bd90      	pop	{r4, r7, pc}
 80020dc:	200000ee 	.word	0x200000ee

080020e0 <drawCenteredTextWithPadding>:

void drawCenteredTextWithPadding(uint8_t x_center, uint8_t y, uint8_t maxLength, const char *str, SPI_HandleTypeDef *hspi) {
 80020e0:	b5b0      	push	{r4, r5, r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af02      	add	r7, sp, #8
 80020e6:	0004      	movs	r4, r0
 80020e8:	0008      	movs	r0, r1
 80020ea:	0011      	movs	r1, r2
 80020ec:	603b      	str	r3, [r7, #0]
 80020ee:	1dfb      	adds	r3, r7, #7
 80020f0:	1c22      	adds	r2, r4, #0
 80020f2:	701a      	strb	r2, [r3, #0]
 80020f4:	1dbb      	adds	r3, r7, #6
 80020f6:	1c02      	adds	r2, r0, #0
 80020f8:	701a      	strb	r2, [r3, #0]
 80020fa:	1d7b      	adds	r3, r7, #5
 80020fc:	1c0a      	adds	r2, r1, #0
 80020fe:	701a      	strb	r2, [r3, #0]
	// bounds checking. text box needed to print text should not end up out of bounds
	if (y+textSize*8 > HEIGHT) return;
 8002100:	1dbb      	adds	r3, r7, #6
 8002102:	781a      	ldrb	r2, [r3, #0]
 8002104:	4b60      	ldr	r3, [pc, #384]	; (8002288 <drawCenteredTextWithPadding+0x1a8>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	18d3      	adds	r3, r2, r3
 800210c:	2ba0      	cmp	r3, #160	; 0xa0
 800210e:	dd00      	ble.n	8002112 <drawCenteredTextWithPadding+0x32>
 8002110:	e0af      	b.n	8002272 <drawCenteredTextWithPadding+0x192>
	int leftBound = x_center-(maxLength*textSize*6)/2;
 8002112:	1dfb      	adds	r3, r7, #7
 8002114:	7819      	ldrb	r1, [r3, #0]
 8002116:	1d7b      	adds	r3, r7, #5
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	4a5b      	ldr	r2, [pc, #364]	; (8002288 <drawCenteredTextWithPadding+0x1a8>)
 800211c:	7812      	ldrb	r2, [r2, #0]
 800211e:	435a      	muls	r2, r3
 8002120:	0013      	movs	r3, r2
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	189b      	adds	r3, r3, r2
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	d500      	bpl.n	800212c <drawCenteredTextWithPadding+0x4c>
 800212a:	3301      	adds	r3, #1
 800212c:	105b      	asrs	r3, r3, #1
 800212e:	425b      	negs	r3, r3
 8002130:	18cb      	adds	r3, r1, r3
 8002132:	617b      	str	r3, [r7, #20]
	int rightBound = x_center+(maxLength*textSize*6)/2;
 8002134:	1dfb      	adds	r3, r7, #7
 8002136:	7819      	ldrb	r1, [r3, #0]
 8002138:	1d7b      	adds	r3, r7, #5
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	4a52      	ldr	r2, [pc, #328]	; (8002288 <drawCenteredTextWithPadding+0x1a8>)
 800213e:	7812      	ldrb	r2, [r2, #0]
 8002140:	435a      	muls	r2, r3
 8002142:	0013      	movs	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	189b      	adds	r3, r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	d500      	bpl.n	800214e <drawCenteredTextWithPadding+0x6e>
 800214c:	3301      	adds	r3, #1
 800214e:	105b      	asrs	r3, r3, #1
 8002150:	18cb      	adds	r3, r1, r3
 8002152:	613b      	str	r3, [r7, #16]
	if (leftBound < 0) return;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	2b00      	cmp	r3, #0
 8002158:	da00      	bge.n	800215c <drawCenteredTextWithPadding+0x7c>
 800215a:	e08c      	b.n	8002276 <drawCenteredTextWithPadding+0x196>
	if (rightBound > WIDTH) return;
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	2b80      	cmp	r3, #128	; 0x80
 8002160:	dd00      	ble.n	8002164 <drawCenteredTextWithPadding+0x84>
 8002162:	e08a      	b.n	800227a <drawCenteredTextWithPadding+0x19a>

	uint8_t strSize = strlen(str);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	0018      	movs	r0, r3
 8002168:	f7fd ffce 	bl	8000108 <strlen>
 800216c:	0002      	movs	r2, r0
 800216e:	210f      	movs	r1, #15
 8002170:	187b      	adds	r3, r7, r1
 8002172:	701a      	strb	r2, [r3, #0]
	if (maxLength < strSize) return;		// size should not be greater than max
 8002174:	1d7a      	adds	r2, r7, #5
 8002176:	187b      	adds	r3, r7, r1
 8002178:	7812      	ldrb	r2, [r2, #0]
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	d200      	bcs.n	8002182 <drawCenteredTextWithPadding+0xa2>
 8002180:	e07d      	b.n	800227e <drawCenteredTextWithPadding+0x19e>

	// draw left and right padding
	uint8_t diff = maxLength-strSize;
 8002182:	240e      	movs	r4, #14
 8002184:	193b      	adds	r3, r7, r4
 8002186:	1d79      	adds	r1, r7, #5
 8002188:	220f      	movs	r2, #15
 800218a:	18ba      	adds	r2, r7, r2
 800218c:	7809      	ldrb	r1, [r1, #0]
 800218e:	7812      	ldrb	r2, [r2, #0]
 8002190:	1a8a      	subs	r2, r1, r2
 8002192:	701a      	strb	r2, [r3, #0]
	fillRect(leftBound, y, diff*textSize*6/2, textSize*8, bg, hspi);		// math out of order to accomodate diff/2 being a non-int
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	b2d8      	uxtb	r0, r3
 8002198:	193b      	adds	r3, r7, r4
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	4a3a      	ldr	r2, [pc, #232]	; (8002288 <drawCenteredTextWithPadding+0x1a8>)
 800219e:	7812      	ldrb	r2, [r2, #0]
 80021a0:	435a      	muls	r2, r3
 80021a2:	0013      	movs	r3, r2
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	189b      	adds	r3, r3, r2
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	d500      	bpl.n	80021ae <drawCenteredTextWithPadding+0xce>
 80021ac:	3301      	adds	r3, #1
 80021ae:	105b      	asrs	r3, r3, #1
 80021b0:	b2dc      	uxtb	r4, r3
 80021b2:	4b35      	ldr	r3, [pc, #212]	; (8002288 <drawCenteredTextWithPadding+0x1a8>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	b2dd      	uxtb	r5, r3
 80021ba:	4b34      	ldr	r3, [pc, #208]	; (800228c <drawCenteredTextWithPadding+0x1ac>)
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	1dba      	adds	r2, r7, #6
 80021c0:	7811      	ldrb	r1, [r2, #0]
 80021c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021c4:	9201      	str	r2, [sp, #4]
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	002b      	movs	r3, r5
 80021ca:	0022      	movs	r2, r4
 80021cc:	f7ff fe77 	bl	8001ebe <fillRect>
	fillRect(rightBound-diff*textSize*6/2, y, diff*textSize*6/2, textSize*8, bg, hspi);
 80021d0:	230e      	movs	r3, #14
 80021d2:	18fb      	adds	r3, r7, r3
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	4a2c      	ldr	r2, [pc, #176]	; (8002288 <drawCenteredTextWithPadding+0x1a8>)
 80021d8:	7812      	ldrb	r2, [r2, #0]
 80021da:	435a      	muls	r2, r3
 80021dc:	0013      	movs	r3, r2
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	189b      	adds	r3, r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	d500      	bpl.n	80021e8 <drawCenteredTextWithPadding+0x108>
 80021e6:	3301      	adds	r3, #1
 80021e8:	105b      	asrs	r3, r3, #1
 80021ea:	425b      	negs	r3, r3
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	18d3      	adds	r3, r2, r3
 80021f4:	b2d8      	uxtb	r0, r3
 80021f6:	230e      	movs	r3, #14
 80021f8:	18fb      	adds	r3, r7, r3
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	4a22      	ldr	r2, [pc, #136]	; (8002288 <drawCenteredTextWithPadding+0x1a8>)
 80021fe:	7812      	ldrb	r2, [r2, #0]
 8002200:	435a      	muls	r2, r3
 8002202:	0013      	movs	r3, r2
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	189b      	adds	r3, r3, r2
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	d500      	bpl.n	800220e <drawCenteredTextWithPadding+0x12e>
 800220c:	3301      	adds	r3, #1
 800220e:	105b      	asrs	r3, r3, #1
 8002210:	b2dc      	uxtb	r4, r3
 8002212:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <drawCenteredTextWithPadding+0x1a8>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	b2dd      	uxtb	r5, r3
 800221a:	4b1c      	ldr	r3, [pc, #112]	; (800228c <drawCenteredTextWithPadding+0x1ac>)
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	1dba      	adds	r2, r7, #6
 8002220:	7811      	ldrb	r1, [r2, #0]
 8002222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002224:	9201      	str	r2, [sp, #4]
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	002b      	movs	r3, r5
 800222a:	0022      	movs	r2, r4
 800222c:	f7ff fe47 	bl	8001ebe <fillRect>

	int textLeftBound = x_center-(strSize*textSize*6)/2;
 8002230:	1dfb      	adds	r3, r7, #7
 8002232:	7819      	ldrb	r1, [r3, #0]
 8002234:	230f      	movs	r3, #15
 8002236:	18fb      	adds	r3, r7, r3
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	4a13      	ldr	r2, [pc, #76]	; (8002288 <drawCenteredTextWithPadding+0x1a8>)
 800223c:	7812      	ldrb	r2, [r2, #0]
 800223e:	435a      	muls	r2, r3
 8002240:	0013      	movs	r3, r2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	189b      	adds	r3, r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	d500      	bpl.n	800224c <drawCenteredTextWithPadding+0x16c>
 800224a:	3301      	adds	r3, #1
 800224c:	105b      	asrs	r3, r3, #1
 800224e:	425b      	negs	r3, r3
 8002250:	18cb      	adds	r3, r1, r3
 8002252:	60bb      	str	r3, [r7, #8]
	setCursor(textLeftBound, y);
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	b2da      	uxtb	r2, r3
 8002258:	1dbb      	adds	r3, r7, #6
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	0019      	movs	r1, r3
 800225e:	0010      	movs	r0, r2
 8002260:	f000 fc14 	bl	8002a8c <setCursor>
	drawText(str, hspi);
 8002264:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	0011      	movs	r1, r2
 800226a:	0018      	movs	r0, r3
 800226c:	f000 fb80 	bl	8002970 <drawText>
 8002270:	e006      	b.n	8002280 <drawCenteredTextWithPadding+0x1a0>
	if (y+textSize*8 > HEIGHT) return;
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	e004      	b.n	8002280 <drawCenteredTextWithPadding+0x1a0>
	if (leftBound < 0) return;
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	e002      	b.n	8002280 <drawCenteredTextWithPadding+0x1a0>
	if (rightBound > WIDTH) return;
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	e000      	b.n	8002280 <drawCenteredTextWithPadding+0x1a0>
	if (maxLength < strSize) return;		// size should not be greater than max
 800227e:	46c0      	nop			; (mov r8, r8)
}
 8002280:	46bd      	mov	sp, r7
 8002282:	b006      	add	sp, #24
 8002284:	bdb0      	pop	{r4, r5, r7, pc}
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	200000ee 	.word	0x200000ee
 800228c:	200000f2 	.word	0x200000f2

08002290 <clearTextLine>:

void clearTextLine(uint8_t y, SPI_HandleTypeDef *hspi) {
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af02      	add	r7, sp, #8
 8002296:	0002      	movs	r2, r0
 8002298:	6039      	str	r1, [r7, #0]
 800229a:	1dfb      	adds	r3, r7, #7
 800229c:	701a      	strb	r2, [r3, #0]
	fillRect(0, y, WIDTH, textSize*8, bg, hspi);
 800229e:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <clearTextLine+0x38>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	b2d8      	uxtb	r0, r3
 80022a6:	4b09      	ldr	r3, [pc, #36]	; (80022cc <clearTextLine+0x3c>)
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	1dfa      	adds	r2, r7, #7
 80022ac:	7811      	ldrb	r1, [r2, #0]
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	9201      	str	r2, [sp, #4]
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	0003      	movs	r3, r0
 80022b6:	2280      	movs	r2, #128	; 0x80
 80022b8:	2000      	movs	r0, #0
 80022ba:	f7ff fe00 	bl	8001ebe <fillRect>
}
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	46bd      	mov	sp, r7
 80022c2:	b002      	add	sp, #8
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	200000ee 	.word	0x200000ee
 80022cc:	200000f2 	.word	0x200000f2

080022d0 <drawChar>:
// ---- end of more complicated graphics ----

// ---- text functions ----
void drawChar(uint8_t ch, SPI_HandleTypeDef *hspi) {
 80022d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022d2:	b095      	sub	sp, #84	; 0x54
 80022d4:	af04      	add	r7, sp, #16
 80022d6:	61b9      	str	r1, [r7, #24]
 80022d8:	221f      	movs	r2, #31
 80022da:	18ba      	adds	r2, r7, r2
 80022dc:	1c01      	adds	r1, r0, #0
 80022de:	7011      	strb	r1, [r2, #0]
 80022e0:	466a      	mov	r2, sp
 80022e2:	607a      	str	r2, [r7, #4]
	uint16_t bufferSize = 6*8*textSize*textSize;
 80022e4:	4abe      	ldr	r2, [pc, #760]	; (80025e0 <drawChar+0x310>)
 80022e6:	7812      	ldrb	r2, [r2, #0]
 80022e8:	b292      	uxth	r2, r2
 80022ea:	49bd      	ldr	r1, [pc, #756]	; (80025e0 <drawChar+0x310>)
 80022ec:	7809      	ldrb	r1, [r1, #0]
 80022ee:	b289      	uxth	r1, r1
 80022f0:	434a      	muls	r2, r1
 80022f2:	b291      	uxth	r1, r2
 80022f4:	221a      	movs	r2, #26
 80022f6:	2018      	movs	r0, #24
 80022f8:	4684      	mov	ip, r0
 80022fa:	44bc      	add	ip, r7
 80022fc:	4462      	add	r2, ip
 80022fe:	2030      	movs	r0, #48	; 0x30
 8002300:	4341      	muls	r1, r0
 8002302:	8011      	strh	r1, [r2, #0]
	uint16_t buffer[bufferSize];
 8002304:	221a      	movs	r2, #26
 8002306:	2118      	movs	r1, #24
 8002308:	468c      	mov	ip, r1
 800230a:	44bc      	add	ip, r7
 800230c:	4462      	add	r2, ip
 800230e:	8812      	ldrh	r2, [r2, #0]
 8002310:	0011      	movs	r1, r2
 8002312:	3901      	subs	r1, #1
 8002314:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002316:	613a      	str	r2, [r7, #16]
 8002318:	2100      	movs	r1, #0
 800231a:	6179      	str	r1, [r7, #20]
 800231c:	6939      	ldr	r1, [r7, #16]
 800231e:	0f09      	lsrs	r1, r1, #28
 8002320:	6978      	ldr	r0, [r7, #20]
 8002322:	0106      	lsls	r6, r0, #4
 8002324:	430e      	orrs	r6, r1
 8002326:	6939      	ldr	r1, [r7, #16]
 8002328:	010d      	lsls	r5, r1, #4
 800232a:	60ba      	str	r2, [r7, #8]
 800232c:	2100      	movs	r1, #0
 800232e:	60f9      	str	r1, [r7, #12]
 8002330:	68bd      	ldr	r5, [r7, #8]
 8002332:	68fe      	ldr	r6, [r7, #12]
 8002334:	0029      	movs	r1, r5
 8002336:	0f09      	lsrs	r1, r1, #28
 8002338:	0030      	movs	r0, r6
 800233a:	0104      	lsls	r4, r0, #4
 800233c:	430c      	orrs	r4, r1
 800233e:	0029      	movs	r1, r5
 8002340:	010b      	lsls	r3, r1, #4
 8002342:	0013      	movs	r3, r2
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	3301      	adds	r3, #1
 8002348:	3307      	adds	r3, #7
 800234a:	08db      	lsrs	r3, r3, #3
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	466a      	mov	r2, sp
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	469d      	mov	sp, r3
 8002354:	ab04      	add	r3, sp, #16
 8002356:	3301      	adds	r3, #1
 8002358:	085b      	lsrs	r3, r3, #1
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	62bb      	str	r3, [r7, #40]	; 0x28
	int16_t rowOffset, address;

	for (int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 800235e:	2325      	movs	r3, #37	; 0x25
 8002360:	2218      	movs	r2, #24
 8002362:	4694      	mov	ip, r2
 8002364:	44bc      	add	ip, r7
 8002366:	4463      	add	r3, ip
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]
 800236c:	e1f4      	b.n	8002758 <drawChar+0x488>
		uint8_t line = font[ch*5+i];
 800236e:	231f      	movs	r3, #31
 8002370:	18fb      	adds	r3, r7, r3
 8002372:	781a      	ldrb	r2, [r3, #0]
 8002374:	0013      	movs	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	189a      	adds	r2, r3, r2
 800237a:	2325      	movs	r3, #37	; 0x25
 800237c:	2118      	movs	r1, #24
 800237e:	468c      	mov	ip, r1
 8002380:	44bc      	add	ip, r7
 8002382:	4463      	add	r3, ip
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	b25b      	sxtb	r3, r3
 8002388:	18d2      	adds	r2, r2, r3
 800238a:	2324      	movs	r3, #36	; 0x24
 800238c:	2118      	movs	r1, #24
 800238e:	468c      	mov	ip, r1
 8002390:	44bc      	add	ip, r7
 8002392:	4463      	add	r3, ip
 8002394:	4993      	ldr	r1, [pc, #588]	; (80025e4 <drawChar+0x314>)
 8002396:	5c8a      	ldrb	r2, [r1, r2]
 8002398:	701a      	strb	r2, [r3, #0]
		for (int8_t j=0; j<8; j++, line >>= 1) {
 800239a:	2323      	movs	r3, #35	; 0x23
 800239c:	2218      	movs	r2, #24
 800239e:	4694      	mov	ip, r2
 80023a0:	44bc      	add	ip, r7
 80023a2:	4463      	add	r3, ip
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]
 80023a8:	e1c0      	b.n	800272c <drawChar+0x45c>
			if (line & 1) {
 80023aa:	2324      	movs	r3, #36	; 0x24
 80023ac:	2218      	movs	r2, #24
 80023ae:	4694      	mov	ip, r2
 80023b0:	44bc      	add	ip, r7
 80023b2:	4463      	add	r3, ip
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2201      	movs	r2, #1
 80023b8:	4013      	ands	r3, r2
 80023ba:	d100      	bne.n	80023be <drawChar+0xee>
 80023bc:	e0c8      	b.n	8002550 <drawChar+0x280>
				if (textSize == 1) {
 80023be:	4b88      	ldr	r3, [pc, #544]	; (80025e0 <drawChar+0x310>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d11c      	bne.n	8002400 <drawChar+0x130>
					buffer[i+j*6] = colorFixer(textColor);
 80023c6:	4b88      	ldr	r3, [pc, #544]	; (80025e8 <drawChar+0x318>)
 80023c8:	8818      	ldrh	r0, [r3, #0]
 80023ca:	2325      	movs	r3, #37	; 0x25
 80023cc:	2218      	movs	r2, #24
 80023ce:	4694      	mov	ip, r2
 80023d0:	44bc      	add	ip, r7
 80023d2:	4463      	add	r3, ip
 80023d4:	2100      	movs	r1, #0
 80023d6:	5659      	ldrsb	r1, [r3, r1]
 80023d8:	2323      	movs	r3, #35	; 0x23
 80023da:	2218      	movs	r2, #24
 80023dc:	4694      	mov	ip, r2
 80023de:	44bc      	add	ip, r7
 80023e0:	4463      	add	r3, ip
 80023e2:	2200      	movs	r2, #0
 80023e4:	569a      	ldrsb	r2, [r3, r2]
 80023e6:	0013      	movs	r3, r2
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	189b      	adds	r3, r3, r2
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	18cc      	adds	r4, r1, r3
 80023f0:	f7ff fb52 	bl	8001a98 <colorFixer>
 80023f4:	0003      	movs	r3, r0
 80023f6:	0019      	movs	r1, r3
 80023f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fa:	0062      	lsls	r2, r4, #1
 80023fc:	52d1      	strh	r1, [r2, r3]
 80023fe:	e17f      	b.n	8002700 <drawChar+0x430>
				}
				else {
					for (int8_t k = 0; k < textSize; k++) {
 8002400:	2322      	movs	r3, #34	; 0x22
 8002402:	2218      	movs	r2, #24
 8002404:	4694      	mov	ip, r2
 8002406:	44bc      	add	ip, r7
 8002408:	4463      	add	r3, ip
 800240a:	2200      	movs	r2, #0
 800240c:	701a      	strb	r2, [r3, #0]
 800240e:	e092      	b.n	8002536 <drawChar+0x266>
						rowOffset = textSize*6;
 8002410:	4b73      	ldr	r3, [pc, #460]	; (80025e0 <drawChar+0x310>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	b29b      	uxth	r3, r3
 8002416:	1c1a      	adds	r2, r3, #0
 8002418:	1c13      	adds	r3, r2, #0
 800241a:	18db      	adds	r3, r3, r3
 800241c:	189b      	adds	r3, r3, r2
 800241e:	18db      	adds	r3, r3, r3
 8002420:	b29a      	uxth	r2, r3
 8002422:	2326      	movs	r3, #38	; 0x26
 8002424:	2118      	movs	r1, #24
 8002426:	468c      	mov	ip, r1
 8002428:	44bc      	add	ip, r7
 800242a:	4463      	add	r3, ip
 800242c:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 800242e:	2321      	movs	r3, #33	; 0x21
 8002430:	2218      	movs	r2, #24
 8002432:	4694      	mov	ip, r2
 8002434:	44bc      	add	ip, r7
 8002436:	4463      	add	r3, ip
 8002438:	2200      	movs	r2, #0
 800243a:	701a      	strb	r2, [r3, #0]
 800243c:	e064      	b.n	8002508 <drawChar+0x238>
							address = (textSize*textSize*j*6)+(i*textSize);
 800243e:	4b68      	ldr	r3, [pc, #416]	; (80025e0 <drawChar+0x310>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	b29b      	uxth	r3, r3
 8002444:	4a66      	ldr	r2, [pc, #408]	; (80025e0 <drawChar+0x310>)
 8002446:	7812      	ldrb	r2, [r2, #0]
 8002448:	b292      	uxth	r2, r2
 800244a:	4353      	muls	r3, r2
 800244c:	b29b      	uxth	r3, r3
 800244e:	2223      	movs	r2, #35	; 0x23
 8002450:	2118      	movs	r1, #24
 8002452:	468c      	mov	ip, r1
 8002454:	44bc      	add	ip, r7
 8002456:	4462      	add	r2, ip
 8002458:	7812      	ldrb	r2, [r2, #0]
 800245a:	b252      	sxtb	r2, r2
 800245c:	b292      	uxth	r2, r2
 800245e:	4353      	muls	r3, r2
 8002460:	b29b      	uxth	r3, r3
 8002462:	1c1a      	adds	r2, r3, #0
 8002464:	1c13      	adds	r3, r2, #0
 8002466:	18db      	adds	r3, r3, r3
 8002468:	189b      	adds	r3, r3, r2
 800246a:	18db      	adds	r3, r3, r3
 800246c:	b29a      	uxth	r2, r3
 800246e:	2325      	movs	r3, #37	; 0x25
 8002470:	2118      	movs	r1, #24
 8002472:	468c      	mov	ip, r1
 8002474:	44bc      	add	ip, r7
 8002476:	4463      	add	r3, ip
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	b25b      	sxtb	r3, r3
 800247c:	b29b      	uxth	r3, r3
 800247e:	4958      	ldr	r1, [pc, #352]	; (80025e0 <drawChar+0x310>)
 8002480:	7809      	ldrb	r1, [r1, #0]
 8002482:	b289      	uxth	r1, r1
 8002484:	434b      	muls	r3, r1
 8002486:	b29b      	uxth	r3, r3
 8002488:	18d3      	adds	r3, r2, r3
 800248a:	b29a      	uxth	r2, r3
 800248c:	210e      	movs	r1, #14
 800248e:	2018      	movs	r0, #24
 8002490:	183b      	adds	r3, r7, r0
 8002492:	185b      	adds	r3, r3, r1
 8002494:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 8002496:	2322      	movs	r3, #34	; 0x22
 8002498:	2218      	movs	r2, #24
 800249a:	4694      	mov	ip, r2
 800249c:	44bc      	add	ip, r7
 800249e:	4463      	add	r3, ip
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	b25b      	sxtb	r3, r3
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	2226      	movs	r2, #38	; 0x26
 80024a8:	2418      	movs	r4, #24
 80024aa:	46a4      	mov	ip, r4
 80024ac:	44bc      	add	ip, r7
 80024ae:	4462      	add	r2, ip
 80024b0:	8812      	ldrh	r2, [r2, #0]
 80024b2:	4353      	muls	r3, r2
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	2521      	movs	r5, #33	; 0x21
 80024b8:	183b      	adds	r3, r7, r0
 80024ba:	195b      	adds	r3, r3, r5
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	b25b      	sxtb	r3, r3
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	18d3      	adds	r3, r2, r3
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	183b      	adds	r3, r7, r0
 80024c8:	185b      	adds	r3, r3, r1
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	18d3      	adds	r3, r2, r3
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	183b      	adds	r3, r7, r0
 80024d2:	185b      	adds	r3, r3, r1
 80024d4:	801a      	strh	r2, [r3, #0]
							buffer[address] = colorFixer(textColor);
 80024d6:	4b44      	ldr	r3, [pc, #272]	; (80025e8 <drawChar+0x318>)
 80024d8:	881a      	ldrh	r2, [r3, #0]
 80024da:	0006      	movs	r6, r0
 80024dc:	183b      	adds	r3, r7, r0
 80024de:	185b      	adds	r3, r3, r1
 80024e0:	2400      	movs	r4, #0
 80024e2:	5f1c      	ldrsh	r4, [r3, r4]
 80024e4:	0010      	movs	r0, r2
 80024e6:	f7ff fad7 	bl	8001a98 <colorFixer>
 80024ea:	0003      	movs	r3, r0
 80024ec:	0019      	movs	r1, r3
 80024ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f0:	0062      	lsls	r2, r4, #1
 80024f2:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 80024f4:	19bb      	adds	r3, r7, r6
 80024f6:	195b      	adds	r3, r3, r5
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	b25b      	sxtb	r3, r3
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	3301      	adds	r3, #1
 8002500:	b2da      	uxtb	r2, r3
 8002502:	19bb      	adds	r3, r7, r6
 8002504:	195b      	adds	r3, r3, r5
 8002506:	701a      	strb	r2, [r3, #0]
 8002508:	2321      	movs	r3, #33	; 0x21
 800250a:	2218      	movs	r2, #24
 800250c:	4694      	mov	ip, r2
 800250e:	44bc      	add	ip, r7
 8002510:	4463      	add	r3, ip
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	b25b      	sxtb	r3, r3
 8002516:	4a32      	ldr	r2, [pc, #200]	; (80025e0 <drawChar+0x310>)
 8002518:	7812      	ldrb	r2, [r2, #0]
 800251a:	4293      	cmp	r3, r2
 800251c:	db8f      	blt.n	800243e <drawChar+0x16e>
					for (int8_t k = 0; k < textSize; k++) {
 800251e:	2122      	movs	r1, #34	; 0x22
 8002520:	2018      	movs	r0, #24
 8002522:	183b      	adds	r3, r7, r0
 8002524:	185b      	adds	r3, r3, r1
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	b25b      	sxtb	r3, r3
 800252a:	b2db      	uxtb	r3, r3
 800252c:	3301      	adds	r3, #1
 800252e:	b2da      	uxtb	r2, r3
 8002530:	183b      	adds	r3, r7, r0
 8002532:	185b      	adds	r3, r3, r1
 8002534:	701a      	strb	r2, [r3, #0]
 8002536:	2322      	movs	r3, #34	; 0x22
 8002538:	2218      	movs	r2, #24
 800253a:	4694      	mov	ip, r2
 800253c:	44bc      	add	ip, r7
 800253e:	4463      	add	r3, ip
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	b25b      	sxtb	r3, r3
 8002544:	4a26      	ldr	r2, [pc, #152]	; (80025e0 <drawChar+0x310>)
 8002546:	7812      	ldrb	r2, [r2, #0]
 8002548:	4293      	cmp	r3, r2
 800254a:	da00      	bge.n	800254e <drawChar+0x27e>
 800254c:	e760      	b.n	8002410 <drawChar+0x140>
 800254e:	e0d7      	b.n	8002700 <drawChar+0x430>
						}
					}
//					fillRect(cursorX+i*textSize, cursorY+j*textSize, textSize, textSize, textColor, hspi);
				}
			} else if (bg != textColor) {
 8002550:	4b26      	ldr	r3, [pc, #152]	; (80025ec <drawChar+0x31c>)
 8002552:	881a      	ldrh	r2, [r3, #0]
 8002554:	4b24      	ldr	r3, [pc, #144]	; (80025e8 <drawChar+0x318>)
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	429a      	cmp	r2, r3
 800255a:	d100      	bne.n	800255e <drawChar+0x28e>
 800255c:	e0d0      	b.n	8002700 <drawChar+0x430>
				if (textSize == 1) {
 800255e:	4b20      	ldr	r3, [pc, #128]	; (80025e0 <drawChar+0x310>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d11c      	bne.n	80025a0 <drawChar+0x2d0>
					buffer[i+j*6] = colorFixer(bg);
 8002566:	4b21      	ldr	r3, [pc, #132]	; (80025ec <drawChar+0x31c>)
 8002568:	8818      	ldrh	r0, [r3, #0]
 800256a:	2325      	movs	r3, #37	; 0x25
 800256c:	2218      	movs	r2, #24
 800256e:	4694      	mov	ip, r2
 8002570:	44bc      	add	ip, r7
 8002572:	4463      	add	r3, ip
 8002574:	2100      	movs	r1, #0
 8002576:	5659      	ldrsb	r1, [r3, r1]
 8002578:	2323      	movs	r3, #35	; 0x23
 800257a:	2218      	movs	r2, #24
 800257c:	4694      	mov	ip, r2
 800257e:	44bc      	add	ip, r7
 8002580:	4463      	add	r3, ip
 8002582:	2200      	movs	r2, #0
 8002584:	569a      	ldrsb	r2, [r3, r2]
 8002586:	0013      	movs	r3, r2
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	189b      	adds	r3, r3, r2
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	18cc      	adds	r4, r1, r3
 8002590:	f7ff fa82 	bl	8001a98 <colorFixer>
 8002594:	0003      	movs	r3, r0
 8002596:	0019      	movs	r1, r3
 8002598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259a:	0062      	lsls	r2, r4, #1
 800259c:	52d1      	strh	r1, [r2, r3]
 800259e:	e0af      	b.n	8002700 <drawChar+0x430>
				}
				else {
					for (int8_t k = 0; k < textSize; k++) {
 80025a0:	2320      	movs	r3, #32
 80025a2:	2218      	movs	r2, #24
 80025a4:	4694      	mov	ip, r2
 80025a6:	44bc      	add	ip, r7
 80025a8:	4463      	add	r3, ip
 80025aa:	2200      	movs	r2, #0
 80025ac:	701a      	strb	r2, [r3, #0]
 80025ae:	e09b      	b.n	80026e8 <drawChar+0x418>
						rowOffset = textSize*6;
 80025b0:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <drawChar+0x310>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	1c1a      	adds	r2, r3, #0
 80025b8:	1c13      	adds	r3, r2, #0
 80025ba:	18db      	adds	r3, r3, r3
 80025bc:	189b      	adds	r3, r3, r2
 80025be:	18db      	adds	r3, r3, r3
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	2326      	movs	r3, #38	; 0x26
 80025c4:	2118      	movs	r1, #24
 80025c6:	468c      	mov	ip, r1
 80025c8:	44bc      	add	ip, r7
 80025ca:	4463      	add	r3, ip
 80025cc:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 80025ce:	231f      	movs	r3, #31
 80025d0:	2218      	movs	r2, #24
 80025d2:	4694      	mov	ip, r2
 80025d4:	44bc      	add	ip, r7
 80025d6:	4463      	add	r3, ip
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]
 80025dc:	e06d      	b.n	80026ba <drawChar+0x3ea>
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	200000ee 	.word	0x200000ee
 80025e4:	0800b9bc 	.word	0x0800b9bc
 80025e8:	200000f0 	.word	0x200000f0
 80025ec:	200000f2 	.word	0x200000f2
							address = (textSize*textSize*j*6)+(i*textSize);
 80025f0:	4bda      	ldr	r3, [pc, #872]	; (800295c <drawChar+0x68c>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	4ad9      	ldr	r2, [pc, #868]	; (800295c <drawChar+0x68c>)
 80025f8:	7812      	ldrb	r2, [r2, #0]
 80025fa:	b292      	uxth	r2, r2
 80025fc:	4353      	muls	r3, r2
 80025fe:	b29b      	uxth	r3, r3
 8002600:	2223      	movs	r2, #35	; 0x23
 8002602:	2118      	movs	r1, #24
 8002604:	468c      	mov	ip, r1
 8002606:	44bc      	add	ip, r7
 8002608:	4462      	add	r2, ip
 800260a:	7812      	ldrb	r2, [r2, #0]
 800260c:	b252      	sxtb	r2, r2
 800260e:	b292      	uxth	r2, r2
 8002610:	4353      	muls	r3, r2
 8002612:	b29b      	uxth	r3, r3
 8002614:	1c1a      	adds	r2, r3, #0
 8002616:	1c13      	adds	r3, r2, #0
 8002618:	18db      	adds	r3, r3, r3
 800261a:	189b      	adds	r3, r3, r2
 800261c:	18db      	adds	r3, r3, r3
 800261e:	b29a      	uxth	r2, r3
 8002620:	2325      	movs	r3, #37	; 0x25
 8002622:	2118      	movs	r1, #24
 8002624:	468c      	mov	ip, r1
 8002626:	44bc      	add	ip, r7
 8002628:	4463      	add	r3, ip
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	b25b      	sxtb	r3, r3
 800262e:	b29b      	uxth	r3, r3
 8002630:	49ca      	ldr	r1, [pc, #808]	; (800295c <drawChar+0x68c>)
 8002632:	7809      	ldrb	r1, [r1, #0]
 8002634:	b289      	uxth	r1, r1
 8002636:	434b      	muls	r3, r1
 8002638:	b29b      	uxth	r3, r3
 800263a:	18d3      	adds	r3, r2, r3
 800263c:	b29a      	uxth	r2, r3
 800263e:	210e      	movs	r1, #14
 8002640:	2018      	movs	r0, #24
 8002642:	183b      	adds	r3, r7, r0
 8002644:	185b      	adds	r3, r3, r1
 8002646:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 8002648:	2320      	movs	r3, #32
 800264a:	2218      	movs	r2, #24
 800264c:	4694      	mov	ip, r2
 800264e:	44bc      	add	ip, r7
 8002650:	4463      	add	r3, ip
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	b25b      	sxtb	r3, r3
 8002656:	b29b      	uxth	r3, r3
 8002658:	2226      	movs	r2, #38	; 0x26
 800265a:	2418      	movs	r4, #24
 800265c:	46a4      	mov	ip, r4
 800265e:	44bc      	add	ip, r7
 8002660:	4462      	add	r2, ip
 8002662:	8812      	ldrh	r2, [r2, #0]
 8002664:	4353      	muls	r3, r2
 8002666:	b29a      	uxth	r2, r3
 8002668:	251f      	movs	r5, #31
 800266a:	183b      	adds	r3, r7, r0
 800266c:	195b      	adds	r3, r3, r5
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	b25b      	sxtb	r3, r3
 8002672:	b29b      	uxth	r3, r3
 8002674:	18d3      	adds	r3, r2, r3
 8002676:	b29a      	uxth	r2, r3
 8002678:	183b      	adds	r3, r7, r0
 800267a:	185b      	adds	r3, r3, r1
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	18d3      	adds	r3, r2, r3
 8002680:	b29a      	uxth	r2, r3
 8002682:	183b      	adds	r3, r7, r0
 8002684:	185b      	adds	r3, r3, r1
 8002686:	801a      	strh	r2, [r3, #0]
							buffer[address] = colorFixer(bg);
 8002688:	4bb5      	ldr	r3, [pc, #724]	; (8002960 <drawChar+0x690>)
 800268a:	881a      	ldrh	r2, [r3, #0]
 800268c:	0006      	movs	r6, r0
 800268e:	183b      	adds	r3, r7, r0
 8002690:	185b      	adds	r3, r3, r1
 8002692:	2400      	movs	r4, #0
 8002694:	5f1c      	ldrsh	r4, [r3, r4]
 8002696:	0010      	movs	r0, r2
 8002698:	f7ff f9fe 	bl	8001a98 <colorFixer>
 800269c:	0003      	movs	r3, r0
 800269e:	0019      	movs	r1, r3
 80026a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a2:	0062      	lsls	r2, r4, #1
 80026a4:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 80026a6:	19bb      	adds	r3, r7, r6
 80026a8:	195b      	adds	r3, r3, r5
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	b25b      	sxtb	r3, r3
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	3301      	adds	r3, #1
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	19bb      	adds	r3, r7, r6
 80026b6:	195b      	adds	r3, r3, r5
 80026b8:	701a      	strb	r2, [r3, #0]
 80026ba:	231f      	movs	r3, #31
 80026bc:	2218      	movs	r2, #24
 80026be:	4694      	mov	ip, r2
 80026c0:	44bc      	add	ip, r7
 80026c2:	4463      	add	r3, ip
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	b25b      	sxtb	r3, r3
 80026c8:	4aa4      	ldr	r2, [pc, #656]	; (800295c <drawChar+0x68c>)
 80026ca:	7812      	ldrb	r2, [r2, #0]
 80026cc:	4293      	cmp	r3, r2
 80026ce:	db8f      	blt.n	80025f0 <drawChar+0x320>
					for (int8_t k = 0; k < textSize; k++) {
 80026d0:	2120      	movs	r1, #32
 80026d2:	2018      	movs	r0, #24
 80026d4:	183b      	adds	r3, r7, r0
 80026d6:	185b      	adds	r3, r3, r1
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	b25b      	sxtb	r3, r3
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	3301      	adds	r3, #1
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	183b      	adds	r3, r7, r0
 80026e4:	185b      	adds	r3, r3, r1
 80026e6:	701a      	strb	r2, [r3, #0]
 80026e8:	2320      	movs	r3, #32
 80026ea:	2218      	movs	r2, #24
 80026ec:	4694      	mov	ip, r2
 80026ee:	44bc      	add	ip, r7
 80026f0:	4463      	add	r3, ip
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	b25b      	sxtb	r3, r3
 80026f6:	4a99      	ldr	r2, [pc, #612]	; (800295c <drawChar+0x68c>)
 80026f8:	7812      	ldrb	r2, [r2, #0]
 80026fa:	4293      	cmp	r3, r2
 80026fc:	da00      	bge.n	8002700 <drawChar+0x430>
 80026fe:	e757      	b.n	80025b0 <drawChar+0x2e0>
		for (int8_t j=0; j<8; j++, line >>= 1) {
 8002700:	2123      	movs	r1, #35	; 0x23
 8002702:	2018      	movs	r0, #24
 8002704:	183b      	adds	r3, r7, r0
 8002706:	185b      	adds	r3, r3, r1
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	b25b      	sxtb	r3, r3
 800270c:	b2db      	uxtb	r3, r3
 800270e:	3301      	adds	r3, #1
 8002710:	b2da      	uxtb	r2, r3
 8002712:	183b      	adds	r3, r7, r0
 8002714:	185b      	adds	r3, r3, r1
 8002716:	701a      	strb	r2, [r3, #0]
 8002718:	2224      	movs	r2, #36	; 0x24
 800271a:	183b      	adds	r3, r7, r0
 800271c:	189b      	adds	r3, r3, r2
 800271e:	2118      	movs	r1, #24
 8002720:	468c      	mov	ip, r1
 8002722:	44bc      	add	ip, r7
 8002724:	4462      	add	r2, ip
 8002726:	7812      	ldrb	r2, [r2, #0]
 8002728:	0852      	lsrs	r2, r2, #1
 800272a:	701a      	strb	r2, [r3, #0]
 800272c:	2323      	movs	r3, #35	; 0x23
 800272e:	2218      	movs	r2, #24
 8002730:	4694      	mov	ip, r2
 8002732:	44bc      	add	ip, r7
 8002734:	4463      	add	r3, ip
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	b25b      	sxtb	r3, r3
 800273a:	2b07      	cmp	r3, #7
 800273c:	dc00      	bgt.n	8002740 <drawChar+0x470>
 800273e:	e634      	b.n	80023aa <drawChar+0xda>
	for (int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 8002740:	2125      	movs	r1, #37	; 0x25
 8002742:	2018      	movs	r0, #24
 8002744:	183b      	adds	r3, r7, r0
 8002746:	185b      	adds	r3, r3, r1
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	b25b      	sxtb	r3, r3
 800274c:	b2db      	uxtb	r3, r3
 800274e:	3301      	adds	r3, #1
 8002750:	b2da      	uxtb	r2, r3
 8002752:	183b      	adds	r3, r7, r0
 8002754:	185b      	adds	r3, r3, r1
 8002756:	701a      	strb	r2, [r3, #0]
 8002758:	2325      	movs	r3, #37	; 0x25
 800275a:	2218      	movs	r2, #24
 800275c:	4694      	mov	ip, r2
 800275e:	44bc      	add	ip, r7
 8002760:	4463      	add	r3, ip
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	b25b      	sxtb	r3, r3
 8002766:	2b04      	cmp	r3, #4
 8002768:	dc00      	bgt.n	800276c <drawChar+0x49c>
 800276a:	e600      	b.n	800236e <drawChar+0x9e>
				}
			}
		}
	}

	if (bg != textColor) { // If opaque, draw vertical line for last column
 800276c:	4b7c      	ldr	r3, [pc, #496]	; (8002960 <drawChar+0x690>)
 800276e:	881a      	ldrh	r2, [r3, #0]
 8002770:	4b7c      	ldr	r3, [pc, #496]	; (8002964 <drawChar+0x694>)
 8002772:	881b      	ldrh	r3, [r3, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	d100      	bne.n	800277a <drawChar+0x4aa>
 8002778:	e0ca      	b.n	8002910 <drawChar+0x640>
		for (int8_t j = 0; j < 8; j++) {
 800277a:	231e      	movs	r3, #30
 800277c:	2218      	movs	r2, #24
 800277e:	4694      	mov	ip, r2
 8002780:	44bc      	add	ip, r7
 8002782:	4463      	add	r3, ip
 8002784:	2200      	movs	r2, #0
 8002786:	701a      	strb	r2, [r3, #0]
 8002788:	e0b8      	b.n	80028fc <drawChar+0x62c>
			if (textSize == 1) {
 800278a:	4b74      	ldr	r3, [pc, #464]	; (800295c <drawChar+0x68c>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d116      	bne.n	80027c0 <drawChar+0x4f0>
				buffer[5+j*6] = colorFixer(bg);
 8002792:	4b73      	ldr	r3, [pc, #460]	; (8002960 <drawChar+0x690>)
 8002794:	8819      	ldrh	r1, [r3, #0]
 8002796:	231e      	movs	r3, #30
 8002798:	2218      	movs	r2, #24
 800279a:	4694      	mov	ip, r2
 800279c:	44bc      	add	ip, r7
 800279e:	4463      	add	r3, ip
 80027a0:	2200      	movs	r2, #0
 80027a2:	569a      	ldrsb	r2, [r3, r2]
 80027a4:	0013      	movs	r3, r2
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	189b      	adds	r3, r3, r2
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	1d5c      	adds	r4, r3, #5
 80027ae:	0008      	movs	r0, r1
 80027b0:	f7ff f972 	bl	8001a98 <colorFixer>
 80027b4:	0003      	movs	r3, r0
 80027b6:	0019      	movs	r1, r3
 80027b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ba:	0062      	lsls	r2, r4, #1
 80027bc:	52d1      	strh	r1, [r2, r3]
 80027be:	e091      	b.n	80028e4 <drawChar+0x614>
			}
			else {
				for (int8_t k = 0; k < textSize; k++) {
 80027c0:	231d      	movs	r3, #29
 80027c2:	2218      	movs	r2, #24
 80027c4:	4694      	mov	ip, r2
 80027c6:	44bc      	add	ip, r7
 80027c8:	4463      	add	r3, ip
 80027ca:	2200      	movs	r2, #0
 80027cc:	701a      	strb	r2, [r3, #0]
 80027ce:	e07d      	b.n	80028cc <drawChar+0x5fc>
					for (int8_t l = 0; l < textSize; l++) {
 80027d0:	231c      	movs	r3, #28
 80027d2:	2218      	movs	r2, #24
 80027d4:	4694      	mov	ip, r2
 80027d6:	44bc      	add	ip, r7
 80027d8:	4463      	add	r3, ip
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]
 80027de:	e05e      	b.n	800289e <drawChar+0x5ce>
						address = (textSize*textSize*j*6)+(5*textSize);
 80027e0:	4b5e      	ldr	r3, [pc, #376]	; (800295c <drawChar+0x68c>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	4a5d      	ldr	r2, [pc, #372]	; (800295c <drawChar+0x68c>)
 80027e8:	7812      	ldrb	r2, [r2, #0]
 80027ea:	b292      	uxth	r2, r2
 80027ec:	4353      	muls	r3, r2
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	221e      	movs	r2, #30
 80027f2:	2118      	movs	r1, #24
 80027f4:	468c      	mov	ip, r1
 80027f6:	44bc      	add	ip, r7
 80027f8:	4462      	add	r2, ip
 80027fa:	7812      	ldrb	r2, [r2, #0]
 80027fc:	b252      	sxtb	r2, r2
 80027fe:	b292      	uxth	r2, r2
 8002800:	4353      	muls	r3, r2
 8002802:	b29b      	uxth	r3, r3
 8002804:	1c1a      	adds	r2, r3, #0
 8002806:	1c13      	adds	r3, r2, #0
 8002808:	18db      	adds	r3, r3, r3
 800280a:	189b      	adds	r3, r3, r2
 800280c:	18db      	adds	r3, r3, r3
 800280e:	b29a      	uxth	r2, r3
 8002810:	4b52      	ldr	r3, [pc, #328]	; (800295c <drawChar+0x68c>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	b29b      	uxth	r3, r3
 8002816:	1c19      	adds	r1, r3, #0
 8002818:	0089      	lsls	r1, r1, #2
 800281a:	18cb      	adds	r3, r1, r3
 800281c:	b29b      	uxth	r3, r3
 800281e:	18d3      	adds	r3, r2, r3
 8002820:	b29a      	uxth	r2, r3
 8002822:	210e      	movs	r1, #14
 8002824:	2018      	movs	r0, #24
 8002826:	183b      	adds	r3, r7, r0
 8002828:	185b      	adds	r3, r3, r1
 800282a:	801a      	strh	r2, [r3, #0]
						address += rowOffset*k+l;
 800282c:	231d      	movs	r3, #29
 800282e:	2218      	movs	r2, #24
 8002830:	4694      	mov	ip, r2
 8002832:	44bc      	add	ip, r7
 8002834:	4463      	add	r3, ip
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	b25b      	sxtb	r3, r3
 800283a:	b29b      	uxth	r3, r3
 800283c:	2226      	movs	r2, #38	; 0x26
 800283e:	2418      	movs	r4, #24
 8002840:	46a4      	mov	ip, r4
 8002842:	44bc      	add	ip, r7
 8002844:	4462      	add	r2, ip
 8002846:	8812      	ldrh	r2, [r2, #0]
 8002848:	4353      	muls	r3, r2
 800284a:	b29a      	uxth	r2, r3
 800284c:	251c      	movs	r5, #28
 800284e:	183b      	adds	r3, r7, r0
 8002850:	195b      	adds	r3, r3, r5
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	b25b      	sxtb	r3, r3
 8002856:	b29b      	uxth	r3, r3
 8002858:	18d3      	adds	r3, r2, r3
 800285a:	b29a      	uxth	r2, r3
 800285c:	183b      	adds	r3, r7, r0
 800285e:	185b      	adds	r3, r3, r1
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	18d3      	adds	r3, r2, r3
 8002864:	b29a      	uxth	r2, r3
 8002866:	183b      	adds	r3, r7, r0
 8002868:	185b      	adds	r3, r3, r1
 800286a:	801a      	strh	r2, [r3, #0]
						buffer[address] = colorFixer(bg);
 800286c:	4b3c      	ldr	r3, [pc, #240]	; (8002960 <drawChar+0x690>)
 800286e:	881a      	ldrh	r2, [r3, #0]
 8002870:	0006      	movs	r6, r0
 8002872:	183b      	adds	r3, r7, r0
 8002874:	185b      	adds	r3, r3, r1
 8002876:	2400      	movs	r4, #0
 8002878:	5f1c      	ldrsh	r4, [r3, r4]
 800287a:	0010      	movs	r0, r2
 800287c:	f7ff f90c 	bl	8001a98 <colorFixer>
 8002880:	0003      	movs	r3, r0
 8002882:	0019      	movs	r1, r3
 8002884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002886:	0062      	lsls	r2, r4, #1
 8002888:	52d1      	strh	r1, [r2, r3]
					for (int8_t l = 0; l < textSize; l++) {
 800288a:	19bb      	adds	r3, r7, r6
 800288c:	195b      	adds	r3, r3, r5
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	b25b      	sxtb	r3, r3
 8002892:	b2db      	uxtb	r3, r3
 8002894:	3301      	adds	r3, #1
 8002896:	b2da      	uxtb	r2, r3
 8002898:	19bb      	adds	r3, r7, r6
 800289a:	195b      	adds	r3, r3, r5
 800289c:	701a      	strb	r2, [r3, #0]
 800289e:	231c      	movs	r3, #28
 80028a0:	2218      	movs	r2, #24
 80028a2:	4694      	mov	ip, r2
 80028a4:	44bc      	add	ip, r7
 80028a6:	4463      	add	r3, ip
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	b25b      	sxtb	r3, r3
 80028ac:	4a2b      	ldr	r2, [pc, #172]	; (800295c <drawChar+0x68c>)
 80028ae:	7812      	ldrb	r2, [r2, #0]
 80028b0:	4293      	cmp	r3, r2
 80028b2:	db95      	blt.n	80027e0 <drawChar+0x510>
				for (int8_t k = 0; k < textSize; k++) {
 80028b4:	211d      	movs	r1, #29
 80028b6:	2018      	movs	r0, #24
 80028b8:	183b      	adds	r3, r7, r0
 80028ba:	185b      	adds	r3, r3, r1
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	b25b      	sxtb	r3, r3
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	3301      	adds	r3, #1
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	183b      	adds	r3, r7, r0
 80028c8:	185b      	adds	r3, r3, r1
 80028ca:	701a      	strb	r2, [r3, #0]
 80028cc:	231d      	movs	r3, #29
 80028ce:	2218      	movs	r2, #24
 80028d0:	4694      	mov	ip, r2
 80028d2:	44bc      	add	ip, r7
 80028d4:	4463      	add	r3, ip
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	b25b      	sxtb	r3, r3
 80028da:	4a20      	ldr	r2, [pc, #128]	; (800295c <drawChar+0x68c>)
 80028dc:	7812      	ldrb	r2, [r2, #0]
 80028de:	4293      	cmp	r3, r2
 80028e0:	da00      	bge.n	80028e4 <drawChar+0x614>
 80028e2:	e775      	b.n	80027d0 <drawChar+0x500>
		for (int8_t j = 0; j < 8; j++) {
 80028e4:	211e      	movs	r1, #30
 80028e6:	2018      	movs	r0, #24
 80028e8:	183b      	adds	r3, r7, r0
 80028ea:	185b      	adds	r3, r3, r1
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	b25b      	sxtb	r3, r3
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	3301      	adds	r3, #1
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	183b      	adds	r3, r7, r0
 80028f8:	185b      	adds	r3, r3, r1
 80028fa:	701a      	strb	r2, [r3, #0]
 80028fc:	231e      	movs	r3, #30
 80028fe:	2218      	movs	r2, #24
 8002900:	4694      	mov	ip, r2
 8002902:	44bc      	add	ip, r7
 8002904:	4463      	add	r3, ip
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	b25b      	sxtb	r3, r3
 800290a:	2b07      	cmp	r3, #7
 800290c:	dc00      	bgt.n	8002910 <drawChar+0x640>
 800290e:	e73c      	b.n	800278a <drawChar+0x4ba>
			}
		}
//		else fillRect(cursorX+5*textSize, cursorY, textSize, 8*textSize, bg, hspi);
	}

	drawBuffer(cursorX, cursorY, 6*textSize, 8*textSize, buffer, bufferSize, hspi);
 8002910:	4b15      	ldr	r3, [pc, #84]	; (8002968 <drawChar+0x698>)
 8002912:	7818      	ldrb	r0, [r3, #0]
 8002914:	4b15      	ldr	r3, [pc, #84]	; (800296c <drawChar+0x69c>)
 8002916:	7819      	ldrb	r1, [r3, #0]
 8002918:	4b10      	ldr	r3, [pc, #64]	; (800295c <drawChar+0x68c>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	1c1a      	adds	r2, r3, #0
 800291e:	1c13      	adds	r3, r2, #0
 8002920:	18db      	adds	r3, r3, r3
 8002922:	189b      	adds	r3, r3, r2
 8002924:	18db      	adds	r3, r3, r3
 8002926:	b2dc      	uxtb	r4, r3
 8002928:	4b0c      	ldr	r3, [pc, #48]	; (800295c <drawChar+0x68c>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	b2dd      	uxtb	r5, r3
 8002930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	9202      	str	r2, [sp, #8]
 8002936:	221a      	movs	r2, #26
 8002938:	2618      	movs	r6, #24
 800293a:	46b4      	mov	ip, r6
 800293c:	44bc      	add	ip, r7
 800293e:	4462      	add	r2, ip
 8002940:	8812      	ldrh	r2, [r2, #0]
 8002942:	9201      	str	r2, [sp, #4]
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	002b      	movs	r3, r5
 8002948:	0022      	movs	r2, r4
 800294a:	f7ff fa16 	bl	8001d7a <drawBuffer>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	469d      	mov	sp, r3
//	setCursor(cursorX+6, cursorY);
}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	46bd      	mov	sp, r7
 8002956:	b011      	add	sp, #68	; 0x44
 8002958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800295a:	46c0      	nop			; (mov r8, r8)
 800295c:	200000ee 	.word	0x200000ee
 8002960:	200000f2 	.word	0x200000f2
 8002964:	200000f0 	.word	0x200000f0
 8002968:	200000ec 	.word	0x200000ec
 800296c:	200000ed 	.word	0x200000ed

08002970 <drawText>:

// this function is slow, and you can definitely see a scrolling speed thing going on
// how to remove this so it prints near instantly?
// maybe not needed if all we're doing is printing time (very few characters)
void drawText(const char *str, SPI_HandleTypeDef *hspi) {
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
	// add text wrap
	for (int i = 0; str[i] != '\0'; i++) {
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	e01d      	b.n	80029bc <drawText+0x4c>
		drawChar(str[i], hspi);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	18d3      	adds	r3, r2, r3
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	0011      	movs	r1, r2
 800298c:	0018      	movs	r0, r3
 800298e:	f7ff fc9f 	bl	80022d0 <drawChar>
		setCursor(cursorX+textSize*6, cursorY);
 8002992:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <drawText+0x60>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	1c1a      	adds	r2, r3, #0
 8002998:	1c13      	adds	r3, r2, #0
 800299a:	18db      	adds	r3, r3, r3
 800299c:	189b      	adds	r3, r3, r2
 800299e:	18db      	adds	r3, r3, r3
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <drawText+0x64>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	18d3      	adds	r3, r2, r3
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <drawText+0x68>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	0019      	movs	r1, r3
 80029b0:	0010      	movs	r0, r2
 80029b2:	f000 f86b 	bl	8002a8c <setCursor>
	for (int i = 0; str[i] != '\0'; i++) {
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	3301      	adds	r3, #1
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	18d3      	adds	r3, r2, r3
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1db      	bne.n	8002980 <drawText+0x10>
	}
}
 80029c8:	46c0      	nop			; (mov r8, r8)
 80029ca:	46bd      	mov	sp, r7
 80029cc:	b004      	add	sp, #16
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	200000ee 	.word	0x200000ee
 80029d4:	200000ec 	.word	0x200000ec
 80029d8:	200000ed 	.word	0x200000ed

080029dc <drawTextAt>:

void drawTextAt(uint8_t x, uint8_t y, const char *str, SPI_HandleTypeDef *hspi) {
 80029dc:	b590      	push	{r4, r7, lr}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60ba      	str	r2, [r7, #8]
 80029e4:	607b      	str	r3, [r7, #4]
 80029e6:	240f      	movs	r4, #15
 80029e8:	193b      	adds	r3, r7, r4
 80029ea:	1c02      	adds	r2, r0, #0
 80029ec:	701a      	strb	r2, [r3, #0]
 80029ee:	200e      	movs	r0, #14
 80029f0:	183b      	adds	r3, r7, r0
 80029f2:	1c0a      	adds	r2, r1, #0
 80029f4:	701a      	strb	r2, [r3, #0]
	// add text wrap
	int i = 0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]
	setCursor(x,y);
 80029fa:	183b      	adds	r3, r7, r0
 80029fc:	781a      	ldrb	r2, [r3, #0]
 80029fe:	193b      	adds	r3, r7, r4
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	0011      	movs	r1, r2
 8002a04:	0018      	movs	r0, r3
 8002a06:	f000 f841 	bl	8002a8c <setCursor>
	for (i = 0; str[i] != '\0'; i++) {
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]
 8002a0e:	e01d      	b.n	8002a4c <drawTextAt+0x70>
		drawChar(str[i], hspi);
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	18d3      	adds	r3, r2, r3
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	0011      	movs	r1, r2
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f7ff fc57 	bl	80022d0 <drawChar>
		setCursor(cursorX+textSize*6, cursorY);
 8002a22:	4b0f      	ldr	r3, [pc, #60]	; (8002a60 <drawTextAt+0x84>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	1c1a      	adds	r2, r3, #0
 8002a28:	1c13      	adds	r3, r2, #0
 8002a2a:	18db      	adds	r3, r3, r3
 8002a2c:	189b      	adds	r3, r3, r2
 8002a2e:	18db      	adds	r3, r3, r3
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <drawTextAt+0x88>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	18d3      	adds	r3, r2, r3
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <drawTextAt+0x8c>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	0019      	movs	r1, r3
 8002a40:	0010      	movs	r0, r2
 8002a42:	f000 f823 	bl	8002a8c <setCursor>
	for (i = 0; str[i] != '\0'; i++) {
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	18d3      	adds	r3, r2, r3
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1db      	bne.n	8002a10 <drawTextAt+0x34>
	}
//	setCursor(x+i*textSize*6, y);
}
 8002a58:	46c0      	nop			; (mov r8, r8)
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	b007      	add	sp, #28
 8002a5e:	bd90      	pop	{r4, r7, pc}
 8002a60:	200000ee 	.word	0x200000ee
 8002a64:	200000ec 	.word	0x200000ec
 8002a68:	200000ed 	.word	0x200000ed

08002a6c <setBackgroundColor>:

void setBackgroundColor(uint16_t color) {bg = color;}
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	0002      	movs	r2, r0
 8002a74:	1dbb      	adds	r3, r7, #6
 8002a76:	801a      	strh	r2, [r3, #0]
 8002a78:	4b03      	ldr	r3, [pc, #12]	; (8002a88 <setBackgroundColor+0x1c>)
 8002a7a:	1dba      	adds	r2, r7, #6
 8002a7c:	8812      	ldrh	r2, [r2, #0]
 8002a7e:	801a      	strh	r2, [r3, #0]
 8002a80:	46c0      	nop			; (mov r8, r8)
 8002a82:	46bd      	mov	sp, r7
 8002a84:	b002      	add	sp, #8
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	200000f2 	.word	0x200000f2

08002a8c <setCursor>:

void setCursor(uint8_t x, uint8_t y) {
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	0002      	movs	r2, r0
 8002a94:	1dfb      	adds	r3, r7, #7
 8002a96:	701a      	strb	r2, [r3, #0]
 8002a98:	1dbb      	adds	r3, r7, #6
 8002a9a:	1c0a      	adds	r2, r1, #0
 8002a9c:	701a      	strb	r2, [r3, #0]
	cursorX = x;
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <setCursor+0x2c>)
 8002aa0:	1dfa      	adds	r2, r7, #7
 8002aa2:	7812      	ldrb	r2, [r2, #0]
 8002aa4:	701a      	strb	r2, [r3, #0]
	cursorY = y;
 8002aa6:	4b05      	ldr	r3, [pc, #20]	; (8002abc <setCursor+0x30>)
 8002aa8:	1dba      	adds	r2, r7, #6
 8002aaa:	7812      	ldrb	r2, [r2, #0]
 8002aac:	701a      	strb	r2, [r3, #0]
}
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	b002      	add	sp, #8
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	200000ec 	.word	0x200000ec
 8002abc:	200000ed 	.word	0x200000ed

08002ac0 <setTextSize>:

void setTextSize(uint8_t size) {textSize = size;}
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	0002      	movs	r2, r0
 8002ac8:	1dfb      	adds	r3, r7, #7
 8002aca:	701a      	strb	r2, [r3, #0]
 8002acc:	4b03      	ldr	r3, [pc, #12]	; (8002adc <setTextSize+0x1c>)
 8002ace:	1dfa      	adds	r2, r7, #7
 8002ad0:	7812      	ldrb	r2, [r2, #0]
 8002ad2:	701a      	strb	r2, [r3, #0]
 8002ad4:	46c0      	nop			; (mov r8, r8)
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b002      	add	sp, #8
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	200000ee 	.word	0x200000ee

08002ae0 <setTextColor>:

void setTextColor(uint16_t color) {textColor = color;}
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	0002      	movs	r2, r0
 8002ae8:	1dbb      	adds	r3, r7, #6
 8002aea:	801a      	strh	r2, [r3, #0]
 8002aec:	4b03      	ldr	r3, [pc, #12]	; (8002afc <setTextColor+0x1c>)
 8002aee:	1dba      	adds	r2, r7, #6
 8002af0:	8812      	ldrh	r2, [r2, #0]
 8002af2:	801a      	strh	r2, [r3, #0]
 8002af4:	46c0      	nop			; (mov r8, r8)
 8002af6:	46bd      	mov	sp, r7
 8002af8:	b002      	add	sp, #8
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	200000f0 	.word	0x200000f0

08002b00 <clearScreen>:

void clearScreen(uint16_t backgroundColor, SPI_HandleTypeDef *hspi) {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	0002      	movs	r2, r0
 8002b08:	6039      	str	r1, [r7, #0]
 8002b0a:	1dbb      	adds	r3, r7, #6
 8002b0c:	801a      	strh	r2, [r3, #0]
	bg = backgroundColor;
 8002b0e:	4b07      	ldr	r3, [pc, #28]	; (8002b2c <clearScreen+0x2c>)
 8002b10:	1dba      	adds	r2, r7, #6
 8002b12:	8812      	ldrh	r2, [r2, #0]
 8002b14:	801a      	strh	r2, [r3, #0]
	fillScreen(backgroundColor, hspi);
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	1dbb      	adds	r3, r7, #6
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	0011      	movs	r1, r2
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f7ff fa01 	bl	8001f26 <fillScreen>
}
 8002b24:	46c0      	nop			; (mov r8, r8)
 8002b26:	46bd      	mov	sp, r7
 8002b28:	b002      	add	sp, #8
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	200000f2 	.word	0x200000f2

08002b30 <batteryManager>:
static const float batteryCapacity[];
static uint16_t batteryCapacityArraySize = 179;

// spi used to turn display on/off only
// also for drawing battery
void batteryManager(ADC_HandleTypeDef *hadc, SPI_HandleTypeDef *hspi) {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
	if (canSampleBattery) {
 8002b3a:	4b24      	ldr	r3, [pc, #144]	; (8002bcc <batteryManager+0x9c>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d03f      	beq.n	8002bc4 <batteryManager+0x94>
		canSampleBattery = 0;
 8002b44:	4b21      	ldr	r3, [pc, #132]	; (8002bcc <batteryManager+0x9c>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	701a      	strb	r2, [r3, #0]

		battPercentage = getBatteryPercentage(hadc);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f000 f845 	bl	8002bdc <getBatteryPercentage>
 8002b52:	0003      	movs	r3, r0
 8002b54:	001a      	movs	r2, r3
 8002b56:	4b1e      	ldr	r3, [pc, #120]	; (8002bd0 <batteryManager+0xa0>)
 8002b58:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 8002b5a:	4b1e      	ldr	r3, [pc, #120]	; (8002bd4 <batteryManager+0xa4>)
 8002b5c:	2108      	movs	r1, #8
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f004 fd86 	bl	8007670 <HAL_GPIO_TogglePin>
		// start really shutting down & set flag
		// disable power supply (setting enable pin to 0)
		if (battPercentage == 0) {
 8002b64:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <batteryManager+0xa0>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d024      	beq.n	8002bb6 <batteryManager+0x86>
//			turnDisplayOff(hspi);
//			HAL_GPIO_WritePin(POWER_SUPPLY_ENABLE_PORT, POWER_SUPPLY_ENABLE_PIN, GPIO_PIN_RESET);
		}
		else if (battPercentage <= 5) {
 8002b6c:	4b18      	ldr	r3, [pc, #96]	; (8002bd0 <batteryManager+0xa0>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b05      	cmp	r3, #5
 8002b72:	d803      	bhi.n	8002b7c <batteryManager+0x4c>
			// start turning off most hardware
//			turnDisplayOff(hspi);
			bState = batteryReallyLow;
 8002b74:	4b18      	ldr	r3, [pc, #96]	; (8002bd8 <batteryManager+0xa8>)
 8002b76:	2202      	movs	r2, #2
 8002b78:	701a      	strb	r2, [r3, #0]
 8002b7a:	e01c      	b.n	8002bb6 <batteryManager+0x86>
		}
		// start low-power mode and set flag
		else if (battPercentage <= 15) {
 8002b7c:	4b14      	ldr	r3, [pc, #80]	; (8002bd0 <batteryManager+0xa0>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b0f      	cmp	r3, #15
 8002b82:	d803      	bhi.n	8002b8c <batteryManager+0x5c>
			// start turning off some hardware
			bState = batteryLow;
 8002b84:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <batteryManager+0xa8>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	701a      	strb	r2, [r3, #0]
 8002b8a:	e014      	b.n	8002bb6 <batteryManager+0x86>
		}
		// set hardware to use power normally
		else {
			// do nothing? maybe might need to check previous state and make sure everything is normal
			if (bState == batteryLow || bState == batteryReallyLow) {
 8002b8c:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <batteryManager+0xa8>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d003      	beq.n	8002b9c <batteryManager+0x6c>
 8002b94:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <batteryManager+0xa8>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d103      	bne.n	8002ba4 <batteryManager+0x74>
				turnDisplayOn(hspi);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f7fe ff6c 	bl	8001a7c <turnDisplayOn>
			}
			HAL_GPIO_WritePin(POWER_SUPPLY_ENABLE_PORT, POWER_SUPPLY_ENABLE_PIN, GPIO_PIN_SET);
 8002ba4:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <batteryManager+0xa4>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	2110      	movs	r1, #16
 8002baa:	0018      	movs	r0, r3
 8002bac:	f004 fd43 	bl	8007636 <HAL_GPIO_WritePin>
			bState = batteryNormal;
 8002bb0:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <batteryManager+0xa8>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	701a      	strb	r2, [r3, #0]
		}

		drawBattery(battPercentage, hspi);
 8002bb6:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <batteryManager+0xa0>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	0011      	movs	r1, r2
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f003 f998 	bl	8005ef4 <drawBattery>
	}
}
 8002bc4:	46c0      	nop			; (mov r8, r8)
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b002      	add	sp, #8
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20000141 	.word	0x20000141
 8002bd0:	20000140 	.word	0x20000140
 8002bd4:	50000800 	.word	0x50000800
 8002bd8:	200000f4 	.word	0x200000f4

08002bdc <getBatteryPercentage>:

// should return a number from 0-100
uint8_t getBatteryPercentage(ADC_HandleTypeDef *hadc) {
 8002bdc:	b5b0      	push	{r4, r5, r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
	float averageVoltage, temp;
	uint8_t index;

	// enable adc voltage divider for measurements, disable after
	HAL_GPIO_WritePin(ADC_DIVIDER_PORT, ADC_DIVIDER_PIN, GPIO_PIN_SET);
 8002be4:	4b3c      	ldr	r3, [pc, #240]	; (8002cd8 <getBatteryPercentage+0xfc>)
 8002be6:	2201      	movs	r2, #1
 8002be8:	2120      	movs	r1, #32
 8002bea:	0018      	movs	r0, r3
 8002bec:	f004 fd23 	bl	8007636 <HAL_GPIO_WritePin>
	HAL_ADC_Start_IT(hadc);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f003 feaa 	bl	800694c <HAL_ADC_Start_IT>
	HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	425a      	negs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	0011      	movs	r1, r2
 8002c00:	0018      	movs	r0, r3
 8002c02:	f003 fe0d 	bl	8006820 <HAL_ADC_PollForConversion>
	averageVoltage = 3.3*HAL_ADC_GetValue(hadc)/(0xFFF);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f003 ff11 	bl	8006a30 <HAL_ADC_GetValue>
 8002c0e:	0003      	movs	r3, r0
 8002c10:	0018      	movs	r0, r3
 8002c12:	f7fe fca1 	bl	8001558 <__aeabi_ui2d>
 8002c16:	4a31      	ldr	r2, [pc, #196]	; (8002cdc <getBatteryPercentage+0x100>)
 8002c18:	4b31      	ldr	r3, [pc, #196]	; (8002ce0 <getBatteryPercentage+0x104>)
 8002c1a:	f7fe f9f1 	bl	8001000 <__aeabi_dmul>
 8002c1e:	0003      	movs	r3, r0
 8002c20:	000c      	movs	r4, r1
 8002c22:	0018      	movs	r0, r3
 8002c24:	0021      	movs	r1, r4
 8002c26:	2200      	movs	r2, #0
 8002c28:	4b2e      	ldr	r3, [pc, #184]	; (8002ce4 <getBatteryPercentage+0x108>)
 8002c2a:	f7fd fee7 	bl	80009fc <__aeabi_ddiv>
 8002c2e:	0003      	movs	r3, r0
 8002c30:	000c      	movs	r4, r1
 8002c32:	0018      	movs	r0, r3
 8002c34:	0021      	movs	r1, r4
 8002c36:	f7fe fcc1 	bl	80015bc <__aeabi_d2f>
 8002c3a:	1c03      	adds	r3, r0, #0
 8002c3c:	617b      	str	r3, [r7, #20]
	HAL_ADC_Stop(hadc);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	0018      	movs	r0, r3
 8002c42:	f003 fdad 	bl	80067a0 <HAL_ADC_Stop>
	HAL_GPIO_WritePin(ADC_DIVIDER_PORT, ADC_DIVIDER_PIN, GPIO_PIN_RESET);
 8002c46:	4b24      	ldr	r3, [pc, #144]	; (8002cd8 <getBatteryPercentage+0xfc>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	2120      	movs	r1, #32
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f004 fcf2 	bl	8007636 <HAL_GPIO_WritePin>

	// trying to look only for 3.9-3.4. anything above 3.7 is 100%, anything below 3.4 is 0%
	// scaled voltages at 3.0642-2.6714
	// indices at 6-151. have to scale and flip to go from 100-0 since 6->100%
	index = search(averageVoltage);
 8002c52:	2513      	movs	r5, #19
 8002c54:	197c      	adds	r4, r7, r5
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	1c18      	adds	r0, r3, #0
 8002c5a:	f000 f84b 	bl	8002cf4 <search>
 8002c5e:	0003      	movs	r3, r0
 8002c60:	7023      	strb	r3, [r4, #0]
	if (index <= 6) return 100;
 8002c62:	197b      	adds	r3, r7, r5
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b06      	cmp	r3, #6
 8002c68:	d801      	bhi.n	8002c6e <getBatteryPercentage+0x92>
 8002c6a:	2364      	movs	r3, #100	; 0x64
 8002c6c:	e030      	b.n	8002cd0 <getBatteryPercentage+0xf4>
	else if (index >= 135) return 0;		// adjusting numbers because tests want to call 2.65V non-zero
 8002c6e:	2313      	movs	r3, #19
 8002c70:	18fb      	adds	r3, r7, r3
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b86      	cmp	r3, #134	; 0x86
 8002c76:	d901      	bls.n	8002c7c <getBatteryPercentage+0xa0>
 8002c78:	2300      	movs	r3, #0
 8002c7a:	e029      	b.n	8002cd0 <getBatteryPercentage+0xf4>
	else {
		index -= 6;
 8002c7c:	2113      	movs	r1, #19
 8002c7e:	187b      	adds	r3, r7, r1
 8002c80:	187a      	adds	r2, r7, r1
 8002c82:	7812      	ldrb	r2, [r2, #0]
 8002c84:	3a06      	subs	r2, #6
 8002c86:	701a      	strb	r2, [r3, #0]
		temp = index*100.0/129;
 8002c88:	187b      	adds	r3, r7, r1
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f7fe fc29 	bl	80014e4 <__aeabi_i2d>
 8002c92:	2200      	movs	r2, #0
 8002c94:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <getBatteryPercentage+0x10c>)
 8002c96:	f7fe f9b3 	bl	8001000 <__aeabi_dmul>
 8002c9a:	0003      	movs	r3, r0
 8002c9c:	000c      	movs	r4, r1
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	0021      	movs	r1, r4
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	4b11      	ldr	r3, [pc, #68]	; (8002cec <getBatteryPercentage+0x110>)
 8002ca6:	f7fd fea9 	bl	80009fc <__aeabi_ddiv>
 8002caa:	0003      	movs	r3, r0
 8002cac:	000c      	movs	r4, r1
 8002cae:	0018      	movs	r0, r3
 8002cb0:	0021      	movs	r1, r4
 8002cb2:	f7fe fc83 	bl	80015bc <__aeabi_d2f>
 8002cb6:	1c03      	adds	r3, r0, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
		temp = 100-temp;
 8002cba:	68f9      	ldr	r1, [r7, #12]
 8002cbc:	480c      	ldr	r0, [pc, #48]	; (8002cf0 <getBatteryPercentage+0x114>)
 8002cbe:	f7fd fcb9 	bl	8000634 <__aeabi_fsub>
 8002cc2:	1c03      	adds	r3, r0, #0
 8002cc4:	60fb      	str	r3, [r7, #12]
		return temp;
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f7fd fbd6 	bl	8000478 <__aeabi_f2uiz>
 8002ccc:	0003      	movs	r3, r0
 8002cce:	b2db      	uxtb	r3, r3
	}
}
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	b006      	add	sp, #24
 8002cd6:	bdb0      	pop	{r4, r5, r7, pc}
 8002cd8:	50000800 	.word	0x50000800
 8002cdc:	66666666 	.word	0x66666666
 8002ce0:	400a6666 	.word	0x400a6666
 8002ce4:	40affe00 	.word	0x40affe00
 8002ce8:	40590000 	.word	0x40590000
 8002cec:	40602000 	.word	0x40602000
 8002cf0:	42c80000 	.word	0x42c80000

08002cf4 <search>:

// should return index in array
uint8_t search(float val) {
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
	// write binary search for efficiency?
	// size not related to 2. size is not that big. maybe in the future
	uint8_t i;
	for (i = 0; i < batteryCapacityArraySize; i++) {
 8002cfc:	230f      	movs	r3, #15
 8002cfe:	18fb      	adds	r3, r7, r3
 8002d00:	2200      	movs	r2, #0
 8002d02:	701a      	strb	r2, [r3, #0]
 8002d04:	e015      	b.n	8002d32 <search+0x3e>
		if (val > batteryCapacity[i]) return i;
 8002d06:	230f      	movs	r3, #15
 8002d08:	18fb      	adds	r3, r7, r3
 8002d0a:	781a      	ldrb	r2, [r3, #0]
 8002d0c:	4b10      	ldr	r3, [pc, #64]	; (8002d50 <search+0x5c>)
 8002d0e:	0092      	lsls	r2, r2, #2
 8002d10:	58d3      	ldr	r3, [r2, r3]
 8002d12:	1c19      	adds	r1, r3, #0
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f7fd fb9b 	bl	8000450 <__aeabi_fcmpgt>
 8002d1a:	1e03      	subs	r3, r0, #0
 8002d1c:	d003      	beq.n	8002d26 <search+0x32>
 8002d1e:	230f      	movs	r3, #15
 8002d20:	18fb      	adds	r3, r7, r3
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	e010      	b.n	8002d48 <search+0x54>
	for (i = 0; i < batteryCapacityArraySize; i++) {
 8002d26:	210f      	movs	r1, #15
 8002d28:	187b      	adds	r3, r7, r1
 8002d2a:	781a      	ldrb	r2, [r3, #0]
 8002d2c:	187b      	adds	r3, r7, r1
 8002d2e:	3201      	adds	r2, #1
 8002d30:	701a      	strb	r2, [r3, #0]
 8002d32:	230f      	movs	r3, #15
 8002d34:	18fb      	adds	r3, r7, r3
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <search+0x60>)
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d3e1      	bcc.n	8002d06 <search+0x12>
	}
	return batteryCapacityArraySize;
 8002d42:	4b04      	ldr	r3, [pc, #16]	; (8002d54 <search+0x60>)
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	b2db      	uxtb	r3, r3
}
 8002d48:	0018      	movs	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b004      	add	sp, #16
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	0800b6f0 	.word	0x0800b6f0
 8002d54:	20000000 	.word	0x20000000

08002d58 <setTime>:

#include "clocks.h"

// set rtc time. uses perosnal struct as arg
// assert members not null for set functions?
void setTime(struct times *t, RTC_HandleTypeDef *hrtc) {
 8002d58:	b590      	push	{r4, r7, lr}
 8002d5a:	b089      	sub	sp, #36	; 0x24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
	RTC_TimeTypeDef stime = {0};	// change to malloc call? does that work in embedded?
 8002d62:	210c      	movs	r1, #12
 8002d64:	000c      	movs	r4, r1
 8002d66:	187b      	adds	r3, r7, r1
 8002d68:	0018      	movs	r0, r3
 8002d6a:	2314      	movs	r3, #20
 8002d6c:	001a      	movs	r2, r3
 8002d6e:	2100      	movs	r1, #0
 8002d70:	f007 ff21 	bl	800abb6 <memset>

	// set using args later
	stime.Hours = t->hr;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	781a      	ldrb	r2, [r3, #0]
 8002d78:	0021      	movs	r1, r4
 8002d7a:	187b      	adds	r3, r7, r1
 8002d7c:	701a      	strb	r2, [r3, #0]
	stime.Minutes = t->min;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	785a      	ldrb	r2, [r3, #1]
 8002d82:	187b      	adds	r3, r7, r1
 8002d84:	705a      	strb	r2, [r3, #1]
	stime.Seconds = t->sec;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	789a      	ldrb	r2, [r3, #2]
 8002d8a:	187b      	adds	r3, r7, r1
 8002d8c:	709a      	strb	r2, [r3, #2]

	stime.TimeFormat = RTC_HOURFORMAT_24;
 8002d8e:	187b      	adds	r3, r7, r1
 8002d90:	2200      	movs	r2, #0
 8002d92:	70da      	strb	r2, [r3, #3]

	// not sure what these do, but probably fine if set to 0 or ignored
	stime.SubSeconds = 0;
 8002d94:	187b      	adds	r3, r7, r1
 8002d96:	2200      	movs	r2, #0
 8002d98:	605a      	str	r2, [r3, #4]
	stime.SecondFraction = 0;
 8002d9a:	187b      	adds	r3, r7, r1
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	609a      	str	r2, [r3, #8]

	stime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;		// add daylight savings later?
 8002da0:	187b      	adds	r3, r7, r1
 8002da2:	2200      	movs	r2, #0
 8002da4:	60da      	str	r2, [r3, #12]
	stime.StoreOperation = RTC_STOREOPERATION_SET;		// not sure what this does
 8002da6:	187b      	adds	r3, r7, r1
 8002da8:	2280      	movs	r2, #128	; 0x80
 8002daa:	02d2      	lsls	r2, r2, #11
 8002dac:	611a      	str	r2, [r3, #16]

	// do nothing until done
	// not following BCD format (4-bit digit 1, 4-bit digit 2)
	// while makes program hang? ignore instead?
//	while (HAL_RTC_SetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK);
	HAL_RTC_SetTime(hrtc, &stime, RTC_FORMAT_BIN);
 8002dae:	1879      	adds	r1, r7, r1
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	2200      	movs	r2, #0
 8002db4:	0018      	movs	r0, r3
 8002db6:	f005 fd81 	bl	80088bc <HAL_RTC_SetTime>

//	runClockDisplay(&htim22);
}
 8002dba:	46c0      	nop			; (mov r8, r8)
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	b009      	add	sp, #36	; 0x24
 8002dc0:	bd90      	pop	{r4, r7, pc}

08002dc2 <setDate>:

// set rtc date. uses personal struct
void setDate(struct dates *d, RTC_HandleTypeDef *hrtc) {
 8002dc2:	b590      	push	{r4, r7, lr}
 8002dc4:	b085      	sub	sp, #20
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	6039      	str	r1, [r7, #0]
	// ---- date ----
	RTC_DateTypeDef sdate = {0};
 8002dcc:	240c      	movs	r4, #12
 8002dce:	193b      	adds	r3, r7, r4
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]

	sdate.Month = d->month;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	789a      	ldrb	r2, [r3, #2]
 8002dd8:	193b      	adds	r3, r7, r4
 8002dda:	705a      	strb	r2, [r3, #1]
	sdate.Date = d->date;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	78da      	ldrb	r2, [r3, #3]
 8002de0:	193b      	adds	r3, r7, r4
 8002de2:	709a      	strb	r2, [r3, #2]
	sdate.WeekDay = weekdayCalculator(d->yr, d->month, d->date) % 7;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	8818      	ldrh	r0, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	7899      	ldrb	r1, [r3, #2]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	78db      	ldrb	r3, [r3, #3]
 8002df0:	001a      	movs	r2, r3
 8002df2:	f000 fa85 	bl	8003300 <weekdayCalculator>
 8002df6:	0003      	movs	r3, r0
 8002df8:	2107      	movs	r1, #7
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f7fd fa12 	bl	8000224 <__aeabi_uidivmod>
 8002e00:	000b      	movs	r3, r1
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	193b      	adds	r3, r7, r4
 8002e06:	701a      	strb	r2, [r3, #0]
	sdate.Year = d->yr % 100; 		// set only between 0-99. part of the library (!?)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	881b      	ldrh	r3, [r3, #0]
 8002e0c:	2164      	movs	r1, #100	; 0x64
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f7fd fa08 	bl	8000224 <__aeabi_uidivmod>
 8002e14:	000b      	movs	r3, r1
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	193b      	adds	r3, r7, r4
 8002e1c:	70da      	strb	r2, [r3, #3]

	HAL_RTC_SetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 8002e1e:	1939      	adds	r1, r7, r4
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	2200      	movs	r2, #0
 8002e24:	0018      	movs	r0, r3
 8002e26:	f005 fe69 	bl	8008afc <HAL_RTC_SetDate>

//	runClockDisplay(&htim22);
}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	b005      	add	sp, #20
 8002e30:	bd90      	pop	{r4, r7, pc}

08002e32 <setDateTime>:

void setDateTime(struct dates *d, struct times *t, RTC_HandleTypeDef *hrtc) {
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b084      	sub	sp, #16
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	60f8      	str	r0, [r7, #12]
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	607a      	str	r2, [r7, #4]
	setDate(d, hrtc);
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	0011      	movs	r1, r2
 8002e44:	0018      	movs	r0, r3
 8002e46:	f7ff ffbc 	bl	8002dc2 <setDate>
	setTime(t, hrtc);
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	0011      	movs	r1, r2
 8002e50:	0018      	movs	r0, r3
 8002e52:	f7ff ff81 	bl	8002d58 <setTime>
}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	b004      	add	sp, #16
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <setAlarm>:

// for time of day+week
void setAlarm(struct alarmTimes *a, RTC_HandleTypeDef *hrtc) {
 8002e5e:	b5b0      	push	{r4, r5, r7, lr}
 8002e60:	b092      	sub	sp, #72	; 0x48
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	6039      	str	r1, [r7, #0]
	RTC_AlarmTypeDef salarm = {0};		// is there a problem with using pointers instead?
 8002e68:	2520      	movs	r5, #32
 8002e6a:	197b      	adds	r3, r7, r5
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	2328      	movs	r3, #40	; 0x28
 8002e70:	001a      	movs	r2, r3
 8002e72:	2100      	movs	r1, #0
 8002e74:	f007 fe9f 	bl	800abb6 <memset>
	RTC_TimeTypeDef salarmtime = {0};
 8002e78:	210c      	movs	r1, #12
 8002e7a:	000c      	movs	r4, r1
 8002e7c:	187b      	adds	r3, r7, r1
 8002e7e:	0018      	movs	r0, r3
 8002e80:	2314      	movs	r3, #20
 8002e82:	001a      	movs	r2, r3
 8002e84:	2100      	movs	r1, #0
 8002e86:	f007 fe96 	bl	800abb6 <memset>

	// change to set with args
	salarmtime.Hours = a->hr;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	781a      	ldrb	r2, [r3, #0]
 8002e8e:	0021      	movs	r1, r4
 8002e90:	187b      	adds	r3, r7, r1
 8002e92:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a->min;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	785a      	ldrb	r2, [r3, #1]
 8002e98:	187b      	adds	r3, r7, r1
 8002e9a:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a->sec;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	789a      	ldrb	r2, [r3, #2]
 8002ea0:	187b      	adds	r3, r7, r1
 8002ea2:	709a      	strb	r2, [r3, #2]
	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 8002ea4:	187b      	adds	r3, r7, r1
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 8002eaa:	187b      	adds	r3, r7, r1
 8002eac:	2200      	movs	r2, #0
 8002eae:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 8002eb0:	187b      	adds	r3, r7, r1
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002eb6:	187b      	adds	r3, r7, r1
 8002eb8:	2200      	movs	r2, #0
 8002eba:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002ebc:	187b      	adds	r3, r7, r1
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 8002ec2:	197b      	adds	r3, r7, r5
 8002ec4:	187a      	adds	r2, r7, r1
 8002ec6:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ec8:	c313      	stmia	r3!, {r0, r1, r4}
 8002eca:	ca03      	ldmia	r2!, {r0, r1}
 8002ecc:	c303      	stmia	r3!, {r0, r1}
	salarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002ece:	197b      	adds	r3, r7, r5
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002ed4:	197b      	adds	r3, r7, r5
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8002eda:	197b      	adds	r3, r7, r5
 8002edc:	2280      	movs	r2, #128	; 0x80
 8002ede:	05d2      	lsls	r2, r2, #23
 8002ee0:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a->weekday;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	78d9      	ldrb	r1, [r3, #3]
 8002ee6:	197b      	adds	r3, r7, r5
 8002ee8:	2220      	movs	r2, #32
 8002eea:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_A;			// change if using different alarm
 8002eec:	197b      	adds	r3, r7, r5
 8002eee:	2280      	movs	r2, #128	; 0x80
 8002ef0:	0052      	lsls	r2, r2, #1
 8002ef2:	625a      	str	r2, [r3, #36]	; 0x24

	// do nothing until done
	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
 8002ef4:	1979      	adds	r1, r7, r5
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	0018      	movs	r0, r3
 8002efc:	f005 fefa 	bl	8008cf4 <HAL_RTC_SetAlarm_IT>
}
 8002f00:	46c0      	nop			; (mov r8, r8)
 8002f02:	46bd      	mov	sp, r7
 8002f04:	b012      	add	sp, #72	; 0x48
 8002f06:	bdb0      	pop	{r4, r5, r7, pc}

08002f08 <setClockAlarm>:

// set an alarm for the next second.
// for triggering display updates.
// uses rtc weekday. should have weekday calculator integrated before using
void setClockAlarm(RTC_HandleTypeDef *hrtc) {
 8002f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f0a:	b097      	sub	sp, #92	; 0x5c
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef salarm = {0};			// malloc if using pointers
 8002f10:	242c      	movs	r4, #44	; 0x2c
 8002f12:	193b      	adds	r3, r7, r4
 8002f14:	0018      	movs	r0, r3
 8002f16:	2328      	movs	r3, #40	; 0x28
 8002f18:	001a      	movs	r2, r3
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	f007 fe4b 	bl	800abb6 <memset>
	RTC_TimeTypeDef salarmtime = {0};
 8002f20:	2518      	movs	r5, #24
 8002f22:	197b      	adds	r3, r7, r5
 8002f24:	0018      	movs	r0, r3
 8002f26:	2314      	movs	r3, #20
 8002f28:	001a      	movs	r2, r3
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	f007 fe43 	bl	800abb6 <memset>

	struct dates currentDate = {0};
 8002f30:	2310      	movs	r3, #16
 8002f32:	18fb      	adds	r3, r7, r3
 8002f34:	0018      	movs	r0, r3
 8002f36:	2306      	movs	r3, #6
 8002f38:	001a      	movs	r2, r3
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	f007 fe3b 	bl	800abb6 <memset>
	struct times currentTime = {0};
 8002f40:	210c      	movs	r1, #12
 8002f42:	000e      	movs	r6, r1
 8002f44:	187b      	adds	r3, r7, r1
 8002f46:	0018      	movs	r0, r3
 8002f48:	2303      	movs	r3, #3
 8002f4a:	001a      	movs	r2, r3
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	f007 fe32 	bl	800abb6 <memset>

	getDateTime(&currentDate, &currentTime, hrtc);
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	0031      	movs	r1, r6
 8002f56:	000c      	movs	r4, r1
 8002f58:	1879      	adds	r1, r7, r1
 8002f5a:	2310      	movs	r3, #16
 8002f5c:	18fb      	adds	r3, r7, r3
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f000 f8d4 	bl	800310c <getDateTime>

	struct alarmTimes a = {0};
 8002f64:	2608      	movs	r6, #8
 8002f66:	19bb      	adds	r3, r7, r6
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
	uint8_t s,m,h,w;
	s = currentTime.sec + 1;
 8002f6c:	0021      	movs	r1, r4
 8002f6e:	187b      	adds	r3, r7, r1
 8002f70:	789a      	ldrb	r2, [r3, #2]
 8002f72:	2057      	movs	r0, #87	; 0x57
 8002f74:	183b      	adds	r3, r7, r0
 8002f76:	3201      	adds	r2, #1
 8002f78:	701a      	strb	r2, [r3, #0]
	m = currentTime.min + s/60;
 8002f7a:	187b      	adds	r3, r7, r1
 8002f7c:	785c      	ldrb	r4, [r3, #1]
 8002f7e:	183b      	adds	r3, r7, r0
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	213c      	movs	r1, #60	; 0x3c
 8002f84:	0018      	movs	r0, r3
 8002f86:	f7fd f8c7 	bl	8000118 <__udivsi3>
 8002f8a:	0003      	movs	r3, r0
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	2056      	movs	r0, #86	; 0x56
 8002f90:	183b      	adds	r3, r7, r0
 8002f92:	18a2      	adds	r2, r4, r2
 8002f94:	701a      	strb	r2, [r3, #0]
	h = currentTime.hr + m/60;
 8002f96:	210c      	movs	r1, #12
 8002f98:	187b      	adds	r3, r7, r1
 8002f9a:	781c      	ldrb	r4, [r3, #0]
 8002f9c:	0002      	movs	r2, r0
 8002f9e:	18bb      	adds	r3, r7, r2
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	213c      	movs	r1, #60	; 0x3c
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f7fd f8b7 	bl	8000118 <__udivsi3>
 8002faa:	0003      	movs	r3, r0
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	2155      	movs	r1, #85	; 0x55
 8002fb0:	187b      	adds	r3, r7, r1
 8002fb2:	18a2      	adds	r2, r4, r2
 8002fb4:	701a      	strb	r2, [r3, #0]
	w = currentDate.weekday + h/24;
 8002fb6:	2310      	movs	r3, #16
 8002fb8:	18fb      	adds	r3, r7, r3
 8002fba:	791c      	ldrb	r4, [r3, #4]
 8002fbc:	187b      	adds	r3, r7, r1
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2118      	movs	r1, #24
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f7fd f8a8 	bl	8000118 <__udivsi3>
 8002fc8:	0003      	movs	r3, r0
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	2354      	movs	r3, #84	; 0x54
 8002fce:	18fb      	adds	r3, r7, r3
 8002fd0:	18a2      	adds	r2, r4, r2
 8002fd2:	701a      	strb	r2, [r3, #0]
	a.sec = s % 60;
 8002fd4:	2057      	movs	r0, #87	; 0x57
 8002fd6:	183b      	adds	r3, r7, r0
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	213c      	movs	r1, #60	; 0x3c
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f7fd f921 	bl	8000224 <__aeabi_uidivmod>
 8002fe2:	000b      	movs	r3, r1
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	19bb      	adds	r3, r7, r6
 8002fe8:	709a      	strb	r2, [r3, #2]
	a.min = m % 60;
 8002fea:	2256      	movs	r2, #86	; 0x56
 8002fec:	18bb      	adds	r3, r7, r2
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	213c      	movs	r1, #60	; 0x3c
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f7fd f916 	bl	8000224 <__aeabi_uidivmod>
 8002ff8:	000b      	movs	r3, r1
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	19bb      	adds	r3, r7, r6
 8002ffe:	705a      	strb	r2, [r3, #1]
	a.hr = h % 24;
 8003000:	2155      	movs	r1, #85	; 0x55
 8003002:	187b      	adds	r3, r7, r1
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	2118      	movs	r1, #24
 8003008:	0018      	movs	r0, r3
 800300a:	f7fd f90b 	bl	8000224 <__aeabi_uidivmod>
 800300e:	000b      	movs	r3, r1
 8003010:	b2da      	uxtb	r2, r3
 8003012:	19bb      	adds	r3, r7, r6
 8003014:	701a      	strb	r2, [r3, #0]
	a.weekday = (w-1) % 7 + 1;
 8003016:	2354      	movs	r3, #84	; 0x54
 8003018:	18fb      	adds	r3, r7, r3
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	3b01      	subs	r3, #1
 800301e:	2107      	movs	r1, #7
 8003020:	0018      	movs	r0, r3
 8003022:	f7fd f9e9 	bl	80003f8 <__aeabi_idivmod>
 8003026:	000b      	movs	r3, r1
 8003028:	b2db      	uxtb	r3, r3
 800302a:	3301      	adds	r3, #1
 800302c:	b2da      	uxtb	r2, r3
 800302e:	0030      	movs	r0, r6
 8003030:	183b      	adds	r3, r7, r0
 8003032:	70da      	strb	r2, [r3, #3]

	salarmtime.Hours = a.hr;
 8003034:	183b      	adds	r3, r7, r0
 8003036:	781a      	ldrb	r2, [r3, #0]
 8003038:	197b      	adds	r3, r7, r5
 800303a:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a.min;
 800303c:	183b      	adds	r3, r7, r0
 800303e:	785a      	ldrb	r2, [r3, #1]
 8003040:	197b      	adds	r3, r7, r5
 8003042:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a.sec;
 8003044:	183b      	adds	r3, r7, r0
 8003046:	789a      	ldrb	r2, [r3, #2]
 8003048:	197b      	adds	r3, r7, r5
 800304a:	709a      	strb	r2, [r3, #2]
	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 800304c:	197b      	adds	r3, r7, r5
 800304e:	2200      	movs	r2, #0
 8003050:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 8003052:	0029      	movs	r1, r5
 8003054:	187b      	adds	r3, r7, r1
 8003056:	2200      	movs	r2, #0
 8003058:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 800305a:	187b      	adds	r3, r7, r1
 800305c:	2200      	movs	r2, #0
 800305e:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003060:	187b      	adds	r3, r7, r1
 8003062:	2200      	movs	r2, #0
 8003064:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003066:	187b      	adds	r3, r7, r1
 8003068:	2200      	movs	r2, #0
 800306a:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 800306c:	242c      	movs	r4, #44	; 0x2c
 800306e:	193b      	adds	r3, r7, r4
 8003070:	187a      	adds	r2, r7, r1
 8003072:	ca62      	ldmia	r2!, {r1, r5, r6}
 8003074:	c362      	stmia	r3!, {r1, r5, r6}
 8003076:	ca22      	ldmia	r2!, {r1, r5}
 8003078:	c322      	stmia	r3!, {r1, r5}
	salarm.AlarmMask = RTC_ALARMMASK_NONE;
 800307a:	193b      	adds	r3, r7, r4
 800307c:	2200      	movs	r2, #0
 800307e:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003080:	193b      	adds	r3, r7, r4
 8003082:	2200      	movs	r2, #0
 8003084:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8003086:	193b      	adds	r3, r7, r4
 8003088:	2280      	movs	r2, #128	; 0x80
 800308a:	05d2      	lsls	r2, r2, #23
 800308c:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a.weekday;
 800308e:	183b      	adds	r3, r7, r0
 8003090:	78d9      	ldrb	r1, [r3, #3]
 8003092:	193b      	adds	r3, r7, r4
 8003094:	2220      	movs	r2, #32
 8003096:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_B;			// change if using different alarm
 8003098:	193b      	adds	r3, r7, r4
 800309a:	2280      	movs	r2, #128	; 0x80
 800309c:	0092      	lsls	r2, r2, #2
 800309e:	625a      	str	r2, [r3, #36]	; 0x24

	// do nothing until done
	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
 80030a0:	1939      	adds	r1, r7, r4
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	0018      	movs	r0, r3
 80030a8:	f005 fe24 	bl	8008cf4 <HAL_RTC_SetAlarm_IT>
}
 80030ac:	46c0      	nop			; (mov r8, r8)
 80030ae:	46bd      	mov	sp, r7
 80030b0:	b017      	add	sp, #92	; 0x5c
 80030b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030b4 <HAL_RTC_AlarmAEventCallback>:

// ---- callbacks for interrupts ----
// used for alarm function in project
// meant to send signal to use motor
// change to use hw timer so signal is temporary
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
	// change pin to whatever's accessible
	// using PC0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 80030bc:	4b07      	ldr	r3, [pc, #28]	; (80030dc <HAL_RTC_AlarmAEventCallback+0x28>)
 80030be:	2101      	movs	r1, #1
 80030c0:	0018      	movs	r0, r3
 80030c2:	f004 fad5 	bl	8007670 <HAL_GPIO_TogglePin>
	isAlarmDone = 1;
 80030c6:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <HAL_RTC_AlarmAEventCallback+0x2c>)
 80030c8:	2201      	movs	r2, #1
 80030ca:	701a      	strb	r2, [r3, #0]
	updateFace.alarm = 1;
 80030cc:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <HAL_RTC_AlarmAEventCallback+0x30>)
 80030ce:	2201      	movs	r2, #1
 80030d0:	709a      	strb	r2, [r3, #2]
}
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	46bd      	mov	sp, r7
 80030d6:	b002      	add	sp, #8
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	50000800 	.word	0x50000800
 80030e0:	20000142 	.word	0x20000142
 80030e4:	20000144 	.word	0x20000144

080030e8 <HAL_RTCEx_AlarmBEventCallback>:

// used to trigger display refresh every second. used because then it's synchronous with RTC updates
void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc) {
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
	updateFace.clock = 1;
 80030f0:	4b05      	ldr	r3, [pc, #20]	; (8003108 <HAL_RTCEx_AlarmBEventCallback+0x20>)
 80030f2:	2201      	movs	r2, #1
 80030f4:	701a      	strb	r2, [r3, #0]
	setClockAlarm(hrtc);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	0018      	movs	r0, r3
 80030fa:	f7ff ff05 	bl	8002f08 <setClockAlarm>
}
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	46bd      	mov	sp, r7
 8003102:	b002      	add	sp, #8
 8003104:	bd80      	pop	{r7, pc}
 8003106:	46c0      	nop			; (mov r8, r8)
 8003108:	20000144 	.word	0x20000144

0800310c <getDateTime>:
	d->date = sdate.Date;
	d->weekday = sdate.WeekDay;
}

// not using getDate and getTime for efficiency (?)
void getDateTime(struct dates *d, struct times *t, RTC_HandleTypeDef *hrtc) {
 800310c:	b590      	push	{r4, r7, lr}
 800310e:	b08b      	sub	sp, #44	; 0x2c
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
	RTC_DateTypeDef sdate;
	RTC_TimeTypeDef stime;

	// programming manual says to read time after date. something shadow registers.
	// not done automatically in HAL
	HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN);
 8003118:	2310      	movs	r3, #16
 800311a:	18f9      	adds	r1, r7, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	0018      	movs	r0, r3
 8003122:	f005 fc8f 	bl	8008a44 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 8003126:	2424      	movs	r4, #36	; 0x24
 8003128:	1939      	adds	r1, r7, r4
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	0018      	movs	r0, r3
 8003130:	f005 fd92 	bl	8008c58 <HAL_RTC_GetDate>

	d->yr = sdate.Year > 50 ? sdate.Year+1900 : sdate.Year+2000;		// make assumptions on whether it's 19xx or 20xx
 8003134:	193b      	adds	r3, r7, r4
 8003136:	78db      	ldrb	r3, [r3, #3]
 8003138:	2b32      	cmp	r3, #50	; 0x32
 800313a:	d908      	bls.n	800314e <getDateTime+0x42>
 800313c:	2324      	movs	r3, #36	; 0x24
 800313e:	18fb      	adds	r3, r7, r3
 8003140:	78db      	ldrb	r3, [r3, #3]
 8003142:	b29b      	uxth	r3, r3
 8003144:	4a16      	ldr	r2, [pc, #88]	; (80031a0 <getDateTime+0x94>)
 8003146:	4694      	mov	ip, r2
 8003148:	4463      	add	r3, ip
 800314a:	b29b      	uxth	r3, r3
 800314c:	e008      	b.n	8003160 <getDateTime+0x54>
 800314e:	2324      	movs	r3, #36	; 0x24
 8003150:	18fb      	adds	r3, r7, r3
 8003152:	78db      	ldrb	r3, [r3, #3]
 8003154:	b29b      	uxth	r3, r3
 8003156:	22fa      	movs	r2, #250	; 0xfa
 8003158:	00d2      	lsls	r2, r2, #3
 800315a:	4694      	mov	ip, r2
 800315c:	4463      	add	r3, ip
 800315e:	b29b      	uxth	r3, r3
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	8013      	strh	r3, [r2, #0]
	d->month = sdate.Month;
 8003164:	2124      	movs	r1, #36	; 0x24
 8003166:	187b      	adds	r3, r7, r1
 8003168:	785a      	ldrb	r2, [r3, #1]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	709a      	strb	r2, [r3, #2]
	d->date = sdate.Date;
 800316e:	187b      	adds	r3, r7, r1
 8003170:	789a      	ldrb	r2, [r3, #2]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	70da      	strb	r2, [r3, #3]
	d->weekday = sdate.WeekDay;
 8003176:	187b      	adds	r3, r7, r1
 8003178:	781a      	ldrb	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	711a      	strb	r2, [r3, #4]

	t->hr = stime.Hours;
 800317e:	2110      	movs	r1, #16
 8003180:	187b      	adds	r3, r7, r1
 8003182:	781a      	ldrb	r2, [r3, #0]
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	701a      	strb	r2, [r3, #0]
	t->min = stime.Minutes;
 8003188:	187b      	adds	r3, r7, r1
 800318a:	785a      	ldrb	r2, [r3, #1]
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	705a      	strb	r2, [r3, #1]
	t->sec = stime.Seconds;
 8003190:	187b      	adds	r3, r7, r1
 8003192:	789a      	ldrb	r2, [r3, #2]
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	709a      	strb	r2, [r3, #2]
}
 8003198:	46c0      	nop			; (mov r8, r8)
 800319a:	46bd      	mov	sp, r7
 800319c:	b00b      	add	sp, #44	; 0x2c
 800319e:	bd90      	pop	{r4, r7, pc}
 80031a0:	0000076c 	.word	0x0000076c

080031a4 <setRTCCalibration>:
// ---- end of clock get functions ----

// ---- RTC calibration function ----
// calibVal should be given in drift/day in seconds
// calibration output on PC13. problems with using pins together with alarm?
void setRTCCalibration(int calibVal, RTC_HandleTypeDef *hrtc) {
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
	uint16_t calm = 0;
 80031ae:	230e      	movs	r3, #14
 80031b0:	18fb      	adds	r3, r7, r3
 80031b2:	2200      	movs	r2, #0
 80031b4:	801a      	strh	r2, [r3, #0]
	uint32_t temp;
	// need to recalculate the bounds
	if (calibVal == 0) return;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d048      	beq.n	800324e <setRTCCalibration+0xaa>
	else if (calibVal < 0) {		// drift offset is negative. need to slow rtc down
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	da20      	bge.n	8003204 <setRTCCalibration+0x60>
		if (calibVal <= -42) {		// bounds checking. just set to max
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	3329      	adds	r3, #41	; 0x29
 80031c6:	da06      	bge.n	80031d6 <setRTCCalibration+0x32>
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_RESET, 0x1FF);
 80031c8:	4b23      	ldr	r3, [pc, #140]	; (8003258 <setRTCCalibration+0xb4>)
 80031ca:	6838      	ldr	r0, [r7, #0]
 80031cc:	2200      	movs	r2, #0
 80031ce:	2100      	movs	r1, #0
 80031d0:	f006 f861 	bl	8009296 <HAL_RTCEx_SetSmoothCalib>
 80031d4:	e03c      	b.n	8003250 <setRTCCalibration+0xac>
		}
		else {
			// math for setting CALM 9-bit register in RTC. formula in notes and in L0 programming reference manual
			temp = -calibVal*32768*32/86400;		// possible overflow when doing math, so reordering
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	0013      	movs	r3, r2
 80031da:	031b      	lsls	r3, r3, #12
 80031dc:	1a9b      	subs	r3, r3, r2
 80031de:	051b      	lsls	r3, r3, #20
 80031e0:	491e      	ldr	r1, [pc, #120]	; (800325c <setRTCCalibration+0xb8>)
 80031e2:	0018      	movs	r0, r3
 80031e4:	f7fd f822 	bl	800022c <__divsi3>
 80031e8:	0003      	movs	r3, r0
 80031ea:	60bb      	str	r3, [r7, #8]
			calm = temp;
 80031ec:	210e      	movs	r1, #14
 80031ee:	187b      	adds	r3, r7, r1
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	801a      	strh	r2, [r3, #0]
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_RESET, calm);
 80031f4:	187b      	adds	r3, r7, r1
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	6838      	ldr	r0, [r7, #0]
 80031fa:	2200      	movs	r2, #0
 80031fc:	2100      	movs	r1, #0
 80031fe:	f006 f84a 	bl	8009296 <HAL_RTCEx_SetSmoothCalib>
 8003202:	e025      	b.n	8003250 <setRTCCalibration+0xac>
		}
	}
	else {
		if (calibVal >= 42) { 		// drift offset is positive. need to speed rtc up
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b29      	cmp	r3, #41	; 0x29
 8003208:	dd07      	ble.n	800321a <setRTCCalibration+0x76>
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_SET, 0);
 800320a:	2380      	movs	r3, #128	; 0x80
 800320c:	021a      	lsls	r2, r3, #8
 800320e:	6838      	ldr	r0, [r7, #0]
 8003210:	2300      	movs	r3, #0
 8003212:	2100      	movs	r1, #0
 8003214:	f006 f83f 	bl	8009296 <HAL_RTCEx_SetSmoothCalib>
 8003218:	e01a      	b.n	8003250 <setRTCCalibration+0xac>
		}
		else {
			// math
			temp = 512-(calibVal*32768*32/86400);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	051b      	lsls	r3, r3, #20
 800321e:	4910      	ldr	r1, [pc, #64]	; (8003260 <setRTCCalibration+0xbc>)
 8003220:	0018      	movs	r0, r3
 8003222:	f7fd f803 	bl	800022c <__divsi3>
 8003226:	0003      	movs	r3, r0
 8003228:	2280      	movs	r2, #128	; 0x80
 800322a:	0092      	lsls	r2, r2, #2
 800322c:	4694      	mov	ip, r2
 800322e:	4463      	add	r3, ip
 8003230:	60bb      	str	r3, [r7, #8]
			calm = temp;
 8003232:	210e      	movs	r1, #14
 8003234:	187b      	adds	r3, r7, r1
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	801a      	strh	r2, [r3, #0]
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_SET, calm);
 800323a:	187b      	adds	r3, r7, r1
 800323c:	8819      	ldrh	r1, [r3, #0]
 800323e:	2380      	movs	r3, #128	; 0x80
 8003240:	021a      	lsls	r2, r3, #8
 8003242:	6838      	ldr	r0, [r7, #0]
 8003244:	000b      	movs	r3, r1
 8003246:	2100      	movs	r1, #0
 8003248:	f006 f825 	bl	8009296 <HAL_RTCEx_SetSmoothCalib>
 800324c:	e000      	b.n	8003250 <setRTCCalibration+0xac>
	if (calibVal == 0) return;
 800324e:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8003250:	46bd      	mov	sp, r7
 8003252:	b004      	add	sp, #16
 8003254:	bd80      	pop	{r7, pc}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	000001ff 	.word	0x000001ff
 800325c:	00015180 	.word	0x00015180
 8003260:	fffeae80 	.word	0xfffeae80

08003264 <timeToSeconds>:
// ---- end of RTC calibration function ----

// ---- converters and calculators ----
uint32_t timeToSeconds(struct times *t) {
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
	return t->sec + t->min*60 + t->hr*3600;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	789b      	ldrb	r3, [r3, #2]
 8003270:	0019      	movs	r1, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	785b      	ldrb	r3, [r3, #1]
 8003276:	001a      	movs	r2, r3
 8003278:	0013      	movs	r3, r2
 800327a:	011b      	lsls	r3, r3, #4
 800327c:	1a9b      	subs	r3, r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	18c9      	adds	r1, r1, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	001a      	movs	r2, r3
 8003288:	0013      	movs	r3, r2
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	011a      	lsls	r2, r3, #4
 8003290:	1ad2      	subs	r2, r2, r3
 8003292:	0113      	lsls	r3, r2, #4
 8003294:	001a      	movs	r2, r3
 8003296:	0013      	movs	r3, r2
 8003298:	18cb      	adds	r3, r1, r3
}
 800329a:	0018      	movs	r0, r3
 800329c:	46bd      	mov	sp, r7
 800329e:	b002      	add	sp, #8
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <secondsToTime>:

void secondsToTime(struct times *t, uint32_t seconds) {
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b082      	sub	sp, #8
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
 80032aa:	6039      	str	r1, [r7, #0]
	t->hr = seconds / 3600;
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	23e1      	movs	r3, #225	; 0xe1
 80032b0:	0119      	lsls	r1, r3, #4
 80032b2:	0010      	movs	r0, r2
 80032b4:	f7fc ff30 	bl	8000118 <__udivsi3>
 80032b8:	0003      	movs	r3, r0
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	701a      	strb	r2, [r3, #0]
	seconds %= 3600;
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	23e1      	movs	r3, #225	; 0xe1
 80032c4:	0119      	lsls	r1, r3, #4
 80032c6:	0010      	movs	r0, r2
 80032c8:	f7fc ffac 	bl	8000224 <__aeabi_uidivmod>
 80032cc:	000b      	movs	r3, r1
 80032ce:	603b      	str	r3, [r7, #0]
	t->min = seconds / 60;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	213c      	movs	r1, #60	; 0x3c
 80032d4:	0018      	movs	r0, r3
 80032d6:	f7fc ff1f 	bl	8000118 <__udivsi3>
 80032da:	0003      	movs	r3, r0
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	705a      	strb	r2, [r3, #1]
	seconds %= 60;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	213c      	movs	r1, #60	; 0x3c
 80032e6:	0018      	movs	r0, r3
 80032e8:	f7fc ff9c 	bl	8000224 <__aeabi_uidivmod>
 80032ec:	000b      	movs	r3, r1
 80032ee:	603b      	str	r3, [r7, #0]
	t->sec = seconds;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	709a      	strb	r2, [r3, #2]
}
 80032f8:	46c0      	nop			; (mov r8, r8)
 80032fa:	46bd      	mov	sp, r7
 80032fc:	b002      	add	sp, #8
 80032fe:	bd80      	pop	{r7, pc}

08003300 <weekdayCalculator>:
 * weekdays is 0-6, with 0 being sunday. hal uses 1=monday, 7=sunday - just call with % 7 to integrate with hal
 * months given in 1-12, with 1 being january. hal uses the same setup
 * rtc represents years with last 2 digits only. make sure year has all 4 numbers
 * should be accurate for any gregorian date
 */
uint8_t weekdayCalculator(uint16_t year, uint8_t month, uint8_t day) {
 8003300:	b590      	push	{r4, r7, lr}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	0004      	movs	r4, r0
 8003308:	0008      	movs	r0, r1
 800330a:	0011      	movs	r1, r2
 800330c:	1dbb      	adds	r3, r7, #6
 800330e:	1c22      	adds	r2, r4, #0
 8003310:	801a      	strh	r2, [r3, #0]
 8003312:	1d7b      	adds	r3, r7, #5
 8003314:	1c02      	adds	r2, r0, #0
 8003316:	701a      	strb	r2, [r3, #0]
 8003318:	1d3b      	adds	r3, r7, #4
 800331a:	1c0a      	adds	r2, r1, #0
 800331c:	701a      	strb	r2, [r3, #0]
	static uint8_t table[] = {0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4};
	if (month < 3) year--;
 800331e:	1d7b      	adds	r3, r7, #5
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b02      	cmp	r3, #2
 8003324:	d804      	bhi.n	8003330 <weekdayCalculator+0x30>
 8003326:	1dbb      	adds	r3, r7, #6
 8003328:	881a      	ldrh	r2, [r3, #0]
 800332a:	1dbb      	adds	r3, r7, #6
 800332c:	3a01      	subs	r2, #1
 800332e:	801a      	strh	r2, [r3, #0]
	uint16_t temp = (year + year/4 - year/100 + year/400 + table[month-1] + day) % 7;
 8003330:	1dbb      	adds	r3, r7, #6
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	1dba      	adds	r2, r7, #6
 8003336:	8812      	ldrh	r2, [r2, #0]
 8003338:	0892      	lsrs	r2, r2, #2
 800333a:	b292      	uxth	r2, r2
 800333c:	189c      	adds	r4, r3, r2
 800333e:	1dbb      	adds	r3, r7, #6
 8003340:	881b      	ldrh	r3, [r3, #0]
 8003342:	2164      	movs	r1, #100	; 0x64
 8003344:	0018      	movs	r0, r3
 8003346:	f7fc fee7 	bl	8000118 <__udivsi3>
 800334a:	0003      	movs	r3, r0
 800334c:	b29b      	uxth	r3, r3
 800334e:	1ae4      	subs	r4, r4, r3
 8003350:	1dbb      	adds	r3, r7, #6
 8003352:	881a      	ldrh	r2, [r3, #0]
 8003354:	23c8      	movs	r3, #200	; 0xc8
 8003356:	0059      	lsls	r1, r3, #1
 8003358:	0010      	movs	r0, r2
 800335a:	f7fc fedd 	bl	8000118 <__udivsi3>
 800335e:	0003      	movs	r3, r0
 8003360:	b29b      	uxth	r3, r3
 8003362:	18e3      	adds	r3, r4, r3
 8003364:	1d7a      	adds	r2, r7, #5
 8003366:	7812      	ldrb	r2, [r2, #0]
 8003368:	3a01      	subs	r2, #1
 800336a:	490b      	ldr	r1, [pc, #44]	; (8003398 <weekdayCalculator+0x98>)
 800336c:	5c8a      	ldrb	r2, [r1, r2]
 800336e:	189a      	adds	r2, r3, r2
 8003370:	1d3b      	adds	r3, r7, #4
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	18d3      	adds	r3, r2, r3
 8003376:	2107      	movs	r1, #7
 8003378:	0018      	movs	r0, r3
 800337a:	f7fd f83d 	bl	80003f8 <__aeabi_idivmod>
 800337e:	000b      	movs	r3, r1
 8003380:	001a      	movs	r2, r3
 8003382:	210e      	movs	r1, #14
 8003384:	187b      	adds	r3, r7, r1
 8003386:	801a      	strh	r2, [r3, #0]
	return temp;
 8003388:	187b      	adds	r3, r7, r1
 800338a:	881b      	ldrh	r3, [r3, #0]
 800338c:	b2db      	uxtb	r3, r3
}
 800338e:	0018      	movs	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	b005      	add	sp, #20
 8003394:	bd90      	pop	{r4, r7, pc}
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	20000004 	.word	0x20000004

0800339c <maxDaysInMonth>:

// calculator for number of days in a month given a month and accounting for leap years
// assumes month is 1-12, 1=january, 12=december
uint8_t maxDaysInMonth(uint8_t month, uint16_t year) {
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	0002      	movs	r2, r0
 80033a4:	1dfb      	adds	r3, r7, #7
 80033a6:	701a      	strb	r2, [r3, #0]
 80033a8:	1d3b      	adds	r3, r7, #4
 80033aa:	1c0a      	adds	r2, r1, #0
 80033ac:	801a      	strh	r2, [r3, #0]
	if (month == 0 || month > 12) return 0;		// bounds checking
 80033ae:	1dfb      	adds	r3, r7, #7
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <maxDaysInMonth+0x22>
 80033b6:	1dfb      	adds	r3, r7, #7
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b0c      	cmp	r3, #12
 80033bc:	d901      	bls.n	80033c2 <maxDaysInMonth+0x26>
 80033be:	2300      	movs	r3, #0
 80033c0:	e052      	b.n	8003468 <maxDaysInMonth+0xcc>

	// not using built-in defines, because they're in BCD
	if (month == 1  ||		// january
 80033c2:	1dfb      	adds	r3, r7, #7
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d017      	beq.n	80033fa <maxDaysInMonth+0x5e>
 80033ca:	1dfb      	adds	r3, r7, #7
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	2b03      	cmp	r3, #3
 80033d0:	d013      	beq.n	80033fa <maxDaysInMonth+0x5e>
		month == 3  ||		// march
 80033d2:	1dfb      	adds	r3, r7, #7
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b05      	cmp	r3, #5
 80033d8:	d00f      	beq.n	80033fa <maxDaysInMonth+0x5e>
		month == 5  ||		// may
 80033da:	1dfb      	adds	r3, r7, #7
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b07      	cmp	r3, #7
 80033e0:	d00b      	beq.n	80033fa <maxDaysInMonth+0x5e>
		month == 7  ||		// july
 80033e2:	1dfb      	adds	r3, r7, #7
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d007      	beq.n	80033fa <maxDaysInMonth+0x5e>
		month == 8  ||		// august
 80033ea:	1dfb      	adds	r3, r7, #7
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	2b0a      	cmp	r3, #10
 80033f0:	d003      	beq.n	80033fa <maxDaysInMonth+0x5e>
		month == 10 ||		// october
 80033f2:	1dfb      	adds	r3, r7, #7
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b0c      	cmp	r3, #12
 80033f8:	d101      	bne.n	80033fe <maxDaysInMonth+0x62>
		month == 12) {		// december
		return 31;
 80033fa:	231f      	movs	r3, #31
 80033fc:	e034      	b.n	8003468 <maxDaysInMonth+0xcc>
	}
	else if (month == 4 ||	// april
 80033fe:	1dfb      	adds	r3, r7, #7
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b04      	cmp	r3, #4
 8003404:	d00b      	beq.n	800341e <maxDaysInMonth+0x82>
 8003406:	1dfb      	adds	r3, r7, #7
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b06      	cmp	r3, #6
 800340c:	d007      	beq.n	800341e <maxDaysInMonth+0x82>
			 month == 6 ||	// june
 800340e:	1dfb      	adds	r3, r7, #7
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b09      	cmp	r3, #9
 8003414:	d003      	beq.n	800341e <maxDaysInMonth+0x82>
			 month == 9 ||	// september
 8003416:	1dfb      	adds	r3, r7, #7
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b0b      	cmp	r3, #11
 800341c:	d101      	bne.n	8003422 <maxDaysInMonth+0x86>
			 month == 11) {	// november
		return 30;
 800341e:	231e      	movs	r3, #30
 8003420:	e022      	b.n	8003468 <maxDaysInMonth+0xcc>
	}

	// february/leap year calculator
	// leap year for every 4th year, but every 100th year is not a leap year except on every 400th year
	// ex. 2020 is a leap year, 2100 is not a leap year, 2000 is a leap year.
	else if (year % 400 == 0) return 29;
 8003422:	1d3b      	adds	r3, r7, #4
 8003424:	881a      	ldrh	r2, [r3, #0]
 8003426:	23c8      	movs	r3, #200	; 0xc8
 8003428:	0059      	lsls	r1, r3, #1
 800342a:	0010      	movs	r0, r2
 800342c:	f7fc fefa 	bl	8000224 <__aeabi_uidivmod>
 8003430:	000b      	movs	r3, r1
 8003432:	b29b      	uxth	r3, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <maxDaysInMonth+0xa0>
 8003438:	231d      	movs	r3, #29
 800343a:	e015      	b.n	8003468 <maxDaysInMonth+0xcc>
	else if (year % 100 == 0) return 28;
 800343c:	1d3b      	adds	r3, r7, #4
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	2164      	movs	r1, #100	; 0x64
 8003442:	0018      	movs	r0, r3
 8003444:	f7fc feee 	bl	8000224 <__aeabi_uidivmod>
 8003448:	000b      	movs	r3, r1
 800344a:	b29b      	uxth	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <maxDaysInMonth+0xb8>
 8003450:	231c      	movs	r3, #28
 8003452:	e009      	b.n	8003468 <maxDaysInMonth+0xcc>
	else if (year % 4 == 0) return 29;
 8003454:	1d3b      	adds	r3, r7, #4
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	2203      	movs	r2, #3
 800345a:	4013      	ands	r3, r2
 800345c:	b29b      	uxth	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <maxDaysInMonth+0xca>
 8003462:	231d      	movs	r3, #29
 8003464:	e000      	b.n	8003468 <maxDaysInMonth+0xcc>
	else return 28;
 8003466:	231c      	movs	r3, #28
}
 8003468:	0018      	movs	r0, r3
 800346a:	46bd      	mov	sp, r7
 800346c:	b002      	add	sp, #8
 800346e:	bd80      	pop	{r7, pc}

08003470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003470:	b590      	push	{r4, r7, lr}
 8003472:	b083      	sub	sp, #12
 8003474:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003476:	f002 ffa1 	bl	80063bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800347a:	f000 f88b 	bl	8003594 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800347e:	f000 fcbb 	bl	8003df8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003482:	f000 fa55 	bl	8003930 <MX_SPI1_Init>
  MX_ADC_Init();
 8003486:	f000 f90d 	bl	80036a4 <MX_ADC_Init>
  MX_RTC_Init();
 800348a:	f000 f997 	bl	80037bc <MX_RTC_Init>
  MX_TIM21_Init();
 800348e:	f000 fb6d 	bl	8003b6c <MX_TIM21_Init>
  MX_LPTIM1_Init();
 8003492:	f000 f96b 	bl	800376c <MX_LPTIM1_Init>
  MX_DMA_Init();
 8003496:	f000 fc91 	bl	8003dbc <MX_DMA_Init>
  MX_TIM22_Init();
 800349a:	f000 fbff 	bl	8003c9c <MX_TIM22_Init>
  MX_TIM2_Init();
 800349e:	f000 fa83 	bl	80039a8 <MX_TIM2_Init>
  MX_TIM6_Init();
 80034a2:	f000 fb27 	bl	8003af4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  	/* initialization for display */
//	HAL_Delay(2000);
	setRTCCalibration(-3, &hrtc);
 80034a6:	4a31      	ldr	r2, [pc, #196]	; (800356c <main+0xfc>)
 80034a8:	2303      	movs	r3, #3
 80034aa:	425b      	negs	r3, r3
 80034ac:	0011      	movs	r1, r2
 80034ae:	0018      	movs	r0, r3
 80034b0:	f7ff fe78 	bl	80031a4 <setRTCCalibration>
//	HAL_RTCEx_SetSmoothCalib(&hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_SET, 0);
	TFT_startup(&hspi1);
 80034b4:	4b2e      	ldr	r3, [pc, #184]	; (8003570 <main+0x100>)
 80034b6:	0018      	movs	r0, r3
 80034b8:	f7fe fa32 	bl	8001920 <TFT_startup>
	clearScreen(ST77XX_BLACK, &hspi1);
 80034bc:	4b2c      	ldr	r3, [pc, #176]	; (8003570 <main+0x100>)
 80034be:	0019      	movs	r1, r3
 80034c0:	2000      	movs	r0, #0
 80034c2:	f7ff fb1d 	bl	8002b00 <clearScreen>

	/* start updating display for ui */
	initFace();
 80034c6:	f002 ff19 	bl	80062fc <initFace>
	setClockAlarm(&hrtc);
 80034ca:	4b28      	ldr	r3, [pc, #160]	; (800356c <main+0xfc>)
 80034cc:	0018      	movs	r0, r3
 80034ce:	f7ff fd1b 	bl	8002f08 <setClockAlarm>
	runTimerStopwatchBase(&htim21);
 80034d2:	4b28      	ldr	r3, [pc, #160]	; (8003574 <main+0x104>)
 80034d4:	0018      	movs	r0, r3
 80034d6:	f001 f9eb 	bl	80048b0 <runTimerStopwatchBase>
	runBacklightMotorBase(&htim2);
 80034da:	4b27      	ldr	r3, [pc, #156]	; (8003578 <main+0x108>)
 80034dc:	0018      	movs	r0, r3
 80034de:	f001 fa3f 	bl	8004960 <runBacklightMotorBase>
	runADCSampler(&htim22);
 80034e2:	4b26      	ldr	r3, [pc, #152]	; (800357c <main+0x10c>)
 80034e4:	0018      	movs	r0, r3
 80034e6:	f001 f9ef 	bl	80048c8 <runADCSampler>
//		testBatteryCalculator(&hadc, &hspi1);

		// ui/nav tests or full run. uncomment when ready
		// to have state code execute in order from top-down, instead of executing wherever
		// need to note sections that need to execute outside of buttons
		if (buttons.is1Pressed || buttons.is2Pressed || buttons.is3Pressed || buttons.is4Pressed) {
 80034ea:	4b25      	ldr	r3, [pc, #148]	; (8003580 <main+0x110>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10e      	bne.n	8003512 <main+0xa2>
 80034f4:	4b22      	ldr	r3, [pc, #136]	; (8003580 <main+0x110>)
 80034f6:	785b      	ldrb	r3, [r3, #1]
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d109      	bne.n	8003512 <main+0xa2>
 80034fe:	4b20      	ldr	r3, [pc, #128]	; (8003580 <main+0x110>)
 8003500:	789b      	ldrb	r3, [r3, #2]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d104      	bne.n	8003512 <main+0xa2>
 8003508:	4b1d      	ldr	r3, [pc, #116]	; (8003580 <main+0x110>)
 800350a:	78db      	ldrb	r3, [r3, #3]
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d008      	beq.n	8003524 <main+0xb4>
//			runMotor(&htim2);
//			buttons.is1Pressed = buttons.is2Pressed = buttons.is3Pressed = buttons.is4Pressed = 0;
			updateState(&hrtc, &htim21, &htim2, &htim6, &hspi1);
 8003512:	4c1c      	ldr	r4, [pc, #112]	; (8003584 <main+0x114>)
 8003514:	4a18      	ldr	r2, [pc, #96]	; (8003578 <main+0x108>)
 8003516:	4917      	ldr	r1, [pc, #92]	; (8003574 <main+0x104>)
 8003518:	4814      	ldr	r0, [pc, #80]	; (800356c <main+0xfc>)
 800351a:	4b15      	ldr	r3, [pc, #84]	; (8003570 <main+0x100>)
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	0023      	movs	r3, r4
 8003520:	f001 fa72 	bl	8004a08 <updateState>
		}

		updateDisplay(&hrtc, &hspi1);
 8003524:	4a12      	ldr	r2, [pc, #72]	; (8003570 <main+0x100>)
 8003526:	4b11      	ldr	r3, [pc, #68]	; (800356c <main+0xfc>)
 8003528:	0011      	movs	r1, r2
 800352a:	0018      	movs	r0, r3
 800352c:	f002 f868 	bl	8005600 <updateDisplay>
		batteryManager(&hadc, &hspi1);
 8003530:	4a0f      	ldr	r2, [pc, #60]	; (8003570 <main+0x100>)
 8003532:	4b15      	ldr	r3, [pc, #84]	; (8003588 <main+0x118>)
 8003534:	0011      	movs	r1, r2
 8003536:	0018      	movs	r0, r3
 8003538:	f7ff fafa 	bl	8002b30 <batteryManager>

		if (isTimerDone || isAlarmDone) {
 800353c:	4b13      	ldr	r3, [pc, #76]	; (800358c <main+0x11c>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d104      	bne.n	8003550 <main+0xe0>
 8003546:	4b12      	ldr	r3, [pc, #72]	; (8003590 <main+0x120>)
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00a      	beq.n	8003566 <main+0xf6>
			runMotor(&htim2);
 8003550:	4b09      	ldr	r3, [pc, #36]	; (8003578 <main+0x108>)
 8003552:	0018      	movs	r0, r3
 8003554:	f001 f9ca 	bl	80048ec <runMotor>
			isTimerDone = isAlarmDone = 0;
 8003558:	2100      	movs	r1, #0
 800355a:	4b0d      	ldr	r3, [pc, #52]	; (8003590 <main+0x120>)
 800355c:	1c0a      	adds	r2, r1, #0
 800355e:	701a      	strb	r2, [r3, #0]
 8003560:	4b0a      	ldr	r3, [pc, #40]	; (800358c <main+0x11c>)
 8003562:	1c0a      	adds	r2, r1, #0
 8003564:	701a      	strb	r2, [r3, #0]
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8003566:	bf30      	wfi
		if (buttons.is1Pressed || buttons.is2Pressed || buttons.is3Pressed || buttons.is4Pressed) {
 8003568:	e7bf      	b.n	80034ea <main+0x7a>
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	20000208 	.word	0x20000208
 8003570:	2000022c 	.word	0x2000022c
 8003574:	20000364 	.word	0x20000364
 8003578:	20000284 	.word	0x20000284
 800357c:	2000019c 	.word	0x2000019c
 8003580:	20000190 	.word	0x20000190
 8003584:	20000154 	.word	0x20000154
 8003588:	200002c0 	.word	0x200002c0
 800358c:	20000150 	.word	0x20000150
 8003590:	20000142 	.word	0x20000142

08003594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003594:	b590      	push	{r4, r7, lr}
 8003596:	b09f      	sub	sp, #124	; 0x7c
 8003598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800359a:	2440      	movs	r4, #64	; 0x40
 800359c:	193b      	adds	r3, r7, r4
 800359e:	0018      	movs	r0, r3
 80035a0:	2338      	movs	r3, #56	; 0x38
 80035a2:	001a      	movs	r2, r3
 80035a4:	2100      	movs	r1, #0
 80035a6:	f007 fb06 	bl	800abb6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035aa:	232c      	movs	r3, #44	; 0x2c
 80035ac:	18fb      	adds	r3, r7, r3
 80035ae:	0018      	movs	r0, r3
 80035b0:	2314      	movs	r3, #20
 80035b2:	001a      	movs	r2, r3
 80035b4:	2100      	movs	r1, #0
 80035b6:	f007 fafe 	bl	800abb6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035ba:	1d3b      	adds	r3, r7, #4
 80035bc:	0018      	movs	r0, r3
 80035be:	2328      	movs	r3, #40	; 0x28
 80035c0:	001a      	movs	r2, r3
 80035c2:	2100      	movs	r1, #0
 80035c4:	f007 faf7 	bl	800abb6 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80035c8:	4b33      	ldr	r3, [pc, #204]	; (8003698 <SystemClock_Config+0x104>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a33      	ldr	r2, [pc, #204]	; (800369c <SystemClock_Config+0x108>)
 80035ce:	401a      	ands	r2, r3
 80035d0:	4b31      	ldr	r3, [pc, #196]	; (8003698 <SystemClock_Config+0x104>)
 80035d2:	2180      	movs	r1, #128	; 0x80
 80035d4:	0109      	lsls	r1, r1, #4
 80035d6:	430a      	orrs	r2, r1
 80035d8:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80035da:	f004 f9d1 	bl	8007980 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80035de:	4b30      	ldr	r3, [pc, #192]	; (80036a0 <SystemClock_Config+0x10c>)
 80035e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035e2:	4b2f      	ldr	r3, [pc, #188]	; (80036a0 <SystemClock_Config+0x10c>)
 80035e4:	492d      	ldr	r1, [pc, #180]	; (800369c <SystemClock_Config+0x108>)
 80035e6:	400a      	ands	r2, r1
 80035e8:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80035ea:	193b      	adds	r3, r7, r4
 80035ec:	2226      	movs	r2, #38	; 0x26
 80035ee:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80035f0:	193b      	adds	r3, r7, r4
 80035f2:	2280      	movs	r2, #128	; 0x80
 80035f4:	0052      	lsls	r2, r2, #1
 80035f6:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80035f8:	0021      	movs	r1, r4
 80035fa:	187b      	adds	r3, r7, r1
 80035fc:	2201      	movs	r2, #1
 80035fe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003600:	187b      	adds	r3, r7, r1
 8003602:	2210      	movs	r2, #16
 8003604:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003606:	187b      	adds	r3, r7, r1
 8003608:	2201      	movs	r2, #1
 800360a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800360c:	187b      	adds	r3, r7, r1
 800360e:	2202      	movs	r2, #2
 8003610:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003612:	187b      	adds	r3, r7, r1
 8003614:	2200      	movs	r2, #0
 8003616:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8003618:	187b      	adds	r3, r7, r1
 800361a:	2280      	movs	r2, #128	; 0x80
 800361c:	02d2      	lsls	r2, r2, #11
 800361e:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8003620:	187b      	adds	r3, r7, r1
 8003622:	2280      	movs	r2, #128	; 0x80
 8003624:	03d2      	lsls	r2, r2, #15
 8003626:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003628:	187b      	adds	r3, r7, r1
 800362a:	0018      	movs	r0, r3
 800362c:	f004 f9b6 	bl	800799c <HAL_RCC_OscConfig>
 8003630:	1e03      	subs	r3, r0, #0
 8003632:	d001      	beq.n	8003638 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8003634:	f000 fc78 	bl	8003f28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003638:	212c      	movs	r1, #44	; 0x2c
 800363a:	187b      	adds	r3, r7, r1
 800363c:	220f      	movs	r2, #15
 800363e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003640:	187b      	adds	r3, r7, r1
 8003642:	2203      	movs	r2, #3
 8003644:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003646:	187b      	adds	r3, r7, r1
 8003648:	2200      	movs	r2, #0
 800364a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800364c:	187b      	adds	r3, r7, r1
 800364e:	2200      	movs	r2, #0
 8003650:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003652:	187b      	adds	r3, r7, r1
 8003654:	2200      	movs	r2, #0
 8003656:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003658:	187b      	adds	r3, r7, r1
 800365a:	2101      	movs	r1, #1
 800365c:	0018      	movs	r0, r3
 800365e:	f004 fd6d 	bl	800813c <HAL_RCC_ClockConfig>
 8003662:	1e03      	subs	r3, r0, #0
 8003664:	d001      	beq.n	800366a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8003666:	f000 fc5f 	bl	8003f28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPTIM1;
 800366a:	1d3b      	adds	r3, r7, #4
 800366c:	22a0      	movs	r2, #160	; 0xa0
 800366e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003670:	1d3b      	adds	r3, r7, #4
 8003672:	2280      	movs	r2, #128	; 0x80
 8003674:	0252      	lsls	r2, r2, #9
 8003676:	605a      	str	r2, [r3, #4]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8003678:	1d3b      	adds	r3, r7, #4
 800367a:	22c0      	movs	r2, #192	; 0xc0
 800367c:	0312      	lsls	r2, r2, #12
 800367e:	621a      	str	r2, [r3, #32]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003680:	1d3b      	adds	r3, r7, #4
 8003682:	0018      	movs	r0, r3
 8003684:	f004 ff08 	bl	8008498 <HAL_RCCEx_PeriphCLKConfig>
 8003688:	1e03      	subs	r3, r0, #0
 800368a:	d001      	beq.n	8003690 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800368c:	f000 fc4c 	bl	8003f28 <Error_Handler>
  }
}
 8003690:	46c0      	nop			; (mov r8, r8)
 8003692:	46bd      	mov	sp, r7
 8003694:	b01f      	add	sp, #124	; 0x7c
 8003696:	bd90      	pop	{r4, r7, pc}
 8003698:	40007000 	.word	0x40007000
 800369c:	ffffe7ff 	.word	0xffffe7ff
 80036a0:	40021000 	.word	0x40021000

080036a4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80036aa:	003b      	movs	r3, r7
 80036ac:	0018      	movs	r0, r3
 80036ae:	2308      	movs	r3, #8
 80036b0:	001a      	movs	r2, r3
 80036b2:	2100      	movs	r1, #0
 80036b4:	f007 fa7f 	bl	800abb6 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 80036b8:	4b2a      	ldr	r3, [pc, #168]	; (8003764 <MX_ADC_Init+0xc0>)
 80036ba:	4a2b      	ldr	r2, [pc, #172]	; (8003768 <MX_ADC_Init+0xc4>)
 80036bc:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80036be:	4b29      	ldr	r3, [pc, #164]	; (8003764 <MX_ADC_Init+0xc0>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80036c4:	4b27      	ldr	r3, [pc, #156]	; (8003764 <MX_ADC_Init+0xc0>)
 80036c6:	2280      	movs	r2, #128	; 0x80
 80036c8:	05d2      	lsls	r2, r2, #23
 80036ca:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80036cc:	4b25      	ldr	r3, [pc, #148]	; (8003764 <MX_ADC_Init+0xc0>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_79CYCLES_5;
 80036d2:	4b24      	ldr	r3, [pc, #144]	; (8003764 <MX_ADC_Init+0xc0>)
 80036d4:	2206      	movs	r2, #6
 80036d6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80036d8:	4b22      	ldr	r3, [pc, #136]	; (8003764 <MX_ADC_Init+0xc0>)
 80036da:	2201      	movs	r2, #1
 80036dc:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80036de:	4b21      	ldr	r3, [pc, #132]	; (8003764 <MX_ADC_Init+0xc0>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80036e4:	4b1f      	ldr	r3, [pc, #124]	; (8003764 <MX_ADC_Init+0xc0>)
 80036e6:	2220      	movs	r2, #32
 80036e8:	2100      	movs	r1, #0
 80036ea:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80036ec:	4b1d      	ldr	r3, [pc, #116]	; (8003764 <MX_ADC_Init+0xc0>)
 80036ee:	2221      	movs	r2, #33	; 0x21
 80036f0:	2100      	movs	r1, #0
 80036f2:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80036f4:	4b1b      	ldr	r3, [pc, #108]	; (8003764 <MX_ADC_Init+0xc0>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80036fa:	4b1a      	ldr	r3, [pc, #104]	; (8003764 <MX_ADC_Init+0xc0>)
 80036fc:	22c2      	movs	r2, #194	; 0xc2
 80036fe:	32ff      	adds	r2, #255	; 0xff
 8003700:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003702:	4b18      	ldr	r3, [pc, #96]	; (8003764 <MX_ADC_Init+0xc0>)
 8003704:	222c      	movs	r2, #44	; 0x2c
 8003706:	2100      	movs	r1, #0
 8003708:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800370a:	4b16      	ldr	r3, [pc, #88]	; (8003764 <MX_ADC_Init+0xc0>)
 800370c:	2204      	movs	r2, #4
 800370e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003710:	4b14      	ldr	r3, [pc, #80]	; (8003764 <MX_ADC_Init+0xc0>)
 8003712:	2200      	movs	r2, #0
 8003714:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003716:	4b13      	ldr	r3, [pc, #76]	; (8003764 <MX_ADC_Init+0xc0>)
 8003718:	2200      	movs	r2, #0
 800371a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800371c:	4b11      	ldr	r3, [pc, #68]	; (8003764 <MX_ADC_Init+0xc0>)
 800371e:	2200      	movs	r2, #0
 8003720:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003722:	4b10      	ldr	r3, [pc, #64]	; (8003764 <MX_ADC_Init+0xc0>)
 8003724:	2200      	movs	r2, #0
 8003726:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003728:	4b0e      	ldr	r3, [pc, #56]	; (8003764 <MX_ADC_Init+0xc0>)
 800372a:	0018      	movs	r0, r3
 800372c:	f002 fec4 	bl	80064b8 <HAL_ADC_Init>
 8003730:	1e03      	subs	r3, r0, #0
 8003732:	d001      	beq.n	8003738 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8003734:	f000 fbf8 	bl	8003f28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003738:	003b      	movs	r3, r7
 800373a:	2201      	movs	r2, #1
 800373c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800373e:	003b      	movs	r3, r7
 8003740:	2280      	movs	r2, #128	; 0x80
 8003742:	0152      	lsls	r2, r2, #5
 8003744:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003746:	003a      	movs	r2, r7
 8003748:	4b06      	ldr	r3, [pc, #24]	; (8003764 <MX_ADC_Init+0xc0>)
 800374a:	0011      	movs	r1, r2
 800374c:	0018      	movs	r0, r3
 800374e:	f003 f97b 	bl	8006a48 <HAL_ADC_ConfigChannel>
 8003752:	1e03      	subs	r3, r0, #0
 8003754:	d001      	beq.n	800375a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8003756:	f000 fbe7 	bl	8003f28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	46bd      	mov	sp, r7
 800375e:	b002      	add	sp, #8
 8003760:	bd80      	pop	{r7, pc}
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	200002c0 	.word	0x200002c0
 8003768:	40012400 	.word	0x40012400

0800376c <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8003770:	4b0f      	ldr	r3, [pc, #60]	; (80037b0 <MX_LPTIM1_Init+0x44>)
 8003772:	4a10      	ldr	r2, [pc, #64]	; (80037b4 <MX_LPTIM1_Init+0x48>)
 8003774:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8003776:	4b0e      	ldr	r3, [pc, #56]	; (80037b0 <MX_LPTIM1_Init+0x44>)
 8003778:	2200      	movs	r2, #0
 800377a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800377c:	4b0c      	ldr	r3, [pc, #48]	; (80037b0 <MX_LPTIM1_Init+0x44>)
 800377e:	2200      	movs	r2, #0
 8003780:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8003782:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <MX_LPTIM1_Init+0x44>)
 8003784:	4a0c      	ldr	r2, [pc, #48]	; (80037b8 <MX_LPTIM1_Init+0x4c>)
 8003786:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8003788:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <MX_LPTIM1_Init+0x44>)
 800378a:	2200      	movs	r2, #0
 800378c:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800378e:	4b08      	ldr	r3, [pc, #32]	; (80037b0 <MX_LPTIM1_Init+0x44>)
 8003790:	2200      	movs	r2, #0
 8003792:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8003794:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <MX_LPTIM1_Init+0x44>)
 8003796:	2200      	movs	r2, #0
 8003798:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800379a:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <MX_LPTIM1_Init+0x44>)
 800379c:	0018      	movs	r0, r3
 800379e:	f003 ff95 	bl	80076cc <HAL_LPTIM_Init>
 80037a2:	1e03      	subs	r3, r0, #0
 80037a4:	d001      	beq.n	80037aa <MX_LPTIM1_Init+0x3e>
  {
    Error_Handler();
 80037a6:	f000 fbbf 	bl	8003f28 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	200001d8 	.word	0x200001d8
 80037b4:	40007c00 	.word	0x40007c00
 80037b8:	0000ffff 	.word	0x0000ffff

080037bc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b090      	sub	sp, #64	; 0x40
 80037c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80037c2:	232c      	movs	r3, #44	; 0x2c
 80037c4:	18fb      	adds	r3, r7, r3
 80037c6:	0018      	movs	r0, r3
 80037c8:	2314      	movs	r3, #20
 80037ca:	001a      	movs	r2, r3
 80037cc:	2100      	movs	r1, #0
 80037ce:	f007 f9f2 	bl	800abb6 <memset>
  RTC_DateTypeDef sDate = {0};
 80037d2:	2328      	movs	r3, #40	; 0x28
 80037d4:	18fb      	adds	r3, r7, r3
 80037d6:	2200      	movs	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80037da:	003b      	movs	r3, r7
 80037dc:	0018      	movs	r0, r3
 80037de:	2328      	movs	r3, #40	; 0x28
 80037e0:	001a      	movs	r2, r3
 80037e2:	2100      	movs	r1, #0
 80037e4:	f007 f9e7 	bl	800abb6 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80037e8:	4b4f      	ldr	r3, [pc, #316]	; (8003928 <MX_RTC_Init+0x16c>)
 80037ea:	4a50      	ldr	r2, [pc, #320]	; (800392c <MX_RTC_Init+0x170>)
 80037ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80037ee:	4b4e      	ldr	r3, [pc, #312]	; (8003928 <MX_RTC_Init+0x16c>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80037f4:	4b4c      	ldr	r3, [pc, #304]	; (8003928 <MX_RTC_Init+0x16c>)
 80037f6:	227f      	movs	r2, #127	; 0x7f
 80037f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80037fa:	4b4b      	ldr	r3, [pc, #300]	; (8003928 <MX_RTC_Init+0x16c>)
 80037fc:	22ff      	movs	r2, #255	; 0xff
 80037fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003800:	4b49      	ldr	r3, [pc, #292]	; (8003928 <MX_RTC_Init+0x16c>)
 8003802:	2200      	movs	r2, #0
 8003804:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003806:	4b48      	ldr	r3, [pc, #288]	; (8003928 <MX_RTC_Init+0x16c>)
 8003808:	2200      	movs	r2, #0
 800380a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800380c:	4b46      	ldr	r3, [pc, #280]	; (8003928 <MX_RTC_Init+0x16c>)
 800380e:	2200      	movs	r2, #0
 8003810:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003812:	4b45      	ldr	r3, [pc, #276]	; (8003928 <MX_RTC_Init+0x16c>)
 8003814:	2200      	movs	r2, #0
 8003816:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003818:	4b43      	ldr	r3, [pc, #268]	; (8003928 <MX_RTC_Init+0x16c>)
 800381a:	0018      	movs	r0, r3
 800381c:	f004 ffb0 	bl	8008780 <HAL_RTC_Init>
 8003820:	1e03      	subs	r3, r0, #0
 8003822:	d001      	beq.n	8003828 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8003824:	f000 fb80 	bl	8003f28 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 8003828:	212c      	movs	r1, #44	; 0x2c
 800382a:	187b      	adds	r3, r7, r1
 800382c:	2200      	movs	r2, #0
 800382e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8003830:	187b      	adds	r3, r7, r1
 8003832:	2200      	movs	r2, #0
 8003834:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8003836:	187b      	adds	r3, r7, r1
 8003838:	2200      	movs	r2, #0
 800383a:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800383c:	187b      	adds	r3, r7, r1
 800383e:	2200      	movs	r2, #0
 8003840:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003842:	187b      	adds	r3, r7, r1
 8003844:	2200      	movs	r2, #0
 8003846:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003848:	1879      	adds	r1, r7, r1
 800384a:	4b37      	ldr	r3, [pc, #220]	; (8003928 <MX_RTC_Init+0x16c>)
 800384c:	2200      	movs	r2, #0
 800384e:	0018      	movs	r0, r3
 8003850:	f005 f834 	bl	80088bc <HAL_RTC_SetTime>
 8003854:	1e03      	subs	r3, r0, #0
 8003856:	d001      	beq.n	800385c <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8003858:	f000 fb66 	bl	8003f28 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 800385c:	2128      	movs	r1, #40	; 0x28
 800385e:	187b      	adds	r3, r7, r1
 8003860:	2207      	movs	r2, #7
 8003862:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 8003864:	187b      	adds	r3, r7, r1
 8003866:	2212      	movs	r2, #18
 8003868:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 800386a:	187b      	adds	r3, r7, r1
 800386c:	2201      	movs	r2, #1
 800386e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 19;
 8003870:	187b      	adds	r3, r7, r1
 8003872:	2213      	movs	r2, #19
 8003874:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003876:	1879      	adds	r1, r7, r1
 8003878:	4b2b      	ldr	r3, [pc, #172]	; (8003928 <MX_RTC_Init+0x16c>)
 800387a:	2200      	movs	r2, #0
 800387c:	0018      	movs	r0, r3
 800387e:	f005 f93d 	bl	8008afc <HAL_RTC_SetDate>
 8003882:	1e03      	subs	r3, r0, #0
 8003884:	d001      	beq.n	800388a <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8003886:	f000 fb4f 	bl	8003f28 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 800388a:	003b      	movs	r3, r7
 800388c:	2200      	movs	r2, #0
 800388e:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8003890:	003b      	movs	r3, r7
 8003892:	2200      	movs	r2, #0
 8003894:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8003896:	003b      	movs	r3, r7
 8003898:	2200      	movs	r2, #0
 800389a:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 800389c:	003b      	movs	r3, r7
 800389e:	2200      	movs	r2, #0
 80038a0:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80038a2:	003b      	movs	r3, r7
 80038a4:	2200      	movs	r2, #0
 80038a6:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80038a8:	003b      	movs	r3, r7
 80038aa:	2200      	movs	r2, #0
 80038ac:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80038ae:	003b      	movs	r3, r7
 80038b0:	2200      	movs	r2, #0
 80038b2:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80038b4:	003b      	movs	r3, r7
 80038b6:	2200      	movs	r2, #0
 80038b8:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80038ba:	003b      	movs	r3, r7
 80038bc:	2200      	movs	r2, #0
 80038be:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80038c0:	003b      	movs	r3, r7
 80038c2:	2220      	movs	r2, #32
 80038c4:	2101      	movs	r1, #1
 80038c6:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80038c8:	003b      	movs	r3, r7
 80038ca:	2280      	movs	r2, #128	; 0x80
 80038cc:	0052      	lsls	r2, r2, #1
 80038ce:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80038d0:	0039      	movs	r1, r7
 80038d2:	4b15      	ldr	r3, [pc, #84]	; (8003928 <MX_RTC_Init+0x16c>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	0018      	movs	r0, r3
 80038d8:	f005 fa0c 	bl	8008cf4 <HAL_RTC_SetAlarm_IT>
 80038dc:	1e03      	subs	r3, r0, #0
 80038de:	d001      	beq.n	80038e4 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 80038e0:	f000 fb22 	bl	8003f28 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 1;
 80038e4:	003b      	movs	r3, r7
 80038e6:	2220      	movs	r2, #32
 80038e8:	2101      	movs	r1, #1
 80038ea:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_B;
 80038ec:	003b      	movs	r3, r7
 80038ee:	2280      	movs	r2, #128	; 0x80
 80038f0:	0092      	lsls	r2, r2, #2
 80038f2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80038f4:	0039      	movs	r1, r7
 80038f6:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <MX_RTC_Init+0x16c>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	0018      	movs	r0, r3
 80038fc:	f005 f9fa 	bl	8008cf4 <HAL_RTC_SetAlarm_IT>
 8003900:	1e03      	subs	r3, r0, #0
 8003902:	d001      	beq.n	8003908 <MX_RTC_Init+0x14c>
  {
    Error_Handler();
 8003904:	f000 fb10 	bl	8003f28 <Error_Handler>
  }
  /** Enable Calibrartion 
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 8003908:	2380      	movs	r3, #128	; 0x80
 800390a:	031a      	lsls	r2, r3, #12
 800390c:	4b06      	ldr	r3, [pc, #24]	; (8003928 <MX_RTC_Init+0x16c>)
 800390e:	0011      	movs	r1, r2
 8003910:	0018      	movs	r0, r3
 8003912:	f005 fd23 	bl	800935c <HAL_RTCEx_SetCalibrationOutPut>
 8003916:	1e03      	subs	r3, r0, #0
 8003918:	d001      	beq.n	800391e <MX_RTC_Init+0x162>
  {
    Error_Handler();
 800391a:	f000 fb05 	bl	8003f28 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	46bd      	mov	sp, r7
 8003922:	b010      	add	sp, #64	; 0x40
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	20000208 	.word	0x20000208
 800392c:	40002800 	.word	0x40002800

08003930 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003934:	4b19      	ldr	r3, [pc, #100]	; (800399c <MX_SPI1_Init+0x6c>)
 8003936:	4a1a      	ldr	r2, [pc, #104]	; (80039a0 <MX_SPI1_Init+0x70>)
 8003938:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800393a:	4b18      	ldr	r3, [pc, #96]	; (800399c <MX_SPI1_Init+0x6c>)
 800393c:	2282      	movs	r2, #130	; 0x82
 800393e:	0052      	lsls	r2, r2, #1
 8003940:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003942:	4b16      	ldr	r3, [pc, #88]	; (800399c <MX_SPI1_Init+0x6c>)
 8003944:	2200      	movs	r2, #0
 8003946:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003948:	4b14      	ldr	r3, [pc, #80]	; (800399c <MX_SPI1_Init+0x6c>)
 800394a:	2200      	movs	r2, #0
 800394c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800394e:	4b13      	ldr	r3, [pc, #76]	; (800399c <MX_SPI1_Init+0x6c>)
 8003950:	2200      	movs	r2, #0
 8003952:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003954:	4b11      	ldr	r3, [pc, #68]	; (800399c <MX_SPI1_Init+0x6c>)
 8003956:	2200      	movs	r2, #0
 8003958:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800395a:	4b10      	ldr	r3, [pc, #64]	; (800399c <MX_SPI1_Init+0x6c>)
 800395c:	2280      	movs	r2, #128	; 0x80
 800395e:	0092      	lsls	r2, r2, #2
 8003960:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003962:	4b0e      	ldr	r3, [pc, #56]	; (800399c <MX_SPI1_Init+0x6c>)
 8003964:	2200      	movs	r2, #0
 8003966:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003968:	4b0c      	ldr	r3, [pc, #48]	; (800399c <MX_SPI1_Init+0x6c>)
 800396a:	2200      	movs	r2, #0
 800396c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800396e:	4b0b      	ldr	r3, [pc, #44]	; (800399c <MX_SPI1_Init+0x6c>)
 8003970:	2200      	movs	r2, #0
 8003972:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003974:	4b09      	ldr	r3, [pc, #36]	; (800399c <MX_SPI1_Init+0x6c>)
 8003976:	2200      	movs	r2, #0
 8003978:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800397a:	4b08      	ldr	r3, [pc, #32]	; (800399c <MX_SPI1_Init+0x6c>)
 800397c:	2207      	movs	r2, #7
 800397e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003980:	4b06      	ldr	r3, [pc, #24]	; (800399c <MX_SPI1_Init+0x6c>)
 8003982:	0018      	movs	r0, r3
 8003984:	f005 fd32 	bl	80093ec <HAL_SPI_Init>
 8003988:	1e03      	subs	r3, r0, #0
 800398a:	d001      	beq.n	8003990 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800398c:	f000 facc 	bl	8003f28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  hspi1.hdmatx = &hdma_spi1_tx;
 8003990:	4b02      	ldr	r3, [pc, #8]	; (800399c <MX_SPI1_Init+0x6c>)
 8003992:	4a04      	ldr	r2, [pc, #16]	; (80039a4 <MX_SPI1_Init+0x74>)
 8003994:	649a      	str	r2, [r3, #72]	; 0x48
  /* USER CODE END SPI1_Init 2 */

}
 8003996:	46c0      	nop			; (mov r8, r8)
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	2000022c 	.word	0x2000022c
 80039a0:	40013000 	.word	0x40013000
 80039a4:	2000031c 	.word	0x2000031c

080039a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08a      	sub	sp, #40	; 0x28
 80039ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039ae:	2318      	movs	r3, #24
 80039b0:	18fb      	adds	r3, r7, r3
 80039b2:	0018      	movs	r0, r3
 80039b4:	2310      	movs	r3, #16
 80039b6:	001a      	movs	r2, r3
 80039b8:	2100      	movs	r1, #0
 80039ba:	f007 f8fc 	bl	800abb6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039be:	2310      	movs	r3, #16
 80039c0:	18fb      	adds	r3, r7, r3
 80039c2:	0018      	movs	r0, r3
 80039c4:	2308      	movs	r3, #8
 80039c6:	001a      	movs	r2, r3
 80039c8:	2100      	movs	r1, #0
 80039ca:	f007 f8f4 	bl	800abb6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039ce:	003b      	movs	r3, r7
 80039d0:	0018      	movs	r0, r3
 80039d2:	2310      	movs	r3, #16
 80039d4:	001a      	movs	r2, r3
 80039d6:	2100      	movs	r1, #0
 80039d8:	f007 f8ed 	bl	800abb6 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80039dc:	4b43      	ldr	r3, [pc, #268]	; (8003aec <MX_TIM2_Init+0x144>)
 80039de:	2280      	movs	r2, #128	; 0x80
 80039e0:	05d2      	lsls	r2, r2, #23
 80039e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80039e4:	4b41      	ldr	r3, [pc, #260]	; (8003aec <MX_TIM2_Init+0x144>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039ea:	4b40      	ldr	r3, [pc, #256]	; (8003aec <MX_TIM2_Init+0x144>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0x3FFF;
 80039f0:	4b3e      	ldr	r3, [pc, #248]	; (8003aec <MX_TIM2_Init+0x144>)
 80039f2:	4a3f      	ldr	r2, [pc, #252]	; (8003af0 <MX_TIM2_Init+0x148>)
 80039f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039f6:	4b3d      	ldr	r3, [pc, #244]	; (8003aec <MX_TIM2_Init+0x144>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039fc:	4b3b      	ldr	r3, [pc, #236]	; (8003aec <MX_TIM2_Init+0x144>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003a02:	4b3a      	ldr	r3, [pc, #232]	; (8003aec <MX_TIM2_Init+0x144>)
 8003a04:	0018      	movs	r0, r3
 8003a06:	f006 f9b7 	bl	8009d78 <HAL_TIM_Base_Init>
 8003a0a:	1e03      	subs	r3, r0, #0
 8003a0c:	d001      	beq.n	8003a12 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003a0e:	f000 fa8b 	bl	8003f28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8003a12:	2118      	movs	r1, #24
 8003a14:	187b      	adds	r3, r7, r1
 8003a16:	2280      	movs	r2, #128	; 0x80
 8003a18:	0192      	lsls	r2, r2, #6
 8003a1a:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8003a1c:	187b      	adds	r3, r7, r1
 8003a1e:	2200      	movs	r2, #0
 8003a20:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8003a22:	187b      	adds	r3, r7, r1
 8003a24:	2200      	movs	r2, #0
 8003a26:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8003a28:	187b      	adds	r3, r7, r1
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003a2e:	187a      	adds	r2, r7, r1
 8003a30:	4b2e      	ldr	r3, [pc, #184]	; (8003aec <MX_TIM2_Init+0x144>)
 8003a32:	0011      	movs	r1, r2
 8003a34:	0018      	movs	r0, r3
 8003a36:	f006 fd2b 	bl	800a490 <HAL_TIM_ConfigClockSource>
 8003a3a:	1e03      	subs	r3, r0, #0
 8003a3c:	d001      	beq.n	8003a42 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003a3e:	f000 fa73 	bl	8003f28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003a42:	4b2a      	ldr	r3, [pc, #168]	; (8003aec <MX_TIM2_Init+0x144>)
 8003a44:	0018      	movs	r0, r3
 8003a46:	f006 fb01 	bl	800a04c <HAL_TIM_PWM_Init>
 8003a4a:	1e03      	subs	r3, r0, #0
 8003a4c:	d001      	beq.n	8003a52 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8003a4e:	f000 fa6b 	bl	8003f28 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8003a52:	4b26      	ldr	r3, [pc, #152]	; (8003aec <MX_TIM2_Init+0x144>)
 8003a54:	0018      	movs	r0, r3
 8003a56:	f006 fa21 	bl	8009e9c <HAL_TIM_OC_Init>
 8003a5a:	1e03      	subs	r3, r0, #0
 8003a5c:	d001      	beq.n	8003a62 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8003a5e:	f000 fa63 	bl	8003f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a62:	2110      	movs	r1, #16
 8003a64:	187b      	adds	r3, r7, r1
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a6a:	187b      	adds	r3, r7, r1
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a70:	187a      	adds	r2, r7, r1
 8003a72:	4b1e      	ldr	r3, [pc, #120]	; (8003aec <MX_TIM2_Init+0x144>)
 8003a74:	0011      	movs	r1, r2
 8003a76:	0018      	movs	r0, r3
 8003a78:	f006 ffff 	bl	800aa7a <HAL_TIMEx_MasterConfigSynchronization>
 8003a7c:	1e03      	subs	r3, r0, #0
 8003a7e:	d001      	beq.n	8003a84 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8003a80:	f000 fa52 	bl	8003f28 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim2, TIM2_ETR_LSE) != HAL_OK)
 8003a84:	4b19      	ldr	r3, [pc, #100]	; (8003aec <MX_TIM2_Init+0x144>)
 8003a86:	2105      	movs	r1, #5
 8003a88:	0018      	movs	r0, r3
 8003a8a:	f007 f839 	bl	800ab00 <HAL_TIMEx_RemapConfig>
 8003a8e:	1e03      	subs	r3, r0, #0
 8003a90:	d001      	beq.n	8003a96 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8003a92:	f000 fa49 	bl	8003f28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a96:	003b      	movs	r3, r7
 8003a98:	2260      	movs	r2, #96	; 0x60
 8003a9a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003a9c:	003b      	movs	r3, r7
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003aa2:	003b      	movs	r3, r7
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003aa8:	003b      	movs	r3, r7
 8003aaa:	2200      	movs	r2, #0
 8003aac:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003aae:	0039      	movs	r1, r7
 8003ab0:	4b0e      	ldr	r3, [pc, #56]	; (8003aec <MX_TIM2_Init+0x144>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	f006 fc33 	bl	800a320 <HAL_TIM_PWM_ConfigChannel>
 8003aba:	1e03      	subs	r3, r0, #0
 8003abc:	d001      	beq.n	8003ac2 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8003abe:	f000 fa33 	bl	8003f28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003ac2:	003b      	movs	r3, r7
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ac8:	0039      	movs	r1, r7
 8003aca:	4b08      	ldr	r3, [pc, #32]	; (8003aec <MX_TIM2_Init+0x144>)
 8003acc:	2204      	movs	r2, #4
 8003ace:	0018      	movs	r0, r3
 8003ad0:	f006 fbd8 	bl	800a284 <HAL_TIM_OC_ConfigChannel>
 8003ad4:	1e03      	subs	r3, r0, #0
 8003ad6:	d001      	beq.n	8003adc <MX_TIM2_Init+0x134>
  {
    Error_Handler();
 8003ad8:	f000 fa26 	bl	8003f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003adc:	4b03      	ldr	r3, [pc, #12]	; (8003aec <MX_TIM2_Init+0x144>)
 8003ade:	0018      	movs	r0, r3
 8003ae0:	f000 fbb0 	bl	8004244 <HAL_TIM_MspPostInit>

}
 8003ae4:	46c0      	nop			; (mov r8, r8)
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	b00a      	add	sp, #40	; 0x28
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	20000284 	.word	0x20000284
 8003af0:	00003fff 	.word	0x00003fff

08003af4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003afa:	003b      	movs	r3, r7
 8003afc:	0018      	movs	r0, r3
 8003afe:	2308      	movs	r3, #8
 8003b00:	001a      	movs	r2, r3
 8003b02:	2100      	movs	r1, #0
 8003b04:	f007 f857 	bl	800abb6 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003b08:	4b15      	ldr	r3, [pc, #84]	; (8003b60 <MX_TIM6_Init+0x6c>)
 8003b0a:	4a16      	ldr	r2, [pc, #88]	; (8003b64 <MX_TIM6_Init+0x70>)
 8003b0c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0x40;
 8003b0e:	4b14      	ldr	r3, [pc, #80]	; (8003b60 <MX_TIM6_Init+0x6c>)
 8003b10:	2240      	movs	r2, #64	; 0x40
 8003b12:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b14:	4b12      	ldr	r3, [pc, #72]	; (8003b60 <MX_TIM6_Init+0x6c>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8003b1a:	4b11      	ldr	r3, [pc, #68]	; (8003b60 <MX_TIM6_Init+0x6c>)
 8003b1c:	4a12      	ldr	r2, [pc, #72]	; (8003b68 <MX_TIM6_Init+0x74>)
 8003b1e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b20:	4b0f      	ldr	r3, [pc, #60]	; (8003b60 <MX_TIM6_Init+0x6c>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003b26:	4b0e      	ldr	r3, [pc, #56]	; (8003b60 <MX_TIM6_Init+0x6c>)
 8003b28:	0018      	movs	r0, r3
 8003b2a:	f006 f925 	bl	8009d78 <HAL_TIM_Base_Init>
 8003b2e:	1e03      	subs	r3, r0, #0
 8003b30:	d001      	beq.n	8003b36 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003b32:	f000 f9f9 	bl	8003f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b36:	003b      	movs	r3, r7
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b3c:	003b      	movs	r3, r7
 8003b3e:	2200      	movs	r2, #0
 8003b40:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003b42:	003a      	movs	r2, r7
 8003b44:	4b06      	ldr	r3, [pc, #24]	; (8003b60 <MX_TIM6_Init+0x6c>)
 8003b46:	0011      	movs	r1, r2
 8003b48:	0018      	movs	r0, r3
 8003b4a:	f006 ff96 	bl	800aa7a <HAL_TIMEx_MasterConfigSynchronization>
 8003b4e:	1e03      	subs	r3, r0, #0
 8003b50:	d001      	beq.n	8003b56 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8003b52:	f000 f9e9 	bl	8003f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	b002      	add	sp, #8
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	46c0      	nop			; (mov r8, r8)
 8003b60:	20000154 	.word	0x20000154
 8003b64:	40001000 	.word	0x40001000
 8003b68:	0000ffff 	.word	0x0000ffff

08003b6c <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08a      	sub	sp, #40	; 0x28
 8003b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b72:	2318      	movs	r3, #24
 8003b74:	18fb      	adds	r3, r7, r3
 8003b76:	0018      	movs	r0, r3
 8003b78:	2310      	movs	r3, #16
 8003b7a:	001a      	movs	r2, r3
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	f007 f81a 	bl	800abb6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b82:	2310      	movs	r3, #16
 8003b84:	18fb      	adds	r3, r7, r3
 8003b86:	0018      	movs	r0, r3
 8003b88:	2308      	movs	r3, #8
 8003b8a:	001a      	movs	r2, r3
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	f007 f812 	bl	800abb6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b92:	003b      	movs	r3, r7
 8003b94:	0018      	movs	r0, r3
 8003b96:	2310      	movs	r3, #16
 8003b98:	001a      	movs	r2, r3
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	f007 f80b 	bl	800abb6 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8003ba0:	4b3b      	ldr	r3, [pc, #236]	; (8003c90 <MX_TIM21_Init+0x124>)
 8003ba2:	4a3c      	ldr	r2, [pc, #240]	; (8003c94 <MX_TIM21_Init+0x128>)
 8003ba4:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 8003ba6:	4b3a      	ldr	r3, [pc, #232]	; (8003c90 <MX_TIM21_Init+0x124>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bac:	4b38      	ldr	r3, [pc, #224]	; (8003c90 <MX_TIM21_Init+0x124>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 0x7FFF;
 8003bb2:	4b37      	ldr	r3, [pc, #220]	; (8003c90 <MX_TIM21_Init+0x124>)
 8003bb4:	4a38      	ldr	r2, [pc, #224]	; (8003c98 <MX_TIM21_Init+0x12c>)
 8003bb6:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bb8:	4b35      	ldr	r3, [pc, #212]	; (8003c90 <MX_TIM21_Init+0x124>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bbe:	4b34      	ldr	r3, [pc, #208]	; (8003c90 <MX_TIM21_Init+0x124>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8003bc4:	4b32      	ldr	r3, [pc, #200]	; (8003c90 <MX_TIM21_Init+0x124>)
 8003bc6:	0018      	movs	r0, r3
 8003bc8:	f006 f8d6 	bl	8009d78 <HAL_TIM_Base_Init>
 8003bcc:	1e03      	subs	r3, r0, #0
 8003bce:	d001      	beq.n	8003bd4 <MX_TIM21_Init+0x68>
  {
    Error_Handler();
 8003bd0:	f000 f9aa 	bl	8003f28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8003bd4:	2118      	movs	r1, #24
 8003bd6:	187b      	adds	r3, r7, r1
 8003bd8:	2280      	movs	r2, #128	; 0x80
 8003bda:	0192      	lsls	r2, r2, #6
 8003bdc:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8003bde:	187b      	adds	r3, r7, r1
 8003be0:	2200      	movs	r2, #0
 8003be2:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8003be4:	187b      	adds	r3, r7, r1
 8003be6:	2200      	movs	r2, #0
 8003be8:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8003bea:	187b      	adds	r3, r7, r1
 8003bec:	2200      	movs	r2, #0
 8003bee:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8003bf0:	187a      	adds	r2, r7, r1
 8003bf2:	4b27      	ldr	r3, [pc, #156]	; (8003c90 <MX_TIM21_Init+0x124>)
 8003bf4:	0011      	movs	r1, r2
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f006 fc4a 	bl	800a490 <HAL_TIM_ConfigClockSource>
 8003bfc:	1e03      	subs	r3, r0, #0
 8003bfe:	d001      	beq.n	8003c04 <MX_TIM21_Init+0x98>
  {
    Error_Handler();
 8003c00:	f000 f992 	bl	8003f28 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 8003c04:	4b22      	ldr	r3, [pc, #136]	; (8003c90 <MX_TIM21_Init+0x124>)
 8003c06:	0018      	movs	r0, r3
 8003c08:	f006 f948 	bl	8009e9c <HAL_TIM_OC_Init>
 8003c0c:	1e03      	subs	r3, r0, #0
 8003c0e:	d001      	beq.n	8003c14 <MX_TIM21_Init+0xa8>
  {
    Error_Handler();
 8003c10:	f000 f98a 	bl	8003f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c14:	2110      	movs	r1, #16
 8003c16:	187b      	adds	r3, r7, r1
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c1c:	187b      	adds	r3, r7, r1
 8003c1e:	2200      	movs	r2, #0
 8003c20:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8003c22:	187a      	adds	r2, r7, r1
 8003c24:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <MX_TIM21_Init+0x124>)
 8003c26:	0011      	movs	r1, r2
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f006 ff26 	bl	800aa7a <HAL_TIMEx_MasterConfigSynchronization>
 8003c2e:	1e03      	subs	r3, r0, #0
 8003c30:	d001      	beq.n	8003c36 <MX_TIM21_Init+0xca>
  {
    Error_Handler();
 8003c32:	f000 f979 	bl	8003f28 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim21, TIM21_ETR_LSE) != HAL_OK)
 8003c36:	4b16      	ldr	r3, [pc, #88]	; (8003c90 <MX_TIM21_Init+0x124>)
 8003c38:	2103      	movs	r1, #3
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	f006 ff60 	bl	800ab00 <HAL_TIMEx_RemapConfig>
 8003c40:	1e03      	subs	r3, r0, #0
 8003c42:	d001      	beq.n	8003c48 <MX_TIM21_Init+0xdc>
  {
    Error_Handler();
 8003c44:	f000 f970 	bl	8003f28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003c48:	003b      	movs	r3, r7
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003c4e:	003b      	movs	r3, r7
 8003c50:	2200      	movs	r2, #0
 8003c52:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c54:	003b      	movs	r3, r7
 8003c56:	2200      	movs	r2, #0
 8003c58:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c5a:	003b      	movs	r3, r7
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c60:	0039      	movs	r1, r7
 8003c62:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <MX_TIM21_Init+0x124>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	0018      	movs	r0, r3
 8003c68:	f006 fb0c 	bl	800a284 <HAL_TIM_OC_ConfigChannel>
 8003c6c:	1e03      	subs	r3, r0, #0
 8003c6e:	d001      	beq.n	8003c74 <MX_TIM21_Init+0x108>
  {
    Error_Handler();
 8003c70:	f000 f95a 	bl	8003f28 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c74:	0039      	movs	r1, r7
 8003c76:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <MX_TIM21_Init+0x124>)
 8003c78:	2204      	movs	r2, #4
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	f006 fb02 	bl	800a284 <HAL_TIM_OC_ConfigChannel>
 8003c80:	1e03      	subs	r3, r0, #0
 8003c82:	d001      	beq.n	8003c88 <MX_TIM21_Init+0x11c>
  {
    Error_Handler();
 8003c84:	f000 f950 	bl	8003f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8003c88:	46c0      	nop			; (mov r8, r8)
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	b00a      	add	sp, #40	; 0x28
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	20000364 	.word	0x20000364
 8003c94:	40010800 	.word	0x40010800
 8003c98:	00007fff 	.word	0x00007fff

08003c9c <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08a      	sub	sp, #40	; 0x28
 8003ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ca2:	2318      	movs	r3, #24
 8003ca4:	18fb      	adds	r3, r7, r3
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	2310      	movs	r3, #16
 8003caa:	001a      	movs	r2, r3
 8003cac:	2100      	movs	r1, #0
 8003cae:	f006 ff82 	bl	800abb6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cb2:	2310      	movs	r3, #16
 8003cb4:	18fb      	adds	r3, r7, r3
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	2308      	movs	r3, #8
 8003cba:	001a      	movs	r2, r3
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	f006 ff7a 	bl	800abb6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003cc2:	003b      	movs	r3, r7
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	2310      	movs	r3, #16
 8003cc8:	001a      	movs	r2, r3
 8003cca:	2100      	movs	r1, #0
 8003ccc:	f006 ff73 	bl	800abb6 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8003cd0:	4b37      	ldr	r3, [pc, #220]	; (8003db0 <MX_TIM22_Init+0x114>)
 8003cd2:	4a38      	ldr	r2, [pc, #224]	; (8003db4 <MX_TIM22_Init+0x118>)
 8003cd4:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0x400;
 8003cd6:	4b36      	ldr	r3, [pc, #216]	; (8003db0 <MX_TIM22_Init+0x114>)
 8003cd8:	2280      	movs	r2, #128	; 0x80
 8003cda:	00d2      	lsls	r2, r2, #3
 8003cdc:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cde:	4b34      	ldr	r3, [pc, #208]	; (8003db0 <MX_TIM22_Init+0x114>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 1919;
 8003ce4:	4b32      	ldr	r3, [pc, #200]	; (8003db0 <MX_TIM22_Init+0x114>)
 8003ce6:	4a34      	ldr	r2, [pc, #208]	; (8003db8 <MX_TIM22_Init+0x11c>)
 8003ce8:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cea:	4b31      	ldr	r3, [pc, #196]	; (8003db0 <MX_TIM22_Init+0x114>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cf0:	4b2f      	ldr	r3, [pc, #188]	; (8003db0 <MX_TIM22_Init+0x114>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 8003cf6:	4b2e      	ldr	r3, [pc, #184]	; (8003db0 <MX_TIM22_Init+0x114>)
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	f006 f83d 	bl	8009d78 <HAL_TIM_Base_Init>
 8003cfe:	1e03      	subs	r3, r0, #0
 8003d00:	d001      	beq.n	8003d06 <MX_TIM22_Init+0x6a>
  {
    Error_Handler();
 8003d02:	f000 f911 	bl	8003f28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8003d06:	2118      	movs	r1, #24
 8003d08:	187b      	adds	r3, r7, r1
 8003d0a:	2280      	movs	r2, #128	; 0x80
 8003d0c:	0192      	lsls	r2, r2, #6
 8003d0e:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8003d10:	187b      	adds	r3, r7, r1
 8003d12:	2200      	movs	r2, #0
 8003d14:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8003d16:	187b      	adds	r3, r7, r1
 8003d18:	2200      	movs	r2, #0
 8003d1a:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8003d1c:	187b      	adds	r3, r7, r1
 8003d1e:	2200      	movs	r2, #0
 8003d20:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 8003d22:	187a      	adds	r2, r7, r1
 8003d24:	4b22      	ldr	r3, [pc, #136]	; (8003db0 <MX_TIM22_Init+0x114>)
 8003d26:	0011      	movs	r1, r2
 8003d28:	0018      	movs	r0, r3
 8003d2a:	f006 fbb1 	bl	800a490 <HAL_TIM_ConfigClockSource>
 8003d2e:	1e03      	subs	r3, r0, #0
 8003d30:	d001      	beq.n	8003d36 <MX_TIM22_Init+0x9a>
  {
    Error_Handler();
 8003d32:	f000 f8f9 	bl	8003f28 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim22) != HAL_OK)
 8003d36:	4b1e      	ldr	r3, [pc, #120]	; (8003db0 <MX_TIM22_Init+0x114>)
 8003d38:	0018      	movs	r0, r3
 8003d3a:	f006 f8af 	bl	8009e9c <HAL_TIM_OC_Init>
 8003d3e:	1e03      	subs	r3, r0, #0
 8003d40:	d001      	beq.n	8003d46 <MX_TIM22_Init+0xaa>
  {
    Error_Handler();
 8003d42:	f000 f8f1 	bl	8003f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d46:	2110      	movs	r1, #16
 8003d48:	187b      	adds	r3, r7, r1
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d4e:	187b      	adds	r3, r7, r1
 8003d50:	2200      	movs	r2, #0
 8003d52:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8003d54:	187a      	adds	r2, r7, r1
 8003d56:	4b16      	ldr	r3, [pc, #88]	; (8003db0 <MX_TIM22_Init+0x114>)
 8003d58:	0011      	movs	r1, r2
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	f006 fe8d 	bl	800aa7a <HAL_TIMEx_MasterConfigSynchronization>
 8003d60:	1e03      	subs	r3, r0, #0
 8003d62:	d001      	beq.n	8003d68 <MX_TIM22_Init+0xcc>
  {
    Error_Handler();
 8003d64:	f000 f8e0 	bl	8003f28 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim22, TIM22_ETR_LSE) != HAL_OK)
 8003d68:	4b11      	ldr	r3, [pc, #68]	; (8003db0 <MX_TIM22_Init+0x114>)
 8003d6a:	2103      	movs	r1, #3
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	f006 fec7 	bl	800ab00 <HAL_TIMEx_RemapConfig>
 8003d72:	1e03      	subs	r3, r0, #0
 8003d74:	d001      	beq.n	8003d7a <MX_TIM22_Init+0xde>
  {
    Error_Handler();
 8003d76:	f000 f8d7 	bl	8003f28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003d7a:	003b      	movs	r3, r7
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003d80:	003b      	movs	r3, r7
 8003d82:	2200      	movs	r2, #0
 8003d84:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d86:	003b      	movs	r3, r7
 8003d88:	2200      	movs	r2, #0
 8003d8a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d8c:	003b      	movs	r3, r7
 8003d8e:	2200      	movs	r2, #0
 8003d90:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d92:	0039      	movs	r1, r7
 8003d94:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <MX_TIM22_Init+0x114>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	0018      	movs	r0, r3
 8003d9a:	f006 fa73 	bl	800a284 <HAL_TIM_OC_ConfigChannel>
 8003d9e:	1e03      	subs	r3, r0, #0
 8003da0:	d001      	beq.n	8003da6 <MX_TIM22_Init+0x10a>
  {
    Error_Handler();
 8003da2:	f000 f8c1 	bl	8003f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */

}
 8003da6:	46c0      	nop			; (mov r8, r8)
 8003da8:	46bd      	mov	sp, r7
 8003daa:	b00a      	add	sp, #40	; 0x28
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	46c0      	nop			; (mov r8, r8)
 8003db0:	2000019c 	.word	0x2000019c
 8003db4:	40011400 	.word	0x40011400
 8003db8:	0000077f 	.word	0x0000077f

08003dbc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003dc2:	4b0c      	ldr	r3, [pc, #48]	; (8003df4 <MX_DMA_Init+0x38>)
 8003dc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dc6:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <MX_DMA_Init+0x38>)
 8003dc8:	2101      	movs	r1, #1
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	631a      	str	r2, [r3, #48]	; 0x30
 8003dce:	4b09      	ldr	r3, [pc, #36]	; (8003df4 <MX_DMA_Init+0x38>)
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	607b      	str	r3, [r7, #4]
 8003dd8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8003dda:	2200      	movs	r2, #0
 8003ddc:	2100      	movs	r1, #0
 8003dde:	200a      	movs	r0, #10
 8003de0:	f003 f8ce 	bl	8006f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8003de4:	200a      	movs	r0, #10
 8003de6:	f003 f8e0 	bl	8006faa <HAL_NVIC_EnableIRQ>

}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	46bd      	mov	sp, r7
 8003dee:	b002      	add	sp, #8
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	46c0      	nop			; (mov r8, r8)
 8003df4:	40021000 	.word	0x40021000

08003df8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003df8:	b590      	push	{r4, r7, lr}
 8003dfa:	b089      	sub	sp, #36	; 0x24
 8003dfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dfe:	240c      	movs	r4, #12
 8003e00:	193b      	adds	r3, r7, r4
 8003e02:	0018      	movs	r0, r3
 8003e04:	2314      	movs	r3, #20
 8003e06:	001a      	movs	r2, r3
 8003e08:	2100      	movs	r1, #0
 8003e0a:	f006 fed4 	bl	800abb6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e0e:	4b41      	ldr	r3, [pc, #260]	; (8003f14 <MX_GPIO_Init+0x11c>)
 8003e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e12:	4b40      	ldr	r3, [pc, #256]	; (8003f14 <MX_GPIO_Init+0x11c>)
 8003e14:	2104      	movs	r1, #4
 8003e16:	430a      	orrs	r2, r1
 8003e18:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e1a:	4b3e      	ldr	r3, [pc, #248]	; (8003f14 <MX_GPIO_Init+0x11c>)
 8003e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1e:	2204      	movs	r2, #4
 8003e20:	4013      	ands	r3, r2
 8003e22:	60bb      	str	r3, [r7, #8]
 8003e24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e26:	4b3b      	ldr	r3, [pc, #236]	; (8003f14 <MX_GPIO_Init+0x11c>)
 8003e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e2a:	4b3a      	ldr	r3, [pc, #232]	; (8003f14 <MX_GPIO_Init+0x11c>)
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e32:	4b38      	ldr	r3, [pc, #224]	; (8003f14 <MX_GPIO_Init+0x11c>)
 8003e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e36:	2201      	movs	r2, #1
 8003e38:	4013      	ands	r3, r2
 8003e3a:	607b      	str	r3, [r7, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e3e:	4b35      	ldr	r3, [pc, #212]	; (8003f14 <MX_GPIO_Init+0x11c>)
 8003e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e42:	4b34      	ldr	r3, [pc, #208]	; (8003f14 <MX_GPIO_Init+0x11c>)
 8003e44:	2102      	movs	r1, #2
 8003e46:	430a      	orrs	r2, r1
 8003e48:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e4a:	4b32      	ldr	r3, [pc, #200]	; (8003f14 <MX_GPIO_Init+0x11c>)
 8003e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4e:	2202      	movs	r2, #2
 8003e50:	4013      	ands	r3, r2
 8003e52:	603b      	str	r3, [r7, #0]
 8003e54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5 
 8003e56:	4b30      	ldr	r3, [pc, #192]	; (8003f18 <MX_GPIO_Init+0x120>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	21ab      	movs	r1, #171	; 0xab
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	f003 fbea 	bl	8007636 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8003e62:	4b2d      	ldr	r3, [pc, #180]	; (8003f18 <MX_GPIO_Init+0x120>)
 8003e64:	2201      	movs	r2, #1
 8003e66:	2110      	movs	r1, #16
 8003e68:	0018      	movs	r0, r3
 8003e6a:	f003 fbe4 	bl	8007636 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6, GPIO_PIN_RESET);
 8003e6e:	4b2b      	ldr	r3, [pc, #172]	; (8003f1c <MX_GPIO_Init+0x124>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	2143      	movs	r1, #67	; 0x43
 8003e74:	0018      	movs	r0, r3
 8003e76:	f003 fbde 	bl	8007636 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC3 PC4 
                           PC5 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4 
 8003e7a:	0021      	movs	r1, r4
 8003e7c:	187b      	adds	r3, r7, r1
 8003e7e:	22bb      	movs	r2, #187	; 0xbb
 8003e80:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e82:	187b      	adds	r3, r7, r1
 8003e84:	2201      	movs	r2, #1
 8003e86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e88:	187b      	adds	r3, r7, r1
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e8e:	187b      	adds	r3, r7, r1
 8003e90:	2200      	movs	r2, #0
 8003e92:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e94:	000c      	movs	r4, r1
 8003e96:	187b      	adds	r3, r7, r1
 8003e98:	4a1f      	ldr	r2, [pc, #124]	; (8003f18 <MX_GPIO_Init+0x120>)
 8003e9a:	0019      	movs	r1, r3
 8003e9c:	0010      	movs	r0, r2
 8003e9e:	f003 fa2f 	bl	8007300 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6;
 8003ea2:	0021      	movs	r1, r4
 8003ea4:	187b      	adds	r3, r7, r1
 8003ea6:	2243      	movs	r2, #67	; 0x43
 8003ea8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003eaa:	187b      	adds	r3, r7, r1
 8003eac:	2201      	movs	r2, #1
 8003eae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb0:	187b      	adds	r3, r7, r1
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eb6:	187b      	adds	r3, r7, r1
 8003eb8:	2200      	movs	r2, #0
 8003eba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ebc:	000c      	movs	r4, r1
 8003ebe:	187b      	adds	r3, r7, r1
 8003ec0:	4a16      	ldr	r2, [pc, #88]	; (8003f1c <MX_GPIO_Init+0x124>)
 8003ec2:	0019      	movs	r1, r3
 8003ec4:	0010      	movs	r0, r2
 8003ec6:	f003 fa1b 	bl	8007300 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003eca:	0021      	movs	r1, r4
 8003ecc:	187b      	adds	r3, r7, r1
 8003ece:	4a14      	ldr	r2, [pc, #80]	; (8003f20 <MX_GPIO_Init+0x128>)
 8003ed0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ed2:	187b      	adds	r3, r7, r1
 8003ed4:	4a13      	ldr	r2, [pc, #76]	; (8003f24 <MX_GPIO_Init+0x12c>)
 8003ed6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003ed8:	187b      	adds	r3, r7, r1
 8003eda:	2202      	movs	r2, #2
 8003edc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ede:	187b      	adds	r3, r7, r1
 8003ee0:	4a0e      	ldr	r2, [pc, #56]	; (8003f1c <MX_GPIO_Init+0x124>)
 8003ee2:	0019      	movs	r1, r3
 8003ee4:	0010      	movs	r0, r2
 8003ee6:	f003 fa0b 	bl	8007300 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8003eea:	2200      	movs	r2, #0
 8003eec:	2100      	movs	r1, #0
 8003eee:	2006      	movs	r0, #6
 8003ef0:	f003 f846 	bl	8006f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8003ef4:	2006      	movs	r0, #6
 8003ef6:	f003 f858 	bl	8006faa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003efa:	2200      	movs	r2, #0
 8003efc:	2100      	movs	r1, #0
 8003efe:	2007      	movs	r0, #7
 8003f00:	f003 f83e 	bl	8006f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003f04:	2007      	movs	r0, #7
 8003f06:	f003 f850 	bl	8006faa <HAL_NVIC_EnableIRQ>

}
 8003f0a:	46c0      	nop			; (mov r8, r8)
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	b009      	add	sp, #36	; 0x24
 8003f10:	bd90      	pop	{r4, r7, pc}
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	40021000 	.word	0x40021000
 8003f18:	50000800 	.word	0x50000800
 8003f1c:	50000400 	.word	0x50000400
 8003f20:	0000e004 	.word	0x0000e004
 8003f24:	10110000 	.word	0x10110000

08003f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003f2c:	46c0      	nop			; (mov r8, r8)
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
	...

08003f34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f38:	4b07      	ldr	r3, [pc, #28]	; (8003f58 <HAL_MspInit+0x24>)
 8003f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f3c:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <HAL_MspInit+0x24>)
 8003f3e:	2101      	movs	r1, #1
 8003f40:	430a      	orrs	r2, r1
 8003f42:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f44:	4b04      	ldr	r3, [pc, #16]	; (8003f58 <HAL_MspInit+0x24>)
 8003f46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f48:	4b03      	ldr	r3, [pc, #12]	; (8003f58 <HAL_MspInit+0x24>)
 8003f4a:	2180      	movs	r1, #128	; 0x80
 8003f4c:	0549      	lsls	r1, r1, #21
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f52:	46c0      	nop			; (mov r8, r8)
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40021000 	.word	0x40021000

08003f5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b088      	sub	sp, #32
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f64:	230c      	movs	r3, #12
 8003f66:	18fb      	adds	r3, r7, r3
 8003f68:	0018      	movs	r0, r3
 8003f6a:	2314      	movs	r3, #20
 8003f6c:	001a      	movs	r2, r3
 8003f6e:	2100      	movs	r1, #0
 8003f70:	f006 fe21 	bl	800abb6 <memset>
  if(hadc->Instance==ADC1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a15      	ldr	r2, [pc, #84]	; (8003fd0 <HAL_ADC_MspInit+0x74>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d123      	bne.n	8003fc6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f7e:	4b15      	ldr	r3, [pc, #84]	; (8003fd4 <HAL_ADC_MspInit+0x78>)
 8003f80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f82:	4b14      	ldr	r3, [pc, #80]	; (8003fd4 <HAL_ADC_MspInit+0x78>)
 8003f84:	2180      	movs	r1, #128	; 0x80
 8003f86:	0089      	lsls	r1, r1, #2
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f8c:	4b11      	ldr	r3, [pc, #68]	; (8003fd4 <HAL_ADC_MspInit+0x78>)
 8003f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f90:	4b10      	ldr	r3, [pc, #64]	; (8003fd4 <HAL_ADC_MspInit+0x78>)
 8003f92:	2101      	movs	r1, #1
 8003f94:	430a      	orrs	r2, r1
 8003f96:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f98:	4b0e      	ldr	r3, [pc, #56]	; (8003fd4 <HAL_ADC_MspInit+0x78>)
 8003f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003fa4:	210c      	movs	r1, #12
 8003fa6:	187b      	adds	r3, r7, r1
 8003fa8:	2201      	movs	r2, #1
 8003faa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003fac:	187b      	adds	r3, r7, r1
 8003fae:	2203      	movs	r2, #3
 8003fb0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb2:	187b      	adds	r3, r7, r1
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fb8:	187a      	adds	r2, r7, r1
 8003fba:	23a0      	movs	r3, #160	; 0xa0
 8003fbc:	05db      	lsls	r3, r3, #23
 8003fbe:	0011      	movs	r1, r2
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	f003 f99d 	bl	8007300 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	b008      	add	sp, #32
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	46c0      	nop			; (mov r8, r8)
 8003fd0:	40012400 	.word	0x40012400
 8003fd4:	40021000 	.word	0x40021000

08003fd8 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  if(hlptim->Instance==LPTIM1)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a0a      	ldr	r2, [pc, #40]	; (8004010 <HAL_LPTIM_MspInit+0x38>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d10e      	bne.n	8004008 <HAL_LPTIM_MspInit+0x30>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8003fea:	4b0a      	ldr	r3, [pc, #40]	; (8004014 <HAL_LPTIM_MspInit+0x3c>)
 8003fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fee:	4b09      	ldr	r3, [pc, #36]	; (8004014 <HAL_LPTIM_MspInit+0x3c>)
 8003ff0:	2180      	movs	r1, #128	; 0x80
 8003ff2:	0609      	lsls	r1, r1, #24
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	639a      	str	r2, [r3, #56]	; 0x38
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	200d      	movs	r0, #13
 8003ffe:	f002 ffbf 	bl	8006f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8004002:	200d      	movs	r0, #13
 8004004:	f002 ffd1 	bl	8006faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8004008:	46c0      	nop			; (mov r8, r8)
 800400a:	46bd      	mov	sp, r7
 800400c:	b002      	add	sp, #8
 800400e:	bd80      	pop	{r7, pc}
 8004010:	40007c00 	.word	0x40007c00
 8004014:	40021000 	.word	0x40021000

08004018 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b088      	sub	sp, #32
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004020:	230c      	movs	r3, #12
 8004022:	18fb      	adds	r3, r7, r3
 8004024:	0018      	movs	r0, r3
 8004026:	2314      	movs	r3, #20
 8004028:	001a      	movs	r2, r3
 800402a:	2100      	movs	r1, #0
 800402c:	f006 fdc3 	bl	800abb6 <memset>
  if(hrtc->Instance==RTC)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a14      	ldr	r2, [pc, #80]	; (8004088 <HAL_RTC_MspInit+0x70>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d121      	bne.n	800407e <HAL_RTC_MspInit+0x66>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800403a:	4b14      	ldr	r3, [pc, #80]	; (800408c <HAL_RTC_MspInit+0x74>)
 800403c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800403e:	4b13      	ldr	r3, [pc, #76]	; (800408c <HAL_RTC_MspInit+0x74>)
 8004040:	2180      	movs	r1, #128	; 0x80
 8004042:	02c9      	lsls	r1, r1, #11
 8004044:	430a      	orrs	r2, r1
 8004046:	651a      	str	r2, [r3, #80]	; 0x50
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004048:	4b10      	ldr	r3, [pc, #64]	; (800408c <HAL_RTC_MspInit+0x74>)
 800404a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404c:	4b0f      	ldr	r3, [pc, #60]	; (800408c <HAL_RTC_MspInit+0x74>)
 800404e:	2104      	movs	r1, #4
 8004050:	430a      	orrs	r2, r1
 8004052:	62da      	str	r2, [r3, #44]	; 0x2c
 8004054:	4b0d      	ldr	r3, [pc, #52]	; (800408c <HAL_RTC_MspInit+0x74>)
 8004056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004058:	2204      	movs	r2, #4
 800405a:	4013      	ands	r3, r2
 800405c:	60bb      	str	r3, [r7, #8]
 800405e:	68bb      	ldr	r3, [r7, #8]
    /**RTC GPIO Configuration    
    PC13     ------> RTC_OUT_CALIB 
    */
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004060:	230c      	movs	r3, #12
 8004062:	18fb      	adds	r3, r7, r3
 8004064:	4a0a      	ldr	r2, [pc, #40]	; (8004090 <HAL_RTC_MspInit+0x78>)
 8004066:	0019      	movs	r1, r3
 8004068:	0010      	movs	r0, r2
 800406a:	f003 f949 	bl	8007300 <HAL_GPIO_Init>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800406e:	2200      	movs	r2, #0
 8004070:	2100      	movs	r1, #0
 8004072:	2002      	movs	r0, #2
 8004074:	f002 ff84 	bl	8006f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8004078:	2002      	movs	r0, #2
 800407a:	f002 ff96 	bl	8006faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800407e:	46c0      	nop			; (mov r8, r8)
 8004080:	46bd      	mov	sp, r7
 8004082:	b008      	add	sp, #32
 8004084:	bd80      	pop	{r7, pc}
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	40002800 	.word	0x40002800
 800408c:	40021000 	.word	0x40021000
 8004090:	50000800 	.word	0x50000800

08004094 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b088      	sub	sp, #32
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800409c:	230c      	movs	r3, #12
 800409e:	18fb      	adds	r3, r7, r3
 80040a0:	0018      	movs	r0, r3
 80040a2:	2314      	movs	r3, #20
 80040a4:	001a      	movs	r2, r3
 80040a6:	2100      	movs	r1, #0
 80040a8:	f006 fd85 	bl	800abb6 <memset>
  if(hspi->Instance==SPI1)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a30      	ldr	r2, [pc, #192]	; (8004174 <HAL_SPI_MspInit+0xe0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d15a      	bne.n	800416c <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80040b6:	4b30      	ldr	r3, [pc, #192]	; (8004178 <HAL_SPI_MspInit+0xe4>)
 80040b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040ba:	4b2f      	ldr	r3, [pc, #188]	; (8004178 <HAL_SPI_MspInit+0xe4>)
 80040bc:	2180      	movs	r1, #128	; 0x80
 80040be:	0149      	lsls	r1, r1, #5
 80040c0:	430a      	orrs	r2, r1
 80040c2:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040c4:	4b2c      	ldr	r3, [pc, #176]	; (8004178 <HAL_SPI_MspInit+0xe4>)
 80040c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c8:	4b2b      	ldr	r3, [pc, #172]	; (8004178 <HAL_SPI_MspInit+0xe4>)
 80040ca:	2101      	movs	r1, #1
 80040cc:	430a      	orrs	r2, r1
 80040ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80040d0:	4b29      	ldr	r3, [pc, #164]	; (8004178 <HAL_SPI_MspInit+0xe4>)
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	2201      	movs	r2, #1
 80040d6:	4013      	ands	r3, r2
 80040d8:	60bb      	str	r3, [r7, #8]
 80040da:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80040dc:	210c      	movs	r1, #12
 80040de:	187b      	adds	r3, r7, r1
 80040e0:	22a0      	movs	r2, #160	; 0xa0
 80040e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e4:	187b      	adds	r3, r7, r1
 80040e6:	2202      	movs	r2, #2
 80040e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ea:	187b      	adds	r3, r7, r1
 80040ec:	2200      	movs	r2, #0
 80040ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040f0:	187b      	adds	r3, r7, r1
 80040f2:	2203      	movs	r2, #3
 80040f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80040f6:	187b      	adds	r3, r7, r1
 80040f8:	2200      	movs	r2, #0
 80040fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040fc:	187a      	adds	r2, r7, r1
 80040fe:	23a0      	movs	r3, #160	; 0xa0
 8004100:	05db      	lsls	r3, r3, #23
 8004102:	0011      	movs	r1, r2
 8004104:	0018      	movs	r0, r3
 8004106:	f003 f8fb 	bl	8007300 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800410a:	4b1c      	ldr	r3, [pc, #112]	; (800417c <HAL_SPI_MspInit+0xe8>)
 800410c:	4a1c      	ldr	r2, [pc, #112]	; (8004180 <HAL_SPI_MspInit+0xec>)
 800410e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8004110:	4b1a      	ldr	r3, [pc, #104]	; (800417c <HAL_SPI_MspInit+0xe8>)
 8004112:	2201      	movs	r2, #1
 8004114:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004116:	4b19      	ldr	r3, [pc, #100]	; (800417c <HAL_SPI_MspInit+0xe8>)
 8004118:	2210      	movs	r2, #16
 800411a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800411c:	4b17      	ldr	r3, [pc, #92]	; (800417c <HAL_SPI_MspInit+0xe8>)
 800411e:	2200      	movs	r2, #0
 8004120:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004122:	4b16      	ldr	r3, [pc, #88]	; (800417c <HAL_SPI_MspInit+0xe8>)
 8004124:	2280      	movs	r2, #128	; 0x80
 8004126:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004128:	4b14      	ldr	r3, [pc, #80]	; (800417c <HAL_SPI_MspInit+0xe8>)
 800412a:	2200      	movs	r2, #0
 800412c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800412e:	4b13      	ldr	r3, [pc, #76]	; (800417c <HAL_SPI_MspInit+0xe8>)
 8004130:	2200      	movs	r2, #0
 8004132:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004134:	4b11      	ldr	r3, [pc, #68]	; (800417c <HAL_SPI_MspInit+0xe8>)
 8004136:	2200      	movs	r2, #0
 8004138:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800413a:	4b10      	ldr	r3, [pc, #64]	; (800417c <HAL_SPI_MspInit+0xe8>)
 800413c:	2200      	movs	r2, #0
 800413e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004140:	4b0e      	ldr	r3, [pc, #56]	; (800417c <HAL_SPI_MspInit+0xe8>)
 8004142:	0018      	movs	r0, r3
 8004144:	f002 ff6e 	bl	8007024 <HAL_DMA_Init>
 8004148:	1e03      	subs	r3, r0, #0
 800414a:	d001      	beq.n	8004150 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 800414c:	f7ff feec 	bl	8003f28 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a0a      	ldr	r2, [pc, #40]	; (800417c <HAL_SPI_MspInit+0xe8>)
 8004154:	649a      	str	r2, [r3, #72]	; 0x48
 8004156:	4b09      	ldr	r3, [pc, #36]	; (800417c <HAL_SPI_MspInit+0xe8>)
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800415c:	2200      	movs	r2, #0
 800415e:	2100      	movs	r1, #0
 8004160:	2019      	movs	r0, #25
 8004162:	f002 ff0d 	bl	8006f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004166:	2019      	movs	r0, #25
 8004168:	f002 ff1f 	bl	8006faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800416c:	46c0      	nop			; (mov r8, r8)
 800416e:	46bd      	mov	sp, r7
 8004170:	b008      	add	sp, #32
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40013000 	.word	0x40013000
 8004178:	40021000 	.word	0x40021000
 800417c:	2000031c 	.word	0x2000031c
 8004180:	40020030 	.word	0x40020030

08004184 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	2380      	movs	r3, #128	; 0x80
 8004192:	05db      	lsls	r3, r3, #23
 8004194:	429a      	cmp	r2, r3
 8004196:	d10e      	bne.n	80041b6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004198:	4b26      	ldr	r3, [pc, #152]	; (8004234 <HAL_TIM_Base_MspInit+0xb0>)
 800419a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800419c:	4b25      	ldr	r3, [pc, #148]	; (8004234 <HAL_TIM_Base_MspInit+0xb0>)
 800419e:	2101      	movs	r1, #1
 80041a0:	430a      	orrs	r2, r1
 80041a2:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80041a4:	2200      	movs	r2, #0
 80041a6:	2100      	movs	r1, #0
 80041a8:	200f      	movs	r0, #15
 80041aa:	f002 fee9 	bl	8006f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80041ae:	200f      	movs	r0, #15
 80041b0:	f002 fefb 	bl	8006faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 80041b4:	e03a      	b.n	800422c <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM6)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a1f      	ldr	r2, [pc, #124]	; (8004238 <HAL_TIM_Base_MspInit+0xb4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d10e      	bne.n	80041de <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80041c0:	4b1c      	ldr	r3, [pc, #112]	; (8004234 <HAL_TIM_Base_MspInit+0xb0>)
 80041c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041c4:	4b1b      	ldr	r3, [pc, #108]	; (8004234 <HAL_TIM_Base_MspInit+0xb0>)
 80041c6:	2110      	movs	r1, #16
 80041c8:	430a      	orrs	r2, r1
 80041ca:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80041cc:	2200      	movs	r2, #0
 80041ce:	2100      	movs	r1, #0
 80041d0:	2011      	movs	r0, #17
 80041d2:	f002 fed5 	bl	8006f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80041d6:	2011      	movs	r0, #17
 80041d8:	f002 fee7 	bl	8006faa <HAL_NVIC_EnableIRQ>
}
 80041dc:	e026      	b.n	800422c <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM21)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a16      	ldr	r2, [pc, #88]	; (800423c <HAL_TIM_Base_MspInit+0xb8>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d10e      	bne.n	8004206 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM21_CLK_ENABLE();
 80041e8:	4b12      	ldr	r3, [pc, #72]	; (8004234 <HAL_TIM_Base_MspInit+0xb0>)
 80041ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041ec:	4b11      	ldr	r3, [pc, #68]	; (8004234 <HAL_TIM_Base_MspInit+0xb0>)
 80041ee:	2104      	movs	r1, #4
 80041f0:	430a      	orrs	r2, r1
 80041f2:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 80041f4:	2200      	movs	r2, #0
 80041f6:	2100      	movs	r1, #0
 80041f8:	2014      	movs	r0, #20
 80041fa:	f002 fec1 	bl	8006f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 80041fe:	2014      	movs	r0, #20
 8004200:	f002 fed3 	bl	8006faa <HAL_NVIC_EnableIRQ>
}
 8004204:	e012      	b.n	800422c <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM22)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a0d      	ldr	r2, [pc, #52]	; (8004240 <HAL_TIM_Base_MspInit+0xbc>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d10d      	bne.n	800422c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8004210:	4b08      	ldr	r3, [pc, #32]	; (8004234 <HAL_TIM_Base_MspInit+0xb0>)
 8004212:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004214:	4b07      	ldr	r3, [pc, #28]	; (8004234 <HAL_TIM_Base_MspInit+0xb0>)
 8004216:	2120      	movs	r1, #32
 8004218:	430a      	orrs	r2, r1
 800421a:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM22_IRQn, 0, 0);
 800421c:	2200      	movs	r2, #0
 800421e:	2100      	movs	r1, #0
 8004220:	2016      	movs	r0, #22
 8004222:	f002 fead 	bl	8006f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
 8004226:	2016      	movs	r0, #22
 8004228:	f002 febf 	bl	8006faa <HAL_NVIC_EnableIRQ>
}
 800422c:	46c0      	nop			; (mov r8, r8)
 800422e:	46bd      	mov	sp, r7
 8004230:	b002      	add	sp, #8
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40021000 	.word	0x40021000
 8004238:	40001000 	.word	0x40001000
 800423c:	40010800 	.word	0x40010800
 8004240:	40011400 	.word	0x40011400

08004244 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b088      	sub	sp, #32
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800424c:	230c      	movs	r3, #12
 800424e:	18fb      	adds	r3, r7, r3
 8004250:	0018      	movs	r0, r3
 8004252:	2314      	movs	r3, #20
 8004254:	001a      	movs	r2, r3
 8004256:	2100      	movs	r1, #0
 8004258:	f006 fcad 	bl	800abb6 <memset>
  if(htim->Instance==TIM2)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	2380      	movs	r3, #128	; 0x80
 8004262:	05db      	lsls	r3, r3, #23
 8004264:	429a      	cmp	r2, r3
 8004266:	d123      	bne.n	80042b0 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004268:	4b13      	ldr	r3, [pc, #76]	; (80042b8 <HAL_TIM_MspPostInit+0x74>)
 800426a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800426c:	4b12      	ldr	r3, [pc, #72]	; (80042b8 <HAL_TIM_MspPostInit+0x74>)
 800426e:	2101      	movs	r1, #1
 8004270:	430a      	orrs	r2, r1
 8004272:	62da      	str	r2, [r3, #44]	; 0x2c
 8004274:	4b10      	ldr	r3, [pc, #64]	; (80042b8 <HAL_TIM_MspPostInit+0x74>)
 8004276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004278:	2201      	movs	r2, #1
 800427a:	4013      	ands	r3, r2
 800427c:	60bb      	str	r3, [r7, #8]
 800427e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004280:	210c      	movs	r1, #12
 8004282:	187b      	adds	r3, r7, r1
 8004284:	2280      	movs	r2, #128	; 0x80
 8004286:	0212      	lsls	r2, r2, #8
 8004288:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800428a:	187b      	adds	r3, r7, r1
 800428c:	2202      	movs	r2, #2
 800428e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004290:	187b      	adds	r3, r7, r1
 8004292:	2200      	movs	r2, #0
 8004294:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004296:	187b      	adds	r3, r7, r1
 8004298:	2200      	movs	r2, #0
 800429a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 800429c:	187b      	adds	r3, r7, r1
 800429e:	2205      	movs	r2, #5
 80042a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042a2:	187a      	adds	r2, r7, r1
 80042a4:	23a0      	movs	r3, #160	; 0xa0
 80042a6:	05db      	lsls	r3, r3, #23
 80042a8:	0011      	movs	r1, r2
 80042aa:	0018      	movs	r0, r3
 80042ac:	f003 f828 	bl	8007300 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80042b0:	46c0      	nop			; (mov r8, r8)
 80042b2:	46bd      	mov	sp, r7
 80042b4:	b008      	add	sp, #32
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40021000 	.word	0x40021000

080042bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80042c0:	46c0      	nop			; (mov r8, r8)
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042ca:	e7fe      	b.n	80042ca <HardFault_Handler+0x4>

080042cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80042d0:	46c0      	nop			; (mov r8, r8)
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042e4:	f002 f8b4 	bl	8006450 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042e8:	46c0      	nop			; (mov r8, r8)
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
	...

080042f0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80042f4:	4b03      	ldr	r3, [pc, #12]	; (8004304 <RTC_IRQHandler+0x14>)
 80042f6:	0018      	movs	r0, r3
 80042f8:	f004 fee8 	bl	80090cc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80042fc:	46c0      	nop			; (mov r8, r8)
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	46c0      	nop			; (mov r8, r8)
 8004304:	20000208 	.word	0x20000208

08004308 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800430c:	2004      	movs	r0, #4
 800430e:	f003 f9c1 	bl	8007694 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8004312:	46c0      	nop			; (mov r8, r8)
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800431c:	2380      	movs	r3, #128	; 0x80
 800431e:	019b      	lsls	r3, r3, #6
 8004320:	0018      	movs	r0, r3
 8004322:	f003 f9b7 	bl	8007694 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004326:	2380      	movs	r3, #128	; 0x80
 8004328:	01db      	lsls	r3, r3, #7
 800432a:	0018      	movs	r0, r3
 800432c:	f003 f9b2 	bl	8007694 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004330:	2380      	movs	r3, #128	; 0x80
 8004332:	021b      	lsls	r3, r3, #8
 8004334:	0018      	movs	r0, r3
 8004336:	f003 f9ad 	bl	8007694 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800433a:	46c0      	nop			; (mov r8, r8)
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004344:	4b03      	ldr	r3, [pc, #12]	; (8004354 <DMA1_Channel2_3_IRQHandler+0x14>)
 8004346:	0018      	movs	r0, r3
 8004348:	f002 ff2c 	bl	80071a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800434c:	46c0      	nop			; (mov r8, r8)
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	2000031c 	.word	0x2000031c

08004358 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 800435c:	4b03      	ldr	r3, [pc, #12]	; (800436c <LPTIM1_IRQHandler+0x14>)
 800435e:	0018      	movs	r0, r3
 8004360:	f003 fa34 	bl	80077cc <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8004364:	46c0      	nop			; (mov r8, r8)
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	46c0      	nop			; (mov r8, r8)
 800436c:	200001d8 	.word	0x200001d8

08004370 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004374:	4b03      	ldr	r3, [pc, #12]	; (8004384 <TIM2_IRQHandler+0x14>)
 8004376:	0018      	movs	r0, r3
 8004378:	f005 fe9c 	bl	800a0b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800437c:	46c0      	nop			; (mov r8, r8)
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	20000284 	.word	0x20000284

08004388 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800438c:	4b03      	ldr	r3, [pc, #12]	; (800439c <TIM6_DAC_IRQHandler+0x14>)
 800438e:	0018      	movs	r0, r3
 8004390:	f005 fe90 	bl	800a0b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004394:	46c0      	nop			; (mov r8, r8)
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	46c0      	nop			; (mov r8, r8)
 800439c:	20000154 	.word	0x20000154

080043a0 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 80043a4:	4b03      	ldr	r3, [pc, #12]	; (80043b4 <TIM21_IRQHandler+0x14>)
 80043a6:	0018      	movs	r0, r3
 80043a8:	f005 fe84 	bl	800a0b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 80043ac:	46c0      	nop			; (mov r8, r8)
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	20000364 	.word	0x20000364

080043b8 <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM22_IRQn 0 */

  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 80043bc:	4b03      	ldr	r3, [pc, #12]	; (80043cc <TIM22_IRQHandler+0x14>)
 80043be:	0018      	movs	r0, r3
 80043c0:	f005 fe78 	bl	800a0b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 80043c4:	46c0      	nop			; (mov r8, r8)
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	2000019c 	.word	0x2000019c

080043d0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80043d4:	4b03      	ldr	r3, [pc, #12]	; (80043e4 <SPI1_IRQHandler+0x14>)
 80043d6:	0018      	movs	r0, r3
 80043d8:	f005 fa4e 	bl	8009878 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80043dc:	46c0      	nop			; (mov r8, r8)
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	46c0      	nop			; (mov r8, r8)
 80043e4:	2000022c 	.word	0x2000022c

080043e8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80043f0:	4b11      	ldr	r3, [pc, #68]	; (8004438 <_sbrk+0x50>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d102      	bne.n	80043fe <_sbrk+0x16>
		heap_end = &end;
 80043f8:	4b0f      	ldr	r3, [pc, #60]	; (8004438 <_sbrk+0x50>)
 80043fa:	4a10      	ldr	r2, [pc, #64]	; (800443c <_sbrk+0x54>)
 80043fc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80043fe:	4b0e      	ldr	r3, [pc, #56]	; (8004438 <_sbrk+0x50>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004404:	4b0c      	ldr	r3, [pc, #48]	; (8004438 <_sbrk+0x50>)
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	18d3      	adds	r3, r2, r3
 800440c:	466a      	mov	r2, sp
 800440e:	4293      	cmp	r3, r2
 8004410:	d907      	bls.n	8004422 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004412:	f006 fb9d 	bl	800ab50 <__errno>
 8004416:	0003      	movs	r3, r0
 8004418:	220c      	movs	r2, #12
 800441a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800441c:	2301      	movs	r3, #1
 800441e:	425b      	negs	r3, r3
 8004420:	e006      	b.n	8004430 <_sbrk+0x48>
	}

	heap_end += incr;
 8004422:	4b05      	ldr	r3, [pc, #20]	; (8004438 <_sbrk+0x50>)
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	18d2      	adds	r2, r2, r3
 800442a:	4b03      	ldr	r3, [pc, #12]	; (8004438 <_sbrk+0x50>)
 800442c:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 800442e:	68fb      	ldr	r3, [r7, #12]
}
 8004430:	0018      	movs	r0, r3
 8004432:	46bd      	mov	sp, r7
 8004434:	b004      	add	sp, #16
 8004436:	bd80      	pop	{r7, pc}
 8004438:	200000f8 	.word	0x200000f8
 800443c:	200003a8 	.word	0x200003a8

08004440 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8004444:	4b17      	ldr	r3, [pc, #92]	; (80044a4 <SystemInit+0x64>)
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	4b16      	ldr	r3, [pc, #88]	; (80044a4 <SystemInit+0x64>)
 800444a:	2180      	movs	r1, #128	; 0x80
 800444c:	0049      	lsls	r1, r1, #1
 800444e:	430a      	orrs	r2, r1
 8004450:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8004452:	4b14      	ldr	r3, [pc, #80]	; (80044a4 <SystemInit+0x64>)
 8004454:	68da      	ldr	r2, [r3, #12]
 8004456:	4b13      	ldr	r3, [pc, #76]	; (80044a4 <SystemInit+0x64>)
 8004458:	4913      	ldr	r1, [pc, #76]	; (80044a8 <SystemInit+0x68>)
 800445a:	400a      	ands	r2, r1
 800445c:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800445e:	4b11      	ldr	r3, [pc, #68]	; (80044a4 <SystemInit+0x64>)
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	4b10      	ldr	r3, [pc, #64]	; (80044a4 <SystemInit+0x64>)
 8004464:	4911      	ldr	r1, [pc, #68]	; (80044ac <SystemInit+0x6c>)
 8004466:	400a      	ands	r2, r1
 8004468:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800446a:	4b0e      	ldr	r3, [pc, #56]	; (80044a4 <SystemInit+0x64>)
 800446c:	689a      	ldr	r2, [r3, #8]
 800446e:	4b0d      	ldr	r3, [pc, #52]	; (80044a4 <SystemInit+0x64>)
 8004470:	2101      	movs	r1, #1
 8004472:	438a      	bics	r2, r1
 8004474:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004476:	4b0b      	ldr	r3, [pc, #44]	; (80044a4 <SystemInit+0x64>)
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <SystemInit+0x64>)
 800447c:	490c      	ldr	r1, [pc, #48]	; (80044b0 <SystemInit+0x70>)
 800447e:	400a      	ands	r2, r1
 8004480:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8004482:	4b08      	ldr	r3, [pc, #32]	; (80044a4 <SystemInit+0x64>)
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	4b07      	ldr	r3, [pc, #28]	; (80044a4 <SystemInit+0x64>)
 8004488:	490a      	ldr	r1, [pc, #40]	; (80044b4 <SystemInit+0x74>)
 800448a:	400a      	ands	r2, r1
 800448c:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800448e:	4b05      	ldr	r3, [pc, #20]	; (80044a4 <SystemInit+0x64>)
 8004490:	2200      	movs	r2, #0
 8004492:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004494:	4b08      	ldr	r3, [pc, #32]	; (80044b8 <SystemInit+0x78>)
 8004496:	2280      	movs	r2, #128	; 0x80
 8004498:	0512      	lsls	r2, r2, #20
 800449a:	609a      	str	r2, [r3, #8]
#endif
}
 800449c:	46c0      	nop			; (mov r8, r8)
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	46c0      	nop			; (mov r8, r8)
 80044a4:	40021000 	.word	0x40021000
 80044a8:	88ff400c 	.word	0x88ff400c
 80044ac:	fef6fff6 	.word	0xfef6fff6
 80044b0:	fffbffff 	.word	0xfffbffff
 80044b4:	ff02ffff 	.word	0xff02ffff
 80044b8:	e000ed00 	.word	0xe000ed00

080044bc <HAL_TIM_PeriodElapsedCallback>:
static uint32_t stopwatchStartMarker = 0;
static uint32_t stopwatchPauseMarker = 0;
static uint8_t motorStateCounter = 0;

// important boye that is called for a bunch of different timers
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
	// button's timer
	if (htim->Instance == TIM6) {
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a17      	ldr	r2, [pc, #92]	; (8004528 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d11f      	bne.n	800450e <HAL_TIM_PeriodElapsedCallback+0x52>
		// renable button interrupts and clear pending
		HAL_TIM_Base_Stop_IT(htim);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	0018      	movs	r0, r3
 80044d2:	f005 fcc1 	bl	8009e58 <HAL_TIM_Base_Stop_IT>
		HAL_NVIC_ClearPendingIRQ(EXTI2_3_IRQn);
 80044d6:	2006      	movs	r0, #6
 80044d8:	f002 fd94 	bl	8007004 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 80044dc:	2007      	movs	r0, #7
 80044de:	f002 fd91 	bl	8007004 <HAL_NVIC_ClearPendingIRQ>
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON1);
 80044e2:	4b12      	ldr	r3, [pc, #72]	; (800452c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80044e4:	2204      	movs	r2, #4
 80044e6:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON2);
 80044e8:	4b10      	ldr	r3, [pc, #64]	; (800452c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80044ea:	2280      	movs	r2, #128	; 0x80
 80044ec:	0192      	lsls	r2, r2, #6
 80044ee:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON3);
 80044f0:	4b0e      	ldr	r3, [pc, #56]	; (800452c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80044f2:	2280      	movs	r2, #128	; 0x80
 80044f4:	01d2      	lsls	r2, r2, #7
 80044f6:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON4);
 80044f8:	4b0c      	ldr	r3, [pc, #48]	; (800452c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80044fa:	2280      	movs	r2, #128	; 0x80
 80044fc:	0212      	lsls	r2, r2, #8
 80044fe:	615a      	str	r2, [r3, #20]

		HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8004500:	2006      	movs	r0, #6
 8004502:	f002 fd52 	bl	8006faa <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004506:	2007      	movs	r0, #7
 8004508:	f002 fd4f 	bl	8006faa <HAL_NVIC_EnableIRQ>
	}
	// sampler's timer
	else if (htim->Instance == TIM22) {
		canSampleBattery = 1;
	}
}
 800450c:	e007      	b.n	800451e <HAL_TIM_PeriodElapsedCallback+0x62>
	else if (htim->Instance == TIM22) {
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a07      	ldr	r2, [pc, #28]	; (8004530 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d102      	bne.n	800451e <HAL_TIM_PeriodElapsedCallback+0x62>
		canSampleBattery = 1;
 8004518:	4b06      	ldr	r3, [pc, #24]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800451a:	2201      	movs	r2, #1
 800451c:	701a      	strb	r2, [r3, #0]
}
 800451e:	46c0      	nop			; (mov r8, r8)
 8004520:	46bd      	mov	sp, r7
 8004522:	b002      	add	sp, #8
 8004524:	bd80      	pop	{r7, pc}
 8004526:	46c0      	nop			; (mov r8, r8)
 8004528:	40001000 	.word	0x40001000
 800452c:	40010400 	.word	0x40010400
 8004530:	40011400 	.word	0x40011400
 8004534:	20000141 	.word	0x20000141

08004538 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM21) {
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a40      	ldr	r2, [pc, #256]	; (8004648 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d137      	bne.n	80045ba <HAL_TIM_OC_DelayElapsedCallback+0x82>
		// timer's channel
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	7e1b      	ldrb	r3, [r3, #24]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d121      	bne.n	8004596 <HAL_TIM_OC_DelayElapsedCallback+0x5e>
			updateFace.timer = 1;
 8004552:	4b3e      	ldr	r3, [pc, #248]	; (800464c <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8004554:	2201      	movs	r2, #1
 8004556:	705a      	strb	r2, [r3, #1]
			if (timerCounter != 1) --timerCounter;
 8004558:	4b3d      	ldr	r3, [pc, #244]	; (8004650 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d005      	beq.n	800456c <HAL_TIM_OC_DelayElapsedCallback+0x34>
 8004560:	4b3b      	ldr	r3, [pc, #236]	; (8004650 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	1e5a      	subs	r2, r3, #1
 8004566:	4b3a      	ldr	r3, [pc, #232]	; (8004650 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8004568:	601a      	str	r2, [r3, #0]
				stopMotor(htim);
				break;
			default: break;
		}
	}
}
 800456a:	e068      	b.n	800463e <HAL_TIM_OC_DelayElapsedCallback+0x106>
				--timerCounter;
 800456c:	4b38      	ldr	r3, [pc, #224]	; (8004650 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	1e5a      	subs	r2, r3, #1
 8004572:	4b37      	ldr	r3, [pc, #220]	; (8004650 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8004574:	601a      	str	r2, [r3, #0]
				isTimerDone = 1;
 8004576:	4b37      	ldr	r3, [pc, #220]	; (8004654 <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 8004578:	2201      	movs	r2, #1
 800457a:	701a      	strb	r2, [r3, #0]
				stopTimer(htim);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	0018      	movs	r0, r3
 8004580:	f000 f8e4 	bl	800474c <stopTimer>
				updateFace.timer = 1;
 8004584:	4b31      	ldr	r3, [pc, #196]	; (800464c <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8004586:	2201      	movs	r2, #1
 8004588:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 800458a:	4b33      	ldr	r3, [pc, #204]	; (8004658 <HAL_TIM_OC_DelayElapsedCallback+0x120>)
 800458c:	2102      	movs	r1, #2
 800458e:	0018      	movs	r0, r3
 8004590:	f003 f86e 	bl	8007670 <HAL_GPIO_TogglePin>
}
 8004594:	e053      	b.n	800463e <HAL_TIM_OC_DelayElapsedCallback+0x106>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	7e1b      	ldrb	r3, [r3, #24]
 800459a:	2b02      	cmp	r3, #2
 800459c:	d14f      	bne.n	800463e <HAL_TIM_OC_DelayElapsedCallback+0x106>
			updateFace.stopwatch = 1;
 800459e:	4b2b      	ldr	r3, [pc, #172]	; (800464c <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 80045a0:	2201      	movs	r2, #1
 80045a2:	70da      	strb	r2, [r3, #3]
			++stopwatchCounter;
 80045a4:	4b2d      	ldr	r3, [pc, #180]	; (800465c <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	1c5a      	adds	r2, r3, #1
 80045aa:	4b2c      	ldr	r3, [pc, #176]	; (800465c <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 80045ac:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 80045ae:	4b2a      	ldr	r3, [pc, #168]	; (8004658 <HAL_TIM_OC_DelayElapsedCallback+0x120>)
 80045b0:	2102      	movs	r1, #2
 80045b2:	0018      	movs	r0, r3
 80045b4:	f003 f85c 	bl	8007670 <HAL_GPIO_TogglePin>
}
 80045b8:	e041      	b.n	800463e <HAL_TIM_OC_DelayElapsedCallback+0x106>
	else if (htim->Instance == TIM2) {
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	2380      	movs	r3, #128	; 0x80
 80045c0:	05db      	lsls	r3, r3, #23
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d138      	bne.n	8004638 <HAL_TIM_OC_DelayElapsedCallback+0x100>
		++motorStateCounter;
 80045c6:	4b26      	ldr	r3, [pc, #152]	; (8004660 <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	3301      	adds	r3, #1
 80045cc:	b2da      	uxtb	r2, r3
 80045ce:	4b24      	ldr	r3, [pc, #144]	; (8004660 <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 80045d0:	701a      	strb	r2, [r3, #0]
		switch(motorStateCounter) {
 80045d2:	4b23      	ldr	r3, [pc, #140]	; (8004660 <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b06      	cmp	r3, #6
 80045d8:	d830      	bhi.n	800463c <HAL_TIM_OC_DelayElapsedCallback+0x104>
 80045da:	009a      	lsls	r2, r3, #2
 80045dc:	4b21      	ldr	r3, [pc, #132]	; (8004664 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 80045de:	18d3      	adds	r3, r2, r3
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	469f      	mov	pc, r3
			case 1: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 80045e4:	4b20      	ldr	r3, [pc, #128]	; (8004668 <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 80045e6:	2201      	movs	r2, #1
 80045e8:	2101      	movs	r1, #1
 80045ea:	0018      	movs	r0, r3
 80045ec:	f003 f823 	bl	8007636 <HAL_GPIO_WritePin>
 80045f0:	e025      	b.n	800463e <HAL_TIM_OC_DelayElapsedCallback+0x106>
			case 2: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET); break;
 80045f2:	4b1d      	ldr	r3, [pc, #116]	; (8004668 <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	2101      	movs	r1, #1
 80045f8:	0018      	movs	r0, r3
 80045fa:	f003 f81c 	bl	8007636 <HAL_GPIO_WritePin>
 80045fe:	e01e      	b.n	800463e <HAL_TIM_OC_DelayElapsedCallback+0x106>
			case 3: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8004600:	4b19      	ldr	r3, [pc, #100]	; (8004668 <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8004602:	2201      	movs	r2, #1
 8004604:	2101      	movs	r1, #1
 8004606:	0018      	movs	r0, r3
 8004608:	f003 f815 	bl	8007636 <HAL_GPIO_WritePin>
 800460c:	e017      	b.n	800463e <HAL_TIM_OC_DelayElapsedCallback+0x106>
			case 4: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET); break;
 800460e:	4b16      	ldr	r3, [pc, #88]	; (8004668 <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8004610:	2200      	movs	r2, #0
 8004612:	2101      	movs	r1, #1
 8004614:	0018      	movs	r0, r3
 8004616:	f003 f80e 	bl	8007636 <HAL_GPIO_WritePin>
 800461a:	e010      	b.n	800463e <HAL_TIM_OC_DelayElapsedCallback+0x106>
			case 5: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 800461c:	4b12      	ldr	r3, [pc, #72]	; (8004668 <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 800461e:	2201      	movs	r2, #1
 8004620:	2101      	movs	r1, #1
 8004622:	0018      	movs	r0, r3
 8004624:	f003 f807 	bl	8007636 <HAL_GPIO_WritePin>
 8004628:	e009      	b.n	800463e <HAL_TIM_OC_DelayElapsedCallback+0x106>
				HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET); break;
 800462a:	4b0f      	ldr	r3, [pc, #60]	; (8004668 <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 800462c:	2200      	movs	r2, #0
 800462e:	2101      	movs	r1, #1
 8004630:	0018      	movs	r0, r3
 8004632:	f003 f800 	bl	8007636 <HAL_GPIO_WritePin>
 8004636:	e002      	b.n	800463e <HAL_TIM_OC_DelayElapsedCallback+0x106>
	}
 8004638:	46c0      	nop			; (mov r8, r8)
 800463a:	e000      	b.n	800463e <HAL_TIM_OC_DelayElapsedCallback+0x106>
			default: break;
 800463c:	46c0      	nop			; (mov r8, r8)
}
 800463e:	46c0      	nop			; (mov r8, r8)
 8004640:	46bd      	mov	sp, r7
 8004642:	b002      	add	sp, #8
 8004644:	bd80      	pop	{r7, pc}
 8004646:	46c0      	nop			; (mov r8, r8)
 8004648:	40010800 	.word	0x40010800
 800464c:	20000144 	.word	0x20000144
 8004650:	2000014c 	.word	0x2000014c
 8004654:	20000150 	.word	0x20000150
 8004658:	50000800 	.word	0x50000800
 800465c:	20000198 	.word	0x20000198
 8004660:	2000010c 	.word	0x2000010c
 8004664:	0800bed8 	.word	0x0800bed8
 8004668:	50000400 	.word	0x50000400

0800466c <runTimer>:

// ---- important timer functions  ----
void runTimer(TIM_HandleTypeDef *htim) {
 800466c:	b590      	push	{r4, r7, lr}
 800466e:	b089      	sub	sp, #36	; 0x24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfig = {0};
 8004674:	2408      	movs	r4, #8
 8004676:	193b      	adds	r3, r7, r4
 8004678:	0018      	movs	r0, r3
 800467a:	2310      	movs	r3, #16
 800467c:	001a      	movs	r2, r3
 800467e:	2100      	movs	r1, #0
 8004680:	f006 fa99 	bl	800abb6 <memset>
	sConfig.OCMode = TIM_OCMODE_TIMING;
 8004684:	193b      	adds	r3, r7, r4
 8004686:	2200      	movs	r2, #0
 8004688:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 800468a:	193b      	adds	r3, r7, r4
 800468c:	2200      	movs	r2, #0
 800468e:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 8004690:	193b      	adds	r3, r7, r4
 8004692:	2200      	movs	r2, #0
 8004694:	60da      	str	r2, [r3, #12]

	// calculating pulse/OC trigger
	if (isTimerPaused == 0) {		// 1st run, hasn't been paused yet
 8004696:	4b1e      	ldr	r3, [pc, #120]	; (8004710 <runTimer+0xa4>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	d106      	bne.n	80046ae <runTimer+0x42>
		sConfig.Pulse = htim->Instance->CNT;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046a6:	2308      	movs	r3, #8
 80046a8:	18fb      	adds	r3, r7, r3
 80046aa:	605a      	str	r2, [r3, #4]
 80046ac:	e020      	b.n	80046f0 <runTimer+0x84>
	}
	else {		// unpausing
		uint32_t temp = htim->Instance->CNT;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	61fb      	str	r3, [r7, #28]

		// count needed to get from pause marker to start marker - basically how many steps it would've taken to get to next cycle
		// shifted to account for negative behavior
		uint32_t diff = ((int)(timerStartMarker-timerPauseMarker)+0x8000) % 0x8000;
 80046b6:	4b17      	ldr	r3, [pc, #92]	; (8004714 <runTimer+0xa8>)
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	4b17      	ldr	r3, [pc, #92]	; (8004718 <runTimer+0xac>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2280      	movs	r2, #128	; 0x80
 80046c2:	0212      	lsls	r2, r2, #8
 80046c4:	4694      	mov	ip, r2
 80046c6:	4463      	add	r3, ip
 80046c8:	4a14      	ldr	r2, [pc, #80]	; (800471c <runTimer+0xb0>)
 80046ca:	4013      	ands	r3, r2
 80046cc:	d503      	bpl.n	80046d6 <runTimer+0x6a>
 80046ce:	3b01      	subs	r3, #1
 80046d0:	4a13      	ldr	r2, [pc, #76]	; (8004720 <runTimer+0xb4>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	3301      	adds	r3, #1
 80046d6:	61bb      	str	r3, [r7, #24]
		sConfig.Pulse = (temp+diff) % 0x8000;
 80046d8:	69fa      	ldr	r2, [r7, #28]
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	18d3      	adds	r3, r2, r3
 80046de:	045b      	lsls	r3, r3, #17
 80046e0:	0c5a      	lsrs	r2, r3, #17
 80046e2:	2108      	movs	r1, #8
 80046e4:	187b      	adds	r3, r7, r1
 80046e6:	605a      	str	r2, [r3, #4]
		timerStartMarker = sConfig.Pulse;		// set new start marker
 80046e8:	187b      	adds	r3, r7, r1
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	4b09      	ldr	r3, [pc, #36]	; (8004714 <runTimer+0xa8>)
 80046ee:	601a      	str	r2, [r3, #0]
	}

	HAL_TIM_OC_ConfigChannel(htim, &sConfig, TIM_CHANNEL_1);
 80046f0:	2308      	movs	r3, #8
 80046f2:	18f9      	adds	r1, r7, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	0018      	movs	r0, r3
 80046fa:	f005 fdc3 	bl	800a284 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_OC_Start_IT(htim, TIM_CHANNEL_1);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2100      	movs	r1, #0
 8004702:	0018      	movs	r0, r3
 8004704:	f005 fbfe 	bl	8009f04 <HAL_TIM_OC_Start_IT>
}
 8004708:	46c0      	nop			; (mov r8, r8)
 800470a:	46bd      	mov	sp, r7
 800470c:	b009      	add	sp, #36	; 0x24
 800470e:	bd90      	pop	{r4, r7, pc}
 8004710:	20000196 	.word	0x20000196
 8004714:	200000fc 	.word	0x200000fc
 8004718:	20000100 	.word	0x20000100
 800471c:	80007fff 	.word	0x80007fff
 8004720:	ffff8000 	.word	0xffff8000

08004724 <pauseTimer>:

// flags should be set in nav
void pauseTimer(TIM_HandleTypeDef *htim) {
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_1);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2100      	movs	r1, #0
 8004730:	0018      	movs	r0, r3
 8004732:	f005 fc39 	bl	8009fa8 <HAL_TIM_OC_Stop_IT>
	timerPauseMarker = htim->Instance->CNT;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800473c:	4b02      	ldr	r3, [pc, #8]	; (8004748 <pauseTimer+0x24>)
 800473e:	601a      	str	r2, [r3, #0]
}
 8004740:	46c0      	nop			; (mov r8, r8)
 8004742:	46bd      	mov	sp, r7
 8004744:	b002      	add	sp, #8
 8004746:	bd80      	pop	{r7, pc}
 8004748:	20000100 	.word	0x20000100

0800474c <stopTimer>:

void stopTimer(TIM_HandleTypeDef *htim) {
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_1);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2100      	movs	r1, #0
 8004758:	0018      	movs	r0, r3
 800475a:	f005 fc25 	bl	8009fa8 <HAL_TIM_OC_Stop_IT>
	timerStartMarker = 0;
 800475e:	4b05      	ldr	r3, [pc, #20]	; (8004774 <stopTimer+0x28>)
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]
	timerPauseMarker = 0;
 8004764:	4b04      	ldr	r3, [pc, #16]	; (8004778 <stopTimer+0x2c>)
 8004766:	2200      	movs	r2, #0
 8004768:	601a      	str	r2, [r3, #0]
}
 800476a:	46c0      	nop			; (mov r8, r8)
 800476c:	46bd      	mov	sp, r7
 800476e:	b002      	add	sp, #8
 8004770:	bd80      	pop	{r7, pc}
 8004772:	46c0      	nop			; (mov r8, r8)
 8004774:	200000fc 	.word	0x200000fc
 8004778:	20000100 	.word	0x20000100

0800477c <runStopwatch>:

void runStopwatch(TIM_HandleTypeDef *htim) {
 800477c:	b590      	push	{r4, r7, lr}
 800477e:	b089      	sub	sp, #36	; 0x24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfig = {0};
 8004784:	2408      	movs	r4, #8
 8004786:	193b      	adds	r3, r7, r4
 8004788:	0018      	movs	r0, r3
 800478a:	2310      	movs	r3, #16
 800478c:	001a      	movs	r2, r3
 800478e:	2100      	movs	r1, #0
 8004790:	f006 fa11 	bl	800abb6 <memset>
	sConfig.OCMode = TIM_OCMODE_TIMING;
 8004794:	193b      	adds	r3, r7, r4
 8004796:	2200      	movs	r2, #0
 8004798:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 800479a:	193b      	adds	r3, r7, r4
 800479c:	2200      	movs	r2, #0
 800479e:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 80047a0:	193b      	adds	r3, r7, r4
 80047a2:	2200      	movs	r2, #0
 80047a4:	60da      	str	r2, [r3, #12]

	// calculating pulse/OC trigger
	if (isStopwatchPaused == 0) {		// 1st run, hasn't been paused yet
 80047a6:	4b22      	ldr	r3, [pc, #136]	; (8004830 <runStopwatch+0xb4>)
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10d      	bne.n	80047cc <runStopwatch+0x50>
		stopwatchCounter = 0;
 80047b0:	4b20      	ldr	r3, [pc, #128]	; (8004834 <runStopwatch+0xb8>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]
		sConfig.Pulse = htim->Instance->CNT;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047bc:	2108      	movs	r1, #8
 80047be:	187b      	adds	r3, r7, r1
 80047c0:	605a      	str	r2, [r3, #4]
		stopwatchStartMarker = sConfig.Pulse;		// set new start marker
 80047c2:	187b      	adds	r3, r7, r1
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	4b1c      	ldr	r3, [pc, #112]	; (8004838 <runStopwatch+0xbc>)
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	e020      	b.n	800480e <runStopwatch+0x92>
	}
	else {		// unpausing
		uint32_t temp = htim->Instance->CNT;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	61fb      	str	r3, [r7, #28]

		// count needed to get from pause marker to start marker - basically how many steps it would've taken to get to next cycle
		// shifted to account for negative behavior
		uint32_t diff = ((int)(stopwatchStartMarker-stopwatchPauseMarker)+0x8000) % 0x8000;
 80047d4:	4b18      	ldr	r3, [pc, #96]	; (8004838 <runStopwatch+0xbc>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	4b18      	ldr	r3, [pc, #96]	; (800483c <runStopwatch+0xc0>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2280      	movs	r2, #128	; 0x80
 80047e0:	0212      	lsls	r2, r2, #8
 80047e2:	4694      	mov	ip, r2
 80047e4:	4463      	add	r3, ip
 80047e6:	4a16      	ldr	r2, [pc, #88]	; (8004840 <runStopwatch+0xc4>)
 80047e8:	4013      	ands	r3, r2
 80047ea:	d503      	bpl.n	80047f4 <runStopwatch+0x78>
 80047ec:	3b01      	subs	r3, #1
 80047ee:	4a15      	ldr	r2, [pc, #84]	; (8004844 <runStopwatch+0xc8>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	3301      	adds	r3, #1
 80047f4:	61bb      	str	r3, [r7, #24]
		sConfig.Pulse = (temp+diff) % 0x8000;
 80047f6:	69fa      	ldr	r2, [r7, #28]
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	18d3      	adds	r3, r2, r3
 80047fc:	045b      	lsls	r3, r3, #17
 80047fe:	0c5a      	lsrs	r2, r3, #17
 8004800:	2108      	movs	r1, #8
 8004802:	187b      	adds	r3, r7, r1
 8004804:	605a      	str	r2, [r3, #4]
		stopwatchStartMarker = sConfig.Pulse;		// set new start marker
 8004806:	187b      	adds	r3, r7, r1
 8004808:	685a      	ldr	r2, [r3, #4]
 800480a:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <runStopwatch+0xbc>)
 800480c:	601a      	str	r2, [r3, #0]
	}

	HAL_TIM_OC_ConfigChannel(htim, &sConfig, TIM_CHANNEL_2);
 800480e:	2308      	movs	r3, #8
 8004810:	18f9      	adds	r1, r7, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2204      	movs	r2, #4
 8004816:	0018      	movs	r0, r3
 8004818:	f005 fd34 	bl	800a284 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_OC_Start_IT(htim, TIM_CHANNEL_2);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2104      	movs	r1, #4
 8004820:	0018      	movs	r0, r3
 8004822:	f005 fb6f 	bl	8009f04 <HAL_TIM_OC_Start_IT>
}
 8004826:	46c0      	nop			; (mov r8, r8)
 8004828:	46bd      	mov	sp, r7
 800482a:	b009      	add	sp, #36	; 0x24
 800482c:	bd90      	pop	{r4, r7, pc}
 800482e:	46c0      	nop			; (mov r8, r8)
 8004830:	20000195 	.word	0x20000195
 8004834:	20000198 	.word	0x20000198
 8004838:	20000104 	.word	0x20000104
 800483c:	20000108 	.word	0x20000108
 8004840:	80007fff 	.word	0x80007fff
 8004844:	ffff8000 	.word	0xffff8000

08004848 <pauseStopwatch>:

// stop the timer or pause it or whatever.
// counter value might reset and screw up timekeeping? should save?
void pauseStopwatch(TIM_HandleTypeDef *htim) {
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_2);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2104      	movs	r1, #4
 8004854:	0018      	movs	r0, r3
 8004856:	f005 fba7 	bl	8009fa8 <HAL_TIM_OC_Stop_IT>
	stopwatchPauseMarker = htim->Instance->CNT;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004860:	4b02      	ldr	r3, [pc, #8]	; (800486c <pauseStopwatch+0x24>)
 8004862:	601a      	str	r2, [r3, #0]
}
 8004864:	46c0      	nop			; (mov r8, r8)
 8004866:	46bd      	mov	sp, r7
 8004868:	b002      	add	sp, #8
 800486a:	bd80      	pop	{r7, pc}
 800486c:	20000108 	.word	0x20000108

08004870 <clearStopwatch>:

void clearStopwatch(TIM_HandleTypeDef *htim) {
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_2);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2104      	movs	r1, #4
 800487c:	0018      	movs	r0, r3
 800487e:	f005 fb93 	bl	8009fa8 <HAL_TIM_OC_Stop_IT>
	stopwatchPauseMarker = htim->Instance->CNT;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004888:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <clearStopwatch+0x34>)
 800488a:	601a      	str	r2, [r3, #0]
	stopwatchStartMarker = htim->Instance->CNT;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004892:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <clearStopwatch+0x38>)
 8004894:	601a      	str	r2, [r3, #0]

	stopwatchCounter = 0;
 8004896:	4b05      	ldr	r3, [pc, #20]	; (80048ac <clearStopwatch+0x3c>)
 8004898:	2200      	movs	r2, #0
 800489a:	601a      	str	r2, [r3, #0]
}
 800489c:	46c0      	nop			; (mov r8, r8)
 800489e:	46bd      	mov	sp, r7
 80048a0:	b002      	add	sp, #8
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	20000108 	.word	0x20000108
 80048a8:	20000104 	.word	0x20000104
 80048ac:	20000198 	.word	0x20000198

080048b0 <runTimerStopwatchBase>:

void runTimerStopwatchBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Start(htim);}
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	0018      	movs	r0, r3
 80048bc:	f005 fa88 	bl	8009dd0 <HAL_TIM_Base_Start>
 80048c0:	46c0      	nop			; (mov r8, r8)
 80048c2:	46bd      	mov	sp, r7
 80048c4:	b002      	add	sp, #8
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <runADCSampler>:
void stopTimerStopwatchBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Stop(htim);}
// ---- end of important timer functions ----

// ---- motor and other things that use timer ----
// uses LSE timer TIM22
void runADCSampler(TIM_HandleTypeDef *htim) {
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(htim);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	0018      	movs	r0, r3
 80048d4:	f005 fa9e 	bl	8009e14 <HAL_TIM_Base_Start_IT>
	canSampleBattery = 1;
 80048d8:	4b03      	ldr	r3, [pc, #12]	; (80048e8 <runADCSampler+0x20>)
 80048da:	2201      	movs	r2, #1
 80048dc:	701a      	strb	r2, [r3, #0]
}
 80048de:	46c0      	nop			; (mov r8, r8)
 80048e0:	46bd      	mov	sp, r7
 80048e2:	b002      	add	sp, #8
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	46c0      	nop			; (mov r8, r8)
 80048e8:	20000141 	.word	0x20000141

080048ec <runMotor>:
}

// running motor for vibration. should run for a finite time
// connect motor enable line to timer output line
// uses LSE timer TIM2 CH2
void runMotor(TIM_HandleTypeDef *htim) {
 80048ec:	b590      	push	{r4, r7, lr}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfig = {0};
 80048f4:	2408      	movs	r4, #8
 80048f6:	193b      	adds	r3, r7, r4
 80048f8:	0018      	movs	r0, r3
 80048fa:	2310      	movs	r3, #16
 80048fc:	001a      	movs	r2, r3
 80048fe:	2100      	movs	r1, #0
 8004900:	f006 f959 	bl	800abb6 <memset>
	sConfig.OCMode = TIM_OCMODE_TIMING;
 8004904:	0021      	movs	r1, r4
 8004906:	187b      	adds	r3, r7, r1
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 800490c:	187b      	adds	r3, r7, r1
 800490e:	2200      	movs	r2, #0
 8004910:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 8004912:	187b      	adds	r3, r7, r1
 8004914:	2200      	movs	r2, #0
 8004916:	60da      	str	r2, [r3, #12]
	sConfig.Pulse = htim->Instance->CNT;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800491e:	000c      	movs	r4, r1
 8004920:	187b      	adds	r3, r7, r1
 8004922:	605a      	str	r2, [r3, #4]

	HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET);
 8004924:	4b0c      	ldr	r3, [pc, #48]	; (8004958 <runMotor+0x6c>)
 8004926:	2201      	movs	r2, #1
 8004928:	2101      	movs	r1, #1
 800492a:	0018      	movs	r0, r3
 800492c:	f002 fe83 	bl	8007636 <HAL_GPIO_WritePin>
	HAL_TIM_OC_ConfigChannel(htim, &sConfig, TIM_CHANNEL_2);
 8004930:	0021      	movs	r1, r4
 8004932:	1879      	adds	r1, r7, r1
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2204      	movs	r2, #4
 8004938:	0018      	movs	r0, r3
 800493a:	f005 fca3 	bl	800a284 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_OC_Start_IT(htim, TIM_CHANNEL_2);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2104      	movs	r1, #4
 8004942:	0018      	movs	r0, r3
 8004944:	f005 fade 	bl	8009f04 <HAL_TIM_OC_Start_IT>

	motorStateCounter = 0;
 8004948:	4b04      	ldr	r3, [pc, #16]	; (800495c <runMotor+0x70>)
 800494a:	2200      	movs	r2, #0
 800494c:	701a      	strb	r2, [r3, #0]
}
 800494e:	46c0      	nop			; (mov r8, r8)
 8004950:	46bd      	mov	sp, r7
 8004952:	b007      	add	sp, #28
 8004954:	bd90      	pop	{r4, r7, pc}
 8004956:	46c0      	nop			; (mov r8, r8)
 8004958:	50000400 	.word	0x50000400
 800495c:	2000010c 	.word	0x2000010c

08004960 <runBacklightMotorBase>:
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_2);
	motorStateCounter = 0;
}

// should use TIM22
void runBacklightMotorBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Start(htim);}
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	0018      	movs	r0, r3
 800496c:	f005 fa30 	bl	8009dd0 <HAL_TIM_Base_Start>
 8004970:	46c0      	nop			; (mov r8, r8)
 8004972:	46bd      	mov	sp, r7
 8004974:	b002      	add	sp, #8
 8004976:	bd80      	pop	{r7, pc}

08004978 <HAL_GPIO_EXTI_Callback>:
	"Nov",
	"Dec"
};

// button interrupt(s)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	0002      	movs	r2, r0
 8004980:	1dbb      	adds	r3, r7, #6
 8004982:	801a      	strh	r2, [r3, #0]
	HAL_NVIC_DisableIRQ(EXTI2_3_IRQn);
 8004984:	2006      	movs	r0, #6
 8004986:	f002 fb20 	bl	8006fca <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 800498a:	2007      	movs	r0, #7
 800498c:	f002 fb1d 	bl	8006fca <HAL_NVIC_DisableIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_3_IRQn);
 8004990:	2006      	movs	r0, #6
 8004992:	f002 fb37 	bl	8007004 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 8004996:	2007      	movs	r0, #7
 8004998:	f002 fb34 	bl	8007004 <HAL_NVIC_ClearPendingIRQ>

	if (GPIO_Pin == BUTTON1) buttons.is1Pressed = 1;
 800499c:	1dbb      	adds	r3, r7, #6
 800499e:	881b      	ldrh	r3, [r3, #0]
 80049a0:	2b04      	cmp	r3, #4
 80049a2:	d102      	bne.n	80049aa <HAL_GPIO_EXTI_Callback+0x32>
 80049a4:	4b15      	ldr	r3, [pc, #84]	; (80049fc <HAL_GPIO_EXTI_Callback+0x84>)
 80049a6:	2201      	movs	r2, #1
 80049a8:	701a      	strb	r2, [r3, #0]
	if (GPIO_Pin == BUTTON2) buttons.is2Pressed = 1;
 80049aa:	1dbb      	adds	r3, r7, #6
 80049ac:	881a      	ldrh	r2, [r3, #0]
 80049ae:	2380      	movs	r3, #128	; 0x80
 80049b0:	019b      	lsls	r3, r3, #6
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d102      	bne.n	80049bc <HAL_GPIO_EXTI_Callback+0x44>
 80049b6:	4b11      	ldr	r3, [pc, #68]	; (80049fc <HAL_GPIO_EXTI_Callback+0x84>)
 80049b8:	2201      	movs	r2, #1
 80049ba:	705a      	strb	r2, [r3, #1]
	if (GPIO_Pin == BUTTON3) buttons.is3Pressed = 1;
 80049bc:	1dbb      	adds	r3, r7, #6
 80049be:	881a      	ldrh	r2, [r3, #0]
 80049c0:	2380      	movs	r3, #128	; 0x80
 80049c2:	01db      	lsls	r3, r3, #7
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d102      	bne.n	80049ce <HAL_GPIO_EXTI_Callback+0x56>
 80049c8:	4b0c      	ldr	r3, [pc, #48]	; (80049fc <HAL_GPIO_EXTI_Callback+0x84>)
 80049ca:	2201      	movs	r2, #1
 80049cc:	709a      	strb	r2, [r3, #2]
	if (GPIO_Pin == BUTTON4) buttons.is4Pressed = 1;
 80049ce:	1dbb      	adds	r3, r7, #6
 80049d0:	881a      	ldrh	r2, [r3, #0]
 80049d2:	2380      	movs	r3, #128	; 0x80
 80049d4:	021b      	lsls	r3, r3, #8
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d102      	bne.n	80049e0 <HAL_GPIO_EXTI_Callback+0x68>
 80049da:	4b08      	ldr	r3, [pc, #32]	; (80049fc <HAL_GPIO_EXTI_Callback+0x84>)
 80049dc:	2201      	movs	r2, #1
 80049de:	70da      	strb	r2, [r3, #3]

	HAL_TIM_Base_Start_IT(&htim6);
 80049e0:	4b07      	ldr	r3, [pc, #28]	; (8004a00 <HAL_GPIO_EXTI_Callback+0x88>)
 80049e2:	0018      	movs	r0, r3
 80049e4:	f005 fa16 	bl	8009e14 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);		// should run for any button
 80049e8:	4b06      	ldr	r3, [pc, #24]	; (8004a04 <HAL_GPIO_EXTI_Callback+0x8c>)
 80049ea:	2108      	movs	r1, #8
 80049ec:	0018      	movs	r0, r3
 80049ee:	f002 fe3f 	bl	8007670 <HAL_GPIO_TogglePin>
}
 80049f2:	46c0      	nop			; (mov r8, r8)
 80049f4:	46bd      	mov	sp, r7
 80049f6:	b002      	add	sp, #8
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	46c0      	nop			; (mov r8, r8)
 80049fc:	20000190 	.word	0x20000190
 8004a00:	20000154 	.word	0x20000154
 8004a04:	50000800 	.word	0x50000800

08004a08 <updateState>:

void updateState(RTC_HandleTypeDef *hrtc, TIM_HandleTypeDef *timerStopwatchTim, TIM_HandleTypeDef *motorBacklightTim, TIM_HandleTypeDef *buttonTim, SPI_HandleTypeDef *hspi) {
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
 8004a14:	603b      	str	r3, [r7, #0]
	/* program flow:
	 *   check current face used
	 *   check current variables and check button pressed
	 */
	// button 1 changes the face on screen.
	if (buttons.is1Pressed) {
 8004a16:	4bc0      	ldr	r3, [pc, #768]	; (8004d18 <updateState+0x310>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d030      	beq.n	8004a82 <updateState+0x7a>
		buttons.is1Pressed = 0;
 8004a20:	4bbd      	ldr	r3, [pc, #756]	; (8004d18 <updateState+0x310>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	701a      	strb	r2, [r3, #0]
		isFaceBeingChanged = 1;
 8004a26:	4bbd      	ldr	r3, [pc, #756]	; (8004d1c <updateState+0x314>)
 8004a28:	2201      	movs	r2, #1
 8004a2a:	701a      	strb	r2, [r3, #0]
		faceOnDisplay = (faceOnDisplay + 1) % NUM_FACES;
 8004a2c:	4bbc      	ldr	r3, [pc, #752]	; (8004d20 <updateState+0x318>)
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	3301      	adds	r3, #1
 8004a32:	4abc      	ldr	r2, [pc, #752]	; (8004d24 <updateState+0x31c>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	d504      	bpl.n	8004a42 <updateState+0x3a>
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	2204      	movs	r2, #4
 8004a3c:	4252      	negs	r2, r2
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	3301      	adds	r3, #1
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	4bb6      	ldr	r3, [pc, #728]	; (8004d20 <updateState+0x318>)
 8004a46:	701a      	strb	r2, [r3, #0]
		switch (faceOnDisplay) {
 8004a48:	4bb5      	ldr	r3, [pc, #724]	; (8004d20 <updateState+0x318>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d00c      	beq.n	8004a6a <updateState+0x62>
 8004a50:	dc02      	bgt.n	8004a58 <updateState+0x50>
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d005      	beq.n	8004a62 <updateState+0x5a>
			case faceClock: updateFace.clock = 1; break;
			case faceTimer: updateFace.timer = 1; break;
			case faceAlarm: updateFace.alarm = 1; break;
			case faceStopwatch: updateFace.stopwatch = 1; break;
			default: break;
 8004a56:	e015      	b.n	8004a84 <updateState+0x7c>
		switch (faceOnDisplay) {
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d00a      	beq.n	8004a72 <updateState+0x6a>
 8004a5c:	2b03      	cmp	r3, #3
 8004a5e:	d00c      	beq.n	8004a7a <updateState+0x72>
			default: break;
 8004a60:	e010      	b.n	8004a84 <updateState+0x7c>
			case faceClock: updateFace.clock = 1; break;
 8004a62:	4bb1      	ldr	r3, [pc, #708]	; (8004d28 <updateState+0x320>)
 8004a64:	2201      	movs	r2, #1
 8004a66:	701a      	strb	r2, [r3, #0]
 8004a68:	e00c      	b.n	8004a84 <updateState+0x7c>
			case faceTimer: updateFace.timer = 1; break;
 8004a6a:	4baf      	ldr	r3, [pc, #700]	; (8004d28 <updateState+0x320>)
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	705a      	strb	r2, [r3, #1]
 8004a70:	e008      	b.n	8004a84 <updateState+0x7c>
			case faceAlarm: updateFace.alarm = 1; break;
 8004a72:	4bad      	ldr	r3, [pc, #692]	; (8004d28 <updateState+0x320>)
 8004a74:	2201      	movs	r2, #1
 8004a76:	709a      	strb	r2, [r3, #2]
 8004a78:	e004      	b.n	8004a84 <updateState+0x7c>
			case faceStopwatch: updateFace.stopwatch = 1; break;
 8004a7a:	4bab      	ldr	r3, [pc, #684]	; (8004d28 <updateState+0x320>)
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	70da      	strb	r2, [r3, #3]
 8004a80:	e000      	b.n	8004a84 <updateState+0x7c>
		}
	}
 8004a82:	46c0      	nop			; (mov r8, r8)

	// press 2 and 3 alternatively 5 times to reinit display
	static uint8_t s = 0;
	switch(s) {
 8004a84:	4ba9      	ldr	r3, [pc, #676]	; (8004d2c <updateState+0x324>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	2b09      	cmp	r3, #9
 8004a8a:	d900      	bls.n	8004a8e <updateState+0x86>
 8004a8c:	e11b      	b.n	8004cc6 <updateState+0x2be>
 8004a8e:	009a      	lsls	r2, r3, #2
 8004a90:	4ba7      	ldr	r3, [pc, #668]	; (8004d30 <updateState+0x328>)
 8004a92:	18d3      	adds	r3, r2, r3
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	469f      	mov	pc, r3
		case 0:	if (buttons.is2Pressed) s++; break;
 8004a98:	4b9f      	ldr	r3, [pc, #636]	; (8004d18 <updateState+0x310>)
 8004a9a:	785b      	ldrb	r3, [r3, #1]
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d100      	bne.n	8004aa4 <updateState+0x9c>
 8004aa2:	e112      	b.n	8004cca <updateState+0x2c2>
 8004aa4:	4ba1      	ldr	r3, [pc, #644]	; (8004d2c <updateState+0x324>)
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	4b9f      	ldr	r3, [pc, #636]	; (8004d2c <updateState+0x324>)
 8004aae:	701a      	strb	r2, [r3, #0]
 8004ab0:	e10b      	b.n	8004cca <updateState+0x2c2>
		case 1: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8004ab2:	4b99      	ldr	r3, [pc, #612]	; (8004d18 <updateState+0x310>)
 8004ab4:	789b      	ldrb	r3, [r3, #2]
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d006      	beq.n	8004aca <updateState+0xc2>
 8004abc:	4b9b      	ldr	r3, [pc, #620]	; (8004d2c <updateState+0x324>)
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	4b99      	ldr	r3, [pc, #612]	; (8004d2c <updateState+0x324>)
 8004ac6:	701a      	strb	r2, [r3, #0]
 8004ac8:	e101      	b.n	8004cce <updateState+0x2c6>
 8004aca:	4b93      	ldr	r3, [pc, #588]	; (8004d18 <updateState+0x310>)
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10a      	bne.n	8004aea <updateState+0xe2>
 8004ad4:	4b90      	ldr	r3, [pc, #576]	; (8004d18 <updateState+0x310>)
 8004ad6:	785b      	ldrb	r3, [r3, #1]
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d105      	bne.n	8004aea <updateState+0xe2>
 8004ade:	4b8e      	ldr	r3, [pc, #568]	; (8004d18 <updateState+0x310>)
 8004ae0:	78db      	ldrb	r3, [r3, #3]
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d100      	bne.n	8004aea <updateState+0xe2>
 8004ae8:	e0f1      	b.n	8004cce <updateState+0x2c6>
 8004aea:	4b90      	ldr	r3, [pc, #576]	; (8004d2c <updateState+0x324>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	701a      	strb	r2, [r3, #0]
 8004af0:	e0ed      	b.n	8004cce <updateState+0x2c6>
		case 2: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8004af2:	4b89      	ldr	r3, [pc, #548]	; (8004d18 <updateState+0x310>)
 8004af4:	785b      	ldrb	r3, [r3, #1]
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d006      	beq.n	8004b0a <updateState+0x102>
 8004afc:	4b8b      	ldr	r3, [pc, #556]	; (8004d2c <updateState+0x324>)
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	3301      	adds	r3, #1
 8004b02:	b2da      	uxtb	r2, r3
 8004b04:	4b89      	ldr	r3, [pc, #548]	; (8004d2c <updateState+0x324>)
 8004b06:	701a      	strb	r2, [r3, #0]
 8004b08:	e0e3      	b.n	8004cd2 <updateState+0x2ca>
 8004b0a:	4b83      	ldr	r3, [pc, #524]	; (8004d18 <updateState+0x310>)
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10a      	bne.n	8004b2a <updateState+0x122>
 8004b14:	4b80      	ldr	r3, [pc, #512]	; (8004d18 <updateState+0x310>)
 8004b16:	789b      	ldrb	r3, [r3, #2]
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d105      	bne.n	8004b2a <updateState+0x122>
 8004b1e:	4b7e      	ldr	r3, [pc, #504]	; (8004d18 <updateState+0x310>)
 8004b20:	78db      	ldrb	r3, [r3, #3]
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d100      	bne.n	8004b2a <updateState+0x122>
 8004b28:	e0d3      	b.n	8004cd2 <updateState+0x2ca>
 8004b2a:	4b80      	ldr	r3, [pc, #512]	; (8004d2c <updateState+0x324>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	701a      	strb	r2, [r3, #0]
 8004b30:	e0cf      	b.n	8004cd2 <updateState+0x2ca>
		case 3: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8004b32:	4b79      	ldr	r3, [pc, #484]	; (8004d18 <updateState+0x310>)
 8004b34:	789b      	ldrb	r3, [r3, #2]
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d006      	beq.n	8004b4a <updateState+0x142>
 8004b3c:	4b7b      	ldr	r3, [pc, #492]	; (8004d2c <updateState+0x324>)
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	3301      	adds	r3, #1
 8004b42:	b2da      	uxtb	r2, r3
 8004b44:	4b79      	ldr	r3, [pc, #484]	; (8004d2c <updateState+0x324>)
 8004b46:	701a      	strb	r2, [r3, #0]
 8004b48:	e0c5      	b.n	8004cd6 <updateState+0x2ce>
 8004b4a:	4b73      	ldr	r3, [pc, #460]	; (8004d18 <updateState+0x310>)
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10a      	bne.n	8004b6a <updateState+0x162>
 8004b54:	4b70      	ldr	r3, [pc, #448]	; (8004d18 <updateState+0x310>)
 8004b56:	785b      	ldrb	r3, [r3, #1]
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d105      	bne.n	8004b6a <updateState+0x162>
 8004b5e:	4b6e      	ldr	r3, [pc, #440]	; (8004d18 <updateState+0x310>)
 8004b60:	78db      	ldrb	r3, [r3, #3]
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d100      	bne.n	8004b6a <updateState+0x162>
 8004b68:	e0b5      	b.n	8004cd6 <updateState+0x2ce>
 8004b6a:	4b70      	ldr	r3, [pc, #448]	; (8004d2c <updateState+0x324>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	701a      	strb	r2, [r3, #0]
 8004b70:	e0b1      	b.n	8004cd6 <updateState+0x2ce>
		case 4: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8004b72:	4b69      	ldr	r3, [pc, #420]	; (8004d18 <updateState+0x310>)
 8004b74:	785b      	ldrb	r3, [r3, #1]
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d006      	beq.n	8004b8a <updateState+0x182>
 8004b7c:	4b6b      	ldr	r3, [pc, #428]	; (8004d2c <updateState+0x324>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	3301      	adds	r3, #1
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	4b69      	ldr	r3, [pc, #420]	; (8004d2c <updateState+0x324>)
 8004b86:	701a      	strb	r2, [r3, #0]
 8004b88:	e0a7      	b.n	8004cda <updateState+0x2d2>
 8004b8a:	4b63      	ldr	r3, [pc, #396]	; (8004d18 <updateState+0x310>)
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10a      	bne.n	8004baa <updateState+0x1a2>
 8004b94:	4b60      	ldr	r3, [pc, #384]	; (8004d18 <updateState+0x310>)
 8004b96:	789b      	ldrb	r3, [r3, #2]
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d105      	bne.n	8004baa <updateState+0x1a2>
 8004b9e:	4b5e      	ldr	r3, [pc, #376]	; (8004d18 <updateState+0x310>)
 8004ba0:	78db      	ldrb	r3, [r3, #3]
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d100      	bne.n	8004baa <updateState+0x1a2>
 8004ba8:	e097      	b.n	8004cda <updateState+0x2d2>
 8004baa:	4b60      	ldr	r3, [pc, #384]	; (8004d2c <updateState+0x324>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	701a      	strb	r2, [r3, #0]
 8004bb0:	e093      	b.n	8004cda <updateState+0x2d2>
		case 5: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8004bb2:	4b59      	ldr	r3, [pc, #356]	; (8004d18 <updateState+0x310>)
 8004bb4:	789b      	ldrb	r3, [r3, #2]
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d006      	beq.n	8004bca <updateState+0x1c2>
 8004bbc:	4b5b      	ldr	r3, [pc, #364]	; (8004d2c <updateState+0x324>)
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	4b59      	ldr	r3, [pc, #356]	; (8004d2c <updateState+0x324>)
 8004bc6:	701a      	strb	r2, [r3, #0]
 8004bc8:	e089      	b.n	8004cde <updateState+0x2d6>
 8004bca:	4b53      	ldr	r3, [pc, #332]	; (8004d18 <updateState+0x310>)
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10a      	bne.n	8004bea <updateState+0x1e2>
 8004bd4:	4b50      	ldr	r3, [pc, #320]	; (8004d18 <updateState+0x310>)
 8004bd6:	785b      	ldrb	r3, [r3, #1]
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d105      	bne.n	8004bea <updateState+0x1e2>
 8004bde:	4b4e      	ldr	r3, [pc, #312]	; (8004d18 <updateState+0x310>)
 8004be0:	78db      	ldrb	r3, [r3, #3]
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d100      	bne.n	8004bea <updateState+0x1e2>
 8004be8:	e079      	b.n	8004cde <updateState+0x2d6>
 8004bea:	4b50      	ldr	r3, [pc, #320]	; (8004d2c <updateState+0x324>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	701a      	strb	r2, [r3, #0]
 8004bf0:	e075      	b.n	8004cde <updateState+0x2d6>
		case 6: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8004bf2:	4b49      	ldr	r3, [pc, #292]	; (8004d18 <updateState+0x310>)
 8004bf4:	785b      	ldrb	r3, [r3, #1]
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d006      	beq.n	8004c0a <updateState+0x202>
 8004bfc:	4b4b      	ldr	r3, [pc, #300]	; (8004d2c <updateState+0x324>)
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	3301      	adds	r3, #1
 8004c02:	b2da      	uxtb	r2, r3
 8004c04:	4b49      	ldr	r3, [pc, #292]	; (8004d2c <updateState+0x324>)
 8004c06:	701a      	strb	r2, [r3, #0]
 8004c08:	e06b      	b.n	8004ce2 <updateState+0x2da>
 8004c0a:	4b43      	ldr	r3, [pc, #268]	; (8004d18 <updateState+0x310>)
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d109      	bne.n	8004c28 <updateState+0x220>
 8004c14:	4b40      	ldr	r3, [pc, #256]	; (8004d18 <updateState+0x310>)
 8004c16:	789b      	ldrb	r3, [r3, #2]
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d104      	bne.n	8004c28 <updateState+0x220>
 8004c1e:	4b3e      	ldr	r3, [pc, #248]	; (8004d18 <updateState+0x310>)
 8004c20:	78db      	ldrb	r3, [r3, #3]
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d05c      	beq.n	8004ce2 <updateState+0x2da>
 8004c28:	4b40      	ldr	r3, [pc, #256]	; (8004d2c <updateState+0x324>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	701a      	strb	r2, [r3, #0]
 8004c2e:	e058      	b.n	8004ce2 <updateState+0x2da>
		case 7: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8004c30:	4b39      	ldr	r3, [pc, #228]	; (8004d18 <updateState+0x310>)
 8004c32:	789b      	ldrb	r3, [r3, #2]
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d006      	beq.n	8004c48 <updateState+0x240>
 8004c3a:	4b3c      	ldr	r3, [pc, #240]	; (8004d2c <updateState+0x324>)
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	4b3a      	ldr	r3, [pc, #232]	; (8004d2c <updateState+0x324>)
 8004c44:	701a      	strb	r2, [r3, #0]
 8004c46:	e04e      	b.n	8004ce6 <updateState+0x2de>
 8004c48:	4b33      	ldr	r3, [pc, #204]	; (8004d18 <updateState+0x310>)
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d109      	bne.n	8004c66 <updateState+0x25e>
 8004c52:	4b31      	ldr	r3, [pc, #196]	; (8004d18 <updateState+0x310>)
 8004c54:	785b      	ldrb	r3, [r3, #1]
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d104      	bne.n	8004c66 <updateState+0x25e>
 8004c5c:	4b2e      	ldr	r3, [pc, #184]	; (8004d18 <updateState+0x310>)
 8004c5e:	78db      	ldrb	r3, [r3, #3]
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d03f      	beq.n	8004ce6 <updateState+0x2de>
 8004c66:	4b31      	ldr	r3, [pc, #196]	; (8004d2c <updateState+0x324>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	701a      	strb	r2, [r3, #0]
 8004c6c:	e03b      	b.n	8004ce6 <updateState+0x2de>
		case 8: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8004c6e:	4b2a      	ldr	r3, [pc, #168]	; (8004d18 <updateState+0x310>)
 8004c70:	785b      	ldrb	r3, [r3, #1]
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d006      	beq.n	8004c86 <updateState+0x27e>
 8004c78:	4b2c      	ldr	r3, [pc, #176]	; (8004d2c <updateState+0x324>)
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	4b2a      	ldr	r3, [pc, #168]	; (8004d2c <updateState+0x324>)
 8004c82:	701a      	strb	r2, [r3, #0]
 8004c84:	e031      	b.n	8004cea <updateState+0x2e2>
 8004c86:	4b24      	ldr	r3, [pc, #144]	; (8004d18 <updateState+0x310>)
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d109      	bne.n	8004ca4 <updateState+0x29c>
 8004c90:	4b21      	ldr	r3, [pc, #132]	; (8004d18 <updateState+0x310>)
 8004c92:	789b      	ldrb	r3, [r3, #2]
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d104      	bne.n	8004ca4 <updateState+0x29c>
 8004c9a:	4b1f      	ldr	r3, [pc, #124]	; (8004d18 <updateState+0x310>)
 8004c9c:	78db      	ldrb	r3, [r3, #3]
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d022      	beq.n	8004cea <updateState+0x2e2>
 8004ca4:	4b21      	ldr	r3, [pc, #132]	; (8004d2c <updateState+0x324>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	701a      	strb	r2, [r3, #0]
 8004caa:	e01e      	b.n	8004cea <updateState+0x2e2>
		case 9: if (buttons.is3Pressed) {TFT_startup(hspi); s = 0;} break;
 8004cac:	4b1a      	ldr	r3, [pc, #104]	; (8004d18 <updateState+0x310>)
 8004cae:	789b      	ldrb	r3, [r3, #2]
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d01b      	beq.n	8004cee <updateState+0x2e6>
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	0018      	movs	r0, r3
 8004cba:	f7fc fe31 	bl	8001920 <TFT_startup>
 8004cbe:	4b1b      	ldr	r3, [pc, #108]	; (8004d2c <updateState+0x324>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	701a      	strb	r2, [r3, #0]
 8004cc4:	e013      	b.n	8004cee <updateState+0x2e6>
		default: break;
 8004cc6:	46c0      	nop			; (mov r8, r8)
 8004cc8:	e012      	b.n	8004cf0 <updateState+0x2e8>
		case 0:	if (buttons.is2Pressed) s++; break;
 8004cca:	46c0      	nop			; (mov r8, r8)
 8004ccc:	e010      	b.n	8004cf0 <updateState+0x2e8>
		case 1: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8004cce:	46c0      	nop			; (mov r8, r8)
 8004cd0:	e00e      	b.n	8004cf0 <updateState+0x2e8>
		case 2: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8004cd2:	46c0      	nop			; (mov r8, r8)
 8004cd4:	e00c      	b.n	8004cf0 <updateState+0x2e8>
		case 3: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8004cd6:	46c0      	nop			; (mov r8, r8)
 8004cd8:	e00a      	b.n	8004cf0 <updateState+0x2e8>
		case 4: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8004cda:	46c0      	nop			; (mov r8, r8)
 8004cdc:	e008      	b.n	8004cf0 <updateState+0x2e8>
		case 5: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8004cde:	46c0      	nop			; (mov r8, r8)
 8004ce0:	e006      	b.n	8004cf0 <updateState+0x2e8>
		case 6: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8004ce2:	46c0      	nop			; (mov r8, r8)
 8004ce4:	e004      	b.n	8004cf0 <updateState+0x2e8>
		case 7: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8004ce6:	46c0      	nop			; (mov r8, r8)
 8004ce8:	e002      	b.n	8004cf0 <updateState+0x2e8>
		case 8: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8004cea:	46c0      	nop			; (mov r8, r8)
 8004cec:	e000      	b.n	8004cf0 <updateState+0x2e8>
		case 9: if (buttons.is3Pressed) {TFT_startup(hspi); s = 0;} break;
 8004cee:	46c0      	nop			; (mov r8, r8)
//	drawTextAt(0, 0, str, hspi);

//	if (buttons.is3Pressed) turnDisplayOn(hspi);
//	if (buttons.is4Pressed) turnDisplayOff(hspi);

	if (faceOnDisplay == faceClock) updateClockState(hrtc);
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	; (8004d20 <updateState+0x318>)
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d104      	bne.n	8004d02 <updateState+0x2fa>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	0018      	movs	r0, r3
 8004cfc:	f000 f842 	bl	8004d84 <updateClockState>
 8004d00:	e02b      	b.n	8004d5a <updateState+0x352>
	else if (faceOnDisplay == faceTimer) updateTimerState(timerStopwatchTim, motorBacklightTim);
 8004d02:	4b07      	ldr	r3, [pc, #28]	; (8004d20 <updateState+0x318>)
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d114      	bne.n	8004d34 <updateState+0x32c>
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	0011      	movs	r1, r2
 8004d10:	0018      	movs	r0, r3
 8004d12:	f000 f97f 	bl	8005014 <updateTimerState>
 8004d16:	e020      	b.n	8004d5a <updateState+0x352>
 8004d18:	20000190 	.word	0x20000190
 8004d1c:	20000068 	.word	0x20000068
 8004d20:	20000134 	.word	0x20000134
 8004d24:	80000003 	.word	0x80000003
 8004d28:	20000144 	.word	0x20000144
 8004d2c:	20000135 	.word	0x20000135
 8004d30:	0800bef4 	.word	0x0800bef4
	else if (faceOnDisplay == faceAlarm) updateAlarmState(hrtc, motorBacklightTim);
 8004d34:	4b11      	ldr	r3, [pc, #68]	; (8004d7c <updateState+0x374>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d106      	bne.n	8004d4a <updateState+0x342>
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	0011      	movs	r1, r2
 8004d42:	0018      	movs	r0, r3
 8004d44:	f000 fabc 	bl	80052c0 <updateAlarmState>
 8004d48:	e007      	b.n	8004d5a <updateState+0x352>
	else if (faceOnDisplay == faceStopwatch) updateStopwatchState(timerStopwatchTim);
 8004d4a:	4b0c      	ldr	r3, [pc, #48]	; (8004d7c <updateState+0x374>)
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	2b03      	cmp	r3, #3
 8004d50:	d103      	bne.n	8004d5a <updateState+0x352>
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	0018      	movs	r0, r3
 8004d56:	f000 fbe7 	bl	8005528 <updateStopwatchState>

	// some decisions in respective state functions dont clear these flags
	buttons.is1Pressed = buttons.is2Pressed = buttons.is3Pressed = buttons.is4Pressed = 0;
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	4b08      	ldr	r3, [pc, #32]	; (8004d80 <updateState+0x378>)
 8004d5e:	1c11      	adds	r1, r2, #0
 8004d60:	70d9      	strb	r1, [r3, #3]
 8004d62:	4b07      	ldr	r3, [pc, #28]	; (8004d80 <updateState+0x378>)
 8004d64:	1c11      	adds	r1, r2, #0
 8004d66:	7099      	strb	r1, [r3, #2]
 8004d68:	4b05      	ldr	r3, [pc, #20]	; (8004d80 <updateState+0x378>)
 8004d6a:	1c11      	adds	r1, r2, #0
 8004d6c:	7059      	strb	r1, [r3, #1]
 8004d6e:	4b04      	ldr	r3, [pc, #16]	; (8004d80 <updateState+0x378>)
 8004d70:	701a      	strb	r2, [r3, #0]
}
 8004d72:	46c0      	nop			; (mov r8, r8)
 8004d74:	46bd      	mov	sp, r7
 8004d76:	b004      	add	sp, #16
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	46c0      	nop			; (mov r8, r8)
 8004d7c:	20000134 	.word	0x20000134
 8004d80:	20000190 	.word	0x20000190

08004d84 <updateClockState>:
 *     the clock is updated and we revert back to default mode.
 *
 * notes:
 *   make date setting more robust (invalidate date entries when that day of month doesn't exist or just change modulo)
 */
void updateClockState(RTC_HandleTypeDef *hrtc) {
 8004d84:	b590      	push	{r4, r7, lr}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
	// change fields up, do nothing if not setting clock
	if (buttons.is2Pressed && clockVars.isBeingSet) {
 8004d8c:	4b9c      	ldr	r3, [pc, #624]	; (8005000 <updateClockState+0x27c>)
 8004d8e:	785b      	ldrb	r3, [r3, #1]
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d060      	beq.n	8004e58 <updateClockState+0xd4>
 8004d96:	4b9b      	ldr	r3, [pc, #620]	; (8005004 <updateClockState+0x280>)
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d05c      	beq.n	8004e58 <updateClockState+0xd4>
		buttons.is2Pressed = 0;
 8004d9e:	4b98      	ldr	r3, [pc, #608]	; (8005000 <updateClockState+0x27c>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	705a      	strb	r2, [r3, #1]
		updateFace.clock = 1;
 8004da4:	4b98      	ldr	r3, [pc, #608]	; (8005008 <updateClockState+0x284>)
 8004da6:	2201      	movs	r2, #1
 8004da8:	701a      	strb	r2, [r3, #0]
		switch (clockVars.fieldBeingSet) {
 8004daa:	4b96      	ldr	r3, [pc, #600]	; (8005004 <updateClockState+0x280>)
 8004dac:	785b      	ldrb	r3, [r3, #1]
 8004dae:	2b05      	cmp	r3, #5
 8004db0:	d854      	bhi.n	8004e5c <updateClockState+0xd8>
 8004db2:	009a      	lsls	r2, r3, #2
 8004db4:	4b95      	ldr	r3, [pc, #596]	; (800500c <updateClockState+0x288>)
 8004db6:	18d3      	adds	r3, r2, r3
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	469f      	mov	pc, r3
			case 1: clockVars.timeToSet->min = (clockVars.timeToSet->min+1) % 60; break;
 8004dbc:	4b91      	ldr	r3, [pc, #580]	; (8005004 <updateClockState+0x280>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	785b      	ldrb	r3, [r3, #1]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	213c      	movs	r1, #60	; 0x3c
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	f7fb fb16 	bl	80003f8 <__aeabi_idivmod>
 8004dcc:	000b      	movs	r3, r1
 8004dce:	001a      	movs	r2, r3
 8004dd0:	4b8c      	ldr	r3, [pc, #560]	; (8005004 <updateClockState+0x280>)
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	b2d2      	uxtb	r2, r2
 8004dd6:	705a      	strb	r2, [r3, #1]
 8004dd8:	e041      	b.n	8004e5e <updateClockState+0xda>
			case 2: clockVars.timeToSet->hr = (clockVars.timeToSet->hr+1) % 24; break;
 8004dda:	4b8a      	ldr	r3, [pc, #552]	; (8005004 <updateClockState+0x280>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	3301      	adds	r3, #1
 8004de2:	2118      	movs	r1, #24
 8004de4:	0018      	movs	r0, r3
 8004de6:	f7fb fb07 	bl	80003f8 <__aeabi_idivmod>
 8004dea:	000b      	movs	r3, r1
 8004dec:	001a      	movs	r2, r3
 8004dee:	4b85      	ldr	r3, [pc, #532]	; (8005004 <updateClockState+0x280>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	b2d2      	uxtb	r2, r2
 8004df4:	701a      	strb	r2, [r3, #0]
 8004df6:	e032      	b.n	8004e5e <updateClockState+0xda>
			case 3: clockVars.dateToSet->yr++; break;		// supposed to be between large numbers. no need for bounds checking
 8004df8:	4b82      	ldr	r3, [pc, #520]	; (8005004 <updateClockState+0x280>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	881a      	ldrh	r2, [r3, #0]
 8004dfe:	3201      	adds	r2, #1
 8004e00:	b292      	uxth	r2, r2
 8004e02:	801a      	strh	r2, [r3, #0]
 8004e04:	e02b      	b.n	8004e5e <updateClockState+0xda>
			case 4: clockVars.dateToSet->month = (clockVars.dateToSet->month) % 12 + 1; break;
 8004e06:	4b7f      	ldr	r3, [pc, #508]	; (8005004 <updateClockState+0x280>)
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	789b      	ldrb	r3, [r3, #2]
 8004e0c:	210c      	movs	r1, #12
 8004e0e:	0018      	movs	r0, r3
 8004e10:	f7fb fa08 	bl	8000224 <__aeabi_uidivmod>
 8004e14:	000b      	movs	r3, r1
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	4b7a      	ldr	r3, [pc, #488]	; (8005004 <updateClockState+0x280>)
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	3201      	adds	r2, #1
 8004e1e:	b2d2      	uxtb	r2, r2
 8004e20:	709a      	strb	r2, [r3, #2]
 8004e22:	e01c      	b.n	8004e5e <updateClockState+0xda>
			case 5: clockVars.dateToSet->date = ((clockVars.dateToSet->date) % maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr)) + 1; break;
 8004e24:	4b77      	ldr	r3, [pc, #476]	; (8005004 <updateClockState+0x280>)
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	78dc      	ldrb	r4, [r3, #3]
 8004e2a:	4b76      	ldr	r3, [pc, #472]	; (8005004 <updateClockState+0x280>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	789a      	ldrb	r2, [r3, #2]
 8004e30:	4b74      	ldr	r3, [pc, #464]	; (8005004 <updateClockState+0x280>)
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	0019      	movs	r1, r3
 8004e38:	0010      	movs	r0, r2
 8004e3a:	f7fe faaf 	bl	800339c <maxDaysInMonth>
 8004e3e:	0003      	movs	r3, r0
 8004e40:	0019      	movs	r1, r3
 8004e42:	0020      	movs	r0, r4
 8004e44:	f7fb f9ee 	bl	8000224 <__aeabi_uidivmod>
 8004e48:	000b      	movs	r3, r1
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	4b6d      	ldr	r3, [pc, #436]	; (8005004 <updateClockState+0x280>)
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	3201      	adds	r2, #1
 8004e52:	b2d2      	uxtb	r2, r2
 8004e54:	70da      	strb	r2, [r3, #3]
 8004e56:	e002      	b.n	8004e5e <updateClockState+0xda>
			default: break;
		}
	}
 8004e58:	46c0      	nop			; (mov r8, r8)
 8004e5a:	e000      	b.n	8004e5e <updateClockState+0xda>
			default: break;
 8004e5c:	46c0      	nop			; (mov r8, r8)
	// change fields down, do nothing if not setting clock
	if (buttons.is3Pressed && clockVars.isBeingSet) {
 8004e5e:	4b68      	ldr	r3, [pc, #416]	; (8005000 <updateClockState+0x27c>)
 8004e60:	789b      	ldrb	r3, [r3, #2]
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d066      	beq.n	8004f36 <updateClockState+0x1b2>
 8004e68:	4b66      	ldr	r3, [pc, #408]	; (8005004 <updateClockState+0x280>)
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d062      	beq.n	8004f36 <updateClockState+0x1b2>
		buttons.is3Pressed = 0;
 8004e70:	4b63      	ldr	r3, [pc, #396]	; (8005000 <updateClockState+0x27c>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	709a      	strb	r2, [r3, #2]
		updateFace.clock = 1;
 8004e76:	4b64      	ldr	r3, [pc, #400]	; (8005008 <updateClockState+0x284>)
 8004e78:	2201      	movs	r2, #1
 8004e7a:	701a      	strb	r2, [r3, #0]
		switch (clockVars.fieldBeingSet) {
 8004e7c:	4b61      	ldr	r3, [pc, #388]	; (8005004 <updateClockState+0x280>)
 8004e7e:	785b      	ldrb	r3, [r3, #1]
 8004e80:	2b05      	cmp	r3, #5
 8004e82:	d85a      	bhi.n	8004f3a <updateClockState+0x1b6>
 8004e84:	009a      	lsls	r2, r3, #2
 8004e86:	4b62      	ldr	r3, [pc, #392]	; (8005010 <updateClockState+0x28c>)
 8004e88:	18d3      	adds	r3, r2, r3
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	469f      	mov	pc, r3
			case 1:
				if (clockVars.timeToSet->min == 0) clockVars.timeToSet->min = 59;
 8004e8e:	4b5d      	ldr	r3, [pc, #372]	; (8005004 <updateClockState+0x280>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	785b      	ldrb	r3, [r3, #1]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d104      	bne.n	8004ea2 <updateClockState+0x11e>
 8004e98:	4b5a      	ldr	r3, [pc, #360]	; (8005004 <updateClockState+0x280>)
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	223b      	movs	r2, #59	; 0x3b
 8004e9e:	705a      	strb	r2, [r3, #1]
				else clockVars.timeToSet->min--;
				break;
 8004ea0:	e04c      	b.n	8004f3c <updateClockState+0x1b8>
				else clockVars.timeToSet->min--;
 8004ea2:	4b58      	ldr	r3, [pc, #352]	; (8005004 <updateClockState+0x280>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	785a      	ldrb	r2, [r3, #1]
 8004ea8:	3a01      	subs	r2, #1
 8004eaa:	b2d2      	uxtb	r2, r2
 8004eac:	705a      	strb	r2, [r3, #1]
				break;
 8004eae:	e045      	b.n	8004f3c <updateClockState+0x1b8>
			case 2:
				if (clockVars.timeToSet->hr == 0) clockVars.timeToSet->hr = 23;
 8004eb0:	4b54      	ldr	r3, [pc, #336]	; (8005004 <updateClockState+0x280>)
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d104      	bne.n	8004ec4 <updateClockState+0x140>
 8004eba:	4b52      	ldr	r3, [pc, #328]	; (8005004 <updateClockState+0x280>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	2217      	movs	r2, #23
 8004ec0:	701a      	strb	r2, [r3, #0]
				else clockVars.timeToSet->hr--;
				break;
 8004ec2:	e03b      	b.n	8004f3c <updateClockState+0x1b8>
				else clockVars.timeToSet->hr--;
 8004ec4:	4b4f      	ldr	r3, [pc, #316]	; (8005004 <updateClockState+0x280>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	781a      	ldrb	r2, [r3, #0]
 8004eca:	3a01      	subs	r2, #1
 8004ecc:	b2d2      	uxtb	r2, r2
 8004ece:	701a      	strb	r2, [r3, #0]
				break;
 8004ed0:	e034      	b.n	8004f3c <updateClockState+0x1b8>
			case 3: clockVars.dateToSet->yr--; break;		// supposed to be from 1950-2050. no need to do bounds checking
 8004ed2:	4b4c      	ldr	r3, [pc, #304]	; (8005004 <updateClockState+0x280>)
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	881a      	ldrh	r2, [r3, #0]
 8004ed8:	3a01      	subs	r2, #1
 8004eda:	b292      	uxth	r2, r2
 8004edc:	801a      	strh	r2, [r3, #0]
 8004ede:	e02d      	b.n	8004f3c <updateClockState+0x1b8>
			case 4: //clockVars.dateToSet->month = clockVars.dateToSet->month == 1 ? 12 : clockVars.dateToSet->month-1; break;
				if (clockVars.dateToSet->month == 1) clockVars.dateToSet->month = 12;
 8004ee0:	4b48      	ldr	r3, [pc, #288]	; (8005004 <updateClockState+0x280>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	789b      	ldrb	r3, [r3, #2]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d104      	bne.n	8004ef4 <updateClockState+0x170>
 8004eea:	4b46      	ldr	r3, [pc, #280]	; (8005004 <updateClockState+0x280>)
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	220c      	movs	r2, #12
 8004ef0:	709a      	strb	r2, [r3, #2]
				else clockVars.dateToSet->month--;
				break;
 8004ef2:	e023      	b.n	8004f3c <updateClockState+0x1b8>
				else clockVars.dateToSet->month--;
 8004ef4:	4b43      	ldr	r3, [pc, #268]	; (8005004 <updateClockState+0x280>)
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	789a      	ldrb	r2, [r3, #2]
 8004efa:	3a01      	subs	r2, #1
 8004efc:	b2d2      	uxtb	r2, r2
 8004efe:	709a      	strb	r2, [r3, #2]
				break;
 8004f00:	e01c      	b.n	8004f3c <updateClockState+0x1b8>
			case 5:
				if (clockVars.dateToSet->date == 1) clockVars.dateToSet->date = maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr);
 8004f02:	4b40      	ldr	r3, [pc, #256]	; (8005004 <updateClockState+0x280>)
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	78db      	ldrb	r3, [r3, #3]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d10d      	bne.n	8004f28 <updateClockState+0x1a4>
 8004f0c:	4b3d      	ldr	r3, [pc, #244]	; (8005004 <updateClockState+0x280>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	789a      	ldrb	r2, [r3, #2]
 8004f12:	4b3c      	ldr	r3, [pc, #240]	; (8005004 <updateClockState+0x280>)
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	8819      	ldrh	r1, [r3, #0]
 8004f18:	4b3a      	ldr	r3, [pc, #232]	; (8005004 <updateClockState+0x280>)
 8004f1a:	685c      	ldr	r4, [r3, #4]
 8004f1c:	0010      	movs	r0, r2
 8004f1e:	f7fe fa3d 	bl	800339c <maxDaysInMonth>
 8004f22:	0003      	movs	r3, r0
 8004f24:	70e3      	strb	r3, [r4, #3]
				else clockVars.dateToSet->date--;
				break;
 8004f26:	e009      	b.n	8004f3c <updateClockState+0x1b8>
				else clockVars.dateToSet->date--;
 8004f28:	4b36      	ldr	r3, [pc, #216]	; (8005004 <updateClockState+0x280>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	78da      	ldrb	r2, [r3, #3]
 8004f2e:	3a01      	subs	r2, #1
 8004f30:	b2d2      	uxtb	r2, r2
 8004f32:	70da      	strb	r2, [r3, #3]
				break;
 8004f34:	e002      	b.n	8004f3c <updateClockState+0x1b8>
			default: break;
		}
	}
 8004f36:	46c0      	nop			; (mov r8, r8)
 8004f38:	e000      	b.n	8004f3c <updateClockState+0x1b8>
			default: break;
 8004f3a:	46c0      	nop			; (mov r8, r8)
	// switches between setting mode and default mode. changes between different clock fields
	if (buttons.is4Pressed) {
 8004f3c:	4b30      	ldr	r3, [pc, #192]	; (8005000 <updateClockState+0x27c>)
 8004f3e:	78db      	ldrb	r3, [r3, #3]
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d057      	beq.n	8004ff6 <updateClockState+0x272>
		buttons.is4Pressed = 0;
 8004f46:	4b2e      	ldr	r3, [pc, #184]	; (8005000 <updateClockState+0x27c>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	70da      	strb	r2, [r3, #3]
		updateFace.clock = 1;
 8004f4c:	4b2e      	ldr	r3, [pc, #184]	; (8005008 <updateClockState+0x284>)
 8004f4e:	2201      	movs	r2, #1
 8004f50:	701a      	strb	r2, [r3, #0]
		clockVars.fieldBeingSet = (clockVars.fieldBeingSet + 1) % (NUM_CLOCKFIELDS + 1);
 8004f52:	4b2c      	ldr	r3, [pc, #176]	; (8005004 <updateClockState+0x280>)
 8004f54:	785b      	ldrb	r3, [r3, #1]
 8004f56:	3301      	adds	r3, #1
 8004f58:	2106      	movs	r1, #6
 8004f5a:	0018      	movs	r0, r3
 8004f5c:	f7fb fa4c 	bl	80003f8 <__aeabi_idivmod>
 8004f60:	000b      	movs	r3, r1
 8004f62:	b2da      	uxtb	r2, r3
 8004f64:	4b27      	ldr	r3, [pc, #156]	; (8005004 <updateClockState+0x280>)
 8004f66:	705a      	strb	r2, [r3, #1]
		if (clockVars.fieldBeingSet != 0) {
 8004f68:	4b26      	ldr	r3, [pc, #152]	; (8005004 <updateClockState+0x280>)
 8004f6a:	785b      	ldrb	r3, [r3, #1]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d033      	beq.n	8004fd8 <updateClockState+0x254>
			clockVars.isBeingSet = 1;
 8004f70:	4b24      	ldr	r3, [pc, #144]	; (8005004 <updateClockState+0x280>)
 8004f72:	2201      	movs	r2, #1
 8004f74:	701a      	strb	r2, [r3, #0]

			// should pull current time when first entering setting mode
			if (clockVars.fieldBeingSet == 1) {
 8004f76:	4b23      	ldr	r3, [pc, #140]	; (8005004 <updateClockState+0x280>)
 8004f78:	785b      	ldrb	r3, [r3, #1]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d10e      	bne.n	8004f9c <updateClockState+0x218>
				getDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
 8004f7e:	4b21      	ldr	r3, [pc, #132]	; (8005004 <updateClockState+0x280>)
 8004f80:	6858      	ldr	r0, [r3, #4]
 8004f82:	4b20      	ldr	r3, [pc, #128]	; (8005004 <updateClockState+0x280>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	0019      	movs	r1, r3
 8004f8a:	f7fe f8bf 	bl	800310c <getDateTime>
				HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_B);
 8004f8e:	2380      	movs	r3, #128	; 0x80
 8004f90:	009a      	lsls	r2, r3, #2
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	0011      	movs	r1, r2
 8004f96:	0018      	movs	r0, r3
 8004f98:	f003 fff8 	bl	8008f8c <HAL_RTC_DeactivateAlarm>
			}

			if (clockVars.dateToSet->date > maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr)) {
 8004f9c:	4b19      	ldr	r3, [pc, #100]	; (8005004 <updateClockState+0x280>)
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	78dc      	ldrb	r4, [r3, #3]
 8004fa2:	4b18      	ldr	r3, [pc, #96]	; (8005004 <updateClockState+0x280>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	789a      	ldrb	r2, [r3, #2]
 8004fa8:	4b16      	ldr	r3, [pc, #88]	; (8005004 <updateClockState+0x280>)
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	0019      	movs	r1, r3
 8004fb0:	0010      	movs	r0, r2
 8004fb2:	f7fe f9f3 	bl	800339c <maxDaysInMonth>
 8004fb6:	0003      	movs	r3, r0
 8004fb8:	429c      	cmp	r4, r3
 8004fba:	d91c      	bls.n	8004ff6 <updateClockState+0x272>
				clockVars.dateToSet->date = maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr);
 8004fbc:	4b11      	ldr	r3, [pc, #68]	; (8005004 <updateClockState+0x280>)
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	789a      	ldrb	r2, [r3, #2]
 8004fc2:	4b10      	ldr	r3, [pc, #64]	; (8005004 <updateClockState+0x280>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	8819      	ldrh	r1, [r3, #0]
 8004fc8:	4b0e      	ldr	r3, [pc, #56]	; (8005004 <updateClockState+0x280>)
 8004fca:	685c      	ldr	r4, [r3, #4]
 8004fcc:	0010      	movs	r0, r2
 8004fce:	f7fe f9e5 	bl	800339c <maxDaysInMonth>
 8004fd2:	0003      	movs	r3, r0
 8004fd4:	70e3      	strb	r3, [r4, #3]
			// second set to 0, weekday ignored
			setDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
			setClockAlarm(hrtc);
		}
	}
}
 8004fd6:	e00e      	b.n	8004ff6 <updateClockState+0x272>
			clockVars.isBeingSet = 0;
 8004fd8:	4b0a      	ldr	r3, [pc, #40]	; (8005004 <updateClockState+0x280>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	701a      	strb	r2, [r3, #0]
			setDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
 8004fde:	4b09      	ldr	r3, [pc, #36]	; (8005004 <updateClockState+0x280>)
 8004fe0:	6858      	ldr	r0, [r3, #4]
 8004fe2:	4b08      	ldr	r3, [pc, #32]	; (8005004 <updateClockState+0x280>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	0019      	movs	r1, r3
 8004fea:	f7fd ff22 	bl	8002e32 <setDateTime>
			setClockAlarm(hrtc);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	0018      	movs	r0, r3
 8004ff2:	f7fd ff89 	bl	8002f08 <setClockAlarm>
}
 8004ff6:	46c0      	nop			; (mov r8, r8)
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	b003      	add	sp, #12
 8004ffc:	bd90      	pop	{r4, r7, pc}
 8004ffe:	46c0      	nop			; (mov r8, r8)
 8005000:	20000190 	.word	0x20000190
 8005004:	20000110 	.word	0x20000110
 8005008:	20000144 	.word	0x20000144
 800500c:	0800bf1c 	.word	0x0800bf1c
 8005010:	0800bf34 	.word	0x0800bf34

08005014 <updateTimerState>:
 *     second, timer only runs for half second.)
 *     also not sure how to implement pause using rtc (alarm value has to change depending on how long timer is paused for)
 *   might need to change to using only hardware timer for this instead of rtc because of problems listed above
 *   insert a few more functions into this (those that need to use the hardware)
 */
void updateTimerState(TIM_HandleTypeDef *timerStopwatchTim, TIM_HandleTypeDef *motorTim) {
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
	if (timerVars.isBeingSet) {
 800501e:	4ba0      	ldr	r3, [pc, #640]	; (80052a0 <updateTimerState+0x28c>)
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d100      	bne.n	8005028 <updateTimerState+0x14>
 8005026:	e089      	b.n	800513c <updateTimerState+0x128>
		if (buttons.is2Pressed) {
 8005028:	4b9e      	ldr	r3, [pc, #632]	; (80052a4 <updateTimerState+0x290>)
 800502a:	785b      	ldrb	r3, [r3, #1]
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d03b      	beq.n	80050aa <updateTimerState+0x96>
			buttons.is2Pressed = 0;
 8005032:	4b9c      	ldr	r3, [pc, #624]	; (80052a4 <updateTimerState+0x290>)
 8005034:	2200      	movs	r2, #0
 8005036:	705a      	strb	r2, [r3, #1]
			updateFace.timer = 1;
 8005038:	4b9b      	ldr	r3, [pc, #620]	; (80052a8 <updateTimerState+0x294>)
 800503a:	2201      	movs	r2, #1
 800503c:	705a      	strb	r2, [r3, #1]

			// set field up
			switch (timerVars.fieldBeingSet) {
 800503e:	4b98      	ldr	r3, [pc, #608]	; (80052a0 <updateTimerState+0x28c>)
 8005040:	785b      	ldrb	r3, [r3, #1]
 8005042:	2b02      	cmp	r3, #2
 8005044:	d013      	beq.n	800506e <updateTimerState+0x5a>
 8005046:	2b03      	cmp	r3, #3
 8005048:	d020      	beq.n	800508c <updateTimerState+0x78>
 800504a:	2b01      	cmp	r3, #1
 800504c:	d000      	beq.n	8005050 <updateTimerState+0x3c>
				case 1: timerVars.timeToSet->sec = (timerVars.timeToSet->sec+1) % 60; break;
				case 2: timerVars.timeToSet->min = (timerVars.timeToSet->min+1) % 60; break;
				case 3: timerVars.timeToSet->hr = (timerVars.timeToSet->hr+1) % 100; break;
				default: break;
 800504e:	e02d      	b.n	80050ac <updateTimerState+0x98>
				case 1: timerVars.timeToSet->sec = (timerVars.timeToSet->sec+1) % 60; break;
 8005050:	4b93      	ldr	r3, [pc, #588]	; (80052a0 <updateTimerState+0x28c>)
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	789b      	ldrb	r3, [r3, #2]
 8005056:	3301      	adds	r3, #1
 8005058:	213c      	movs	r1, #60	; 0x3c
 800505a:	0018      	movs	r0, r3
 800505c:	f7fb f9cc 	bl	80003f8 <__aeabi_idivmod>
 8005060:	000b      	movs	r3, r1
 8005062:	001a      	movs	r2, r3
 8005064:	4b8e      	ldr	r3, [pc, #568]	; (80052a0 <updateTimerState+0x28c>)
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	b2d2      	uxtb	r2, r2
 800506a:	709a      	strb	r2, [r3, #2]
 800506c:	e01e      	b.n	80050ac <updateTimerState+0x98>
				case 2: timerVars.timeToSet->min = (timerVars.timeToSet->min+1) % 60; break;
 800506e:	4b8c      	ldr	r3, [pc, #560]	; (80052a0 <updateTimerState+0x28c>)
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	785b      	ldrb	r3, [r3, #1]
 8005074:	3301      	adds	r3, #1
 8005076:	213c      	movs	r1, #60	; 0x3c
 8005078:	0018      	movs	r0, r3
 800507a:	f7fb f9bd 	bl	80003f8 <__aeabi_idivmod>
 800507e:	000b      	movs	r3, r1
 8005080:	001a      	movs	r2, r3
 8005082:	4b87      	ldr	r3, [pc, #540]	; (80052a0 <updateTimerState+0x28c>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	b2d2      	uxtb	r2, r2
 8005088:	705a      	strb	r2, [r3, #1]
 800508a:	e00f      	b.n	80050ac <updateTimerState+0x98>
				case 3: timerVars.timeToSet->hr = (timerVars.timeToSet->hr+1) % 100; break;
 800508c:	4b84      	ldr	r3, [pc, #528]	; (80052a0 <updateTimerState+0x28c>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	3301      	adds	r3, #1
 8005094:	2164      	movs	r1, #100	; 0x64
 8005096:	0018      	movs	r0, r3
 8005098:	f7fb f9ae 	bl	80003f8 <__aeabi_idivmod>
 800509c:	000b      	movs	r3, r1
 800509e:	001a      	movs	r2, r3
 80050a0:	4b7f      	ldr	r3, [pc, #508]	; (80052a0 <updateTimerState+0x28c>)
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	b2d2      	uxtb	r2, r2
 80050a6:	701a      	strb	r2, [r3, #0]
 80050a8:	e000      	b.n	80050ac <updateTimerState+0x98>
			}
		}
 80050aa:	46c0      	nop			; (mov r8, r8)
		if (buttons.is3Pressed) {
 80050ac:	4b7d      	ldr	r3, [pc, #500]	; (80052a4 <updateTimerState+0x290>)
 80050ae:	789b      	ldrb	r3, [r3, #2]
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d100      	bne.n	80050b8 <updateTimerState+0xa4>
 80050b6:	e09a      	b.n	80051ee <updateTimerState+0x1da>
			buttons.is3Pressed = 0;
 80050b8:	4b7a      	ldr	r3, [pc, #488]	; (80052a4 <updateTimerState+0x290>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	709a      	strb	r2, [r3, #2]
			updateFace.timer = 1;
 80050be:	4b7a      	ldr	r3, [pc, #488]	; (80052a8 <updateTimerState+0x294>)
 80050c0:	2201      	movs	r2, #1
 80050c2:	705a      	strb	r2, [r3, #1]

			// set field down
			switch (timerVars.fieldBeingSet) {
 80050c4:	4b76      	ldr	r3, [pc, #472]	; (80052a0 <updateTimerState+0x28c>)
 80050c6:	785b      	ldrb	r3, [r3, #1]
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d015      	beq.n	80050f8 <updateTimerState+0xe4>
 80050cc:	2b03      	cmp	r3, #3
 80050ce:	d024      	beq.n	800511a <updateTimerState+0x106>
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d000      	beq.n	80050d6 <updateTimerState+0xc2>
					break;
				case 3:
					if (timerVars.timeToSet->hr == 0) timerVars.timeToSet->hr = 99;		// no limit on hour, since we're not using day
					else timerVars.timeToSet->hr--;
					break;
				default: break;
 80050d4:	e08c      	b.n	80051f0 <updateTimerState+0x1dc>
					if (timerVars.timeToSet->sec == 0) timerVars.timeToSet->sec = 59;
 80050d6:	4b72      	ldr	r3, [pc, #456]	; (80052a0 <updateTimerState+0x28c>)
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	789b      	ldrb	r3, [r3, #2]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d104      	bne.n	80050ea <updateTimerState+0xd6>
 80050e0:	4b6f      	ldr	r3, [pc, #444]	; (80052a0 <updateTimerState+0x28c>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	223b      	movs	r2, #59	; 0x3b
 80050e6:	709a      	strb	r2, [r3, #2]
					break;
 80050e8:	e082      	b.n	80051f0 <updateTimerState+0x1dc>
					else timerVars.timeToSet->sec--;
 80050ea:	4b6d      	ldr	r3, [pc, #436]	; (80052a0 <updateTimerState+0x28c>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	789a      	ldrb	r2, [r3, #2]
 80050f0:	3a01      	subs	r2, #1
 80050f2:	b2d2      	uxtb	r2, r2
 80050f4:	709a      	strb	r2, [r3, #2]
					break;
 80050f6:	e07b      	b.n	80051f0 <updateTimerState+0x1dc>
					if (timerVars.timeToSet->min == 0) timerVars.timeToSet->min = 59;
 80050f8:	4b69      	ldr	r3, [pc, #420]	; (80052a0 <updateTimerState+0x28c>)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	785b      	ldrb	r3, [r3, #1]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d104      	bne.n	800510c <updateTimerState+0xf8>
 8005102:	4b67      	ldr	r3, [pc, #412]	; (80052a0 <updateTimerState+0x28c>)
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	223b      	movs	r2, #59	; 0x3b
 8005108:	705a      	strb	r2, [r3, #1]
					break;
 800510a:	e071      	b.n	80051f0 <updateTimerState+0x1dc>
					else timerVars.timeToSet->min--;
 800510c:	4b64      	ldr	r3, [pc, #400]	; (80052a0 <updateTimerState+0x28c>)
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	785a      	ldrb	r2, [r3, #1]
 8005112:	3a01      	subs	r2, #1
 8005114:	b2d2      	uxtb	r2, r2
 8005116:	705a      	strb	r2, [r3, #1]
					break;
 8005118:	e06a      	b.n	80051f0 <updateTimerState+0x1dc>
					if (timerVars.timeToSet->hr == 0) timerVars.timeToSet->hr = 99;		// no limit on hour, since we're not using day
 800511a:	4b61      	ldr	r3, [pc, #388]	; (80052a0 <updateTimerState+0x28c>)
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d104      	bne.n	800512e <updateTimerState+0x11a>
 8005124:	4b5e      	ldr	r3, [pc, #376]	; (80052a0 <updateTimerState+0x28c>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	2263      	movs	r2, #99	; 0x63
 800512a:	701a      	strb	r2, [r3, #0]
					break;
 800512c:	e060      	b.n	80051f0 <updateTimerState+0x1dc>
					else timerVars.timeToSet->hr--;
 800512e:	4b5c      	ldr	r3, [pc, #368]	; (80052a0 <updateTimerState+0x28c>)
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	781a      	ldrb	r2, [r3, #0]
 8005134:	3a01      	subs	r2, #1
 8005136:	b2d2      	uxtb	r2, r2
 8005138:	701a      	strb	r2, [r3, #0]
					break;
 800513a:	e059      	b.n	80051f0 <updateTimerState+0x1dc>
			}
		}
	}
	// set and ready to run
	else if (timerVars.isSet) {
 800513c:	4b58      	ldr	r3, [pc, #352]	; (80052a0 <updateTimerState+0x28c>)
 800513e:	789b      	ldrb	r3, [r3, #2]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d055      	beq.n	80051f0 <updateTimerState+0x1dc>
		if (buttons.is2Pressed && isTimerRunning == 0 && timerCounter != 0) {
 8005144:	4b57      	ldr	r3, [pc, #348]	; (80052a4 <updateTimerState+0x290>)
 8005146:	785b      	ldrb	r3, [r3, #1]
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d018      	beq.n	8005180 <updateTimerState+0x16c>
 800514e:	4b57      	ldr	r3, [pc, #348]	; (80052ac <updateTimerState+0x298>)
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	d113      	bne.n	8005180 <updateTimerState+0x16c>
 8005158:	4b55      	ldr	r3, [pc, #340]	; (80052b0 <updateTimerState+0x29c>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00f      	beq.n	8005180 <updateTimerState+0x16c>
			buttons.is2Pressed = 0;
 8005160:	4b50      	ldr	r3, [pc, #320]	; (80052a4 <updateTimerState+0x290>)
 8005162:	2200      	movs	r2, #0
 8005164:	705a      	strb	r2, [r3, #1]
			updateFace.timer = 1;
 8005166:	4b50      	ldr	r3, [pc, #320]	; (80052a8 <updateTimerState+0x294>)
 8005168:	2201      	movs	r2, #1
 800516a:	705a      	strb	r2, [r3, #1]

			// start timer
			runTimer(timerStopwatchTim);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	0018      	movs	r0, r3
 8005170:	f7ff fa7c 	bl	800466c <runTimer>
			isTimerRunning = 1;
 8005174:	4b4d      	ldr	r3, [pc, #308]	; (80052ac <updateTimerState+0x298>)
 8005176:	2201      	movs	r2, #1
 8005178:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 0;
 800517a:	4b4e      	ldr	r3, [pc, #312]	; (80052b4 <updateTimerState+0x2a0>)
 800517c:	2200      	movs	r2, #0
 800517e:	701a      	strb	r2, [r3, #0]
		}
		if (buttons.is3Pressed && isTimerRunning && timerCounter != 0) {
 8005180:	4b48      	ldr	r3, [pc, #288]	; (80052a4 <updateTimerState+0x290>)
 8005182:	789b      	ldrb	r3, [r3, #2]
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d018      	beq.n	80051bc <updateTimerState+0x1a8>
 800518a:	4b48      	ldr	r3, [pc, #288]	; (80052ac <updateTimerState+0x298>)
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	d013      	beq.n	80051bc <updateTimerState+0x1a8>
 8005194:	4b46      	ldr	r3, [pc, #280]	; (80052b0 <updateTimerState+0x29c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00f      	beq.n	80051bc <updateTimerState+0x1a8>
			buttons.is3Pressed = 0;
 800519c:	4b41      	ldr	r3, [pc, #260]	; (80052a4 <updateTimerState+0x290>)
 800519e:	2200      	movs	r2, #0
 80051a0:	709a      	strb	r2, [r3, #2]
			updateFace.timer = 1;
 80051a2:	4b41      	ldr	r3, [pc, #260]	; (80052a8 <updateTimerState+0x294>)
 80051a4:	2201      	movs	r2, #1
 80051a6:	705a      	strb	r2, [r3, #1]

			// pause timer
			pauseTimer(timerStopwatchTim);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	0018      	movs	r0, r3
 80051ac:	f7ff faba 	bl	8004724 <pauseTimer>
			isTimerRunning = 0;
 80051b0:	4b3e      	ldr	r3, [pc, #248]	; (80052ac <updateTimerState+0x298>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 1;
 80051b6:	4b3f      	ldr	r3, [pc, #252]	; (80052b4 <updateTimerState+0x2a0>)
 80051b8:	2201      	movs	r2, #1
 80051ba:	701a      	strb	r2, [r3, #0]
		}
		if (buttons.is4Pressed) {
 80051bc:	4b39      	ldr	r3, [pc, #228]	; (80052a4 <updateTimerState+0x290>)
 80051be:	78db      	ldrb	r3, [r3, #3]
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d014      	beq.n	80051f0 <updateTimerState+0x1dc>
			buttons.is4Pressed = 0;
 80051c6:	4b37      	ldr	r3, [pc, #220]	; (80052a4 <updateTimerState+0x290>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	70da      	strb	r2, [r3, #3]
			updateFace.timer = 1;
 80051cc:	4b36      	ldr	r3, [pc, #216]	; (80052a8 <updateTimerState+0x294>)
 80051ce:	2201      	movs	r2, #1
 80051d0:	705a      	strb	r2, [r3, #1]

			// stop and clear timer
			stopTimer(timerStopwatchTim);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	0018      	movs	r0, r3
 80051d6:	f7ff fab9 	bl	800474c <stopTimer>
			timerVars.isSet = 0;
 80051da:	4b31      	ldr	r3, [pc, #196]	; (80052a0 <updateTimerState+0x28c>)
 80051dc:	2200      	movs	r2, #0
 80051de:	709a      	strb	r2, [r3, #2]
			isTimerRunning = 0;
 80051e0:	4b32      	ldr	r3, [pc, #200]	; (80052ac <updateTimerState+0x298>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 0;
 80051e6:	4b33      	ldr	r3, [pc, #204]	; (80052b4 <updateTimerState+0x2a0>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	701a      	strb	r2, [r3, #0]
 80051ec:	e000      	b.n	80051f0 <updateTimerState+0x1dc>
		}
 80051ee:	46c0      	nop			; (mov r8, r8)
//			timerCounter = timeToSeconds(timerVars.timeToSet);
//			runMotor(motorTim);
//		}
	}
	// not done? might be done (other buttons start/stop timer)
	if (buttons.is4Pressed) {
 80051f0:	4b2c      	ldr	r3, [pc, #176]	; (80052a4 <updateTimerState+0x290>)
 80051f2:	78db      	ldrb	r3, [r3, #3]
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d04d      	beq.n	8005296 <updateTimerState+0x282>
		buttons.is4Pressed = 0;
 80051fa:	4b2a      	ldr	r3, [pc, #168]	; (80052a4 <updateTimerState+0x290>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	70da      	strb	r2, [r3, #3]
		updateFace.timer = 1;
 8005200:	4b29      	ldr	r3, [pc, #164]	; (80052a8 <updateTimerState+0x294>)
 8005202:	2201      	movs	r2, #1
 8005204:	705a      	strb	r2, [r3, #1]

		// change field/mode
		timerVars.fieldBeingSet = (timerVars.fieldBeingSet + 1) % (NUM_TIMERFIELDS + 1);
 8005206:	4b26      	ldr	r3, [pc, #152]	; (80052a0 <updateTimerState+0x28c>)
 8005208:	785b      	ldrb	r3, [r3, #1]
 800520a:	3301      	adds	r3, #1
 800520c:	4a2a      	ldr	r2, [pc, #168]	; (80052b8 <updateTimerState+0x2a4>)
 800520e:	4013      	ands	r3, r2
 8005210:	d504      	bpl.n	800521c <updateTimerState+0x208>
 8005212:	3b01      	subs	r3, #1
 8005214:	2204      	movs	r2, #4
 8005216:	4252      	negs	r2, r2
 8005218:	4313      	orrs	r3, r2
 800521a:	3301      	adds	r3, #1
 800521c:	b2da      	uxtb	r2, r3
 800521e:	4b20      	ldr	r3, [pc, #128]	; (80052a0 <updateTimerState+0x28c>)
 8005220:	705a      	strb	r2, [r3, #1]
		if (timerVars.fieldBeingSet != 0) {
 8005222:	4b1f      	ldr	r3, [pc, #124]	; (80052a0 <updateTimerState+0x28c>)
 8005224:	785b      	ldrb	r3, [r3, #1]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d016      	beq.n	8005258 <updateTimerState+0x244>
			timerVars.isBeingSet = 1;
 800522a:	4b1d      	ldr	r3, [pc, #116]	; (80052a0 <updateTimerState+0x28c>)
 800522c:	2201      	movs	r2, #1
 800522e:	701a      	strb	r2, [r3, #0]
			timerVars.isSet = 0;
 8005230:	4b1b      	ldr	r3, [pc, #108]	; (80052a0 <updateTimerState+0x28c>)
 8005232:	2200      	movs	r2, #0
 8005234:	709a      	strb	r2, [r3, #2]

			// set temp fields to 0 when first entering setting mode
			if (timerVars.fieldBeingSet == 1) {
 8005236:	4b1a      	ldr	r3, [pc, #104]	; (80052a0 <updateTimerState+0x28c>)
 8005238:	785b      	ldrb	r3, [r3, #1]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d12b      	bne.n	8005296 <updateTimerState+0x282>
				timerVars.timeToSet->sec = 0;
 800523e:	4b18      	ldr	r3, [pc, #96]	; (80052a0 <updateTimerState+0x28c>)
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	709a      	strb	r2, [r3, #2]
				timerVars.timeToSet->min = 0;
 8005246:	4b16      	ldr	r3, [pc, #88]	; (80052a0 <updateTimerState+0x28c>)
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	705a      	strb	r2, [r3, #1]
				timerVars.timeToSet->hr = 0;
 800524e:	4b14      	ldr	r3, [pc, #80]	; (80052a0 <updateTimerState+0x28c>)
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	701a      	strb	r2, [r3, #0]
		else {
			timerVars.isBeingSet = 0;
			timerVars.isSet = 0;
		}
	}
}
 8005256:	e01e      	b.n	8005296 <updateTimerState+0x282>
		else if (timeToSeconds(timerVars.timeToSet) != 0) {
 8005258:	4b11      	ldr	r3, [pc, #68]	; (80052a0 <updateTimerState+0x28c>)
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	0018      	movs	r0, r3
 800525e:	f7fe f801 	bl	8003264 <timeToSeconds>
 8005262:	1e03      	subs	r3, r0, #0
 8005264:	d011      	beq.n	800528a <updateTimerState+0x276>
			timerVars.isBeingSet = 0;
 8005266:	4b0e      	ldr	r3, [pc, #56]	; (80052a0 <updateTimerState+0x28c>)
 8005268:	2200      	movs	r2, #0
 800526a:	701a      	strb	r2, [r3, #0]
			timerVars.isSet = 1;
 800526c:	4b0c      	ldr	r3, [pc, #48]	; (80052a0 <updateTimerState+0x28c>)
 800526e:	2201      	movs	r2, #1
 8005270:	709a      	strb	r2, [r3, #2]
			isTimerDone = 0;
 8005272:	4b12      	ldr	r3, [pc, #72]	; (80052bc <updateTimerState+0x2a8>)
 8005274:	2200      	movs	r2, #0
 8005276:	701a      	strb	r2, [r3, #0]
			timerCounter = timeToSeconds(timerVars.timeToSet);
 8005278:	4b09      	ldr	r3, [pc, #36]	; (80052a0 <updateTimerState+0x28c>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	0018      	movs	r0, r3
 800527e:	f7fd fff1 	bl	8003264 <timeToSeconds>
 8005282:	0002      	movs	r2, r0
 8005284:	4b0a      	ldr	r3, [pc, #40]	; (80052b0 <updateTimerState+0x29c>)
 8005286:	601a      	str	r2, [r3, #0]
}
 8005288:	e005      	b.n	8005296 <updateTimerState+0x282>
			timerVars.isBeingSet = 0;
 800528a:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <updateTimerState+0x28c>)
 800528c:	2200      	movs	r2, #0
 800528e:	701a      	strb	r2, [r3, #0]
			timerVars.isSet = 0;
 8005290:	4b03      	ldr	r3, [pc, #12]	; (80052a0 <updateTimerState+0x28c>)
 8005292:	2200      	movs	r2, #0
 8005294:	709a      	strb	r2, [r3, #2]
}
 8005296:	46c0      	nop			; (mov r8, r8)
 8005298:	46bd      	mov	sp, r7
 800529a:	b002      	add	sp, #8
 800529c:	bd80      	pop	{r7, pc}
 800529e:	46c0      	nop			; (mov r8, r8)
 80052a0:	2000011c 	.word	0x2000011c
 80052a4:	20000190 	.word	0x20000190
 80052a8:	20000144 	.word	0x20000144
 80052ac:	20000194 	.word	0x20000194
 80052b0:	2000014c 	.word	0x2000014c
 80052b4:	20000196 	.word	0x20000196
 80052b8:	80000003 	.word	0x80000003
 80052bc:	20000150 	.word	0x20000150

080052c0 <updateAlarmState>:
 *   should change to make it possible to have multiple alarms
 *   also pick alarms that repeat and alarms that don't
 *   need to make changes to ui to make this happen
 *   currently just does old behavior (only 1 alarm)
 */
void updateAlarmState(RTC_HandleTypeDef *hrtc, TIM_HandleTypeDef *motorTim) {
 80052c0:	b5b0      	push	{r4, r5, r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
	if (buttons.is2Pressed && alarmVars.isBeingSet) {
 80052ca:	4b94      	ldr	r3, [pc, #592]	; (800551c <updateAlarmState+0x25c>)
 80052cc:	785b      	ldrb	r3, [r3, #1]
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d052      	beq.n	800537a <updateAlarmState+0xba>
 80052d4:	4b92      	ldr	r3, [pc, #584]	; (8005520 <updateAlarmState+0x260>)
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d04e      	beq.n	800537a <updateAlarmState+0xba>
		buttons.is2Pressed = 0;
 80052dc:	4b8f      	ldr	r3, [pc, #572]	; (800551c <updateAlarmState+0x25c>)
 80052de:	2200      	movs	r2, #0
 80052e0:	705a      	strb	r2, [r3, #1]
		updateFace.alarm = 1;
 80052e2:	4b90      	ldr	r3, [pc, #576]	; (8005524 <updateAlarmState+0x264>)
 80052e4:	2201      	movs	r2, #1
 80052e6:	709a      	strb	r2, [r3, #2]

		// change fields up
		switch (alarmVars.fieldBeingSet) {
 80052e8:	4b8d      	ldr	r3, [pc, #564]	; (8005520 <updateAlarmState+0x260>)
 80052ea:	785b      	ldrb	r3, [r3, #1]
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d017      	beq.n	8005320 <updateAlarmState+0x60>
 80052f0:	dc02      	bgt.n	80052f8 <updateAlarmState+0x38>
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d005      	beq.n	8005302 <updateAlarmState+0x42>
			case 1: alarmVars.alarmToSet->sec = (alarmVars.alarmToSet->sec + 1) % 60; break;
			case 2: alarmVars.alarmToSet->min = (alarmVars.alarmToSet->min + 1) % 60; break;
			case 3: alarmVars.alarmToSet->hr = (alarmVars.alarmToSet->hr + 1) % 24; break;
			case 4: alarmVars.alarmToSet->weekday = (alarmVars.alarmToSet->weekday) % 7 + 1; break;
			default: break;
 80052f6:	e041      	b.n	800537c <updateAlarmState+0xbc>
		switch (alarmVars.fieldBeingSet) {
 80052f8:	2b03      	cmp	r3, #3
 80052fa:	d020      	beq.n	800533e <updateAlarmState+0x7e>
 80052fc:	2b04      	cmp	r3, #4
 80052fe:	d02d      	beq.n	800535c <updateAlarmState+0x9c>
			default: break;
 8005300:	e03c      	b.n	800537c <updateAlarmState+0xbc>
			case 1: alarmVars.alarmToSet->sec = (alarmVars.alarmToSet->sec + 1) % 60; break;
 8005302:	4b87      	ldr	r3, [pc, #540]	; (8005520 <updateAlarmState+0x260>)
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	789b      	ldrb	r3, [r3, #2]
 8005308:	3301      	adds	r3, #1
 800530a:	213c      	movs	r1, #60	; 0x3c
 800530c:	0018      	movs	r0, r3
 800530e:	f7fb f873 	bl	80003f8 <__aeabi_idivmod>
 8005312:	000b      	movs	r3, r1
 8005314:	001a      	movs	r2, r3
 8005316:	4b82      	ldr	r3, [pc, #520]	; (8005520 <updateAlarmState+0x260>)
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	b2d2      	uxtb	r2, r2
 800531c:	709a      	strb	r2, [r3, #2]
 800531e:	e02d      	b.n	800537c <updateAlarmState+0xbc>
			case 2: alarmVars.alarmToSet->min = (alarmVars.alarmToSet->min + 1) % 60; break;
 8005320:	4b7f      	ldr	r3, [pc, #508]	; (8005520 <updateAlarmState+0x260>)
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	785b      	ldrb	r3, [r3, #1]
 8005326:	3301      	adds	r3, #1
 8005328:	213c      	movs	r1, #60	; 0x3c
 800532a:	0018      	movs	r0, r3
 800532c:	f7fb f864 	bl	80003f8 <__aeabi_idivmod>
 8005330:	000b      	movs	r3, r1
 8005332:	001a      	movs	r2, r3
 8005334:	4b7a      	ldr	r3, [pc, #488]	; (8005520 <updateAlarmState+0x260>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	b2d2      	uxtb	r2, r2
 800533a:	705a      	strb	r2, [r3, #1]
 800533c:	e01e      	b.n	800537c <updateAlarmState+0xbc>
			case 3: alarmVars.alarmToSet->hr = (alarmVars.alarmToSet->hr + 1) % 24; break;
 800533e:	4b78      	ldr	r3, [pc, #480]	; (8005520 <updateAlarmState+0x260>)
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	3301      	adds	r3, #1
 8005346:	2118      	movs	r1, #24
 8005348:	0018      	movs	r0, r3
 800534a:	f7fb f855 	bl	80003f8 <__aeabi_idivmod>
 800534e:	000b      	movs	r3, r1
 8005350:	001a      	movs	r2, r3
 8005352:	4b73      	ldr	r3, [pc, #460]	; (8005520 <updateAlarmState+0x260>)
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	b2d2      	uxtb	r2, r2
 8005358:	701a      	strb	r2, [r3, #0]
 800535a:	e00f      	b.n	800537c <updateAlarmState+0xbc>
			case 4: alarmVars.alarmToSet->weekday = (alarmVars.alarmToSet->weekday) % 7 + 1; break;
 800535c:	4b70      	ldr	r3, [pc, #448]	; (8005520 <updateAlarmState+0x260>)
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	78db      	ldrb	r3, [r3, #3]
 8005362:	2107      	movs	r1, #7
 8005364:	0018      	movs	r0, r3
 8005366:	f7fa ff5d 	bl	8000224 <__aeabi_uidivmod>
 800536a:	000b      	movs	r3, r1
 800536c:	b2da      	uxtb	r2, r3
 800536e:	4b6c      	ldr	r3, [pc, #432]	; (8005520 <updateAlarmState+0x260>)
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	3201      	adds	r2, #1
 8005374:	b2d2      	uxtb	r2, r2
 8005376:	70da      	strb	r2, [r3, #3]
 8005378:	e000      	b.n	800537c <updateAlarmState+0xbc>
		}
	}
 800537a:	46c0      	nop			; (mov r8, r8)
	if (buttons.is3Pressed && alarmVars.isBeingSet) {
 800537c:	4b67      	ldr	r3, [pc, #412]	; (800551c <updateAlarmState+0x25c>)
 800537e:	789b      	ldrb	r3, [r3, #2]
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d05a      	beq.n	800543c <updateAlarmState+0x17c>
 8005386:	4b66      	ldr	r3, [pc, #408]	; (8005520 <updateAlarmState+0x260>)
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d056      	beq.n	800543c <updateAlarmState+0x17c>
		buttons.is3Pressed = 0;
 800538e:	4b63      	ldr	r3, [pc, #396]	; (800551c <updateAlarmState+0x25c>)
 8005390:	2200      	movs	r2, #0
 8005392:	709a      	strb	r2, [r3, #2]
		updateFace.alarm = 1;
 8005394:	4b63      	ldr	r3, [pc, #396]	; (8005524 <updateAlarmState+0x264>)
 8005396:	2201      	movs	r2, #1
 8005398:	709a      	strb	r2, [r3, #2]

		// change fields down
		switch (alarmVars.fieldBeingSet) {
 800539a:	4b61      	ldr	r3, [pc, #388]	; (8005520 <updateAlarmState+0x260>)
 800539c:	785b      	ldrb	r3, [r3, #1]
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d019      	beq.n	80053d6 <updateAlarmState+0x116>
 80053a2:	dc02      	bgt.n	80053aa <updateAlarmState+0xea>
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d005      	beq.n	80053b4 <updateAlarmState+0xf4>
				break;
			case 4:
				if (alarmVars.alarmToSet->weekday == RTC_WEEKDAY_MONDAY) alarmVars.alarmToSet->weekday = RTC_WEEKDAY_SUNDAY;
				else alarmVars.alarmToSet->weekday--;
				break;
			default: break;
 80053a8:	e049      	b.n	800543e <updateAlarmState+0x17e>
		switch (alarmVars.fieldBeingSet) {
 80053aa:	2b03      	cmp	r3, #3
 80053ac:	d024      	beq.n	80053f8 <updateAlarmState+0x138>
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	d033      	beq.n	800541a <updateAlarmState+0x15a>
			default: break;
 80053b2:	e044      	b.n	800543e <updateAlarmState+0x17e>
				if (alarmVars.alarmToSet->sec == 0) alarmVars.alarmToSet->sec = 59;
 80053b4:	4b5a      	ldr	r3, [pc, #360]	; (8005520 <updateAlarmState+0x260>)
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	789b      	ldrb	r3, [r3, #2]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d104      	bne.n	80053c8 <updateAlarmState+0x108>
 80053be:	4b58      	ldr	r3, [pc, #352]	; (8005520 <updateAlarmState+0x260>)
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	223b      	movs	r2, #59	; 0x3b
 80053c4:	709a      	strb	r2, [r3, #2]
				break;
 80053c6:	e03a      	b.n	800543e <updateAlarmState+0x17e>
				else alarmVars.alarmToSet->sec--;
 80053c8:	4b55      	ldr	r3, [pc, #340]	; (8005520 <updateAlarmState+0x260>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	789a      	ldrb	r2, [r3, #2]
 80053ce:	3a01      	subs	r2, #1
 80053d0:	b2d2      	uxtb	r2, r2
 80053d2:	709a      	strb	r2, [r3, #2]
				break;
 80053d4:	e033      	b.n	800543e <updateAlarmState+0x17e>
				if (alarmVars.alarmToSet->min == 0) alarmVars.alarmToSet->min = 59;
 80053d6:	4b52      	ldr	r3, [pc, #328]	; (8005520 <updateAlarmState+0x260>)
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	785b      	ldrb	r3, [r3, #1]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d104      	bne.n	80053ea <updateAlarmState+0x12a>
 80053e0:	4b4f      	ldr	r3, [pc, #316]	; (8005520 <updateAlarmState+0x260>)
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	223b      	movs	r2, #59	; 0x3b
 80053e6:	705a      	strb	r2, [r3, #1]
				break;
 80053e8:	e029      	b.n	800543e <updateAlarmState+0x17e>
				else alarmVars.alarmToSet->min--;
 80053ea:	4b4d      	ldr	r3, [pc, #308]	; (8005520 <updateAlarmState+0x260>)
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	785a      	ldrb	r2, [r3, #1]
 80053f0:	3a01      	subs	r2, #1
 80053f2:	b2d2      	uxtb	r2, r2
 80053f4:	705a      	strb	r2, [r3, #1]
				break;
 80053f6:	e022      	b.n	800543e <updateAlarmState+0x17e>
				if (alarmVars.alarmToSet->hr == 0) alarmVars.alarmToSet->hr = 23;
 80053f8:	4b49      	ldr	r3, [pc, #292]	; (8005520 <updateAlarmState+0x260>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d104      	bne.n	800540c <updateAlarmState+0x14c>
 8005402:	4b47      	ldr	r3, [pc, #284]	; (8005520 <updateAlarmState+0x260>)
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	2217      	movs	r2, #23
 8005408:	701a      	strb	r2, [r3, #0]
				break;
 800540a:	e018      	b.n	800543e <updateAlarmState+0x17e>
				else alarmVars.alarmToSet->hr--;
 800540c:	4b44      	ldr	r3, [pc, #272]	; (8005520 <updateAlarmState+0x260>)
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	781a      	ldrb	r2, [r3, #0]
 8005412:	3a01      	subs	r2, #1
 8005414:	b2d2      	uxtb	r2, r2
 8005416:	701a      	strb	r2, [r3, #0]
				break;
 8005418:	e011      	b.n	800543e <updateAlarmState+0x17e>
				if (alarmVars.alarmToSet->weekday == RTC_WEEKDAY_MONDAY) alarmVars.alarmToSet->weekday = RTC_WEEKDAY_SUNDAY;
 800541a:	4b41      	ldr	r3, [pc, #260]	; (8005520 <updateAlarmState+0x260>)
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	78db      	ldrb	r3, [r3, #3]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d104      	bne.n	800542e <updateAlarmState+0x16e>
 8005424:	4b3e      	ldr	r3, [pc, #248]	; (8005520 <updateAlarmState+0x260>)
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	2207      	movs	r2, #7
 800542a:	70da      	strb	r2, [r3, #3]
				break;
 800542c:	e007      	b.n	800543e <updateAlarmState+0x17e>
				else alarmVars.alarmToSet->weekday--;
 800542e:	4b3c      	ldr	r3, [pc, #240]	; (8005520 <updateAlarmState+0x260>)
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	78da      	ldrb	r2, [r3, #3]
 8005434:	3a01      	subs	r2, #1
 8005436:	b2d2      	uxtb	r2, r2
 8005438:	70da      	strb	r2, [r3, #3]
				break;
 800543a:	e000      	b.n	800543e <updateAlarmState+0x17e>
		}
	}
 800543c:	46c0      	nop			; (mov r8, r8)
	if (buttons.is4Pressed) {
 800543e:	4b37      	ldr	r3, [pc, #220]	; (800551c <updateAlarmState+0x25c>)
 8005440:	78db      	ldrb	r3, [r3, #3]
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b00      	cmp	r3, #0
 8005446:	d065      	beq.n	8005514 <updateAlarmState+0x254>
		buttons.is4Pressed = 0;
 8005448:	4b34      	ldr	r3, [pc, #208]	; (800551c <updateAlarmState+0x25c>)
 800544a:	2200      	movs	r2, #0
 800544c:	70da      	strb	r2, [r3, #3]
		updateFace.alarm = 1;
 800544e:	4b35      	ldr	r3, [pc, #212]	; (8005524 <updateAlarmState+0x264>)
 8005450:	2201      	movs	r2, #1
 8005452:	709a      	strb	r2, [r3, #2]

		if (alarmVars.isSet == 0) {
 8005454:	4b32      	ldr	r3, [pc, #200]	; (8005520 <updateAlarmState+0x260>)
 8005456:	789b      	ldrb	r3, [r3, #2]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d151      	bne.n	8005500 <updateAlarmState+0x240>
			// toggle between fields
			alarmVars.fieldBeingSet = (alarmVars.fieldBeingSet + 1) % (NUM_ALARMFIELDS + 1);
 800545c:	4b30      	ldr	r3, [pc, #192]	; (8005520 <updateAlarmState+0x260>)
 800545e:	785b      	ldrb	r3, [r3, #1]
 8005460:	3301      	adds	r3, #1
 8005462:	2105      	movs	r1, #5
 8005464:	0018      	movs	r0, r3
 8005466:	f7fa ffc7 	bl	80003f8 <__aeabi_idivmod>
 800546a:	000b      	movs	r3, r1
 800546c:	b2da      	uxtb	r2, r3
 800546e:	4b2c      	ldr	r3, [pc, #176]	; (8005520 <updateAlarmState+0x260>)
 8005470:	705a      	strb	r2, [r3, #1]
			if (alarmVars.fieldBeingSet != 0) {
 8005472:	4b2b      	ldr	r3, [pc, #172]	; (8005520 <updateAlarmState+0x260>)
 8005474:	785b      	ldrb	r3, [r3, #1]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d034      	beq.n	80054e4 <updateAlarmState+0x224>
				alarmVars.isBeingSet = 1;
 800547a:	4b29      	ldr	r3, [pc, #164]	; (8005520 <updateAlarmState+0x260>)
 800547c:	2201      	movs	r2, #1
 800547e:	701a      	strb	r2, [r3, #0]
				if (alarmVars.fieldBeingSet == 1) {
 8005480:	4b27      	ldr	r3, [pc, #156]	; (8005520 <updateAlarmState+0x260>)
 8005482:	785b      	ldrb	r3, [r3, #1]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d145      	bne.n	8005514 <updateAlarmState+0x254>
					struct dates d = {0};
 8005488:	2510      	movs	r5, #16
 800548a:	197b      	adds	r3, r7, r5
 800548c:	0018      	movs	r0, r3
 800548e:	2306      	movs	r3, #6
 8005490:	001a      	movs	r2, r3
 8005492:	2100      	movs	r1, #0
 8005494:	f005 fb8f 	bl	800abb6 <memset>
					struct times t = {0};
 8005498:	240c      	movs	r4, #12
 800549a:	193b      	adds	r3, r7, r4
 800549c:	0018      	movs	r0, r3
 800549e:	2303      	movs	r3, #3
 80054a0:	001a      	movs	r2, r3
 80054a2:	2100      	movs	r1, #0
 80054a4:	f005 fb87 	bl	800abb6 <memset>
					getDateTime(&d, &t, hrtc);
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	0021      	movs	r1, r4
 80054ac:	000c      	movs	r4, r1
 80054ae:	1879      	adds	r1, r7, r1
 80054b0:	197b      	adds	r3, r7, r5
 80054b2:	0018      	movs	r0, r3
 80054b4:	f7fd fe2a 	bl	800310c <getDateTime>
					alarmVars.alarmToSet->sec = t.sec;
 80054b8:	4b19      	ldr	r3, [pc, #100]	; (8005520 <updateAlarmState+0x260>)
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	0021      	movs	r1, r4
 80054be:	187a      	adds	r2, r7, r1
 80054c0:	7892      	ldrb	r2, [r2, #2]
 80054c2:	709a      	strb	r2, [r3, #2]
					alarmVars.alarmToSet->min = t.min;
 80054c4:	4b16      	ldr	r3, [pc, #88]	; (8005520 <updateAlarmState+0x260>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	187a      	adds	r2, r7, r1
 80054ca:	7852      	ldrb	r2, [r2, #1]
 80054cc:	705a      	strb	r2, [r3, #1]
					alarmVars.alarmToSet->hr = t.hr;
 80054ce:	4b14      	ldr	r3, [pc, #80]	; (8005520 <updateAlarmState+0x260>)
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	187a      	adds	r2, r7, r1
 80054d4:	7812      	ldrb	r2, [r2, #0]
 80054d6:	701a      	strb	r2, [r3, #0]
					alarmVars.alarmToSet->weekday = d.weekday;
 80054d8:	4b11      	ldr	r3, [pc, #68]	; (8005520 <updateAlarmState+0x260>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	197a      	adds	r2, r7, r5
 80054de:	7912      	ldrb	r2, [r2, #4]
 80054e0:	70da      	strb	r2, [r3, #3]
		}
	}
//	if (isAlarmDone) {
//		runMotor(motorTim);
//	}
}
 80054e2:	e017      	b.n	8005514 <updateAlarmState+0x254>
				alarmVars.isBeingSet = 0;
 80054e4:	4b0e      	ldr	r3, [pc, #56]	; (8005520 <updateAlarmState+0x260>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	701a      	strb	r2, [r3, #0]
				alarmVars.isSet = 1;
 80054ea:	4b0d      	ldr	r3, [pc, #52]	; (8005520 <updateAlarmState+0x260>)
 80054ec:	2201      	movs	r2, #1
 80054ee:	709a      	strb	r2, [r3, #2]
				setAlarm(alarmVars.alarmToSet, hrtc);
 80054f0:	4b0b      	ldr	r3, [pc, #44]	; (8005520 <updateAlarmState+0x260>)
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	0011      	movs	r1, r2
 80054f8:	0018      	movs	r0, r3
 80054fa:	f7fd fcb0 	bl	8002e5e <setAlarm>
}
 80054fe:	e009      	b.n	8005514 <updateAlarmState+0x254>
			alarmVars.isSet = 0;
 8005500:	4b07      	ldr	r3, [pc, #28]	; (8005520 <updateAlarmState+0x260>)
 8005502:	2200      	movs	r2, #0
 8005504:	709a      	strb	r2, [r3, #2]
			HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);
 8005506:	2380      	movs	r3, #128	; 0x80
 8005508:	005a      	lsls	r2, r3, #1
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	0011      	movs	r1, r2
 800550e:	0018      	movs	r0, r3
 8005510:	f003 fd3c 	bl	8008f8c <HAL_RTC_DeactivateAlarm>
}
 8005514:	46c0      	nop			; (mov r8, r8)
 8005516:	46bd      	mov	sp, r7
 8005518:	b006      	add	sp, #24
 800551a:	bdb0      	pop	{r4, r5, r7, pc}
 800551c:	20000190 	.word	0x20000190
 8005520:	20000124 	.word	0x20000124
 8005524:	20000144 	.word	0x20000144

08005528 <updateStopwatchState>:
 * notes:
 *   using lptim now, but might need to change to use other timer as lptim might be used by adc
 *     to take regular measurements of the battery
 *   would just have to modify functions in timers.c
 */
void updateStopwatchState(TIM_HandleTypeDef *timerStopwatchTim) {
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
	if (buttons.is2Pressed) {	// start/stop
 8005530:	4b2d      	ldr	r3, [pc, #180]	; (80055e8 <updateStopwatchState+0xc0>)
 8005532:	785b      	ldrb	r3, [r3, #1]
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d01f      	beq.n	800557a <updateStopwatchState+0x52>
		buttons.is2Pressed = 0;
 800553a:	4b2b      	ldr	r3, [pc, #172]	; (80055e8 <updateStopwatchState+0xc0>)
 800553c:	2200      	movs	r2, #0
 800553e:	705a      	strb	r2, [r3, #1]
		updateFace.stopwatch = 1;
 8005540:	4b2a      	ldr	r3, [pc, #168]	; (80055ec <updateStopwatchState+0xc4>)
 8005542:	2201      	movs	r2, #1
 8005544:	70da      	strb	r2, [r3, #3]

		if (isStopwatchRunning == 0) {
 8005546:	4b2a      	ldr	r3, [pc, #168]	; (80055f0 <updateStopwatchState+0xc8>)
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10a      	bne.n	8005566 <updateStopwatchState+0x3e>
			runStopwatch(timerStopwatchTim);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	0018      	movs	r0, r3
 8005554:	f7ff f912 	bl	800477c <runStopwatch>
			isStopwatchRunning = 1;
 8005558:	4b25      	ldr	r3, [pc, #148]	; (80055f0 <updateStopwatchState+0xc8>)
 800555a:	2201      	movs	r2, #1
 800555c:	701a      	strb	r2, [r3, #0]
			isStopwatchPaused = 0;
 800555e:	4b25      	ldr	r3, [pc, #148]	; (80055f4 <updateStopwatchState+0xcc>)
 8005560:	2200      	movs	r2, #0
 8005562:	701a      	strb	r2, [r3, #0]
 8005564:	e009      	b.n	800557a <updateStopwatchState+0x52>
		}
		else {
			pauseStopwatch(timerStopwatchTim);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	0018      	movs	r0, r3
 800556a:	f7ff f96d 	bl	8004848 <pauseStopwatch>
			isStopwatchRunning = 0;
 800556e:	4b20      	ldr	r3, [pc, #128]	; (80055f0 <updateStopwatchState+0xc8>)
 8005570:	2200      	movs	r2, #0
 8005572:	701a      	strb	r2, [r3, #0]
			isStopwatchPaused = 1;
 8005574:	4b1f      	ldr	r3, [pc, #124]	; (80055f4 <updateStopwatchState+0xcc>)
 8005576:	2201      	movs	r2, #1
 8005578:	701a      	strb	r2, [r3, #0]
		}
	}
	if (buttons.is3Pressed && stopwatchCounter != 0) {
 800557a:	4b1b      	ldr	r3, [pc, #108]	; (80055e8 <updateStopwatchState+0xc0>)
 800557c:	789b      	ldrb	r3, [r3, #2]
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d011      	beq.n	80055a8 <updateStopwatchState+0x80>
 8005584:	4b1c      	ldr	r3, [pc, #112]	; (80055f8 <updateStopwatchState+0xd0>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00d      	beq.n	80055a8 <updateStopwatchState+0x80>
		buttons.is3Pressed = 0;
 800558c:	4b16      	ldr	r3, [pc, #88]	; (80055e8 <updateStopwatchState+0xc0>)
 800558e:	2200      	movs	r2, #0
 8005590:	709a      	strb	r2, [r3, #2]
		updateFace.stopwatch = 1;
 8005592:	4b16      	ldr	r3, [pc, #88]	; (80055ec <updateStopwatchState+0xc4>)
 8005594:	2201      	movs	r2, #1
 8005596:	70da      	strb	r2, [r3, #3]

		// pull data and set lap
		stopwatchVars.lapPrev = stopwatchVars.lapCurrent;
 8005598:	4b18      	ldr	r3, [pc, #96]	; (80055fc <updateStopwatchState+0xd4>)
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	4b17      	ldr	r3, [pc, #92]	; (80055fc <updateStopwatchState+0xd4>)
 800559e:	601a      	str	r2, [r3, #0]
		stopwatchVars.lapCurrent = stopwatchCounter;
 80055a0:	4b15      	ldr	r3, [pc, #84]	; (80055f8 <updateStopwatchState+0xd0>)
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	4b15      	ldr	r3, [pc, #84]	; (80055fc <updateStopwatchState+0xd4>)
 80055a6:	605a      	str	r2, [r3, #4]
	}
	if (buttons.is4Pressed) {
 80055a8:	4b0f      	ldr	r3, [pc, #60]	; (80055e8 <updateStopwatchState+0xc0>)
 80055aa:	78db      	ldrb	r3, [r3, #3]
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d015      	beq.n	80055de <updateStopwatchState+0xb6>
		buttons.is4Pressed = 0;
 80055b2:	4b0d      	ldr	r3, [pc, #52]	; (80055e8 <updateStopwatchState+0xc0>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	70da      	strb	r2, [r3, #3]
		updateFace.stopwatch = 1;
 80055b8:	4b0c      	ldr	r3, [pc, #48]	; (80055ec <updateStopwatchState+0xc4>)
 80055ba:	2201      	movs	r2, #1
 80055bc:	70da      	strb	r2, [r3, #3]

		// clear stopwatch hw
		clearStopwatch(timerStopwatchTim);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	0018      	movs	r0, r3
 80055c2:	f7ff f955 	bl	8004870 <clearStopwatch>
		stopwatchVars.lapCurrent = 0;
 80055c6:	4b0d      	ldr	r3, [pc, #52]	; (80055fc <updateStopwatchState+0xd4>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	605a      	str	r2, [r3, #4]
		stopwatchVars.lapPrev = 0;
 80055cc:	4b0b      	ldr	r3, [pc, #44]	; (80055fc <updateStopwatchState+0xd4>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	601a      	str	r2, [r3, #0]
		isStopwatchRunning = 0;
 80055d2:	4b07      	ldr	r3, [pc, #28]	; (80055f0 <updateStopwatchState+0xc8>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	701a      	strb	r2, [r3, #0]
		isStopwatchPaused = 0;
 80055d8:	4b06      	ldr	r3, [pc, #24]	; (80055f4 <updateStopwatchState+0xcc>)
 80055da:	2200      	movs	r2, #0
 80055dc:	701a      	strb	r2, [r3, #0]
	}
}
 80055de:	46c0      	nop			; (mov r8, r8)
 80055e0:	46bd      	mov	sp, r7
 80055e2:	b002      	add	sp, #8
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	46c0      	nop			; (mov r8, r8)
 80055e8:	20000190 	.word	0x20000190
 80055ec:	20000144 	.word	0x20000144
 80055f0:	20000148 	.word	0x20000148
 80055f4:	20000195 	.word	0x20000195
 80055f8:	20000198 	.word	0x20000198
 80055fc:	2000012c 	.word	0x2000012c

08005600 <updateDisplay>:

// update screen based on global variables
// going in main, so it's executing in a while loop
//   software interrupt on flag so that this doesn't run all the time?
void updateDisplay(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
	// change faces
	if (isFaceBeingChanged == 1) {
 800560a:	4b56      	ldr	r3, [pc, #344]	; (8005764 <updateDisplay+0x164>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d14e      	bne.n	80056b0 <updateDisplay+0xb0>
		isFaceBeingChanged = 0;
 8005612:	4b54      	ldr	r3, [pc, #336]	; (8005764 <updateDisplay+0x164>)
 8005614:	2200      	movs	r2, #0
 8005616:	701a      	strb	r2, [r3, #0]

		// drawing titles and boxes that won't be rewritten during normal operation within
		// a specific face (titles and buttons)
		if (faceOnDisplay == faceClock) {
 8005618:	4b53      	ldr	r3, [pc, #332]	; (8005768 <updateDisplay+0x168>)
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10b      	bne.n	8005638 <updateDisplay+0x38>
			clearScreen(ST77XX_CYAN, hspi);
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	4a52      	ldr	r2, [pc, #328]	; (800576c <updateDisplay+0x16c>)
 8005624:	0019      	movs	r1, r3
 8005626:	0010      	movs	r0, r2
 8005628:	f7fd fa6a 	bl	8002b00 <clearScreen>
			drawTitle("clock", hspi);
 800562c:	683a      	ldr	r2, [r7, #0]
 800562e:	4b50      	ldr	r3, [pc, #320]	; (8005770 <updateDisplay+0x170>)
 8005630:	0011      	movs	r1, r2
 8005632:	0018      	movs	r0, r3
 8005634:	f000 fbea 	bl	8005e0c <drawTitle>
		}
		if (faceOnDisplay == faceTimer) {
 8005638:	4b4b      	ldr	r3, [pc, #300]	; (8005768 <updateDisplay+0x168>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d10c      	bne.n	800565a <updateDisplay+0x5a>
			clearScreen(ST77XX_GREEN, hspi);
 8005640:	683a      	ldr	r2, [r7, #0]
 8005642:	23fc      	movs	r3, #252	; 0xfc
 8005644:	00db      	lsls	r3, r3, #3
 8005646:	0011      	movs	r1, r2
 8005648:	0018      	movs	r0, r3
 800564a:	f7fd fa59 	bl	8002b00 <clearScreen>
			drawTitle("timer", hspi);
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	4b48      	ldr	r3, [pc, #288]	; (8005774 <updateDisplay+0x174>)
 8005652:	0011      	movs	r1, r2
 8005654:	0018      	movs	r0, r3
 8005656:	f000 fbd9 	bl	8005e0c <drawTitle>
		}
		if (faceOnDisplay == faceAlarm) {
 800565a:	4b43      	ldr	r3, [pc, #268]	; (8005768 <updateDisplay+0x168>)
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	2b02      	cmp	r3, #2
 8005660:	d10b      	bne.n	800567a <updateDisplay+0x7a>
			clearScreen(ST77XX_MAGENTA, hspi);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	4a44      	ldr	r2, [pc, #272]	; (8005778 <updateDisplay+0x178>)
 8005666:	0019      	movs	r1, r3
 8005668:	0010      	movs	r0, r2
 800566a:	f7fd fa49 	bl	8002b00 <clearScreen>
			drawTitle("alarm", hspi);
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	4b42      	ldr	r3, [pc, #264]	; (800577c <updateDisplay+0x17c>)
 8005672:	0011      	movs	r1, r2
 8005674:	0018      	movs	r0, r3
 8005676:	f000 fbc9 	bl	8005e0c <drawTitle>
		}
		if (faceOnDisplay == faceStopwatch) {
 800567a:	4b3b      	ldr	r3, [pc, #236]	; (8005768 <updateDisplay+0x168>)
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	2b03      	cmp	r3, #3
 8005680:	d10b      	bne.n	800569a <updateDisplay+0x9a>
			clearScreen(ST77XX_YELLOW, hspi);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	4a3e      	ldr	r2, [pc, #248]	; (8005780 <updateDisplay+0x180>)
 8005686:	0019      	movs	r1, r3
 8005688:	0010      	movs	r0, r2
 800568a:	f7fd fa39 	bl	8002b00 <clearScreen>
			drawTitle("stopwatch", hspi);
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	4b3c      	ldr	r3, [pc, #240]	; (8005784 <updateDisplay+0x184>)
 8005692:	0011      	movs	r1, r2
 8005694:	0018      	movs	r0, r3
 8005696:	f000 fbb9 	bl	8005e0c <drawTitle>
		}

		drawBattery(battPercentage, hspi);
 800569a:	4b3b      	ldr	r3, [pc, #236]	; (8005788 <updateDisplay+0x188>)
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	0011      	movs	r1, r2
 80056a2:	0018      	movs	r0, r3
 80056a4:	f000 fc26 	bl	8005ef4 <drawBattery>
		drawButtons(hspi);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	0018      	movs	r0, r3
 80056ac:	f000 fb68 	bl	8005d80 <drawButtons>
	}

	// update clock face
	if (faceOnDisplay == faceClock) {
 80056b0:	4b2d      	ldr	r3, [pc, #180]	; (8005768 <updateDisplay+0x168>)
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d112      	bne.n	80056de <updateDisplay+0xde>
		if (updateFace.clock == 1) {
 80056b8:	4b34      	ldr	r3, [pc, #208]	; (800578c <updateDisplay+0x18c>)
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d14c      	bne.n	800575c <updateDisplay+0x15c>
			updateFace.clock = 0;
 80056c2:	4b32      	ldr	r3, [pc, #200]	; (800578c <updateDisplay+0x18c>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	701a      	strb	r2, [r3, #0]
			setBackgroundColor(ST77XX_CYAN);
 80056c8:	4b28      	ldr	r3, [pc, #160]	; (800576c <updateDisplay+0x16c>)
 80056ca:	0018      	movs	r0, r3
 80056cc:	f7fd f9ce 	bl	8002a6c <setBackgroundColor>
			updateClockDisplay(hrtc, hspi);
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	0011      	movs	r1, r2
 80056d6:	0018      	movs	r0, r3
 80056d8:	f000 f85a 	bl	8005790 <updateClockDisplay>
		}
	}

	// is called a lot and redrawn every time. inefficient, but w/e
//	drawBattery(battPercentage, hspi);
}
 80056dc:	e03e      	b.n	800575c <updateDisplay+0x15c>
	else if (faceOnDisplay == faceTimer) {
 80056de:	4b22      	ldr	r3, [pc, #136]	; (8005768 <updateDisplay+0x168>)
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d111      	bne.n	800570a <updateDisplay+0x10a>
		if (updateFace.timer == 1) {
 80056e6:	4b29      	ldr	r3, [pc, #164]	; (800578c <updateDisplay+0x18c>)
 80056e8:	785b      	ldrb	r3, [r3, #1]
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d135      	bne.n	800575c <updateDisplay+0x15c>
			updateFace.timer = 0;
 80056f0:	4b26      	ldr	r3, [pc, #152]	; (800578c <updateDisplay+0x18c>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	705a      	strb	r2, [r3, #1]
			setBackgroundColor(ST77XX_GREEN);
 80056f6:	23fc      	movs	r3, #252	; 0xfc
 80056f8:	00db      	lsls	r3, r3, #3
 80056fa:	0018      	movs	r0, r3
 80056fc:	f7fd f9b6 	bl	8002a6c <setBackgroundColor>
			updateTimerDisplay(hspi);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	0018      	movs	r0, r3
 8005704:	f000 f8ee 	bl	80058e4 <updateTimerDisplay>
}
 8005708:	e028      	b.n	800575c <updateDisplay+0x15c>
	else if (faceOnDisplay == faceAlarm) {
 800570a:	4b17      	ldr	r3, [pc, #92]	; (8005768 <updateDisplay+0x168>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	2b02      	cmp	r3, #2
 8005710:	d110      	bne.n	8005734 <updateDisplay+0x134>
		if (updateFace.alarm == 1) {
 8005712:	4b1e      	ldr	r3, [pc, #120]	; (800578c <updateDisplay+0x18c>)
 8005714:	789b      	ldrb	r3, [r3, #2]
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b01      	cmp	r3, #1
 800571a:	d11f      	bne.n	800575c <updateDisplay+0x15c>
			updateFace.alarm = 0;
 800571c:	4b1b      	ldr	r3, [pc, #108]	; (800578c <updateDisplay+0x18c>)
 800571e:	2200      	movs	r2, #0
 8005720:	709a      	strb	r2, [r3, #2]
			setBackgroundColor(ST77XX_MAGENTA);
 8005722:	4b15      	ldr	r3, [pc, #84]	; (8005778 <updateDisplay+0x178>)
 8005724:	0018      	movs	r0, r3
 8005726:	f7fd f9a1 	bl	8002a6c <setBackgroundColor>
			updateAlarmDisplay(hspi);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	0018      	movs	r0, r3
 800572e:	f000 f9d9 	bl	8005ae4 <updateAlarmDisplay>
}
 8005732:	e013      	b.n	800575c <updateDisplay+0x15c>
	else if (faceOnDisplay == faceStopwatch) {
 8005734:	4b0c      	ldr	r3, [pc, #48]	; (8005768 <updateDisplay+0x168>)
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	2b03      	cmp	r3, #3
 800573a:	d10f      	bne.n	800575c <updateDisplay+0x15c>
		if (updateFace.stopwatch == 1) {
 800573c:	4b13      	ldr	r3, [pc, #76]	; (800578c <updateDisplay+0x18c>)
 800573e:	78db      	ldrb	r3, [r3, #3]
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b01      	cmp	r3, #1
 8005744:	d10a      	bne.n	800575c <updateDisplay+0x15c>
			updateFace.stopwatch = 0;
 8005746:	4b11      	ldr	r3, [pc, #68]	; (800578c <updateDisplay+0x18c>)
 8005748:	2200      	movs	r2, #0
 800574a:	70da      	strb	r2, [r3, #3]
			setBackgroundColor(ST77XX_YELLOW);
 800574c:	4b0c      	ldr	r3, [pc, #48]	; (8005780 <updateDisplay+0x180>)
 800574e:	0018      	movs	r0, r3
 8005750:	f7fd f98c 	bl	8002a6c <setBackgroundColor>
			updateStopwatchDisplay(hspi);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	0018      	movs	r0, r3
 8005758:	f000 fa8a 	bl	8005c70 <updateStopwatchDisplay>
}
 800575c:	46c0      	nop			; (mov r8, r8)
 800575e:	46bd      	mov	sp, r7
 8005760:	b002      	add	sp, #8
 8005762:	bd80      	pop	{r7, pc}
 8005764:	20000068 	.word	0x20000068
 8005768:	20000134 	.word	0x20000134
 800576c:	000007ff 	.word	0x000007ff
 8005770:	0800b4e8 	.word	0x0800b4e8
 8005774:	0800b4f0 	.word	0x0800b4f0
 8005778:	0000f81f 	.word	0x0000f81f
 800577c:	0800b4f8 	.word	0x0800b4f8
 8005780:	0000ffe0 	.word	0x0000ffe0
 8005784:	0800b500 	.word	0x0800b500
 8005788:	20000140 	.word	0x20000140
 800578c:	20000144 	.word	0x20000144

08005790 <updateClockDisplay>:

void updateClockDisplay(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 8005790:	b5b0      	push	{r4, r5, r7, lr}
 8005792:	b088      	sub	sp, #32
 8005794:	af02      	add	r7, sp, #8
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
	struct dates currentDate = {0};
 800579a:	2310      	movs	r3, #16
 800579c:	18fb      	adds	r3, r7, r3
 800579e:	0018      	movs	r0, r3
 80057a0:	2306      	movs	r3, #6
 80057a2:	001a      	movs	r2, r3
 80057a4:	2100      	movs	r1, #0
 80057a6:	f005 fa06 	bl	800abb6 <memset>
	struct times currentTime = {0};
 80057aa:	230c      	movs	r3, #12
 80057ac:	18fb      	adds	r3, r7, r3
 80057ae:	0018      	movs	r0, r3
 80057b0:	2303      	movs	r3, #3
 80057b2:	001a      	movs	r2, r3
 80057b4:	2100      	movs	r1, #0
 80057b6:	f005 f9fe 	bl	800abb6 <memset>

	setTextColor(ST77XX_BLACK);
 80057ba:	2000      	movs	r0, #0
 80057bc:	f7fd f990 	bl	8002ae0 <setTextColor>
	if (clockVars.isBeingSet == 0) {
 80057c0:	4b3c      	ldr	r3, [pc, #240]	; (80058b4 <updateClockDisplay+0x124>)
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d11c      	bne.n	8005802 <updateClockDisplay+0x72>
		getDateTime(&currentDate, &currentTime, hrtc);
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	240c      	movs	r4, #12
 80057cc:	1939      	adds	r1, r7, r4
 80057ce:	2510      	movs	r5, #16
 80057d0:	197b      	adds	r3, r7, r5
 80057d2:	0018      	movs	r0, r3
 80057d4:	f7fd fc9a 	bl	800310c <getDateTime>
		drawClock(&currentDate, &currentTime, hspi);
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	1939      	adds	r1, r7, r4
 80057dc:	197b      	adds	r3, r7, r5
 80057de:	0018      	movs	r0, r3
 80057e0:	f000 fc22 	bl	8006028 <drawClock>

		setTextSize(1);
 80057e4:	2001      	movs	r0, #1
 80057e6:	f7fd f96b 	bl	8002ac0 <setTextSize>
		// clear line that says "setting ___"
		clearTextLine(44, hspi);
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	0019      	movs	r1, r3
 80057ee:	202c      	movs	r0, #44	; 0x2c
 80057f0:	f7fc fd4e 	bl	8002290 <clearTextLine>

		// draw button text
		drawButtonText("", "", "set", hspi);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	4a30      	ldr	r2, [pc, #192]	; (80058b8 <updateClockDisplay+0x128>)
 80057f8:	4930      	ldr	r1, [pc, #192]	; (80058bc <updateClockDisplay+0x12c>)
 80057fa:	4830      	ldr	r0, [pc, #192]	; (80058bc <updateClockDisplay+0x12c>)
 80057fc:	f000 fada 	bl	8005db4 <drawButtonText>
			default: break;
		}

		drawClock(clockVars.dateToSet, clockVars.timeToSet, hspi);
	}
}
 8005800:	e054      	b.n	80058ac <updateClockDisplay+0x11c>
	else if (clockVars.isBeingSet == 1) {
 8005802:	4b2c      	ldr	r3, [pc, #176]	; (80058b4 <updateClockDisplay+0x124>)
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d150      	bne.n	80058ac <updateClockDisplay+0x11c>
		if (clockVars.fieldBeingSet == 1) drawButtonText("up", "down", "change", hspi);
 800580a:	4b2a      	ldr	r3, [pc, #168]	; (80058b4 <updateClockDisplay+0x124>)
 800580c:	785b      	ldrb	r3, [r3, #1]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d105      	bne.n	800581e <updateClockDisplay+0x8e>
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	4a2a      	ldr	r2, [pc, #168]	; (80058c0 <updateClockDisplay+0x130>)
 8005816:	492b      	ldr	r1, [pc, #172]	; (80058c4 <updateClockDisplay+0x134>)
 8005818:	482b      	ldr	r0, [pc, #172]	; (80058c8 <updateClockDisplay+0x138>)
 800581a:	f000 facb 	bl	8005db4 <drawButtonText>
		setTextSize(1);
 800581e:	2001      	movs	r0, #1
 8005820:	f7fd f94e 	bl	8002ac0 <setTextSize>
		switch (clockVars.fieldBeingSet) {
 8005824:	4b23      	ldr	r3, [pc, #140]	; (80058b4 <updateClockDisplay+0x124>)
 8005826:	785b      	ldrb	r3, [r3, #1]
 8005828:	2b05      	cmp	r3, #5
 800582a:	d836      	bhi.n	800589a <updateClockDisplay+0x10a>
 800582c:	009a      	lsls	r2, r3, #2
 800582e:	4b27      	ldr	r3, [pc, #156]	; (80058cc <updateClockDisplay+0x13c>)
 8005830:	18d3      	adds	r3, r2, r3
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	469f      	mov	pc, r3
			case 1:	drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting minute...", hspi); break;
 8005836:	4a26      	ldr	r2, [pc, #152]	; (80058d0 <updateClockDisplay+0x140>)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	0013      	movs	r3, r2
 800583e:	2211      	movs	r2, #17
 8005840:	212c      	movs	r1, #44	; 0x2c
 8005842:	2040      	movs	r0, #64	; 0x40
 8005844:	f7fc fc4c 	bl	80020e0 <drawCenteredTextWithPadding>
 8005848:	e028      	b.n	800589c <updateClockDisplay+0x10c>
			case 2:	drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting hour...", hspi);	break;
 800584a:	4a22      	ldr	r2, [pc, #136]	; (80058d4 <updateClockDisplay+0x144>)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	0013      	movs	r3, r2
 8005852:	2211      	movs	r2, #17
 8005854:	212c      	movs	r1, #44	; 0x2c
 8005856:	2040      	movs	r0, #64	; 0x40
 8005858:	f7fc fc42 	bl	80020e0 <drawCenteredTextWithPadding>
 800585c:	e01e      	b.n	800589c <updateClockDisplay+0x10c>
			case 3: drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting year...", hspi); break;
 800585e:	4a1e      	ldr	r2, [pc, #120]	; (80058d8 <updateClockDisplay+0x148>)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	9300      	str	r3, [sp, #0]
 8005864:	0013      	movs	r3, r2
 8005866:	2211      	movs	r2, #17
 8005868:	212c      	movs	r1, #44	; 0x2c
 800586a:	2040      	movs	r0, #64	; 0x40
 800586c:	f7fc fc38 	bl	80020e0 <drawCenteredTextWithPadding>
 8005870:	e014      	b.n	800589c <updateClockDisplay+0x10c>
			case 4: drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting month...", hspi); break;
 8005872:	4a1a      	ldr	r2, [pc, #104]	; (80058dc <updateClockDisplay+0x14c>)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	0013      	movs	r3, r2
 800587a:	2211      	movs	r2, #17
 800587c:	212c      	movs	r1, #44	; 0x2c
 800587e:	2040      	movs	r0, #64	; 0x40
 8005880:	f7fc fc2e 	bl	80020e0 <drawCenteredTextWithPadding>
 8005884:	e00a      	b.n	800589c <updateClockDisplay+0x10c>
			case 5: drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting date...", hspi); break;
 8005886:	4a16      	ldr	r2, [pc, #88]	; (80058e0 <updateClockDisplay+0x150>)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	0013      	movs	r3, r2
 800588e:	2211      	movs	r2, #17
 8005890:	212c      	movs	r1, #44	; 0x2c
 8005892:	2040      	movs	r0, #64	; 0x40
 8005894:	f7fc fc24 	bl	80020e0 <drawCenteredTextWithPadding>
 8005898:	e000      	b.n	800589c <updateClockDisplay+0x10c>
			default: break;
 800589a:	46c0      	nop			; (mov r8, r8)
		drawClock(clockVars.dateToSet, clockVars.timeToSet, hspi);
 800589c:	4b05      	ldr	r3, [pc, #20]	; (80058b4 <updateClockDisplay+0x124>)
 800589e:	6858      	ldr	r0, [r3, #4]
 80058a0:	4b04      	ldr	r3, [pc, #16]	; (80058b4 <updateClockDisplay+0x124>)
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	0019      	movs	r1, r3
 80058a8:	f000 fbbe 	bl	8006028 <drawClock>
}
 80058ac:	46c0      	nop			; (mov r8, r8)
 80058ae:	46bd      	mov	sp, r7
 80058b0:	b006      	add	sp, #24
 80058b2:	bdb0      	pop	{r4, r5, r7, pc}
 80058b4:	20000110 	.word	0x20000110
 80058b8:	0800b50c 	.word	0x0800b50c
 80058bc:	0800b46c 	.word	0x0800b46c
 80058c0:	0800b510 	.word	0x0800b510
 80058c4:	0800b518 	.word	0x0800b518
 80058c8:	0800b520 	.word	0x0800b520
 80058cc:	0800bf4c 	.word	0x0800bf4c
 80058d0:	0800b524 	.word	0x0800b524
 80058d4:	0800b538 	.word	0x0800b538
 80058d8:	0800b548 	.word	0x0800b548
 80058dc:	0800b558 	.word	0x0800b558
 80058e0:	0800b56c 	.word	0x0800b56c

080058e4 <updateTimerDisplay>:

void updateTimerDisplay(SPI_HandleTypeDef *hspi) {
 80058e4:	b590      	push	{r4, r7, lr}
 80058e6:	b087      	sub	sp, #28
 80058e8:	af02      	add	r7, sp, #8
 80058ea:	6078      	str	r0, [r7, #4]
	struct times currentTimer = {0};
 80058ec:	230c      	movs	r3, #12
 80058ee:	18fb      	adds	r3, r7, r3
 80058f0:	0018      	movs	r0, r3
 80058f2:	2303      	movs	r3, #3
 80058f4:	001a      	movs	r2, r3
 80058f6:	2100      	movs	r1, #0
 80058f8:	f005 f95d 	bl	800abb6 <memset>

	setTextColor(ST77XX_BLACK);
 80058fc:	2000      	movs	r0, #0
 80058fe:	f7fd f8ef 	bl	8002ae0 <setTextColor>
	if (timerVars.isBeingSet == 0) {
 8005902:	4b64      	ldr	r3, [pc, #400]	; (8005a94 <updateTimerDisplay+0x1b0>)
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d000      	beq.n	800590c <updateTimerDisplay+0x28>
 800590a:	e087      	b.n	8005a1c <updateTimerDisplay+0x138>
		if (timerVars.isSet == 0) {
 800590c:	4b61      	ldr	r3, [pc, #388]	; (8005a94 <updateTimerDisplay+0x1b0>)
 800590e:	789b      	ldrb	r3, [r3, #2]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d11f      	bne.n	8005954 <updateTimerDisplay+0x70>
			setTextSize(2);
 8005914:	2002      	movs	r0, #2
 8005916:	f7fd f8d3 	bl	8002ac0 <setTextSize>
			clearTextLine(68, hspi);	// clear timer time text
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	0019      	movs	r1, r3
 800591e:	2044      	movs	r0, #68	; 0x44
 8005920:	f7fc fcb6 	bl	8002290 <clearTextLine>

			// write "timer unset"
			setTextSize(1);
 8005924:	2001      	movs	r0, #1
 8005926:	f7fd f8cb 	bl	8002ac0 <setTextSize>
			clearTextLine(52, hspi);	// clear setting ___ text
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	0019      	movs	r1, r3
 800592e:	2034      	movs	r0, #52	; 0x34
 8005930:	f7fc fcae 	bl	8002290 <clearTextLine>
			drawCenteredTextWithPadding(WIDTH/2, 84, 12, "timer unset", hspi);
 8005934:	4a58      	ldr	r2, [pc, #352]	; (8005a98 <updateTimerDisplay+0x1b4>)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	9300      	str	r3, [sp, #0]
 800593a:	0013      	movs	r3, r2
 800593c:	220c      	movs	r2, #12
 800593e:	2154      	movs	r1, #84	; 0x54
 8005940:	2040      	movs	r0, #64	; 0x40
 8005942:	f7fc fbcd 	bl	80020e0 <drawCenteredTextWithPadding>

			// draw button text
			drawButtonText("", "", "set", hspi);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a54      	ldr	r2, [pc, #336]	; (8005a9c <updateTimerDisplay+0x1b8>)
 800594a:	4955      	ldr	r1, [pc, #340]	; (8005aa0 <updateTimerDisplay+0x1bc>)
 800594c:	4854      	ldr	r0, [pc, #336]	; (8005aa0 <updateTimerDisplay+0x1bc>)
 800594e:	f000 fa31 	bl	8005db4 <drawButtonText>
			default: break;
		}

		drawTimer(timerVars.timeToSet, hspi);
	}
}
 8005952:	e09b      	b.n	8005a8c <updateTimerDisplay+0x1a8>
		else if (isTimerDone == 0) {
 8005954:	4b53      	ldr	r3, [pc, #332]	; (8005aa4 <updateTimerDisplay+0x1c0>)
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d143      	bne.n	80059e6 <updateTimerDisplay+0x102>
			secondsToTime(&currentTimer, timerCounter);
 800595e:	4b52      	ldr	r3, [pc, #328]	; (8005aa8 <updateTimerDisplay+0x1c4>)
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	240c      	movs	r4, #12
 8005964:	193b      	adds	r3, r7, r4
 8005966:	0011      	movs	r1, r2
 8005968:	0018      	movs	r0, r3
 800596a:	f7fd fc9a 	bl	80032a2 <secondsToTime>
			drawTimer(&currentTimer, hspi);
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	193b      	adds	r3, r7, r4
 8005972:	0011      	movs	r1, r2
 8005974:	0018      	movs	r0, r3
 8005976:	f000 fbf1 	bl	800615c <drawTimer>
			setTextSize(1);
 800597a:	2001      	movs	r0, #1
 800597c:	f7fd f8a0 	bl	8002ac0 <setTextSize>
			clearTextLine(52, hspi);	// clear setting ___ text
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	0019      	movs	r1, r3
 8005984:	2034      	movs	r0, #52	; 0x34
 8005986:	f7fc fc83 	bl	8002290 <clearTextLine>
			if (isTimerPaused == 1) {
 800598a:	4b48      	ldr	r3, [pc, #288]	; (8005aac <updateTimerDisplay+0x1c8>)
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b01      	cmp	r3, #1
 8005992:	d109      	bne.n	80059a8 <updateTimerDisplay+0xc4>
				drawCenteredTextWithPadding(WIDTH/2, 84, 12, "timer paused", hspi);
 8005994:	4a46      	ldr	r2, [pc, #280]	; (8005ab0 <updateTimerDisplay+0x1cc>)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	0013      	movs	r3, r2
 800599c:	220c      	movs	r2, #12
 800599e:	2154      	movs	r1, #84	; 0x54
 80059a0:	2040      	movs	r0, #64	; 0x40
 80059a2:	f7fc fb9d 	bl	80020e0 <drawCenteredTextWithPadding>
 80059a6:	e017      	b.n	80059d8 <updateTimerDisplay+0xf4>
			else if (isTimerRunning == 0 && timerCounter != 0) {
 80059a8:	4b42      	ldr	r3, [pc, #264]	; (8005ab4 <updateTimerDisplay+0x1d0>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10d      	bne.n	80059ce <updateTimerDisplay+0xea>
 80059b2:	4b3d      	ldr	r3, [pc, #244]	; (8005aa8 <updateTimerDisplay+0x1c4>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d009      	beq.n	80059ce <updateTimerDisplay+0xea>
				drawCenteredTextWithPadding(WIDTH/2, 84, 12, "timer set!", hspi);
 80059ba:	4a3f      	ldr	r2, [pc, #252]	; (8005ab8 <updateTimerDisplay+0x1d4>)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	0013      	movs	r3, r2
 80059c2:	220c      	movs	r2, #12
 80059c4:	2154      	movs	r1, #84	; 0x54
 80059c6:	2040      	movs	r0, #64	; 0x40
 80059c8:	f7fc fb8a 	bl	80020e0 <drawCenteredTextWithPadding>
 80059cc:	e004      	b.n	80059d8 <updateTimerDisplay+0xf4>
				clearTextLine(84, hspi);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	0019      	movs	r1, r3
 80059d2:	2054      	movs	r0, #84	; 0x54
 80059d4:	f7fc fc5c 	bl	8002290 <clearTextLine>
			drawButtonText("run", "pause", "clear", hspi);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a38      	ldr	r2, [pc, #224]	; (8005abc <updateTimerDisplay+0x1d8>)
 80059dc:	4938      	ldr	r1, [pc, #224]	; (8005ac0 <updateTimerDisplay+0x1dc>)
 80059de:	4839      	ldr	r0, [pc, #228]	; (8005ac4 <updateTimerDisplay+0x1e0>)
 80059e0:	f000 f9e8 	bl	8005db4 <drawButtonText>
}
 80059e4:	e052      	b.n	8005a8c <updateTimerDisplay+0x1a8>
			secondsToTime(&currentTimer, timerCounter);
 80059e6:	4b30      	ldr	r3, [pc, #192]	; (8005aa8 <updateTimerDisplay+0x1c4>)
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	240c      	movs	r4, #12
 80059ec:	193b      	adds	r3, r7, r4
 80059ee:	0011      	movs	r1, r2
 80059f0:	0018      	movs	r0, r3
 80059f2:	f7fd fc56 	bl	80032a2 <secondsToTime>
			drawTimer(&currentTimer, hspi);
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	193b      	adds	r3, r7, r4
 80059fa:	0011      	movs	r1, r2
 80059fc:	0018      	movs	r0, r3
 80059fe:	f000 fbad 	bl	800615c <drawTimer>
			setTextSize(1);
 8005a02:	2001      	movs	r0, #1
 8005a04:	f7fd f85c 	bl	8002ac0 <setTextSize>
			drawCenteredTextWithPadding(WIDTH/2, 84, 12, "timer done!", hspi);
 8005a08:	4a2f      	ldr	r2, [pc, #188]	; (8005ac8 <updateTimerDisplay+0x1e4>)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	0013      	movs	r3, r2
 8005a10:	220c      	movs	r2, #12
 8005a12:	2154      	movs	r1, #84	; 0x54
 8005a14:	2040      	movs	r0, #64	; 0x40
 8005a16:	f7fc fb63 	bl	80020e0 <drawCenteredTextWithPadding>
}
 8005a1a:	e037      	b.n	8005a8c <updateTimerDisplay+0x1a8>
	else if (timerVars.isBeingSet == 1) {
 8005a1c:	4b1d      	ldr	r3, [pc, #116]	; (8005a94 <updateTimerDisplay+0x1b0>)
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d133      	bne.n	8005a8c <updateTimerDisplay+0x1a8>
		drawButtonText("up", "down", "change", hspi);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a29      	ldr	r2, [pc, #164]	; (8005acc <updateTimerDisplay+0x1e8>)
 8005a28:	4929      	ldr	r1, [pc, #164]	; (8005ad0 <updateTimerDisplay+0x1ec>)
 8005a2a:	482a      	ldr	r0, [pc, #168]	; (8005ad4 <updateTimerDisplay+0x1f0>)
 8005a2c:	f000 f9c2 	bl	8005db4 <drawButtonText>
		switch (timerVars.fieldBeingSet) {
 8005a30:	4b18      	ldr	r3, [pc, #96]	; (8005a94 <updateTimerDisplay+0x1b0>)
 8005a32:	785b      	ldrb	r3, [r3, #1]
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d00e      	beq.n	8005a56 <updateTimerDisplay+0x172>
 8005a38:	2b03      	cmp	r3, #3
 8005a3a:	d016      	beq.n	8005a6a <updateTimerDisplay+0x186>
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d000      	beq.n	8005a42 <updateTimerDisplay+0x15e>
			default: break;
 8005a40:	e01d      	b.n	8005a7e <updateTimerDisplay+0x19a>
			case 1: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting second...", hspi); break;
 8005a42:	4a25      	ldr	r2, [pc, #148]	; (8005ad8 <updateTimerDisplay+0x1f4>)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	9300      	str	r3, [sp, #0]
 8005a48:	0013      	movs	r3, r2
 8005a4a:	2211      	movs	r2, #17
 8005a4c:	2134      	movs	r1, #52	; 0x34
 8005a4e:	2040      	movs	r0, #64	; 0x40
 8005a50:	f7fc fb46 	bl	80020e0 <drawCenteredTextWithPadding>
 8005a54:	e013      	b.n	8005a7e <updateTimerDisplay+0x19a>
			case 2: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting minute...", hspi); break;
 8005a56:	4a21      	ldr	r2, [pc, #132]	; (8005adc <updateTimerDisplay+0x1f8>)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	0013      	movs	r3, r2
 8005a5e:	2211      	movs	r2, #17
 8005a60:	2134      	movs	r1, #52	; 0x34
 8005a62:	2040      	movs	r0, #64	; 0x40
 8005a64:	f7fc fb3c 	bl	80020e0 <drawCenteredTextWithPadding>
 8005a68:	e009      	b.n	8005a7e <updateTimerDisplay+0x19a>
			case 3: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting hour...", hspi); break;
 8005a6a:	4a1d      	ldr	r2, [pc, #116]	; (8005ae0 <updateTimerDisplay+0x1fc>)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	0013      	movs	r3, r2
 8005a72:	2211      	movs	r2, #17
 8005a74:	2134      	movs	r1, #52	; 0x34
 8005a76:	2040      	movs	r0, #64	; 0x40
 8005a78:	f7fc fb32 	bl	80020e0 <drawCenteredTextWithPadding>
 8005a7c:	46c0      	nop			; (mov r8, r8)
		drawTimer(timerVars.timeToSet, hspi);
 8005a7e:	4b05      	ldr	r3, [pc, #20]	; (8005a94 <updateTimerDisplay+0x1b0>)
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	0011      	movs	r1, r2
 8005a86:	0018      	movs	r0, r3
 8005a88:	f000 fb68 	bl	800615c <drawTimer>
}
 8005a8c:	46c0      	nop			; (mov r8, r8)
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	b005      	add	sp, #20
 8005a92:	bd90      	pop	{r4, r7, pc}
 8005a94:	2000011c 	.word	0x2000011c
 8005a98:	0800b57c 	.word	0x0800b57c
 8005a9c:	0800b50c 	.word	0x0800b50c
 8005aa0:	0800b46c 	.word	0x0800b46c
 8005aa4:	20000150 	.word	0x20000150
 8005aa8:	2000014c 	.word	0x2000014c
 8005aac:	20000196 	.word	0x20000196
 8005ab0:	0800b588 	.word	0x0800b588
 8005ab4:	20000194 	.word	0x20000194
 8005ab8:	0800b598 	.word	0x0800b598
 8005abc:	0800b5a4 	.word	0x0800b5a4
 8005ac0:	0800b5ac 	.word	0x0800b5ac
 8005ac4:	0800b5b4 	.word	0x0800b5b4
 8005ac8:	0800b5b8 	.word	0x0800b5b8
 8005acc:	0800b510 	.word	0x0800b510
 8005ad0:	0800b518 	.word	0x0800b518
 8005ad4:	0800b520 	.word	0x0800b520
 8005ad8:	0800b5c4 	.word	0x0800b5c4
 8005adc:	0800b524 	.word	0x0800b524
 8005ae0:	0800b538 	.word	0x0800b538

08005ae4 <updateAlarmDisplay>:

void updateAlarmDisplay(SPI_HandleTypeDef *hspi) {
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af02      	add	r7, sp, #8
 8005aea:	6078      	str	r0, [r7, #4]
	setTextColor(ST77XX_BLACK);
 8005aec:	2000      	movs	r0, #0
 8005aee:	f7fc fff7 	bl	8002ae0 <setTextColor>
	if (alarmVars.isBeingSet == 0) {
 8005af2:	4b50      	ldr	r3, [pc, #320]	; (8005c34 <updateAlarmDisplay+0x150>)
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d14f      	bne.n	8005b9a <updateAlarmDisplay+0xb6>
		if (alarmVars.isSet == 0) {
 8005afa:	4b4e      	ldr	r3, [pc, #312]	; (8005c34 <updateAlarmDisplay+0x150>)
 8005afc:	789b      	ldrb	r3, [r3, #2]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d11f      	bne.n	8005b42 <updateAlarmDisplay+0x5e>
			setTextSize(3);
 8005b02:	2003      	movs	r0, #3
 8005b04:	f7fc ffdc 	bl	8002ac0 <setTextSize>
			clearTextLine(68, hspi);	// clear alarm time text
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	0019      	movs	r1, r3
 8005b0c:	2044      	movs	r0, #68	; 0x44
 8005b0e:	f7fc fbbf 	bl	8002290 <clearTextLine>

			setTextSize(1);
 8005b12:	2001      	movs	r0, #1
 8005b14:	f7fc ffd4 	bl	8002ac0 <setTextSize>
			clearTextLine(52, hspi);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	0019      	movs	r1, r3
 8005b1c:	2034      	movs	r0, #52	; 0x34
 8005b1e:	f7fc fbb7 	bl	8002290 <clearTextLine>
			drawCenteredTextWithPadding(WIDTH/2, 100, 11, "alarm unset", hspi);
 8005b22:	4a45      	ldr	r2, [pc, #276]	; (8005c38 <updateAlarmDisplay+0x154>)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	9300      	str	r3, [sp, #0]
 8005b28:	0013      	movs	r3, r2
 8005b2a:	220b      	movs	r2, #11
 8005b2c:	2164      	movs	r1, #100	; 0x64
 8005b2e:	2040      	movs	r0, #64	; 0x40
 8005b30:	f7fc fad6 	bl	80020e0 <drawCenteredTextWithPadding>

			// draw button text
			drawButtonText("", "", "set", hspi);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a41      	ldr	r2, [pc, #260]	; (8005c3c <updateAlarmDisplay+0x158>)
 8005b38:	4941      	ldr	r1, [pc, #260]	; (8005c40 <updateAlarmDisplay+0x15c>)
 8005b3a:	4841      	ldr	r0, [pc, #260]	; (8005c40 <updateAlarmDisplay+0x15c>)
 8005b3c:	f000 f93a 	bl	8005db4 <drawButtonText>
		// draw button text
		drawButtonText("up", "down", "change", hspi);

		drawAlarm(alarmVars.alarmToSet, hspi);
	}
}
 8005b40:	e074      	b.n	8005c2c <updateAlarmDisplay+0x148>
		else if (isAlarmDone == 0) {
 8005b42:	4b40      	ldr	r3, [pc, #256]	; (8005c44 <updateAlarmDisplay+0x160>)
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d119      	bne.n	8005b80 <updateAlarmDisplay+0x9c>
			setTextSize(1);
 8005b4c:	2001      	movs	r0, #1
 8005b4e:	f7fc ffb7 	bl	8002ac0 <setTextSize>
			drawCenteredTextWithPadding(WIDTH/2, 100, 11, "alarm set", hspi);
 8005b52:	4a3d      	ldr	r2, [pc, #244]	; (8005c48 <updateAlarmDisplay+0x164>)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	0013      	movs	r3, r2
 8005b5a:	220b      	movs	r2, #11
 8005b5c:	2164      	movs	r1, #100	; 0x64
 8005b5e:	2040      	movs	r0, #64	; 0x40
 8005b60:	f7fc fabe 	bl	80020e0 <drawCenteredTextWithPadding>
			drawAlarm(alarmVars.alarmToSet, hspi);
 8005b64:	4b33      	ldr	r3, [pc, #204]	; (8005c34 <updateAlarmDisplay+0x150>)
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	0011      	movs	r1, r2
 8005b6c:	0018      	movs	r0, r3
 8005b6e:	f000 fb1b 	bl	80061a8 <drawAlarm>
			drawButtonText("", "", "clear", hspi);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a35      	ldr	r2, [pc, #212]	; (8005c4c <updateAlarmDisplay+0x168>)
 8005b76:	4932      	ldr	r1, [pc, #200]	; (8005c40 <updateAlarmDisplay+0x15c>)
 8005b78:	4831      	ldr	r0, [pc, #196]	; (8005c40 <updateAlarmDisplay+0x15c>)
 8005b7a:	f000 f91b 	bl	8005db4 <drawButtonText>
}
 8005b7e:	e055      	b.n	8005c2c <updateAlarmDisplay+0x148>
			setTextSize(1);
 8005b80:	2001      	movs	r0, #1
 8005b82:	f7fc ff9d 	bl	8002ac0 <setTextSize>
			drawCenteredTextWithPadding(WIDTH/2, 100, 11, "alarm done!", hspi);
 8005b86:	4a32      	ldr	r2, [pc, #200]	; (8005c50 <updateAlarmDisplay+0x16c>)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	0013      	movs	r3, r2
 8005b8e:	220b      	movs	r2, #11
 8005b90:	2164      	movs	r1, #100	; 0x64
 8005b92:	2040      	movs	r0, #64	; 0x40
 8005b94:	f7fc faa4 	bl	80020e0 <drawCenteredTextWithPadding>
}
 8005b98:	e048      	b.n	8005c2c <updateAlarmDisplay+0x148>
	else if (alarmVars.isBeingSet == 1) {
 8005b9a:	4b26      	ldr	r3, [pc, #152]	; (8005c34 <updateAlarmDisplay+0x150>)
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d144      	bne.n	8005c2c <updateAlarmDisplay+0x148>
		setTextSize(1);
 8005ba2:	2001      	movs	r0, #1
 8005ba4:	f7fc ff8c 	bl	8002ac0 <setTextSize>
		switch (alarmVars.fieldBeingSet) {
 8005ba8:	4b22      	ldr	r3, [pc, #136]	; (8005c34 <updateAlarmDisplay+0x150>)
 8005baa:	785b      	ldrb	r3, [r3, #1]
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d012      	beq.n	8005bd6 <updateAlarmDisplay+0xf2>
 8005bb0:	dc02      	bgt.n	8005bb8 <updateAlarmDisplay+0xd4>
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d005      	beq.n	8005bc2 <updateAlarmDisplay+0xde>
			default: break;
 8005bb6:	e02c      	b.n	8005c12 <updateAlarmDisplay+0x12e>
		switch (alarmVars.fieldBeingSet) {
 8005bb8:	2b03      	cmp	r3, #3
 8005bba:	d016      	beq.n	8005bea <updateAlarmDisplay+0x106>
 8005bbc:	2b04      	cmp	r3, #4
 8005bbe:	d01e      	beq.n	8005bfe <updateAlarmDisplay+0x11a>
			default: break;
 8005bc0:	e027      	b.n	8005c12 <updateAlarmDisplay+0x12e>
			case 1: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting second...", hspi); break;
 8005bc2:	4a24      	ldr	r2, [pc, #144]	; (8005c54 <updateAlarmDisplay+0x170>)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	9300      	str	r3, [sp, #0]
 8005bc8:	0013      	movs	r3, r2
 8005bca:	2211      	movs	r2, #17
 8005bcc:	2134      	movs	r1, #52	; 0x34
 8005bce:	2040      	movs	r0, #64	; 0x40
 8005bd0:	f7fc fa86 	bl	80020e0 <drawCenteredTextWithPadding>
 8005bd4:	e01d      	b.n	8005c12 <updateAlarmDisplay+0x12e>
			case 2: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting minute...", hspi); break;
 8005bd6:	4a20      	ldr	r2, [pc, #128]	; (8005c58 <updateAlarmDisplay+0x174>)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	9300      	str	r3, [sp, #0]
 8005bdc:	0013      	movs	r3, r2
 8005bde:	2211      	movs	r2, #17
 8005be0:	2134      	movs	r1, #52	; 0x34
 8005be2:	2040      	movs	r0, #64	; 0x40
 8005be4:	f7fc fa7c 	bl	80020e0 <drawCenteredTextWithPadding>
 8005be8:	e013      	b.n	8005c12 <updateAlarmDisplay+0x12e>
			case 3: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting hour...", hspi); break;
 8005bea:	4a1c      	ldr	r2, [pc, #112]	; (8005c5c <updateAlarmDisplay+0x178>)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	0013      	movs	r3, r2
 8005bf2:	2211      	movs	r2, #17
 8005bf4:	2134      	movs	r1, #52	; 0x34
 8005bf6:	2040      	movs	r0, #64	; 0x40
 8005bf8:	f7fc fa72 	bl	80020e0 <drawCenteredTextWithPadding>
 8005bfc:	e009      	b.n	8005c12 <updateAlarmDisplay+0x12e>
			case 4: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting day...", hspi); break;
 8005bfe:	4a18      	ldr	r2, [pc, #96]	; (8005c60 <updateAlarmDisplay+0x17c>)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	9300      	str	r3, [sp, #0]
 8005c04:	0013      	movs	r3, r2
 8005c06:	2211      	movs	r2, #17
 8005c08:	2134      	movs	r1, #52	; 0x34
 8005c0a:	2040      	movs	r0, #64	; 0x40
 8005c0c:	f7fc fa68 	bl	80020e0 <drawCenteredTextWithPadding>
 8005c10:	46c0      	nop			; (mov r8, r8)
		drawButtonText("up", "down", "change", hspi);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a13      	ldr	r2, [pc, #76]	; (8005c64 <updateAlarmDisplay+0x180>)
 8005c16:	4914      	ldr	r1, [pc, #80]	; (8005c68 <updateAlarmDisplay+0x184>)
 8005c18:	4814      	ldr	r0, [pc, #80]	; (8005c6c <updateAlarmDisplay+0x188>)
 8005c1a:	f000 f8cb 	bl	8005db4 <drawButtonText>
		drawAlarm(alarmVars.alarmToSet, hspi);
 8005c1e:	4b05      	ldr	r3, [pc, #20]	; (8005c34 <updateAlarmDisplay+0x150>)
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	0011      	movs	r1, r2
 8005c26:	0018      	movs	r0, r3
 8005c28:	f000 fabe 	bl	80061a8 <drawAlarm>
}
 8005c2c:	46c0      	nop			; (mov r8, r8)
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	b002      	add	sp, #8
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	20000124 	.word	0x20000124
 8005c38:	0800b5d8 	.word	0x0800b5d8
 8005c3c:	0800b50c 	.word	0x0800b50c
 8005c40:	0800b46c 	.word	0x0800b46c
 8005c44:	20000142 	.word	0x20000142
 8005c48:	0800b5e4 	.word	0x0800b5e4
 8005c4c:	0800b5a4 	.word	0x0800b5a4
 8005c50:	0800b5f0 	.word	0x0800b5f0
 8005c54:	0800b5c4 	.word	0x0800b5c4
 8005c58:	0800b524 	.word	0x0800b524
 8005c5c:	0800b538 	.word	0x0800b538
 8005c60:	0800b5fc 	.word	0x0800b5fc
 8005c64:	0800b510 	.word	0x0800b510
 8005c68:	0800b518 	.word	0x0800b518
 8005c6c:	0800b520 	.word	0x0800b520

08005c70 <updateStopwatchDisplay>:

void updateStopwatchDisplay(SPI_HandleTypeDef *hspi) {
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
	setTextColor(ST77XX_BLACK);
 8005c78:	2000      	movs	r0, #0
 8005c7a:	f7fc ff31 	bl	8002ae0 <setTextColor>
	drawStopwatch(stopwatchCounter, hspi);
 8005c7e:	4b16      	ldr	r3, [pc, #88]	; (8005cd8 <updateStopwatchDisplay+0x68>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	0011      	movs	r1, r2
 8005c86:	0018      	movs	r0, r3
 8005c88:	f000 fac8 	bl	800621c <drawStopwatch>
	drawStopwatchLap(stopwatchVars.lapCurrent-stopwatchVars.lapPrev, hspi);
 8005c8c:	4b13      	ldr	r3, [pc, #76]	; (8005cdc <updateStopwatchDisplay+0x6c>)
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	4b12      	ldr	r3, [pc, #72]	; (8005cdc <updateStopwatchDisplay+0x6c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	0011      	movs	r1, r2
 8005c9a:	0018      	movs	r0, r3
 8005c9c:	f000 faf6 	bl	800628c <drawStopwatchLap>

	if (isStopwatchRunning == 0) drawButtonText("run", "lap", "clear", hspi);
 8005ca0:	4b0f      	ldr	r3, [pc, #60]	; (8005ce0 <updateStopwatchDisplay+0x70>)
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d106      	bne.n	8005cb8 <updateStopwatchDisplay+0x48>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a0d      	ldr	r2, [pc, #52]	; (8005ce4 <updateStopwatchDisplay+0x74>)
 8005cae:	490e      	ldr	r1, [pc, #56]	; (8005ce8 <updateStopwatchDisplay+0x78>)
 8005cb0:	480e      	ldr	r0, [pc, #56]	; (8005cec <updateStopwatchDisplay+0x7c>)
 8005cb2:	f000 f87f 	bl	8005db4 <drawButtonText>
	else if (isStopwatchRunning == 1) drawButtonText("pause", "lap", "clear", hspi);
}
 8005cb6:	e00a      	b.n	8005cce <updateStopwatchDisplay+0x5e>
	else if (isStopwatchRunning == 1) drawButtonText("pause", "lap", "clear", hspi);
 8005cb8:	4b09      	ldr	r3, [pc, #36]	; (8005ce0 <updateStopwatchDisplay+0x70>)
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d105      	bne.n	8005cce <updateStopwatchDisplay+0x5e>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a07      	ldr	r2, [pc, #28]	; (8005ce4 <updateStopwatchDisplay+0x74>)
 8005cc6:	4908      	ldr	r1, [pc, #32]	; (8005ce8 <updateStopwatchDisplay+0x78>)
 8005cc8:	4809      	ldr	r0, [pc, #36]	; (8005cf0 <updateStopwatchDisplay+0x80>)
 8005cca:	f000 f873 	bl	8005db4 <drawButtonText>
}
 8005cce:	46c0      	nop			; (mov r8, r8)
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	b002      	add	sp, #8
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	46c0      	nop			; (mov r8, r8)
 8005cd8:	20000198 	.word	0x20000198
 8005cdc:	2000012c 	.word	0x2000012c
 8005ce0:	20000148 	.word	0x20000148
 8005ce4:	0800b5a4 	.word	0x0800b5a4
 8005ce8:	0800b60c 	.word	0x0800b60c
 8005cec:	0800b5b4 	.word	0x0800b5b4
 8005cf0:	0800b5ac 	.word	0x0800b5ac

08005cf4 <drawButton>:

// ---- drawing functions related specifically to the user interface ----
void drawButton(uint8_t x_center, uint8_t y_center, SPI_HandleTypeDef *hspi) {
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af02      	add	r7, sp, #8
 8005cfa:	603a      	str	r2, [r7, #0]
 8005cfc:	1dfb      	adds	r3, r7, #7
 8005cfe:	1c02      	adds	r2, r0, #0
 8005d00:	701a      	strb	r2, [r3, #0]
 8005d02:	1dbb      	adds	r3, r7, #6
 8005d04:	1c0a      	adds	r2, r1, #0
 8005d06:	701a      	strb	r2, [r3, #0]
	// bounds checking. probably already done in draw/fillRect
	if (x_center-5 < 0 || x_center+5 > WIDTH || y_center-5 < 0 || y_center+5 > HEIGHT) return;
 8005d08:	1dfb      	adds	r3, r7, #7
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	3b05      	subs	r3, #5
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	db2f      	blt.n	8005d72 <drawButton+0x7e>
 8005d12:	1dfb      	adds	r3, r7, #7
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	3305      	adds	r3, #5
 8005d18:	2b80      	cmp	r3, #128	; 0x80
 8005d1a:	dc2a      	bgt.n	8005d72 <drawButton+0x7e>
 8005d1c:	1dbb      	adds	r3, r7, #6
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	3b05      	subs	r3, #5
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	db25      	blt.n	8005d72 <drawButton+0x7e>
 8005d26:	1dbb      	adds	r3, r7, #6
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	3305      	adds	r3, #5
 8005d2c:	2ba0      	cmp	r3, #160	; 0xa0
 8005d2e:	dc20      	bgt.n	8005d72 <drawButton+0x7e>

	// draw rect size 8 with 1 pixel border
	// parameters give center position of graphic
	drawRect(x_center-5, y_center-5, 10, 10, ST77XX_BLACK, hspi);
 8005d30:	1dfb      	adds	r3, r7, #7
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	3b05      	subs	r3, #5
 8005d36:	b2d8      	uxtb	r0, r3
 8005d38:	1dbb      	adds	r3, r7, #6
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	3b05      	subs	r3, #5
 8005d3e:	b2d9      	uxtb	r1, r3
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	9301      	str	r3, [sp, #4]
 8005d44:	2300      	movs	r3, #0
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	230a      	movs	r3, #10
 8005d4a:	220a      	movs	r2, #10
 8005d4c:	f7fc f85f 	bl	8001e0e <drawRect>
	fillRect(x_center-4, y_center-4, 8, 8, ST77XX_WHITE, hspi);
 8005d50:	1dfb      	adds	r3, r7, #7
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	3b04      	subs	r3, #4
 8005d56:	b2d8      	uxtb	r0, r3
 8005d58:	1dbb      	adds	r3, r7, #6
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	3b04      	subs	r3, #4
 8005d5e:	b2d9      	uxtb	r1, r3
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	9301      	str	r3, [sp, #4]
 8005d64:	4b05      	ldr	r3, [pc, #20]	; (8005d7c <drawButton+0x88>)
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	2308      	movs	r3, #8
 8005d6a:	2208      	movs	r2, #8
 8005d6c:	f7fc f8a7 	bl	8001ebe <fillRect>
 8005d70:	e000      	b.n	8005d74 <drawButton+0x80>
	if (x_center-5 < 0 || x_center+5 > WIDTH || y_center-5 < 0 || y_center+5 > HEIGHT) return;
 8005d72:	46c0      	nop			; (mov r8, r8)
}
 8005d74:	46bd      	mov	sp, r7
 8005d76:	b002      	add	sp, #8
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	46c0      	nop			; (mov r8, r8)
 8005d7c:	0000ffff 	.word	0x0000ffff

08005d80 <drawButtons>:

void drawButtons(SPI_HandleTypeDef *hspi) {
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
	// 3 buttons. positioned so their text boxes, which are centered over button, can have equal spacing left and right
	drawButton(22, HEIGHT-15, hspi);		// button 1
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	001a      	movs	r2, r3
 8005d8c:	2191      	movs	r1, #145	; 0x91
 8005d8e:	2016      	movs	r0, #22
 8005d90:	f7ff ffb0 	bl	8005cf4 <drawButton>
	drawButton(64, HEIGHT-15, hspi);		// button 2
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	001a      	movs	r2, r3
 8005d98:	2191      	movs	r1, #145	; 0x91
 8005d9a:	2040      	movs	r0, #64	; 0x40
 8005d9c:	f7ff ffaa 	bl	8005cf4 <drawButton>
	drawButton(106, HEIGHT-15, hspi);		// button 3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	001a      	movs	r2, r3
 8005da4:	2191      	movs	r1, #145	; 0x91
 8005da6:	206a      	movs	r0, #106	; 0x6a
 8005da8:	f7ff ffa4 	bl	8005cf4 <drawButton>
}
 8005dac:	46c0      	nop			; (mov r8, r8)
 8005dae:	46bd      	mov	sp, r7
 8005db0:	b002      	add	sp, #8
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <drawButtonText>:

void drawButtonText(const char *str1, const char *str2, const char *str3, SPI_HandleTypeDef *hspi) {
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af02      	add	r7, sp, #8
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
 8005dc0:	603b      	str	r3, [r7, #0]
	setTextSize(1);
 8005dc2:	2001      	movs	r0, #1
 8005dc4:	f7fc fe7c 	bl	8002ac0 <setTextSize>
	setTextColor(ST77XX_BLACK);
 8005dc8:	2000      	movs	r0, #0
 8005dca:	f7fc fe89 	bl	8002ae0 <setTextColor>
	drawCenteredTextWithPadding(22, HEIGHT-28, 7, str1, hspi);		// button 1
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	0013      	movs	r3, r2
 8005dd6:	2207      	movs	r2, #7
 8005dd8:	2184      	movs	r1, #132	; 0x84
 8005dda:	2016      	movs	r0, #22
 8005ddc:	f7fc f980 	bl	80020e0 <drawCenteredTextWithPadding>
	drawCenteredTextWithPadding(64, HEIGHT-28, 7, str2, hspi);		// button 2
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	0013      	movs	r3, r2
 8005de8:	2207      	movs	r2, #7
 8005dea:	2184      	movs	r1, #132	; 0x84
 8005dec:	2040      	movs	r0, #64	; 0x40
 8005dee:	f7fc f977 	bl	80020e0 <drawCenteredTextWithPadding>
	drawCenteredTextWithPadding(106, HEIGHT-28, 7, str3, hspi);		// button 3
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	0013      	movs	r3, r2
 8005dfa:	2207      	movs	r2, #7
 8005dfc:	2184      	movs	r1, #132	; 0x84
 8005dfe:	206a      	movs	r0, #106	; 0x6a
 8005e00:	f7fc f96e 	bl	80020e0 <drawCenteredTextWithPadding>
}
 8005e04:	46c0      	nop			; (mov r8, r8)
 8005e06:	46bd      	mov	sp, r7
 8005e08:	b004      	add	sp, #16
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <drawTitle>:

void drawTitle(char *str, SPI_HandleTypeDef *hspi) {
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
	uint8_t strSize = strlen(str);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	0018      	movs	r0, r3
 8005e1a:	f7fa f975 	bl	8000108 <strlen>
 8005e1e:	0002      	movs	r2, r0
 8005e20:	210f      	movs	r1, #15
 8005e22:	187b      	adds	r3, r7, r1
 8005e24:	701a      	strb	r2, [r3, #0]

	// drawing title
	if (12*strSize < WIDTH) {			// about string size = 10 for width = 128
 8005e26:	187b      	adds	r3, r7, r1
 8005e28:	781a      	ldrb	r2, [r3, #0]
 8005e2a:	0013      	movs	r3, r2
 8005e2c:	005b      	lsls	r3, r3, #1
 8005e2e:	189b      	adds	r3, r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	2b7f      	cmp	r3, #127	; 0x7f
 8005e34:	dc14      	bgt.n	8005e60 <drawTitle+0x54>
		setTextSize(2);
 8005e36:	2002      	movs	r0, #2
 8005e38:	f7fc fe42 	bl	8002ac0 <setTextSize>
		setCursor((WIDTH-12*strSize)/2, 10);
 8005e3c:	230f      	movs	r3, #15
 8005e3e:	18fb      	adds	r3, r7, r3
 8005e40:	781a      	ldrb	r2, [r3, #0]
 8005e42:	0013      	movs	r3, r2
 8005e44:	0092      	lsls	r2, r2, #2
 8005e46:	1a9b      	subs	r3, r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	3380      	adds	r3, #128	; 0x80
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	da00      	bge.n	8005e52 <drawTitle+0x46>
 8005e50:	3301      	adds	r3, #1
 8005e52:	105b      	asrs	r3, r3, #1
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	210a      	movs	r1, #10
 8005e58:	0018      	movs	r0, r3
 8005e5a:	f7fc fe17 	bl	8002a8c <setCursor>
 8005e5e:	e039      	b.n	8005ed4 <drawTitle+0xc8>
	}
	else if (6*strSize < WIDTH) {		// about string size = 21 for width = 128
 8005e60:	230f      	movs	r3, #15
 8005e62:	18fb      	adds	r3, r7, r3
 8005e64:	781a      	ldrb	r2, [r3, #0]
 8005e66:	0013      	movs	r3, r2
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	189b      	adds	r3, r3, r2
 8005e6c:	005b      	lsls	r3, r3, #1
 8005e6e:	2b7f      	cmp	r3, #127	; 0x7f
 8005e70:	dc14      	bgt.n	8005e9c <drawTitle+0x90>
		setTextSize(1);
 8005e72:	2001      	movs	r0, #1
 8005e74:	f7fc fe24 	bl	8002ac0 <setTextSize>
		setCursor((WIDTH-6*strSize)/2, 10);
 8005e78:	230f      	movs	r3, #15
 8005e7a:	18fb      	adds	r3, r7, r3
 8005e7c:	781a      	ldrb	r2, [r3, #0]
 8005e7e:	0013      	movs	r3, r2
 8005e80:	0092      	lsls	r2, r2, #2
 8005e82:	1a9b      	subs	r3, r3, r2
 8005e84:	005b      	lsls	r3, r3, #1
 8005e86:	3380      	adds	r3, #128	; 0x80
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	da00      	bge.n	8005e8e <drawTitle+0x82>
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	105b      	asrs	r3, r3, #1
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	210a      	movs	r1, #10
 8005e94:	0018      	movs	r0, r3
 8005e96:	f7fc fdf9 	bl	8002a8c <setCursor>
 8005e9a:	e01b      	b.n	8005ed4 <drawTitle+0xc8>
	}
	else {
		setTextSize(1);
 8005e9c:	2001      	movs	r0, #1
 8005e9e:	f7fc fe0f 	bl	8002ac0 <setTextSize>
		sprintf(str, "it's too long");		// should not need to worry about null access, since this string is shorter than case above
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	4b12      	ldr	r3, [pc, #72]	; (8005ef0 <drawTitle+0xe4>)
 8005ea6:	0010      	movs	r0, r2
 8005ea8:	0019      	movs	r1, r3
 8005eaa:	230e      	movs	r3, #14
 8005eac:	001a      	movs	r2, r3
 8005eae:	f004 fe79 	bl	800aba4 <memcpy>
		setCursor((WIDTH-6*strSize)/2, 10);
 8005eb2:	230f      	movs	r3, #15
 8005eb4:	18fb      	adds	r3, r7, r3
 8005eb6:	781a      	ldrb	r2, [r3, #0]
 8005eb8:	0013      	movs	r3, r2
 8005eba:	0092      	lsls	r2, r2, #2
 8005ebc:	1a9b      	subs	r3, r3, r2
 8005ebe:	005b      	lsls	r3, r3, #1
 8005ec0:	3380      	adds	r3, #128	; 0x80
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	da00      	bge.n	8005ec8 <drawTitle+0xbc>
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	105b      	asrs	r3, r3, #1
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	210a      	movs	r1, #10
 8005ece:	0018      	movs	r0, r3
 8005ed0:	f7fc fddc 	bl	8002a8c <setCursor>
	}

	setTextColor(ST77XX_BLACK);
 8005ed4:	2000      	movs	r0, #0
 8005ed6:	f7fc fe03 	bl	8002ae0 <setTextColor>
	drawText(str, hspi);
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	0011      	movs	r1, r2
 8005ee0:	0018      	movs	r0, r3
 8005ee2:	f7fc fd45 	bl	8002970 <drawText>
}
 8005ee6:	46c0      	nop			; (mov r8, r8)
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	b004      	add	sp, #16
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	46c0      	nop			; (mov r8, r8)
 8005ef0:	0800b610 	.word	0x0800b610

08005ef4 <drawBattery>:

void drawBattery(uint8_t batteryLevel, SPI_HandleTypeDef *hspi) {
 8005ef4:	b590      	push	{r4, r7, lr}
 8005ef6:	b087      	sub	sp, #28
 8005ef8:	af02      	add	r7, sp, #8
 8005efa:	0002      	movs	r2, r0
 8005efc:	6039      	str	r1, [r7, #0]
 8005efe:	1dfb      	adds	r3, r7, #7
 8005f00:	701a      	strb	r2, [r3, #0]
	// doesn't move and is used on an empty screen, so shouldn't need to clear then print
	char str[5];

	// drawing battery symbol. hard coded to be 6x13, upper left corner on (49,26)
	drawVLine(49, 28, 10, ST77XX_BLACK, hspi);		// left col
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	9300      	str	r3, [sp, #0]
 8005f06:	2300      	movs	r3, #0
 8005f08:	220a      	movs	r2, #10
 8005f0a:	211c      	movs	r1, #28
 8005f0c:	2031      	movs	r0, #49	; 0x31
 8005f0e:	f7fb fe8d 	bl	8001c2c <drawVLine>
	drawVLine(54, 28, 10, ST77XX_BLACK, hspi);		// right col
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	2300      	movs	r3, #0
 8005f18:	220a      	movs	r2, #10
 8005f1a:	211c      	movs	r1, #28
 8005f1c:	2036      	movs	r0, #54	; 0x36
 8005f1e:	f7fb fe85 	bl	8001c2c <drawVLine>
	drawHLine(50, 38, 4, ST77XX_BLACK, hspi);		// bottom
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	9300      	str	r3, [sp, #0]
 8005f26:	2300      	movs	r3, #0
 8005f28:	2204      	movs	r2, #4
 8005f2a:	2126      	movs	r1, #38	; 0x26
 8005f2c:	2032      	movs	r0, #50	; 0x32
 8005f2e:	f7fb fdd7 	bl	8001ae0 <drawHLine>
	drawHLine(50, 27, 4, ST77XX_BLACK, hspi);		// top bottom level
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	2300      	movs	r3, #0
 8005f38:	2204      	movs	r2, #4
 8005f3a:	211b      	movs	r1, #27
 8005f3c:	2032      	movs	r0, #50	; 0x32
 8005f3e:	f7fb fdcf 	bl	8001ae0 <drawHLine>
	drawHLine(51, 26, 2, ST77XX_BLACK, hspi);		// top upper level
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	2300      	movs	r3, #0
 8005f48:	2202      	movs	r2, #2
 8005f4a:	211a      	movs	r1, #26
 8005f4c:	2033      	movs	r0, #51	; 0x33
 8005f4e:	f7fb fdc7 	bl	8001ae0 <drawHLine>

	uint16_t color = ST77XX_GREEN;
 8005f52:	230e      	movs	r3, #14
 8005f54:	18fb      	adds	r3, r7, r3
 8005f56:	22fc      	movs	r2, #252	; 0xfc
 8005f58:	00d2      	lsls	r2, r2, #3
 8005f5a:	801a      	strh	r2, [r3, #0]
	if (batteryLevel < 20) color = ST77XX_RED;
 8005f5c:	1dfb      	adds	r3, r7, #7
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	2b13      	cmp	r3, #19
 8005f62:	d803      	bhi.n	8005f6c <drawBattery+0x78>
 8005f64:	230e      	movs	r3, #14
 8005f66:	18fb      	adds	r3, r7, r3
 8005f68:	4a2c      	ldr	r2, [pc, #176]	; (800601c <drawBattery+0x128>)
 8005f6a:	801a      	strh	r2, [r3, #0]
	fillRect(50, 28+(100-batteryLevel)/10, 4, batteryLevel/10, color, hspi);
 8005f6c:	1dfb      	adds	r3, r7, #7
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	2264      	movs	r2, #100	; 0x64
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	210a      	movs	r1, #10
 8005f76:	0018      	movs	r0, r3
 8005f78:	f7fa f958 	bl	800022c <__divsi3>
 8005f7c:	0003      	movs	r3, r0
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	331c      	adds	r3, #28
 8005f82:	b2dc      	uxtb	r4, r3
 8005f84:	1dfb      	adds	r3, r7, #7
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	210a      	movs	r1, #10
 8005f8a:	0018      	movs	r0, r3
 8005f8c:	f7fa f8c4 	bl	8000118 <__udivsi3>
 8005f90:	0003      	movs	r3, r0
 8005f92:	b2da      	uxtb	r2, r3
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	9301      	str	r3, [sp, #4]
 8005f98:	230e      	movs	r3, #14
 8005f9a:	18fb      	adds	r3, r7, r3
 8005f9c:	881b      	ldrh	r3, [r3, #0]
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	0013      	movs	r3, r2
 8005fa2:	2204      	movs	r2, #4
 8005fa4:	0021      	movs	r1, r4
 8005fa6:	2032      	movs	r0, #50	; 0x32
 8005fa8:	f7fb ff89 	bl	8001ebe <fillRect>
	fillRect(50, 28, 4, (100-batteryLevel)/10, ST77XX_WHITE, hspi);
 8005fac:	1dfb      	adds	r3, r7, #7
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	2264      	movs	r2, #100	; 0x64
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	210a      	movs	r1, #10
 8005fb6:	0018      	movs	r0, r3
 8005fb8:	f7fa f938 	bl	800022c <__divsi3>
 8005fbc:	0003      	movs	r3, r0
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	9301      	str	r3, [sp, #4]
 8005fc4:	4b16      	ldr	r3, [pc, #88]	; (8006020 <drawBattery+0x12c>)
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	0013      	movs	r3, r2
 8005fca:	2204      	movs	r2, #4
 8005fcc:	211c      	movs	r1, #28
 8005fce:	2032      	movs	r0, #50	; 0x32
 8005fd0:	f7fb ff75 	bl	8001ebe <fillRect>

	setTextSize(1);
 8005fd4:	2001      	movs	r0, #1
 8005fd6:	f7fc fd73 	bl	8002ac0 <setTextSize>
	if (batteryLevel >= 20) color = ST77XX_BLACK;		// reusing variable for more obfuscated code.
 8005fda:	1dfb      	adds	r3, r7, #7
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	2b13      	cmp	r3, #19
 8005fe0:	d903      	bls.n	8005fea <drawBattery+0xf6>
 8005fe2:	230e      	movs	r3, #14
 8005fe4:	18fb      	adds	r3, r7, r3
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	801a      	strh	r2, [r3, #0]
	setTextColor(color);
 8005fea:	230e      	movs	r3, #14
 8005fec:	18fb      	adds	r3, r7, r3
 8005fee:	881b      	ldrh	r3, [r3, #0]
 8005ff0:	0018      	movs	r0, r3
 8005ff2:	f7fc fd75 	bl	8002ae0 <setTextColor>
	sprintf(str, "%3d%%", batteryLevel);
 8005ff6:	1dfb      	adds	r3, r7, #7
 8005ff8:	781a      	ldrb	r2, [r3, #0]
 8005ffa:	490a      	ldr	r1, [pc, #40]	; (8006024 <drawBattery+0x130>)
 8005ffc:	2408      	movs	r4, #8
 8005ffe:	193b      	adds	r3, r7, r4
 8006000:	0018      	movs	r0, r3
 8006002:	f004 fe5f 	bl	800acc4 <siprintf>
	drawTextAt(55, 31, str, hspi);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	193a      	adds	r2, r7, r4
 800600a:	211f      	movs	r1, #31
 800600c:	2037      	movs	r0, #55	; 0x37
 800600e:	f7fc fce5 	bl	80029dc <drawTextAt>
}
 8006012:	46c0      	nop			; (mov r8, r8)
 8006014:	46bd      	mov	sp, r7
 8006016:	b005      	add	sp, #20
 8006018:	bd90      	pop	{r4, r7, pc}
 800601a:	46c0      	nop			; (mov r8, r8)
 800601c:	fffff800 	.word	0xfffff800
 8006020:	0000ffff 	.word	0x0000ffff
 8006024:	0800b620 	.word	0x0800b620

08006028 <drawClock>:

// draw time and date
// should optimize to only redraw part that changed
void drawClock(struct dates *d, struct times *t, SPI_HandleTypeDef *hspi) {
 8006028:	b5b0      	push	{r4, r5, r7, lr}
 800602a:	b090      	sub	sp, #64	; 0x40
 800602c:	af02      	add	r7, sp, #8
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
	// notes on paper.
	char str[40];

	// no need to draw padding for those that always have the same length
	// drawing hr and min, 12-hr format
	if (t->hr % 12 == 0) sprintf(str, "%2d:%02d", 12, t->min);
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	210c      	movs	r1, #12
 800603a:	0018      	movs	r0, r3
 800603c:	f7fa f8f2 	bl	8000224 <__aeabi_uidivmod>
 8006040:	000b      	movs	r3, r1
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b00      	cmp	r3, #0
 8006046:	d108      	bne.n	800605a <drawClock+0x32>
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	785b      	ldrb	r3, [r3, #1]
 800604c:	493c      	ldr	r1, [pc, #240]	; (8006140 <drawClock+0x118>)
 800604e:	2210      	movs	r2, #16
 8006050:	18b8      	adds	r0, r7, r2
 8006052:	220c      	movs	r2, #12
 8006054:	f004 fe36 	bl	800acc4 <siprintf>
 8006058:	e00f      	b.n	800607a <drawClock+0x52>
	else sprintf(str, "%2d:%02d", t->hr%12, t->min);
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	210c      	movs	r1, #12
 8006060:	0018      	movs	r0, r3
 8006062:	f7fa f8df 	bl	8000224 <__aeabi_uidivmod>
 8006066:	000b      	movs	r3, r1
 8006068:	b2db      	uxtb	r3, r3
 800606a:	001a      	movs	r2, r3
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	785b      	ldrb	r3, [r3, #1]
 8006070:	4933      	ldr	r1, [pc, #204]	; (8006140 <drawClock+0x118>)
 8006072:	2010      	movs	r0, #16
 8006074:	1838      	adds	r0, r7, r0
 8006076:	f004 fe25 	bl	800acc4 <siprintf>
	setTextSize(3);
 800607a:	2003      	movs	r0, #3
 800607c:	f7fc fd20 	bl	8002ac0 <setTextSize>
	setTextColor(ST77XX_BLACK);
 8006080:	2000      	movs	r0, #0
 8006082:	f7fc fd2d 	bl	8002ae0 <setTextColor>
	drawCenteredText(52, 60, str, hspi);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2410      	movs	r4, #16
 800608a:	193a      	adds	r2, r7, r4
 800608c:	213c      	movs	r1, #60	; 0x3c
 800608e:	2034      	movs	r0, #52	; 0x34
 8006090:	f7fb ffc4 	bl	800201c <drawCenteredText>

	// drawing sec
	sprintf(str, "%02d", t->sec);
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	789b      	ldrb	r3, [r3, #2]
 8006098:	001a      	movs	r2, r3
 800609a:	492a      	ldr	r1, [pc, #168]	; (8006144 <drawClock+0x11c>)
 800609c:	193b      	adds	r3, r7, r4
 800609e:	0018      	movs	r0, r3
 80060a0:	f004 fe10 	bl	800acc4 <siprintf>
	setTextSize(2);
 80060a4:	2002      	movs	r0, #2
 80060a6:	f7fc fd0b 	bl	8002ac0 <setTextSize>
	drawCenteredText(109, 68, str, hspi);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	193a      	adds	r2, r7, r4
 80060ae:	2144      	movs	r1, #68	; 0x44
 80060b0:	206d      	movs	r0, #109	; 0x6d
 80060b2:	f7fb ffb3 	bl	800201c <drawCenteredText>

	// drawing AM/PM text
	setTextSize(1);
 80060b6:	2001      	movs	r0, #1
 80060b8:	f7fc fd02 	bl	8002ac0 <setTextSize>
	if (t->hr < 12) drawCenteredText(103, 60, "AM", hspi);
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	2b0b      	cmp	r3, #11
 80060c2:	d806      	bhi.n	80060d2 <drawClock+0xaa>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a20      	ldr	r2, [pc, #128]	; (8006148 <drawClock+0x120>)
 80060c8:	213c      	movs	r1, #60	; 0x3c
 80060ca:	2067      	movs	r0, #103	; 0x67
 80060cc:	f7fb ffa6 	bl	800201c <drawCenteredText>
 80060d0:	e005      	b.n	80060de <drawClock+0xb6>
	else drawCenteredText(103, 60, "PM", hspi);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a1d      	ldr	r2, [pc, #116]	; (800614c <drawClock+0x124>)
 80060d6:	213c      	movs	r1, #60	; 0x3c
 80060d8:	2067      	movs	r0, #103	; 0x67
 80060da:	f7fb ff9f 	bl	800201c <drawCenteredText>

	// drawing date
	setTextSize(1);
 80060de:	2001      	movs	r0, #1
 80060e0:	f7fc fcee 	bl	8002ac0 <setTextSize>
	sprintf(str, "%s %d %04d", monthNames[d->month], d->date, d->yr);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	789b      	ldrb	r3, [r3, #2]
 80060e8:	001a      	movs	r2, r3
 80060ea:	4b19      	ldr	r3, [pc, #100]	; (8006150 <drawClock+0x128>)
 80060ec:	0092      	lsls	r2, r2, #2
 80060ee:	58d2      	ldr	r2, [r2, r3]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	78db      	ldrb	r3, [r3, #3]
 80060f4:	001c      	movs	r4, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	4916      	ldr	r1, [pc, #88]	; (8006154 <drawClock+0x12c>)
 80060fc:	2510      	movs	r5, #16
 80060fe:	1978      	adds	r0, r7, r5
 8006100:	9300      	str	r3, [sp, #0]
 8006102:	0023      	movs	r3, r4
 8006104:	f004 fdde 	bl	800acc4 <siprintf>
	drawCenteredTextWithPadding(WIDTH/2, 84, 11, str, hspi);
 8006108:	197a      	adds	r2, r7, r5
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	0013      	movs	r3, r2
 8006110:	220b      	movs	r2, #11
 8006112:	2154      	movs	r1, #84	; 0x54
 8006114:	2040      	movs	r0, #64	; 0x40
 8006116:	f7fb ffe3 	bl	80020e0 <drawCenteredTextWithPadding>

	// drawing weekday
	drawCenteredTextWithPadding(WIDTH/2, 92, 9, weekdayNames[d->weekday], hspi);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	791b      	ldrb	r3, [r3, #4]
 800611e:	001a      	movs	r2, r3
 8006120:	4b0d      	ldr	r3, [pc, #52]	; (8006158 <drawClock+0x130>)
 8006122:	0092      	lsls	r2, r2, #2
 8006124:	58d2      	ldr	r2, [r2, r3]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	0013      	movs	r3, r2
 800612c:	2209      	movs	r2, #9
 800612e:	215c      	movs	r1, #92	; 0x5c
 8006130:	2040      	movs	r0, #64	; 0x40
 8006132:	f7fb ffd5 	bl	80020e0 <drawCenteredTextWithPadding>
}
 8006136:	46c0      	nop			; (mov r8, r8)
 8006138:	46bd      	mov	sp, r7
 800613a:	b00e      	add	sp, #56	; 0x38
 800613c:	bdb0      	pop	{r4, r5, r7, pc}
 800613e:	46c0      	nop			; (mov r8, r8)
 8006140:	0800b628 	.word	0x0800b628
 8006144:	0800b634 	.word	0x0800b634
 8006148:	0800b63c 	.word	0x0800b63c
 800614c:	0800b640 	.word	0x0800b640
 8006150:	20000034 	.word	0x20000034
 8006154:	0800b644 	.word	0x0800b644
 8006158:	20000014 	.word	0x20000014

0800615c <drawTimer>:

void drawTimer(struct times *t, SPI_HandleTypeDef *hspi) {
 800615c:	b5b0      	push	{r4, r5, r7, lr}
 800615e:	b08e      	sub	sp, #56	; 0x38
 8006160:	af02      	add	r7, sp, #8
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
	char str[40];

	// only drawing hr:min:sec of timer
	setTextSize(2);
 8006166:	2002      	movs	r0, #2
 8006168:	f7fc fcaa 	bl	8002ac0 <setTextSize>
	setTextColor(ST77XX_BLACK);
 800616c:	2000      	movs	r0, #0
 800616e:	f7fc fcb7 	bl	8002ae0 <setTextColor>
	sprintf(str, "%2d:%2d:%2d", t->hr, t->min, t->sec);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	001a      	movs	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	785b      	ldrb	r3, [r3, #1]
 800617c:	001c      	movs	r4, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	789b      	ldrb	r3, [r3, #2]
 8006182:	4908      	ldr	r1, [pc, #32]	; (80061a4 <drawTimer+0x48>)
 8006184:	2508      	movs	r5, #8
 8006186:	1978      	adds	r0, r7, r5
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	0023      	movs	r3, r4
 800618c:	f004 fd9a 	bl	800acc4 <siprintf>
	drawCenteredText(WIDTH/2, HEIGHT/2-12, str, hspi);		// about y=68
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	197a      	adds	r2, r7, r5
 8006194:	2144      	movs	r1, #68	; 0x44
 8006196:	2040      	movs	r0, #64	; 0x40
 8006198:	f7fb ff40 	bl	800201c <drawCenteredText>

	// leaving room to draw "timer set!/unset"
}
 800619c:	46c0      	nop			; (mov r8, r8)
 800619e:	46bd      	mov	sp, r7
 80061a0:	b00c      	add	sp, #48	; 0x30
 80061a2:	bdb0      	pop	{r4, r5, r7, pc}
 80061a4:	0800b650 	.word	0x0800b650

080061a8 <drawAlarm>:

void drawAlarm(struct alarmTimes *a, SPI_HandleTypeDef *hspi) {
 80061a8:	b5b0      	push	{r4, r5, r7, lr}
 80061aa:	b08e      	sub	sp, #56	; 0x38
 80061ac:	af02      	add	r7, sp, #8
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
	char str[40];

	// drawing hr:min:sec
	setTextSize(2);
 80061b2:	2002      	movs	r0, #2
 80061b4:	f7fc fc84 	bl	8002ac0 <setTextSize>
	setTextColor(ST77XX_BLACK);
 80061b8:	2000      	movs	r0, #0
 80061ba:	f7fc fc91 	bl	8002ae0 <setTextColor>
	sprintf(str, "%2d:%2d:%2d", a->hr, a->min, a->sec);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	001a      	movs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	785b      	ldrb	r3, [r3, #1]
 80061c8:	001c      	movs	r4, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	789b      	ldrb	r3, [r3, #2]
 80061ce:	4911      	ldr	r1, [pc, #68]	; (8006214 <drawAlarm+0x6c>)
 80061d0:	2508      	movs	r5, #8
 80061d2:	1978      	adds	r0, r7, r5
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	0023      	movs	r3, r4
 80061d8:	f004 fd74 	bl	800acc4 <siprintf>
	drawCenteredText(WIDTH/2, 68, str, hspi);
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	197a      	adds	r2, r7, r5
 80061e0:	2144      	movs	r1, #68	; 0x44
 80061e2:	2040      	movs	r0, #64	; 0x40
 80061e4:	f7fb ff1a 	bl	800201c <drawCenteredText>

	// drawing weekday
	setTextSize(1);
 80061e8:	2001      	movs	r0, #1
 80061ea:	f7fc fc69 	bl	8002ac0 <setTextSize>
	drawCenteredTextWithPadding(WIDTH/2, 84, 9, weekdayNames[a->weekday], hspi);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	78db      	ldrb	r3, [r3, #3]
 80061f2:	001a      	movs	r2, r3
 80061f4:	4b08      	ldr	r3, [pc, #32]	; (8006218 <drawAlarm+0x70>)
 80061f6:	0092      	lsls	r2, r2, #2
 80061f8:	58d2      	ldr	r2, [r2, r3]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	0013      	movs	r3, r2
 8006200:	2209      	movs	r2, #9
 8006202:	2154      	movs	r1, #84	; 0x54
 8006204:	2040      	movs	r0, #64	; 0x40
 8006206:	f7fb ff6b 	bl	80020e0 <drawCenteredTextWithPadding>
}
 800620a:	46c0      	nop			; (mov r8, r8)
 800620c:	46bd      	mov	sp, r7
 800620e:	b00c      	add	sp, #48	; 0x30
 8006210:	bdb0      	pop	{r4, r5, r7, pc}
 8006212:	46c0      	nop			; (mov r8, r8)
 8006214:	0800b650 	.word	0x0800b650
 8006218:	20000014 	.word	0x20000014

0800621c <drawStopwatch>:

void drawStopwatch(uint32_t seconds, SPI_HandleTypeDef *hspi) {
 800621c:	b5b0      	push	{r4, r5, r7, lr}
 800621e:	b090      	sub	sp, #64	; 0x40
 8006220:	af02      	add	r7, sp, #8
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
	struct times t = {0};
 8006226:	2134      	movs	r1, #52	; 0x34
 8006228:	000c      	movs	r4, r1
 800622a:	187b      	adds	r3, r7, r1
 800622c:	0018      	movs	r0, r3
 800622e:	2303      	movs	r3, #3
 8006230:	001a      	movs	r2, r3
 8006232:	2100      	movs	r1, #0
 8006234:	f004 fcbf 	bl	800abb6 <memset>
	char str[40];

	secondsToTime(&t, seconds);
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	0021      	movs	r1, r4
 800623c:	000c      	movs	r4, r1
 800623e:	187b      	adds	r3, r7, r1
 8006240:	0011      	movs	r1, r2
 8006242:	0018      	movs	r0, r3
 8006244:	f7fd f82d 	bl	80032a2 <secondsToTime>

	// drawing hr:min:sec
	setTextSize(2);
 8006248:	2002      	movs	r0, #2
 800624a:	f7fc fc39 	bl	8002ac0 <setTextSize>
	setTextColor(ST77XX_BLACK);
 800624e:	2000      	movs	r0, #0
 8006250:	f7fc fc46 	bl	8002ae0 <setTextColor>
	sprintf(str, "%2d:%2d:%2d", t.hr, t.min, t.sec);
 8006254:	0021      	movs	r1, r4
 8006256:	187b      	adds	r3, r7, r1
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	001a      	movs	r2, r3
 800625c:	187b      	adds	r3, r7, r1
 800625e:	785b      	ldrb	r3, [r3, #1]
 8006260:	001c      	movs	r4, r3
 8006262:	187b      	adds	r3, r7, r1
 8006264:	789b      	ldrb	r3, [r3, #2]
 8006266:	4908      	ldr	r1, [pc, #32]	; (8006288 <drawStopwatch+0x6c>)
 8006268:	250c      	movs	r5, #12
 800626a:	1978      	adds	r0, r7, r5
 800626c:	9300      	str	r3, [sp, #0]
 800626e:	0023      	movs	r3, r4
 8006270:	f004 fd28 	bl	800acc4 <siprintf>
	drawCenteredText(WIDTH/2, 68, str, hspi);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	197a      	adds	r2, r7, r5
 8006278:	2144      	movs	r1, #68	; 0x44
 800627a:	2040      	movs	r0, #64	; 0x40
 800627c:	f7fb fece 	bl	800201c <drawCenteredText>

	// leaving room for lap
}
 8006280:	46c0      	nop			; (mov r8, r8)
 8006282:	46bd      	mov	sp, r7
 8006284:	b00e      	add	sp, #56	; 0x38
 8006286:	bdb0      	pop	{r4, r5, r7, pc}
 8006288:	0800b650 	.word	0x0800b650

0800628c <drawStopwatchLap>:

void drawStopwatchLap(uint32_t seconds, SPI_HandleTypeDef *hspi) {
 800628c:	b5b0      	push	{r4, r5, r7, lr}
 800628e:	b090      	sub	sp, #64	; 0x40
 8006290:	af02      	add	r7, sp, #8
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
	struct times t = {0};
 8006296:	2134      	movs	r1, #52	; 0x34
 8006298:	000c      	movs	r4, r1
 800629a:	187b      	adds	r3, r7, r1
 800629c:	0018      	movs	r0, r3
 800629e:	2303      	movs	r3, #3
 80062a0:	001a      	movs	r2, r3
 80062a2:	2100      	movs	r1, #0
 80062a4:	f004 fc87 	bl	800abb6 <memset>
	char str[40];

	secondsToTime(&t, seconds);
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	0021      	movs	r1, r4
 80062ac:	000c      	movs	r4, r1
 80062ae:	187b      	adds	r3, r7, r1
 80062b0:	0011      	movs	r1, r2
 80062b2:	0018      	movs	r0, r3
 80062b4:	f7fc fff5 	bl	80032a2 <secondsToTime>

	// drawing hr:min:sec
	setTextSize(1);
 80062b8:	2001      	movs	r0, #1
 80062ba:	f7fc fc01 	bl	8002ac0 <setTextSize>
	setTextColor(ST77XX_BLACK);
 80062be:	2000      	movs	r0, #0
 80062c0:	f7fc fc0e 	bl	8002ae0 <setTextColor>
	sprintf(str, "lap: %2d:%2d:%2d", t.hr, t.min, t.sec);
 80062c4:	0021      	movs	r1, r4
 80062c6:	187b      	adds	r3, r7, r1
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	001a      	movs	r2, r3
 80062cc:	187b      	adds	r3, r7, r1
 80062ce:	785b      	ldrb	r3, [r3, #1]
 80062d0:	001c      	movs	r4, r3
 80062d2:	187b      	adds	r3, r7, r1
 80062d4:	789b      	ldrb	r3, [r3, #2]
 80062d6:	4908      	ldr	r1, [pc, #32]	; (80062f8 <drawStopwatchLap+0x6c>)
 80062d8:	250c      	movs	r5, #12
 80062da:	1978      	adds	r0, r7, r5
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	0023      	movs	r3, r4
 80062e0:	f004 fcf0 	bl	800acc4 <siprintf>
	drawCenteredText(WIDTH/2, 84, str, hspi);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	197a      	adds	r2, r7, r5
 80062e8:	2154      	movs	r1, #84	; 0x54
 80062ea:	2040      	movs	r0, #64	; 0x40
 80062ec:	f7fb fe96 	bl	800201c <drawCenteredText>
}
 80062f0:	46c0      	nop			; (mov r8, r8)
 80062f2:	46bd      	mov	sp, r7
 80062f4:	b00e      	add	sp, #56	; 0x38
 80062f6:	bdb0      	pop	{r4, r5, r7, pc}
 80062f8:	0800b65c 	.word	0x0800b65c

080062fc <initFace>:
// ---- end of drawing functions ----

// initializes variables. should be called at the start of the run
void initFace() {
 80062fc:	b580      	push	{r7, lr}
 80062fe:	af00      	add	r7, sp, #0
	faceOnDisplay = faceClock;
 8006300:	4b14      	ldr	r3, [pc, #80]	; (8006354 <initFace+0x58>)
 8006302:	2200      	movs	r2, #0
 8006304:	701a      	strb	r2, [r3, #0]
	updateFace.clock = 1;
 8006306:	4b14      	ldr	r3, [pc, #80]	; (8006358 <initFace+0x5c>)
 8006308:	2201      	movs	r2, #1
 800630a:	701a      	strb	r2, [r3, #0]

	clockVars.dateToSet = (struct dates *)calloc(1, sizeof(struct dates *));
 800630c:	2104      	movs	r1, #4
 800630e:	2001      	movs	r0, #1
 8006310:	f004 fc14 	bl	800ab3c <calloc>
 8006314:	0003      	movs	r3, r0
 8006316:	001a      	movs	r2, r3
 8006318:	4b10      	ldr	r3, [pc, #64]	; (800635c <initFace+0x60>)
 800631a:	605a      	str	r2, [r3, #4]
	clockVars.timeToSet = (struct times *)calloc(1, sizeof(struct times *));
 800631c:	2104      	movs	r1, #4
 800631e:	2001      	movs	r0, #1
 8006320:	f004 fc0c 	bl	800ab3c <calloc>
 8006324:	0003      	movs	r3, r0
 8006326:	001a      	movs	r2, r3
 8006328:	4b0c      	ldr	r3, [pc, #48]	; (800635c <initFace+0x60>)
 800632a:	609a      	str	r2, [r3, #8]
	timerVars.timeToSet = (struct times *)calloc(1, sizeof(struct times *));
 800632c:	2104      	movs	r1, #4
 800632e:	2001      	movs	r0, #1
 8006330:	f004 fc04 	bl	800ab3c <calloc>
 8006334:	0003      	movs	r3, r0
 8006336:	001a      	movs	r2, r3
 8006338:	4b09      	ldr	r3, [pc, #36]	; (8006360 <initFace+0x64>)
 800633a:	605a      	str	r2, [r3, #4]
	alarmVars.alarmToSet = (struct alarmTimes *)calloc(1, sizeof(struct alarmTimes *));
 800633c:	2104      	movs	r1, #4
 800633e:	2001      	movs	r0, #1
 8006340:	f004 fbfc 	bl	800ab3c <calloc>
 8006344:	0003      	movs	r3, r0
 8006346:	001a      	movs	r2, r3
 8006348:	4b06      	ldr	r3, [pc, #24]	; (8006364 <initFace+0x68>)
 800634a:	605a      	str	r2, [r3, #4]
}
 800634c:	46c0      	nop			; (mov r8, r8)
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	46c0      	nop			; (mov r8, r8)
 8006354:	20000134 	.word	0x20000134
 8006358:	20000144 	.word	0x20000144
 800635c:	20000110 	.word	0x20000110
 8006360:	2000011c 	.word	0x2000011c
 8006364:	20000124 	.word	0x20000124

08006368 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8006368:	480d      	ldr	r0, [pc, #52]	; (80063a0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800636a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800636c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800636e:	e003      	b.n	8006378 <LoopCopyDataInit>

08006370 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006370:	4b0c      	ldr	r3, [pc, #48]	; (80063a4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8006372:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006374:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006376:	3104      	adds	r1, #4

08006378 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8006378:	480b      	ldr	r0, [pc, #44]	; (80063a8 <LoopForever+0xa>)
  ldr  r3, =_edata
 800637a:	4b0c      	ldr	r3, [pc, #48]	; (80063ac <LoopForever+0xe>)
  adds  r2, r0, r1
 800637c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800637e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006380:	d3f6      	bcc.n	8006370 <CopyDataInit>
  ldr  r2, =_sbss
 8006382:	4a0b      	ldr	r2, [pc, #44]	; (80063b0 <LoopForever+0x12>)
  b  LoopFillZerobss
 8006384:	e002      	b.n	800638c <LoopFillZerobss>

08006386 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8006386:	2300      	movs	r3, #0
  str  r3, [r2]
 8006388:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800638a:	3204      	adds	r2, #4

0800638c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 800638c:	4b09      	ldr	r3, [pc, #36]	; (80063b4 <LoopForever+0x16>)
  cmp  r2, r3
 800638e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006390:	d3f9      	bcc.n	8006386 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006392:	f7fe f855 	bl	8004440 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006396:	f004 fbe1 	bl	800ab5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800639a:	f7fd f869 	bl	8003470 <main>

0800639e <LoopForever>:

LoopForever:
    b LoopForever
 800639e:	e7fe      	b.n	800639e <LoopForever>
   ldr   r0, =_estack
 80063a0:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 80063a4:	0800bfa0 	.word	0x0800bfa0
  ldr  r0, =_sdata
 80063a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80063ac:	200000d0 	.word	0x200000d0
  ldr  r2, =_sbss
 80063b0:	200000d0 	.word	0x200000d0
  ldr  r3, = _ebss
 80063b4:	200003a8 	.word	0x200003a8

080063b8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80063b8:	e7fe      	b.n	80063b8 <ADC1_COMP_IRQHandler>
	...

080063bc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80063c2:	1dfb      	adds	r3, r7, #7
 80063c4:	2200      	movs	r2, #0
 80063c6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80063c8:	4b0b      	ldr	r3, [pc, #44]	; (80063f8 <HAL_Init+0x3c>)
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	4b0a      	ldr	r3, [pc, #40]	; (80063f8 <HAL_Init+0x3c>)
 80063ce:	2140      	movs	r1, #64	; 0x40
 80063d0:	430a      	orrs	r2, r1
 80063d2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80063d4:	2000      	movs	r0, #0
 80063d6:	f000 f811 	bl	80063fc <HAL_InitTick>
 80063da:	1e03      	subs	r3, r0, #0
 80063dc:	d003      	beq.n	80063e6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80063de:	1dfb      	adds	r3, r7, #7
 80063e0:	2201      	movs	r2, #1
 80063e2:	701a      	strb	r2, [r3, #0]
 80063e4:	e001      	b.n	80063ea <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80063e6:	f7fd fda5 	bl	8003f34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80063ea:	1dfb      	adds	r3, r7, #7
 80063ec:	781b      	ldrb	r3, [r3, #0]
}
 80063ee:	0018      	movs	r0, r3
 80063f0:	46bd      	mov	sp, r7
 80063f2:	b002      	add	sp, #8
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	46c0      	nop			; (mov r8, r8)
 80063f8:	40022000 	.word	0x40022000

080063fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006404:	230f      	movs	r3, #15
 8006406:	18fb      	adds	r3, r7, r3
 8006408:	2200      	movs	r2, #0
 800640a:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800640c:	4b0f      	ldr	r3, [pc, #60]	; (800644c <HAL_InitTick+0x50>)
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	23fa      	movs	r3, #250	; 0xfa
 8006412:	0099      	lsls	r1, r3, #2
 8006414:	0010      	movs	r0, r2
 8006416:	f7f9 fe7f 	bl	8000118 <__udivsi3>
 800641a:	0003      	movs	r3, r0
 800641c:	0018      	movs	r0, r3
 800641e:	f000 fde4 	bl	8006fea <HAL_SYSTICK_Config>
 8006422:	1e03      	subs	r3, r0, #0
 8006424:	d004      	beq.n	8006430 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8006426:	230f      	movs	r3, #15
 8006428:	18fb      	adds	r3, r7, r3
 800642a:	2201      	movs	r2, #1
 800642c:	701a      	strb	r2, [r3, #0]
 800642e:	e006      	b.n	800643e <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8006430:	6879      	ldr	r1, [r7, #4]
 8006432:	2301      	movs	r3, #1
 8006434:	425b      	negs	r3, r3
 8006436:	2200      	movs	r2, #0
 8006438:	0018      	movs	r0, r3
 800643a:	f000 fda1 	bl	8006f80 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 800643e:	230f      	movs	r3, #15
 8006440:	18fb      	adds	r3, r7, r3
 8006442:	781b      	ldrb	r3, [r3, #0]
}
 8006444:	0018      	movs	r0, r3
 8006446:	46bd      	mov	sp, r7
 8006448:	b004      	add	sp, #16
 800644a:	bd80      	pop	{r7, pc}
 800644c:	20000010 	.word	0x20000010

08006450 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	af00      	add	r7, sp, #0
  uwTick++;
 8006454:	4b03      	ldr	r3, [pc, #12]	; (8006464 <HAL_IncTick+0x14>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	1c5a      	adds	r2, r3, #1
 800645a:	4b02      	ldr	r3, [pc, #8]	; (8006464 <HAL_IncTick+0x14>)
 800645c:	601a      	str	r2, [r3, #0]
}
 800645e:	46c0      	nop			; (mov r8, r8)
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	200003a0 	.word	0x200003a0

08006468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	af00      	add	r7, sp, #0
  return uwTick;
 800646c:	4b02      	ldr	r3, [pc, #8]	; (8006478 <HAL_GetTick+0x10>)
 800646e:	681b      	ldr	r3, [r3, #0]
}
 8006470:	0018      	movs	r0, r3
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	46c0      	nop			; (mov r8, r8)
 8006478:	200003a0 	.word	0x200003a0

0800647c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006484:	f7ff fff0 	bl	8006468 <HAL_GetTick>
 8006488:	0003      	movs	r3, r0
 800648a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	3301      	adds	r3, #1
 8006494:	d002      	beq.n	800649c <HAL_Delay+0x20>
  {
    wait++;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	3301      	adds	r3, #1
 800649a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800649c:	46c0      	nop			; (mov r8, r8)
 800649e:	f7ff ffe3 	bl	8006468 <HAL_GetTick>
 80064a2:	0002      	movs	r2, r0
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d8f7      	bhi.n	800649e <HAL_Delay+0x22>
  {
  }
}
 80064ae:	46c0      	nop			; (mov r8, r8)
 80064b0:	46bd      	mov	sp, r7
 80064b2:	b004      	add	sp, #16
 80064b4:	bd80      	pop	{r7, pc}
	...

080064b8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e159      	b.n	800677e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10a      	bne.n	80064e8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2250      	movs	r2, #80	; 0x50
 80064dc:	2100      	movs	r1, #0
 80064de:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	0018      	movs	r0, r3
 80064e4:	f7fd fd3a 	bl	8003f5c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ec:	2210      	movs	r2, #16
 80064ee:	4013      	ands	r3, r2
 80064f0:	2b10      	cmp	r3, #16
 80064f2:	d005      	beq.n	8006500 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	2204      	movs	r2, #4
 80064fc:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80064fe:	d00b      	beq.n	8006518 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006504:	2210      	movs	r2, #16
 8006506:	431a      	orrs	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2250      	movs	r2, #80	; 0x50
 8006510:	2100      	movs	r1, #0
 8006512:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e132      	b.n	800677e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800651c:	4a9a      	ldr	r2, [pc, #616]	; (8006788 <HAL_ADC_Init+0x2d0>)
 800651e:	4013      	ands	r3, r2
 8006520:	2202      	movs	r2, #2
 8006522:	431a      	orrs	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	2203      	movs	r2, #3
 8006530:	4013      	ands	r3, r2
 8006532:	2b01      	cmp	r3, #1
 8006534:	d108      	bne.n	8006548 <HAL_ADC_Init+0x90>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2201      	movs	r2, #1
 800653e:	4013      	ands	r3, r2
 8006540:	2b01      	cmp	r3, #1
 8006542:	d101      	bne.n	8006548 <HAL_ADC_Init+0x90>
 8006544:	2301      	movs	r3, #1
 8006546:	e000      	b.n	800654a <HAL_ADC_Init+0x92>
 8006548:	2300      	movs	r3, #0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d149      	bne.n	80065e2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685a      	ldr	r2, [r3, #4]
 8006552:	23c0      	movs	r3, #192	; 0xc0
 8006554:	061b      	lsls	r3, r3, #24
 8006556:	429a      	cmp	r2, r3
 8006558:	d00b      	beq.n	8006572 <HAL_ADC_Init+0xba>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	2380      	movs	r3, #128	; 0x80
 8006560:	05db      	lsls	r3, r3, #23
 8006562:	429a      	cmp	r2, r3
 8006564:	d005      	beq.n	8006572 <HAL_ADC_Init+0xba>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	2380      	movs	r3, #128	; 0x80
 800656c:	061b      	lsls	r3, r3, #24
 800656e:	429a      	cmp	r2, r3
 8006570:	d111      	bne.n	8006596 <HAL_ADC_Init+0xde>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	691a      	ldr	r2, [r3, #16]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	0092      	lsls	r2, r2, #2
 800657e:	0892      	lsrs	r2, r2, #2
 8006580:	611a      	str	r2, [r3, #16]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	6919      	ldr	r1, [r3, #16]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	430a      	orrs	r2, r1
 8006592:	611a      	str	r2, [r3, #16]
 8006594:	e014      	b.n	80065c0 <HAL_ADC_Init+0x108>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	691a      	ldr	r2, [r3, #16]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	0092      	lsls	r2, r2, #2
 80065a2:	0892      	lsrs	r2, r2, #2
 80065a4:	611a      	str	r2, [r3, #16]
 80065a6:	4b79      	ldr	r3, [pc, #484]	; (800678c <HAL_ADC_Init+0x2d4>)
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	4b78      	ldr	r3, [pc, #480]	; (800678c <HAL_ADC_Init+0x2d4>)
 80065ac:	4978      	ldr	r1, [pc, #480]	; (8006790 <HAL_ADC_Init+0x2d8>)
 80065ae:	400a      	ands	r2, r1
 80065b0:	601a      	str	r2, [r3, #0]
 80065b2:	4b76      	ldr	r3, [pc, #472]	; (800678c <HAL_ADC_Init+0x2d4>)
 80065b4:	6819      	ldr	r1, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685a      	ldr	r2, [r3, #4]
 80065ba:	4b74      	ldr	r3, [pc, #464]	; (800678c <HAL_ADC_Init+0x2d4>)
 80065bc:	430a      	orrs	r2, r1
 80065be:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68da      	ldr	r2, [r3, #12]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2118      	movs	r1, #24
 80065cc:	438a      	bics	r2, r1
 80065ce:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68d9      	ldr	r1, [r3, #12]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	689a      	ldr	r2, [r3, #8]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	430a      	orrs	r2, r1
 80065e0:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80065e2:	4b6a      	ldr	r3, [pc, #424]	; (800678c <HAL_ADC_Init+0x2d4>)
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	4b69      	ldr	r3, [pc, #420]	; (800678c <HAL_ADC_Init+0x2d4>)
 80065e8:	496a      	ldr	r1, [pc, #424]	; (8006794 <HAL_ADC_Init+0x2dc>)
 80065ea:	400a      	ands	r2, r1
 80065ec:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80065ee:	4b67      	ldr	r3, [pc, #412]	; (800678c <HAL_ADC_Init+0x2d4>)
 80065f0:	6819      	ldr	r1, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f6:	065a      	lsls	r2, r3, #25
 80065f8:	4b64      	ldr	r3, [pc, #400]	; (800678c <HAL_ADC_Init+0x2d4>)
 80065fa:	430a      	orrs	r2, r1
 80065fc:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	689a      	ldr	r2, [r3, #8]
 8006604:	2380      	movs	r3, #128	; 0x80
 8006606:	055b      	lsls	r3, r3, #21
 8006608:	4013      	ands	r3, r2
 800660a:	d108      	bne.n	800661e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	689a      	ldr	r2, [r3, #8]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2180      	movs	r1, #128	; 0x80
 8006618:	0549      	lsls	r1, r1, #21
 800661a:	430a      	orrs	r2, r1
 800661c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68da      	ldr	r2, [r3, #12]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	495b      	ldr	r1, [pc, #364]	; (8006798 <HAL_ADC_Init+0x2e0>)
 800662a:	400a      	ands	r2, r1
 800662c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68d9      	ldr	r1, [r3, #12]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	2b02      	cmp	r3, #2
 800663e:	d101      	bne.n	8006644 <HAL_ADC_Init+0x18c>
 8006640:	2304      	movs	r3, #4
 8006642:	e000      	b.n	8006646 <HAL_ADC_Init+0x18e>
 8006644:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006646:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2020      	movs	r0, #32
 800664c:	5c1b      	ldrb	r3, [r3, r0]
 800664e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8006650:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	202c      	movs	r0, #44	; 0x2c
 8006656:	5c1b      	ldrb	r3, [r3, r0]
 8006658:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800665a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8006660:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8006668:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	69db      	ldr	r3, [r3, #28]
 800666e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8006670:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800667e:	23c2      	movs	r3, #194	; 0xc2
 8006680:	33ff      	adds	r3, #255	; 0xff
 8006682:	429a      	cmp	r2, r3
 8006684:	d00b      	beq.n	800669e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68d9      	ldr	r1, [r3, #12]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8006694:	431a      	orrs	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2221      	movs	r2, #33	; 0x21
 80066a2:	5c9b      	ldrb	r3, [r3, r2]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d11a      	bne.n	80066de <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2220      	movs	r2, #32
 80066ac:	5c9b      	ldrb	r3, [r3, r2]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d109      	bne.n	80066c6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68da      	ldr	r2, [r3, #12]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2180      	movs	r1, #128	; 0x80
 80066be:	0249      	lsls	r1, r1, #9
 80066c0:	430a      	orrs	r2, r1
 80066c2:	60da      	str	r2, [r3, #12]
 80066c4:	e00b      	b.n	80066de <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ca:	2220      	movs	r2, #32
 80066cc:	431a      	orrs	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d6:	2201      	movs	r2, #1
 80066d8:	431a      	orrs	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d11f      	bne.n	8006726 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	691a      	ldr	r2, [r3, #16]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	492a      	ldr	r1, [pc, #168]	; (800679c <HAL_ADC_Init+0x2e4>)
 80066f2:	400a      	ands	r2, r1
 80066f4:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	6919      	ldr	r1, [r3, #16]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006704:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 800670a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	430a      	orrs	r2, r1
 8006712:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	691a      	ldr	r2, [r3, #16]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2101      	movs	r1, #1
 8006720:	430a      	orrs	r2, r1
 8006722:	611a      	str	r2, [r3, #16]
 8006724:	e00e      	b.n	8006744 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	2201      	movs	r2, #1
 800672e:	4013      	ands	r3, r2
 8006730:	2b01      	cmp	r3, #1
 8006732:	d107      	bne.n	8006744 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	691a      	ldr	r2, [r3, #16]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2101      	movs	r1, #1
 8006740:	438a      	bics	r2, r1
 8006742:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	695a      	ldr	r2, [r3, #20]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2107      	movs	r1, #7
 8006750:	438a      	bics	r2, r1
 8006752:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6959      	ldr	r1, [r3, #20]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	430a      	orrs	r2, r1
 8006764:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006770:	2203      	movs	r2, #3
 8006772:	4393      	bics	r3, r2
 8006774:	2201      	movs	r2, #1
 8006776:	431a      	orrs	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	0018      	movs	r0, r3
 8006780:	46bd      	mov	sp, r7
 8006782:	b002      	add	sp, #8
 8006784:	bd80      	pop	{r7, pc}
 8006786:	46c0      	nop			; (mov r8, r8)
 8006788:	fffffefd 	.word	0xfffffefd
 800678c:	40012708 	.word	0x40012708
 8006790:	ffc3ffff 	.word	0xffc3ffff
 8006794:	fdffffff 	.word	0xfdffffff
 8006798:	fffe0219 	.word	0xfffe0219
 800679c:	fffffc03 	.word	0xfffffc03

080067a0 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80067a0:	b5b0      	push	{r4, r5, r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80067a8:	230f      	movs	r3, #15
 80067aa:	18fb      	adds	r3, r7, r3
 80067ac:	2200      	movs	r2, #0
 80067ae:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2250      	movs	r2, #80	; 0x50
 80067b4:	5c9b      	ldrb	r3, [r3, r2]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d101      	bne.n	80067be <HAL_ADC_Stop+0x1e>
 80067ba:	2302      	movs	r3, #2
 80067bc:	e02a      	b.n	8006814 <HAL_ADC_Stop+0x74>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2250      	movs	r2, #80	; 0x50
 80067c2:	2101      	movs	r1, #1
 80067c4:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80067c6:	250f      	movs	r5, #15
 80067c8:	197c      	adds	r4, r7, r5
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	0018      	movs	r0, r3
 80067ce:	f000 fa9b 	bl	8006d08 <ADC_ConversionStop>
 80067d2:	0003      	movs	r3, r0
 80067d4:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80067d6:	197b      	adds	r3, r7, r5
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d113      	bne.n	8006806 <HAL_ADC_Stop+0x66>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80067de:	250f      	movs	r5, #15
 80067e0:	197c      	adds	r4, r7, r5
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	0018      	movs	r0, r3
 80067e6:	f000 fa2f 	bl	8006c48 <ADC_Disable>
 80067ea:	0003      	movs	r3, r0
 80067ec:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80067ee:	197b      	adds	r3, r7, r5
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d107      	bne.n	8006806 <HAL_ADC_Stop+0x66>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fa:	4a08      	ldr	r2, [pc, #32]	; (800681c <HAL_ADC_Stop+0x7c>)
 80067fc:	4013      	ands	r3, r2
 80067fe:	2201      	movs	r2, #1
 8006800:	431a      	orrs	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2250      	movs	r2, #80	; 0x50
 800680a:	2100      	movs	r1, #0
 800680c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800680e:	230f      	movs	r3, #15
 8006810:	18fb      	adds	r3, r7, r3
 8006812:	781b      	ldrb	r3, [r3, #0]
}
 8006814:	0018      	movs	r0, r3
 8006816:	46bd      	mov	sp, r7
 8006818:	b004      	add	sp, #16
 800681a:	bdb0      	pop	{r4, r5, r7, pc}
 800681c:	fffffefe 	.word	0xfffffefe

08006820 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800682a:	2300      	movs	r3, #0
 800682c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800682e:	2300      	movs	r3, #0
 8006830:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	2b08      	cmp	r3, #8
 8006838:	d102      	bne.n	8006840 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800683a:	2308      	movs	r3, #8
 800683c:	60fb      	str	r3, [r7, #12]
 800683e:	e014      	b.n	800686a <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	2201      	movs	r2, #1
 8006848:	4013      	ands	r3, r2
 800684a:	2b01      	cmp	r3, #1
 800684c:	d10b      	bne.n	8006866 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006852:	2220      	movs	r2, #32
 8006854:	431a      	orrs	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2250      	movs	r2, #80	; 0x50
 800685e:	2100      	movs	r1, #0
 8006860:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e06c      	b.n	8006940 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8006866:	230c      	movs	r3, #12
 8006868:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800686a:	f7ff fdfd 	bl	8006468 <HAL_GetTick>
 800686e:	0003      	movs	r3, r0
 8006870:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8006872:	e019      	b.n	80068a8 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	3301      	adds	r3, #1
 8006878:	d016      	beq.n	80068a8 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d007      	beq.n	8006890 <HAL_ADC_PollForConversion+0x70>
 8006880:	f7ff fdf2 	bl	8006468 <HAL_GetTick>
 8006884:	0002      	movs	r2, r0
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	683a      	ldr	r2, [r7, #0]
 800688c:	429a      	cmp	r2, r3
 800688e:	d20b      	bcs.n	80068a8 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006894:	2204      	movs	r2, #4
 8006896:	431a      	orrs	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2250      	movs	r2, #80	; 0x50
 80068a0:	2100      	movs	r1, #0
 80068a2:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e04b      	b.n	8006940 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	4013      	ands	r3, r2
 80068b2:	d0df      	beq.n	8006874 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068b8:	2280      	movs	r2, #128	; 0x80
 80068ba:	0092      	lsls	r2, r2, #2
 80068bc:	431a      	orrs	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68da      	ldr	r2, [r3, #12]
 80068c8:	23c0      	movs	r3, #192	; 0xc0
 80068ca:	011b      	lsls	r3, r3, #4
 80068cc:	4013      	ands	r3, r2
 80068ce:	d12e      	bne.n	800692e <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2220      	movs	r2, #32
 80068d4:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d129      	bne.n	800692e <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2208      	movs	r2, #8
 80068e2:	4013      	ands	r3, r2
 80068e4:	2b08      	cmp	r3, #8
 80068e6:	d122      	bne.n	800692e <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	2204      	movs	r2, #4
 80068f0:	4013      	ands	r3, r2
 80068f2:	d110      	bne.n	8006916 <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	685a      	ldr	r2, [r3, #4]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	210c      	movs	r1, #12
 8006900:	438a      	bics	r2, r1
 8006902:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006908:	4a0f      	ldr	r2, [pc, #60]	; (8006948 <HAL_ADC_PollForConversion+0x128>)
 800690a:	4013      	ands	r3, r2
 800690c:	2201      	movs	r2, #1
 800690e:	431a      	orrs	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	655a      	str	r2, [r3, #84]	; 0x54
 8006914:	e00b      	b.n	800692e <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800691a:	2220      	movs	r2, #32
 800691c:	431a      	orrs	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006926:	2201      	movs	r2, #1
 8006928:	431a      	orrs	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d103      	bne.n	800693e <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	220c      	movs	r2, #12
 800693c:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	0018      	movs	r0, r3
 8006942:	46bd      	mov	sp, r7
 8006944:	b004      	add	sp, #16
 8006946:	bd80      	pop	{r7, pc}
 8006948:	fffffefe 	.word	0xfffffefe

0800694c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800694c:	b590      	push	{r4, r7, lr}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006954:	230f      	movs	r3, #15
 8006956:	18fb      	adds	r3, r7, r3
 8006958:	2200      	movs	r2, #0
 800695a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	2204      	movs	r2, #4
 8006964:	4013      	ands	r3, r2
 8006966:	d156      	bne.n	8006a16 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2250      	movs	r2, #80	; 0x50
 800696c:	5c9b      	ldrb	r3, [r3, r2]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d101      	bne.n	8006976 <HAL_ADC_Start_IT+0x2a>
 8006972:	2302      	movs	r3, #2
 8006974:	e056      	b.n	8006a24 <HAL_ADC_Start_IT+0xd8>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2250      	movs	r2, #80	; 0x50
 800697a:	2101      	movs	r1, #1
 800697c:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	69db      	ldr	r3, [r3, #28]
 8006982:	2b01      	cmp	r3, #1
 8006984:	d007      	beq.n	8006996 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8006986:	230f      	movs	r3, #15
 8006988:	18fc      	adds	r4, r7, r3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	0018      	movs	r0, r3
 800698e:	f000 f8fb 	bl	8006b88 <ADC_Enable>
 8006992:	0003      	movs	r3, r0
 8006994:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006996:	230f      	movs	r3, #15
 8006998:	18fb      	adds	r3, r7, r3
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d13e      	bne.n	8006a1e <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a4:	4a21      	ldr	r2, [pc, #132]	; (8006a2c <HAL_ADC_Start_IT+0xe0>)
 80069a6:	4013      	ands	r3, r2
 80069a8:	2280      	movs	r2, #128	; 0x80
 80069aa:	0052      	lsls	r2, r2, #1
 80069ac:	431a      	orrs	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2250      	movs	r2, #80	; 0x50
 80069bc:	2100      	movs	r1, #0
 80069be:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	221c      	movs	r2, #28
 80069c6:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	2b08      	cmp	r3, #8
 80069ce:	d110      	bne.n	80069f2 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685a      	ldr	r2, [r3, #4]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2104      	movs	r1, #4
 80069dc:	438a      	bics	r2, r1
 80069de:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685a      	ldr	r2, [r3, #4]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2118      	movs	r1, #24
 80069ec:	430a      	orrs	r2, r1
 80069ee:	605a      	str	r2, [r3, #4]
          break;
 80069f0:	e008      	b.n	8006a04 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	685a      	ldr	r2, [r3, #4]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	211c      	movs	r1, #28
 80069fe:	430a      	orrs	r2, r1
 8006a00:	605a      	str	r2, [r3, #4]
          break;
 8006a02:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	689a      	ldr	r2, [r3, #8]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2104      	movs	r1, #4
 8006a10:	430a      	orrs	r2, r1
 8006a12:	609a      	str	r2, [r3, #8]
 8006a14:	e003      	b.n	8006a1e <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006a16:	230f      	movs	r3, #15
 8006a18:	18fb      	adds	r3, r7, r3
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006a1e:	230f      	movs	r3, #15
 8006a20:	18fb      	adds	r3, r7, r3
 8006a22:	781b      	ldrb	r3, [r3, #0]
}
 8006a24:	0018      	movs	r0, r3
 8006a26:	46bd      	mov	sp, r7
 8006a28:	b005      	add	sp, #20
 8006a2a:	bd90      	pop	{r4, r7, pc}
 8006a2c:	fffff0fe 	.word	0xfffff0fe

08006a30 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006a3e:	0018      	movs	r0, r3
 8006a40:	46bd      	mov	sp, r7
 8006a42:	b002      	add	sp, #8
 8006a44:	bd80      	pop	{r7, pc}
	...

08006a48 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2250      	movs	r2, #80	; 0x50
 8006a56:	5c9b      	ldrb	r3, [r3, r2]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d101      	bne.n	8006a60 <HAL_ADC_ConfigChannel+0x18>
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	e085      	b.n	8006b6c <HAL_ADC_ConfigChannel+0x124>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2250      	movs	r2, #80	; 0x50
 8006a64:	2101      	movs	r1, #1
 8006a66:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	2204      	movs	r2, #4
 8006a70:	4013      	ands	r3, r2
 8006a72:	d00b      	beq.n	8006a8c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a78:	2220      	movs	r2, #32
 8006a7a:	431a      	orrs	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2250      	movs	r2, #80	; 0x50
 8006a84:	2100      	movs	r1, #0
 8006a86:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e06f      	b.n	8006b6c <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	4a38      	ldr	r2, [pc, #224]	; (8006b74 <HAL_ADC_ConfigChannel+0x12c>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d035      	beq.n	8006b02 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	035b      	lsls	r3, r3, #13
 8006aa2:	0b5a      	lsrs	r2, r3, #13
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	430a      	orrs	r2, r1
 8006aaa:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	2380      	movs	r3, #128	; 0x80
 8006ab2:	02db      	lsls	r3, r3, #11
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	d009      	beq.n	8006acc <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8006ab8:	4b2f      	ldr	r3, [pc, #188]	; (8006b78 <HAL_ADC_ConfigChannel+0x130>)
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	4b2e      	ldr	r3, [pc, #184]	; (8006b78 <HAL_ADC_ConfigChannel+0x130>)
 8006abe:	2180      	movs	r1, #128	; 0x80
 8006ac0:	0409      	lsls	r1, r1, #16
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8006ac6:	200a      	movs	r0, #10
 8006ac8:	f000 f964 	bl	8006d94 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	2380      	movs	r3, #128	; 0x80
 8006ad2:	029b      	lsls	r3, r3, #10
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	d006      	beq.n	8006ae6 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8006ad8:	4b27      	ldr	r3, [pc, #156]	; (8006b78 <HAL_ADC_ConfigChannel+0x130>)
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	4b26      	ldr	r3, [pc, #152]	; (8006b78 <HAL_ADC_ConfigChannel+0x130>)
 8006ade:	2180      	movs	r1, #128	; 0x80
 8006ae0:	03c9      	lsls	r1, r1, #15
 8006ae2:	430a      	orrs	r2, r1
 8006ae4:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	2380      	movs	r3, #128	; 0x80
 8006aec:	025b      	lsls	r3, r3, #9
 8006aee:	4013      	ands	r3, r2
 8006af0:	d037      	beq.n	8006b62 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8006af2:	4b21      	ldr	r3, [pc, #132]	; (8006b78 <HAL_ADC_ConfigChannel+0x130>)
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	4b20      	ldr	r3, [pc, #128]	; (8006b78 <HAL_ADC_ConfigChannel+0x130>)
 8006af8:	2180      	movs	r1, #128	; 0x80
 8006afa:	0449      	lsls	r1, r1, #17
 8006afc:	430a      	orrs	r2, r1
 8006afe:	601a      	str	r2, [r3, #0]
 8006b00:	e02f      	b.n	8006b62 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	035b      	lsls	r3, r3, #13
 8006b0e:	0b5b      	lsrs	r3, r3, #13
 8006b10:	43d9      	mvns	r1, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	400a      	ands	r2, r1
 8006b18:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	2380      	movs	r3, #128	; 0x80
 8006b20:	02db      	lsls	r3, r3, #11
 8006b22:	4013      	ands	r3, r2
 8006b24:	d005      	beq.n	8006b32 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8006b26:	4b14      	ldr	r3, [pc, #80]	; (8006b78 <HAL_ADC_ConfigChannel+0x130>)
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	4b13      	ldr	r3, [pc, #76]	; (8006b78 <HAL_ADC_ConfigChannel+0x130>)
 8006b2c:	4913      	ldr	r1, [pc, #76]	; (8006b7c <HAL_ADC_ConfigChannel+0x134>)
 8006b2e:	400a      	ands	r2, r1
 8006b30:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	2380      	movs	r3, #128	; 0x80
 8006b38:	029b      	lsls	r3, r3, #10
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	d005      	beq.n	8006b4a <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8006b3e:	4b0e      	ldr	r3, [pc, #56]	; (8006b78 <HAL_ADC_ConfigChannel+0x130>)
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	4b0d      	ldr	r3, [pc, #52]	; (8006b78 <HAL_ADC_ConfigChannel+0x130>)
 8006b44:	490e      	ldr	r1, [pc, #56]	; (8006b80 <HAL_ADC_ConfigChannel+0x138>)
 8006b46:	400a      	ands	r2, r1
 8006b48:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	2380      	movs	r3, #128	; 0x80
 8006b50:	025b      	lsls	r3, r3, #9
 8006b52:	4013      	ands	r3, r2
 8006b54:	d005      	beq.n	8006b62 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8006b56:	4b08      	ldr	r3, [pc, #32]	; (8006b78 <HAL_ADC_ConfigChannel+0x130>)
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	4b07      	ldr	r3, [pc, #28]	; (8006b78 <HAL_ADC_ConfigChannel+0x130>)
 8006b5c:	4909      	ldr	r1, [pc, #36]	; (8006b84 <HAL_ADC_ConfigChannel+0x13c>)
 8006b5e:	400a      	ands	r2, r1
 8006b60:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2250      	movs	r2, #80	; 0x50
 8006b66:	2100      	movs	r1, #0
 8006b68:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	0018      	movs	r0, r3
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	b002      	add	sp, #8
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	00001001 	.word	0x00001001
 8006b78:	40012708 	.word	0x40012708
 8006b7c:	ff7fffff 	.word	0xff7fffff
 8006b80:	ffbfffff 	.word	0xffbfffff
 8006b84:	feffffff 	.word	0xfeffffff

08006b88 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b90:	2300      	movs	r3, #0
 8006b92:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	2203      	movs	r2, #3
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d108      	bne.n	8006bb4 <ADC_Enable+0x2c>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	4013      	ands	r3, r2
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d101      	bne.n	8006bb4 <ADC_Enable+0x2c>
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e000      	b.n	8006bb6 <ADC_Enable+0x2e>
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d13f      	bne.n	8006c3a <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	4a20      	ldr	r2, [pc, #128]	; (8006c44 <ADC_Enable+0xbc>)
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	d00d      	beq.n	8006be2 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bca:	2210      	movs	r2, #16
 8006bcc:	431a      	orrs	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	431a      	orrs	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e02c      	b.n	8006c3c <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	689a      	ldr	r2, [r3, #8]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2101      	movs	r1, #1
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8006bf2:	2001      	movs	r0, #1
 8006bf4:	f000 f8ce 	bl	8006d94 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8006bf8:	f7ff fc36 	bl	8006468 <HAL_GetTick>
 8006bfc:	0003      	movs	r3, r0
 8006bfe:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006c00:	e014      	b.n	8006c2c <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006c02:	f7ff fc31 	bl	8006468 <HAL_GetTick>
 8006c06:	0002      	movs	r2, r0
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	2b0a      	cmp	r3, #10
 8006c0e:	d90d      	bls.n	8006c2c <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c14:	2210      	movs	r2, #16
 8006c16:	431a      	orrs	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c20:	2201      	movs	r2, #1
 8006c22:	431a      	orrs	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e007      	b.n	8006c3c <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2201      	movs	r2, #1
 8006c34:	4013      	ands	r3, r2
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d1e3      	bne.n	8006c02 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	0018      	movs	r0, r3
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	b004      	add	sp, #16
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	80000017 	.word	0x80000017

08006c48 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c50:	2300      	movs	r3, #0
 8006c52:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	2203      	movs	r2, #3
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d108      	bne.n	8006c74 <ADC_Disable+0x2c>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d101      	bne.n	8006c74 <ADC_Disable+0x2c>
 8006c70:	2301      	movs	r3, #1
 8006c72:	e000      	b.n	8006c76 <ADC_Disable+0x2e>
 8006c74:	2300      	movs	r3, #0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d041      	beq.n	8006cfe <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	2205      	movs	r2, #5
 8006c82:	4013      	ands	r3, r2
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d110      	bne.n	8006caa <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	689a      	ldr	r2, [r3, #8]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2102      	movs	r1, #2
 8006c94:	430a      	orrs	r2, r1
 8006c96:	609a      	str	r2, [r3, #8]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2203      	movs	r2, #3
 8006c9e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006ca0:	f7ff fbe2 	bl	8006468 <HAL_GetTick>
 8006ca4:	0003      	movs	r3, r0
 8006ca6:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006ca8:	e022      	b.n	8006cf0 <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cae:	2210      	movs	r2, #16
 8006cb0:	431a      	orrs	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cba:	2201      	movs	r2, #1
 8006cbc:	431a      	orrs	r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e01c      	b.n	8006d00 <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006cc6:	f7ff fbcf 	bl	8006468 <HAL_GetTick>
 8006cca:	0002      	movs	r2, r0
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	2b0a      	cmp	r3, #10
 8006cd2:	d90d      	bls.n	8006cf0 <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cd8:	2210      	movs	r2, #16
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	431a      	orrs	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e007      	b.n	8006d00 <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d0e3      	beq.n	8006cc6 <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	0018      	movs	r0, r3
 8006d02:	46bd      	mov	sp, r7
 8006d04:	b004      	add	sp, #16
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d10:	2300      	movs	r3, #0
 8006d12:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	2204      	movs	r2, #4
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	d034      	beq.n	8006d8a <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	2204      	movs	r2, #4
 8006d28:	4013      	ands	r3, r2
 8006d2a:	2b04      	cmp	r3, #4
 8006d2c:	d10d      	bne.n	8006d4a <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	2202      	movs	r2, #2
 8006d36:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8006d38:	d107      	bne.n	8006d4a <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	689a      	ldr	r2, [r3, #8]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2110      	movs	r1, #16
 8006d46:	430a      	orrs	r2, r1
 8006d48:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006d4a:	f7ff fb8d 	bl	8006468 <HAL_GetTick>
 8006d4e:	0003      	movs	r3, r0
 8006d50:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8006d52:	e014      	b.n	8006d7e <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006d54:	f7ff fb88 	bl	8006468 <HAL_GetTick>
 8006d58:	0002      	movs	r2, r0
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	2b0a      	cmp	r3, #10
 8006d60:	d90d      	bls.n	8006d7e <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d66:	2210      	movs	r2, #16
 8006d68:	431a      	orrs	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d72:	2201      	movs	r2, #1
 8006d74:	431a      	orrs	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e006      	b.n	8006d8c <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	2204      	movs	r2, #4
 8006d86:	4013      	ands	r3, r2
 8006d88:	d1e4      	bne.n	8006d54 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	0018      	movs	r0, r3
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	b004      	add	sp, #16
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8006d9c:	4b0a      	ldr	r3, [pc, #40]	; (8006dc8 <ADC_DelayMicroSecond+0x34>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	490a      	ldr	r1, [pc, #40]	; (8006dcc <ADC_DelayMicroSecond+0x38>)
 8006da2:	0018      	movs	r0, r3
 8006da4:	f7f9 f9b8 	bl	8000118 <__udivsi3>
 8006da8:	0003      	movs	r3, r0
 8006daa:	001a      	movs	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4353      	muls	r3, r2
 8006db0:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8006db2:	e002      	b.n	8006dba <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	3b01      	subs	r3, #1
 8006db8:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1f9      	bne.n	8006db4 <ADC_DelayMicroSecond+0x20>
  } 
}
 8006dc0:	46c0      	nop			; (mov r8, r8)
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	b004      	add	sp, #16
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	20000010 	.word	0x20000010
 8006dcc:	000f4240 	.word	0x000f4240

08006dd0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	0002      	movs	r2, r0
 8006dd8:	1dfb      	adds	r3, r7, #7
 8006dda:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006ddc:	1dfb      	adds	r3, r7, #7
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	001a      	movs	r2, r3
 8006de2:	231f      	movs	r3, #31
 8006de4:	401a      	ands	r2, r3
 8006de6:	4b04      	ldr	r3, [pc, #16]	; (8006df8 <NVIC_EnableIRQ+0x28>)
 8006de8:	2101      	movs	r1, #1
 8006dea:	4091      	lsls	r1, r2
 8006dec:	000a      	movs	r2, r1
 8006dee:	601a      	str	r2, [r3, #0]
}
 8006df0:	46c0      	nop			; (mov r8, r8)
 8006df2:	46bd      	mov	sp, r7
 8006df4:	b002      	add	sp, #8
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	e000e100 	.word	0xe000e100

08006dfc <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	0002      	movs	r2, r0
 8006e04:	1dfb      	adds	r3, r7, #7
 8006e06:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006e08:	1dfb      	adds	r3, r7, #7
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	001a      	movs	r2, r3
 8006e0e:	231f      	movs	r3, #31
 8006e10:	4013      	ands	r3, r2
 8006e12:	4905      	ldr	r1, [pc, #20]	; (8006e28 <NVIC_DisableIRQ+0x2c>)
 8006e14:	2201      	movs	r2, #1
 8006e16:	409a      	lsls	r2, r3
 8006e18:	0013      	movs	r3, r2
 8006e1a:	2280      	movs	r2, #128	; 0x80
 8006e1c:	508b      	str	r3, [r1, r2]
}
 8006e1e:	46c0      	nop			; (mov r8, r8)
 8006e20:	46bd      	mov	sp, r7
 8006e22:	b002      	add	sp, #8
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	46c0      	nop			; (mov r8, r8)
 8006e28:	e000e100 	.word	0xe000e100

08006e2c <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	0002      	movs	r2, r0
 8006e34:	1dfb      	adds	r3, r7, #7
 8006e36:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006e38:	1dfb      	adds	r3, r7, #7
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	001a      	movs	r2, r3
 8006e3e:	231f      	movs	r3, #31
 8006e40:	4013      	ands	r3, r2
 8006e42:	4905      	ldr	r1, [pc, #20]	; (8006e58 <NVIC_ClearPendingIRQ+0x2c>)
 8006e44:	2201      	movs	r2, #1
 8006e46:	409a      	lsls	r2, r3
 8006e48:	23c0      	movs	r3, #192	; 0xc0
 8006e4a:	005b      	lsls	r3, r3, #1
 8006e4c:	50ca      	str	r2, [r1, r3]
}
 8006e4e:	46c0      	nop			; (mov r8, r8)
 8006e50:	46bd      	mov	sp, r7
 8006e52:	b002      	add	sp, #8
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	46c0      	nop			; (mov r8, r8)
 8006e58:	e000e100 	.word	0xe000e100

08006e5c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e5c:	b590      	push	{r4, r7, lr}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	0002      	movs	r2, r0
 8006e64:	6039      	str	r1, [r7, #0]
 8006e66:	1dfb      	adds	r3, r7, #7
 8006e68:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8006e6a:	1dfb      	adds	r3, r7, #7
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	2b7f      	cmp	r3, #127	; 0x7f
 8006e70:	d932      	bls.n	8006ed8 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006e72:	4a2f      	ldr	r2, [pc, #188]	; (8006f30 <NVIC_SetPriority+0xd4>)
 8006e74:	1dfb      	adds	r3, r7, #7
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	0019      	movs	r1, r3
 8006e7a:	230f      	movs	r3, #15
 8006e7c:	400b      	ands	r3, r1
 8006e7e:	3b08      	subs	r3, #8
 8006e80:	089b      	lsrs	r3, r3, #2
 8006e82:	3306      	adds	r3, #6
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	18d3      	adds	r3, r2, r3
 8006e88:	3304      	adds	r3, #4
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	1dfa      	adds	r2, r7, #7
 8006e8e:	7812      	ldrb	r2, [r2, #0]
 8006e90:	0011      	movs	r1, r2
 8006e92:	2203      	movs	r2, #3
 8006e94:	400a      	ands	r2, r1
 8006e96:	00d2      	lsls	r2, r2, #3
 8006e98:	21ff      	movs	r1, #255	; 0xff
 8006e9a:	4091      	lsls	r1, r2
 8006e9c:	000a      	movs	r2, r1
 8006e9e:	43d2      	mvns	r2, r2
 8006ea0:	401a      	ands	r2, r3
 8006ea2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	019b      	lsls	r3, r3, #6
 8006ea8:	22ff      	movs	r2, #255	; 0xff
 8006eaa:	401a      	ands	r2, r3
 8006eac:	1dfb      	adds	r3, r7, #7
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	0018      	movs	r0, r3
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	4003      	ands	r3, r0
 8006eb6:	00db      	lsls	r3, r3, #3
 8006eb8:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006eba:	481d      	ldr	r0, [pc, #116]	; (8006f30 <NVIC_SetPriority+0xd4>)
 8006ebc:	1dfb      	adds	r3, r7, #7
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	001c      	movs	r4, r3
 8006ec2:	230f      	movs	r3, #15
 8006ec4:	4023      	ands	r3, r4
 8006ec6:	3b08      	subs	r3, #8
 8006ec8:	089b      	lsrs	r3, r3, #2
 8006eca:	430a      	orrs	r2, r1
 8006ecc:	3306      	adds	r3, #6
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	18c3      	adds	r3, r0, r3
 8006ed2:	3304      	adds	r3, #4
 8006ed4:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006ed6:	e027      	b.n	8006f28 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006ed8:	4a16      	ldr	r2, [pc, #88]	; (8006f34 <NVIC_SetPriority+0xd8>)
 8006eda:	1dfb      	adds	r3, r7, #7
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	b25b      	sxtb	r3, r3
 8006ee0:	089b      	lsrs	r3, r3, #2
 8006ee2:	33c0      	adds	r3, #192	; 0xc0
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	589b      	ldr	r3, [r3, r2]
 8006ee8:	1dfa      	adds	r2, r7, #7
 8006eea:	7812      	ldrb	r2, [r2, #0]
 8006eec:	0011      	movs	r1, r2
 8006eee:	2203      	movs	r2, #3
 8006ef0:	400a      	ands	r2, r1
 8006ef2:	00d2      	lsls	r2, r2, #3
 8006ef4:	21ff      	movs	r1, #255	; 0xff
 8006ef6:	4091      	lsls	r1, r2
 8006ef8:	000a      	movs	r2, r1
 8006efa:	43d2      	mvns	r2, r2
 8006efc:	401a      	ands	r2, r3
 8006efe:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	019b      	lsls	r3, r3, #6
 8006f04:	22ff      	movs	r2, #255	; 0xff
 8006f06:	401a      	ands	r2, r3
 8006f08:	1dfb      	adds	r3, r7, #7
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	0018      	movs	r0, r3
 8006f0e:	2303      	movs	r3, #3
 8006f10:	4003      	ands	r3, r0
 8006f12:	00db      	lsls	r3, r3, #3
 8006f14:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006f16:	4807      	ldr	r0, [pc, #28]	; (8006f34 <NVIC_SetPriority+0xd8>)
 8006f18:	1dfb      	adds	r3, r7, #7
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	b25b      	sxtb	r3, r3
 8006f1e:	089b      	lsrs	r3, r3, #2
 8006f20:	430a      	orrs	r2, r1
 8006f22:	33c0      	adds	r3, #192	; 0xc0
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	501a      	str	r2, [r3, r0]
}
 8006f28:	46c0      	nop			; (mov r8, r8)
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	b003      	add	sp, #12
 8006f2e:	bd90      	pop	{r4, r7, pc}
 8006f30:	e000ed00 	.word	0xe000ed00
 8006f34:	e000e100 	.word	0xe000e100

08006f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	3b01      	subs	r3, #1
 8006f44:	4a0c      	ldr	r2, [pc, #48]	; (8006f78 <SysTick_Config+0x40>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d901      	bls.n	8006f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e010      	b.n	8006f70 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f4e:	4b0b      	ldr	r3, [pc, #44]	; (8006f7c <SysTick_Config+0x44>)
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	3a01      	subs	r2, #1
 8006f54:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f56:	2301      	movs	r3, #1
 8006f58:	425b      	negs	r3, r3
 8006f5a:	2103      	movs	r1, #3
 8006f5c:	0018      	movs	r0, r3
 8006f5e:	f7ff ff7d 	bl	8006e5c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f62:	4b06      	ldr	r3, [pc, #24]	; (8006f7c <SysTick_Config+0x44>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f68:	4b04      	ldr	r3, [pc, #16]	; (8006f7c <SysTick_Config+0x44>)
 8006f6a:	2207      	movs	r2, #7
 8006f6c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	0018      	movs	r0, r3
 8006f72:	46bd      	mov	sp, r7
 8006f74:	b002      	add	sp, #8
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	00ffffff 	.word	0x00ffffff
 8006f7c:	e000e010 	.word	0xe000e010

08006f80 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60b9      	str	r1, [r7, #8]
 8006f88:	607a      	str	r2, [r7, #4]
 8006f8a:	210f      	movs	r1, #15
 8006f8c:	187b      	adds	r3, r7, r1
 8006f8e:	1c02      	adds	r2, r0, #0
 8006f90:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	187b      	adds	r3, r7, r1
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	b25b      	sxtb	r3, r3
 8006f9a:	0011      	movs	r1, r2
 8006f9c:	0018      	movs	r0, r3
 8006f9e:	f7ff ff5d 	bl	8006e5c <NVIC_SetPriority>
}
 8006fa2:	46c0      	nop			; (mov r8, r8)
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	b004      	add	sp, #16
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b082      	sub	sp, #8
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	0002      	movs	r2, r0
 8006fb2:	1dfb      	adds	r3, r7, #7
 8006fb4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006fb6:	1dfb      	adds	r3, r7, #7
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	b25b      	sxtb	r3, r3
 8006fbc:	0018      	movs	r0, r3
 8006fbe:	f7ff ff07 	bl	8006dd0 <NVIC_EnableIRQ>
}
 8006fc2:	46c0      	nop			; (mov r8, r8)
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	b002      	add	sp, #8
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b082      	sub	sp, #8
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	0002      	movs	r2, r0
 8006fd2:	1dfb      	adds	r3, r7, #7
 8006fd4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006fd6:	1dfb      	adds	r3, r7, #7
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	b25b      	sxtb	r3, r3
 8006fdc:	0018      	movs	r0, r3
 8006fde:	f7ff ff0d 	bl	8006dfc <NVIC_DisableIRQ>
}
 8006fe2:	46c0      	nop			; (mov r8, r8)
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	b002      	add	sp, #8
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b082      	sub	sp, #8
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	0018      	movs	r0, r3
 8006ff6:	f7ff ff9f 	bl	8006f38 <SysTick_Config>
 8006ffa:	0003      	movs	r3, r0
}
 8006ffc:	0018      	movs	r0, r3
 8006ffe:	46bd      	mov	sp, r7
 8007000:	b002      	add	sp, #8
 8007002:	bd80      	pop	{r7, pc}

08007004 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	0002      	movs	r2, r0
 800700c:	1dfb      	adds	r3, r7, #7
 800700e:	701a      	strb	r2, [r3, #0]
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8007010:	1dfb      	adds	r3, r7, #7
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	b25b      	sxtb	r3, r3
 8007016:	0018      	movs	r0, r3
 8007018:	f7ff ff08 	bl	8006e2c <NVIC_ClearPendingIRQ>
}
 800701c:	46c0      	nop			; (mov r8, r8)
 800701e:	46bd      	mov	sp, r7
 8007020:	b002      	add	sp, #8
 8007022:	bd80      	pop	{r7, pc}

08007024 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d101      	bne.n	8007036 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e061      	b.n	80070fa <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a32      	ldr	r2, [pc, #200]	; (8007104 <HAL_DMA_Init+0xe0>)
 800703c:	4694      	mov	ip, r2
 800703e:	4463      	add	r3, ip
 8007040:	2114      	movs	r1, #20
 8007042:	0018      	movs	r0, r3
 8007044:	f7f9 f868 	bl	8000118 <__udivsi3>
 8007048:	0003      	movs	r3, r0
 800704a:	009a      	lsls	r2, r3, #2
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a2d      	ldr	r2, [pc, #180]	; (8007108 <HAL_DMA_Init+0xe4>)
 8007054:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2225      	movs	r2, #37	; 0x25
 800705a:	2102      	movs	r1, #2
 800705c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	4a28      	ldr	r2, [pc, #160]	; (800710c <HAL_DMA_Init+0xe8>)
 800706a:	4013      	ands	r3, r2
 800706c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007076:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007082:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	699b      	ldr	r3, [r3, #24]
 8007088:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800708e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a1b      	ldr	r3, [r3, #32]
 8007094:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	4313      	orrs	r3, r2
 800709a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	689a      	ldr	r2, [r3, #8]
 80070a8:	2380      	movs	r3, #128	; 0x80
 80070aa:	01db      	lsls	r3, r3, #7
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d018      	beq.n	80070e2 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80070b0:	4b17      	ldr	r3, [pc, #92]	; (8007110 <HAL_DMA_Init+0xec>)
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070b8:	211c      	movs	r1, #28
 80070ba:	400b      	ands	r3, r1
 80070bc:	210f      	movs	r1, #15
 80070be:	4099      	lsls	r1, r3
 80070c0:	000b      	movs	r3, r1
 80070c2:	43d9      	mvns	r1, r3
 80070c4:	4b12      	ldr	r3, [pc, #72]	; (8007110 <HAL_DMA_Init+0xec>)
 80070c6:	400a      	ands	r2, r1
 80070c8:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80070ca:	4b11      	ldr	r3, [pc, #68]	; (8007110 <HAL_DMA_Init+0xec>)
 80070cc:	6819      	ldr	r1, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070d6:	201c      	movs	r0, #28
 80070d8:	4003      	ands	r3, r0
 80070da:	409a      	lsls	r2, r3
 80070dc:	4b0c      	ldr	r3, [pc, #48]	; (8007110 <HAL_DMA_Init+0xec>)
 80070de:	430a      	orrs	r2, r1
 80070e0:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2225      	movs	r2, #37	; 0x25
 80070ec:	2101      	movs	r1, #1
 80070ee:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2224      	movs	r2, #36	; 0x24
 80070f4:	2100      	movs	r1, #0
 80070f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	0018      	movs	r0, r3
 80070fc:	46bd      	mov	sp, r7
 80070fe:	b004      	add	sp, #16
 8007100:	bd80      	pop	{r7, pc}
 8007102:	46c0      	nop			; (mov r8, r8)
 8007104:	bffdfff8 	.word	0xbffdfff8
 8007108:	40020000 	.word	0x40020000
 800710c:	ffff800f 	.word	0xffff800f
 8007110:	400200a8 	.word	0x400200a8

08007114 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800711c:	230f      	movs	r3, #15
 800711e:	18fb      	adds	r3, r7, r3
 8007120:	2200      	movs	r2, #0
 8007122:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2225      	movs	r2, #37	; 0x25
 8007128:	5c9b      	ldrb	r3, [r3, r2]
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b02      	cmp	r3, #2
 800712e:	d007      	beq.n	8007140 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2204      	movs	r2, #4
 8007134:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007136:	230f      	movs	r3, #15
 8007138:	18fb      	adds	r3, r7, r3
 800713a:	2201      	movs	r2, #1
 800713c:	701a      	strb	r2, [r3, #0]
 800713e:	e02a      	b.n	8007196 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	210e      	movs	r1, #14
 800714c:	438a      	bics	r2, r1
 800714e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2101      	movs	r1, #1
 800715c:	438a      	bics	r2, r1
 800715e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007164:	221c      	movs	r2, #28
 8007166:	401a      	ands	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716c:	2101      	movs	r1, #1
 800716e:	4091      	lsls	r1, r2
 8007170:	000a      	movs	r2, r1
 8007172:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2225      	movs	r2, #37	; 0x25
 8007178:	2101      	movs	r1, #1
 800717a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2224      	movs	r2, #36	; 0x24
 8007180:	2100      	movs	r1, #0
 8007182:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007188:	2b00      	cmp	r3, #0
 800718a:	d004      	beq.n	8007196 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	0010      	movs	r0, r2
 8007194:	4798      	blx	r3
    }
  }
  return status;
 8007196:	230f      	movs	r3, #15
 8007198:	18fb      	adds	r3, r7, r3
 800719a:	781b      	ldrb	r3, [r3, #0]
}
 800719c:	0018      	movs	r0, r3
 800719e:	46bd      	mov	sp, r7
 80071a0:	b004      	add	sp, #16
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c0:	221c      	movs	r2, #28
 80071c2:	4013      	ands	r3, r2
 80071c4:	2204      	movs	r2, #4
 80071c6:	409a      	lsls	r2, r3
 80071c8:	0013      	movs	r3, r2
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	4013      	ands	r3, r2
 80071ce:	d026      	beq.n	800721e <HAL_DMA_IRQHandler+0x7a>
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	2204      	movs	r2, #4
 80071d4:	4013      	ands	r3, r2
 80071d6:	d022      	beq.n	800721e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2220      	movs	r2, #32
 80071e0:	4013      	ands	r3, r2
 80071e2:	d107      	bne.n	80071f4 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2104      	movs	r1, #4
 80071f0:	438a      	bics	r2, r1
 80071f2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f8:	221c      	movs	r2, #28
 80071fa:	401a      	ands	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007200:	2104      	movs	r1, #4
 8007202:	4091      	lsls	r1, r2
 8007204:	000a      	movs	r2, r1
 8007206:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720c:	2b00      	cmp	r3, #0
 800720e:	d100      	bne.n	8007212 <HAL_DMA_IRQHandler+0x6e>
 8007210:	e071      	b.n	80072f6 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	0010      	movs	r0, r2
 800721a:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800721c:	e06b      	b.n	80072f6 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007222:	221c      	movs	r2, #28
 8007224:	4013      	ands	r3, r2
 8007226:	2202      	movs	r2, #2
 8007228:	409a      	lsls	r2, r3
 800722a:	0013      	movs	r3, r2
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	4013      	ands	r3, r2
 8007230:	d02d      	beq.n	800728e <HAL_DMA_IRQHandler+0xea>
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	2202      	movs	r2, #2
 8007236:	4013      	ands	r3, r2
 8007238:	d029      	beq.n	800728e <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2220      	movs	r2, #32
 8007242:	4013      	ands	r3, r2
 8007244:	d10b      	bne.n	800725e <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	210a      	movs	r1, #10
 8007252:	438a      	bics	r2, r1
 8007254:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2225      	movs	r2, #37	; 0x25
 800725a:	2101      	movs	r1, #1
 800725c:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007262:	221c      	movs	r2, #28
 8007264:	401a      	ands	r2, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726a:	2102      	movs	r1, #2
 800726c:	4091      	lsls	r1, r2
 800726e:	000a      	movs	r2, r1
 8007270:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2224      	movs	r2, #36	; 0x24
 8007276:	2100      	movs	r1, #0
 8007278:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727e:	2b00      	cmp	r3, #0
 8007280:	d039      	beq.n	80072f6 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	0010      	movs	r0, r2
 800728a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800728c:	e033      	b.n	80072f6 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007292:	221c      	movs	r2, #28
 8007294:	4013      	ands	r3, r2
 8007296:	2208      	movs	r2, #8
 8007298:	409a      	lsls	r2, r3
 800729a:	0013      	movs	r3, r2
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	4013      	ands	r3, r2
 80072a0:	d02a      	beq.n	80072f8 <HAL_DMA_IRQHandler+0x154>
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	2208      	movs	r2, #8
 80072a6:	4013      	ands	r3, r2
 80072a8:	d026      	beq.n	80072f8 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	210e      	movs	r1, #14
 80072b6:	438a      	bics	r2, r1
 80072b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072be:	221c      	movs	r2, #28
 80072c0:	401a      	ands	r2, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c6:	2101      	movs	r1, #1
 80072c8:	4091      	lsls	r1, r2
 80072ca:	000a      	movs	r2, r1
 80072cc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2225      	movs	r2, #37	; 0x25
 80072d8:	2101      	movs	r1, #1
 80072da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2224      	movs	r2, #36	; 0x24
 80072e0:	2100      	movs	r1, #0
 80072e2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d005      	beq.n	80072f8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	0010      	movs	r0, r2
 80072f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80072f6:	46c0      	nop			; (mov r8, r8)
 80072f8:	46c0      	nop			; (mov r8, r8)
}
 80072fa:	46bd      	mov	sp, r7
 80072fc:	b004      	add	sp, #16
 80072fe:	bd80      	pop	{r7, pc}

08007300 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800730a:	2300      	movs	r3, #0
 800730c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800730e:	2300      	movs	r3, #0
 8007310:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8007312:	2300      	movs	r3, #0
 8007314:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8007316:	e155      	b.n	80075c4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2101      	movs	r1, #1
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	4091      	lsls	r1, r2
 8007322:	000a      	movs	r2, r1
 8007324:	4013      	ands	r3, r2
 8007326:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d100      	bne.n	8007330 <HAL_GPIO_Init+0x30>
 800732e:	e146      	b.n	80075be <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	2b02      	cmp	r3, #2
 8007336:	d003      	beq.n	8007340 <HAL_GPIO_Init+0x40>
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	2b12      	cmp	r3, #18
 800733e:	d123      	bne.n	8007388 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	08da      	lsrs	r2, r3, #3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	3208      	adds	r2, #8
 8007348:	0092      	lsls	r2, r2, #2
 800734a:	58d3      	ldr	r3, [r2, r3]
 800734c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	2207      	movs	r2, #7
 8007352:	4013      	ands	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	220f      	movs	r2, #15
 8007358:	409a      	lsls	r2, r3
 800735a:	0013      	movs	r3, r2
 800735c:	43da      	mvns	r2, r3
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	4013      	ands	r3, r2
 8007362:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	691a      	ldr	r2, [r3, #16]
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	2107      	movs	r1, #7
 800736c:	400b      	ands	r3, r1
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	409a      	lsls	r2, r3
 8007372:	0013      	movs	r3, r2
 8007374:	693a      	ldr	r2, [r7, #16]
 8007376:	4313      	orrs	r3, r2
 8007378:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	08da      	lsrs	r2, r3, #3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	3208      	adds	r2, #8
 8007382:	0092      	lsls	r2, r2, #2
 8007384:	6939      	ldr	r1, [r7, #16]
 8007386:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	2b01      	cmp	r3, #1
 800738e:	d00b      	beq.n	80073a8 <HAL_GPIO_Init+0xa8>
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	2b02      	cmp	r3, #2
 8007396:	d007      	beq.n	80073a8 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800739c:	2b11      	cmp	r3, #17
 800739e:	d003      	beq.n	80073a8 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	2b12      	cmp	r3, #18
 80073a6:	d130      	bne.n	800740a <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	005b      	lsls	r3, r3, #1
 80073b2:	2203      	movs	r2, #3
 80073b4:	409a      	lsls	r2, r3
 80073b6:	0013      	movs	r3, r2
 80073b8:	43da      	mvns	r2, r3
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	4013      	ands	r3, r2
 80073be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	68da      	ldr	r2, [r3, #12]
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	005b      	lsls	r3, r3, #1
 80073c8:	409a      	lsls	r2, r3
 80073ca:	0013      	movs	r3, r2
 80073cc:	693a      	ldr	r2, [r7, #16]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80073de:	2201      	movs	r2, #1
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	409a      	lsls	r2, r3
 80073e4:	0013      	movs	r3, r2
 80073e6:	43da      	mvns	r2, r3
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	4013      	ands	r3, r2
 80073ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	091b      	lsrs	r3, r3, #4
 80073f4:	2201      	movs	r2, #1
 80073f6:	401a      	ands	r2, r3
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	409a      	lsls	r2, r3
 80073fc:	0013      	movs	r3, r2
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	4313      	orrs	r3, r2
 8007402:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	693a      	ldr	r2, [r7, #16]
 8007408:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	005b      	lsls	r3, r3, #1
 8007414:	2203      	movs	r2, #3
 8007416:	409a      	lsls	r2, r3
 8007418:	0013      	movs	r3, r2
 800741a:	43da      	mvns	r2, r3
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	4013      	ands	r3, r2
 8007420:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	2203      	movs	r2, #3
 8007428:	401a      	ands	r2, r3
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	005b      	lsls	r3, r3, #1
 800742e:	409a      	lsls	r2, r3
 8007430:	0013      	movs	r3, r2
 8007432:	693a      	ldr	r2, [r7, #16]
 8007434:	4313      	orrs	r3, r2
 8007436:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	693a      	ldr	r2, [r7, #16]
 800743c:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	005b      	lsls	r3, r3, #1
 8007448:	2203      	movs	r2, #3
 800744a:	409a      	lsls	r2, r3
 800744c:	0013      	movs	r3, r2
 800744e:	43da      	mvns	r2, r3
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	4013      	ands	r3, r2
 8007454:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	689a      	ldr	r2, [r3, #8]
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	005b      	lsls	r3, r3, #1
 800745e:	409a      	lsls	r2, r3
 8007460:	0013      	movs	r3, r2
 8007462:	693a      	ldr	r2, [r7, #16]
 8007464:	4313      	orrs	r3, r2
 8007466:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	693a      	ldr	r2, [r7, #16]
 800746c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	685a      	ldr	r2, [r3, #4]
 8007472:	2380      	movs	r3, #128	; 0x80
 8007474:	055b      	lsls	r3, r3, #21
 8007476:	4013      	ands	r3, r2
 8007478:	d100      	bne.n	800747c <HAL_GPIO_Init+0x17c>
 800747a:	e0a0      	b.n	80075be <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800747c:	4b57      	ldr	r3, [pc, #348]	; (80075dc <HAL_GPIO_Init+0x2dc>)
 800747e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007480:	4b56      	ldr	r3, [pc, #344]	; (80075dc <HAL_GPIO_Init+0x2dc>)
 8007482:	2101      	movs	r1, #1
 8007484:	430a      	orrs	r2, r1
 8007486:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8007488:	4a55      	ldr	r2, [pc, #340]	; (80075e0 <HAL_GPIO_Init+0x2e0>)
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	089b      	lsrs	r3, r3, #2
 800748e:	3302      	adds	r3, #2
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	589b      	ldr	r3, [r3, r2]
 8007494:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	2203      	movs	r2, #3
 800749a:	4013      	ands	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	220f      	movs	r2, #15
 80074a0:	409a      	lsls	r2, r3
 80074a2:	0013      	movs	r3, r2
 80074a4:	43da      	mvns	r2, r3
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	4013      	ands	r3, r2
 80074aa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	23a0      	movs	r3, #160	; 0xa0
 80074b0:	05db      	lsls	r3, r3, #23
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d01f      	beq.n	80074f6 <HAL_GPIO_Init+0x1f6>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a4a      	ldr	r2, [pc, #296]	; (80075e4 <HAL_GPIO_Init+0x2e4>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d019      	beq.n	80074f2 <HAL_GPIO_Init+0x1f2>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a49      	ldr	r2, [pc, #292]	; (80075e8 <HAL_GPIO_Init+0x2e8>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d013      	beq.n	80074ee <HAL_GPIO_Init+0x1ee>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a48      	ldr	r2, [pc, #288]	; (80075ec <HAL_GPIO_Init+0x2ec>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d00d      	beq.n	80074ea <HAL_GPIO_Init+0x1ea>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a47      	ldr	r2, [pc, #284]	; (80075f0 <HAL_GPIO_Init+0x2f0>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d007      	beq.n	80074e6 <HAL_GPIO_Init+0x1e6>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a46      	ldr	r2, [pc, #280]	; (80075f4 <HAL_GPIO_Init+0x2f4>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d101      	bne.n	80074e2 <HAL_GPIO_Init+0x1e2>
 80074de:	2305      	movs	r3, #5
 80074e0:	e00a      	b.n	80074f8 <HAL_GPIO_Init+0x1f8>
 80074e2:	2306      	movs	r3, #6
 80074e4:	e008      	b.n	80074f8 <HAL_GPIO_Init+0x1f8>
 80074e6:	2304      	movs	r3, #4
 80074e8:	e006      	b.n	80074f8 <HAL_GPIO_Init+0x1f8>
 80074ea:	2303      	movs	r3, #3
 80074ec:	e004      	b.n	80074f8 <HAL_GPIO_Init+0x1f8>
 80074ee:	2302      	movs	r3, #2
 80074f0:	e002      	b.n	80074f8 <HAL_GPIO_Init+0x1f8>
 80074f2:	2301      	movs	r3, #1
 80074f4:	e000      	b.n	80074f8 <HAL_GPIO_Init+0x1f8>
 80074f6:	2300      	movs	r3, #0
 80074f8:	697a      	ldr	r2, [r7, #20]
 80074fa:	2103      	movs	r1, #3
 80074fc:	400a      	ands	r2, r1
 80074fe:	0092      	lsls	r2, r2, #2
 8007500:	4093      	lsls	r3, r2
 8007502:	693a      	ldr	r2, [r7, #16]
 8007504:	4313      	orrs	r3, r2
 8007506:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007508:	4935      	ldr	r1, [pc, #212]	; (80075e0 <HAL_GPIO_Init+0x2e0>)
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	089b      	lsrs	r3, r3, #2
 800750e:	3302      	adds	r3, #2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007516:	4b38      	ldr	r3, [pc, #224]	; (80075f8 <HAL_GPIO_Init+0x2f8>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	43da      	mvns	r2, r3
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	4013      	ands	r3, r2
 8007524:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	685a      	ldr	r2, [r3, #4]
 800752a:	2380      	movs	r3, #128	; 0x80
 800752c:	025b      	lsls	r3, r3, #9
 800752e:	4013      	ands	r3, r2
 8007530:	d003      	beq.n	800753a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8007532:	693a      	ldr	r2, [r7, #16]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	4313      	orrs	r3, r2
 8007538:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800753a:	4b2f      	ldr	r3, [pc, #188]	; (80075f8 <HAL_GPIO_Init+0x2f8>)
 800753c:	693a      	ldr	r2, [r7, #16]
 800753e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8007540:	4b2d      	ldr	r3, [pc, #180]	; (80075f8 <HAL_GPIO_Init+0x2f8>)
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	43da      	mvns	r2, r3
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	4013      	ands	r3, r2
 800754e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	2380      	movs	r3, #128	; 0x80
 8007556:	029b      	lsls	r3, r3, #10
 8007558:	4013      	ands	r3, r2
 800755a:	d003      	beq.n	8007564 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	4313      	orrs	r3, r2
 8007562:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007564:	4b24      	ldr	r3, [pc, #144]	; (80075f8 <HAL_GPIO_Init+0x2f8>)
 8007566:	693a      	ldr	r2, [r7, #16]
 8007568:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800756a:	4b23      	ldr	r3, [pc, #140]	; (80075f8 <HAL_GPIO_Init+0x2f8>)
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	43da      	mvns	r2, r3
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	4013      	ands	r3, r2
 8007578:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	685a      	ldr	r2, [r3, #4]
 800757e:	2380      	movs	r3, #128	; 0x80
 8007580:	035b      	lsls	r3, r3, #13
 8007582:	4013      	ands	r3, r2
 8007584:	d003      	beq.n	800758e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8007586:	693a      	ldr	r2, [r7, #16]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	4313      	orrs	r3, r2
 800758c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800758e:	4b1a      	ldr	r3, [pc, #104]	; (80075f8 <HAL_GPIO_Init+0x2f8>)
 8007590:	693a      	ldr	r2, [r7, #16]
 8007592:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8007594:	4b18      	ldr	r3, [pc, #96]	; (80075f8 <HAL_GPIO_Init+0x2f8>)
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	43da      	mvns	r2, r3
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	4013      	ands	r3, r2
 80075a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	685a      	ldr	r2, [r3, #4]
 80075a8:	2380      	movs	r3, #128	; 0x80
 80075aa:	039b      	lsls	r3, r3, #14
 80075ac:	4013      	ands	r3, r2
 80075ae:	d003      	beq.n	80075b8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80075b8:	4b0f      	ldr	r3, [pc, #60]	; (80075f8 <HAL_GPIO_Init+0x2f8>)
 80075ba:	693a      	ldr	r2, [r7, #16]
 80075bc:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	3301      	adds	r3, #1
 80075c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	40da      	lsrs	r2, r3
 80075cc:	1e13      	subs	r3, r2, #0
 80075ce:	d000      	beq.n	80075d2 <HAL_GPIO_Init+0x2d2>
 80075d0:	e6a2      	b.n	8007318 <HAL_GPIO_Init+0x18>
  }
}
 80075d2:	46c0      	nop			; (mov r8, r8)
 80075d4:	46bd      	mov	sp, r7
 80075d6:	b006      	add	sp, #24
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	46c0      	nop			; (mov r8, r8)
 80075dc:	40021000 	.word	0x40021000
 80075e0:	40010000 	.word	0x40010000
 80075e4:	50000400 	.word	0x50000400
 80075e8:	50000800 	.word	0x50000800
 80075ec:	50000c00 	.word	0x50000c00
 80075f0:	50001000 	.word	0x50001000
 80075f4:	50001c00 	.word	0x50001c00
 80075f8:	40010400 	.word	0x40010400

080075fc <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	000a      	movs	r2, r1
 8007606:	1cbb      	adds	r3, r7, #2
 8007608:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	1cba      	adds	r2, r7, #2
 8007610:	8812      	ldrh	r2, [r2, #0]
 8007612:	4013      	ands	r3, r2
 8007614:	d004      	beq.n	8007620 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8007616:	230f      	movs	r3, #15
 8007618:	18fb      	adds	r3, r7, r3
 800761a:	2201      	movs	r2, #1
 800761c:	701a      	strb	r2, [r3, #0]
 800761e:	e003      	b.n	8007628 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007620:	230f      	movs	r3, #15
 8007622:	18fb      	adds	r3, r7, r3
 8007624:	2200      	movs	r2, #0
 8007626:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8007628:	230f      	movs	r3, #15
 800762a:	18fb      	adds	r3, r7, r3
 800762c:	781b      	ldrb	r3, [r3, #0]
}
 800762e:	0018      	movs	r0, r3
 8007630:	46bd      	mov	sp, r7
 8007632:	b004      	add	sp, #16
 8007634:	bd80      	pop	{r7, pc}

08007636 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b082      	sub	sp, #8
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	0008      	movs	r0, r1
 8007640:	0011      	movs	r1, r2
 8007642:	1cbb      	adds	r3, r7, #2
 8007644:	1c02      	adds	r2, r0, #0
 8007646:	801a      	strh	r2, [r3, #0]
 8007648:	1c7b      	adds	r3, r7, #1
 800764a:	1c0a      	adds	r2, r1, #0
 800764c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 800764e:	1c7b      	adds	r3, r7, #1
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d004      	beq.n	8007660 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007656:	1cbb      	adds	r3, r7, #2
 8007658:	881a      	ldrh	r2, [r3, #0]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800765e:	e003      	b.n	8007668 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8007660:	1cbb      	adds	r3, r7, #2
 8007662:	881a      	ldrh	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007668:	46c0      	nop			; (mov r8, r8)
 800766a:	46bd      	mov	sp, r7
 800766c:	b002      	add	sp, #8
 800766e:	bd80      	pop	{r7, pc}

08007670 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	000a      	movs	r2, r1
 800767a:	1cbb      	adds	r3, r7, #2
 800767c:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	695a      	ldr	r2, [r3, #20]
 8007682:	1cbb      	adds	r3, r7, #2
 8007684:	881b      	ldrh	r3, [r3, #0]
 8007686:	405a      	eors	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	615a      	str	r2, [r3, #20]
}
 800768c:	46c0      	nop			; (mov r8, r8)
 800768e:	46bd      	mov	sp, r7
 8007690:	b002      	add	sp, #8
 8007692:	bd80      	pop	{r7, pc}

08007694 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	0002      	movs	r2, r0
 800769c:	1dbb      	adds	r3, r7, #6
 800769e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80076a0:	4b09      	ldr	r3, [pc, #36]	; (80076c8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80076a2:	695b      	ldr	r3, [r3, #20]
 80076a4:	1dba      	adds	r2, r7, #6
 80076a6:	8812      	ldrh	r2, [r2, #0]
 80076a8:	4013      	ands	r3, r2
 80076aa:	d008      	beq.n	80076be <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80076ac:	4b06      	ldr	r3, [pc, #24]	; (80076c8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80076ae:	1dba      	adds	r2, r7, #6
 80076b0:	8812      	ldrh	r2, [r2, #0]
 80076b2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80076b4:	1dbb      	adds	r3, r7, #6
 80076b6:	881b      	ldrh	r3, [r3, #0]
 80076b8:	0018      	movs	r0, r3
 80076ba:	f7fd f95d 	bl	8004978 <HAL_GPIO_EXTI_Callback>
  }
}
 80076be:	46c0      	nop			; (mov r8, r8)
 80076c0:	46bd      	mov	sp, r7
 80076c2:	b002      	add	sp, #8
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	46c0      	nop			; (mov r8, r8)
 80076c8:	40010400 	.word	0x40010400

080076cc <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d101      	bne.n	80076de <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e06c      	b.n	80077b8 <HAL_LPTIM_Init+0xec>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	222e      	movs	r2, #46	; 0x2e
 80076e2:	5c9b      	ldrb	r3, [r3, r2]
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d107      	bne.n	80076fa <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	222d      	movs	r2, #45	; 0x2d
 80076ee:	2100      	movs	r1, #0
 80076f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	0018      	movs	r0, r3
 80076f6:	f7fc fc6f 	bl	8003fd8 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	222e      	movs	r2, #46	; 0x2e
 80076fe:	2102      	movs	r1, #2
 8007700:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	2b01      	cmp	r3, #1
 8007710:	d005      	beq.n	800771e <HAL_LPTIM_Init+0x52>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007716:	2380      	movs	r3, #128	; 0x80
 8007718:	041b      	lsls	r3, r3, #16
 800771a:	429a      	cmp	r2, r3
 800771c:	d103      	bne.n	8007726 <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	221e      	movs	r2, #30
 8007722:	4393      	bics	r3, r2
 8007724:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	4a25      	ldr	r2, [pc, #148]	; (80077c0 <HAL_LPTIM_Init+0xf4>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d003      	beq.n	8007738 <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	4a24      	ldr	r2, [pc, #144]	; (80077c4 <HAL_LPTIM_Init+0xf8>)
 8007734:	4013      	ands	r3, r2
 8007736:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	4a23      	ldr	r2, [pc, #140]	; (80077c8 <HAL_LPTIM_Init+0xfc>)
 800773c:	4013      	ands	r3, r2
 800773e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007748:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800774e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8007754:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800775a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	4313      	orrs	r3, r2
 8007760:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d005      	beq.n	8007776 <HAL_LPTIM_Init+0xaa>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800776e:	2380      	movs	r3, #128	; 0x80
 8007770:	041b      	lsls	r3, r3, #16
 8007772:	429a      	cmp	r2, r3
 8007774:	d107      	bne.n	8007786 <HAL_LPTIM_Init+0xba>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800777e:	4313      	orrs	r3, r2
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	4313      	orrs	r3, r2
 8007784:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	4a0d      	ldr	r2, [pc, #52]	; (80077c0 <HAL_LPTIM_Init+0xf4>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d00a      	beq.n	80077a6 <HAL_LPTIM_Init+0xda>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007798:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800779e:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	222e      	movs	r2, #46	; 0x2e
 80077b2:	2101      	movs	r1, #1
 80077b4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	0018      	movs	r0, r3
 80077ba:	46bd      	mov	sp, r7
 80077bc:	b004      	add	sp, #16
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	0000ffff 	.word	0x0000ffff
 80077c4:	ffff1f3f 	.word	0xffff1f3f
 80077c8:	ff19f1f8 	.word	0xff19f1f8

080077cc <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2201      	movs	r2, #1
 80077dc:	4013      	ands	r3, r2
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d10e      	bne.n	8007800 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	2201      	movs	r2, #1
 80077ea:	4013      	ands	r3, r2
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d107      	bne.n	8007800 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2201      	movs	r2, #1
 80077f6:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	0018      	movs	r0, r3
 80077fc:	f000 f888 	bl	8007910 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2202      	movs	r2, #2
 8007808:	4013      	ands	r3, r2
 800780a:	2b02      	cmp	r3, #2
 800780c:	d10e      	bne.n	800782c <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	2202      	movs	r2, #2
 8007816:	4013      	ands	r3, r2
 8007818:	2b02      	cmp	r3, #2
 800781a:	d107      	bne.n	800782c <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2202      	movs	r2, #2
 8007822:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	0018      	movs	r0, r3
 8007828:	f000 f87a 	bl	8007920 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2204      	movs	r2, #4
 8007834:	4013      	ands	r3, r2
 8007836:	2b04      	cmp	r3, #4
 8007838:	d10e      	bne.n	8007858 <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	2204      	movs	r2, #4
 8007842:	4013      	ands	r3, r2
 8007844:	2b04      	cmp	r3, #4
 8007846:	d107      	bne.n	8007858 <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2204      	movs	r2, #4
 800784e:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	0018      	movs	r0, r3
 8007854:	f000 f86c 	bl	8007930 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2208      	movs	r2, #8
 8007860:	4013      	ands	r3, r2
 8007862:	2b08      	cmp	r3, #8
 8007864:	d10e      	bne.n	8007884 <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	2208      	movs	r2, #8
 800786e:	4013      	ands	r3, r2
 8007870:	2b08      	cmp	r3, #8
 8007872:	d107      	bne.n	8007884 <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2208      	movs	r2, #8
 800787a:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	0018      	movs	r0, r3
 8007880:	f000 f85e 	bl	8007940 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2210      	movs	r2, #16
 800788c:	4013      	ands	r3, r2
 800788e:	2b10      	cmp	r3, #16
 8007890:	d10e      	bne.n	80078b0 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	2210      	movs	r2, #16
 800789a:	4013      	ands	r3, r2
 800789c:	2b10      	cmp	r3, #16
 800789e:	d107      	bne.n	80078b0 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2210      	movs	r2, #16
 80078a6:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	0018      	movs	r0, r3
 80078ac:	f000 f850 	bl	8007950 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2220      	movs	r2, #32
 80078b8:	4013      	ands	r3, r2
 80078ba:	2b20      	cmp	r3, #32
 80078bc:	d10e      	bne.n	80078dc <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	2220      	movs	r2, #32
 80078c6:	4013      	ands	r3, r2
 80078c8:	2b20      	cmp	r3, #32
 80078ca:	d107      	bne.n	80078dc <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2220      	movs	r2, #32
 80078d2:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	0018      	movs	r0, r3
 80078d8:	f000 f842 	bl	8007960 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2240      	movs	r2, #64	; 0x40
 80078e4:	4013      	ands	r3, r2
 80078e6:	2b40      	cmp	r3, #64	; 0x40
 80078e8:	d10e      	bne.n	8007908 <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	2240      	movs	r2, #64	; 0x40
 80078f2:	4013      	ands	r3, r2
 80078f4:	2b40      	cmp	r3, #64	; 0x40
 80078f6:	d107      	bne.n	8007908 <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2240      	movs	r2, #64	; 0x40
 80078fe:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	0018      	movs	r0, r3
 8007904:	f000 f834 	bl	8007970 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8007908:	46c0      	nop			; (mov r8, r8)
 800790a:	46bd      	mov	sp, r7
 800790c:	b002      	add	sp, #8
 800790e:	bd80      	pop	{r7, pc}

08007910 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8007918:	46c0      	nop			; (mov r8, r8)
 800791a:	46bd      	mov	sp, r7
 800791c:	b002      	add	sp, #8
 800791e:	bd80      	pop	{r7, pc}

08007920 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8007928:	46c0      	nop			; (mov r8, r8)
 800792a:	46bd      	mov	sp, r7
 800792c:	b002      	add	sp, #8
 800792e:	bd80      	pop	{r7, pc}

08007930 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8007938:	46c0      	nop			; (mov r8, r8)
 800793a:	46bd      	mov	sp, r7
 800793c:	b002      	add	sp, #8
 800793e:	bd80      	pop	{r7, pc}

08007940 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8007948:	46c0      	nop			; (mov r8, r8)
 800794a:	46bd      	mov	sp, r7
 800794c:	b002      	add	sp, #8
 800794e:	bd80      	pop	{r7, pc}

08007950 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8007958:	46c0      	nop			; (mov r8, r8)
 800795a:	46bd      	mov	sp, r7
 800795c:	b002      	add	sp, #8
 800795e:	bd80      	pop	{r7, pc}

08007960 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8007968:	46c0      	nop			; (mov r8, r8)
 800796a:	46bd      	mov	sp, r7
 800796c:	b002      	add	sp, #8
 800796e:	bd80      	pop	{r7, pc}

08007970 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8007978:	46c0      	nop			; (mov r8, r8)
 800797a:	46bd      	mov	sp, r7
 800797c:	b002      	add	sp, #8
 800797e:	bd80      	pop	{r7, pc}

08007980 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8007984:	4b04      	ldr	r3, [pc, #16]	; (8007998 <HAL_PWR_EnableBkUpAccess+0x18>)
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	4b03      	ldr	r3, [pc, #12]	; (8007998 <HAL_PWR_EnableBkUpAccess+0x18>)
 800798a:	2180      	movs	r1, #128	; 0x80
 800798c:	0049      	lsls	r1, r1, #1
 800798e:	430a      	orrs	r2, r1
 8007990:	601a      	str	r2, [r3, #0]
}
 8007992:	46c0      	nop			; (mov r8, r8)
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	40007000 	.word	0x40007000

0800799c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800799c:	b5b0      	push	{r4, r5, r7, lr}
 800799e:	b08a      	sub	sp, #40	; 0x28
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d102      	bne.n	80079b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	f000 fbbc 	bl	8008128 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80079b0:	4bc8      	ldr	r3, [pc, #800]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	220c      	movs	r2, #12
 80079b6:	4013      	ands	r3, r2
 80079b8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80079ba:	4bc6      	ldr	r3, [pc, #792]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 80079bc:	68da      	ldr	r2, [r3, #12]
 80079be:	2380      	movs	r3, #128	; 0x80
 80079c0:	025b      	lsls	r3, r3, #9
 80079c2:	4013      	ands	r3, r2
 80079c4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2201      	movs	r2, #1
 80079cc:	4013      	ands	r3, r2
 80079ce:	d100      	bne.n	80079d2 <HAL_RCC_OscConfig+0x36>
 80079d0:	e07e      	b.n	8007ad0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	2b08      	cmp	r3, #8
 80079d6:	d007      	beq.n	80079e8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	2b0c      	cmp	r3, #12
 80079dc:	d112      	bne.n	8007a04 <HAL_RCC_OscConfig+0x68>
 80079de:	69ba      	ldr	r2, [r7, #24]
 80079e0:	2380      	movs	r3, #128	; 0x80
 80079e2:	025b      	lsls	r3, r3, #9
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d10d      	bne.n	8007a04 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079e8:	4bba      	ldr	r3, [pc, #744]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	2380      	movs	r3, #128	; 0x80
 80079ee:	029b      	lsls	r3, r3, #10
 80079f0:	4013      	ands	r3, r2
 80079f2:	d100      	bne.n	80079f6 <HAL_RCC_OscConfig+0x5a>
 80079f4:	e06b      	b.n	8007ace <HAL_RCC_OscConfig+0x132>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d167      	bne.n	8007ace <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	f000 fb92 	bl	8008128 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	685a      	ldr	r2, [r3, #4]
 8007a08:	2380      	movs	r3, #128	; 0x80
 8007a0a:	025b      	lsls	r3, r3, #9
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d107      	bne.n	8007a20 <HAL_RCC_OscConfig+0x84>
 8007a10:	4bb0      	ldr	r3, [pc, #704]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	4baf      	ldr	r3, [pc, #700]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007a16:	2180      	movs	r1, #128	; 0x80
 8007a18:	0249      	lsls	r1, r1, #9
 8007a1a:	430a      	orrs	r2, r1
 8007a1c:	601a      	str	r2, [r3, #0]
 8007a1e:	e027      	b.n	8007a70 <HAL_RCC_OscConfig+0xd4>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	685a      	ldr	r2, [r3, #4]
 8007a24:	23a0      	movs	r3, #160	; 0xa0
 8007a26:	02db      	lsls	r3, r3, #11
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d10e      	bne.n	8007a4a <HAL_RCC_OscConfig+0xae>
 8007a2c:	4ba9      	ldr	r3, [pc, #676]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	4ba8      	ldr	r3, [pc, #672]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007a32:	2180      	movs	r1, #128	; 0x80
 8007a34:	02c9      	lsls	r1, r1, #11
 8007a36:	430a      	orrs	r2, r1
 8007a38:	601a      	str	r2, [r3, #0]
 8007a3a:	4ba6      	ldr	r3, [pc, #664]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	4ba5      	ldr	r3, [pc, #660]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007a40:	2180      	movs	r1, #128	; 0x80
 8007a42:	0249      	lsls	r1, r1, #9
 8007a44:	430a      	orrs	r2, r1
 8007a46:	601a      	str	r2, [r3, #0]
 8007a48:	e012      	b.n	8007a70 <HAL_RCC_OscConfig+0xd4>
 8007a4a:	4ba2      	ldr	r3, [pc, #648]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	4ba1      	ldr	r3, [pc, #644]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007a50:	49a1      	ldr	r1, [pc, #644]	; (8007cd8 <HAL_RCC_OscConfig+0x33c>)
 8007a52:	400a      	ands	r2, r1
 8007a54:	601a      	str	r2, [r3, #0]
 8007a56:	4b9f      	ldr	r3, [pc, #636]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	2380      	movs	r3, #128	; 0x80
 8007a5c:	025b      	lsls	r3, r3, #9
 8007a5e:	4013      	ands	r3, r2
 8007a60:	60fb      	str	r3, [r7, #12]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	4b9b      	ldr	r3, [pc, #620]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	4b9a      	ldr	r3, [pc, #616]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007a6a:	499c      	ldr	r1, [pc, #624]	; (8007cdc <HAL_RCC_OscConfig+0x340>)
 8007a6c:	400a      	ands	r2, r1
 8007a6e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d015      	beq.n	8007aa4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a78:	f7fe fcf6 	bl	8006468 <HAL_GetTick>
 8007a7c:	0003      	movs	r3, r0
 8007a7e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a80:	e009      	b.n	8007a96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a82:	f7fe fcf1 	bl	8006468 <HAL_GetTick>
 8007a86:	0002      	movs	r2, r0
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	1ad3      	subs	r3, r2, r3
 8007a8c:	2b64      	cmp	r3, #100	; 0x64
 8007a8e:	d902      	bls.n	8007a96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a90:	2303      	movs	r3, #3
 8007a92:	f000 fb49 	bl	8008128 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a96:	4b8f      	ldr	r3, [pc, #572]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	2380      	movs	r3, #128	; 0x80
 8007a9c:	029b      	lsls	r3, r3, #10
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	d0ef      	beq.n	8007a82 <HAL_RCC_OscConfig+0xe6>
 8007aa2:	e015      	b.n	8007ad0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007aa4:	f7fe fce0 	bl	8006468 <HAL_GetTick>
 8007aa8:	0003      	movs	r3, r0
 8007aaa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007aac:	e008      	b.n	8007ac0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007aae:	f7fe fcdb 	bl	8006468 <HAL_GetTick>
 8007ab2:	0002      	movs	r2, r0
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	2b64      	cmp	r3, #100	; 0x64
 8007aba:	d901      	bls.n	8007ac0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e333      	b.n	8008128 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007ac0:	4b84      	ldr	r3, [pc, #528]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	2380      	movs	r3, #128	; 0x80
 8007ac6:	029b      	lsls	r3, r3, #10
 8007ac8:	4013      	ands	r3, r2
 8007aca:	d1f0      	bne.n	8007aae <HAL_RCC_OscConfig+0x112>
 8007acc:	e000      	b.n	8007ad0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ace:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2202      	movs	r2, #2
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	d100      	bne.n	8007adc <HAL_RCC_OscConfig+0x140>
 8007ada:	e098      	b.n	8007c0e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae4:	2220      	movs	r2, #32
 8007ae6:	4013      	ands	r3, r2
 8007ae8:	d009      	beq.n	8007afe <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8007aea:	4b7a      	ldr	r3, [pc, #488]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	4b79      	ldr	r3, [pc, #484]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007af0:	2120      	movs	r1, #32
 8007af2:	430a      	orrs	r2, r1
 8007af4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8007af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af8:	2220      	movs	r2, #32
 8007afa:	4393      	bics	r3, r2
 8007afc:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	2b04      	cmp	r3, #4
 8007b02:	d005      	beq.n	8007b10 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	2b0c      	cmp	r3, #12
 8007b08:	d13d      	bne.n	8007b86 <HAL_RCC_OscConfig+0x1ea>
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d13a      	bne.n	8007b86 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8007b10:	4b70      	ldr	r3, [pc, #448]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2204      	movs	r2, #4
 8007b16:	4013      	ands	r3, r2
 8007b18:	d004      	beq.n	8007b24 <HAL_RCC_OscConfig+0x188>
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d101      	bne.n	8007b24 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	e301      	b.n	8008128 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b24:	4b6b      	ldr	r3, [pc, #428]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	4a6d      	ldr	r2, [pc, #436]	; (8007ce0 <HAL_RCC_OscConfig+0x344>)
 8007b2a:	4013      	ands	r3, r2
 8007b2c:	0019      	movs	r1, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	021a      	lsls	r2, r3, #8
 8007b34:	4b67      	ldr	r3, [pc, #412]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007b36:	430a      	orrs	r2, r1
 8007b38:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8007b3a:	4b66      	ldr	r3, [pc, #408]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2209      	movs	r2, #9
 8007b40:	4393      	bics	r3, r2
 8007b42:	0019      	movs	r1, r3
 8007b44:	4b63      	ldr	r3, [pc, #396]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b48:	430a      	orrs	r2, r1
 8007b4a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007b4c:	f000 fc20 	bl	8008390 <HAL_RCC_GetSysClockFreq>
 8007b50:	0001      	movs	r1, r0
 8007b52:	4b60      	ldr	r3, [pc, #384]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	091b      	lsrs	r3, r3, #4
 8007b58:	220f      	movs	r2, #15
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	4a61      	ldr	r2, [pc, #388]	; (8007ce4 <HAL_RCC_OscConfig+0x348>)
 8007b5e:	5cd3      	ldrb	r3, [r2, r3]
 8007b60:	000a      	movs	r2, r1
 8007b62:	40da      	lsrs	r2, r3
 8007b64:	4b60      	ldr	r3, [pc, #384]	; (8007ce8 <HAL_RCC_OscConfig+0x34c>)
 8007b66:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8007b68:	2513      	movs	r5, #19
 8007b6a:	197c      	adds	r4, r7, r5
 8007b6c:	2000      	movs	r0, #0
 8007b6e:	f7fe fc45 	bl	80063fc <HAL_InitTick>
 8007b72:	0003      	movs	r3, r0
 8007b74:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8007b76:	197b      	adds	r3, r7, r5
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d047      	beq.n	8007c0e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8007b7e:	2313      	movs	r3, #19
 8007b80:	18fb      	adds	r3, r7, r3
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	e2d0      	b.n	8008128 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8007b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d027      	beq.n	8007bdc <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8007b8c:	4b51      	ldr	r3, [pc, #324]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	2209      	movs	r2, #9
 8007b92:	4393      	bics	r3, r2
 8007b94:	0019      	movs	r1, r3
 8007b96:	4b4f      	ldr	r3, [pc, #316]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b9a:	430a      	orrs	r2, r1
 8007b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b9e:	f7fe fc63 	bl	8006468 <HAL_GetTick>
 8007ba2:	0003      	movs	r3, r0
 8007ba4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ba6:	e008      	b.n	8007bba <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ba8:	f7fe fc5e 	bl	8006468 <HAL_GetTick>
 8007bac:	0002      	movs	r2, r0
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d901      	bls.n	8007bba <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	e2b6      	b.n	8008128 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007bba:	4b46      	ldr	r3, [pc, #280]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2204      	movs	r2, #4
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	d0f1      	beq.n	8007ba8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bc4:	4b43      	ldr	r3, [pc, #268]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	4a45      	ldr	r2, [pc, #276]	; (8007ce0 <HAL_RCC_OscConfig+0x344>)
 8007bca:	4013      	ands	r3, r2
 8007bcc:	0019      	movs	r1, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	021a      	lsls	r2, r3, #8
 8007bd4:	4b3f      	ldr	r3, [pc, #252]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007bd6:	430a      	orrs	r2, r1
 8007bd8:	605a      	str	r2, [r3, #4]
 8007bda:	e018      	b.n	8007c0e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007bdc:	4b3d      	ldr	r3, [pc, #244]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	4b3c      	ldr	r3, [pc, #240]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007be2:	2101      	movs	r1, #1
 8007be4:	438a      	bics	r2, r1
 8007be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007be8:	f7fe fc3e 	bl	8006468 <HAL_GetTick>
 8007bec:	0003      	movs	r3, r0
 8007bee:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007bf0:	e008      	b.n	8007c04 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007bf2:	f7fe fc39 	bl	8006468 <HAL_GetTick>
 8007bf6:	0002      	movs	r2, r0
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	1ad3      	subs	r3, r2, r3
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d901      	bls.n	8007c04 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8007c00:	2303      	movs	r3, #3
 8007c02:	e291      	b.n	8008128 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007c04:	4b33      	ldr	r3, [pc, #204]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2204      	movs	r2, #4
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	d1f1      	bne.n	8007bf2 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2210      	movs	r2, #16
 8007c14:	4013      	ands	r3, r2
 8007c16:	d100      	bne.n	8007c1a <HAL_RCC_OscConfig+0x27e>
 8007c18:	e09f      	b.n	8007d5a <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d13f      	bne.n	8007ca0 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007c20:	4b2c      	ldr	r3, [pc, #176]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	2380      	movs	r3, #128	; 0x80
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	4013      	ands	r3, r2
 8007c2a:	d005      	beq.n	8007c38 <HAL_RCC_OscConfig+0x29c>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	69db      	ldr	r3, [r3, #28]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d101      	bne.n	8007c38 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e277      	b.n	8008128 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007c38:	4b26      	ldr	r3, [pc, #152]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	4a2b      	ldr	r2, [pc, #172]	; (8007cec <HAL_RCC_OscConfig+0x350>)
 8007c3e:	4013      	ands	r3, r2
 8007c40:	0019      	movs	r1, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c46:	4b23      	ldr	r3, [pc, #140]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007c48:	430a      	orrs	r2, r1
 8007c4a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007c4c:	4b21      	ldr	r3, [pc, #132]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	021b      	lsls	r3, r3, #8
 8007c52:	0a19      	lsrs	r1, r3, #8
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6a1b      	ldr	r3, [r3, #32]
 8007c58:	061a      	lsls	r2, r3, #24
 8007c5a:	4b1e      	ldr	r3, [pc, #120]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007c5c:	430a      	orrs	r2, r1
 8007c5e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c64:	0b5b      	lsrs	r3, r3, #13
 8007c66:	3301      	adds	r3, #1
 8007c68:	2280      	movs	r2, #128	; 0x80
 8007c6a:	0212      	lsls	r2, r2, #8
 8007c6c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8007c6e:	4b19      	ldr	r3, [pc, #100]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	091b      	lsrs	r3, r3, #4
 8007c74:	210f      	movs	r1, #15
 8007c76:	400b      	ands	r3, r1
 8007c78:	491a      	ldr	r1, [pc, #104]	; (8007ce4 <HAL_RCC_OscConfig+0x348>)
 8007c7a:	5ccb      	ldrb	r3, [r1, r3]
 8007c7c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007c7e:	4b1a      	ldr	r3, [pc, #104]	; (8007ce8 <HAL_RCC_OscConfig+0x34c>)
 8007c80:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8007c82:	2513      	movs	r5, #19
 8007c84:	197c      	adds	r4, r7, r5
 8007c86:	2000      	movs	r0, #0
 8007c88:	f7fe fbb8 	bl	80063fc <HAL_InitTick>
 8007c8c:	0003      	movs	r3, r0
 8007c8e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8007c90:	197b      	adds	r3, r7, r5
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d060      	beq.n	8007d5a <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8007c98:	2313      	movs	r3, #19
 8007c9a:	18fb      	adds	r3, r7, r3
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	e243      	b.n	8008128 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	69db      	ldr	r3, [r3, #28]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d03e      	beq.n	8007d26 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007ca8:	4b0a      	ldr	r3, [pc, #40]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	4b09      	ldr	r3, [pc, #36]	; (8007cd4 <HAL_RCC_OscConfig+0x338>)
 8007cae:	2180      	movs	r1, #128	; 0x80
 8007cb0:	0049      	lsls	r1, r1, #1
 8007cb2:	430a      	orrs	r2, r1
 8007cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cb6:	f7fe fbd7 	bl	8006468 <HAL_GetTick>
 8007cba:	0003      	movs	r3, r0
 8007cbc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007cbe:	e017      	b.n	8007cf0 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007cc0:	f7fe fbd2 	bl	8006468 <HAL_GetTick>
 8007cc4:	0002      	movs	r2, r0
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d910      	bls.n	8007cf0 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	e22a      	b.n	8008128 <HAL_RCC_OscConfig+0x78c>
 8007cd2:	46c0      	nop			; (mov r8, r8)
 8007cd4:	40021000 	.word	0x40021000
 8007cd8:	fffeffff 	.word	0xfffeffff
 8007cdc:	fffbffff 	.word	0xfffbffff
 8007ce0:	ffffe0ff 	.word	0xffffe0ff
 8007ce4:	0800bebc 	.word	0x0800bebc
 8007ce8:	20000010 	.word	0x20000010
 8007cec:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007cf0:	4bc6      	ldr	r3, [pc, #792]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	2380      	movs	r3, #128	; 0x80
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	d0e1      	beq.n	8007cc0 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007cfc:	4bc3      	ldr	r3, [pc, #780]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	4ac3      	ldr	r2, [pc, #780]	; (8008010 <HAL_RCC_OscConfig+0x674>)
 8007d02:	4013      	ands	r3, r2
 8007d04:	0019      	movs	r1, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d0a:	4bc0      	ldr	r3, [pc, #768]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007d0c:	430a      	orrs	r2, r1
 8007d0e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007d10:	4bbe      	ldr	r3, [pc, #760]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	021b      	lsls	r3, r3, #8
 8007d16:	0a19      	lsrs	r1, r3, #8
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a1b      	ldr	r3, [r3, #32]
 8007d1c:	061a      	lsls	r2, r3, #24
 8007d1e:	4bbb      	ldr	r3, [pc, #748]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007d20:	430a      	orrs	r2, r1
 8007d22:	605a      	str	r2, [r3, #4]
 8007d24:	e019      	b.n	8007d5a <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007d26:	4bb9      	ldr	r3, [pc, #740]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	4bb8      	ldr	r3, [pc, #736]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007d2c:	49b9      	ldr	r1, [pc, #740]	; (8008014 <HAL_RCC_OscConfig+0x678>)
 8007d2e:	400a      	ands	r2, r1
 8007d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d32:	f7fe fb99 	bl	8006468 <HAL_GetTick>
 8007d36:	0003      	movs	r3, r0
 8007d38:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007d3a:	e008      	b.n	8007d4e <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007d3c:	f7fe fb94 	bl	8006468 <HAL_GetTick>
 8007d40:	0002      	movs	r2, r0
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d901      	bls.n	8007d4e <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	e1ec      	b.n	8008128 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007d4e:	4baf      	ldr	r3, [pc, #700]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	2380      	movs	r3, #128	; 0x80
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	4013      	ands	r3, r2
 8007d58:	d1f0      	bne.n	8007d3c <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2208      	movs	r2, #8
 8007d60:	4013      	ands	r3, r2
 8007d62:	d036      	beq.n	8007dd2 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	695b      	ldr	r3, [r3, #20]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d019      	beq.n	8007da0 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d6c:	4ba7      	ldr	r3, [pc, #668]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007d6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d70:	4ba6      	ldr	r3, [pc, #664]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007d72:	2101      	movs	r1, #1
 8007d74:	430a      	orrs	r2, r1
 8007d76:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d78:	f7fe fb76 	bl	8006468 <HAL_GetTick>
 8007d7c:	0003      	movs	r3, r0
 8007d7e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007d80:	e008      	b.n	8007d94 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d82:	f7fe fb71 	bl	8006468 <HAL_GetTick>
 8007d86:	0002      	movs	r2, r0
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	1ad3      	subs	r3, r2, r3
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d901      	bls.n	8007d94 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8007d90:	2303      	movs	r3, #3
 8007d92:	e1c9      	b.n	8008128 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007d94:	4b9d      	ldr	r3, [pc, #628]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d98:	2202      	movs	r2, #2
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	d0f1      	beq.n	8007d82 <HAL_RCC_OscConfig+0x3e6>
 8007d9e:	e018      	b.n	8007dd2 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007da0:	4b9a      	ldr	r3, [pc, #616]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007da2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007da4:	4b99      	ldr	r3, [pc, #612]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007da6:	2101      	movs	r1, #1
 8007da8:	438a      	bics	r2, r1
 8007daa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007dac:	f7fe fb5c 	bl	8006468 <HAL_GetTick>
 8007db0:	0003      	movs	r3, r0
 8007db2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007db4:	e008      	b.n	8007dc8 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007db6:	f7fe fb57 	bl	8006468 <HAL_GetTick>
 8007dba:	0002      	movs	r2, r0
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d901      	bls.n	8007dc8 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	e1af      	b.n	8008128 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007dc8:	4b90      	ldr	r3, [pc, #576]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dcc:	2202      	movs	r2, #2
 8007dce:	4013      	ands	r3, r2
 8007dd0:	d1f1      	bne.n	8007db6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2204      	movs	r2, #4
 8007dd8:	4013      	ands	r3, r2
 8007dda:	d100      	bne.n	8007dde <HAL_RCC_OscConfig+0x442>
 8007ddc:	e0af      	b.n	8007f3e <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007dde:	2323      	movs	r3, #35	; 0x23
 8007de0:	18fb      	adds	r3, r7, r3
 8007de2:	2200      	movs	r2, #0
 8007de4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007de6:	4b89      	ldr	r3, [pc, #548]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007de8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dea:	2380      	movs	r3, #128	; 0x80
 8007dec:	055b      	lsls	r3, r3, #21
 8007dee:	4013      	ands	r3, r2
 8007df0:	d10a      	bne.n	8007e08 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007df2:	4b86      	ldr	r3, [pc, #536]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007df4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007df6:	4b85      	ldr	r3, [pc, #532]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007df8:	2180      	movs	r1, #128	; 0x80
 8007dfa:	0549      	lsls	r1, r1, #21
 8007dfc:	430a      	orrs	r2, r1
 8007dfe:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8007e00:	2323      	movs	r3, #35	; 0x23
 8007e02:	18fb      	adds	r3, r7, r3
 8007e04:	2201      	movs	r2, #1
 8007e06:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e08:	4b83      	ldr	r3, [pc, #524]	; (8008018 <HAL_RCC_OscConfig+0x67c>)
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	2380      	movs	r3, #128	; 0x80
 8007e0e:	005b      	lsls	r3, r3, #1
 8007e10:	4013      	ands	r3, r2
 8007e12:	d11a      	bne.n	8007e4a <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e14:	4b80      	ldr	r3, [pc, #512]	; (8008018 <HAL_RCC_OscConfig+0x67c>)
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	4b7f      	ldr	r3, [pc, #508]	; (8008018 <HAL_RCC_OscConfig+0x67c>)
 8007e1a:	2180      	movs	r1, #128	; 0x80
 8007e1c:	0049      	lsls	r1, r1, #1
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e22:	f7fe fb21 	bl	8006468 <HAL_GetTick>
 8007e26:	0003      	movs	r3, r0
 8007e28:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e2a:	e008      	b.n	8007e3e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e2c:	f7fe fb1c 	bl	8006468 <HAL_GetTick>
 8007e30:	0002      	movs	r2, r0
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	2b64      	cmp	r3, #100	; 0x64
 8007e38:	d901      	bls.n	8007e3e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e174      	b.n	8008128 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e3e:	4b76      	ldr	r3, [pc, #472]	; (8008018 <HAL_RCC_OscConfig+0x67c>)
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	2380      	movs	r3, #128	; 0x80
 8007e44:	005b      	lsls	r3, r3, #1
 8007e46:	4013      	ands	r3, r2
 8007e48:	d0f0      	beq.n	8007e2c <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	689a      	ldr	r2, [r3, #8]
 8007e4e:	2380      	movs	r3, #128	; 0x80
 8007e50:	005b      	lsls	r3, r3, #1
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d107      	bne.n	8007e66 <HAL_RCC_OscConfig+0x4ca>
 8007e56:	4b6d      	ldr	r3, [pc, #436]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007e58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e5a:	4b6c      	ldr	r3, [pc, #432]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007e5c:	2180      	movs	r1, #128	; 0x80
 8007e5e:	0049      	lsls	r1, r1, #1
 8007e60:	430a      	orrs	r2, r1
 8007e62:	651a      	str	r2, [r3, #80]	; 0x50
 8007e64:	e031      	b.n	8007eca <HAL_RCC_OscConfig+0x52e>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10c      	bne.n	8007e88 <HAL_RCC_OscConfig+0x4ec>
 8007e6e:	4b67      	ldr	r3, [pc, #412]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007e70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e72:	4b66      	ldr	r3, [pc, #408]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007e74:	4967      	ldr	r1, [pc, #412]	; (8008014 <HAL_RCC_OscConfig+0x678>)
 8007e76:	400a      	ands	r2, r1
 8007e78:	651a      	str	r2, [r3, #80]	; 0x50
 8007e7a:	4b64      	ldr	r3, [pc, #400]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007e7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e7e:	4b63      	ldr	r3, [pc, #396]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007e80:	4966      	ldr	r1, [pc, #408]	; (800801c <HAL_RCC_OscConfig+0x680>)
 8007e82:	400a      	ands	r2, r1
 8007e84:	651a      	str	r2, [r3, #80]	; 0x50
 8007e86:	e020      	b.n	8007eca <HAL_RCC_OscConfig+0x52e>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	689a      	ldr	r2, [r3, #8]
 8007e8c:	23a0      	movs	r3, #160	; 0xa0
 8007e8e:	00db      	lsls	r3, r3, #3
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d10e      	bne.n	8007eb2 <HAL_RCC_OscConfig+0x516>
 8007e94:	4b5d      	ldr	r3, [pc, #372]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007e96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e98:	4b5c      	ldr	r3, [pc, #368]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007e9a:	2180      	movs	r1, #128	; 0x80
 8007e9c:	00c9      	lsls	r1, r1, #3
 8007e9e:	430a      	orrs	r2, r1
 8007ea0:	651a      	str	r2, [r3, #80]	; 0x50
 8007ea2:	4b5a      	ldr	r3, [pc, #360]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007ea4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ea6:	4b59      	ldr	r3, [pc, #356]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007ea8:	2180      	movs	r1, #128	; 0x80
 8007eaa:	0049      	lsls	r1, r1, #1
 8007eac:	430a      	orrs	r2, r1
 8007eae:	651a      	str	r2, [r3, #80]	; 0x50
 8007eb0:	e00b      	b.n	8007eca <HAL_RCC_OscConfig+0x52e>
 8007eb2:	4b56      	ldr	r3, [pc, #344]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007eb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007eb6:	4b55      	ldr	r3, [pc, #340]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007eb8:	4956      	ldr	r1, [pc, #344]	; (8008014 <HAL_RCC_OscConfig+0x678>)
 8007eba:	400a      	ands	r2, r1
 8007ebc:	651a      	str	r2, [r3, #80]	; 0x50
 8007ebe:	4b53      	ldr	r3, [pc, #332]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007ec0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ec2:	4b52      	ldr	r3, [pc, #328]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007ec4:	4955      	ldr	r1, [pc, #340]	; (800801c <HAL_RCC_OscConfig+0x680>)
 8007ec6:	400a      	ands	r2, r1
 8007ec8:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d015      	beq.n	8007efe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ed2:	f7fe fac9 	bl	8006468 <HAL_GetTick>
 8007ed6:	0003      	movs	r3, r0
 8007ed8:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007eda:	e009      	b.n	8007ef0 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007edc:	f7fe fac4 	bl	8006468 <HAL_GetTick>
 8007ee0:	0002      	movs	r2, r0
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	1ad3      	subs	r3, r2, r3
 8007ee6:	4a4e      	ldr	r2, [pc, #312]	; (8008020 <HAL_RCC_OscConfig+0x684>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d901      	bls.n	8007ef0 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e11b      	b.n	8008128 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ef0:	4b46      	ldr	r3, [pc, #280]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007ef2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ef4:	2380      	movs	r3, #128	; 0x80
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4013      	ands	r3, r2
 8007efa:	d0ef      	beq.n	8007edc <HAL_RCC_OscConfig+0x540>
 8007efc:	e014      	b.n	8007f28 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007efe:	f7fe fab3 	bl	8006468 <HAL_GetTick>
 8007f02:	0003      	movs	r3, r0
 8007f04:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007f06:	e009      	b.n	8007f1c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f08:	f7fe faae 	bl	8006468 <HAL_GetTick>
 8007f0c:	0002      	movs	r2, r0
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	4a43      	ldr	r2, [pc, #268]	; (8008020 <HAL_RCC_OscConfig+0x684>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d901      	bls.n	8007f1c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e105      	b.n	8008128 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007f1c:	4b3b      	ldr	r3, [pc, #236]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007f1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f20:	2380      	movs	r3, #128	; 0x80
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	4013      	ands	r3, r2
 8007f26:	d1ef      	bne.n	8007f08 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007f28:	2323      	movs	r3, #35	; 0x23
 8007f2a:	18fb      	adds	r3, r7, r3
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d105      	bne.n	8007f3e <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f32:	4b36      	ldr	r3, [pc, #216]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007f34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f36:	4b35      	ldr	r3, [pc, #212]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007f38:	493a      	ldr	r1, [pc, #232]	; (8008024 <HAL_RCC_OscConfig+0x688>)
 8007f3a:	400a      	ands	r2, r1
 8007f3c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2220      	movs	r2, #32
 8007f44:	4013      	ands	r3, r2
 8007f46:	d049      	beq.n	8007fdc <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	699b      	ldr	r3, [r3, #24]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d026      	beq.n	8007f9e <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8007f50:	4b2e      	ldr	r3, [pc, #184]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007f52:	689a      	ldr	r2, [r3, #8]
 8007f54:	4b2d      	ldr	r3, [pc, #180]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007f56:	2101      	movs	r1, #1
 8007f58:	430a      	orrs	r2, r1
 8007f5a:	609a      	str	r2, [r3, #8]
 8007f5c:	4b2b      	ldr	r3, [pc, #172]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f60:	4b2a      	ldr	r3, [pc, #168]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007f62:	2101      	movs	r1, #1
 8007f64:	430a      	orrs	r2, r1
 8007f66:	635a      	str	r2, [r3, #52]	; 0x34
 8007f68:	4b2f      	ldr	r3, [pc, #188]	; (8008028 <HAL_RCC_OscConfig+0x68c>)
 8007f6a:	6a1a      	ldr	r2, [r3, #32]
 8007f6c:	4b2e      	ldr	r3, [pc, #184]	; (8008028 <HAL_RCC_OscConfig+0x68c>)
 8007f6e:	2180      	movs	r1, #128	; 0x80
 8007f70:	0189      	lsls	r1, r1, #6
 8007f72:	430a      	orrs	r2, r1
 8007f74:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f76:	f7fe fa77 	bl	8006468 <HAL_GetTick>
 8007f7a:	0003      	movs	r3, r0
 8007f7c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007f7e:	e008      	b.n	8007f92 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007f80:	f7fe fa72 	bl	8006468 <HAL_GetTick>
 8007f84:	0002      	movs	r2, r0
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d901      	bls.n	8007f92 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e0ca      	b.n	8008128 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007f92:	4b1e      	ldr	r3, [pc, #120]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	2202      	movs	r2, #2
 8007f98:	4013      	ands	r3, r2
 8007f9a:	d0f1      	beq.n	8007f80 <HAL_RCC_OscConfig+0x5e4>
 8007f9c:	e01e      	b.n	8007fdc <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8007f9e:	4b1b      	ldr	r3, [pc, #108]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007fa0:	689a      	ldr	r2, [r3, #8]
 8007fa2:	4b1a      	ldr	r3, [pc, #104]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007fa4:	2101      	movs	r1, #1
 8007fa6:	438a      	bics	r2, r1
 8007fa8:	609a      	str	r2, [r3, #8]
 8007faa:	4b1f      	ldr	r3, [pc, #124]	; (8008028 <HAL_RCC_OscConfig+0x68c>)
 8007fac:	6a1a      	ldr	r2, [r3, #32]
 8007fae:	4b1e      	ldr	r3, [pc, #120]	; (8008028 <HAL_RCC_OscConfig+0x68c>)
 8007fb0:	491e      	ldr	r1, [pc, #120]	; (800802c <HAL_RCC_OscConfig+0x690>)
 8007fb2:	400a      	ands	r2, r1
 8007fb4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fb6:	f7fe fa57 	bl	8006468 <HAL_GetTick>
 8007fba:	0003      	movs	r3, r0
 8007fbc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007fbe:	e008      	b.n	8007fd2 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007fc0:	f7fe fa52 	bl	8006468 <HAL_GetTick>
 8007fc4:	0002      	movs	r2, r0
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	d901      	bls.n	8007fd2 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8007fce:	2303      	movs	r3, #3
 8007fd0:	e0aa      	b.n	8008128 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007fd2:	4b0e      	ldr	r3, [pc, #56]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	2202      	movs	r2, #2
 8007fd8:	4013      	ands	r3, r2
 8007fda:	d1f1      	bne.n	8007fc0 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d100      	bne.n	8007fe6 <HAL_RCC_OscConfig+0x64a>
 8007fe4:	e09f      	b.n	8008126 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	2b0c      	cmp	r3, #12
 8007fea:	d100      	bne.n	8007fee <HAL_RCC_OscConfig+0x652>
 8007fec:	e078      	b.n	80080e0 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d159      	bne.n	80080aa <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ff6:	4b05      	ldr	r3, [pc, #20]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	4b04      	ldr	r3, [pc, #16]	; (800800c <HAL_RCC_OscConfig+0x670>)
 8007ffc:	490c      	ldr	r1, [pc, #48]	; (8008030 <HAL_RCC_OscConfig+0x694>)
 8007ffe:	400a      	ands	r2, r1
 8008000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008002:	f7fe fa31 	bl	8006468 <HAL_GetTick>
 8008006:	0003      	movs	r3, r0
 8008008:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800800a:	e01c      	b.n	8008046 <HAL_RCC_OscConfig+0x6aa>
 800800c:	40021000 	.word	0x40021000
 8008010:	ffff1fff 	.word	0xffff1fff
 8008014:	fffffeff 	.word	0xfffffeff
 8008018:	40007000 	.word	0x40007000
 800801c:	fffffbff 	.word	0xfffffbff
 8008020:	00001388 	.word	0x00001388
 8008024:	efffffff 	.word	0xefffffff
 8008028:	40010000 	.word	0x40010000
 800802c:	ffffdfff 	.word	0xffffdfff
 8008030:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008034:	f7fe fa18 	bl	8006468 <HAL_GetTick>
 8008038:	0002      	movs	r2, r0
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	2b02      	cmp	r3, #2
 8008040:	d901      	bls.n	8008046 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8008042:	2303      	movs	r3, #3
 8008044:	e070      	b.n	8008128 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008046:	4b3a      	ldr	r3, [pc, #232]	; (8008130 <HAL_RCC_OscConfig+0x794>)
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	2380      	movs	r3, #128	; 0x80
 800804c:	049b      	lsls	r3, r3, #18
 800804e:	4013      	ands	r3, r2
 8008050:	d1f0      	bne.n	8008034 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008052:	4b37      	ldr	r3, [pc, #220]	; (8008130 <HAL_RCC_OscConfig+0x794>)
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	4a37      	ldr	r2, [pc, #220]	; (8008134 <HAL_RCC_OscConfig+0x798>)
 8008058:	4013      	ands	r3, r2
 800805a:	0019      	movs	r1, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008064:	431a      	orrs	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800806a:	431a      	orrs	r2, r3
 800806c:	4b30      	ldr	r3, [pc, #192]	; (8008130 <HAL_RCC_OscConfig+0x794>)
 800806e:	430a      	orrs	r2, r1
 8008070:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008072:	4b2f      	ldr	r3, [pc, #188]	; (8008130 <HAL_RCC_OscConfig+0x794>)
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	4b2e      	ldr	r3, [pc, #184]	; (8008130 <HAL_RCC_OscConfig+0x794>)
 8008078:	2180      	movs	r1, #128	; 0x80
 800807a:	0449      	lsls	r1, r1, #17
 800807c:	430a      	orrs	r2, r1
 800807e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008080:	f7fe f9f2 	bl	8006468 <HAL_GetTick>
 8008084:	0003      	movs	r3, r0
 8008086:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8008088:	e008      	b.n	800809c <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800808a:	f7fe f9ed 	bl	8006468 <HAL_GetTick>
 800808e:	0002      	movs	r2, r0
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	1ad3      	subs	r3, r2, r3
 8008094:	2b02      	cmp	r3, #2
 8008096:	d901      	bls.n	800809c <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8008098:	2303      	movs	r3, #3
 800809a:	e045      	b.n	8008128 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800809c:	4b24      	ldr	r3, [pc, #144]	; (8008130 <HAL_RCC_OscConfig+0x794>)
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	2380      	movs	r3, #128	; 0x80
 80080a2:	049b      	lsls	r3, r3, #18
 80080a4:	4013      	ands	r3, r2
 80080a6:	d0f0      	beq.n	800808a <HAL_RCC_OscConfig+0x6ee>
 80080a8:	e03d      	b.n	8008126 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080aa:	4b21      	ldr	r3, [pc, #132]	; (8008130 <HAL_RCC_OscConfig+0x794>)
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	4b20      	ldr	r3, [pc, #128]	; (8008130 <HAL_RCC_OscConfig+0x794>)
 80080b0:	4921      	ldr	r1, [pc, #132]	; (8008138 <HAL_RCC_OscConfig+0x79c>)
 80080b2:	400a      	ands	r2, r1
 80080b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080b6:	f7fe f9d7 	bl	8006468 <HAL_GetTick>
 80080ba:	0003      	movs	r3, r0
 80080bc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80080be:	e008      	b.n	80080d2 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080c0:	f7fe f9d2 	bl	8006468 <HAL_GetTick>
 80080c4:	0002      	movs	r2, r0
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d901      	bls.n	80080d2 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 80080ce:	2303      	movs	r3, #3
 80080d0:	e02a      	b.n	8008128 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80080d2:	4b17      	ldr	r3, [pc, #92]	; (8008130 <HAL_RCC_OscConfig+0x794>)
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	2380      	movs	r3, #128	; 0x80
 80080d8:	049b      	lsls	r3, r3, #18
 80080da:	4013      	ands	r3, r2
 80080dc:	d1f0      	bne.n	80080c0 <HAL_RCC_OscConfig+0x724>
 80080de:	e022      	b.n	8008126 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d101      	bne.n	80080ec <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	e01d      	b.n	8008128 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80080ec:	4b10      	ldr	r3, [pc, #64]	; (8008130 <HAL_RCC_OscConfig+0x794>)
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080f2:	69ba      	ldr	r2, [r7, #24]
 80080f4:	2380      	movs	r3, #128	; 0x80
 80080f6:	025b      	lsls	r3, r3, #9
 80080f8:	401a      	ands	r2, r3
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080fe:	429a      	cmp	r2, r3
 8008100:	d10f      	bne.n	8008122 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8008102:	69ba      	ldr	r2, [r7, #24]
 8008104:	23f0      	movs	r3, #240	; 0xf0
 8008106:	039b      	lsls	r3, r3, #14
 8008108:	401a      	ands	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800810e:	429a      	cmp	r2, r3
 8008110:	d107      	bne.n	8008122 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8008112:	69ba      	ldr	r2, [r7, #24]
 8008114:	23c0      	movs	r3, #192	; 0xc0
 8008116:	041b      	lsls	r3, r3, #16
 8008118:	401a      	ands	r2, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800811e:	429a      	cmp	r2, r3
 8008120:	d001      	beq.n	8008126 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e000      	b.n	8008128 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	0018      	movs	r0, r3
 800812a:	46bd      	mov	sp, r7
 800812c:	b00a      	add	sp, #40	; 0x28
 800812e:	bdb0      	pop	{r4, r5, r7, pc}
 8008130:	40021000 	.word	0x40021000
 8008134:	ff02ffff 	.word	0xff02ffff
 8008138:	feffffff 	.word	0xfeffffff

0800813c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800813c:	b5b0      	push	{r4, r5, r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d101      	bne.n	8008150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	e10d      	b.n	800836c <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008150:	4b88      	ldr	r3, [pc, #544]	; (8008374 <HAL_RCC_ClockConfig+0x238>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2201      	movs	r2, #1
 8008156:	4013      	ands	r3, r2
 8008158:	683a      	ldr	r2, [r7, #0]
 800815a:	429a      	cmp	r2, r3
 800815c:	d911      	bls.n	8008182 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800815e:	4b85      	ldr	r3, [pc, #532]	; (8008374 <HAL_RCC_ClockConfig+0x238>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2201      	movs	r2, #1
 8008164:	4393      	bics	r3, r2
 8008166:	0019      	movs	r1, r3
 8008168:	4b82      	ldr	r3, [pc, #520]	; (8008374 <HAL_RCC_ClockConfig+0x238>)
 800816a:	683a      	ldr	r2, [r7, #0]
 800816c:	430a      	orrs	r2, r1
 800816e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008170:	4b80      	ldr	r3, [pc, #512]	; (8008374 <HAL_RCC_ClockConfig+0x238>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2201      	movs	r2, #1
 8008176:	4013      	ands	r3, r2
 8008178:	683a      	ldr	r2, [r7, #0]
 800817a:	429a      	cmp	r2, r3
 800817c:	d001      	beq.n	8008182 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e0f4      	b.n	800836c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2202      	movs	r2, #2
 8008188:	4013      	ands	r3, r2
 800818a:	d009      	beq.n	80081a0 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800818c:	4b7a      	ldr	r3, [pc, #488]	; (8008378 <HAL_RCC_ClockConfig+0x23c>)
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	22f0      	movs	r2, #240	; 0xf0
 8008192:	4393      	bics	r3, r2
 8008194:	0019      	movs	r1, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	689a      	ldr	r2, [r3, #8]
 800819a:	4b77      	ldr	r3, [pc, #476]	; (8008378 <HAL_RCC_ClockConfig+0x23c>)
 800819c:	430a      	orrs	r2, r1
 800819e:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2201      	movs	r2, #1
 80081a6:	4013      	ands	r3, r2
 80081a8:	d100      	bne.n	80081ac <HAL_RCC_ClockConfig+0x70>
 80081aa:	e089      	b.n	80082c0 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	d107      	bne.n	80081c4 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80081b4:	4b70      	ldr	r3, [pc, #448]	; (8008378 <HAL_RCC_ClockConfig+0x23c>)
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	2380      	movs	r3, #128	; 0x80
 80081ba:	029b      	lsls	r3, r3, #10
 80081bc:	4013      	ands	r3, r2
 80081be:	d120      	bne.n	8008202 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	e0d3      	b.n	800836c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	2b03      	cmp	r3, #3
 80081ca:	d107      	bne.n	80081dc <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80081cc:	4b6a      	ldr	r3, [pc, #424]	; (8008378 <HAL_RCC_ClockConfig+0x23c>)
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	2380      	movs	r3, #128	; 0x80
 80081d2:	049b      	lsls	r3, r3, #18
 80081d4:	4013      	ands	r3, r2
 80081d6:	d114      	bne.n	8008202 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	e0c7      	b.n	800836c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d106      	bne.n	80081f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081e4:	4b64      	ldr	r3, [pc, #400]	; (8008378 <HAL_RCC_ClockConfig+0x23c>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2204      	movs	r2, #4
 80081ea:	4013      	ands	r3, r2
 80081ec:	d109      	bne.n	8008202 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e0bc      	b.n	800836c <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80081f2:	4b61      	ldr	r3, [pc, #388]	; (8008378 <HAL_RCC_ClockConfig+0x23c>)
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	2380      	movs	r3, #128	; 0x80
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	4013      	ands	r3, r2
 80081fc:	d101      	bne.n	8008202 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e0b4      	b.n	800836c <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008202:	4b5d      	ldr	r3, [pc, #372]	; (8008378 <HAL_RCC_ClockConfig+0x23c>)
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	2203      	movs	r2, #3
 8008208:	4393      	bics	r3, r2
 800820a:	0019      	movs	r1, r3
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685a      	ldr	r2, [r3, #4]
 8008210:	4b59      	ldr	r3, [pc, #356]	; (8008378 <HAL_RCC_ClockConfig+0x23c>)
 8008212:	430a      	orrs	r2, r1
 8008214:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008216:	f7fe f927 	bl	8006468 <HAL_GetTick>
 800821a:	0003      	movs	r3, r0
 800821c:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	2b02      	cmp	r3, #2
 8008224:	d111      	bne.n	800824a <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008226:	e009      	b.n	800823c <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008228:	f7fe f91e 	bl	8006468 <HAL_GetTick>
 800822c:	0002      	movs	r2, r0
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	4a52      	ldr	r2, [pc, #328]	; (800837c <HAL_RCC_ClockConfig+0x240>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d901      	bls.n	800823c <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8008238:	2303      	movs	r3, #3
 800823a:	e097      	b.n	800836c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800823c:	4b4e      	ldr	r3, [pc, #312]	; (8008378 <HAL_RCC_ClockConfig+0x23c>)
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	220c      	movs	r2, #12
 8008242:	4013      	ands	r3, r2
 8008244:	2b08      	cmp	r3, #8
 8008246:	d1ef      	bne.n	8008228 <HAL_RCC_ClockConfig+0xec>
 8008248:	e03a      	b.n	80082c0 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	2b03      	cmp	r3, #3
 8008250:	d111      	bne.n	8008276 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008252:	e009      	b.n	8008268 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008254:	f7fe f908 	bl	8006468 <HAL_GetTick>
 8008258:	0002      	movs	r2, r0
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	1ad3      	subs	r3, r2, r3
 800825e:	4a47      	ldr	r2, [pc, #284]	; (800837c <HAL_RCC_ClockConfig+0x240>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d901      	bls.n	8008268 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8008264:	2303      	movs	r3, #3
 8008266:	e081      	b.n	800836c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008268:	4b43      	ldr	r3, [pc, #268]	; (8008378 <HAL_RCC_ClockConfig+0x23c>)
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	220c      	movs	r2, #12
 800826e:	4013      	ands	r3, r2
 8008270:	2b0c      	cmp	r3, #12
 8008272:	d1ef      	bne.n	8008254 <HAL_RCC_ClockConfig+0x118>
 8008274:	e024      	b.n	80082c0 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d11b      	bne.n	80082b6 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800827e:	e009      	b.n	8008294 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008280:	f7fe f8f2 	bl	8006468 <HAL_GetTick>
 8008284:	0002      	movs	r2, r0
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	4a3c      	ldr	r2, [pc, #240]	; (800837c <HAL_RCC_ClockConfig+0x240>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d901      	bls.n	8008294 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8008290:	2303      	movs	r3, #3
 8008292:	e06b      	b.n	800836c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008294:	4b38      	ldr	r3, [pc, #224]	; (8008378 <HAL_RCC_ClockConfig+0x23c>)
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	220c      	movs	r2, #12
 800829a:	4013      	ands	r3, r2
 800829c:	2b04      	cmp	r3, #4
 800829e:	d1ef      	bne.n	8008280 <HAL_RCC_ClockConfig+0x144>
 80082a0:	e00e      	b.n	80082c0 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082a2:	f7fe f8e1 	bl	8006468 <HAL_GetTick>
 80082a6:	0002      	movs	r2, r0
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	4a33      	ldr	r2, [pc, #204]	; (800837c <HAL_RCC_ClockConfig+0x240>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d901      	bls.n	80082b6 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80082b2:	2303      	movs	r3, #3
 80082b4:	e05a      	b.n	800836c <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80082b6:	4b30      	ldr	r3, [pc, #192]	; (8008378 <HAL_RCC_ClockConfig+0x23c>)
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	220c      	movs	r2, #12
 80082bc:	4013      	ands	r3, r2
 80082be:	d1f0      	bne.n	80082a2 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80082c0:	4b2c      	ldr	r3, [pc, #176]	; (8008374 <HAL_RCC_ClockConfig+0x238>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2201      	movs	r2, #1
 80082c6:	4013      	ands	r3, r2
 80082c8:	683a      	ldr	r2, [r7, #0]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d211      	bcs.n	80082f2 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082ce:	4b29      	ldr	r3, [pc, #164]	; (8008374 <HAL_RCC_ClockConfig+0x238>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2201      	movs	r2, #1
 80082d4:	4393      	bics	r3, r2
 80082d6:	0019      	movs	r1, r3
 80082d8:	4b26      	ldr	r3, [pc, #152]	; (8008374 <HAL_RCC_ClockConfig+0x238>)
 80082da:	683a      	ldr	r2, [r7, #0]
 80082dc:	430a      	orrs	r2, r1
 80082de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082e0:	4b24      	ldr	r3, [pc, #144]	; (8008374 <HAL_RCC_ClockConfig+0x238>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2201      	movs	r2, #1
 80082e6:	4013      	ands	r3, r2
 80082e8:	683a      	ldr	r2, [r7, #0]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d001      	beq.n	80082f2 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	e03c      	b.n	800836c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2204      	movs	r2, #4
 80082f8:	4013      	ands	r3, r2
 80082fa:	d009      	beq.n	8008310 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80082fc:	4b1e      	ldr	r3, [pc, #120]	; (8008378 <HAL_RCC_ClockConfig+0x23c>)
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	4a1f      	ldr	r2, [pc, #124]	; (8008380 <HAL_RCC_ClockConfig+0x244>)
 8008302:	4013      	ands	r3, r2
 8008304:	0019      	movs	r1, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	68da      	ldr	r2, [r3, #12]
 800830a:	4b1b      	ldr	r3, [pc, #108]	; (8008378 <HAL_RCC_ClockConfig+0x23c>)
 800830c:	430a      	orrs	r2, r1
 800830e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2208      	movs	r2, #8
 8008316:	4013      	ands	r3, r2
 8008318:	d00a      	beq.n	8008330 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800831a:	4b17      	ldr	r3, [pc, #92]	; (8008378 <HAL_RCC_ClockConfig+0x23c>)
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	4a19      	ldr	r2, [pc, #100]	; (8008384 <HAL_RCC_ClockConfig+0x248>)
 8008320:	4013      	ands	r3, r2
 8008322:	0019      	movs	r1, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	00da      	lsls	r2, r3, #3
 800832a:	4b13      	ldr	r3, [pc, #76]	; (8008378 <HAL_RCC_ClockConfig+0x23c>)
 800832c:	430a      	orrs	r2, r1
 800832e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008330:	f000 f82e 	bl	8008390 <HAL_RCC_GetSysClockFreq>
 8008334:	0001      	movs	r1, r0
 8008336:	4b10      	ldr	r3, [pc, #64]	; (8008378 <HAL_RCC_ClockConfig+0x23c>)
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	091b      	lsrs	r3, r3, #4
 800833c:	220f      	movs	r2, #15
 800833e:	4013      	ands	r3, r2
 8008340:	4a11      	ldr	r2, [pc, #68]	; (8008388 <HAL_RCC_ClockConfig+0x24c>)
 8008342:	5cd3      	ldrb	r3, [r2, r3]
 8008344:	000a      	movs	r2, r1
 8008346:	40da      	lsrs	r2, r3
 8008348:	4b10      	ldr	r3, [pc, #64]	; (800838c <HAL_RCC_ClockConfig+0x250>)
 800834a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 800834c:	250b      	movs	r5, #11
 800834e:	197c      	adds	r4, r7, r5
 8008350:	2000      	movs	r0, #0
 8008352:	f7fe f853 	bl	80063fc <HAL_InitTick>
 8008356:	0003      	movs	r3, r0
 8008358:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800835a:	197b      	adds	r3, r7, r5
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d003      	beq.n	800836a <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8008362:	230b      	movs	r3, #11
 8008364:	18fb      	adds	r3, r7, r3
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	e000      	b.n	800836c <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	0018      	movs	r0, r3
 800836e:	46bd      	mov	sp, r7
 8008370:	b004      	add	sp, #16
 8008372:	bdb0      	pop	{r4, r5, r7, pc}
 8008374:	40022000 	.word	0x40022000
 8008378:	40021000 	.word	0x40021000
 800837c:	00001388 	.word	0x00001388
 8008380:	fffff8ff 	.word	0xfffff8ff
 8008384:	ffffc7ff 	.word	0xffffc7ff
 8008388:	0800bebc 	.word	0x0800bebc
 800838c:	20000010 	.word	0x20000010

08008390 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b086      	sub	sp, #24
 8008394:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8008396:	4b3b      	ldr	r3, [pc, #236]	; (8008484 <HAL_RCC_GetSysClockFreq+0xf4>)
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	220c      	movs	r2, #12
 80083a0:	4013      	ands	r3, r2
 80083a2:	2b08      	cmp	r3, #8
 80083a4:	d00e      	beq.n	80083c4 <HAL_RCC_GetSysClockFreq+0x34>
 80083a6:	2b0c      	cmp	r3, #12
 80083a8:	d00f      	beq.n	80083ca <HAL_RCC_GetSysClockFreq+0x3a>
 80083aa:	2b04      	cmp	r3, #4
 80083ac:	d157      	bne.n	800845e <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80083ae:	4b35      	ldr	r3, [pc, #212]	; (8008484 <HAL_RCC_GetSysClockFreq+0xf4>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2210      	movs	r2, #16
 80083b4:	4013      	ands	r3, r2
 80083b6:	d002      	beq.n	80083be <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80083b8:	4b33      	ldr	r3, [pc, #204]	; (8008488 <HAL_RCC_GetSysClockFreq+0xf8>)
 80083ba:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80083bc:	e05d      	b.n	800847a <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80083be:	4b33      	ldr	r3, [pc, #204]	; (800848c <HAL_RCC_GetSysClockFreq+0xfc>)
 80083c0:	613b      	str	r3, [r7, #16]
      break;
 80083c2:	e05a      	b.n	800847a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80083c4:	4b32      	ldr	r3, [pc, #200]	; (8008490 <HAL_RCC_GetSysClockFreq+0x100>)
 80083c6:	613b      	str	r3, [r7, #16]
      break;
 80083c8:	e057      	b.n	800847a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	0c9b      	lsrs	r3, r3, #18
 80083ce:	220f      	movs	r2, #15
 80083d0:	4013      	ands	r3, r2
 80083d2:	4a30      	ldr	r2, [pc, #192]	; (8008494 <HAL_RCC_GetSysClockFreq+0x104>)
 80083d4:	5cd3      	ldrb	r3, [r2, r3]
 80083d6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	0d9b      	lsrs	r3, r3, #22
 80083dc:	2203      	movs	r2, #3
 80083de:	4013      	ands	r3, r2
 80083e0:	3301      	adds	r3, #1
 80083e2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80083e4:	4b27      	ldr	r3, [pc, #156]	; (8008484 <HAL_RCC_GetSysClockFreq+0xf4>)
 80083e6:	68da      	ldr	r2, [r3, #12]
 80083e8:	2380      	movs	r3, #128	; 0x80
 80083ea:	025b      	lsls	r3, r3, #9
 80083ec:	4013      	ands	r3, r2
 80083ee:	d00f      	beq.n	8008410 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80083f0:	68b9      	ldr	r1, [r7, #8]
 80083f2:	000a      	movs	r2, r1
 80083f4:	0152      	lsls	r2, r2, #5
 80083f6:	1a52      	subs	r2, r2, r1
 80083f8:	0193      	lsls	r3, r2, #6
 80083fa:	1a9b      	subs	r3, r3, r2
 80083fc:	00db      	lsls	r3, r3, #3
 80083fe:	185b      	adds	r3, r3, r1
 8008400:	025b      	lsls	r3, r3, #9
 8008402:	6879      	ldr	r1, [r7, #4]
 8008404:	0018      	movs	r0, r3
 8008406:	f7f7 fe87 	bl	8000118 <__udivsi3>
 800840a:	0003      	movs	r3, r0
 800840c:	617b      	str	r3, [r7, #20]
 800840e:	e023      	b.n	8008458 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8008410:	4b1c      	ldr	r3, [pc, #112]	; (8008484 <HAL_RCC_GetSysClockFreq+0xf4>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2210      	movs	r2, #16
 8008416:	4013      	ands	r3, r2
 8008418:	d00f      	beq.n	800843a <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800841a:	68b9      	ldr	r1, [r7, #8]
 800841c:	000a      	movs	r2, r1
 800841e:	0152      	lsls	r2, r2, #5
 8008420:	1a52      	subs	r2, r2, r1
 8008422:	0193      	lsls	r3, r2, #6
 8008424:	1a9b      	subs	r3, r3, r2
 8008426:	00db      	lsls	r3, r3, #3
 8008428:	185b      	adds	r3, r3, r1
 800842a:	021b      	lsls	r3, r3, #8
 800842c:	6879      	ldr	r1, [r7, #4]
 800842e:	0018      	movs	r0, r3
 8008430:	f7f7 fe72 	bl	8000118 <__udivsi3>
 8008434:	0003      	movs	r3, r0
 8008436:	617b      	str	r3, [r7, #20]
 8008438:	e00e      	b.n	8008458 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800843a:	68b9      	ldr	r1, [r7, #8]
 800843c:	000a      	movs	r2, r1
 800843e:	0152      	lsls	r2, r2, #5
 8008440:	1a52      	subs	r2, r2, r1
 8008442:	0193      	lsls	r3, r2, #6
 8008444:	1a9b      	subs	r3, r3, r2
 8008446:	00db      	lsls	r3, r3, #3
 8008448:	185b      	adds	r3, r3, r1
 800844a:	029b      	lsls	r3, r3, #10
 800844c:	6879      	ldr	r1, [r7, #4]
 800844e:	0018      	movs	r0, r3
 8008450:	f7f7 fe62 	bl	8000118 <__udivsi3>
 8008454:	0003      	movs	r3, r0
 8008456:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	613b      	str	r3, [r7, #16]
      break;
 800845c:	e00d      	b.n	800847a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800845e:	4b09      	ldr	r3, [pc, #36]	; (8008484 <HAL_RCC_GetSysClockFreq+0xf4>)
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	0b5b      	lsrs	r3, r3, #13
 8008464:	2207      	movs	r2, #7
 8008466:	4013      	ands	r3, r2
 8008468:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	3301      	adds	r3, #1
 800846e:	2280      	movs	r2, #128	; 0x80
 8008470:	0212      	lsls	r2, r2, #8
 8008472:	409a      	lsls	r2, r3
 8008474:	0013      	movs	r3, r2
 8008476:	613b      	str	r3, [r7, #16]
      break;
 8008478:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800847a:	693b      	ldr	r3, [r7, #16]
}
 800847c:	0018      	movs	r0, r3
 800847e:	46bd      	mov	sp, r7
 8008480:	b006      	add	sp, #24
 8008482:	bd80      	pop	{r7, pc}
 8008484:	40021000 	.word	0x40021000
 8008488:	003d0900 	.word	0x003d0900
 800848c:	00f42400 	.word	0x00f42400
 8008490:	007a1200 	.word	0x007a1200
 8008494:	0800becc 	.word	0x0800becc

08008498 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b086      	sub	sp, #24
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2220      	movs	r2, #32
 80084a6:	4013      	ands	r3, r2
 80084a8:	d106      	bne.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	2380      	movs	r3, #128	; 0x80
 80084b0:	011b      	lsls	r3, r3, #4
 80084b2:	4013      	ands	r3, r2
 80084b4:	d100      	bne.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x20>
 80084b6:	e0dd      	b.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80084b8:	2317      	movs	r3, #23
 80084ba:	18fb      	adds	r3, r7, r3
 80084bc:	2200      	movs	r2, #0
 80084be:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80084c0:	4ba4      	ldr	r3, [pc, #656]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80084c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084c4:	2380      	movs	r3, #128	; 0x80
 80084c6:	055b      	lsls	r3, r3, #21
 80084c8:	4013      	ands	r3, r2
 80084ca:	d10a      	bne.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80084cc:	4ba1      	ldr	r3, [pc, #644]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80084ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084d0:	4ba0      	ldr	r3, [pc, #640]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80084d2:	2180      	movs	r1, #128	; 0x80
 80084d4:	0549      	lsls	r1, r1, #21
 80084d6:	430a      	orrs	r2, r1
 80084d8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80084da:	2317      	movs	r3, #23
 80084dc:	18fb      	adds	r3, r7, r3
 80084de:	2201      	movs	r2, #1
 80084e0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084e2:	4b9d      	ldr	r3, [pc, #628]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	2380      	movs	r3, #128	; 0x80
 80084e8:	005b      	lsls	r3, r3, #1
 80084ea:	4013      	ands	r3, r2
 80084ec:	d11a      	bne.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80084ee:	4b9a      	ldr	r3, [pc, #616]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	4b99      	ldr	r3, [pc, #612]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80084f4:	2180      	movs	r1, #128	; 0x80
 80084f6:	0049      	lsls	r1, r1, #1
 80084f8:	430a      	orrs	r2, r1
 80084fa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80084fc:	f7fd ffb4 	bl	8006468 <HAL_GetTick>
 8008500:	0003      	movs	r3, r0
 8008502:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008504:	e008      	b.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008506:	f7fd ffaf 	bl	8006468 <HAL_GetTick>
 800850a:	0002      	movs	r2, r0
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	1ad3      	subs	r3, r2, r3
 8008510:	2b64      	cmp	r3, #100	; 0x64
 8008512:	d901      	bls.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008514:	2303      	movs	r3, #3
 8008516:	e118      	b.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008518:	4b8f      	ldr	r3, [pc, #572]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	2380      	movs	r3, #128	; 0x80
 800851e:	005b      	lsls	r3, r3, #1
 8008520:	4013      	ands	r3, r2
 8008522:	d0f0      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8008524:	4b8b      	ldr	r3, [pc, #556]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	23c0      	movs	r3, #192	; 0xc0
 800852a:	039b      	lsls	r3, r3, #14
 800852c:	4013      	ands	r3, r2
 800852e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	685a      	ldr	r2, [r3, #4]
 8008534:	23c0      	movs	r3, #192	; 0xc0
 8008536:	039b      	lsls	r3, r3, #14
 8008538:	4013      	ands	r3, r2
 800853a:	68fa      	ldr	r2, [r7, #12]
 800853c:	429a      	cmp	r2, r3
 800853e:	d107      	bne.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	689a      	ldr	r2, [r3, #8]
 8008544:	23c0      	movs	r3, #192	; 0xc0
 8008546:	039b      	lsls	r3, r3, #14
 8008548:	4013      	ands	r3, r2
 800854a:	68fa      	ldr	r2, [r7, #12]
 800854c:	429a      	cmp	r2, r3
 800854e:	d013      	beq.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	685a      	ldr	r2, [r3, #4]
 8008554:	23c0      	movs	r3, #192	; 0xc0
 8008556:	029b      	lsls	r3, r3, #10
 8008558:	401a      	ands	r2, r3
 800855a:	23c0      	movs	r3, #192	; 0xc0
 800855c:	029b      	lsls	r3, r3, #10
 800855e:	429a      	cmp	r2, r3
 8008560:	d10a      	bne.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008562:	4b7c      	ldr	r3, [pc, #496]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	2380      	movs	r3, #128	; 0x80
 8008568:	029b      	lsls	r3, r3, #10
 800856a:	401a      	ands	r2, r3
 800856c:	2380      	movs	r3, #128	; 0x80
 800856e:	029b      	lsls	r3, r3, #10
 8008570:	429a      	cmp	r2, r3
 8008572:	d101      	bne.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	e0e8      	b.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8008578:	4b76      	ldr	r3, [pc, #472]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800857a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800857c:	23c0      	movs	r3, #192	; 0xc0
 800857e:	029b      	lsls	r3, r3, #10
 8008580:	4013      	ands	r3, r2
 8008582:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d049      	beq.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x186>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	685a      	ldr	r2, [r3, #4]
 800858e:	23c0      	movs	r3, #192	; 0xc0
 8008590:	029b      	lsls	r3, r3, #10
 8008592:	4013      	ands	r3, r2
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	429a      	cmp	r2, r3
 8008598:	d004      	beq.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2220      	movs	r2, #32
 80085a0:	4013      	ands	r3, r2
 80085a2:	d10d      	bne.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	689a      	ldr	r2, [r3, #8]
 80085a8:	23c0      	movs	r3, #192	; 0xc0
 80085aa:	029b      	lsls	r3, r3, #10
 80085ac:	4013      	ands	r3, r2
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d034      	beq.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	2380      	movs	r3, #128	; 0x80
 80085ba:	011b      	lsls	r3, r3, #4
 80085bc:	4013      	ands	r3, r2
 80085be:	d02e      	beq.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80085c0:	4b64      	ldr	r3, [pc, #400]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80085c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085c4:	4a65      	ldr	r2, [pc, #404]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80085c6:	4013      	ands	r3, r2
 80085c8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80085ca:	4b62      	ldr	r3, [pc, #392]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80085cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085ce:	4b61      	ldr	r3, [pc, #388]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80085d0:	2180      	movs	r1, #128	; 0x80
 80085d2:	0309      	lsls	r1, r1, #12
 80085d4:	430a      	orrs	r2, r1
 80085d6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80085d8:	4b5e      	ldr	r3, [pc, #376]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80085da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085dc:	4b5d      	ldr	r3, [pc, #372]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80085de:	4960      	ldr	r1, [pc, #384]	; (8008760 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80085e0:	400a      	ands	r2, r1
 80085e2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80085e4:	4b5b      	ldr	r3, [pc, #364]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	2380      	movs	r3, #128	; 0x80
 80085ee:	005b      	lsls	r3, r3, #1
 80085f0:	4013      	ands	r3, r2
 80085f2:	d014      	beq.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085f4:	f7fd ff38 	bl	8006468 <HAL_GetTick>
 80085f8:	0003      	movs	r3, r0
 80085fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085fc:	e009      	b.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085fe:	f7fd ff33 	bl	8006468 <HAL_GetTick>
 8008602:	0002      	movs	r2, r0
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	1ad3      	subs	r3, r2, r3
 8008608:	4a56      	ldr	r2, [pc, #344]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d901      	bls.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800860e:	2303      	movs	r3, #3
 8008610:	e09b      	b.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008612:	4b50      	ldr	r3, [pc, #320]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008614:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008616:	2380      	movs	r3, #128	; 0x80
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	4013      	ands	r3, r2
 800861c:	d0ef      	beq.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	685a      	ldr	r2, [r3, #4]
 8008622:	23c0      	movs	r3, #192	; 0xc0
 8008624:	029b      	lsls	r3, r3, #10
 8008626:	401a      	ands	r2, r3
 8008628:	23c0      	movs	r3, #192	; 0xc0
 800862a:	029b      	lsls	r3, r3, #10
 800862c:	429a      	cmp	r2, r3
 800862e:	d10c      	bne.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8008630:	4b48      	ldr	r3, [pc, #288]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a4c      	ldr	r2, [pc, #304]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8008636:	4013      	ands	r3, r2
 8008638:	0019      	movs	r1, r3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	685a      	ldr	r2, [r3, #4]
 800863e:	23c0      	movs	r3, #192	; 0xc0
 8008640:	039b      	lsls	r3, r3, #14
 8008642:	401a      	ands	r2, r3
 8008644:	4b43      	ldr	r3, [pc, #268]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008646:	430a      	orrs	r2, r1
 8008648:	601a      	str	r2, [r3, #0]
 800864a:	4b42      	ldr	r3, [pc, #264]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800864c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	685a      	ldr	r2, [r3, #4]
 8008652:	23c0      	movs	r3, #192	; 0xc0
 8008654:	029b      	lsls	r3, r3, #10
 8008656:	401a      	ands	r2, r3
 8008658:	4b3e      	ldr	r3, [pc, #248]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800865a:	430a      	orrs	r2, r1
 800865c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800865e:	2317      	movs	r3, #23
 8008660:	18fb      	adds	r3, r7, r3
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	2b01      	cmp	r3, #1
 8008666:	d105      	bne.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008668:	4b3a      	ldr	r3, [pc, #232]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800866a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800866c:	4b39      	ldr	r3, [pc, #228]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800866e:	493f      	ldr	r1, [pc, #252]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008670:	400a      	ands	r2, r1
 8008672:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2201      	movs	r2, #1
 800867a:	4013      	ands	r3, r2
 800867c:	d009      	beq.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800867e:	4b35      	ldr	r3, [pc, #212]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008682:	2203      	movs	r2, #3
 8008684:	4393      	bics	r3, r2
 8008686:	0019      	movs	r1, r3
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	68da      	ldr	r2, [r3, #12]
 800868c:	4b31      	ldr	r3, [pc, #196]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800868e:	430a      	orrs	r2, r1
 8008690:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2202      	movs	r2, #2
 8008698:	4013      	ands	r3, r2
 800869a:	d009      	beq.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800869c:	4b2d      	ldr	r3, [pc, #180]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800869e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086a0:	220c      	movs	r2, #12
 80086a2:	4393      	bics	r3, r2
 80086a4:	0019      	movs	r1, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	691a      	ldr	r2, [r3, #16]
 80086aa:	4b2a      	ldr	r3, [pc, #168]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80086ac:	430a      	orrs	r2, r1
 80086ae:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2204      	movs	r2, #4
 80086b6:	4013      	ands	r3, r2
 80086b8:	d009      	beq.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80086ba:	4b26      	ldr	r3, [pc, #152]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80086bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086be:	4a2c      	ldr	r2, [pc, #176]	; (8008770 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80086c0:	4013      	ands	r3, r2
 80086c2:	0019      	movs	r1, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	695a      	ldr	r2, [r3, #20]
 80086c8:	4b22      	ldr	r3, [pc, #136]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80086ca:	430a      	orrs	r2, r1
 80086cc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2208      	movs	r2, #8
 80086d4:	4013      	ands	r3, r2
 80086d6:	d009      	beq.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80086d8:	4b1e      	ldr	r3, [pc, #120]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80086da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086dc:	4a25      	ldr	r2, [pc, #148]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80086de:	4013      	ands	r3, r2
 80086e0:	0019      	movs	r1, r3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	699a      	ldr	r2, [r3, #24]
 80086e6:	4b1b      	ldr	r3, [pc, #108]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80086e8:	430a      	orrs	r2, r1
 80086ea:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	2380      	movs	r3, #128	; 0x80
 80086f2:	005b      	lsls	r3, r3, #1
 80086f4:	4013      	ands	r3, r2
 80086f6:	d009      	beq.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80086f8:	4b16      	ldr	r3, [pc, #88]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80086fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086fc:	4a17      	ldr	r2, [pc, #92]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80086fe:	4013      	ands	r3, r2
 8008700:	0019      	movs	r1, r3
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	69da      	ldr	r2, [r3, #28]
 8008706:	4b13      	ldr	r3, [pc, #76]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008708:	430a      	orrs	r2, r1
 800870a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2240      	movs	r2, #64	; 0x40
 8008712:	4013      	ands	r3, r2
 8008714:	d009      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008716:	4b0f      	ldr	r3, [pc, #60]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800871a:	4a17      	ldr	r2, [pc, #92]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800871c:	4013      	ands	r3, r2
 800871e:	0019      	movs	r1, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008724:	4b0b      	ldr	r3, [pc, #44]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008726:	430a      	orrs	r2, r1
 8008728:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2280      	movs	r2, #128	; 0x80
 8008730:	4013      	ands	r3, r2
 8008732:	d009      	beq.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8008734:	4b07      	ldr	r3, [pc, #28]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008738:	4a10      	ldr	r2, [pc, #64]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800873a:	4013      	ands	r3, r2
 800873c:	0019      	movs	r1, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6a1a      	ldr	r2, [r3, #32]
 8008742:	4b04      	ldr	r3, [pc, #16]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008744:	430a      	orrs	r2, r1
 8008746:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	0018      	movs	r0, r3
 800874c:	46bd      	mov	sp, r7
 800874e:	b006      	add	sp, #24
 8008750:	bd80      	pop	{r7, pc}
 8008752:	46c0      	nop			; (mov r8, r8)
 8008754:	40021000 	.word	0x40021000
 8008758:	40007000 	.word	0x40007000
 800875c:	fffcffff 	.word	0xfffcffff
 8008760:	fff7ffff 	.word	0xfff7ffff
 8008764:	00001388 	.word	0x00001388
 8008768:	ffcfffff 	.word	0xffcfffff
 800876c:	efffffff 	.word	0xefffffff
 8008770:	fffff3ff 	.word	0xfffff3ff
 8008774:	ffffcfff 	.word	0xffffcfff
 8008778:	fbffffff 	.word	0xfbffffff
 800877c:	fff3ffff 	.word	0xfff3ffff

08008780 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d101      	bne.n	8008792 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	e08e      	b.n	80088b0 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2221      	movs	r2, #33	; 0x21
 8008796:	5c9b      	ldrb	r3, [r3, r2]
 8008798:	b2db      	uxtb	r3, r3
 800879a:	2b00      	cmp	r3, #0
 800879c:	d107      	bne.n	80087ae <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2220      	movs	r2, #32
 80087a2:	2100      	movs	r1, #0
 80087a4:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	0018      	movs	r0, r3
 80087aa:	f7fb fc35 	bl	8004018 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2221      	movs	r2, #33	; 0x21
 80087b2:	2102      	movs	r1, #2
 80087b4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	22ca      	movs	r2, #202	; 0xca
 80087bc:	625a      	str	r2, [r3, #36]	; 0x24
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2253      	movs	r2, #83	; 0x53
 80087c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	0018      	movs	r0, r3
 80087ca:	f000 fcf4 	bl	80091b6 <RTC_EnterInitMode>
 80087ce:	1e03      	subs	r3, r0, #0
 80087d0:	d009      	beq.n	80087e6 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	22ff      	movs	r2, #255	; 0xff
 80087d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2221      	movs	r2, #33	; 0x21
 80087de:	2104      	movs	r1, #4
 80087e0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	e064      	b.n	80088b0 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	689a      	ldr	r2, [r3, #8]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4931      	ldr	r1, [pc, #196]	; (80088b8 <HAL_RTC_Init+0x138>)
 80087f2:	400a      	ands	r2, r1
 80087f4:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	6899      	ldr	r1, [r3, #8]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685a      	ldr	r2, [r3, #4]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	431a      	orrs	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	699b      	ldr	r3, [r3, #24]
 800880a:	431a      	orrs	r2, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	430a      	orrs	r2, r1
 8008812:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	68d2      	ldr	r2, [r2, #12]
 800881c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	6919      	ldr	r1, [r3, #16]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	041a      	lsls	r2, r3, #16
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	430a      	orrs	r2, r1
 8008830:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68da      	ldr	r2, [r3, #12]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2180      	movs	r1, #128	; 0x80
 800883e:	438a      	bics	r2, r1
 8008840:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2103      	movs	r1, #3
 800884e:	438a      	bics	r2, r1
 8008850:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	69da      	ldr	r2, [r3, #28]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	695b      	ldr	r3, [r3, #20]
 8008860:	431a      	orrs	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	430a      	orrs	r2, r1
 8008868:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	2220      	movs	r2, #32
 8008872:	4013      	ands	r3, r2
 8008874:	d113      	bne.n	800889e <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	0018      	movs	r0, r3
 800887a:	f000 fc75 	bl	8009168 <HAL_RTC_WaitForSynchro>
 800887e:	1e03      	subs	r3, r0, #0
 8008880:	d00d      	beq.n	800889e <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	22ff      	movs	r2, #255	; 0xff
 8008888:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2221      	movs	r2, #33	; 0x21
 800888e:	2104      	movs	r1, #4
 8008890:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2220      	movs	r2, #32
 8008896:	2100      	movs	r1, #0
 8008898:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e008      	b.n	80088b0 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	22ff      	movs	r2, #255	; 0xff
 80088a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2221      	movs	r2, #33	; 0x21
 80088aa:	2101      	movs	r1, #1
 80088ac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80088ae:	2300      	movs	r3, #0
  }
}
 80088b0:	0018      	movs	r0, r3
 80088b2:	46bd      	mov	sp, r7
 80088b4:	b002      	add	sp, #8
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	ff8fffbf 	.word	0xff8fffbf

080088bc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80088bc:	b590      	push	{r4, r7, lr}
 80088be:	b087      	sub	sp, #28
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2220      	movs	r2, #32
 80088cc:	5c9b      	ldrb	r3, [r3, r2]
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d101      	bne.n	80088d6 <HAL_RTC_SetTime+0x1a>
 80088d2:	2302      	movs	r3, #2
 80088d4:	e0ad      	b.n	8008a32 <HAL_RTC_SetTime+0x176>
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2220      	movs	r2, #32
 80088da:	2101      	movs	r1, #1
 80088dc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2221      	movs	r2, #33	; 0x21
 80088e2:	2102      	movs	r1, #2
 80088e4:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d125      	bne.n	8008938 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	2240      	movs	r2, #64	; 0x40
 80088f4:	4013      	ands	r3, r2
 80088f6:	d102      	bne.n	80088fe <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	2200      	movs	r2, #0
 80088fc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	0018      	movs	r0, r3
 8008904:	f000 fc81 	bl	800920a <RTC_ByteToBcd2>
 8008908:	0003      	movs	r3, r0
 800890a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	785b      	ldrb	r3, [r3, #1]
 8008910:	0018      	movs	r0, r3
 8008912:	f000 fc7a 	bl	800920a <RTC_ByteToBcd2>
 8008916:	0003      	movs	r3, r0
 8008918:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800891a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	789b      	ldrb	r3, [r3, #2]
 8008920:	0018      	movs	r0, r3
 8008922:	f000 fc72 	bl	800920a <RTC_ByteToBcd2>
 8008926:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008928:	0022      	movs	r2, r4
 800892a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	78db      	ldrb	r3, [r3, #3]
 8008930:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008932:	4313      	orrs	r3, r2
 8008934:	617b      	str	r3, [r7, #20]
 8008936:	e017      	b.n	8008968 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	2240      	movs	r2, #64	; 0x40
 8008940:	4013      	ands	r3, r2
 8008942:	d102      	bne.n	800894a <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	2200      	movs	r2, #0
 8008948:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	785b      	ldrb	r3, [r3, #1]
 8008954:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008956:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800895c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	78db      	ldrb	r3, [r3, #3]
 8008962:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008964:	4313      	orrs	r3, r2
 8008966:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	22ca      	movs	r2, #202	; 0xca
 800896e:	625a      	str	r2, [r3, #36]	; 0x24
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2253      	movs	r2, #83	; 0x53
 8008976:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	0018      	movs	r0, r3
 800897c:	f000 fc1b 	bl	80091b6 <RTC_EnterInitMode>
 8008980:	1e03      	subs	r3, r0, #0
 8008982:	d00d      	beq.n	80089a0 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	22ff      	movs	r2, #255	; 0xff
 800898a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2221      	movs	r2, #33	; 0x21
 8008990:	2104      	movs	r1, #4
 8008992:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2220      	movs	r2, #32
 8008998:	2100      	movs	r1, #0
 800899a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	e048      	b.n	8008a32 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	697a      	ldr	r2, [r7, #20]
 80089a6:	4925      	ldr	r1, [pc, #148]	; (8008a3c <HAL_RTC_SetTime+0x180>)
 80089a8:	400a      	ands	r2, r1
 80089aa:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	689a      	ldr	r2, [r3, #8]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4922      	ldr	r1, [pc, #136]	; (8008a40 <HAL_RTC_SetTime+0x184>)
 80089b8:	400a      	ands	r2, r1
 80089ba:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6899      	ldr	r1, [r3, #8]
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	68da      	ldr	r2, [r3, #12]
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	431a      	orrs	r2, r3
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	430a      	orrs	r2, r1
 80089d2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68da      	ldr	r2, [r3, #12]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	2180      	movs	r1, #128	; 0x80
 80089e0:	438a      	bics	r2, r1
 80089e2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	2220      	movs	r2, #32
 80089ec:	4013      	ands	r3, r2
 80089ee:	d113      	bne.n	8008a18 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	0018      	movs	r0, r3
 80089f4:	f000 fbb8 	bl	8009168 <HAL_RTC_WaitForSynchro>
 80089f8:	1e03      	subs	r3, r0, #0
 80089fa:	d00d      	beq.n	8008a18 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	22ff      	movs	r2, #255	; 0xff
 8008a02:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2221      	movs	r2, #33	; 0x21
 8008a08:	2104      	movs	r1, #4
 8008a0a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2220      	movs	r2, #32
 8008a10:	2100      	movs	r1, #0
 8008a12:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	e00c      	b.n	8008a32 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	22ff      	movs	r2, #255	; 0xff
 8008a1e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2221      	movs	r2, #33	; 0x21
 8008a24:	2101      	movs	r1, #1
 8008a26:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2220      	movs	r2, #32
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008a30:	2300      	movs	r3, #0
  }
}
 8008a32:	0018      	movs	r0, r3
 8008a34:	46bd      	mov	sp, r7
 8008a36:	b007      	add	sp, #28
 8008a38:	bd90      	pop	{r4, r7, pc}
 8008a3a:	46c0      	nop			; (mov r8, r8)
 8008a3c:	007f7f7f 	.word	0x007f7f7f
 8008a40:	fffbffff 	.word	0xfffbffff

08008a44 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b086      	sub	sp, #24
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	691b      	ldr	r3, [r3, #16]
 8008a60:	045b      	lsls	r3, r3, #17
 8008a62:	0c5a      	lsrs	r2, r3, #17
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a22      	ldr	r2, [pc, #136]	; (8008af8 <HAL_RTC_GetTime+0xb4>)
 8008a70:	4013      	ands	r3, r2
 8008a72:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	0c1b      	lsrs	r3, r3, #16
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	223f      	movs	r2, #63	; 0x3f
 8008a7c:	4013      	ands	r3, r2
 8008a7e:	b2da      	uxtb	r2, r3
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	0a1b      	lsrs	r3, r3, #8
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	227f      	movs	r2, #127	; 0x7f
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	b2da      	uxtb	r2, r3
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	227f      	movs	r2, #127	; 0x7f
 8008a9a:	4013      	ands	r3, r2
 8008a9c:	b2da      	uxtb	r2, r3
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	0c1b      	lsrs	r3, r3, #16
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	2240      	movs	r2, #64	; 0x40
 8008aaa:	4013      	ands	r3, r2
 8008aac:	b2da      	uxtb	r2, r3
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d11a      	bne.n	8008aee <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	0018      	movs	r0, r3
 8008abe:	f000 fbcd 	bl	800925c <RTC_Bcd2ToByte>
 8008ac2:	0003      	movs	r3, r0
 8008ac4:	001a      	movs	r2, r3
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	785b      	ldrb	r3, [r3, #1]
 8008ace:	0018      	movs	r0, r3
 8008ad0:	f000 fbc4 	bl	800925c <RTC_Bcd2ToByte>
 8008ad4:	0003      	movs	r3, r0
 8008ad6:	001a      	movs	r2, r3
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	789b      	ldrb	r3, [r3, #2]
 8008ae0:	0018      	movs	r0, r3
 8008ae2:	f000 fbbb 	bl	800925c <RTC_Bcd2ToByte>
 8008ae6:	0003      	movs	r3, r0
 8008ae8:	001a      	movs	r2, r3
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	0018      	movs	r0, r3
 8008af2:	46bd      	mov	sp, r7
 8008af4:	b006      	add	sp, #24
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	007f7f7f 	.word	0x007f7f7f

08008afc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008afc:	b590      	push	{r4, r7, lr}
 8008afe:	b087      	sub	sp, #28
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2220      	movs	r2, #32
 8008b0c:	5c9b      	ldrb	r3, [r3, r2]
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d101      	bne.n	8008b16 <HAL_RTC_SetDate+0x1a>
 8008b12:	2302      	movs	r3, #2
 8008b14:	e099      	b.n	8008c4a <HAL_RTC_SetDate+0x14e>
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2220      	movs	r2, #32
 8008b1a:	2101      	movs	r1, #1
 8008b1c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2221      	movs	r2, #33	; 0x21
 8008b22:	2102      	movs	r1, #2
 8008b24:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d10e      	bne.n	8008b4a <HAL_RTC_SetDate+0x4e>
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	785b      	ldrb	r3, [r3, #1]
 8008b30:	001a      	movs	r2, r3
 8008b32:	2310      	movs	r3, #16
 8008b34:	4013      	ands	r3, r2
 8008b36:	d008      	beq.n	8008b4a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	785b      	ldrb	r3, [r3, #1]
 8008b3c:	2210      	movs	r2, #16
 8008b3e:	4393      	bics	r3, r2
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	330a      	adds	r3, #10
 8008b44:	b2da      	uxtb	r2, r3
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d11c      	bne.n	8008b8a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	78db      	ldrb	r3, [r3, #3]
 8008b54:	0018      	movs	r0, r3
 8008b56:	f000 fb58 	bl	800920a <RTC_ByteToBcd2>
 8008b5a:	0003      	movs	r3, r0
 8008b5c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	785b      	ldrb	r3, [r3, #1]
 8008b62:	0018      	movs	r0, r3
 8008b64:	f000 fb51 	bl	800920a <RTC_ByteToBcd2>
 8008b68:	0003      	movs	r3, r0
 8008b6a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008b6c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	789b      	ldrb	r3, [r3, #2]
 8008b72:	0018      	movs	r0, r3
 8008b74:	f000 fb49 	bl	800920a <RTC_ByteToBcd2>
 8008b78:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008b7a:	0022      	movs	r2, r4
 8008b7c:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008b84:	4313      	orrs	r3, r2
 8008b86:	617b      	str	r3, [r7, #20]
 8008b88:	e00e      	b.n	8008ba8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	78db      	ldrb	r3, [r3, #3]
 8008b8e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	785b      	ldrb	r3, [r3, #1]
 8008b94:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008b96:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008b98:	68ba      	ldr	r2, [r7, #8]
 8008b9a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8008b9c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	22ca      	movs	r2, #202	; 0xca
 8008bae:	625a      	str	r2, [r3, #36]	; 0x24
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2253      	movs	r2, #83	; 0x53
 8008bb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	0018      	movs	r0, r3
 8008bbc:	f000 fafb 	bl	80091b6 <RTC_EnterInitMode>
 8008bc0:	1e03      	subs	r3, r0, #0
 8008bc2:	d00d      	beq.n	8008be0 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	22ff      	movs	r2, #255	; 0xff
 8008bca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2221      	movs	r2, #33	; 0x21
 8008bd0:	2104      	movs	r1, #4
 8008bd2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2220      	movs	r2, #32
 8008bd8:	2100      	movs	r1, #0
 8008bda:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	e034      	b.n	8008c4a <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	697a      	ldr	r2, [r7, #20]
 8008be6:	491b      	ldr	r1, [pc, #108]	; (8008c54 <HAL_RTC_SetDate+0x158>)
 8008be8:	400a      	ands	r2, r1
 8008bea:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	68da      	ldr	r2, [r3, #12]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2180      	movs	r1, #128	; 0x80
 8008bf8:	438a      	bics	r2, r1
 8008bfa:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	2220      	movs	r2, #32
 8008c04:	4013      	ands	r3, r2
 8008c06:	d113      	bne.n	8008c30 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	0018      	movs	r0, r3
 8008c0c:	f000 faac 	bl	8009168 <HAL_RTC_WaitForSynchro>
 8008c10:	1e03      	subs	r3, r0, #0
 8008c12:	d00d      	beq.n	8008c30 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	22ff      	movs	r2, #255	; 0xff
 8008c1a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2221      	movs	r2, #33	; 0x21
 8008c20:	2104      	movs	r1, #4
 8008c22:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2220      	movs	r2, #32
 8008c28:	2100      	movs	r1, #0
 8008c2a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e00c      	b.n	8008c4a <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	22ff      	movs	r2, #255	; 0xff
 8008c36:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2221      	movs	r2, #33	; 0x21
 8008c3c:	2101      	movs	r1, #1
 8008c3e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2220      	movs	r2, #32
 8008c44:	2100      	movs	r1, #0
 8008c46:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008c48:	2300      	movs	r3, #0
  }
}
 8008c4a:	0018      	movs	r0, r3
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	b007      	add	sp, #28
 8008c50:	bd90      	pop	{r4, r7, pc}
 8008c52:	46c0      	nop			; (mov r8, r8)
 8008c54:	00ffff3f 	.word	0x00ffff3f

08008c58 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b086      	sub	sp, #24
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	4a21      	ldr	r2, [pc, #132]	; (8008cf0 <HAL_RTC_GetDate+0x98>)
 8008c6c:	4013      	ands	r3, r2
 8008c6e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	0c1b      	lsrs	r3, r3, #16
 8008c74:	b2da      	uxtb	r2, r3
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	0a1b      	lsrs	r3, r3, #8
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	221f      	movs	r2, #31
 8008c82:	4013      	ands	r3, r2
 8008c84:	b2da      	uxtb	r2, r3
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	223f      	movs	r2, #63	; 0x3f
 8008c90:	4013      	ands	r3, r2
 8008c92:	b2da      	uxtb	r2, r3
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	0b5b      	lsrs	r3, r3, #13
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	2207      	movs	r2, #7
 8008ca0:	4013      	ands	r3, r2
 8008ca2:	b2da      	uxtb	r2, r3
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d11a      	bne.n	8008ce4 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	78db      	ldrb	r3, [r3, #3]
 8008cb2:	0018      	movs	r0, r3
 8008cb4:	f000 fad2 	bl	800925c <RTC_Bcd2ToByte>
 8008cb8:	0003      	movs	r3, r0
 8008cba:	001a      	movs	r2, r3
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	785b      	ldrb	r3, [r3, #1]
 8008cc4:	0018      	movs	r0, r3
 8008cc6:	f000 fac9 	bl	800925c <RTC_Bcd2ToByte>
 8008cca:	0003      	movs	r3, r0
 8008ccc:	001a      	movs	r2, r3
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	789b      	ldrb	r3, [r3, #2]
 8008cd6:	0018      	movs	r0, r3
 8008cd8:	f000 fac0 	bl	800925c <RTC_Bcd2ToByte>
 8008cdc:	0003      	movs	r3, r0
 8008cde:	001a      	movs	r2, r3
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	0018      	movs	r0, r3
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	b006      	add	sp, #24
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	46c0      	nop			; (mov r8, r8)
 8008cf0:	00ffff3f 	.word	0x00ffff3f

08008cf4 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008cf4:	b590      	push	{r4, r7, lr}
 8008cf6:	b089      	sub	sp, #36	; 0x24
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	60b9      	str	r1, [r7, #8]
 8008cfe:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2220      	movs	r2, #32
 8008d04:	5c9b      	ldrb	r3, [r3, r2]
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d101      	bne.n	8008d0e <HAL_RTC_SetAlarm_IT+0x1a>
 8008d0a:	2302      	movs	r3, #2
 8008d0c:	e130      	b.n	8008f70 <HAL_RTC_SetAlarm_IT+0x27c>
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2220      	movs	r2, #32
 8008d12:	2101      	movs	r1, #1
 8008d14:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2221      	movs	r2, #33	; 0x21
 8008d1a:	2102      	movs	r1, #2
 8008d1c:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d136      	bne.n	8008d92 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	2240      	movs	r2, #64	; 0x40
 8008d2c:	4013      	ands	r3, r2
 8008d2e:	d102      	bne.n	8008d36 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	2200      	movs	r2, #0
 8008d34:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	0018      	movs	r0, r3
 8008d3c:	f000 fa65 	bl	800920a <RTC_ByteToBcd2>
 8008d40:	0003      	movs	r3, r0
 8008d42:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	785b      	ldrb	r3, [r3, #1]
 8008d48:	0018      	movs	r0, r3
 8008d4a:	f000 fa5e 	bl	800920a <RTC_ByteToBcd2>
 8008d4e:	0003      	movs	r3, r0
 8008d50:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008d52:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	789b      	ldrb	r3, [r3, #2]
 8008d58:	0018      	movs	r0, r3
 8008d5a:	f000 fa56 	bl	800920a <RTC_ByteToBcd2>
 8008d5e:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008d60:	0022      	movs	r2, r4
 8008d62:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	78db      	ldrb	r3, [r3, #3]
 8008d68:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008d6a:	431a      	orrs	r2, r3
 8008d6c:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	2220      	movs	r2, #32
 8008d72:	5c9b      	ldrb	r3, [r3, r2]
 8008d74:	0018      	movs	r0, r3
 8008d76:	f000 fa48 	bl	800920a <RTC_ByteToBcd2>
 8008d7a:	0003      	movs	r3, r0
 8008d7c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008d7e:	0022      	movs	r2, r4
 8008d80:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008d86:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	61fb      	str	r3, [r7, #28]
 8008d90:	e022      	b.n	8008dd8 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	2240      	movs	r2, #64	; 0x40
 8008d9a:	4013      	ands	r3, r2
 8008d9c:	d102      	bne.n	8008da4 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	2200      	movs	r2, #0
 8008da2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	785b      	ldrb	r3, [r3, #1]
 8008dae:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008db0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008db2:	68ba      	ldr	r2, [r7, #8]
 8008db4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008db6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	78db      	ldrb	r3, [r3, #3]
 8008dbc:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008dbe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	2120      	movs	r1, #32
 8008dc4:	5c5b      	ldrb	r3, [r3, r1]
 8008dc6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008dc8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008dce:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	685a      	ldr	r2, [r3, #4]
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	699b      	ldr	r3, [r3, #24]
 8008de0:	4313      	orrs	r3, r2
 8008de2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	22ca      	movs	r2, #202	; 0xca
 8008dea:	625a      	str	r2, [r3, #36]	; 0x24
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2253      	movs	r2, #83	; 0x53
 8008df2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008df8:	2380      	movs	r3, #128	; 0x80
 8008dfa:	005b      	lsls	r3, r3, #1
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d14e      	bne.n	8008e9e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	689a      	ldr	r2, [r3, #8]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	495b      	ldr	r1, [pc, #364]	; (8008f78 <HAL_RTC_SetAlarm_IT+0x284>)
 8008e0c:	400a      	ands	r2, r1
 8008e0e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	22ff      	movs	r2, #255	; 0xff
 8008e18:	401a      	ands	r2, r3
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4957      	ldr	r1, [pc, #348]	; (8008f7c <HAL_RTC_SetAlarm_IT+0x288>)
 8008e20:	430a      	orrs	r2, r1
 8008e22:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008e24:	f7fd fb20 	bl	8006468 <HAL_GetTick>
 8008e28:	0003      	movs	r3, r0
 8008e2a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008e2c:	e016      	b.n	8008e5c <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008e2e:	f7fd fb1b 	bl	8006468 <HAL_GetTick>
 8008e32:	0002      	movs	r2, r0
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	1ad2      	subs	r2, r2, r3
 8008e38:	23fa      	movs	r3, #250	; 0xfa
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d90d      	bls.n	8008e5c <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	22ff      	movs	r2, #255	; 0xff
 8008e46:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2221      	movs	r2, #33	; 0x21
 8008e4c:	2103      	movs	r1, #3
 8008e4e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2220      	movs	r2, #32
 8008e54:	2100      	movs	r1, #0
 8008e56:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008e58:	2303      	movs	r3, #3
 8008e5a:	e089      	b.n	8008f70 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	2201      	movs	r2, #1
 8008e64:	4013      	ands	r3, r2
 8008e66:	d0e2      	beq.n	8008e2e <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	69fa      	ldr	r2, [r7, #28]
 8008e6e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	69ba      	ldr	r2, [r7, #24]
 8008e76:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	689a      	ldr	r2, [r3, #8]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2180      	movs	r1, #128	; 0x80
 8008e84:	0049      	lsls	r1, r1, #1
 8008e86:	430a      	orrs	r2, r1
 8008e88:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	689a      	ldr	r2, [r3, #8]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	2180      	movs	r1, #128	; 0x80
 8008e96:	0149      	lsls	r1, r1, #5
 8008e98:	430a      	orrs	r2, r1
 8008e9a:	609a      	str	r2, [r3, #8]
 8008e9c:	e04d      	b.n	8008f3a <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	689a      	ldr	r2, [r3, #8]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4935      	ldr	r1, [pc, #212]	; (8008f80 <HAL_RTC_SetAlarm_IT+0x28c>)
 8008eaa:	400a      	ands	r2, r1
 8008eac:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	22ff      	movs	r2, #255	; 0xff
 8008eb6:	401a      	ands	r2, r3
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4931      	ldr	r1, [pc, #196]	; (8008f84 <HAL_RTC_SetAlarm_IT+0x290>)
 8008ebe:	430a      	orrs	r2, r1
 8008ec0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008ec2:	f7fd fad1 	bl	8006468 <HAL_GetTick>
 8008ec6:	0003      	movs	r3, r0
 8008ec8:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008eca:	e016      	b.n	8008efa <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008ecc:	f7fd facc 	bl	8006468 <HAL_GetTick>
 8008ed0:	0002      	movs	r2, r0
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	1ad2      	subs	r2, r2, r3
 8008ed6:	23fa      	movs	r3, #250	; 0xfa
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d90d      	bls.n	8008efa <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	22ff      	movs	r2, #255	; 0xff
 8008ee4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2221      	movs	r2, #33	; 0x21
 8008eea:	2103      	movs	r1, #3
 8008eec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2220      	movs	r2, #32
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008ef6:	2303      	movs	r3, #3
 8008ef8:	e03a      	b.n	8008f70 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	2202      	movs	r2, #2
 8008f02:	4013      	ands	r3, r2
 8008f04:	d0e2      	beq.n	8008ecc <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	69fa      	ldr	r2, [r7, #28]
 8008f0c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	69ba      	ldr	r2, [r7, #24]
 8008f14:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	689a      	ldr	r2, [r3, #8]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2180      	movs	r1, #128	; 0x80
 8008f22:	0089      	lsls	r1, r1, #2
 8008f24:	430a      	orrs	r2, r1
 8008f26:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	689a      	ldr	r2, [r3, #8]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	2180      	movs	r1, #128	; 0x80
 8008f34:	0189      	lsls	r1, r1, #6
 8008f36:	430a      	orrs	r2, r1
 8008f38:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8008f3a:	4b13      	ldr	r3, [pc, #76]	; (8008f88 <HAL_RTC_SetAlarm_IT+0x294>)
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	4b12      	ldr	r3, [pc, #72]	; (8008f88 <HAL_RTC_SetAlarm_IT+0x294>)
 8008f40:	2180      	movs	r1, #128	; 0x80
 8008f42:	0289      	lsls	r1, r1, #10
 8008f44:	430a      	orrs	r2, r1
 8008f46:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8008f48:	4b0f      	ldr	r3, [pc, #60]	; (8008f88 <HAL_RTC_SetAlarm_IT+0x294>)
 8008f4a:	689a      	ldr	r2, [r3, #8]
 8008f4c:	4b0e      	ldr	r3, [pc, #56]	; (8008f88 <HAL_RTC_SetAlarm_IT+0x294>)
 8008f4e:	2180      	movs	r1, #128	; 0x80
 8008f50:	0289      	lsls	r1, r1, #10
 8008f52:	430a      	orrs	r2, r1
 8008f54:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	22ff      	movs	r2, #255	; 0xff
 8008f5c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2221      	movs	r2, #33	; 0x21
 8008f62:	2101      	movs	r1, #1
 8008f64:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2220      	movs	r2, #32
 8008f6a:	2100      	movs	r1, #0
 8008f6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008f6e:	2300      	movs	r3, #0
}
 8008f70:	0018      	movs	r0, r3
 8008f72:	46bd      	mov	sp, r7
 8008f74:	b009      	add	sp, #36	; 0x24
 8008f76:	bd90      	pop	{r4, r7, pc}
 8008f78:	fffffeff 	.word	0xfffffeff
 8008f7c:	fffffe7f 	.word	0xfffffe7f
 8008f80:	fffffdff 	.word	0xfffffdff
 8008f84:	fffffd7f 	.word	0xfffffd7f
 8008f88:	40010400 	.word	0x40010400

08008f8c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2220      	movs	r2, #32
 8008f9a:	5c9b      	ldrb	r3, [r3, r2]
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d101      	bne.n	8008fa4 <HAL_RTC_DeactivateAlarm+0x18>
 8008fa0:	2302      	movs	r3, #2
 8008fa2:	e086      	b.n	80090b2 <HAL_RTC_DeactivateAlarm+0x126>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2220      	movs	r2, #32
 8008fa8:	2101      	movs	r1, #1
 8008faa:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2221      	movs	r2, #33	; 0x21
 8008fb0:	2102      	movs	r1, #2
 8008fb2:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	22ca      	movs	r2, #202	; 0xca
 8008fba:	625a      	str	r2, [r3, #36]	; 0x24
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2253      	movs	r2, #83	; 0x53
 8008fc2:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8008fc4:	683a      	ldr	r2, [r7, #0]
 8008fc6:	2380      	movs	r3, #128	; 0x80
 8008fc8:	005b      	lsls	r3, r3, #1
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d132      	bne.n	8009034 <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	689a      	ldr	r2, [r3, #8]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4938      	ldr	r1, [pc, #224]	; (80090bc <HAL_RTC_DeactivateAlarm+0x130>)
 8008fda:	400a      	ands	r2, r1
 8008fdc:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	689a      	ldr	r2, [r3, #8]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4935      	ldr	r1, [pc, #212]	; (80090c0 <HAL_RTC_DeactivateAlarm+0x134>)
 8008fea:	400a      	ands	r2, r1
 8008fec:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8008fee:	f7fd fa3b 	bl	8006468 <HAL_GetTick>
 8008ff2:	0003      	movs	r3, r0
 8008ff4:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008ff6:	e016      	b.n	8009026 <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008ff8:	f7fd fa36 	bl	8006468 <HAL_GetTick>
 8008ffc:	0002      	movs	r2, r0
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	1ad2      	subs	r2, r2, r3
 8009002:	23fa      	movs	r3, #250	; 0xfa
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	429a      	cmp	r2, r3
 8009008:	d90d      	bls.n	8009026 <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	22ff      	movs	r2, #255	; 0xff
 8009010:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2221      	movs	r2, #33	; 0x21
 8009016:	2103      	movs	r1, #3
 8009018:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2220      	movs	r2, #32
 800901e:	2100      	movs	r1, #0
 8009020:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009022:	2303      	movs	r3, #3
 8009024:	e045      	b.n	80090b2 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	2201      	movs	r2, #1
 800902e:	4013      	ands	r3, r2
 8009030:	d0e2      	beq.n	8008ff8 <HAL_RTC_DeactivateAlarm+0x6c>
 8009032:	e031      	b.n	8009098 <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	689a      	ldr	r2, [r3, #8]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4921      	ldr	r1, [pc, #132]	; (80090c4 <HAL_RTC_DeactivateAlarm+0x138>)
 8009040:	400a      	ands	r2, r1
 8009042:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	689a      	ldr	r2, [r3, #8]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	491e      	ldr	r1, [pc, #120]	; (80090c8 <HAL_RTC_DeactivateAlarm+0x13c>)
 8009050:	400a      	ands	r2, r1
 8009052:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8009054:	f7fd fa08 	bl	8006468 <HAL_GetTick>
 8009058:	0003      	movs	r3, r0
 800905a:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800905c:	e016      	b.n	800908c <HAL_RTC_DeactivateAlarm+0x100>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800905e:	f7fd fa03 	bl	8006468 <HAL_GetTick>
 8009062:	0002      	movs	r2, r0
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	1ad2      	subs	r2, r2, r3
 8009068:	23fa      	movs	r3, #250	; 0xfa
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	429a      	cmp	r2, r3
 800906e:	d90d      	bls.n	800908c <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	22ff      	movs	r2, #255	; 0xff
 8009076:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2221      	movs	r2, #33	; 0x21
 800907c:	2103      	movs	r1, #3
 800907e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2220      	movs	r2, #32
 8009084:	2100      	movs	r1, #0
 8009086:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009088:	2303      	movs	r3, #3
 800908a:	e012      	b.n	80090b2 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	2202      	movs	r2, #2
 8009094:	4013      	ands	r3, r2
 8009096:	d0e2      	beq.n	800905e <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	22ff      	movs	r2, #255	; 0xff
 800909e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2221      	movs	r2, #33	; 0x21
 80090a4:	2101      	movs	r1, #1
 80090a6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2220      	movs	r2, #32
 80090ac:	2100      	movs	r1, #0
 80090ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	0018      	movs	r0, r3
 80090b4:	46bd      	mov	sp, r7
 80090b6:	b004      	add	sp, #16
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	46c0      	nop			; (mov r8, r8)
 80090bc:	fffffeff 	.word	0xfffffeff
 80090c0:	ffffefff 	.word	0xffffefff
 80090c4:	fffffdff 	.word	0xfffffdff
 80090c8:	ffffdfff 	.word	0xffffdfff

080090cc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	689a      	ldr	r2, [r3, #8]
 80090da:	2380      	movs	r3, #128	; 0x80
 80090dc:	015b      	lsls	r3, r3, #5
 80090de:	4013      	ands	r3, r2
 80090e0:	d014      	beq.n	800910c <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	68da      	ldr	r2, [r3, #12]
 80090e8:	2380      	movs	r3, #128	; 0x80
 80090ea:	005b      	lsls	r3, r3, #1
 80090ec:	4013      	ands	r3, r2
 80090ee:	d00d      	beq.n	800910c <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	0018      	movs	r0, r3
 80090f4:	f7f9 ffde 	bl	80030b4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	22ff      	movs	r2, #255	; 0xff
 8009100:	401a      	ands	r2, r3
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4915      	ldr	r1, [pc, #84]	; (800915c <HAL_RTC_AlarmIRQHandler+0x90>)
 8009108:	430a      	orrs	r2, r1
 800910a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	689a      	ldr	r2, [r3, #8]
 8009112:	2380      	movs	r3, #128	; 0x80
 8009114:	019b      	lsls	r3, r3, #6
 8009116:	4013      	ands	r3, r2
 8009118:	d014      	beq.n	8009144 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	68da      	ldr	r2, [r3, #12]
 8009120:	2380      	movs	r3, #128	; 0x80
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	4013      	ands	r3, r2
 8009126:	d00d      	beq.n	8009144 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	0018      	movs	r0, r3
 800912c:	f7f9 ffdc 	bl	80030e8 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	22ff      	movs	r2, #255	; 0xff
 8009138:	401a      	ands	r2, r3
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4908      	ldr	r1, [pc, #32]	; (8009160 <HAL_RTC_AlarmIRQHandler+0x94>)
 8009140:	430a      	orrs	r2, r1
 8009142:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8009144:	4b07      	ldr	r3, [pc, #28]	; (8009164 <HAL_RTC_AlarmIRQHandler+0x98>)
 8009146:	2280      	movs	r2, #128	; 0x80
 8009148:	0292      	lsls	r2, r2, #10
 800914a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2221      	movs	r2, #33	; 0x21
 8009150:	2101      	movs	r1, #1
 8009152:	5499      	strb	r1, [r3, r2]
}
 8009154:	46c0      	nop			; (mov r8, r8)
 8009156:	46bd      	mov	sp, r7
 8009158:	b002      	add	sp, #8
 800915a:	bd80      	pop	{r7, pc}
 800915c:	fffffe7f 	.word	0xfffffe7f
 8009160:	fffffd7f 	.word	0xfffffd7f
 8009164:	40010400 	.word	0x40010400

08009168 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68da      	ldr	r2, [r3, #12]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	21a0      	movs	r1, #160	; 0xa0
 800917c:	438a      	bics	r2, r1
 800917e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009180:	f7fd f972 	bl	8006468 <HAL_GetTick>
 8009184:	0003      	movs	r3, r0
 8009186:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009188:	e00a      	b.n	80091a0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800918a:	f7fd f96d 	bl	8006468 <HAL_GetTick>
 800918e:	0002      	movs	r2, r0
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	1ad2      	subs	r2, r2, r3
 8009194:	23fa      	movs	r3, #250	; 0xfa
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	429a      	cmp	r2, r3
 800919a:	d901      	bls.n	80091a0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800919c:	2303      	movs	r3, #3
 800919e:	e006      	b.n	80091ae <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	2220      	movs	r2, #32
 80091a8:	4013      	ands	r3, r2
 80091aa:	d0ee      	beq.n	800918a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80091ac:	2300      	movs	r3, #0
}
 80091ae:	0018      	movs	r0, r3
 80091b0:	46bd      	mov	sp, r7
 80091b2:	b004      	add	sp, #16
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b084      	sub	sp, #16
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	2240      	movs	r2, #64	; 0x40
 80091c6:	4013      	ands	r3, r2
 80091c8:	d11a      	bne.n	8009200 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2201      	movs	r2, #1
 80091d0:	4252      	negs	r2, r2
 80091d2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80091d4:	f7fd f948 	bl	8006468 <HAL_GetTick>
 80091d8:	0003      	movs	r3, r0
 80091da:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80091dc:	e00a      	b.n	80091f4 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80091de:	f7fd f943 	bl	8006468 <HAL_GetTick>
 80091e2:	0002      	movs	r2, r0
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	1ad2      	subs	r2, r2, r3
 80091e8:	23fa      	movs	r3, #250	; 0xfa
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d901      	bls.n	80091f4 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 80091f0:	2303      	movs	r3, #3
 80091f2:	e006      	b.n	8009202 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	68db      	ldr	r3, [r3, #12]
 80091fa:	2240      	movs	r2, #64	; 0x40
 80091fc:	4013      	ands	r3, r2
 80091fe:	d0ee      	beq.n	80091de <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	0018      	movs	r0, r3
 8009204:	46bd      	mov	sp, r7
 8009206:	b004      	add	sp, #16
 8009208:	bd80      	pop	{r7, pc}

0800920a <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b084      	sub	sp, #16
 800920e:	af00      	add	r7, sp, #0
 8009210:	0002      	movs	r2, r0
 8009212:	1dfb      	adds	r3, r7, #7
 8009214:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8009216:	2300      	movs	r3, #0
 8009218:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800921a:	230b      	movs	r3, #11
 800921c:	18fb      	adds	r3, r7, r3
 800921e:	1dfa      	adds	r2, r7, #7
 8009220:	7812      	ldrb	r2, [r2, #0]
 8009222:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8009224:	e008      	b.n	8009238 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	3301      	adds	r3, #1
 800922a:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800922c:	220b      	movs	r2, #11
 800922e:	18bb      	adds	r3, r7, r2
 8009230:	18ba      	adds	r2, r7, r2
 8009232:	7812      	ldrb	r2, [r2, #0]
 8009234:	3a0a      	subs	r2, #10
 8009236:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8009238:	230b      	movs	r3, #11
 800923a:	18fb      	adds	r3, r7, r3
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	2b09      	cmp	r3, #9
 8009240:	d8f1      	bhi.n	8009226 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	b2db      	uxtb	r3, r3
 8009246:	011b      	lsls	r3, r3, #4
 8009248:	b2da      	uxtb	r2, r3
 800924a:	230b      	movs	r3, #11
 800924c:	18fb      	adds	r3, r7, r3
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	4313      	orrs	r3, r2
 8009252:	b2db      	uxtb	r3, r3
}
 8009254:	0018      	movs	r0, r3
 8009256:	46bd      	mov	sp, r7
 8009258:	b004      	add	sp, #16
 800925a:	bd80      	pop	{r7, pc}

0800925c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	0002      	movs	r2, r0
 8009264:	1dfb      	adds	r3, r7, #7
 8009266:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8009268:	1dfb      	adds	r3, r7, #7
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	091b      	lsrs	r3, r3, #4
 800926e:	b2db      	uxtb	r3, r3
 8009270:	001a      	movs	r2, r3
 8009272:	0013      	movs	r3, r2
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	189b      	adds	r3, r3, r2
 8009278:	005b      	lsls	r3, r3, #1
 800927a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	b2da      	uxtb	r2, r3
 8009280:	1dfb      	adds	r3, r7, #7
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	210f      	movs	r1, #15
 8009286:	400b      	ands	r3, r1
 8009288:	b2db      	uxtb	r3, r3
 800928a:	18d3      	adds	r3, r2, r3
 800928c:	b2db      	uxtb	r3, r3
}
 800928e:	0018      	movs	r0, r3
 8009290:	46bd      	mov	sp, r7
 8009292:	b004      	add	sp, #16
 8009294:	bd80      	pop	{r7, pc}

08009296 <HAL_RTCEx_SetSmoothCalib>:
  *         must be equal to SMOOTHCALIB_PLUSPULSES_RESET and the field
  *         SmoothCalibMinusPulsesValue mut be equal to 0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef *hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 8009296:	b580      	push	{r7, lr}
 8009298:	b086      	sub	sp, #24
 800929a:	af00      	add	r7, sp, #0
 800929c:	60f8      	str	r0, [r7, #12]
 800929e:	60b9      	str	r1, [r7, #8]
 80092a0:	607a      	str	r2, [r7, #4]
 80092a2:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2220      	movs	r2, #32
 80092a8:	5c9b      	ldrb	r3, [r3, r2]
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d101      	bne.n	80092b2 <HAL_RTCEx_SetSmoothCalib+0x1c>
 80092ae:	2302      	movs	r3, #2
 80092b0:	e04f      	b.n	8009352 <HAL_RTCEx_SetSmoothCalib+0xbc>
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2220      	movs	r2, #32
 80092b6:	2101      	movs	r1, #1
 80092b8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2221      	movs	r2, #33	; 0x21
 80092be:	2102      	movs	r1, #2
 80092c0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	22ca      	movs	r2, #202	; 0xca
 80092c8:	625a      	str	r2, [r3, #36]	; 0x24
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	2253      	movs	r2, #83	; 0x53
 80092d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* check if a calibration is pending*/
  if ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	68da      	ldr	r2, [r3, #12]
 80092d8:	2380      	movs	r3, #128	; 0x80
 80092da:	025b      	lsls	r3, r3, #9
 80092dc:	4013      	ands	r3, r2
 80092de:	d022      	beq.n	8009326 <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 80092e0:	f7fd f8c2 	bl	8006468 <HAL_GetTick>
 80092e4:	0003      	movs	r3, r0
 80092e6:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 80092e8:	e016      	b.n	8009318 <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80092ea:	f7fd f8bd 	bl	8006468 <HAL_GetTick>
 80092ee:	0002      	movs	r2, r0
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	1ad2      	subs	r2, r2, r3
 80092f4:	23fa      	movs	r3, #250	; 0xfa
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d90d      	bls.n	8009318 <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	22ff      	movs	r2, #255	; 0xff
 8009302:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2221      	movs	r2, #33	; 0x21
 8009308:	2103      	movs	r1, #3
 800930a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2220      	movs	r2, #32
 8009310:	2100      	movs	r1, #0
 8009312:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009314:	2303      	movs	r3, #3
 8009316:	e01c      	b.n	8009352 <HAL_RTCEx_SetSmoothCalib+0xbc>
    while ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	68da      	ldr	r2, [r3, #12]
 800931e:	2380      	movs	r3, #128	; 0x80
 8009320:	025b      	lsls	r3, r3, #9
 8009322:	4013      	ands	r3, r2
 8009324:	d1e1      	bne.n	80092ea <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 8009326:	68ba      	ldr	r2, [r7, #8]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	431a      	orrs	r2, r3
 800932c:	0011      	movs	r1, r2
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	683a      	ldr	r2, [r7, #0]
 8009334:	430a      	orrs	r2, r1
 8009336:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	22ff      	movs	r2, #255	; 0xff
 800933e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2221      	movs	r2, #33	; 0x21
 8009344:	2101      	movs	r1, #1
 8009346:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2220      	movs	r2, #32
 800934c:	2100      	movs	r1, #0
 800934e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	0018      	movs	r0, r3
 8009354:	46bd      	mov	sp, r7
 8009356:	b006      	add	sp, #24
 8009358:	bd80      	pop	{r7, pc}
	...

0800935c <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef *hrtc, uint32_t CalibOutput)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2220      	movs	r2, #32
 800936a:	5c9b      	ldrb	r3, [r3, r2]
 800936c:	2b01      	cmp	r3, #1
 800936e:	d101      	bne.n	8009374 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8009370:	2302      	movs	r3, #2
 8009372:	e035      	b.n	80093e0 <HAL_RTCEx_SetCalibrationOutPut+0x84>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2220      	movs	r2, #32
 8009378:	2101      	movs	r1, #1
 800937a:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2221      	movs	r2, #33	; 0x21
 8009380:	2102      	movs	r1, #2
 8009382:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	22ca      	movs	r2, #202	; 0xca
 800938a:	625a      	str	r2, [r3, #36]	; 0x24
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2253      	movs	r2, #83	; 0x53
 8009392:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	689a      	ldr	r2, [r3, #8]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4912      	ldr	r1, [pc, #72]	; (80093e8 <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 80093a0:	400a      	ands	r2, r1
 80093a2:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	6899      	ldr	r1, [r3, #8]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	683a      	ldr	r2, [r7, #0]
 80093b0:	430a      	orrs	r2, r1
 80093b2:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	689a      	ldr	r2, [r3, #8]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2180      	movs	r1, #128	; 0x80
 80093c0:	0409      	lsls	r1, r1, #16
 80093c2:	430a      	orrs	r2, r1
 80093c4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	22ff      	movs	r2, #255	; 0xff
 80093cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2221      	movs	r2, #33	; 0x21
 80093d2:	2101      	movs	r1, #1
 80093d4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2220      	movs	r2, #32
 80093da:	2100      	movs	r1, #0
 80093dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80093de:	2300      	movs	r3, #0
}
 80093e0:	0018      	movs	r0, r3
 80093e2:	46bd      	mov	sp, r7
 80093e4:	b002      	add	sp, #8
 80093e6:	bd80      	pop	{r7, pc}
 80093e8:	fff7ffff 	.word	0xfff7ffff

080093ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d101      	bne.n	80093fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	e059      	b.n	80094b2 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2251      	movs	r2, #81	; 0x51
 8009408:	5c9b      	ldrb	r3, [r3, r2]
 800940a:	b2db      	uxtb	r3, r3
 800940c:	2b00      	cmp	r3, #0
 800940e:	d107      	bne.n	8009420 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2250      	movs	r2, #80	; 0x50
 8009414:	2100      	movs	r1, #0
 8009416:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	0018      	movs	r0, r3
 800941c:	f7fa fe3a 	bl	8004094 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2251      	movs	r2, #81	; 0x51
 8009424:	2102      	movs	r1, #2
 8009426:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	2140      	movs	r1, #64	; 0x40
 8009434:	438a      	bics	r2, r1
 8009436:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	685a      	ldr	r2, [r3, #4]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	431a      	orrs	r2, r3
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	431a      	orrs	r2, r3
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	691b      	ldr	r3, [r3, #16]
 800944c:	431a      	orrs	r2, r3
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	695b      	ldr	r3, [r3, #20]
 8009452:	431a      	orrs	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6999      	ldr	r1, [r3, #24]
 8009458:	2380      	movs	r3, #128	; 0x80
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	400b      	ands	r3, r1
 800945e:	431a      	orrs	r2, r3
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	69db      	ldr	r3, [r3, #28]
 8009464:	431a      	orrs	r2, r3
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a1b      	ldr	r3, [r3, #32]
 800946a:	431a      	orrs	r2, r3
 800946c:	0011      	movs	r1, r2
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	430a      	orrs	r2, r1
 8009478:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	699b      	ldr	r3, [r3, #24]
 800947e:	0c1b      	lsrs	r3, r3, #16
 8009480:	2204      	movs	r2, #4
 8009482:	4013      	ands	r3, r2
 8009484:	0019      	movs	r1, r3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	430a      	orrs	r2, r1
 8009490:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	69da      	ldr	r2, [r3, #28]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4907      	ldr	r1, [pc, #28]	; (80094bc <HAL_SPI_Init+0xd0>)
 800949e:	400a      	ands	r2, r1
 80094a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2251      	movs	r2, #81	; 0x51
 80094ac:	2101      	movs	r1, #1
 80094ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	0018      	movs	r0, r3
 80094b4:	46bd      	mov	sp, r7
 80094b6:	b002      	add	sp, #8
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	46c0      	nop			; (mov r8, r8)
 80094bc:	fffff7ff 	.word	0xfffff7ff

080094c0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b088      	sub	sp, #32
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	603b      	str	r3, [r7, #0]
 80094cc:	1dbb      	adds	r3, r7, #6
 80094ce:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80094d0:	231f      	movs	r3, #31
 80094d2:	18fb      	adds	r3, r7, r3
 80094d4:	2200      	movs	r2, #0
 80094d6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2250      	movs	r2, #80	; 0x50
 80094dc:	5c9b      	ldrb	r3, [r3, r2]
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d101      	bne.n	80094e6 <HAL_SPI_Transmit+0x26>
 80094e2:	2302      	movs	r3, #2
 80094e4:	e136      	b.n	8009754 <HAL_SPI_Transmit+0x294>
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2250      	movs	r2, #80	; 0x50
 80094ea:	2101      	movs	r1, #1
 80094ec:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80094ee:	f7fc ffbb 	bl	8006468 <HAL_GetTick>
 80094f2:	0003      	movs	r3, r0
 80094f4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80094f6:	2316      	movs	r3, #22
 80094f8:	18fb      	adds	r3, r7, r3
 80094fa:	1dba      	adds	r2, r7, #6
 80094fc:	8812      	ldrh	r2, [r2, #0]
 80094fe:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2251      	movs	r2, #81	; 0x51
 8009504:	5c9b      	ldrb	r3, [r3, r2]
 8009506:	b2db      	uxtb	r3, r3
 8009508:	2b01      	cmp	r3, #1
 800950a:	d004      	beq.n	8009516 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800950c:	231f      	movs	r3, #31
 800950e:	18fb      	adds	r3, r7, r3
 8009510:	2202      	movs	r2, #2
 8009512:	701a      	strb	r2, [r3, #0]
    goto error;
 8009514:	e113      	b.n	800973e <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d003      	beq.n	8009524 <HAL_SPI_Transmit+0x64>
 800951c:	1dbb      	adds	r3, r7, #6
 800951e:	881b      	ldrh	r3, [r3, #0]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d104      	bne.n	800952e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8009524:	231f      	movs	r3, #31
 8009526:	18fb      	adds	r3, r7, r3
 8009528:	2201      	movs	r2, #1
 800952a:	701a      	strb	r2, [r3, #0]
    goto error;
 800952c:	e107      	b.n	800973e <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2251      	movs	r2, #81	; 0x51
 8009532:	2103      	movs	r1, #3
 8009534:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2200      	movs	r2, #0
 800953a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	68ba      	ldr	r2, [r7, #8]
 8009540:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	1dba      	adds	r2, r7, #6
 8009546:	8812      	ldrh	r2, [r2, #0]
 8009548:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	1dba      	adds	r2, r7, #6
 800954e:	8812      	ldrh	r2, [r2, #0]
 8009550:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2200      	movs	r2, #0
 8009556:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2200      	movs	r2, #0
 800955c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2200      	movs	r2, #0
 8009562:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2200      	movs	r2, #0
 8009568:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2200      	movs	r2, #0
 800956e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	689a      	ldr	r2, [r3, #8]
 8009574:	2380      	movs	r3, #128	; 0x80
 8009576:	021b      	lsls	r3, r3, #8
 8009578:	429a      	cmp	r2, r3
 800957a:	d108      	bne.n	800958e <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	2180      	movs	r1, #128	; 0x80
 8009588:	01c9      	lsls	r1, r1, #7
 800958a:	430a      	orrs	r2, r1
 800958c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2240      	movs	r2, #64	; 0x40
 8009596:	4013      	ands	r3, r2
 8009598:	2b40      	cmp	r3, #64	; 0x40
 800959a:	d007      	beq.n	80095ac <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	2140      	movs	r1, #64	; 0x40
 80095a8:	430a      	orrs	r2, r1
 80095aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	68da      	ldr	r2, [r3, #12]
 80095b0:	2380      	movs	r3, #128	; 0x80
 80095b2:	011b      	lsls	r3, r3, #4
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d14e      	bne.n	8009656 <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d004      	beq.n	80095ca <HAL_SPI_Transmit+0x10a>
 80095c0:	2316      	movs	r3, #22
 80095c2:	18fb      	adds	r3, r7, r3
 80095c4:	881b      	ldrh	r3, [r3, #0]
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d13f      	bne.n	800964a <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ce:	881a      	ldrh	r2, [r3, #0]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095da:	1c9a      	adds	r2, r3, #2
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	3b01      	subs	r3, #1
 80095e8:	b29a      	uxth	r2, r3
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80095ee:	e02c      	b.n	800964a <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	2202      	movs	r2, #2
 80095f8:	4013      	ands	r3, r2
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d112      	bne.n	8009624 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009602:	881a      	ldrh	r2, [r3, #0]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800960e:	1c9a      	adds	r2, r3, #2
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009618:	b29b      	uxth	r3, r3
 800961a:	3b01      	subs	r3, #1
 800961c:	b29a      	uxth	r2, r3
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	86da      	strh	r2, [r3, #54]	; 0x36
 8009622:	e012      	b.n	800964a <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009624:	f7fc ff20 	bl	8006468 <HAL_GetTick>
 8009628:	0002      	movs	r2, r0
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	1ad3      	subs	r3, r2, r3
 800962e:	683a      	ldr	r2, [r7, #0]
 8009630:	429a      	cmp	r2, r3
 8009632:	d802      	bhi.n	800963a <HAL_SPI_Transmit+0x17a>
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	3301      	adds	r3, #1
 8009638:	d102      	bne.n	8009640 <HAL_SPI_Transmit+0x180>
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d104      	bne.n	800964a <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 8009640:	231f      	movs	r3, #31
 8009642:	18fb      	adds	r3, r7, r3
 8009644:	2203      	movs	r2, #3
 8009646:	701a      	strb	r2, [r3, #0]
          goto error;
 8009648:	e079      	b.n	800973e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800964e:	b29b      	uxth	r3, r3
 8009650:	2b00      	cmp	r3, #0
 8009652:	d1cd      	bne.n	80095f0 <HAL_SPI_Transmit+0x130>
 8009654:	e04f      	b.n	80096f6 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d004      	beq.n	8009668 <HAL_SPI_Transmit+0x1a8>
 800965e:	2316      	movs	r3, #22
 8009660:	18fb      	adds	r3, r7, r3
 8009662:	881b      	ldrh	r3, [r3, #0]
 8009664:	2b01      	cmp	r3, #1
 8009666:	d141      	bne.n	80096ec <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	330c      	adds	r3, #12
 8009672:	7812      	ldrb	r2, [r2, #0]
 8009674:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800967a:	1c5a      	adds	r2, r3, #1
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009684:	b29b      	uxth	r3, r3
 8009686:	3b01      	subs	r3, #1
 8009688:	b29a      	uxth	r2, r3
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800968e:	e02d      	b.n	80096ec <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	2202      	movs	r2, #2
 8009698:	4013      	ands	r3, r2
 800969a:	2b02      	cmp	r3, #2
 800969c:	d113      	bne.n	80096c6 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	330c      	adds	r3, #12
 80096a8:	7812      	ldrb	r2, [r2, #0]
 80096aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b0:	1c5a      	adds	r2, r3, #1
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	3b01      	subs	r3, #1
 80096be:	b29a      	uxth	r2, r3
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80096c4:	e012      	b.n	80096ec <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80096c6:	f7fc fecf 	bl	8006468 <HAL_GetTick>
 80096ca:	0002      	movs	r2, r0
 80096cc:	69bb      	ldr	r3, [r7, #24]
 80096ce:	1ad3      	subs	r3, r2, r3
 80096d0:	683a      	ldr	r2, [r7, #0]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d802      	bhi.n	80096dc <HAL_SPI_Transmit+0x21c>
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	3301      	adds	r3, #1
 80096da:	d102      	bne.n	80096e2 <HAL_SPI_Transmit+0x222>
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d104      	bne.n	80096ec <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 80096e2:	231f      	movs	r3, #31
 80096e4:	18fb      	adds	r3, r7, r3
 80096e6:	2203      	movs	r2, #3
 80096e8:	701a      	strb	r2, [r3, #0]
          goto error;
 80096ea:	e028      	b.n	800973e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d1cc      	bne.n	8009690 <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80096f6:	69ba      	ldr	r2, [r7, #24]
 80096f8:	6839      	ldr	r1, [r7, #0]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	0018      	movs	r0, r3
 80096fe:	f000 fa99 	bl	8009c34 <SPI_EndRxTxTransaction>
 8009702:	1e03      	subs	r3, r0, #0
 8009704:	d002      	beq.n	800970c <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2220      	movs	r2, #32
 800970a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d10a      	bne.n	800972a <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009714:	2300      	movs	r3, #0
 8009716:	613b      	str	r3, [r7, #16]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68db      	ldr	r3, [r3, #12]
 800971e:	613b      	str	r3, [r7, #16]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	613b      	str	r3, [r7, #16]
 8009728:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800972e:	2b00      	cmp	r3, #0
 8009730:	d004      	beq.n	800973c <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8009732:	231f      	movs	r3, #31
 8009734:	18fb      	adds	r3, r7, r3
 8009736:	2201      	movs	r2, #1
 8009738:	701a      	strb	r2, [r3, #0]
 800973a:	e000      	b.n	800973e <HAL_SPI_Transmit+0x27e>
  }

error:
 800973c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2251      	movs	r2, #81	; 0x51
 8009742:	2101      	movs	r1, #1
 8009744:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2250      	movs	r2, #80	; 0x50
 800974a:	2100      	movs	r1, #0
 800974c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800974e:	231f      	movs	r3, #31
 8009750:	18fb      	adds	r3, r7, r3
 8009752:	781b      	ldrb	r3, [r3, #0]
}
 8009754:	0018      	movs	r0, r3
 8009756:	46bd      	mov	sp, r7
 8009758:	b008      	add	sp, #32
 800975a:	bd80      	pop	{r7, pc}

0800975c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b086      	sub	sp, #24
 8009760:	af00      	add	r7, sp, #0
 8009762:	60f8      	str	r0, [r7, #12]
 8009764:	60b9      	str	r1, [r7, #8]
 8009766:	1dbb      	adds	r3, r7, #6
 8009768:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800976a:	2317      	movs	r3, #23
 800976c:	18fb      	adds	r3, r7, r3
 800976e:	2200      	movs	r2, #0
 8009770:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2250      	movs	r2, #80	; 0x50
 8009776:	5c9b      	ldrb	r3, [r3, r2]
 8009778:	2b01      	cmp	r3, #1
 800977a:	d101      	bne.n	8009780 <HAL_SPI_Transmit_IT+0x24>
 800977c:	2302      	movs	r3, #2
 800977e:	e072      	b.n	8009866 <HAL_SPI_Transmit_IT+0x10a>
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2250      	movs	r2, #80	; 0x50
 8009784:	2101      	movs	r1, #1
 8009786:	5499      	strb	r1, [r3, r2]

  if ((pData == NULL) || (Size == 0U))
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d003      	beq.n	8009796 <HAL_SPI_Transmit_IT+0x3a>
 800978e:	1dbb      	adds	r3, r7, #6
 8009790:	881b      	ldrh	r3, [r3, #0]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d104      	bne.n	80097a0 <HAL_SPI_Transmit_IT+0x44>
  {
    errorcode = HAL_ERROR;
 8009796:	2317      	movs	r3, #23
 8009798:	18fb      	adds	r3, r7, r3
 800979a:	2201      	movs	r2, #1
 800979c:	701a      	strb	r2, [r3, #0]
    goto error;
 800979e:	e05b      	b.n	8009858 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2251      	movs	r2, #81	; 0x51
 80097a4:	5c9b      	ldrb	r3, [r3, r2]
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d004      	beq.n	80097b6 <HAL_SPI_Transmit_IT+0x5a>
  {
    errorcode = HAL_BUSY;
 80097ac:	2317      	movs	r3, #23
 80097ae:	18fb      	adds	r3, r7, r3
 80097b0:	2202      	movs	r2, #2
 80097b2:	701a      	strb	r2, [r3, #0]
    goto error;
 80097b4:	e050      	b.n	8009858 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2251      	movs	r2, #81	; 0x51
 80097ba:	2103      	movs	r1, #3
 80097bc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2200      	movs	r2, #0
 80097c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	68ba      	ldr	r2, [r7, #8]
 80097c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	1dba      	adds	r2, r7, #6
 80097ce:	8812      	ldrh	r2, [r2, #0]
 80097d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	1dba      	adds	r2, r7, #6
 80097d6:	8812      	ldrh	r2, [r2, #0]
 80097d8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2200      	movs	r2, #0
 80097de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2200      	movs	r2, #0
 80097e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2200      	movs	r2, #0
 80097ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2200      	movs	r2, #0
 80097f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d003      	beq.n	8009802 <HAL_SPI_Transmit_IT+0xa6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	4a1c      	ldr	r2, [pc, #112]	; (8009870 <HAL_SPI_Transmit_IT+0x114>)
 80097fe:	645a      	str	r2, [r3, #68]	; 0x44
 8009800:	e002      	b.n	8009808 <HAL_SPI_Transmit_IT+0xac>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	4a1b      	ldr	r2, [pc, #108]	; (8009874 <HAL_SPI_Transmit_IT+0x118>)
 8009806:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	689a      	ldr	r2, [r3, #8]
 800980c:	2380      	movs	r3, #128	; 0x80
 800980e:	021b      	lsls	r3, r3, #8
 8009810:	429a      	cmp	r2, r3
 8009812:	d108      	bne.n	8009826 <HAL_SPI_Transmit_IT+0xca>
  {
    SPI_1LINE_TX(hspi);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2180      	movs	r1, #128	; 0x80
 8009820:	01c9      	lsls	r1, r1, #7
 8009822:	430a      	orrs	r2, r1
 8009824:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	685a      	ldr	r2, [r3, #4]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	21a0      	movs	r1, #160	; 0xa0
 8009832:	430a      	orrs	r2, r1
 8009834:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	2240      	movs	r2, #64	; 0x40
 800983e:	4013      	ands	r3, r2
 8009840:	2b40      	cmp	r3, #64	; 0x40
 8009842:	d008      	beq.n	8009856 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	2140      	movs	r1, #64	; 0x40
 8009850:	430a      	orrs	r2, r1
 8009852:	601a      	str	r2, [r3, #0]
 8009854:	e000      	b.n	8009858 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8009856:	46c0      	nop			; (mov r8, r8)
  __HAL_UNLOCK(hspi);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2250      	movs	r2, #80	; 0x50
 800985c:	2100      	movs	r1, #0
 800985e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009860:	2317      	movs	r3, #23
 8009862:	18fb      	adds	r3, r7, r3
 8009864:	781b      	ldrb	r3, [r3, #0]
}
 8009866:	0018      	movs	r0, r3
 8009868:	46bd      	mov	sp, r7
 800986a:	b006      	add	sp, #24
 800986c:	bd80      	pop	{r7, pc}
 800986e:	46c0      	nop			; (mov r8, r8)
 8009870:	08009b0f 	.word	0x08009b0f
 8009874:	08009ac7 	.word	0x08009ac7

08009878 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b088      	sub	sp, #32
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009890:	69bb      	ldr	r3, [r7, #24]
 8009892:	099b      	lsrs	r3, r3, #6
 8009894:	001a      	movs	r2, r3
 8009896:	2301      	movs	r3, #1
 8009898:	4013      	ands	r3, r2
 800989a:	d10f      	bne.n	80098bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800989c:	69bb      	ldr	r3, [r7, #24]
 800989e:	2201      	movs	r2, #1
 80098a0:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80098a2:	d00b      	beq.n	80098bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	099b      	lsrs	r3, r3, #6
 80098a8:	001a      	movs	r2, r3
 80098aa:	2301      	movs	r3, #1
 80098ac:	4013      	ands	r3, r2
 80098ae:	d005      	beq.n	80098bc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	0010      	movs	r0, r2
 80098b8:	4798      	blx	r3
    return;
 80098ba:	e0d6      	b.n	8009a6a <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80098bc:	69bb      	ldr	r3, [r7, #24]
 80098be:	085b      	lsrs	r3, r3, #1
 80098c0:	001a      	movs	r2, r3
 80098c2:	2301      	movs	r3, #1
 80098c4:	4013      	ands	r3, r2
 80098c6:	d00b      	beq.n	80098e0 <HAL_SPI_IRQHandler+0x68>
 80098c8:	69fb      	ldr	r3, [r7, #28]
 80098ca:	09db      	lsrs	r3, r3, #7
 80098cc:	001a      	movs	r2, r3
 80098ce:	2301      	movs	r3, #1
 80098d0:	4013      	ands	r3, r2
 80098d2:	d005      	beq.n	80098e0 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	0010      	movs	r0, r2
 80098dc:	4798      	blx	r3
    return;
 80098de:	e0c4      	b.n	8009a6a <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80098e0:	69bb      	ldr	r3, [r7, #24]
 80098e2:	095b      	lsrs	r3, r3, #5
 80098e4:	001a      	movs	r2, r3
 80098e6:	2301      	movs	r3, #1
 80098e8:	4013      	ands	r3, r2
 80098ea:	d10c      	bne.n	8009906 <HAL_SPI_IRQHandler+0x8e>
 80098ec:	69bb      	ldr	r3, [r7, #24]
 80098ee:	099b      	lsrs	r3, r3, #6
 80098f0:	001a      	movs	r2, r3
 80098f2:	2301      	movs	r3, #1
 80098f4:	4013      	ands	r3, r2
 80098f6:	d106      	bne.n	8009906 <HAL_SPI_IRQHandler+0x8e>
 80098f8:	69bb      	ldr	r3, [r7, #24]
 80098fa:	0a1b      	lsrs	r3, r3, #8
 80098fc:	001a      	movs	r2, r3
 80098fe:	2301      	movs	r3, #1
 8009900:	4013      	ands	r3, r2
 8009902:	d100      	bne.n	8009906 <HAL_SPI_IRQHandler+0x8e>
 8009904:	e0b1      	b.n	8009a6a <HAL_SPI_IRQHandler+0x1f2>
 8009906:	69fb      	ldr	r3, [r7, #28]
 8009908:	095b      	lsrs	r3, r3, #5
 800990a:	001a      	movs	r2, r3
 800990c:	2301      	movs	r3, #1
 800990e:	4013      	ands	r3, r2
 8009910:	d100      	bne.n	8009914 <HAL_SPI_IRQHandler+0x9c>
 8009912:	e0aa      	b.n	8009a6a <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	099b      	lsrs	r3, r3, #6
 8009918:	001a      	movs	r2, r3
 800991a:	2301      	movs	r3, #1
 800991c:	4013      	ands	r3, r2
 800991e:	d023      	beq.n	8009968 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2251      	movs	r2, #81	; 0x51
 8009924:	5c9b      	ldrb	r3, [r3, r2]
 8009926:	b2db      	uxtb	r3, r3
 8009928:	2b03      	cmp	r3, #3
 800992a:	d011      	beq.n	8009950 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009930:	2204      	movs	r2, #4
 8009932:	431a      	orrs	r2, r3
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009938:	2300      	movs	r3, #0
 800993a:	617b      	str	r3, [r7, #20]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	68db      	ldr	r3, [r3, #12]
 8009942:	617b      	str	r3, [r7, #20]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	617b      	str	r3, [r7, #20]
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	e00b      	b.n	8009968 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009950:	2300      	movs	r3, #0
 8009952:	613b      	str	r3, [r7, #16]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	68db      	ldr	r3, [r3, #12]
 800995a:	613b      	str	r3, [r7, #16]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	613b      	str	r3, [r7, #16]
 8009964:	693b      	ldr	r3, [r7, #16]
        return;
 8009966:	e080      	b.n	8009a6a <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009968:	69bb      	ldr	r3, [r7, #24]
 800996a:	095b      	lsrs	r3, r3, #5
 800996c:	001a      	movs	r2, r3
 800996e:	2301      	movs	r3, #1
 8009970:	4013      	ands	r3, r2
 8009972:	d014      	beq.n	800999e <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009978:	2201      	movs	r2, #1
 800997a:	431a      	orrs	r2, r3
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009980:	2300      	movs	r3, #0
 8009982:	60fb      	str	r3, [r7, #12]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	689b      	ldr	r3, [r3, #8]
 800998a:	60fb      	str	r3, [r7, #12]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2140      	movs	r1, #64	; 0x40
 8009998:	438a      	bics	r2, r1
 800999a:	601a      	str	r2, [r3, #0]
 800999c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800999e:	69bb      	ldr	r3, [r7, #24]
 80099a0:	0a1b      	lsrs	r3, r3, #8
 80099a2:	001a      	movs	r2, r3
 80099a4:	2301      	movs	r3, #1
 80099a6:	4013      	ands	r3, r2
 80099a8:	d00c      	beq.n	80099c4 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ae:	2208      	movs	r2, #8
 80099b0:	431a      	orrs	r2, r3
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80099b6:	2300      	movs	r3, #0
 80099b8:	60bb      	str	r3, [r7, #8]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	60bb      	str	r3, [r7, #8]
 80099c2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d04d      	beq.n	8009a68 <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	685a      	ldr	r2, [r3, #4]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	21e0      	movs	r1, #224	; 0xe0
 80099d8:	438a      	bics	r2, r1
 80099da:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2251      	movs	r2, #81	; 0x51
 80099e0:	2101      	movs	r1, #1
 80099e2:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80099e4:	69fb      	ldr	r3, [r7, #28]
 80099e6:	2202      	movs	r2, #2
 80099e8:	4013      	ands	r3, r2
 80099ea:	d103      	bne.n	80099f4 <HAL_SPI_IRQHandler+0x17c>
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	2201      	movs	r2, #1
 80099f0:	4013      	ands	r3, r2
 80099f2:	d032      	beq.n	8009a5a <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	685a      	ldr	r2, [r3, #4]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2103      	movs	r1, #3
 8009a00:	438a      	bics	r2, r1
 8009a02:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d010      	beq.n	8009a2e <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a10:	4a17      	ldr	r2, [pc, #92]	; (8009a70 <HAL_SPI_IRQHandler+0x1f8>)
 8009a12:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a18:	0018      	movs	r0, r3
 8009a1a:	f7fd fb7b 	bl	8007114 <HAL_DMA_Abort_IT>
 8009a1e:	1e03      	subs	r3, r0, #0
 8009a20:	d005      	beq.n	8009a2e <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a26:	2240      	movs	r2, #64	; 0x40
 8009a28:	431a      	orrs	r2, r3
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d016      	beq.n	8009a64 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a3a:	4a0d      	ldr	r2, [pc, #52]	; (8009a70 <HAL_SPI_IRQHandler+0x1f8>)
 8009a3c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a42:	0018      	movs	r0, r3
 8009a44:	f7fd fb66 	bl	8007114 <HAL_DMA_Abort_IT>
 8009a48:	1e03      	subs	r3, r0, #0
 8009a4a:	d00b      	beq.n	8009a64 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a50:	2240      	movs	r2, #64	; 0x40
 8009a52:	431a      	orrs	r2, r3
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8009a58:	e004      	b.n	8009a64 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	0018      	movs	r0, r3
 8009a5e:	f000 f809 	bl	8009a74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009a62:	e000      	b.n	8009a66 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8009a64:	46c0      	nop			; (mov r8, r8)
    return;
 8009a66:	46c0      	nop			; (mov r8, r8)
 8009a68:	46c0      	nop			; (mov r8, r8)
  }
}
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	b008      	add	sp, #32
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	08009a9d 	.word	0x08009a9d

08009a74 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009a7c:	46c0      	nop			; (mov r8, r8)
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	b002      	add	sp, #8
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2251      	movs	r2, #81	; 0x51
 8009a90:	5c9b      	ldrb	r3, [r3, r2]
 8009a92:	b2db      	uxtb	r3, r3
}
 8009a94:	0018      	movs	r0, r3
 8009a96:	46bd      	mov	sp, r7
 8009a98:	b002      	add	sp, #8
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2200      	movs	r2, #0
 8009aae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	0018      	movs	r0, r3
 8009aba:	f7ff ffdb 	bl	8009a74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009abe:	46c0      	nop			; (mov r8, r8)
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	b004      	add	sp, #16
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b082      	sub	sp, #8
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	330c      	adds	r3, #12
 8009ad8:	7812      	ldrb	r2, [r2, #0]
 8009ada:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ae0:	1c5a      	adds	r2, r3, #1
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	3b01      	subs	r3, #1
 8009aee:	b29a      	uxth	r2, r3
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d103      	bne.n	8009b06 <SPI_TxISR_8BIT+0x40>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	0018      	movs	r0, r3
 8009b02:	f000 f8d5 	bl	8009cb0 <SPI_CloseTx_ISR>
  }
}
 8009b06:	46c0      	nop			; (mov r8, r8)
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	b002      	add	sp, #8
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009b0e:	b580      	push	{r7, lr}
 8009b10:	b082      	sub	sp, #8
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b1a:	881a      	ldrh	r2, [r3, #0]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b26:	1c9a      	adds	r2, r3, #2
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	3b01      	subs	r3, #1
 8009b34:	b29a      	uxth	r2, r3
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d103      	bne.n	8009b4c <SPI_TxISR_16BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	0018      	movs	r0, r3
 8009b48:	f000 f8b2 	bl	8009cb0 <SPI_CloseTx_ISR>
  }
}
 8009b4c:	46c0      	nop			; (mov r8, r8)
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	b002      	add	sp, #8
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	603b      	str	r3, [r7, #0]
 8009b60:	1dfb      	adds	r3, r7, #7
 8009b62:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b64:	e050      	b.n	8009c08 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	d04d      	beq.n	8009c08 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009b6c:	f7fc fc7c 	bl	8006468 <HAL_GetTick>
 8009b70:	0002      	movs	r2, r0
 8009b72:	69bb      	ldr	r3, [r7, #24]
 8009b74:	1ad3      	subs	r3, r2, r3
 8009b76:	683a      	ldr	r2, [r7, #0]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d902      	bls.n	8009b82 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d142      	bne.n	8009c08 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	685a      	ldr	r2, [r3, #4]
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	21e0      	movs	r1, #224	; 0xe0
 8009b8e:	438a      	bics	r2, r1
 8009b90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	685a      	ldr	r2, [r3, #4]
 8009b96:	2382      	movs	r3, #130	; 0x82
 8009b98:	005b      	lsls	r3, r3, #1
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d113      	bne.n	8009bc6 <SPI_WaitFlagStateUntilTimeout+0x72>
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	689a      	ldr	r2, [r3, #8]
 8009ba2:	2380      	movs	r3, #128	; 0x80
 8009ba4:	021b      	lsls	r3, r3, #8
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d005      	beq.n	8009bb6 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	689a      	ldr	r2, [r3, #8]
 8009bae:	2380      	movs	r3, #128	; 0x80
 8009bb0:	00db      	lsls	r3, r3, #3
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d107      	bne.n	8009bc6 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2140      	movs	r1, #64	; 0x40
 8009bc2:	438a      	bics	r2, r1
 8009bc4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009bca:	2380      	movs	r3, #128	; 0x80
 8009bcc:	019b      	lsls	r3, r3, #6
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d110      	bne.n	8009bf4 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4914      	ldr	r1, [pc, #80]	; (8009c30 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8009bde:	400a      	ands	r2, r1
 8009be0:	601a      	str	r2, [r3, #0]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2180      	movs	r1, #128	; 0x80
 8009bee:	0189      	lsls	r1, r1, #6
 8009bf0:	430a      	orrs	r2, r1
 8009bf2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2251      	movs	r2, #81	; 0x51
 8009bf8:	2101      	movs	r1, #1
 8009bfa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2250      	movs	r2, #80	; 0x50
 8009c00:	2100      	movs	r1, #0
 8009c02:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009c04:	2303      	movs	r3, #3
 8009c06:	e00f      	b.n	8009c28 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	68ba      	ldr	r2, [r7, #8]
 8009c10:	4013      	ands	r3, r2
 8009c12:	68ba      	ldr	r2, [r7, #8]
 8009c14:	1ad3      	subs	r3, r2, r3
 8009c16:	425a      	negs	r2, r3
 8009c18:	4153      	adcs	r3, r2
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	001a      	movs	r2, r3
 8009c1e:	1dfb      	adds	r3, r7, #7
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d19f      	bne.n	8009b66 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009c26:	2300      	movs	r3, #0
}
 8009c28:	0018      	movs	r0, r3
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	b004      	add	sp, #16
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	ffffdfff 	.word	0xffffdfff

08009c34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b086      	sub	sp, #24
 8009c38:	af02      	add	r7, sp, #8
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	685a      	ldr	r2, [r3, #4]
 8009c44:	2382      	movs	r3, #130	; 0x82
 8009c46:	005b      	lsls	r3, r3, #1
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d112      	bne.n	8009c72 <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c4c:	68ba      	ldr	r2, [r7, #8]
 8009c4e:	68f8      	ldr	r0, [r7, #12]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	9300      	str	r3, [sp, #0]
 8009c54:	0013      	movs	r3, r2
 8009c56:	2200      	movs	r2, #0
 8009c58:	2180      	movs	r1, #128	; 0x80
 8009c5a:	f7ff ff7b 	bl	8009b54 <SPI_WaitFlagStateUntilTimeout>
 8009c5e:	1e03      	subs	r3, r0, #0
 8009c60:	d020      	beq.n	8009ca4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c66:	2220      	movs	r2, #32
 8009c68:	431a      	orrs	r2, r3
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009c6e:	2303      	movs	r3, #3
 8009c70:	e019      	b.n	8009ca6 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2251      	movs	r2, #81	; 0x51
 8009c76:	5c9b      	ldrb	r3, [r3, r2]
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	2b05      	cmp	r3, #5
 8009c7c:	d112      	bne.n	8009ca4 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009c7e:	68ba      	ldr	r2, [r7, #8]
 8009c80:	68f8      	ldr	r0, [r7, #12]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	9300      	str	r3, [sp, #0]
 8009c86:	0013      	movs	r3, r2
 8009c88:	2200      	movs	r2, #0
 8009c8a:	2101      	movs	r1, #1
 8009c8c:	f7ff ff62 	bl	8009b54 <SPI_WaitFlagStateUntilTimeout>
 8009c90:	1e03      	subs	r3, r0, #0
 8009c92:	d007      	beq.n	8009ca4 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c98:	2220      	movs	r2, #32
 8009c9a:	431a      	orrs	r2, r3
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009ca0:	2303      	movs	r3, #3
 8009ca2:	e000      	b.n	8009ca6 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8009ca4:	2300      	movs	r3, #0
}
 8009ca6:	0018      	movs	r0, r3
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	b004      	add	sp, #16
 8009cac:	bd80      	pop	{r7, pc}
	...

08009cb0 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b086      	sub	sp, #24
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8009cb8:	4b2d      	ldr	r3, [pc, #180]	; (8009d70 <SPI_CloseTx_ISR+0xc0>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	492d      	ldr	r1, [pc, #180]	; (8009d74 <SPI_CloseTx_ISR+0xc4>)
 8009cbe:	0018      	movs	r0, r3
 8009cc0:	f7f6 fa2a 	bl	8000118 <__udivsi3>
 8009cc4:	0003      	movs	r3, r0
 8009cc6:	001a      	movs	r2, r3
 8009cc8:	2364      	movs	r3, #100	; 0x64
 8009cca:	4353      	muls	r3, r2
 8009ccc:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009cce:	f7fc fbcb 	bl	8006468 <HAL_GetTick>
 8009cd2:	0003      	movs	r3, r0
 8009cd4:	617b      	str	r3, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d106      	bne.n	8009cea <SPI_CloseTx_ISR+0x3a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ce0:	2220      	movs	r2, #32
 8009ce2:	431a      	orrs	r2, r3
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009ce8:	e008      	b.n	8009cfc <SPI_CloseTx_ISR+0x4c>
    }
    count--;
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	3b01      	subs	r3, #1
 8009cee:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	2202      	movs	r2, #2
 8009cf8:	4013      	ands	r3, r2
 8009cfa:	d0ec      	beq.n	8009cd6 <SPI_CloseTx_ISR+0x26>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	685a      	ldr	r2, [r3, #4]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	21a0      	movs	r1, #160	; 0xa0
 8009d08:	438a      	bics	r2, r1
 8009d0a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009d0c:	697a      	ldr	r2, [r7, #20]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2164      	movs	r1, #100	; 0x64
 8009d12:	0018      	movs	r0, r3
 8009d14:	f7ff ff8e 	bl	8009c34 <SPI_EndRxTxTransaction>
 8009d18:	1e03      	subs	r3, r0, #0
 8009d1a:	d005      	beq.n	8009d28 <SPI_CloseTx_ISR+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d20:	2220      	movs	r2, #32
 8009d22:	431a      	orrs	r2, r3
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d10a      	bne.n	8009d46 <SPI_CloseTx_ISR+0x96>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d30:	2300      	movs	r3, #0
 8009d32:	60fb      	str	r3, [r7, #12]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	68db      	ldr	r3, [r3, #12]
 8009d3a:	60fb      	str	r3, [r7, #12]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	689b      	ldr	r3, [r3, #8]
 8009d42:	60fb      	str	r3, [r7, #12]
 8009d44:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2251      	movs	r2, #81	; 0x51
 8009d4a:	2101      	movs	r1, #1
 8009d4c:	5499      	strb	r1, [r3, r2]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d004      	beq.n	8009d60 <SPI_CloseTx_ISR+0xb0>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	0018      	movs	r0, r3
 8009d5a:	f7ff fe8b 	bl	8009a74 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8009d5e:	e003      	b.n	8009d68 <SPI_CloseTx_ISR+0xb8>
    HAL_SPI_TxCpltCallback(hspi);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	0018      	movs	r0, r3
 8009d64:	f7f7 fd3a 	bl	80017dc <HAL_SPI_TxCpltCallback>
}
 8009d68:	46c0      	nop			; (mov r8, r8)
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	b006      	add	sp, #24
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	20000010 	.word	0x20000010
 8009d74:	00005dc0 	.word	0x00005dc0

08009d78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d101      	bne.n	8009d8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d86:	2301      	movs	r3, #1
 8009d88:	e01e      	b.n	8009dc8 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2239      	movs	r2, #57	; 0x39
 8009d8e:	5c9b      	ldrb	r3, [r3, r2]
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d107      	bne.n	8009da6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2238      	movs	r2, #56	; 0x38
 8009d9a:	2100      	movs	r1, #0
 8009d9c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	0018      	movs	r0, r3
 8009da2:	f7fa f9ef 	bl	8004184 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2239      	movs	r2, #57	; 0x39
 8009daa:	2102      	movs	r1, #2
 8009dac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	3304      	adds	r3, #4
 8009db6:	0019      	movs	r1, r3
 8009db8:	0010      	movs	r0, r2
 8009dba:	f000 fc3f 	bl	800a63c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2239      	movs	r2, #57	; 0x39
 8009dc2:	2101      	movs	r1, #1
 8009dc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009dc6:	2300      	movs	r3, #0
}
 8009dc8:	0018      	movs	r0, r3
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	b002      	add	sp, #8
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2239      	movs	r2, #57	; 0x39
 8009ddc:	2102      	movs	r1, #2
 8009dde:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	2207      	movs	r2, #7
 8009de8:	4013      	ands	r3, r2
 8009dea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2b06      	cmp	r3, #6
 8009df0:	d007      	beq.n	8009e02 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2101      	movs	r1, #1
 8009dfe:	430a      	orrs	r2, r1
 8009e00:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2239      	movs	r2, #57	; 0x39
 8009e06:	2101      	movs	r1, #1
 8009e08:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8009e0a:	2300      	movs	r3, #0
}
 8009e0c:	0018      	movs	r0, r3
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	b004      	add	sp, #16
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	68da      	ldr	r2, [r3, #12]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2101      	movs	r1, #1
 8009e28:	430a      	orrs	r2, r1
 8009e2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	2207      	movs	r2, #7
 8009e34:	4013      	ands	r3, r2
 8009e36:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2b06      	cmp	r3, #6
 8009e3c:	d007      	beq.n	8009e4e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	2101      	movs	r1, #1
 8009e4a:	430a      	orrs	r2, r1
 8009e4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009e4e:	2300      	movs	r3, #0
}
 8009e50:	0018      	movs	r0, r3
 8009e52:	46bd      	mov	sp, r7
 8009e54:	b004      	add	sp, #16
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	68da      	ldr	r2, [r3, #12]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	2101      	movs	r1, #1
 8009e6c:	438a      	bics	r2, r1
 8009e6e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	6a1b      	ldr	r3, [r3, #32]
 8009e76:	4a08      	ldr	r2, [pc, #32]	; (8009e98 <HAL_TIM_Base_Stop_IT+0x40>)
 8009e78:	4013      	ands	r3, r2
 8009e7a:	d107      	bne.n	8009e8c <HAL_TIM_Base_Stop_IT+0x34>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2101      	movs	r1, #1
 8009e88:	438a      	bics	r2, r1
 8009e8a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009e8c:	2300      	movs	r3, #0
}
 8009e8e:	0018      	movs	r0, r3
 8009e90:	46bd      	mov	sp, r7
 8009e92:	b002      	add	sp, #8
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	46c0      	nop			; (mov r8, r8)
 8009e98:	00001111 	.word	0x00001111

08009e9c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d101      	bne.n	8009eae <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e01e      	b.n	8009eec <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2239      	movs	r2, #57	; 0x39
 8009eb2:	5c9b      	ldrb	r3, [r3, r2]
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d107      	bne.n	8009eca <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2238      	movs	r2, #56	; 0x38
 8009ebe:	2100      	movs	r1, #0
 8009ec0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	0018      	movs	r0, r3
 8009ec6:	f000 f815 	bl	8009ef4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2239      	movs	r2, #57	; 0x39
 8009ece:	2102      	movs	r1, #2
 8009ed0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	3304      	adds	r3, #4
 8009eda:	0019      	movs	r1, r3
 8009edc:	0010      	movs	r0, r2
 8009ede:	f000 fbad 	bl	800a63c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2239      	movs	r2, #57	; 0x39
 8009ee6:	2101      	movs	r1, #1
 8009ee8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009eea:	2300      	movs	r3, #0
}
 8009eec:	0018      	movs	r0, r3
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	b002      	add	sp, #8
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b082      	sub	sp, #8
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009efc:	46c0      	nop			; (mov r8, r8)
 8009efe:	46bd      	mov	sp, r7
 8009f00:	b002      	add	sp, #8
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	2b04      	cmp	r3, #4
 8009f12:	d011      	beq.n	8009f38 <HAL_TIM_OC_Start_IT+0x34>
 8009f14:	d802      	bhi.n	8009f1c <HAL_TIM_OC_Start_IT+0x18>
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d005      	beq.n	8009f26 <HAL_TIM_OC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 8009f1a:	e028      	b.n	8009f6e <HAL_TIM_OC_Start_IT+0x6a>
  switch (Channel)
 8009f1c:	2b08      	cmp	r3, #8
 8009f1e:	d014      	beq.n	8009f4a <HAL_TIM_OC_Start_IT+0x46>
 8009f20:	2b0c      	cmp	r3, #12
 8009f22:	d01b      	beq.n	8009f5c <HAL_TIM_OC_Start_IT+0x58>
      break;
 8009f24:	e023      	b.n	8009f6e <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	68da      	ldr	r2, [r3, #12]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	2102      	movs	r1, #2
 8009f32:	430a      	orrs	r2, r1
 8009f34:	60da      	str	r2, [r3, #12]
      break;
 8009f36:	e01a      	b.n	8009f6e <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	68da      	ldr	r2, [r3, #12]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2104      	movs	r1, #4
 8009f44:	430a      	orrs	r2, r1
 8009f46:	60da      	str	r2, [r3, #12]
      break;
 8009f48:	e011      	b.n	8009f6e <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	68da      	ldr	r2, [r3, #12]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	2108      	movs	r1, #8
 8009f56:	430a      	orrs	r2, r1
 8009f58:	60da      	str	r2, [r3, #12]
      break;
 8009f5a:	e008      	b.n	8009f6e <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68da      	ldr	r2, [r3, #12]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	2110      	movs	r1, #16
 8009f68:	430a      	orrs	r2, r1
 8009f6a:	60da      	str	r2, [r3, #12]
      break;
 8009f6c:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	6839      	ldr	r1, [r7, #0]
 8009f74:	2201      	movs	r2, #1
 8009f76:	0018      	movs	r0, r3
 8009f78:	f000 fd5c 	bl	800aa34 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	689b      	ldr	r3, [r3, #8]
 8009f82:	2207      	movs	r2, #7
 8009f84:	4013      	ands	r3, r2
 8009f86:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2b06      	cmp	r3, #6
 8009f8c:	d007      	beq.n	8009f9e <HAL_TIM_OC_Start_IT+0x9a>
  {
    __HAL_TIM_ENABLE(htim);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	2101      	movs	r1, #1
 8009f9a:	430a      	orrs	r2, r1
 8009f9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009f9e:	2300      	movs	r3, #0
}
 8009fa0:	0018      	movs	r0, r3
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	b004      	add	sp, #16
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	2b04      	cmp	r3, #4
 8009fb6:	d011      	beq.n	8009fdc <HAL_TIM_OC_Stop_IT+0x34>
 8009fb8:	d802      	bhi.n	8009fc0 <HAL_TIM_OC_Stop_IT+0x18>
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d005      	beq.n	8009fca <HAL_TIM_OC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 8009fbe:	e028      	b.n	800a012 <HAL_TIM_OC_Stop_IT+0x6a>
  switch (Channel)
 8009fc0:	2b08      	cmp	r3, #8
 8009fc2:	d014      	beq.n	8009fee <HAL_TIM_OC_Stop_IT+0x46>
 8009fc4:	2b0c      	cmp	r3, #12
 8009fc6:	d01b      	beq.n	800a000 <HAL_TIM_OC_Stop_IT+0x58>
      break;
 8009fc8:	e023      	b.n	800a012 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	68da      	ldr	r2, [r3, #12]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	2102      	movs	r1, #2
 8009fd6:	438a      	bics	r2, r1
 8009fd8:	60da      	str	r2, [r3, #12]
      break;
 8009fda:	e01a      	b.n	800a012 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	68da      	ldr	r2, [r3, #12]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	2104      	movs	r1, #4
 8009fe8:	438a      	bics	r2, r1
 8009fea:	60da      	str	r2, [r3, #12]
      break;
 8009fec:	e011      	b.n	800a012 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	68da      	ldr	r2, [r3, #12]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	2108      	movs	r1, #8
 8009ffa:	438a      	bics	r2, r1
 8009ffc:	60da      	str	r2, [r3, #12]
      break;
 8009ffe:	e008      	b.n	800a012 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	68da      	ldr	r2, [r3, #12]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2110      	movs	r1, #16
 800a00c:	438a      	bics	r2, r1
 800a00e:	60da      	str	r2, [r3, #12]
      break;
 800a010:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	6839      	ldr	r1, [r7, #0]
 800a018:	2200      	movs	r2, #0
 800a01a:	0018      	movs	r0, r3
 800a01c:	f000 fd0a 	bl	800aa34 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	6a1b      	ldr	r3, [r3, #32]
 800a026:	4a08      	ldr	r2, [pc, #32]	; (800a048 <HAL_TIM_OC_Stop_IT+0xa0>)
 800a028:	4013      	ands	r3, r2
 800a02a:	d107      	bne.n	800a03c <HAL_TIM_OC_Stop_IT+0x94>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	2101      	movs	r1, #1
 800a038:	438a      	bics	r2, r1
 800a03a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a03c:	2300      	movs	r3, #0
}
 800a03e:	0018      	movs	r0, r3
 800a040:	46bd      	mov	sp, r7
 800a042:	b002      	add	sp, #8
 800a044:	bd80      	pop	{r7, pc}
 800a046:	46c0      	nop			; (mov r8, r8)
 800a048:	00001111 	.word	0x00001111

0800a04c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d101      	bne.n	800a05e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	e01e      	b.n	800a09c <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2239      	movs	r2, #57	; 0x39
 800a062:	5c9b      	ldrb	r3, [r3, r2]
 800a064:	b2db      	uxtb	r3, r3
 800a066:	2b00      	cmp	r3, #0
 800a068:	d107      	bne.n	800a07a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2238      	movs	r2, #56	; 0x38
 800a06e:	2100      	movs	r1, #0
 800a070:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	0018      	movs	r0, r3
 800a076:	f000 f815 	bl	800a0a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2239      	movs	r2, #57	; 0x39
 800a07e:	2102      	movs	r1, #2
 800a080:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	3304      	adds	r3, #4
 800a08a:	0019      	movs	r1, r3
 800a08c:	0010      	movs	r0, r2
 800a08e:	f000 fad5 	bl	800a63c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2239      	movs	r2, #57	; 0x39
 800a096:	2101      	movs	r1, #1
 800a098:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a09a:	2300      	movs	r3, #0
}
 800a09c:	0018      	movs	r0, r3
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	b002      	add	sp, #8
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a0ac:	46c0      	nop			; (mov r8, r8)
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	b002      	add	sp, #8
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	691b      	ldr	r3, [r3, #16]
 800a0c2:	2202      	movs	r2, #2
 800a0c4:	4013      	ands	r3, r2
 800a0c6:	2b02      	cmp	r3, #2
 800a0c8:	d124      	bne.n	800a114 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	2202      	movs	r2, #2
 800a0d2:	4013      	ands	r3, r2
 800a0d4:	2b02      	cmp	r3, #2
 800a0d6:	d11d      	bne.n	800a114 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	2203      	movs	r2, #3
 800a0de:	4252      	negs	r2, r2
 800a0e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	699b      	ldr	r3, [r3, #24]
 800a0ee:	2203      	movs	r2, #3
 800a0f0:	4013      	ands	r3, r2
 800a0f2:	d004      	beq.n	800a0fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	0018      	movs	r0, r3
 800a0f8:	f000 fa88 	bl	800a60c <HAL_TIM_IC_CaptureCallback>
 800a0fc:	e007      	b.n	800a10e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	0018      	movs	r0, r3
 800a102:	f7fa fa19 	bl	8004538 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	0018      	movs	r0, r3
 800a10a:	f000 fa87 	bl	800a61c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	691b      	ldr	r3, [r3, #16]
 800a11a:	2204      	movs	r2, #4
 800a11c:	4013      	ands	r3, r2
 800a11e:	2b04      	cmp	r3, #4
 800a120:	d125      	bne.n	800a16e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	68db      	ldr	r3, [r3, #12]
 800a128:	2204      	movs	r2, #4
 800a12a:	4013      	ands	r3, r2
 800a12c:	2b04      	cmp	r3, #4
 800a12e:	d11e      	bne.n	800a16e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	2205      	movs	r2, #5
 800a136:	4252      	negs	r2, r2
 800a138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2202      	movs	r2, #2
 800a13e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	699a      	ldr	r2, [r3, #24]
 800a146:	23c0      	movs	r3, #192	; 0xc0
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	4013      	ands	r3, r2
 800a14c:	d004      	beq.n	800a158 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	0018      	movs	r0, r3
 800a152:	f000 fa5b 	bl	800a60c <HAL_TIM_IC_CaptureCallback>
 800a156:	e007      	b.n	800a168 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	0018      	movs	r0, r3
 800a15c:	f7fa f9ec 	bl	8004538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	0018      	movs	r0, r3
 800a164:	f000 fa5a 	bl	800a61c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	691b      	ldr	r3, [r3, #16]
 800a174:	2208      	movs	r2, #8
 800a176:	4013      	ands	r3, r2
 800a178:	2b08      	cmp	r3, #8
 800a17a:	d124      	bne.n	800a1c6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	2208      	movs	r2, #8
 800a184:	4013      	ands	r3, r2
 800a186:	2b08      	cmp	r3, #8
 800a188:	d11d      	bne.n	800a1c6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	2209      	movs	r2, #9
 800a190:	4252      	negs	r2, r2
 800a192:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2204      	movs	r2, #4
 800a198:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	69db      	ldr	r3, [r3, #28]
 800a1a0:	2203      	movs	r2, #3
 800a1a2:	4013      	ands	r3, r2
 800a1a4:	d004      	beq.n	800a1b0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	0018      	movs	r0, r3
 800a1aa:	f000 fa2f 	bl	800a60c <HAL_TIM_IC_CaptureCallback>
 800a1ae:	e007      	b.n	800a1c0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	0018      	movs	r0, r3
 800a1b4:	f7fa f9c0 	bl	8004538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	0018      	movs	r0, r3
 800a1bc:	f000 fa2e 	bl	800a61c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	691b      	ldr	r3, [r3, #16]
 800a1cc:	2210      	movs	r2, #16
 800a1ce:	4013      	ands	r3, r2
 800a1d0:	2b10      	cmp	r3, #16
 800a1d2:	d125      	bne.n	800a220 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	68db      	ldr	r3, [r3, #12]
 800a1da:	2210      	movs	r2, #16
 800a1dc:	4013      	ands	r3, r2
 800a1de:	2b10      	cmp	r3, #16
 800a1e0:	d11e      	bne.n	800a220 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	2211      	movs	r2, #17
 800a1e8:	4252      	negs	r2, r2
 800a1ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2208      	movs	r2, #8
 800a1f0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	69da      	ldr	r2, [r3, #28]
 800a1f8:	23c0      	movs	r3, #192	; 0xc0
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	4013      	ands	r3, r2
 800a1fe:	d004      	beq.n	800a20a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	0018      	movs	r0, r3
 800a204:	f000 fa02 	bl	800a60c <HAL_TIM_IC_CaptureCallback>
 800a208:	e007      	b.n	800a21a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	0018      	movs	r0, r3
 800a20e:	f7fa f993 	bl	8004538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	0018      	movs	r0, r3
 800a216:	f000 fa01 	bl	800a61c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2200      	movs	r2, #0
 800a21e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	691b      	ldr	r3, [r3, #16]
 800a226:	2201      	movs	r2, #1
 800a228:	4013      	ands	r3, r2
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d10f      	bne.n	800a24e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	68db      	ldr	r3, [r3, #12]
 800a234:	2201      	movs	r2, #1
 800a236:	4013      	ands	r3, r2
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d108      	bne.n	800a24e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	2202      	movs	r2, #2
 800a242:	4252      	negs	r2, r2
 800a244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	0018      	movs	r0, r3
 800a24a:	f7fa f937 	bl	80044bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	691b      	ldr	r3, [r3, #16]
 800a254:	2240      	movs	r2, #64	; 0x40
 800a256:	4013      	ands	r3, r2
 800a258:	2b40      	cmp	r3, #64	; 0x40
 800a25a:	d10f      	bne.n	800a27c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	2240      	movs	r2, #64	; 0x40
 800a264:	4013      	ands	r3, r2
 800a266:	2b40      	cmp	r3, #64	; 0x40
 800a268:	d108      	bne.n	800a27c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	2241      	movs	r2, #65	; 0x41
 800a270:	4252      	negs	r2, r2
 800a272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	0018      	movs	r0, r3
 800a278:	f000 f9d8 	bl	800a62c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a27c:	46c0      	nop			; (mov r8, r8)
 800a27e:	46bd      	mov	sp, r7
 800a280:	b002      	add	sp, #8
 800a282:	bd80      	pop	{r7, pc}

0800a284 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	60b9      	str	r1, [r7, #8]
 800a28e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2238      	movs	r2, #56	; 0x38
 800a294:	5c9b      	ldrb	r3, [r3, r2]
 800a296:	2b01      	cmp	r3, #1
 800a298:	d101      	bne.n	800a29e <HAL_TIM_OC_ConfigChannel+0x1a>
 800a29a:	2302      	movs	r3, #2
 800a29c:	e03c      	b.n	800a318 <HAL_TIM_OC_ConfigChannel+0x94>
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2238      	movs	r2, #56	; 0x38
 800a2a2:	2101      	movs	r1, #1
 800a2a4:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2239      	movs	r2, #57	; 0x39
 800a2aa:	2102      	movs	r1, #2
 800a2ac:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2b04      	cmp	r3, #4
 800a2b2:	d010      	beq.n	800a2d6 <HAL_TIM_OC_ConfigChannel+0x52>
 800a2b4:	d802      	bhi.n	800a2bc <HAL_TIM_OC_ConfigChannel+0x38>
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d005      	beq.n	800a2c6 <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 800a2ba:	e024      	b.n	800a306 <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 800a2bc:	2b08      	cmp	r3, #8
 800a2be:	d012      	beq.n	800a2e6 <HAL_TIM_OC_ConfigChannel+0x62>
 800a2c0:	2b0c      	cmp	r3, #12
 800a2c2:	d018      	beq.n	800a2f6 <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 800a2c4:	e01f      	b.n	800a306 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	68ba      	ldr	r2, [r7, #8]
 800a2cc:	0011      	movs	r1, r2
 800a2ce:	0018      	movs	r0, r3
 800a2d0:	f000 fa12 	bl	800a6f8 <TIM_OC1_SetConfig>
      break;
 800a2d4:	e017      	b.n	800a306 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	68ba      	ldr	r2, [r7, #8]
 800a2dc:	0011      	movs	r1, r2
 800a2de:	0018      	movs	r0, r3
 800a2e0:	f000 fa46 	bl	800a770 <TIM_OC2_SetConfig>
      break;
 800a2e4:	e00f      	b.n	800a306 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	68ba      	ldr	r2, [r7, #8]
 800a2ec:	0011      	movs	r1, r2
 800a2ee:	0018      	movs	r0, r3
 800a2f0:	f000 fa80 	bl	800a7f4 <TIM_OC3_SetConfig>
      break;
 800a2f4:	e007      	b.n	800a306 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	68ba      	ldr	r2, [r7, #8]
 800a2fc:	0011      	movs	r1, r2
 800a2fe:	0018      	movs	r0, r3
 800a300:	f000 fab8 	bl	800a874 <TIM_OC4_SetConfig>
      break;
 800a304:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2239      	movs	r2, #57	; 0x39
 800a30a:	2101      	movs	r1, #1
 800a30c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2238      	movs	r2, #56	; 0x38
 800a312:	2100      	movs	r1, #0
 800a314:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a316:	2300      	movs	r3, #0
}
 800a318:	0018      	movs	r0, r3
 800a31a:	46bd      	mov	sp, r7
 800a31c:	b004      	add	sp, #16
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	60b9      	str	r1, [r7, #8]
 800a32a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2238      	movs	r2, #56	; 0x38
 800a330:	5c9b      	ldrb	r3, [r3, r2]
 800a332:	2b01      	cmp	r3, #1
 800a334:	d101      	bne.n	800a33a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a336:	2302      	movs	r3, #2
 800a338:	e0a4      	b.n	800a484 <HAL_TIM_PWM_ConfigChannel+0x164>
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2238      	movs	r2, #56	; 0x38
 800a33e:	2101      	movs	r1, #1
 800a340:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2239      	movs	r2, #57	; 0x39
 800a346:	2102      	movs	r1, #2
 800a348:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2b04      	cmp	r3, #4
 800a34e:	d029      	beq.n	800a3a4 <HAL_TIM_PWM_ConfigChannel+0x84>
 800a350:	d802      	bhi.n	800a358 <HAL_TIM_PWM_ConfigChannel+0x38>
 800a352:	2b00      	cmp	r3, #0
 800a354:	d005      	beq.n	800a362 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 800a356:	e08c      	b.n	800a472 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 800a358:	2b08      	cmp	r3, #8
 800a35a:	d046      	beq.n	800a3ea <HAL_TIM_PWM_ConfigChannel+0xca>
 800a35c:	2b0c      	cmp	r3, #12
 800a35e:	d065      	beq.n	800a42c <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 800a360:	e087      	b.n	800a472 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	68ba      	ldr	r2, [r7, #8]
 800a368:	0011      	movs	r1, r2
 800a36a:	0018      	movs	r0, r3
 800a36c:	f000 f9c4 	bl	800a6f8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	699a      	ldr	r2, [r3, #24]
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2108      	movs	r1, #8
 800a37c:	430a      	orrs	r2, r1
 800a37e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	699a      	ldr	r2, [r3, #24]
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	2104      	movs	r1, #4
 800a38c:	438a      	bics	r2, r1
 800a38e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	6999      	ldr	r1, [r3, #24]
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	68da      	ldr	r2, [r3, #12]
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	430a      	orrs	r2, r1
 800a3a0:	619a      	str	r2, [r3, #24]
      break;
 800a3a2:	e066      	b.n	800a472 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	68ba      	ldr	r2, [r7, #8]
 800a3aa:	0011      	movs	r1, r2
 800a3ac:	0018      	movs	r0, r3
 800a3ae:	f000 f9df 	bl	800a770 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	699a      	ldr	r2, [r3, #24]
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2180      	movs	r1, #128	; 0x80
 800a3be:	0109      	lsls	r1, r1, #4
 800a3c0:	430a      	orrs	r2, r1
 800a3c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	699a      	ldr	r2, [r3, #24]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	492f      	ldr	r1, [pc, #188]	; (800a48c <HAL_TIM_PWM_ConfigChannel+0x16c>)
 800a3d0:	400a      	ands	r2, r1
 800a3d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	6999      	ldr	r1, [r3, #24]
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	68db      	ldr	r3, [r3, #12]
 800a3de:	021a      	lsls	r2, r3, #8
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	430a      	orrs	r2, r1
 800a3e6:	619a      	str	r2, [r3, #24]
      break;
 800a3e8:	e043      	b.n	800a472 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	68ba      	ldr	r2, [r7, #8]
 800a3f0:	0011      	movs	r1, r2
 800a3f2:	0018      	movs	r0, r3
 800a3f4:	f000 f9fe 	bl	800a7f4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	69da      	ldr	r2, [r3, #28]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	2108      	movs	r1, #8
 800a404:	430a      	orrs	r2, r1
 800a406:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	69da      	ldr	r2, [r3, #28]
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2104      	movs	r1, #4
 800a414:	438a      	bics	r2, r1
 800a416:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	69d9      	ldr	r1, [r3, #28]
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	68da      	ldr	r2, [r3, #12]
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	430a      	orrs	r2, r1
 800a428:	61da      	str	r2, [r3, #28]
      break;
 800a42a:	e022      	b.n	800a472 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	68ba      	ldr	r2, [r7, #8]
 800a432:	0011      	movs	r1, r2
 800a434:	0018      	movs	r0, r3
 800a436:	f000 fa1d 	bl	800a874 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	69da      	ldr	r2, [r3, #28]
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	2180      	movs	r1, #128	; 0x80
 800a446:	0109      	lsls	r1, r1, #4
 800a448:	430a      	orrs	r2, r1
 800a44a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	69da      	ldr	r2, [r3, #28]
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	490d      	ldr	r1, [pc, #52]	; (800a48c <HAL_TIM_PWM_ConfigChannel+0x16c>)
 800a458:	400a      	ands	r2, r1
 800a45a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	69d9      	ldr	r1, [r3, #28]
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	021a      	lsls	r2, r3, #8
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	430a      	orrs	r2, r1
 800a46e:	61da      	str	r2, [r3, #28]
      break;
 800a470:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2239      	movs	r2, #57	; 0x39
 800a476:	2101      	movs	r1, #1
 800a478:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2238      	movs	r2, #56	; 0x38
 800a47e:	2100      	movs	r1, #0
 800a480:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a482:	2300      	movs	r3, #0
}
 800a484:	0018      	movs	r0, r3
 800a486:	46bd      	mov	sp, r7
 800a488:	b004      	add	sp, #16
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	fffffbff 	.word	0xfffffbff

0800a490 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2238      	movs	r2, #56	; 0x38
 800a49e:	5c9b      	ldrb	r3, [r3, r2]
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d101      	bne.n	800a4a8 <HAL_TIM_ConfigClockSource+0x18>
 800a4a4:	2302      	movs	r3, #2
 800a4a6:	e0ab      	b.n	800a600 <HAL_TIM_ConfigClockSource+0x170>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2238      	movs	r2, #56	; 0x38
 800a4ac:	2101      	movs	r1, #1
 800a4ae:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2239      	movs	r2, #57	; 0x39
 800a4b4:	2102      	movs	r1, #2
 800a4b6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	689b      	ldr	r3, [r3, #8]
 800a4be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2277      	movs	r2, #119	; 0x77
 800a4c4:	4393      	bics	r3, r2
 800a4c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	4a4f      	ldr	r2, [pc, #316]	; (800a608 <HAL_TIM_ConfigClockSource+0x178>)
 800a4cc:	4013      	ands	r3, r2
 800a4ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	68fa      	ldr	r2, [r7, #12]
 800a4d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	2b40      	cmp	r3, #64	; 0x40
 800a4de:	d100      	bne.n	800a4e2 <HAL_TIM_ConfigClockSource+0x52>
 800a4e0:	e06b      	b.n	800a5ba <HAL_TIM_ConfigClockSource+0x12a>
 800a4e2:	d80e      	bhi.n	800a502 <HAL_TIM_ConfigClockSource+0x72>
 800a4e4:	2b10      	cmp	r3, #16
 800a4e6:	d100      	bne.n	800a4ea <HAL_TIM_ConfigClockSource+0x5a>
 800a4e8:	e077      	b.n	800a5da <HAL_TIM_ConfigClockSource+0x14a>
 800a4ea:	d803      	bhi.n	800a4f4 <HAL_TIM_ConfigClockSource+0x64>
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d100      	bne.n	800a4f2 <HAL_TIM_ConfigClockSource+0x62>
 800a4f0:	e073      	b.n	800a5da <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a4f2:	e07c      	b.n	800a5ee <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800a4f4:	2b20      	cmp	r3, #32
 800a4f6:	d100      	bne.n	800a4fa <HAL_TIM_ConfigClockSource+0x6a>
 800a4f8:	e06f      	b.n	800a5da <HAL_TIM_ConfigClockSource+0x14a>
 800a4fa:	2b30      	cmp	r3, #48	; 0x30
 800a4fc:	d100      	bne.n	800a500 <HAL_TIM_ConfigClockSource+0x70>
 800a4fe:	e06c      	b.n	800a5da <HAL_TIM_ConfigClockSource+0x14a>
      break;
 800a500:	e075      	b.n	800a5ee <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800a502:	2b70      	cmp	r3, #112	; 0x70
 800a504:	d00e      	beq.n	800a524 <HAL_TIM_ConfigClockSource+0x94>
 800a506:	d804      	bhi.n	800a512 <HAL_TIM_ConfigClockSource+0x82>
 800a508:	2b50      	cmp	r3, #80	; 0x50
 800a50a:	d036      	beq.n	800a57a <HAL_TIM_ConfigClockSource+0xea>
 800a50c:	2b60      	cmp	r3, #96	; 0x60
 800a50e:	d044      	beq.n	800a59a <HAL_TIM_ConfigClockSource+0x10a>
      break;
 800a510:	e06d      	b.n	800a5ee <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800a512:	2280      	movs	r2, #128	; 0x80
 800a514:	0152      	lsls	r2, r2, #5
 800a516:	4293      	cmp	r3, r2
 800a518:	d068      	beq.n	800a5ec <HAL_TIM_ConfigClockSource+0x15c>
 800a51a:	2280      	movs	r2, #128	; 0x80
 800a51c:	0192      	lsls	r2, r2, #6
 800a51e:	4293      	cmp	r3, r2
 800a520:	d017      	beq.n	800a552 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800a522:	e064      	b.n	800a5ee <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6818      	ldr	r0, [r3, #0]
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	6899      	ldr	r1, [r3, #8]
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	685a      	ldr	r2, [r3, #4]
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	f000 fa5e 	bl	800a9f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	689b      	ldr	r3, [r3, #8]
 800a53e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2277      	movs	r2, #119	; 0x77
 800a544:	4313      	orrs	r3, r2
 800a546:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	609a      	str	r2, [r3, #8]
      break;
 800a550:	e04d      	b.n	800a5ee <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6818      	ldr	r0, [r3, #0]
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	6899      	ldr	r1, [r3, #8]
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	685a      	ldr	r2, [r3, #4]
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	68db      	ldr	r3, [r3, #12]
 800a562:	f000 fa47 	bl	800a9f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	689a      	ldr	r2, [r3, #8]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	2180      	movs	r1, #128	; 0x80
 800a572:	01c9      	lsls	r1, r1, #7
 800a574:	430a      	orrs	r2, r1
 800a576:	609a      	str	r2, [r3, #8]
      break;
 800a578:	e039      	b.n	800a5ee <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6818      	ldr	r0, [r3, #0]
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	6859      	ldr	r1, [r3, #4]
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	68db      	ldr	r3, [r3, #12]
 800a586:	001a      	movs	r2, r3
 800a588:	f000 f9ba 	bl	800a900 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2150      	movs	r1, #80	; 0x50
 800a592:	0018      	movs	r0, r3
 800a594:	f000 fa14 	bl	800a9c0 <TIM_ITRx_SetConfig>
      break;
 800a598:	e029      	b.n	800a5ee <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6818      	ldr	r0, [r3, #0]
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	6859      	ldr	r1, [r3, #4]
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	68db      	ldr	r3, [r3, #12]
 800a5a6:	001a      	movs	r2, r3
 800a5a8:	f000 f9d8 	bl	800a95c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	2160      	movs	r1, #96	; 0x60
 800a5b2:	0018      	movs	r0, r3
 800a5b4:	f000 fa04 	bl	800a9c0 <TIM_ITRx_SetConfig>
      break;
 800a5b8:	e019      	b.n	800a5ee <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6818      	ldr	r0, [r3, #0]
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	6859      	ldr	r1, [r3, #4]
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	001a      	movs	r2, r3
 800a5c8:	f000 f99a 	bl	800a900 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	2140      	movs	r1, #64	; 0x40
 800a5d2:	0018      	movs	r0, r3
 800a5d4:	f000 f9f4 	bl	800a9c0 <TIM_ITRx_SetConfig>
      break;
 800a5d8:	e009      	b.n	800a5ee <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	0019      	movs	r1, r3
 800a5e4:	0010      	movs	r0, r2
 800a5e6:	f000 f9eb 	bl	800a9c0 <TIM_ITRx_SetConfig>
      break;
 800a5ea:	e000      	b.n	800a5ee <HAL_TIM_ConfigClockSource+0x15e>
      break;
 800a5ec:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2239      	movs	r2, #57	; 0x39
 800a5f2:	2101      	movs	r1, #1
 800a5f4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2238      	movs	r2, #56	; 0x38
 800a5fa:	2100      	movs	r1, #0
 800a5fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a5fe:	2300      	movs	r3, #0
}
 800a600:	0018      	movs	r0, r3
 800a602:	46bd      	mov	sp, r7
 800a604:	b004      	add	sp, #16
 800a606:	bd80      	pop	{r7, pc}
 800a608:	ffff00ff 	.word	0xffff00ff

0800a60c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b082      	sub	sp, #8
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a614:	46c0      	nop			; (mov r8, r8)
 800a616:	46bd      	mov	sp, r7
 800a618:	b002      	add	sp, #8
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a624:	46c0      	nop			; (mov r8, r8)
 800a626:	46bd      	mov	sp, r7
 800a628:	b002      	add	sp, #8
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a634:	46c0      	nop			; (mov r8, r8)
 800a636:	46bd      	mov	sp, r7
 800a638:	b002      	add	sp, #8
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b084      	sub	sp, #16
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a64c:	687a      	ldr	r2, [r7, #4]
 800a64e:	2380      	movs	r3, #128	; 0x80
 800a650:	05db      	lsls	r3, r3, #23
 800a652:	429a      	cmp	r2, r3
 800a654:	d00b      	beq.n	800a66e <TIM_Base_SetConfig+0x32>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	4a23      	ldr	r2, [pc, #140]	; (800a6e8 <TIM_Base_SetConfig+0xac>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d007      	beq.n	800a66e <TIM_Base_SetConfig+0x32>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	4a22      	ldr	r2, [pc, #136]	; (800a6ec <TIM_Base_SetConfig+0xb0>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d003      	beq.n	800a66e <TIM_Base_SetConfig+0x32>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	4a21      	ldr	r2, [pc, #132]	; (800a6f0 <TIM_Base_SetConfig+0xb4>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d108      	bne.n	800a680 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2270      	movs	r2, #112	; 0x70
 800a672:	4393      	bics	r3, r2
 800a674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	68fa      	ldr	r2, [r7, #12]
 800a67c:	4313      	orrs	r3, r2
 800a67e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	2380      	movs	r3, #128	; 0x80
 800a684:	05db      	lsls	r3, r3, #23
 800a686:	429a      	cmp	r2, r3
 800a688:	d00b      	beq.n	800a6a2 <TIM_Base_SetConfig+0x66>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4a16      	ldr	r2, [pc, #88]	; (800a6e8 <TIM_Base_SetConfig+0xac>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d007      	beq.n	800a6a2 <TIM_Base_SetConfig+0x66>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	4a15      	ldr	r2, [pc, #84]	; (800a6ec <TIM_Base_SetConfig+0xb0>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d003      	beq.n	800a6a2 <TIM_Base_SetConfig+0x66>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	4a14      	ldr	r2, [pc, #80]	; (800a6f0 <TIM_Base_SetConfig+0xb4>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d108      	bne.n	800a6b4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	4a13      	ldr	r2, [pc, #76]	; (800a6f4 <TIM_Base_SetConfig+0xb8>)
 800a6a6:	4013      	ands	r3, r2
 800a6a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	68db      	ldr	r3, [r3, #12]
 800a6ae:	68fa      	ldr	r2, [r7, #12]
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2280      	movs	r2, #128	; 0x80
 800a6b8:	4393      	bics	r3, r2
 800a6ba:	001a      	movs	r2, r3
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	691b      	ldr	r3, [r3, #16]
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	68fa      	ldr	r2, [r7, #12]
 800a6c8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	689a      	ldr	r2, [r3, #8]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	681a      	ldr	r2, [r3, #0]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2201      	movs	r2, #1
 800a6de:	615a      	str	r2, [r3, #20]
}
 800a6e0:	46c0      	nop			; (mov r8, r8)
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	b004      	add	sp, #16
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	40000400 	.word	0x40000400
 800a6ec:	40010800 	.word	0x40010800
 800a6f0:	40011400 	.word	0x40011400
 800a6f4:	fffffcff 	.word	0xfffffcff

0800a6f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b086      	sub	sp, #24
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6a1b      	ldr	r3, [r3, #32]
 800a706:	2201      	movs	r2, #1
 800a708:	4393      	bics	r3, r2
 800a70a:	001a      	movs	r2, r3
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6a1b      	ldr	r3, [r3, #32]
 800a714:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	699b      	ldr	r3, [r3, #24]
 800a720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2270      	movs	r2, #112	; 0x70
 800a726:	4393      	bics	r3, r2
 800a728:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2203      	movs	r2, #3
 800a72e:	4393      	bics	r3, r2
 800a730:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	68fa      	ldr	r2, [r7, #12]
 800a738:	4313      	orrs	r3, r2
 800a73a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	2202      	movs	r2, #2
 800a740:	4393      	bics	r3, r2
 800a742:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	697a      	ldr	r2, [r7, #20]
 800a74a:	4313      	orrs	r3, r2
 800a74c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	693a      	ldr	r2, [r7, #16]
 800a752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	68fa      	ldr	r2, [r7, #12]
 800a758:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	685a      	ldr	r2, [r3, #4]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	697a      	ldr	r2, [r7, #20]
 800a766:	621a      	str	r2, [r3, #32]
}
 800a768:	46c0      	nop			; (mov r8, r8)
 800a76a:	46bd      	mov	sp, r7
 800a76c:	b006      	add	sp, #24
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b086      	sub	sp, #24
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6a1b      	ldr	r3, [r3, #32]
 800a77e:	2210      	movs	r2, #16
 800a780:	4393      	bics	r3, r2
 800a782:	001a      	movs	r2, r3
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6a1b      	ldr	r3, [r3, #32]
 800a78c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	699b      	ldr	r3, [r3, #24]
 800a798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	4a13      	ldr	r2, [pc, #76]	; (800a7ec <TIM_OC2_SetConfig+0x7c>)
 800a79e:	4013      	ands	r3, r2
 800a7a0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	4a12      	ldr	r2, [pc, #72]	; (800a7f0 <TIM_OC2_SetConfig+0x80>)
 800a7a6:	4013      	ands	r3, r2
 800a7a8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	021b      	lsls	r3, r3, #8
 800a7b0:	68fa      	ldr	r2, [r7, #12]
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	2220      	movs	r2, #32
 800a7ba:	4393      	bics	r3, r2
 800a7bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	689b      	ldr	r3, [r3, #8]
 800a7c2:	011b      	lsls	r3, r3, #4
 800a7c4:	697a      	ldr	r2, [r7, #20]
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	693a      	ldr	r2, [r7, #16]
 800a7ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	68fa      	ldr	r2, [r7, #12]
 800a7d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	685a      	ldr	r2, [r3, #4]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	697a      	ldr	r2, [r7, #20]
 800a7e2:	621a      	str	r2, [r3, #32]
}
 800a7e4:	46c0      	nop			; (mov r8, r8)
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	b006      	add	sp, #24
 800a7ea:	bd80      	pop	{r7, pc}
 800a7ec:	ffff8fff 	.word	0xffff8fff
 800a7f0:	fffffcff 	.word	0xfffffcff

0800a7f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b086      	sub	sp, #24
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6a1b      	ldr	r3, [r3, #32]
 800a802:	4a1a      	ldr	r2, [pc, #104]	; (800a86c <TIM_OC3_SetConfig+0x78>)
 800a804:	401a      	ands	r2, r3
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6a1b      	ldr	r3, [r3, #32]
 800a80e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	69db      	ldr	r3, [r3, #28]
 800a81a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2270      	movs	r2, #112	; 0x70
 800a820:	4393      	bics	r3, r2
 800a822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2203      	movs	r2, #3
 800a828:	4393      	bics	r3, r2
 800a82a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	68fa      	ldr	r2, [r7, #12]
 800a832:	4313      	orrs	r3, r2
 800a834:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	4a0d      	ldr	r2, [pc, #52]	; (800a870 <TIM_OC3_SetConfig+0x7c>)
 800a83a:	4013      	ands	r3, r2
 800a83c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	689b      	ldr	r3, [r3, #8]
 800a842:	021b      	lsls	r3, r3, #8
 800a844:	697a      	ldr	r2, [r7, #20]
 800a846:	4313      	orrs	r3, r2
 800a848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	693a      	ldr	r2, [r7, #16]
 800a84e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	68fa      	ldr	r2, [r7, #12]
 800a854:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	685a      	ldr	r2, [r3, #4]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	697a      	ldr	r2, [r7, #20]
 800a862:	621a      	str	r2, [r3, #32]
}
 800a864:	46c0      	nop			; (mov r8, r8)
 800a866:	46bd      	mov	sp, r7
 800a868:	b006      	add	sp, #24
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	fffffeff 	.word	0xfffffeff
 800a870:	fffffdff 	.word	0xfffffdff

0800a874 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b086      	sub	sp, #24
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6a1b      	ldr	r3, [r3, #32]
 800a882:	4a1b      	ldr	r2, [pc, #108]	; (800a8f0 <TIM_OC4_SetConfig+0x7c>)
 800a884:	401a      	ands	r2, r3
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6a1b      	ldr	r3, [r3, #32]
 800a88e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	69db      	ldr	r3, [r3, #28]
 800a89a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	4a15      	ldr	r2, [pc, #84]	; (800a8f4 <TIM_OC4_SetConfig+0x80>)
 800a8a0:	4013      	ands	r3, r2
 800a8a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	4a14      	ldr	r2, [pc, #80]	; (800a8f8 <TIM_OC4_SetConfig+0x84>)
 800a8a8:	4013      	ands	r3, r2
 800a8aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	021b      	lsls	r3, r3, #8
 800a8b2:	68fa      	ldr	r2, [r7, #12]
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	4a10      	ldr	r2, [pc, #64]	; (800a8fc <TIM_OC4_SetConfig+0x88>)
 800a8bc:	4013      	ands	r3, r2
 800a8be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	031b      	lsls	r3, r3, #12
 800a8c6:	697a      	ldr	r2, [r7, #20]
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	693a      	ldr	r2, [r7, #16]
 800a8d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	68fa      	ldr	r2, [r7, #12]
 800a8d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	685a      	ldr	r2, [r3, #4]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	697a      	ldr	r2, [r7, #20]
 800a8e4:	621a      	str	r2, [r3, #32]
}
 800a8e6:	46c0      	nop			; (mov r8, r8)
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	b006      	add	sp, #24
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	46c0      	nop			; (mov r8, r8)
 800a8f0:	ffffefff 	.word	0xffffefff
 800a8f4:	ffff8fff 	.word	0xffff8fff
 800a8f8:	fffffcff 	.word	0xfffffcff
 800a8fc:	ffffdfff 	.word	0xffffdfff

0800a900 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b086      	sub	sp, #24
 800a904:	af00      	add	r7, sp, #0
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	6a1b      	ldr	r3, [r3, #32]
 800a910:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	6a1b      	ldr	r3, [r3, #32]
 800a916:	2201      	movs	r2, #1
 800a918:	4393      	bics	r3, r2
 800a91a:	001a      	movs	r2, r3
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	699b      	ldr	r3, [r3, #24]
 800a924:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	22f0      	movs	r2, #240	; 0xf0
 800a92a:	4393      	bics	r3, r2
 800a92c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	011b      	lsls	r3, r3, #4
 800a932:	693a      	ldr	r2, [r7, #16]
 800a934:	4313      	orrs	r3, r2
 800a936:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	220a      	movs	r2, #10
 800a93c:	4393      	bics	r3, r2
 800a93e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a940:	697a      	ldr	r2, [r7, #20]
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	4313      	orrs	r3, r2
 800a946:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	693a      	ldr	r2, [r7, #16]
 800a94c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	697a      	ldr	r2, [r7, #20]
 800a952:	621a      	str	r2, [r3, #32]
}
 800a954:	46c0      	nop			; (mov r8, r8)
 800a956:	46bd      	mov	sp, r7
 800a958:	b006      	add	sp, #24
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b086      	sub	sp, #24
 800a960:	af00      	add	r7, sp, #0
 800a962:	60f8      	str	r0, [r7, #12]
 800a964:	60b9      	str	r1, [r7, #8]
 800a966:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	6a1b      	ldr	r3, [r3, #32]
 800a96c:	2210      	movs	r2, #16
 800a96e:	4393      	bics	r3, r2
 800a970:	001a      	movs	r2, r3
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	699b      	ldr	r3, [r3, #24]
 800a97a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	6a1b      	ldr	r3, [r3, #32]
 800a980:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	4a0d      	ldr	r2, [pc, #52]	; (800a9bc <TIM_TI2_ConfigInputStage+0x60>)
 800a986:	4013      	ands	r3, r2
 800a988:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	031b      	lsls	r3, r3, #12
 800a98e:	697a      	ldr	r2, [r7, #20]
 800a990:	4313      	orrs	r3, r2
 800a992:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	22a0      	movs	r2, #160	; 0xa0
 800a998:	4393      	bics	r3, r2
 800a99a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	011b      	lsls	r3, r3, #4
 800a9a0:	693a      	ldr	r2, [r7, #16]
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	697a      	ldr	r2, [r7, #20]
 800a9aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	693a      	ldr	r2, [r7, #16]
 800a9b0:	621a      	str	r2, [r3, #32]
}
 800a9b2:	46c0      	nop			; (mov r8, r8)
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	b006      	add	sp, #24
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	46c0      	nop			; (mov r8, r8)
 800a9bc:	ffff0fff 	.word	0xffff0fff

0800a9c0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	689b      	ldr	r3, [r3, #8]
 800a9ce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2270      	movs	r2, #112	; 0x70
 800a9d4:	4393      	bics	r3, r2
 800a9d6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a9d8:	683a      	ldr	r2, [r7, #0]
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	2207      	movs	r2, #7
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	68fa      	ldr	r2, [r7, #12]
 800a9e8:	609a      	str	r2, [r3, #8]
}
 800a9ea:	46c0      	nop			; (mov r8, r8)
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	b004      	add	sp, #16
 800a9f0:	bd80      	pop	{r7, pc}
	...

0800a9f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b086      	sub	sp, #24
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	60b9      	str	r1, [r7, #8]
 800a9fe:	607a      	str	r2, [r7, #4]
 800aa00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	689b      	ldr	r3, [r3, #8]
 800aa06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	4a09      	ldr	r2, [pc, #36]	; (800aa30 <TIM_ETR_SetConfig+0x3c>)
 800aa0c:	4013      	ands	r3, r2
 800aa0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	021a      	lsls	r2, r3, #8
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	431a      	orrs	r2, r3
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	697a      	ldr	r2, [r7, #20]
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	697a      	ldr	r2, [r7, #20]
 800aa26:	609a      	str	r2, [r3, #8]
}
 800aa28:	46c0      	nop			; (mov r8, r8)
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	b006      	add	sp, #24
 800aa2e:	bd80      	pop	{r7, pc}
 800aa30:	ffff00ff 	.word	0xffff00ff

0800aa34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b086      	sub	sp, #24
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	60b9      	str	r1, [r7, #8]
 800aa3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	221f      	movs	r2, #31
 800aa44:	4013      	ands	r3, r2
 800aa46:	2201      	movs	r2, #1
 800aa48:	409a      	lsls	r2, r3
 800aa4a:	0013      	movs	r3, r2
 800aa4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	6a1b      	ldr	r3, [r3, #32]
 800aa52:	697a      	ldr	r2, [r7, #20]
 800aa54:	43d2      	mvns	r2, r2
 800aa56:	401a      	ands	r2, r3
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6a1a      	ldr	r2, [r3, #32]
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	211f      	movs	r1, #31
 800aa64:	400b      	ands	r3, r1
 800aa66:	6879      	ldr	r1, [r7, #4]
 800aa68:	4099      	lsls	r1, r3
 800aa6a:	000b      	movs	r3, r1
 800aa6c:	431a      	orrs	r2, r3
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	621a      	str	r2, [r3, #32]
}
 800aa72:	46c0      	nop			; (mov r8, r8)
 800aa74:	46bd      	mov	sp, r7
 800aa76:	b006      	add	sp, #24
 800aa78:	bd80      	pop	{r7, pc}

0800aa7a <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aa7a:	b580      	push	{r7, lr}
 800aa7c:	b084      	sub	sp, #16
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
 800aa82:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2238      	movs	r2, #56	; 0x38
 800aa88:	5c9b      	ldrb	r3, [r3, r2]
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d101      	bne.n	800aa92 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aa8e:	2302      	movs	r3, #2
 800aa90:	e032      	b.n	800aaf8 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2238      	movs	r2, #56	; 0x38
 800aa96:	2101      	movs	r1, #1
 800aa98:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2239      	movs	r2, #57	; 0x39
 800aa9e:	2102      	movs	r1, #2
 800aaa0:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	689b      	ldr	r3, [r3, #8]
 800aab0:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2270      	movs	r2, #112	; 0x70
 800aab6:	4393      	bics	r3, r2
 800aab8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	68fa      	ldr	r2, [r7, #12]
 800aac0:	4313      	orrs	r3, r2
 800aac2:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	2280      	movs	r2, #128	; 0x80
 800aac8:	4393      	bics	r3, r2
 800aaca:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	68ba      	ldr	r2, [r7, #8]
 800aad2:	4313      	orrs	r3, r2
 800aad4:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	68fa      	ldr	r2, [r7, #12]
 800aadc:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	68ba      	ldr	r2, [r7, #8]
 800aae4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2239      	movs	r2, #57	; 0x39
 800aaea:	2101      	movs	r1, #1
 800aaec:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2238      	movs	r2, #56	; 0x38
 800aaf2:	2100      	movs	r1, #0
 800aaf4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aaf6:	2300      	movs	r3, #0
}
 800aaf8:	0018      	movs	r0, r3
 800aafa:	46bd      	mov	sp, r7
 800aafc:	b004      	add	sp, #16
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b082      	sub	sp, #8
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2238      	movs	r2, #56	; 0x38
 800ab0e:	5c9b      	ldrb	r3, [r3, r2]
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d101      	bne.n	800ab18 <HAL_TIMEx_RemapConfig+0x18>
 800ab14:	2302      	movs	r3, #2
 800ab16:	e00c      	b.n	800ab32 <HAL_TIMEx_RemapConfig+0x32>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2238      	movs	r2, #56	; 0x38
 800ab1c:	2101      	movs	r1, #1
 800ab1e:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	683a      	ldr	r2, [r7, #0]
 800ab26:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2238      	movs	r2, #56	; 0x38
 800ab2c:	2100      	movs	r1, #0
 800ab2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ab30:	2300      	movs	r3, #0
}
 800ab32:	0018      	movs	r0, r3
 800ab34:	46bd      	mov	sp, r7
 800ab36:	b002      	add	sp, #8
 800ab38:	bd80      	pop	{r7, pc}
	...

0800ab3c <calloc>:
 800ab3c:	b510      	push	{r4, lr}
 800ab3e:	4b03      	ldr	r3, [pc, #12]	; (800ab4c <calloc+0x10>)
 800ab40:	000a      	movs	r2, r1
 800ab42:	0001      	movs	r1, r0
 800ab44:	6818      	ldr	r0, [r3, #0]
 800ab46:	f000 f83e 	bl	800abc6 <_calloc_r>
 800ab4a:	bd10      	pop	{r4, pc}
 800ab4c:	2000006c 	.word	0x2000006c

0800ab50 <__errno>:
 800ab50:	4b01      	ldr	r3, [pc, #4]	; (800ab58 <__errno+0x8>)
 800ab52:	6818      	ldr	r0, [r3, #0]
 800ab54:	4770      	bx	lr
 800ab56:	46c0      	nop			; (mov r8, r8)
 800ab58:	2000006c 	.word	0x2000006c

0800ab5c <__libc_init_array>:
 800ab5c:	b570      	push	{r4, r5, r6, lr}
 800ab5e:	2600      	movs	r6, #0
 800ab60:	4d0c      	ldr	r5, [pc, #48]	; (800ab94 <__libc_init_array+0x38>)
 800ab62:	4c0d      	ldr	r4, [pc, #52]	; (800ab98 <__libc_init_array+0x3c>)
 800ab64:	1b64      	subs	r4, r4, r5
 800ab66:	10a4      	asrs	r4, r4, #2
 800ab68:	42a6      	cmp	r6, r4
 800ab6a:	d109      	bne.n	800ab80 <__libc_init_array+0x24>
 800ab6c:	2600      	movs	r6, #0
 800ab6e:	f000 fc37 	bl	800b3e0 <_init>
 800ab72:	4d0a      	ldr	r5, [pc, #40]	; (800ab9c <__libc_init_array+0x40>)
 800ab74:	4c0a      	ldr	r4, [pc, #40]	; (800aba0 <__libc_init_array+0x44>)
 800ab76:	1b64      	subs	r4, r4, r5
 800ab78:	10a4      	asrs	r4, r4, #2
 800ab7a:	42a6      	cmp	r6, r4
 800ab7c:	d105      	bne.n	800ab8a <__libc_init_array+0x2e>
 800ab7e:	bd70      	pop	{r4, r5, r6, pc}
 800ab80:	00b3      	lsls	r3, r6, #2
 800ab82:	58eb      	ldr	r3, [r5, r3]
 800ab84:	4798      	blx	r3
 800ab86:	3601      	adds	r6, #1
 800ab88:	e7ee      	b.n	800ab68 <__libc_init_array+0xc>
 800ab8a:	00b3      	lsls	r3, r6, #2
 800ab8c:	58eb      	ldr	r3, [r5, r3]
 800ab8e:	4798      	blx	r3
 800ab90:	3601      	adds	r6, #1
 800ab92:	e7f2      	b.n	800ab7a <__libc_init_array+0x1e>
 800ab94:	0800bf98 	.word	0x0800bf98
 800ab98:	0800bf98 	.word	0x0800bf98
 800ab9c:	0800bf98 	.word	0x0800bf98
 800aba0:	0800bf9c 	.word	0x0800bf9c

0800aba4 <memcpy>:
 800aba4:	2300      	movs	r3, #0
 800aba6:	b510      	push	{r4, lr}
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d100      	bne.n	800abae <memcpy+0xa>
 800abac:	bd10      	pop	{r4, pc}
 800abae:	5ccc      	ldrb	r4, [r1, r3]
 800abb0:	54c4      	strb	r4, [r0, r3]
 800abb2:	3301      	adds	r3, #1
 800abb4:	e7f8      	b.n	800aba8 <memcpy+0x4>

0800abb6 <memset>:
 800abb6:	0003      	movs	r3, r0
 800abb8:	1812      	adds	r2, r2, r0
 800abba:	4293      	cmp	r3, r2
 800abbc:	d100      	bne.n	800abc0 <memset+0xa>
 800abbe:	4770      	bx	lr
 800abc0:	7019      	strb	r1, [r3, #0]
 800abc2:	3301      	adds	r3, #1
 800abc4:	e7f9      	b.n	800abba <memset+0x4>

0800abc6 <_calloc_r>:
 800abc6:	434a      	muls	r2, r1
 800abc8:	b570      	push	{r4, r5, r6, lr}
 800abca:	0011      	movs	r1, r2
 800abcc:	0014      	movs	r4, r2
 800abce:	f000 f809 	bl	800abe4 <_malloc_r>
 800abd2:	1e05      	subs	r5, r0, #0
 800abd4:	d003      	beq.n	800abde <_calloc_r+0x18>
 800abd6:	0022      	movs	r2, r4
 800abd8:	2100      	movs	r1, #0
 800abda:	f7ff ffec 	bl	800abb6 <memset>
 800abde:	0028      	movs	r0, r5
 800abe0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800abe4 <_malloc_r>:
 800abe4:	2303      	movs	r3, #3
 800abe6:	b570      	push	{r4, r5, r6, lr}
 800abe8:	1ccd      	adds	r5, r1, #3
 800abea:	439d      	bics	r5, r3
 800abec:	3508      	adds	r5, #8
 800abee:	0006      	movs	r6, r0
 800abf0:	2d0c      	cmp	r5, #12
 800abf2:	d21e      	bcs.n	800ac32 <_malloc_r+0x4e>
 800abf4:	250c      	movs	r5, #12
 800abf6:	42a9      	cmp	r1, r5
 800abf8:	d81d      	bhi.n	800ac36 <_malloc_r+0x52>
 800abfa:	0030      	movs	r0, r6
 800abfc:	f000 f882 	bl	800ad04 <__malloc_lock>
 800ac00:	4a25      	ldr	r2, [pc, #148]	; (800ac98 <_malloc_r+0xb4>)
 800ac02:	6814      	ldr	r4, [r2, #0]
 800ac04:	0021      	movs	r1, r4
 800ac06:	2900      	cmp	r1, #0
 800ac08:	d119      	bne.n	800ac3e <_malloc_r+0x5a>
 800ac0a:	4c24      	ldr	r4, [pc, #144]	; (800ac9c <_malloc_r+0xb8>)
 800ac0c:	6823      	ldr	r3, [r4, #0]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d103      	bne.n	800ac1a <_malloc_r+0x36>
 800ac12:	0030      	movs	r0, r6
 800ac14:	f000 f844 	bl	800aca0 <_sbrk_r>
 800ac18:	6020      	str	r0, [r4, #0]
 800ac1a:	0029      	movs	r1, r5
 800ac1c:	0030      	movs	r0, r6
 800ac1e:	f000 f83f 	bl	800aca0 <_sbrk_r>
 800ac22:	1c43      	adds	r3, r0, #1
 800ac24:	d12b      	bne.n	800ac7e <_malloc_r+0x9a>
 800ac26:	230c      	movs	r3, #12
 800ac28:	0030      	movs	r0, r6
 800ac2a:	6033      	str	r3, [r6, #0]
 800ac2c:	f000 f86b 	bl	800ad06 <__malloc_unlock>
 800ac30:	e003      	b.n	800ac3a <_malloc_r+0x56>
 800ac32:	2d00      	cmp	r5, #0
 800ac34:	dadf      	bge.n	800abf6 <_malloc_r+0x12>
 800ac36:	230c      	movs	r3, #12
 800ac38:	6033      	str	r3, [r6, #0]
 800ac3a:	2000      	movs	r0, #0
 800ac3c:	bd70      	pop	{r4, r5, r6, pc}
 800ac3e:	680b      	ldr	r3, [r1, #0]
 800ac40:	1b5b      	subs	r3, r3, r5
 800ac42:	d419      	bmi.n	800ac78 <_malloc_r+0x94>
 800ac44:	2b0b      	cmp	r3, #11
 800ac46:	d903      	bls.n	800ac50 <_malloc_r+0x6c>
 800ac48:	600b      	str	r3, [r1, #0]
 800ac4a:	18cc      	adds	r4, r1, r3
 800ac4c:	6025      	str	r5, [r4, #0]
 800ac4e:	e003      	b.n	800ac58 <_malloc_r+0x74>
 800ac50:	684b      	ldr	r3, [r1, #4]
 800ac52:	428c      	cmp	r4, r1
 800ac54:	d10d      	bne.n	800ac72 <_malloc_r+0x8e>
 800ac56:	6013      	str	r3, [r2, #0]
 800ac58:	0030      	movs	r0, r6
 800ac5a:	f000 f854 	bl	800ad06 <__malloc_unlock>
 800ac5e:	0020      	movs	r0, r4
 800ac60:	2207      	movs	r2, #7
 800ac62:	300b      	adds	r0, #11
 800ac64:	1d23      	adds	r3, r4, #4
 800ac66:	4390      	bics	r0, r2
 800ac68:	1ac3      	subs	r3, r0, r3
 800ac6a:	d0e7      	beq.n	800ac3c <_malloc_r+0x58>
 800ac6c:	425a      	negs	r2, r3
 800ac6e:	50e2      	str	r2, [r4, r3]
 800ac70:	e7e4      	b.n	800ac3c <_malloc_r+0x58>
 800ac72:	6063      	str	r3, [r4, #4]
 800ac74:	000c      	movs	r4, r1
 800ac76:	e7ef      	b.n	800ac58 <_malloc_r+0x74>
 800ac78:	000c      	movs	r4, r1
 800ac7a:	6849      	ldr	r1, [r1, #4]
 800ac7c:	e7c3      	b.n	800ac06 <_malloc_r+0x22>
 800ac7e:	2303      	movs	r3, #3
 800ac80:	1cc4      	adds	r4, r0, #3
 800ac82:	439c      	bics	r4, r3
 800ac84:	42a0      	cmp	r0, r4
 800ac86:	d0e1      	beq.n	800ac4c <_malloc_r+0x68>
 800ac88:	1a21      	subs	r1, r4, r0
 800ac8a:	0030      	movs	r0, r6
 800ac8c:	f000 f808 	bl	800aca0 <_sbrk_r>
 800ac90:	1c43      	adds	r3, r0, #1
 800ac92:	d1db      	bne.n	800ac4c <_malloc_r+0x68>
 800ac94:	e7c7      	b.n	800ac26 <_malloc_r+0x42>
 800ac96:	46c0      	nop			; (mov r8, r8)
 800ac98:	20000138 	.word	0x20000138
 800ac9c:	2000013c 	.word	0x2000013c

0800aca0 <_sbrk_r>:
 800aca0:	2300      	movs	r3, #0
 800aca2:	b570      	push	{r4, r5, r6, lr}
 800aca4:	4c06      	ldr	r4, [pc, #24]	; (800acc0 <_sbrk_r+0x20>)
 800aca6:	0005      	movs	r5, r0
 800aca8:	0008      	movs	r0, r1
 800acaa:	6023      	str	r3, [r4, #0]
 800acac:	f7f9 fb9c 	bl	80043e8 <_sbrk>
 800acb0:	1c43      	adds	r3, r0, #1
 800acb2:	d103      	bne.n	800acbc <_sbrk_r+0x1c>
 800acb4:	6823      	ldr	r3, [r4, #0]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d000      	beq.n	800acbc <_sbrk_r+0x1c>
 800acba:	602b      	str	r3, [r5, #0]
 800acbc:	bd70      	pop	{r4, r5, r6, pc}
 800acbe:	46c0      	nop			; (mov r8, r8)
 800acc0:	200003a4 	.word	0x200003a4

0800acc4 <siprintf>:
 800acc4:	b40e      	push	{r1, r2, r3}
 800acc6:	b500      	push	{lr}
 800acc8:	490b      	ldr	r1, [pc, #44]	; (800acf8 <siprintf+0x34>)
 800acca:	b09c      	sub	sp, #112	; 0x70
 800accc:	ab1d      	add	r3, sp, #116	; 0x74
 800acce:	9002      	str	r0, [sp, #8]
 800acd0:	9006      	str	r0, [sp, #24]
 800acd2:	9107      	str	r1, [sp, #28]
 800acd4:	9104      	str	r1, [sp, #16]
 800acd6:	4809      	ldr	r0, [pc, #36]	; (800acfc <siprintf+0x38>)
 800acd8:	4909      	ldr	r1, [pc, #36]	; (800ad00 <siprintf+0x3c>)
 800acda:	cb04      	ldmia	r3!, {r2}
 800acdc:	9105      	str	r1, [sp, #20]
 800acde:	6800      	ldr	r0, [r0, #0]
 800ace0:	a902      	add	r1, sp, #8
 800ace2:	9301      	str	r3, [sp, #4]
 800ace4:	f000 f872 	bl	800adcc <_svfiprintf_r>
 800ace8:	2300      	movs	r3, #0
 800acea:	9a02      	ldr	r2, [sp, #8]
 800acec:	7013      	strb	r3, [r2, #0]
 800acee:	b01c      	add	sp, #112	; 0x70
 800acf0:	bc08      	pop	{r3}
 800acf2:	b003      	add	sp, #12
 800acf4:	4718      	bx	r3
 800acf6:	46c0      	nop			; (mov r8, r8)
 800acf8:	7fffffff 	.word	0x7fffffff
 800acfc:	2000006c 	.word	0x2000006c
 800ad00:	ffff0208 	.word	0xffff0208

0800ad04 <__malloc_lock>:
 800ad04:	4770      	bx	lr

0800ad06 <__malloc_unlock>:
 800ad06:	4770      	bx	lr

0800ad08 <__ssputs_r>:
 800ad08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad0a:	688e      	ldr	r6, [r1, #8]
 800ad0c:	b085      	sub	sp, #20
 800ad0e:	0007      	movs	r7, r0
 800ad10:	000c      	movs	r4, r1
 800ad12:	9203      	str	r2, [sp, #12]
 800ad14:	9301      	str	r3, [sp, #4]
 800ad16:	429e      	cmp	r6, r3
 800ad18:	d83c      	bhi.n	800ad94 <__ssputs_r+0x8c>
 800ad1a:	2390      	movs	r3, #144	; 0x90
 800ad1c:	898a      	ldrh	r2, [r1, #12]
 800ad1e:	00db      	lsls	r3, r3, #3
 800ad20:	421a      	tst	r2, r3
 800ad22:	d034      	beq.n	800ad8e <__ssputs_r+0x86>
 800ad24:	2503      	movs	r5, #3
 800ad26:	6909      	ldr	r1, [r1, #16]
 800ad28:	6823      	ldr	r3, [r4, #0]
 800ad2a:	1a5b      	subs	r3, r3, r1
 800ad2c:	9302      	str	r3, [sp, #8]
 800ad2e:	6963      	ldr	r3, [r4, #20]
 800ad30:	9802      	ldr	r0, [sp, #8]
 800ad32:	435d      	muls	r5, r3
 800ad34:	0feb      	lsrs	r3, r5, #31
 800ad36:	195d      	adds	r5, r3, r5
 800ad38:	9b01      	ldr	r3, [sp, #4]
 800ad3a:	106d      	asrs	r5, r5, #1
 800ad3c:	3301      	adds	r3, #1
 800ad3e:	181b      	adds	r3, r3, r0
 800ad40:	42ab      	cmp	r3, r5
 800ad42:	d900      	bls.n	800ad46 <__ssputs_r+0x3e>
 800ad44:	001d      	movs	r5, r3
 800ad46:	0553      	lsls	r3, r2, #21
 800ad48:	d532      	bpl.n	800adb0 <__ssputs_r+0xa8>
 800ad4a:	0029      	movs	r1, r5
 800ad4c:	0038      	movs	r0, r7
 800ad4e:	f7ff ff49 	bl	800abe4 <_malloc_r>
 800ad52:	1e06      	subs	r6, r0, #0
 800ad54:	d109      	bne.n	800ad6a <__ssputs_r+0x62>
 800ad56:	230c      	movs	r3, #12
 800ad58:	603b      	str	r3, [r7, #0]
 800ad5a:	2340      	movs	r3, #64	; 0x40
 800ad5c:	2001      	movs	r0, #1
 800ad5e:	89a2      	ldrh	r2, [r4, #12]
 800ad60:	4240      	negs	r0, r0
 800ad62:	4313      	orrs	r3, r2
 800ad64:	81a3      	strh	r3, [r4, #12]
 800ad66:	b005      	add	sp, #20
 800ad68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad6a:	9a02      	ldr	r2, [sp, #8]
 800ad6c:	6921      	ldr	r1, [r4, #16]
 800ad6e:	f7ff ff19 	bl	800aba4 <memcpy>
 800ad72:	89a3      	ldrh	r3, [r4, #12]
 800ad74:	4a14      	ldr	r2, [pc, #80]	; (800adc8 <__ssputs_r+0xc0>)
 800ad76:	401a      	ands	r2, r3
 800ad78:	2380      	movs	r3, #128	; 0x80
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	81a3      	strh	r3, [r4, #12]
 800ad7e:	9b02      	ldr	r3, [sp, #8]
 800ad80:	6126      	str	r6, [r4, #16]
 800ad82:	18f6      	adds	r6, r6, r3
 800ad84:	6026      	str	r6, [r4, #0]
 800ad86:	6165      	str	r5, [r4, #20]
 800ad88:	9e01      	ldr	r6, [sp, #4]
 800ad8a:	1aed      	subs	r5, r5, r3
 800ad8c:	60a5      	str	r5, [r4, #8]
 800ad8e:	9b01      	ldr	r3, [sp, #4]
 800ad90:	429e      	cmp	r6, r3
 800ad92:	d900      	bls.n	800ad96 <__ssputs_r+0x8e>
 800ad94:	9e01      	ldr	r6, [sp, #4]
 800ad96:	0032      	movs	r2, r6
 800ad98:	9903      	ldr	r1, [sp, #12]
 800ad9a:	6820      	ldr	r0, [r4, #0]
 800ad9c:	f000 fa95 	bl	800b2ca <memmove>
 800ada0:	68a3      	ldr	r3, [r4, #8]
 800ada2:	2000      	movs	r0, #0
 800ada4:	1b9b      	subs	r3, r3, r6
 800ada6:	60a3      	str	r3, [r4, #8]
 800ada8:	6823      	ldr	r3, [r4, #0]
 800adaa:	199e      	adds	r6, r3, r6
 800adac:	6026      	str	r6, [r4, #0]
 800adae:	e7da      	b.n	800ad66 <__ssputs_r+0x5e>
 800adb0:	002a      	movs	r2, r5
 800adb2:	0038      	movs	r0, r7
 800adb4:	f000 fae6 	bl	800b384 <_realloc_r>
 800adb8:	1e06      	subs	r6, r0, #0
 800adba:	d1e0      	bne.n	800ad7e <__ssputs_r+0x76>
 800adbc:	6921      	ldr	r1, [r4, #16]
 800adbe:	0038      	movs	r0, r7
 800adc0:	f000 fa96 	bl	800b2f0 <_free_r>
 800adc4:	e7c7      	b.n	800ad56 <__ssputs_r+0x4e>
 800adc6:	46c0      	nop			; (mov r8, r8)
 800adc8:	fffffb7f 	.word	0xfffffb7f

0800adcc <_svfiprintf_r>:
 800adcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adce:	b0a1      	sub	sp, #132	; 0x84
 800add0:	9003      	str	r0, [sp, #12]
 800add2:	001d      	movs	r5, r3
 800add4:	898b      	ldrh	r3, [r1, #12]
 800add6:	000f      	movs	r7, r1
 800add8:	0016      	movs	r6, r2
 800adda:	061b      	lsls	r3, r3, #24
 800addc:	d511      	bpl.n	800ae02 <_svfiprintf_r+0x36>
 800adde:	690b      	ldr	r3, [r1, #16]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10e      	bne.n	800ae02 <_svfiprintf_r+0x36>
 800ade4:	2140      	movs	r1, #64	; 0x40
 800ade6:	f7ff fefd 	bl	800abe4 <_malloc_r>
 800adea:	6038      	str	r0, [r7, #0]
 800adec:	6138      	str	r0, [r7, #16]
 800adee:	2800      	cmp	r0, #0
 800adf0:	d105      	bne.n	800adfe <_svfiprintf_r+0x32>
 800adf2:	230c      	movs	r3, #12
 800adf4:	9a03      	ldr	r2, [sp, #12]
 800adf6:	3801      	subs	r0, #1
 800adf8:	6013      	str	r3, [r2, #0]
 800adfa:	b021      	add	sp, #132	; 0x84
 800adfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adfe:	2340      	movs	r3, #64	; 0x40
 800ae00:	617b      	str	r3, [r7, #20]
 800ae02:	2300      	movs	r3, #0
 800ae04:	ac08      	add	r4, sp, #32
 800ae06:	6163      	str	r3, [r4, #20]
 800ae08:	3320      	adds	r3, #32
 800ae0a:	7663      	strb	r3, [r4, #25]
 800ae0c:	3310      	adds	r3, #16
 800ae0e:	76a3      	strb	r3, [r4, #26]
 800ae10:	9507      	str	r5, [sp, #28]
 800ae12:	0035      	movs	r5, r6
 800ae14:	782b      	ldrb	r3, [r5, #0]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d001      	beq.n	800ae1e <_svfiprintf_r+0x52>
 800ae1a:	2b25      	cmp	r3, #37	; 0x25
 800ae1c:	d146      	bne.n	800aeac <_svfiprintf_r+0xe0>
 800ae1e:	1bab      	subs	r3, r5, r6
 800ae20:	9305      	str	r3, [sp, #20]
 800ae22:	d00c      	beq.n	800ae3e <_svfiprintf_r+0x72>
 800ae24:	0032      	movs	r2, r6
 800ae26:	0039      	movs	r1, r7
 800ae28:	9803      	ldr	r0, [sp, #12]
 800ae2a:	f7ff ff6d 	bl	800ad08 <__ssputs_r>
 800ae2e:	1c43      	adds	r3, r0, #1
 800ae30:	d100      	bne.n	800ae34 <_svfiprintf_r+0x68>
 800ae32:	e0ae      	b.n	800af92 <_svfiprintf_r+0x1c6>
 800ae34:	6962      	ldr	r2, [r4, #20]
 800ae36:	9b05      	ldr	r3, [sp, #20]
 800ae38:	4694      	mov	ip, r2
 800ae3a:	4463      	add	r3, ip
 800ae3c:	6163      	str	r3, [r4, #20]
 800ae3e:	782b      	ldrb	r3, [r5, #0]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d100      	bne.n	800ae46 <_svfiprintf_r+0x7a>
 800ae44:	e0a5      	b.n	800af92 <_svfiprintf_r+0x1c6>
 800ae46:	2201      	movs	r2, #1
 800ae48:	2300      	movs	r3, #0
 800ae4a:	4252      	negs	r2, r2
 800ae4c:	6062      	str	r2, [r4, #4]
 800ae4e:	a904      	add	r1, sp, #16
 800ae50:	3254      	adds	r2, #84	; 0x54
 800ae52:	1852      	adds	r2, r2, r1
 800ae54:	1c6e      	adds	r6, r5, #1
 800ae56:	6023      	str	r3, [r4, #0]
 800ae58:	60e3      	str	r3, [r4, #12]
 800ae5a:	60a3      	str	r3, [r4, #8]
 800ae5c:	7013      	strb	r3, [r2, #0]
 800ae5e:	65a3      	str	r3, [r4, #88]	; 0x58
 800ae60:	7831      	ldrb	r1, [r6, #0]
 800ae62:	2205      	movs	r2, #5
 800ae64:	4853      	ldr	r0, [pc, #332]	; (800afb4 <_svfiprintf_r+0x1e8>)
 800ae66:	f000 fa25 	bl	800b2b4 <memchr>
 800ae6a:	1c75      	adds	r5, r6, #1
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	d11f      	bne.n	800aeb0 <_svfiprintf_r+0xe4>
 800ae70:	6822      	ldr	r2, [r4, #0]
 800ae72:	06d3      	lsls	r3, r2, #27
 800ae74:	d504      	bpl.n	800ae80 <_svfiprintf_r+0xb4>
 800ae76:	2353      	movs	r3, #83	; 0x53
 800ae78:	a904      	add	r1, sp, #16
 800ae7a:	185b      	adds	r3, r3, r1
 800ae7c:	2120      	movs	r1, #32
 800ae7e:	7019      	strb	r1, [r3, #0]
 800ae80:	0713      	lsls	r3, r2, #28
 800ae82:	d504      	bpl.n	800ae8e <_svfiprintf_r+0xc2>
 800ae84:	2353      	movs	r3, #83	; 0x53
 800ae86:	a904      	add	r1, sp, #16
 800ae88:	185b      	adds	r3, r3, r1
 800ae8a:	212b      	movs	r1, #43	; 0x2b
 800ae8c:	7019      	strb	r1, [r3, #0]
 800ae8e:	7833      	ldrb	r3, [r6, #0]
 800ae90:	2b2a      	cmp	r3, #42	; 0x2a
 800ae92:	d016      	beq.n	800aec2 <_svfiprintf_r+0xf6>
 800ae94:	0035      	movs	r5, r6
 800ae96:	2100      	movs	r1, #0
 800ae98:	200a      	movs	r0, #10
 800ae9a:	68e3      	ldr	r3, [r4, #12]
 800ae9c:	782a      	ldrb	r2, [r5, #0]
 800ae9e:	1c6e      	adds	r6, r5, #1
 800aea0:	3a30      	subs	r2, #48	; 0x30
 800aea2:	2a09      	cmp	r2, #9
 800aea4:	d94e      	bls.n	800af44 <_svfiprintf_r+0x178>
 800aea6:	2900      	cmp	r1, #0
 800aea8:	d018      	beq.n	800aedc <_svfiprintf_r+0x110>
 800aeaa:	e010      	b.n	800aece <_svfiprintf_r+0x102>
 800aeac:	3501      	adds	r5, #1
 800aeae:	e7b1      	b.n	800ae14 <_svfiprintf_r+0x48>
 800aeb0:	4b40      	ldr	r3, [pc, #256]	; (800afb4 <_svfiprintf_r+0x1e8>)
 800aeb2:	6822      	ldr	r2, [r4, #0]
 800aeb4:	1ac0      	subs	r0, r0, r3
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	4083      	lsls	r3, r0
 800aeba:	4313      	orrs	r3, r2
 800aebc:	6023      	str	r3, [r4, #0]
 800aebe:	002e      	movs	r6, r5
 800aec0:	e7ce      	b.n	800ae60 <_svfiprintf_r+0x94>
 800aec2:	9b07      	ldr	r3, [sp, #28]
 800aec4:	1d19      	adds	r1, r3, #4
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	9107      	str	r1, [sp, #28]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	db01      	blt.n	800aed2 <_svfiprintf_r+0x106>
 800aece:	930b      	str	r3, [sp, #44]	; 0x2c
 800aed0:	e004      	b.n	800aedc <_svfiprintf_r+0x110>
 800aed2:	425b      	negs	r3, r3
 800aed4:	60e3      	str	r3, [r4, #12]
 800aed6:	2302      	movs	r3, #2
 800aed8:	4313      	orrs	r3, r2
 800aeda:	6023      	str	r3, [r4, #0]
 800aedc:	782b      	ldrb	r3, [r5, #0]
 800aede:	2b2e      	cmp	r3, #46	; 0x2e
 800aee0:	d10a      	bne.n	800aef8 <_svfiprintf_r+0x12c>
 800aee2:	786b      	ldrb	r3, [r5, #1]
 800aee4:	2b2a      	cmp	r3, #42	; 0x2a
 800aee6:	d135      	bne.n	800af54 <_svfiprintf_r+0x188>
 800aee8:	9b07      	ldr	r3, [sp, #28]
 800aeea:	3502      	adds	r5, #2
 800aeec:	1d1a      	adds	r2, r3, #4
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	9207      	str	r2, [sp, #28]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	db2b      	blt.n	800af4e <_svfiprintf_r+0x182>
 800aef6:	9309      	str	r3, [sp, #36]	; 0x24
 800aef8:	4e2f      	ldr	r6, [pc, #188]	; (800afb8 <_svfiprintf_r+0x1ec>)
 800aefa:	7829      	ldrb	r1, [r5, #0]
 800aefc:	2203      	movs	r2, #3
 800aefe:	0030      	movs	r0, r6
 800af00:	f000 f9d8 	bl	800b2b4 <memchr>
 800af04:	2800      	cmp	r0, #0
 800af06:	d006      	beq.n	800af16 <_svfiprintf_r+0x14a>
 800af08:	2340      	movs	r3, #64	; 0x40
 800af0a:	1b80      	subs	r0, r0, r6
 800af0c:	4083      	lsls	r3, r0
 800af0e:	6822      	ldr	r2, [r4, #0]
 800af10:	3501      	adds	r5, #1
 800af12:	4313      	orrs	r3, r2
 800af14:	6023      	str	r3, [r4, #0]
 800af16:	7829      	ldrb	r1, [r5, #0]
 800af18:	2206      	movs	r2, #6
 800af1a:	4828      	ldr	r0, [pc, #160]	; (800afbc <_svfiprintf_r+0x1f0>)
 800af1c:	1c6e      	adds	r6, r5, #1
 800af1e:	7621      	strb	r1, [r4, #24]
 800af20:	f000 f9c8 	bl	800b2b4 <memchr>
 800af24:	2800      	cmp	r0, #0
 800af26:	d03c      	beq.n	800afa2 <_svfiprintf_r+0x1d6>
 800af28:	4b25      	ldr	r3, [pc, #148]	; (800afc0 <_svfiprintf_r+0x1f4>)
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d125      	bne.n	800af7a <_svfiprintf_r+0x1ae>
 800af2e:	2207      	movs	r2, #7
 800af30:	9b07      	ldr	r3, [sp, #28]
 800af32:	3307      	adds	r3, #7
 800af34:	4393      	bics	r3, r2
 800af36:	3308      	adds	r3, #8
 800af38:	9307      	str	r3, [sp, #28]
 800af3a:	6963      	ldr	r3, [r4, #20]
 800af3c:	9a04      	ldr	r2, [sp, #16]
 800af3e:	189b      	adds	r3, r3, r2
 800af40:	6163      	str	r3, [r4, #20]
 800af42:	e766      	b.n	800ae12 <_svfiprintf_r+0x46>
 800af44:	4343      	muls	r3, r0
 800af46:	2101      	movs	r1, #1
 800af48:	189b      	adds	r3, r3, r2
 800af4a:	0035      	movs	r5, r6
 800af4c:	e7a6      	b.n	800ae9c <_svfiprintf_r+0xd0>
 800af4e:	2301      	movs	r3, #1
 800af50:	425b      	negs	r3, r3
 800af52:	e7d0      	b.n	800aef6 <_svfiprintf_r+0x12a>
 800af54:	2300      	movs	r3, #0
 800af56:	200a      	movs	r0, #10
 800af58:	001a      	movs	r2, r3
 800af5a:	3501      	adds	r5, #1
 800af5c:	6063      	str	r3, [r4, #4]
 800af5e:	7829      	ldrb	r1, [r5, #0]
 800af60:	1c6e      	adds	r6, r5, #1
 800af62:	3930      	subs	r1, #48	; 0x30
 800af64:	2909      	cmp	r1, #9
 800af66:	d903      	bls.n	800af70 <_svfiprintf_r+0x1a4>
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d0c5      	beq.n	800aef8 <_svfiprintf_r+0x12c>
 800af6c:	9209      	str	r2, [sp, #36]	; 0x24
 800af6e:	e7c3      	b.n	800aef8 <_svfiprintf_r+0x12c>
 800af70:	4342      	muls	r2, r0
 800af72:	2301      	movs	r3, #1
 800af74:	1852      	adds	r2, r2, r1
 800af76:	0035      	movs	r5, r6
 800af78:	e7f1      	b.n	800af5e <_svfiprintf_r+0x192>
 800af7a:	ab07      	add	r3, sp, #28
 800af7c:	9300      	str	r3, [sp, #0]
 800af7e:	003a      	movs	r2, r7
 800af80:	4b10      	ldr	r3, [pc, #64]	; (800afc4 <_svfiprintf_r+0x1f8>)
 800af82:	0021      	movs	r1, r4
 800af84:	9803      	ldr	r0, [sp, #12]
 800af86:	e000      	b.n	800af8a <_svfiprintf_r+0x1be>
 800af88:	bf00      	nop
 800af8a:	9004      	str	r0, [sp, #16]
 800af8c:	9b04      	ldr	r3, [sp, #16]
 800af8e:	3301      	adds	r3, #1
 800af90:	d1d3      	bne.n	800af3a <_svfiprintf_r+0x16e>
 800af92:	89bb      	ldrh	r3, [r7, #12]
 800af94:	980d      	ldr	r0, [sp, #52]	; 0x34
 800af96:	065b      	lsls	r3, r3, #25
 800af98:	d400      	bmi.n	800af9c <_svfiprintf_r+0x1d0>
 800af9a:	e72e      	b.n	800adfa <_svfiprintf_r+0x2e>
 800af9c:	2001      	movs	r0, #1
 800af9e:	4240      	negs	r0, r0
 800afa0:	e72b      	b.n	800adfa <_svfiprintf_r+0x2e>
 800afa2:	ab07      	add	r3, sp, #28
 800afa4:	9300      	str	r3, [sp, #0]
 800afa6:	003a      	movs	r2, r7
 800afa8:	4b06      	ldr	r3, [pc, #24]	; (800afc4 <_svfiprintf_r+0x1f8>)
 800afaa:	0021      	movs	r1, r4
 800afac:	9803      	ldr	r0, [sp, #12]
 800afae:	f000 f879 	bl	800b0a4 <_printf_i>
 800afb2:	e7ea      	b.n	800af8a <_svfiprintf_r+0x1be>
 800afb4:	0800bf64 	.word	0x0800bf64
 800afb8:	0800bf6a 	.word	0x0800bf6a
 800afbc:	0800bf6e 	.word	0x0800bf6e
 800afc0:	00000000 	.word	0x00000000
 800afc4:	0800ad09 	.word	0x0800ad09

0800afc8 <_printf_common>:
 800afc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afca:	0015      	movs	r5, r2
 800afcc:	9301      	str	r3, [sp, #4]
 800afce:	688a      	ldr	r2, [r1, #8]
 800afd0:	690b      	ldr	r3, [r1, #16]
 800afd2:	9000      	str	r0, [sp, #0]
 800afd4:	000c      	movs	r4, r1
 800afd6:	4293      	cmp	r3, r2
 800afd8:	da00      	bge.n	800afdc <_printf_common+0x14>
 800afda:	0013      	movs	r3, r2
 800afdc:	0022      	movs	r2, r4
 800afde:	602b      	str	r3, [r5, #0]
 800afe0:	3243      	adds	r2, #67	; 0x43
 800afe2:	7812      	ldrb	r2, [r2, #0]
 800afe4:	2a00      	cmp	r2, #0
 800afe6:	d001      	beq.n	800afec <_printf_common+0x24>
 800afe8:	3301      	adds	r3, #1
 800afea:	602b      	str	r3, [r5, #0]
 800afec:	6823      	ldr	r3, [r4, #0]
 800afee:	069b      	lsls	r3, r3, #26
 800aff0:	d502      	bpl.n	800aff8 <_printf_common+0x30>
 800aff2:	682b      	ldr	r3, [r5, #0]
 800aff4:	3302      	adds	r3, #2
 800aff6:	602b      	str	r3, [r5, #0]
 800aff8:	2706      	movs	r7, #6
 800affa:	6823      	ldr	r3, [r4, #0]
 800affc:	401f      	ands	r7, r3
 800affe:	d027      	beq.n	800b050 <_printf_common+0x88>
 800b000:	0023      	movs	r3, r4
 800b002:	3343      	adds	r3, #67	; 0x43
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	1e5a      	subs	r2, r3, #1
 800b008:	4193      	sbcs	r3, r2
 800b00a:	6822      	ldr	r2, [r4, #0]
 800b00c:	0692      	lsls	r2, r2, #26
 800b00e:	d430      	bmi.n	800b072 <_printf_common+0xaa>
 800b010:	0022      	movs	r2, r4
 800b012:	9901      	ldr	r1, [sp, #4]
 800b014:	3243      	adds	r2, #67	; 0x43
 800b016:	9800      	ldr	r0, [sp, #0]
 800b018:	9e08      	ldr	r6, [sp, #32]
 800b01a:	47b0      	blx	r6
 800b01c:	1c43      	adds	r3, r0, #1
 800b01e:	d025      	beq.n	800b06c <_printf_common+0xa4>
 800b020:	2306      	movs	r3, #6
 800b022:	6820      	ldr	r0, [r4, #0]
 800b024:	682a      	ldr	r2, [r5, #0]
 800b026:	68e1      	ldr	r1, [r4, #12]
 800b028:	4003      	ands	r3, r0
 800b02a:	2500      	movs	r5, #0
 800b02c:	2b04      	cmp	r3, #4
 800b02e:	d103      	bne.n	800b038 <_printf_common+0x70>
 800b030:	1a8d      	subs	r5, r1, r2
 800b032:	43eb      	mvns	r3, r5
 800b034:	17db      	asrs	r3, r3, #31
 800b036:	401d      	ands	r5, r3
 800b038:	68a3      	ldr	r3, [r4, #8]
 800b03a:	6922      	ldr	r2, [r4, #16]
 800b03c:	4293      	cmp	r3, r2
 800b03e:	dd01      	ble.n	800b044 <_printf_common+0x7c>
 800b040:	1a9b      	subs	r3, r3, r2
 800b042:	18ed      	adds	r5, r5, r3
 800b044:	2700      	movs	r7, #0
 800b046:	42bd      	cmp	r5, r7
 800b048:	d120      	bne.n	800b08c <_printf_common+0xc4>
 800b04a:	2000      	movs	r0, #0
 800b04c:	e010      	b.n	800b070 <_printf_common+0xa8>
 800b04e:	3701      	adds	r7, #1
 800b050:	68e3      	ldr	r3, [r4, #12]
 800b052:	682a      	ldr	r2, [r5, #0]
 800b054:	1a9b      	subs	r3, r3, r2
 800b056:	42bb      	cmp	r3, r7
 800b058:	ddd2      	ble.n	800b000 <_printf_common+0x38>
 800b05a:	0022      	movs	r2, r4
 800b05c:	2301      	movs	r3, #1
 800b05e:	3219      	adds	r2, #25
 800b060:	9901      	ldr	r1, [sp, #4]
 800b062:	9800      	ldr	r0, [sp, #0]
 800b064:	9e08      	ldr	r6, [sp, #32]
 800b066:	47b0      	blx	r6
 800b068:	1c43      	adds	r3, r0, #1
 800b06a:	d1f0      	bne.n	800b04e <_printf_common+0x86>
 800b06c:	2001      	movs	r0, #1
 800b06e:	4240      	negs	r0, r0
 800b070:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b072:	2030      	movs	r0, #48	; 0x30
 800b074:	18e1      	adds	r1, r4, r3
 800b076:	3143      	adds	r1, #67	; 0x43
 800b078:	7008      	strb	r0, [r1, #0]
 800b07a:	0021      	movs	r1, r4
 800b07c:	1c5a      	adds	r2, r3, #1
 800b07e:	3145      	adds	r1, #69	; 0x45
 800b080:	7809      	ldrb	r1, [r1, #0]
 800b082:	18a2      	adds	r2, r4, r2
 800b084:	3243      	adds	r2, #67	; 0x43
 800b086:	3302      	adds	r3, #2
 800b088:	7011      	strb	r1, [r2, #0]
 800b08a:	e7c1      	b.n	800b010 <_printf_common+0x48>
 800b08c:	0022      	movs	r2, r4
 800b08e:	2301      	movs	r3, #1
 800b090:	321a      	adds	r2, #26
 800b092:	9901      	ldr	r1, [sp, #4]
 800b094:	9800      	ldr	r0, [sp, #0]
 800b096:	9e08      	ldr	r6, [sp, #32]
 800b098:	47b0      	blx	r6
 800b09a:	1c43      	adds	r3, r0, #1
 800b09c:	d0e6      	beq.n	800b06c <_printf_common+0xa4>
 800b09e:	3701      	adds	r7, #1
 800b0a0:	e7d1      	b.n	800b046 <_printf_common+0x7e>
	...

0800b0a4 <_printf_i>:
 800b0a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0a6:	b089      	sub	sp, #36	; 0x24
 800b0a8:	9204      	str	r2, [sp, #16]
 800b0aa:	000a      	movs	r2, r1
 800b0ac:	3243      	adds	r2, #67	; 0x43
 800b0ae:	9305      	str	r3, [sp, #20]
 800b0b0:	9003      	str	r0, [sp, #12]
 800b0b2:	9202      	str	r2, [sp, #8]
 800b0b4:	7e0a      	ldrb	r2, [r1, #24]
 800b0b6:	000c      	movs	r4, r1
 800b0b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b0ba:	2a6e      	cmp	r2, #110	; 0x6e
 800b0bc:	d100      	bne.n	800b0c0 <_printf_i+0x1c>
 800b0be:	e086      	b.n	800b1ce <_printf_i+0x12a>
 800b0c0:	d81f      	bhi.n	800b102 <_printf_i+0x5e>
 800b0c2:	2a63      	cmp	r2, #99	; 0x63
 800b0c4:	d033      	beq.n	800b12e <_printf_i+0x8a>
 800b0c6:	d808      	bhi.n	800b0da <_printf_i+0x36>
 800b0c8:	2a00      	cmp	r2, #0
 800b0ca:	d100      	bne.n	800b0ce <_printf_i+0x2a>
 800b0cc:	e08c      	b.n	800b1e8 <_printf_i+0x144>
 800b0ce:	2a58      	cmp	r2, #88	; 0x58
 800b0d0:	d04d      	beq.n	800b16e <_printf_i+0xca>
 800b0d2:	0025      	movs	r5, r4
 800b0d4:	3542      	adds	r5, #66	; 0x42
 800b0d6:	702a      	strb	r2, [r5, #0]
 800b0d8:	e030      	b.n	800b13c <_printf_i+0x98>
 800b0da:	2a64      	cmp	r2, #100	; 0x64
 800b0dc:	d001      	beq.n	800b0e2 <_printf_i+0x3e>
 800b0de:	2a69      	cmp	r2, #105	; 0x69
 800b0e0:	d1f7      	bne.n	800b0d2 <_printf_i+0x2e>
 800b0e2:	6819      	ldr	r1, [r3, #0]
 800b0e4:	6825      	ldr	r5, [r4, #0]
 800b0e6:	1d0a      	adds	r2, r1, #4
 800b0e8:	0628      	lsls	r0, r5, #24
 800b0ea:	d529      	bpl.n	800b140 <_printf_i+0x9c>
 800b0ec:	6808      	ldr	r0, [r1, #0]
 800b0ee:	601a      	str	r2, [r3, #0]
 800b0f0:	2800      	cmp	r0, #0
 800b0f2:	da03      	bge.n	800b0fc <_printf_i+0x58>
 800b0f4:	232d      	movs	r3, #45	; 0x2d
 800b0f6:	9a02      	ldr	r2, [sp, #8]
 800b0f8:	4240      	negs	r0, r0
 800b0fa:	7013      	strb	r3, [r2, #0]
 800b0fc:	4e6b      	ldr	r6, [pc, #428]	; (800b2ac <_printf_i+0x208>)
 800b0fe:	270a      	movs	r7, #10
 800b100:	e04f      	b.n	800b1a2 <_printf_i+0xfe>
 800b102:	2a73      	cmp	r2, #115	; 0x73
 800b104:	d074      	beq.n	800b1f0 <_printf_i+0x14c>
 800b106:	d808      	bhi.n	800b11a <_printf_i+0x76>
 800b108:	2a6f      	cmp	r2, #111	; 0x6f
 800b10a:	d01f      	beq.n	800b14c <_printf_i+0xa8>
 800b10c:	2a70      	cmp	r2, #112	; 0x70
 800b10e:	d1e0      	bne.n	800b0d2 <_printf_i+0x2e>
 800b110:	2220      	movs	r2, #32
 800b112:	6809      	ldr	r1, [r1, #0]
 800b114:	430a      	orrs	r2, r1
 800b116:	6022      	str	r2, [r4, #0]
 800b118:	e003      	b.n	800b122 <_printf_i+0x7e>
 800b11a:	2a75      	cmp	r2, #117	; 0x75
 800b11c:	d016      	beq.n	800b14c <_printf_i+0xa8>
 800b11e:	2a78      	cmp	r2, #120	; 0x78
 800b120:	d1d7      	bne.n	800b0d2 <_printf_i+0x2e>
 800b122:	0022      	movs	r2, r4
 800b124:	2178      	movs	r1, #120	; 0x78
 800b126:	3245      	adds	r2, #69	; 0x45
 800b128:	7011      	strb	r1, [r2, #0]
 800b12a:	4e61      	ldr	r6, [pc, #388]	; (800b2b0 <_printf_i+0x20c>)
 800b12c:	e022      	b.n	800b174 <_printf_i+0xd0>
 800b12e:	0025      	movs	r5, r4
 800b130:	681a      	ldr	r2, [r3, #0]
 800b132:	3542      	adds	r5, #66	; 0x42
 800b134:	1d11      	adds	r1, r2, #4
 800b136:	6019      	str	r1, [r3, #0]
 800b138:	6813      	ldr	r3, [r2, #0]
 800b13a:	702b      	strb	r3, [r5, #0]
 800b13c:	2301      	movs	r3, #1
 800b13e:	e065      	b.n	800b20c <_printf_i+0x168>
 800b140:	6808      	ldr	r0, [r1, #0]
 800b142:	601a      	str	r2, [r3, #0]
 800b144:	0669      	lsls	r1, r5, #25
 800b146:	d5d3      	bpl.n	800b0f0 <_printf_i+0x4c>
 800b148:	b200      	sxth	r0, r0
 800b14a:	e7d1      	b.n	800b0f0 <_printf_i+0x4c>
 800b14c:	6819      	ldr	r1, [r3, #0]
 800b14e:	6825      	ldr	r5, [r4, #0]
 800b150:	1d08      	adds	r0, r1, #4
 800b152:	6018      	str	r0, [r3, #0]
 800b154:	6808      	ldr	r0, [r1, #0]
 800b156:	062e      	lsls	r6, r5, #24
 800b158:	d505      	bpl.n	800b166 <_printf_i+0xc2>
 800b15a:	4e54      	ldr	r6, [pc, #336]	; (800b2ac <_printf_i+0x208>)
 800b15c:	2708      	movs	r7, #8
 800b15e:	2a6f      	cmp	r2, #111	; 0x6f
 800b160:	d01b      	beq.n	800b19a <_printf_i+0xf6>
 800b162:	270a      	movs	r7, #10
 800b164:	e019      	b.n	800b19a <_printf_i+0xf6>
 800b166:	066d      	lsls	r5, r5, #25
 800b168:	d5f7      	bpl.n	800b15a <_printf_i+0xb6>
 800b16a:	b280      	uxth	r0, r0
 800b16c:	e7f5      	b.n	800b15a <_printf_i+0xb6>
 800b16e:	3145      	adds	r1, #69	; 0x45
 800b170:	4e4e      	ldr	r6, [pc, #312]	; (800b2ac <_printf_i+0x208>)
 800b172:	700a      	strb	r2, [r1, #0]
 800b174:	6818      	ldr	r0, [r3, #0]
 800b176:	6822      	ldr	r2, [r4, #0]
 800b178:	1d01      	adds	r1, r0, #4
 800b17a:	6800      	ldr	r0, [r0, #0]
 800b17c:	6019      	str	r1, [r3, #0]
 800b17e:	0615      	lsls	r5, r2, #24
 800b180:	d521      	bpl.n	800b1c6 <_printf_i+0x122>
 800b182:	07d3      	lsls	r3, r2, #31
 800b184:	d502      	bpl.n	800b18c <_printf_i+0xe8>
 800b186:	2320      	movs	r3, #32
 800b188:	431a      	orrs	r2, r3
 800b18a:	6022      	str	r2, [r4, #0]
 800b18c:	2710      	movs	r7, #16
 800b18e:	2800      	cmp	r0, #0
 800b190:	d103      	bne.n	800b19a <_printf_i+0xf6>
 800b192:	2320      	movs	r3, #32
 800b194:	6822      	ldr	r2, [r4, #0]
 800b196:	439a      	bics	r2, r3
 800b198:	6022      	str	r2, [r4, #0]
 800b19a:	0023      	movs	r3, r4
 800b19c:	2200      	movs	r2, #0
 800b19e:	3343      	adds	r3, #67	; 0x43
 800b1a0:	701a      	strb	r2, [r3, #0]
 800b1a2:	6863      	ldr	r3, [r4, #4]
 800b1a4:	60a3      	str	r3, [r4, #8]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	db58      	blt.n	800b25c <_printf_i+0x1b8>
 800b1aa:	2204      	movs	r2, #4
 800b1ac:	6821      	ldr	r1, [r4, #0]
 800b1ae:	4391      	bics	r1, r2
 800b1b0:	6021      	str	r1, [r4, #0]
 800b1b2:	2800      	cmp	r0, #0
 800b1b4:	d154      	bne.n	800b260 <_printf_i+0x1bc>
 800b1b6:	9d02      	ldr	r5, [sp, #8]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d05a      	beq.n	800b272 <_printf_i+0x1ce>
 800b1bc:	0025      	movs	r5, r4
 800b1be:	7833      	ldrb	r3, [r6, #0]
 800b1c0:	3542      	adds	r5, #66	; 0x42
 800b1c2:	702b      	strb	r3, [r5, #0]
 800b1c4:	e055      	b.n	800b272 <_printf_i+0x1ce>
 800b1c6:	0655      	lsls	r5, r2, #25
 800b1c8:	d5db      	bpl.n	800b182 <_printf_i+0xde>
 800b1ca:	b280      	uxth	r0, r0
 800b1cc:	e7d9      	b.n	800b182 <_printf_i+0xde>
 800b1ce:	681a      	ldr	r2, [r3, #0]
 800b1d0:	680d      	ldr	r5, [r1, #0]
 800b1d2:	1d10      	adds	r0, r2, #4
 800b1d4:	6949      	ldr	r1, [r1, #20]
 800b1d6:	6018      	str	r0, [r3, #0]
 800b1d8:	6813      	ldr	r3, [r2, #0]
 800b1da:	062e      	lsls	r6, r5, #24
 800b1dc:	d501      	bpl.n	800b1e2 <_printf_i+0x13e>
 800b1de:	6019      	str	r1, [r3, #0]
 800b1e0:	e002      	b.n	800b1e8 <_printf_i+0x144>
 800b1e2:	066d      	lsls	r5, r5, #25
 800b1e4:	d5fb      	bpl.n	800b1de <_printf_i+0x13a>
 800b1e6:	8019      	strh	r1, [r3, #0]
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	9d02      	ldr	r5, [sp, #8]
 800b1ec:	6123      	str	r3, [r4, #16]
 800b1ee:	e04f      	b.n	800b290 <_printf_i+0x1ec>
 800b1f0:	681a      	ldr	r2, [r3, #0]
 800b1f2:	1d11      	adds	r1, r2, #4
 800b1f4:	6019      	str	r1, [r3, #0]
 800b1f6:	6815      	ldr	r5, [r2, #0]
 800b1f8:	2100      	movs	r1, #0
 800b1fa:	6862      	ldr	r2, [r4, #4]
 800b1fc:	0028      	movs	r0, r5
 800b1fe:	f000 f859 	bl	800b2b4 <memchr>
 800b202:	2800      	cmp	r0, #0
 800b204:	d001      	beq.n	800b20a <_printf_i+0x166>
 800b206:	1b40      	subs	r0, r0, r5
 800b208:	6060      	str	r0, [r4, #4]
 800b20a:	6863      	ldr	r3, [r4, #4]
 800b20c:	6123      	str	r3, [r4, #16]
 800b20e:	2300      	movs	r3, #0
 800b210:	9a02      	ldr	r2, [sp, #8]
 800b212:	7013      	strb	r3, [r2, #0]
 800b214:	e03c      	b.n	800b290 <_printf_i+0x1ec>
 800b216:	6923      	ldr	r3, [r4, #16]
 800b218:	002a      	movs	r2, r5
 800b21a:	9904      	ldr	r1, [sp, #16]
 800b21c:	9803      	ldr	r0, [sp, #12]
 800b21e:	9d05      	ldr	r5, [sp, #20]
 800b220:	47a8      	blx	r5
 800b222:	1c43      	adds	r3, r0, #1
 800b224:	d03e      	beq.n	800b2a4 <_printf_i+0x200>
 800b226:	6823      	ldr	r3, [r4, #0]
 800b228:	079b      	lsls	r3, r3, #30
 800b22a:	d415      	bmi.n	800b258 <_printf_i+0x1b4>
 800b22c:	9b07      	ldr	r3, [sp, #28]
 800b22e:	68e0      	ldr	r0, [r4, #12]
 800b230:	4298      	cmp	r0, r3
 800b232:	da39      	bge.n	800b2a8 <_printf_i+0x204>
 800b234:	0018      	movs	r0, r3
 800b236:	e037      	b.n	800b2a8 <_printf_i+0x204>
 800b238:	0022      	movs	r2, r4
 800b23a:	2301      	movs	r3, #1
 800b23c:	3219      	adds	r2, #25
 800b23e:	9904      	ldr	r1, [sp, #16]
 800b240:	9803      	ldr	r0, [sp, #12]
 800b242:	9e05      	ldr	r6, [sp, #20]
 800b244:	47b0      	blx	r6
 800b246:	1c43      	adds	r3, r0, #1
 800b248:	d02c      	beq.n	800b2a4 <_printf_i+0x200>
 800b24a:	3501      	adds	r5, #1
 800b24c:	68e3      	ldr	r3, [r4, #12]
 800b24e:	9a07      	ldr	r2, [sp, #28]
 800b250:	1a9b      	subs	r3, r3, r2
 800b252:	42ab      	cmp	r3, r5
 800b254:	dcf0      	bgt.n	800b238 <_printf_i+0x194>
 800b256:	e7e9      	b.n	800b22c <_printf_i+0x188>
 800b258:	2500      	movs	r5, #0
 800b25a:	e7f7      	b.n	800b24c <_printf_i+0x1a8>
 800b25c:	2800      	cmp	r0, #0
 800b25e:	d0ad      	beq.n	800b1bc <_printf_i+0x118>
 800b260:	9d02      	ldr	r5, [sp, #8]
 800b262:	0039      	movs	r1, r7
 800b264:	f7f4 ffde 	bl	8000224 <__aeabi_uidivmod>
 800b268:	5c73      	ldrb	r3, [r6, r1]
 800b26a:	3d01      	subs	r5, #1
 800b26c:	702b      	strb	r3, [r5, #0]
 800b26e:	2800      	cmp	r0, #0
 800b270:	d1f7      	bne.n	800b262 <_printf_i+0x1be>
 800b272:	2f08      	cmp	r7, #8
 800b274:	d109      	bne.n	800b28a <_printf_i+0x1e6>
 800b276:	6823      	ldr	r3, [r4, #0]
 800b278:	07db      	lsls	r3, r3, #31
 800b27a:	d506      	bpl.n	800b28a <_printf_i+0x1e6>
 800b27c:	6863      	ldr	r3, [r4, #4]
 800b27e:	6922      	ldr	r2, [r4, #16]
 800b280:	4293      	cmp	r3, r2
 800b282:	dc02      	bgt.n	800b28a <_printf_i+0x1e6>
 800b284:	2330      	movs	r3, #48	; 0x30
 800b286:	3d01      	subs	r5, #1
 800b288:	702b      	strb	r3, [r5, #0]
 800b28a:	9b02      	ldr	r3, [sp, #8]
 800b28c:	1b5b      	subs	r3, r3, r5
 800b28e:	6123      	str	r3, [r4, #16]
 800b290:	9b05      	ldr	r3, [sp, #20]
 800b292:	aa07      	add	r2, sp, #28
 800b294:	9300      	str	r3, [sp, #0]
 800b296:	0021      	movs	r1, r4
 800b298:	9b04      	ldr	r3, [sp, #16]
 800b29a:	9803      	ldr	r0, [sp, #12]
 800b29c:	f7ff fe94 	bl	800afc8 <_printf_common>
 800b2a0:	1c43      	adds	r3, r0, #1
 800b2a2:	d1b8      	bne.n	800b216 <_printf_i+0x172>
 800b2a4:	2001      	movs	r0, #1
 800b2a6:	4240      	negs	r0, r0
 800b2a8:	b009      	add	sp, #36	; 0x24
 800b2aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2ac:	0800bf75 	.word	0x0800bf75
 800b2b0:	0800bf86 	.word	0x0800bf86

0800b2b4 <memchr>:
 800b2b4:	b2c9      	uxtb	r1, r1
 800b2b6:	1882      	adds	r2, r0, r2
 800b2b8:	4290      	cmp	r0, r2
 800b2ba:	d101      	bne.n	800b2c0 <memchr+0xc>
 800b2bc:	2000      	movs	r0, #0
 800b2be:	4770      	bx	lr
 800b2c0:	7803      	ldrb	r3, [r0, #0]
 800b2c2:	428b      	cmp	r3, r1
 800b2c4:	d0fb      	beq.n	800b2be <memchr+0xa>
 800b2c6:	3001      	adds	r0, #1
 800b2c8:	e7f6      	b.n	800b2b8 <memchr+0x4>

0800b2ca <memmove>:
 800b2ca:	b510      	push	{r4, lr}
 800b2cc:	4288      	cmp	r0, r1
 800b2ce:	d902      	bls.n	800b2d6 <memmove+0xc>
 800b2d0:	188b      	adds	r3, r1, r2
 800b2d2:	4298      	cmp	r0, r3
 800b2d4:	d303      	bcc.n	800b2de <memmove+0x14>
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	e007      	b.n	800b2ea <memmove+0x20>
 800b2da:	5c8b      	ldrb	r3, [r1, r2]
 800b2dc:	5483      	strb	r3, [r0, r2]
 800b2de:	3a01      	subs	r2, #1
 800b2e0:	d2fb      	bcs.n	800b2da <memmove+0x10>
 800b2e2:	bd10      	pop	{r4, pc}
 800b2e4:	5ccc      	ldrb	r4, [r1, r3]
 800b2e6:	54c4      	strb	r4, [r0, r3]
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d1fa      	bne.n	800b2e4 <memmove+0x1a>
 800b2ee:	e7f8      	b.n	800b2e2 <memmove+0x18>

0800b2f0 <_free_r>:
 800b2f0:	b570      	push	{r4, r5, r6, lr}
 800b2f2:	0005      	movs	r5, r0
 800b2f4:	2900      	cmp	r1, #0
 800b2f6:	d010      	beq.n	800b31a <_free_r+0x2a>
 800b2f8:	1f0c      	subs	r4, r1, #4
 800b2fa:	6823      	ldr	r3, [r4, #0]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	da00      	bge.n	800b302 <_free_r+0x12>
 800b300:	18e4      	adds	r4, r4, r3
 800b302:	0028      	movs	r0, r5
 800b304:	f7ff fcfe 	bl	800ad04 <__malloc_lock>
 800b308:	4a1d      	ldr	r2, [pc, #116]	; (800b380 <_free_r+0x90>)
 800b30a:	6813      	ldr	r3, [r2, #0]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d105      	bne.n	800b31c <_free_r+0x2c>
 800b310:	6063      	str	r3, [r4, #4]
 800b312:	6014      	str	r4, [r2, #0]
 800b314:	0028      	movs	r0, r5
 800b316:	f7ff fcf6 	bl	800ad06 <__malloc_unlock>
 800b31a:	bd70      	pop	{r4, r5, r6, pc}
 800b31c:	42a3      	cmp	r3, r4
 800b31e:	d909      	bls.n	800b334 <_free_r+0x44>
 800b320:	6821      	ldr	r1, [r4, #0]
 800b322:	1860      	adds	r0, r4, r1
 800b324:	4283      	cmp	r3, r0
 800b326:	d1f3      	bne.n	800b310 <_free_r+0x20>
 800b328:	6818      	ldr	r0, [r3, #0]
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	1841      	adds	r1, r0, r1
 800b32e:	6021      	str	r1, [r4, #0]
 800b330:	e7ee      	b.n	800b310 <_free_r+0x20>
 800b332:	0013      	movs	r3, r2
 800b334:	685a      	ldr	r2, [r3, #4]
 800b336:	2a00      	cmp	r2, #0
 800b338:	d001      	beq.n	800b33e <_free_r+0x4e>
 800b33a:	42a2      	cmp	r2, r4
 800b33c:	d9f9      	bls.n	800b332 <_free_r+0x42>
 800b33e:	6819      	ldr	r1, [r3, #0]
 800b340:	1858      	adds	r0, r3, r1
 800b342:	42a0      	cmp	r0, r4
 800b344:	d10b      	bne.n	800b35e <_free_r+0x6e>
 800b346:	6820      	ldr	r0, [r4, #0]
 800b348:	1809      	adds	r1, r1, r0
 800b34a:	1858      	adds	r0, r3, r1
 800b34c:	6019      	str	r1, [r3, #0]
 800b34e:	4282      	cmp	r2, r0
 800b350:	d1e0      	bne.n	800b314 <_free_r+0x24>
 800b352:	6810      	ldr	r0, [r2, #0]
 800b354:	6852      	ldr	r2, [r2, #4]
 800b356:	1841      	adds	r1, r0, r1
 800b358:	6019      	str	r1, [r3, #0]
 800b35a:	605a      	str	r2, [r3, #4]
 800b35c:	e7da      	b.n	800b314 <_free_r+0x24>
 800b35e:	42a0      	cmp	r0, r4
 800b360:	d902      	bls.n	800b368 <_free_r+0x78>
 800b362:	230c      	movs	r3, #12
 800b364:	602b      	str	r3, [r5, #0]
 800b366:	e7d5      	b.n	800b314 <_free_r+0x24>
 800b368:	6821      	ldr	r1, [r4, #0]
 800b36a:	1860      	adds	r0, r4, r1
 800b36c:	4282      	cmp	r2, r0
 800b36e:	d103      	bne.n	800b378 <_free_r+0x88>
 800b370:	6810      	ldr	r0, [r2, #0]
 800b372:	6852      	ldr	r2, [r2, #4]
 800b374:	1841      	adds	r1, r0, r1
 800b376:	6021      	str	r1, [r4, #0]
 800b378:	6062      	str	r2, [r4, #4]
 800b37a:	605c      	str	r4, [r3, #4]
 800b37c:	e7ca      	b.n	800b314 <_free_r+0x24>
 800b37e:	46c0      	nop			; (mov r8, r8)
 800b380:	20000138 	.word	0x20000138

0800b384 <_realloc_r>:
 800b384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b386:	0007      	movs	r7, r0
 800b388:	000d      	movs	r5, r1
 800b38a:	0016      	movs	r6, r2
 800b38c:	2900      	cmp	r1, #0
 800b38e:	d105      	bne.n	800b39c <_realloc_r+0x18>
 800b390:	0011      	movs	r1, r2
 800b392:	f7ff fc27 	bl	800abe4 <_malloc_r>
 800b396:	0004      	movs	r4, r0
 800b398:	0020      	movs	r0, r4
 800b39a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b39c:	2a00      	cmp	r2, #0
 800b39e:	d103      	bne.n	800b3a8 <_realloc_r+0x24>
 800b3a0:	f7ff ffa6 	bl	800b2f0 <_free_r>
 800b3a4:	0034      	movs	r4, r6
 800b3a6:	e7f7      	b.n	800b398 <_realloc_r+0x14>
 800b3a8:	f000 f812 	bl	800b3d0 <_malloc_usable_size_r>
 800b3ac:	002c      	movs	r4, r5
 800b3ae:	42b0      	cmp	r0, r6
 800b3b0:	d2f2      	bcs.n	800b398 <_realloc_r+0x14>
 800b3b2:	0031      	movs	r1, r6
 800b3b4:	0038      	movs	r0, r7
 800b3b6:	f7ff fc15 	bl	800abe4 <_malloc_r>
 800b3ba:	1e04      	subs	r4, r0, #0
 800b3bc:	d0ec      	beq.n	800b398 <_realloc_r+0x14>
 800b3be:	0029      	movs	r1, r5
 800b3c0:	0032      	movs	r2, r6
 800b3c2:	f7ff fbef 	bl	800aba4 <memcpy>
 800b3c6:	0029      	movs	r1, r5
 800b3c8:	0038      	movs	r0, r7
 800b3ca:	f7ff ff91 	bl	800b2f0 <_free_r>
 800b3ce:	e7e3      	b.n	800b398 <_realloc_r+0x14>

0800b3d0 <_malloc_usable_size_r>:
 800b3d0:	1f0b      	subs	r3, r1, #4
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	1f18      	subs	r0, r3, #4
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	da01      	bge.n	800b3de <_malloc_usable_size_r+0xe>
 800b3da:	580b      	ldr	r3, [r1, r0]
 800b3dc:	18c0      	adds	r0, r0, r3
 800b3de:	4770      	bx	lr

0800b3e0 <_init>:
 800b3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3e2:	46c0      	nop			; (mov r8, r8)
 800b3e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3e6:	bc08      	pop	{r3}
 800b3e8:	469e      	mov	lr, r3
 800b3ea:	4770      	bx	lr

0800b3ec <_fini>:
 800b3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ee:	46c0      	nop			; (mov r8, r8)
 800b3f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3f2:	bc08      	pop	{r3}
 800b3f4:	469e      	mov	lr, r3
 800b3f6:	4770      	bx	lr
