
project_L0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008320  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006dc  080083e0  080083e0  000183e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008abc  08008abc  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08008abc  08008abc  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008abc  08008abc  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008abc  08008abc  00018abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ac0  08008ac0  00018ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08008ac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004fc  2000006c  08008b30  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000568  08008b30  00020568  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001abfb  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035ba  00000000  00000000  0003ac8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001500  00000000  00000000  0003e250  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001340  00000000  00000000  0003f750  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000186d6  00000000  00000000  00040a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000127df  00000000  00000000  00059166  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f27a  00000000  00000000  0006b945  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fabbf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e18  00000000  00000000  000fac3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080083c8 	.word	0x080083c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	080083c8 	.word	0x080083c8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cfrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c08      	adds	r0, r1, #0
 80003f8:	4661      	mov	r1, ip
 80003fa:	e7ff      	b.n	80003fc <__aeabi_cfcmpeq>

080003fc <__aeabi_cfcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 fb6d 	bl	8000adc <__lesf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cfcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_fcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 faef 	bl	80009f0 <__eqsf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_fcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 fb5f 	bl	8000adc <__lesf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_fcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_fcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 fb55 	bl	8000adc <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_fcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_fcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 fafd 	bl	8000a40 <__gesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_fcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_fcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 faf3 	bl	8000a40 <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_fcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_f2uiz>:
 8000468:	219e      	movs	r1, #158	; 0x9e
 800046a:	b510      	push	{r4, lr}
 800046c:	05c9      	lsls	r1, r1, #23
 800046e:	1c04      	adds	r4, r0, #0
 8000470:	f7ff fff0 	bl	8000454 <__aeabi_fcmpge>
 8000474:	2800      	cmp	r0, #0
 8000476:	d103      	bne.n	8000480 <__aeabi_f2uiz+0x18>
 8000478:	1c20      	adds	r0, r4, #0
 800047a:	f000 fe75 	bl	8001168 <__aeabi_f2iz>
 800047e:	bd10      	pop	{r4, pc}
 8000480:	219e      	movs	r1, #158	; 0x9e
 8000482:	1c20      	adds	r0, r4, #0
 8000484:	05c9      	lsls	r1, r1, #23
 8000486:	f000 fcab 	bl	8000de0 <__aeabi_fsub>
 800048a:	f000 fe6d 	bl	8001168 <__aeabi_f2iz>
 800048e:	2380      	movs	r3, #128	; 0x80
 8000490:	061b      	lsls	r3, r3, #24
 8000492:	469c      	mov	ip, r3
 8000494:	4460      	add	r0, ip
 8000496:	e7f2      	b.n	800047e <__aeabi_f2uiz+0x16>

08000498 <__aeabi_fadd>:
 8000498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049a:	4647      	mov	r7, r8
 800049c:	46ce      	mov	lr, r9
 800049e:	0243      	lsls	r3, r0, #9
 80004a0:	0a5b      	lsrs	r3, r3, #9
 80004a2:	0044      	lsls	r4, r0, #1
 80004a4:	0fc2      	lsrs	r2, r0, #31
 80004a6:	469c      	mov	ip, r3
 80004a8:	0048      	lsls	r0, r1, #1
 80004aa:	00dd      	lsls	r5, r3, #3
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	0e24      	lsrs	r4, r4, #24
 80004b0:	0a5b      	lsrs	r3, r3, #9
 80004b2:	0e00      	lsrs	r0, r0, #24
 80004b4:	b580      	push	{r7, lr}
 80004b6:	4698      	mov	r8, r3
 80004b8:	0026      	movs	r6, r4
 80004ba:	4691      	mov	r9, r2
 80004bc:	0fc9      	lsrs	r1, r1, #31
 80004be:	00db      	lsls	r3, r3, #3
 80004c0:	1a27      	subs	r7, r4, r0
 80004c2:	428a      	cmp	r2, r1
 80004c4:	d029      	beq.n	800051a <__aeabi_fadd+0x82>
 80004c6:	2f00      	cmp	r7, #0
 80004c8:	dd15      	ble.n	80004f6 <__aeabi_fadd+0x5e>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d14a      	bne.n	8000564 <__aeabi_fadd+0xcc>
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d000      	beq.n	80004d4 <__aeabi_fadd+0x3c>
 80004d2:	e095      	b.n	8000600 <__aeabi_fadd+0x168>
 80004d4:	08ed      	lsrs	r5, r5, #3
 80004d6:	2cff      	cmp	r4, #255	; 0xff
 80004d8:	d100      	bne.n	80004dc <__aeabi_fadd+0x44>
 80004da:	e088      	b.n	80005ee <__aeabi_fadd+0x156>
 80004dc:	026b      	lsls	r3, r5, #9
 80004de:	0a5b      	lsrs	r3, r3, #9
 80004e0:	b2e6      	uxtb	r6, r4
 80004e2:	025b      	lsls	r3, r3, #9
 80004e4:	05f6      	lsls	r6, r6, #23
 80004e6:	0a58      	lsrs	r0, r3, #9
 80004e8:	4330      	orrs	r0, r6
 80004ea:	07d2      	lsls	r2, r2, #31
 80004ec:	4310      	orrs	r0, r2
 80004ee:	bc0c      	pop	{r2, r3}
 80004f0:	4690      	mov	r8, r2
 80004f2:	4699      	mov	r9, r3
 80004f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004f6:	2f00      	cmp	r7, #0
 80004f8:	d000      	beq.n	80004fc <__aeabi_fadd+0x64>
 80004fa:	e087      	b.n	800060c <__aeabi_fadd+0x174>
 80004fc:	1c60      	adds	r0, r4, #1
 80004fe:	b2c0      	uxtb	r0, r0
 8000500:	2801      	cmp	r0, #1
 8000502:	dc00      	bgt.n	8000506 <__aeabi_fadd+0x6e>
 8000504:	e0b6      	b.n	8000674 <__aeabi_fadd+0x1dc>
 8000506:	1aee      	subs	r6, r5, r3
 8000508:	0172      	lsls	r2, r6, #5
 800050a:	d500      	bpl.n	800050e <__aeabi_fadd+0x76>
 800050c:	e0c5      	b.n	800069a <__aeabi_fadd+0x202>
 800050e:	2e00      	cmp	r6, #0
 8000510:	d13d      	bne.n	800058e <__aeabi_fadd+0xf6>
 8000512:	2200      	movs	r2, #0
 8000514:	2600      	movs	r6, #0
 8000516:	2300      	movs	r3, #0
 8000518:	e7e3      	b.n	80004e2 <__aeabi_fadd+0x4a>
 800051a:	2f00      	cmp	r7, #0
 800051c:	dc00      	bgt.n	8000520 <__aeabi_fadd+0x88>
 800051e:	e096      	b.n	800064e <__aeabi_fadd+0x1b6>
 8000520:	2800      	cmp	r0, #0
 8000522:	d05d      	beq.n	80005e0 <__aeabi_fadd+0x148>
 8000524:	2cff      	cmp	r4, #255	; 0xff
 8000526:	d060      	beq.n	80005ea <__aeabi_fadd+0x152>
 8000528:	2280      	movs	r2, #128	; 0x80
 800052a:	04d2      	lsls	r2, r2, #19
 800052c:	4313      	orrs	r3, r2
 800052e:	2f1b      	cmp	r7, #27
 8000530:	dd00      	ble.n	8000534 <__aeabi_fadd+0x9c>
 8000532:	e0ec      	b.n	800070e <__aeabi_fadd+0x276>
 8000534:	2220      	movs	r2, #32
 8000536:	1bd2      	subs	r2, r2, r7
 8000538:	0018      	movs	r0, r3
 800053a:	4093      	lsls	r3, r2
 800053c:	40f8      	lsrs	r0, r7
 800053e:	1e5a      	subs	r2, r3, #1
 8000540:	4193      	sbcs	r3, r2
 8000542:	4303      	orrs	r3, r0
 8000544:	18ed      	adds	r5, r5, r3
 8000546:	016b      	lsls	r3, r5, #5
 8000548:	d57b      	bpl.n	8000642 <__aeabi_fadd+0x1aa>
 800054a:	3401      	adds	r4, #1
 800054c:	2cff      	cmp	r4, #255	; 0xff
 800054e:	d100      	bne.n	8000552 <__aeabi_fadd+0xba>
 8000550:	e0b7      	b.n	80006c2 <__aeabi_fadd+0x22a>
 8000552:	2201      	movs	r2, #1
 8000554:	2607      	movs	r6, #7
 8000556:	402a      	ands	r2, r5
 8000558:	086b      	lsrs	r3, r5, #1
 800055a:	4d9a      	ldr	r5, [pc, #616]	; (80007c4 <__aeabi_fadd+0x32c>)
 800055c:	401d      	ands	r5, r3
 800055e:	4315      	orrs	r5, r2
 8000560:	402e      	ands	r6, r5
 8000562:	e029      	b.n	80005b8 <__aeabi_fadd+0x120>
 8000564:	2cff      	cmp	r4, #255	; 0xff
 8000566:	d0b5      	beq.n	80004d4 <__aeabi_fadd+0x3c>
 8000568:	2280      	movs	r2, #128	; 0x80
 800056a:	04d2      	lsls	r2, r2, #19
 800056c:	4313      	orrs	r3, r2
 800056e:	2f1b      	cmp	r7, #27
 8000570:	dd00      	ble.n	8000574 <__aeabi_fadd+0xdc>
 8000572:	e0b2      	b.n	80006da <__aeabi_fadd+0x242>
 8000574:	2220      	movs	r2, #32
 8000576:	1bd2      	subs	r2, r2, r7
 8000578:	0019      	movs	r1, r3
 800057a:	4093      	lsls	r3, r2
 800057c:	40f9      	lsrs	r1, r7
 800057e:	1e5a      	subs	r2, r3, #1
 8000580:	4193      	sbcs	r3, r2
 8000582:	430b      	orrs	r3, r1
 8000584:	1aed      	subs	r5, r5, r3
 8000586:	016b      	lsls	r3, r5, #5
 8000588:	d55b      	bpl.n	8000642 <__aeabi_fadd+0x1aa>
 800058a:	01ad      	lsls	r5, r5, #6
 800058c:	09ae      	lsrs	r6, r5, #6
 800058e:	0030      	movs	r0, r6
 8000590:	f000 fe94 	bl	80012bc <__clzsi2>
 8000594:	3805      	subs	r0, #5
 8000596:	4086      	lsls	r6, r0
 8000598:	4284      	cmp	r4, r0
 800059a:	dc65      	bgt.n	8000668 <__aeabi_fadd+0x1d0>
 800059c:	1b04      	subs	r4, r0, r4
 800059e:	0033      	movs	r3, r6
 80005a0:	2020      	movs	r0, #32
 80005a2:	3401      	adds	r4, #1
 80005a4:	40e3      	lsrs	r3, r4
 80005a6:	1b04      	subs	r4, r0, r4
 80005a8:	40a6      	lsls	r6, r4
 80005aa:	1e75      	subs	r5, r6, #1
 80005ac:	41ae      	sbcs	r6, r5
 80005ae:	4333      	orrs	r3, r6
 80005b0:	2607      	movs	r6, #7
 80005b2:	001d      	movs	r5, r3
 80005b4:	2400      	movs	r4, #0
 80005b6:	401e      	ands	r6, r3
 80005b8:	2201      	movs	r2, #1
 80005ba:	464b      	mov	r3, r9
 80005bc:	401a      	ands	r2, r3
 80005be:	2e00      	cmp	r6, #0
 80005c0:	d004      	beq.n	80005cc <__aeabi_fadd+0x134>
 80005c2:	230f      	movs	r3, #15
 80005c4:	402b      	ands	r3, r5
 80005c6:	2b04      	cmp	r3, #4
 80005c8:	d000      	beq.n	80005cc <__aeabi_fadd+0x134>
 80005ca:	3504      	adds	r5, #4
 80005cc:	016b      	lsls	r3, r5, #5
 80005ce:	d400      	bmi.n	80005d2 <__aeabi_fadd+0x13a>
 80005d0:	e780      	b.n	80004d4 <__aeabi_fadd+0x3c>
 80005d2:	3401      	adds	r4, #1
 80005d4:	b2e6      	uxtb	r6, r4
 80005d6:	2cff      	cmp	r4, #255	; 0xff
 80005d8:	d12f      	bne.n	800063a <__aeabi_fadd+0x1a2>
 80005da:	26ff      	movs	r6, #255	; 0xff
 80005dc:	2300      	movs	r3, #0
 80005de:	e780      	b.n	80004e2 <__aeabi_fadd+0x4a>
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d152      	bne.n	800068a <__aeabi_fadd+0x1f2>
 80005e4:	2cff      	cmp	r4, #255	; 0xff
 80005e6:	d000      	beq.n	80005ea <__aeabi_fadd+0x152>
 80005e8:	e774      	b.n	80004d4 <__aeabi_fadd+0x3c>
 80005ea:	000a      	movs	r2, r1
 80005ec:	08ed      	lsrs	r5, r5, #3
 80005ee:	2d00      	cmp	r5, #0
 80005f0:	d0f3      	beq.n	80005da <__aeabi_fadd+0x142>
 80005f2:	2380      	movs	r3, #128	; 0x80
 80005f4:	03db      	lsls	r3, r3, #15
 80005f6:	432b      	orrs	r3, r5
 80005f8:	025b      	lsls	r3, r3, #9
 80005fa:	0a5b      	lsrs	r3, r3, #9
 80005fc:	26ff      	movs	r6, #255	; 0xff
 80005fe:	e770      	b.n	80004e2 <__aeabi_fadd+0x4a>
 8000600:	3f01      	subs	r7, #1
 8000602:	2f00      	cmp	r7, #0
 8000604:	d0be      	beq.n	8000584 <__aeabi_fadd+0xec>
 8000606:	2cff      	cmp	r4, #255	; 0xff
 8000608:	d1b1      	bne.n	800056e <__aeabi_fadd+0xd6>
 800060a:	e763      	b.n	80004d4 <__aeabi_fadd+0x3c>
 800060c:	2c00      	cmp	r4, #0
 800060e:	d047      	beq.n	80006a0 <__aeabi_fadd+0x208>
 8000610:	28ff      	cmp	r0, #255	; 0xff
 8000612:	d069      	beq.n	80006e8 <__aeabi_fadd+0x250>
 8000614:	2480      	movs	r4, #128	; 0x80
 8000616:	04e4      	lsls	r4, r4, #19
 8000618:	427a      	negs	r2, r7
 800061a:	4325      	orrs	r5, r4
 800061c:	2a1b      	cmp	r2, #27
 800061e:	dd00      	ble.n	8000622 <__aeabi_fadd+0x18a>
 8000620:	e0c5      	b.n	80007ae <__aeabi_fadd+0x316>
 8000622:	002c      	movs	r4, r5
 8000624:	2620      	movs	r6, #32
 8000626:	40d4      	lsrs	r4, r2
 8000628:	1ab2      	subs	r2, r6, r2
 800062a:	4095      	lsls	r5, r2
 800062c:	1e6a      	subs	r2, r5, #1
 800062e:	4195      	sbcs	r5, r2
 8000630:	4325      	orrs	r5, r4
 8000632:	1b5d      	subs	r5, r3, r5
 8000634:	0004      	movs	r4, r0
 8000636:	4689      	mov	r9, r1
 8000638:	e7a5      	b.n	8000586 <__aeabi_fadd+0xee>
 800063a:	01ab      	lsls	r3, r5, #6
 800063c:	0a5b      	lsrs	r3, r3, #9
 800063e:	e750      	b.n	80004e2 <__aeabi_fadd+0x4a>
 8000640:	2400      	movs	r4, #0
 8000642:	2201      	movs	r2, #1
 8000644:	464b      	mov	r3, r9
 8000646:	401a      	ands	r2, r3
 8000648:	076b      	lsls	r3, r5, #29
 800064a:	d1ba      	bne.n	80005c2 <__aeabi_fadd+0x12a>
 800064c:	e742      	b.n	80004d4 <__aeabi_fadd+0x3c>
 800064e:	2f00      	cmp	r7, #0
 8000650:	d13b      	bne.n	80006ca <__aeabi_fadd+0x232>
 8000652:	3401      	adds	r4, #1
 8000654:	b2e0      	uxtb	r0, r4
 8000656:	2801      	cmp	r0, #1
 8000658:	dd4a      	ble.n	80006f0 <__aeabi_fadd+0x258>
 800065a:	2cff      	cmp	r4, #255	; 0xff
 800065c:	d0bd      	beq.n	80005da <__aeabi_fadd+0x142>
 800065e:	2607      	movs	r6, #7
 8000660:	18ed      	adds	r5, r5, r3
 8000662:	086d      	lsrs	r5, r5, #1
 8000664:	402e      	ands	r6, r5
 8000666:	e7a7      	b.n	80005b8 <__aeabi_fadd+0x120>
 8000668:	2307      	movs	r3, #7
 800066a:	4d57      	ldr	r5, [pc, #348]	; (80007c8 <__aeabi_fadd+0x330>)
 800066c:	1a24      	subs	r4, r4, r0
 800066e:	4035      	ands	r5, r6
 8000670:	401e      	ands	r6, r3
 8000672:	e7a1      	b.n	80005b8 <__aeabi_fadd+0x120>
 8000674:	2c00      	cmp	r4, #0
 8000676:	d11b      	bne.n	80006b0 <__aeabi_fadd+0x218>
 8000678:	2d00      	cmp	r5, #0
 800067a:	d16e      	bne.n	800075a <__aeabi_fadd+0x2c2>
 800067c:	2b00      	cmp	r3, #0
 800067e:	d100      	bne.n	8000682 <__aeabi_fadd+0x1ea>
 8000680:	e09a      	b.n	80007b8 <__aeabi_fadd+0x320>
 8000682:	000a      	movs	r2, r1
 8000684:	001d      	movs	r5, r3
 8000686:	003c      	movs	r4, r7
 8000688:	e724      	b.n	80004d4 <__aeabi_fadd+0x3c>
 800068a:	3f01      	subs	r7, #1
 800068c:	2f00      	cmp	r7, #0
 800068e:	d100      	bne.n	8000692 <__aeabi_fadd+0x1fa>
 8000690:	e758      	b.n	8000544 <__aeabi_fadd+0xac>
 8000692:	2cff      	cmp	r4, #255	; 0xff
 8000694:	d000      	beq.n	8000698 <__aeabi_fadd+0x200>
 8000696:	e74a      	b.n	800052e <__aeabi_fadd+0x96>
 8000698:	e7a7      	b.n	80005ea <__aeabi_fadd+0x152>
 800069a:	1b5e      	subs	r6, r3, r5
 800069c:	4689      	mov	r9, r1
 800069e:	e776      	b.n	800058e <__aeabi_fadd+0xf6>
 80006a0:	2d00      	cmp	r5, #0
 80006a2:	d11c      	bne.n	80006de <__aeabi_fadd+0x246>
 80006a4:	000a      	movs	r2, r1
 80006a6:	28ff      	cmp	r0, #255	; 0xff
 80006a8:	d01f      	beq.n	80006ea <__aeabi_fadd+0x252>
 80006aa:	0004      	movs	r4, r0
 80006ac:	001d      	movs	r5, r3
 80006ae:	e711      	b.n	80004d4 <__aeabi_fadd+0x3c>
 80006b0:	2d00      	cmp	r5, #0
 80006b2:	d15d      	bne.n	8000770 <__aeabi_fadd+0x2d8>
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d117      	bne.n	80006e8 <__aeabi_fadd+0x250>
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	2200      	movs	r2, #0
 80006bc:	03db      	lsls	r3, r3, #15
 80006be:	26ff      	movs	r6, #255	; 0xff
 80006c0:	e70f      	b.n	80004e2 <__aeabi_fadd+0x4a>
 80006c2:	000a      	movs	r2, r1
 80006c4:	26ff      	movs	r6, #255	; 0xff
 80006c6:	2300      	movs	r3, #0
 80006c8:	e70b      	b.n	80004e2 <__aeabi_fadd+0x4a>
 80006ca:	2c00      	cmp	r4, #0
 80006cc:	d121      	bne.n	8000712 <__aeabi_fadd+0x27a>
 80006ce:	2d00      	cmp	r5, #0
 80006d0:	d166      	bne.n	80007a0 <__aeabi_fadd+0x308>
 80006d2:	28ff      	cmp	r0, #255	; 0xff
 80006d4:	d1e9      	bne.n	80006aa <__aeabi_fadd+0x212>
 80006d6:	001d      	movs	r5, r3
 80006d8:	e787      	b.n	80005ea <__aeabi_fadd+0x152>
 80006da:	2301      	movs	r3, #1
 80006dc:	e752      	b.n	8000584 <__aeabi_fadd+0xec>
 80006de:	1c7a      	adds	r2, r7, #1
 80006e0:	d0a7      	beq.n	8000632 <__aeabi_fadd+0x19a>
 80006e2:	43fa      	mvns	r2, r7
 80006e4:	28ff      	cmp	r0, #255	; 0xff
 80006e6:	d199      	bne.n	800061c <__aeabi_fadd+0x184>
 80006e8:	000a      	movs	r2, r1
 80006ea:	001d      	movs	r5, r3
 80006ec:	24ff      	movs	r4, #255	; 0xff
 80006ee:	e6f1      	b.n	80004d4 <__aeabi_fadd+0x3c>
 80006f0:	2e00      	cmp	r6, #0
 80006f2:	d121      	bne.n	8000738 <__aeabi_fadd+0x2a0>
 80006f4:	2d00      	cmp	r5, #0
 80006f6:	d04f      	beq.n	8000798 <__aeabi_fadd+0x300>
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d04c      	beq.n	8000796 <__aeabi_fadd+0x2fe>
 80006fc:	18ed      	adds	r5, r5, r3
 80006fe:	016b      	lsls	r3, r5, #5
 8000700:	d59e      	bpl.n	8000640 <__aeabi_fadd+0x1a8>
 8000702:	4b31      	ldr	r3, [pc, #196]	; (80007c8 <__aeabi_fadd+0x330>)
 8000704:	3607      	adds	r6, #7
 8000706:	402e      	ands	r6, r5
 8000708:	2401      	movs	r4, #1
 800070a:	401d      	ands	r5, r3
 800070c:	e754      	b.n	80005b8 <__aeabi_fadd+0x120>
 800070e:	2301      	movs	r3, #1
 8000710:	e718      	b.n	8000544 <__aeabi_fadd+0xac>
 8000712:	28ff      	cmp	r0, #255	; 0xff
 8000714:	d0df      	beq.n	80006d6 <__aeabi_fadd+0x23e>
 8000716:	2480      	movs	r4, #128	; 0x80
 8000718:	04e4      	lsls	r4, r4, #19
 800071a:	427f      	negs	r7, r7
 800071c:	4325      	orrs	r5, r4
 800071e:	2f1b      	cmp	r7, #27
 8000720:	dc4d      	bgt.n	80007be <__aeabi_fadd+0x326>
 8000722:	2620      	movs	r6, #32
 8000724:	1bf6      	subs	r6, r6, r7
 8000726:	002c      	movs	r4, r5
 8000728:	40b5      	lsls	r5, r6
 800072a:	40fc      	lsrs	r4, r7
 800072c:	1e6a      	subs	r2, r5, #1
 800072e:	4195      	sbcs	r5, r2
 8000730:	4325      	orrs	r5, r4
 8000732:	18ed      	adds	r5, r5, r3
 8000734:	0004      	movs	r4, r0
 8000736:	e706      	b.n	8000546 <__aeabi_fadd+0xae>
 8000738:	2d00      	cmp	r5, #0
 800073a:	d0cc      	beq.n	80006d6 <__aeabi_fadd+0x23e>
 800073c:	2b00      	cmp	r3, #0
 800073e:	d100      	bne.n	8000742 <__aeabi_fadd+0x2aa>
 8000740:	e753      	b.n	80005ea <__aeabi_fadd+0x152>
 8000742:	2180      	movs	r1, #128	; 0x80
 8000744:	4660      	mov	r0, ip
 8000746:	03c9      	lsls	r1, r1, #15
 8000748:	4208      	tst	r0, r1
 800074a:	d003      	beq.n	8000754 <__aeabi_fadd+0x2bc>
 800074c:	4640      	mov	r0, r8
 800074e:	4208      	tst	r0, r1
 8000750:	d100      	bne.n	8000754 <__aeabi_fadd+0x2bc>
 8000752:	001d      	movs	r5, r3
 8000754:	2101      	movs	r1, #1
 8000756:	4011      	ands	r1, r2
 8000758:	e747      	b.n	80005ea <__aeabi_fadd+0x152>
 800075a:	2b00      	cmp	r3, #0
 800075c:	d100      	bne.n	8000760 <__aeabi_fadd+0x2c8>
 800075e:	e6b9      	b.n	80004d4 <__aeabi_fadd+0x3c>
 8000760:	1aea      	subs	r2, r5, r3
 8000762:	0150      	lsls	r0, r2, #5
 8000764:	d525      	bpl.n	80007b2 <__aeabi_fadd+0x31a>
 8000766:	2607      	movs	r6, #7
 8000768:	1b5d      	subs	r5, r3, r5
 800076a:	402e      	ands	r6, r5
 800076c:	4689      	mov	r9, r1
 800076e:	e723      	b.n	80005b8 <__aeabi_fadd+0x120>
 8000770:	24ff      	movs	r4, #255	; 0xff
 8000772:	2b00      	cmp	r3, #0
 8000774:	d100      	bne.n	8000778 <__aeabi_fadd+0x2e0>
 8000776:	e6ad      	b.n	80004d4 <__aeabi_fadd+0x3c>
 8000778:	2280      	movs	r2, #128	; 0x80
 800077a:	4660      	mov	r0, ip
 800077c:	03d2      	lsls	r2, r2, #15
 800077e:	4210      	tst	r0, r2
 8000780:	d004      	beq.n	800078c <__aeabi_fadd+0x2f4>
 8000782:	4640      	mov	r0, r8
 8000784:	4210      	tst	r0, r2
 8000786:	d101      	bne.n	800078c <__aeabi_fadd+0x2f4>
 8000788:	001d      	movs	r5, r3
 800078a:	4689      	mov	r9, r1
 800078c:	2201      	movs	r2, #1
 800078e:	464b      	mov	r3, r9
 8000790:	24ff      	movs	r4, #255	; 0xff
 8000792:	401a      	ands	r2, r3
 8000794:	e69e      	b.n	80004d4 <__aeabi_fadd+0x3c>
 8000796:	002b      	movs	r3, r5
 8000798:	08dd      	lsrs	r5, r3, #3
 800079a:	000a      	movs	r2, r1
 800079c:	2400      	movs	r4, #0
 800079e:	e69d      	b.n	80004dc <__aeabi_fadd+0x44>
 80007a0:	1c7a      	adds	r2, r7, #1
 80007a2:	d0c6      	beq.n	8000732 <__aeabi_fadd+0x29a>
 80007a4:	43ff      	mvns	r7, r7
 80007a6:	28ff      	cmp	r0, #255	; 0xff
 80007a8:	d1b9      	bne.n	800071e <__aeabi_fadd+0x286>
 80007aa:	001d      	movs	r5, r3
 80007ac:	e71d      	b.n	80005ea <__aeabi_fadd+0x152>
 80007ae:	2501      	movs	r5, #1
 80007b0:	e73f      	b.n	8000632 <__aeabi_fadd+0x19a>
 80007b2:	1e15      	subs	r5, r2, #0
 80007b4:	d000      	beq.n	80007b8 <__aeabi_fadd+0x320>
 80007b6:	e744      	b.n	8000642 <__aeabi_fadd+0x1aa>
 80007b8:	2200      	movs	r2, #0
 80007ba:	2300      	movs	r3, #0
 80007bc:	e691      	b.n	80004e2 <__aeabi_fadd+0x4a>
 80007be:	2501      	movs	r5, #1
 80007c0:	e7b7      	b.n	8000732 <__aeabi_fadd+0x29a>
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	7dffffff 	.word	0x7dffffff
 80007c8:	fbffffff 	.word	0xfbffffff

080007cc <__aeabi_fdiv>:
 80007cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ce:	4657      	mov	r7, sl
 80007d0:	464e      	mov	r6, r9
 80007d2:	4645      	mov	r5, r8
 80007d4:	46de      	mov	lr, fp
 80007d6:	0244      	lsls	r4, r0, #9
 80007d8:	b5e0      	push	{r5, r6, r7, lr}
 80007da:	0046      	lsls	r6, r0, #1
 80007dc:	4688      	mov	r8, r1
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0e36      	lsrs	r6, r6, #24
 80007e2:	0fc7      	lsrs	r7, r0, #31
 80007e4:	2e00      	cmp	r6, #0
 80007e6:	d063      	beq.n	80008b0 <__aeabi_fdiv+0xe4>
 80007e8:	2eff      	cmp	r6, #255	; 0xff
 80007ea:	d024      	beq.n	8000836 <__aeabi_fdiv+0x6a>
 80007ec:	2380      	movs	r3, #128	; 0x80
 80007ee:	00e4      	lsls	r4, r4, #3
 80007f0:	04db      	lsls	r3, r3, #19
 80007f2:	431c      	orrs	r4, r3
 80007f4:	2300      	movs	r3, #0
 80007f6:	4699      	mov	r9, r3
 80007f8:	469b      	mov	fp, r3
 80007fa:	3e7f      	subs	r6, #127	; 0x7f
 80007fc:	4643      	mov	r3, r8
 80007fe:	4642      	mov	r2, r8
 8000800:	025d      	lsls	r5, r3, #9
 8000802:	0fd2      	lsrs	r2, r2, #31
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	0a6d      	lsrs	r5, r5, #9
 8000808:	0e1b      	lsrs	r3, r3, #24
 800080a:	4690      	mov	r8, r2
 800080c:	4692      	mov	sl, r2
 800080e:	d065      	beq.n	80008dc <__aeabi_fdiv+0x110>
 8000810:	2bff      	cmp	r3, #255	; 0xff
 8000812:	d055      	beq.n	80008c0 <__aeabi_fdiv+0xf4>
 8000814:	2280      	movs	r2, #128	; 0x80
 8000816:	2100      	movs	r1, #0
 8000818:	00ed      	lsls	r5, r5, #3
 800081a:	04d2      	lsls	r2, r2, #19
 800081c:	3b7f      	subs	r3, #127	; 0x7f
 800081e:	4315      	orrs	r5, r2
 8000820:	1af6      	subs	r6, r6, r3
 8000822:	4643      	mov	r3, r8
 8000824:	464a      	mov	r2, r9
 8000826:	407b      	eors	r3, r7
 8000828:	2a0f      	cmp	r2, #15
 800082a:	d900      	bls.n	800082e <__aeabi_fdiv+0x62>
 800082c:	e08d      	b.n	800094a <__aeabi_fdiv+0x17e>
 800082e:	486d      	ldr	r0, [pc, #436]	; (80009e4 <__aeabi_fdiv+0x218>)
 8000830:	0092      	lsls	r2, r2, #2
 8000832:	5882      	ldr	r2, [r0, r2]
 8000834:	4697      	mov	pc, r2
 8000836:	2c00      	cmp	r4, #0
 8000838:	d154      	bne.n	80008e4 <__aeabi_fdiv+0x118>
 800083a:	2308      	movs	r3, #8
 800083c:	4699      	mov	r9, r3
 800083e:	3b06      	subs	r3, #6
 8000840:	26ff      	movs	r6, #255	; 0xff
 8000842:	469b      	mov	fp, r3
 8000844:	e7da      	b.n	80007fc <__aeabi_fdiv+0x30>
 8000846:	2500      	movs	r5, #0
 8000848:	4653      	mov	r3, sl
 800084a:	2902      	cmp	r1, #2
 800084c:	d01b      	beq.n	8000886 <__aeabi_fdiv+0xba>
 800084e:	2903      	cmp	r1, #3
 8000850:	d100      	bne.n	8000854 <__aeabi_fdiv+0x88>
 8000852:	e0bf      	b.n	80009d4 <__aeabi_fdiv+0x208>
 8000854:	2901      	cmp	r1, #1
 8000856:	d028      	beq.n	80008aa <__aeabi_fdiv+0xde>
 8000858:	0030      	movs	r0, r6
 800085a:	307f      	adds	r0, #127	; 0x7f
 800085c:	2800      	cmp	r0, #0
 800085e:	dd20      	ble.n	80008a2 <__aeabi_fdiv+0xd6>
 8000860:	076a      	lsls	r2, r5, #29
 8000862:	d004      	beq.n	800086e <__aeabi_fdiv+0xa2>
 8000864:	220f      	movs	r2, #15
 8000866:	402a      	ands	r2, r5
 8000868:	2a04      	cmp	r2, #4
 800086a:	d000      	beq.n	800086e <__aeabi_fdiv+0xa2>
 800086c:	3504      	adds	r5, #4
 800086e:	012a      	lsls	r2, r5, #4
 8000870:	d503      	bpl.n	800087a <__aeabi_fdiv+0xae>
 8000872:	0030      	movs	r0, r6
 8000874:	4a5c      	ldr	r2, [pc, #368]	; (80009e8 <__aeabi_fdiv+0x21c>)
 8000876:	3080      	adds	r0, #128	; 0x80
 8000878:	4015      	ands	r5, r2
 800087a:	28fe      	cmp	r0, #254	; 0xfe
 800087c:	dc03      	bgt.n	8000886 <__aeabi_fdiv+0xba>
 800087e:	01ac      	lsls	r4, r5, #6
 8000880:	0a64      	lsrs	r4, r4, #9
 8000882:	b2c2      	uxtb	r2, r0
 8000884:	e001      	b.n	800088a <__aeabi_fdiv+0xbe>
 8000886:	22ff      	movs	r2, #255	; 0xff
 8000888:	2400      	movs	r4, #0
 800088a:	0264      	lsls	r4, r4, #9
 800088c:	05d2      	lsls	r2, r2, #23
 800088e:	0a60      	lsrs	r0, r4, #9
 8000890:	07db      	lsls	r3, r3, #31
 8000892:	4310      	orrs	r0, r2
 8000894:	4318      	orrs	r0, r3
 8000896:	bc3c      	pop	{r2, r3, r4, r5}
 8000898:	4690      	mov	r8, r2
 800089a:	4699      	mov	r9, r3
 800089c:	46a2      	mov	sl, r4
 800089e:	46ab      	mov	fp, r5
 80008a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008a2:	2201      	movs	r2, #1
 80008a4:	1a10      	subs	r0, r2, r0
 80008a6:	281b      	cmp	r0, #27
 80008a8:	dd7c      	ble.n	80009a4 <__aeabi_fdiv+0x1d8>
 80008aa:	2200      	movs	r2, #0
 80008ac:	2400      	movs	r4, #0
 80008ae:	e7ec      	b.n	800088a <__aeabi_fdiv+0xbe>
 80008b0:	2c00      	cmp	r4, #0
 80008b2:	d11d      	bne.n	80008f0 <__aeabi_fdiv+0x124>
 80008b4:	2304      	movs	r3, #4
 80008b6:	4699      	mov	r9, r3
 80008b8:	3b03      	subs	r3, #3
 80008ba:	2600      	movs	r6, #0
 80008bc:	469b      	mov	fp, r3
 80008be:	e79d      	b.n	80007fc <__aeabi_fdiv+0x30>
 80008c0:	3eff      	subs	r6, #255	; 0xff
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	d120      	bne.n	8000908 <__aeabi_fdiv+0x13c>
 80008c6:	2102      	movs	r1, #2
 80008c8:	4643      	mov	r3, r8
 80008ca:	464a      	mov	r2, r9
 80008cc:	407b      	eors	r3, r7
 80008ce:	430a      	orrs	r2, r1
 80008d0:	2a0f      	cmp	r2, #15
 80008d2:	d8d8      	bhi.n	8000886 <__aeabi_fdiv+0xba>
 80008d4:	4845      	ldr	r0, [pc, #276]	; (80009ec <__aeabi_fdiv+0x220>)
 80008d6:	0092      	lsls	r2, r2, #2
 80008d8:	5882      	ldr	r2, [r0, r2]
 80008da:	4697      	mov	pc, r2
 80008dc:	2d00      	cmp	r5, #0
 80008de:	d119      	bne.n	8000914 <__aeabi_fdiv+0x148>
 80008e0:	2101      	movs	r1, #1
 80008e2:	e7f1      	b.n	80008c8 <__aeabi_fdiv+0xfc>
 80008e4:	230c      	movs	r3, #12
 80008e6:	4699      	mov	r9, r3
 80008e8:	3b09      	subs	r3, #9
 80008ea:	26ff      	movs	r6, #255	; 0xff
 80008ec:	469b      	mov	fp, r3
 80008ee:	e785      	b.n	80007fc <__aeabi_fdiv+0x30>
 80008f0:	0020      	movs	r0, r4
 80008f2:	f000 fce3 	bl	80012bc <__clzsi2>
 80008f6:	2676      	movs	r6, #118	; 0x76
 80008f8:	1f43      	subs	r3, r0, #5
 80008fa:	409c      	lsls	r4, r3
 80008fc:	2300      	movs	r3, #0
 80008fe:	4276      	negs	r6, r6
 8000900:	1a36      	subs	r6, r6, r0
 8000902:	4699      	mov	r9, r3
 8000904:	469b      	mov	fp, r3
 8000906:	e779      	b.n	80007fc <__aeabi_fdiv+0x30>
 8000908:	464a      	mov	r2, r9
 800090a:	2303      	movs	r3, #3
 800090c:	431a      	orrs	r2, r3
 800090e:	4691      	mov	r9, r2
 8000910:	2103      	movs	r1, #3
 8000912:	e786      	b.n	8000822 <__aeabi_fdiv+0x56>
 8000914:	0028      	movs	r0, r5
 8000916:	f000 fcd1 	bl	80012bc <__clzsi2>
 800091a:	1f43      	subs	r3, r0, #5
 800091c:	1836      	adds	r6, r6, r0
 800091e:	409d      	lsls	r5, r3
 8000920:	3676      	adds	r6, #118	; 0x76
 8000922:	2100      	movs	r1, #0
 8000924:	e77d      	b.n	8000822 <__aeabi_fdiv+0x56>
 8000926:	2480      	movs	r4, #128	; 0x80
 8000928:	2300      	movs	r3, #0
 800092a:	03e4      	lsls	r4, r4, #15
 800092c:	22ff      	movs	r2, #255	; 0xff
 800092e:	e7ac      	b.n	800088a <__aeabi_fdiv+0xbe>
 8000930:	2500      	movs	r5, #0
 8000932:	2380      	movs	r3, #128	; 0x80
 8000934:	03db      	lsls	r3, r3, #15
 8000936:	421c      	tst	r4, r3
 8000938:	d028      	beq.n	800098c <__aeabi_fdiv+0x1c0>
 800093a:	421d      	tst	r5, r3
 800093c:	d126      	bne.n	800098c <__aeabi_fdiv+0x1c0>
 800093e:	432b      	orrs	r3, r5
 8000940:	025c      	lsls	r4, r3, #9
 8000942:	0a64      	lsrs	r4, r4, #9
 8000944:	4643      	mov	r3, r8
 8000946:	22ff      	movs	r2, #255	; 0xff
 8000948:	e79f      	b.n	800088a <__aeabi_fdiv+0xbe>
 800094a:	0162      	lsls	r2, r4, #5
 800094c:	016c      	lsls	r4, r5, #5
 800094e:	42a2      	cmp	r2, r4
 8000950:	d224      	bcs.n	800099c <__aeabi_fdiv+0x1d0>
 8000952:	211b      	movs	r1, #27
 8000954:	2500      	movs	r5, #0
 8000956:	3e01      	subs	r6, #1
 8000958:	2701      	movs	r7, #1
 800095a:	0010      	movs	r0, r2
 800095c:	006d      	lsls	r5, r5, #1
 800095e:	0052      	lsls	r2, r2, #1
 8000960:	2800      	cmp	r0, #0
 8000962:	db01      	blt.n	8000968 <__aeabi_fdiv+0x19c>
 8000964:	4294      	cmp	r4, r2
 8000966:	d801      	bhi.n	800096c <__aeabi_fdiv+0x1a0>
 8000968:	1b12      	subs	r2, r2, r4
 800096a:	433d      	orrs	r5, r7
 800096c:	3901      	subs	r1, #1
 800096e:	2900      	cmp	r1, #0
 8000970:	d1f3      	bne.n	800095a <__aeabi_fdiv+0x18e>
 8000972:	0014      	movs	r4, r2
 8000974:	1e62      	subs	r2, r4, #1
 8000976:	4194      	sbcs	r4, r2
 8000978:	4325      	orrs	r5, r4
 800097a:	e76d      	b.n	8000858 <__aeabi_fdiv+0x8c>
 800097c:	46ba      	mov	sl, r7
 800097e:	4659      	mov	r1, fp
 8000980:	0025      	movs	r5, r4
 8000982:	4653      	mov	r3, sl
 8000984:	2902      	cmp	r1, #2
 8000986:	d000      	beq.n	800098a <__aeabi_fdiv+0x1be>
 8000988:	e761      	b.n	800084e <__aeabi_fdiv+0x82>
 800098a:	e77c      	b.n	8000886 <__aeabi_fdiv+0xba>
 800098c:	2380      	movs	r3, #128	; 0x80
 800098e:	03db      	lsls	r3, r3, #15
 8000990:	431c      	orrs	r4, r3
 8000992:	0264      	lsls	r4, r4, #9
 8000994:	0a64      	lsrs	r4, r4, #9
 8000996:	003b      	movs	r3, r7
 8000998:	22ff      	movs	r2, #255	; 0xff
 800099a:	e776      	b.n	800088a <__aeabi_fdiv+0xbe>
 800099c:	1b12      	subs	r2, r2, r4
 800099e:	211a      	movs	r1, #26
 80009a0:	2501      	movs	r5, #1
 80009a2:	e7d9      	b.n	8000958 <__aeabi_fdiv+0x18c>
 80009a4:	369e      	adds	r6, #158	; 0x9e
 80009a6:	002a      	movs	r2, r5
 80009a8:	40b5      	lsls	r5, r6
 80009aa:	002c      	movs	r4, r5
 80009ac:	40c2      	lsrs	r2, r0
 80009ae:	1e65      	subs	r5, r4, #1
 80009b0:	41ac      	sbcs	r4, r5
 80009b2:	4314      	orrs	r4, r2
 80009b4:	0762      	lsls	r2, r4, #29
 80009b6:	d004      	beq.n	80009c2 <__aeabi_fdiv+0x1f6>
 80009b8:	220f      	movs	r2, #15
 80009ba:	4022      	ands	r2, r4
 80009bc:	2a04      	cmp	r2, #4
 80009be:	d000      	beq.n	80009c2 <__aeabi_fdiv+0x1f6>
 80009c0:	3404      	adds	r4, #4
 80009c2:	0162      	lsls	r2, r4, #5
 80009c4:	d403      	bmi.n	80009ce <__aeabi_fdiv+0x202>
 80009c6:	01a4      	lsls	r4, r4, #6
 80009c8:	0a64      	lsrs	r4, r4, #9
 80009ca:	2200      	movs	r2, #0
 80009cc:	e75d      	b.n	800088a <__aeabi_fdiv+0xbe>
 80009ce:	2201      	movs	r2, #1
 80009d0:	2400      	movs	r4, #0
 80009d2:	e75a      	b.n	800088a <__aeabi_fdiv+0xbe>
 80009d4:	2480      	movs	r4, #128	; 0x80
 80009d6:	03e4      	lsls	r4, r4, #15
 80009d8:	432c      	orrs	r4, r5
 80009da:	0264      	lsls	r4, r4, #9
 80009dc:	0a64      	lsrs	r4, r4, #9
 80009de:	22ff      	movs	r2, #255	; 0xff
 80009e0:	e753      	b.n	800088a <__aeabi_fdiv+0xbe>
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	080084c4 	.word	0x080084c4
 80009e8:	f7ffffff 	.word	0xf7ffffff
 80009ec:	08008504 	.word	0x08008504

080009f0 <__eqsf2>:
 80009f0:	b570      	push	{r4, r5, r6, lr}
 80009f2:	0042      	lsls	r2, r0, #1
 80009f4:	024e      	lsls	r6, r1, #9
 80009f6:	004c      	lsls	r4, r1, #1
 80009f8:	0245      	lsls	r5, r0, #9
 80009fa:	0a6d      	lsrs	r5, r5, #9
 80009fc:	0e12      	lsrs	r2, r2, #24
 80009fe:	0fc3      	lsrs	r3, r0, #31
 8000a00:	0a76      	lsrs	r6, r6, #9
 8000a02:	0e24      	lsrs	r4, r4, #24
 8000a04:	0fc9      	lsrs	r1, r1, #31
 8000a06:	2aff      	cmp	r2, #255	; 0xff
 8000a08:	d00f      	beq.n	8000a2a <__eqsf2+0x3a>
 8000a0a:	2cff      	cmp	r4, #255	; 0xff
 8000a0c:	d011      	beq.n	8000a32 <__eqsf2+0x42>
 8000a0e:	2001      	movs	r0, #1
 8000a10:	42a2      	cmp	r2, r4
 8000a12:	d000      	beq.n	8000a16 <__eqsf2+0x26>
 8000a14:	bd70      	pop	{r4, r5, r6, pc}
 8000a16:	42b5      	cmp	r5, r6
 8000a18:	d1fc      	bne.n	8000a14 <__eqsf2+0x24>
 8000a1a:	428b      	cmp	r3, r1
 8000a1c:	d00d      	beq.n	8000a3a <__eqsf2+0x4a>
 8000a1e:	2a00      	cmp	r2, #0
 8000a20:	d1f8      	bne.n	8000a14 <__eqsf2+0x24>
 8000a22:	0028      	movs	r0, r5
 8000a24:	1e45      	subs	r5, r0, #1
 8000a26:	41a8      	sbcs	r0, r5
 8000a28:	e7f4      	b.n	8000a14 <__eqsf2+0x24>
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	2d00      	cmp	r5, #0
 8000a2e:	d1f1      	bne.n	8000a14 <__eqsf2+0x24>
 8000a30:	e7eb      	b.n	8000a0a <__eqsf2+0x1a>
 8000a32:	2001      	movs	r0, #1
 8000a34:	2e00      	cmp	r6, #0
 8000a36:	d1ed      	bne.n	8000a14 <__eqsf2+0x24>
 8000a38:	e7e9      	b.n	8000a0e <__eqsf2+0x1e>
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	e7ea      	b.n	8000a14 <__eqsf2+0x24>
 8000a3e:	46c0      	nop			; (mov r8, r8)

08000a40 <__gesf2>:
 8000a40:	b570      	push	{r4, r5, r6, lr}
 8000a42:	004a      	lsls	r2, r1, #1
 8000a44:	024e      	lsls	r6, r1, #9
 8000a46:	0245      	lsls	r5, r0, #9
 8000a48:	0044      	lsls	r4, r0, #1
 8000a4a:	0a6d      	lsrs	r5, r5, #9
 8000a4c:	0e24      	lsrs	r4, r4, #24
 8000a4e:	0fc3      	lsrs	r3, r0, #31
 8000a50:	0a76      	lsrs	r6, r6, #9
 8000a52:	0e12      	lsrs	r2, r2, #24
 8000a54:	0fc9      	lsrs	r1, r1, #31
 8000a56:	2cff      	cmp	r4, #255	; 0xff
 8000a58:	d015      	beq.n	8000a86 <__gesf2+0x46>
 8000a5a:	2aff      	cmp	r2, #255	; 0xff
 8000a5c:	d00e      	beq.n	8000a7c <__gesf2+0x3c>
 8000a5e:	2c00      	cmp	r4, #0
 8000a60:	d115      	bne.n	8000a8e <__gesf2+0x4e>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d101      	bne.n	8000a6a <__gesf2+0x2a>
 8000a66:	2e00      	cmp	r6, #0
 8000a68:	d01c      	beq.n	8000aa4 <__gesf2+0x64>
 8000a6a:	2d00      	cmp	r5, #0
 8000a6c:	d014      	beq.n	8000a98 <__gesf2+0x58>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	d027      	beq.n	8000ac2 <__gesf2+0x82>
 8000a72:	2002      	movs	r0, #2
 8000a74:	3b01      	subs	r3, #1
 8000a76:	4018      	ands	r0, r3
 8000a78:	3801      	subs	r0, #1
 8000a7a:	bd70      	pop	{r4, r5, r6, pc}
 8000a7c:	2e00      	cmp	r6, #0
 8000a7e:	d0ee      	beq.n	8000a5e <__gesf2+0x1e>
 8000a80:	2002      	movs	r0, #2
 8000a82:	4240      	negs	r0, r0
 8000a84:	e7f9      	b.n	8000a7a <__gesf2+0x3a>
 8000a86:	2d00      	cmp	r5, #0
 8000a88:	d1fa      	bne.n	8000a80 <__gesf2+0x40>
 8000a8a:	2aff      	cmp	r2, #255	; 0xff
 8000a8c:	d00e      	beq.n	8000aac <__gesf2+0x6c>
 8000a8e:	2a00      	cmp	r2, #0
 8000a90:	d10e      	bne.n	8000ab0 <__gesf2+0x70>
 8000a92:	2e00      	cmp	r6, #0
 8000a94:	d0ed      	beq.n	8000a72 <__gesf2+0x32>
 8000a96:	e00b      	b.n	8000ab0 <__gesf2+0x70>
 8000a98:	2301      	movs	r3, #1
 8000a9a:	3901      	subs	r1, #1
 8000a9c:	4399      	bics	r1, r3
 8000a9e:	0008      	movs	r0, r1
 8000aa0:	3001      	adds	r0, #1
 8000aa2:	e7ea      	b.n	8000a7a <__gesf2+0x3a>
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	2d00      	cmp	r5, #0
 8000aa8:	d0e7      	beq.n	8000a7a <__gesf2+0x3a>
 8000aaa:	e7e2      	b.n	8000a72 <__gesf2+0x32>
 8000aac:	2e00      	cmp	r6, #0
 8000aae:	d1e7      	bne.n	8000a80 <__gesf2+0x40>
 8000ab0:	428b      	cmp	r3, r1
 8000ab2:	d1de      	bne.n	8000a72 <__gesf2+0x32>
 8000ab4:	4294      	cmp	r4, r2
 8000ab6:	dd05      	ble.n	8000ac4 <__gesf2+0x84>
 8000ab8:	2102      	movs	r1, #2
 8000aba:	1e58      	subs	r0, r3, #1
 8000abc:	4008      	ands	r0, r1
 8000abe:	3801      	subs	r0, #1
 8000ac0:	e7db      	b.n	8000a7a <__gesf2+0x3a>
 8000ac2:	2400      	movs	r4, #0
 8000ac4:	42a2      	cmp	r2, r4
 8000ac6:	dc04      	bgt.n	8000ad2 <__gesf2+0x92>
 8000ac8:	42b5      	cmp	r5, r6
 8000aca:	d8d2      	bhi.n	8000a72 <__gesf2+0x32>
 8000acc:	2000      	movs	r0, #0
 8000ace:	42b5      	cmp	r5, r6
 8000ad0:	d2d3      	bcs.n	8000a7a <__gesf2+0x3a>
 8000ad2:	1e58      	subs	r0, r3, #1
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	4398      	bics	r0, r3
 8000ad8:	3001      	adds	r0, #1
 8000ada:	e7ce      	b.n	8000a7a <__gesf2+0x3a>

08000adc <__lesf2>:
 8000adc:	b530      	push	{r4, r5, lr}
 8000ade:	0042      	lsls	r2, r0, #1
 8000ae0:	0244      	lsls	r4, r0, #9
 8000ae2:	024d      	lsls	r5, r1, #9
 8000ae4:	0fc3      	lsrs	r3, r0, #31
 8000ae6:	0048      	lsls	r0, r1, #1
 8000ae8:	0a64      	lsrs	r4, r4, #9
 8000aea:	0e12      	lsrs	r2, r2, #24
 8000aec:	0a6d      	lsrs	r5, r5, #9
 8000aee:	0e00      	lsrs	r0, r0, #24
 8000af0:	0fc9      	lsrs	r1, r1, #31
 8000af2:	2aff      	cmp	r2, #255	; 0xff
 8000af4:	d012      	beq.n	8000b1c <__lesf2+0x40>
 8000af6:	28ff      	cmp	r0, #255	; 0xff
 8000af8:	d00c      	beq.n	8000b14 <__lesf2+0x38>
 8000afa:	2a00      	cmp	r2, #0
 8000afc:	d112      	bne.n	8000b24 <__lesf2+0x48>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	d119      	bne.n	8000b36 <__lesf2+0x5a>
 8000b02:	2d00      	cmp	r5, #0
 8000b04:	d117      	bne.n	8000b36 <__lesf2+0x5a>
 8000b06:	2c00      	cmp	r4, #0
 8000b08:	d02b      	beq.n	8000b62 <__lesf2+0x86>
 8000b0a:	2002      	movs	r0, #2
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	4018      	ands	r0, r3
 8000b10:	3801      	subs	r0, #1
 8000b12:	e026      	b.n	8000b62 <__lesf2+0x86>
 8000b14:	2d00      	cmp	r5, #0
 8000b16:	d0f0      	beq.n	8000afa <__lesf2+0x1e>
 8000b18:	2002      	movs	r0, #2
 8000b1a:	e022      	b.n	8000b62 <__lesf2+0x86>
 8000b1c:	2c00      	cmp	r4, #0
 8000b1e:	d1fb      	bne.n	8000b18 <__lesf2+0x3c>
 8000b20:	28ff      	cmp	r0, #255	; 0xff
 8000b22:	d01f      	beq.n	8000b64 <__lesf2+0x88>
 8000b24:	2800      	cmp	r0, #0
 8000b26:	d11f      	bne.n	8000b68 <__lesf2+0x8c>
 8000b28:	2d00      	cmp	r5, #0
 8000b2a:	d11d      	bne.n	8000b68 <__lesf2+0x8c>
 8000b2c:	2002      	movs	r0, #2
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	4018      	ands	r0, r3
 8000b32:	3801      	subs	r0, #1
 8000b34:	e015      	b.n	8000b62 <__lesf2+0x86>
 8000b36:	2c00      	cmp	r4, #0
 8000b38:	d00e      	beq.n	8000b58 <__lesf2+0x7c>
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	d1e5      	bne.n	8000b0a <__lesf2+0x2e>
 8000b3e:	2200      	movs	r2, #0
 8000b40:	4290      	cmp	r0, r2
 8000b42:	dc04      	bgt.n	8000b4e <__lesf2+0x72>
 8000b44:	42ac      	cmp	r4, r5
 8000b46:	d8e0      	bhi.n	8000b0a <__lesf2+0x2e>
 8000b48:	2000      	movs	r0, #0
 8000b4a:	42ac      	cmp	r4, r5
 8000b4c:	d209      	bcs.n	8000b62 <__lesf2+0x86>
 8000b4e:	1e58      	subs	r0, r3, #1
 8000b50:	2301      	movs	r3, #1
 8000b52:	4398      	bics	r0, r3
 8000b54:	3001      	adds	r0, #1
 8000b56:	e004      	b.n	8000b62 <__lesf2+0x86>
 8000b58:	2301      	movs	r3, #1
 8000b5a:	3901      	subs	r1, #1
 8000b5c:	4399      	bics	r1, r3
 8000b5e:	0008      	movs	r0, r1
 8000b60:	3001      	adds	r0, #1
 8000b62:	bd30      	pop	{r4, r5, pc}
 8000b64:	2d00      	cmp	r5, #0
 8000b66:	d1d7      	bne.n	8000b18 <__lesf2+0x3c>
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	d1ce      	bne.n	8000b0a <__lesf2+0x2e>
 8000b6c:	4282      	cmp	r2, r0
 8000b6e:	dde7      	ble.n	8000b40 <__lesf2+0x64>
 8000b70:	2102      	movs	r1, #2
 8000b72:	1e58      	subs	r0, r3, #1
 8000b74:	4008      	ands	r0, r1
 8000b76:	3801      	subs	r0, #1
 8000b78:	e7f3      	b.n	8000b62 <__lesf2+0x86>
 8000b7a:	46c0      	nop			; (mov r8, r8)

08000b7c <__aeabi_fmul>:
 8000b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b7e:	464e      	mov	r6, r9
 8000b80:	4657      	mov	r7, sl
 8000b82:	4645      	mov	r5, r8
 8000b84:	46de      	mov	lr, fp
 8000b86:	b5e0      	push	{r5, r6, r7, lr}
 8000b88:	0243      	lsls	r3, r0, #9
 8000b8a:	0a5b      	lsrs	r3, r3, #9
 8000b8c:	0045      	lsls	r5, r0, #1
 8000b8e:	b083      	sub	sp, #12
 8000b90:	1c0f      	adds	r7, r1, #0
 8000b92:	4699      	mov	r9, r3
 8000b94:	0e2d      	lsrs	r5, r5, #24
 8000b96:	0fc6      	lsrs	r6, r0, #31
 8000b98:	2d00      	cmp	r5, #0
 8000b9a:	d057      	beq.n	8000c4c <__aeabi_fmul+0xd0>
 8000b9c:	2dff      	cmp	r5, #255	; 0xff
 8000b9e:	d024      	beq.n	8000bea <__aeabi_fmul+0x6e>
 8000ba0:	2080      	movs	r0, #128	; 0x80
 8000ba2:	00db      	lsls	r3, r3, #3
 8000ba4:	04c0      	lsls	r0, r0, #19
 8000ba6:	4318      	orrs	r0, r3
 8000ba8:	2300      	movs	r3, #0
 8000baa:	4681      	mov	r9, r0
 8000bac:	469a      	mov	sl, r3
 8000bae:	469b      	mov	fp, r3
 8000bb0:	3d7f      	subs	r5, #127	; 0x7f
 8000bb2:	027c      	lsls	r4, r7, #9
 8000bb4:	007a      	lsls	r2, r7, #1
 8000bb6:	0ffb      	lsrs	r3, r7, #31
 8000bb8:	0a64      	lsrs	r4, r4, #9
 8000bba:	0e12      	lsrs	r2, r2, #24
 8000bbc:	4698      	mov	r8, r3
 8000bbe:	d023      	beq.n	8000c08 <__aeabi_fmul+0x8c>
 8000bc0:	2aff      	cmp	r2, #255	; 0xff
 8000bc2:	d04b      	beq.n	8000c5c <__aeabi_fmul+0xe0>
 8000bc4:	00e3      	lsls	r3, r4, #3
 8000bc6:	2480      	movs	r4, #128	; 0x80
 8000bc8:	2000      	movs	r0, #0
 8000bca:	04e4      	lsls	r4, r4, #19
 8000bcc:	3a7f      	subs	r2, #127	; 0x7f
 8000bce:	431c      	orrs	r4, r3
 8000bd0:	18ad      	adds	r5, r5, r2
 8000bd2:	1c6b      	adds	r3, r5, #1
 8000bd4:	4647      	mov	r7, r8
 8000bd6:	9301      	str	r3, [sp, #4]
 8000bd8:	4653      	mov	r3, sl
 8000bda:	4077      	eors	r7, r6
 8000bdc:	003a      	movs	r2, r7
 8000bde:	2b0f      	cmp	r3, #15
 8000be0:	d848      	bhi.n	8000c74 <__aeabi_fmul+0xf8>
 8000be2:	497d      	ldr	r1, [pc, #500]	; (8000dd8 <__aeabi_fmul+0x25c>)
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	58cb      	ldr	r3, [r1, r3]
 8000be8:	469f      	mov	pc, r3
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d000      	beq.n	8000bf0 <__aeabi_fmul+0x74>
 8000bee:	e085      	b.n	8000cfc <__aeabi_fmul+0x180>
 8000bf0:	3308      	adds	r3, #8
 8000bf2:	469a      	mov	sl, r3
 8000bf4:	3b06      	subs	r3, #6
 8000bf6:	469b      	mov	fp, r3
 8000bf8:	027c      	lsls	r4, r7, #9
 8000bfa:	007a      	lsls	r2, r7, #1
 8000bfc:	0ffb      	lsrs	r3, r7, #31
 8000bfe:	25ff      	movs	r5, #255	; 0xff
 8000c00:	0a64      	lsrs	r4, r4, #9
 8000c02:	0e12      	lsrs	r2, r2, #24
 8000c04:	4698      	mov	r8, r3
 8000c06:	d1db      	bne.n	8000bc0 <__aeabi_fmul+0x44>
 8000c08:	2c00      	cmp	r4, #0
 8000c0a:	d000      	beq.n	8000c0e <__aeabi_fmul+0x92>
 8000c0c:	e090      	b.n	8000d30 <__aeabi_fmul+0x1b4>
 8000c0e:	4652      	mov	r2, sl
 8000c10:	2301      	movs	r3, #1
 8000c12:	431a      	orrs	r2, r3
 8000c14:	4692      	mov	sl, r2
 8000c16:	2001      	movs	r0, #1
 8000c18:	e7db      	b.n	8000bd2 <__aeabi_fmul+0x56>
 8000c1a:	464c      	mov	r4, r9
 8000c1c:	4658      	mov	r0, fp
 8000c1e:	0017      	movs	r7, r2
 8000c20:	2802      	cmp	r0, #2
 8000c22:	d024      	beq.n	8000c6e <__aeabi_fmul+0xf2>
 8000c24:	2803      	cmp	r0, #3
 8000c26:	d100      	bne.n	8000c2a <__aeabi_fmul+0xae>
 8000c28:	e0cf      	b.n	8000dca <__aeabi_fmul+0x24e>
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	2801      	cmp	r0, #1
 8000c30:	d14d      	bne.n	8000cce <__aeabi_fmul+0x152>
 8000c32:	0258      	lsls	r0, r3, #9
 8000c34:	05d2      	lsls	r2, r2, #23
 8000c36:	0a40      	lsrs	r0, r0, #9
 8000c38:	07ff      	lsls	r7, r7, #31
 8000c3a:	4310      	orrs	r0, r2
 8000c3c:	4338      	orrs	r0, r7
 8000c3e:	b003      	add	sp, #12
 8000c40:	bc3c      	pop	{r2, r3, r4, r5}
 8000c42:	4690      	mov	r8, r2
 8000c44:	4699      	mov	r9, r3
 8000c46:	46a2      	mov	sl, r4
 8000c48:	46ab      	mov	fp, r5
 8000c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d15b      	bne.n	8000d08 <__aeabi_fmul+0x18c>
 8000c50:	2304      	movs	r3, #4
 8000c52:	469a      	mov	sl, r3
 8000c54:	3b03      	subs	r3, #3
 8000c56:	2500      	movs	r5, #0
 8000c58:	469b      	mov	fp, r3
 8000c5a:	e7aa      	b.n	8000bb2 <__aeabi_fmul+0x36>
 8000c5c:	35ff      	adds	r5, #255	; 0xff
 8000c5e:	2c00      	cmp	r4, #0
 8000c60:	d160      	bne.n	8000d24 <__aeabi_fmul+0x1a8>
 8000c62:	4652      	mov	r2, sl
 8000c64:	2302      	movs	r3, #2
 8000c66:	431a      	orrs	r2, r3
 8000c68:	4692      	mov	sl, r2
 8000c6a:	2002      	movs	r0, #2
 8000c6c:	e7b1      	b.n	8000bd2 <__aeabi_fmul+0x56>
 8000c6e:	22ff      	movs	r2, #255	; 0xff
 8000c70:	2300      	movs	r3, #0
 8000c72:	e7de      	b.n	8000c32 <__aeabi_fmul+0xb6>
 8000c74:	464b      	mov	r3, r9
 8000c76:	0c1b      	lsrs	r3, r3, #16
 8000c78:	469c      	mov	ip, r3
 8000c7a:	464b      	mov	r3, r9
 8000c7c:	0426      	lsls	r6, r4, #16
 8000c7e:	0c36      	lsrs	r6, r6, #16
 8000c80:	0418      	lsls	r0, r3, #16
 8000c82:	4661      	mov	r1, ip
 8000c84:	0033      	movs	r3, r6
 8000c86:	0c22      	lsrs	r2, r4, #16
 8000c88:	4664      	mov	r4, ip
 8000c8a:	0c00      	lsrs	r0, r0, #16
 8000c8c:	4343      	muls	r3, r0
 8000c8e:	434e      	muls	r6, r1
 8000c90:	4350      	muls	r0, r2
 8000c92:	4354      	muls	r4, r2
 8000c94:	1980      	adds	r0, r0, r6
 8000c96:	0c1a      	lsrs	r2, r3, #16
 8000c98:	1812      	adds	r2, r2, r0
 8000c9a:	4296      	cmp	r6, r2
 8000c9c:	d903      	bls.n	8000ca6 <__aeabi_fmul+0x12a>
 8000c9e:	2180      	movs	r1, #128	; 0x80
 8000ca0:	0249      	lsls	r1, r1, #9
 8000ca2:	468c      	mov	ip, r1
 8000ca4:	4464      	add	r4, ip
 8000ca6:	041b      	lsls	r3, r3, #16
 8000ca8:	0c1b      	lsrs	r3, r3, #16
 8000caa:	0410      	lsls	r0, r2, #16
 8000cac:	18c0      	adds	r0, r0, r3
 8000cae:	0183      	lsls	r3, r0, #6
 8000cb0:	1e5e      	subs	r6, r3, #1
 8000cb2:	41b3      	sbcs	r3, r6
 8000cb4:	0e80      	lsrs	r0, r0, #26
 8000cb6:	4318      	orrs	r0, r3
 8000cb8:	0c13      	lsrs	r3, r2, #16
 8000cba:	191b      	adds	r3, r3, r4
 8000cbc:	019b      	lsls	r3, r3, #6
 8000cbe:	4303      	orrs	r3, r0
 8000cc0:	001c      	movs	r4, r3
 8000cc2:	0123      	lsls	r3, r4, #4
 8000cc4:	d579      	bpl.n	8000dba <__aeabi_fmul+0x23e>
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	0862      	lsrs	r2, r4, #1
 8000cca:	401c      	ands	r4, r3
 8000ccc:	4314      	orrs	r4, r2
 8000cce:	9a01      	ldr	r2, [sp, #4]
 8000cd0:	327f      	adds	r2, #127	; 0x7f
 8000cd2:	2a00      	cmp	r2, #0
 8000cd4:	dd4d      	ble.n	8000d72 <__aeabi_fmul+0x1f6>
 8000cd6:	0763      	lsls	r3, r4, #29
 8000cd8:	d004      	beq.n	8000ce4 <__aeabi_fmul+0x168>
 8000cda:	230f      	movs	r3, #15
 8000cdc:	4023      	ands	r3, r4
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	d000      	beq.n	8000ce4 <__aeabi_fmul+0x168>
 8000ce2:	3404      	adds	r4, #4
 8000ce4:	0123      	lsls	r3, r4, #4
 8000ce6:	d503      	bpl.n	8000cf0 <__aeabi_fmul+0x174>
 8000ce8:	4b3c      	ldr	r3, [pc, #240]	; (8000ddc <__aeabi_fmul+0x260>)
 8000cea:	9a01      	ldr	r2, [sp, #4]
 8000cec:	401c      	ands	r4, r3
 8000cee:	3280      	adds	r2, #128	; 0x80
 8000cf0:	2afe      	cmp	r2, #254	; 0xfe
 8000cf2:	dcbc      	bgt.n	8000c6e <__aeabi_fmul+0xf2>
 8000cf4:	01a3      	lsls	r3, r4, #6
 8000cf6:	0a5b      	lsrs	r3, r3, #9
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	e79a      	b.n	8000c32 <__aeabi_fmul+0xb6>
 8000cfc:	230c      	movs	r3, #12
 8000cfe:	469a      	mov	sl, r3
 8000d00:	3b09      	subs	r3, #9
 8000d02:	25ff      	movs	r5, #255	; 0xff
 8000d04:	469b      	mov	fp, r3
 8000d06:	e754      	b.n	8000bb2 <__aeabi_fmul+0x36>
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f000 fad7 	bl	80012bc <__clzsi2>
 8000d0e:	464a      	mov	r2, r9
 8000d10:	1f43      	subs	r3, r0, #5
 8000d12:	2576      	movs	r5, #118	; 0x76
 8000d14:	409a      	lsls	r2, r3
 8000d16:	2300      	movs	r3, #0
 8000d18:	426d      	negs	r5, r5
 8000d1a:	4691      	mov	r9, r2
 8000d1c:	1a2d      	subs	r5, r5, r0
 8000d1e:	469a      	mov	sl, r3
 8000d20:	469b      	mov	fp, r3
 8000d22:	e746      	b.n	8000bb2 <__aeabi_fmul+0x36>
 8000d24:	4652      	mov	r2, sl
 8000d26:	2303      	movs	r3, #3
 8000d28:	431a      	orrs	r2, r3
 8000d2a:	4692      	mov	sl, r2
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	e750      	b.n	8000bd2 <__aeabi_fmul+0x56>
 8000d30:	0020      	movs	r0, r4
 8000d32:	f000 fac3 	bl	80012bc <__clzsi2>
 8000d36:	1f43      	subs	r3, r0, #5
 8000d38:	1a2d      	subs	r5, r5, r0
 8000d3a:	409c      	lsls	r4, r3
 8000d3c:	3d76      	subs	r5, #118	; 0x76
 8000d3e:	2000      	movs	r0, #0
 8000d40:	e747      	b.n	8000bd2 <__aeabi_fmul+0x56>
 8000d42:	2380      	movs	r3, #128	; 0x80
 8000d44:	2700      	movs	r7, #0
 8000d46:	03db      	lsls	r3, r3, #15
 8000d48:	22ff      	movs	r2, #255	; 0xff
 8000d4a:	e772      	b.n	8000c32 <__aeabi_fmul+0xb6>
 8000d4c:	4642      	mov	r2, r8
 8000d4e:	e766      	b.n	8000c1e <__aeabi_fmul+0xa2>
 8000d50:	464c      	mov	r4, r9
 8000d52:	0032      	movs	r2, r6
 8000d54:	4658      	mov	r0, fp
 8000d56:	e762      	b.n	8000c1e <__aeabi_fmul+0xa2>
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	464a      	mov	r2, r9
 8000d5c:	03db      	lsls	r3, r3, #15
 8000d5e:	421a      	tst	r2, r3
 8000d60:	d022      	beq.n	8000da8 <__aeabi_fmul+0x22c>
 8000d62:	421c      	tst	r4, r3
 8000d64:	d120      	bne.n	8000da8 <__aeabi_fmul+0x22c>
 8000d66:	4323      	orrs	r3, r4
 8000d68:	025b      	lsls	r3, r3, #9
 8000d6a:	0a5b      	lsrs	r3, r3, #9
 8000d6c:	4647      	mov	r7, r8
 8000d6e:	22ff      	movs	r2, #255	; 0xff
 8000d70:	e75f      	b.n	8000c32 <__aeabi_fmul+0xb6>
 8000d72:	2301      	movs	r3, #1
 8000d74:	1a9a      	subs	r2, r3, r2
 8000d76:	2a1b      	cmp	r2, #27
 8000d78:	dc21      	bgt.n	8000dbe <__aeabi_fmul+0x242>
 8000d7a:	0023      	movs	r3, r4
 8000d7c:	9901      	ldr	r1, [sp, #4]
 8000d7e:	40d3      	lsrs	r3, r2
 8000d80:	319e      	adds	r1, #158	; 0x9e
 8000d82:	408c      	lsls	r4, r1
 8000d84:	001a      	movs	r2, r3
 8000d86:	0023      	movs	r3, r4
 8000d88:	1e5c      	subs	r4, r3, #1
 8000d8a:	41a3      	sbcs	r3, r4
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	075a      	lsls	r2, r3, #29
 8000d90:	d004      	beq.n	8000d9c <__aeabi_fmul+0x220>
 8000d92:	220f      	movs	r2, #15
 8000d94:	401a      	ands	r2, r3
 8000d96:	2a04      	cmp	r2, #4
 8000d98:	d000      	beq.n	8000d9c <__aeabi_fmul+0x220>
 8000d9a:	3304      	adds	r3, #4
 8000d9c:	015a      	lsls	r2, r3, #5
 8000d9e:	d411      	bmi.n	8000dc4 <__aeabi_fmul+0x248>
 8000da0:	019b      	lsls	r3, r3, #6
 8000da2:	0a5b      	lsrs	r3, r3, #9
 8000da4:	2200      	movs	r2, #0
 8000da6:	e744      	b.n	8000c32 <__aeabi_fmul+0xb6>
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	464a      	mov	r2, r9
 8000dac:	03db      	lsls	r3, r3, #15
 8000dae:	4313      	orrs	r3, r2
 8000db0:	025b      	lsls	r3, r3, #9
 8000db2:	0a5b      	lsrs	r3, r3, #9
 8000db4:	0037      	movs	r7, r6
 8000db6:	22ff      	movs	r2, #255	; 0xff
 8000db8:	e73b      	b.n	8000c32 <__aeabi_fmul+0xb6>
 8000dba:	9501      	str	r5, [sp, #4]
 8000dbc:	e787      	b.n	8000cce <__aeabi_fmul+0x152>
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e736      	b.n	8000c32 <__aeabi_fmul+0xb6>
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e733      	b.n	8000c32 <__aeabi_fmul+0xb6>
 8000dca:	2380      	movs	r3, #128	; 0x80
 8000dcc:	03db      	lsls	r3, r3, #15
 8000dce:	4323      	orrs	r3, r4
 8000dd0:	025b      	lsls	r3, r3, #9
 8000dd2:	0a5b      	lsrs	r3, r3, #9
 8000dd4:	22ff      	movs	r2, #255	; 0xff
 8000dd6:	e72c      	b.n	8000c32 <__aeabi_fmul+0xb6>
 8000dd8:	08008544 	.word	0x08008544
 8000ddc:	f7ffffff 	.word	0xf7ffffff

08000de0 <__aeabi_fsub>:
 8000de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000de2:	4647      	mov	r7, r8
 8000de4:	46ce      	mov	lr, r9
 8000de6:	0044      	lsls	r4, r0, #1
 8000de8:	0fc2      	lsrs	r2, r0, #31
 8000dea:	b580      	push	{r7, lr}
 8000dec:	0247      	lsls	r7, r0, #9
 8000dee:	0248      	lsls	r0, r1, #9
 8000df0:	0a40      	lsrs	r0, r0, #9
 8000df2:	4684      	mov	ip, r0
 8000df4:	4666      	mov	r6, ip
 8000df6:	0048      	lsls	r0, r1, #1
 8000df8:	0a7f      	lsrs	r7, r7, #9
 8000dfa:	0e24      	lsrs	r4, r4, #24
 8000dfc:	00f6      	lsls	r6, r6, #3
 8000dfe:	0025      	movs	r5, r4
 8000e00:	4690      	mov	r8, r2
 8000e02:	00fb      	lsls	r3, r7, #3
 8000e04:	0e00      	lsrs	r0, r0, #24
 8000e06:	0fc9      	lsrs	r1, r1, #31
 8000e08:	46b1      	mov	r9, r6
 8000e0a:	28ff      	cmp	r0, #255	; 0xff
 8000e0c:	d100      	bne.n	8000e10 <__aeabi_fsub+0x30>
 8000e0e:	e085      	b.n	8000f1c <__aeabi_fsub+0x13c>
 8000e10:	2601      	movs	r6, #1
 8000e12:	4071      	eors	r1, r6
 8000e14:	1a26      	subs	r6, r4, r0
 8000e16:	4291      	cmp	r1, r2
 8000e18:	d057      	beq.n	8000eca <__aeabi_fsub+0xea>
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	dd43      	ble.n	8000ea6 <__aeabi_fsub+0xc6>
 8000e1e:	2800      	cmp	r0, #0
 8000e20:	d000      	beq.n	8000e24 <__aeabi_fsub+0x44>
 8000e22:	e07f      	b.n	8000f24 <__aeabi_fsub+0x144>
 8000e24:	4649      	mov	r1, r9
 8000e26:	2900      	cmp	r1, #0
 8000e28:	d100      	bne.n	8000e2c <__aeabi_fsub+0x4c>
 8000e2a:	e0aa      	b.n	8000f82 <__aeabi_fsub+0x1a2>
 8000e2c:	3e01      	subs	r6, #1
 8000e2e:	2e00      	cmp	r6, #0
 8000e30:	d000      	beq.n	8000e34 <__aeabi_fsub+0x54>
 8000e32:	e0f7      	b.n	8001024 <__aeabi_fsub+0x244>
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	015a      	lsls	r2, r3, #5
 8000e38:	d400      	bmi.n	8000e3c <__aeabi_fsub+0x5c>
 8000e3a:	e08b      	b.n	8000f54 <__aeabi_fsub+0x174>
 8000e3c:	019b      	lsls	r3, r3, #6
 8000e3e:	099c      	lsrs	r4, r3, #6
 8000e40:	0020      	movs	r0, r4
 8000e42:	f000 fa3b 	bl	80012bc <__clzsi2>
 8000e46:	3805      	subs	r0, #5
 8000e48:	4084      	lsls	r4, r0
 8000e4a:	4285      	cmp	r5, r0
 8000e4c:	dd00      	ble.n	8000e50 <__aeabi_fsub+0x70>
 8000e4e:	e0d3      	b.n	8000ff8 <__aeabi_fsub+0x218>
 8000e50:	1b45      	subs	r5, r0, r5
 8000e52:	0023      	movs	r3, r4
 8000e54:	2020      	movs	r0, #32
 8000e56:	3501      	adds	r5, #1
 8000e58:	40eb      	lsrs	r3, r5
 8000e5a:	1b45      	subs	r5, r0, r5
 8000e5c:	40ac      	lsls	r4, r5
 8000e5e:	1e62      	subs	r2, r4, #1
 8000e60:	4194      	sbcs	r4, r2
 8000e62:	4323      	orrs	r3, r4
 8000e64:	2407      	movs	r4, #7
 8000e66:	2500      	movs	r5, #0
 8000e68:	401c      	ands	r4, r3
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	4641      	mov	r1, r8
 8000e6e:	400a      	ands	r2, r1
 8000e70:	2c00      	cmp	r4, #0
 8000e72:	d004      	beq.n	8000e7e <__aeabi_fsub+0x9e>
 8000e74:	210f      	movs	r1, #15
 8000e76:	4019      	ands	r1, r3
 8000e78:	2904      	cmp	r1, #4
 8000e7a:	d000      	beq.n	8000e7e <__aeabi_fsub+0x9e>
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	0159      	lsls	r1, r3, #5
 8000e80:	d400      	bmi.n	8000e84 <__aeabi_fsub+0xa4>
 8000e82:	e080      	b.n	8000f86 <__aeabi_fsub+0x1a6>
 8000e84:	3501      	adds	r5, #1
 8000e86:	b2ec      	uxtb	r4, r5
 8000e88:	2dff      	cmp	r5, #255	; 0xff
 8000e8a:	d000      	beq.n	8000e8e <__aeabi_fsub+0xae>
 8000e8c:	e0a3      	b.n	8000fd6 <__aeabi_fsub+0x1f6>
 8000e8e:	24ff      	movs	r4, #255	; 0xff
 8000e90:	2300      	movs	r3, #0
 8000e92:	025b      	lsls	r3, r3, #9
 8000e94:	05e4      	lsls	r4, r4, #23
 8000e96:	0a58      	lsrs	r0, r3, #9
 8000e98:	07d2      	lsls	r2, r2, #31
 8000e9a:	4320      	orrs	r0, r4
 8000e9c:	4310      	orrs	r0, r2
 8000e9e:	bc0c      	pop	{r2, r3}
 8000ea0:	4690      	mov	r8, r2
 8000ea2:	4699      	mov	r9, r3
 8000ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ea6:	2e00      	cmp	r6, #0
 8000ea8:	d174      	bne.n	8000f94 <__aeabi_fsub+0x1b4>
 8000eaa:	1c60      	adds	r0, r4, #1
 8000eac:	b2c0      	uxtb	r0, r0
 8000eae:	2801      	cmp	r0, #1
 8000eb0:	dc00      	bgt.n	8000eb4 <__aeabi_fsub+0xd4>
 8000eb2:	e0a7      	b.n	8001004 <__aeabi_fsub+0x224>
 8000eb4:	464a      	mov	r2, r9
 8000eb6:	1a9c      	subs	r4, r3, r2
 8000eb8:	0162      	lsls	r2, r4, #5
 8000eba:	d500      	bpl.n	8000ebe <__aeabi_fsub+0xde>
 8000ebc:	e0b6      	b.n	800102c <__aeabi_fsub+0x24c>
 8000ebe:	2c00      	cmp	r4, #0
 8000ec0:	d1be      	bne.n	8000e40 <__aeabi_fsub+0x60>
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2400      	movs	r4, #0
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e7e3      	b.n	8000e92 <__aeabi_fsub+0xb2>
 8000eca:	2e00      	cmp	r6, #0
 8000ecc:	dc00      	bgt.n	8000ed0 <__aeabi_fsub+0xf0>
 8000ece:	e085      	b.n	8000fdc <__aeabi_fsub+0x1fc>
 8000ed0:	2800      	cmp	r0, #0
 8000ed2:	d046      	beq.n	8000f62 <__aeabi_fsub+0x182>
 8000ed4:	2cff      	cmp	r4, #255	; 0xff
 8000ed6:	d049      	beq.n	8000f6c <__aeabi_fsub+0x18c>
 8000ed8:	2280      	movs	r2, #128	; 0x80
 8000eda:	4648      	mov	r0, r9
 8000edc:	04d2      	lsls	r2, r2, #19
 8000ede:	4310      	orrs	r0, r2
 8000ee0:	4681      	mov	r9, r0
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	2e1b      	cmp	r6, #27
 8000ee6:	dc09      	bgt.n	8000efc <__aeabi_fsub+0x11c>
 8000ee8:	2020      	movs	r0, #32
 8000eea:	464c      	mov	r4, r9
 8000eec:	1b80      	subs	r0, r0, r6
 8000eee:	4084      	lsls	r4, r0
 8000ef0:	464a      	mov	r2, r9
 8000ef2:	0020      	movs	r0, r4
 8000ef4:	40f2      	lsrs	r2, r6
 8000ef6:	1e44      	subs	r4, r0, #1
 8000ef8:	41a0      	sbcs	r0, r4
 8000efa:	4302      	orrs	r2, r0
 8000efc:	189b      	adds	r3, r3, r2
 8000efe:	015a      	lsls	r2, r3, #5
 8000f00:	d528      	bpl.n	8000f54 <__aeabi_fsub+0x174>
 8000f02:	3501      	adds	r5, #1
 8000f04:	2dff      	cmp	r5, #255	; 0xff
 8000f06:	d100      	bne.n	8000f0a <__aeabi_fsub+0x12a>
 8000f08:	e0a8      	b.n	800105c <__aeabi_fsub+0x27c>
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	2407      	movs	r4, #7
 8000f0e:	4994      	ldr	r1, [pc, #592]	; (8001160 <__aeabi_fsub+0x380>)
 8000f10:	401a      	ands	r2, r3
 8000f12:	085b      	lsrs	r3, r3, #1
 8000f14:	400b      	ands	r3, r1
 8000f16:	4313      	orrs	r3, r2
 8000f18:	401c      	ands	r4, r3
 8000f1a:	e7a6      	b.n	8000e6a <__aeabi_fsub+0x8a>
 8000f1c:	2e00      	cmp	r6, #0
 8000f1e:	d000      	beq.n	8000f22 <__aeabi_fsub+0x142>
 8000f20:	e778      	b.n	8000e14 <__aeabi_fsub+0x34>
 8000f22:	e775      	b.n	8000e10 <__aeabi_fsub+0x30>
 8000f24:	2cff      	cmp	r4, #255	; 0xff
 8000f26:	d054      	beq.n	8000fd2 <__aeabi_fsub+0x1f2>
 8000f28:	2280      	movs	r2, #128	; 0x80
 8000f2a:	4649      	mov	r1, r9
 8000f2c:	04d2      	lsls	r2, r2, #19
 8000f2e:	4311      	orrs	r1, r2
 8000f30:	4689      	mov	r9, r1
 8000f32:	2201      	movs	r2, #1
 8000f34:	2e1b      	cmp	r6, #27
 8000f36:	dc09      	bgt.n	8000f4c <__aeabi_fsub+0x16c>
 8000f38:	2120      	movs	r1, #32
 8000f3a:	4648      	mov	r0, r9
 8000f3c:	1b89      	subs	r1, r1, r6
 8000f3e:	4088      	lsls	r0, r1
 8000f40:	464a      	mov	r2, r9
 8000f42:	0001      	movs	r1, r0
 8000f44:	40f2      	lsrs	r2, r6
 8000f46:	1e48      	subs	r0, r1, #1
 8000f48:	4181      	sbcs	r1, r0
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	1a9b      	subs	r3, r3, r2
 8000f4e:	015a      	lsls	r2, r3, #5
 8000f50:	d500      	bpl.n	8000f54 <__aeabi_fsub+0x174>
 8000f52:	e773      	b.n	8000e3c <__aeabi_fsub+0x5c>
 8000f54:	2201      	movs	r2, #1
 8000f56:	4641      	mov	r1, r8
 8000f58:	400a      	ands	r2, r1
 8000f5a:	0759      	lsls	r1, r3, #29
 8000f5c:	d000      	beq.n	8000f60 <__aeabi_fsub+0x180>
 8000f5e:	e789      	b.n	8000e74 <__aeabi_fsub+0x94>
 8000f60:	e011      	b.n	8000f86 <__aeabi_fsub+0x1a6>
 8000f62:	4648      	mov	r0, r9
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d158      	bne.n	800101a <__aeabi_fsub+0x23a>
 8000f68:	2cff      	cmp	r4, #255	; 0xff
 8000f6a:	d10c      	bne.n	8000f86 <__aeabi_fsub+0x1a6>
 8000f6c:	08db      	lsrs	r3, r3, #3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d100      	bne.n	8000f74 <__aeabi_fsub+0x194>
 8000f72:	e78c      	b.n	8000e8e <__aeabi_fsub+0xae>
 8000f74:	2080      	movs	r0, #128	; 0x80
 8000f76:	03c0      	lsls	r0, r0, #15
 8000f78:	4303      	orrs	r3, r0
 8000f7a:	025b      	lsls	r3, r3, #9
 8000f7c:	0a5b      	lsrs	r3, r3, #9
 8000f7e:	24ff      	movs	r4, #255	; 0xff
 8000f80:	e787      	b.n	8000e92 <__aeabi_fsub+0xb2>
 8000f82:	2cff      	cmp	r4, #255	; 0xff
 8000f84:	d025      	beq.n	8000fd2 <__aeabi_fsub+0x1f2>
 8000f86:	08db      	lsrs	r3, r3, #3
 8000f88:	2dff      	cmp	r5, #255	; 0xff
 8000f8a:	d0f0      	beq.n	8000f6e <__aeabi_fsub+0x18e>
 8000f8c:	025b      	lsls	r3, r3, #9
 8000f8e:	0a5b      	lsrs	r3, r3, #9
 8000f90:	b2ec      	uxtb	r4, r5
 8000f92:	e77e      	b.n	8000e92 <__aeabi_fsub+0xb2>
 8000f94:	2c00      	cmp	r4, #0
 8000f96:	d04d      	beq.n	8001034 <__aeabi_fsub+0x254>
 8000f98:	28ff      	cmp	r0, #255	; 0xff
 8000f9a:	d018      	beq.n	8000fce <__aeabi_fsub+0x1ee>
 8000f9c:	2480      	movs	r4, #128	; 0x80
 8000f9e:	04e4      	lsls	r4, r4, #19
 8000fa0:	4272      	negs	r2, r6
 8000fa2:	4323      	orrs	r3, r4
 8000fa4:	2a1b      	cmp	r2, #27
 8000fa6:	dd00      	ble.n	8000faa <__aeabi_fsub+0x1ca>
 8000fa8:	e0c4      	b.n	8001134 <__aeabi_fsub+0x354>
 8000faa:	001c      	movs	r4, r3
 8000fac:	2520      	movs	r5, #32
 8000fae:	40d4      	lsrs	r4, r2
 8000fb0:	1aaa      	subs	r2, r5, r2
 8000fb2:	4093      	lsls	r3, r2
 8000fb4:	1e5a      	subs	r2, r3, #1
 8000fb6:	4193      	sbcs	r3, r2
 8000fb8:	4323      	orrs	r3, r4
 8000fba:	464a      	mov	r2, r9
 8000fbc:	0005      	movs	r5, r0
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	4688      	mov	r8, r1
 8000fc2:	e738      	b.n	8000e36 <__aeabi_fsub+0x56>
 8000fc4:	1c72      	adds	r2, r6, #1
 8000fc6:	d0f8      	beq.n	8000fba <__aeabi_fsub+0x1da>
 8000fc8:	43f2      	mvns	r2, r6
 8000fca:	28ff      	cmp	r0, #255	; 0xff
 8000fcc:	d1ea      	bne.n	8000fa4 <__aeabi_fsub+0x1c4>
 8000fce:	000a      	movs	r2, r1
 8000fd0:	464b      	mov	r3, r9
 8000fd2:	25ff      	movs	r5, #255	; 0xff
 8000fd4:	e7d7      	b.n	8000f86 <__aeabi_fsub+0x1a6>
 8000fd6:	019b      	lsls	r3, r3, #6
 8000fd8:	0a5b      	lsrs	r3, r3, #9
 8000fda:	e75a      	b.n	8000e92 <__aeabi_fsub+0xb2>
 8000fdc:	2e00      	cmp	r6, #0
 8000fde:	d141      	bne.n	8001064 <__aeabi_fsub+0x284>
 8000fe0:	1c65      	adds	r5, r4, #1
 8000fe2:	b2e9      	uxtb	r1, r5
 8000fe4:	2901      	cmp	r1, #1
 8000fe6:	dd45      	ble.n	8001074 <__aeabi_fsub+0x294>
 8000fe8:	2dff      	cmp	r5, #255	; 0xff
 8000fea:	d100      	bne.n	8000fee <__aeabi_fsub+0x20e>
 8000fec:	e74f      	b.n	8000e8e <__aeabi_fsub+0xae>
 8000fee:	2407      	movs	r4, #7
 8000ff0:	444b      	add	r3, r9
 8000ff2:	085b      	lsrs	r3, r3, #1
 8000ff4:	401c      	ands	r4, r3
 8000ff6:	e738      	b.n	8000e6a <__aeabi_fsub+0x8a>
 8000ff8:	2207      	movs	r2, #7
 8000ffa:	4b5a      	ldr	r3, [pc, #360]	; (8001164 <__aeabi_fsub+0x384>)
 8000ffc:	1a2d      	subs	r5, r5, r0
 8000ffe:	4023      	ands	r3, r4
 8001000:	4014      	ands	r4, r2
 8001002:	e732      	b.n	8000e6a <__aeabi_fsub+0x8a>
 8001004:	2c00      	cmp	r4, #0
 8001006:	d11d      	bne.n	8001044 <__aeabi_fsub+0x264>
 8001008:	2b00      	cmp	r3, #0
 800100a:	d17a      	bne.n	8001102 <__aeabi_fsub+0x322>
 800100c:	464b      	mov	r3, r9
 800100e:	2b00      	cmp	r3, #0
 8001010:	d100      	bne.n	8001014 <__aeabi_fsub+0x234>
 8001012:	e091      	b.n	8001138 <__aeabi_fsub+0x358>
 8001014:	000a      	movs	r2, r1
 8001016:	2500      	movs	r5, #0
 8001018:	e7b5      	b.n	8000f86 <__aeabi_fsub+0x1a6>
 800101a:	3e01      	subs	r6, #1
 800101c:	2e00      	cmp	r6, #0
 800101e:	d119      	bne.n	8001054 <__aeabi_fsub+0x274>
 8001020:	444b      	add	r3, r9
 8001022:	e76c      	b.n	8000efe <__aeabi_fsub+0x11e>
 8001024:	2cff      	cmp	r4, #255	; 0xff
 8001026:	d184      	bne.n	8000f32 <__aeabi_fsub+0x152>
 8001028:	25ff      	movs	r5, #255	; 0xff
 800102a:	e7ac      	b.n	8000f86 <__aeabi_fsub+0x1a6>
 800102c:	464a      	mov	r2, r9
 800102e:	4688      	mov	r8, r1
 8001030:	1ad4      	subs	r4, r2, r3
 8001032:	e705      	b.n	8000e40 <__aeabi_fsub+0x60>
 8001034:	2b00      	cmp	r3, #0
 8001036:	d1c5      	bne.n	8000fc4 <__aeabi_fsub+0x1e4>
 8001038:	000a      	movs	r2, r1
 800103a:	28ff      	cmp	r0, #255	; 0xff
 800103c:	d0c8      	beq.n	8000fd0 <__aeabi_fsub+0x1f0>
 800103e:	0005      	movs	r5, r0
 8001040:	464b      	mov	r3, r9
 8001042:	e7a0      	b.n	8000f86 <__aeabi_fsub+0x1a6>
 8001044:	2b00      	cmp	r3, #0
 8001046:	d149      	bne.n	80010dc <__aeabi_fsub+0x2fc>
 8001048:	464b      	mov	r3, r9
 800104a:	2b00      	cmp	r3, #0
 800104c:	d077      	beq.n	800113e <__aeabi_fsub+0x35e>
 800104e:	000a      	movs	r2, r1
 8001050:	25ff      	movs	r5, #255	; 0xff
 8001052:	e798      	b.n	8000f86 <__aeabi_fsub+0x1a6>
 8001054:	2cff      	cmp	r4, #255	; 0xff
 8001056:	d000      	beq.n	800105a <__aeabi_fsub+0x27a>
 8001058:	e743      	b.n	8000ee2 <__aeabi_fsub+0x102>
 800105a:	e787      	b.n	8000f6c <__aeabi_fsub+0x18c>
 800105c:	000a      	movs	r2, r1
 800105e:	24ff      	movs	r4, #255	; 0xff
 8001060:	2300      	movs	r3, #0
 8001062:	e716      	b.n	8000e92 <__aeabi_fsub+0xb2>
 8001064:	2c00      	cmp	r4, #0
 8001066:	d115      	bne.n	8001094 <__aeabi_fsub+0x2b4>
 8001068:	2b00      	cmp	r3, #0
 800106a:	d157      	bne.n	800111c <__aeabi_fsub+0x33c>
 800106c:	28ff      	cmp	r0, #255	; 0xff
 800106e:	d1e6      	bne.n	800103e <__aeabi_fsub+0x25e>
 8001070:	464b      	mov	r3, r9
 8001072:	e77b      	b.n	8000f6c <__aeabi_fsub+0x18c>
 8001074:	2c00      	cmp	r4, #0
 8001076:	d120      	bne.n	80010ba <__aeabi_fsub+0x2da>
 8001078:	2b00      	cmp	r3, #0
 800107a:	d057      	beq.n	800112c <__aeabi_fsub+0x34c>
 800107c:	4649      	mov	r1, r9
 800107e:	2900      	cmp	r1, #0
 8001080:	d053      	beq.n	800112a <__aeabi_fsub+0x34a>
 8001082:	444b      	add	r3, r9
 8001084:	015a      	lsls	r2, r3, #5
 8001086:	d568      	bpl.n	800115a <__aeabi_fsub+0x37a>
 8001088:	2407      	movs	r4, #7
 800108a:	4a36      	ldr	r2, [pc, #216]	; (8001164 <__aeabi_fsub+0x384>)
 800108c:	401c      	ands	r4, r3
 800108e:	2501      	movs	r5, #1
 8001090:	4013      	ands	r3, r2
 8001092:	e6ea      	b.n	8000e6a <__aeabi_fsub+0x8a>
 8001094:	28ff      	cmp	r0, #255	; 0xff
 8001096:	d0eb      	beq.n	8001070 <__aeabi_fsub+0x290>
 8001098:	2280      	movs	r2, #128	; 0x80
 800109a:	04d2      	lsls	r2, r2, #19
 800109c:	4276      	negs	r6, r6
 800109e:	4313      	orrs	r3, r2
 80010a0:	2e1b      	cmp	r6, #27
 80010a2:	dc53      	bgt.n	800114c <__aeabi_fsub+0x36c>
 80010a4:	2520      	movs	r5, #32
 80010a6:	1bad      	subs	r5, r5, r6
 80010a8:	001a      	movs	r2, r3
 80010aa:	40ab      	lsls	r3, r5
 80010ac:	40f2      	lsrs	r2, r6
 80010ae:	1e5c      	subs	r4, r3, #1
 80010b0:	41a3      	sbcs	r3, r4
 80010b2:	4313      	orrs	r3, r2
 80010b4:	444b      	add	r3, r9
 80010b6:	0005      	movs	r5, r0
 80010b8:	e721      	b.n	8000efe <__aeabi_fsub+0x11e>
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0d8      	beq.n	8001070 <__aeabi_fsub+0x290>
 80010be:	4649      	mov	r1, r9
 80010c0:	2900      	cmp	r1, #0
 80010c2:	d100      	bne.n	80010c6 <__aeabi_fsub+0x2e6>
 80010c4:	e752      	b.n	8000f6c <__aeabi_fsub+0x18c>
 80010c6:	2180      	movs	r1, #128	; 0x80
 80010c8:	03c9      	lsls	r1, r1, #15
 80010ca:	420f      	tst	r7, r1
 80010cc:	d100      	bne.n	80010d0 <__aeabi_fsub+0x2f0>
 80010ce:	e74d      	b.n	8000f6c <__aeabi_fsub+0x18c>
 80010d0:	4660      	mov	r0, ip
 80010d2:	4208      	tst	r0, r1
 80010d4:	d000      	beq.n	80010d8 <__aeabi_fsub+0x2f8>
 80010d6:	e749      	b.n	8000f6c <__aeabi_fsub+0x18c>
 80010d8:	464b      	mov	r3, r9
 80010da:	e747      	b.n	8000f6c <__aeabi_fsub+0x18c>
 80010dc:	4648      	mov	r0, r9
 80010de:	25ff      	movs	r5, #255	; 0xff
 80010e0:	2800      	cmp	r0, #0
 80010e2:	d100      	bne.n	80010e6 <__aeabi_fsub+0x306>
 80010e4:	e74f      	b.n	8000f86 <__aeabi_fsub+0x1a6>
 80010e6:	2280      	movs	r2, #128	; 0x80
 80010e8:	03d2      	lsls	r2, r2, #15
 80010ea:	4217      	tst	r7, r2
 80010ec:	d004      	beq.n	80010f8 <__aeabi_fsub+0x318>
 80010ee:	4660      	mov	r0, ip
 80010f0:	4210      	tst	r0, r2
 80010f2:	d101      	bne.n	80010f8 <__aeabi_fsub+0x318>
 80010f4:	464b      	mov	r3, r9
 80010f6:	4688      	mov	r8, r1
 80010f8:	2201      	movs	r2, #1
 80010fa:	4641      	mov	r1, r8
 80010fc:	25ff      	movs	r5, #255	; 0xff
 80010fe:	400a      	ands	r2, r1
 8001100:	e741      	b.n	8000f86 <__aeabi_fsub+0x1a6>
 8001102:	4648      	mov	r0, r9
 8001104:	2800      	cmp	r0, #0
 8001106:	d01f      	beq.n	8001148 <__aeabi_fsub+0x368>
 8001108:	1a1a      	subs	r2, r3, r0
 800110a:	0150      	lsls	r0, r2, #5
 800110c:	d520      	bpl.n	8001150 <__aeabi_fsub+0x370>
 800110e:	464a      	mov	r2, r9
 8001110:	2407      	movs	r4, #7
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	401c      	ands	r4, r3
 8001116:	4688      	mov	r8, r1
 8001118:	2500      	movs	r5, #0
 800111a:	e6a6      	b.n	8000e6a <__aeabi_fsub+0x8a>
 800111c:	1c74      	adds	r4, r6, #1
 800111e:	d0c9      	beq.n	80010b4 <__aeabi_fsub+0x2d4>
 8001120:	43f6      	mvns	r6, r6
 8001122:	28ff      	cmp	r0, #255	; 0xff
 8001124:	d1bc      	bne.n	80010a0 <__aeabi_fsub+0x2c0>
 8001126:	464b      	mov	r3, r9
 8001128:	e720      	b.n	8000f6c <__aeabi_fsub+0x18c>
 800112a:	4699      	mov	r9, r3
 800112c:	464b      	mov	r3, r9
 800112e:	2500      	movs	r5, #0
 8001130:	08db      	lsrs	r3, r3, #3
 8001132:	e72b      	b.n	8000f8c <__aeabi_fsub+0x1ac>
 8001134:	2301      	movs	r3, #1
 8001136:	e740      	b.n	8000fba <__aeabi_fsub+0x1da>
 8001138:	2200      	movs	r2, #0
 800113a:	2300      	movs	r3, #0
 800113c:	e6a9      	b.n	8000e92 <__aeabi_fsub+0xb2>
 800113e:	2380      	movs	r3, #128	; 0x80
 8001140:	2200      	movs	r2, #0
 8001142:	03db      	lsls	r3, r3, #15
 8001144:	24ff      	movs	r4, #255	; 0xff
 8001146:	e6a4      	b.n	8000e92 <__aeabi_fsub+0xb2>
 8001148:	2500      	movs	r5, #0
 800114a:	e71c      	b.n	8000f86 <__aeabi_fsub+0x1a6>
 800114c:	2301      	movs	r3, #1
 800114e:	e7b1      	b.n	80010b4 <__aeabi_fsub+0x2d4>
 8001150:	2a00      	cmp	r2, #0
 8001152:	d0f1      	beq.n	8001138 <__aeabi_fsub+0x358>
 8001154:	0013      	movs	r3, r2
 8001156:	2500      	movs	r5, #0
 8001158:	e6fc      	b.n	8000f54 <__aeabi_fsub+0x174>
 800115a:	2500      	movs	r5, #0
 800115c:	e6fa      	b.n	8000f54 <__aeabi_fsub+0x174>
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	7dffffff 	.word	0x7dffffff
 8001164:	fbffffff 	.word	0xfbffffff

08001168 <__aeabi_f2iz>:
 8001168:	0241      	lsls	r1, r0, #9
 800116a:	0042      	lsls	r2, r0, #1
 800116c:	0fc3      	lsrs	r3, r0, #31
 800116e:	0a49      	lsrs	r1, r1, #9
 8001170:	0e12      	lsrs	r2, r2, #24
 8001172:	2000      	movs	r0, #0
 8001174:	2a7e      	cmp	r2, #126	; 0x7e
 8001176:	d90d      	bls.n	8001194 <__aeabi_f2iz+0x2c>
 8001178:	2a9d      	cmp	r2, #157	; 0x9d
 800117a:	d80c      	bhi.n	8001196 <__aeabi_f2iz+0x2e>
 800117c:	2080      	movs	r0, #128	; 0x80
 800117e:	0400      	lsls	r0, r0, #16
 8001180:	4301      	orrs	r1, r0
 8001182:	2a95      	cmp	r2, #149	; 0x95
 8001184:	dc0a      	bgt.n	800119c <__aeabi_f2iz+0x34>
 8001186:	2096      	movs	r0, #150	; 0x96
 8001188:	1a82      	subs	r2, r0, r2
 800118a:	40d1      	lsrs	r1, r2
 800118c:	4248      	negs	r0, r1
 800118e:	2b00      	cmp	r3, #0
 8001190:	d100      	bne.n	8001194 <__aeabi_f2iz+0x2c>
 8001192:	0008      	movs	r0, r1
 8001194:	4770      	bx	lr
 8001196:	4a03      	ldr	r2, [pc, #12]	; (80011a4 <__aeabi_f2iz+0x3c>)
 8001198:	1898      	adds	r0, r3, r2
 800119a:	e7fb      	b.n	8001194 <__aeabi_f2iz+0x2c>
 800119c:	3a96      	subs	r2, #150	; 0x96
 800119e:	4091      	lsls	r1, r2
 80011a0:	e7f4      	b.n	800118c <__aeabi_f2iz+0x24>
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	7fffffff 	.word	0x7fffffff

080011a8 <__aeabi_i2f>:
 80011a8:	b570      	push	{r4, r5, r6, lr}
 80011aa:	2800      	cmp	r0, #0
 80011ac:	d03d      	beq.n	800122a <__aeabi_i2f+0x82>
 80011ae:	17c3      	asrs	r3, r0, #31
 80011b0:	18c5      	adds	r5, r0, r3
 80011b2:	405d      	eors	r5, r3
 80011b4:	0fc4      	lsrs	r4, r0, #31
 80011b6:	0028      	movs	r0, r5
 80011b8:	f000 f880 	bl	80012bc <__clzsi2>
 80011bc:	229e      	movs	r2, #158	; 0x9e
 80011be:	1a12      	subs	r2, r2, r0
 80011c0:	2a96      	cmp	r2, #150	; 0x96
 80011c2:	dc07      	bgt.n	80011d4 <__aeabi_i2f+0x2c>
 80011c4:	b2d2      	uxtb	r2, r2
 80011c6:	2808      	cmp	r0, #8
 80011c8:	dd33      	ble.n	8001232 <__aeabi_i2f+0x8a>
 80011ca:	3808      	subs	r0, #8
 80011cc:	4085      	lsls	r5, r0
 80011ce:	0268      	lsls	r0, r5, #9
 80011d0:	0a40      	lsrs	r0, r0, #9
 80011d2:	e023      	b.n	800121c <__aeabi_i2f+0x74>
 80011d4:	2a99      	cmp	r2, #153	; 0x99
 80011d6:	dd0b      	ble.n	80011f0 <__aeabi_i2f+0x48>
 80011d8:	2305      	movs	r3, #5
 80011da:	0029      	movs	r1, r5
 80011dc:	1a1b      	subs	r3, r3, r0
 80011de:	40d9      	lsrs	r1, r3
 80011e0:	0003      	movs	r3, r0
 80011e2:	331b      	adds	r3, #27
 80011e4:	409d      	lsls	r5, r3
 80011e6:	002b      	movs	r3, r5
 80011e8:	1e5d      	subs	r5, r3, #1
 80011ea:	41ab      	sbcs	r3, r5
 80011ec:	4319      	orrs	r1, r3
 80011ee:	000d      	movs	r5, r1
 80011f0:	2805      	cmp	r0, #5
 80011f2:	dd01      	ble.n	80011f8 <__aeabi_i2f+0x50>
 80011f4:	1f43      	subs	r3, r0, #5
 80011f6:	409d      	lsls	r5, r3
 80011f8:	002b      	movs	r3, r5
 80011fa:	490f      	ldr	r1, [pc, #60]	; (8001238 <__aeabi_i2f+0x90>)
 80011fc:	400b      	ands	r3, r1
 80011fe:	076e      	lsls	r6, r5, #29
 8001200:	d009      	beq.n	8001216 <__aeabi_i2f+0x6e>
 8001202:	260f      	movs	r6, #15
 8001204:	4035      	ands	r5, r6
 8001206:	2d04      	cmp	r5, #4
 8001208:	d005      	beq.n	8001216 <__aeabi_i2f+0x6e>
 800120a:	3304      	adds	r3, #4
 800120c:	015d      	lsls	r5, r3, #5
 800120e:	d502      	bpl.n	8001216 <__aeabi_i2f+0x6e>
 8001210:	229f      	movs	r2, #159	; 0x9f
 8001212:	400b      	ands	r3, r1
 8001214:	1a12      	subs	r2, r2, r0
 8001216:	019b      	lsls	r3, r3, #6
 8001218:	0a58      	lsrs	r0, r3, #9
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	0240      	lsls	r0, r0, #9
 800121e:	05d2      	lsls	r2, r2, #23
 8001220:	0a40      	lsrs	r0, r0, #9
 8001222:	07e4      	lsls	r4, r4, #31
 8001224:	4310      	orrs	r0, r2
 8001226:	4320      	orrs	r0, r4
 8001228:	bd70      	pop	{r4, r5, r6, pc}
 800122a:	2400      	movs	r4, #0
 800122c:	2200      	movs	r2, #0
 800122e:	2000      	movs	r0, #0
 8001230:	e7f4      	b.n	800121c <__aeabi_i2f+0x74>
 8001232:	0268      	lsls	r0, r5, #9
 8001234:	0a40      	lsrs	r0, r0, #9
 8001236:	e7f1      	b.n	800121c <__aeabi_i2f+0x74>
 8001238:	fbffffff 	.word	0xfbffffff

0800123c <__aeabi_ui2f>:
 800123c:	b570      	push	{r4, r5, r6, lr}
 800123e:	1e04      	subs	r4, r0, #0
 8001240:	d034      	beq.n	80012ac <__aeabi_ui2f+0x70>
 8001242:	f000 f83b 	bl	80012bc <__clzsi2>
 8001246:	229e      	movs	r2, #158	; 0x9e
 8001248:	1a12      	subs	r2, r2, r0
 800124a:	2a96      	cmp	r2, #150	; 0x96
 800124c:	dc07      	bgt.n	800125e <__aeabi_ui2f+0x22>
 800124e:	b2d2      	uxtb	r2, r2
 8001250:	2808      	cmp	r0, #8
 8001252:	dd2e      	ble.n	80012b2 <__aeabi_ui2f+0x76>
 8001254:	3808      	subs	r0, #8
 8001256:	4084      	lsls	r4, r0
 8001258:	0260      	lsls	r0, r4, #9
 800125a:	0a40      	lsrs	r0, r0, #9
 800125c:	e021      	b.n	80012a2 <__aeabi_ui2f+0x66>
 800125e:	2a99      	cmp	r2, #153	; 0x99
 8001260:	dd09      	ble.n	8001276 <__aeabi_ui2f+0x3a>
 8001262:	0003      	movs	r3, r0
 8001264:	0021      	movs	r1, r4
 8001266:	331b      	adds	r3, #27
 8001268:	4099      	lsls	r1, r3
 800126a:	1e4b      	subs	r3, r1, #1
 800126c:	4199      	sbcs	r1, r3
 800126e:	2305      	movs	r3, #5
 8001270:	1a1b      	subs	r3, r3, r0
 8001272:	40dc      	lsrs	r4, r3
 8001274:	430c      	orrs	r4, r1
 8001276:	2805      	cmp	r0, #5
 8001278:	dd01      	ble.n	800127e <__aeabi_ui2f+0x42>
 800127a:	1f43      	subs	r3, r0, #5
 800127c:	409c      	lsls	r4, r3
 800127e:	0023      	movs	r3, r4
 8001280:	490d      	ldr	r1, [pc, #52]	; (80012b8 <__aeabi_ui2f+0x7c>)
 8001282:	400b      	ands	r3, r1
 8001284:	0765      	lsls	r5, r4, #29
 8001286:	d009      	beq.n	800129c <__aeabi_ui2f+0x60>
 8001288:	250f      	movs	r5, #15
 800128a:	402c      	ands	r4, r5
 800128c:	2c04      	cmp	r4, #4
 800128e:	d005      	beq.n	800129c <__aeabi_ui2f+0x60>
 8001290:	3304      	adds	r3, #4
 8001292:	015c      	lsls	r4, r3, #5
 8001294:	d502      	bpl.n	800129c <__aeabi_ui2f+0x60>
 8001296:	229f      	movs	r2, #159	; 0x9f
 8001298:	400b      	ands	r3, r1
 800129a:	1a12      	subs	r2, r2, r0
 800129c:	019b      	lsls	r3, r3, #6
 800129e:	0a58      	lsrs	r0, r3, #9
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	0240      	lsls	r0, r0, #9
 80012a4:	05d2      	lsls	r2, r2, #23
 80012a6:	0a40      	lsrs	r0, r0, #9
 80012a8:	4310      	orrs	r0, r2
 80012aa:	bd70      	pop	{r4, r5, r6, pc}
 80012ac:	2200      	movs	r2, #0
 80012ae:	2000      	movs	r0, #0
 80012b0:	e7f7      	b.n	80012a2 <__aeabi_ui2f+0x66>
 80012b2:	0260      	lsls	r0, r4, #9
 80012b4:	0a40      	lsrs	r0, r0, #9
 80012b6:	e7f4      	b.n	80012a2 <__aeabi_ui2f+0x66>
 80012b8:	fbffffff 	.word	0xfbffffff

080012bc <__clzsi2>:
 80012bc:	211c      	movs	r1, #28
 80012be:	2301      	movs	r3, #1
 80012c0:	041b      	lsls	r3, r3, #16
 80012c2:	4298      	cmp	r0, r3
 80012c4:	d301      	bcc.n	80012ca <__clzsi2+0xe>
 80012c6:	0c00      	lsrs	r0, r0, #16
 80012c8:	3910      	subs	r1, #16
 80012ca:	0a1b      	lsrs	r3, r3, #8
 80012cc:	4298      	cmp	r0, r3
 80012ce:	d301      	bcc.n	80012d4 <__clzsi2+0x18>
 80012d0:	0a00      	lsrs	r0, r0, #8
 80012d2:	3908      	subs	r1, #8
 80012d4:	091b      	lsrs	r3, r3, #4
 80012d6:	4298      	cmp	r0, r3
 80012d8:	d301      	bcc.n	80012de <__clzsi2+0x22>
 80012da:	0900      	lsrs	r0, r0, #4
 80012dc:	3904      	subs	r1, #4
 80012de:	a202      	add	r2, pc, #8	; (adr r2, 80012e8 <__clzsi2+0x2c>)
 80012e0:	5c10      	ldrb	r0, [r2, r0]
 80012e2:	1840      	adds	r0, r0, r1
 80012e4:	4770      	bx	lr
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	02020304 	.word	0x02020304
 80012ec:	01010101 	.word	0x01010101
	...

080012f8 <SPI_DC_LOW>:
static uint16_t bg;				// background color

// ---- lower level functions ----
void SPI_CS_LOW() {HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);}
void SPI_CS_HIGH() {HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);}
void SPI_DC_LOW() {HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);}
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	2380      	movs	r3, #128	; 0x80
 80012fe:	01db      	lsls	r3, r3, #7
 8001300:	4803      	ldr	r0, [pc, #12]	; (8001310 <SPI_DC_LOW+0x18>)
 8001302:	2200      	movs	r2, #0
 8001304:	0019      	movs	r1, r3
 8001306:	f003 fdfb 	bl	8004f00 <HAL_GPIO_WritePin>
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	50000400 	.word	0x50000400

08001314 <SPI_DC_HIGH>:
void SPI_DC_HIGH() {HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);}
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
 8001318:	2380      	movs	r3, #128	; 0x80
 800131a:	01db      	lsls	r3, r3, #7
 800131c:	4803      	ldr	r0, [pc, #12]	; (800132c <SPI_DC_HIGH+0x18>)
 800131e:	2201      	movs	r2, #1
 8001320:	0019      	movs	r1, r3
 8001322:	f003 fded 	bl	8004f00 <HAL_GPIO_WritePin>
 8001326:	46c0      	nop			; (mov r8, r8)
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	50000400 	.word	0x50000400

08001330 <sendCommand>:

void sendCommand(uint8_t cmd, uint8_t *args, uint16_t numArgs, SPI_HandleTypeDef *hspi) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	0011      	movs	r1, r2
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	230f      	movs	r3, #15
 800133e:	18fb      	adds	r3, r7, r3
 8001340:	1c02      	adds	r2, r0, #0
 8001342:	701a      	strb	r2, [r3, #0]
 8001344:	230c      	movs	r3, #12
 8001346:	18fb      	adds	r3, r7, r3
 8001348:	1c0a      	adds	r2, r1, #0
 800134a:	801a      	strh	r2, [r3, #0]
	while (HAL_SPI_GetState(hspi) == HAL_SPI_STATE_BUSY_TX);		// block next transfer request while DMA transfer is ongoing
 800134c:	46c0      	nop			; (mov r8, r8)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	0018      	movs	r0, r3
 8001352:	f005 feff 	bl	8007154 <HAL_SPI_GetState>
 8001356:	0003      	movs	r3, r0
 8001358:	2b03      	cmp	r3, #3
 800135a:	d0f8      	beq.n	800134e <sendCommand+0x1e>
//	SPI_CS_LOW();	// chip select

	SPI_DC_LOW();	// command mode
 800135c:	f7ff ffcc 	bl	80012f8 <SPI_DC_LOW>
	HAL_SPI_Transmit(hspi, &cmd, 1, 1000);	// not using DMA bc it's only 1 byte
 8001360:	23fa      	movs	r3, #250	; 0xfa
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	220f      	movs	r2, #15
 8001366:	18b9      	adds	r1, r7, r2
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	2201      	movs	r2, #1
 800136c:	f005 fc10 	bl	8006b90 <HAL_SPI_Transmit>

	SPI_DC_HIGH();	// data mode
 8001370:	f7ff ffd0 	bl	8001314 <SPI_DC_HIGH>
	if (numArgs) {
 8001374:	230c      	movs	r3, #12
 8001376:	18fb      	adds	r3, r7, r3
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d007      	beq.n	800138e <sendCommand+0x5e>
		HAL_SPI_Transmit_IT(hspi, args, numArgs);
 800137e:	230c      	movs	r3, #12
 8001380:	18fb      	adds	r3, r7, r3
 8001382:	881a      	ldrh	r2, [r3, #0]
 8001384:	68b9      	ldr	r1, [r7, #8]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	0018      	movs	r0, r3
 800138a:	f005 fd4f 	bl	8006e2c <HAL_SPI_Transmit_IT>
	}
}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	46bd      	mov	sp, r7
 8001392:	b004      	add	sp, #16
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_SPI_TxCpltCallback>:

// using only for sending data, but not commands
// dont send request when transfer is ongoing
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
//	if (HAL_GPIO_ReadPin(CS_PORT, CS_PIN) == GPIO_PIN_RESET) SPI_CS_HIGH();	// chip select disable
}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	46bd      	mov	sp, r7
 80013a2:	b002      	add	sp, #8
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <displayInit>:

// array parser heavily based on Adafruit library code
void displayInit(uint8_t *args, SPI_HandleTypeDef *hspi) {
 80013a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a8:	b085      	sub	sp, #20
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	6039      	str	r1, [r7, #0]
	uint8_t  numCommands, cmd, numArgs;
	uint16_t ms;
	uint8_t index = 0;
 80013b0:	220b      	movs	r2, #11
 80013b2:	0011      	movs	r1, r2
 80013b4:	18bb      	adds	r3, r7, r2
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	numCommands = args[index++];			// Number of commands to follow
 80013ba:	000a      	movs	r2, r1
 80013bc:	18bb      	adds	r3, r7, r2
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	18ba      	adds	r2, r7, r2
 80013c2:	1c59      	adds	r1, r3, #1
 80013c4:	7011      	strb	r1, [r2, #0]
 80013c6:	001a      	movs	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	189a      	adds	r2, r3, r2
 80013cc:	230f      	movs	r3, #15
 80013ce:	18fb      	adds	r3, r7, r3
 80013d0:	7812      	ldrb	r2, [r2, #0]
 80013d2:	701a      	strb	r2, [r3, #0]
	while(numCommands--) {					// For each command...
 80013d4:	e05e      	b.n	8001494 <displayInit+0xee>
		cmd = args[index++];				// Read command
 80013d6:	200b      	movs	r0, #11
 80013d8:	183b      	adds	r3, r7, r0
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	183a      	adds	r2, r7, r0
 80013de:	1c59      	adds	r1, r3, #1
 80013e0:	7011      	strb	r1, [r2, #0]
 80013e2:	001a      	movs	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	189a      	adds	r2, r3, r2
 80013e8:	230a      	movs	r3, #10
 80013ea:	18fb      	adds	r3, r7, r3
 80013ec:	7812      	ldrb	r2, [r2, #0]
 80013ee:	701a      	strb	r2, [r3, #0]
		numArgs  = args[index++];			// Number of args to follow
 80013f0:	183b      	adds	r3, r7, r0
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	183a      	adds	r2, r7, r0
 80013f6:	1c59      	adds	r1, r3, #1
 80013f8:	7011      	strb	r1, [r2, #0]
 80013fa:	001a      	movs	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	189a      	adds	r2, r3, r2
 8001400:	2609      	movs	r6, #9
 8001402:	19bb      	adds	r3, r7, r6
 8001404:	7812      	ldrb	r2, [r2, #0]
 8001406:	701a      	strb	r2, [r3, #0]
		ms       = numArgs & ST_CMD_DELAY;	// If hibit set, delay follows args
 8001408:	19bb      	adds	r3, r7, r6
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	b29a      	uxth	r2, r3
 800140e:	210c      	movs	r1, #12
 8001410:	187b      	adds	r3, r7, r1
 8001412:	2180      	movs	r1, #128	; 0x80
 8001414:	400a      	ands	r2, r1
 8001416:	801a      	strh	r2, [r3, #0]
		numArgs &= ~ST_CMD_DELAY;			// Mask out delay bit
 8001418:	19bb      	adds	r3, r7, r6
 800141a:	19ba      	adds	r2, r7, r6
 800141c:	7812      	ldrb	r2, [r2, #0]
 800141e:	217f      	movs	r1, #127	; 0x7f
 8001420:	400a      	ands	r2, r1
 8001422:	701a      	strb	r2, [r3, #0]
		sendCommand(cmd, &args[index], numArgs, hspi);
 8001424:	0005      	movs	r5, r0
 8001426:	183b      	adds	r3, r7, r0
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	18d1      	adds	r1, r2, r3
 800142e:	19bb      	adds	r3, r7, r6
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b29a      	uxth	r2, r3
 8001434:	683c      	ldr	r4, [r7, #0]
 8001436:	230a      	movs	r3, #10
 8001438:	18fb      	adds	r3, r7, r3
 800143a:	7818      	ldrb	r0, [r3, #0]
 800143c:	0023      	movs	r3, r4
 800143e:	f7ff ff77 	bl	8001330 <sendCommand>
		index += numArgs;
 8001442:	0028      	movs	r0, r5
 8001444:	183b      	adds	r3, r7, r0
 8001446:	1839      	adds	r1, r7, r0
 8001448:	19ba      	adds	r2, r7, r6
 800144a:	7809      	ldrb	r1, [r1, #0]
 800144c:	7812      	ldrb	r2, [r2, #0]
 800144e:	188a      	adds	r2, r1, r2
 8001450:	701a      	strb	r2, [r3, #0]

		if(ms) {
 8001452:	210c      	movs	r1, #12
 8001454:	187b      	adds	r3, r7, r1
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d01b      	beq.n	8001494 <displayInit+0xee>
			ms = args[index++];			// Read post-command delay time (ms)
 800145c:	220b      	movs	r2, #11
 800145e:	18bb      	adds	r3, r7, r2
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	18ba      	adds	r2, r7, r2
 8001464:	1c59      	adds	r1, r3, #1
 8001466:	7011      	strb	r1, [r2, #0]
 8001468:	001a      	movs	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	189b      	adds	r3, r3, r2
 800146e:	781a      	ldrb	r2, [r3, #0]
 8001470:	210c      	movs	r1, #12
 8001472:	187b      	adds	r3, r7, r1
 8001474:	801a      	strh	r2, [r3, #0]
			if(ms == 255) ms = 500;		// If 255, delay for 500 ms
 8001476:	187b      	adds	r3, r7, r1
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	2bff      	cmp	r3, #255	; 0xff
 800147c:	d104      	bne.n	8001488 <displayInit+0xe2>
 800147e:	230c      	movs	r3, #12
 8001480:	18fb      	adds	r3, r7, r3
 8001482:	22fa      	movs	r2, #250	; 0xfa
 8001484:	0052      	lsls	r2, r2, #1
 8001486:	801a      	strh	r2, [r3, #0]
			HAL_Delay(ms);
 8001488:	230c      	movs	r3, #12
 800148a:	18fb      	adds	r3, r7, r3
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	0018      	movs	r0, r3
 8001490:	f002 ff4a 	bl	8004328 <HAL_Delay>
	while(numCommands--) {					// For each command...
 8001494:	220f      	movs	r2, #15
 8001496:	18bb      	adds	r3, r7, r2
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	18ba      	adds	r2, r7, r2
 800149c:	1e59      	subs	r1, r3, #1
 800149e:	7011      	strb	r1, [r2, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d198      	bne.n	80013d6 <displayInit+0x30>
		}
	}

	data = 0xC0;
 80014a4:	2108      	movs	r1, #8
 80014a6:	187b      	adds	r3, r7, r1
 80014a8:	22c0      	movs	r2, #192	; 0xc0
 80014aa:	701a      	strb	r2, [r3, #0]
	sendCommand(ST77XX_MADCTL, &data, 1, hspi);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	1879      	adds	r1, r7, r1
 80014b0:	2201      	movs	r2, #1
 80014b2:	2036      	movs	r0, #54	; 0x36
 80014b4:	f7ff ff3c 	bl	8001330 <sendCommand>
}
 80014b8:	46c0      	nop			; (mov r8, r8)
 80014ba:	46bd      	mov	sp, r7
 80014bc:	b005      	add	sp, #20
 80014be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014c0 <TFT_startup>:

void TFT_startup(SPI_HandleTypeDef *hspi) {
 80014c0:	b590      	push	{r4, r7, lr}
 80014c2:	b0a3      	sub	sp, #140	; 0x8c
 80014c4:	af02      	add	r7, sp, #8
 80014c6:	6078      	str	r0, [r7, #4]
	// array pulled from Adafruit's library for ST7735R driver
	uint8_t initCommands[] = {
 80014c8:	240c      	movs	r4, #12
 80014ca:	193a      	adds	r2, r7, r4
 80014cc:	4b14      	ldr	r3, [pc, #80]	; (8001520 <TFT_startup+0x60>)
 80014ce:	0010      	movs	r0, r2
 80014d0:	0019      	movs	r1, r3
 80014d2:	2371      	movs	r3, #113	; 0x71
 80014d4:	001a      	movs	r2, r3
 80014d6:	f006 fee5 	bl	80082a4 <memcpy>
			10,                         //     10 ms delay
		ST77XX_DISPON,    ST_CMD_DELAY, //  4: Main screen turn on, no args w/delay
			100	                        //     100 ms delay
	};

	displayInit(initCommands, hspi);
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	193b      	adds	r3, r7, r4
 80014de:	0011      	movs	r1, r2
 80014e0:	0018      	movs	r0, r3
 80014e2:	f7ff ff60 	bl	80013a6 <displayInit>
	setAddrWindow(0, 0, WIDTH, HEIGHT, hspi);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	23a0      	movs	r3, #160	; 0xa0
 80014ec:	2280      	movs	r2, #128	; 0x80
 80014ee:	2100      	movs	r1, #0
 80014f0:	2000      	movs	r0, #0
 80014f2:	f000 f821 	bl	8001538 <setAddrWindow>

	// set the global variables
	cursorX = 0;
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <TFT_startup+0x64>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
	cursorY = 0;
 80014fc:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <TFT_startup+0x68>)
 80014fe:	2200      	movs	r2, #0
 8001500:	701a      	strb	r2, [r3, #0]
	textSize = 1;
 8001502:	4b0a      	ldr	r3, [pc, #40]	; (800152c <TFT_startup+0x6c>)
 8001504:	2201      	movs	r2, #1
 8001506:	701a      	strb	r2, [r3, #0]
	textColor = ST77XX_BLACK;
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <TFT_startup+0x70>)
 800150a:	2200      	movs	r2, #0
 800150c:	801a      	strh	r2, [r3, #0]
	bg = ST77XX_WHITE;
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <TFT_startup+0x74>)
 8001510:	2201      	movs	r2, #1
 8001512:	4252      	negs	r2, r2
 8001514:	801a      	strh	r2, [r3, #0]
}
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	46bd      	mov	sp, r7
 800151a:	b021      	add	sp, #132	; 0x84
 800151c:	bd90      	pop	{r4, r7, pc}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	080083e0 	.word	0x080083e0
 8001524:	20000088 	.word	0x20000088
 8001528:	20000089 	.word	0x20000089
 800152c:	2000008a 	.word	0x2000008a
 8001530:	2000008c 	.word	0x2000008c
 8001534:	2000008e 	.word	0x2000008e

08001538 <setAddrWindow>:

// draw something: set addr window -> write to ram memory
// sets specific area on display to write pixels to
// x and y for upper left corner, w for width, h for height
void setAddrWindow(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SPI_HandleTypeDef *hspi) {
 8001538:	b5b0      	push	{r4, r5, r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	0005      	movs	r5, r0
 8001540:	000c      	movs	r4, r1
 8001542:	0010      	movs	r0, r2
 8001544:	0019      	movs	r1, r3
 8001546:	1dbb      	adds	r3, r7, #6
 8001548:	1c2a      	adds	r2, r5, #0
 800154a:	801a      	strh	r2, [r3, #0]
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	1c22      	adds	r2, r4, #0
 8001550:	801a      	strh	r2, [r3, #0]
 8001552:	1cbb      	adds	r3, r7, #2
 8001554:	1c02      	adds	r2, r0, #0
 8001556:	801a      	strh	r2, [r3, #0]
 8001558:	003b      	movs	r3, r7
 800155a:	1c0a      	adds	r2, r1, #0
 800155c:	801a      	strh	r2, [r3, #0]
	// building 32-bit window args
	uint8_t temp[4];
	temp[0] = (x & (0xFF00)) >> 8;
 800155e:	1dbb      	adds	r3, r7, #6
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	0a1b      	lsrs	r3, r3, #8
 8001564:	b29b      	uxth	r3, r3
 8001566:	b2da      	uxtb	r2, r3
 8001568:	210c      	movs	r1, #12
 800156a:	187b      	adds	r3, r7, r1
 800156c:	701a      	strb	r2, [r3, #0]
	temp[1] = x & (0xFF);
 800156e:	1dbb      	adds	r3, r7, #6
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	b2da      	uxtb	r2, r3
 8001574:	187b      	adds	r3, r7, r1
 8001576:	705a      	strb	r2, [r3, #1]
	temp[2] = ((x+w-1) & (0xFF00)) >> 8;
 8001578:	1dbb      	adds	r3, r7, #6
 800157a:	881a      	ldrh	r2, [r3, #0]
 800157c:	1cbb      	adds	r3, r7, #2
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	18d3      	adds	r3, r2, r3
 8001582:	3b01      	subs	r3, #1
 8001584:	121b      	asrs	r3, r3, #8
 8001586:	b2da      	uxtb	r2, r3
 8001588:	187b      	adds	r3, r7, r1
 800158a:	709a      	strb	r2, [r3, #2]
	temp[3] = (x+w-1) & (0xFF);
 800158c:	1dbb      	adds	r3, r7, #6
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	b2da      	uxtb	r2, r3
 8001592:	1cbb      	adds	r3, r7, #2
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	b2db      	uxtb	r3, r3
 8001598:	18d3      	adds	r3, r2, r3
 800159a:	b2db      	uxtb	r3, r3
 800159c:	3b01      	subs	r3, #1
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	187b      	adds	r3, r7, r1
 80015a2:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_CASET, temp, 4, hspi);
 80015a4:	6a3b      	ldr	r3, [r7, #32]
 80015a6:	000c      	movs	r4, r1
 80015a8:	1879      	adds	r1, r7, r1
 80015aa:	2204      	movs	r2, #4
 80015ac:	202a      	movs	r0, #42	; 0x2a
 80015ae:	f7ff febf 	bl	8001330 <sendCommand>

	temp[0] = (y & (0xFF00)) >> 8;
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	0a1b      	lsrs	r3, r3, #8
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	0021      	movs	r1, r4
 80015be:	187b      	adds	r3, r7, r1
 80015c0:	701a      	strb	r2, [r3, #0]
	temp[1] = y & (0xFF);
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	b2da      	uxtb	r2, r3
 80015c8:	187b      	adds	r3, r7, r1
 80015ca:	705a      	strb	r2, [r3, #1]
	temp[2] = ((y+h-1) & (0xFF00)) >> 8;
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	881a      	ldrh	r2, [r3, #0]
 80015d0:	003b      	movs	r3, r7
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	18d3      	adds	r3, r2, r3
 80015d6:	3b01      	subs	r3, #1
 80015d8:	121b      	asrs	r3, r3, #8
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	187b      	adds	r3, r7, r1
 80015de:	709a      	strb	r2, [r3, #2]
	temp[3] = (y+h-1) & (0x00FF);
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	003b      	movs	r3, r7
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	18d3      	adds	r3, r2, r3
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	3b01      	subs	r3, #1
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	187b      	adds	r3, r7, r1
 80015f6:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_RASET, temp, 4, hspi);
 80015f8:	6a3b      	ldr	r3, [r7, #32]
 80015fa:	1879      	adds	r1, r7, r1
 80015fc:	2204      	movs	r2, #4
 80015fe:	202b      	movs	r0, #43	; 0x2b
 8001600:	f7ff fe96 	bl	8001330 <sendCommand>
}
 8001604:	46c0      	nop			; (mov r8, r8)
 8001606:	46bd      	mov	sp, r7
 8001608:	b004      	add	sp, #16
 800160a:	bdb0      	pop	{r4, r5, r7, pc}

0800160c <colorFixer>:
// 8-bit spi bus wants msb first; in array, lowest index is sent first
// because ARM is little-endian
//   for 16-bit value, it sends lower byte before upper byte
//   resulting in device thinking lower byte is upper byte
// this switches byte order around
uint16_t colorFixer(uint16_t color) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	0002      	movs	r2, r0
 8001614:	1dbb      	adds	r3, r7, #6
 8001616:	801a      	strh	r2, [r3, #0]
	uint8_t a = color & 0xFF;
 8001618:	210f      	movs	r1, #15
 800161a:	187b      	adds	r3, r7, r1
 800161c:	1dba      	adds	r2, r7, #6
 800161e:	8812      	ldrh	r2, [r2, #0]
 8001620:	701a      	strb	r2, [r3, #0]
	uint8_t b = (color & 0xFF00) >> 8;
 8001622:	1dbb      	adds	r3, r7, #6
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	0a1b      	lsrs	r3, r3, #8
 8001628:	b29a      	uxth	r2, r3
 800162a:	200e      	movs	r0, #14
 800162c:	183b      	adds	r3, r7, r0
 800162e:	701a      	strb	r2, [r3, #0]
	uint16_t ret = (a << 8) | b;
 8001630:	187b      	adds	r3, r7, r1
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	021b      	lsls	r3, r3, #8
 8001636:	b21a      	sxth	r2, r3
 8001638:	183b      	adds	r3, r7, r0
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	b21b      	sxth	r3, r3
 800163e:	4313      	orrs	r3, r2
 8001640:	b21a      	sxth	r2, r3
 8001642:	210c      	movs	r1, #12
 8001644:	187b      	adds	r3, r7, r1
 8001646:	801a      	strh	r2, [r3, #0]

	return ret;
 8001648:	187b      	adds	r3, r7, r1
 800164a:	881b      	ldrh	r3, [r3, #0]
}
 800164c:	0018      	movs	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	b004      	add	sp, #16
 8001652:	bd80      	pop	{r7, pc}

08001654 <drawPixel>:

// draw a pixel on specified coordinates
void drawPixel(uint8_t x, uint8_t y, uint16_t color, SPI_HandleTypeDef *hspi) {
 8001654:	b590      	push	{r4, r7, lr}
 8001656:	b087      	sub	sp, #28
 8001658:	af02      	add	r7, sp, #8
 800165a:	0004      	movs	r4, r0
 800165c:	0008      	movs	r0, r1
 800165e:	0011      	movs	r1, r2
 8001660:	603b      	str	r3, [r7, #0]
 8001662:	1dfb      	adds	r3, r7, #7
 8001664:	1c22      	adds	r2, r4, #0
 8001666:	701a      	strb	r2, [r3, #0]
 8001668:	1dbb      	adds	r3, r7, #6
 800166a:	1c02      	adds	r2, r0, #0
 800166c:	701a      	strb	r2, [r3, #0]
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	1c0a      	adds	r2, r1, #0
 8001672:	801a      	strh	r2, [r3, #0]
	// bounds checking
	// just don't draw if pixel is out of bounds
	if ((x > WIDTH) || (x < 0) || (y > HEIGHT) || (y < 0)) return;
 8001674:	1dfb      	adds	r3, r7, #7
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b80      	cmp	r3, #128	; 0x80
 800167a:	d820      	bhi.n	80016be <drawPixel+0x6a>
 800167c:	1dbb      	adds	r3, r7, #6
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2ba0      	cmp	r3, #160	; 0xa0
 8001682:	d81c      	bhi.n	80016be <drawPixel+0x6a>

	setAddrWindow(x, y, 1, 1, hspi);
 8001684:	1dfb      	adds	r3, r7, #7
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	b298      	uxth	r0, r3
 800168a:	1dbb      	adds	r3, r7, #6
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	b299      	uxth	r1, r3
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	2301      	movs	r3, #1
 8001696:	2201      	movs	r2, #1
 8001698:	f7ff ff4e 	bl	8001538 <setAddrWindow>
	uint16_t tempColor = colorFixer(color);		// else we're using address of something passed by value
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	0018      	movs	r0, r3
 80016a2:	f7ff ffb3 	bl	800160c <colorFixer>
 80016a6:	0003      	movs	r3, r0
 80016a8:	001a      	movs	r2, r3
 80016aa:	210e      	movs	r1, #14
 80016ac:	187b      	adds	r3, r7, r1
 80016ae:	801a      	strh	r2, [r3, #0]
	sendCommand(ST77XX_RAMWR, &tempColor, 2, hspi);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	1879      	adds	r1, r7, r1
 80016b4:	2202      	movs	r2, #2
 80016b6:	202c      	movs	r0, #44	; 0x2c
 80016b8:	f7ff fe3a 	bl	8001330 <sendCommand>
 80016bc:	e000      	b.n	80016c0 <drawPixel+0x6c>
	if ((x > WIDTH) || (x < 0) || (y > HEIGHT) || (y < 0)) return;
 80016be:	46c0      	nop			; (mov r8, r8)
}
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b005      	add	sp, #20
 80016c4:	bd90      	pop	{r4, r7, pc}

080016c6 <drawHLine>:

// draw a horizontal line. coordinates are for left point
void drawHLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 80016c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016c8:	b091      	sub	sp, #68	; 0x44
 80016ca:	af02      	add	r7, sp, #8
 80016cc:	000c      	movs	r4, r1
 80016ce:	0016      	movs	r6, r2
 80016d0:	0019      	movs	r1, r3
 80016d2:	2327      	movs	r3, #39	; 0x27
 80016d4:	18fa      	adds	r2, r7, r3
 80016d6:	1c03      	adds	r3, r0, #0
 80016d8:	7013      	strb	r3, [r2, #0]
 80016da:	2326      	movs	r3, #38	; 0x26
 80016dc:	18fb      	adds	r3, r7, r3
 80016de:	1c22      	adds	r2, r4, #0
 80016e0:	701a      	strb	r2, [r3, #0]
 80016e2:	2325      	movs	r3, #37	; 0x25
 80016e4:	18fb      	adds	r3, r7, r3
 80016e6:	1c32      	adds	r2, r6, #0
 80016e8:	701a      	strb	r2, [r3, #0]
 80016ea:	2322      	movs	r3, #34	; 0x22
 80016ec:	18fb      	adds	r3, r7, r3
 80016ee:	1c0a      	adds	r2, r1, #0
 80016f0:	801a      	strh	r2, [r3, #0]
 80016f2:	466b      	mov	r3, sp
 80016f4:	001e      	movs	r6, r3
	// bounds checking
	if (x < 0) x = 0;						// don't set x out of bounds
	if (x > WIDTH) x = WIDTH;
 80016f6:	2327      	movs	r3, #39	; 0x27
 80016f8:	18fb      	adds	r3, r7, r3
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b80      	cmp	r3, #128	; 0x80
 80016fe:	d903      	bls.n	8001708 <drawHLine+0x42>
 8001700:	2327      	movs	r3, #39	; 0x27
 8001702:	18fb      	adds	r3, r7, r3
 8001704:	2280      	movs	r2, #128	; 0x80
 8001706:	701a      	strb	r2, [r3, #0]
	if (x+size > WIDTH) size = WIDTH-x;		// don't set size so line draws out of bounds
 8001708:	2327      	movs	r3, #39	; 0x27
 800170a:	18fb      	adds	r3, r7, r3
 800170c:	781a      	ldrb	r2, [r3, #0]
 800170e:	2325      	movs	r3, #37	; 0x25
 8001710:	18fb      	adds	r3, r7, r3
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	18d3      	adds	r3, r2, r3
 8001716:	2b80      	cmp	r3, #128	; 0x80
 8001718:	dd08      	ble.n	800172c <drawHLine+0x66>
 800171a:	2325      	movs	r3, #37	; 0x25
 800171c:	18fb      	adds	r3, r7, r3
 800171e:	2227      	movs	r2, #39	; 0x27
 8001720:	18ba      	adds	r2, r7, r2
 8001722:	7812      	ldrb	r2, [r2, #0]
 8001724:	2180      	movs	r1, #128	; 0x80
 8001726:	4249      	negs	r1, r1
 8001728:	1a8a      	subs	r2, r1, r2
 800172a:	701a      	strb	r2, [r3, #0]
	if (x+size < 0) size = 0-x;
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 800172c:	2326      	movs	r3, #38	; 0x26
 800172e:	18fb      	adds	r3, r7, r3
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2ba0      	cmp	r3, #160	; 0xa0
 8001734:	d868      	bhi.n	8001808 <drawHLine+0x142>

	setAddrWindow(x, y, size, 1, hspi);
 8001736:	2327      	movs	r3, #39	; 0x27
 8001738:	18fb      	adds	r3, r7, r3
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	b298      	uxth	r0, r3
 800173e:	2326      	movs	r3, #38	; 0x26
 8001740:	18fb      	adds	r3, r7, r3
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	b299      	uxth	r1, r3
 8001746:	2325      	movs	r3, #37	; 0x25
 8001748:	18fb      	adds	r3, r7, r3
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	b29a      	uxth	r2, r3
 800174e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	2301      	movs	r3, #1
 8001754:	f7ff fef0 	bl	8001538 <setAddrWindow>
	uint16_t colors[size];
 8001758:	2325      	movs	r3, #37	; 0x25
 800175a:	18fb      	adds	r3, r7, r3
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	001a      	movs	r2, r3
 8001760:	3a01      	subs	r2, #1
 8001762:	633a      	str	r2, [r7, #48]	; 0x30
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	2200      	movs	r2, #0
 8001768:	60fa      	str	r2, [r7, #12]
 800176a:	68b8      	ldr	r0, [r7, #8]
 800176c:	68f9      	ldr	r1, [r7, #12]
 800176e:	0002      	movs	r2, r0
 8001770:	0f12      	lsrs	r2, r2, #28
 8001772:	000c      	movs	r4, r1
 8001774:	0124      	lsls	r4, r4, #4
 8001776:	61fc      	str	r4, [r7, #28]
 8001778:	69fc      	ldr	r4, [r7, #28]
 800177a:	4314      	orrs	r4, r2
 800177c:	61fc      	str	r4, [r7, #28]
 800177e:	0002      	movs	r2, r0
 8001780:	0112      	lsls	r2, r2, #4
 8001782:	61ba      	str	r2, [r7, #24]
 8001784:	603b      	str	r3, [r7, #0]
 8001786:	2200      	movs	r2, #0
 8001788:	607a      	str	r2, [r7, #4]
 800178a:	6838      	ldr	r0, [r7, #0]
 800178c:	6879      	ldr	r1, [r7, #4]
 800178e:	0002      	movs	r2, r0
 8001790:	0f12      	lsrs	r2, r2, #28
 8001792:	000c      	movs	r4, r1
 8001794:	0124      	lsls	r4, r4, #4
 8001796:	617c      	str	r4, [r7, #20]
 8001798:	697c      	ldr	r4, [r7, #20]
 800179a:	4314      	orrs	r4, r2
 800179c:	617c      	str	r4, [r7, #20]
 800179e:	0002      	movs	r2, r0
 80017a0:	0112      	lsls	r2, r2, #4
 80017a2:	613a      	str	r2, [r7, #16]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	3301      	adds	r3, #1
 80017a8:	3307      	adds	r3, #7
 80017aa:	08db      	lsrs	r3, r3, #3
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	466a      	mov	r2, sp
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	469d      	mov	sp, r3
 80017b4:	ab02      	add	r3, sp, #8
 80017b6:	3301      	adds	r3, #1
 80017b8:	085b      	lsrs	r3, r3, #1
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {
 80017be:	2300      	movs	r3, #0
 80017c0:	637b      	str	r3, [r7, #52]	; 0x34
 80017c2:	e00e      	b.n	80017e2 <drawHLine+0x11c>
		colors[i] = colorFixer(color);
 80017c4:	2322      	movs	r3, #34	; 0x22
 80017c6:	18fb      	adds	r3, r7, r3
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	0018      	movs	r0, r3
 80017cc:	f7ff ff1e 	bl	800160c <colorFixer>
 80017d0:	0003      	movs	r3, r0
 80017d2:	0019      	movs	r1, r3
 80017d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017d8:	0052      	lsls	r2, r2, #1
 80017da:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {
 80017dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017de:	3301      	adds	r3, #1
 80017e0:	637b      	str	r3, [r7, #52]	; 0x34
 80017e2:	2325      	movs	r3, #37	; 0x25
 80017e4:	18fb      	adds	r3, r7, r3
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017ea:	429a      	cmp	r2, r3
 80017ec:	dbea      	blt.n	80017c4 <drawHLine+0xfe>
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 80017ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80017f0:	2325      	movs	r3, #37	; 0x25
 80017f2:	18fb      	adds	r3, r7, r3
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	18db      	adds	r3, r3, r3
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017fe:	202c      	movs	r0, #44	; 0x2c
 8001800:	f7ff fd96 	bl	8001330 <sendCommand>
 8001804:	46b5      	mov	sp, r6
 8001806:	e001      	b.n	800180c <drawHLine+0x146>
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 8001808:	46c0      	nop			; (mov r8, r8)
 800180a:	46b5      	mov	sp, r6
}
 800180c:	46bd      	mov	sp, r7
 800180e:	b00f      	add	sp, #60	; 0x3c
 8001810:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001812 <drawVLine>:

// draws a vertical line. coordinates are for top point
void drawVLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 8001812:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001814:	b091      	sub	sp, #68	; 0x44
 8001816:	af02      	add	r7, sp, #8
 8001818:	000c      	movs	r4, r1
 800181a:	0016      	movs	r6, r2
 800181c:	0019      	movs	r1, r3
 800181e:	2327      	movs	r3, #39	; 0x27
 8001820:	18fa      	adds	r2, r7, r3
 8001822:	1c03      	adds	r3, r0, #0
 8001824:	7013      	strb	r3, [r2, #0]
 8001826:	2326      	movs	r3, #38	; 0x26
 8001828:	18fb      	adds	r3, r7, r3
 800182a:	1c22      	adds	r2, r4, #0
 800182c:	701a      	strb	r2, [r3, #0]
 800182e:	2325      	movs	r3, #37	; 0x25
 8001830:	18fb      	adds	r3, r7, r3
 8001832:	1c32      	adds	r2, r6, #0
 8001834:	701a      	strb	r2, [r3, #0]
 8001836:	2322      	movs	r3, #34	; 0x22
 8001838:	18fb      	adds	r3, r7, r3
 800183a:	1c0a      	adds	r2, r1, #0
 800183c:	801a      	strh	r2, [r3, #0]
 800183e:	466b      	mov	r3, sp
 8001840:	001e      	movs	r6, r3
	// bounds checking
	if (y < 0) y = 0;						// don't set y out of bounds
	if (y > HEIGHT) y = HEIGHT;
 8001842:	2326      	movs	r3, #38	; 0x26
 8001844:	18fb      	adds	r3, r7, r3
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2ba0      	cmp	r3, #160	; 0xa0
 800184a:	d903      	bls.n	8001854 <drawVLine+0x42>
 800184c:	2326      	movs	r3, #38	; 0x26
 800184e:	18fb      	adds	r3, r7, r3
 8001850:	22a0      	movs	r2, #160	; 0xa0
 8001852:	701a      	strb	r2, [r3, #0]
	if (y+size > HEIGHT) size = HEIGHT-y;	// don't set size so line draws out of bounds
 8001854:	2326      	movs	r3, #38	; 0x26
 8001856:	18fb      	adds	r3, r7, r3
 8001858:	781a      	ldrb	r2, [r3, #0]
 800185a:	2325      	movs	r3, #37	; 0x25
 800185c:	18fb      	adds	r3, r7, r3
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	18d3      	adds	r3, r2, r3
 8001862:	2ba0      	cmp	r3, #160	; 0xa0
 8001864:	dd08      	ble.n	8001878 <drawVLine+0x66>
 8001866:	2325      	movs	r3, #37	; 0x25
 8001868:	18fb      	adds	r3, r7, r3
 800186a:	2226      	movs	r2, #38	; 0x26
 800186c:	18ba      	adds	r2, r7, r2
 800186e:	7812      	ldrb	r2, [r2, #0]
 8001870:	2160      	movs	r1, #96	; 0x60
 8001872:	4249      	negs	r1, r1
 8001874:	1a8a      	subs	r2, r1, r2
 8001876:	701a      	strb	r2, [r3, #0]
	if (y+size < 0) size = 0-y;
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if x is out of bounds
 8001878:	2327      	movs	r3, #39	; 0x27
 800187a:	18fb      	adds	r3, r7, r3
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b80      	cmp	r3, #128	; 0x80
 8001880:	d869      	bhi.n	8001956 <drawVLine+0x144>

	setAddrWindow(x, y, 1, size, hspi);
 8001882:	2327      	movs	r3, #39	; 0x27
 8001884:	18fb      	adds	r3, r7, r3
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	b298      	uxth	r0, r3
 800188a:	2326      	movs	r3, #38	; 0x26
 800188c:	18fb      	adds	r3, r7, r3
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	b299      	uxth	r1, r3
 8001892:	2325      	movs	r3, #37	; 0x25
 8001894:	18fb      	adds	r3, r7, r3
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	b29a      	uxth	r2, r3
 800189a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	0013      	movs	r3, r2
 80018a0:	2201      	movs	r2, #1
 80018a2:	f7ff fe49 	bl	8001538 <setAddrWindow>
	uint16_t colors[size];
 80018a6:	2325      	movs	r3, #37	; 0x25
 80018a8:	18fb      	adds	r3, r7, r3
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	001a      	movs	r2, r3
 80018ae:	3a01      	subs	r2, #1
 80018b0:	633a      	str	r2, [r7, #48]	; 0x30
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	2200      	movs	r2, #0
 80018b6:	60fa      	str	r2, [r7, #12]
 80018b8:	68b8      	ldr	r0, [r7, #8]
 80018ba:	68f9      	ldr	r1, [r7, #12]
 80018bc:	0002      	movs	r2, r0
 80018be:	0f12      	lsrs	r2, r2, #28
 80018c0:	000c      	movs	r4, r1
 80018c2:	0124      	lsls	r4, r4, #4
 80018c4:	61fc      	str	r4, [r7, #28]
 80018c6:	69fc      	ldr	r4, [r7, #28]
 80018c8:	4314      	orrs	r4, r2
 80018ca:	61fc      	str	r4, [r7, #28]
 80018cc:	0002      	movs	r2, r0
 80018ce:	0112      	lsls	r2, r2, #4
 80018d0:	61ba      	str	r2, [r7, #24]
 80018d2:	603b      	str	r3, [r7, #0]
 80018d4:	2200      	movs	r2, #0
 80018d6:	607a      	str	r2, [r7, #4]
 80018d8:	6838      	ldr	r0, [r7, #0]
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	0002      	movs	r2, r0
 80018de:	0f12      	lsrs	r2, r2, #28
 80018e0:	000c      	movs	r4, r1
 80018e2:	0124      	lsls	r4, r4, #4
 80018e4:	617c      	str	r4, [r7, #20]
 80018e6:	697c      	ldr	r4, [r7, #20]
 80018e8:	4314      	orrs	r4, r2
 80018ea:	617c      	str	r4, [r7, #20]
 80018ec:	0002      	movs	r2, r0
 80018ee:	0112      	lsls	r2, r2, #4
 80018f0:	613a      	str	r2, [r7, #16]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	3301      	adds	r3, #1
 80018f6:	3307      	adds	r3, #7
 80018f8:	08db      	lsrs	r3, r3, #3
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	466a      	mov	r2, sp
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	469d      	mov	sp, r3
 8001902:	ab02      	add	r3, sp, #8
 8001904:	3301      	adds	r3, #1
 8001906:	085b      	lsrs	r3, r3, #1
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {
 800190c:	2300      	movs	r3, #0
 800190e:	637b      	str	r3, [r7, #52]	; 0x34
 8001910:	e00e      	b.n	8001930 <drawVLine+0x11e>
		colors[i] = colorFixer(color);
 8001912:	2322      	movs	r3, #34	; 0x22
 8001914:	18fb      	adds	r3, r7, r3
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	0018      	movs	r0, r3
 800191a:	f7ff fe77 	bl	800160c <colorFixer>
 800191e:	0003      	movs	r3, r0
 8001920:	0019      	movs	r1, r3
 8001922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001924:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001926:	0052      	lsls	r2, r2, #1
 8001928:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {
 800192a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800192c:	3301      	adds	r3, #1
 800192e:	637b      	str	r3, [r7, #52]	; 0x34
 8001930:	2325      	movs	r3, #37	; 0x25
 8001932:	18fb      	adds	r3, r7, r3
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001938:	429a      	cmp	r2, r3
 800193a:	dbea      	blt.n	8001912 <drawVLine+0x100>
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 800193c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800193e:	2325      	movs	r3, #37	; 0x25
 8001940:	18fb      	adds	r3, r7, r3
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	b29b      	uxth	r3, r3
 8001946:	18db      	adds	r3, r3, r3
 8001948:	b29a      	uxth	r2, r3
 800194a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800194c:	202c      	movs	r0, #44	; 0x2c
 800194e:	f7ff fcef 	bl	8001330 <sendCommand>
 8001952:	46b5      	mov	sp, r6
 8001954:	e001      	b.n	800195a <drawVLine+0x148>
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if x is out of bounds
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	46b5      	mov	sp, r6
}
 800195a:	46bd      	mov	sp, r7
 800195c:	b00f      	add	sp, #60	; 0x3c
 800195e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001960 <drawBuffer>:

// draws on a specific region with input 16-bit buffer
void drawBuffer(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t *buffer, uint16_t bufferSize, SPI_HandleTypeDef *hspi) {
 8001960:	b5b0      	push	{r4, r5, r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af02      	add	r7, sp, #8
 8001966:	0005      	movs	r5, r0
 8001968:	000c      	movs	r4, r1
 800196a:	0010      	movs	r0, r2
 800196c:	0019      	movs	r1, r3
 800196e:	1dfb      	adds	r3, r7, #7
 8001970:	1c2a      	adds	r2, r5, #0
 8001972:	701a      	strb	r2, [r3, #0]
 8001974:	1dbb      	adds	r3, r7, #6
 8001976:	1c22      	adds	r2, r4, #0
 8001978:	701a      	strb	r2, [r3, #0]
 800197a:	1d7b      	adds	r3, r7, #5
 800197c:	1c02      	adds	r2, r0, #0
 800197e:	701a      	strb	r2, [r3, #0]
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	1c0a      	adds	r2, r1, #0
 8001984:	701a      	strb	r2, [r3, #0]
	if (x+w > WIDTH || y+h > HEIGHT) return;
 8001986:	1dfb      	adds	r3, r7, #7
 8001988:	781a      	ldrb	r2, [r3, #0]
 800198a:	1d7b      	adds	r3, r7, #5
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	18d3      	adds	r3, r2, r3
 8001990:	2b80      	cmp	r3, #128	; 0x80
 8001992:	dc29      	bgt.n	80019e8 <drawBuffer+0x88>
 8001994:	1dbb      	adds	r3, r7, #6
 8001996:	781a      	ldrb	r2, [r3, #0]
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	18d3      	adds	r3, r2, r3
 800199e:	2ba0      	cmp	r3, #160	; 0xa0
 80019a0:	dc22      	bgt.n	80019e8 <drawBuffer+0x88>

	// also don't call this with buffer size too big bc there's not enough ram for all pixels of display
	if (bufferSize > 10240) return;			// about 1/2 of total system ram
 80019a2:	231c      	movs	r3, #28
 80019a4:	18fb      	adds	r3, r7, r3
 80019a6:	881a      	ldrh	r2, [r3, #0]
 80019a8:	23a0      	movs	r3, #160	; 0xa0
 80019aa:	019b      	lsls	r3, r3, #6
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d81d      	bhi.n	80019ec <drawBuffer+0x8c>

	setAddrWindow(x, y, w, h, hspi);
 80019b0:	1dfb      	adds	r3, r7, #7
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	b298      	uxth	r0, r3
 80019b6:	1dbb      	adds	r3, r7, #6
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	b299      	uxth	r1, r3
 80019bc:	1d7b      	adds	r3, r7, #5
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	b29c      	uxth	r4, r3
 80019c8:	6a3b      	ldr	r3, [r7, #32]
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	0023      	movs	r3, r4
 80019ce:	f7ff fdb3 	bl	8001538 <setAddrWindow>
	sendCommand(ST77XX_RAMWR, buffer, bufferSize*2, hspi);
 80019d2:	231c      	movs	r3, #28
 80019d4:	18fb      	adds	r3, r7, r3
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	18db      	adds	r3, r3, r3
 80019da:	b29a      	uxth	r2, r3
 80019dc:	6a3b      	ldr	r3, [r7, #32]
 80019de:	69b9      	ldr	r1, [r7, #24]
 80019e0:	202c      	movs	r0, #44	; 0x2c
 80019e2:	f7ff fca5 	bl	8001330 <sendCommand>
 80019e6:	e002      	b.n	80019ee <drawBuffer+0x8e>
	if (x+w > WIDTH || y+h > HEIGHT) return;
 80019e8:	46c0      	nop			; (mov r8, r8)
 80019ea:	e000      	b.n	80019ee <drawBuffer+0x8e>
	if (bufferSize > 10240) return;			// about 1/2 of total system ram
 80019ec:	46c0      	nop			; (mov r8, r8)
}
 80019ee:	46bd      	mov	sp, r7
 80019f0:	b002      	add	sp, #8
 80019f2:	bdb0      	pop	{r4, r5, r7, pc}

080019f4 <drawLine>:
// ---- end of base graphics functions

// ---- basic shapes and lines ----
void drawLine(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint16_t color, SPI_HandleTypeDef *hspi) {
 80019f4:	b5b0      	push	{r4, r5, r7, lr}
 80019f6:	b08c      	sub	sp, #48	; 0x30
 80019f8:	af02      	add	r7, sp, #8
 80019fa:	0005      	movs	r5, r0
 80019fc:	000c      	movs	r4, r1
 80019fe:	0010      	movs	r0, r2
 8001a00:	0019      	movs	r1, r3
 8001a02:	1dfb      	adds	r3, r7, #7
 8001a04:	1c2a      	adds	r2, r5, #0
 8001a06:	701a      	strb	r2, [r3, #0]
 8001a08:	1dbb      	adds	r3, r7, #6
 8001a0a:	1c22      	adds	r2, r4, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
 8001a0e:	1d7b      	adds	r3, r7, #5
 8001a10:	1c02      	adds	r2, r0, #0
 8001a12:	701a      	strb	r2, [r3, #0]
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	1c0a      	adds	r2, r1, #0
 8001a18:	701a      	strb	r2, [r3, #0]
	// based on Bresenham's line drawing algorithm (thx Adafruit and Wikipedia)
	if (x0 == x1) {
 8001a1a:	1dfa      	adds	r2, r7, #7
 8001a1c:	1d7b      	adds	r3, r7, #5
 8001a1e:	7812      	ldrb	r2, [r2, #0]
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d115      	bne.n	8001a52 <drawLine+0x5e>
		drawVLine(x0, y0, abs(y0-y1), color, hspi);
 8001a26:	1dbb      	adds	r3, r7, #6
 8001a28:	781a      	ldrb	r2, [r3, #0]
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	17da      	asrs	r2, r3, #31
 8001a32:	189b      	adds	r3, r3, r2
 8001a34:	4053      	eors	r3, r2
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	2338      	movs	r3, #56	; 0x38
 8001a3a:	18fb      	adds	r3, r7, r3
 8001a3c:	881c      	ldrh	r4, [r3, #0]
 8001a3e:	1dbb      	adds	r3, r7, #6
 8001a40:	7819      	ldrb	r1, [r3, #0]
 8001a42:	1dfb      	adds	r3, r7, #7
 8001a44:	7818      	ldrb	r0, [r3, #0]
 8001a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	0023      	movs	r3, r4
 8001a4c:	f7ff fee1 	bl	8001812 <drawVLine>
		return;
 8001a50:	e100      	b.n	8001c54 <drawLine+0x260>
	}
	if (y0 == y1) {
 8001a52:	1dba      	adds	r2, r7, #6
 8001a54:	1d3b      	adds	r3, r7, #4
 8001a56:	7812      	ldrb	r2, [r2, #0]
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d115      	bne.n	8001a8a <drawLine+0x96>
		drawHLine(x0, y0, abs(x0-y1), color, hspi);
 8001a5e:	1dfb      	adds	r3, r7, #7
 8001a60:	781a      	ldrb	r2, [r3, #0]
 8001a62:	1d3b      	adds	r3, r7, #4
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	17da      	asrs	r2, r3, #31
 8001a6a:	189b      	adds	r3, r3, r2
 8001a6c:	4053      	eors	r3, r2
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	2338      	movs	r3, #56	; 0x38
 8001a72:	18fb      	adds	r3, r7, r3
 8001a74:	881c      	ldrh	r4, [r3, #0]
 8001a76:	1dbb      	adds	r3, r7, #6
 8001a78:	7819      	ldrb	r1, [r3, #0]
 8001a7a:	1dfb      	adds	r3, r7, #7
 8001a7c:	7818      	ldrb	r0, [r3, #0]
 8001a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	0023      	movs	r3, r4
 8001a84:	f7ff fe1f 	bl	80016c6 <drawHLine>
		return;
 8001a88:	e0e4      	b.n	8001c54 <drawLine+0x260>
	}

	int isSteep = abs(y1-y0) > abs(x1-x0);
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	781a      	ldrb	r2, [r3, #0]
 8001a8e:	1dbb      	adds	r3, r7, #6
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	17d9      	asrs	r1, r3, #31
 8001a96:	185a      	adds	r2, r3, r1
 8001a98:	404a      	eors	r2, r1
 8001a9a:	1d7b      	adds	r3, r7, #5
 8001a9c:	7819      	ldrb	r1, [r3, #0]
 8001a9e:	1dfb      	adds	r3, r7, #7
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	1acb      	subs	r3, r1, r3
 8001aa4:	17d9      	asrs	r1, r3, #31
 8001aa6:	185b      	adds	r3, r3, r1
 8001aa8:	404b      	eors	r3, r1
 8001aaa:	2101      	movs	r1, #1
 8001aac:	429a      	cmp	r2, r3
 8001aae:	dc01      	bgt.n	8001ab4 <drawLine+0xc0>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	1c19      	adds	r1, r3, #0
 8001ab4:	b2cb      	uxtb	r3, r1
 8001ab6:	61bb      	str	r3, [r7, #24]
	if (isSteep) {
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d029      	beq.n	8001b12 <drawLine+0x11e>
		// swap x0-y0 and x1-y1 (swap x and y for slope reasons)
		swap_ints(x0, y0);
 8001abe:	1dfb      	adds	r3, r7, #7
 8001ac0:	1df9      	adds	r1, r7, #7
 8001ac2:	1dba      	adds	r2, r7, #6
 8001ac4:	7809      	ldrb	r1, [r1, #0]
 8001ac6:	7812      	ldrb	r2, [r2, #0]
 8001ac8:	188a      	adds	r2, r1, r2
 8001aca:	701a      	strb	r2, [r3, #0]
 8001acc:	1dbb      	adds	r3, r7, #6
 8001ace:	1df9      	adds	r1, r7, #7
 8001ad0:	1dba      	adds	r2, r7, #6
 8001ad2:	7809      	ldrb	r1, [r1, #0]
 8001ad4:	7812      	ldrb	r2, [r2, #0]
 8001ad6:	1a8a      	subs	r2, r1, r2
 8001ad8:	701a      	strb	r2, [r3, #0]
 8001ada:	1dfb      	adds	r3, r7, #7
 8001adc:	1df9      	adds	r1, r7, #7
 8001ade:	1dba      	adds	r2, r7, #6
 8001ae0:	7809      	ldrb	r1, [r1, #0]
 8001ae2:	7812      	ldrb	r2, [r2, #0]
 8001ae4:	1a8a      	subs	r2, r1, r2
 8001ae6:	701a      	strb	r2, [r3, #0]
		swap_ints(x1, y1);
 8001ae8:	1d7b      	adds	r3, r7, #5
 8001aea:	1d79      	adds	r1, r7, #5
 8001aec:	1d3a      	adds	r2, r7, #4
 8001aee:	7809      	ldrb	r1, [r1, #0]
 8001af0:	7812      	ldrb	r2, [r2, #0]
 8001af2:	188a      	adds	r2, r1, r2
 8001af4:	701a      	strb	r2, [r3, #0]
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	1d79      	adds	r1, r7, #5
 8001afa:	1d3a      	adds	r2, r7, #4
 8001afc:	7809      	ldrb	r1, [r1, #0]
 8001afe:	7812      	ldrb	r2, [r2, #0]
 8001b00:	1a8a      	subs	r2, r1, r2
 8001b02:	701a      	strb	r2, [r3, #0]
 8001b04:	1d7b      	adds	r3, r7, #5
 8001b06:	1d79      	adds	r1, r7, #5
 8001b08:	1d3a      	adds	r2, r7, #4
 8001b0a:	7809      	ldrb	r1, [r1, #0]
 8001b0c:	7812      	ldrb	r2, [r2, #0]
 8001b0e:	1a8a      	subs	r2, r1, r2
 8001b10:	701a      	strb	r2, [r3, #0]
	}

	if (x0 > x1) {
 8001b12:	1dfa      	adds	r2, r7, #7
 8001b14:	1d7b      	adds	r3, r7, #5
 8001b16:	7812      	ldrb	r2, [r2, #0]
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d929      	bls.n	8001b72 <drawLine+0x17e>
		// swap x0-x1 and y0-y1 (reverse how we traverse line)
		swap_ints(x0, x1);
 8001b1e:	1dfb      	adds	r3, r7, #7
 8001b20:	1df9      	adds	r1, r7, #7
 8001b22:	1d7a      	adds	r2, r7, #5
 8001b24:	7809      	ldrb	r1, [r1, #0]
 8001b26:	7812      	ldrb	r2, [r2, #0]
 8001b28:	188a      	adds	r2, r1, r2
 8001b2a:	701a      	strb	r2, [r3, #0]
 8001b2c:	1d7b      	adds	r3, r7, #5
 8001b2e:	1df9      	adds	r1, r7, #7
 8001b30:	1d7a      	adds	r2, r7, #5
 8001b32:	7809      	ldrb	r1, [r1, #0]
 8001b34:	7812      	ldrb	r2, [r2, #0]
 8001b36:	1a8a      	subs	r2, r1, r2
 8001b38:	701a      	strb	r2, [r3, #0]
 8001b3a:	1dfb      	adds	r3, r7, #7
 8001b3c:	1df9      	adds	r1, r7, #7
 8001b3e:	1d7a      	adds	r2, r7, #5
 8001b40:	7809      	ldrb	r1, [r1, #0]
 8001b42:	7812      	ldrb	r2, [r2, #0]
 8001b44:	1a8a      	subs	r2, r1, r2
 8001b46:	701a      	strb	r2, [r3, #0]
		swap_ints(y0, y1);
 8001b48:	1dbb      	adds	r3, r7, #6
 8001b4a:	1db9      	adds	r1, r7, #6
 8001b4c:	1d3a      	adds	r2, r7, #4
 8001b4e:	7809      	ldrb	r1, [r1, #0]
 8001b50:	7812      	ldrb	r2, [r2, #0]
 8001b52:	188a      	adds	r2, r1, r2
 8001b54:	701a      	strb	r2, [r3, #0]
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	1db9      	adds	r1, r7, #6
 8001b5a:	1d3a      	adds	r2, r7, #4
 8001b5c:	7809      	ldrb	r1, [r1, #0]
 8001b5e:	7812      	ldrb	r2, [r2, #0]
 8001b60:	1a8a      	subs	r2, r1, r2
 8001b62:	701a      	strb	r2, [r3, #0]
 8001b64:	1dbb      	adds	r3, r7, #6
 8001b66:	1db9      	adds	r1, r7, #6
 8001b68:	1d3a      	adds	r2, r7, #4
 8001b6a:	7809      	ldrb	r1, [r1, #0]
 8001b6c:	7812      	ldrb	r2, [r2, #0]
 8001b6e:	1a8a      	subs	r2, r1, r2
 8001b70:	701a      	strb	r2, [r3, #0]
	}

	int ystep = (y0 < y1) ? 1 : -1;
 8001b72:	1dba      	adds	r2, r7, #6
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	7812      	ldrb	r2, [r2, #0]
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d201      	bcs.n	8001b82 <drawLine+0x18e>
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e001      	b.n	8001b86 <drawLine+0x192>
 8001b82:	2301      	movs	r3, #1
 8001b84:	425b      	negs	r3, r3
 8001b86:	617b      	str	r3, [r7, #20]

	int dx = x1-x0;
 8001b88:	1d7b      	adds	r3, r7, #5
 8001b8a:	781a      	ldrb	r2, [r3, #0]
 8001b8c:	1dfb      	adds	r3, r7, #7
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	613b      	str	r3, [r7, #16]
	int dy = y1-y0;
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	781a      	ldrb	r2, [r3, #0]
 8001b98:	1dbb      	adds	r3, r7, #6
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	60fb      	str	r3, [r7, #12]
	float slope = abs((float)dy/dx);
 8001ba0:	68f8      	ldr	r0, [r7, #12]
 8001ba2:	f7ff fb01 	bl	80011a8 <__aeabi_i2f>
 8001ba6:	1c04      	adds	r4, r0, #0
 8001ba8:	6938      	ldr	r0, [r7, #16]
 8001baa:	f7ff fafd 	bl	80011a8 <__aeabi_i2f>
 8001bae:	1c03      	adds	r3, r0, #0
 8001bb0:	1c19      	adds	r1, r3, #0
 8001bb2:	1c20      	adds	r0, r4, #0
 8001bb4:	f7fe fe0a 	bl	80007cc <__aeabi_fdiv>
 8001bb8:	1c03      	adds	r3, r0, #0
 8001bba:	1c18      	adds	r0, r3, #0
 8001bbc:	f7ff fad4 	bl	8001168 <__aeabi_f2iz>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	17da      	asrs	r2, r3, #31
 8001bc4:	189b      	adds	r3, r3, r2
 8001bc6:	4053      	eors	r3, r2
 8001bc8:	0018      	movs	r0, r3
 8001bca:	f7ff faed 	bl	80011a8 <__aeabi_i2f>
 8001bce:	1c03      	adds	r3, r0, #0
 8001bd0:	60bb      	str	r3, [r7, #8]

	float err = 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
	int y = y0;
 8001bd6:	1dbb      	adds	r3, r7, #6
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	623b      	str	r3, [r7, #32]
	for (int x = x0; x < x1; x++) {
 8001bdc:	1dfb      	adds	r3, r7, #7
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	61fb      	str	r3, [r7, #28]
 8001be2:	e032      	b.n	8001c4a <drawLine+0x256>
		isSteep ? drawPixel(y, x, color, hspi) : drawPixel(x, y, color, hspi);
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00a      	beq.n	8001c00 <drawLine+0x20c>
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	b2d8      	uxtb	r0, r3
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	b2d9      	uxtb	r1, r3
 8001bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bf4:	2238      	movs	r2, #56	; 0x38
 8001bf6:	18ba      	adds	r2, r7, r2
 8001bf8:	8812      	ldrh	r2, [r2, #0]
 8001bfa:	f7ff fd2b 	bl	8001654 <drawPixel>
 8001bfe:	e009      	b.n	8001c14 <drawLine+0x220>
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	b2d8      	uxtb	r0, r3
 8001c04:	6a3b      	ldr	r3, [r7, #32]
 8001c06:	b2d9      	uxtb	r1, r3
 8001c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c0a:	2238      	movs	r2, #56	; 0x38
 8001c0c:	18ba      	adds	r2, r7, r2
 8001c0e:	8812      	ldrh	r2, [r2, #0]
 8001c10:	f7ff fd20 	bl	8001654 <drawPixel>
		err += slope;
 8001c14:	68b9      	ldr	r1, [r7, #8]
 8001c16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c18:	f7fe fc3e 	bl	8000498 <__aeabi_fadd>
 8001c1c:	1c03      	adds	r3, r0, #0
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
		if (err >= 0.5) {
 8001c20:	21fc      	movs	r1, #252	; 0xfc
 8001c22:	0589      	lsls	r1, r1, #22
 8001c24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c26:	f7fe fc15 	bl	8000454 <__aeabi_fcmpge>
 8001c2a:	1e03      	subs	r3, r0, #0
 8001c2c:	d00a      	beq.n	8001c44 <drawLine+0x250>
			y += ystep;
 8001c2e:	6a3a      	ldr	r2, [r7, #32]
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	18d3      	adds	r3, r2, r3
 8001c34:	623b      	str	r3, [r7, #32]
			err -= 1;
 8001c36:	21fe      	movs	r1, #254	; 0xfe
 8001c38:	0589      	lsls	r1, r1, #22
 8001c3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c3c:	f7ff f8d0 	bl	8000de0 <__aeabi_fsub>
 8001c40:	1c03      	adds	r3, r0, #0
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
	for (int x = x0; x < x1; x++) {
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	3301      	adds	r3, #1
 8001c48:	61fb      	str	r3, [r7, #28]
 8001c4a:	1d7b      	adds	r3, r7, #5
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	69fa      	ldr	r2, [r7, #28]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	dbc7      	blt.n	8001be4 <drawLine+0x1f0>
		}
	}
}
 8001c54:	46bd      	mov	sp, r7
 8001c56:	b00a      	add	sp, #40	; 0x28
 8001c58:	bdb0      	pop	{r4, r5, r7, pc}

08001c5a <fillRect>:
	drawVLine(x, y, h, color, hspi);
	drawVLine(x+w-1, y, h, color, hspi);
}

// draw a filled rectangle
void fillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color, SPI_HandleTypeDef *hspi) {
 8001c5a:	b5b0      	push	{r4, r5, r7, lr}
 8001c5c:	b086      	sub	sp, #24
 8001c5e:	af02      	add	r7, sp, #8
 8001c60:	0005      	movs	r5, r0
 8001c62:	000c      	movs	r4, r1
 8001c64:	0010      	movs	r0, r2
 8001c66:	0019      	movs	r1, r3
 8001c68:	1dfb      	adds	r3, r7, #7
 8001c6a:	1c2a      	adds	r2, r5, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
 8001c6e:	1dbb      	adds	r3, r7, #6
 8001c70:	1c22      	adds	r2, r4, #0
 8001c72:	701a      	strb	r2, [r3, #0]
 8001c74:	1d7b      	adds	r3, r7, #5
 8001c76:	1c02      	adds	r2, r0, #0
 8001c78:	701a      	strb	r2, [r3, #0]
 8001c7a:	1d3b      	adds	r3, r7, #4
 8001c7c:	1c0a      	adds	r2, r1, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < h; i++) {
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	e014      	b.n	8001cb0 <fillRect+0x56>
		drawHLine(x, y+i, w, color, hspi);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	1dbb      	adds	r3, r7, #6
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	18d3      	adds	r3, r2, r3
 8001c90:	b2d9      	uxtb	r1, r3
 8001c92:	2320      	movs	r3, #32
 8001c94:	18fb      	adds	r3, r7, r3
 8001c96:	881c      	ldrh	r4, [r3, #0]
 8001c98:	1d7b      	adds	r3, r7, #5
 8001c9a:	781a      	ldrb	r2, [r3, #0]
 8001c9c:	1dfb      	adds	r3, r7, #7
 8001c9e:	7818      	ldrb	r0, [r3, #0]
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	0023      	movs	r3, r4
 8001ca6:	f7ff fd0e 	bl	80016c6 <drawHLine>
	for (int i = 0; i < h; i++) {
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	3301      	adds	r3, #1
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	dbe5      	blt.n	8001c86 <fillRect+0x2c>
	}
}
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	b004      	add	sp, #16
 8001cc0:	bdb0      	pop	{r4, r5, r7, pc}

08001cc2 <fillScreen>:

// a big rectangle, but for the whole screen
void fillScreen(uint16_t color, SPI_HandleTypeDef *hspi) {
 8001cc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cc4:	b091      	sub	sp, #68	; 0x44
 8001cc6:	af04      	add	r7, sp, #16
 8001cc8:	61b9      	str	r1, [r7, #24]
 8001cca:	221e      	movs	r2, #30
 8001ccc:	18ba      	adds	r2, r7, r2
 8001cce:	1c01      	adds	r1, r0, #0
 8001cd0:	8011      	strh	r1, [r2, #0]
 8001cd2:	466a      	mov	r2, sp
 8001cd4:	607a      	str	r2, [r7, #4]
	uint16_t bufferSize = WIDTH*HEIGHT/4;
 8001cd6:	2012      	movs	r0, #18
 8001cd8:	2218      	movs	r2, #24
 8001cda:	18b9      	adds	r1, r7, r2
 8001cdc:	180a      	adds	r2, r1, r0
 8001cde:	21a0      	movs	r1, #160	; 0xa0
 8001ce0:	0149      	lsls	r1, r1, #5
 8001ce2:	8011      	strh	r1, [r2, #0]
	uint16_t buffer[bufferSize];
 8001ce4:	2218      	movs	r2, #24
 8001ce6:	18ba      	adds	r2, r7, r2
 8001ce8:	1812      	adds	r2, r2, r0
 8001cea:	8812      	ldrh	r2, [r2, #0]
 8001cec:	0011      	movs	r1, r2
 8001cee:	3901      	subs	r1, #1
 8001cf0:	6279      	str	r1, [r7, #36]	; 0x24
 8001cf2:	613a      	str	r2, [r7, #16]
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	6179      	str	r1, [r7, #20]
 8001cf8:	6939      	ldr	r1, [r7, #16]
 8001cfa:	0f09      	lsrs	r1, r1, #28
 8001cfc:	6978      	ldr	r0, [r7, #20]
 8001cfe:	0106      	lsls	r6, r0, #4
 8001d00:	430e      	orrs	r6, r1
 8001d02:	6939      	ldr	r1, [r7, #16]
 8001d04:	010d      	lsls	r5, r1, #4
 8001d06:	60ba      	str	r2, [r7, #8]
 8001d08:	2100      	movs	r1, #0
 8001d0a:	60f9      	str	r1, [r7, #12]
 8001d0c:	68bd      	ldr	r5, [r7, #8]
 8001d0e:	68fe      	ldr	r6, [r7, #12]
 8001d10:	0029      	movs	r1, r5
 8001d12:	0f09      	lsrs	r1, r1, #28
 8001d14:	0030      	movs	r0, r6
 8001d16:	0104      	lsls	r4, r0, #4
 8001d18:	430c      	orrs	r4, r1
 8001d1a:	0029      	movs	r1, r5
 8001d1c:	010b      	lsls	r3, r1, #4
 8001d1e:	0013      	movs	r3, r2
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	3301      	adds	r3, #1
 8001d24:	3307      	adds	r3, #7
 8001d26:	08db      	lsrs	r3, r3, #3
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	466a      	mov	r2, sp
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	469d      	mov	sp, r3
 8001d30:	ab04      	add	r3, sp, #16
 8001d32:	3301      	adds	r3, #1
 8001d34:	085b      	lsrs	r3, r3, #1
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	623b      	str	r3, [r7, #32]
	int i;
	for (i = 0; i < bufferSize; i++) {
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d3e:	e00e      	b.n	8001d5e <fillScreen+0x9c>
		buffer[i] = colorFixer(color);
 8001d40:	231e      	movs	r3, #30
 8001d42:	18fb      	adds	r3, r7, r3
 8001d44:	881b      	ldrh	r3, [r3, #0]
 8001d46:	0018      	movs	r0, r3
 8001d48:	f7ff fc60 	bl	800160c <colorFixer>
 8001d4c:	0003      	movs	r3, r0
 8001d4e:	0019      	movs	r1, r3
 8001d50:	6a3b      	ldr	r3, [r7, #32]
 8001d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d54:	0052      	lsls	r2, r2, #1
 8001d56:	52d1      	strh	r1, [r2, r3]
	for (i = 0; i < bufferSize; i++) {
 8001d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d5e:	2312      	movs	r3, #18
 8001d60:	2218      	movs	r2, #24
 8001d62:	4694      	mov	ip, r2
 8001d64:	44bc      	add	ip, r7
 8001d66:	4463      	add	r3, ip
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	dbe7      	blt.n	8001d40 <fillScreen+0x7e>
	}

	// divided into 4 parts, since system ram is not big enough
	for (i = 0; i < 4; i++) {
 8001d70:	2300      	movs	r3, #0
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d74:	e017      	b.n	8001da6 <fillScreen+0xe4>
		drawBuffer(0, HEIGHT/4*i, WIDTH, HEIGHT/4, buffer, bufferSize, hspi);
 8001d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2228      	movs	r2, #40	; 0x28
 8001d7c:	4353      	muls	r3, r2
 8001d7e:	b2d9      	uxtb	r1, r3
 8001d80:	6a3b      	ldr	r3, [r7, #32]
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	9202      	str	r2, [sp, #8]
 8001d86:	2212      	movs	r2, #18
 8001d88:	2018      	movs	r0, #24
 8001d8a:	4684      	mov	ip, r0
 8001d8c:	44bc      	add	ip, r7
 8001d8e:	4462      	add	r2, ip
 8001d90:	8812      	ldrh	r2, [r2, #0]
 8001d92:	9201      	str	r2, [sp, #4]
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	2328      	movs	r3, #40	; 0x28
 8001d98:	2280      	movs	r2, #128	; 0x80
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	f7ff fde0 	bl	8001960 <drawBuffer>
	for (i = 0; i < 4; i++) {
 8001da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da2:	3301      	adds	r3, #1
 8001da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da8:	2b03      	cmp	r3, #3
 8001daa:	dde4      	ble.n	8001d76 <fillScreen+0xb4>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	469d      	mov	sp, r3
	}
}
 8001db0:	46c0      	nop			; (mov r8, r8)
 8001db2:	46bd      	mov	sp, r7
 8001db4:	b00d      	add	sp, #52	; 0x34
 8001db6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001db8 <clearScreen>:

void clearScreen(uint16_t backgroundColor, SPI_HandleTypeDef *hspi) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	0002      	movs	r2, r0
 8001dc0:	6039      	str	r1, [r7, #0]
 8001dc2:	1dbb      	adds	r3, r7, #6
 8001dc4:	801a      	strh	r2, [r3, #0]
	bg = backgroundColor;
 8001dc6:	4b07      	ldr	r3, [pc, #28]	; (8001de4 <clearScreen+0x2c>)
 8001dc8:	1dba      	adds	r2, r7, #6
 8001dca:	8812      	ldrh	r2, [r2, #0]
 8001dcc:	801a      	strh	r2, [r3, #0]
	fillScreen(backgroundColor, hspi);
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	1dbb      	adds	r3, r7, #6
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	0011      	movs	r1, r2
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f7ff ff73 	bl	8001cc2 <fillScreen>
}
 8001ddc:	46c0      	nop			; (mov r8, r8)
 8001dde:	46bd      	mov	sp, r7
 8001de0:	b002      	add	sp, #8
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	2000008e 	.word	0x2000008e

08001de8 <drawChar>:
// ---- end of basic shapes and lines ----

// ---- text functions ----
// draw a character. based on 6x8 font, but scalable
// instead of drawing pixel by pixel, function builds a buffer first and then sends
void drawChar(uint8_t ch, SPI_HandleTypeDef *hspi) {
 8001de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dea:	b095      	sub	sp, #84	; 0x54
 8001dec:	af04      	add	r7, sp, #16
 8001dee:	61b9      	str	r1, [r7, #24]
 8001df0:	221f      	movs	r2, #31
 8001df2:	18ba      	adds	r2, r7, r2
 8001df4:	1c01      	adds	r1, r0, #0
 8001df6:	7011      	strb	r1, [r2, #0]
 8001df8:	466a      	mov	r2, sp
 8001dfa:	607a      	str	r2, [r7, #4]
	uint16_t bufferSize = 6*8*textSize*textSize;
 8001dfc:	4abe      	ldr	r2, [pc, #760]	; (80020f8 <drawChar+0x310>)
 8001dfe:	7812      	ldrb	r2, [r2, #0]
 8001e00:	b292      	uxth	r2, r2
 8001e02:	49bd      	ldr	r1, [pc, #756]	; (80020f8 <drawChar+0x310>)
 8001e04:	7809      	ldrb	r1, [r1, #0]
 8001e06:	b289      	uxth	r1, r1
 8001e08:	434a      	muls	r2, r1
 8001e0a:	b291      	uxth	r1, r2
 8001e0c:	221a      	movs	r2, #26
 8001e0e:	2018      	movs	r0, #24
 8001e10:	4684      	mov	ip, r0
 8001e12:	44bc      	add	ip, r7
 8001e14:	4462      	add	r2, ip
 8001e16:	2030      	movs	r0, #48	; 0x30
 8001e18:	4341      	muls	r1, r0
 8001e1a:	8011      	strh	r1, [r2, #0]
	uint16_t buffer[bufferSize];
 8001e1c:	221a      	movs	r2, #26
 8001e1e:	2118      	movs	r1, #24
 8001e20:	468c      	mov	ip, r1
 8001e22:	44bc      	add	ip, r7
 8001e24:	4462      	add	r2, ip
 8001e26:	8812      	ldrh	r2, [r2, #0]
 8001e28:	0011      	movs	r1, r2
 8001e2a:	3901      	subs	r1, #1
 8001e2c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001e2e:	613a      	str	r2, [r7, #16]
 8001e30:	2100      	movs	r1, #0
 8001e32:	6179      	str	r1, [r7, #20]
 8001e34:	6939      	ldr	r1, [r7, #16]
 8001e36:	0f09      	lsrs	r1, r1, #28
 8001e38:	6978      	ldr	r0, [r7, #20]
 8001e3a:	0106      	lsls	r6, r0, #4
 8001e3c:	430e      	orrs	r6, r1
 8001e3e:	6939      	ldr	r1, [r7, #16]
 8001e40:	010d      	lsls	r5, r1, #4
 8001e42:	60ba      	str	r2, [r7, #8]
 8001e44:	2100      	movs	r1, #0
 8001e46:	60f9      	str	r1, [r7, #12]
 8001e48:	68bd      	ldr	r5, [r7, #8]
 8001e4a:	68fe      	ldr	r6, [r7, #12]
 8001e4c:	0029      	movs	r1, r5
 8001e4e:	0f09      	lsrs	r1, r1, #28
 8001e50:	0030      	movs	r0, r6
 8001e52:	0104      	lsls	r4, r0, #4
 8001e54:	430c      	orrs	r4, r1
 8001e56:	0029      	movs	r1, r5
 8001e58:	010b      	lsls	r3, r1, #4
 8001e5a:	0013      	movs	r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	3301      	adds	r3, #1
 8001e60:	3307      	adds	r3, #7
 8001e62:	08db      	lsrs	r3, r3, #3
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	466a      	mov	r2, sp
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	469d      	mov	sp, r3
 8001e6c:	ab04      	add	r3, sp, #16
 8001e6e:	3301      	adds	r3, #1
 8001e70:	085b      	lsrs	r3, r3, #1
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	62bb      	str	r3, [r7, #40]	; 0x28
	int16_t rowOffset, address;

	// Char bitmap = 5 columns
	for (int8_t i=0; i<5; i++) {
 8001e76:	2325      	movs	r3, #37	; 0x25
 8001e78:	2218      	movs	r2, #24
 8001e7a:	4694      	mov	ip, r2
 8001e7c:	44bc      	add	ip, r7
 8001e7e:	4463      	add	r3, ip
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]
 8001e84:	e1f4      	b.n	8002270 <drawChar+0x488>
		uint8_t line = font[ch*5+i];
 8001e86:	231f      	movs	r3, #31
 8001e88:	18fb      	adds	r3, r7, r3
 8001e8a:	781a      	ldrb	r2, [r3, #0]
 8001e8c:	0013      	movs	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	189a      	adds	r2, r3, r2
 8001e92:	2325      	movs	r3, #37	; 0x25
 8001e94:	2118      	movs	r1, #24
 8001e96:	468c      	mov	ip, r1
 8001e98:	44bc      	add	ip, r7
 8001e9a:	4463      	add	r3, ip
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	b25b      	sxtb	r3, r3
 8001ea0:	18d2      	adds	r2, r2, r3
 8001ea2:	2324      	movs	r3, #36	; 0x24
 8001ea4:	2118      	movs	r1, #24
 8001ea6:	468c      	mov	ip, r1
 8001ea8:	44bc      	add	ip, r7
 8001eaa:	4463      	add	r3, ip
 8001eac:	4993      	ldr	r1, [pc, #588]	; (80020fc <drawChar+0x314>)
 8001eae:	5c8a      	ldrb	r2, [r1, r2]
 8001eb0:	701a      	strb	r2, [r3, #0]
		for (int8_t j=0; j<8; j++, line >>= 1) {
 8001eb2:	2323      	movs	r3, #35	; 0x23
 8001eb4:	2218      	movs	r2, #24
 8001eb6:	4694      	mov	ip, r2
 8001eb8:	44bc      	add	ip, r7
 8001eba:	4463      	add	r3, ip
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
 8001ec0:	e1c0      	b.n	8002244 <drawChar+0x45c>
			// draw character pixel
			if (line & 1) {
 8001ec2:	2324      	movs	r3, #36	; 0x24
 8001ec4:	2218      	movs	r2, #24
 8001ec6:	4694      	mov	ip, r2
 8001ec8:	44bc      	add	ip, r7
 8001eca:	4463      	add	r3, ip
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d100      	bne.n	8001ed6 <drawChar+0xee>
 8001ed4:	e0c8      	b.n	8002068 <drawChar+0x280>
				if (textSize == 1) {
 8001ed6:	4b88      	ldr	r3, [pc, #544]	; (80020f8 <drawChar+0x310>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d11c      	bne.n	8001f18 <drawChar+0x130>
					buffer[i+j*6] = colorFixer(textColor);
 8001ede:	4b88      	ldr	r3, [pc, #544]	; (8002100 <drawChar+0x318>)
 8001ee0:	8818      	ldrh	r0, [r3, #0]
 8001ee2:	2325      	movs	r3, #37	; 0x25
 8001ee4:	2218      	movs	r2, #24
 8001ee6:	4694      	mov	ip, r2
 8001ee8:	44bc      	add	ip, r7
 8001eea:	4463      	add	r3, ip
 8001eec:	2100      	movs	r1, #0
 8001eee:	5659      	ldrsb	r1, [r3, r1]
 8001ef0:	2323      	movs	r3, #35	; 0x23
 8001ef2:	2218      	movs	r2, #24
 8001ef4:	4694      	mov	ip, r2
 8001ef6:	44bc      	add	ip, r7
 8001ef8:	4463      	add	r3, ip
 8001efa:	2200      	movs	r2, #0
 8001efc:	569a      	ldrsb	r2, [r3, r2]
 8001efe:	0013      	movs	r3, r2
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	189b      	adds	r3, r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	18cc      	adds	r4, r1, r3
 8001f08:	f7ff fb80 	bl	800160c <colorFixer>
 8001f0c:	0003      	movs	r3, r0
 8001f0e:	0019      	movs	r1, r3
 8001f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f12:	0062      	lsls	r2, r4, #1
 8001f14:	52d1      	strh	r1, [r2, r3]
 8001f16:	e17f      	b.n	8002218 <drawChar+0x430>
				}
				else {
					// indexing scheme for textSize > 1
					for (int8_t k = 0; k < textSize; k++) {
 8001f18:	2322      	movs	r3, #34	; 0x22
 8001f1a:	2218      	movs	r2, #24
 8001f1c:	4694      	mov	ip, r2
 8001f1e:	44bc      	add	ip, r7
 8001f20:	4463      	add	r3, ip
 8001f22:	2200      	movs	r2, #0
 8001f24:	701a      	strb	r2, [r3, #0]
 8001f26:	e092      	b.n	800204e <drawChar+0x266>
						rowOffset = textSize*6;
 8001f28:	4b73      	ldr	r3, [pc, #460]	; (80020f8 <drawChar+0x310>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	1c1a      	adds	r2, r3, #0
 8001f30:	1c13      	adds	r3, r2, #0
 8001f32:	18db      	adds	r3, r3, r3
 8001f34:	189b      	adds	r3, r3, r2
 8001f36:	18db      	adds	r3, r3, r3
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	2326      	movs	r3, #38	; 0x26
 8001f3c:	2118      	movs	r1, #24
 8001f3e:	468c      	mov	ip, r1
 8001f40:	44bc      	add	ip, r7
 8001f42:	4463      	add	r3, ip
 8001f44:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 8001f46:	2321      	movs	r3, #33	; 0x21
 8001f48:	2218      	movs	r2, #24
 8001f4a:	4694      	mov	ip, r2
 8001f4c:	44bc      	add	ip, r7
 8001f4e:	4463      	add	r3, ip
 8001f50:	2200      	movs	r2, #0
 8001f52:	701a      	strb	r2, [r3, #0]
 8001f54:	e064      	b.n	8002020 <drawChar+0x238>
							address = (textSize*textSize*j*6)+(i*textSize);
 8001f56:	4b68      	ldr	r3, [pc, #416]	; (80020f8 <drawChar+0x310>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	4a66      	ldr	r2, [pc, #408]	; (80020f8 <drawChar+0x310>)
 8001f5e:	7812      	ldrb	r2, [r2, #0]
 8001f60:	b292      	uxth	r2, r2
 8001f62:	4353      	muls	r3, r2
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	2223      	movs	r2, #35	; 0x23
 8001f68:	2118      	movs	r1, #24
 8001f6a:	468c      	mov	ip, r1
 8001f6c:	44bc      	add	ip, r7
 8001f6e:	4462      	add	r2, ip
 8001f70:	7812      	ldrb	r2, [r2, #0]
 8001f72:	b252      	sxtb	r2, r2
 8001f74:	b292      	uxth	r2, r2
 8001f76:	4353      	muls	r3, r2
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	1c1a      	adds	r2, r3, #0
 8001f7c:	1c13      	adds	r3, r2, #0
 8001f7e:	18db      	adds	r3, r3, r3
 8001f80:	189b      	adds	r3, r3, r2
 8001f82:	18db      	adds	r3, r3, r3
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	2325      	movs	r3, #37	; 0x25
 8001f88:	2118      	movs	r1, #24
 8001f8a:	468c      	mov	ip, r1
 8001f8c:	44bc      	add	ip, r7
 8001f8e:	4463      	add	r3, ip
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	b25b      	sxtb	r3, r3
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	4958      	ldr	r1, [pc, #352]	; (80020f8 <drawChar+0x310>)
 8001f98:	7809      	ldrb	r1, [r1, #0]
 8001f9a:	b289      	uxth	r1, r1
 8001f9c:	434b      	muls	r3, r1
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	18d3      	adds	r3, r2, r3
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	210e      	movs	r1, #14
 8001fa6:	2018      	movs	r0, #24
 8001fa8:	183b      	adds	r3, r7, r0
 8001faa:	185b      	adds	r3, r3, r1
 8001fac:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 8001fae:	2322      	movs	r3, #34	; 0x22
 8001fb0:	2218      	movs	r2, #24
 8001fb2:	4694      	mov	ip, r2
 8001fb4:	44bc      	add	ip, r7
 8001fb6:	4463      	add	r3, ip
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	b25b      	sxtb	r3, r3
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	2226      	movs	r2, #38	; 0x26
 8001fc0:	2418      	movs	r4, #24
 8001fc2:	46a4      	mov	ip, r4
 8001fc4:	44bc      	add	ip, r7
 8001fc6:	4462      	add	r2, ip
 8001fc8:	8812      	ldrh	r2, [r2, #0]
 8001fca:	4353      	muls	r3, r2
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	2521      	movs	r5, #33	; 0x21
 8001fd0:	183b      	adds	r3, r7, r0
 8001fd2:	195b      	adds	r3, r3, r5
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	b25b      	sxtb	r3, r3
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	18d3      	adds	r3, r2, r3
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	183b      	adds	r3, r7, r0
 8001fe0:	185b      	adds	r3, r3, r1
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	18d3      	adds	r3, r2, r3
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	183b      	adds	r3, r7, r0
 8001fea:	185b      	adds	r3, r3, r1
 8001fec:	801a      	strh	r2, [r3, #0]
							buffer[address] = colorFixer(textColor);
 8001fee:	4b44      	ldr	r3, [pc, #272]	; (8002100 <drawChar+0x318>)
 8001ff0:	881a      	ldrh	r2, [r3, #0]
 8001ff2:	0006      	movs	r6, r0
 8001ff4:	183b      	adds	r3, r7, r0
 8001ff6:	185b      	adds	r3, r3, r1
 8001ff8:	2400      	movs	r4, #0
 8001ffa:	5f1c      	ldrsh	r4, [r3, r4]
 8001ffc:	0010      	movs	r0, r2
 8001ffe:	f7ff fb05 	bl	800160c <colorFixer>
 8002002:	0003      	movs	r3, r0
 8002004:	0019      	movs	r1, r3
 8002006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002008:	0062      	lsls	r2, r4, #1
 800200a:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 800200c:	19bb      	adds	r3, r7, r6
 800200e:	195b      	adds	r3, r3, r5
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	b25b      	sxtb	r3, r3
 8002014:	b2db      	uxtb	r3, r3
 8002016:	3301      	adds	r3, #1
 8002018:	b2da      	uxtb	r2, r3
 800201a:	19bb      	adds	r3, r7, r6
 800201c:	195b      	adds	r3, r3, r5
 800201e:	701a      	strb	r2, [r3, #0]
 8002020:	2321      	movs	r3, #33	; 0x21
 8002022:	2218      	movs	r2, #24
 8002024:	4694      	mov	ip, r2
 8002026:	44bc      	add	ip, r7
 8002028:	4463      	add	r3, ip
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	b25b      	sxtb	r3, r3
 800202e:	4a32      	ldr	r2, [pc, #200]	; (80020f8 <drawChar+0x310>)
 8002030:	7812      	ldrb	r2, [r2, #0]
 8002032:	4293      	cmp	r3, r2
 8002034:	db8f      	blt.n	8001f56 <drawChar+0x16e>
					for (int8_t k = 0; k < textSize; k++) {
 8002036:	2122      	movs	r1, #34	; 0x22
 8002038:	2018      	movs	r0, #24
 800203a:	183b      	adds	r3, r7, r0
 800203c:	185b      	adds	r3, r3, r1
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	b25b      	sxtb	r3, r3
 8002042:	b2db      	uxtb	r3, r3
 8002044:	3301      	adds	r3, #1
 8002046:	b2da      	uxtb	r2, r3
 8002048:	183b      	adds	r3, r7, r0
 800204a:	185b      	adds	r3, r3, r1
 800204c:	701a      	strb	r2, [r3, #0]
 800204e:	2322      	movs	r3, #34	; 0x22
 8002050:	2218      	movs	r2, #24
 8002052:	4694      	mov	ip, r2
 8002054:	44bc      	add	ip, r7
 8002056:	4463      	add	r3, ip
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	b25b      	sxtb	r3, r3
 800205c:	4a26      	ldr	r2, [pc, #152]	; (80020f8 <drawChar+0x310>)
 800205e:	7812      	ldrb	r2, [r2, #0]
 8002060:	4293      	cmp	r3, r2
 8002062:	da00      	bge.n	8002066 <drawChar+0x27e>
 8002064:	e760      	b.n	8001f28 <drawChar+0x140>
 8002066:	e0d7      	b.n	8002218 <drawChar+0x430>
						}
					}
				}
			}
			// draw text background
			else if (bg != textColor) {
 8002068:	4b26      	ldr	r3, [pc, #152]	; (8002104 <drawChar+0x31c>)
 800206a:	881a      	ldrh	r2, [r3, #0]
 800206c:	4b24      	ldr	r3, [pc, #144]	; (8002100 <drawChar+0x318>)
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d100      	bne.n	8002076 <drawChar+0x28e>
 8002074:	e0d0      	b.n	8002218 <drawChar+0x430>
				if (textSize == 1) {
 8002076:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <drawChar+0x310>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d11c      	bne.n	80020b8 <drawChar+0x2d0>
					buffer[i+j*6] = colorFixer(bg);
 800207e:	4b21      	ldr	r3, [pc, #132]	; (8002104 <drawChar+0x31c>)
 8002080:	8818      	ldrh	r0, [r3, #0]
 8002082:	2325      	movs	r3, #37	; 0x25
 8002084:	2218      	movs	r2, #24
 8002086:	4694      	mov	ip, r2
 8002088:	44bc      	add	ip, r7
 800208a:	4463      	add	r3, ip
 800208c:	2100      	movs	r1, #0
 800208e:	5659      	ldrsb	r1, [r3, r1]
 8002090:	2323      	movs	r3, #35	; 0x23
 8002092:	2218      	movs	r2, #24
 8002094:	4694      	mov	ip, r2
 8002096:	44bc      	add	ip, r7
 8002098:	4463      	add	r3, ip
 800209a:	2200      	movs	r2, #0
 800209c:	569a      	ldrsb	r2, [r3, r2]
 800209e:	0013      	movs	r3, r2
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	189b      	adds	r3, r3, r2
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	18cc      	adds	r4, r1, r3
 80020a8:	f7ff fab0 	bl	800160c <colorFixer>
 80020ac:	0003      	movs	r3, r0
 80020ae:	0019      	movs	r1, r3
 80020b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b2:	0062      	lsls	r2, r4, #1
 80020b4:	52d1      	strh	r1, [r2, r3]
 80020b6:	e0af      	b.n	8002218 <drawChar+0x430>
				}
				else {
					for (int8_t k = 0; k < textSize; k++) {
 80020b8:	2320      	movs	r3, #32
 80020ba:	2218      	movs	r2, #24
 80020bc:	4694      	mov	ip, r2
 80020be:	44bc      	add	ip, r7
 80020c0:	4463      	add	r3, ip
 80020c2:	2200      	movs	r2, #0
 80020c4:	701a      	strb	r2, [r3, #0]
 80020c6:	e09b      	b.n	8002200 <drawChar+0x418>
						rowOffset = textSize*6;
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <drawChar+0x310>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	1c1a      	adds	r2, r3, #0
 80020d0:	1c13      	adds	r3, r2, #0
 80020d2:	18db      	adds	r3, r3, r3
 80020d4:	189b      	adds	r3, r3, r2
 80020d6:	18db      	adds	r3, r3, r3
 80020d8:	b29a      	uxth	r2, r3
 80020da:	2326      	movs	r3, #38	; 0x26
 80020dc:	2118      	movs	r1, #24
 80020de:	468c      	mov	ip, r1
 80020e0:	44bc      	add	ip, r7
 80020e2:	4463      	add	r3, ip
 80020e4:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 80020e6:	231f      	movs	r3, #31
 80020e8:	2218      	movs	r2, #24
 80020ea:	4694      	mov	ip, r2
 80020ec:	44bc      	add	ip, r7
 80020ee:	4463      	add	r3, ip
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]
 80020f4:	e06d      	b.n	80021d2 <drawChar+0x3ea>
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	2000008a 	.word	0x2000008a
 80020fc:	08008584 	.word	0x08008584
 8002100:	2000008c 	.word	0x2000008c
 8002104:	2000008e 	.word	0x2000008e
							address = (textSize*textSize*j*6)+(i*textSize);
 8002108:	4bda      	ldr	r3, [pc, #872]	; (8002474 <drawChar+0x68c>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	b29b      	uxth	r3, r3
 800210e:	4ad9      	ldr	r2, [pc, #868]	; (8002474 <drawChar+0x68c>)
 8002110:	7812      	ldrb	r2, [r2, #0]
 8002112:	b292      	uxth	r2, r2
 8002114:	4353      	muls	r3, r2
 8002116:	b29b      	uxth	r3, r3
 8002118:	2223      	movs	r2, #35	; 0x23
 800211a:	2118      	movs	r1, #24
 800211c:	468c      	mov	ip, r1
 800211e:	44bc      	add	ip, r7
 8002120:	4462      	add	r2, ip
 8002122:	7812      	ldrb	r2, [r2, #0]
 8002124:	b252      	sxtb	r2, r2
 8002126:	b292      	uxth	r2, r2
 8002128:	4353      	muls	r3, r2
 800212a:	b29b      	uxth	r3, r3
 800212c:	1c1a      	adds	r2, r3, #0
 800212e:	1c13      	adds	r3, r2, #0
 8002130:	18db      	adds	r3, r3, r3
 8002132:	189b      	adds	r3, r3, r2
 8002134:	18db      	adds	r3, r3, r3
 8002136:	b29a      	uxth	r2, r3
 8002138:	2325      	movs	r3, #37	; 0x25
 800213a:	2118      	movs	r1, #24
 800213c:	468c      	mov	ip, r1
 800213e:	44bc      	add	ip, r7
 8002140:	4463      	add	r3, ip
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	b25b      	sxtb	r3, r3
 8002146:	b29b      	uxth	r3, r3
 8002148:	49ca      	ldr	r1, [pc, #808]	; (8002474 <drawChar+0x68c>)
 800214a:	7809      	ldrb	r1, [r1, #0]
 800214c:	b289      	uxth	r1, r1
 800214e:	434b      	muls	r3, r1
 8002150:	b29b      	uxth	r3, r3
 8002152:	18d3      	adds	r3, r2, r3
 8002154:	b29a      	uxth	r2, r3
 8002156:	210e      	movs	r1, #14
 8002158:	2018      	movs	r0, #24
 800215a:	183b      	adds	r3, r7, r0
 800215c:	185b      	adds	r3, r3, r1
 800215e:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 8002160:	2320      	movs	r3, #32
 8002162:	2218      	movs	r2, #24
 8002164:	4694      	mov	ip, r2
 8002166:	44bc      	add	ip, r7
 8002168:	4463      	add	r3, ip
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	b25b      	sxtb	r3, r3
 800216e:	b29b      	uxth	r3, r3
 8002170:	2226      	movs	r2, #38	; 0x26
 8002172:	2418      	movs	r4, #24
 8002174:	46a4      	mov	ip, r4
 8002176:	44bc      	add	ip, r7
 8002178:	4462      	add	r2, ip
 800217a:	8812      	ldrh	r2, [r2, #0]
 800217c:	4353      	muls	r3, r2
 800217e:	b29a      	uxth	r2, r3
 8002180:	251f      	movs	r5, #31
 8002182:	183b      	adds	r3, r7, r0
 8002184:	195b      	adds	r3, r3, r5
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	b25b      	sxtb	r3, r3
 800218a:	b29b      	uxth	r3, r3
 800218c:	18d3      	adds	r3, r2, r3
 800218e:	b29a      	uxth	r2, r3
 8002190:	183b      	adds	r3, r7, r0
 8002192:	185b      	adds	r3, r3, r1
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	18d3      	adds	r3, r2, r3
 8002198:	b29a      	uxth	r2, r3
 800219a:	183b      	adds	r3, r7, r0
 800219c:	185b      	adds	r3, r3, r1
 800219e:	801a      	strh	r2, [r3, #0]
							buffer[address] = colorFixer(bg);
 80021a0:	4bb5      	ldr	r3, [pc, #724]	; (8002478 <drawChar+0x690>)
 80021a2:	881a      	ldrh	r2, [r3, #0]
 80021a4:	0006      	movs	r6, r0
 80021a6:	183b      	adds	r3, r7, r0
 80021a8:	185b      	adds	r3, r3, r1
 80021aa:	2400      	movs	r4, #0
 80021ac:	5f1c      	ldrsh	r4, [r3, r4]
 80021ae:	0010      	movs	r0, r2
 80021b0:	f7ff fa2c 	bl	800160c <colorFixer>
 80021b4:	0003      	movs	r3, r0
 80021b6:	0019      	movs	r1, r3
 80021b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ba:	0062      	lsls	r2, r4, #1
 80021bc:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 80021be:	19bb      	adds	r3, r7, r6
 80021c0:	195b      	adds	r3, r3, r5
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	b25b      	sxtb	r3, r3
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	3301      	adds	r3, #1
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	19bb      	adds	r3, r7, r6
 80021ce:	195b      	adds	r3, r3, r5
 80021d0:	701a      	strb	r2, [r3, #0]
 80021d2:	231f      	movs	r3, #31
 80021d4:	2218      	movs	r2, #24
 80021d6:	4694      	mov	ip, r2
 80021d8:	44bc      	add	ip, r7
 80021da:	4463      	add	r3, ip
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	b25b      	sxtb	r3, r3
 80021e0:	4aa4      	ldr	r2, [pc, #656]	; (8002474 <drawChar+0x68c>)
 80021e2:	7812      	ldrb	r2, [r2, #0]
 80021e4:	4293      	cmp	r3, r2
 80021e6:	db8f      	blt.n	8002108 <drawChar+0x320>
					for (int8_t k = 0; k < textSize; k++) {
 80021e8:	2120      	movs	r1, #32
 80021ea:	2018      	movs	r0, #24
 80021ec:	183b      	adds	r3, r7, r0
 80021ee:	185b      	adds	r3, r3, r1
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	b25b      	sxtb	r3, r3
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	3301      	adds	r3, #1
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	183b      	adds	r3, r7, r0
 80021fc:	185b      	adds	r3, r3, r1
 80021fe:	701a      	strb	r2, [r3, #0]
 8002200:	2320      	movs	r3, #32
 8002202:	2218      	movs	r2, #24
 8002204:	4694      	mov	ip, r2
 8002206:	44bc      	add	ip, r7
 8002208:	4463      	add	r3, ip
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	b25b      	sxtb	r3, r3
 800220e:	4a99      	ldr	r2, [pc, #612]	; (8002474 <drawChar+0x68c>)
 8002210:	7812      	ldrb	r2, [r2, #0]
 8002212:	4293      	cmp	r3, r2
 8002214:	da00      	bge.n	8002218 <drawChar+0x430>
 8002216:	e757      	b.n	80020c8 <drawChar+0x2e0>
		for (int8_t j=0; j<8; j++, line >>= 1) {
 8002218:	2123      	movs	r1, #35	; 0x23
 800221a:	2018      	movs	r0, #24
 800221c:	183b      	adds	r3, r7, r0
 800221e:	185b      	adds	r3, r3, r1
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	b25b      	sxtb	r3, r3
 8002224:	b2db      	uxtb	r3, r3
 8002226:	3301      	adds	r3, #1
 8002228:	b2da      	uxtb	r2, r3
 800222a:	183b      	adds	r3, r7, r0
 800222c:	185b      	adds	r3, r3, r1
 800222e:	701a      	strb	r2, [r3, #0]
 8002230:	2224      	movs	r2, #36	; 0x24
 8002232:	183b      	adds	r3, r7, r0
 8002234:	189b      	adds	r3, r3, r2
 8002236:	2118      	movs	r1, #24
 8002238:	468c      	mov	ip, r1
 800223a:	44bc      	add	ip, r7
 800223c:	4462      	add	r2, ip
 800223e:	7812      	ldrb	r2, [r2, #0]
 8002240:	0852      	lsrs	r2, r2, #1
 8002242:	701a      	strb	r2, [r3, #0]
 8002244:	2323      	movs	r3, #35	; 0x23
 8002246:	2218      	movs	r2, #24
 8002248:	4694      	mov	ip, r2
 800224a:	44bc      	add	ip, r7
 800224c:	4463      	add	r3, ip
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	b25b      	sxtb	r3, r3
 8002252:	2b07      	cmp	r3, #7
 8002254:	dc00      	bgt.n	8002258 <drawChar+0x470>
 8002256:	e634      	b.n	8001ec2 <drawChar+0xda>
	for (int8_t i=0; i<5; i++) {
 8002258:	2125      	movs	r1, #37	; 0x25
 800225a:	2018      	movs	r0, #24
 800225c:	183b      	adds	r3, r7, r0
 800225e:	185b      	adds	r3, r3, r1
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	b25b      	sxtb	r3, r3
 8002264:	b2db      	uxtb	r3, r3
 8002266:	3301      	adds	r3, #1
 8002268:	b2da      	uxtb	r2, r3
 800226a:	183b      	adds	r3, r7, r0
 800226c:	185b      	adds	r3, r3, r1
 800226e:	701a      	strb	r2, [r3, #0]
 8002270:	2325      	movs	r3, #37	; 0x25
 8002272:	2218      	movs	r2, #24
 8002274:	4694      	mov	ip, r2
 8002276:	44bc      	add	ip, r7
 8002278:	4463      	add	r3, ip
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	b25b      	sxtb	r3, r3
 800227e:	2b04      	cmp	r3, #4
 8002280:	dc00      	bgt.n	8002284 <drawChar+0x49c>
 8002282:	e600      	b.n	8001e86 <drawChar+0x9e>
		}
	}

	// If opaque, draw vertical line for last column
	// for character 1px kerning
	if (bg != textColor) {
 8002284:	4b7c      	ldr	r3, [pc, #496]	; (8002478 <drawChar+0x690>)
 8002286:	881a      	ldrh	r2, [r3, #0]
 8002288:	4b7c      	ldr	r3, [pc, #496]	; (800247c <drawChar+0x694>)
 800228a:	881b      	ldrh	r3, [r3, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d100      	bne.n	8002292 <drawChar+0x4aa>
 8002290:	e0ca      	b.n	8002428 <drawChar+0x640>
		for (int8_t j = 0; j < 8; j++) {
 8002292:	231e      	movs	r3, #30
 8002294:	2218      	movs	r2, #24
 8002296:	4694      	mov	ip, r2
 8002298:	44bc      	add	ip, r7
 800229a:	4463      	add	r3, ip
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
 80022a0:	e0b8      	b.n	8002414 <drawChar+0x62c>
			if (textSize == 1) {
 80022a2:	4b74      	ldr	r3, [pc, #464]	; (8002474 <drawChar+0x68c>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d116      	bne.n	80022d8 <drawChar+0x4f0>
				buffer[5+j*6] = colorFixer(bg);
 80022aa:	4b73      	ldr	r3, [pc, #460]	; (8002478 <drawChar+0x690>)
 80022ac:	8819      	ldrh	r1, [r3, #0]
 80022ae:	231e      	movs	r3, #30
 80022b0:	2218      	movs	r2, #24
 80022b2:	4694      	mov	ip, r2
 80022b4:	44bc      	add	ip, r7
 80022b6:	4463      	add	r3, ip
 80022b8:	2200      	movs	r2, #0
 80022ba:	569a      	ldrsb	r2, [r3, r2]
 80022bc:	0013      	movs	r3, r2
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	189b      	adds	r3, r3, r2
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	1d5c      	adds	r4, r3, #5
 80022c6:	0008      	movs	r0, r1
 80022c8:	f7ff f9a0 	bl	800160c <colorFixer>
 80022cc:	0003      	movs	r3, r0
 80022ce:	0019      	movs	r1, r3
 80022d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d2:	0062      	lsls	r2, r4, #1
 80022d4:	52d1      	strh	r1, [r2, r3]
 80022d6:	e091      	b.n	80023fc <drawChar+0x614>
			}
			else {
				for (int8_t k = 0; k < textSize; k++) {
 80022d8:	231d      	movs	r3, #29
 80022da:	2218      	movs	r2, #24
 80022dc:	4694      	mov	ip, r2
 80022de:	44bc      	add	ip, r7
 80022e0:	4463      	add	r3, ip
 80022e2:	2200      	movs	r2, #0
 80022e4:	701a      	strb	r2, [r3, #0]
 80022e6:	e07d      	b.n	80023e4 <drawChar+0x5fc>
					for (int8_t l = 0; l < textSize; l++) {
 80022e8:	231c      	movs	r3, #28
 80022ea:	2218      	movs	r2, #24
 80022ec:	4694      	mov	ip, r2
 80022ee:	44bc      	add	ip, r7
 80022f0:	4463      	add	r3, ip
 80022f2:	2200      	movs	r2, #0
 80022f4:	701a      	strb	r2, [r3, #0]
 80022f6:	e05e      	b.n	80023b6 <drawChar+0x5ce>
						address = (textSize*textSize*j*6)+(5*textSize);
 80022f8:	4b5e      	ldr	r3, [pc, #376]	; (8002474 <drawChar+0x68c>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	4a5d      	ldr	r2, [pc, #372]	; (8002474 <drawChar+0x68c>)
 8002300:	7812      	ldrb	r2, [r2, #0]
 8002302:	b292      	uxth	r2, r2
 8002304:	4353      	muls	r3, r2
 8002306:	b29b      	uxth	r3, r3
 8002308:	221e      	movs	r2, #30
 800230a:	2118      	movs	r1, #24
 800230c:	468c      	mov	ip, r1
 800230e:	44bc      	add	ip, r7
 8002310:	4462      	add	r2, ip
 8002312:	7812      	ldrb	r2, [r2, #0]
 8002314:	b252      	sxtb	r2, r2
 8002316:	b292      	uxth	r2, r2
 8002318:	4353      	muls	r3, r2
 800231a:	b29b      	uxth	r3, r3
 800231c:	1c1a      	adds	r2, r3, #0
 800231e:	1c13      	adds	r3, r2, #0
 8002320:	18db      	adds	r3, r3, r3
 8002322:	189b      	adds	r3, r3, r2
 8002324:	18db      	adds	r3, r3, r3
 8002326:	b29a      	uxth	r2, r3
 8002328:	4b52      	ldr	r3, [pc, #328]	; (8002474 <drawChar+0x68c>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	b29b      	uxth	r3, r3
 800232e:	1c19      	adds	r1, r3, #0
 8002330:	0089      	lsls	r1, r1, #2
 8002332:	18cb      	adds	r3, r1, r3
 8002334:	b29b      	uxth	r3, r3
 8002336:	18d3      	adds	r3, r2, r3
 8002338:	b29a      	uxth	r2, r3
 800233a:	210e      	movs	r1, #14
 800233c:	2018      	movs	r0, #24
 800233e:	183b      	adds	r3, r7, r0
 8002340:	185b      	adds	r3, r3, r1
 8002342:	801a      	strh	r2, [r3, #0]
						address += rowOffset*k+l;
 8002344:	231d      	movs	r3, #29
 8002346:	2218      	movs	r2, #24
 8002348:	4694      	mov	ip, r2
 800234a:	44bc      	add	ip, r7
 800234c:	4463      	add	r3, ip
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	b25b      	sxtb	r3, r3
 8002352:	b29b      	uxth	r3, r3
 8002354:	2226      	movs	r2, #38	; 0x26
 8002356:	2418      	movs	r4, #24
 8002358:	46a4      	mov	ip, r4
 800235a:	44bc      	add	ip, r7
 800235c:	4462      	add	r2, ip
 800235e:	8812      	ldrh	r2, [r2, #0]
 8002360:	4353      	muls	r3, r2
 8002362:	b29a      	uxth	r2, r3
 8002364:	251c      	movs	r5, #28
 8002366:	183b      	adds	r3, r7, r0
 8002368:	195b      	adds	r3, r3, r5
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	b25b      	sxtb	r3, r3
 800236e:	b29b      	uxth	r3, r3
 8002370:	18d3      	adds	r3, r2, r3
 8002372:	b29a      	uxth	r2, r3
 8002374:	183b      	adds	r3, r7, r0
 8002376:	185b      	adds	r3, r3, r1
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	18d3      	adds	r3, r2, r3
 800237c:	b29a      	uxth	r2, r3
 800237e:	183b      	adds	r3, r7, r0
 8002380:	185b      	adds	r3, r3, r1
 8002382:	801a      	strh	r2, [r3, #0]
						buffer[address] = colorFixer(bg);
 8002384:	4b3c      	ldr	r3, [pc, #240]	; (8002478 <drawChar+0x690>)
 8002386:	881a      	ldrh	r2, [r3, #0]
 8002388:	0006      	movs	r6, r0
 800238a:	183b      	adds	r3, r7, r0
 800238c:	185b      	adds	r3, r3, r1
 800238e:	2400      	movs	r4, #0
 8002390:	5f1c      	ldrsh	r4, [r3, r4]
 8002392:	0010      	movs	r0, r2
 8002394:	f7ff f93a 	bl	800160c <colorFixer>
 8002398:	0003      	movs	r3, r0
 800239a:	0019      	movs	r1, r3
 800239c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239e:	0062      	lsls	r2, r4, #1
 80023a0:	52d1      	strh	r1, [r2, r3]
					for (int8_t l = 0; l < textSize; l++) {
 80023a2:	19bb      	adds	r3, r7, r6
 80023a4:	195b      	adds	r3, r3, r5
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	b25b      	sxtb	r3, r3
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	3301      	adds	r3, #1
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	19bb      	adds	r3, r7, r6
 80023b2:	195b      	adds	r3, r3, r5
 80023b4:	701a      	strb	r2, [r3, #0]
 80023b6:	231c      	movs	r3, #28
 80023b8:	2218      	movs	r2, #24
 80023ba:	4694      	mov	ip, r2
 80023bc:	44bc      	add	ip, r7
 80023be:	4463      	add	r3, ip
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	b25b      	sxtb	r3, r3
 80023c4:	4a2b      	ldr	r2, [pc, #172]	; (8002474 <drawChar+0x68c>)
 80023c6:	7812      	ldrb	r2, [r2, #0]
 80023c8:	4293      	cmp	r3, r2
 80023ca:	db95      	blt.n	80022f8 <drawChar+0x510>
				for (int8_t k = 0; k < textSize; k++) {
 80023cc:	211d      	movs	r1, #29
 80023ce:	2018      	movs	r0, #24
 80023d0:	183b      	adds	r3, r7, r0
 80023d2:	185b      	adds	r3, r3, r1
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	b25b      	sxtb	r3, r3
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	3301      	adds	r3, #1
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	183b      	adds	r3, r7, r0
 80023e0:	185b      	adds	r3, r3, r1
 80023e2:	701a      	strb	r2, [r3, #0]
 80023e4:	231d      	movs	r3, #29
 80023e6:	2218      	movs	r2, #24
 80023e8:	4694      	mov	ip, r2
 80023ea:	44bc      	add	ip, r7
 80023ec:	4463      	add	r3, ip
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	b25b      	sxtb	r3, r3
 80023f2:	4a20      	ldr	r2, [pc, #128]	; (8002474 <drawChar+0x68c>)
 80023f4:	7812      	ldrb	r2, [r2, #0]
 80023f6:	4293      	cmp	r3, r2
 80023f8:	da00      	bge.n	80023fc <drawChar+0x614>
 80023fa:	e775      	b.n	80022e8 <drawChar+0x500>
		for (int8_t j = 0; j < 8; j++) {
 80023fc:	211e      	movs	r1, #30
 80023fe:	2018      	movs	r0, #24
 8002400:	183b      	adds	r3, r7, r0
 8002402:	185b      	adds	r3, r3, r1
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	b25b      	sxtb	r3, r3
 8002408:	b2db      	uxtb	r3, r3
 800240a:	3301      	adds	r3, #1
 800240c:	b2da      	uxtb	r2, r3
 800240e:	183b      	adds	r3, r7, r0
 8002410:	185b      	adds	r3, r3, r1
 8002412:	701a      	strb	r2, [r3, #0]
 8002414:	231e      	movs	r3, #30
 8002416:	2218      	movs	r2, #24
 8002418:	4694      	mov	ip, r2
 800241a:	44bc      	add	ip, r7
 800241c:	4463      	add	r3, ip
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	b25b      	sxtb	r3, r3
 8002422:	2b07      	cmp	r3, #7
 8002424:	dc00      	bgt.n	8002428 <drawChar+0x640>
 8002426:	e73c      	b.n	80022a2 <drawChar+0x4ba>
				}
			}
		}
	}

	drawBuffer(cursorX, cursorY, 6*textSize, 8*textSize, buffer, bufferSize, hspi);
 8002428:	4b15      	ldr	r3, [pc, #84]	; (8002480 <drawChar+0x698>)
 800242a:	7818      	ldrb	r0, [r3, #0]
 800242c:	4b15      	ldr	r3, [pc, #84]	; (8002484 <drawChar+0x69c>)
 800242e:	7819      	ldrb	r1, [r3, #0]
 8002430:	4b10      	ldr	r3, [pc, #64]	; (8002474 <drawChar+0x68c>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	1c1a      	adds	r2, r3, #0
 8002436:	1c13      	adds	r3, r2, #0
 8002438:	18db      	adds	r3, r3, r3
 800243a:	189b      	adds	r3, r3, r2
 800243c:	18db      	adds	r3, r3, r3
 800243e:	b2dc      	uxtb	r4, r3
 8002440:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <drawChar+0x68c>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	b2dd      	uxtb	r5, r3
 8002448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	9202      	str	r2, [sp, #8]
 800244e:	221a      	movs	r2, #26
 8002450:	2618      	movs	r6, #24
 8002452:	46b4      	mov	ip, r6
 8002454:	44bc      	add	ip, r7
 8002456:	4462      	add	r2, ip
 8002458:	8812      	ldrh	r2, [r2, #0]
 800245a:	9201      	str	r2, [sp, #4]
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	002b      	movs	r3, r5
 8002460:	0022      	movs	r2, r4
 8002462:	f7ff fa7d 	bl	8001960 <drawBuffer>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	469d      	mov	sp, r3
}
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	46bd      	mov	sp, r7
 800246e:	b011      	add	sp, #68	; 0x44
 8002470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002472:	46c0      	nop			; (mov r8, r8)
 8002474:	2000008a 	.word	0x2000008a
 8002478:	2000008e 	.word	0x2000008e
 800247c:	2000008c 	.word	0x2000008c
 8002480:	20000088 	.word	0x20000088
 8002484:	20000089 	.word	0x20000089

08002488 <setBackgroundColor>:
	fillRect(0, y, WIDTH, textSize*8, bg, hspi);
}

// ---- getters and setters ----
// sets static variables
void setBackgroundColor(uint16_t color) {bg = color;}
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	0002      	movs	r2, r0
 8002490:	1dbb      	adds	r3, r7, #6
 8002492:	801a      	strh	r2, [r3, #0]
 8002494:	4b03      	ldr	r3, [pc, #12]	; (80024a4 <setBackgroundColor+0x1c>)
 8002496:	1dba      	adds	r2, r7, #6
 8002498:	8812      	ldrh	r2, [r2, #0]
 800249a:	801a      	strh	r2, [r3, #0]
 800249c:	46c0      	nop			; (mov r8, r8)
 800249e:	46bd      	mov	sp, r7
 80024a0:	b002      	add	sp, #8
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	2000008e 	.word	0x2000008e

080024a8 <setCursor>:

void setCursor(uint8_t x, uint8_t y) {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	0002      	movs	r2, r0
 80024b0:	1dfb      	adds	r3, r7, #7
 80024b2:	701a      	strb	r2, [r3, #0]
 80024b4:	1dbb      	adds	r3, r7, #6
 80024b6:	1c0a      	adds	r2, r1, #0
 80024b8:	701a      	strb	r2, [r3, #0]
	cursorX = x;
 80024ba:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <setCursor+0x2c>)
 80024bc:	1dfa      	adds	r2, r7, #7
 80024be:	7812      	ldrb	r2, [r2, #0]
 80024c0:	701a      	strb	r2, [r3, #0]
	cursorY = y;
 80024c2:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <setCursor+0x30>)
 80024c4:	1dba      	adds	r2, r7, #6
 80024c6:	7812      	ldrb	r2, [r2, #0]
 80024c8:	701a      	strb	r2, [r3, #0]
}
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	46bd      	mov	sp, r7
 80024ce:	b002      	add	sp, #8
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	20000088 	.word	0x20000088
 80024d8:	20000089 	.word	0x20000089

080024dc <setTextSize>:

void setTextSize(uint8_t size) {textSize = size;}
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	0002      	movs	r2, r0
 80024e4:	1dfb      	adds	r3, r7, #7
 80024e6:	701a      	strb	r2, [r3, #0]
 80024e8:	4b03      	ldr	r3, [pc, #12]	; (80024f8 <setTextSize+0x1c>)
 80024ea:	1dfa      	adds	r2, r7, #7
 80024ec:	7812      	ldrb	r2, [r2, #0]
 80024ee:	701a      	strb	r2, [r3, #0]
 80024f0:	46c0      	nop			; (mov r8, r8)
 80024f2:	46bd      	mov	sp, r7
 80024f4:	b002      	add	sp, #8
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	2000008a 	.word	0x2000008a

080024fc <setTextColor>:

void setTextColor(uint16_t color) {textColor = color;}
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	0002      	movs	r2, r0
 8002504:	1dbb      	adds	r3, r7, #6
 8002506:	801a      	strh	r2, [r3, #0]
 8002508:	4b03      	ldr	r3, [pc, #12]	; (8002518 <setTextColor+0x1c>)
 800250a:	1dba      	adds	r2, r7, #6
 800250c:	8812      	ldrh	r2, [r2, #0]
 800250e:	801a      	strh	r2, [r3, #0]
 8002510:	46c0      	nop			; (mov r8, r8)
 8002512:	46bd      	mov	sp, r7
 8002514:	b002      	add	sp, #8
 8002516:	bd80      	pop	{r7, pc}
 8002518:	2000008c 	.word	0x2000008c

0800251c <lineTest>:
 * which uses the ST7735R driver chip and communicates using SPI.
 */

#include "TFT_display_test.h"

void lineTest(SPI_HandleTypeDef *hspi) {
 800251c:	b590      	push	{r4, r7, lr}
 800251e:	b087      	sub	sp, #28
 8002520:	af02      	add	r7, sp, #8
 8002522:	6078      	str	r0, [r7, #4]
	int x = WIDTH/2;
 8002524:	2340      	movs	r3, #64	; 0x40
 8002526:	60fb      	str	r3, [r7, #12]
	int y = HEIGHT/2;
 8002528:	2350      	movs	r3, #80	; 0x50
 800252a:	60bb      	str	r3, [r7, #8]

	drawLine(x, y, x+WIDTH/2, y+HEIGHT/4, ST77XX_RED, hspi);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	b2d8      	uxtb	r0, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	b2d9      	uxtb	r1, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	b2db      	uxtb	r3, r3
 8002538:	3340      	adds	r3, #64	; 0x40
 800253a:	b2da      	uxtb	r2, r3
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	b2db      	uxtb	r3, r3
 8002540:	3328      	adds	r3, #40	; 0x28
 8002542:	b2dc      	uxtb	r4, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	9301      	str	r3, [sp, #4]
 8002548:	23f8      	movs	r3, #248	; 0xf8
 800254a:	021b      	lsls	r3, r3, #8
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	0023      	movs	r3, r4
 8002550:	f7ff fa50 	bl	80019f4 <drawLine>
	HAL_Delay(500);
 8002554:	23fa      	movs	r3, #250	; 0xfa
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	0018      	movs	r0, r3
 800255a:	f001 fee5 	bl	8004328 <HAL_Delay>
	fillRect(x, y, WIDTH/2, HEIGHT/4, ST77XX_RED, hspi);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	b2d8      	uxtb	r0, r3
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	b2d9      	uxtb	r1, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	9301      	str	r3, [sp, #4]
 800256a:	23f8      	movs	r3, #248	; 0xf8
 800256c:	021b      	lsls	r3, r3, #8
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	2328      	movs	r3, #40	; 0x28
 8002572:	2240      	movs	r2, #64	; 0x40
 8002574:	f7ff fb71 	bl	8001c5a <fillRect>
	HAL_Delay(1000);
 8002578:	23fa      	movs	r3, #250	; 0xfa
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	0018      	movs	r0, r3
 800257e:	f001 fed3 	bl	8004328 <HAL_Delay>

	drawLine(x, y, x+WIDTH/4, y+HEIGHT/2, ST77XX_BLUE, hspi);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	b2d8      	uxtb	r0, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	b2d9      	uxtb	r1, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	3320      	adds	r3, #32
 8002590:	b2da      	uxtb	r2, r3
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	b2db      	uxtb	r3, r3
 8002596:	3350      	adds	r3, #80	; 0x50
 8002598:	b2dc      	uxtb	r4, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	9301      	str	r3, [sp, #4]
 800259e:	231f      	movs	r3, #31
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	0023      	movs	r3, r4
 80025a4:	f7ff fa26 	bl	80019f4 <drawLine>
	HAL_Delay(500);
 80025a8:	23fa      	movs	r3, #250	; 0xfa
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	0018      	movs	r0, r3
 80025ae:	f001 febb 	bl	8004328 <HAL_Delay>
	fillRect(x, y, WIDTH/4, HEIGHT/2, ST77XX_BLUE, hspi);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	b2d8      	uxtb	r0, r3
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	b2d9      	uxtb	r1, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	9301      	str	r3, [sp, #4]
 80025be:	231f      	movs	r3, #31
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	2350      	movs	r3, #80	; 0x50
 80025c4:	2220      	movs	r2, #32
 80025c6:	f7ff fb48 	bl	8001c5a <fillRect>
	HAL_Delay(1000);
 80025ca:	23fa      	movs	r3, #250	; 0xfa
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	0018      	movs	r0, r3
 80025d0:	f001 feaa 	bl	8004328 <HAL_Delay>

	drawLine(x, y, x-WIDTH/4, y+HEIGHT/2, ST77XX_YELLOW, hspi);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	b2d8      	uxtb	r0, r3
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	b2d9      	uxtb	r1, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	3b20      	subs	r3, #32
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	3350      	adds	r3, #80	; 0x50
 80025ea:	b2dc      	uxtb	r4, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	9301      	str	r3, [sp, #4]
 80025f0:	4b82      	ldr	r3, [pc, #520]	; (80027fc <lineTest+0x2e0>)
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	0023      	movs	r3, r4
 80025f6:	f7ff f9fd 	bl	80019f4 <drawLine>
	HAL_Delay(500);
 80025fa:	23fa      	movs	r3, #250	; 0xfa
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	0018      	movs	r0, r3
 8002600:	f001 fe92 	bl	8004328 <HAL_Delay>
	fillRect(x-WIDTH/4, y, WIDTH/4, HEIGHT/2, ST77XX_YELLOW, hspi);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	b2db      	uxtb	r3, r3
 8002608:	3b20      	subs	r3, #32
 800260a:	b2d8      	uxtb	r0, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	b2d9      	uxtb	r1, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	9301      	str	r3, [sp, #4]
 8002614:	4b79      	ldr	r3, [pc, #484]	; (80027fc <lineTest+0x2e0>)
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	2350      	movs	r3, #80	; 0x50
 800261a:	2220      	movs	r2, #32
 800261c:	f7ff fb1d 	bl	8001c5a <fillRect>
	HAL_Delay(1000);
 8002620:	23fa      	movs	r3, #250	; 0xfa
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	0018      	movs	r0, r3
 8002626:	f001 fe7f 	bl	8004328 <HAL_Delay>

	drawLine(x, y, x-WIDTH/2, y+HEIGHT/4, ST77XX_GREEN, hspi);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	b2d8      	uxtb	r0, r3
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	b2d9      	uxtb	r1, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	b2db      	uxtb	r3, r3
 8002636:	3b40      	subs	r3, #64	; 0x40
 8002638:	b2da      	uxtb	r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	b2db      	uxtb	r3, r3
 800263e:	3328      	adds	r3, #40	; 0x28
 8002640:	b2dc      	uxtb	r4, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	9301      	str	r3, [sp, #4]
 8002646:	23fc      	movs	r3, #252	; 0xfc
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	0023      	movs	r3, r4
 800264e:	f7ff f9d1 	bl	80019f4 <drawLine>
	HAL_Delay(500);
 8002652:	23fa      	movs	r3, #250	; 0xfa
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	0018      	movs	r0, r3
 8002658:	f001 fe66 	bl	8004328 <HAL_Delay>
	fillRect(x-WIDTH/2, y, WIDTH/2, HEIGHT/4, ST77XX_GREEN, hspi);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	b2db      	uxtb	r3, r3
 8002660:	3b40      	subs	r3, #64	; 0x40
 8002662:	b2d8      	uxtb	r0, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	b2d9      	uxtb	r1, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	9301      	str	r3, [sp, #4]
 800266c:	23fc      	movs	r3, #252	; 0xfc
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	2328      	movs	r3, #40	; 0x28
 8002674:	2240      	movs	r2, #64	; 0x40
 8002676:	f7ff faf0 	bl	8001c5a <fillRect>
	HAL_Delay(1000);
 800267a:	23fa      	movs	r3, #250	; 0xfa
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	0018      	movs	r0, r3
 8002680:	f001 fe52 	bl	8004328 <HAL_Delay>

	drawLine(x, y, x-WIDTH/2, y-HEIGHT/4, ST77XX_ORANGE, hspi);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	b2d8      	uxtb	r0, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	b2d9      	uxtb	r1, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	b2db      	uxtb	r3, r3
 8002690:	3b40      	subs	r3, #64	; 0x40
 8002692:	b2da      	uxtb	r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	b2db      	uxtb	r3, r3
 8002698:	3b28      	subs	r3, #40	; 0x28
 800269a:	b2dc      	uxtb	r4, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	9301      	str	r3, [sp, #4]
 80026a0:	23fc      	movs	r3, #252	; 0xfc
 80026a2:	021b      	lsls	r3, r3, #8
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	0023      	movs	r3, r4
 80026a8:	f7ff f9a4 	bl	80019f4 <drawLine>
	HAL_Delay(500);
 80026ac:	23fa      	movs	r3, #250	; 0xfa
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	0018      	movs	r0, r3
 80026b2:	f001 fe39 	bl	8004328 <HAL_Delay>
	fillRect(x-WIDTH/2, y-HEIGHT/4, WIDTH/2, HEIGHT/4, ST77XX_ORANGE, hspi);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	3b40      	subs	r3, #64	; 0x40
 80026bc:	b2d8      	uxtb	r0, r3
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	3b28      	subs	r3, #40	; 0x28
 80026c4:	b2d9      	uxtb	r1, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	9301      	str	r3, [sp, #4]
 80026ca:	23fc      	movs	r3, #252	; 0xfc
 80026cc:	021b      	lsls	r3, r3, #8
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	2328      	movs	r3, #40	; 0x28
 80026d2:	2240      	movs	r2, #64	; 0x40
 80026d4:	f7ff fac1 	bl	8001c5a <fillRect>
	HAL_Delay(1000);
 80026d8:	23fa      	movs	r3, #250	; 0xfa
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	0018      	movs	r0, r3
 80026de:	f001 fe23 	bl	8004328 <HAL_Delay>

	drawLine(x, y, x-WIDTH/4, y-HEIGHT/2, ST77XX_MAGENTA, hspi);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	b2d8      	uxtb	r0, r3
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	b2d9      	uxtb	r1, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	3b20      	subs	r3, #32
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	3b50      	subs	r3, #80	; 0x50
 80026f8:	b2dc      	uxtb	r4, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	9301      	str	r3, [sp, #4]
 80026fe:	4b40      	ldr	r3, [pc, #256]	; (8002800 <lineTest+0x2e4>)
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	0023      	movs	r3, r4
 8002704:	f7ff f976 	bl	80019f4 <drawLine>
	HAL_Delay(500);
 8002708:	23fa      	movs	r3, #250	; 0xfa
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	0018      	movs	r0, r3
 800270e:	f001 fe0b 	bl	8004328 <HAL_Delay>
	fillRect(x-WIDTH/4, y-HEIGHT/2, WIDTH/4, HEIGHT/2, ST77XX_MAGENTA, hspi);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	3b20      	subs	r3, #32
 8002718:	b2d8      	uxtb	r0, r3
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	b2db      	uxtb	r3, r3
 800271e:	3b50      	subs	r3, #80	; 0x50
 8002720:	b2d9      	uxtb	r1, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	9301      	str	r3, [sp, #4]
 8002726:	4b36      	ldr	r3, [pc, #216]	; (8002800 <lineTest+0x2e4>)
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	2350      	movs	r3, #80	; 0x50
 800272c:	2220      	movs	r2, #32
 800272e:	f7ff fa94 	bl	8001c5a <fillRect>
	HAL_Delay(1000);
 8002732:	23fa      	movs	r3, #250	; 0xfa
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	0018      	movs	r0, r3
 8002738:	f001 fdf6 	bl	8004328 <HAL_Delay>

	drawLine(x, y, x+WIDTH/4, y-HEIGHT/2, ST77XX_CYAN, hspi);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	b2d8      	uxtb	r0, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	b2d9      	uxtb	r1, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	b2db      	uxtb	r3, r3
 8002748:	3320      	adds	r3, #32
 800274a:	b2da      	uxtb	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	b2db      	uxtb	r3, r3
 8002750:	3b50      	subs	r3, #80	; 0x50
 8002752:	b2dc      	uxtb	r4, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	9301      	str	r3, [sp, #4]
 8002758:	4b2a      	ldr	r3, [pc, #168]	; (8002804 <lineTest+0x2e8>)
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	0023      	movs	r3, r4
 800275e:	f7ff f949 	bl	80019f4 <drawLine>
	HAL_Delay(500);
 8002762:	23fa      	movs	r3, #250	; 0xfa
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	0018      	movs	r0, r3
 8002768:	f001 fdde 	bl	8004328 <HAL_Delay>
	fillRect(x, y-HEIGHT/2, WIDTH/4, HEIGHT/2, ST77XX_CYAN, hspi);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	b2d8      	uxtb	r0, r3
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	b2db      	uxtb	r3, r3
 8002774:	3b50      	subs	r3, #80	; 0x50
 8002776:	b2d9      	uxtb	r1, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	9301      	str	r3, [sp, #4]
 800277c:	4b21      	ldr	r3, [pc, #132]	; (8002804 <lineTest+0x2e8>)
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	2350      	movs	r3, #80	; 0x50
 8002782:	2220      	movs	r2, #32
 8002784:	f7ff fa69 	bl	8001c5a <fillRect>
	HAL_Delay(1000);
 8002788:	23fa      	movs	r3, #250	; 0xfa
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	0018      	movs	r0, r3
 800278e:	f001 fdcb 	bl	8004328 <HAL_Delay>

	drawLine(x, y, x+WIDTH/2, y-HEIGHT/4, ST77XX_WHITE, hspi);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	b2d8      	uxtb	r0, r3
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	b2d9      	uxtb	r1, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	b2db      	uxtb	r3, r3
 800279e:	3340      	adds	r3, #64	; 0x40
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	3b28      	subs	r3, #40	; 0x28
 80027a8:	b2dc      	uxtb	r4, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	9301      	str	r3, [sp, #4]
 80027ae:	4b16      	ldr	r3, [pc, #88]	; (8002808 <lineTest+0x2ec>)
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	0023      	movs	r3, r4
 80027b4:	f7ff f91e 	bl	80019f4 <drawLine>
	HAL_Delay(500);
 80027b8:	23fa      	movs	r3, #250	; 0xfa
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	0018      	movs	r0, r3
 80027be:	f001 fdb3 	bl	8004328 <HAL_Delay>
	fillRect(x, y-HEIGHT/4, WIDTH/2, HEIGHT/4, ST77XX_WHITE, hspi);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	b2d8      	uxtb	r0, r3
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	3b28      	subs	r3, #40	; 0x28
 80027cc:	b2d9      	uxtb	r1, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	9301      	str	r3, [sp, #4]
 80027d2:	4b0d      	ldr	r3, [pc, #52]	; (8002808 <lineTest+0x2ec>)
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	2328      	movs	r3, #40	; 0x28
 80027d8:	2240      	movs	r2, #64	; 0x40
 80027da:	f7ff fa3e 	bl	8001c5a <fillRect>
	HAL_Delay(1000);
 80027de:	23fa      	movs	r3, #250	; 0xfa
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	0018      	movs	r0, r3
 80027e4:	f001 fda0 	bl	8004328 <HAL_Delay>

	clearScreen(ST77XX_BLACK, hspi);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	0019      	movs	r1, r3
 80027ec:	2000      	movs	r0, #0
 80027ee:	f7ff fae3 	bl	8001db8 <clearScreen>
}
 80027f2:	46c0      	nop			; (mov r8, r8)
 80027f4:	46bd      	mov	sp, r7
 80027f6:	b005      	add	sp, #20
 80027f8:	bd90      	pop	{r4, r7, pc}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	0000ffe0 	.word	0x0000ffe0
 8002800:	0000f81f 	.word	0x0000f81f
 8002804:	000007ff 	.word	0x000007ff
 8002808:	0000ffff 	.word	0x0000ffff

0800280c <charTest>:

void charTest(SPI_HandleTypeDef *hspi) {
 800280c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800280e:	b089      	sub	sp, #36	; 0x24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
	uint8_t x, y;

	uint16_t rainbowColors[] = {
 8002814:	2308      	movs	r3, #8
 8002816:	18fb      	adds	r3, r7, r3
 8002818:	4a57      	ldr	r2, [pc, #348]	; (8002978 <charTest+0x16c>)
 800281a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800281c:	c313      	stmia	r3!, {r0, r1, r4}
 800281e:	8812      	ldrh	r2, [r2, #0]
 8002820:	801a      	strh	r2, [r3, #0]
		ST77XX_BLUE,
		ST77XX_MAGENTA
	};

	// print the standard 127 6x8 characters in different sizes
	for (int ch_size = 1; ch_size < 6; ch_size++) {
 8002822:	2301      	movs	r3, #1
 8002824:	61fb      	str	r3, [r7, #28]
 8002826:	e09e      	b.n	8002966 <charTest+0x15a>
		setTextSize(ch_size);
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	b2db      	uxtb	r3, r3
 800282c:	0018      	movs	r0, r3
 800282e:	f7ff fe55 	bl	80024dc <setTextSize>
		for (unsigned char ch = 0; ch < 255; ch++) {
 8002832:	231b      	movs	r3, #27
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	2200      	movs	r2, #0
 8002838:	701a      	strb	r2, [r3, #0]
 800283a:	e081      	b.n	8002940 <charTest+0x134>
			// move to right enough for next char
			x = (ch*ch_size*6) % (WIDTH/(ch_size*6)*(ch_size*6));
 800283c:	261b      	movs	r6, #27
 800283e:	19bb      	adds	r3, r7, r6
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	69fa      	ldr	r2, [r7, #28]
 8002844:	435a      	muls	r2, r3
 8002846:	0013      	movs	r3, r2
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	189b      	adds	r3, r3, r2
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	001c      	movs	r4, r3
 8002850:	69fa      	ldr	r2, [r7, #28]
 8002852:	0013      	movs	r3, r2
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	189b      	adds	r3, r3, r2
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	0019      	movs	r1, r3
 800285c:	2080      	movs	r0, #128	; 0x80
 800285e:	f7fd fcdd 	bl	800021c <__divsi3>
 8002862:	0003      	movs	r3, r0
 8002864:	0019      	movs	r1, r3
 8002866:	69fa      	ldr	r2, [r7, #28]
 8002868:	0013      	movs	r3, r2
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	189b      	adds	r3, r3, r2
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	434b      	muls	r3, r1
 8002872:	0019      	movs	r1, r3
 8002874:	0020      	movs	r0, r4
 8002876:	f7fd fdb7 	bl	80003e8 <__aeabi_idivmod>
 800287a:	000b      	movs	r3, r1
 800287c:	001a      	movs	r2, r3
 800287e:	231a      	movs	r3, #26
 8002880:	18fb      	adds	r3, r7, r3
 8002882:	701a      	strb	r2, [r3, #0]
			// line break when x gets near WIDTH
			y = ((8*ch_size) * ((ch*ch_size*6) / (WIDTH/(ch_size*6)*(ch_size*6)))) % (HEIGHT/(ch_size*8)*(ch_size*8));
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	00dc      	lsls	r4, r3, #3
 8002888:	19bb      	adds	r3, r7, r6
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	69fa      	ldr	r2, [r7, #28]
 800288e:	435a      	muls	r2, r3
 8002890:	0013      	movs	r3, r2
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	189b      	adds	r3, r3, r2
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	001d      	movs	r5, r3
 800289a:	69fa      	ldr	r2, [r7, #28]
 800289c:	0013      	movs	r3, r2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	189b      	adds	r3, r3, r2
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	0019      	movs	r1, r3
 80028a6:	2080      	movs	r0, #128	; 0x80
 80028a8:	f7fd fcb8 	bl	800021c <__divsi3>
 80028ac:	0003      	movs	r3, r0
 80028ae:	0019      	movs	r1, r3
 80028b0:	69fa      	ldr	r2, [r7, #28]
 80028b2:	0013      	movs	r3, r2
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	189b      	adds	r3, r3, r2
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	434b      	muls	r3, r1
 80028bc:	0019      	movs	r1, r3
 80028be:	0028      	movs	r0, r5
 80028c0:	f7fd fcac 	bl	800021c <__divsi3>
 80028c4:	0003      	movs	r3, r0
 80028c6:	435c      	muls	r4, r3
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	0019      	movs	r1, r3
 80028ce:	20a0      	movs	r0, #160	; 0xa0
 80028d0:	f7fd fca4 	bl	800021c <__divsi3>
 80028d4:	0003      	movs	r3, r0
 80028d6:	001a      	movs	r2, r3
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	4353      	muls	r3, r2
 80028de:	0019      	movs	r1, r3
 80028e0:	0020      	movs	r0, r4
 80028e2:	f7fd fd81 	bl	80003e8 <__aeabi_idivmod>
 80028e6:	000b      	movs	r3, r1
 80028e8:	001a      	movs	r2, r3
 80028ea:	2119      	movs	r1, #25
 80028ec:	187b      	adds	r3, r7, r1
 80028ee:	701a      	strb	r2, [r3, #0]

			setCursor(x, y);
 80028f0:	187b      	adds	r3, r7, r1
 80028f2:	781a      	ldrb	r2, [r3, #0]
 80028f4:	231a      	movs	r3, #26
 80028f6:	18fb      	adds	r3, r7, r3
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	0011      	movs	r1, r2
 80028fc:	0018      	movs	r0, r3
 80028fe:	f7ff fdd3 	bl	80024a8 <setCursor>
			setTextColor(rainbowColors[ch%7]);
 8002902:	19bb      	adds	r3, r7, r6
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2107      	movs	r1, #7
 8002908:	0018      	movs	r0, r3
 800290a:	f7fd fc83 	bl	8000214 <__aeabi_uidivmod>
 800290e:	000b      	movs	r3, r1
 8002910:	b2db      	uxtb	r3, r3
 8002912:	001a      	movs	r2, r3
 8002914:	2308      	movs	r3, #8
 8002916:	18fb      	adds	r3, r7, r3
 8002918:	0052      	lsls	r2, r2, #1
 800291a:	5ad3      	ldrh	r3, [r2, r3]
 800291c:	0018      	movs	r0, r3
 800291e:	f7ff fded 	bl	80024fc <setTextColor>
			setBackgroundColor(ST77XX_BLACK);
 8002922:	2000      	movs	r0, #0
 8002924:	f7ff fdb0 	bl	8002488 <setBackgroundColor>
			drawChar(ch, hspi);
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	19bb      	adds	r3, r7, r6
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	0011      	movs	r1, r2
 8002930:	0018      	movs	r0, r3
 8002932:	f7ff fa59 	bl	8001de8 <drawChar>
		for (unsigned char ch = 0; ch < 255; ch++) {
 8002936:	19bb      	adds	r3, r7, r6
 8002938:	781a      	ldrb	r2, [r3, #0]
 800293a:	19bb      	adds	r3, r7, r6
 800293c:	3201      	adds	r2, #1
 800293e:	701a      	strb	r2, [r3, #0]
 8002940:	231b      	movs	r3, #27
 8002942:	18fb      	adds	r3, r7, r3
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2bff      	cmp	r3, #255	; 0xff
 8002948:	d000      	beq.n	800294c <charTest+0x140>
 800294a:	e777      	b.n	800283c <charTest+0x30>
//			HAL_Delay(250);
		}
		HAL_Delay(1000);
 800294c:	23fa      	movs	r3, #250	; 0xfa
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	0018      	movs	r0, r3
 8002952:	f001 fce9 	bl	8004328 <HAL_Delay>
		clearScreen(ST77XX_BLACK, hspi);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	0019      	movs	r1, r3
 800295a:	2000      	movs	r0, #0
 800295c:	f7ff fa2c 	bl	8001db8 <clearScreen>
	for (int ch_size = 1; ch_size < 6; ch_size++) {
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	3301      	adds	r3, #1
 8002964:	61fb      	str	r3, [r7, #28]
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	2b05      	cmp	r3, #5
 800296a:	dc00      	bgt.n	800296e <charTest+0x162>
 800296c:	e75c      	b.n	8002828 <charTest+0x1c>
	}
}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	46bd      	mov	sp, r7
 8002972:	b009      	add	sp, #36	; 0x24
 8002974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	08008454 	.word	0x08008454

0800297c <setClockAlarm>:

	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
}

// set an alarm for the next second for triggering display updates
void setClockAlarm(RTC_HandleTypeDef *hrtc) {
 800297c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800297e:	b097      	sub	sp, #92	; 0x5c
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef salarm = {0};
 8002984:	232c      	movs	r3, #44	; 0x2c
 8002986:	18fb      	adds	r3, r7, r3
 8002988:	0018      	movs	r0, r3
 800298a:	2328      	movs	r3, #40	; 0x28
 800298c:	001a      	movs	r2, r3
 800298e:	2100      	movs	r1, #0
 8002990:	f005 fc91 	bl	80082b6 <memset>
	RTC_TimeTypeDef salarmtime = {0};
 8002994:	2318      	movs	r3, #24
 8002996:	18fb      	adds	r3, r7, r3
 8002998:	0018      	movs	r0, r3
 800299a:	2314      	movs	r3, #20
 800299c:	001a      	movs	r2, r3
 800299e:	2100      	movs	r1, #0
 80029a0:	f005 fc89 	bl	80082b6 <memset>

	// pull current time
	struct dates currentDate = {0};
 80029a4:	2410      	movs	r4, #16
 80029a6:	193b      	adds	r3, r7, r4
 80029a8:	0018      	movs	r0, r3
 80029aa:	2306      	movs	r3, #6
 80029ac:	001a      	movs	r2, r3
 80029ae:	2100      	movs	r1, #0
 80029b0:	f005 fc81 	bl	80082b6 <memset>
	struct times currentTime = {0};
 80029b4:	250c      	movs	r5, #12
 80029b6:	197b      	adds	r3, r7, r5
 80029b8:	0018      	movs	r0, r3
 80029ba:	2303      	movs	r3, #3
 80029bc:	001a      	movs	r2, r3
 80029be:	2100      	movs	r1, #0
 80029c0:	f005 fc79 	bl	80082b6 <memset>
	getDateTime(&currentDate, &currentTime, hrtc);
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	1979      	adds	r1, r7, r5
 80029c8:	193b      	adds	r3, r7, r4
 80029ca:	0018      	movs	r0, r3
 80029cc:	f000 f976 	bl	8002cbc <getDateTime>

	// start setting alarm
	struct alarmTimes a = {0};
 80029d0:	2308      	movs	r3, #8
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
	uint8_t s,m,h,w;
	// set for only 1/min on low battery mode
//	bState = batteryLow;
	if (bState == batteryLow || bState == batteryReallyLow) {
 80029d8:	4ba1      	ldr	r3, [pc, #644]	; (8002c60 <setClockAlarm+0x2e4>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d003      	beq.n	80029e8 <setClockAlarm+0x6c>
 80029e0:	4b9f      	ldr	r3, [pc, #636]	; (8002c60 <setClockAlarm+0x2e4>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d164      	bne.n	8002ab2 <setClockAlarm+0x136>
		s = currentTime.sec;
 80029e8:	2157      	movs	r1, #87	; 0x57
 80029ea:	187b      	adds	r3, r7, r1
 80029ec:	250c      	movs	r5, #12
 80029ee:	197a      	adds	r2, r7, r5
 80029f0:	7892      	ldrb	r2, [r2, #2]
 80029f2:	701a      	strb	r2, [r3, #0]
		m = currentTime.min + s/60 + 1;
 80029f4:	197b      	adds	r3, r7, r5
 80029f6:	785c      	ldrb	r4, [r3, #1]
 80029f8:	187b      	adds	r3, r7, r1
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	213c      	movs	r1, #60	; 0x3c
 80029fe:	0018      	movs	r0, r3
 8002a00:	f7fd fb82 	bl	8000108 <__udivsi3>
 8002a04:	0003      	movs	r3, r0
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	18e3      	adds	r3, r4, r3
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	2156      	movs	r1, #86	; 0x56
 8002a0e:	187b      	adds	r3, r7, r1
 8002a10:	3201      	adds	r2, #1
 8002a12:	701a      	strb	r2, [r3, #0]
		h = currentTime.hr + m/60;
 8002a14:	197b      	adds	r3, r7, r5
 8002a16:	781c      	ldrb	r4, [r3, #0]
 8002a18:	187b      	adds	r3, r7, r1
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	213c      	movs	r1, #60	; 0x3c
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f7fd fb72 	bl	8000108 <__udivsi3>
 8002a24:	0003      	movs	r3, r0
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	2155      	movs	r1, #85	; 0x55
 8002a2a:	187b      	adds	r3, r7, r1
 8002a2c:	18a2      	adds	r2, r4, r2
 8002a2e:	701a      	strb	r2, [r3, #0]
		w = currentDate.weekday + h/24;
 8002a30:	2310      	movs	r3, #16
 8002a32:	18fb      	adds	r3, r7, r3
 8002a34:	791c      	ldrb	r4, [r3, #4]
 8002a36:	187b      	adds	r3, r7, r1
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2118      	movs	r1, #24
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f7fd fb63 	bl	8000108 <__udivsi3>
 8002a42:	0003      	movs	r3, r0
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	2354      	movs	r3, #84	; 0x54
 8002a48:	18fb      	adds	r3, r7, r3
 8002a4a:	18a2      	adds	r2, r4, r2
 8002a4c:	701a      	strb	r2, [r3, #0]

		// for transitioning between centuries
		if (currentTime.min == 59 &&
 8002a4e:	197b      	adds	r3, r7, r5
 8002a50:	785b      	ldrb	r3, [r3, #1]
 8002a52:	2b3b      	cmp	r3, #59	; 0x3b
 8002a54:	d000      	beq.n	8002a58 <setClockAlarm+0xdc>
 8002a56:	e091      	b.n	8002b7c <setClockAlarm+0x200>
			currentTime.hr == 23 &&
 8002a58:	230c      	movs	r3, #12
 8002a5a:	18fb      	adds	r3, r7, r3
 8002a5c:	781b      	ldrb	r3, [r3, #0]
		if (currentTime.min == 59 &&
 8002a5e:	2b17      	cmp	r3, #23
 8002a60:	d000      	beq.n	8002a64 <setClockAlarm+0xe8>
 8002a62:	e08b      	b.n	8002b7c <setClockAlarm+0x200>
			currentDate.yr % 100 == 99 &&
 8002a64:	2310      	movs	r3, #16
 8002a66:	18fb      	adds	r3, r7, r3
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	2164      	movs	r1, #100	; 0x64
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f7fd fbd1 	bl	8000214 <__aeabi_uidivmod>
 8002a72:	000b      	movs	r3, r1
 8002a74:	b29b      	uxth	r3, r3
			currentTime.hr == 23 &&
 8002a76:	2b63      	cmp	r3, #99	; 0x63
 8002a78:	d000      	beq.n	8002a7c <setClockAlarm+0x100>
 8002a7a:	e07f      	b.n	8002b7c <setClockAlarm+0x200>
			currentDate.month == 12 &&
 8002a7c:	2310      	movs	r3, #16
 8002a7e:	18fb      	adds	r3, r7, r3
 8002a80:	789b      	ldrb	r3, [r3, #2]
			currentDate.yr % 100 == 99 &&
 8002a82:	2b0c      	cmp	r3, #12
 8002a84:	d000      	beq.n	8002a88 <setClockAlarm+0x10c>
 8002a86:	e079      	b.n	8002b7c <setClockAlarm+0x200>
			currentDate.date == maxDaysInMonth(currentDate.month, currentDate.yr)) {
 8002a88:	2110      	movs	r1, #16
 8002a8a:	187b      	adds	r3, r7, r1
 8002a8c:	78dc      	ldrb	r4, [r3, #3]
 8002a8e:	187b      	adds	r3, r7, r1
 8002a90:	789a      	ldrb	r2, [r3, #2]
 8002a92:	187b      	adds	r3, r7, r1
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	0019      	movs	r1, r3
 8002a98:	0010      	movs	r0, r2
 8002a9a:	f000 f9af 	bl	8002dfc <maxDaysInMonth>
 8002a9e:	0003      	movs	r3, r0
			currentDate.month == 12 &&
 8002aa0:	429c      	cmp	r4, r3
 8002aa2:	d16b      	bne.n	8002b7c <setClockAlarm+0x200>
			century++;
 8002aa4:	4b6f      	ldr	r3, [pc, #444]	; (8002c64 <setClockAlarm+0x2e8>)
 8002aa6:	881b      	ldrh	r3, [r3, #0]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	4b6d      	ldr	r3, [pc, #436]	; (8002c64 <setClockAlarm+0x2e8>)
 8002aae:	801a      	strh	r2, [r3, #0]
		if (currentTime.min == 59 &&
 8002ab0:	e064      	b.n	8002b7c <setClockAlarm+0x200>
		}
	}
	// else set 1/s
	else {
		s = currentTime.sec + 1;
 8002ab2:	250c      	movs	r5, #12
 8002ab4:	197b      	adds	r3, r7, r5
 8002ab6:	789a      	ldrb	r2, [r3, #2]
 8002ab8:	2157      	movs	r1, #87	; 0x57
 8002aba:	187b      	adds	r3, r7, r1
 8002abc:	3201      	adds	r2, #1
 8002abe:	701a      	strb	r2, [r3, #0]
		m = currentTime.min + s/60;
 8002ac0:	197b      	adds	r3, r7, r5
 8002ac2:	785c      	ldrb	r4, [r3, #1]
 8002ac4:	187b      	adds	r3, r7, r1
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	213c      	movs	r1, #60	; 0x3c
 8002aca:	0018      	movs	r0, r3
 8002acc:	f7fd fb1c 	bl	8000108 <__udivsi3>
 8002ad0:	0003      	movs	r3, r0
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	2156      	movs	r1, #86	; 0x56
 8002ad6:	187b      	adds	r3, r7, r1
 8002ad8:	18a2      	adds	r2, r4, r2
 8002ada:	701a      	strb	r2, [r3, #0]
		h = currentTime.hr + m/60;
 8002adc:	197b      	adds	r3, r7, r5
 8002ade:	781c      	ldrb	r4, [r3, #0]
 8002ae0:	187b      	adds	r3, r7, r1
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	213c      	movs	r1, #60	; 0x3c
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f7fd fb0e 	bl	8000108 <__udivsi3>
 8002aec:	0003      	movs	r3, r0
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	2155      	movs	r1, #85	; 0x55
 8002af2:	187b      	adds	r3, r7, r1
 8002af4:	18a2      	adds	r2, r4, r2
 8002af6:	701a      	strb	r2, [r3, #0]
		w = currentDate.weekday + h/24;
 8002af8:	2310      	movs	r3, #16
 8002afa:	18fb      	adds	r3, r7, r3
 8002afc:	791c      	ldrb	r4, [r3, #4]
 8002afe:	187b      	adds	r3, r7, r1
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2118      	movs	r1, #24
 8002b04:	0018      	movs	r0, r3
 8002b06:	f7fd faff 	bl	8000108 <__udivsi3>
 8002b0a:	0003      	movs	r3, r0
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	2354      	movs	r3, #84	; 0x54
 8002b10:	18fb      	adds	r3, r7, r3
 8002b12:	18a2      	adds	r2, r4, r2
 8002b14:	701a      	strb	r2, [r3, #0]

		// for transitioning between centuries
		if (currentTime.sec == 59 &&			// need to check for second
 8002b16:	197b      	adds	r3, r7, r5
 8002b18:	789b      	ldrb	r3, [r3, #2]
 8002b1a:	2b3b      	cmp	r3, #59	; 0x3b
 8002b1c:	d12f      	bne.n	8002b7e <setClockAlarm+0x202>
			currentTime.min == 59 &&
 8002b1e:	230c      	movs	r3, #12
 8002b20:	18fb      	adds	r3, r7, r3
 8002b22:	785b      	ldrb	r3, [r3, #1]
		if (currentTime.sec == 59 &&			// need to check for second
 8002b24:	2b3b      	cmp	r3, #59	; 0x3b
 8002b26:	d12a      	bne.n	8002b7e <setClockAlarm+0x202>
			currentTime.hr == 23 &&
 8002b28:	230c      	movs	r3, #12
 8002b2a:	18fb      	adds	r3, r7, r3
 8002b2c:	781b      	ldrb	r3, [r3, #0]
			currentTime.min == 59 &&
 8002b2e:	2b17      	cmp	r3, #23
 8002b30:	d125      	bne.n	8002b7e <setClockAlarm+0x202>
			currentDate.yr % 100 == 99 &&
 8002b32:	2310      	movs	r3, #16
 8002b34:	18fb      	adds	r3, r7, r3
 8002b36:	881b      	ldrh	r3, [r3, #0]
 8002b38:	2164      	movs	r1, #100	; 0x64
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f7fd fb6a 	bl	8000214 <__aeabi_uidivmod>
 8002b40:	000b      	movs	r3, r1
 8002b42:	b29b      	uxth	r3, r3
			currentTime.hr == 23 &&
 8002b44:	2b63      	cmp	r3, #99	; 0x63
 8002b46:	d11a      	bne.n	8002b7e <setClockAlarm+0x202>
			currentDate.month == 12 &&
 8002b48:	2310      	movs	r3, #16
 8002b4a:	18fb      	adds	r3, r7, r3
 8002b4c:	789b      	ldrb	r3, [r3, #2]
			currentDate.yr % 100 == 99 &&
 8002b4e:	2b0c      	cmp	r3, #12
 8002b50:	d115      	bne.n	8002b7e <setClockAlarm+0x202>
			currentDate.date == maxDaysInMonth(currentDate.month, currentDate.yr)) {
 8002b52:	2110      	movs	r1, #16
 8002b54:	187b      	adds	r3, r7, r1
 8002b56:	78dc      	ldrb	r4, [r3, #3]
 8002b58:	187b      	adds	r3, r7, r1
 8002b5a:	789a      	ldrb	r2, [r3, #2]
 8002b5c:	187b      	adds	r3, r7, r1
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	0019      	movs	r1, r3
 8002b62:	0010      	movs	r0, r2
 8002b64:	f000 f94a 	bl	8002dfc <maxDaysInMonth>
 8002b68:	0003      	movs	r3, r0
			currentDate.month == 12 &&
 8002b6a:	429c      	cmp	r4, r3
 8002b6c:	d107      	bne.n	8002b7e <setClockAlarm+0x202>
			century++;
 8002b6e:	4b3d      	ldr	r3, [pc, #244]	; (8002c64 <setClockAlarm+0x2e8>)
 8002b70:	881b      	ldrh	r3, [r3, #0]
 8002b72:	3301      	adds	r3, #1
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	4b3b      	ldr	r3, [pc, #236]	; (8002c64 <setClockAlarm+0x2e8>)
 8002b78:	801a      	strh	r2, [r3, #0]
 8002b7a:	e000      	b.n	8002b7e <setClockAlarm+0x202>
		if (currentTime.min == 59 &&
 8002b7c:	46c0      	nop			; (mov r8, r8)
		}
	}
	a.sec = s % 60;
 8002b7e:	2357      	movs	r3, #87	; 0x57
 8002b80:	18fb      	adds	r3, r7, r3
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	213c      	movs	r1, #60	; 0x3c
 8002b86:	0018      	movs	r0, r3
 8002b88:	f7fd fb44 	bl	8000214 <__aeabi_uidivmod>
 8002b8c:	000b      	movs	r3, r1
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	2408      	movs	r4, #8
 8002b92:	193b      	adds	r3, r7, r4
 8002b94:	709a      	strb	r2, [r3, #2]
	a.min = m % 60;
 8002b96:	2356      	movs	r3, #86	; 0x56
 8002b98:	18fb      	adds	r3, r7, r3
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	213c      	movs	r1, #60	; 0x3c
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f7fd fb38 	bl	8000214 <__aeabi_uidivmod>
 8002ba4:	000b      	movs	r3, r1
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	193b      	adds	r3, r7, r4
 8002baa:	705a      	strb	r2, [r3, #1]
	a.hr = h % 24;
 8002bac:	2355      	movs	r3, #85	; 0x55
 8002bae:	18fb      	adds	r3, r7, r3
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2118      	movs	r1, #24
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	f7fd fb2d 	bl	8000214 <__aeabi_uidivmod>
 8002bba:	000b      	movs	r3, r1
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	193b      	adds	r3, r7, r4
 8002bc0:	701a      	strb	r2, [r3, #0]
	a.weekday = (w-1) % 7 + 1;
 8002bc2:	2354      	movs	r3, #84	; 0x54
 8002bc4:	18fb      	adds	r3, r7, r3
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	2107      	movs	r1, #7
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f7fd fc0b 	bl	80003e8 <__aeabi_idivmod>
 8002bd2:	000b      	movs	r3, r1
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	0020      	movs	r0, r4
 8002bdc:	183b      	adds	r3, r7, r0
 8002bde:	70da      	strb	r2, [r3, #3]

	salarmtime.Hours = a.hr;
 8002be0:	183b      	adds	r3, r7, r0
 8002be2:	781a      	ldrb	r2, [r3, #0]
 8002be4:	2118      	movs	r1, #24
 8002be6:	187b      	adds	r3, r7, r1
 8002be8:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a.min;
 8002bea:	183b      	adds	r3, r7, r0
 8002bec:	785a      	ldrb	r2, [r3, #1]
 8002bee:	187b      	adds	r3, r7, r1
 8002bf0:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a.sec;
 8002bf2:	183b      	adds	r3, r7, r0
 8002bf4:	789a      	ldrb	r2, [r3, #2]
 8002bf6:	187b      	adds	r3, r7, r1
 8002bf8:	709a      	strb	r2, [r3, #2]
	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 8002bfa:	187b      	adds	r3, r7, r1
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 8002c00:	187b      	adds	r3, r7, r1
 8002c02:	2200      	movs	r2, #0
 8002c04:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 8002c06:	187b      	adds	r3, r7, r1
 8002c08:	2200      	movs	r2, #0
 8002c0a:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002c0c:	187b      	adds	r3, r7, r1
 8002c0e:	2200      	movs	r2, #0
 8002c10:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002c12:	187b      	adds	r3, r7, r1
 8002c14:	2200      	movs	r2, #0
 8002c16:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 8002c18:	242c      	movs	r4, #44	; 0x2c
 8002c1a:	193b      	adds	r3, r7, r4
 8002c1c:	187a      	adds	r2, r7, r1
 8002c1e:	ca62      	ldmia	r2!, {r1, r5, r6}
 8002c20:	c362      	stmia	r3!, {r1, r5, r6}
 8002c22:	ca22      	ldmia	r2!, {r1, r5}
 8002c24:	c322      	stmia	r3!, {r1, r5}
	salarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002c26:	193b      	adds	r3, r7, r4
 8002c28:	2200      	movs	r2, #0
 8002c2a:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002c2c:	193b      	adds	r3, r7, r4
 8002c2e:	2200      	movs	r2, #0
 8002c30:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8002c32:	193b      	adds	r3, r7, r4
 8002c34:	2280      	movs	r2, #128	; 0x80
 8002c36:	05d2      	lsls	r2, r2, #23
 8002c38:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a.weekday;
 8002c3a:	183b      	adds	r3, r7, r0
 8002c3c:	78d9      	ldrb	r1, [r3, #3]
 8002c3e:	193b      	adds	r3, r7, r4
 8002c40:	2220      	movs	r2, #32
 8002c42:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_B;
 8002c44:	193b      	adds	r3, r7, r4
 8002c46:	2280      	movs	r2, #128	; 0x80
 8002c48:	0092      	lsls	r2, r2, #2
 8002c4a:	625a      	str	r2, [r3, #36]	; 0x24

	// do nothing until done
	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
 8002c4c:	1939      	adds	r1, r7, r4
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	0018      	movs	r0, r3
 8002c54:	f003 fc9e 	bl	8006594 <HAL_RTC_SetAlarm_IT>
}
 8002c58:	46c0      	nop			; (mov r8, r8)
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b017      	add	sp, #92	; 0x5c
 8002c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c60:	200000d9 	.word	0x200000d9
 8002c64:	20000000 	.word	0x20000000

08002c68 <HAL_RTC_AlarmAEventCallback>:
// ---- end of RTC setters ----

// ---- callbacks for interrupts ----
// used for alarm function in project
// meant to send signal to use motor
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED1_PORT, LED1_PIN);
 8002c70:	23a0      	movs	r3, #160	; 0xa0
 8002c72:	05db      	lsls	r3, r3, #23
 8002c74:	2120      	movs	r1, #32
 8002c76:	0018      	movs	r0, r3
 8002c78:	f002 f95f 	bl	8004f3a <HAL_GPIO_TogglePin>
	isAlarmDone = 1;
 8002c7c:	4b04      	ldr	r3, [pc, #16]	; (8002c90 <HAL_RTC_AlarmAEventCallback+0x28>)
 8002c7e:	2201      	movs	r2, #1
 8002c80:	701a      	strb	r2, [r3, #0]
	updateFace.alarm = 1;
 8002c82:	4b04      	ldr	r3, [pc, #16]	; (8002c94 <HAL_RTC_AlarmAEventCallback+0x2c>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	709a      	strb	r2, [r3, #2]
}
 8002c88:	46c0      	nop			; (mov r8, r8)
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b002      	add	sp, #8
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	200000cb 	.word	0x200000cb
 8002c94:	200000cc 	.word	0x200000cc

08002c98 <HAL_RTCEx_AlarmBEventCallback>:

// used to trigger display refresh every second. used because then it's synchronous with RTC updates
void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc) {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
	updateFace.clock = 1;
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <HAL_RTCEx_AlarmBEventCallback+0x20>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	701a      	strb	r2, [r3, #0]
	setClockAlarm(hrtc);		// set something for next second
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f7ff fe67 	bl	800297c <setClockAlarm>
}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	b002      	add	sp, #8
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	200000cc 	.word	0x200000cc

08002cbc <getDateTime>:
	d->date = sdate.Date;
	d->weekday = sdate.WeekDay;
}

// not using getDate and getTime for possible efficiency
void getDateTime(struct dates *d, struct times *t, RTC_HandleTypeDef *hrtc) {
 8002cbc:	b5b0      	push	{r4, r5, r7, lr}
 8002cbe:	b08a      	sub	sp, #40	; 0x28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
	RTC_DateTypeDef sdate;
	RTC_TimeTypeDef stime;

	// programming manual says to read time after date. something shadow registers.
	// not done automatically in HAL
	HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN);
 8002cc8:	2510      	movs	r5, #16
 8002cca:	1979      	adds	r1, r7, r5
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	f003 fb07 	bl	80062e4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 8002cd6:	2124      	movs	r1, #36	; 0x24
 8002cd8:	000c      	movs	r4, r1
 8002cda:	1879      	adds	r1, r7, r1
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f003 fc09 	bl	80064f8 <HAL_RTC_GetDate>

	// pulls last 2 digits from RTC and upper 2 digits from static variable
	d->yr = century*100 + sdate.Year;
 8002ce6:	4b14      	ldr	r3, [pc, #80]	; (8002d38 <getDateTime+0x7c>)
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	2264      	movs	r2, #100	; 0x64
 8002cec:	4353      	muls	r3, r2
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	0021      	movs	r1, r4
 8002cf2:	187b      	adds	r3, r7, r1
 8002cf4:	78db      	ldrb	r3, [r3, #3]
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	18d3      	adds	r3, r2, r3
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	801a      	strh	r2, [r3, #0]
	d->month = sdate.Month;
 8002d00:	187b      	adds	r3, r7, r1
 8002d02:	785a      	ldrb	r2, [r3, #1]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	709a      	strb	r2, [r3, #2]
	d->date = sdate.Date;
 8002d08:	187b      	adds	r3, r7, r1
 8002d0a:	789a      	ldrb	r2, [r3, #2]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	70da      	strb	r2, [r3, #3]
	d->weekday = sdate.WeekDay;
 8002d10:	187b      	adds	r3, r7, r1
 8002d12:	781a      	ldrb	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	711a      	strb	r2, [r3, #4]

	t->hr = stime.Hours;
 8002d18:	197b      	adds	r3, r7, r5
 8002d1a:	781a      	ldrb	r2, [r3, #0]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	701a      	strb	r2, [r3, #0]
	t->min = stime.Minutes;
 8002d20:	197b      	adds	r3, r7, r5
 8002d22:	785a      	ldrb	r2, [r3, #1]
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	705a      	strb	r2, [r3, #1]
	t->sec = stime.Seconds;
 8002d28:	197b      	adds	r3, r7, r5
 8002d2a:	789a      	ldrb	r2, [r3, #2]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	709a      	strb	r2, [r3, #2]
}
 8002d30:	46c0      	nop			; (mov r8, r8)
 8002d32:	46bd      	mov	sp, r7
 8002d34:	b00a      	add	sp, #40	; 0x28
 8002d36:	bdb0      	pop	{r4, r5, r7, pc}
 8002d38:	20000000 	.word	0x20000000

08002d3c <setRTCCalibration>:
// ---- end of RTC getters ----

// ---- RTC calibration function ----
// calibVal should be given in drift/day in seconds
// calibration output on PC13
void setRTCCalibration(int calibVal, RTC_HandleTypeDef *hrtc) {
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
	uint16_t calm = 0;
 8002d46:	230e      	movs	r3, #14
 8002d48:	18fb      	adds	r3, r7, r3
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	801a      	strh	r2, [r3, #0]
	uint32_t temp;

	if (calibVal == 0) return;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d048      	beq.n	8002de6 <setRTCCalibration+0xaa>
	else if (calibVal < 0) {		// drift offset is negative. need to slow rtc down
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	da20      	bge.n	8002d9c <setRTCCalibration+0x60>
		if (calibVal <= -42) {		// bounds checking. just set to max
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3329      	adds	r3, #41	; 0x29
 8002d5e:	da06      	bge.n	8002d6e <setRTCCalibration+0x32>
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_RESET, 0x1FF);
 8002d60:	4b23      	ldr	r3, [pc, #140]	; (8002df0 <setRTCCalibration+0xb4>)
 8002d62:	6838      	ldr	r0, [r7, #0]
 8002d64:	2200      	movs	r2, #0
 8002d66:	2100      	movs	r1, #0
 8002d68:	f003 fe45 	bl	80069f6 <HAL_RTCEx_SetSmoothCalib>
 8002d6c:	e03c      	b.n	8002de8 <setRTCCalibration+0xac>
		}
		else {
			// math for setting CALM 9-bit register in RTC. formula in notes and in L0 programming reference manual
			temp = -calibVal*32768*32/86400;		// possible overflow when doing math, so reordering
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	0013      	movs	r3, r2
 8002d72:	031b      	lsls	r3, r3, #12
 8002d74:	1a9b      	subs	r3, r3, r2
 8002d76:	051b      	lsls	r3, r3, #20
 8002d78:	491e      	ldr	r1, [pc, #120]	; (8002df4 <setRTCCalibration+0xb8>)
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f7fd fa4e 	bl	800021c <__divsi3>
 8002d80:	0003      	movs	r3, r0
 8002d82:	60bb      	str	r3, [r7, #8]
			calm = temp;
 8002d84:	210e      	movs	r1, #14
 8002d86:	187b      	adds	r3, r7, r1
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	801a      	strh	r2, [r3, #0]
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_RESET, calm);
 8002d8c:	187b      	adds	r3, r7, r1
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	6838      	ldr	r0, [r7, #0]
 8002d92:	2200      	movs	r2, #0
 8002d94:	2100      	movs	r1, #0
 8002d96:	f003 fe2e 	bl	80069f6 <HAL_RTCEx_SetSmoothCalib>
 8002d9a:	e025      	b.n	8002de8 <setRTCCalibration+0xac>
		}
	}
	else {
		if (calibVal >= 42) { 		// drift offset is positive. need to speed rtc up
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b29      	cmp	r3, #41	; 0x29
 8002da0:	dd07      	ble.n	8002db2 <setRTCCalibration+0x76>
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_SET, 0);
 8002da2:	2380      	movs	r3, #128	; 0x80
 8002da4:	021a      	lsls	r2, r3, #8
 8002da6:	6838      	ldr	r0, [r7, #0]
 8002da8:	2300      	movs	r3, #0
 8002daa:	2100      	movs	r1, #0
 8002dac:	f003 fe23 	bl	80069f6 <HAL_RTCEx_SetSmoothCalib>
 8002db0:	e01a      	b.n	8002de8 <setRTCCalibration+0xac>
		}
		else {
			// math
			temp = 512-(calibVal*32768*32/86400);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	051b      	lsls	r3, r3, #20
 8002db6:	4910      	ldr	r1, [pc, #64]	; (8002df8 <setRTCCalibration+0xbc>)
 8002db8:	0018      	movs	r0, r3
 8002dba:	f7fd fa2f 	bl	800021c <__divsi3>
 8002dbe:	0003      	movs	r3, r0
 8002dc0:	2280      	movs	r2, #128	; 0x80
 8002dc2:	0092      	lsls	r2, r2, #2
 8002dc4:	4694      	mov	ip, r2
 8002dc6:	4463      	add	r3, ip
 8002dc8:	60bb      	str	r3, [r7, #8]
			calm = temp;
 8002dca:	210e      	movs	r1, #14
 8002dcc:	187b      	adds	r3, r7, r1
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	801a      	strh	r2, [r3, #0]
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_SET, calm);
 8002dd2:	187b      	adds	r3, r7, r1
 8002dd4:	8819      	ldrh	r1, [r3, #0]
 8002dd6:	2380      	movs	r3, #128	; 0x80
 8002dd8:	021a      	lsls	r2, r3, #8
 8002dda:	6838      	ldr	r0, [r7, #0]
 8002ddc:	000b      	movs	r3, r1
 8002dde:	2100      	movs	r1, #0
 8002de0:	f003 fe09 	bl	80069f6 <HAL_RTCEx_SetSmoothCalib>
 8002de4:	e000      	b.n	8002de8 <setRTCCalibration+0xac>
	if (calibVal == 0) return;
 8002de6:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8002de8:	46bd      	mov	sp, r7
 8002dea:	b004      	add	sp, #16
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	000001ff 	.word	0x000001ff
 8002df4:	00015180 	.word	0x00015180
 8002df8:	fffeae80 	.word	0xfffeae80

08002dfc <maxDaysInMonth>:
	else return temp;
}

// calculator for number of days in a month given a month and accounting for leap years
// assumes month is 1-12, 1=january, 12=december
uint8_t maxDaysInMonth(uint8_t month, uint16_t year) {
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	0002      	movs	r2, r0
 8002e04:	1dfb      	adds	r3, r7, #7
 8002e06:	701a      	strb	r2, [r3, #0]
 8002e08:	1d3b      	adds	r3, r7, #4
 8002e0a:	1c0a      	adds	r2, r1, #0
 8002e0c:	801a      	strh	r2, [r3, #0]
	if (month == 0 || month > 12) return 0;		// bounds checking
 8002e0e:	1dfb      	adds	r3, r7, #7
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <maxDaysInMonth+0x22>
 8002e16:	1dfb      	adds	r3, r7, #7
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b0c      	cmp	r3, #12
 8002e1c:	d901      	bls.n	8002e22 <maxDaysInMonth+0x26>
 8002e1e:	2300      	movs	r3, #0
 8002e20:	e052      	b.n	8002ec8 <maxDaysInMonth+0xcc>

	// not using built-in defines, because they're in BCD
	if (month == 1  ||		// january
 8002e22:	1dfb      	adds	r3, r7, #7
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d017      	beq.n	8002e5a <maxDaysInMonth+0x5e>
 8002e2a:	1dfb      	adds	r3, r7, #7
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b03      	cmp	r3, #3
 8002e30:	d013      	beq.n	8002e5a <maxDaysInMonth+0x5e>
		month == 3  ||		// march
 8002e32:	1dfb      	adds	r3, r7, #7
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b05      	cmp	r3, #5
 8002e38:	d00f      	beq.n	8002e5a <maxDaysInMonth+0x5e>
		month == 5  ||		// may
 8002e3a:	1dfb      	adds	r3, r7, #7
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b07      	cmp	r3, #7
 8002e40:	d00b      	beq.n	8002e5a <maxDaysInMonth+0x5e>
		month == 7  ||		// july
 8002e42:	1dfb      	adds	r3, r7, #7
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b08      	cmp	r3, #8
 8002e48:	d007      	beq.n	8002e5a <maxDaysInMonth+0x5e>
		month == 8  ||		// august
 8002e4a:	1dfb      	adds	r3, r7, #7
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	2b0a      	cmp	r3, #10
 8002e50:	d003      	beq.n	8002e5a <maxDaysInMonth+0x5e>
		month == 10 ||		// october
 8002e52:	1dfb      	adds	r3, r7, #7
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b0c      	cmp	r3, #12
 8002e58:	d101      	bne.n	8002e5e <maxDaysInMonth+0x62>
		month == 12) {		// december
		return 31;
 8002e5a:	231f      	movs	r3, #31
 8002e5c:	e034      	b.n	8002ec8 <maxDaysInMonth+0xcc>
	}
	else if (month == 4 ||	// april
 8002e5e:	1dfb      	adds	r3, r7, #7
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d00b      	beq.n	8002e7e <maxDaysInMonth+0x82>
 8002e66:	1dfb      	adds	r3, r7, #7
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b06      	cmp	r3, #6
 8002e6c:	d007      	beq.n	8002e7e <maxDaysInMonth+0x82>
			 month == 6 ||	// june
 8002e6e:	1dfb      	adds	r3, r7, #7
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b09      	cmp	r3, #9
 8002e74:	d003      	beq.n	8002e7e <maxDaysInMonth+0x82>
			 month == 9 ||	// september
 8002e76:	1dfb      	adds	r3, r7, #7
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b0b      	cmp	r3, #11
 8002e7c:	d101      	bne.n	8002e82 <maxDaysInMonth+0x86>
			 month == 11) {	// november
		return 30;
 8002e7e:	231e      	movs	r3, #30
 8002e80:	e022      	b.n	8002ec8 <maxDaysInMonth+0xcc>
	}

	// february/leap year calculator
	// leap year for every 4th year, but every 100th year is not a leap year except on every 400th year
	// ex. 2020 is a leap year, 2100 is not a leap year, 2000 is a leap year.
	else if (year % 400 == 0) return 29;
 8002e82:	1d3b      	adds	r3, r7, #4
 8002e84:	881a      	ldrh	r2, [r3, #0]
 8002e86:	23c8      	movs	r3, #200	; 0xc8
 8002e88:	0059      	lsls	r1, r3, #1
 8002e8a:	0010      	movs	r0, r2
 8002e8c:	f7fd f9c2 	bl	8000214 <__aeabi_uidivmod>
 8002e90:	000b      	movs	r3, r1
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <maxDaysInMonth+0xa0>
 8002e98:	231d      	movs	r3, #29
 8002e9a:	e015      	b.n	8002ec8 <maxDaysInMonth+0xcc>
	else if (year % 100 == 0) return 28;
 8002e9c:	1d3b      	adds	r3, r7, #4
 8002e9e:	881b      	ldrh	r3, [r3, #0]
 8002ea0:	2164      	movs	r1, #100	; 0x64
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	f7fd f9b6 	bl	8000214 <__aeabi_uidivmod>
 8002ea8:	000b      	movs	r3, r1
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <maxDaysInMonth+0xb8>
 8002eb0:	231c      	movs	r3, #28
 8002eb2:	e009      	b.n	8002ec8 <maxDaysInMonth+0xcc>
	else if (year % 4 == 0) return 29;
 8002eb4:	1d3b      	adds	r3, r7, #4
 8002eb6:	881b      	ldrh	r3, [r3, #0]
 8002eb8:	2203      	movs	r2, #3
 8002eba:	4013      	ands	r3, r2
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <maxDaysInMonth+0xca>
 8002ec2:	231d      	movs	r3, #29
 8002ec4:	e000      	b.n	8002ec8 <maxDaysInMonth+0xcc>
	else return 28;
 8002ec6:	231c      	movs	r3, #28
}
 8002ec8:	0018      	movs	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	b002      	add	sp, #8
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ed4:	f001 f9c8 	bl	8004268 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ed8:	f000 f844 	bl	8002f64 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002edc:	f000 fca2 	bl	8003824 <MX_GPIO_Init>
  MX_ADC_Init();
 8002ee0:	f000 f8c8 	bl	8003074 <MX_ADC_Init>
  MX_RTC_Init();
 8002ee4:	f000 f92a 	bl	800313c <MX_RTC_Init>
  MX_TIM21_Init();
 8002ee8:	f000 fb50 	bl	800358c <MX_TIM21_Init>
  MX_TIM22_Init();
 8002eec:	f000 fbe6 	bl	80036bc <MX_TIM22_Init>
  MX_TIM2_Init();
 8002ef0:	f000 f9f8 	bl	80032e4 <MX_TIM2_Init>
  MX_TIM6_Init();
 8002ef4:	f000 fb0e 	bl	8003514 <MX_TIM6_Init>
  MX_TIM3_Init();
 8002ef8:	f000 fa82 	bl	8003400 <MX_TIM3_Init>
  MX_SPI2_Init();
 8002efc:	f000 f9ba 	bl	8003274 <MX_SPI2_Init>
  MX_USB_PCD_Init();
 8002f00:	f000 fc6a 	bl	80037d8 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
	// rtc software calibration
	setRTCCalibration(-8, &hrtc);
 8002f04:	4a13      	ldr	r2, [pc, #76]	; (8002f54 <main+0x84>)
 8002f06:	2308      	movs	r3, #8
 8002f08:	425b      	negs	r3, r3
 8002f0a:	0011      	movs	r1, r2
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f7ff ff15 	bl	8002d3c <setRTCCalibration>
//	HAL_SuspendTick();					// disable systick. unused anyway (bad practice?)

  	// initialization for display
	TFT_startup(&hspi2);
 8002f12:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <main+0x88>)
 8002f14:	0018      	movs	r0, r3
 8002f16:	f7fe fad3 	bl	80014c0 <TFT_startup>
	clearScreen(ST77XX_BLACK, &hspi2);
 8002f1a:	4b0f      	ldr	r3, [pc, #60]	; (8002f58 <main+0x88>)
 8002f1c:	0019      	movs	r1, r3
 8002f1e:	2000      	movs	r0, #0
 8002f20:	f7fe ff4a 	bl	8001db8 <clearScreen>

	// initialization for ui and hardware
	initFace();
 8002f24:	f001 f940 	bl	80041a8 <initFace>
	setClockAlarm(&hrtc);
 8002f28:	4b0a      	ldr	r3, [pc, #40]	; (8002f54 <main+0x84>)
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	f7ff fd26 	bl	800297c <setClockAlarm>
	runADCSampler(&htim22);
 8002f30:	4b0a      	ldr	r3, [pc, #40]	; (8002f5c <main+0x8c>)
 8002f32:	0018      	movs	r0, r3
 8002f34:	f001 f89c 	bl	8004070 <runADCSampler>
	setDisplayBacklight(50, &htim3);
 8002f38:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <main+0x90>)
 8002f3a:	0019      	movs	r1, r3
 8002f3c:	2032      	movs	r0, #50	; 0x32
 8002f3e:	f001 f8bb 	bl	80040b8 <setDisplayBacklight>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		lineTest(&hspi2);
 8002f42:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <main+0x88>)
 8002f44:	0018      	movs	r0, r3
 8002f46:	f7ff fae9 	bl	800251c <lineTest>
		charTest(&hspi2);
 8002f4a:	4b03      	ldr	r3, [pc, #12]	; (8002f58 <main+0x88>)
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f7ff fc5d 	bl	800280c <charTest>
		lineTest(&hspi2);
 8002f52:	e7f6      	b.n	8002f42 <main+0x72>
 8002f54:	200001f4 	.word	0x200001f4
 8002f58:	20000124 	.word	0x20000124
 8002f5c:	200001b8 	.word	0x200001b8
 8002f60:	2000017c 	.word	0x2000017c

08002f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f64:	b590      	push	{r4, r7, lr}
 8002f66:	b09f      	sub	sp, #124	; 0x7c
 8002f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f6a:	2440      	movs	r4, #64	; 0x40
 8002f6c:	193b      	adds	r3, r7, r4
 8002f6e:	0018      	movs	r0, r3
 8002f70:	2338      	movs	r3, #56	; 0x38
 8002f72:	001a      	movs	r2, r3
 8002f74:	2100      	movs	r1, #0
 8002f76:	f005 f99e 	bl	80082b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f7a:	232c      	movs	r3, #44	; 0x2c
 8002f7c:	18fb      	adds	r3, r7, r3
 8002f7e:	0018      	movs	r0, r3
 8002f80:	2314      	movs	r3, #20
 8002f82:	001a      	movs	r2, r3
 8002f84:	2100      	movs	r1, #0
 8002f86:	f005 f996 	bl	80082b6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f8a:	1d3b      	adds	r3, r7, #4
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	2328      	movs	r3, #40	; 0x28
 8002f90:	001a      	movs	r2, r3
 8002f92:	2100      	movs	r1, #0
 8002f94:	f005 f98f 	bl	80082b6 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f98:	4b33      	ldr	r3, [pc, #204]	; (8003068 <SystemClock_Config+0x104>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a33      	ldr	r2, [pc, #204]	; (800306c <SystemClock_Config+0x108>)
 8002f9e:	401a      	ands	r2, r3
 8002fa0:	4b31      	ldr	r3, [pc, #196]	; (8003068 <SystemClock_Config+0x104>)
 8002fa2:	2180      	movs	r1, #128	; 0x80
 8002fa4:	0109      	lsls	r1, r1, #4
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8002faa:	f002 f939 	bl	8005220 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002fae:	4b30      	ldr	r3, [pc, #192]	; (8003070 <SystemClock_Config+0x10c>)
 8002fb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fb2:	4b2f      	ldr	r3, [pc, #188]	; (8003070 <SystemClock_Config+0x10c>)
 8002fb4:	492d      	ldr	r1, [pc, #180]	; (800306c <SystemClock_Config+0x108>)
 8002fb6:	400a      	ands	r2, r1
 8002fb8:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8002fba:	193b      	adds	r3, r7, r4
 8002fbc:	2226      	movs	r2, #38	; 0x26
 8002fbe:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002fc0:	193b      	adds	r3, r7, r4
 8002fc2:	2280      	movs	r2, #128	; 0x80
 8002fc4:	0052      	lsls	r2, r2, #1
 8002fc6:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fc8:	0021      	movs	r1, r4
 8002fca:	187b      	adds	r3, r7, r1
 8002fcc:	2201      	movs	r2, #1
 8002fce:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002fd0:	187b      	adds	r3, r7, r1
 8002fd2:	2210      	movs	r2, #16
 8002fd4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002fd6:	187b      	adds	r3, r7, r1
 8002fd8:	2201      	movs	r2, #1
 8002fda:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fdc:	187b      	adds	r3, r7, r1
 8002fde:	2202      	movs	r2, #2
 8002fe0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002fe2:	187b      	adds	r3, r7, r1
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8002fe8:	187b      	adds	r3, r7, r1
 8002fea:	2280      	movs	r2, #128	; 0x80
 8002fec:	02d2      	lsls	r2, r2, #11
 8002fee:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002ff0:	187b      	adds	r3, r7, r1
 8002ff2:	2280      	movs	r2, #128	; 0x80
 8002ff4:	03d2      	lsls	r2, r2, #15
 8002ff6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ff8:	187b      	adds	r3, r7, r1
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f002 f91e 	bl	800523c <HAL_RCC_OscConfig>
 8003000:	1e03      	subs	r3, r0, #0
 8003002:	d001      	beq.n	8003008 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8003004:	f000 fcc8 	bl	8003998 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003008:	212c      	movs	r1, #44	; 0x2c
 800300a:	187b      	adds	r3, r7, r1
 800300c:	220f      	movs	r2, #15
 800300e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003010:	187b      	adds	r3, r7, r1
 8003012:	2203      	movs	r2, #3
 8003014:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003016:	187b      	adds	r3, r7, r1
 8003018:	2200      	movs	r2, #0
 800301a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800301c:	187b      	adds	r3, r7, r1
 800301e:	2200      	movs	r2, #0
 8003020:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003022:	187b      	adds	r3, r7, r1
 8003024:	2200      	movs	r2, #0
 8003026:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003028:	187b      	adds	r3, r7, r1
 800302a:	2101      	movs	r1, #1
 800302c:	0018      	movs	r0, r3
 800302e:	f002 fcd5 	bl	80059dc <HAL_RCC_ClockConfig>
 8003032:	1e03      	subs	r3, r0, #0
 8003034:	d001      	beq.n	800303a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8003036:	f000 fcaf 	bl	8003998 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 800303a:	1d3b      	adds	r3, r7, #4
 800303c:	2260      	movs	r2, #96	; 0x60
 800303e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003040:	1d3b      	adds	r3, r7, #4
 8003042:	2280      	movs	r2, #128	; 0x80
 8003044:	0252      	lsls	r2, r2, #9
 8003046:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003048:	1d3b      	adds	r3, r7, #4
 800304a:	2280      	movs	r2, #128	; 0x80
 800304c:	04d2      	lsls	r2, r2, #19
 800304e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003050:	1d3b      	adds	r3, r7, #4
 8003052:	0018      	movs	r0, r3
 8003054:	f002 fe70 	bl	8005d38 <HAL_RCCEx_PeriphCLKConfig>
 8003058:	1e03      	subs	r3, r0, #0
 800305a:	d001      	beq.n	8003060 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800305c:	f000 fc9c 	bl	8003998 <Error_Handler>
  }
}
 8003060:	46c0      	nop			; (mov r8, r8)
 8003062:	46bd      	mov	sp, r7
 8003064:	b01f      	add	sp, #124	; 0x7c
 8003066:	bd90      	pop	{r4, r7, pc}
 8003068:	40007000 	.word	0x40007000
 800306c:	ffffe7ff 	.word	0xffffe7ff
 8003070:	40021000 	.word	0x40021000

08003074 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800307a:	003b      	movs	r3, r7
 800307c:	0018      	movs	r0, r3
 800307e:	2308      	movs	r3, #8
 8003080:	001a      	movs	r2, r3
 8003082:	2100      	movs	r1, #0
 8003084:	f005 f917 	bl	80082b6 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8003088:	4b2a      	ldr	r3, [pc, #168]	; (8003134 <MX_ADC_Init+0xc0>)
 800308a:	4a2b      	ldr	r2, [pc, #172]	; (8003138 <MX_ADC_Init+0xc4>)
 800308c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800308e:	4b29      	ldr	r3, [pc, #164]	; (8003134 <MX_ADC_Init+0xc0>)
 8003090:	2200      	movs	r2, #0
 8003092:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003094:	4b27      	ldr	r3, [pc, #156]	; (8003134 <MX_ADC_Init+0xc0>)
 8003096:	2280      	movs	r2, #128	; 0x80
 8003098:	05d2      	lsls	r2, r2, #23
 800309a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800309c:	4b25      	ldr	r3, [pc, #148]	; (8003134 <MX_ADC_Init+0xc0>)
 800309e:	2200      	movs	r2, #0
 80030a0:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_79CYCLES_5;
 80030a2:	4b24      	ldr	r3, [pc, #144]	; (8003134 <MX_ADC_Init+0xc0>)
 80030a4:	2206      	movs	r2, #6
 80030a6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80030a8:	4b22      	ldr	r3, [pc, #136]	; (8003134 <MX_ADC_Init+0xc0>)
 80030aa:	2201      	movs	r2, #1
 80030ac:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80030ae:	4b21      	ldr	r3, [pc, #132]	; (8003134 <MX_ADC_Init+0xc0>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80030b4:	4b1f      	ldr	r3, [pc, #124]	; (8003134 <MX_ADC_Init+0xc0>)
 80030b6:	2220      	movs	r2, #32
 80030b8:	2100      	movs	r1, #0
 80030ba:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80030bc:	4b1d      	ldr	r3, [pc, #116]	; (8003134 <MX_ADC_Init+0xc0>)
 80030be:	2221      	movs	r2, #33	; 0x21
 80030c0:	2100      	movs	r1, #0
 80030c2:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80030c4:	4b1b      	ldr	r3, [pc, #108]	; (8003134 <MX_ADC_Init+0xc0>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80030ca:	4b1a      	ldr	r3, [pc, #104]	; (8003134 <MX_ADC_Init+0xc0>)
 80030cc:	22c2      	movs	r2, #194	; 0xc2
 80030ce:	32ff      	adds	r2, #255	; 0xff
 80030d0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80030d2:	4b18      	ldr	r3, [pc, #96]	; (8003134 <MX_ADC_Init+0xc0>)
 80030d4:	222c      	movs	r2, #44	; 0x2c
 80030d6:	2100      	movs	r1, #0
 80030d8:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80030da:	4b16      	ldr	r3, [pc, #88]	; (8003134 <MX_ADC_Init+0xc0>)
 80030dc:	2204      	movs	r2, #4
 80030de:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80030e0:	4b14      	ldr	r3, [pc, #80]	; (8003134 <MX_ADC_Init+0xc0>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80030e6:	4b13      	ldr	r3, [pc, #76]	; (8003134 <MX_ADC_Init+0xc0>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80030ec:	4b11      	ldr	r3, [pc, #68]	; (8003134 <MX_ADC_Init+0xc0>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80030f2:	4b10      	ldr	r3, [pc, #64]	; (8003134 <MX_ADC_Init+0xc0>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80030f8:	4b0e      	ldr	r3, [pc, #56]	; (8003134 <MX_ADC_Init+0xc0>)
 80030fa:	0018      	movs	r0, r3
 80030fc:	f001 f932 	bl	8004364 <HAL_ADC_Init>
 8003100:	1e03      	subs	r3, r0, #0
 8003102:	d001      	beq.n	8003108 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8003104:	f000 fc48 	bl	8003998 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003108:	003b      	movs	r3, r7
 800310a:	2201      	movs	r2, #1
 800310c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800310e:	003b      	movs	r3, r7
 8003110:	2280      	movs	r2, #128	; 0x80
 8003112:	0152      	lsls	r2, r2, #5
 8003114:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003116:	003a      	movs	r2, r7
 8003118:	4b06      	ldr	r3, [pc, #24]	; (8003134 <MX_ADC_Init+0xc0>)
 800311a:	0011      	movs	r1, r2
 800311c:	0018      	movs	r0, r3
 800311e:	f001 fb69 	bl	80047f4 <HAL_ADC_ConfigChannel>
 8003122:	1e03      	subs	r3, r0, #0
 8003124:	d001      	beq.n	800312a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8003126:	f000 fc37 	bl	8003998 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	46bd      	mov	sp, r7
 800312e:	b002      	add	sp, #8
 8003130:	bd80      	pop	{r7, pc}
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	200004c8 	.word	0x200004c8
 8003138:	40012400 	.word	0x40012400

0800313c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b090      	sub	sp, #64	; 0x40
 8003140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003142:	232c      	movs	r3, #44	; 0x2c
 8003144:	18fb      	adds	r3, r7, r3
 8003146:	0018      	movs	r0, r3
 8003148:	2314      	movs	r3, #20
 800314a:	001a      	movs	r2, r3
 800314c:	2100      	movs	r1, #0
 800314e:	f005 f8b2 	bl	80082b6 <memset>
  RTC_DateTypeDef sDate = {0};
 8003152:	2328      	movs	r3, #40	; 0x28
 8003154:	18fb      	adds	r3, r7, r3
 8003156:	2200      	movs	r2, #0
 8003158:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800315a:	003b      	movs	r3, r7
 800315c:	0018      	movs	r0, r3
 800315e:	2328      	movs	r3, #40	; 0x28
 8003160:	001a      	movs	r2, r3
 8003162:	2100      	movs	r1, #0
 8003164:	f005 f8a7 	bl	80082b6 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8003168:	4b40      	ldr	r3, [pc, #256]	; (800326c <MX_RTC_Init+0x130>)
 800316a:	4a41      	ldr	r2, [pc, #260]	; (8003270 <MX_RTC_Init+0x134>)
 800316c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800316e:	4b3f      	ldr	r3, [pc, #252]	; (800326c <MX_RTC_Init+0x130>)
 8003170:	2200      	movs	r2, #0
 8003172:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003174:	4b3d      	ldr	r3, [pc, #244]	; (800326c <MX_RTC_Init+0x130>)
 8003176:	227f      	movs	r2, #127	; 0x7f
 8003178:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800317a:	4b3c      	ldr	r3, [pc, #240]	; (800326c <MX_RTC_Init+0x130>)
 800317c:	22ff      	movs	r2, #255	; 0xff
 800317e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003180:	4b3a      	ldr	r3, [pc, #232]	; (800326c <MX_RTC_Init+0x130>)
 8003182:	2200      	movs	r2, #0
 8003184:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003186:	4b39      	ldr	r3, [pc, #228]	; (800326c <MX_RTC_Init+0x130>)
 8003188:	2200      	movs	r2, #0
 800318a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800318c:	4b37      	ldr	r3, [pc, #220]	; (800326c <MX_RTC_Init+0x130>)
 800318e:	2200      	movs	r2, #0
 8003190:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003192:	4b36      	ldr	r3, [pc, #216]	; (800326c <MX_RTC_Init+0x130>)
 8003194:	2200      	movs	r2, #0
 8003196:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003198:	4b34      	ldr	r3, [pc, #208]	; (800326c <MX_RTC_Init+0x130>)
 800319a:	0018      	movs	r0, r3
 800319c:	f002 ff40 	bl	8006020 <HAL_RTC_Init>
 80031a0:	1e03      	subs	r3, r0, #0
 80031a2:	d001      	beq.n	80031a8 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 80031a4:	f000 fbf8 	bl	8003998 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 80031a8:	212c      	movs	r1, #44	; 0x2c
 80031aa:	187b      	adds	r3, r7, r1
 80031ac:	2200      	movs	r2, #0
 80031ae:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 80031b0:	187b      	adds	r3, r7, r1
 80031b2:	2200      	movs	r2, #0
 80031b4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80031b6:	187b      	adds	r3, r7, r1
 80031b8:	2200      	movs	r2, #0
 80031ba:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80031bc:	187b      	adds	r3, r7, r1
 80031be:	2200      	movs	r2, #0
 80031c0:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80031c2:	187b      	adds	r3, r7, r1
 80031c4:	2200      	movs	r2, #0
 80031c6:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80031c8:	1879      	adds	r1, r7, r1
 80031ca:	4b28      	ldr	r3, [pc, #160]	; (800326c <MX_RTC_Init+0x130>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	0018      	movs	r0, r3
 80031d0:	f002 ffc4 	bl	800615c <HAL_RTC_SetTime>
 80031d4:	1e03      	subs	r3, r0, #0
 80031d6:	d001      	beq.n	80031dc <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 80031d8:	f000 fbde 	bl	8003998 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 80031dc:	2128      	movs	r1, #40	; 0x28
 80031de:	187b      	adds	r3, r7, r1
 80031e0:	2207      	movs	r2, #7
 80031e2:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 80031e4:	187b      	adds	r3, r7, r1
 80031e6:	2212      	movs	r2, #18
 80031e8:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 80031ea:	187b      	adds	r3, r7, r1
 80031ec:	2201      	movs	r2, #1
 80031ee:	709a      	strb	r2, [r3, #2]
  sDate.Year = 19;
 80031f0:	187b      	adds	r3, r7, r1
 80031f2:	2213      	movs	r2, #19
 80031f4:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80031f6:	1879      	adds	r1, r7, r1
 80031f8:	4b1c      	ldr	r3, [pc, #112]	; (800326c <MX_RTC_Init+0x130>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	0018      	movs	r0, r3
 80031fe:	f003 f8cd 	bl	800639c <HAL_RTC_SetDate>
 8003202:	1e03      	subs	r3, r0, #0
 8003204:	d001      	beq.n	800320a <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8003206:	f000 fbc7 	bl	8003998 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmTime.Hours = 0;
 800320a:	003b      	movs	r3, r7
 800320c:	2200      	movs	r2, #0
 800320e:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8003210:	003b      	movs	r3, r7
 8003212:	2200      	movs	r2, #0
 8003214:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8003216:	003b      	movs	r3, r7
 8003218:	2200      	movs	r2, #0
 800321a:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 800321c:	003b      	movs	r3, r7
 800321e:	2200      	movs	r2, #0
 8003220:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003222:	003b      	movs	r3, r7
 8003224:	2200      	movs	r2, #0
 8003226:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003228:	003b      	movs	r3, r7
 800322a:	2200      	movs	r2, #0
 800322c:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800322e:	003b      	movs	r3, r7
 8003230:	2200      	movs	r2, #0
 8003232:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003234:	003b      	movs	r3, r7
 8003236:	2200      	movs	r2, #0
 8003238:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800323a:	003b      	movs	r3, r7
 800323c:	2200      	movs	r2, #0
 800323e:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8003240:	003b      	movs	r3, r7
 8003242:	2220      	movs	r2, #32
 8003244:	2101      	movs	r1, #1
 8003246:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_B;
 8003248:	003b      	movs	r3, r7
 800324a:	2280      	movs	r2, #128	; 0x80
 800324c:	0092      	lsls	r2, r2, #2
 800324e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003250:	0039      	movs	r1, r7
 8003252:	4b06      	ldr	r3, [pc, #24]	; (800326c <MX_RTC_Init+0x130>)
 8003254:	2200      	movs	r2, #0
 8003256:	0018      	movs	r0, r3
 8003258:	f003 f99c 	bl	8006594 <HAL_RTC_SetAlarm_IT>
 800325c:	1e03      	subs	r3, r0, #0
 800325e:	d001      	beq.n	8003264 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 8003260:	f000 fb9a 	bl	8003998 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003264:	46c0      	nop			; (mov r8, r8)
 8003266:	46bd      	mov	sp, r7
 8003268:	b010      	add	sp, #64	; 0x40
 800326a:	bd80      	pop	{r7, pc}
 800326c:	200001f4 	.word	0x200001f4
 8003270:	40002800 	.word	0x40002800

08003274 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003278:	4b18      	ldr	r3, [pc, #96]	; (80032dc <MX_SPI2_Init+0x68>)
 800327a:	4a19      	ldr	r2, [pc, #100]	; (80032e0 <MX_SPI2_Init+0x6c>)
 800327c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800327e:	4b17      	ldr	r3, [pc, #92]	; (80032dc <MX_SPI2_Init+0x68>)
 8003280:	2282      	movs	r2, #130	; 0x82
 8003282:	0052      	lsls	r2, r2, #1
 8003284:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003286:	4b15      	ldr	r3, [pc, #84]	; (80032dc <MX_SPI2_Init+0x68>)
 8003288:	2200      	movs	r2, #0
 800328a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800328c:	4b13      	ldr	r3, [pc, #76]	; (80032dc <MX_SPI2_Init+0x68>)
 800328e:	2200      	movs	r2, #0
 8003290:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003292:	4b12      	ldr	r3, [pc, #72]	; (80032dc <MX_SPI2_Init+0x68>)
 8003294:	2200      	movs	r2, #0
 8003296:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003298:	4b10      	ldr	r3, [pc, #64]	; (80032dc <MX_SPI2_Init+0x68>)
 800329a:	2200      	movs	r2, #0
 800329c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800329e:	4b0f      	ldr	r3, [pc, #60]	; (80032dc <MX_SPI2_Init+0x68>)
 80032a0:	2280      	movs	r2, #128	; 0x80
 80032a2:	02d2      	lsls	r2, r2, #11
 80032a4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032a6:	4b0d      	ldr	r3, [pc, #52]	; (80032dc <MX_SPI2_Init+0x68>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032ac:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <MX_SPI2_Init+0x68>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80032b2:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <MX_SPI2_Init+0x68>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032b8:	4b08      	ldr	r3, [pc, #32]	; (80032dc <MX_SPI2_Init+0x68>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80032be:	4b07      	ldr	r3, [pc, #28]	; (80032dc <MX_SPI2_Init+0x68>)
 80032c0:	2207      	movs	r2, #7
 80032c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80032c4:	4b05      	ldr	r3, [pc, #20]	; (80032dc <MX_SPI2_Init+0x68>)
 80032c6:	0018      	movs	r0, r3
 80032c8:	f003 fbf8 	bl	8006abc <HAL_SPI_Init>
 80032cc:	1e03      	subs	r3, r0, #0
 80032ce:	d001      	beq.n	80032d4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80032d0:	f000 fb62 	bl	8003998 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80032d4:	46c0      	nop			; (mov r8, r8)
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	20000124 	.word	0x20000124
 80032e0:	40003800 	.word	0x40003800

080032e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08a      	sub	sp, #40	; 0x28
 80032e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032ea:	2318      	movs	r3, #24
 80032ec:	18fb      	adds	r3, r7, r3
 80032ee:	0018      	movs	r0, r3
 80032f0:	2310      	movs	r3, #16
 80032f2:	001a      	movs	r2, r3
 80032f4:	2100      	movs	r1, #0
 80032f6:	f004 ffde 	bl	80082b6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032fa:	2310      	movs	r3, #16
 80032fc:	18fb      	adds	r3, r7, r3
 80032fe:	0018      	movs	r0, r3
 8003300:	2308      	movs	r3, #8
 8003302:	001a      	movs	r2, r3
 8003304:	2100      	movs	r1, #0
 8003306:	f004 ffd6 	bl	80082b6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800330a:	003b      	movs	r3, r7
 800330c:	0018      	movs	r0, r3
 800330e:	2310      	movs	r3, #16
 8003310:	001a      	movs	r2, r3
 8003312:	2100      	movs	r1, #0
 8003314:	f004 ffcf 	bl	80082b6 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003318:	4b37      	ldr	r3, [pc, #220]	; (80033f8 <MX_TIM2_Init+0x114>)
 800331a:	2280      	movs	r2, #128	; 0x80
 800331c:	05d2      	lsls	r2, r2, #23
 800331e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003320:	4b35      	ldr	r3, [pc, #212]	; (80033f8 <MX_TIM2_Init+0x114>)
 8003322:	2200      	movs	r2, #0
 8003324:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003326:	4b34      	ldr	r3, [pc, #208]	; (80033f8 <MX_TIM2_Init+0x114>)
 8003328:	2200      	movs	r2, #0
 800332a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0x3FFF;
 800332c:	4b32      	ldr	r3, [pc, #200]	; (80033f8 <MX_TIM2_Init+0x114>)
 800332e:	4a33      	ldr	r2, [pc, #204]	; (80033fc <MX_TIM2_Init+0x118>)
 8003330:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003332:	4b31      	ldr	r3, [pc, #196]	; (80033f8 <MX_TIM2_Init+0x114>)
 8003334:	2200      	movs	r2, #0
 8003336:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003338:	4b2f      	ldr	r3, [pc, #188]	; (80033f8 <MX_TIM2_Init+0x114>)
 800333a:	2200      	movs	r2, #0
 800333c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800333e:	4b2e      	ldr	r3, [pc, #184]	; (80033f8 <MX_TIM2_Init+0x114>)
 8003340:	0018      	movs	r0, r3
 8003342:	f004 f881 	bl	8007448 <HAL_TIM_Base_Init>
 8003346:	1e03      	subs	r3, r0, #0
 8003348:	d001      	beq.n	800334e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800334a:	f000 fb25 	bl	8003998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800334e:	2118      	movs	r1, #24
 8003350:	187b      	adds	r3, r7, r1
 8003352:	2280      	movs	r2, #128	; 0x80
 8003354:	0192      	lsls	r2, r2, #6
 8003356:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8003358:	187b      	adds	r3, r7, r1
 800335a:	2200      	movs	r2, #0
 800335c:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800335e:	187b      	adds	r3, r7, r1
 8003360:	2200      	movs	r2, #0
 8003362:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8003364:	187b      	adds	r3, r7, r1
 8003366:	2200      	movs	r2, #0
 8003368:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800336a:	187a      	adds	r2, r7, r1
 800336c:	4b22      	ldr	r3, [pc, #136]	; (80033f8 <MX_TIM2_Init+0x114>)
 800336e:	0011      	movs	r1, r2
 8003370:	0018      	movs	r0, r3
 8003372:	f004 fba3 	bl	8007abc <HAL_TIM_ConfigClockSource>
 8003376:	1e03      	subs	r3, r0, #0
 8003378:	d001      	beq.n	800337e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800337a:	f000 fb0d 	bl	8003998 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800337e:	4b1e      	ldr	r3, [pc, #120]	; (80033f8 <MX_TIM2_Init+0x114>)
 8003380:	0018      	movs	r0, r3
 8003382:	f004 f8d1 	bl	8007528 <HAL_TIM_OC_Init>
 8003386:	1e03      	subs	r3, r0, #0
 8003388:	d001      	beq.n	800338e <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 800338a:	f000 fb05 	bl	8003998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800338e:	2110      	movs	r1, #16
 8003390:	187b      	adds	r3, r7, r1
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003396:	187b      	adds	r3, r7, r1
 8003398:	2200      	movs	r2, #0
 800339a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800339c:	187a      	adds	r2, r7, r1
 800339e:	4b16      	ldr	r3, [pc, #88]	; (80033f8 <MX_TIM2_Init+0x114>)
 80033a0:	0011      	movs	r1, r2
 80033a2:	0018      	movs	r0, r3
 80033a4:	f004 fe7f 	bl	80080a6 <HAL_TIMEx_MasterConfigSynchronization>
 80033a8:	1e03      	subs	r3, r0, #0
 80033aa:	d001      	beq.n	80033b0 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 80033ac:	f000 faf4 	bl	8003998 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim2, TIM2_ETR_LSE) != HAL_OK)
 80033b0:	4b11      	ldr	r3, [pc, #68]	; (80033f8 <MX_TIM2_Init+0x114>)
 80033b2:	2105      	movs	r1, #5
 80033b4:	0018      	movs	r0, r3
 80033b6:	f004 feb9 	bl	800812c <HAL_TIMEx_RemapConfig>
 80033ba:	1e03      	subs	r3, r0, #0
 80033bc:	d001      	beq.n	80033c2 <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 80033be:	f000 faeb 	bl	8003998 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80033c2:	003b      	movs	r3, r7
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80033c8:	003b      	movs	r3, r7
 80033ca:	2200      	movs	r2, #0
 80033cc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033ce:	003b      	movs	r3, r7
 80033d0:	2200      	movs	r2, #0
 80033d2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033d4:	003b      	movs	r3, r7
 80033d6:	2200      	movs	r2, #0
 80033d8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80033da:	0039      	movs	r1, r7
 80033dc:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <MX_TIM2_Init+0x114>)
 80033de:	2204      	movs	r2, #4
 80033e0:	0018      	movs	r0, r3
 80033e2:	f004 fa65 	bl	80078b0 <HAL_TIM_OC_ConfigChannel>
 80033e6:	1e03      	subs	r3, r0, #0
 80033e8:	d001      	beq.n	80033ee <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 80033ea:	f000 fad5 	bl	8003998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	46bd      	mov	sp, r7
 80033f2:	b00a      	add	sp, #40	; 0x28
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	20000218 	.word	0x20000218
 80033fc:	00003fff 	.word	0x00003fff

08003400 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08a      	sub	sp, #40	; 0x28
 8003404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003406:	2318      	movs	r3, #24
 8003408:	18fb      	adds	r3, r7, r3
 800340a:	0018      	movs	r0, r3
 800340c:	2310      	movs	r3, #16
 800340e:	001a      	movs	r2, r3
 8003410:	2100      	movs	r1, #0
 8003412:	f004 ff50 	bl	80082b6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003416:	2310      	movs	r3, #16
 8003418:	18fb      	adds	r3, r7, r3
 800341a:	0018      	movs	r0, r3
 800341c:	2308      	movs	r3, #8
 800341e:	001a      	movs	r2, r3
 8003420:	2100      	movs	r1, #0
 8003422:	f004 ff48 	bl	80082b6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003426:	003b      	movs	r3, r7
 8003428:	0018      	movs	r0, r3
 800342a:	2310      	movs	r3, #16
 800342c:	001a      	movs	r2, r3
 800342e:	2100      	movs	r1, #0
 8003430:	f004 ff41 	bl	80082b6 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003434:	4b34      	ldr	r3, [pc, #208]	; (8003508 <MX_TIM3_Init+0x108>)
 8003436:	4a35      	ldr	r2, [pc, #212]	; (800350c <MX_TIM3_Init+0x10c>)
 8003438:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800343a:	4b33      	ldr	r3, [pc, #204]	; (8003508 <MX_TIM3_Init+0x108>)
 800343c:	2200      	movs	r2, #0
 800343e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003440:	4b31      	ldr	r3, [pc, #196]	; (8003508 <MX_TIM3_Init+0x108>)
 8003442:	2200      	movs	r2, #0
 8003444:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 8003446:	4b30      	ldr	r3, [pc, #192]	; (8003508 <MX_TIM3_Init+0x108>)
 8003448:	4a31      	ldr	r2, [pc, #196]	; (8003510 <MX_TIM3_Init+0x110>)
 800344a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800344c:	4b2e      	ldr	r3, [pc, #184]	; (8003508 <MX_TIM3_Init+0x108>)
 800344e:	2200      	movs	r2, #0
 8003450:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003452:	4b2d      	ldr	r3, [pc, #180]	; (8003508 <MX_TIM3_Init+0x108>)
 8003454:	2200      	movs	r2, #0
 8003456:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003458:	4b2b      	ldr	r3, [pc, #172]	; (8003508 <MX_TIM3_Init+0x108>)
 800345a:	0018      	movs	r0, r3
 800345c:	f003 fff4 	bl	8007448 <HAL_TIM_Base_Init>
 8003460:	1e03      	subs	r3, r0, #0
 8003462:	d001      	beq.n	8003468 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003464:	f000 fa98 	bl	8003998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003468:	2118      	movs	r1, #24
 800346a:	187b      	adds	r3, r7, r1
 800346c:	2280      	movs	r2, #128	; 0x80
 800346e:	0152      	lsls	r2, r2, #5
 8003470:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003472:	187a      	adds	r2, r7, r1
 8003474:	4b24      	ldr	r3, [pc, #144]	; (8003508 <MX_TIM3_Init+0x108>)
 8003476:	0011      	movs	r1, r2
 8003478:	0018      	movs	r0, r3
 800347a:	f004 fb1f 	bl	8007abc <HAL_TIM_ConfigClockSource>
 800347e:	1e03      	subs	r3, r0, #0
 8003480:	d001      	beq.n	8003486 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8003482:	f000 fa89 	bl	8003998 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003486:	4b20      	ldr	r3, [pc, #128]	; (8003508 <MX_TIM3_Init+0x108>)
 8003488:	0018      	movs	r0, r3
 800348a:	f004 f8d3 	bl	8007634 <HAL_TIM_PWM_Init>
 800348e:	1e03      	subs	r3, r0, #0
 8003490:	d001      	beq.n	8003496 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8003492:	f000 fa81 	bl	8003998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003496:	2110      	movs	r1, #16
 8003498:	187b      	adds	r3, r7, r1
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800349e:	187b      	adds	r3, r7, r1
 80034a0:	2200      	movs	r2, #0
 80034a2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80034a4:	187a      	adds	r2, r7, r1
 80034a6:	4b18      	ldr	r3, [pc, #96]	; (8003508 <MX_TIM3_Init+0x108>)
 80034a8:	0011      	movs	r1, r2
 80034aa:	0018      	movs	r0, r3
 80034ac:	f004 fdfb 	bl	80080a6 <HAL_TIMEx_MasterConfigSynchronization>
 80034b0:	1e03      	subs	r3, r0, #0
 80034b2:	d001      	beq.n	80034b8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80034b4:	f000 fa70 	bl	8003998 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034b8:	003b      	movs	r3, r7
 80034ba:	2260      	movs	r2, #96	; 0x60
 80034bc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80034be:	003b      	movs	r3, r7
 80034c0:	2200      	movs	r2, #0
 80034c2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034c4:	003b      	movs	r3, r7
 80034c6:	2200      	movs	r2, #0
 80034c8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034ca:	003b      	movs	r3, r7
 80034cc:	2200      	movs	r2, #0
 80034ce:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80034d0:	0039      	movs	r1, r7
 80034d2:	4b0d      	ldr	r3, [pc, #52]	; (8003508 <MX_TIM3_Init+0x108>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	0018      	movs	r0, r3
 80034d8:	f004 fa38 	bl	800794c <HAL_TIM_PWM_ConfigChannel>
 80034dc:	1e03      	subs	r3, r0, #0
 80034de:	d001      	beq.n	80034e4 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80034e0:	f000 fa5a 	bl	8003998 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 80034e4:	4b08      	ldr	r3, [pc, #32]	; (8003508 <MX_TIM3_Init+0x108>)
 80034e6:	2104      	movs	r1, #4
 80034e8:	0018      	movs	r0, r3
 80034ea:	f004 fe1f 	bl	800812c <HAL_TIMEx_RemapConfig>
 80034ee:	1e03      	subs	r3, r0, #0
 80034f0:	d001      	beq.n	80034f6 <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 80034f2:	f000 fa51 	bl	8003998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80034f6:	4b04      	ldr	r3, [pc, #16]	; (8003508 <MX_TIM3_Init+0x108>)
 80034f8:	0018      	movs	r0, r3
 80034fa:	f000 fb81 	bl	8003c00 <HAL_TIM_MspPostInit>

}
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	46bd      	mov	sp, r7
 8003502:	b00a      	add	sp, #40	; 0x28
 8003504:	bd80      	pop	{r7, pc}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	2000017c 	.word	0x2000017c
 800350c:	40000400 	.word	0x40000400
 8003510:	0000ffff 	.word	0x0000ffff

08003514 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800351a:	003b      	movs	r3, r7
 800351c:	0018      	movs	r0, r3
 800351e:	2308      	movs	r3, #8
 8003520:	001a      	movs	r2, r3
 8003522:	2100      	movs	r1, #0
 8003524:	f004 fec7 	bl	80082b6 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003528:	4b15      	ldr	r3, [pc, #84]	; (8003580 <MX_TIM6_Init+0x6c>)
 800352a:	4a16      	ldr	r2, [pc, #88]	; (8003584 <MX_TIM6_Init+0x70>)
 800352c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0x40;
 800352e:	4b14      	ldr	r3, [pc, #80]	; (8003580 <MX_TIM6_Init+0x6c>)
 8003530:	2240      	movs	r2, #64	; 0x40
 8003532:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003534:	4b12      	ldr	r3, [pc, #72]	; (8003580 <MX_TIM6_Init+0x6c>)
 8003536:	2200      	movs	r2, #0
 8003538:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800353a:	4b11      	ldr	r3, [pc, #68]	; (8003580 <MX_TIM6_Init+0x6c>)
 800353c:	4a12      	ldr	r2, [pc, #72]	; (8003588 <MX_TIM6_Init+0x74>)
 800353e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003540:	4b0f      	ldr	r3, [pc, #60]	; (8003580 <MX_TIM6_Init+0x6c>)
 8003542:	2200      	movs	r2, #0
 8003544:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003546:	4b0e      	ldr	r3, [pc, #56]	; (8003580 <MX_TIM6_Init+0x6c>)
 8003548:	0018      	movs	r0, r3
 800354a:	f003 ff7d 	bl	8007448 <HAL_TIM_Base_Init>
 800354e:	1e03      	subs	r3, r0, #0
 8003550:	d001      	beq.n	8003556 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003552:	f000 fa21 	bl	8003998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003556:	003b      	movs	r3, r7
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800355c:	003b      	movs	r3, r7
 800355e:	2200      	movs	r2, #0
 8003560:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003562:	003a      	movs	r2, r7
 8003564:	4b06      	ldr	r3, [pc, #24]	; (8003580 <MX_TIM6_Init+0x6c>)
 8003566:	0011      	movs	r1, r2
 8003568:	0018      	movs	r0, r3
 800356a:	f004 fd9c 	bl	80080a6 <HAL_TIMEx_MasterConfigSynchronization>
 800356e:	1e03      	subs	r3, r0, #0
 8003570:	d001      	beq.n	8003576 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8003572:	f000 fa11 	bl	8003998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003576:	46c0      	nop			; (mov r8, r8)
 8003578:	46bd      	mov	sp, r7
 800357a:	b002      	add	sp, #8
 800357c:	bd80      	pop	{r7, pc}
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	200000dc 	.word	0x200000dc
 8003584:	40001000 	.word	0x40001000
 8003588:	0000ffff 	.word	0x0000ffff

0800358c <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08a      	sub	sp, #40	; 0x28
 8003590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003592:	2318      	movs	r3, #24
 8003594:	18fb      	adds	r3, r7, r3
 8003596:	0018      	movs	r0, r3
 8003598:	2310      	movs	r3, #16
 800359a:	001a      	movs	r2, r3
 800359c:	2100      	movs	r1, #0
 800359e:	f004 fe8a 	bl	80082b6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035a2:	2310      	movs	r3, #16
 80035a4:	18fb      	adds	r3, r7, r3
 80035a6:	0018      	movs	r0, r3
 80035a8:	2308      	movs	r3, #8
 80035aa:	001a      	movs	r2, r3
 80035ac:	2100      	movs	r1, #0
 80035ae:	f004 fe82 	bl	80082b6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035b2:	003b      	movs	r3, r7
 80035b4:	0018      	movs	r0, r3
 80035b6:	2310      	movs	r3, #16
 80035b8:	001a      	movs	r2, r3
 80035ba:	2100      	movs	r1, #0
 80035bc:	f004 fe7b 	bl	80082b6 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 80035c0:	4b3b      	ldr	r3, [pc, #236]	; (80036b0 <MX_TIM21_Init+0x124>)
 80035c2:	4a3c      	ldr	r2, [pc, #240]	; (80036b4 <MX_TIM21_Init+0x128>)
 80035c4:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 80035c6:	4b3a      	ldr	r3, [pc, #232]	; (80036b0 <MX_TIM21_Init+0x124>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035cc:	4b38      	ldr	r3, [pc, #224]	; (80036b0 <MX_TIM21_Init+0x124>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 0x7FFF;
 80035d2:	4b37      	ldr	r3, [pc, #220]	; (80036b0 <MX_TIM21_Init+0x124>)
 80035d4:	4a38      	ldr	r2, [pc, #224]	; (80036b8 <MX_TIM21_Init+0x12c>)
 80035d6:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035d8:	4b35      	ldr	r3, [pc, #212]	; (80036b0 <MX_TIM21_Init+0x124>)
 80035da:	2200      	movs	r2, #0
 80035dc:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035de:	4b34      	ldr	r3, [pc, #208]	; (80036b0 <MX_TIM21_Init+0x124>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 80035e4:	4b32      	ldr	r3, [pc, #200]	; (80036b0 <MX_TIM21_Init+0x124>)
 80035e6:	0018      	movs	r0, r3
 80035e8:	f003 ff2e 	bl	8007448 <HAL_TIM_Base_Init>
 80035ec:	1e03      	subs	r3, r0, #0
 80035ee:	d001      	beq.n	80035f4 <MX_TIM21_Init+0x68>
  {
    Error_Handler();
 80035f0:	f000 f9d2 	bl	8003998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80035f4:	2118      	movs	r1, #24
 80035f6:	187b      	adds	r3, r7, r1
 80035f8:	2280      	movs	r2, #128	; 0x80
 80035fa:	0192      	lsls	r2, r2, #6
 80035fc:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80035fe:	187b      	adds	r3, r7, r1
 8003600:	2200      	movs	r2, #0
 8003602:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8003604:	187b      	adds	r3, r7, r1
 8003606:	2200      	movs	r2, #0
 8003608:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 800360a:	187b      	adds	r3, r7, r1
 800360c:	2200      	movs	r2, #0
 800360e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8003610:	187a      	adds	r2, r7, r1
 8003612:	4b27      	ldr	r3, [pc, #156]	; (80036b0 <MX_TIM21_Init+0x124>)
 8003614:	0011      	movs	r1, r2
 8003616:	0018      	movs	r0, r3
 8003618:	f004 fa50 	bl	8007abc <HAL_TIM_ConfigClockSource>
 800361c:	1e03      	subs	r3, r0, #0
 800361e:	d001      	beq.n	8003624 <MX_TIM21_Init+0x98>
  {
    Error_Handler();
 8003620:	f000 f9ba 	bl	8003998 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 8003624:	4b22      	ldr	r3, [pc, #136]	; (80036b0 <MX_TIM21_Init+0x124>)
 8003626:	0018      	movs	r0, r3
 8003628:	f003 ff7e 	bl	8007528 <HAL_TIM_OC_Init>
 800362c:	1e03      	subs	r3, r0, #0
 800362e:	d001      	beq.n	8003634 <MX_TIM21_Init+0xa8>
  {
    Error_Handler();
 8003630:	f000 f9b2 	bl	8003998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003634:	2110      	movs	r1, #16
 8003636:	187b      	adds	r3, r7, r1
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800363c:	187b      	adds	r3, r7, r1
 800363e:	2200      	movs	r2, #0
 8003640:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8003642:	187a      	adds	r2, r7, r1
 8003644:	4b1a      	ldr	r3, [pc, #104]	; (80036b0 <MX_TIM21_Init+0x124>)
 8003646:	0011      	movs	r1, r2
 8003648:	0018      	movs	r0, r3
 800364a:	f004 fd2c 	bl	80080a6 <HAL_TIMEx_MasterConfigSynchronization>
 800364e:	1e03      	subs	r3, r0, #0
 8003650:	d001      	beq.n	8003656 <MX_TIM21_Init+0xca>
  {
    Error_Handler();
 8003652:	f000 f9a1 	bl	8003998 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim21, TIM21_ETR_LSE) != HAL_OK)
 8003656:	4b16      	ldr	r3, [pc, #88]	; (80036b0 <MX_TIM21_Init+0x124>)
 8003658:	2103      	movs	r1, #3
 800365a:	0018      	movs	r0, r3
 800365c:	f004 fd66 	bl	800812c <HAL_TIMEx_RemapConfig>
 8003660:	1e03      	subs	r3, r0, #0
 8003662:	d001      	beq.n	8003668 <MX_TIM21_Init+0xdc>
  {
    Error_Handler();
 8003664:	f000 f998 	bl	8003998 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003668:	003b      	movs	r3, r7
 800366a:	2200      	movs	r2, #0
 800366c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800366e:	003b      	movs	r3, r7
 8003670:	2200      	movs	r2, #0
 8003672:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003674:	003b      	movs	r3, r7
 8003676:	2200      	movs	r2, #0
 8003678:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800367a:	003b      	movs	r3, r7
 800367c:	2200      	movs	r2, #0
 800367e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003680:	0039      	movs	r1, r7
 8003682:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <MX_TIM21_Init+0x124>)
 8003684:	2200      	movs	r2, #0
 8003686:	0018      	movs	r0, r3
 8003688:	f004 f912 	bl	80078b0 <HAL_TIM_OC_ConfigChannel>
 800368c:	1e03      	subs	r3, r0, #0
 800368e:	d001      	beq.n	8003694 <MX_TIM21_Init+0x108>
  {
    Error_Handler();
 8003690:	f000 f982 	bl	8003998 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003694:	0039      	movs	r1, r7
 8003696:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <MX_TIM21_Init+0x124>)
 8003698:	2204      	movs	r2, #4
 800369a:	0018      	movs	r0, r3
 800369c:	f004 f908 	bl	80078b0 <HAL_TIM_OC_ConfigChannel>
 80036a0:	1e03      	subs	r3, r0, #0
 80036a2:	d001      	beq.n	80036a8 <MX_TIM21_Init+0x11c>
  {
    Error_Handler();
 80036a4:	f000 f978 	bl	8003998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 80036a8:	46c0      	nop			; (mov r8, r8)
 80036aa:	46bd      	mov	sp, r7
 80036ac:	b00a      	add	sp, #40	; 0x28
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	20000524 	.word	0x20000524
 80036b4:	40010800 	.word	0x40010800
 80036b8:	00007fff 	.word	0x00007fff

080036bc <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08a      	sub	sp, #40	; 0x28
 80036c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036c2:	2318      	movs	r3, #24
 80036c4:	18fb      	adds	r3, r7, r3
 80036c6:	0018      	movs	r0, r3
 80036c8:	2310      	movs	r3, #16
 80036ca:	001a      	movs	r2, r3
 80036cc:	2100      	movs	r1, #0
 80036ce:	f004 fdf2 	bl	80082b6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036d2:	2310      	movs	r3, #16
 80036d4:	18fb      	adds	r3, r7, r3
 80036d6:	0018      	movs	r0, r3
 80036d8:	2308      	movs	r3, #8
 80036da:	001a      	movs	r2, r3
 80036dc:	2100      	movs	r1, #0
 80036de:	f004 fdea 	bl	80082b6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036e2:	003b      	movs	r3, r7
 80036e4:	0018      	movs	r0, r3
 80036e6:	2310      	movs	r3, #16
 80036e8:	001a      	movs	r2, r3
 80036ea:	2100      	movs	r1, #0
 80036ec:	f004 fde3 	bl	80082b6 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 80036f0:	4b37      	ldr	r3, [pc, #220]	; (80037d0 <MX_TIM22_Init+0x114>)
 80036f2:	4a38      	ldr	r2, [pc, #224]	; (80037d4 <MX_TIM22_Init+0x118>)
 80036f4:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0x400;
 80036f6:	4b36      	ldr	r3, [pc, #216]	; (80037d0 <MX_TIM22_Init+0x114>)
 80036f8:	2280      	movs	r2, #128	; 0x80
 80036fa:	00d2      	lsls	r2, r2, #3
 80036fc:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036fe:	4b34      	ldr	r3, [pc, #208]	; (80037d0 <MX_TIM22_Init+0x114>)
 8003700:	2200      	movs	r2, #0
 8003702:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 31;
 8003704:	4b32      	ldr	r3, [pc, #200]	; (80037d0 <MX_TIM22_Init+0x114>)
 8003706:	221f      	movs	r2, #31
 8003708:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800370a:	4b31      	ldr	r3, [pc, #196]	; (80037d0 <MX_TIM22_Init+0x114>)
 800370c:	2200      	movs	r2, #0
 800370e:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003710:	4b2f      	ldr	r3, [pc, #188]	; (80037d0 <MX_TIM22_Init+0x114>)
 8003712:	2200      	movs	r2, #0
 8003714:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 8003716:	4b2e      	ldr	r3, [pc, #184]	; (80037d0 <MX_TIM22_Init+0x114>)
 8003718:	0018      	movs	r0, r3
 800371a:	f003 fe95 	bl	8007448 <HAL_TIM_Base_Init>
 800371e:	1e03      	subs	r3, r0, #0
 8003720:	d001      	beq.n	8003726 <MX_TIM22_Init+0x6a>
  {
    Error_Handler();
 8003722:	f000 f939 	bl	8003998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8003726:	2118      	movs	r1, #24
 8003728:	187b      	adds	r3, r7, r1
 800372a:	2280      	movs	r2, #128	; 0x80
 800372c:	0192      	lsls	r2, r2, #6
 800372e:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8003730:	187b      	adds	r3, r7, r1
 8003732:	2200      	movs	r2, #0
 8003734:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8003736:	187b      	adds	r3, r7, r1
 8003738:	2200      	movs	r2, #0
 800373a:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 800373c:	187b      	adds	r3, r7, r1
 800373e:	2200      	movs	r2, #0
 8003740:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 8003742:	187a      	adds	r2, r7, r1
 8003744:	4b22      	ldr	r3, [pc, #136]	; (80037d0 <MX_TIM22_Init+0x114>)
 8003746:	0011      	movs	r1, r2
 8003748:	0018      	movs	r0, r3
 800374a:	f004 f9b7 	bl	8007abc <HAL_TIM_ConfigClockSource>
 800374e:	1e03      	subs	r3, r0, #0
 8003750:	d001      	beq.n	8003756 <MX_TIM22_Init+0x9a>
  {
    Error_Handler();
 8003752:	f000 f921 	bl	8003998 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim22) != HAL_OK)
 8003756:	4b1e      	ldr	r3, [pc, #120]	; (80037d0 <MX_TIM22_Init+0x114>)
 8003758:	0018      	movs	r0, r3
 800375a:	f003 fee5 	bl	8007528 <HAL_TIM_OC_Init>
 800375e:	1e03      	subs	r3, r0, #0
 8003760:	d001      	beq.n	8003766 <MX_TIM22_Init+0xaa>
  {
    Error_Handler();
 8003762:	f000 f919 	bl	8003998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003766:	2110      	movs	r1, #16
 8003768:	187b      	adds	r3, r7, r1
 800376a:	2200      	movs	r2, #0
 800376c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800376e:	187b      	adds	r3, r7, r1
 8003770:	2200      	movs	r2, #0
 8003772:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8003774:	187a      	adds	r2, r7, r1
 8003776:	4b16      	ldr	r3, [pc, #88]	; (80037d0 <MX_TIM22_Init+0x114>)
 8003778:	0011      	movs	r1, r2
 800377a:	0018      	movs	r0, r3
 800377c:	f004 fc93 	bl	80080a6 <HAL_TIMEx_MasterConfigSynchronization>
 8003780:	1e03      	subs	r3, r0, #0
 8003782:	d001      	beq.n	8003788 <MX_TIM22_Init+0xcc>
  {
    Error_Handler();
 8003784:	f000 f908 	bl	8003998 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim22, TIM22_ETR_LSE) != HAL_OK)
 8003788:	4b11      	ldr	r3, [pc, #68]	; (80037d0 <MX_TIM22_Init+0x114>)
 800378a:	2103      	movs	r1, #3
 800378c:	0018      	movs	r0, r3
 800378e:	f004 fccd 	bl	800812c <HAL_TIMEx_RemapConfig>
 8003792:	1e03      	subs	r3, r0, #0
 8003794:	d001      	beq.n	800379a <MX_TIM22_Init+0xde>
  {
    Error_Handler();
 8003796:	f000 f8ff 	bl	8003998 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800379a:	003b      	movs	r3, r7
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80037a0:	003b      	movs	r3, r7
 80037a2:	2200      	movs	r2, #0
 80037a4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037a6:	003b      	movs	r3, r7
 80037a8:	2200      	movs	r2, #0
 80037aa:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037ac:	003b      	movs	r3, r7
 80037ae:	2200      	movs	r2, #0
 80037b0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037b2:	0039      	movs	r1, r7
 80037b4:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <MX_TIM22_Init+0x114>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	0018      	movs	r0, r3
 80037ba:	f004 f879 	bl	80078b0 <HAL_TIM_OC_ConfigChannel>
 80037be:	1e03      	subs	r3, r0, #0
 80037c0:	d001      	beq.n	80037c6 <MX_TIM22_Init+0x10a>
  {
    Error_Handler();
 80037c2:	f000 f8e9 	bl	8003998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */

}
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b00a      	add	sp, #40	; 0x28
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	200001b8 	.word	0x200001b8
 80037d4:	40011400 	.word	0x40011400

080037d8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80037dc:	4b0f      	ldr	r3, [pc, #60]	; (800381c <MX_USB_PCD_Init+0x44>)
 80037de:	4a10      	ldr	r2, [pc, #64]	; (8003820 <MX_USB_PCD_Init+0x48>)
 80037e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80037e2:	4b0e      	ldr	r3, [pc, #56]	; (800381c <MX_USB_PCD_Init+0x44>)
 80037e4:	2208      	movs	r2, #8
 80037e6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80037e8:	4b0c      	ldr	r3, [pc, #48]	; (800381c <MX_USB_PCD_Init+0x44>)
 80037ea:	2202      	movs	r2, #2
 80037ec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80037ee:	4b0b      	ldr	r3, [pc, #44]	; (800381c <MX_USB_PCD_Init+0x44>)
 80037f0:	2202      	movs	r2, #2
 80037f2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80037f4:	4b09      	ldr	r3, [pc, #36]	; (800381c <MX_USB_PCD_Init+0x44>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80037fa:	4b08      	ldr	r3, [pc, #32]	; (800381c <MX_USB_PCD_Init+0x44>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003800:	4b06      	ldr	r3, [pc, #24]	; (800381c <MX_USB_PCD_Init+0x44>)
 8003802:	2200      	movs	r2, #0
 8003804:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003806:	4b05      	ldr	r3, [pc, #20]	; (800381c <MX_USB_PCD_Init+0x44>)
 8003808:	0018      	movs	r0, r3
 800380a:	f001 fbc5 	bl	8004f98 <HAL_PCD_Init>
 800380e:	1e03      	subs	r3, r0, #0
 8003810:	d001      	beq.n	8003816 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 8003812:	f000 f8c1 	bl	8003998 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	20000254 	.word	0x20000254
 8003820:	40005c00 	.word	0x40005c00

08003824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003824:	b590      	push	{r4, r7, lr}
 8003826:	b089      	sub	sp, #36	; 0x24
 8003828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800382a:	240c      	movs	r4, #12
 800382c:	193b      	adds	r3, r7, r4
 800382e:	0018      	movs	r0, r3
 8003830:	2314      	movs	r3, #20
 8003832:	001a      	movs	r2, r3
 8003834:	2100      	movs	r1, #0
 8003836:	f004 fd3e 	bl	80082b6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800383a:	4b52      	ldr	r3, [pc, #328]	; (8003984 <MX_GPIO_Init+0x160>)
 800383c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800383e:	4b51      	ldr	r3, [pc, #324]	; (8003984 <MX_GPIO_Init+0x160>)
 8003840:	2104      	movs	r1, #4
 8003842:	430a      	orrs	r2, r1
 8003844:	62da      	str	r2, [r3, #44]	; 0x2c
 8003846:	4b4f      	ldr	r3, [pc, #316]	; (8003984 <MX_GPIO_Init+0x160>)
 8003848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384a:	2204      	movs	r2, #4
 800384c:	4013      	ands	r3, r2
 800384e:	60bb      	str	r3, [r7, #8]
 8003850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003852:	4b4c      	ldr	r3, [pc, #304]	; (8003984 <MX_GPIO_Init+0x160>)
 8003854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003856:	4b4b      	ldr	r3, [pc, #300]	; (8003984 <MX_GPIO_Init+0x160>)
 8003858:	2101      	movs	r1, #1
 800385a:	430a      	orrs	r2, r1
 800385c:	62da      	str	r2, [r3, #44]	; 0x2c
 800385e:	4b49      	ldr	r3, [pc, #292]	; (8003984 <MX_GPIO_Init+0x160>)
 8003860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003862:	2201      	movs	r2, #1
 8003864:	4013      	ands	r3, r2
 8003866:	607b      	str	r3, [r7, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800386a:	4b46      	ldr	r3, [pc, #280]	; (8003984 <MX_GPIO_Init+0x160>)
 800386c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800386e:	4b45      	ldr	r3, [pc, #276]	; (8003984 <MX_GPIO_Init+0x160>)
 8003870:	2102      	movs	r1, #2
 8003872:	430a      	orrs	r2, r1
 8003874:	62da      	str	r2, [r3, #44]	; 0x2c
 8003876:	4b43      	ldr	r3, [pc, #268]	; (8003984 <MX_GPIO_Init+0x160>)
 8003878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387a:	2202      	movs	r2, #2
 800387c:	4013      	ands	r3, r2
 800387e:	603b      	str	r3, [r7, #0]
 8003880:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 8003882:	23a0      	movs	r3, #160	; 0xa0
 8003884:	05db      	lsls	r3, r3, #23
 8003886:	2200      	movs	r2, #0
 8003888:	21f2      	movs	r1, #242	; 0xf2
 800388a:	0018      	movs	r0, r3
 800388c:	f001 fb38 	bl	8004f00 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8003890:	23a0      	movs	r3, #160	; 0xa0
 8003892:	05db      	lsls	r3, r3, #23
 8003894:	2201      	movs	r2, #1
 8003896:	2104      	movs	r1, #4
 8003898:	0018      	movs	r0, r3
 800389a:	f001 fb31 	bl	8004f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800389e:	2380      	movs	r3, #128	; 0x80
 80038a0:	01db      	lsls	r3, r3, #7
 80038a2:	4839      	ldr	r0, [pc, #228]	; (8003988 <MX_GPIO_Init+0x164>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	0019      	movs	r1, r3
 80038a8:	f001 fb2a 	bl	8004f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80038ac:	4b37      	ldr	r3, [pc, #220]	; (800398c <MX_GPIO_Init+0x168>)
 80038ae:	2201      	movs	r2, #1
 80038b0:	2180      	movs	r1, #128	; 0x80
 80038b2:	0018      	movs	r0, r3
 80038b4:	f001 fb24 	bl	8004f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA4 PA5 
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5 
 80038b8:	193b      	adds	r3, r7, r4
 80038ba:	22f6      	movs	r2, #246	; 0xf6
 80038bc:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038be:	193b      	adds	r3, r7, r4
 80038c0:	2201      	movs	r2, #1
 80038c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c4:	193b      	adds	r3, r7, r4
 80038c6:	2200      	movs	r2, #0
 80038c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ca:	193b      	adds	r3, r7, r4
 80038cc:	2200      	movs	r2, #0
 80038ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038d0:	193a      	adds	r2, r7, r4
 80038d2:	23a0      	movs	r3, #160	; 0xa0
 80038d4:	05db      	lsls	r3, r3, #23
 80038d6:	0011      	movs	r1, r2
 80038d8:	0018      	movs	r0, r3
 80038da:	f001 f993 	bl	8004c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11;
 80038de:	193b      	adds	r3, r7, r4
 80038e0:	4a2b      	ldr	r2, [pc, #172]	; (8003990 <MX_GPIO_Init+0x16c>)
 80038e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80038e4:	193b      	adds	r3, r7, r4
 80038e6:	4a2b      	ldr	r2, [pc, #172]	; (8003994 <MX_GPIO_Init+0x170>)
 80038e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ea:	193b      	adds	r3, r7, r4
 80038ec:	2200      	movs	r2, #0
 80038ee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038f0:	193b      	adds	r3, r7, r4
 80038f2:	4a25      	ldr	r2, [pc, #148]	; (8003988 <MX_GPIO_Init+0x164>)
 80038f4:	0019      	movs	r1, r3
 80038f6:	0010      	movs	r0, r2
 80038f8:	f001 f984 	bl	8004c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80038fc:	0021      	movs	r1, r4
 80038fe:	187b      	adds	r3, r7, r1
 8003900:	2280      	movs	r2, #128	; 0x80
 8003902:	01d2      	lsls	r2, r2, #7
 8003904:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003906:	187b      	adds	r3, r7, r1
 8003908:	2201      	movs	r2, #1
 800390a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390c:	187b      	adds	r3, r7, r1
 800390e:	2200      	movs	r2, #0
 8003910:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003912:	187b      	adds	r3, r7, r1
 8003914:	2200      	movs	r2, #0
 8003916:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003918:	000c      	movs	r4, r1
 800391a:	187b      	adds	r3, r7, r1
 800391c:	4a1a      	ldr	r2, [pc, #104]	; (8003988 <MX_GPIO_Init+0x164>)
 800391e:	0019      	movs	r1, r3
 8003920:	0010      	movs	r0, r2
 8003922:	f001 f96f 	bl	8004c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003926:	0021      	movs	r1, r4
 8003928:	187b      	adds	r3, r7, r1
 800392a:	2280      	movs	r2, #128	; 0x80
 800392c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800392e:	187b      	adds	r3, r7, r1
 8003930:	2201      	movs	r2, #1
 8003932:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003934:	187b      	adds	r3, r7, r1
 8003936:	2200      	movs	r2, #0
 8003938:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800393a:	187b      	adds	r3, r7, r1
 800393c:	2200      	movs	r2, #0
 800393e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003940:	187b      	adds	r3, r7, r1
 8003942:	4a12      	ldr	r2, [pc, #72]	; (800398c <MX_GPIO_Init+0x168>)
 8003944:	0019      	movs	r1, r3
 8003946:	0010      	movs	r0, r2
 8003948:	f001 f95c 	bl	8004c04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800394c:	2200      	movs	r2, #0
 800394e:	2100      	movs	r1, #0
 8003950:	2005      	movs	r0, #5
 8003952:	f001 f8cd 	bl	8004af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003956:	2005      	movs	r0, #5
 8003958:	f001 f8df 	bl	8004b1a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 800395c:	2200      	movs	r2, #0
 800395e:	2100      	movs	r1, #0
 8003960:	2006      	movs	r0, #6
 8003962:	f001 f8c5 	bl	8004af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8003966:	2006      	movs	r0, #6
 8003968:	f001 f8d7 	bl	8004b1a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800396c:	2200      	movs	r2, #0
 800396e:	2100      	movs	r1, #0
 8003970:	2007      	movs	r0, #7
 8003972:	f001 f8bd 	bl	8004af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003976:	2007      	movs	r0, #7
 8003978:	f001 f8cf 	bl	8004b1a <HAL_NVIC_EnableIRQ>

}
 800397c:	46c0      	nop			; (mov r8, r8)
 800397e:	46bd      	mov	sp, r7
 8003980:	b009      	add	sp, #36	; 0x24
 8003982:	bd90      	pop	{r4, r7, pc}
 8003984:	40021000 	.word	0x40021000
 8003988:	50000400 	.word	0x50000400
 800398c:	50000800 	.word	0x50000800
 8003990:	00000c06 	.word	0x00000c06
 8003994:	10110000 	.word	0x10110000

08003998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800399c:	46c0      	nop			; (mov r8, r8)
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039a8:	4b07      	ldr	r3, [pc, #28]	; (80039c8 <HAL_MspInit+0x24>)
 80039aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ac:	4b06      	ldr	r3, [pc, #24]	; (80039c8 <HAL_MspInit+0x24>)
 80039ae:	2101      	movs	r1, #1
 80039b0:	430a      	orrs	r2, r1
 80039b2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80039b4:	4b04      	ldr	r3, [pc, #16]	; (80039c8 <HAL_MspInit+0x24>)
 80039b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039b8:	4b03      	ldr	r3, [pc, #12]	; (80039c8 <HAL_MspInit+0x24>)
 80039ba:	2180      	movs	r1, #128	; 0x80
 80039bc:	0549      	lsls	r1, r1, #21
 80039be:	430a      	orrs	r2, r1
 80039c0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40021000 	.word	0x40021000

080039cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d4:	230c      	movs	r3, #12
 80039d6:	18fb      	adds	r3, r7, r3
 80039d8:	0018      	movs	r0, r3
 80039da:	2314      	movs	r3, #20
 80039dc:	001a      	movs	r2, r3
 80039de:	2100      	movs	r1, #0
 80039e0:	f004 fc69 	bl	80082b6 <memset>
  if(hadc->Instance==ADC1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a19      	ldr	r2, [pc, #100]	; (8003a50 <HAL_ADC_MspInit+0x84>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d12b      	bne.n	8003a46 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80039ee:	4b19      	ldr	r3, [pc, #100]	; (8003a54 <HAL_ADC_MspInit+0x88>)
 80039f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039f2:	4b18      	ldr	r3, [pc, #96]	; (8003a54 <HAL_ADC_MspInit+0x88>)
 80039f4:	2180      	movs	r1, #128	; 0x80
 80039f6:	0089      	lsls	r1, r1, #2
 80039f8:	430a      	orrs	r2, r1
 80039fa:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039fc:	4b15      	ldr	r3, [pc, #84]	; (8003a54 <HAL_ADC_MspInit+0x88>)
 80039fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a00:	4b14      	ldr	r3, [pc, #80]	; (8003a54 <HAL_ADC_MspInit+0x88>)
 8003a02:	2101      	movs	r1, #1
 8003a04:	430a      	orrs	r2, r1
 8003a06:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a08:	4b12      	ldr	r3, [pc, #72]	; (8003a54 <HAL_ADC_MspInit+0x88>)
 8003a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	4013      	ands	r3, r2
 8003a10:	60bb      	str	r3, [r7, #8]
 8003a12:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003a14:	210c      	movs	r1, #12
 8003a16:	187b      	adds	r3, r7, r1
 8003a18:	2201      	movs	r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a1c:	187b      	adds	r3, r7, r1
 8003a1e:	2203      	movs	r2, #3
 8003a20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a22:	187b      	adds	r3, r7, r1
 8003a24:	2200      	movs	r2, #0
 8003a26:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a28:	187a      	adds	r2, r7, r1
 8003a2a:	23a0      	movs	r3, #160	; 0xa0
 8003a2c:	05db      	lsls	r3, r3, #23
 8003a2e:	0011      	movs	r1, r2
 8003a30:	0018      	movs	r0, r3
 8003a32:	f001 f8e7 	bl	8004c04 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8003a36:	2200      	movs	r2, #0
 8003a38:	2100      	movs	r1, #0
 8003a3a:	200c      	movs	r0, #12
 8003a3c:	f001 f858 	bl	8004af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8003a40:	200c      	movs	r0, #12
 8003a42:	f001 f86a 	bl	8004b1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003a46:	46c0      	nop			; (mov r8, r8)
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	b008      	add	sp, #32
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	40012400 	.word	0x40012400
 8003a54:	40021000 	.word	0x40021000

08003a58 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a0a      	ldr	r2, [pc, #40]	; (8003a90 <HAL_RTC_MspInit+0x38>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d10e      	bne.n	8003a88 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003a6a:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <HAL_RTC_MspInit+0x3c>)
 8003a6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a6e:	4b09      	ldr	r3, [pc, #36]	; (8003a94 <HAL_RTC_MspInit+0x3c>)
 8003a70:	2180      	movs	r1, #128	; 0x80
 8003a72:	02c9      	lsls	r1, r1, #11
 8003a74:	430a      	orrs	r2, r1
 8003a76:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8003a78:	2200      	movs	r2, #0
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	2002      	movs	r0, #2
 8003a7e:	f001 f837 	bl	8004af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8003a82:	2002      	movs	r0, #2
 8003a84:	f001 f849 	bl	8004b1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003a88:	46c0      	nop			; (mov r8, r8)
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	b002      	add	sp, #8
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40002800 	.word	0x40002800
 8003a94:	40021000 	.word	0x40021000

08003a98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa0:	230c      	movs	r3, #12
 8003aa2:	18fb      	adds	r3, r7, r3
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	2314      	movs	r3, #20
 8003aa8:	001a      	movs	r2, r3
 8003aaa:	2100      	movs	r1, #0
 8003aac:	f004 fc03 	bl	80082b6 <memset>
  if(hspi->Instance==SPI2)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a1c      	ldr	r2, [pc, #112]	; (8003b28 <HAL_SPI_MspInit+0x90>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d131      	bne.n	8003b1e <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003aba:	4b1c      	ldr	r3, [pc, #112]	; (8003b2c <HAL_SPI_MspInit+0x94>)
 8003abc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003abe:	4b1b      	ldr	r3, [pc, #108]	; (8003b2c <HAL_SPI_MspInit+0x94>)
 8003ac0:	2180      	movs	r1, #128	; 0x80
 8003ac2:	01c9      	lsls	r1, r1, #7
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ac8:	4b18      	ldr	r3, [pc, #96]	; (8003b2c <HAL_SPI_MspInit+0x94>)
 8003aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003acc:	4b17      	ldr	r3, [pc, #92]	; (8003b2c <HAL_SPI_MspInit+0x94>)
 8003ace:	2102      	movs	r1, #2
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ad4:	4b15      	ldr	r3, [pc, #84]	; (8003b2c <HAL_SPI_MspInit+0x94>)
 8003ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad8:	2202      	movs	r2, #2
 8003ada:	4013      	ands	r3, r2
 8003adc:	60bb      	str	r3, [r7, #8]
 8003ade:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003ae0:	210c      	movs	r1, #12
 8003ae2:	187b      	adds	r3, r7, r1
 8003ae4:	22b0      	movs	r2, #176	; 0xb0
 8003ae6:	0212      	lsls	r2, r2, #8
 8003ae8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aea:	187b      	adds	r3, r7, r1
 8003aec:	2202      	movs	r2, #2
 8003aee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af0:	187b      	adds	r3, r7, r1
 8003af2:	2200      	movs	r2, #0
 8003af4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003af6:	187b      	adds	r3, r7, r1
 8003af8:	2203      	movs	r2, #3
 8003afa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8003afc:	187b      	adds	r3, r7, r1
 8003afe:	2200      	movs	r2, #0
 8003b00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b02:	187b      	adds	r3, r7, r1
 8003b04:	4a0a      	ldr	r2, [pc, #40]	; (8003b30 <HAL_SPI_MspInit+0x98>)
 8003b06:	0019      	movs	r1, r3
 8003b08:	0010      	movs	r0, r2
 8003b0a:	f001 f87b 	bl	8004c04 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003b0e:	2200      	movs	r2, #0
 8003b10:	2100      	movs	r1, #0
 8003b12:	201a      	movs	r0, #26
 8003b14:	f000 ffec 	bl	8004af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003b18:	201a      	movs	r0, #26
 8003b1a:	f000 fffe 	bl	8004b1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003b1e:	46c0      	nop			; (mov r8, r8)
 8003b20:	46bd      	mov	sp, r7
 8003b22:	b008      	add	sp, #32
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	46c0      	nop			; (mov r8, r8)
 8003b28:	40003800 	.word	0x40003800
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	50000400 	.word	0x50000400

08003b34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	2380      	movs	r3, #128	; 0x80
 8003b42:	05db      	lsls	r3, r3, #23
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d10e      	bne.n	8003b66 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b48:	4b28      	ldr	r3, [pc, #160]	; (8003bec <HAL_TIM_Base_MspInit+0xb8>)
 8003b4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b4c:	4b27      	ldr	r3, [pc, #156]	; (8003bec <HAL_TIM_Base_MspInit+0xb8>)
 8003b4e:	2101      	movs	r1, #1
 8003b50:	430a      	orrs	r2, r1
 8003b52:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003b54:	2200      	movs	r2, #0
 8003b56:	2100      	movs	r1, #0
 8003b58:	200f      	movs	r0, #15
 8003b5a:	f000 ffc9 	bl	8004af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003b5e:	200f      	movs	r0, #15
 8003b60:	f000 ffdb 	bl	8004b1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 8003b64:	e03e      	b.n	8003be4 <HAL_TIM_Base_MspInit+0xb0>
  else if(htim_base->Instance==TIM3)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a21      	ldr	r2, [pc, #132]	; (8003bf0 <HAL_TIM_Base_MspInit+0xbc>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d106      	bne.n	8003b7e <HAL_TIM_Base_MspInit+0x4a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b70:	4b1e      	ldr	r3, [pc, #120]	; (8003bec <HAL_TIM_Base_MspInit+0xb8>)
 8003b72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b74:	4b1d      	ldr	r3, [pc, #116]	; (8003bec <HAL_TIM_Base_MspInit+0xb8>)
 8003b76:	2102      	movs	r1, #2
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003b7c:	e032      	b.n	8003be4 <HAL_TIM_Base_MspInit+0xb0>
  else if(htim_base->Instance==TIM6)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a1c      	ldr	r2, [pc, #112]	; (8003bf4 <HAL_TIM_Base_MspInit+0xc0>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d106      	bne.n	8003b96 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003b88:	4b18      	ldr	r3, [pc, #96]	; (8003bec <HAL_TIM_Base_MspInit+0xb8>)
 8003b8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b8c:	4b17      	ldr	r3, [pc, #92]	; (8003bec <HAL_TIM_Base_MspInit+0xb8>)
 8003b8e:	2110      	movs	r1, #16
 8003b90:	430a      	orrs	r2, r1
 8003b92:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003b94:	e026      	b.n	8003be4 <HAL_TIM_Base_MspInit+0xb0>
  else if(htim_base->Instance==TIM21)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a17      	ldr	r2, [pc, #92]	; (8003bf8 <HAL_TIM_Base_MspInit+0xc4>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d10e      	bne.n	8003bbe <HAL_TIM_Base_MspInit+0x8a>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8003ba0:	4b12      	ldr	r3, [pc, #72]	; (8003bec <HAL_TIM_Base_MspInit+0xb8>)
 8003ba2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ba4:	4b11      	ldr	r3, [pc, #68]	; (8003bec <HAL_TIM_Base_MspInit+0xb8>)
 8003ba6:	2104      	movs	r1, #4
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8003bac:	2200      	movs	r2, #0
 8003bae:	2100      	movs	r1, #0
 8003bb0:	2014      	movs	r0, #20
 8003bb2:	f000 ff9d 	bl	8004af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8003bb6:	2014      	movs	r0, #20
 8003bb8:	f000 ffaf 	bl	8004b1a <HAL_NVIC_EnableIRQ>
}
 8003bbc:	e012      	b.n	8003be4 <HAL_TIM_Base_MspInit+0xb0>
  else if(htim_base->Instance==TIM22)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a0e      	ldr	r2, [pc, #56]	; (8003bfc <HAL_TIM_Base_MspInit+0xc8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d10d      	bne.n	8003be4 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8003bc8:	4b08      	ldr	r3, [pc, #32]	; (8003bec <HAL_TIM_Base_MspInit+0xb8>)
 8003bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bcc:	4b07      	ldr	r3, [pc, #28]	; (8003bec <HAL_TIM_Base_MspInit+0xb8>)
 8003bce:	2120      	movs	r1, #32
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM22_IRQn, 0, 0);
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	2016      	movs	r0, #22
 8003bda:	f000 ff89 	bl	8004af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
 8003bde:	2016      	movs	r0, #22
 8003be0:	f000 ff9b 	bl	8004b1a <HAL_NVIC_EnableIRQ>
}
 8003be4:	46c0      	nop			; (mov r8, r8)
 8003be6:	46bd      	mov	sp, r7
 8003be8:	b002      	add	sp, #8
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	40000400 	.word	0x40000400
 8003bf4:	40001000 	.word	0x40001000
 8003bf8:	40010800 	.word	0x40010800
 8003bfc:	40011400 	.word	0x40011400

08003c00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b088      	sub	sp, #32
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c08:	230c      	movs	r3, #12
 8003c0a:	18fb      	adds	r3, r7, r3
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	2314      	movs	r3, #20
 8003c10:	001a      	movs	r2, r3
 8003c12:	2100      	movs	r1, #0
 8003c14:	f004 fb4f 	bl	80082b6 <memset>
  if(htim->Instance==TIM3)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a14      	ldr	r2, [pc, #80]	; (8003c70 <HAL_TIM_MspPostInit+0x70>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d121      	bne.n	8003c66 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c22:	4b14      	ldr	r3, [pc, #80]	; (8003c74 <HAL_TIM_MspPostInit+0x74>)
 8003c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c26:	4b13      	ldr	r3, [pc, #76]	; (8003c74 <HAL_TIM_MspPostInit+0x74>)
 8003c28:	2104      	movs	r1, #4
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c2e:	4b11      	ldr	r3, [pc, #68]	; (8003c74 <HAL_TIM_MspPostInit+0x74>)
 8003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c32:	2204      	movs	r2, #4
 8003c34:	4013      	ands	r3, r2
 8003c36:	60bb      	str	r3, [r7, #8]
 8003c38:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003c3a:	210c      	movs	r1, #12
 8003c3c:	187b      	adds	r3, r7, r1
 8003c3e:	2240      	movs	r2, #64	; 0x40
 8003c40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c42:	187b      	adds	r3, r7, r1
 8003c44:	2202      	movs	r2, #2
 8003c46:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c48:	187b      	adds	r3, r7, r1
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c4e:	187b      	adds	r3, r7, r1
 8003c50:	2200      	movs	r2, #0
 8003c52:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c54:	187b      	adds	r3, r7, r1
 8003c56:	2202      	movs	r2, #2
 8003c58:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c5a:	187b      	adds	r3, r7, r1
 8003c5c:	4a06      	ldr	r2, [pc, #24]	; (8003c78 <HAL_TIM_MspPostInit+0x78>)
 8003c5e:	0019      	movs	r1, r3
 8003c60:	0010      	movs	r0, r2
 8003c62:	f000 ffcf 	bl	8004c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003c66:	46c0      	nop			; (mov r8, r8)
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	b008      	add	sp, #32
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	46c0      	nop			; (mov r8, r8)
 8003c70:	40000400 	.word	0x40000400
 8003c74:	40021000 	.word	0x40021000
 8003c78:	50000800 	.word	0x50000800

08003c7c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a06      	ldr	r2, [pc, #24]	; (8003ca4 <HAL_PCD_MspInit+0x28>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d106      	bne.n	8003c9c <HAL_PCD_MspInit+0x20>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003c8e:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <HAL_PCD_MspInit+0x2c>)
 8003c90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c92:	4b05      	ldr	r3, [pc, #20]	; (8003ca8 <HAL_PCD_MspInit+0x2c>)
 8003c94:	2180      	movs	r1, #128	; 0x80
 8003c96:	0409      	lsls	r1, r1, #16
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8003c9c:	46c0      	nop			; (mov r8, r8)
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b002      	add	sp, #8
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40005c00 	.word	0x40005c00
 8003ca8:	40021000 	.word	0x40021000

08003cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003cb0:	46c0      	nop			; (mov r8, r8)
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cba:	e7fe      	b.n	8003cba <HardFault_Handler+0x4>

08003cbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003cc0:	46c0      	nop			; (mov r8, r8)
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cca:	46c0      	nop			; (mov r8, r8)
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cd4:	f000 fb12 	bl	80042fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cd8:	46c0      	nop			; (mov r8, r8)
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
	...

08003ce0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003ce4:	4b03      	ldr	r3, [pc, #12]	; (8003cf4 <RTC_IRQHandler+0x14>)
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	f002 fda0 	bl	800682c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8003cec:	46c0      	nop			; (mov r8, r8)
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	46c0      	nop			; (mov r8, r8)
 8003cf4:	200001f4 	.word	0x200001f4

08003cf8 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003cfc:	2002      	movs	r0, #2
 8003cfe:	f001 f92f 	bl	8004f60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003d02:	46c0      	nop			; (mov r8, r8)
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003d0c:	2004      	movs	r0, #4
 8003d0e:	f001 f927 	bl	8004f60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003d1c:	2380      	movs	r3, #128	; 0x80
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	0018      	movs	r0, r3
 8003d22:	f001 f91d 	bl	8004f60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003d26:	2380      	movs	r3, #128	; 0x80
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f001 f918 	bl	8004f60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003d30:	46c0      	nop			; (mov r8, r8)
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8003d3c:	4b03      	ldr	r3, [pc, #12]	; (8003d4c <ADC1_COMP_IRQHandler+0x14>)
 8003d3e:	0018      	movs	r0, r3
 8003d40:	f000 fc84 	bl	800464c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8003d44:	46c0      	nop			; (mov r8, r8)
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	46c0      	nop			; (mov r8, r8)
 8003d4c:	200004c8 	.word	0x200004c8

08003d50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003d54:	4b03      	ldr	r3, [pc, #12]	; (8003d64 <TIM2_IRQHandler+0x14>)
 8003d56:	0018      	movs	r0, r3
 8003d58:	f003 fcc2 	bl	80076e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003d5c:	46c0      	nop			; (mov r8, r8)
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	20000218 	.word	0x20000218

08003d68 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8003d6c:	4b03      	ldr	r3, [pc, #12]	; (8003d7c <TIM21_IRQHandler+0x14>)
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f003 fcb6 	bl	80076e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8003d74:	46c0      	nop			; (mov r8, r8)
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	46c0      	nop			; (mov r8, r8)
 8003d7c:	20000524 	.word	0x20000524

08003d80 <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM22_IRQn 0 */

  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 8003d84:	4b03      	ldr	r3, [pc, #12]	; (8003d94 <TIM22_IRQHandler+0x14>)
 8003d86:	0018      	movs	r0, r3
 8003d88:	f003 fcaa 	bl	80076e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 8003d8c:	46c0      	nop			; (mov r8, r8)
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	46c0      	nop			; (mov r8, r8)
 8003d94:	200001b8 	.word	0x200001b8

08003d98 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003d9c:	4b03      	ldr	r3, [pc, #12]	; (8003dac <SPI2_IRQHandler+0x14>)
 8003d9e:	0018      	movs	r0, r3
 8003da0:	f003 f8d2 	bl	8006f48 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003da4:	46c0      	nop			; (mov r8, r8)
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	46c0      	nop			; (mov r8, r8)
 8003dac:	20000124 	.word	0x20000124

08003db0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003db8:	4b11      	ldr	r3, [pc, #68]	; (8003e00 <_sbrk+0x50>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d102      	bne.n	8003dc6 <_sbrk+0x16>
		heap_end = &end;
 8003dc0:	4b0f      	ldr	r3, [pc, #60]	; (8003e00 <_sbrk+0x50>)
 8003dc2:	4a10      	ldr	r2, [pc, #64]	; (8003e04 <_sbrk+0x54>)
 8003dc4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003dc6:	4b0e      	ldr	r3, [pc, #56]	; (8003e00 <_sbrk+0x50>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003dcc:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <_sbrk+0x50>)
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	18d3      	adds	r3, r2, r3
 8003dd4:	466a      	mov	r2, sp
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d907      	bls.n	8003dea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003dda:	f004 fa39 	bl	8008250 <__errno>
 8003dde:	0003      	movs	r3, r0
 8003de0:	220c      	movs	r2, #12
 8003de2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003de4:	2301      	movs	r3, #1
 8003de6:	425b      	negs	r3, r3
 8003de8:	e006      	b.n	8003df8 <_sbrk+0x48>
	}

	heap_end += incr;
 8003dea:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <_sbrk+0x50>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	18d2      	adds	r2, r2, r3
 8003df2:	4b03      	ldr	r3, [pc, #12]	; (8003e00 <_sbrk+0x50>)
 8003df4:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8003df6:	68fb      	ldr	r3, [r7, #12]
}
 8003df8:	0018      	movs	r0, r3
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	b004      	add	sp, #16
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	20000090 	.word	0x20000090
 8003e04:	20000568 	.word	0x20000568

08003e08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8003e0c:	4b17      	ldr	r3, [pc, #92]	; (8003e6c <SystemInit+0x64>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	4b16      	ldr	r3, [pc, #88]	; (8003e6c <SystemInit+0x64>)
 8003e12:	2180      	movs	r1, #128	; 0x80
 8003e14:	0049      	lsls	r1, r1, #1
 8003e16:	430a      	orrs	r2, r1
 8003e18:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8003e1a:	4b14      	ldr	r3, [pc, #80]	; (8003e6c <SystemInit+0x64>)
 8003e1c:	68da      	ldr	r2, [r3, #12]
 8003e1e:	4b13      	ldr	r3, [pc, #76]	; (8003e6c <SystemInit+0x64>)
 8003e20:	4913      	ldr	r1, [pc, #76]	; (8003e70 <SystemInit+0x68>)
 8003e22:	400a      	ands	r2, r1
 8003e24:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003e26:	4b11      	ldr	r3, [pc, #68]	; (8003e6c <SystemInit+0x64>)
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	4b10      	ldr	r3, [pc, #64]	; (8003e6c <SystemInit+0x64>)
 8003e2c:	4911      	ldr	r1, [pc, #68]	; (8003e74 <SystemInit+0x6c>)
 8003e2e:	400a      	ands	r2, r1
 8003e30:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003e32:	4b0e      	ldr	r3, [pc, #56]	; (8003e6c <SystemInit+0x64>)
 8003e34:	689a      	ldr	r2, [r3, #8]
 8003e36:	4b0d      	ldr	r3, [pc, #52]	; (8003e6c <SystemInit+0x64>)
 8003e38:	2101      	movs	r1, #1
 8003e3a:	438a      	bics	r2, r1
 8003e3c:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003e3e:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <SystemInit+0x64>)
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	4b0a      	ldr	r3, [pc, #40]	; (8003e6c <SystemInit+0x64>)
 8003e44:	490c      	ldr	r1, [pc, #48]	; (8003e78 <SystemInit+0x70>)
 8003e46:	400a      	ands	r2, r1
 8003e48:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8003e4a:	4b08      	ldr	r3, [pc, #32]	; (8003e6c <SystemInit+0x64>)
 8003e4c:	68da      	ldr	r2, [r3, #12]
 8003e4e:	4b07      	ldr	r3, [pc, #28]	; (8003e6c <SystemInit+0x64>)
 8003e50:	490a      	ldr	r1, [pc, #40]	; (8003e7c <SystemInit+0x74>)
 8003e52:	400a      	ands	r2, r1
 8003e54:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003e56:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <SystemInit+0x64>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003e5c:	4b08      	ldr	r3, [pc, #32]	; (8003e80 <SystemInit+0x78>)
 8003e5e:	2280      	movs	r2, #128	; 0x80
 8003e60:	0512      	lsls	r2, r2, #20
 8003e62:	609a      	str	r2, [r3, #8]
#endif
}
 8003e64:	46c0      	nop			; (mov r8, r8)
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	46c0      	nop			; (mov r8, r8)
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	88ff400c 	.word	0x88ff400c
 8003e74:	fef6fff6 	.word	0xfef6fff6
 8003e78:	fffbffff 	.word	0xfffbffff
 8003e7c:	ff02ffff 	.word	0xff02ffff
 8003e80:	e000ed00 	.word	0xe000ed00

08003e84 <HAL_TIM_PeriodElapsedCallback>:
static uint32_t stopwatchStartMarker = 0;
static uint32_t stopwatchPauseMarker = 0;
static uint8_t motorStateCounter = 0;

// called for a bunch of timers when timer has to circle back (arr->0, 0->arr)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
	// button's timer
	if (htim->Instance == TIM6) {
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a16      	ldr	r2, [pc, #88]	; (8003eec <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d11e      	bne.n	8003ed4 <HAL_TIM_PeriodElapsedCallback+0x50>
		// stop timer, renable button interrupts, and clear pending
		HAL_TIM_Base_Stop_IT(htim);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	0018      	movs	r0, r3
 8003e9a:	f003 fb23 	bl	80074e4 <HAL_TIM_Base_Stop_IT>
		HAL_NVIC_ClearPendingIRQ(EXTI2_3_IRQn);
 8003e9e:	2006      	movs	r0, #6
 8003ea0:	f000 fe58 	bl	8004b54 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 8003ea4:	2007      	movs	r0, #7
 8003ea6:	f000 fe55 	bl	8004b54 <HAL_NVIC_ClearPendingIRQ>
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON1);
 8003eaa:	4b11      	ldr	r3, [pc, #68]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003eac:	2202      	movs	r2, #2
 8003eae:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON2);
 8003eb0:	4b0f      	ldr	r3, [pc, #60]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003eb2:	2204      	movs	r2, #4
 8003eb4:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON3);
 8003eb6:	4b0e      	ldr	r3, [pc, #56]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003eb8:	2280      	movs	r2, #128	; 0x80
 8003eba:	00d2      	lsls	r2, r2, #3
 8003ebc:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON4);
 8003ebe:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003ec0:	2280      	movs	r2, #128	; 0x80
 8003ec2:	0112      	lsls	r2, r2, #4
 8003ec4:	615a      	str	r2, [r3, #20]

		HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8003ec6:	2006      	movs	r0, #6
 8003ec8:	f000 fe27 	bl	8004b1a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003ecc:	2007      	movs	r0, #7
 8003ece:	f000 fe24 	bl	8004b1a <HAL_NVIC_EnableIRQ>
	// sampler's timer
	else if (htim->Instance == TIM22) {
		// set flag to start ADC sample
		canSampleBattery = 1;
	}
}
 8003ed2:	e007      	b.n	8003ee4 <HAL_TIM_PeriodElapsedCallback+0x60>
	else if (htim->Instance == TIM22) {
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a06      	ldr	r2, [pc, #24]	; (8003ef4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d102      	bne.n	8003ee4 <HAL_TIM_PeriodElapsedCallback+0x60>
		canSampleBattery = 1;
 8003ede:	4b06      	ldr	r3, [pc, #24]	; (8003ef8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	701a      	strb	r2, [r3, #0]
}
 8003ee4:	46c0      	nop			; (mov r8, r8)
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	b002      	add	sp, #8
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	40001000 	.word	0x40001000
 8003ef0:	40010400 	.word	0x40010400
 8003ef4:	40011400 	.word	0x40011400
 8003ef8:	200000ca 	.word	0x200000ca

08003efc <HAL_TIM_OC_DelayElapsedCallback>:

// called for a bunch of timers when channel value = counter value
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM21) {
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a46      	ldr	r2, [pc, #280]	; (8004024 <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d139      	bne.n	8003f82 <HAL_TIM_OC_DelayElapsedCallback+0x86>
		// timer's channel
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	7e1b      	ldrb	r3, [r3, #24]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d122      	bne.n	8003f5c <HAL_TIM_OC_DelayElapsedCallback+0x60>
			updateFace.timer = 1;		// set update screen flag
 8003f16:	4b44      	ldr	r3, [pc, #272]	; (8004028 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 8003f18:	2201      	movs	r2, #1
 8003f1a:	705a      	strb	r2, [r3, #1]

			// decrement value if non-zero, else set done flag
			if (timerCounter != 1) --timerCounter;
 8003f1c:	4b43      	ldr	r3, [pc, #268]	; (800402c <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d005      	beq.n	8003f30 <HAL_TIM_OC_DelayElapsedCallback+0x34>
 8003f24:	4b41      	ldr	r3, [pc, #260]	; (800402c <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	1e5a      	subs	r2, r3, #1
 8003f2a:	4b40      	ldr	r3, [pc, #256]	; (800402c <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8003f2c:	601a      	str	r2, [r3, #0]
				stopMotor(htim);
				break;
			default: break;
		}
	}
}
 8003f2e:	e074      	b.n	800401a <HAL_TIM_OC_DelayElapsedCallback+0x11e>
				--timerCounter;
 8003f30:	4b3e      	ldr	r3, [pc, #248]	; (800402c <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	1e5a      	subs	r2, r3, #1
 8003f36:	4b3d      	ldr	r3, [pc, #244]	; (800402c <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8003f38:	601a      	str	r2, [r3, #0]
				isTimerDone = 1;
 8003f3a:	4b3d      	ldr	r3, [pc, #244]	; (8004030 <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	701a      	strb	r2, [r3, #0]
				stopTimer(htim);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	0018      	movs	r0, r3
 8003f44:	f000 f87c 	bl	8004040 <stopTimer>
				updateFace.timer = 1;
 8003f48:	4b37      	ldr	r3, [pc, #220]	; (8004028 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_TogglePin(LED2_PORT, LED2_PIN);
 8003f4e:	23a0      	movs	r3, #160	; 0xa0
 8003f50:	05db      	lsls	r3, r3, #23
 8003f52:	2140      	movs	r1, #64	; 0x40
 8003f54:	0018      	movs	r0, r3
 8003f56:	f000 fff0 	bl	8004f3a <HAL_GPIO_TogglePin>
}
 8003f5a:	e05e      	b.n	800401a <HAL_TIM_OC_DelayElapsedCallback+0x11e>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	7e1b      	ldrb	r3, [r3, #24]
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d15a      	bne.n	800401a <HAL_TIM_OC_DelayElapsedCallback+0x11e>
			updateFace.stopwatch = 1;
 8003f64:	4b30      	ldr	r3, [pc, #192]	; (8004028 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 8003f66:	2201      	movs	r2, #1
 8003f68:	70da      	strb	r2, [r3, #3]
			++stopwatchCounter;
 8003f6a:	4b32      	ldr	r3, [pc, #200]	; (8004034 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	4b30      	ldr	r3, [pc, #192]	; (8004034 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8003f72:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED2_PORT, LED2_PIN);
 8003f74:	23a0      	movs	r3, #160	; 0xa0
 8003f76:	05db      	lsls	r3, r3, #23
 8003f78:	2140      	movs	r1, #64	; 0x40
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	f000 ffdd 	bl	8004f3a <HAL_GPIO_TogglePin>
}
 8003f80:	e04b      	b.n	800401a <HAL_TIM_OC_DelayElapsedCallback+0x11e>
	else if (htim->Instance == TIM2) {
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	2380      	movs	r3, #128	; 0x80
 8003f88:	05db      	lsls	r3, r3, #23
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d142      	bne.n	8004014 <HAL_TIM_OC_DelayElapsedCallback+0x118>
		++motorStateCounter;
 8003f8e:	4b2a      	ldr	r3, [pc, #168]	; (8004038 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	3301      	adds	r3, #1
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	4b28      	ldr	r3, [pc, #160]	; (8004038 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8003f98:	701a      	strb	r2, [r3, #0]
		switch(motorStateCounter) {
 8003f9a:	4b27      	ldr	r3, [pc, #156]	; (8004038 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	2b06      	cmp	r3, #6
 8003fa0:	d83a      	bhi.n	8004018 <HAL_TIM_OC_DelayElapsedCallback+0x11c>
 8003fa2:	009a      	lsls	r2, r3, #2
 8003fa4:	4b25      	ldr	r3, [pc, #148]	; (800403c <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8003fa6:	18d3      	adds	r3, r2, r3
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	469f      	mov	pc, r3
			case 1: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8003fac:	23a0      	movs	r3, #160	; 0xa0
 8003fae:	05db      	lsls	r3, r3, #23
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	2110      	movs	r1, #16
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	f000 ffa3 	bl	8004f00 <HAL_GPIO_WritePin>
 8003fba:	e02e      	b.n	800401a <HAL_TIM_OC_DelayElapsedCallback+0x11e>
			case 2: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET); break;
 8003fbc:	23a0      	movs	r3, #160	; 0xa0
 8003fbe:	05db      	lsls	r3, r3, #23
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	2110      	movs	r1, #16
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f000 ff9b 	bl	8004f00 <HAL_GPIO_WritePin>
 8003fca:	e026      	b.n	800401a <HAL_TIM_OC_DelayElapsedCallback+0x11e>
			case 3: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8003fcc:	23a0      	movs	r3, #160	; 0xa0
 8003fce:	05db      	lsls	r3, r3, #23
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	2110      	movs	r1, #16
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f000 ff93 	bl	8004f00 <HAL_GPIO_WritePin>
 8003fda:	e01e      	b.n	800401a <HAL_TIM_OC_DelayElapsedCallback+0x11e>
			case 4: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET); break;
 8003fdc:	23a0      	movs	r3, #160	; 0xa0
 8003fde:	05db      	lsls	r3, r3, #23
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	2110      	movs	r1, #16
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	f000 ff8b 	bl	8004f00 <HAL_GPIO_WritePin>
 8003fea:	e016      	b.n	800401a <HAL_TIM_OC_DelayElapsedCallback+0x11e>
			case 5: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8003fec:	23a0      	movs	r3, #160	; 0xa0
 8003fee:	05db      	lsls	r3, r3, #23
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	2110      	movs	r1, #16
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	f000 ff83 	bl	8004f00 <HAL_GPIO_WritePin>
 8003ffa:	e00e      	b.n	800401a <HAL_TIM_OC_DelayElapsedCallback+0x11e>
				HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET);
 8003ffc:	23a0      	movs	r3, #160	; 0xa0
 8003ffe:	05db      	lsls	r3, r3, #23
 8004000:	2200      	movs	r2, #0
 8004002:	2110      	movs	r1, #16
 8004004:	0018      	movs	r0, r3
 8004006:	f000 ff7b 	bl	8004f00 <HAL_GPIO_WritePin>
				stopMotor(htim);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	0018      	movs	r0, r3
 800400e:	f000 f841 	bl	8004094 <stopMotor>
				break;
 8004012:	e002      	b.n	800401a <HAL_TIM_OC_DelayElapsedCallback+0x11e>
	}
 8004014:	46c0      	nop			; (mov r8, r8)
 8004016:	e000      	b.n	800401a <HAL_TIM_OC_DelayElapsedCallback+0x11e>
			default: break;
 8004018:	46c0      	nop			; (mov r8, r8)
}
 800401a:	46c0      	nop			; (mov r8, r8)
 800401c:	46bd      	mov	sp, r7
 800401e:	b002      	add	sp, #8
 8004020:	bd80      	pop	{r7, pc}
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	40010800 	.word	0x40010800
 8004028:	200000cc 	.word	0x200000cc
 800402c:	200000d4 	.word	0x200000d4
 8004030:	200000d8 	.word	0x200000d8
 8004034:	20000120 	.word	0x20000120
 8004038:	2000009c 	.word	0x2000009c
 800403c:	08008aa0 	.word	0x08008aa0

08004040 <stopTimer>:
	// stop timer, but hold marker so you can track milliseconds to next second
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_1);
	timerPauseMarker = htim->Instance->CNT-1;
}

void stopTimer(TIM_HandleTypeDef *htim) {
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
	// clear everything
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_1);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2100      	movs	r1, #0
 800404c:	0018      	movs	r0, r3
 800404e:	f003 fa9f 	bl	8007590 <HAL_TIM_OC_Stop_IT>
	timerStartMarker = 0;
 8004052:	4b05      	ldr	r3, [pc, #20]	; (8004068 <stopTimer+0x28>)
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]
	timerPauseMarker = 0;
 8004058:	4b04      	ldr	r3, [pc, #16]	; (800406c <stopTimer+0x2c>)
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
}
 800405e:	46c0      	nop			; (mov r8, r8)
 8004060:	46bd      	mov	sp, r7
 8004062:	b002      	add	sp, #8
 8004064:	bd80      	pop	{r7, pc}
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	20000094 	.word	0x20000094
 800406c:	20000098 	.word	0x20000098

08004070 <runADCSampler>:
void stopTimerStopwatchBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Stop(htim);}
// ---- end of important timer functions ----

// ---- motor and other things that use timer ----
// uses LSE timer TIM22
void runADCSampler(TIM_HandleTypeDef *htim) {
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(htim);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	0018      	movs	r0, r3
 800407c:	f003 fa10 	bl	80074a0 <HAL_TIM_Base_Start_IT>
	canSampleBattery = 1;			// set flag to let ADC run at the start
 8004080:	4b03      	ldr	r3, [pc, #12]	; (8004090 <runADCSampler+0x20>)
 8004082:	2201      	movs	r2, #1
 8004084:	701a      	strb	r2, [r3, #0]
}
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	46bd      	mov	sp, r7
 800408a:	b002      	add	sp, #8
 800408c:	bd80      	pop	{r7, pc}
 800408e:	46c0      	nop			; (mov r8, r8)
 8004090:	200000ca 	.word	0x200000ca

08004094 <stopMotor>:
	HAL_TIM_OC_Start_IT(htim, TIM_CHANNEL_2);

	motorStateCounter = 0;
}

void stopMotor(TIM_HandleTypeDef *htim) {
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_2);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2104      	movs	r1, #4
 80040a0:	0018      	movs	r0, r3
 80040a2:	f003 fa75 	bl	8007590 <HAL_TIM_OC_Stop_IT>
	motorStateCounter = 0;
 80040a6:	4b03      	ldr	r3, [pc, #12]	; (80040b4 <stopMotor+0x20>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	701a      	strb	r2, [r3, #0]
}
 80040ac:	46c0      	nop			; (mov r8, r8)
 80040ae:	46bd      	mov	sp, r7
 80040b0:	b002      	add	sp, #8
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	2000009c 	.word	0x2000009c

080040b8 <setDisplayBacklight>:
void runMotorBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Start(htim);}
void stopMotorBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Stop(htim);}

// should change display brightness by changing PWM pulse width. input should be from 0-100
// uses 32MHz timer TIM3 CH1
void setDisplayBacklight(uint8_t intensity, TIM_HandleTypeDef *htim) {
 80040b8:	b5b0      	push	{r4, r5, r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	0002      	movs	r2, r0
 80040c0:	6039      	str	r1, [r7, #0]
 80040c2:	1dfb      	adds	r3, r7, #7
 80040c4:	701a      	strb	r2, [r3, #0]
	if (intensity > 100) return;		// bounds checking
 80040c6:	1dfb      	adds	r3, r7, #7
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	2b64      	cmp	r3, #100	; 0x64
 80040cc:	d83a      	bhi.n	8004144 <setDisplayBacklight+0x8c>

	TIM_OC_InitTypeDef sConfig = {0};
 80040ce:	2508      	movs	r5, #8
 80040d0:	197b      	adds	r3, r7, r5
 80040d2:	0018      	movs	r0, r3
 80040d4:	2310      	movs	r3, #16
 80040d6:	001a      	movs	r2, r3
 80040d8:	2100      	movs	r1, #0
 80040da:	f004 f8ec 	bl	80082b6 <memset>
	sConfig.OCMode = TIM_OCMODE_PWM1;
 80040de:	197b      	adds	r3, r7, r5
 80040e0:	2260      	movs	r2, #96	; 0x60
 80040e2:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040e4:	197b      	adds	r3, r7, r5
 80040e6:	2200      	movs	r2, #0
 80040e8:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 80040ea:	197b      	adds	r3, r7, r5
 80040ec:	2200      	movs	r2, #0
 80040ee:	60da      	str	r2, [r3, #12]
	sConfig.Pulse = (htim->Instance->ARR-1)*((float)intensity/100);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f6:	3b01      	subs	r3, #1
 80040f8:	0018      	movs	r0, r3
 80040fa:	f7fd f89f 	bl	800123c <__aeabi_ui2f>
 80040fe:	1c04      	adds	r4, r0, #0
 8004100:	1dfb      	adds	r3, r7, #7
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	0018      	movs	r0, r3
 8004106:	f7fd f899 	bl	800123c <__aeabi_ui2f>
 800410a:	1c03      	adds	r3, r0, #0
 800410c:	490f      	ldr	r1, [pc, #60]	; (800414c <setDisplayBacklight+0x94>)
 800410e:	1c18      	adds	r0, r3, #0
 8004110:	f7fc fb5c 	bl	80007cc <__aeabi_fdiv>
 8004114:	1c03      	adds	r3, r0, #0
 8004116:	1c19      	adds	r1, r3, #0
 8004118:	1c20      	adds	r0, r4, #0
 800411a:	f7fc fd2f 	bl	8000b7c <__aeabi_fmul>
 800411e:	1c03      	adds	r3, r0, #0
 8004120:	1c18      	adds	r0, r3, #0
 8004122:	f7fc f9a1 	bl	8000468 <__aeabi_f2uiz>
 8004126:	0002      	movs	r2, r0
 8004128:	197b      	adds	r3, r7, r5
 800412a:	605a      	str	r2, [r3, #4]

	HAL_TIM_PWM_ConfigChannel(htim, &sConfig, TIM_CHANNEL_1);
 800412c:	1979      	adds	r1, r7, r5
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	2200      	movs	r2, #0
 8004132:	0018      	movs	r0, r3
 8004134:	f003 fc0a 	bl	800794c <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	2100      	movs	r1, #0
 800413c:	0018      	movs	r0, r3
 800413e:	f003 faad 	bl	800769c <HAL_TIM_PWM_Start>
 8004142:	e000      	b.n	8004146 <setDisplayBacklight+0x8e>
	if (intensity > 100) return;		// bounds checking
 8004144:	46c0      	nop			; (mov r8, r8)
}
 8004146:	46bd      	mov	sp, r7
 8004148:	b006      	add	sp, #24
 800414a:	bdb0      	pop	{r4, r5, r7, pc}
 800414c:	42c80000 	.word	0x42c80000

08004150 <HAL_GPIO_EXTI_Callback>:
	"Nov",
	"Dec"
};

// callback for button interrupts.
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	0002      	movs	r2, r0
 8004158:	1dbb      	adds	r3, r7, #6
 800415a:	801a      	strh	r2, [r3, #0]
//	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
//	HAL_NVIC_ClearPendingIRQ(EXTI2_3_IRQn);
//	HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);

	// updates flags
	if (GPIO_Pin == BUTTON1) buttons.is1Pressed = 1;
 800415c:	1dbb      	adds	r3, r7, #6
 800415e:	881b      	ldrh	r3, [r3, #0]
 8004160:	2b02      	cmp	r3, #2
 8004162:	d102      	bne.n	800416a <HAL_GPIO_EXTI_Callback+0x1a>
 8004164:	4b0f      	ldr	r3, [pc, #60]	; (80041a4 <HAL_GPIO_EXTI_Callback+0x54>)
 8004166:	2201      	movs	r2, #1
 8004168:	701a      	strb	r2, [r3, #0]
	if (GPIO_Pin == BUTTON2) buttons.is2Pressed = 1;
 800416a:	1dbb      	adds	r3, r7, #6
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	2b04      	cmp	r3, #4
 8004170:	d102      	bne.n	8004178 <HAL_GPIO_EXTI_Callback+0x28>
 8004172:	4b0c      	ldr	r3, [pc, #48]	; (80041a4 <HAL_GPIO_EXTI_Callback+0x54>)
 8004174:	2201      	movs	r2, #1
 8004176:	705a      	strb	r2, [r3, #1]
	if (GPIO_Pin == BUTTON3) buttons.is3Pressed = 1;
 8004178:	1dbb      	adds	r3, r7, #6
 800417a:	881a      	ldrh	r2, [r3, #0]
 800417c:	2380      	movs	r3, #128	; 0x80
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	429a      	cmp	r2, r3
 8004182:	d102      	bne.n	800418a <HAL_GPIO_EXTI_Callback+0x3a>
 8004184:	4b07      	ldr	r3, [pc, #28]	; (80041a4 <HAL_GPIO_EXTI_Callback+0x54>)
 8004186:	2201      	movs	r2, #1
 8004188:	709a      	strb	r2, [r3, #2]
	if (GPIO_Pin == BUTTON4) buttons.is4Pressed = 1;
 800418a:	1dbb      	adds	r3, r7, #6
 800418c:	881a      	ldrh	r2, [r3, #0]
 800418e:	2380      	movs	r3, #128	; 0x80
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	429a      	cmp	r2, r3
 8004194:	d102      	bne.n	800419c <HAL_GPIO_EXTI_Callback+0x4c>
 8004196:	4b03      	ldr	r3, [pc, #12]	; (80041a4 <HAL_GPIO_EXTI_Callback+0x54>)
 8004198:	2201      	movs	r2, #1
 800419a:	70da      	strb	r2, [r3, #3]

	// runs timer for software debouncing delay
//	HAL_TIM_Base_Start_IT(&htim6);
}
 800419c:	46c0      	nop			; (mov r8, r8)
 800419e:	46bd      	mov	sp, r7
 80041a0:	b002      	add	sp, #8
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	20000118 	.word	0x20000118

080041a8 <initFace>:
	drawCenteredText(WIDTH/2, 84, str, hspi);
}
// ---- end of drawing functions ----

// initializes variables. should be called at the start of program
void initFace() {
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
	faceOnDisplay = faceClock;
 80041ac:	4b14      	ldr	r3, [pc, #80]	; (8004200 <initFace+0x58>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	701a      	strb	r2, [r3, #0]
	updateFace.clock = 1;
 80041b2:	4b14      	ldr	r3, [pc, #80]	; (8004204 <initFace+0x5c>)
 80041b4:	2201      	movs	r2, #1
 80041b6:	701a      	strb	r2, [r3, #0]

	// initializing pointers
	clockVars.dateToSet = (struct dates *)calloc(1, sizeof(struct dates *));
 80041b8:	2104      	movs	r1, #4
 80041ba:	2001      	movs	r0, #1
 80041bc:	f004 f83e 	bl	800823c <calloc>
 80041c0:	0003      	movs	r3, r0
 80041c2:	001a      	movs	r2, r3
 80041c4:	4b10      	ldr	r3, [pc, #64]	; (8004208 <initFace+0x60>)
 80041c6:	605a      	str	r2, [r3, #4]
	clockVars.timeToSet = (struct times *)calloc(1, sizeof(struct times *));
 80041c8:	2104      	movs	r1, #4
 80041ca:	2001      	movs	r0, #1
 80041cc:	f004 f836 	bl	800823c <calloc>
 80041d0:	0003      	movs	r3, r0
 80041d2:	001a      	movs	r2, r3
 80041d4:	4b0c      	ldr	r3, [pc, #48]	; (8004208 <initFace+0x60>)
 80041d6:	609a      	str	r2, [r3, #8]
	timerVars.timeToSet = (struct times *)calloc(1, sizeof(struct times *));
 80041d8:	2104      	movs	r1, #4
 80041da:	2001      	movs	r0, #1
 80041dc:	f004 f82e 	bl	800823c <calloc>
 80041e0:	0003      	movs	r3, r0
 80041e2:	001a      	movs	r2, r3
 80041e4:	4b09      	ldr	r3, [pc, #36]	; (800420c <initFace+0x64>)
 80041e6:	605a      	str	r2, [r3, #4]
	alarmVars.alarmToSet = (struct alarmTimes *)calloc(1, sizeof(struct alarmTimes *));
 80041e8:	2104      	movs	r1, #4
 80041ea:	2001      	movs	r0, #1
 80041ec:	f004 f826 	bl	800823c <calloc>
 80041f0:	0003      	movs	r3, r0
 80041f2:	001a      	movs	r2, r3
 80041f4:	4b06      	ldr	r3, [pc, #24]	; (8004210 <initFace+0x68>)
 80041f6:	605a      	str	r2, [r3, #4]
}
 80041f8:	46c0      	nop			; (mov r8, r8)
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	46c0      	nop			; (mov r8, r8)
 8004200:	200000bc 	.word	0x200000bc
 8004204:	200000cc 	.word	0x200000cc
 8004208:	200000a0 	.word	0x200000a0
 800420c:	200000ac 	.word	0x200000ac
 8004210:	200000b4 	.word	0x200000b4

08004214 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004214:	480d      	ldr	r0, [pc, #52]	; (800424c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004216:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8004218:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800421a:	e003      	b.n	8004224 <LoopCopyDataInit>

0800421c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800421c:	4b0c      	ldr	r3, [pc, #48]	; (8004250 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800421e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004220:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004222:	3104      	adds	r1, #4

08004224 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8004224:	480b      	ldr	r0, [pc, #44]	; (8004254 <LoopForever+0xa>)
  ldr  r3, =_edata
 8004226:	4b0c      	ldr	r3, [pc, #48]	; (8004258 <LoopForever+0xe>)
  adds  r2, r0, r1
 8004228:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800422a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800422c:	d3f6      	bcc.n	800421c <CopyDataInit>
  ldr  r2, =_sbss
 800422e:	4a0b      	ldr	r2, [pc, #44]	; (800425c <LoopForever+0x12>)
  b  LoopFillZerobss
 8004230:	e002      	b.n	8004238 <LoopFillZerobss>

08004232 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8004232:	2300      	movs	r3, #0
  str  r3, [r2]
 8004234:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004236:	3204      	adds	r2, #4

08004238 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8004238:	4b09      	ldr	r3, [pc, #36]	; (8004260 <LoopForever+0x16>)
  cmp  r2, r3
 800423a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800423c:	d3f9      	bcc.n	8004232 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800423e:	f7ff fde3 	bl	8003e08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004242:	f004 f80b 	bl	800825c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004246:	f7fe fe43 	bl	8002ed0 <main>

0800424a <LoopForever>:

LoopForever:
    b LoopForever
 800424a:	e7fe      	b.n	800424a <LoopForever>
   ldr   r0, =_estack
 800424c:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8004250:	08008ac4 	.word	0x08008ac4
  ldr  r0, =_sdata
 8004254:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004258:	2000006c 	.word	0x2000006c
  ldr  r2, =_sbss
 800425c:	2000006c 	.word	0x2000006c
  ldr  r3, = _ebss
 8004260:	20000568 	.word	0x20000568

08004264 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004264:	e7fe      	b.n	8004264 <DMA1_Channel1_IRQHandler>
	...

08004268 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800426e:	1dfb      	adds	r3, r7, #7
 8004270:	2200      	movs	r2, #0
 8004272:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004274:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <HAL_Init+0x3c>)
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	4b0a      	ldr	r3, [pc, #40]	; (80042a4 <HAL_Init+0x3c>)
 800427a:	2140      	movs	r1, #64	; 0x40
 800427c:	430a      	orrs	r2, r1
 800427e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004280:	2000      	movs	r0, #0
 8004282:	f000 f811 	bl	80042a8 <HAL_InitTick>
 8004286:	1e03      	subs	r3, r0, #0
 8004288:	d003      	beq.n	8004292 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800428a:	1dfb      	adds	r3, r7, #7
 800428c:	2201      	movs	r2, #1
 800428e:	701a      	strb	r2, [r3, #0]
 8004290:	e001      	b.n	8004296 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004292:	f7ff fb87 	bl	80039a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004296:	1dfb      	adds	r3, r7, #7
 8004298:	781b      	ldrb	r3, [r3, #0]
}
 800429a:	0018      	movs	r0, r3
 800429c:	46bd      	mov	sp, r7
 800429e:	b002      	add	sp, #8
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	46c0      	nop			; (mov r8, r8)
 80042a4:	40022000 	.word	0x40022000

080042a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80042b0:	230f      	movs	r3, #15
 80042b2:	18fb      	adds	r3, r7, r3
 80042b4:	2200      	movs	r2, #0
 80042b6:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80042b8:	4b0f      	ldr	r3, [pc, #60]	; (80042f8 <HAL_InitTick+0x50>)
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	23fa      	movs	r3, #250	; 0xfa
 80042be:	0099      	lsls	r1, r3, #2
 80042c0:	0010      	movs	r0, r2
 80042c2:	f7fb ff21 	bl	8000108 <__udivsi3>
 80042c6:	0003      	movs	r3, r0
 80042c8:	0018      	movs	r0, r3
 80042ca:	f000 fc36 	bl	8004b3a <HAL_SYSTICK_Config>
 80042ce:	1e03      	subs	r3, r0, #0
 80042d0:	d004      	beq.n	80042dc <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 80042d2:	230f      	movs	r3, #15
 80042d4:	18fb      	adds	r3, r7, r3
 80042d6:	2201      	movs	r2, #1
 80042d8:	701a      	strb	r2, [r3, #0]
 80042da:	e006      	b.n	80042ea <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80042dc:	6879      	ldr	r1, [r7, #4]
 80042de:	2301      	movs	r3, #1
 80042e0:	425b      	negs	r3, r3
 80042e2:	2200      	movs	r2, #0
 80042e4:	0018      	movs	r0, r3
 80042e6:	f000 fc03 	bl	8004af0 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80042ea:	230f      	movs	r3, #15
 80042ec:	18fb      	adds	r3, r7, r3
 80042ee:	781b      	ldrb	r3, [r3, #0]
}
 80042f0:	0018      	movs	r0, r3
 80042f2:	46bd      	mov	sp, r7
 80042f4:	b004      	add	sp, #16
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	20000004 	.word	0x20000004

080042fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  uwTick++;
 8004300:	4b03      	ldr	r3, [pc, #12]	; (8004310 <HAL_IncTick+0x14>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	4b02      	ldr	r3, [pc, #8]	; (8004310 <HAL_IncTick+0x14>)
 8004308:	601a      	str	r2, [r3, #0]
}
 800430a:	46c0      	nop			; (mov r8, r8)
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	20000560 	.word	0x20000560

08004314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
  return uwTick;
 8004318:	4b02      	ldr	r3, [pc, #8]	; (8004324 <HAL_GetTick+0x10>)
 800431a:	681b      	ldr	r3, [r3, #0]
}
 800431c:	0018      	movs	r0, r3
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	46c0      	nop			; (mov r8, r8)
 8004324:	20000560 	.word	0x20000560

08004328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004330:	f7ff fff0 	bl	8004314 <HAL_GetTick>
 8004334:	0003      	movs	r3, r0
 8004336:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	3301      	adds	r3, #1
 8004340:	d002      	beq.n	8004348 <HAL_Delay+0x20>
  {
    wait++;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	3301      	adds	r3, #1
 8004346:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004348:	46c0      	nop			; (mov r8, r8)
 800434a:	f7ff ffe3 	bl	8004314 <HAL_GetTick>
 800434e:	0002      	movs	r2, r0
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	429a      	cmp	r2, r3
 8004358:	d8f7      	bhi.n	800434a <HAL_Delay+0x22>
  {
  }
}
 800435a:	46c0      	nop			; (mov r8, r8)
 800435c:	46bd      	mov	sp, r7
 800435e:	b004      	add	sp, #16
 8004360:	bd80      	pop	{r7, pc}
	...

08004364 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e159      	b.n	800462a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10a      	bne.n	8004394 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2250      	movs	r2, #80	; 0x50
 8004388:	2100      	movs	r1, #0
 800438a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	0018      	movs	r0, r3
 8004390:	f7ff fb1c 	bl	80039cc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004398:	2210      	movs	r2, #16
 800439a:	4013      	ands	r3, r2
 800439c:	2b10      	cmp	r3, #16
 800439e:	d005      	beq.n	80043ac <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	2204      	movs	r2, #4
 80043a8:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80043aa:	d00b      	beq.n	80043c4 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b0:	2210      	movs	r2, #16
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2250      	movs	r2, #80	; 0x50
 80043bc:	2100      	movs	r1, #0
 80043be:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e132      	b.n	800462a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c8:	4a9a      	ldr	r2, [pc, #616]	; (8004634 <HAL_ADC_Init+0x2d0>)
 80043ca:	4013      	ands	r3, r2
 80043cc:	2202      	movs	r2, #2
 80043ce:	431a      	orrs	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	2203      	movs	r2, #3
 80043dc:	4013      	ands	r3, r2
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d108      	bne.n	80043f4 <HAL_ADC_Init+0x90>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2201      	movs	r2, #1
 80043ea:	4013      	ands	r3, r2
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d101      	bne.n	80043f4 <HAL_ADC_Init+0x90>
 80043f0:	2301      	movs	r3, #1
 80043f2:	e000      	b.n	80043f6 <HAL_ADC_Init+0x92>
 80043f4:	2300      	movs	r3, #0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d149      	bne.n	800448e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	23c0      	movs	r3, #192	; 0xc0
 8004400:	061b      	lsls	r3, r3, #24
 8004402:	429a      	cmp	r2, r3
 8004404:	d00b      	beq.n	800441e <HAL_ADC_Init+0xba>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	2380      	movs	r3, #128	; 0x80
 800440c:	05db      	lsls	r3, r3, #23
 800440e:	429a      	cmp	r2, r3
 8004410:	d005      	beq.n	800441e <HAL_ADC_Init+0xba>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	2380      	movs	r3, #128	; 0x80
 8004418:	061b      	lsls	r3, r3, #24
 800441a:	429a      	cmp	r2, r3
 800441c:	d111      	bne.n	8004442 <HAL_ADC_Init+0xde>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	691a      	ldr	r2, [r3, #16]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	0092      	lsls	r2, r2, #2
 800442a:	0892      	lsrs	r2, r2, #2
 800442c:	611a      	str	r2, [r3, #16]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6919      	ldr	r1, [r3, #16]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	430a      	orrs	r2, r1
 800443e:	611a      	str	r2, [r3, #16]
 8004440:	e014      	b.n	800446c <HAL_ADC_Init+0x108>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	691a      	ldr	r2, [r3, #16]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	0092      	lsls	r2, r2, #2
 800444e:	0892      	lsrs	r2, r2, #2
 8004450:	611a      	str	r2, [r3, #16]
 8004452:	4b79      	ldr	r3, [pc, #484]	; (8004638 <HAL_ADC_Init+0x2d4>)
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	4b78      	ldr	r3, [pc, #480]	; (8004638 <HAL_ADC_Init+0x2d4>)
 8004458:	4978      	ldr	r1, [pc, #480]	; (800463c <HAL_ADC_Init+0x2d8>)
 800445a:	400a      	ands	r2, r1
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	4b76      	ldr	r3, [pc, #472]	; (8004638 <HAL_ADC_Init+0x2d4>)
 8004460:	6819      	ldr	r1, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	4b74      	ldr	r3, [pc, #464]	; (8004638 <HAL_ADC_Init+0x2d4>)
 8004468:	430a      	orrs	r2, r1
 800446a:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2118      	movs	r1, #24
 8004478:	438a      	bics	r2, r1
 800447a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68d9      	ldr	r1, [r3, #12]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	430a      	orrs	r2, r1
 800448c:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800448e:	4b6a      	ldr	r3, [pc, #424]	; (8004638 <HAL_ADC_Init+0x2d4>)
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	4b69      	ldr	r3, [pc, #420]	; (8004638 <HAL_ADC_Init+0x2d4>)
 8004494:	496a      	ldr	r1, [pc, #424]	; (8004640 <HAL_ADC_Init+0x2dc>)
 8004496:	400a      	ands	r2, r1
 8004498:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800449a:	4b67      	ldr	r3, [pc, #412]	; (8004638 <HAL_ADC_Init+0x2d4>)
 800449c:	6819      	ldr	r1, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a2:	065a      	lsls	r2, r3, #25
 80044a4:	4b64      	ldr	r3, [pc, #400]	; (8004638 <HAL_ADC_Init+0x2d4>)
 80044a6:	430a      	orrs	r2, r1
 80044a8:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	2380      	movs	r3, #128	; 0x80
 80044b2:	055b      	lsls	r3, r3, #21
 80044b4:	4013      	ands	r3, r2
 80044b6:	d108      	bne.n	80044ca <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689a      	ldr	r2, [r3, #8]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2180      	movs	r1, #128	; 0x80
 80044c4:	0549      	lsls	r1, r1, #21
 80044c6:	430a      	orrs	r2, r1
 80044c8:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68da      	ldr	r2, [r3, #12]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	495b      	ldr	r1, [pc, #364]	; (8004644 <HAL_ADC_Init+0x2e0>)
 80044d6:	400a      	ands	r2, r1
 80044d8:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68d9      	ldr	r1, [r3, #12]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d101      	bne.n	80044f0 <HAL_ADC_Init+0x18c>
 80044ec:	2304      	movs	r3, #4
 80044ee:	e000      	b.n	80044f2 <HAL_ADC_Init+0x18e>
 80044f0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80044f2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2020      	movs	r0, #32
 80044f8:	5c1b      	ldrb	r3, [r3, r0]
 80044fa:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80044fc:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	202c      	movs	r0, #44	; 0x2c
 8004502:	5c1b      	ldrb	r3, [r3, r0]
 8004504:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004506:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800450c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8004514:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800451c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800452a:	23c2      	movs	r3, #194	; 0xc2
 800452c:	33ff      	adds	r3, #255	; 0xff
 800452e:	429a      	cmp	r2, r3
 8004530:	d00b      	beq.n	800454a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68d9      	ldr	r1, [r3, #12]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004540:	431a      	orrs	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2221      	movs	r2, #33	; 0x21
 800454e:	5c9b      	ldrb	r3, [r3, r2]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d11a      	bne.n	800458a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2220      	movs	r2, #32
 8004558:	5c9b      	ldrb	r3, [r3, r2]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d109      	bne.n	8004572 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68da      	ldr	r2, [r3, #12]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2180      	movs	r1, #128	; 0x80
 800456a:	0249      	lsls	r1, r1, #9
 800456c:	430a      	orrs	r2, r1
 800456e:	60da      	str	r2, [r3, #12]
 8004570:	e00b      	b.n	800458a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004576:	2220      	movs	r2, #32
 8004578:	431a      	orrs	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004582:	2201      	movs	r2, #1
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458e:	2b01      	cmp	r3, #1
 8004590:	d11f      	bne.n	80045d2 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	691a      	ldr	r2, [r3, #16]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	492a      	ldr	r1, [pc, #168]	; (8004648 <HAL_ADC_Init+0x2e4>)
 800459e:	400a      	ands	r2, r1
 80045a0:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6919      	ldr	r1, [r3, #16]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80045b0:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80045b6:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	691a      	ldr	r2, [r3, #16]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2101      	movs	r1, #1
 80045cc:	430a      	orrs	r2, r1
 80045ce:	611a      	str	r2, [r3, #16]
 80045d0:	e00e      	b.n	80045f0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	2201      	movs	r2, #1
 80045da:	4013      	ands	r3, r2
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d107      	bne.n	80045f0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	691a      	ldr	r2, [r3, #16]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2101      	movs	r1, #1
 80045ec:	438a      	bics	r2, r1
 80045ee:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695a      	ldr	r2, [r3, #20]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2107      	movs	r1, #7
 80045fc:	438a      	bics	r2, r1
 80045fe:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6959      	ldr	r1, [r3, #20]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461c:	2203      	movs	r2, #3
 800461e:	4393      	bics	r3, r2
 8004620:	2201      	movs	r2, #1
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	0018      	movs	r0, r3
 800462c:	46bd      	mov	sp, r7
 800462e:	b002      	add	sp, #8
 8004630:	bd80      	pop	{r7, pc}
 8004632:	46c0      	nop			; (mov r8, r8)
 8004634:	fffffefd 	.word	0xfffffefd
 8004638:	40012708 	.word	0x40012708
 800463c:	ffc3ffff 	.word	0xffc3ffff
 8004640:	fdffffff 	.word	0xfdffffff
 8004644:	fffe0219 	.word	0xfffe0219
 8004648:	fffffc03 	.word	0xfffffc03

0800464c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2204      	movs	r2, #4
 800465c:	4013      	ands	r3, r2
 800465e:	2b04      	cmp	r3, #4
 8004660:	d106      	bne.n	8004670 <HAL_ADC_IRQHandler+0x24>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	2204      	movs	r2, #4
 800466a:	4013      	ands	r3, r2
 800466c:	2b04      	cmp	r3, #4
 800466e:	d00d      	beq.n	800468c <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2208      	movs	r2, #8
 8004678:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800467a:	2b08      	cmp	r3, #8
 800467c:	d154      	bne.n	8004728 <HAL_ADC_IRQHandler+0xdc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2208      	movs	r2, #8
 8004686:	4013      	ands	r3, r2
 8004688:	2b08      	cmp	r3, #8
 800468a:	d14d      	bne.n	8004728 <HAL_ADC_IRQHandler+0xdc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004690:	2210      	movs	r2, #16
 8004692:	4013      	ands	r3, r2
 8004694:	d106      	bne.n	80046a4 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469a:	2280      	movs	r2, #128	; 0x80
 800469c:	0092      	lsls	r2, r2, #2
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	23c0      	movs	r3, #192	; 0xc0
 80046ac:	011b      	lsls	r3, r3, #4
 80046ae:	4013      	ands	r3, r2
 80046b0:	d12e      	bne.n	8004710 <HAL_ADC_IRQHandler+0xc4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2220      	movs	r2, #32
 80046b6:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d129      	bne.n	8004710 <HAL_ADC_IRQHandler+0xc4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2208      	movs	r2, #8
 80046c4:	4013      	ands	r3, r2
 80046c6:	2b08      	cmp	r3, #8
 80046c8:	d122      	bne.n	8004710 <HAL_ADC_IRQHandler+0xc4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	2204      	movs	r2, #4
 80046d2:	4013      	ands	r3, r2
 80046d4:	d110      	bne.n	80046f8 <HAL_ADC_IRQHandler+0xac>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	210c      	movs	r1, #12
 80046e2:	438a      	bics	r2, r1
 80046e4:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ea:	4a35      	ldr	r2, [pc, #212]	; (80047c0 <HAL_ADC_IRQHandler+0x174>)
 80046ec:	4013      	ands	r3, r2
 80046ee:	2201      	movs	r2, #1
 80046f0:	431a      	orrs	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	655a      	str	r2, [r3, #84]	; 0x54
 80046f6:	e00b      	b.n	8004710 <HAL_ADC_IRQHandler+0xc4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046fc:	2220      	movs	r2, #32
 80046fe:	431a      	orrs	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004708:	2201      	movs	r2, #1
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	0018      	movs	r0, r3
 8004714:	f000 f856 	bl	80047c4 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d003      	beq.n	8004728 <HAL_ADC_IRQHandler+0xdc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	220c      	movs	r2, #12
 8004726:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2280      	movs	r2, #128	; 0x80
 8004730:	4013      	ands	r3, r2
 8004732:	2b80      	cmp	r3, #128	; 0x80
 8004734:	d115      	bne.n	8004762 <HAL_ADC_IRQHandler+0x116>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	2280      	movs	r2, #128	; 0x80
 800473e:	4013      	ands	r3, r2
 8004740:	2b80      	cmp	r3, #128	; 0x80
 8004742:	d10e      	bne.n	8004762 <HAL_ADC_IRQHandler+0x116>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004748:	2280      	movs	r2, #128	; 0x80
 800474a:	0252      	lsls	r2, r2, #9
 800474c:	431a      	orrs	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	655a      	str	r2, [r3, #84]	; 0x54
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	0018      	movs	r0, r3
 8004756:	f000 f83d 	bl	80047d4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2280      	movs	r2, #128	; 0x80
 8004760:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2210      	movs	r2, #16
 800476a:	4013      	ands	r3, r2
 800476c:	2b10      	cmp	r3, #16
 800476e:	d123      	bne.n	80047b8 <HAL_ADC_IRQHandler+0x16c>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	2210      	movs	r2, #16
 8004778:	4013      	ands	r3, r2
 800477a:	2b10      	cmp	r3, #16
 800477c:	d11c      	bne.n	80047b8 <HAL_ADC_IRQHandler+0x16c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004782:	2b00      	cmp	r3, #0
 8004784:	d006      	beq.n	8004794 <HAL_ADC_IRQHandler+0x148>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	2201      	movs	r2, #1
 800478e:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8004790:	2b01      	cmp	r3, #1
 8004792:	d10d      	bne.n	80047b0 <HAL_ADC_IRQHandler+0x164>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004798:	2202      	movs	r2, #2
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2210      	movs	r2, #16
 80047a6:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	0018      	movs	r0, r3
 80047ac:	f000 f81a 	bl	80047e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2210      	movs	r2, #16
 80047b6:	601a      	str	r2, [r3, #0]
  }
  
}
 80047b8:	46c0      	nop			; (mov r8, r8)
 80047ba:	46bd      	mov	sp, r7
 80047bc:	b002      	add	sp, #8
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	fffffefe 	.word	0xfffffefe

080047c4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80047cc:	46c0      	nop			; (mov r8, r8)
 80047ce:	46bd      	mov	sp, r7
 80047d0:	b002      	add	sp, #8
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80047dc:	46c0      	nop			; (mov r8, r8)
 80047de:	46bd      	mov	sp, r7
 80047e0:	b002      	add	sp, #8
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80047ec:	46c0      	nop			; (mov r8, r8)
 80047ee:	46bd      	mov	sp, r7
 80047f0:	b002      	add	sp, #8
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2250      	movs	r2, #80	; 0x50
 8004802:	5c9b      	ldrb	r3, [r3, r2]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d101      	bne.n	800480c <HAL_ADC_ConfigChannel+0x18>
 8004808:	2302      	movs	r3, #2
 800480a:	e085      	b.n	8004918 <HAL_ADC_ConfigChannel+0x124>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2250      	movs	r2, #80	; 0x50
 8004810:	2101      	movs	r1, #1
 8004812:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	2204      	movs	r2, #4
 800481c:	4013      	ands	r3, r2
 800481e:	d00b      	beq.n	8004838 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004824:	2220      	movs	r2, #32
 8004826:	431a      	orrs	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2250      	movs	r2, #80	; 0x50
 8004830:	2100      	movs	r1, #0
 8004832:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e06f      	b.n	8004918 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	4a38      	ldr	r2, [pc, #224]	; (8004920 <HAL_ADC_ConfigChannel+0x12c>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d035      	beq.n	80048ae <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	035b      	lsls	r3, r3, #13
 800484e:	0b5a      	lsrs	r2, r3, #13
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	430a      	orrs	r2, r1
 8004856:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	2380      	movs	r3, #128	; 0x80
 800485e:	02db      	lsls	r3, r3, #11
 8004860:	4013      	ands	r3, r2
 8004862:	d009      	beq.n	8004878 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8004864:	4b2f      	ldr	r3, [pc, #188]	; (8004924 <HAL_ADC_ConfigChannel+0x130>)
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	4b2e      	ldr	r3, [pc, #184]	; (8004924 <HAL_ADC_ConfigChannel+0x130>)
 800486a:	2180      	movs	r1, #128	; 0x80
 800486c:	0409      	lsls	r1, r1, #16
 800486e:	430a      	orrs	r2, r1
 8004870:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8004872:	200a      	movs	r0, #10
 8004874:	f000 f85e 	bl	8004934 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	2380      	movs	r3, #128	; 0x80
 800487e:	029b      	lsls	r3, r3, #10
 8004880:	4013      	ands	r3, r2
 8004882:	d006      	beq.n	8004892 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8004884:	4b27      	ldr	r3, [pc, #156]	; (8004924 <HAL_ADC_ConfigChannel+0x130>)
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	4b26      	ldr	r3, [pc, #152]	; (8004924 <HAL_ADC_ConfigChannel+0x130>)
 800488a:	2180      	movs	r1, #128	; 0x80
 800488c:	03c9      	lsls	r1, r1, #15
 800488e:	430a      	orrs	r2, r1
 8004890:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	2380      	movs	r3, #128	; 0x80
 8004898:	025b      	lsls	r3, r3, #9
 800489a:	4013      	ands	r3, r2
 800489c:	d037      	beq.n	800490e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 800489e:	4b21      	ldr	r3, [pc, #132]	; (8004924 <HAL_ADC_ConfigChannel+0x130>)
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	4b20      	ldr	r3, [pc, #128]	; (8004924 <HAL_ADC_ConfigChannel+0x130>)
 80048a4:	2180      	movs	r1, #128	; 0x80
 80048a6:	0449      	lsls	r1, r1, #17
 80048a8:	430a      	orrs	r2, r1
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	e02f      	b.n	800490e <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	035b      	lsls	r3, r3, #13
 80048ba:	0b5b      	lsrs	r3, r3, #13
 80048bc:	43d9      	mvns	r1, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	400a      	ands	r2, r1
 80048c4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	2380      	movs	r3, #128	; 0x80
 80048cc:	02db      	lsls	r3, r3, #11
 80048ce:	4013      	ands	r3, r2
 80048d0:	d005      	beq.n	80048de <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80048d2:	4b14      	ldr	r3, [pc, #80]	; (8004924 <HAL_ADC_ConfigChannel+0x130>)
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	4b13      	ldr	r3, [pc, #76]	; (8004924 <HAL_ADC_ConfigChannel+0x130>)
 80048d8:	4913      	ldr	r1, [pc, #76]	; (8004928 <HAL_ADC_ConfigChannel+0x134>)
 80048da:	400a      	ands	r2, r1
 80048dc:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	2380      	movs	r3, #128	; 0x80
 80048e4:	029b      	lsls	r3, r3, #10
 80048e6:	4013      	ands	r3, r2
 80048e8:	d005      	beq.n	80048f6 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80048ea:	4b0e      	ldr	r3, [pc, #56]	; (8004924 <HAL_ADC_ConfigChannel+0x130>)
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	4b0d      	ldr	r3, [pc, #52]	; (8004924 <HAL_ADC_ConfigChannel+0x130>)
 80048f0:	490e      	ldr	r1, [pc, #56]	; (800492c <HAL_ADC_ConfigChannel+0x138>)
 80048f2:	400a      	ands	r2, r1
 80048f4:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	2380      	movs	r3, #128	; 0x80
 80048fc:	025b      	lsls	r3, r3, #9
 80048fe:	4013      	ands	r3, r2
 8004900:	d005      	beq.n	800490e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8004902:	4b08      	ldr	r3, [pc, #32]	; (8004924 <HAL_ADC_ConfigChannel+0x130>)
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	4b07      	ldr	r3, [pc, #28]	; (8004924 <HAL_ADC_ConfigChannel+0x130>)
 8004908:	4909      	ldr	r1, [pc, #36]	; (8004930 <HAL_ADC_ConfigChannel+0x13c>)
 800490a:	400a      	ands	r2, r1
 800490c:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2250      	movs	r2, #80	; 0x50
 8004912:	2100      	movs	r1, #0
 8004914:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	0018      	movs	r0, r3
 800491a:	46bd      	mov	sp, r7
 800491c:	b002      	add	sp, #8
 800491e:	bd80      	pop	{r7, pc}
 8004920:	00001001 	.word	0x00001001
 8004924:	40012708 	.word	0x40012708
 8004928:	ff7fffff 	.word	0xff7fffff
 800492c:	ffbfffff 	.word	0xffbfffff
 8004930:	feffffff 	.word	0xfeffffff

08004934 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800493c:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <ADC_DelayMicroSecond+0x34>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	490a      	ldr	r1, [pc, #40]	; (800496c <ADC_DelayMicroSecond+0x38>)
 8004942:	0018      	movs	r0, r3
 8004944:	f7fb fbe0 	bl	8000108 <__udivsi3>
 8004948:	0003      	movs	r3, r0
 800494a:	001a      	movs	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4353      	muls	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8004952:	e002      	b.n	800495a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	3b01      	subs	r3, #1
 8004958:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1f9      	bne.n	8004954 <ADC_DelayMicroSecond+0x20>
  } 
}
 8004960:	46c0      	nop			; (mov r8, r8)
 8004962:	46bd      	mov	sp, r7
 8004964:	b004      	add	sp, #16
 8004966:	bd80      	pop	{r7, pc}
 8004968:	20000004 	.word	0x20000004
 800496c:	000f4240 	.word	0x000f4240

08004970 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	0002      	movs	r2, r0
 8004978:	1dfb      	adds	r3, r7, #7
 800497a:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800497c:	1dfb      	adds	r3, r7, #7
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	001a      	movs	r2, r3
 8004982:	231f      	movs	r3, #31
 8004984:	401a      	ands	r2, r3
 8004986:	4b04      	ldr	r3, [pc, #16]	; (8004998 <NVIC_EnableIRQ+0x28>)
 8004988:	2101      	movs	r1, #1
 800498a:	4091      	lsls	r1, r2
 800498c:	000a      	movs	r2, r1
 800498e:	601a      	str	r2, [r3, #0]
}
 8004990:	46c0      	nop			; (mov r8, r8)
 8004992:	46bd      	mov	sp, r7
 8004994:	b002      	add	sp, #8
 8004996:	bd80      	pop	{r7, pc}
 8004998:	e000e100 	.word	0xe000e100

0800499c <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	0002      	movs	r2, r0
 80049a4:	1dfb      	adds	r3, r7, #7
 80049a6:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80049a8:	1dfb      	adds	r3, r7, #7
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	001a      	movs	r2, r3
 80049ae:	231f      	movs	r3, #31
 80049b0:	4013      	ands	r3, r2
 80049b2:	4905      	ldr	r1, [pc, #20]	; (80049c8 <NVIC_ClearPendingIRQ+0x2c>)
 80049b4:	2201      	movs	r2, #1
 80049b6:	409a      	lsls	r2, r3
 80049b8:	23c0      	movs	r3, #192	; 0xc0
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	50ca      	str	r2, [r1, r3]
}
 80049be:	46c0      	nop			; (mov r8, r8)
 80049c0:	46bd      	mov	sp, r7
 80049c2:	b002      	add	sp, #8
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	46c0      	nop			; (mov r8, r8)
 80049c8:	e000e100 	.word	0xe000e100

080049cc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049cc:	b590      	push	{r4, r7, lr}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	0002      	movs	r2, r0
 80049d4:	6039      	str	r1, [r7, #0]
 80049d6:	1dfb      	adds	r3, r7, #7
 80049d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80049da:	1dfb      	adds	r3, r7, #7
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	2b7f      	cmp	r3, #127	; 0x7f
 80049e0:	d932      	bls.n	8004a48 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049e2:	4a2f      	ldr	r2, [pc, #188]	; (8004aa0 <NVIC_SetPriority+0xd4>)
 80049e4:	1dfb      	adds	r3, r7, #7
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	0019      	movs	r1, r3
 80049ea:	230f      	movs	r3, #15
 80049ec:	400b      	ands	r3, r1
 80049ee:	3b08      	subs	r3, #8
 80049f0:	089b      	lsrs	r3, r3, #2
 80049f2:	3306      	adds	r3, #6
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	18d3      	adds	r3, r2, r3
 80049f8:	3304      	adds	r3, #4
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	1dfa      	adds	r2, r7, #7
 80049fe:	7812      	ldrb	r2, [r2, #0]
 8004a00:	0011      	movs	r1, r2
 8004a02:	2203      	movs	r2, #3
 8004a04:	400a      	ands	r2, r1
 8004a06:	00d2      	lsls	r2, r2, #3
 8004a08:	21ff      	movs	r1, #255	; 0xff
 8004a0a:	4091      	lsls	r1, r2
 8004a0c:	000a      	movs	r2, r1
 8004a0e:	43d2      	mvns	r2, r2
 8004a10:	401a      	ands	r2, r3
 8004a12:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	019b      	lsls	r3, r3, #6
 8004a18:	22ff      	movs	r2, #255	; 0xff
 8004a1a:	401a      	ands	r2, r3
 8004a1c:	1dfb      	adds	r3, r7, #7
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	0018      	movs	r0, r3
 8004a22:	2303      	movs	r3, #3
 8004a24:	4003      	ands	r3, r0
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a2a:	481d      	ldr	r0, [pc, #116]	; (8004aa0 <NVIC_SetPriority+0xd4>)
 8004a2c:	1dfb      	adds	r3, r7, #7
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	001c      	movs	r4, r3
 8004a32:	230f      	movs	r3, #15
 8004a34:	4023      	ands	r3, r4
 8004a36:	3b08      	subs	r3, #8
 8004a38:	089b      	lsrs	r3, r3, #2
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	3306      	adds	r3, #6
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	18c3      	adds	r3, r0, r3
 8004a42:	3304      	adds	r3, #4
 8004a44:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004a46:	e027      	b.n	8004a98 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a48:	4a16      	ldr	r2, [pc, #88]	; (8004aa4 <NVIC_SetPriority+0xd8>)
 8004a4a:	1dfb      	adds	r3, r7, #7
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	b25b      	sxtb	r3, r3
 8004a50:	089b      	lsrs	r3, r3, #2
 8004a52:	33c0      	adds	r3, #192	; 0xc0
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	589b      	ldr	r3, [r3, r2]
 8004a58:	1dfa      	adds	r2, r7, #7
 8004a5a:	7812      	ldrb	r2, [r2, #0]
 8004a5c:	0011      	movs	r1, r2
 8004a5e:	2203      	movs	r2, #3
 8004a60:	400a      	ands	r2, r1
 8004a62:	00d2      	lsls	r2, r2, #3
 8004a64:	21ff      	movs	r1, #255	; 0xff
 8004a66:	4091      	lsls	r1, r2
 8004a68:	000a      	movs	r2, r1
 8004a6a:	43d2      	mvns	r2, r2
 8004a6c:	401a      	ands	r2, r3
 8004a6e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	019b      	lsls	r3, r3, #6
 8004a74:	22ff      	movs	r2, #255	; 0xff
 8004a76:	401a      	ands	r2, r3
 8004a78:	1dfb      	adds	r3, r7, #7
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	2303      	movs	r3, #3
 8004a80:	4003      	ands	r3, r0
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a86:	4807      	ldr	r0, [pc, #28]	; (8004aa4 <NVIC_SetPriority+0xd8>)
 8004a88:	1dfb      	adds	r3, r7, #7
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	b25b      	sxtb	r3, r3
 8004a8e:	089b      	lsrs	r3, r3, #2
 8004a90:	430a      	orrs	r2, r1
 8004a92:	33c0      	adds	r3, #192	; 0xc0
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	501a      	str	r2, [r3, r0]
}
 8004a98:	46c0      	nop			; (mov r8, r8)
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	b003      	add	sp, #12
 8004a9e:	bd90      	pop	{r4, r7, pc}
 8004aa0:	e000ed00 	.word	0xe000ed00
 8004aa4:	e000e100 	.word	0xe000e100

08004aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	4a0c      	ldr	r2, [pc, #48]	; (8004ae8 <SysTick_Config+0x40>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d901      	bls.n	8004abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004aba:	2301      	movs	r3, #1
 8004abc:	e010      	b.n	8004ae0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004abe:	4b0b      	ldr	r3, [pc, #44]	; (8004aec <SysTick_Config+0x44>)
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	3a01      	subs	r2, #1
 8004ac4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	425b      	negs	r3, r3
 8004aca:	2103      	movs	r1, #3
 8004acc:	0018      	movs	r0, r3
 8004ace:	f7ff ff7d 	bl	80049cc <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ad2:	4b06      	ldr	r3, [pc, #24]	; (8004aec <SysTick_Config+0x44>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ad8:	4b04      	ldr	r3, [pc, #16]	; (8004aec <SysTick_Config+0x44>)
 8004ada:	2207      	movs	r2, #7
 8004adc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	b002      	add	sp, #8
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	00ffffff 	.word	0x00ffffff
 8004aec:	e000e010 	.word	0xe000e010

08004af0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60b9      	str	r1, [r7, #8]
 8004af8:	607a      	str	r2, [r7, #4]
 8004afa:	210f      	movs	r1, #15
 8004afc:	187b      	adds	r3, r7, r1
 8004afe:	1c02      	adds	r2, r0, #0
 8004b00:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	187b      	adds	r3, r7, r1
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	b25b      	sxtb	r3, r3
 8004b0a:	0011      	movs	r1, r2
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	f7ff ff5d 	bl	80049cc <NVIC_SetPriority>
}
 8004b12:	46c0      	nop			; (mov r8, r8)
 8004b14:	46bd      	mov	sp, r7
 8004b16:	b004      	add	sp, #16
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b082      	sub	sp, #8
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	0002      	movs	r2, r0
 8004b22:	1dfb      	adds	r3, r7, #7
 8004b24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b26:	1dfb      	adds	r3, r7, #7
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	b25b      	sxtb	r3, r3
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	f7ff ff1f 	bl	8004970 <NVIC_EnableIRQ>
}
 8004b32:	46c0      	nop			; (mov r8, r8)
 8004b34:	46bd      	mov	sp, r7
 8004b36:	b002      	add	sp, #8
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b082      	sub	sp, #8
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	0018      	movs	r0, r3
 8004b46:	f7ff ffaf 	bl	8004aa8 <SysTick_Config>
 8004b4a:	0003      	movs	r3, r0
}
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	b002      	add	sp, #8
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	0002      	movs	r2, r0
 8004b5c:	1dfb      	adds	r3, r7, #7
 8004b5e:	701a      	strb	r2, [r3, #0]
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004b60:	1dfb      	adds	r3, r7, #7
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	b25b      	sxtb	r3, r3
 8004b66:	0018      	movs	r0, r3
 8004b68:	f7ff ff18 	bl	800499c <NVIC_ClearPendingIRQ>
}
 8004b6c:	46c0      	nop			; (mov r8, r8)
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	b002      	add	sp, #8
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b7c:	230f      	movs	r3, #15
 8004b7e:	18fb      	adds	r3, r7, r3
 8004b80:	2200      	movs	r2, #0
 8004b82:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2225      	movs	r2, #37	; 0x25
 8004b88:	5c9b      	ldrb	r3, [r3, r2]
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d007      	beq.n	8004ba0 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2204      	movs	r2, #4
 8004b94:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004b96:	230f      	movs	r3, #15
 8004b98:	18fb      	adds	r3, r7, r3
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	701a      	strb	r2, [r3, #0]
 8004b9e:	e02a      	b.n	8004bf6 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	210e      	movs	r1, #14
 8004bac:	438a      	bics	r2, r1
 8004bae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2101      	movs	r1, #1
 8004bbc:	438a      	bics	r2, r1
 8004bbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc4:	221c      	movs	r2, #28
 8004bc6:	401a      	ands	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bcc:	2101      	movs	r1, #1
 8004bce:	4091      	lsls	r1, r2
 8004bd0:	000a      	movs	r2, r1
 8004bd2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2225      	movs	r2, #37	; 0x25
 8004bd8:	2101      	movs	r1, #1
 8004bda:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2224      	movs	r2, #36	; 0x24
 8004be0:	2100      	movs	r1, #0
 8004be2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d004      	beq.n	8004bf6 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	0010      	movs	r0, r2
 8004bf4:	4798      	blx	r3
    }
  }
  return status;
 8004bf6:	230f      	movs	r3, #15
 8004bf8:	18fb      	adds	r3, r7, r3
 8004bfa:	781b      	ldrb	r3, [r3, #0]
}
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	b004      	add	sp, #16
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004c16:	2300      	movs	r3, #0
 8004c18:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004c1a:	e155      	b.n	8004ec8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2101      	movs	r1, #1
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	4091      	lsls	r1, r2
 8004c26:	000a      	movs	r2, r1
 8004c28:	4013      	ands	r3, r2
 8004c2a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d100      	bne.n	8004c34 <HAL_GPIO_Init+0x30>
 8004c32:	e146      	b.n	8004ec2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d003      	beq.n	8004c44 <HAL_GPIO_Init+0x40>
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	2b12      	cmp	r3, #18
 8004c42:	d123      	bne.n	8004c8c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	08da      	lsrs	r2, r3, #3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3208      	adds	r2, #8
 8004c4c:	0092      	lsls	r2, r2, #2
 8004c4e:	58d3      	ldr	r3, [r2, r3]
 8004c50:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2207      	movs	r2, #7
 8004c56:	4013      	ands	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	220f      	movs	r2, #15
 8004c5c:	409a      	lsls	r2, r3
 8004c5e:	0013      	movs	r3, r2
 8004c60:	43da      	mvns	r2, r3
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	4013      	ands	r3, r2
 8004c66:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	691a      	ldr	r2, [r3, #16]
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	2107      	movs	r1, #7
 8004c70:	400b      	ands	r3, r1
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	409a      	lsls	r2, r3
 8004c76:	0013      	movs	r3, r2
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	08da      	lsrs	r2, r3, #3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	3208      	adds	r2, #8
 8004c86:	0092      	lsls	r2, r2, #2
 8004c88:	6939      	ldr	r1, [r7, #16]
 8004c8a:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d00b      	beq.n	8004cac <HAL_GPIO_Init+0xa8>
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d007      	beq.n	8004cac <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ca0:	2b11      	cmp	r3, #17
 8004ca2:	d003      	beq.n	8004cac <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	2b12      	cmp	r3, #18
 8004caa:	d130      	bne.n	8004d0e <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	005b      	lsls	r3, r3, #1
 8004cb6:	2203      	movs	r2, #3
 8004cb8:	409a      	lsls	r2, r3
 8004cba:	0013      	movs	r3, r2
 8004cbc:	43da      	mvns	r2, r3
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	68da      	ldr	r2, [r3, #12]
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	409a      	lsls	r2, r3
 8004cce:	0013      	movs	r3, r2
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	409a      	lsls	r2, r3
 8004ce8:	0013      	movs	r3, r2
 8004cea:	43da      	mvns	r2, r3
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	4013      	ands	r3, r2
 8004cf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	091b      	lsrs	r3, r3, #4
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	401a      	ands	r2, r3
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	409a      	lsls	r2, r3
 8004d00:	0013      	movs	r3, r2
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	005b      	lsls	r3, r3, #1
 8004d18:	2203      	movs	r2, #3
 8004d1a:	409a      	lsls	r2, r3
 8004d1c:	0013      	movs	r3, r2
 8004d1e:	43da      	mvns	r2, r3
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	4013      	ands	r3, r2
 8004d24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2203      	movs	r2, #3
 8004d2c:	401a      	ands	r2, r3
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	409a      	lsls	r2, r3
 8004d34:	0013      	movs	r3, r2
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	2203      	movs	r2, #3
 8004d4e:	409a      	lsls	r2, r3
 8004d50:	0013      	movs	r3, r2
 8004d52:	43da      	mvns	r2, r3
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	4013      	ands	r3, r2
 8004d58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	409a      	lsls	r2, r3
 8004d64:	0013      	movs	r3, r2
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	2380      	movs	r3, #128	; 0x80
 8004d78:	055b      	lsls	r3, r3, #21
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	d100      	bne.n	8004d80 <HAL_GPIO_Init+0x17c>
 8004d7e:	e0a0      	b.n	8004ec2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d80:	4b57      	ldr	r3, [pc, #348]	; (8004ee0 <HAL_GPIO_Init+0x2dc>)
 8004d82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d84:	4b56      	ldr	r3, [pc, #344]	; (8004ee0 <HAL_GPIO_Init+0x2dc>)
 8004d86:	2101      	movs	r1, #1
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8004d8c:	4a55      	ldr	r2, [pc, #340]	; (8004ee4 <HAL_GPIO_Init+0x2e0>)
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	089b      	lsrs	r3, r3, #2
 8004d92:	3302      	adds	r3, #2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	589b      	ldr	r3, [r3, r2]
 8004d98:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	2203      	movs	r2, #3
 8004d9e:	4013      	ands	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	220f      	movs	r2, #15
 8004da4:	409a      	lsls	r2, r3
 8004da6:	0013      	movs	r3, r2
 8004da8:	43da      	mvns	r2, r3
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	4013      	ands	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	23a0      	movs	r3, #160	; 0xa0
 8004db4:	05db      	lsls	r3, r3, #23
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d01f      	beq.n	8004dfa <HAL_GPIO_Init+0x1f6>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a4a      	ldr	r2, [pc, #296]	; (8004ee8 <HAL_GPIO_Init+0x2e4>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d019      	beq.n	8004df6 <HAL_GPIO_Init+0x1f2>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a49      	ldr	r2, [pc, #292]	; (8004eec <HAL_GPIO_Init+0x2e8>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d013      	beq.n	8004df2 <HAL_GPIO_Init+0x1ee>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a48      	ldr	r2, [pc, #288]	; (8004ef0 <HAL_GPIO_Init+0x2ec>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00d      	beq.n	8004dee <HAL_GPIO_Init+0x1ea>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a47      	ldr	r2, [pc, #284]	; (8004ef4 <HAL_GPIO_Init+0x2f0>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d007      	beq.n	8004dea <HAL_GPIO_Init+0x1e6>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a46      	ldr	r2, [pc, #280]	; (8004ef8 <HAL_GPIO_Init+0x2f4>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d101      	bne.n	8004de6 <HAL_GPIO_Init+0x1e2>
 8004de2:	2305      	movs	r3, #5
 8004de4:	e00a      	b.n	8004dfc <HAL_GPIO_Init+0x1f8>
 8004de6:	2306      	movs	r3, #6
 8004de8:	e008      	b.n	8004dfc <HAL_GPIO_Init+0x1f8>
 8004dea:	2304      	movs	r3, #4
 8004dec:	e006      	b.n	8004dfc <HAL_GPIO_Init+0x1f8>
 8004dee:	2303      	movs	r3, #3
 8004df0:	e004      	b.n	8004dfc <HAL_GPIO_Init+0x1f8>
 8004df2:	2302      	movs	r3, #2
 8004df4:	e002      	b.n	8004dfc <HAL_GPIO_Init+0x1f8>
 8004df6:	2301      	movs	r3, #1
 8004df8:	e000      	b.n	8004dfc <HAL_GPIO_Init+0x1f8>
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	2103      	movs	r1, #3
 8004e00:	400a      	ands	r2, r1
 8004e02:	0092      	lsls	r2, r2, #2
 8004e04:	4093      	lsls	r3, r2
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e0c:	4935      	ldr	r1, [pc, #212]	; (8004ee4 <HAL_GPIO_Init+0x2e0>)
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	089b      	lsrs	r3, r3, #2
 8004e12:	3302      	adds	r3, #2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e1a:	4b38      	ldr	r3, [pc, #224]	; (8004efc <HAL_GPIO_Init+0x2f8>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	43da      	mvns	r2, r3
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	4013      	ands	r3, r2
 8004e28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	2380      	movs	r3, #128	; 0x80
 8004e30:	025b      	lsls	r3, r3, #9
 8004e32:	4013      	ands	r3, r2
 8004e34:	d003      	beq.n	8004e3e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004e3e:	4b2f      	ldr	r3, [pc, #188]	; (8004efc <HAL_GPIO_Init+0x2f8>)
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004e44:	4b2d      	ldr	r3, [pc, #180]	; (8004efc <HAL_GPIO_Init+0x2f8>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	43da      	mvns	r2, r3
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	4013      	ands	r3, r2
 8004e52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	2380      	movs	r3, #128	; 0x80
 8004e5a:	029b      	lsls	r3, r3, #10
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	d003      	beq.n	8004e68 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004e68:	4b24      	ldr	r3, [pc, #144]	; (8004efc <HAL_GPIO_Init+0x2f8>)
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e6e:	4b23      	ldr	r3, [pc, #140]	; (8004efc <HAL_GPIO_Init+0x2f8>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	43da      	mvns	r2, r3
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	2380      	movs	r3, #128	; 0x80
 8004e84:	035b      	lsls	r3, r3, #13
 8004e86:	4013      	ands	r3, r2
 8004e88:	d003      	beq.n	8004e92 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004e92:	4b1a      	ldr	r3, [pc, #104]	; (8004efc <HAL_GPIO_Init+0x2f8>)
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004e98:	4b18      	ldr	r3, [pc, #96]	; (8004efc <HAL_GPIO_Init+0x2f8>)
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	43da      	mvns	r2, r3
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	2380      	movs	r3, #128	; 0x80
 8004eae:	039b      	lsls	r3, r3, #14
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	d003      	beq.n	8004ebc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004ebc:	4b0f      	ldr	r3, [pc, #60]	; (8004efc <HAL_GPIO_Init+0x2f8>)
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	40da      	lsrs	r2, r3
 8004ed0:	1e13      	subs	r3, r2, #0
 8004ed2:	d000      	beq.n	8004ed6 <HAL_GPIO_Init+0x2d2>
 8004ed4:	e6a2      	b.n	8004c1c <HAL_GPIO_Init+0x18>
  }
}
 8004ed6:	46c0      	nop			; (mov r8, r8)
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	b006      	add	sp, #24
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	46c0      	nop			; (mov r8, r8)
 8004ee0:	40021000 	.word	0x40021000
 8004ee4:	40010000 	.word	0x40010000
 8004ee8:	50000400 	.word	0x50000400
 8004eec:	50000800 	.word	0x50000800
 8004ef0:	50000c00 	.word	0x50000c00
 8004ef4:	50001000 	.word	0x50001000
 8004ef8:	50001c00 	.word	0x50001c00
 8004efc:	40010400 	.word	0x40010400

08004f00 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	0008      	movs	r0, r1
 8004f0a:	0011      	movs	r1, r2
 8004f0c:	1cbb      	adds	r3, r7, #2
 8004f0e:	1c02      	adds	r2, r0, #0
 8004f10:	801a      	strh	r2, [r3, #0]
 8004f12:	1c7b      	adds	r3, r7, #1
 8004f14:	1c0a      	adds	r2, r1, #0
 8004f16:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8004f18:	1c7b      	adds	r3, r7, #1
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d004      	beq.n	8004f2a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f20:	1cbb      	adds	r3, r7, #2
 8004f22:	881a      	ldrh	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004f28:	e003      	b.n	8004f32 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004f2a:	1cbb      	adds	r3, r7, #2
 8004f2c:	881a      	ldrh	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f32:	46c0      	nop			; (mov r8, r8)
 8004f34:	46bd      	mov	sp, r7
 8004f36:	b002      	add	sp, #8
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b082      	sub	sp, #8
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
 8004f42:	000a      	movs	r2, r1
 8004f44:	1cbb      	adds	r3, r7, #2
 8004f46:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	695a      	ldr	r2, [r3, #20]
 8004f4c:	1cbb      	adds	r3, r7, #2
 8004f4e:	881b      	ldrh	r3, [r3, #0]
 8004f50:	405a      	eors	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	615a      	str	r2, [r3, #20]
}
 8004f56:	46c0      	nop			; (mov r8, r8)
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	b002      	add	sp, #8
 8004f5c:	bd80      	pop	{r7, pc}
	...

08004f60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	0002      	movs	r2, r0
 8004f68:	1dbb      	adds	r3, r7, #6
 8004f6a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8004f6c:	4b09      	ldr	r3, [pc, #36]	; (8004f94 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	1dba      	adds	r2, r7, #6
 8004f72:	8812      	ldrh	r2, [r2, #0]
 8004f74:	4013      	ands	r3, r2
 8004f76:	d008      	beq.n	8004f8a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f78:	4b06      	ldr	r3, [pc, #24]	; (8004f94 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004f7a:	1dba      	adds	r2, r7, #6
 8004f7c:	8812      	ldrh	r2, [r2, #0]
 8004f7e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f80:	1dbb      	adds	r3, r7, #6
 8004f82:	881b      	ldrh	r3, [r3, #0]
 8004f84:	0018      	movs	r0, r3
 8004f86:	f7ff f8e3 	bl	8004150 <HAL_GPIO_EXTI_Callback>
  }
}
 8004f8a:	46c0      	nop			; (mov r8, r8)
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	b002      	add	sp, #8
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	46c0      	nop			; (mov r8, r8)
 8004f94:	40010400 	.word	0x40010400

08004f98 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f9a:	b08b      	sub	sp, #44	; 0x2c
 8004f9c:	af06      	add	r7, sp, #24
 8004f9e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e0e4      	b.n	8005174 <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a73      	ldr	r2, [pc, #460]	; (800517c <HAL_PCD_Init+0x1e4>)
 8004fae:	5c9b      	ldrb	r3, [r3, r2]
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d108      	bne.n	8004fc8 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	238a      	movs	r3, #138	; 0x8a
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	f7fe fe5a 	bl	8003c7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a6c      	ldr	r2, [pc, #432]	; (800517c <HAL_PCD_Init+0x1e4>)
 8004fcc:	2103      	movs	r1, #3
 8004fce:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	f003 f8e1 	bl	800819c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fda:	230f      	movs	r3, #15
 8004fdc:	18fb      	adds	r3, r7, r3
 8004fde:	2200      	movs	r2, #0
 8004fe0:	701a      	strb	r2, [r3, #0]
 8004fe2:	e043      	b.n	800506c <HAL_PCD_Init+0xd4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004fe4:	200f      	movs	r0, #15
 8004fe6:	183b      	adds	r3, r7, r0
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	2129      	movs	r1, #41	; 0x29
 8004fee:	015b      	lsls	r3, r3, #5
 8004ff0:	18d3      	adds	r3, r2, r3
 8004ff2:	185b      	adds	r3, r3, r1
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004ff8:	183b      	adds	r3, r7, r0
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	2128      	movs	r1, #40	; 0x28
 8005000:	015b      	lsls	r3, r3, #5
 8005002:	18d3      	adds	r3, r2, r3
 8005004:	185b      	adds	r3, r3, r1
 8005006:	183a      	adds	r2, r7, r0
 8005008:	7812      	ldrb	r2, [r2, #0]
 800500a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800500c:	183b      	adds	r3, r7, r0
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	183a      	adds	r2, r7, r0
 8005012:	7812      	ldrb	r2, [r2, #0]
 8005014:	b291      	uxth	r1, r2
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	015b      	lsls	r3, r3, #5
 800501a:	18d3      	adds	r3, r2, r3
 800501c:	3336      	adds	r3, #54	; 0x36
 800501e:	1c0a      	adds	r2, r1, #0
 8005020:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005022:	183b      	adds	r3, r7, r0
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	212b      	movs	r1, #43	; 0x2b
 800502a:	015b      	lsls	r3, r3, #5
 800502c:	18d3      	adds	r3, r2, r3
 800502e:	185b      	adds	r3, r3, r1
 8005030:	2200      	movs	r2, #0
 8005032:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005034:	183b      	adds	r3, r7, r0
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	015b      	lsls	r3, r3, #5
 800503c:	18d3      	adds	r3, r2, r3
 800503e:	3338      	adds	r3, #56	; 0x38
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005044:	183b      	adds	r3, r7, r0
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	015b      	lsls	r3, r3, #5
 800504c:	18d3      	adds	r3, r2, r3
 800504e:	333c      	adds	r3, #60	; 0x3c
 8005050:	2200      	movs	r2, #0
 8005052:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005054:	183b      	adds	r3, r7, r0
 8005056:	781a      	ldrb	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	3202      	adds	r2, #2
 800505c:	0152      	lsls	r2, r2, #5
 800505e:	2100      	movs	r1, #0
 8005060:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005062:	183b      	adds	r3, r7, r0
 8005064:	781a      	ldrb	r2, [r3, #0]
 8005066:	183b      	adds	r3, r7, r0
 8005068:	3201      	adds	r2, #1
 800506a:	701a      	strb	r2, [r3, #0]
 800506c:	230f      	movs	r3, #15
 800506e:	18fb      	adds	r3, r7, r3
 8005070:	781a      	ldrb	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	429a      	cmp	r2, r3
 8005078:	d3b4      	bcc.n	8004fe4 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800507a:	230f      	movs	r3, #15
 800507c:	18fb      	adds	r3, r7, r3
 800507e:	2200      	movs	r2, #0
 8005080:	701a      	strb	r2, [r3, #0]
 8005082:	e03f      	b.n	8005104 <HAL_PCD_Init+0x16c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005084:	200f      	movs	r0, #15
 8005086:	183b      	adds	r3, r7, r0
 8005088:	781a      	ldrb	r2, [r3, #0]
 800508a:	6879      	ldr	r1, [r7, #4]
 800508c:	232a      	movs	r3, #42	; 0x2a
 800508e:	33ff      	adds	r3, #255	; 0xff
 8005090:	0152      	lsls	r2, r2, #5
 8005092:	188a      	adds	r2, r1, r2
 8005094:	18d3      	adds	r3, r2, r3
 8005096:	2200      	movs	r2, #0
 8005098:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800509a:	183b      	adds	r3, r7, r0
 800509c:	781a      	ldrb	r2, [r3, #0]
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	2394      	movs	r3, #148	; 0x94
 80050a2:	005b      	lsls	r3, r3, #1
 80050a4:	0152      	lsls	r2, r2, #5
 80050a6:	188a      	adds	r2, r1, r2
 80050a8:	18d3      	adds	r3, r2, r3
 80050aa:	183a      	adds	r2, r7, r0
 80050ac:	7812      	ldrb	r2, [r2, #0]
 80050ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80050b0:	183b      	adds	r3, r7, r0
 80050b2:	781a      	ldrb	r2, [r3, #0]
 80050b4:	6879      	ldr	r1, [r7, #4]
 80050b6:	232c      	movs	r3, #44	; 0x2c
 80050b8:	33ff      	adds	r3, #255	; 0xff
 80050ba:	0152      	lsls	r2, r2, #5
 80050bc:	188a      	adds	r2, r1, r2
 80050be:	18d3      	adds	r3, r2, r3
 80050c0:	2200      	movs	r2, #0
 80050c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80050c4:	183b      	adds	r3, r7, r0
 80050c6:	781a      	ldrb	r2, [r3, #0]
 80050c8:	6879      	ldr	r1, [r7, #4]
 80050ca:	239c      	movs	r3, #156	; 0x9c
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	0152      	lsls	r2, r2, #5
 80050d0:	188a      	adds	r2, r1, r2
 80050d2:	18d3      	adds	r3, r2, r3
 80050d4:	2200      	movs	r2, #0
 80050d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80050d8:	183b      	adds	r3, r7, r0
 80050da:	781a      	ldrb	r2, [r3, #0]
 80050dc:	6879      	ldr	r1, [r7, #4]
 80050de:	239e      	movs	r3, #158	; 0x9e
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	0152      	lsls	r2, r2, #5
 80050e4:	188a      	adds	r2, r1, r2
 80050e6:	18d3      	adds	r3, r2, r3
 80050e8:	2200      	movs	r2, #0
 80050ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80050ec:	183b      	adds	r3, r7, r0
 80050ee:	781a      	ldrb	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	320a      	adds	r2, #10
 80050f4:	0152      	lsls	r2, r2, #5
 80050f6:	2100      	movs	r1, #0
 80050f8:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050fa:	183b      	adds	r3, r7, r0
 80050fc:	781a      	ldrb	r2, [r3, #0]
 80050fe:	183b      	adds	r3, r7, r0
 8005100:	3201      	adds	r2, #1
 8005102:	701a      	strb	r2, [r3, #0]
 8005104:	230f      	movs	r3, #15
 8005106:	18fb      	adds	r3, r7, r3
 8005108:	781a      	ldrb	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	429a      	cmp	r2, r3
 8005110:	d3b8      	bcc.n	8005084 <HAL_PCD_Init+0xec>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6818      	ldr	r0, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	466a      	mov	r2, sp
 800511a:	0011      	movs	r1, r2
 800511c:	001a      	movs	r2, r3
 800511e:	3210      	adds	r2, #16
 8005120:	ca70      	ldmia	r2!, {r4, r5, r6}
 8005122:	c170      	stmia	r1!, {r4, r5, r6}
 8005124:	ca30      	ldmia	r2!, {r4, r5}
 8005126:	c130      	stmia	r1!, {r4, r5}
 8005128:	6859      	ldr	r1, [r3, #4]
 800512a:	689a      	ldr	r2, [r3, #8]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	f003 f855 	bl	80081dc <USB_DevInit>
 8005132:	1e03      	subs	r3, r0, #0
 8005134:	d005      	beq.n	8005142 <HAL_PCD_Init+0x1aa>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a10      	ldr	r2, [pc, #64]	; (800517c <HAL_PCD_Init+0x1e4>)
 800513a:	2102      	movs	r1, #2
 800513c:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e018      	b.n	8005174 <HAL_PCD_Init+0x1dc>
  }

  hpcd->USB_Address = 0U;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2224      	movs	r2, #36	; 0x24
 8005146:	2100      	movs	r1, #0
 8005148:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a0b      	ldr	r2, [pc, #44]	; (800517c <HAL_PCD_Init+0x1e4>)
 800514e:	2101      	movs	r1, #1
 8005150:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d103      	bne.n	8005162 <HAL_PCD_Init+0x1ca>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	0018      	movs	r0, r3
 800515e:	f000 f834 	bl	80051ca <HAL_PCDEx_ActivateLPM>
  }


  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d103      	bne.n	8005172 <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	0018      	movs	r0, r3
 800516e:	f000 f807 	bl	8005180 <HAL_PCDEx_ActivateBCD>
  }

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	0018      	movs	r0, r3
 8005176:	46bd      	mov	sp, r7
 8005178:	b005      	add	sp, #20
 800517a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800517c:	00000229 	.word	0x00000229

08005180 <HAL_PCDEx_ActivateBCD>:
  * @brief  Activate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	60fb      	str	r3, [r7, #12]
  hpcd->battery_charging_active = 1U;
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	239b      	movs	r3, #155	; 0x9b
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	2101      	movs	r1, #1
 8005196:	50d1      	str	r1, [r2, r3]

  USBx->BCDR |= (USB_BCDR_BCDEN);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2258      	movs	r2, #88	; 0x58
 800519c:	5a9b      	ldrh	r3, [r3, r2]
 800519e:	b29b      	uxth	r3, r3
 80051a0:	2201      	movs	r2, #1
 80051a2:	4313      	orrs	r3, r2
 80051a4:	b299      	uxth	r1, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2258      	movs	r2, #88	; 0x58
 80051aa:	5299      	strh	r1, [r3, r2]
  /* Enable DCD : Data Contact Detect */
  USBx->BCDR |= (USB_BCDR_DCDEN);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2258      	movs	r2, #88	; 0x58
 80051b0:	5a9b      	ldrh	r3, [r3, r2]
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2202      	movs	r2, #2
 80051b6:	4313      	orrs	r3, r2
 80051b8:	b299      	uxth	r1, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2258      	movs	r2, #88	; 0x58
 80051be:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	0018      	movs	r0, r3
 80051c4:	46bd      	mov	sp, r7
 80051c6:	b004      	add	sp, #16
 80051c8:	bd80      	pop	{r7, pc}

080051ca <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b084      	sub	sp, #16
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	239a      	movs	r3, #154	; 0x9a
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	2101      	movs	r1, #1
 80051e0:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	2398      	movs	r3, #152	; 0x98
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	2100      	movs	r1, #0
 80051ea:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2254      	movs	r2, #84	; 0x54
 80051f0:	5a9b      	ldrh	r3, [r3, r2]
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	2201      	movs	r2, #1
 80051f6:	4313      	orrs	r3, r2
 80051f8:	b299      	uxth	r1, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2254      	movs	r2, #84	; 0x54
 80051fe:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2254      	movs	r2, #84	; 0x54
 8005204:	5a9b      	ldrh	r3, [r3, r2]
 8005206:	b29b      	uxth	r3, r3
 8005208:	2202      	movs	r2, #2
 800520a:	4313      	orrs	r3, r2
 800520c:	b299      	uxth	r1, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2254      	movs	r2, #84	; 0x54
 8005212:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	0018      	movs	r0, r3
 8005218:	46bd      	mov	sp, r7
 800521a:	b004      	add	sp, #16
 800521c:	bd80      	pop	{r7, pc}
	...

08005220 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8005224:	4b04      	ldr	r3, [pc, #16]	; (8005238 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	4b03      	ldr	r3, [pc, #12]	; (8005238 <HAL_PWR_EnableBkUpAccess+0x18>)
 800522a:	2180      	movs	r1, #128	; 0x80
 800522c:	0049      	lsls	r1, r1, #1
 800522e:	430a      	orrs	r2, r1
 8005230:	601a      	str	r2, [r3, #0]
}
 8005232:	46c0      	nop			; (mov r8, r8)
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	40007000 	.word	0x40007000

0800523c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800523c:	b5b0      	push	{r4, r5, r7, lr}
 800523e:	b08a      	sub	sp, #40	; 0x28
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d102      	bne.n	8005250 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	f000 fbbc 	bl	80059c8 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005250:	4bc8      	ldr	r3, [pc, #800]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	220c      	movs	r2, #12
 8005256:	4013      	ands	r3, r2
 8005258:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800525a:	4bc6      	ldr	r3, [pc, #792]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 800525c:	68da      	ldr	r2, [r3, #12]
 800525e:	2380      	movs	r3, #128	; 0x80
 8005260:	025b      	lsls	r3, r3, #9
 8005262:	4013      	ands	r3, r2
 8005264:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2201      	movs	r2, #1
 800526c:	4013      	ands	r3, r2
 800526e:	d100      	bne.n	8005272 <HAL_RCC_OscConfig+0x36>
 8005270:	e07e      	b.n	8005370 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	2b08      	cmp	r3, #8
 8005276:	d007      	beq.n	8005288 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	2b0c      	cmp	r3, #12
 800527c:	d112      	bne.n	80052a4 <HAL_RCC_OscConfig+0x68>
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	2380      	movs	r3, #128	; 0x80
 8005282:	025b      	lsls	r3, r3, #9
 8005284:	429a      	cmp	r2, r3
 8005286:	d10d      	bne.n	80052a4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005288:	4bba      	ldr	r3, [pc, #744]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	2380      	movs	r3, #128	; 0x80
 800528e:	029b      	lsls	r3, r3, #10
 8005290:	4013      	ands	r3, r2
 8005292:	d100      	bne.n	8005296 <HAL_RCC_OscConfig+0x5a>
 8005294:	e06b      	b.n	800536e <HAL_RCC_OscConfig+0x132>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d167      	bne.n	800536e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	f000 fb92 	bl	80059c8 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	2380      	movs	r3, #128	; 0x80
 80052aa:	025b      	lsls	r3, r3, #9
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d107      	bne.n	80052c0 <HAL_RCC_OscConfig+0x84>
 80052b0:	4bb0      	ldr	r3, [pc, #704]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	4baf      	ldr	r3, [pc, #700]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 80052b6:	2180      	movs	r1, #128	; 0x80
 80052b8:	0249      	lsls	r1, r1, #9
 80052ba:	430a      	orrs	r2, r1
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	e027      	b.n	8005310 <HAL_RCC_OscConfig+0xd4>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	23a0      	movs	r3, #160	; 0xa0
 80052c6:	02db      	lsls	r3, r3, #11
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d10e      	bne.n	80052ea <HAL_RCC_OscConfig+0xae>
 80052cc:	4ba9      	ldr	r3, [pc, #676]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	4ba8      	ldr	r3, [pc, #672]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 80052d2:	2180      	movs	r1, #128	; 0x80
 80052d4:	02c9      	lsls	r1, r1, #11
 80052d6:	430a      	orrs	r2, r1
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	4ba6      	ldr	r3, [pc, #664]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	4ba5      	ldr	r3, [pc, #660]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 80052e0:	2180      	movs	r1, #128	; 0x80
 80052e2:	0249      	lsls	r1, r1, #9
 80052e4:	430a      	orrs	r2, r1
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	e012      	b.n	8005310 <HAL_RCC_OscConfig+0xd4>
 80052ea:	4ba2      	ldr	r3, [pc, #648]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	4ba1      	ldr	r3, [pc, #644]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 80052f0:	49a1      	ldr	r1, [pc, #644]	; (8005578 <HAL_RCC_OscConfig+0x33c>)
 80052f2:	400a      	ands	r2, r1
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	4b9f      	ldr	r3, [pc, #636]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	2380      	movs	r3, #128	; 0x80
 80052fc:	025b      	lsls	r3, r3, #9
 80052fe:	4013      	ands	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	4b9b      	ldr	r3, [pc, #620]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	4b9a      	ldr	r3, [pc, #616]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 800530a:	499c      	ldr	r1, [pc, #624]	; (800557c <HAL_RCC_OscConfig+0x340>)
 800530c:	400a      	ands	r2, r1
 800530e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d015      	beq.n	8005344 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005318:	f7fe fffc 	bl	8004314 <HAL_GetTick>
 800531c:	0003      	movs	r3, r0
 800531e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005320:	e009      	b.n	8005336 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005322:	f7fe fff7 	bl	8004314 <HAL_GetTick>
 8005326:	0002      	movs	r2, r0
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b64      	cmp	r3, #100	; 0x64
 800532e:	d902      	bls.n	8005336 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	f000 fb49 	bl	80059c8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005336:	4b8f      	ldr	r3, [pc, #572]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	2380      	movs	r3, #128	; 0x80
 800533c:	029b      	lsls	r3, r3, #10
 800533e:	4013      	ands	r3, r2
 8005340:	d0ef      	beq.n	8005322 <HAL_RCC_OscConfig+0xe6>
 8005342:	e015      	b.n	8005370 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005344:	f7fe ffe6 	bl	8004314 <HAL_GetTick>
 8005348:	0003      	movs	r3, r0
 800534a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800534c:	e008      	b.n	8005360 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800534e:	f7fe ffe1 	bl	8004314 <HAL_GetTick>
 8005352:	0002      	movs	r2, r0
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	2b64      	cmp	r3, #100	; 0x64
 800535a:	d901      	bls.n	8005360 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e333      	b.n	80059c8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005360:	4b84      	ldr	r3, [pc, #528]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	2380      	movs	r3, #128	; 0x80
 8005366:	029b      	lsls	r3, r3, #10
 8005368:	4013      	ands	r3, r2
 800536a:	d1f0      	bne.n	800534e <HAL_RCC_OscConfig+0x112>
 800536c:	e000      	b.n	8005370 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800536e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2202      	movs	r2, #2
 8005376:	4013      	ands	r3, r2
 8005378:	d100      	bne.n	800537c <HAL_RCC_OscConfig+0x140>
 800537a:	e098      	b.n	80054ae <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	2220      	movs	r2, #32
 8005386:	4013      	ands	r3, r2
 8005388:	d009      	beq.n	800539e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800538a:	4b7a      	ldr	r3, [pc, #488]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	4b79      	ldr	r3, [pc, #484]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 8005390:	2120      	movs	r1, #32
 8005392:	430a      	orrs	r2, r1
 8005394:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	2220      	movs	r2, #32
 800539a:	4393      	bics	r3, r2
 800539c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d005      	beq.n	80053b0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	2b0c      	cmp	r3, #12
 80053a8:	d13d      	bne.n	8005426 <HAL_RCC_OscConfig+0x1ea>
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d13a      	bne.n	8005426 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80053b0:	4b70      	ldr	r3, [pc, #448]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2204      	movs	r2, #4
 80053b6:	4013      	ands	r3, r2
 80053b8:	d004      	beq.n	80053c4 <HAL_RCC_OscConfig+0x188>
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e301      	b.n	80059c8 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053c4:	4b6b      	ldr	r3, [pc, #428]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	4a6d      	ldr	r2, [pc, #436]	; (8005580 <HAL_RCC_OscConfig+0x344>)
 80053ca:	4013      	ands	r3, r2
 80053cc:	0019      	movs	r1, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	021a      	lsls	r2, r3, #8
 80053d4:	4b67      	ldr	r3, [pc, #412]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 80053d6:	430a      	orrs	r2, r1
 80053d8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80053da:	4b66      	ldr	r3, [pc, #408]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2209      	movs	r2, #9
 80053e0:	4393      	bics	r3, r2
 80053e2:	0019      	movs	r1, r3
 80053e4:	4b63      	ldr	r3, [pc, #396]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 80053e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e8:	430a      	orrs	r2, r1
 80053ea:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053ec:	f000 fc20 	bl	8005c30 <HAL_RCC_GetSysClockFreq>
 80053f0:	0001      	movs	r1, r0
 80053f2:	4b60      	ldr	r3, [pc, #384]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	091b      	lsrs	r3, r3, #4
 80053f8:	220f      	movs	r2, #15
 80053fa:	4013      	ands	r3, r2
 80053fc:	4a61      	ldr	r2, [pc, #388]	; (8005584 <HAL_RCC_OscConfig+0x348>)
 80053fe:	5cd3      	ldrb	r3, [r2, r3]
 8005400:	000a      	movs	r2, r1
 8005402:	40da      	lsrs	r2, r3
 8005404:	4b60      	ldr	r3, [pc, #384]	; (8005588 <HAL_RCC_OscConfig+0x34c>)
 8005406:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8005408:	2513      	movs	r5, #19
 800540a:	197c      	adds	r4, r7, r5
 800540c:	2000      	movs	r0, #0
 800540e:	f7fe ff4b 	bl	80042a8 <HAL_InitTick>
 8005412:	0003      	movs	r3, r0
 8005414:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005416:	197b      	adds	r3, r7, r5
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d047      	beq.n	80054ae <HAL_RCC_OscConfig+0x272>
      {
        return status;
 800541e:	2313      	movs	r3, #19
 8005420:	18fb      	adds	r3, r7, r3
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	e2d0      	b.n	80059c8 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	2b00      	cmp	r3, #0
 800542a:	d027      	beq.n	800547c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800542c:	4b51      	ldr	r3, [pc, #324]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2209      	movs	r2, #9
 8005432:	4393      	bics	r3, r2
 8005434:	0019      	movs	r1, r3
 8005436:	4b4f      	ldr	r3, [pc, #316]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 8005438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800543a:	430a      	orrs	r2, r1
 800543c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800543e:	f7fe ff69 	bl	8004314 <HAL_GetTick>
 8005442:	0003      	movs	r3, r0
 8005444:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005448:	f7fe ff64 	bl	8004314 <HAL_GetTick>
 800544c:	0002      	movs	r2, r0
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e2b6      	b.n	80059c8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800545a:	4b46      	ldr	r3, [pc, #280]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2204      	movs	r2, #4
 8005460:	4013      	ands	r3, r2
 8005462:	d0f1      	beq.n	8005448 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005464:	4b43      	ldr	r3, [pc, #268]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	4a45      	ldr	r2, [pc, #276]	; (8005580 <HAL_RCC_OscConfig+0x344>)
 800546a:	4013      	ands	r3, r2
 800546c:	0019      	movs	r1, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	021a      	lsls	r2, r3, #8
 8005474:	4b3f      	ldr	r3, [pc, #252]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 8005476:	430a      	orrs	r2, r1
 8005478:	605a      	str	r2, [r3, #4]
 800547a:	e018      	b.n	80054ae <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800547c:	4b3d      	ldr	r3, [pc, #244]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	4b3c      	ldr	r3, [pc, #240]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 8005482:	2101      	movs	r1, #1
 8005484:	438a      	bics	r2, r1
 8005486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005488:	f7fe ff44 	bl	8004314 <HAL_GetTick>
 800548c:	0003      	movs	r3, r0
 800548e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005490:	e008      	b.n	80054a4 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005492:	f7fe ff3f 	bl	8004314 <HAL_GetTick>
 8005496:	0002      	movs	r2, r0
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d901      	bls.n	80054a4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e291      	b.n	80059c8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054a4:	4b33      	ldr	r3, [pc, #204]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2204      	movs	r2, #4
 80054aa:	4013      	ands	r3, r2
 80054ac:	d1f1      	bne.n	8005492 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2210      	movs	r2, #16
 80054b4:	4013      	ands	r3, r2
 80054b6:	d100      	bne.n	80054ba <HAL_RCC_OscConfig+0x27e>
 80054b8:	e09f      	b.n	80055fa <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d13f      	bne.n	8005540 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80054c0:	4b2c      	ldr	r3, [pc, #176]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	2380      	movs	r3, #128	; 0x80
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4013      	ands	r3, r2
 80054ca:	d005      	beq.n	80054d8 <HAL_RCC_OscConfig+0x29c>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	69db      	ldr	r3, [r3, #28]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e277      	b.n	80059c8 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054d8:	4b26      	ldr	r3, [pc, #152]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	4a2b      	ldr	r2, [pc, #172]	; (800558c <HAL_RCC_OscConfig+0x350>)
 80054de:	4013      	ands	r3, r2
 80054e0:	0019      	movs	r1, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054e6:	4b23      	ldr	r3, [pc, #140]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 80054e8:	430a      	orrs	r2, r1
 80054ea:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054ec:	4b21      	ldr	r3, [pc, #132]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	021b      	lsls	r3, r3, #8
 80054f2:	0a19      	lsrs	r1, r3, #8
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	061a      	lsls	r2, r3, #24
 80054fa:	4b1e      	ldr	r3, [pc, #120]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 80054fc:	430a      	orrs	r2, r1
 80054fe:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005504:	0b5b      	lsrs	r3, r3, #13
 8005506:	3301      	adds	r3, #1
 8005508:	2280      	movs	r2, #128	; 0x80
 800550a:	0212      	lsls	r2, r2, #8
 800550c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800550e:	4b19      	ldr	r3, [pc, #100]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	091b      	lsrs	r3, r3, #4
 8005514:	210f      	movs	r1, #15
 8005516:	400b      	ands	r3, r1
 8005518:	491a      	ldr	r1, [pc, #104]	; (8005584 <HAL_RCC_OscConfig+0x348>)
 800551a:	5ccb      	ldrb	r3, [r1, r3]
 800551c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800551e:	4b1a      	ldr	r3, [pc, #104]	; (8005588 <HAL_RCC_OscConfig+0x34c>)
 8005520:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8005522:	2513      	movs	r5, #19
 8005524:	197c      	adds	r4, r7, r5
 8005526:	2000      	movs	r0, #0
 8005528:	f7fe febe 	bl	80042a8 <HAL_InitTick>
 800552c:	0003      	movs	r3, r0
 800552e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005530:	197b      	adds	r3, r7, r5
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d060      	beq.n	80055fa <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8005538:	2313      	movs	r3, #19
 800553a:	18fb      	adds	r3, r7, r3
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	e243      	b.n	80059c8 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	69db      	ldr	r3, [r3, #28]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d03e      	beq.n	80055c6 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005548:	4b0a      	ldr	r3, [pc, #40]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	4b09      	ldr	r3, [pc, #36]	; (8005574 <HAL_RCC_OscConfig+0x338>)
 800554e:	2180      	movs	r1, #128	; 0x80
 8005550:	0049      	lsls	r1, r1, #1
 8005552:	430a      	orrs	r2, r1
 8005554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005556:	f7fe fedd 	bl	8004314 <HAL_GetTick>
 800555a:	0003      	movs	r3, r0
 800555c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800555e:	e017      	b.n	8005590 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005560:	f7fe fed8 	bl	8004314 <HAL_GetTick>
 8005564:	0002      	movs	r2, r0
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b02      	cmp	r3, #2
 800556c:	d910      	bls.n	8005590 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e22a      	b.n	80059c8 <HAL_RCC_OscConfig+0x78c>
 8005572:	46c0      	nop			; (mov r8, r8)
 8005574:	40021000 	.word	0x40021000
 8005578:	fffeffff 	.word	0xfffeffff
 800557c:	fffbffff 	.word	0xfffbffff
 8005580:	ffffe0ff 	.word	0xffffe0ff
 8005584:	08008a84 	.word	0x08008a84
 8005588:	20000004 	.word	0x20000004
 800558c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005590:	4bc6      	ldr	r3, [pc, #792]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	2380      	movs	r3, #128	; 0x80
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4013      	ands	r3, r2
 800559a:	d0e1      	beq.n	8005560 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800559c:	4bc3      	ldr	r3, [pc, #780]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	4ac3      	ldr	r2, [pc, #780]	; (80058b0 <HAL_RCC_OscConfig+0x674>)
 80055a2:	4013      	ands	r3, r2
 80055a4:	0019      	movs	r1, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055aa:	4bc0      	ldr	r3, [pc, #768]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 80055ac:	430a      	orrs	r2, r1
 80055ae:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055b0:	4bbe      	ldr	r3, [pc, #760]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	021b      	lsls	r3, r3, #8
 80055b6:	0a19      	lsrs	r1, r3, #8
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a1b      	ldr	r3, [r3, #32]
 80055bc:	061a      	lsls	r2, r3, #24
 80055be:	4bbb      	ldr	r3, [pc, #748]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 80055c0:	430a      	orrs	r2, r1
 80055c2:	605a      	str	r2, [r3, #4]
 80055c4:	e019      	b.n	80055fa <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80055c6:	4bb9      	ldr	r3, [pc, #740]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	4bb8      	ldr	r3, [pc, #736]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 80055cc:	49b9      	ldr	r1, [pc, #740]	; (80058b4 <HAL_RCC_OscConfig+0x678>)
 80055ce:	400a      	ands	r2, r1
 80055d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d2:	f7fe fe9f 	bl	8004314 <HAL_GetTick>
 80055d6:	0003      	movs	r3, r0
 80055d8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80055da:	e008      	b.n	80055ee <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055dc:	f7fe fe9a 	bl	8004314 <HAL_GetTick>
 80055e0:	0002      	movs	r2, r0
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e1ec      	b.n	80059c8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80055ee:	4baf      	ldr	r3, [pc, #700]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	2380      	movs	r3, #128	; 0x80
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4013      	ands	r3, r2
 80055f8:	d1f0      	bne.n	80055dc <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2208      	movs	r2, #8
 8005600:	4013      	ands	r3, r2
 8005602:	d036      	beq.n	8005672 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d019      	beq.n	8005640 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800560c:	4ba7      	ldr	r3, [pc, #668]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 800560e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005610:	4ba6      	ldr	r3, [pc, #664]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 8005612:	2101      	movs	r1, #1
 8005614:	430a      	orrs	r2, r1
 8005616:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005618:	f7fe fe7c 	bl	8004314 <HAL_GetTick>
 800561c:	0003      	movs	r3, r0
 800561e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005620:	e008      	b.n	8005634 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005622:	f7fe fe77 	bl	8004314 <HAL_GetTick>
 8005626:	0002      	movs	r2, r0
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	2b02      	cmp	r3, #2
 800562e:	d901      	bls.n	8005634 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e1c9      	b.n	80059c8 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005634:	4b9d      	ldr	r3, [pc, #628]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 8005636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005638:	2202      	movs	r2, #2
 800563a:	4013      	ands	r3, r2
 800563c:	d0f1      	beq.n	8005622 <HAL_RCC_OscConfig+0x3e6>
 800563e:	e018      	b.n	8005672 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005640:	4b9a      	ldr	r3, [pc, #616]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 8005642:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005644:	4b99      	ldr	r3, [pc, #612]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 8005646:	2101      	movs	r1, #1
 8005648:	438a      	bics	r2, r1
 800564a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800564c:	f7fe fe62 	bl	8004314 <HAL_GetTick>
 8005650:	0003      	movs	r3, r0
 8005652:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005654:	e008      	b.n	8005668 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005656:	f7fe fe5d 	bl	8004314 <HAL_GetTick>
 800565a:	0002      	movs	r2, r0
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	2b02      	cmp	r3, #2
 8005662:	d901      	bls.n	8005668 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e1af      	b.n	80059c8 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005668:	4b90      	ldr	r3, [pc, #576]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 800566a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800566c:	2202      	movs	r2, #2
 800566e:	4013      	ands	r3, r2
 8005670:	d1f1      	bne.n	8005656 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2204      	movs	r2, #4
 8005678:	4013      	ands	r3, r2
 800567a:	d100      	bne.n	800567e <HAL_RCC_OscConfig+0x442>
 800567c:	e0af      	b.n	80057de <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800567e:	2323      	movs	r3, #35	; 0x23
 8005680:	18fb      	adds	r3, r7, r3
 8005682:	2200      	movs	r2, #0
 8005684:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005686:	4b89      	ldr	r3, [pc, #548]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 8005688:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800568a:	2380      	movs	r3, #128	; 0x80
 800568c:	055b      	lsls	r3, r3, #21
 800568e:	4013      	ands	r3, r2
 8005690:	d10a      	bne.n	80056a8 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005692:	4b86      	ldr	r3, [pc, #536]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 8005694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005696:	4b85      	ldr	r3, [pc, #532]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 8005698:	2180      	movs	r1, #128	; 0x80
 800569a:	0549      	lsls	r1, r1, #21
 800569c:	430a      	orrs	r2, r1
 800569e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80056a0:	2323      	movs	r3, #35	; 0x23
 80056a2:	18fb      	adds	r3, r7, r3
 80056a4:	2201      	movs	r2, #1
 80056a6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056a8:	4b83      	ldr	r3, [pc, #524]	; (80058b8 <HAL_RCC_OscConfig+0x67c>)
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	2380      	movs	r3, #128	; 0x80
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	4013      	ands	r3, r2
 80056b2:	d11a      	bne.n	80056ea <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056b4:	4b80      	ldr	r3, [pc, #512]	; (80058b8 <HAL_RCC_OscConfig+0x67c>)
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	4b7f      	ldr	r3, [pc, #508]	; (80058b8 <HAL_RCC_OscConfig+0x67c>)
 80056ba:	2180      	movs	r1, #128	; 0x80
 80056bc:	0049      	lsls	r1, r1, #1
 80056be:	430a      	orrs	r2, r1
 80056c0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056c2:	f7fe fe27 	bl	8004314 <HAL_GetTick>
 80056c6:	0003      	movs	r3, r0
 80056c8:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056cc:	f7fe fe22 	bl	8004314 <HAL_GetTick>
 80056d0:	0002      	movs	r2, r0
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b64      	cmp	r3, #100	; 0x64
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e174      	b.n	80059c8 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056de:	4b76      	ldr	r3, [pc, #472]	; (80058b8 <HAL_RCC_OscConfig+0x67c>)
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	2380      	movs	r3, #128	; 0x80
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	4013      	ands	r3, r2
 80056e8:	d0f0      	beq.n	80056cc <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689a      	ldr	r2, [r3, #8]
 80056ee:	2380      	movs	r3, #128	; 0x80
 80056f0:	005b      	lsls	r3, r3, #1
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d107      	bne.n	8005706 <HAL_RCC_OscConfig+0x4ca>
 80056f6:	4b6d      	ldr	r3, [pc, #436]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 80056f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056fa:	4b6c      	ldr	r3, [pc, #432]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 80056fc:	2180      	movs	r1, #128	; 0x80
 80056fe:	0049      	lsls	r1, r1, #1
 8005700:	430a      	orrs	r2, r1
 8005702:	651a      	str	r2, [r3, #80]	; 0x50
 8005704:	e031      	b.n	800576a <HAL_RCC_OscConfig+0x52e>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10c      	bne.n	8005728 <HAL_RCC_OscConfig+0x4ec>
 800570e:	4b67      	ldr	r3, [pc, #412]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 8005710:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005712:	4b66      	ldr	r3, [pc, #408]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 8005714:	4967      	ldr	r1, [pc, #412]	; (80058b4 <HAL_RCC_OscConfig+0x678>)
 8005716:	400a      	ands	r2, r1
 8005718:	651a      	str	r2, [r3, #80]	; 0x50
 800571a:	4b64      	ldr	r3, [pc, #400]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 800571c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800571e:	4b63      	ldr	r3, [pc, #396]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 8005720:	4966      	ldr	r1, [pc, #408]	; (80058bc <HAL_RCC_OscConfig+0x680>)
 8005722:	400a      	ands	r2, r1
 8005724:	651a      	str	r2, [r3, #80]	; 0x50
 8005726:	e020      	b.n	800576a <HAL_RCC_OscConfig+0x52e>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	689a      	ldr	r2, [r3, #8]
 800572c:	23a0      	movs	r3, #160	; 0xa0
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	429a      	cmp	r2, r3
 8005732:	d10e      	bne.n	8005752 <HAL_RCC_OscConfig+0x516>
 8005734:	4b5d      	ldr	r3, [pc, #372]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 8005736:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005738:	4b5c      	ldr	r3, [pc, #368]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 800573a:	2180      	movs	r1, #128	; 0x80
 800573c:	00c9      	lsls	r1, r1, #3
 800573e:	430a      	orrs	r2, r1
 8005740:	651a      	str	r2, [r3, #80]	; 0x50
 8005742:	4b5a      	ldr	r3, [pc, #360]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 8005744:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005746:	4b59      	ldr	r3, [pc, #356]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 8005748:	2180      	movs	r1, #128	; 0x80
 800574a:	0049      	lsls	r1, r1, #1
 800574c:	430a      	orrs	r2, r1
 800574e:	651a      	str	r2, [r3, #80]	; 0x50
 8005750:	e00b      	b.n	800576a <HAL_RCC_OscConfig+0x52e>
 8005752:	4b56      	ldr	r3, [pc, #344]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 8005754:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005756:	4b55      	ldr	r3, [pc, #340]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 8005758:	4956      	ldr	r1, [pc, #344]	; (80058b4 <HAL_RCC_OscConfig+0x678>)
 800575a:	400a      	ands	r2, r1
 800575c:	651a      	str	r2, [r3, #80]	; 0x50
 800575e:	4b53      	ldr	r3, [pc, #332]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 8005760:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005762:	4b52      	ldr	r3, [pc, #328]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 8005764:	4955      	ldr	r1, [pc, #340]	; (80058bc <HAL_RCC_OscConfig+0x680>)
 8005766:	400a      	ands	r2, r1
 8005768:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d015      	beq.n	800579e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005772:	f7fe fdcf 	bl	8004314 <HAL_GetTick>
 8005776:	0003      	movs	r3, r0
 8005778:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800577a:	e009      	b.n	8005790 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800577c:	f7fe fdca 	bl	8004314 <HAL_GetTick>
 8005780:	0002      	movs	r2, r0
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	4a4e      	ldr	r2, [pc, #312]	; (80058c0 <HAL_RCC_OscConfig+0x684>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d901      	bls.n	8005790 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e11b      	b.n	80059c8 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005790:	4b46      	ldr	r3, [pc, #280]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 8005792:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005794:	2380      	movs	r3, #128	; 0x80
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4013      	ands	r3, r2
 800579a:	d0ef      	beq.n	800577c <HAL_RCC_OscConfig+0x540>
 800579c:	e014      	b.n	80057c8 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800579e:	f7fe fdb9 	bl	8004314 <HAL_GetTick>
 80057a2:	0003      	movs	r3, r0
 80057a4:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80057a6:	e009      	b.n	80057bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057a8:	f7fe fdb4 	bl	8004314 <HAL_GetTick>
 80057ac:	0002      	movs	r2, r0
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	4a43      	ldr	r2, [pc, #268]	; (80058c0 <HAL_RCC_OscConfig+0x684>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e105      	b.n	80059c8 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80057bc:	4b3b      	ldr	r3, [pc, #236]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 80057be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057c0:	2380      	movs	r3, #128	; 0x80
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4013      	ands	r3, r2
 80057c6:	d1ef      	bne.n	80057a8 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80057c8:	2323      	movs	r3, #35	; 0x23
 80057ca:	18fb      	adds	r3, r7, r3
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d105      	bne.n	80057de <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057d2:	4b36      	ldr	r3, [pc, #216]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 80057d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057d6:	4b35      	ldr	r3, [pc, #212]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 80057d8:	493a      	ldr	r1, [pc, #232]	; (80058c4 <HAL_RCC_OscConfig+0x688>)
 80057da:	400a      	ands	r2, r1
 80057dc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2220      	movs	r2, #32
 80057e4:	4013      	ands	r3, r2
 80057e6:	d049      	beq.n	800587c <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d026      	beq.n	800583e <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80057f0:	4b2e      	ldr	r3, [pc, #184]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 80057f2:	689a      	ldr	r2, [r3, #8]
 80057f4:	4b2d      	ldr	r3, [pc, #180]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 80057f6:	2101      	movs	r1, #1
 80057f8:	430a      	orrs	r2, r1
 80057fa:	609a      	str	r2, [r3, #8]
 80057fc:	4b2b      	ldr	r3, [pc, #172]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 80057fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005800:	4b2a      	ldr	r3, [pc, #168]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 8005802:	2101      	movs	r1, #1
 8005804:	430a      	orrs	r2, r1
 8005806:	635a      	str	r2, [r3, #52]	; 0x34
 8005808:	4b2f      	ldr	r3, [pc, #188]	; (80058c8 <HAL_RCC_OscConfig+0x68c>)
 800580a:	6a1a      	ldr	r2, [r3, #32]
 800580c:	4b2e      	ldr	r3, [pc, #184]	; (80058c8 <HAL_RCC_OscConfig+0x68c>)
 800580e:	2180      	movs	r1, #128	; 0x80
 8005810:	0189      	lsls	r1, r1, #6
 8005812:	430a      	orrs	r2, r1
 8005814:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005816:	f7fe fd7d 	bl	8004314 <HAL_GetTick>
 800581a:	0003      	movs	r3, r0
 800581c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800581e:	e008      	b.n	8005832 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005820:	f7fe fd78 	bl	8004314 <HAL_GetTick>
 8005824:	0002      	movs	r2, r0
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e0ca      	b.n	80059c8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005832:	4b1e      	ldr	r3, [pc, #120]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	2202      	movs	r2, #2
 8005838:	4013      	ands	r3, r2
 800583a:	d0f1      	beq.n	8005820 <HAL_RCC_OscConfig+0x5e4>
 800583c:	e01e      	b.n	800587c <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800583e:	4b1b      	ldr	r3, [pc, #108]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 8005840:	689a      	ldr	r2, [r3, #8]
 8005842:	4b1a      	ldr	r3, [pc, #104]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 8005844:	2101      	movs	r1, #1
 8005846:	438a      	bics	r2, r1
 8005848:	609a      	str	r2, [r3, #8]
 800584a:	4b1f      	ldr	r3, [pc, #124]	; (80058c8 <HAL_RCC_OscConfig+0x68c>)
 800584c:	6a1a      	ldr	r2, [r3, #32]
 800584e:	4b1e      	ldr	r3, [pc, #120]	; (80058c8 <HAL_RCC_OscConfig+0x68c>)
 8005850:	491e      	ldr	r1, [pc, #120]	; (80058cc <HAL_RCC_OscConfig+0x690>)
 8005852:	400a      	ands	r2, r1
 8005854:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005856:	f7fe fd5d 	bl	8004314 <HAL_GetTick>
 800585a:	0003      	movs	r3, r0
 800585c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800585e:	e008      	b.n	8005872 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005860:	f7fe fd58 	bl	8004314 <HAL_GetTick>
 8005864:	0002      	movs	r2, r0
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b02      	cmp	r3, #2
 800586c:	d901      	bls.n	8005872 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e0aa      	b.n	80059c8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005872:	4b0e      	ldr	r3, [pc, #56]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	2202      	movs	r2, #2
 8005878:	4013      	ands	r3, r2
 800587a:	d1f1      	bne.n	8005860 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005880:	2b00      	cmp	r3, #0
 8005882:	d100      	bne.n	8005886 <HAL_RCC_OscConfig+0x64a>
 8005884:	e09f      	b.n	80059c6 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	2b0c      	cmp	r3, #12
 800588a:	d100      	bne.n	800588e <HAL_RCC_OscConfig+0x652>
 800588c:	e078      	b.n	8005980 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005892:	2b02      	cmp	r3, #2
 8005894:	d159      	bne.n	800594a <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005896:	4b05      	ldr	r3, [pc, #20]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	4b04      	ldr	r3, [pc, #16]	; (80058ac <HAL_RCC_OscConfig+0x670>)
 800589c:	490c      	ldr	r1, [pc, #48]	; (80058d0 <HAL_RCC_OscConfig+0x694>)
 800589e:	400a      	ands	r2, r1
 80058a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058a2:	f7fe fd37 	bl	8004314 <HAL_GetTick>
 80058a6:	0003      	movs	r3, r0
 80058a8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80058aa:	e01c      	b.n	80058e6 <HAL_RCC_OscConfig+0x6aa>
 80058ac:	40021000 	.word	0x40021000
 80058b0:	ffff1fff 	.word	0xffff1fff
 80058b4:	fffffeff 	.word	0xfffffeff
 80058b8:	40007000 	.word	0x40007000
 80058bc:	fffffbff 	.word	0xfffffbff
 80058c0:	00001388 	.word	0x00001388
 80058c4:	efffffff 	.word	0xefffffff
 80058c8:	40010000 	.word	0x40010000
 80058cc:	ffffdfff 	.word	0xffffdfff
 80058d0:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058d4:	f7fe fd1e 	bl	8004314 <HAL_GetTick>
 80058d8:	0002      	movs	r2, r0
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e070      	b.n	80059c8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80058e6:	4b3a      	ldr	r3, [pc, #232]	; (80059d0 <HAL_RCC_OscConfig+0x794>)
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	2380      	movs	r3, #128	; 0x80
 80058ec:	049b      	lsls	r3, r3, #18
 80058ee:	4013      	ands	r3, r2
 80058f0:	d1f0      	bne.n	80058d4 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058f2:	4b37      	ldr	r3, [pc, #220]	; (80059d0 <HAL_RCC_OscConfig+0x794>)
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	4a37      	ldr	r2, [pc, #220]	; (80059d4 <HAL_RCC_OscConfig+0x798>)
 80058f8:	4013      	ands	r3, r2
 80058fa:	0019      	movs	r1, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005904:	431a      	orrs	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800590a:	431a      	orrs	r2, r3
 800590c:	4b30      	ldr	r3, [pc, #192]	; (80059d0 <HAL_RCC_OscConfig+0x794>)
 800590e:	430a      	orrs	r2, r1
 8005910:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005912:	4b2f      	ldr	r3, [pc, #188]	; (80059d0 <HAL_RCC_OscConfig+0x794>)
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	4b2e      	ldr	r3, [pc, #184]	; (80059d0 <HAL_RCC_OscConfig+0x794>)
 8005918:	2180      	movs	r1, #128	; 0x80
 800591a:	0449      	lsls	r1, r1, #17
 800591c:	430a      	orrs	r2, r1
 800591e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005920:	f7fe fcf8 	bl	8004314 <HAL_GetTick>
 8005924:	0003      	movs	r3, r0
 8005926:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005928:	e008      	b.n	800593c <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800592a:	f7fe fcf3 	bl	8004314 <HAL_GetTick>
 800592e:	0002      	movs	r2, r0
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	2b02      	cmp	r3, #2
 8005936:	d901      	bls.n	800593c <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e045      	b.n	80059c8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800593c:	4b24      	ldr	r3, [pc, #144]	; (80059d0 <HAL_RCC_OscConfig+0x794>)
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	2380      	movs	r3, #128	; 0x80
 8005942:	049b      	lsls	r3, r3, #18
 8005944:	4013      	ands	r3, r2
 8005946:	d0f0      	beq.n	800592a <HAL_RCC_OscConfig+0x6ee>
 8005948:	e03d      	b.n	80059c6 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800594a:	4b21      	ldr	r3, [pc, #132]	; (80059d0 <HAL_RCC_OscConfig+0x794>)
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	4b20      	ldr	r3, [pc, #128]	; (80059d0 <HAL_RCC_OscConfig+0x794>)
 8005950:	4921      	ldr	r1, [pc, #132]	; (80059d8 <HAL_RCC_OscConfig+0x79c>)
 8005952:	400a      	ands	r2, r1
 8005954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005956:	f7fe fcdd 	bl	8004314 <HAL_GetTick>
 800595a:	0003      	movs	r3, r0
 800595c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800595e:	e008      	b.n	8005972 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005960:	f7fe fcd8 	bl	8004314 <HAL_GetTick>
 8005964:	0002      	movs	r2, r0
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	2b02      	cmp	r3, #2
 800596c:	d901      	bls.n	8005972 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e02a      	b.n	80059c8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005972:	4b17      	ldr	r3, [pc, #92]	; (80059d0 <HAL_RCC_OscConfig+0x794>)
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	2380      	movs	r3, #128	; 0x80
 8005978:	049b      	lsls	r3, r3, #18
 800597a:	4013      	ands	r3, r2
 800597c:	d1f0      	bne.n	8005960 <HAL_RCC_OscConfig+0x724>
 800597e:	e022      	b.n	80059c6 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005984:	2b01      	cmp	r3, #1
 8005986:	d101      	bne.n	800598c <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e01d      	b.n	80059c8 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800598c:	4b10      	ldr	r3, [pc, #64]	; (80059d0 <HAL_RCC_OscConfig+0x794>)
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005992:	69ba      	ldr	r2, [r7, #24]
 8005994:	2380      	movs	r3, #128	; 0x80
 8005996:	025b      	lsls	r3, r3, #9
 8005998:	401a      	ands	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599e:	429a      	cmp	r2, r3
 80059a0:	d10f      	bne.n	80059c2 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80059a2:	69ba      	ldr	r2, [r7, #24]
 80059a4:	23f0      	movs	r3, #240	; 0xf0
 80059a6:	039b      	lsls	r3, r3, #14
 80059a8:	401a      	ands	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d107      	bne.n	80059c2 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80059b2:	69ba      	ldr	r2, [r7, #24]
 80059b4:	23c0      	movs	r3, #192	; 0xc0
 80059b6:	041b      	lsls	r3, r3, #16
 80059b8:	401a      	ands	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80059be:	429a      	cmp	r2, r3
 80059c0:	d001      	beq.n	80059c6 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e000      	b.n	80059c8 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	0018      	movs	r0, r3
 80059ca:	46bd      	mov	sp, r7
 80059cc:	b00a      	add	sp, #40	; 0x28
 80059ce:	bdb0      	pop	{r4, r5, r7, pc}
 80059d0:	40021000 	.word	0x40021000
 80059d4:	ff02ffff 	.word	0xff02ffff
 80059d8:	feffffff 	.word	0xfeffffff

080059dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059dc:	b5b0      	push	{r4, r5, r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d101      	bne.n	80059f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e10d      	b.n	8005c0c <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059f0:	4b88      	ldr	r3, [pc, #544]	; (8005c14 <HAL_RCC_ClockConfig+0x238>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2201      	movs	r2, #1
 80059f6:	4013      	ands	r3, r2
 80059f8:	683a      	ldr	r2, [r7, #0]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d911      	bls.n	8005a22 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059fe:	4b85      	ldr	r3, [pc, #532]	; (8005c14 <HAL_RCC_ClockConfig+0x238>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2201      	movs	r2, #1
 8005a04:	4393      	bics	r3, r2
 8005a06:	0019      	movs	r1, r3
 8005a08:	4b82      	ldr	r3, [pc, #520]	; (8005c14 <HAL_RCC_ClockConfig+0x238>)
 8005a0a:	683a      	ldr	r2, [r7, #0]
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a10:	4b80      	ldr	r3, [pc, #512]	; (8005c14 <HAL_RCC_ClockConfig+0x238>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2201      	movs	r2, #1
 8005a16:	4013      	ands	r3, r2
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d001      	beq.n	8005a22 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e0f4      	b.n	8005c0c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2202      	movs	r2, #2
 8005a28:	4013      	ands	r3, r2
 8005a2a:	d009      	beq.n	8005a40 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a2c:	4b7a      	ldr	r3, [pc, #488]	; (8005c18 <HAL_RCC_ClockConfig+0x23c>)
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	22f0      	movs	r2, #240	; 0xf0
 8005a32:	4393      	bics	r3, r2
 8005a34:	0019      	movs	r1, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	689a      	ldr	r2, [r3, #8]
 8005a3a:	4b77      	ldr	r3, [pc, #476]	; (8005c18 <HAL_RCC_ClockConfig+0x23c>)
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2201      	movs	r2, #1
 8005a46:	4013      	ands	r3, r2
 8005a48:	d100      	bne.n	8005a4c <HAL_RCC_ClockConfig+0x70>
 8005a4a:	e089      	b.n	8005b60 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d107      	bne.n	8005a64 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a54:	4b70      	ldr	r3, [pc, #448]	; (8005c18 <HAL_RCC_ClockConfig+0x23c>)
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	2380      	movs	r3, #128	; 0x80
 8005a5a:	029b      	lsls	r3, r3, #10
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	d120      	bne.n	8005aa2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e0d3      	b.n	8005c0c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	2b03      	cmp	r3, #3
 8005a6a:	d107      	bne.n	8005a7c <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a6c:	4b6a      	ldr	r3, [pc, #424]	; (8005c18 <HAL_RCC_ClockConfig+0x23c>)
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	2380      	movs	r3, #128	; 0x80
 8005a72:	049b      	lsls	r3, r3, #18
 8005a74:	4013      	ands	r3, r2
 8005a76:	d114      	bne.n	8005aa2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e0c7      	b.n	8005c0c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d106      	bne.n	8005a92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a84:	4b64      	ldr	r3, [pc, #400]	; (8005c18 <HAL_RCC_ClockConfig+0x23c>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2204      	movs	r2, #4
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	d109      	bne.n	8005aa2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e0bc      	b.n	8005c0c <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005a92:	4b61      	ldr	r3, [pc, #388]	; (8005c18 <HAL_RCC_ClockConfig+0x23c>)
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	2380      	movs	r3, #128	; 0x80
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	d101      	bne.n	8005aa2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e0b4      	b.n	8005c0c <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005aa2:	4b5d      	ldr	r3, [pc, #372]	; (8005c18 <HAL_RCC_ClockConfig+0x23c>)
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	2203      	movs	r2, #3
 8005aa8:	4393      	bics	r3, r2
 8005aaa:	0019      	movs	r1, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	4b59      	ldr	r3, [pc, #356]	; (8005c18 <HAL_RCC_ClockConfig+0x23c>)
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ab6:	f7fe fc2d 	bl	8004314 <HAL_GetTick>
 8005aba:	0003      	movs	r3, r0
 8005abc:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d111      	bne.n	8005aea <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ac6:	e009      	b.n	8005adc <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ac8:	f7fe fc24 	bl	8004314 <HAL_GetTick>
 8005acc:	0002      	movs	r2, r0
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	4a52      	ldr	r2, [pc, #328]	; (8005c1c <HAL_RCC_ClockConfig+0x240>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d901      	bls.n	8005adc <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e097      	b.n	8005c0c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005adc:	4b4e      	ldr	r3, [pc, #312]	; (8005c18 <HAL_RCC_ClockConfig+0x23c>)
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	220c      	movs	r2, #12
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	2b08      	cmp	r3, #8
 8005ae6:	d1ef      	bne.n	8005ac8 <HAL_RCC_ClockConfig+0xec>
 8005ae8:	e03a      	b.n	8005b60 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	2b03      	cmp	r3, #3
 8005af0:	d111      	bne.n	8005b16 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005af2:	e009      	b.n	8005b08 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005af4:	f7fe fc0e 	bl	8004314 <HAL_GetTick>
 8005af8:	0002      	movs	r2, r0
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	4a47      	ldr	r2, [pc, #284]	; (8005c1c <HAL_RCC_ClockConfig+0x240>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d901      	bls.n	8005b08 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e081      	b.n	8005c0c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b08:	4b43      	ldr	r3, [pc, #268]	; (8005c18 <HAL_RCC_ClockConfig+0x23c>)
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	220c      	movs	r2, #12
 8005b0e:	4013      	ands	r3, r2
 8005b10:	2b0c      	cmp	r3, #12
 8005b12:	d1ef      	bne.n	8005af4 <HAL_RCC_ClockConfig+0x118>
 8005b14:	e024      	b.n	8005b60 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d11b      	bne.n	8005b56 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b1e:	e009      	b.n	8005b34 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b20:	f7fe fbf8 	bl	8004314 <HAL_GetTick>
 8005b24:	0002      	movs	r2, r0
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	4a3c      	ldr	r2, [pc, #240]	; (8005c1c <HAL_RCC_ClockConfig+0x240>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d901      	bls.n	8005b34 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e06b      	b.n	8005c0c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b34:	4b38      	ldr	r3, [pc, #224]	; (8005c18 <HAL_RCC_ClockConfig+0x23c>)
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	220c      	movs	r2, #12
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	2b04      	cmp	r3, #4
 8005b3e:	d1ef      	bne.n	8005b20 <HAL_RCC_ClockConfig+0x144>
 8005b40:	e00e      	b.n	8005b60 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b42:	f7fe fbe7 	bl	8004314 <HAL_GetTick>
 8005b46:	0002      	movs	r2, r0
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	4a33      	ldr	r2, [pc, #204]	; (8005c1c <HAL_RCC_ClockConfig+0x240>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e05a      	b.n	8005c0c <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b56:	4b30      	ldr	r3, [pc, #192]	; (8005c18 <HAL_RCC_ClockConfig+0x23c>)
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	220c      	movs	r2, #12
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	d1f0      	bne.n	8005b42 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b60:	4b2c      	ldr	r3, [pc, #176]	; (8005c14 <HAL_RCC_ClockConfig+0x238>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2201      	movs	r2, #1
 8005b66:	4013      	ands	r3, r2
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d211      	bcs.n	8005b92 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b6e:	4b29      	ldr	r3, [pc, #164]	; (8005c14 <HAL_RCC_ClockConfig+0x238>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2201      	movs	r2, #1
 8005b74:	4393      	bics	r3, r2
 8005b76:	0019      	movs	r1, r3
 8005b78:	4b26      	ldr	r3, [pc, #152]	; (8005c14 <HAL_RCC_ClockConfig+0x238>)
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b80:	4b24      	ldr	r3, [pc, #144]	; (8005c14 <HAL_RCC_ClockConfig+0x238>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2201      	movs	r2, #1
 8005b86:	4013      	ands	r3, r2
 8005b88:	683a      	ldr	r2, [r7, #0]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d001      	beq.n	8005b92 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e03c      	b.n	8005c0c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2204      	movs	r2, #4
 8005b98:	4013      	ands	r3, r2
 8005b9a:	d009      	beq.n	8005bb0 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b9c:	4b1e      	ldr	r3, [pc, #120]	; (8005c18 <HAL_RCC_ClockConfig+0x23c>)
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	4a1f      	ldr	r2, [pc, #124]	; (8005c20 <HAL_RCC_ClockConfig+0x244>)
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	0019      	movs	r1, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68da      	ldr	r2, [r3, #12]
 8005baa:	4b1b      	ldr	r3, [pc, #108]	; (8005c18 <HAL_RCC_ClockConfig+0x23c>)
 8005bac:	430a      	orrs	r2, r1
 8005bae:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2208      	movs	r2, #8
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	d00a      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005bba:	4b17      	ldr	r3, [pc, #92]	; (8005c18 <HAL_RCC_ClockConfig+0x23c>)
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	4a19      	ldr	r2, [pc, #100]	; (8005c24 <HAL_RCC_ClockConfig+0x248>)
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	0019      	movs	r1, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	00da      	lsls	r2, r3, #3
 8005bca:	4b13      	ldr	r3, [pc, #76]	; (8005c18 <HAL_RCC_ClockConfig+0x23c>)
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005bd0:	f000 f82e 	bl	8005c30 <HAL_RCC_GetSysClockFreq>
 8005bd4:	0001      	movs	r1, r0
 8005bd6:	4b10      	ldr	r3, [pc, #64]	; (8005c18 <HAL_RCC_ClockConfig+0x23c>)
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	091b      	lsrs	r3, r3, #4
 8005bdc:	220f      	movs	r2, #15
 8005bde:	4013      	ands	r3, r2
 8005be0:	4a11      	ldr	r2, [pc, #68]	; (8005c28 <HAL_RCC_ClockConfig+0x24c>)
 8005be2:	5cd3      	ldrb	r3, [r2, r3]
 8005be4:	000a      	movs	r2, r1
 8005be6:	40da      	lsrs	r2, r3
 8005be8:	4b10      	ldr	r3, [pc, #64]	; (8005c2c <HAL_RCC_ClockConfig+0x250>)
 8005bea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8005bec:	250b      	movs	r5, #11
 8005bee:	197c      	adds	r4, r7, r5
 8005bf0:	2000      	movs	r0, #0
 8005bf2:	f7fe fb59 	bl	80042a8 <HAL_InitTick>
 8005bf6:	0003      	movs	r3, r0
 8005bf8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005bfa:	197b      	adds	r3, r7, r5
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8005c02:	230b      	movs	r3, #11
 8005c04:	18fb      	adds	r3, r7, r3
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	e000      	b.n	8005c0c <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	b004      	add	sp, #16
 8005c12:	bdb0      	pop	{r4, r5, r7, pc}
 8005c14:	40022000 	.word	0x40022000
 8005c18:	40021000 	.word	0x40021000
 8005c1c:	00001388 	.word	0x00001388
 8005c20:	fffff8ff 	.word	0xfffff8ff
 8005c24:	ffffc7ff 	.word	0xffffc7ff
 8005c28:	08008a84 	.word	0x08008a84
 8005c2c:	20000004 	.word	0x20000004

08005c30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005c36:	4b3b      	ldr	r3, [pc, #236]	; (8005d24 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	220c      	movs	r2, #12
 8005c40:	4013      	ands	r3, r2
 8005c42:	2b08      	cmp	r3, #8
 8005c44:	d00e      	beq.n	8005c64 <HAL_RCC_GetSysClockFreq+0x34>
 8005c46:	2b0c      	cmp	r3, #12
 8005c48:	d00f      	beq.n	8005c6a <HAL_RCC_GetSysClockFreq+0x3a>
 8005c4a:	2b04      	cmp	r3, #4
 8005c4c:	d157      	bne.n	8005cfe <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005c4e:	4b35      	ldr	r3, [pc, #212]	; (8005d24 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2210      	movs	r2, #16
 8005c54:	4013      	ands	r3, r2
 8005c56:	d002      	beq.n	8005c5e <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005c58:	4b33      	ldr	r3, [pc, #204]	; (8005d28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c5a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005c5c:	e05d      	b.n	8005d1a <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8005c5e:	4b33      	ldr	r3, [pc, #204]	; (8005d2c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005c60:	613b      	str	r3, [r7, #16]
      break;
 8005c62:	e05a      	b.n	8005d1a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c64:	4b32      	ldr	r3, [pc, #200]	; (8005d30 <HAL_RCC_GetSysClockFreq+0x100>)
 8005c66:	613b      	str	r3, [r7, #16]
      break;
 8005c68:	e057      	b.n	8005d1a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	0c9b      	lsrs	r3, r3, #18
 8005c6e:	220f      	movs	r2, #15
 8005c70:	4013      	ands	r3, r2
 8005c72:	4a30      	ldr	r2, [pc, #192]	; (8005d34 <HAL_RCC_GetSysClockFreq+0x104>)
 8005c74:	5cd3      	ldrb	r3, [r2, r3]
 8005c76:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	0d9b      	lsrs	r3, r3, #22
 8005c7c:	2203      	movs	r2, #3
 8005c7e:	4013      	ands	r3, r2
 8005c80:	3301      	adds	r3, #1
 8005c82:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c84:	4b27      	ldr	r3, [pc, #156]	; (8005d24 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005c86:	68da      	ldr	r2, [r3, #12]
 8005c88:	2380      	movs	r3, #128	; 0x80
 8005c8a:	025b      	lsls	r3, r3, #9
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	d00f      	beq.n	8005cb0 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8005c90:	68b9      	ldr	r1, [r7, #8]
 8005c92:	000a      	movs	r2, r1
 8005c94:	0152      	lsls	r2, r2, #5
 8005c96:	1a52      	subs	r2, r2, r1
 8005c98:	0193      	lsls	r3, r2, #6
 8005c9a:	1a9b      	subs	r3, r3, r2
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	185b      	adds	r3, r3, r1
 8005ca0:	025b      	lsls	r3, r3, #9
 8005ca2:	6879      	ldr	r1, [r7, #4]
 8005ca4:	0018      	movs	r0, r3
 8005ca6:	f7fa fa2f 	bl	8000108 <__udivsi3>
 8005caa:	0003      	movs	r3, r0
 8005cac:	617b      	str	r3, [r7, #20]
 8005cae:	e023      	b.n	8005cf8 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005cb0:	4b1c      	ldr	r3, [pc, #112]	; (8005d24 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2210      	movs	r2, #16
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	d00f      	beq.n	8005cda <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8005cba:	68b9      	ldr	r1, [r7, #8]
 8005cbc:	000a      	movs	r2, r1
 8005cbe:	0152      	lsls	r2, r2, #5
 8005cc0:	1a52      	subs	r2, r2, r1
 8005cc2:	0193      	lsls	r3, r2, #6
 8005cc4:	1a9b      	subs	r3, r3, r2
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	185b      	adds	r3, r3, r1
 8005cca:	021b      	lsls	r3, r3, #8
 8005ccc:	6879      	ldr	r1, [r7, #4]
 8005cce:	0018      	movs	r0, r3
 8005cd0:	f7fa fa1a 	bl	8000108 <__udivsi3>
 8005cd4:	0003      	movs	r3, r0
 8005cd6:	617b      	str	r3, [r7, #20]
 8005cd8:	e00e      	b.n	8005cf8 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8005cda:	68b9      	ldr	r1, [r7, #8]
 8005cdc:	000a      	movs	r2, r1
 8005cde:	0152      	lsls	r2, r2, #5
 8005ce0:	1a52      	subs	r2, r2, r1
 8005ce2:	0193      	lsls	r3, r2, #6
 8005ce4:	1a9b      	subs	r3, r3, r2
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	185b      	adds	r3, r3, r1
 8005cea:	029b      	lsls	r3, r3, #10
 8005cec:	6879      	ldr	r1, [r7, #4]
 8005cee:	0018      	movs	r0, r3
 8005cf0:	f7fa fa0a 	bl	8000108 <__udivsi3>
 8005cf4:	0003      	movs	r3, r0
 8005cf6:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	613b      	str	r3, [r7, #16]
      break;
 8005cfc:	e00d      	b.n	8005d1a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005cfe:	4b09      	ldr	r3, [pc, #36]	; (8005d24 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	0b5b      	lsrs	r3, r3, #13
 8005d04:	2207      	movs	r2, #7
 8005d06:	4013      	ands	r3, r2
 8005d08:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	2280      	movs	r2, #128	; 0x80
 8005d10:	0212      	lsls	r2, r2, #8
 8005d12:	409a      	lsls	r2, r3
 8005d14:	0013      	movs	r3, r2
 8005d16:	613b      	str	r3, [r7, #16]
      break;
 8005d18:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005d1a:	693b      	ldr	r3, [r7, #16]
}
 8005d1c:	0018      	movs	r0, r3
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	b006      	add	sp, #24
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	40021000 	.word	0x40021000
 8005d28:	003d0900 	.word	0x003d0900
 8005d2c:	00f42400 	.word	0x00f42400
 8005d30:	007a1200 	.word	0x007a1200
 8005d34:	08008a94 	.word	0x08008a94

08005d38 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b086      	sub	sp, #24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2220      	movs	r2, #32
 8005d46:	4013      	ands	r3, r2
 8005d48:	d106      	bne.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	2380      	movs	r3, #128	; 0x80
 8005d50:	011b      	lsls	r3, r3, #4
 8005d52:	4013      	ands	r3, r2
 8005d54:	d100      	bne.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8005d56:	e0dd      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8005d58:	2317      	movs	r3, #23
 8005d5a:	18fb      	adds	r3, r7, r3
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d60:	4ba4      	ldr	r3, [pc, #656]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005d62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d64:	2380      	movs	r3, #128	; 0x80
 8005d66:	055b      	lsls	r3, r3, #21
 8005d68:	4013      	ands	r3, r2
 8005d6a:	d10a      	bne.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d6c:	4ba1      	ldr	r3, [pc, #644]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005d6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d70:	4ba0      	ldr	r3, [pc, #640]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005d72:	2180      	movs	r1, #128	; 0x80
 8005d74:	0549      	lsls	r1, r1, #21
 8005d76:	430a      	orrs	r2, r1
 8005d78:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005d7a:	2317      	movs	r3, #23
 8005d7c:	18fb      	adds	r3, r7, r3
 8005d7e:	2201      	movs	r2, #1
 8005d80:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d82:	4b9d      	ldr	r3, [pc, #628]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	2380      	movs	r3, #128	; 0x80
 8005d88:	005b      	lsls	r3, r3, #1
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	d11a      	bne.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d8e:	4b9a      	ldr	r3, [pc, #616]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	4b99      	ldr	r3, [pc, #612]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005d94:	2180      	movs	r1, #128	; 0x80
 8005d96:	0049      	lsls	r1, r1, #1
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d9c:	f7fe faba 	bl	8004314 <HAL_GetTick>
 8005da0:	0003      	movs	r3, r0
 8005da2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005da4:	e008      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005da6:	f7fe fab5 	bl	8004314 <HAL_GetTick>
 8005daa:	0002      	movs	r2, r0
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	2b64      	cmp	r3, #100	; 0x64
 8005db2:	d901      	bls.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e118      	b.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005db8:	4b8f      	ldr	r3, [pc, #572]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	2380      	movs	r3, #128	; 0x80
 8005dbe:	005b      	lsls	r3, r3, #1
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	d0f0      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005dc4:	4b8b      	ldr	r3, [pc, #556]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	23c0      	movs	r3, #192	; 0xc0
 8005dca:	039b      	lsls	r3, r3, #14
 8005dcc:	4013      	ands	r3, r2
 8005dce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685a      	ldr	r2, [r3, #4]
 8005dd4:	23c0      	movs	r3, #192	; 0xc0
 8005dd6:	039b      	lsls	r3, r3, #14
 8005dd8:	4013      	ands	r3, r2
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d107      	bne.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	689a      	ldr	r2, [r3, #8]
 8005de4:	23c0      	movs	r3, #192	; 0xc0
 8005de6:	039b      	lsls	r3, r3, #14
 8005de8:	4013      	ands	r3, r2
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d013      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	23c0      	movs	r3, #192	; 0xc0
 8005df6:	029b      	lsls	r3, r3, #10
 8005df8:	401a      	ands	r2, r3
 8005dfa:	23c0      	movs	r3, #192	; 0xc0
 8005dfc:	029b      	lsls	r3, r3, #10
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d10a      	bne.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005e02:	4b7c      	ldr	r3, [pc, #496]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	2380      	movs	r3, #128	; 0x80
 8005e08:	029b      	lsls	r3, r3, #10
 8005e0a:	401a      	ands	r2, r3
 8005e0c:	2380      	movs	r3, #128	; 0x80
 8005e0e:	029b      	lsls	r3, r3, #10
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d101      	bne.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e0e8      	b.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005e18:	4b76      	ldr	r3, [pc, #472]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005e1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e1c:	23c0      	movs	r3, #192	; 0xc0
 8005e1e:	029b      	lsls	r3, r3, #10
 8005e20:	4013      	ands	r3, r2
 8005e22:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d049      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	23c0      	movs	r3, #192	; 0xc0
 8005e30:	029b      	lsls	r3, r3, #10
 8005e32:	4013      	ands	r3, r2
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d004      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2220      	movs	r2, #32
 8005e40:	4013      	ands	r3, r2
 8005e42:	d10d      	bne.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	689a      	ldr	r2, [r3, #8]
 8005e48:	23c0      	movs	r3, #192	; 0xc0
 8005e4a:	029b      	lsls	r3, r3, #10
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d034      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	2380      	movs	r3, #128	; 0x80
 8005e5a:	011b      	lsls	r3, r3, #4
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	d02e      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005e60:	4b64      	ldr	r3, [pc, #400]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e64:	4a65      	ldr	r2, [pc, #404]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005e66:	4013      	ands	r3, r2
 8005e68:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e6a:	4b62      	ldr	r3, [pc, #392]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005e6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e6e:	4b61      	ldr	r3, [pc, #388]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005e70:	2180      	movs	r1, #128	; 0x80
 8005e72:	0309      	lsls	r1, r1, #12
 8005e74:	430a      	orrs	r2, r1
 8005e76:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e78:	4b5e      	ldr	r3, [pc, #376]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005e7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e7c:	4b5d      	ldr	r3, [pc, #372]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005e7e:	4960      	ldr	r1, [pc, #384]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005e80:	400a      	ands	r2, r1
 8005e82:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005e84:	4b5b      	ldr	r3, [pc, #364]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	2380      	movs	r3, #128	; 0x80
 8005e8e:	005b      	lsls	r3, r3, #1
 8005e90:	4013      	ands	r3, r2
 8005e92:	d014      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e94:	f7fe fa3e 	bl	8004314 <HAL_GetTick>
 8005e98:	0003      	movs	r3, r0
 8005e9a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e9c:	e009      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e9e:	f7fe fa39 	bl	8004314 <HAL_GetTick>
 8005ea2:	0002      	movs	r2, r0
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	4a56      	ldr	r2, [pc, #344]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e09b      	b.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005eb2:	4b50      	ldr	r3, [pc, #320]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005eb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005eb6:	2380      	movs	r3, #128	; 0x80
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4013      	ands	r3, r2
 8005ebc:	d0ef      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	23c0      	movs	r3, #192	; 0xc0
 8005ec4:	029b      	lsls	r3, r3, #10
 8005ec6:	401a      	ands	r2, r3
 8005ec8:	23c0      	movs	r3, #192	; 0xc0
 8005eca:	029b      	lsls	r3, r3, #10
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d10c      	bne.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005ed0:	4b48      	ldr	r3, [pc, #288]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a4c      	ldr	r2, [pc, #304]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	0019      	movs	r1, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	23c0      	movs	r3, #192	; 0xc0
 8005ee0:	039b      	lsls	r3, r3, #14
 8005ee2:	401a      	ands	r2, r3
 8005ee4:	4b43      	ldr	r3, [pc, #268]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	601a      	str	r2, [r3, #0]
 8005eea:	4b42      	ldr	r3, [pc, #264]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005eec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	23c0      	movs	r3, #192	; 0xc0
 8005ef4:	029b      	lsls	r3, r3, #10
 8005ef6:	401a      	ands	r2, r3
 8005ef8:	4b3e      	ldr	r3, [pc, #248]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005efa:	430a      	orrs	r2, r1
 8005efc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005efe:	2317      	movs	r3, #23
 8005f00:	18fb      	adds	r3, r7, r3
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d105      	bne.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f08:	4b3a      	ldr	r3, [pc, #232]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f0c:	4b39      	ldr	r3, [pc, #228]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f0e:	493f      	ldr	r1, [pc, #252]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f10:	400a      	ands	r2, r1
 8005f12:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	d009      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f1e:	4b35      	ldr	r3, [pc, #212]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f22:	2203      	movs	r2, #3
 8005f24:	4393      	bics	r3, r2
 8005f26:	0019      	movs	r1, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	68da      	ldr	r2, [r3, #12]
 8005f2c:	4b31      	ldr	r3, [pc, #196]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2202      	movs	r2, #2
 8005f38:	4013      	ands	r3, r2
 8005f3a:	d009      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f3c:	4b2d      	ldr	r3, [pc, #180]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f40:	220c      	movs	r2, #12
 8005f42:	4393      	bics	r3, r2
 8005f44:	0019      	movs	r1, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	691a      	ldr	r2, [r3, #16]
 8005f4a:	4b2a      	ldr	r3, [pc, #168]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2204      	movs	r2, #4
 8005f56:	4013      	ands	r3, r2
 8005f58:	d009      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f5a:	4b26      	ldr	r3, [pc, #152]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f5e:	4a2c      	ldr	r2, [pc, #176]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005f60:	4013      	ands	r3, r2
 8005f62:	0019      	movs	r1, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	695a      	ldr	r2, [r3, #20]
 8005f68:	4b22      	ldr	r3, [pc, #136]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2208      	movs	r2, #8
 8005f74:	4013      	ands	r3, r2
 8005f76:	d009      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f78:	4b1e      	ldr	r3, [pc, #120]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f7c:	4a25      	ldr	r2, [pc, #148]	; (8006014 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005f7e:	4013      	ands	r3, r2
 8005f80:	0019      	movs	r1, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	699a      	ldr	r2, [r3, #24]
 8005f86:	4b1b      	ldr	r3, [pc, #108]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	2380      	movs	r3, #128	; 0x80
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	4013      	ands	r3, r2
 8005f96:	d009      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f98:	4b16      	ldr	r3, [pc, #88]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f9c:	4a17      	ldr	r2, [pc, #92]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	0019      	movs	r1, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	69da      	ldr	r2, [r3, #28]
 8005fa6:	4b13      	ldr	r3, [pc, #76]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2240      	movs	r2, #64	; 0x40
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	d009      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005fb6:	4b0f      	ldr	r3, [pc, #60]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fba:	4a17      	ldr	r2, [pc, #92]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	0019      	movs	r1, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fc4:	4b0b      	ldr	r3, [pc, #44]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2280      	movs	r2, #128	; 0x80
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	d009      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005fd4:	4b07      	ldr	r3, [pc, #28]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fd8:	4a10      	ldr	r2, [pc, #64]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005fda:	4013      	ands	r3, r2
 8005fdc:	0019      	movs	r1, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a1a      	ldr	r2, [r3, #32]
 8005fe2:	4b04      	ldr	r3, [pc, #16]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	0018      	movs	r0, r3
 8005fec:	46bd      	mov	sp, r7
 8005fee:	b006      	add	sp, #24
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	46c0      	nop			; (mov r8, r8)
 8005ff4:	40021000 	.word	0x40021000
 8005ff8:	40007000 	.word	0x40007000
 8005ffc:	fffcffff 	.word	0xfffcffff
 8006000:	fff7ffff 	.word	0xfff7ffff
 8006004:	00001388 	.word	0x00001388
 8006008:	ffcfffff 	.word	0xffcfffff
 800600c:	efffffff 	.word	0xefffffff
 8006010:	fffff3ff 	.word	0xfffff3ff
 8006014:	ffffcfff 	.word	0xffffcfff
 8006018:	fbffffff 	.word	0xfbffffff
 800601c:	fff3ffff 	.word	0xfff3ffff

08006020 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e08e      	b.n	8006150 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2221      	movs	r2, #33	; 0x21
 8006036:	5c9b      	ldrb	r3, [r3, r2]
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d107      	bne.n	800604e <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2220      	movs	r2, #32
 8006042:	2100      	movs	r1, #0
 8006044:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	0018      	movs	r0, r3
 800604a:	f7fd fd05 	bl	8003a58 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2221      	movs	r2, #33	; 0x21
 8006052:	2102      	movs	r1, #2
 8006054:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	22ca      	movs	r2, #202	; 0xca
 800605c:	625a      	str	r2, [r3, #36]	; 0x24
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2253      	movs	r2, #83	; 0x53
 8006064:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	0018      	movs	r0, r3
 800606a:	f000 fc54 	bl	8006916 <RTC_EnterInitMode>
 800606e:	1e03      	subs	r3, r0, #0
 8006070:	d009      	beq.n	8006086 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	22ff      	movs	r2, #255	; 0xff
 8006078:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2221      	movs	r2, #33	; 0x21
 800607e:	2104      	movs	r1, #4
 8006080:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e064      	b.n	8006150 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	689a      	ldr	r2, [r3, #8]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4931      	ldr	r1, [pc, #196]	; (8006158 <HAL_RTC_Init+0x138>)
 8006092:	400a      	ands	r2, r1
 8006094:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6899      	ldr	r1, [r3, #8]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685a      	ldr	r2, [r3, #4]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	431a      	orrs	r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	431a      	orrs	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	430a      	orrs	r2, r1
 80060b2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	68d2      	ldr	r2, [r2, #12]
 80060bc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6919      	ldr	r1, [r3, #16]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	041a      	lsls	r2, r3, #16
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68da      	ldr	r2, [r3, #12]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2180      	movs	r1, #128	; 0x80
 80060de:	438a      	bics	r2, r1
 80060e0:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2103      	movs	r1, #3
 80060ee:	438a      	bics	r2, r1
 80060f0:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	69da      	ldr	r2, [r3, #28]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	695b      	ldr	r3, [r3, #20]
 8006100:	431a      	orrs	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	430a      	orrs	r2, r1
 8006108:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	2220      	movs	r2, #32
 8006112:	4013      	ands	r3, r2
 8006114:	d113      	bne.n	800613e <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	0018      	movs	r0, r3
 800611a:	f000 fbd5 	bl	80068c8 <HAL_RTC_WaitForSynchro>
 800611e:	1e03      	subs	r3, r0, #0
 8006120:	d00d      	beq.n	800613e <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	22ff      	movs	r2, #255	; 0xff
 8006128:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2221      	movs	r2, #33	; 0x21
 800612e:	2104      	movs	r1, #4
 8006130:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2220      	movs	r2, #32
 8006136:	2100      	movs	r1, #0
 8006138:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e008      	b.n	8006150 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	22ff      	movs	r2, #255	; 0xff
 8006144:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2221      	movs	r2, #33	; 0x21
 800614a:	2101      	movs	r1, #1
 800614c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800614e:	2300      	movs	r3, #0
  }
}
 8006150:	0018      	movs	r0, r3
 8006152:	46bd      	mov	sp, r7
 8006154:	b002      	add	sp, #8
 8006156:	bd80      	pop	{r7, pc}
 8006158:	ff8fffbf 	.word	0xff8fffbf

0800615c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800615c:	b590      	push	{r4, r7, lr}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2220      	movs	r2, #32
 800616c:	5c9b      	ldrb	r3, [r3, r2]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d101      	bne.n	8006176 <HAL_RTC_SetTime+0x1a>
 8006172:	2302      	movs	r3, #2
 8006174:	e0ad      	b.n	80062d2 <HAL_RTC_SetTime+0x176>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2220      	movs	r2, #32
 800617a:	2101      	movs	r1, #1
 800617c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2221      	movs	r2, #33	; 0x21
 8006182:	2102      	movs	r1, #2
 8006184:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d125      	bne.n	80061d8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	2240      	movs	r2, #64	; 0x40
 8006194:	4013      	ands	r3, r2
 8006196:	d102      	bne.n	800619e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	2200      	movs	r2, #0
 800619c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	0018      	movs	r0, r3
 80061a4:	f000 fbe1 	bl	800696a <RTC_ByteToBcd2>
 80061a8:	0003      	movs	r3, r0
 80061aa:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	785b      	ldrb	r3, [r3, #1]
 80061b0:	0018      	movs	r0, r3
 80061b2:	f000 fbda 	bl	800696a <RTC_ByteToBcd2>
 80061b6:	0003      	movs	r3, r0
 80061b8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80061ba:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	789b      	ldrb	r3, [r3, #2]
 80061c0:	0018      	movs	r0, r3
 80061c2:	f000 fbd2 	bl	800696a <RTC_ByteToBcd2>
 80061c6:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80061c8:	0022      	movs	r2, r4
 80061ca:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	78db      	ldrb	r3, [r3, #3]
 80061d0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80061d2:	4313      	orrs	r3, r2
 80061d4:	617b      	str	r3, [r7, #20]
 80061d6:	e017      	b.n	8006208 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	2240      	movs	r2, #64	; 0x40
 80061e0:	4013      	ands	r3, r2
 80061e2:	d102      	bne.n	80061ea <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	2200      	movs	r2, #0
 80061e8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	785b      	ldrb	r3, [r3, #1]
 80061f4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80061f6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80061fc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	78db      	ldrb	r3, [r3, #3]
 8006202:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006204:	4313      	orrs	r3, r2
 8006206:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	22ca      	movs	r2, #202	; 0xca
 800620e:	625a      	str	r2, [r3, #36]	; 0x24
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2253      	movs	r2, #83	; 0x53
 8006216:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	0018      	movs	r0, r3
 800621c:	f000 fb7b 	bl	8006916 <RTC_EnterInitMode>
 8006220:	1e03      	subs	r3, r0, #0
 8006222:	d00d      	beq.n	8006240 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	22ff      	movs	r2, #255	; 0xff
 800622a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2221      	movs	r2, #33	; 0x21
 8006230:	2104      	movs	r1, #4
 8006232:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2220      	movs	r2, #32
 8006238:	2100      	movs	r1, #0
 800623a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e048      	b.n	80062d2 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	4925      	ldr	r1, [pc, #148]	; (80062dc <HAL_RTC_SetTime+0x180>)
 8006248:	400a      	ands	r2, r1
 800624a:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689a      	ldr	r2, [r3, #8]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4922      	ldr	r1, [pc, #136]	; (80062e0 <HAL_RTC_SetTime+0x184>)
 8006258:	400a      	ands	r2, r1
 800625a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6899      	ldr	r1, [r3, #8]
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	68da      	ldr	r2, [r3, #12]
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	431a      	orrs	r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	430a      	orrs	r2, r1
 8006272:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68da      	ldr	r2, [r3, #12]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2180      	movs	r1, #128	; 0x80
 8006280:	438a      	bics	r2, r1
 8006282:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	2220      	movs	r2, #32
 800628c:	4013      	ands	r3, r2
 800628e:	d113      	bne.n	80062b8 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	0018      	movs	r0, r3
 8006294:	f000 fb18 	bl	80068c8 <HAL_RTC_WaitForSynchro>
 8006298:	1e03      	subs	r3, r0, #0
 800629a:	d00d      	beq.n	80062b8 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	22ff      	movs	r2, #255	; 0xff
 80062a2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2221      	movs	r2, #33	; 0x21
 80062a8:	2104      	movs	r1, #4
 80062aa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2220      	movs	r2, #32
 80062b0:	2100      	movs	r1, #0
 80062b2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e00c      	b.n	80062d2 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	22ff      	movs	r2, #255	; 0xff
 80062be:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2221      	movs	r2, #33	; 0x21
 80062c4:	2101      	movs	r1, #1
 80062c6:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2220      	movs	r2, #32
 80062cc:	2100      	movs	r1, #0
 80062ce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80062d0:	2300      	movs	r3, #0
  }
}
 80062d2:	0018      	movs	r0, r3
 80062d4:	46bd      	mov	sp, r7
 80062d6:	b007      	add	sp, #28
 80062d8:	bd90      	pop	{r4, r7, pc}
 80062da:	46c0      	nop			; (mov r8, r8)
 80062dc:	007f7f7f 	.word	0x007f7f7f
 80062e0:	fffbffff 	.word	0xfffbffff

080062e4 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	045b      	lsls	r3, r3, #17
 8006302:	0c5a      	lsrs	r2, r3, #17
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a22      	ldr	r2, [pc, #136]	; (8006398 <HAL_RTC_GetTime+0xb4>)
 8006310:	4013      	ands	r3, r2
 8006312:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	0c1b      	lsrs	r3, r3, #16
 8006318:	b2db      	uxtb	r3, r3
 800631a:	223f      	movs	r2, #63	; 0x3f
 800631c:	4013      	ands	r3, r2
 800631e:	b2da      	uxtb	r2, r3
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	0a1b      	lsrs	r3, r3, #8
 8006328:	b2db      	uxtb	r3, r3
 800632a:	227f      	movs	r2, #127	; 0x7f
 800632c:	4013      	ands	r3, r2
 800632e:	b2da      	uxtb	r2, r3
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	b2db      	uxtb	r3, r3
 8006338:	227f      	movs	r2, #127	; 0x7f
 800633a:	4013      	ands	r3, r2
 800633c:	b2da      	uxtb	r2, r3
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	0c1b      	lsrs	r3, r3, #16
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2240      	movs	r2, #64	; 0x40
 800634a:	4013      	ands	r3, r2
 800634c:	b2da      	uxtb	r2, r3
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d11a      	bne.n	800638e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	0018      	movs	r0, r3
 800635e:	f000 fb2d 	bl	80069bc <RTC_Bcd2ToByte>
 8006362:	0003      	movs	r3, r0
 8006364:	001a      	movs	r2, r3
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	785b      	ldrb	r3, [r3, #1]
 800636e:	0018      	movs	r0, r3
 8006370:	f000 fb24 	bl	80069bc <RTC_Bcd2ToByte>
 8006374:	0003      	movs	r3, r0
 8006376:	001a      	movs	r2, r3
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	789b      	ldrb	r3, [r3, #2]
 8006380:	0018      	movs	r0, r3
 8006382:	f000 fb1b 	bl	80069bc <RTC_Bcd2ToByte>
 8006386:	0003      	movs	r3, r0
 8006388:	001a      	movs	r2, r3
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	0018      	movs	r0, r3
 8006392:	46bd      	mov	sp, r7
 8006394:	b006      	add	sp, #24
 8006396:	bd80      	pop	{r7, pc}
 8006398:	007f7f7f 	.word	0x007f7f7f

0800639c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800639c:	b590      	push	{r4, r7, lr}
 800639e:	b087      	sub	sp, #28
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2220      	movs	r2, #32
 80063ac:	5c9b      	ldrb	r3, [r3, r2]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d101      	bne.n	80063b6 <HAL_RTC_SetDate+0x1a>
 80063b2:	2302      	movs	r3, #2
 80063b4:	e099      	b.n	80064ea <HAL_RTC_SetDate+0x14e>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2220      	movs	r2, #32
 80063ba:	2101      	movs	r1, #1
 80063bc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2221      	movs	r2, #33	; 0x21
 80063c2:	2102      	movs	r1, #2
 80063c4:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10e      	bne.n	80063ea <HAL_RTC_SetDate+0x4e>
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	785b      	ldrb	r3, [r3, #1]
 80063d0:	001a      	movs	r2, r3
 80063d2:	2310      	movs	r3, #16
 80063d4:	4013      	ands	r3, r2
 80063d6:	d008      	beq.n	80063ea <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	785b      	ldrb	r3, [r3, #1]
 80063dc:	2210      	movs	r2, #16
 80063de:	4393      	bics	r3, r2
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	330a      	adds	r3, #10
 80063e4:	b2da      	uxtb	r2, r3
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d11c      	bne.n	800642a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	78db      	ldrb	r3, [r3, #3]
 80063f4:	0018      	movs	r0, r3
 80063f6:	f000 fab8 	bl	800696a <RTC_ByteToBcd2>
 80063fa:	0003      	movs	r3, r0
 80063fc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	785b      	ldrb	r3, [r3, #1]
 8006402:	0018      	movs	r0, r3
 8006404:	f000 fab1 	bl	800696a <RTC_ByteToBcd2>
 8006408:	0003      	movs	r3, r0
 800640a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800640c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	789b      	ldrb	r3, [r3, #2]
 8006412:	0018      	movs	r0, r3
 8006414:	f000 faa9 	bl	800696a <RTC_ByteToBcd2>
 8006418:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800641a:	0022      	movs	r2, r4
 800641c:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006424:	4313      	orrs	r3, r2
 8006426:	617b      	str	r3, [r7, #20]
 8006428:	e00e      	b.n	8006448 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	78db      	ldrb	r3, [r3, #3]
 800642e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	785b      	ldrb	r3, [r3, #1]
 8006434:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006436:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800643c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006444:	4313      	orrs	r3, r2
 8006446:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	22ca      	movs	r2, #202	; 0xca
 800644e:	625a      	str	r2, [r3, #36]	; 0x24
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2253      	movs	r2, #83	; 0x53
 8006456:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	0018      	movs	r0, r3
 800645c:	f000 fa5b 	bl	8006916 <RTC_EnterInitMode>
 8006460:	1e03      	subs	r3, r0, #0
 8006462:	d00d      	beq.n	8006480 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	22ff      	movs	r2, #255	; 0xff
 800646a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2221      	movs	r2, #33	; 0x21
 8006470:	2104      	movs	r1, #4
 8006472:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2220      	movs	r2, #32
 8006478:	2100      	movs	r1, #0
 800647a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e034      	b.n	80064ea <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	697a      	ldr	r2, [r7, #20]
 8006486:	491b      	ldr	r1, [pc, #108]	; (80064f4 <HAL_RTC_SetDate+0x158>)
 8006488:	400a      	ands	r2, r1
 800648a:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68da      	ldr	r2, [r3, #12]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2180      	movs	r1, #128	; 0x80
 8006498:	438a      	bics	r2, r1
 800649a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	2220      	movs	r2, #32
 80064a4:	4013      	ands	r3, r2
 80064a6:	d113      	bne.n	80064d0 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	0018      	movs	r0, r3
 80064ac:	f000 fa0c 	bl	80068c8 <HAL_RTC_WaitForSynchro>
 80064b0:	1e03      	subs	r3, r0, #0
 80064b2:	d00d      	beq.n	80064d0 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	22ff      	movs	r2, #255	; 0xff
 80064ba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2221      	movs	r2, #33	; 0x21
 80064c0:	2104      	movs	r1, #4
 80064c2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2220      	movs	r2, #32
 80064c8:	2100      	movs	r1, #0
 80064ca:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e00c      	b.n	80064ea <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	22ff      	movs	r2, #255	; 0xff
 80064d6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2221      	movs	r2, #33	; 0x21
 80064dc:	2101      	movs	r1, #1
 80064de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2220      	movs	r2, #32
 80064e4:	2100      	movs	r1, #0
 80064e6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80064e8:	2300      	movs	r3, #0
  }
}
 80064ea:	0018      	movs	r0, r3
 80064ec:	46bd      	mov	sp, r7
 80064ee:	b007      	add	sp, #28
 80064f0:	bd90      	pop	{r4, r7, pc}
 80064f2:	46c0      	nop			; (mov r8, r8)
 80064f4:	00ffff3f 	.word	0x00ffff3f

080064f8 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	4a21      	ldr	r2, [pc, #132]	; (8006590 <HAL_RTC_GetDate+0x98>)
 800650c:	4013      	ands	r3, r2
 800650e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	0c1b      	lsrs	r3, r3, #16
 8006514:	b2da      	uxtb	r2, r3
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	0a1b      	lsrs	r3, r3, #8
 800651e:	b2db      	uxtb	r3, r3
 8006520:	221f      	movs	r2, #31
 8006522:	4013      	ands	r3, r2
 8006524:	b2da      	uxtb	r2, r3
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	b2db      	uxtb	r3, r3
 800652e:	223f      	movs	r2, #63	; 0x3f
 8006530:	4013      	ands	r3, r2
 8006532:	b2da      	uxtb	r2, r3
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	0b5b      	lsrs	r3, r3, #13
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2207      	movs	r2, #7
 8006540:	4013      	ands	r3, r2
 8006542:	b2da      	uxtb	r2, r3
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d11a      	bne.n	8006584 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	78db      	ldrb	r3, [r3, #3]
 8006552:	0018      	movs	r0, r3
 8006554:	f000 fa32 	bl	80069bc <RTC_Bcd2ToByte>
 8006558:	0003      	movs	r3, r0
 800655a:	001a      	movs	r2, r3
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	785b      	ldrb	r3, [r3, #1]
 8006564:	0018      	movs	r0, r3
 8006566:	f000 fa29 	bl	80069bc <RTC_Bcd2ToByte>
 800656a:	0003      	movs	r3, r0
 800656c:	001a      	movs	r2, r3
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	789b      	ldrb	r3, [r3, #2]
 8006576:	0018      	movs	r0, r3
 8006578:	f000 fa20 	bl	80069bc <RTC_Bcd2ToByte>
 800657c:	0003      	movs	r3, r0
 800657e:	001a      	movs	r2, r3
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	0018      	movs	r0, r3
 8006588:	46bd      	mov	sp, r7
 800658a:	b006      	add	sp, #24
 800658c:	bd80      	pop	{r7, pc}
 800658e:	46c0      	nop			; (mov r8, r8)
 8006590:	00ffff3f 	.word	0x00ffff3f

08006594 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006594:	b590      	push	{r4, r7, lr}
 8006596:	b089      	sub	sp, #36	; 0x24
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2220      	movs	r2, #32
 80065a4:	5c9b      	ldrb	r3, [r3, r2]
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d101      	bne.n	80065ae <HAL_RTC_SetAlarm_IT+0x1a>
 80065aa:	2302      	movs	r3, #2
 80065ac:	e130      	b.n	8006810 <HAL_RTC_SetAlarm_IT+0x27c>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2220      	movs	r2, #32
 80065b2:	2101      	movs	r1, #1
 80065b4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2221      	movs	r2, #33	; 0x21
 80065ba:	2102      	movs	r1, #2
 80065bc:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d136      	bne.n	8006632 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	2240      	movs	r2, #64	; 0x40
 80065cc:	4013      	ands	r3, r2
 80065ce:	d102      	bne.n	80065d6 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	2200      	movs	r2, #0
 80065d4:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	0018      	movs	r0, r3
 80065dc:	f000 f9c5 	bl	800696a <RTC_ByteToBcd2>
 80065e0:	0003      	movs	r3, r0
 80065e2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	785b      	ldrb	r3, [r3, #1]
 80065e8:	0018      	movs	r0, r3
 80065ea:	f000 f9be 	bl	800696a <RTC_ByteToBcd2>
 80065ee:	0003      	movs	r3, r0
 80065f0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80065f2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	789b      	ldrb	r3, [r3, #2]
 80065f8:	0018      	movs	r0, r3
 80065fa:	f000 f9b6 	bl	800696a <RTC_ByteToBcd2>
 80065fe:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006600:	0022      	movs	r2, r4
 8006602:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	78db      	ldrb	r3, [r3, #3]
 8006608:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800660a:	431a      	orrs	r2, r3
 800660c:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	2220      	movs	r2, #32
 8006612:	5c9b      	ldrb	r3, [r3, r2]
 8006614:	0018      	movs	r0, r3
 8006616:	f000 f9a8 	bl	800696a <RTC_ByteToBcd2>
 800661a:	0003      	movs	r3, r0
 800661c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800661e:	0022      	movs	r2, r4
 8006620:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006626:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800662c:	4313      	orrs	r3, r2
 800662e:	61fb      	str	r3, [r7, #28]
 8006630:	e022      	b.n	8006678 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	2240      	movs	r2, #64	; 0x40
 800663a:	4013      	ands	r3, r2
 800663c:	d102      	bne.n	8006644 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	2200      	movs	r2, #0
 8006642:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	785b      	ldrb	r3, [r3, #1]
 800664e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006650:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006656:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	78db      	ldrb	r3, [r3, #3]
 800665c:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800665e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2120      	movs	r1, #32
 8006664:	5c5b      	ldrb	r3, [r3, r1]
 8006666:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006668:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800666e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006674:	4313      	orrs	r3, r2
 8006676:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	685a      	ldr	r2, [r3, #4]
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	4313      	orrs	r3, r2
 8006682:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	22ca      	movs	r2, #202	; 0xca
 800668a:	625a      	str	r2, [r3, #36]	; 0x24
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2253      	movs	r2, #83	; 0x53
 8006692:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006698:	2380      	movs	r3, #128	; 0x80
 800669a:	005b      	lsls	r3, r3, #1
 800669c:	429a      	cmp	r2, r3
 800669e:	d14e      	bne.n	800673e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	689a      	ldr	r2, [r3, #8]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	495b      	ldr	r1, [pc, #364]	; (8006818 <HAL_RTC_SetAlarm_IT+0x284>)
 80066ac:	400a      	ands	r2, r1
 80066ae:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	22ff      	movs	r2, #255	; 0xff
 80066b8:	401a      	ands	r2, r3
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4957      	ldr	r1, [pc, #348]	; (800681c <HAL_RTC_SetAlarm_IT+0x288>)
 80066c0:	430a      	orrs	r2, r1
 80066c2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80066c4:	f7fd fe26 	bl	8004314 <HAL_GetTick>
 80066c8:	0003      	movs	r3, r0
 80066ca:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80066cc:	e016      	b.n	80066fc <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80066ce:	f7fd fe21 	bl	8004314 <HAL_GetTick>
 80066d2:	0002      	movs	r2, r0
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	1ad2      	subs	r2, r2, r3
 80066d8:	23fa      	movs	r3, #250	; 0xfa
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	429a      	cmp	r2, r3
 80066de:	d90d      	bls.n	80066fc <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	22ff      	movs	r2, #255	; 0xff
 80066e6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2221      	movs	r2, #33	; 0x21
 80066ec:	2103      	movs	r1, #3
 80066ee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2220      	movs	r2, #32
 80066f4:	2100      	movs	r1, #0
 80066f6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e089      	b.n	8006810 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	2201      	movs	r2, #1
 8006704:	4013      	ands	r3, r2
 8006706:	d0e2      	beq.n	80066ce <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	69fa      	ldr	r2, [r7, #28]
 800670e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	69ba      	ldr	r2, [r7, #24]
 8006716:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	689a      	ldr	r2, [r3, #8]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2180      	movs	r1, #128	; 0x80
 8006724:	0049      	lsls	r1, r1, #1
 8006726:	430a      	orrs	r2, r1
 8006728:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	689a      	ldr	r2, [r3, #8]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2180      	movs	r1, #128	; 0x80
 8006736:	0149      	lsls	r1, r1, #5
 8006738:	430a      	orrs	r2, r1
 800673a:	609a      	str	r2, [r3, #8]
 800673c:	e04d      	b.n	80067da <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	689a      	ldr	r2, [r3, #8]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4935      	ldr	r1, [pc, #212]	; (8006820 <HAL_RTC_SetAlarm_IT+0x28c>)
 800674a:	400a      	ands	r2, r1
 800674c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	22ff      	movs	r2, #255	; 0xff
 8006756:	401a      	ands	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4931      	ldr	r1, [pc, #196]	; (8006824 <HAL_RTC_SetAlarm_IT+0x290>)
 800675e:	430a      	orrs	r2, r1
 8006760:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006762:	f7fd fdd7 	bl	8004314 <HAL_GetTick>
 8006766:	0003      	movs	r3, r0
 8006768:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800676a:	e016      	b.n	800679a <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800676c:	f7fd fdd2 	bl	8004314 <HAL_GetTick>
 8006770:	0002      	movs	r2, r0
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	1ad2      	subs	r2, r2, r3
 8006776:	23fa      	movs	r3, #250	; 0xfa
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	429a      	cmp	r2, r3
 800677c:	d90d      	bls.n	800679a <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	22ff      	movs	r2, #255	; 0xff
 8006784:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2221      	movs	r2, #33	; 0x21
 800678a:	2103      	movs	r1, #3
 800678c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2220      	movs	r2, #32
 8006792:	2100      	movs	r1, #0
 8006794:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e03a      	b.n	8006810 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	2202      	movs	r2, #2
 80067a2:	4013      	ands	r3, r2
 80067a4:	d0e2      	beq.n	800676c <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	69fa      	ldr	r2, [r7, #28]
 80067ac:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	69ba      	ldr	r2, [r7, #24]
 80067b4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	689a      	ldr	r2, [r3, #8]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2180      	movs	r1, #128	; 0x80
 80067c2:	0089      	lsls	r1, r1, #2
 80067c4:	430a      	orrs	r2, r1
 80067c6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	689a      	ldr	r2, [r3, #8]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2180      	movs	r1, #128	; 0x80
 80067d4:	0189      	lsls	r1, r1, #6
 80067d6:	430a      	orrs	r2, r1
 80067d8:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80067da:	4b13      	ldr	r3, [pc, #76]	; (8006828 <HAL_RTC_SetAlarm_IT+0x294>)
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	4b12      	ldr	r3, [pc, #72]	; (8006828 <HAL_RTC_SetAlarm_IT+0x294>)
 80067e0:	2180      	movs	r1, #128	; 0x80
 80067e2:	0289      	lsls	r1, r1, #10
 80067e4:	430a      	orrs	r2, r1
 80067e6:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80067e8:	4b0f      	ldr	r3, [pc, #60]	; (8006828 <HAL_RTC_SetAlarm_IT+0x294>)
 80067ea:	689a      	ldr	r2, [r3, #8]
 80067ec:	4b0e      	ldr	r3, [pc, #56]	; (8006828 <HAL_RTC_SetAlarm_IT+0x294>)
 80067ee:	2180      	movs	r1, #128	; 0x80
 80067f0:	0289      	lsls	r1, r1, #10
 80067f2:	430a      	orrs	r2, r1
 80067f4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	22ff      	movs	r2, #255	; 0xff
 80067fc:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2221      	movs	r2, #33	; 0x21
 8006802:	2101      	movs	r1, #1
 8006804:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2220      	movs	r2, #32
 800680a:	2100      	movs	r1, #0
 800680c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	0018      	movs	r0, r3
 8006812:	46bd      	mov	sp, r7
 8006814:	b009      	add	sp, #36	; 0x24
 8006816:	bd90      	pop	{r4, r7, pc}
 8006818:	fffffeff 	.word	0xfffffeff
 800681c:	fffffe7f 	.word	0xfffffe7f
 8006820:	fffffdff 	.word	0xfffffdff
 8006824:	fffffd7f 	.word	0xfffffd7f
 8006828:	40010400 	.word	0x40010400

0800682c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	689a      	ldr	r2, [r3, #8]
 800683a:	2380      	movs	r3, #128	; 0x80
 800683c:	015b      	lsls	r3, r3, #5
 800683e:	4013      	ands	r3, r2
 8006840:	d014      	beq.n	800686c <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68da      	ldr	r2, [r3, #12]
 8006848:	2380      	movs	r3, #128	; 0x80
 800684a:	005b      	lsls	r3, r3, #1
 800684c:	4013      	ands	r3, r2
 800684e:	d00d      	beq.n	800686c <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	0018      	movs	r0, r3
 8006854:	f7fc fa08 	bl	8002c68 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	22ff      	movs	r2, #255	; 0xff
 8006860:	401a      	ands	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4915      	ldr	r1, [pc, #84]	; (80068bc <HAL_RTC_AlarmIRQHandler+0x90>)
 8006868:	430a      	orrs	r2, r1
 800686a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	689a      	ldr	r2, [r3, #8]
 8006872:	2380      	movs	r3, #128	; 0x80
 8006874:	019b      	lsls	r3, r3, #6
 8006876:	4013      	ands	r3, r2
 8006878:	d014      	beq.n	80068a4 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68da      	ldr	r2, [r3, #12]
 8006880:	2380      	movs	r3, #128	; 0x80
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4013      	ands	r3, r2
 8006886:	d00d      	beq.n	80068a4 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	0018      	movs	r0, r3
 800688c:	f7fc fa04 	bl	8002c98 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	22ff      	movs	r2, #255	; 0xff
 8006898:	401a      	ands	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4908      	ldr	r1, [pc, #32]	; (80068c0 <HAL_RTC_AlarmIRQHandler+0x94>)
 80068a0:	430a      	orrs	r2, r1
 80068a2:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80068a4:	4b07      	ldr	r3, [pc, #28]	; (80068c4 <HAL_RTC_AlarmIRQHandler+0x98>)
 80068a6:	2280      	movs	r2, #128	; 0x80
 80068a8:	0292      	lsls	r2, r2, #10
 80068aa:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2221      	movs	r2, #33	; 0x21
 80068b0:	2101      	movs	r1, #1
 80068b2:	5499      	strb	r1, [r3, r2]
}
 80068b4:	46c0      	nop			; (mov r8, r8)
 80068b6:	46bd      	mov	sp, r7
 80068b8:	b002      	add	sp, #8
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	fffffe7f 	.word	0xfffffe7f
 80068c0:	fffffd7f 	.word	0xfffffd7f
 80068c4:	40010400 	.word	0x40010400

080068c8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68da      	ldr	r2, [r3, #12]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	21a0      	movs	r1, #160	; 0xa0
 80068dc:	438a      	bics	r2, r1
 80068de:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80068e0:	f7fd fd18 	bl	8004314 <HAL_GetTick>
 80068e4:	0003      	movs	r3, r0
 80068e6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80068e8:	e00a      	b.n	8006900 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80068ea:	f7fd fd13 	bl	8004314 <HAL_GetTick>
 80068ee:	0002      	movs	r2, r0
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	1ad2      	subs	r2, r2, r3
 80068f4:	23fa      	movs	r3, #250	; 0xfa
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d901      	bls.n	8006900 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80068fc:	2303      	movs	r3, #3
 80068fe:	e006      	b.n	800690e <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	2220      	movs	r2, #32
 8006908:	4013      	ands	r3, r2
 800690a:	d0ee      	beq.n	80068ea <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	0018      	movs	r0, r3
 8006910:	46bd      	mov	sp, r7
 8006912:	b004      	add	sp, #16
 8006914:	bd80      	pop	{r7, pc}

08006916 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b084      	sub	sp, #16
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	2240      	movs	r2, #64	; 0x40
 8006926:	4013      	ands	r3, r2
 8006928:	d11a      	bne.n	8006960 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2201      	movs	r2, #1
 8006930:	4252      	negs	r2, r2
 8006932:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006934:	f7fd fcee 	bl	8004314 <HAL_GetTick>
 8006938:	0003      	movs	r3, r0
 800693a:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800693c:	e00a      	b.n	8006954 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800693e:	f7fd fce9 	bl	8004314 <HAL_GetTick>
 8006942:	0002      	movs	r2, r0
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	1ad2      	subs	r2, r2, r3
 8006948:	23fa      	movs	r3, #250	; 0xfa
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	429a      	cmp	r2, r3
 800694e:	d901      	bls.n	8006954 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e006      	b.n	8006962 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	2240      	movs	r2, #64	; 0x40
 800695c:	4013      	ands	r3, r2
 800695e:	d0ee      	beq.n	800693e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	0018      	movs	r0, r3
 8006964:	46bd      	mov	sp, r7
 8006966:	b004      	add	sp, #16
 8006968:	bd80      	pop	{r7, pc}

0800696a <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b084      	sub	sp, #16
 800696e:	af00      	add	r7, sp, #0
 8006970:	0002      	movs	r2, r0
 8006972:	1dfb      	adds	r3, r7, #7
 8006974:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8006976:	2300      	movs	r3, #0
 8006978:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800697a:	230b      	movs	r3, #11
 800697c:	18fb      	adds	r3, r7, r3
 800697e:	1dfa      	adds	r2, r7, #7
 8006980:	7812      	ldrb	r2, [r2, #0]
 8006982:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8006984:	e008      	b.n	8006998 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3301      	adds	r3, #1
 800698a:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800698c:	220b      	movs	r2, #11
 800698e:	18bb      	adds	r3, r7, r2
 8006990:	18ba      	adds	r2, r7, r2
 8006992:	7812      	ldrb	r2, [r2, #0]
 8006994:	3a0a      	subs	r2, #10
 8006996:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8006998:	230b      	movs	r3, #11
 800699a:	18fb      	adds	r3, r7, r3
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	2b09      	cmp	r3, #9
 80069a0:	d8f1      	bhi.n	8006986 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	011b      	lsls	r3, r3, #4
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	230b      	movs	r3, #11
 80069ac:	18fb      	adds	r3, r7, r3
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	b2db      	uxtb	r3, r3
}
 80069b4:	0018      	movs	r0, r3
 80069b6:	46bd      	mov	sp, r7
 80069b8:	b004      	add	sp, #16
 80069ba:	bd80      	pop	{r7, pc}

080069bc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	0002      	movs	r2, r0
 80069c4:	1dfb      	adds	r3, r7, #7
 80069c6:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80069c8:	1dfb      	adds	r3, r7, #7
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	091b      	lsrs	r3, r3, #4
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	001a      	movs	r2, r3
 80069d2:	0013      	movs	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	189b      	adds	r3, r3, r2
 80069d8:	005b      	lsls	r3, r3, #1
 80069da:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	1dfb      	adds	r3, r7, #7
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	210f      	movs	r1, #15
 80069e6:	400b      	ands	r3, r1
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	18d3      	adds	r3, r2, r3
 80069ec:	b2db      	uxtb	r3, r3
}
 80069ee:	0018      	movs	r0, r3
 80069f0:	46bd      	mov	sp, r7
 80069f2:	b004      	add	sp, #16
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <HAL_RTCEx_SetSmoothCalib>:
  *         must be equal to SMOOTHCALIB_PLUSPULSES_RESET and the field
  *         SmoothCalibMinusPulsesValue mut be equal to 0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef *hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b086      	sub	sp, #24
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	60f8      	str	r0, [r7, #12]
 80069fe:	60b9      	str	r1, [r7, #8]
 8006a00:	607a      	str	r2, [r7, #4]
 8006a02:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2220      	movs	r2, #32
 8006a08:	5c9b      	ldrb	r3, [r3, r2]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d101      	bne.n	8006a12 <HAL_RTCEx_SetSmoothCalib+0x1c>
 8006a0e:	2302      	movs	r3, #2
 8006a10:	e04f      	b.n	8006ab2 <HAL_RTCEx_SetSmoothCalib+0xbc>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2220      	movs	r2, #32
 8006a16:	2101      	movs	r1, #1
 8006a18:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2221      	movs	r2, #33	; 0x21
 8006a1e:	2102      	movs	r1, #2
 8006a20:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	22ca      	movs	r2, #202	; 0xca
 8006a28:	625a      	str	r2, [r3, #36]	; 0x24
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2253      	movs	r2, #83	; 0x53
 8006a30:	625a      	str	r2, [r3, #36]	; 0x24

  /* check if a calibration is pending*/
  if ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68da      	ldr	r2, [r3, #12]
 8006a38:	2380      	movs	r3, #128	; 0x80
 8006a3a:	025b      	lsls	r3, r3, #9
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	d022      	beq.n	8006a86 <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 8006a40:	f7fd fc68 	bl	8004314 <HAL_GetTick>
 8006a44:	0003      	movs	r3, r0
 8006a46:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 8006a48:	e016      	b.n	8006a78 <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a4a:	f7fd fc63 	bl	8004314 <HAL_GetTick>
 8006a4e:	0002      	movs	r2, r0
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	1ad2      	subs	r2, r2, r3
 8006a54:	23fa      	movs	r3, #250	; 0xfa
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d90d      	bls.n	8006a78 <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	22ff      	movs	r2, #255	; 0xff
 8006a62:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2221      	movs	r2, #33	; 0x21
 8006a68:	2103      	movs	r1, #3
 8006a6a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2220      	movs	r2, #32
 8006a70:	2100      	movs	r1, #0
 8006a72:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e01c      	b.n	8006ab2 <HAL_RTCEx_SetSmoothCalib+0xbc>
    while ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68da      	ldr	r2, [r3, #12]
 8006a7e:	2380      	movs	r3, #128	; 0x80
 8006a80:	025b      	lsls	r3, r3, #9
 8006a82:	4013      	ands	r3, r2
 8006a84:	d1e1      	bne.n	8006a4a <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 8006a86:	68ba      	ldr	r2, [r7, #8]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	431a      	orrs	r2, r3
 8006a8c:	0011      	movs	r1, r2
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	683a      	ldr	r2, [r7, #0]
 8006a94:	430a      	orrs	r2, r1
 8006a96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	22ff      	movs	r2, #255	; 0xff
 8006a9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2221      	movs	r2, #33	; 0x21
 8006aa4:	2101      	movs	r1, #1
 8006aa6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2220      	movs	r2, #32
 8006aac:	2100      	movs	r1, #0
 8006aae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	0018      	movs	r0, r3
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	b006      	add	sp, #24
 8006ab8:	bd80      	pop	{r7, pc}
	...

08006abc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d101      	bne.n	8006ace <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e059      	b.n	8006b82 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2251      	movs	r2, #81	; 0x51
 8006ad8:	5c9b      	ldrb	r3, [r3, r2]
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d107      	bne.n	8006af0 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2250      	movs	r2, #80	; 0x50
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	0018      	movs	r0, r3
 8006aec:	f7fc ffd4 	bl	8003a98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2251      	movs	r2, #81	; 0x51
 8006af4:	2102      	movs	r1, #2
 8006af6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2140      	movs	r1, #64	; 0x40
 8006b04:	438a      	bics	r2, r1
 8006b06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	431a      	orrs	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	431a      	orrs	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	431a      	orrs	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	431a      	orrs	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6999      	ldr	r1, [r3, #24]
 8006b28:	2380      	movs	r3, #128	; 0x80
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	400b      	ands	r3, r1
 8006b2e:	431a      	orrs	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	69db      	ldr	r3, [r3, #28]
 8006b34:	431a      	orrs	r2, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	0011      	movs	r1, r2
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	430a      	orrs	r2, r1
 8006b48:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	0c1b      	lsrs	r3, r3, #16
 8006b50:	2204      	movs	r2, #4
 8006b52:	4013      	ands	r3, r2
 8006b54:	0019      	movs	r1, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	69da      	ldr	r2, [r3, #28]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4907      	ldr	r1, [pc, #28]	; (8006b8c <HAL_SPI_Init+0xd0>)
 8006b6e:	400a      	ands	r2, r1
 8006b70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2251      	movs	r2, #81	; 0x51
 8006b7c:	2101      	movs	r1, #1
 8006b7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	0018      	movs	r0, r3
 8006b84:	46bd      	mov	sp, r7
 8006b86:	b002      	add	sp, #8
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	46c0      	nop			; (mov r8, r8)
 8006b8c:	fffff7ff 	.word	0xfffff7ff

08006b90 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b088      	sub	sp, #32
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	603b      	str	r3, [r7, #0]
 8006b9c:	1dbb      	adds	r3, r7, #6
 8006b9e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ba0:	231f      	movs	r3, #31
 8006ba2:	18fb      	adds	r3, r7, r3
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2250      	movs	r2, #80	; 0x50
 8006bac:	5c9b      	ldrb	r3, [r3, r2]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d101      	bne.n	8006bb6 <HAL_SPI_Transmit+0x26>
 8006bb2:	2302      	movs	r3, #2
 8006bb4:	e136      	b.n	8006e24 <HAL_SPI_Transmit+0x294>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2250      	movs	r2, #80	; 0x50
 8006bba:	2101      	movs	r1, #1
 8006bbc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bbe:	f7fd fba9 	bl	8004314 <HAL_GetTick>
 8006bc2:	0003      	movs	r3, r0
 8006bc4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006bc6:	2316      	movs	r3, #22
 8006bc8:	18fb      	adds	r3, r7, r3
 8006bca:	1dba      	adds	r2, r7, #6
 8006bcc:	8812      	ldrh	r2, [r2, #0]
 8006bce:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2251      	movs	r2, #81	; 0x51
 8006bd4:	5c9b      	ldrb	r3, [r3, r2]
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d004      	beq.n	8006be6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006bdc:	231f      	movs	r3, #31
 8006bde:	18fb      	adds	r3, r7, r3
 8006be0:	2202      	movs	r2, #2
 8006be2:	701a      	strb	r2, [r3, #0]
    goto error;
 8006be4:	e113      	b.n	8006e0e <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d003      	beq.n	8006bf4 <HAL_SPI_Transmit+0x64>
 8006bec:	1dbb      	adds	r3, r7, #6
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d104      	bne.n	8006bfe <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006bf4:	231f      	movs	r3, #31
 8006bf6:	18fb      	adds	r3, r7, r3
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	701a      	strb	r2, [r3, #0]
    goto error;
 8006bfc:	e107      	b.n	8006e0e <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2251      	movs	r2, #81	; 0x51
 8006c02:	2103      	movs	r1, #3
 8006c04:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	1dba      	adds	r2, r7, #6
 8006c16:	8812      	ldrh	r2, [r2, #0]
 8006c18:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	1dba      	adds	r2, r7, #6
 8006c1e:	8812      	ldrh	r2, [r2, #0]
 8006c20:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	689a      	ldr	r2, [r3, #8]
 8006c44:	2380      	movs	r3, #128	; 0x80
 8006c46:	021b      	lsls	r3, r3, #8
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d108      	bne.n	8006c5e <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2180      	movs	r1, #128	; 0x80
 8006c58:	01c9      	lsls	r1, r1, #7
 8006c5a:	430a      	orrs	r2, r1
 8006c5c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2240      	movs	r2, #64	; 0x40
 8006c66:	4013      	ands	r3, r2
 8006c68:	2b40      	cmp	r3, #64	; 0x40
 8006c6a:	d007      	beq.n	8006c7c <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2140      	movs	r1, #64	; 0x40
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	68da      	ldr	r2, [r3, #12]
 8006c80:	2380      	movs	r3, #128	; 0x80
 8006c82:	011b      	lsls	r3, r3, #4
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d14e      	bne.n	8006d26 <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d004      	beq.n	8006c9a <HAL_SPI_Transmit+0x10a>
 8006c90:	2316      	movs	r3, #22
 8006c92:	18fb      	adds	r3, r7, r3
 8006c94:	881b      	ldrh	r3, [r3, #0]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d13f      	bne.n	8006d1a <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9e:	881a      	ldrh	r2, [r3, #0]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006caa:	1c9a      	adds	r2, r3, #2
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006cbe:	e02c      	b.n	8006d1a <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	4013      	ands	r3, r2
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d112      	bne.n	8006cf4 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd2:	881a      	ldrh	r2, [r3, #0]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cde:	1c9a      	adds	r2, r3, #2
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	3b01      	subs	r3, #1
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	86da      	strh	r2, [r3, #54]	; 0x36
 8006cf2:	e012      	b.n	8006d1a <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cf4:	f7fd fb0e 	bl	8004314 <HAL_GetTick>
 8006cf8:	0002      	movs	r2, r0
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	683a      	ldr	r2, [r7, #0]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d802      	bhi.n	8006d0a <HAL_SPI_Transmit+0x17a>
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	3301      	adds	r3, #1
 8006d08:	d102      	bne.n	8006d10 <HAL_SPI_Transmit+0x180>
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d104      	bne.n	8006d1a <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 8006d10:	231f      	movs	r3, #31
 8006d12:	18fb      	adds	r3, r7, r3
 8006d14:	2203      	movs	r2, #3
 8006d16:	701a      	strb	r2, [r3, #0]
          goto error;
 8006d18:	e079      	b.n	8006e0e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1cd      	bne.n	8006cc0 <HAL_SPI_Transmit+0x130>
 8006d24:	e04f      	b.n	8006dc6 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d004      	beq.n	8006d38 <HAL_SPI_Transmit+0x1a8>
 8006d2e:	2316      	movs	r3, #22
 8006d30:	18fb      	adds	r3, r7, r3
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d141      	bne.n	8006dbc <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	330c      	adds	r3, #12
 8006d42:	7812      	ldrb	r2, [r2, #0]
 8006d44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4a:	1c5a      	adds	r2, r3, #1
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	3b01      	subs	r3, #1
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006d5e:	e02d      	b.n	8006dbc <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	2202      	movs	r2, #2
 8006d68:	4013      	ands	r3, r2
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d113      	bne.n	8006d96 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	330c      	adds	r3, #12
 8006d78:	7812      	ldrb	r2, [r2, #0]
 8006d7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d80:	1c5a      	adds	r2, r3, #1
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	b29a      	uxth	r2, r3
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	86da      	strh	r2, [r3, #54]	; 0x36
 8006d94:	e012      	b.n	8006dbc <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d96:	f7fd fabd 	bl	8004314 <HAL_GetTick>
 8006d9a:	0002      	movs	r2, r0
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d802      	bhi.n	8006dac <HAL_SPI_Transmit+0x21c>
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	3301      	adds	r3, #1
 8006daa:	d102      	bne.n	8006db2 <HAL_SPI_Transmit+0x222>
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d104      	bne.n	8006dbc <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8006db2:	231f      	movs	r3, #31
 8006db4:	18fb      	adds	r3, r7, r3
 8006db6:	2203      	movs	r2, #3
 8006db8:	701a      	strb	r2, [r3, #0]
          goto error;
 8006dba:	e028      	b.n	8006e0e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1cc      	bne.n	8006d60 <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006dc6:	69ba      	ldr	r2, [r7, #24]
 8006dc8:	6839      	ldr	r1, [r7, #0]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	0018      	movs	r0, r3
 8006dce:	f000 fa99 	bl	8007304 <SPI_EndRxTxTransaction>
 8006dd2:	1e03      	subs	r3, r0, #0
 8006dd4:	d002      	beq.n	8006ddc <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2220      	movs	r2, #32
 8006dda:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10a      	bne.n	8006dfa <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006de4:	2300      	movs	r3, #0
 8006de6:	613b      	str	r3, [r7, #16]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	613b      	str	r3, [r7, #16]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	613b      	str	r3, [r7, #16]
 8006df8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d004      	beq.n	8006e0c <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8006e02:	231f      	movs	r3, #31
 8006e04:	18fb      	adds	r3, r7, r3
 8006e06:	2201      	movs	r2, #1
 8006e08:	701a      	strb	r2, [r3, #0]
 8006e0a:	e000      	b.n	8006e0e <HAL_SPI_Transmit+0x27e>
  }

error:
 8006e0c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2251      	movs	r2, #81	; 0x51
 8006e12:	2101      	movs	r1, #1
 8006e14:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2250      	movs	r2, #80	; 0x50
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006e1e:	231f      	movs	r3, #31
 8006e20:	18fb      	adds	r3, r7, r3
 8006e22:	781b      	ldrb	r3, [r3, #0]
}
 8006e24:	0018      	movs	r0, r3
 8006e26:	46bd      	mov	sp, r7
 8006e28:	b008      	add	sp, #32
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	1dbb      	adds	r3, r7, #6
 8006e38:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e3a:	2317      	movs	r3, #23
 8006e3c:	18fb      	adds	r3, r7, r3
 8006e3e:	2200      	movs	r2, #0
 8006e40:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2250      	movs	r2, #80	; 0x50
 8006e46:	5c9b      	ldrb	r3, [r3, r2]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d101      	bne.n	8006e50 <HAL_SPI_Transmit_IT+0x24>
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	e072      	b.n	8006f36 <HAL_SPI_Transmit_IT+0x10a>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2250      	movs	r2, #80	; 0x50
 8006e54:	2101      	movs	r1, #1
 8006e56:	5499      	strb	r1, [r3, r2]

  if ((pData == NULL) || (Size == 0U))
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d003      	beq.n	8006e66 <HAL_SPI_Transmit_IT+0x3a>
 8006e5e:	1dbb      	adds	r3, r7, #6
 8006e60:	881b      	ldrh	r3, [r3, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d104      	bne.n	8006e70 <HAL_SPI_Transmit_IT+0x44>
  {
    errorcode = HAL_ERROR;
 8006e66:	2317      	movs	r3, #23
 8006e68:	18fb      	adds	r3, r7, r3
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	701a      	strb	r2, [r3, #0]
    goto error;
 8006e6e:	e05b      	b.n	8006f28 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2251      	movs	r2, #81	; 0x51
 8006e74:	5c9b      	ldrb	r3, [r3, r2]
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d004      	beq.n	8006e86 <HAL_SPI_Transmit_IT+0x5a>
  {
    errorcode = HAL_BUSY;
 8006e7c:	2317      	movs	r3, #23
 8006e7e:	18fb      	adds	r3, r7, r3
 8006e80:	2202      	movs	r2, #2
 8006e82:	701a      	strb	r2, [r3, #0]
    goto error;
 8006e84:	e050      	b.n	8006f28 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2251      	movs	r2, #81	; 0x51
 8006e8a:	2103      	movs	r1, #3
 8006e8c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	68ba      	ldr	r2, [r7, #8]
 8006e98:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	1dba      	adds	r2, r7, #6
 8006e9e:	8812      	ldrh	r2, [r2, #0]
 8006ea0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	1dba      	adds	r2, r7, #6
 8006ea6:	8812      	ldrh	r2, [r2, #0]
 8006ea8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d003      	beq.n	8006ed2 <HAL_SPI_Transmit_IT+0xa6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	4a1c      	ldr	r2, [pc, #112]	; (8006f40 <HAL_SPI_Transmit_IT+0x114>)
 8006ece:	645a      	str	r2, [r3, #68]	; 0x44
 8006ed0:	e002      	b.n	8006ed8 <HAL_SPI_Transmit_IT+0xac>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	4a1b      	ldr	r2, [pc, #108]	; (8006f44 <HAL_SPI_Transmit_IT+0x118>)
 8006ed6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	689a      	ldr	r2, [r3, #8]
 8006edc:	2380      	movs	r3, #128	; 0x80
 8006ede:	021b      	lsls	r3, r3, #8
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d108      	bne.n	8006ef6 <HAL_SPI_Transmit_IT+0xca>
  {
    SPI_1LINE_TX(hspi);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2180      	movs	r1, #128	; 0x80
 8006ef0:	01c9      	lsls	r1, r1, #7
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	21a0      	movs	r1, #160	; 0xa0
 8006f02:	430a      	orrs	r2, r1
 8006f04:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2240      	movs	r2, #64	; 0x40
 8006f0e:	4013      	ands	r3, r2
 8006f10:	2b40      	cmp	r3, #64	; 0x40
 8006f12:	d008      	beq.n	8006f26 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2140      	movs	r1, #64	; 0x40
 8006f20:	430a      	orrs	r2, r1
 8006f22:	601a      	str	r2, [r3, #0]
 8006f24:	e000      	b.n	8006f28 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8006f26:	46c0      	nop			; (mov r8, r8)
  __HAL_UNLOCK(hspi);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2250      	movs	r2, #80	; 0x50
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006f30:	2317      	movs	r3, #23
 8006f32:	18fb      	adds	r3, r7, r3
 8006f34:	781b      	ldrb	r3, [r3, #0]
}
 8006f36:	0018      	movs	r0, r3
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	b006      	add	sp, #24
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	46c0      	nop			; (mov r8, r8)
 8006f40:	080071df 	.word	0x080071df
 8006f44:	08007197 	.word	0x08007197

08006f48 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b088      	sub	sp, #32
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	099b      	lsrs	r3, r3, #6
 8006f64:	001a      	movs	r2, r3
 8006f66:	2301      	movs	r3, #1
 8006f68:	4013      	ands	r3, r2
 8006f6a:	d10f      	bne.n	8006f8c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006f72:	d00b      	beq.n	8006f8c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	099b      	lsrs	r3, r3, #6
 8006f78:	001a      	movs	r2, r3
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	d005      	beq.n	8006f8c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	0010      	movs	r0, r2
 8006f88:	4798      	blx	r3
    return;
 8006f8a:	e0d6      	b.n	800713a <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	085b      	lsrs	r3, r3, #1
 8006f90:	001a      	movs	r2, r3
 8006f92:	2301      	movs	r3, #1
 8006f94:	4013      	ands	r3, r2
 8006f96:	d00b      	beq.n	8006fb0 <HAL_SPI_IRQHandler+0x68>
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	09db      	lsrs	r3, r3, #7
 8006f9c:	001a      	movs	r2, r3
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	d005      	beq.n	8006fb0 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	0010      	movs	r0, r2
 8006fac:	4798      	blx	r3
    return;
 8006fae:	e0c4      	b.n	800713a <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	095b      	lsrs	r3, r3, #5
 8006fb4:	001a      	movs	r2, r3
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	4013      	ands	r3, r2
 8006fba:	d10c      	bne.n	8006fd6 <HAL_SPI_IRQHandler+0x8e>
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	099b      	lsrs	r3, r3, #6
 8006fc0:	001a      	movs	r2, r3
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	d106      	bne.n	8006fd6 <HAL_SPI_IRQHandler+0x8e>
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	0a1b      	lsrs	r3, r3, #8
 8006fcc:	001a      	movs	r2, r3
 8006fce:	2301      	movs	r3, #1
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	d100      	bne.n	8006fd6 <HAL_SPI_IRQHandler+0x8e>
 8006fd4:	e0b1      	b.n	800713a <HAL_SPI_IRQHandler+0x1f2>
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	095b      	lsrs	r3, r3, #5
 8006fda:	001a      	movs	r2, r3
 8006fdc:	2301      	movs	r3, #1
 8006fde:	4013      	ands	r3, r2
 8006fe0:	d100      	bne.n	8006fe4 <HAL_SPI_IRQHandler+0x9c>
 8006fe2:	e0aa      	b.n	800713a <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	099b      	lsrs	r3, r3, #6
 8006fe8:	001a      	movs	r2, r3
 8006fea:	2301      	movs	r3, #1
 8006fec:	4013      	ands	r3, r2
 8006fee:	d023      	beq.n	8007038 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2251      	movs	r2, #81	; 0x51
 8006ff4:	5c9b      	ldrb	r3, [r3, r2]
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b03      	cmp	r3, #3
 8006ffa:	d011      	beq.n	8007020 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007000:	2204      	movs	r2, #4
 8007002:	431a      	orrs	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007008:	2300      	movs	r3, #0
 800700a:	617b      	str	r3, [r7, #20]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	617b      	str	r3, [r7, #20]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	617b      	str	r3, [r7, #20]
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	e00b      	b.n	8007038 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007020:	2300      	movs	r3, #0
 8007022:	613b      	str	r3, [r7, #16]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	613b      	str	r3, [r7, #16]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	613b      	str	r3, [r7, #16]
 8007034:	693b      	ldr	r3, [r7, #16]
        return;
 8007036:	e080      	b.n	800713a <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	095b      	lsrs	r3, r3, #5
 800703c:	001a      	movs	r2, r3
 800703e:	2301      	movs	r3, #1
 8007040:	4013      	ands	r3, r2
 8007042:	d014      	beq.n	800706e <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007048:	2201      	movs	r2, #1
 800704a:	431a      	orrs	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007050:	2300      	movs	r3, #0
 8007052:	60fb      	str	r3, [r7, #12]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	60fb      	str	r3, [r7, #12]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2140      	movs	r1, #64	; 0x40
 8007068:	438a      	bics	r2, r1
 800706a:	601a      	str	r2, [r3, #0]
 800706c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	0a1b      	lsrs	r3, r3, #8
 8007072:	001a      	movs	r2, r3
 8007074:	2301      	movs	r3, #1
 8007076:	4013      	ands	r3, r2
 8007078:	d00c      	beq.n	8007094 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800707e:	2208      	movs	r2, #8
 8007080:	431a      	orrs	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007086:	2300      	movs	r3, #0
 8007088:	60bb      	str	r3, [r7, #8]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	60bb      	str	r3, [r7, #8]
 8007092:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007098:	2b00      	cmp	r3, #0
 800709a:	d04d      	beq.n	8007138 <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	685a      	ldr	r2, [r3, #4]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	21e0      	movs	r1, #224	; 0xe0
 80070a8:	438a      	bics	r2, r1
 80070aa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2251      	movs	r2, #81	; 0x51
 80070b0:	2101      	movs	r1, #1
 80070b2:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	2202      	movs	r2, #2
 80070b8:	4013      	ands	r3, r2
 80070ba:	d103      	bne.n	80070c4 <HAL_SPI_IRQHandler+0x17c>
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	2201      	movs	r2, #1
 80070c0:	4013      	ands	r3, r2
 80070c2:	d032      	beq.n	800712a <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	685a      	ldr	r2, [r3, #4]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2103      	movs	r1, #3
 80070d0:	438a      	bics	r2, r1
 80070d2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d010      	beq.n	80070fe <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070e0:	4a17      	ldr	r2, [pc, #92]	; (8007140 <HAL_SPI_IRQHandler+0x1f8>)
 80070e2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070e8:	0018      	movs	r0, r3
 80070ea:	f7fd fd43 	bl	8004b74 <HAL_DMA_Abort_IT>
 80070ee:	1e03      	subs	r3, r0, #0
 80070f0:	d005      	beq.n	80070fe <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070f6:	2240      	movs	r2, #64	; 0x40
 80070f8:	431a      	orrs	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007102:	2b00      	cmp	r3, #0
 8007104:	d016      	beq.n	8007134 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800710a:	4a0d      	ldr	r2, [pc, #52]	; (8007140 <HAL_SPI_IRQHandler+0x1f8>)
 800710c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007112:	0018      	movs	r0, r3
 8007114:	f7fd fd2e 	bl	8004b74 <HAL_DMA_Abort_IT>
 8007118:	1e03      	subs	r3, r0, #0
 800711a:	d00b      	beq.n	8007134 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007120:	2240      	movs	r2, #64	; 0x40
 8007122:	431a      	orrs	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007128:	e004      	b.n	8007134 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	0018      	movs	r0, r3
 800712e:	f000 f809 	bl	8007144 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007132:	e000      	b.n	8007136 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8007134:	46c0      	nop			; (mov r8, r8)
    return;
 8007136:	46c0      	nop			; (mov r8, r8)
 8007138:	46c0      	nop			; (mov r8, r8)
  }
}
 800713a:	46bd      	mov	sp, r7
 800713c:	b008      	add	sp, #32
 800713e:	bd80      	pop	{r7, pc}
 8007140:	0800716d 	.word	0x0800716d

08007144 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800714c:	46c0      	nop			; (mov r8, r8)
 800714e:	46bd      	mov	sp, r7
 8007150:	b002      	add	sp, #8
 8007152:	bd80      	pop	{r7, pc}

08007154 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2251      	movs	r2, #81	; 0x51
 8007160:	5c9b      	ldrb	r3, [r3, r2]
 8007162:	b2db      	uxtb	r3, r3
}
 8007164:	0018      	movs	r0, r3
 8007166:	46bd      	mov	sp, r7
 8007168:	b002      	add	sp, #8
 800716a:	bd80      	pop	{r7, pc}

0800716c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007178:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	0018      	movs	r0, r3
 800718a:	f7ff ffdb 	bl	8007144 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800718e:	46c0      	nop			; (mov r8, r8)
 8007190:	46bd      	mov	sp, r7
 8007192:	b004      	add	sp, #16
 8007194:	bd80      	pop	{r7, pc}

08007196 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b082      	sub	sp, #8
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	330c      	adds	r3, #12
 80071a8:	7812      	ldrb	r2, [r2, #0]
 80071aa:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b0:	1c5a      	adds	r2, r3, #1
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	3b01      	subs	r3, #1
 80071be:	b29a      	uxth	r2, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d103      	bne.n	80071d6 <SPI_TxISR_8BIT+0x40>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	0018      	movs	r0, r3
 80071d2:	f000 f8d5 	bl	8007380 <SPI_CloseTx_ISR>
  }
}
 80071d6:	46c0      	nop			; (mov r8, r8)
 80071d8:	46bd      	mov	sp, r7
 80071da:	b002      	add	sp, #8
 80071dc:	bd80      	pop	{r7, pc}

080071de <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b082      	sub	sp, #8
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ea:	881a      	ldrh	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f6:	1c9a      	adds	r2, r3, #2
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007200:	b29b      	uxth	r3, r3
 8007202:	3b01      	subs	r3, #1
 8007204:	b29a      	uxth	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800720e:	b29b      	uxth	r3, r3
 8007210:	2b00      	cmp	r3, #0
 8007212:	d103      	bne.n	800721c <SPI_TxISR_16BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	0018      	movs	r0, r3
 8007218:	f000 f8b2 	bl	8007380 <SPI_CloseTx_ISR>
  }
}
 800721c:	46c0      	nop			; (mov r8, r8)
 800721e:	46bd      	mov	sp, r7
 8007220:	b002      	add	sp, #8
 8007222:	bd80      	pop	{r7, pc}

08007224 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	603b      	str	r3, [r7, #0]
 8007230:	1dfb      	adds	r3, r7, #7
 8007232:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007234:	e050      	b.n	80072d8 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	3301      	adds	r3, #1
 800723a:	d04d      	beq.n	80072d8 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800723c:	f7fd f86a 	bl	8004314 <HAL_GetTick>
 8007240:	0002      	movs	r2, r0
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	683a      	ldr	r2, [r7, #0]
 8007248:	429a      	cmp	r2, r3
 800724a:	d902      	bls.n	8007252 <SPI_WaitFlagStateUntilTimeout+0x2e>
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d142      	bne.n	80072d8 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	685a      	ldr	r2, [r3, #4]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	21e0      	movs	r1, #224	; 0xe0
 800725e:	438a      	bics	r2, r1
 8007260:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	685a      	ldr	r2, [r3, #4]
 8007266:	2382      	movs	r3, #130	; 0x82
 8007268:	005b      	lsls	r3, r3, #1
 800726a:	429a      	cmp	r2, r3
 800726c:	d113      	bne.n	8007296 <SPI_WaitFlagStateUntilTimeout+0x72>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	689a      	ldr	r2, [r3, #8]
 8007272:	2380      	movs	r3, #128	; 0x80
 8007274:	021b      	lsls	r3, r3, #8
 8007276:	429a      	cmp	r2, r3
 8007278:	d005      	beq.n	8007286 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	689a      	ldr	r2, [r3, #8]
 800727e:	2380      	movs	r3, #128	; 0x80
 8007280:	00db      	lsls	r3, r3, #3
 8007282:	429a      	cmp	r2, r3
 8007284:	d107      	bne.n	8007296 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2140      	movs	r1, #64	; 0x40
 8007292:	438a      	bics	r2, r1
 8007294:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800729a:	2380      	movs	r3, #128	; 0x80
 800729c:	019b      	lsls	r3, r3, #6
 800729e:	429a      	cmp	r2, r3
 80072a0:	d110      	bne.n	80072c4 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4914      	ldr	r1, [pc, #80]	; (8007300 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 80072ae:	400a      	ands	r2, r1
 80072b0:	601a      	str	r2, [r3, #0]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2180      	movs	r1, #128	; 0x80
 80072be:	0189      	lsls	r1, r1, #6
 80072c0:	430a      	orrs	r2, r1
 80072c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2251      	movs	r2, #81	; 0x51
 80072c8:	2101      	movs	r1, #1
 80072ca:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2250      	movs	r2, #80	; 0x50
 80072d0:	2100      	movs	r1, #0
 80072d2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e00f      	b.n	80072f8 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	68ba      	ldr	r2, [r7, #8]
 80072e0:	4013      	ands	r3, r2
 80072e2:	68ba      	ldr	r2, [r7, #8]
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	425a      	negs	r2, r3
 80072e8:	4153      	adcs	r3, r2
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	001a      	movs	r2, r3
 80072ee:	1dfb      	adds	r3, r7, #7
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d19f      	bne.n	8007236 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	0018      	movs	r0, r3
 80072fa:	46bd      	mov	sp, r7
 80072fc:	b004      	add	sp, #16
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	ffffdfff 	.word	0xffffdfff

08007304 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b086      	sub	sp, #24
 8007308:	af02      	add	r7, sp, #8
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	685a      	ldr	r2, [r3, #4]
 8007314:	2382      	movs	r3, #130	; 0x82
 8007316:	005b      	lsls	r3, r3, #1
 8007318:	429a      	cmp	r2, r3
 800731a:	d112      	bne.n	8007342 <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800731c:	68ba      	ldr	r2, [r7, #8]
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	0013      	movs	r3, r2
 8007326:	2200      	movs	r2, #0
 8007328:	2180      	movs	r1, #128	; 0x80
 800732a:	f7ff ff7b 	bl	8007224 <SPI_WaitFlagStateUntilTimeout>
 800732e:	1e03      	subs	r3, r0, #0
 8007330:	d020      	beq.n	8007374 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007336:	2220      	movs	r2, #32
 8007338:	431a      	orrs	r2, r3
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e019      	b.n	8007376 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2251      	movs	r2, #81	; 0x51
 8007346:	5c9b      	ldrb	r3, [r3, r2]
 8007348:	b2db      	uxtb	r3, r3
 800734a:	2b05      	cmp	r3, #5
 800734c:	d112      	bne.n	8007374 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	0013      	movs	r3, r2
 8007358:	2200      	movs	r2, #0
 800735a:	2101      	movs	r1, #1
 800735c:	f7ff ff62 	bl	8007224 <SPI_WaitFlagStateUntilTimeout>
 8007360:	1e03      	subs	r3, r0, #0
 8007362:	d007      	beq.n	8007374 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007368:	2220      	movs	r2, #32
 800736a:	431a      	orrs	r2, r3
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	e000      	b.n	8007376 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	0018      	movs	r0, r3
 8007378:	46bd      	mov	sp, r7
 800737a:	b004      	add	sp, #16
 800737c:	bd80      	pop	{r7, pc}
	...

08007380 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8007388:	4b2d      	ldr	r3, [pc, #180]	; (8007440 <SPI_CloseTx_ISR+0xc0>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	492d      	ldr	r1, [pc, #180]	; (8007444 <SPI_CloseTx_ISR+0xc4>)
 800738e:	0018      	movs	r0, r3
 8007390:	f7f8 feba 	bl	8000108 <__udivsi3>
 8007394:	0003      	movs	r3, r0
 8007396:	001a      	movs	r2, r3
 8007398:	2364      	movs	r3, #100	; 0x64
 800739a:	4353      	muls	r3, r2
 800739c:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800739e:	f7fc ffb9 	bl	8004314 <HAL_GetTick>
 80073a2:	0003      	movs	r3, r0
 80073a4:	617b      	str	r3, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d106      	bne.n	80073ba <SPI_CloseTx_ISR+0x3a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073b0:	2220      	movs	r2, #32
 80073b2:	431a      	orrs	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80073b8:	e008      	b.n	80073cc <SPI_CloseTx_ISR+0x4c>
    }
    count--;
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	3b01      	subs	r3, #1
 80073be:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	2202      	movs	r2, #2
 80073c8:	4013      	ands	r3, r2
 80073ca:	d0ec      	beq.n	80073a6 <SPI_CloseTx_ISR+0x26>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	685a      	ldr	r2, [r3, #4]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	21a0      	movs	r1, #160	; 0xa0
 80073d8:	438a      	bics	r2, r1
 80073da:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2164      	movs	r1, #100	; 0x64
 80073e2:	0018      	movs	r0, r3
 80073e4:	f7ff ff8e 	bl	8007304 <SPI_EndRxTxTransaction>
 80073e8:	1e03      	subs	r3, r0, #0
 80073ea:	d005      	beq.n	80073f8 <SPI_CloseTx_ISR+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073f0:	2220      	movs	r2, #32
 80073f2:	431a      	orrs	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d10a      	bne.n	8007416 <SPI_CloseTx_ISR+0x96>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007400:	2300      	movs	r3, #0
 8007402:	60fb      	str	r3, [r7, #12]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	60fb      	str	r3, [r7, #12]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	60fb      	str	r3, [r7, #12]
 8007414:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2251      	movs	r2, #81	; 0x51
 800741a:	2101      	movs	r1, #1
 800741c:	5499      	strb	r1, [r3, r2]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007422:	2b00      	cmp	r3, #0
 8007424:	d004      	beq.n	8007430 <SPI_CloseTx_ISR+0xb0>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	0018      	movs	r0, r3
 800742a:	f7ff fe8b 	bl	8007144 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800742e:	e003      	b.n	8007438 <SPI_CloseTx_ISR+0xb8>
    HAL_SPI_TxCpltCallback(hspi);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	0018      	movs	r0, r3
 8007434:	f7f9 ffaf 	bl	8001396 <HAL_SPI_TxCpltCallback>
}
 8007438:	46c0      	nop			; (mov r8, r8)
 800743a:	46bd      	mov	sp, r7
 800743c:	b006      	add	sp, #24
 800743e:	bd80      	pop	{r7, pc}
 8007440:	20000004 	.word	0x20000004
 8007444:	00005dc0 	.word	0x00005dc0

08007448 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d101      	bne.n	800745a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e01e      	b.n	8007498 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2239      	movs	r2, #57	; 0x39
 800745e:	5c9b      	ldrb	r3, [r3, r2]
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b00      	cmp	r3, #0
 8007464:	d107      	bne.n	8007476 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2238      	movs	r2, #56	; 0x38
 800746a:	2100      	movs	r1, #0
 800746c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	0018      	movs	r0, r3
 8007472:	f7fc fb5f 	bl	8003b34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2239      	movs	r2, #57	; 0x39
 800747a:	2102      	movs	r1, #2
 800747c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	3304      	adds	r3, #4
 8007486:	0019      	movs	r1, r3
 8007488:	0010      	movs	r0, r2
 800748a:	f000 fbed 	bl	8007c68 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2239      	movs	r2, #57	; 0x39
 8007492:	2101      	movs	r1, #1
 8007494:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	0018      	movs	r0, r3
 800749a:	46bd      	mov	sp, r7
 800749c:	b002      	add	sp, #8
 800749e:	bd80      	pop	{r7, pc}

080074a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68da      	ldr	r2, [r3, #12]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2101      	movs	r1, #1
 80074b4:	430a      	orrs	r2, r1
 80074b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	2207      	movs	r2, #7
 80074c0:	4013      	ands	r3, r2
 80074c2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2b06      	cmp	r3, #6
 80074c8:	d007      	beq.n	80074da <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2101      	movs	r1, #1
 80074d6:	430a      	orrs	r2, r1
 80074d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	0018      	movs	r0, r3
 80074de:	46bd      	mov	sp, r7
 80074e0:	b004      	add	sp, #16
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68da      	ldr	r2, [r3, #12]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2101      	movs	r1, #1
 80074f8:	438a      	bics	r2, r1
 80074fa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	6a1b      	ldr	r3, [r3, #32]
 8007502:	4a08      	ldr	r2, [pc, #32]	; (8007524 <HAL_TIM_Base_Stop_IT+0x40>)
 8007504:	4013      	ands	r3, r2
 8007506:	d107      	bne.n	8007518 <HAL_TIM_Base_Stop_IT+0x34>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2101      	movs	r1, #1
 8007514:	438a      	bics	r2, r1
 8007516:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	0018      	movs	r0, r3
 800751c:	46bd      	mov	sp, r7
 800751e:	b002      	add	sp, #8
 8007520:	bd80      	pop	{r7, pc}
 8007522:	46c0      	nop			; (mov r8, r8)
 8007524:	00001111 	.word	0x00001111

08007528 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d101      	bne.n	800753a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e01e      	b.n	8007578 <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2239      	movs	r2, #57	; 0x39
 800753e:	5c9b      	ldrb	r3, [r3, r2]
 8007540:	b2db      	uxtb	r3, r3
 8007542:	2b00      	cmp	r3, #0
 8007544:	d107      	bne.n	8007556 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2238      	movs	r2, #56	; 0x38
 800754a:	2100      	movs	r1, #0
 800754c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	0018      	movs	r0, r3
 8007552:	f000 f815 	bl	8007580 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2239      	movs	r2, #57	; 0x39
 800755a:	2102      	movs	r1, #2
 800755c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	3304      	adds	r3, #4
 8007566:	0019      	movs	r1, r3
 8007568:	0010      	movs	r0, r2
 800756a:	f000 fb7d 	bl	8007c68 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2239      	movs	r2, #57	; 0x39
 8007572:	2101      	movs	r1, #1
 8007574:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	0018      	movs	r0, r3
 800757a:	46bd      	mov	sp, r7
 800757c:	b002      	add	sp, #8
 800757e:	bd80      	pop	{r7, pc}

08007580 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007588:	46c0      	nop			; (mov r8, r8)
 800758a:	46bd      	mov	sp, r7
 800758c:	b002      	add	sp, #8
 800758e:	bd80      	pop	{r7, pc}

08007590 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	2b04      	cmp	r3, #4
 800759e:	d011      	beq.n	80075c4 <HAL_TIM_OC_Stop_IT+0x34>
 80075a0:	d802      	bhi.n	80075a8 <HAL_TIM_OC_Stop_IT+0x18>
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d005      	beq.n	80075b2 <HAL_TIM_OC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 80075a6:	e028      	b.n	80075fa <HAL_TIM_OC_Stop_IT+0x6a>
  switch (Channel)
 80075a8:	2b08      	cmp	r3, #8
 80075aa:	d014      	beq.n	80075d6 <HAL_TIM_OC_Stop_IT+0x46>
 80075ac:	2b0c      	cmp	r3, #12
 80075ae:	d01b      	beq.n	80075e8 <HAL_TIM_OC_Stop_IT+0x58>
      break;
 80075b0:	e023      	b.n	80075fa <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68da      	ldr	r2, [r3, #12]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2102      	movs	r1, #2
 80075be:	438a      	bics	r2, r1
 80075c0:	60da      	str	r2, [r3, #12]
      break;
 80075c2:	e01a      	b.n	80075fa <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68da      	ldr	r2, [r3, #12]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2104      	movs	r1, #4
 80075d0:	438a      	bics	r2, r1
 80075d2:	60da      	str	r2, [r3, #12]
      break;
 80075d4:	e011      	b.n	80075fa <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	68da      	ldr	r2, [r3, #12]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2108      	movs	r1, #8
 80075e2:	438a      	bics	r2, r1
 80075e4:	60da      	str	r2, [r3, #12]
      break;
 80075e6:	e008      	b.n	80075fa <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68da      	ldr	r2, [r3, #12]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2110      	movs	r1, #16
 80075f4:	438a      	bics	r2, r1
 80075f6:	60da      	str	r2, [r3, #12]
      break;
 80075f8:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	6839      	ldr	r1, [r7, #0]
 8007600:	2200      	movs	r2, #0
 8007602:	0018      	movs	r0, r3
 8007604:	f000 fd2c 	bl	8008060 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6a1b      	ldr	r3, [r3, #32]
 800760e:	4a08      	ldr	r2, [pc, #32]	; (8007630 <HAL_TIM_OC_Stop_IT+0xa0>)
 8007610:	4013      	ands	r3, r2
 8007612:	d107      	bne.n	8007624 <HAL_TIM_OC_Stop_IT+0x94>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2101      	movs	r1, #1
 8007620:	438a      	bics	r2, r1
 8007622:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	0018      	movs	r0, r3
 8007628:	46bd      	mov	sp, r7
 800762a:	b002      	add	sp, #8
 800762c:	bd80      	pop	{r7, pc}
 800762e:	46c0      	nop			; (mov r8, r8)
 8007630:	00001111 	.word	0x00001111

08007634 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d101      	bne.n	8007646 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e01e      	b.n	8007684 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2239      	movs	r2, #57	; 0x39
 800764a:	5c9b      	ldrb	r3, [r3, r2]
 800764c:	b2db      	uxtb	r3, r3
 800764e:	2b00      	cmp	r3, #0
 8007650:	d107      	bne.n	8007662 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2238      	movs	r2, #56	; 0x38
 8007656:	2100      	movs	r1, #0
 8007658:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	0018      	movs	r0, r3
 800765e:	f000 f815 	bl	800768c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2239      	movs	r2, #57	; 0x39
 8007666:	2102      	movs	r1, #2
 8007668:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	3304      	adds	r3, #4
 8007672:	0019      	movs	r1, r3
 8007674:	0010      	movs	r0, r2
 8007676:	f000 faf7 	bl	8007c68 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2239      	movs	r2, #57	; 0x39
 800767e:	2101      	movs	r1, #1
 8007680:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	0018      	movs	r0, r3
 8007686:	46bd      	mov	sp, r7
 8007688:	b002      	add	sp, #8
 800768a:	bd80      	pop	{r7, pc}

0800768c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007694:	46c0      	nop			; (mov r8, r8)
 8007696:	46bd      	mov	sp, r7
 8007698:	b002      	add	sp, #8
 800769a:	bd80      	pop	{r7, pc}

0800769c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	2201      	movs	r2, #1
 80076ae:	0018      	movs	r0, r3
 80076b0:	f000 fcd6 	bl	8008060 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	2207      	movs	r2, #7
 80076bc:	4013      	ands	r3, r2
 80076be:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2b06      	cmp	r3, #6
 80076c4:	d007      	beq.n	80076d6 <HAL_TIM_PWM_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2101      	movs	r1, #1
 80076d2:	430a      	orrs	r2, r1
 80076d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	0018      	movs	r0, r3
 80076da:	46bd      	mov	sp, r7
 80076dc:	b004      	add	sp, #16
 80076de:	bd80      	pop	{r7, pc}

080076e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	2202      	movs	r2, #2
 80076f0:	4013      	ands	r3, r2
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d124      	bne.n	8007740 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	2202      	movs	r2, #2
 80076fe:	4013      	ands	r3, r2
 8007700:	2b02      	cmp	r3, #2
 8007702:	d11d      	bne.n	8007740 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2203      	movs	r2, #3
 800770a:	4252      	negs	r2, r2
 800770c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2201      	movs	r2, #1
 8007712:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	2203      	movs	r2, #3
 800771c:	4013      	ands	r3, r2
 800771e:	d004      	beq.n	800772a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	0018      	movs	r0, r3
 8007724:	f000 fa88 	bl	8007c38 <HAL_TIM_IC_CaptureCallback>
 8007728:	e007      	b.n	800773a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	0018      	movs	r0, r3
 800772e:	f7fc fbe5 	bl	8003efc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	0018      	movs	r0, r3
 8007736:	f000 fa87 	bl	8007c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	2204      	movs	r2, #4
 8007748:	4013      	ands	r3, r2
 800774a:	2b04      	cmp	r3, #4
 800774c:	d125      	bne.n	800779a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	2204      	movs	r2, #4
 8007756:	4013      	ands	r3, r2
 8007758:	2b04      	cmp	r3, #4
 800775a:	d11e      	bne.n	800779a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2205      	movs	r2, #5
 8007762:	4252      	negs	r2, r2
 8007764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2202      	movs	r2, #2
 800776a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	699a      	ldr	r2, [r3, #24]
 8007772:	23c0      	movs	r3, #192	; 0xc0
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	4013      	ands	r3, r2
 8007778:	d004      	beq.n	8007784 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	0018      	movs	r0, r3
 800777e:	f000 fa5b 	bl	8007c38 <HAL_TIM_IC_CaptureCallback>
 8007782:	e007      	b.n	8007794 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	0018      	movs	r0, r3
 8007788:	f7fc fbb8 	bl	8003efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	0018      	movs	r0, r3
 8007790:	f000 fa5a 	bl	8007c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	2208      	movs	r2, #8
 80077a2:	4013      	ands	r3, r2
 80077a4:	2b08      	cmp	r3, #8
 80077a6:	d124      	bne.n	80077f2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	2208      	movs	r2, #8
 80077b0:	4013      	ands	r3, r2
 80077b2:	2b08      	cmp	r3, #8
 80077b4:	d11d      	bne.n	80077f2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2209      	movs	r2, #9
 80077bc:	4252      	negs	r2, r2
 80077be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2204      	movs	r2, #4
 80077c4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	69db      	ldr	r3, [r3, #28]
 80077cc:	2203      	movs	r2, #3
 80077ce:	4013      	ands	r3, r2
 80077d0:	d004      	beq.n	80077dc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	0018      	movs	r0, r3
 80077d6:	f000 fa2f 	bl	8007c38 <HAL_TIM_IC_CaptureCallback>
 80077da:	e007      	b.n	80077ec <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	0018      	movs	r0, r3
 80077e0:	f7fc fb8c 	bl	8003efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	0018      	movs	r0, r3
 80077e8:	f000 fa2e 	bl	8007c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	691b      	ldr	r3, [r3, #16]
 80077f8:	2210      	movs	r2, #16
 80077fa:	4013      	ands	r3, r2
 80077fc:	2b10      	cmp	r3, #16
 80077fe:	d125      	bne.n	800784c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	2210      	movs	r2, #16
 8007808:	4013      	ands	r3, r2
 800780a:	2b10      	cmp	r3, #16
 800780c:	d11e      	bne.n	800784c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2211      	movs	r2, #17
 8007814:	4252      	negs	r2, r2
 8007816:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2208      	movs	r2, #8
 800781c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	69da      	ldr	r2, [r3, #28]
 8007824:	23c0      	movs	r3, #192	; 0xc0
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	4013      	ands	r3, r2
 800782a:	d004      	beq.n	8007836 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	0018      	movs	r0, r3
 8007830:	f000 fa02 	bl	8007c38 <HAL_TIM_IC_CaptureCallback>
 8007834:	e007      	b.n	8007846 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	0018      	movs	r0, r3
 800783a:	f7fc fb5f 	bl	8003efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	0018      	movs	r0, r3
 8007842:	f000 fa01 	bl	8007c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	2201      	movs	r2, #1
 8007854:	4013      	ands	r3, r2
 8007856:	2b01      	cmp	r3, #1
 8007858:	d10f      	bne.n	800787a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	2201      	movs	r2, #1
 8007862:	4013      	ands	r3, r2
 8007864:	2b01      	cmp	r3, #1
 8007866:	d108      	bne.n	800787a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2202      	movs	r2, #2
 800786e:	4252      	negs	r2, r2
 8007870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	0018      	movs	r0, r3
 8007876:	f7fc fb05 	bl	8003e84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	2240      	movs	r2, #64	; 0x40
 8007882:	4013      	ands	r3, r2
 8007884:	2b40      	cmp	r3, #64	; 0x40
 8007886:	d10f      	bne.n	80078a8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	2240      	movs	r2, #64	; 0x40
 8007890:	4013      	ands	r3, r2
 8007892:	2b40      	cmp	r3, #64	; 0x40
 8007894:	d108      	bne.n	80078a8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2241      	movs	r2, #65	; 0x41
 800789c:	4252      	negs	r2, r2
 800789e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	0018      	movs	r0, r3
 80078a4:	f000 f9d8 	bl	8007c58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078a8:	46c0      	nop			; (mov r8, r8)
 80078aa:	46bd      	mov	sp, r7
 80078ac:	b002      	add	sp, #8
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2238      	movs	r2, #56	; 0x38
 80078c0:	5c9b      	ldrb	r3, [r3, r2]
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d101      	bne.n	80078ca <HAL_TIM_OC_ConfigChannel+0x1a>
 80078c6:	2302      	movs	r3, #2
 80078c8:	e03c      	b.n	8007944 <HAL_TIM_OC_ConfigChannel+0x94>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2238      	movs	r2, #56	; 0x38
 80078ce:	2101      	movs	r1, #1
 80078d0:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2239      	movs	r2, #57	; 0x39
 80078d6:	2102      	movs	r1, #2
 80078d8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2b04      	cmp	r3, #4
 80078de:	d010      	beq.n	8007902 <HAL_TIM_OC_ConfigChannel+0x52>
 80078e0:	d802      	bhi.n	80078e8 <HAL_TIM_OC_ConfigChannel+0x38>
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d005      	beq.n	80078f2 <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 80078e6:	e024      	b.n	8007932 <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 80078e8:	2b08      	cmp	r3, #8
 80078ea:	d012      	beq.n	8007912 <HAL_TIM_OC_ConfigChannel+0x62>
 80078ec:	2b0c      	cmp	r3, #12
 80078ee:	d018      	beq.n	8007922 <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 80078f0:	e01f      	b.n	8007932 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	0011      	movs	r1, r2
 80078fa:	0018      	movs	r0, r3
 80078fc:	f000 fa12 	bl	8007d24 <TIM_OC1_SetConfig>
      break;
 8007900:	e017      	b.n	8007932 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68ba      	ldr	r2, [r7, #8]
 8007908:	0011      	movs	r1, r2
 800790a:	0018      	movs	r0, r3
 800790c:	f000 fa46 	bl	8007d9c <TIM_OC2_SetConfig>
      break;
 8007910:	e00f      	b.n	8007932 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68ba      	ldr	r2, [r7, #8]
 8007918:	0011      	movs	r1, r2
 800791a:	0018      	movs	r0, r3
 800791c:	f000 fa80 	bl	8007e20 <TIM_OC3_SetConfig>
      break;
 8007920:	e007      	b.n	8007932 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68ba      	ldr	r2, [r7, #8]
 8007928:	0011      	movs	r1, r2
 800792a:	0018      	movs	r0, r3
 800792c:	f000 fab8 	bl	8007ea0 <TIM_OC4_SetConfig>
      break;
 8007930:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2239      	movs	r2, #57	; 0x39
 8007936:	2101      	movs	r1, #1
 8007938:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2238      	movs	r2, #56	; 0x38
 800793e:	2100      	movs	r1, #0
 8007940:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007942:	2300      	movs	r3, #0
}
 8007944:	0018      	movs	r0, r3
 8007946:	46bd      	mov	sp, r7
 8007948:	b004      	add	sp, #16
 800794a:	bd80      	pop	{r7, pc}

0800794c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2238      	movs	r2, #56	; 0x38
 800795c:	5c9b      	ldrb	r3, [r3, r2]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d101      	bne.n	8007966 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007962:	2302      	movs	r3, #2
 8007964:	e0a4      	b.n	8007ab0 <HAL_TIM_PWM_ConfigChannel+0x164>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2238      	movs	r2, #56	; 0x38
 800796a:	2101      	movs	r1, #1
 800796c:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2239      	movs	r2, #57	; 0x39
 8007972:	2102      	movs	r1, #2
 8007974:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2b04      	cmp	r3, #4
 800797a:	d029      	beq.n	80079d0 <HAL_TIM_PWM_ConfigChannel+0x84>
 800797c:	d802      	bhi.n	8007984 <HAL_TIM_PWM_ConfigChannel+0x38>
 800797e:	2b00      	cmp	r3, #0
 8007980:	d005      	beq.n	800798e <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8007982:	e08c      	b.n	8007a9e <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8007984:	2b08      	cmp	r3, #8
 8007986:	d046      	beq.n	8007a16 <HAL_TIM_PWM_ConfigChannel+0xca>
 8007988:	2b0c      	cmp	r3, #12
 800798a:	d065      	beq.n	8007a58 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 800798c:	e087      	b.n	8007a9e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68ba      	ldr	r2, [r7, #8]
 8007994:	0011      	movs	r1, r2
 8007996:	0018      	movs	r0, r3
 8007998:	f000 f9c4 	bl	8007d24 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	699a      	ldr	r2, [r3, #24]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2108      	movs	r1, #8
 80079a8:	430a      	orrs	r2, r1
 80079aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	699a      	ldr	r2, [r3, #24]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2104      	movs	r1, #4
 80079b8:	438a      	bics	r2, r1
 80079ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	6999      	ldr	r1, [r3, #24]
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	68da      	ldr	r2, [r3, #12]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	430a      	orrs	r2, r1
 80079cc:	619a      	str	r2, [r3, #24]
      break;
 80079ce:	e066      	b.n	8007a9e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	0011      	movs	r1, r2
 80079d8:	0018      	movs	r0, r3
 80079da:	f000 f9df 	bl	8007d9c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	699a      	ldr	r2, [r3, #24]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2180      	movs	r1, #128	; 0x80
 80079ea:	0109      	lsls	r1, r1, #4
 80079ec:	430a      	orrs	r2, r1
 80079ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	699a      	ldr	r2, [r3, #24]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	492f      	ldr	r1, [pc, #188]	; (8007ab8 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80079fc:	400a      	ands	r2, r1
 80079fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	6999      	ldr	r1, [r3, #24]
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	021a      	lsls	r2, r3, #8
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	430a      	orrs	r2, r1
 8007a12:	619a      	str	r2, [r3, #24]
      break;
 8007a14:	e043      	b.n	8007a9e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68ba      	ldr	r2, [r7, #8]
 8007a1c:	0011      	movs	r1, r2
 8007a1e:	0018      	movs	r0, r3
 8007a20:	f000 f9fe 	bl	8007e20 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	69da      	ldr	r2, [r3, #28]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2108      	movs	r1, #8
 8007a30:	430a      	orrs	r2, r1
 8007a32:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	69da      	ldr	r2, [r3, #28]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2104      	movs	r1, #4
 8007a40:	438a      	bics	r2, r1
 8007a42:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	69d9      	ldr	r1, [r3, #28]
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	68da      	ldr	r2, [r3, #12]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	430a      	orrs	r2, r1
 8007a54:	61da      	str	r2, [r3, #28]
      break;
 8007a56:	e022      	b.n	8007a9e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68ba      	ldr	r2, [r7, #8]
 8007a5e:	0011      	movs	r1, r2
 8007a60:	0018      	movs	r0, r3
 8007a62:	f000 fa1d 	bl	8007ea0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	69da      	ldr	r2, [r3, #28]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2180      	movs	r1, #128	; 0x80
 8007a72:	0109      	lsls	r1, r1, #4
 8007a74:	430a      	orrs	r2, r1
 8007a76:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	69da      	ldr	r2, [r3, #28]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	490d      	ldr	r1, [pc, #52]	; (8007ab8 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8007a84:	400a      	ands	r2, r1
 8007a86:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	69d9      	ldr	r1, [r3, #28]
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	021a      	lsls	r2, r3, #8
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	430a      	orrs	r2, r1
 8007a9a:	61da      	str	r2, [r3, #28]
      break;
 8007a9c:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2239      	movs	r2, #57	; 0x39
 8007aa2:	2101      	movs	r1, #1
 8007aa4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2238      	movs	r2, #56	; 0x38
 8007aaa:	2100      	movs	r1, #0
 8007aac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	0018      	movs	r0, r3
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	b004      	add	sp, #16
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	fffffbff 	.word	0xfffffbff

08007abc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2238      	movs	r2, #56	; 0x38
 8007aca:	5c9b      	ldrb	r3, [r3, r2]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d101      	bne.n	8007ad4 <HAL_TIM_ConfigClockSource+0x18>
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	e0ab      	b.n	8007c2c <HAL_TIM_ConfigClockSource+0x170>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2238      	movs	r2, #56	; 0x38
 8007ad8:	2101      	movs	r1, #1
 8007ada:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2239      	movs	r2, #57	; 0x39
 8007ae0:	2102      	movs	r1, #2
 8007ae2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2277      	movs	r2, #119	; 0x77
 8007af0:	4393      	bics	r3, r2
 8007af2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	4a4f      	ldr	r2, [pc, #316]	; (8007c34 <HAL_TIM_ConfigClockSource+0x178>)
 8007af8:	4013      	ands	r3, r2
 8007afa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2b40      	cmp	r3, #64	; 0x40
 8007b0a:	d100      	bne.n	8007b0e <HAL_TIM_ConfigClockSource+0x52>
 8007b0c:	e06b      	b.n	8007be6 <HAL_TIM_ConfigClockSource+0x12a>
 8007b0e:	d80e      	bhi.n	8007b2e <HAL_TIM_ConfigClockSource+0x72>
 8007b10:	2b10      	cmp	r3, #16
 8007b12:	d100      	bne.n	8007b16 <HAL_TIM_ConfigClockSource+0x5a>
 8007b14:	e077      	b.n	8007c06 <HAL_TIM_ConfigClockSource+0x14a>
 8007b16:	d803      	bhi.n	8007b20 <HAL_TIM_ConfigClockSource+0x64>
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d100      	bne.n	8007b1e <HAL_TIM_ConfigClockSource+0x62>
 8007b1c:	e073      	b.n	8007c06 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007b1e:	e07c      	b.n	8007c1a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8007b20:	2b20      	cmp	r3, #32
 8007b22:	d100      	bne.n	8007b26 <HAL_TIM_ConfigClockSource+0x6a>
 8007b24:	e06f      	b.n	8007c06 <HAL_TIM_ConfigClockSource+0x14a>
 8007b26:	2b30      	cmp	r3, #48	; 0x30
 8007b28:	d100      	bne.n	8007b2c <HAL_TIM_ConfigClockSource+0x70>
 8007b2a:	e06c      	b.n	8007c06 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8007b2c:	e075      	b.n	8007c1a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8007b2e:	2b70      	cmp	r3, #112	; 0x70
 8007b30:	d00e      	beq.n	8007b50 <HAL_TIM_ConfigClockSource+0x94>
 8007b32:	d804      	bhi.n	8007b3e <HAL_TIM_ConfigClockSource+0x82>
 8007b34:	2b50      	cmp	r3, #80	; 0x50
 8007b36:	d036      	beq.n	8007ba6 <HAL_TIM_ConfigClockSource+0xea>
 8007b38:	2b60      	cmp	r3, #96	; 0x60
 8007b3a:	d044      	beq.n	8007bc6 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8007b3c:	e06d      	b.n	8007c1a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8007b3e:	2280      	movs	r2, #128	; 0x80
 8007b40:	0152      	lsls	r2, r2, #5
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d068      	beq.n	8007c18 <HAL_TIM_ConfigClockSource+0x15c>
 8007b46:	2280      	movs	r2, #128	; 0x80
 8007b48:	0192      	lsls	r2, r2, #6
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d017      	beq.n	8007b7e <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8007b4e:	e064      	b.n	8007c1a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6818      	ldr	r0, [r3, #0]
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	6899      	ldr	r1, [r3, #8]
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	f000 fa5e 	bl	8008020 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2277      	movs	r2, #119	; 0x77
 8007b70:	4313      	orrs	r3, r2
 8007b72:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	609a      	str	r2, [r3, #8]
      break;
 8007b7c:	e04d      	b.n	8007c1a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6818      	ldr	r0, [r3, #0]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	6899      	ldr	r1, [r3, #8]
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	685a      	ldr	r2, [r3, #4]
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	f000 fa47 	bl	8008020 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	689a      	ldr	r2, [r3, #8]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2180      	movs	r1, #128	; 0x80
 8007b9e:	01c9      	lsls	r1, r1, #7
 8007ba0:	430a      	orrs	r2, r1
 8007ba2:	609a      	str	r2, [r3, #8]
      break;
 8007ba4:	e039      	b.n	8007c1a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6818      	ldr	r0, [r3, #0]
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	6859      	ldr	r1, [r3, #4]
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	001a      	movs	r2, r3
 8007bb4:	f000 f9ba 	bl	8007f2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2150      	movs	r1, #80	; 0x50
 8007bbe:	0018      	movs	r0, r3
 8007bc0:	f000 fa14 	bl	8007fec <TIM_ITRx_SetConfig>
      break;
 8007bc4:	e029      	b.n	8007c1a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6818      	ldr	r0, [r3, #0]
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	6859      	ldr	r1, [r3, #4]
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	001a      	movs	r2, r3
 8007bd4:	f000 f9d8 	bl	8007f88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2160      	movs	r1, #96	; 0x60
 8007bde:	0018      	movs	r0, r3
 8007be0:	f000 fa04 	bl	8007fec <TIM_ITRx_SetConfig>
      break;
 8007be4:	e019      	b.n	8007c1a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6818      	ldr	r0, [r3, #0]
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	6859      	ldr	r1, [r3, #4]
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	001a      	movs	r2, r3
 8007bf4:	f000 f99a 	bl	8007f2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2140      	movs	r1, #64	; 0x40
 8007bfe:	0018      	movs	r0, r3
 8007c00:	f000 f9f4 	bl	8007fec <TIM_ITRx_SetConfig>
      break;
 8007c04:	e009      	b.n	8007c1a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	0019      	movs	r1, r3
 8007c10:	0010      	movs	r0, r2
 8007c12:	f000 f9eb 	bl	8007fec <TIM_ITRx_SetConfig>
      break;
 8007c16:	e000      	b.n	8007c1a <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8007c18:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2239      	movs	r2, #57	; 0x39
 8007c1e:	2101      	movs	r1, #1
 8007c20:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2238      	movs	r2, #56	; 0x38
 8007c26:	2100      	movs	r1, #0
 8007c28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	0018      	movs	r0, r3
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	b004      	add	sp, #16
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	ffff00ff 	.word	0xffff00ff

08007c38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c40:	46c0      	nop			; (mov r8, r8)
 8007c42:	46bd      	mov	sp, r7
 8007c44:	b002      	add	sp, #8
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c50:	46c0      	nop			; (mov r8, r8)
 8007c52:	46bd      	mov	sp, r7
 8007c54:	b002      	add	sp, #8
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c60:	46c0      	nop			; (mov r8, r8)
 8007c62:	46bd      	mov	sp, r7
 8007c64:	b002      	add	sp, #8
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	2380      	movs	r3, #128	; 0x80
 8007c7c:	05db      	lsls	r3, r3, #23
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d00b      	beq.n	8007c9a <TIM_Base_SetConfig+0x32>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4a23      	ldr	r2, [pc, #140]	; (8007d14 <TIM_Base_SetConfig+0xac>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d007      	beq.n	8007c9a <TIM_Base_SetConfig+0x32>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a22      	ldr	r2, [pc, #136]	; (8007d18 <TIM_Base_SetConfig+0xb0>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d003      	beq.n	8007c9a <TIM_Base_SetConfig+0x32>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a21      	ldr	r2, [pc, #132]	; (8007d1c <TIM_Base_SetConfig+0xb4>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d108      	bne.n	8007cac <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2270      	movs	r2, #112	; 0x70
 8007c9e:	4393      	bics	r3, r2
 8007ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	2380      	movs	r3, #128	; 0x80
 8007cb0:	05db      	lsls	r3, r3, #23
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d00b      	beq.n	8007cce <TIM_Base_SetConfig+0x66>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a16      	ldr	r2, [pc, #88]	; (8007d14 <TIM_Base_SetConfig+0xac>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d007      	beq.n	8007cce <TIM_Base_SetConfig+0x66>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a15      	ldr	r2, [pc, #84]	; (8007d18 <TIM_Base_SetConfig+0xb0>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d003      	beq.n	8007cce <TIM_Base_SetConfig+0x66>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a14      	ldr	r2, [pc, #80]	; (8007d1c <TIM_Base_SetConfig+0xb4>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d108      	bne.n	8007ce0 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	4a13      	ldr	r2, [pc, #76]	; (8007d20 <TIM_Base_SetConfig+0xb8>)
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2280      	movs	r2, #128	; 0x80
 8007ce4:	4393      	bics	r3, r2
 8007ce6:	001a      	movs	r2, r3
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	689a      	ldr	r2, [r3, #8]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	615a      	str	r2, [r3, #20]
}
 8007d0c:	46c0      	nop			; (mov r8, r8)
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	b004      	add	sp, #16
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	40000400 	.word	0x40000400
 8007d18:	40010800 	.word	0x40010800
 8007d1c:	40011400 	.word	0x40011400
 8007d20:	fffffcff 	.word	0xfffffcff

08007d24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b086      	sub	sp, #24
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a1b      	ldr	r3, [r3, #32]
 8007d32:	2201      	movs	r2, #1
 8007d34:	4393      	bics	r3, r2
 8007d36:	001a      	movs	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6a1b      	ldr	r3, [r3, #32]
 8007d40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	699b      	ldr	r3, [r3, #24]
 8007d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2270      	movs	r2, #112	; 0x70
 8007d52:	4393      	bics	r3, r2
 8007d54:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2203      	movs	r2, #3
 8007d5a:	4393      	bics	r3, r2
 8007d5c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	4393      	bics	r3, r2
 8007d6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	697a      	ldr	r2, [r7, #20]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	693a      	ldr	r2, [r7, #16]
 8007d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	685a      	ldr	r2, [r3, #4]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	697a      	ldr	r2, [r7, #20]
 8007d92:	621a      	str	r2, [r3, #32]
}
 8007d94:	46c0      	nop			; (mov r8, r8)
 8007d96:	46bd      	mov	sp, r7
 8007d98:	b006      	add	sp, #24
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b086      	sub	sp, #24
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a1b      	ldr	r3, [r3, #32]
 8007daa:	2210      	movs	r2, #16
 8007dac:	4393      	bics	r3, r2
 8007dae:	001a      	movs	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6a1b      	ldr	r3, [r3, #32]
 8007db8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	699b      	ldr	r3, [r3, #24]
 8007dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	4a13      	ldr	r2, [pc, #76]	; (8007e18 <TIM_OC2_SetConfig+0x7c>)
 8007dca:	4013      	ands	r3, r2
 8007dcc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	4a12      	ldr	r2, [pc, #72]	; (8007e1c <TIM_OC2_SetConfig+0x80>)
 8007dd2:	4013      	ands	r3, r2
 8007dd4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	021b      	lsls	r3, r3, #8
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	2220      	movs	r2, #32
 8007de6:	4393      	bics	r3, r2
 8007de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	011b      	lsls	r3, r3, #4
 8007df0:	697a      	ldr	r2, [r7, #20]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	693a      	ldr	r2, [r7, #16]
 8007dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	685a      	ldr	r2, [r3, #4]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	697a      	ldr	r2, [r7, #20]
 8007e0e:	621a      	str	r2, [r3, #32]
}
 8007e10:	46c0      	nop			; (mov r8, r8)
 8007e12:	46bd      	mov	sp, r7
 8007e14:	b006      	add	sp, #24
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	ffff8fff 	.word	0xffff8fff
 8007e1c:	fffffcff 	.word	0xfffffcff

08007e20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b086      	sub	sp, #24
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	4a1a      	ldr	r2, [pc, #104]	; (8007e98 <TIM_OC3_SetConfig+0x78>)
 8007e30:	401a      	ands	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a1b      	ldr	r3, [r3, #32]
 8007e3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	69db      	ldr	r3, [r3, #28]
 8007e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2270      	movs	r2, #112	; 0x70
 8007e4c:	4393      	bics	r3, r2
 8007e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2203      	movs	r2, #3
 8007e54:	4393      	bics	r3, r2
 8007e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	4a0d      	ldr	r2, [pc, #52]	; (8007e9c <TIM_OC3_SetConfig+0x7c>)
 8007e66:	4013      	ands	r3, r2
 8007e68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	021b      	lsls	r3, r3, #8
 8007e70:	697a      	ldr	r2, [r7, #20]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	685a      	ldr	r2, [r3, #4]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	697a      	ldr	r2, [r7, #20]
 8007e8e:	621a      	str	r2, [r3, #32]
}
 8007e90:	46c0      	nop			; (mov r8, r8)
 8007e92:	46bd      	mov	sp, r7
 8007e94:	b006      	add	sp, #24
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	fffffeff 	.word	0xfffffeff
 8007e9c:	fffffdff 	.word	0xfffffdff

08007ea0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a1b      	ldr	r3, [r3, #32]
 8007eae:	4a1b      	ldr	r2, [pc, #108]	; (8007f1c <TIM_OC4_SetConfig+0x7c>)
 8007eb0:	401a      	ands	r2, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a1b      	ldr	r3, [r3, #32]
 8007eba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	69db      	ldr	r3, [r3, #28]
 8007ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	4a15      	ldr	r2, [pc, #84]	; (8007f20 <TIM_OC4_SetConfig+0x80>)
 8007ecc:	4013      	ands	r3, r2
 8007ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	4a14      	ldr	r2, [pc, #80]	; (8007f24 <TIM_OC4_SetConfig+0x84>)
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	021b      	lsls	r3, r3, #8
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	4a10      	ldr	r2, [pc, #64]	; (8007f28 <TIM_OC4_SetConfig+0x88>)
 8007ee8:	4013      	ands	r3, r2
 8007eea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	031b      	lsls	r3, r3, #12
 8007ef2:	697a      	ldr	r2, [r7, #20]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	693a      	ldr	r2, [r7, #16]
 8007efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	685a      	ldr	r2, [r3, #4]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	697a      	ldr	r2, [r7, #20]
 8007f10:	621a      	str	r2, [r3, #32]
}
 8007f12:	46c0      	nop			; (mov r8, r8)
 8007f14:	46bd      	mov	sp, r7
 8007f16:	b006      	add	sp, #24
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	46c0      	nop			; (mov r8, r8)
 8007f1c:	ffffefff 	.word	0xffffefff
 8007f20:	ffff8fff 	.word	0xffff8fff
 8007f24:	fffffcff 	.word	0xfffffcff
 8007f28:	ffffdfff 	.word	0xffffdfff

08007f2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6a1b      	ldr	r3, [r3, #32]
 8007f3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6a1b      	ldr	r3, [r3, #32]
 8007f42:	2201      	movs	r2, #1
 8007f44:	4393      	bics	r3, r2
 8007f46:	001a      	movs	r2, r3
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	699b      	ldr	r3, [r3, #24]
 8007f50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	22f0      	movs	r2, #240	; 0xf0
 8007f56:	4393      	bics	r3, r2
 8007f58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	011b      	lsls	r3, r3, #4
 8007f5e:	693a      	ldr	r2, [r7, #16]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	220a      	movs	r2, #10
 8007f68:	4393      	bics	r3, r2
 8007f6a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f6c:	697a      	ldr	r2, [r7, #20]
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	693a      	ldr	r2, [r7, #16]
 8007f78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	697a      	ldr	r2, [r7, #20]
 8007f7e:	621a      	str	r2, [r3, #32]
}
 8007f80:	46c0      	nop			; (mov r8, r8)
 8007f82:	46bd      	mov	sp, r7
 8007f84:	b006      	add	sp, #24
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b086      	sub	sp, #24
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6a1b      	ldr	r3, [r3, #32]
 8007f98:	2210      	movs	r2, #16
 8007f9a:	4393      	bics	r3, r2
 8007f9c:	001a      	movs	r2, r3
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	699b      	ldr	r3, [r3, #24]
 8007fa6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6a1b      	ldr	r3, [r3, #32]
 8007fac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	4a0d      	ldr	r2, [pc, #52]	; (8007fe8 <TIM_TI2_ConfigInputStage+0x60>)
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	031b      	lsls	r3, r3, #12
 8007fba:	697a      	ldr	r2, [r7, #20]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	22a0      	movs	r2, #160	; 0xa0
 8007fc4:	4393      	bics	r3, r2
 8007fc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	011b      	lsls	r3, r3, #4
 8007fcc:	693a      	ldr	r2, [r7, #16]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	697a      	ldr	r2, [r7, #20]
 8007fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	693a      	ldr	r2, [r7, #16]
 8007fdc:	621a      	str	r2, [r3, #32]
}
 8007fde:	46c0      	nop			; (mov r8, r8)
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	b006      	add	sp, #24
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	46c0      	nop			; (mov r8, r8)
 8007fe8:	ffff0fff 	.word	0xffff0fff

08007fec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2270      	movs	r2, #112	; 0x70
 8008000:	4393      	bics	r3, r2
 8008002:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008004:	683a      	ldr	r2, [r7, #0]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	4313      	orrs	r3, r2
 800800a:	2207      	movs	r2, #7
 800800c:	4313      	orrs	r3, r2
 800800e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	68fa      	ldr	r2, [r7, #12]
 8008014:	609a      	str	r2, [r3, #8]
}
 8008016:	46c0      	nop			; (mov r8, r8)
 8008018:	46bd      	mov	sp, r7
 800801a:	b004      	add	sp, #16
 800801c:	bd80      	pop	{r7, pc}
	...

08008020 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
 800802c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	4a09      	ldr	r2, [pc, #36]	; (800805c <TIM_ETR_SetConfig+0x3c>)
 8008038:	4013      	ands	r3, r2
 800803a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	021a      	lsls	r2, r3, #8
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	431a      	orrs	r2, r3
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	4313      	orrs	r3, r2
 8008048:	697a      	ldr	r2, [r7, #20]
 800804a:	4313      	orrs	r3, r2
 800804c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	697a      	ldr	r2, [r7, #20]
 8008052:	609a      	str	r2, [r3, #8]
}
 8008054:	46c0      	nop			; (mov r8, r8)
 8008056:	46bd      	mov	sp, r7
 8008058:	b006      	add	sp, #24
 800805a:	bd80      	pop	{r7, pc}
 800805c:	ffff00ff 	.word	0xffff00ff

08008060 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b086      	sub	sp, #24
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	221f      	movs	r2, #31
 8008070:	4013      	ands	r3, r2
 8008072:	2201      	movs	r2, #1
 8008074:	409a      	lsls	r2, r3
 8008076:	0013      	movs	r3, r2
 8008078:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6a1b      	ldr	r3, [r3, #32]
 800807e:	697a      	ldr	r2, [r7, #20]
 8008080:	43d2      	mvns	r2, r2
 8008082:	401a      	ands	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6a1a      	ldr	r2, [r3, #32]
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	211f      	movs	r1, #31
 8008090:	400b      	ands	r3, r1
 8008092:	6879      	ldr	r1, [r7, #4]
 8008094:	4099      	lsls	r1, r3
 8008096:	000b      	movs	r3, r1
 8008098:	431a      	orrs	r2, r3
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	621a      	str	r2, [r3, #32]
}
 800809e:	46c0      	nop			; (mov r8, r8)
 80080a0:	46bd      	mov	sp, r7
 80080a2:	b006      	add	sp, #24
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b084      	sub	sp, #16
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2238      	movs	r2, #56	; 0x38
 80080b4:	5c9b      	ldrb	r3, [r3, r2]
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d101      	bne.n	80080be <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080ba:	2302      	movs	r3, #2
 80080bc:	e032      	b.n	8008124 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2238      	movs	r2, #56	; 0x38
 80080c2:	2101      	movs	r1, #1
 80080c4:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2239      	movs	r2, #57	; 0x39
 80080ca:	2102      	movs	r1, #2
 80080cc:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2270      	movs	r2, #112	; 0x70
 80080e2:	4393      	bics	r3, r2
 80080e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	2280      	movs	r2, #128	; 0x80
 80080f4:	4393      	bics	r3, r2
 80080f6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	4313      	orrs	r3, r2
 8008100:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2239      	movs	r2, #57	; 0x39
 8008116:	2101      	movs	r1, #1
 8008118:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2238      	movs	r2, #56	; 0x38
 800811e:	2100      	movs	r1, #0
 8008120:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008122:	2300      	movs	r3, #0
}
 8008124:	0018      	movs	r0, r3
 8008126:	46bd      	mov	sp, r7
 8008128:	b004      	add	sp, #16
 800812a:	bd80      	pop	{r7, pc}

0800812c <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2238      	movs	r2, #56	; 0x38
 800813a:	5c9b      	ldrb	r3, [r3, r2]
 800813c:	2b01      	cmp	r3, #1
 800813e:	d101      	bne.n	8008144 <HAL_TIMEx_RemapConfig+0x18>
 8008140:	2302      	movs	r3, #2
 8008142:	e00c      	b.n	800815e <HAL_TIMEx_RemapConfig+0x32>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2238      	movs	r2, #56	; 0x38
 8008148:	2101      	movs	r1, #1
 800814a:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	683a      	ldr	r2, [r7, #0]
 8008152:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2238      	movs	r2, #56	; 0x38
 8008158:	2100      	movs	r1, #0
 800815a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	0018      	movs	r0, r3
 8008160:	46bd      	mov	sp, r7
 8008162:	b002      	add	sp, #8
 8008164:	bd80      	pop	{r7, pc}
	...

08008168 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008170:	210e      	movs	r1, #14
 8008172:	187b      	adds	r3, r7, r1
 8008174:	4a08      	ldr	r2, [pc, #32]	; (8008198 <USB_EnableGlobalInt+0x30>)
 8008176:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2240      	movs	r2, #64	; 0x40
 800817c:	5a9b      	ldrh	r3, [r3, r2]
 800817e:	b29a      	uxth	r2, r3
 8008180:	187b      	adds	r3, r7, r1
 8008182:	881b      	ldrh	r3, [r3, #0]
 8008184:	4313      	orrs	r3, r2
 8008186:	b299      	uxth	r1, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2240      	movs	r2, #64	; 0x40
 800818c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	0018      	movs	r0, r3
 8008192:	46bd      	mov	sp, r7
 8008194:	b004      	add	sp, #16
 8008196:	bd80      	pop	{r7, pc}
 8008198:	ffffbf80 	.word	0xffffbf80

0800819c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80081a4:	210e      	movs	r1, #14
 80081a6:	187b      	adds	r3, r7, r1
 80081a8:	4a0b      	ldr	r2, [pc, #44]	; (80081d8 <USB_DisableGlobalInt+0x3c>)
 80081aa:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2240      	movs	r2, #64	; 0x40
 80081b0:	5a9b      	ldrh	r3, [r3, r2]
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	b21b      	sxth	r3, r3
 80081b6:	187a      	adds	r2, r7, r1
 80081b8:	2100      	movs	r1, #0
 80081ba:	5e52      	ldrsh	r2, [r2, r1]
 80081bc:	43d2      	mvns	r2, r2
 80081be:	b212      	sxth	r2, r2
 80081c0:	4013      	ands	r3, r2
 80081c2:	b21b      	sxth	r3, r3
 80081c4:	b299      	uxth	r1, r3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2240      	movs	r2, #64	; 0x40
 80081ca:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	0018      	movs	r0, r3
 80081d0:	46bd      	mov	sp, r7
 80081d2:	b004      	add	sp, #16
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	46c0      	nop			; (mov r8, r8)
 80081d8:	ffffbf80 	.word	0xffffbf80

080081dc <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80081dc:	b084      	sub	sp, #16
 80081de:	b590      	push	{r4, r7, lr}
 80081e0:	46c6      	mov	lr, r8
 80081e2:	b500      	push	{lr}
 80081e4:	b082      	sub	sp, #8
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
 80081ea:	2004      	movs	r0, #4
 80081ec:	2410      	movs	r4, #16
 80081ee:	46a4      	mov	ip, r4
 80081f0:	2408      	movs	r4, #8
 80081f2:	46a0      	mov	r8, r4
 80081f4:	44b8      	add	r8, r7
 80081f6:	44c4      	add	ip, r8
 80081f8:	4460      	add	r0, ip
 80081fa:	6001      	str	r1, [r0, #0]
 80081fc:	6042      	str	r2, [r0, #4]
 80081fe:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2240      	movs	r2, #64	; 0x40
 8008204:	2101      	movs	r1, #1
 8008206:	5299      	strh	r1, [r3, r2]

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2240      	movs	r2, #64	; 0x40
 800820c:	2100      	movs	r1, #0
 800820e:	5299      	strh	r1, [r3, r2]

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2244      	movs	r2, #68	; 0x44
 8008214:	2100      	movs	r1, #0
 8008216:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2250      	movs	r2, #80	; 0x50
 800821c:	2100      	movs	r1, #0
 800821e:	5299      	strh	r1, [r3, r2]

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	0018      	movs	r0, r3
 8008224:	f7ff ffa0 	bl	8008168 <USB_EnableGlobalInt>

  return HAL_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	0018      	movs	r0, r3
 800822c:	46bd      	mov	sp, r7
 800822e:	b002      	add	sp, #8
 8008230:	bc04      	pop	{r2}
 8008232:	4690      	mov	r8, r2
 8008234:	bc90      	pop	{r4, r7}
 8008236:	bc08      	pop	{r3}
 8008238:	b004      	add	sp, #16
 800823a:	4718      	bx	r3

0800823c <calloc>:
 800823c:	b510      	push	{r4, lr}
 800823e:	4b03      	ldr	r3, [pc, #12]	; (800824c <calloc+0x10>)
 8008240:	000a      	movs	r2, r1
 8008242:	0001      	movs	r1, r0
 8008244:	6818      	ldr	r0, [r3, #0]
 8008246:	f000 f83e 	bl	80082c6 <_calloc_r>
 800824a:	bd10      	pop	{r4, pc}
 800824c:	20000008 	.word	0x20000008

08008250 <__errno>:
 8008250:	4b01      	ldr	r3, [pc, #4]	; (8008258 <__errno+0x8>)
 8008252:	6818      	ldr	r0, [r3, #0]
 8008254:	4770      	bx	lr
 8008256:	46c0      	nop			; (mov r8, r8)
 8008258:	20000008 	.word	0x20000008

0800825c <__libc_init_array>:
 800825c:	b570      	push	{r4, r5, r6, lr}
 800825e:	2600      	movs	r6, #0
 8008260:	4d0c      	ldr	r5, [pc, #48]	; (8008294 <__libc_init_array+0x38>)
 8008262:	4c0d      	ldr	r4, [pc, #52]	; (8008298 <__libc_init_array+0x3c>)
 8008264:	1b64      	subs	r4, r4, r5
 8008266:	10a4      	asrs	r4, r4, #2
 8008268:	42a6      	cmp	r6, r4
 800826a:	d109      	bne.n	8008280 <__libc_init_array+0x24>
 800826c:	2600      	movs	r6, #0
 800826e:	f000 f8ab 	bl	80083c8 <_init>
 8008272:	4d0a      	ldr	r5, [pc, #40]	; (800829c <__libc_init_array+0x40>)
 8008274:	4c0a      	ldr	r4, [pc, #40]	; (80082a0 <__libc_init_array+0x44>)
 8008276:	1b64      	subs	r4, r4, r5
 8008278:	10a4      	asrs	r4, r4, #2
 800827a:	42a6      	cmp	r6, r4
 800827c:	d105      	bne.n	800828a <__libc_init_array+0x2e>
 800827e:	bd70      	pop	{r4, r5, r6, pc}
 8008280:	00b3      	lsls	r3, r6, #2
 8008282:	58eb      	ldr	r3, [r5, r3]
 8008284:	4798      	blx	r3
 8008286:	3601      	adds	r6, #1
 8008288:	e7ee      	b.n	8008268 <__libc_init_array+0xc>
 800828a:	00b3      	lsls	r3, r6, #2
 800828c:	58eb      	ldr	r3, [r5, r3]
 800828e:	4798      	blx	r3
 8008290:	3601      	adds	r6, #1
 8008292:	e7f2      	b.n	800827a <__libc_init_array+0x1e>
 8008294:	08008abc 	.word	0x08008abc
 8008298:	08008abc 	.word	0x08008abc
 800829c:	08008abc 	.word	0x08008abc
 80082a0:	08008ac0 	.word	0x08008ac0

080082a4 <memcpy>:
 80082a4:	2300      	movs	r3, #0
 80082a6:	b510      	push	{r4, lr}
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d100      	bne.n	80082ae <memcpy+0xa>
 80082ac:	bd10      	pop	{r4, pc}
 80082ae:	5ccc      	ldrb	r4, [r1, r3]
 80082b0:	54c4      	strb	r4, [r0, r3]
 80082b2:	3301      	adds	r3, #1
 80082b4:	e7f8      	b.n	80082a8 <memcpy+0x4>

080082b6 <memset>:
 80082b6:	0003      	movs	r3, r0
 80082b8:	1812      	adds	r2, r2, r0
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d100      	bne.n	80082c0 <memset+0xa>
 80082be:	4770      	bx	lr
 80082c0:	7019      	strb	r1, [r3, #0]
 80082c2:	3301      	adds	r3, #1
 80082c4:	e7f9      	b.n	80082ba <memset+0x4>

080082c6 <_calloc_r>:
 80082c6:	434a      	muls	r2, r1
 80082c8:	b570      	push	{r4, r5, r6, lr}
 80082ca:	0011      	movs	r1, r2
 80082cc:	0014      	movs	r4, r2
 80082ce:	f000 f809 	bl	80082e4 <_malloc_r>
 80082d2:	1e05      	subs	r5, r0, #0
 80082d4:	d003      	beq.n	80082de <_calloc_r+0x18>
 80082d6:	0022      	movs	r2, r4
 80082d8:	2100      	movs	r1, #0
 80082da:	f7ff ffec 	bl	80082b6 <memset>
 80082de:	0028      	movs	r0, r5
 80082e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080082e4 <_malloc_r>:
 80082e4:	2303      	movs	r3, #3
 80082e6:	b570      	push	{r4, r5, r6, lr}
 80082e8:	1ccd      	adds	r5, r1, #3
 80082ea:	439d      	bics	r5, r3
 80082ec:	3508      	adds	r5, #8
 80082ee:	0006      	movs	r6, r0
 80082f0:	2d0c      	cmp	r5, #12
 80082f2:	d21e      	bcs.n	8008332 <_malloc_r+0x4e>
 80082f4:	250c      	movs	r5, #12
 80082f6:	42a9      	cmp	r1, r5
 80082f8:	d81d      	bhi.n	8008336 <_malloc_r+0x52>
 80082fa:	0030      	movs	r0, r6
 80082fc:	f000 f862 	bl	80083c4 <__malloc_lock>
 8008300:	4a25      	ldr	r2, [pc, #148]	; (8008398 <_malloc_r+0xb4>)
 8008302:	6814      	ldr	r4, [r2, #0]
 8008304:	0021      	movs	r1, r4
 8008306:	2900      	cmp	r1, #0
 8008308:	d119      	bne.n	800833e <_malloc_r+0x5a>
 800830a:	4c24      	ldr	r4, [pc, #144]	; (800839c <_malloc_r+0xb8>)
 800830c:	6823      	ldr	r3, [r4, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d103      	bne.n	800831a <_malloc_r+0x36>
 8008312:	0030      	movs	r0, r6
 8008314:	f000 f844 	bl	80083a0 <_sbrk_r>
 8008318:	6020      	str	r0, [r4, #0]
 800831a:	0029      	movs	r1, r5
 800831c:	0030      	movs	r0, r6
 800831e:	f000 f83f 	bl	80083a0 <_sbrk_r>
 8008322:	1c43      	adds	r3, r0, #1
 8008324:	d12b      	bne.n	800837e <_malloc_r+0x9a>
 8008326:	230c      	movs	r3, #12
 8008328:	0030      	movs	r0, r6
 800832a:	6033      	str	r3, [r6, #0]
 800832c:	f000 f84b 	bl	80083c6 <__malloc_unlock>
 8008330:	e003      	b.n	800833a <_malloc_r+0x56>
 8008332:	2d00      	cmp	r5, #0
 8008334:	dadf      	bge.n	80082f6 <_malloc_r+0x12>
 8008336:	230c      	movs	r3, #12
 8008338:	6033      	str	r3, [r6, #0]
 800833a:	2000      	movs	r0, #0
 800833c:	bd70      	pop	{r4, r5, r6, pc}
 800833e:	680b      	ldr	r3, [r1, #0]
 8008340:	1b5b      	subs	r3, r3, r5
 8008342:	d419      	bmi.n	8008378 <_malloc_r+0x94>
 8008344:	2b0b      	cmp	r3, #11
 8008346:	d903      	bls.n	8008350 <_malloc_r+0x6c>
 8008348:	600b      	str	r3, [r1, #0]
 800834a:	18cc      	adds	r4, r1, r3
 800834c:	6025      	str	r5, [r4, #0]
 800834e:	e003      	b.n	8008358 <_malloc_r+0x74>
 8008350:	684b      	ldr	r3, [r1, #4]
 8008352:	428c      	cmp	r4, r1
 8008354:	d10d      	bne.n	8008372 <_malloc_r+0x8e>
 8008356:	6013      	str	r3, [r2, #0]
 8008358:	0030      	movs	r0, r6
 800835a:	f000 f834 	bl	80083c6 <__malloc_unlock>
 800835e:	0020      	movs	r0, r4
 8008360:	2207      	movs	r2, #7
 8008362:	300b      	adds	r0, #11
 8008364:	1d23      	adds	r3, r4, #4
 8008366:	4390      	bics	r0, r2
 8008368:	1ac3      	subs	r3, r0, r3
 800836a:	d0e7      	beq.n	800833c <_malloc_r+0x58>
 800836c:	425a      	negs	r2, r3
 800836e:	50e2      	str	r2, [r4, r3]
 8008370:	e7e4      	b.n	800833c <_malloc_r+0x58>
 8008372:	6063      	str	r3, [r4, #4]
 8008374:	000c      	movs	r4, r1
 8008376:	e7ef      	b.n	8008358 <_malloc_r+0x74>
 8008378:	000c      	movs	r4, r1
 800837a:	6849      	ldr	r1, [r1, #4]
 800837c:	e7c3      	b.n	8008306 <_malloc_r+0x22>
 800837e:	2303      	movs	r3, #3
 8008380:	1cc4      	adds	r4, r0, #3
 8008382:	439c      	bics	r4, r3
 8008384:	42a0      	cmp	r0, r4
 8008386:	d0e1      	beq.n	800834c <_malloc_r+0x68>
 8008388:	1a21      	subs	r1, r4, r0
 800838a:	0030      	movs	r0, r6
 800838c:	f000 f808 	bl	80083a0 <_sbrk_r>
 8008390:	1c43      	adds	r3, r0, #1
 8008392:	d1db      	bne.n	800834c <_malloc_r+0x68>
 8008394:	e7c7      	b.n	8008326 <_malloc_r+0x42>
 8008396:	46c0      	nop			; (mov r8, r8)
 8008398:	200000c0 	.word	0x200000c0
 800839c:	200000c4 	.word	0x200000c4

080083a0 <_sbrk_r>:
 80083a0:	2300      	movs	r3, #0
 80083a2:	b570      	push	{r4, r5, r6, lr}
 80083a4:	4c06      	ldr	r4, [pc, #24]	; (80083c0 <_sbrk_r+0x20>)
 80083a6:	0005      	movs	r5, r0
 80083a8:	0008      	movs	r0, r1
 80083aa:	6023      	str	r3, [r4, #0]
 80083ac:	f7fb fd00 	bl	8003db0 <_sbrk>
 80083b0:	1c43      	adds	r3, r0, #1
 80083b2:	d103      	bne.n	80083bc <_sbrk_r+0x1c>
 80083b4:	6823      	ldr	r3, [r4, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d000      	beq.n	80083bc <_sbrk_r+0x1c>
 80083ba:	602b      	str	r3, [r5, #0]
 80083bc:	bd70      	pop	{r4, r5, r6, pc}
 80083be:	46c0      	nop			; (mov r8, r8)
 80083c0:	20000564 	.word	0x20000564

080083c4 <__malloc_lock>:
 80083c4:	4770      	bx	lr

080083c6 <__malloc_unlock>:
 80083c6:	4770      	bx	lr

080083c8 <_init>:
 80083c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ca:	46c0      	nop			; (mov r8, r8)
 80083cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ce:	bc08      	pop	{r3}
 80083d0:	469e      	mov	lr, r3
 80083d2:	4770      	bx	lr

080083d4 <_fini>:
 80083d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083d6:	46c0      	nop			; (mov r8, r8)
 80083d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083da:	bc08      	pop	{r3}
 80083dc:	469e      	mov	lr, r3
 80083de:	4770      	bx	lr
