
project_L0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000715c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000690  0800721c  0800721c  0001721c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078ac  080078ac  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080078ac  080078ac  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080078ac  080078ac  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078ac  080078ac  000178ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078b0  080078b0  000178b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080078b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  20000068  0800791c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  0800791c  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001684d  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c6b  00000000  00000000  000368dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001128  00000000  00000000  00039548  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa8  00000000  00000000  0003a670  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001756d  00000000  00000000  0003b618  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eccd  00000000  00000000  00052b85  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008cdb7  00000000  00000000  00061852  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ee609  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f40  00000000  00000000  000ee684  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007204 	.word	0x08007204

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08007204 	.word	0x08007204

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <SPI_CS_LOW>:
 */

#include "TFT_display.h"

// ---- lower level functions ----
void SPI_CS_LOW() {HAL_GPIO_WritePin(CS_GPIO, CS_PIN, GPIO_PIN_RESET);}
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
 80003f8:	4b04      	ldr	r3, [pc, #16]	; (800040c <SPI_CS_LOW+0x18>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	2180      	movs	r1, #128	; 0x80
 80003fe:	0018      	movs	r0, r3
 8000400:	f003 f9bf 	bl	8003782 <HAL_GPIO_WritePin>
 8000404:	46c0      	nop			; (mov r8, r8)
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	50000800 	.word	0x50000800

08000410 <SPI_CS_HIGH>:

void SPI_CS_HIGH() {HAL_GPIO_WritePin(CS_GPIO, CS_PIN, GPIO_PIN_SET);}
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
 8000414:	4b04      	ldr	r3, [pc, #16]	; (8000428 <SPI_CS_HIGH+0x18>)
 8000416:	2201      	movs	r2, #1
 8000418:	2180      	movs	r1, #128	; 0x80
 800041a:	0018      	movs	r0, r3
 800041c:	f003 f9b1 	bl	8003782 <HAL_GPIO_WritePin>
 8000420:	46c0      	nop			; (mov r8, r8)
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	50000800 	.word	0x50000800

0800042c <SPI_DC_LOW>:

void SPI_DC_LOW() {HAL_GPIO_WritePin(DC_GPIO, DC_PIN, GPIO_PIN_RESET);}
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
 8000430:	4b04      	ldr	r3, [pc, #16]	; (8000444 <SPI_DC_LOW+0x18>)
 8000432:	2200      	movs	r2, #0
 8000434:	2140      	movs	r1, #64	; 0x40
 8000436:	0018      	movs	r0, r3
 8000438:	f003 f9a3 	bl	8003782 <HAL_GPIO_WritePin>
 800043c:	46c0      	nop			; (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	50000400 	.word	0x50000400

08000448 <SPI_DC_HIGH>:

void SPI_DC_HIGH() {HAL_GPIO_WritePin(DC_GPIO, DC_PIN, GPIO_PIN_SET);}
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
 800044c:	4b04      	ldr	r3, [pc, #16]	; (8000460 <SPI_DC_HIGH+0x18>)
 800044e:	2201      	movs	r2, #1
 8000450:	2140      	movs	r1, #64	; 0x40
 8000452:	0018      	movs	r0, r3
 8000454:	f003 f995 	bl	8003782 <HAL_GPIO_WritePin>
 8000458:	46c0      	nop			; (mov r8, r8)
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	50000400 	.word	0x50000400

08000464 <sendCommand>:

// still ripped but now im changing it
void sendCommand(uint8_t cmd, uint8_t *args, uint16_t numArgs, SPI_HandleTypeDef *hspi) {
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	60b9      	str	r1, [r7, #8]
 800046c:	0011      	movs	r1, r2
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	230f      	movs	r3, #15
 8000472:	18fb      	adds	r3, r7, r3
 8000474:	1c02      	adds	r2, r0, #0
 8000476:	701a      	strb	r2, [r3, #0]
 8000478:	230c      	movs	r3, #12
 800047a:	18fb      	adds	r3, r7, r3
 800047c:	1c0a      	adds	r2, r1, #0
 800047e:	801a      	strh	r2, [r3, #0]
	while (HAL_SPI_GetState(hspi) == HAL_SPI_STATE_BUSY_TX);		// block next transfer request while DMA transfer is ongoing
 8000480:	46c0      	nop			; (mov r8, r8)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	0018      	movs	r0, r3
 8000486:	f005 fbf5 	bl	8005c74 <HAL_SPI_GetState>
 800048a:	0003      	movs	r3, r0
 800048c:	2b03      	cmp	r3, #3
 800048e:	d0f8      	beq.n	8000482 <sendCommand+0x1e>
	SPI_CS_LOW();	// chip select
 8000490:	f7ff ffb0 	bl	80003f4 <SPI_CS_LOW>

	SPI_DC_LOW();	// command mode
 8000494:	f7ff ffca 	bl	800042c <SPI_DC_LOW>
	HAL_SPI_Transmit(hspi, &cmd, 1, 1000);	// not using DMA bc it's only 1 byte
 8000498:	23fa      	movs	r3, #250	; 0xfa
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	220f      	movs	r2, #15
 800049e:	18b9      	adds	r1, r7, r2
 80004a0:	6878      	ldr	r0, [r7, #4]
 80004a2:	2201      	movs	r2, #1
 80004a4:	f005 f904 	bl	80056b0 <HAL_SPI_Transmit>

	SPI_DC_HIGH();	// data mode
 80004a8:	f7ff ffce 	bl	8000448 <SPI_DC_HIGH>
	if (numArgs) {
 80004ac:	230c      	movs	r3, #12
 80004ae:	18fb      	adds	r3, r7, r3
 80004b0:	881b      	ldrh	r3, [r3, #0]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d007      	beq.n	80004c6 <sendCommand+0x62>
		HAL_SPI_Transmit_IT(hspi, args, numArgs);
 80004b6:	230c      	movs	r3, #12
 80004b8:	18fb      	adds	r3, r7, r3
 80004ba:	881a      	ldrh	r2, [r3, #0]
 80004bc:	68b9      	ldr	r1, [r7, #8]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	0018      	movs	r0, r3
 80004c2:	f005 fa43 	bl	800594c <HAL_SPI_Transmit_IT>
//		HAL_SPI_Transmit_DMA(hspi, args, numArgs);
	}

//	SPI_CS_HIGH();	// chip select disable
}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b004      	add	sp, #16
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <HAL_SPI_TxCpltCallback>:

// DMA callback on transfer compelete
// using only for sending data, but not commands
// dont send request when transfer is ongoing
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(CS_GPIO, CS_PIN) == GPIO_PIN_RESET) SPI_CS_HIGH();	// chip select disable
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <HAL_SPI_TxCpltCallback+0x24>)
 80004da:	2180      	movs	r1, #128	; 0x80
 80004dc:	0018      	movs	r0, r3
 80004de:	f003 f933 	bl	8003748 <HAL_GPIO_ReadPin>
 80004e2:	1e03      	subs	r3, r0, #0
 80004e4:	d101      	bne.n	80004ea <HAL_SPI_TxCpltCallback+0x1a>
 80004e6:	f7ff ff93 	bl	8000410 <SPI_CS_HIGH>
}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	b002      	add	sp, #8
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	50000800 	.word	0x50000800

080004f8 <displayInit>:

// array parser heavily based on Adafruit library code
void displayInit(uint8_t *args, SPI_HandleTypeDef *hspi) {
 80004f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
	uint8_t  numCommands, cmd, numArgs;
	uint16_t ms;
	uint8_t index = 0;
 8000502:	220b      	movs	r2, #11
 8000504:	0011      	movs	r1, r2
 8000506:	18bb      	adds	r3, r7, r2
 8000508:	2200      	movs	r2, #0
 800050a:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	numCommands = args[index++];   // Number of commands to follow
 800050c:	000a      	movs	r2, r1
 800050e:	18bb      	adds	r3, r7, r2
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	18ba      	adds	r2, r7, r2
 8000514:	1c59      	adds	r1, r3, #1
 8000516:	7011      	strb	r1, [r2, #0]
 8000518:	001a      	movs	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	189a      	adds	r2, r3, r2
 800051e:	230f      	movs	r3, #15
 8000520:	18fb      	adds	r3, r7, r3
 8000522:	7812      	ldrb	r2, [r2, #0]
 8000524:	701a      	strb	r2, [r3, #0]
	while(numCommands--) {                 // For each command...
 8000526:	e05e      	b.n	80005e6 <displayInit+0xee>
		cmd = args[index++];         // Read command
 8000528:	200b      	movs	r0, #11
 800052a:	183b      	adds	r3, r7, r0
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	183a      	adds	r2, r7, r0
 8000530:	1c59      	adds	r1, r3, #1
 8000532:	7011      	strb	r1, [r2, #0]
 8000534:	001a      	movs	r2, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	189a      	adds	r2, r3, r2
 800053a:	230a      	movs	r3, #10
 800053c:	18fb      	adds	r3, r7, r3
 800053e:	7812      	ldrb	r2, [r2, #0]
 8000540:	701a      	strb	r2, [r3, #0]
		numArgs  = args[index++];    // Number of args to follow
 8000542:	183b      	adds	r3, r7, r0
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	183a      	adds	r2, r7, r0
 8000548:	1c59      	adds	r1, r3, #1
 800054a:	7011      	strb	r1, [r2, #0]
 800054c:	001a      	movs	r2, r3
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	189a      	adds	r2, r3, r2
 8000552:	2609      	movs	r6, #9
 8000554:	19bb      	adds	r3, r7, r6
 8000556:	7812      	ldrb	r2, [r2, #0]
 8000558:	701a      	strb	r2, [r3, #0]
		ms       = numArgs & ST_CMD_DELAY;   // If hibit set, delay follows args
 800055a:	19bb      	adds	r3, r7, r6
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	b29a      	uxth	r2, r3
 8000560:	210c      	movs	r1, #12
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2180      	movs	r1, #128	; 0x80
 8000566:	400a      	ands	r2, r1
 8000568:	801a      	strh	r2, [r3, #0]
		numArgs &= ~ST_CMD_DELAY;            // Mask out delay bit
 800056a:	19bb      	adds	r3, r7, r6
 800056c:	19ba      	adds	r2, r7, r6
 800056e:	7812      	ldrb	r2, [r2, #0]
 8000570:	217f      	movs	r1, #127	; 0x7f
 8000572:	400a      	ands	r2, r1
 8000574:	701a      	strb	r2, [r3, #0]
		sendCommand(cmd, &args[index], numArgs, hspi);
 8000576:	0005      	movs	r5, r0
 8000578:	183b      	adds	r3, r7, r0
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	18d1      	adds	r1, r2, r3
 8000580:	19bb      	adds	r3, r7, r6
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	b29a      	uxth	r2, r3
 8000586:	683c      	ldr	r4, [r7, #0]
 8000588:	230a      	movs	r3, #10
 800058a:	18fb      	adds	r3, r7, r3
 800058c:	7818      	ldrb	r0, [r3, #0]
 800058e:	0023      	movs	r3, r4
 8000590:	f7ff ff68 	bl	8000464 <sendCommand>
		index += numArgs;
 8000594:	0028      	movs	r0, r5
 8000596:	183b      	adds	r3, r7, r0
 8000598:	1839      	adds	r1, r7, r0
 800059a:	19ba      	adds	r2, r7, r6
 800059c:	7809      	ldrb	r1, [r1, #0]
 800059e:	7812      	ldrb	r2, [r2, #0]
 80005a0:	188a      	adds	r2, r1, r2
 80005a2:	701a      	strb	r2, [r3, #0]

		if(ms) {
 80005a4:	210c      	movs	r1, #12
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d01b      	beq.n	80005e6 <displayInit+0xee>
			ms = args[index++]; // Read post-command delay time (ms)
 80005ae:	220b      	movs	r2, #11
 80005b0:	18bb      	adds	r3, r7, r2
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	18ba      	adds	r2, r7, r2
 80005b6:	1c59      	adds	r1, r3, #1
 80005b8:	7011      	strb	r1, [r2, #0]
 80005ba:	001a      	movs	r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	189b      	adds	r3, r3, r2
 80005c0:	781a      	ldrb	r2, [r3, #0]
 80005c2:	210c      	movs	r1, #12
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	801a      	strh	r2, [r3, #0]
			if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	881b      	ldrh	r3, [r3, #0]
 80005cc:	2bff      	cmp	r3, #255	; 0xff
 80005ce:	d104      	bne.n	80005da <displayInit+0xe2>
 80005d0:	230c      	movs	r3, #12
 80005d2:	18fb      	adds	r3, r7, r3
 80005d4:	22fa      	movs	r2, #250	; 0xfa
 80005d6:	0052      	lsls	r2, r2, #1
 80005d8:	801a      	strh	r2, [r3, #0]
			HAL_Delay(ms);
 80005da:	230c      	movs	r3, #12
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	881b      	ldrh	r3, [r3, #0]
 80005e0:	0018      	movs	r0, r3
 80005e2:	f002 fa9b 	bl	8002b1c <HAL_Delay>
	while(numCommands--) {                 // For each command...
 80005e6:	220f      	movs	r2, #15
 80005e8:	18bb      	adds	r3, r7, r2
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	18ba      	adds	r2, r7, r2
 80005ee:	1e59      	subs	r1, r3, #1
 80005f0:	7011      	strb	r1, [r2, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d198      	bne.n	8000528 <displayInit+0x30>
		}
	}

	// note: this line may be doing more work than I think
	// (hard to read in datasheet)
	data = 0xC0;
 80005f6:	2108      	movs	r1, #8
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	22c0      	movs	r2, #192	; 0xc0
 80005fc:	701a      	strb	r2, [r3, #0]
	sendCommand(ST77XX_MADCTL, &data, 1, hspi);
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	1879      	adds	r1, r7, r1
 8000602:	2201      	movs	r2, #1
 8000604:	2036      	movs	r0, #54	; 0x36
 8000606:	f7ff ff2d 	bl	8000464 <sendCommand>
}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	b005      	add	sp, #20
 8000610:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000614 <TFT_startup>:

void TFT_startup(SPI_HandleTypeDef *hspi) {
 8000614:	b590      	push	{r4, r7, lr}
 8000616:	b0a3      	sub	sp, #140	; 0x8c
 8000618:	af02      	add	r7, sp, #8
 800061a:	6078      	str	r0, [r7, #4]
	// startup sequence: rcmd1->rcmd2red->rcmd3
	uint8_t initCommands[] = {
 800061c:	240c      	movs	r4, #12
 800061e:	193a      	adds	r2, r7, r4
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <TFT_startup+0x60>)
 8000622:	0010      	movs	r0, r2
 8000624:	0019      	movs	r1, r3
 8000626:	2371      	movs	r3, #113	; 0x71
 8000628:	001a      	movs	r2, r3
 800062a:	f006 f9db 	bl	80069e4 <memcpy>
			10,                           //     10 ms delay
		ST77XX_DISPON,    ST_CMD_DELAY, //  4: Main screen turn on, no args w/delay
			100	                        //     100 ms delay
	};

	displayInit(initCommands, hspi);
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	193b      	adds	r3, r7, r4
 8000632:	0011      	movs	r1, r2
 8000634:	0018      	movs	r0, r3
 8000636:	f7ff ff5f 	bl	80004f8 <displayInit>
	setAddrWindow(0, 0, WIDTH, HEIGHT, hspi);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	23a0      	movs	r3, #160	; 0xa0
 8000640:	2280      	movs	r2, #128	; 0x80
 8000642:	2100      	movs	r1, #0
 8000644:	2000      	movs	r0, #0
 8000646:	f000 f821 	bl	800068c <setAddrWindow>

	// set the global variables
	cursorX = 0;
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <TFT_startup+0x64>)
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]
	cursorY = 0;
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <TFT_startup+0x68>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
	textSize = 1;
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <TFT_startup+0x6c>)
 8000658:	2201      	movs	r2, #1
 800065a:	701a      	strb	r2, [r3, #0]
	textColor = ST77XX_BLACK;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <TFT_startup+0x70>)
 800065e:	2200      	movs	r2, #0
 8000660:	801a      	strh	r2, [r3, #0]
	bg = ST77XX_WHITE;
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <TFT_startup+0x74>)
 8000664:	2201      	movs	r2, #1
 8000666:	4252      	negs	r2, r2
 8000668:	801a      	strh	r2, [r3, #0]
}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b021      	add	sp, #132	; 0x84
 8000670:	bd90      	pop	{r4, r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	0800721c 	.word	0x0800721c
 8000678:	20000084 	.word	0x20000084
 800067c:	20000085 	.word	0x20000085
 8000680:	20000086 	.word	0x20000086
 8000684:	20000088 	.word	0x20000088
 8000688:	200000c8 	.word	0x200000c8

0800068c <setAddrWindow>:

// draw something: set addr window -> write to ram memory
// sets specific area on display to write pixels to
// x and y for upper left corner, w for width, h for height
void setAddrWindow(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SPI_HandleTypeDef *hspi) {
 800068c:	b5b0      	push	{r4, r5, r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	0005      	movs	r5, r0
 8000694:	000c      	movs	r4, r1
 8000696:	0010      	movs	r0, r2
 8000698:	0019      	movs	r1, r3
 800069a:	1dbb      	adds	r3, r7, #6
 800069c:	1c2a      	adds	r2, r5, #0
 800069e:	801a      	strh	r2, [r3, #0]
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	1c22      	adds	r2, r4, #0
 80006a4:	801a      	strh	r2, [r3, #0]
 80006a6:	1cbb      	adds	r3, r7, #2
 80006a8:	1c02      	adds	r2, r0, #0
 80006aa:	801a      	strh	r2, [r3, #0]
 80006ac:	003b      	movs	r3, r7
 80006ae:	1c0a      	adds	r2, r1, #0
 80006b0:	801a      	strh	r2, [r3, #0]
	// not really needed for our display
	x += _xstart;
 80006b2:	1dbb      	adds	r3, r7, #6
 80006b4:	1dba      	adds	r2, r7, #6
 80006b6:	8812      	ldrh	r2, [r2, #0]
 80006b8:	801a      	strh	r2, [r3, #0]
	y += _ystart;
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	1d3a      	adds	r2, r7, #4
 80006be:	8812      	ldrh	r2, [r2, #0]
 80006c0:	801a      	strh	r2, [r3, #0]

	uint8_t temp[4];
	temp[0] = (x & (0xFF00)) >> 8;
 80006c2:	1dbb      	adds	r3, r7, #6
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	0a1b      	lsrs	r3, r3, #8
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	210c      	movs	r1, #12
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	701a      	strb	r2, [r3, #0]
	temp[1] = x & (0xFF);
 80006d2:	1dbb      	adds	r3, r7, #6
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	705a      	strb	r2, [r3, #1]
	temp[2] = ((x+w-1) & (0xFF00)) >> 8;
 80006dc:	1dbb      	adds	r3, r7, #6
 80006de:	881a      	ldrh	r2, [r3, #0]
 80006e0:	1cbb      	adds	r3, r7, #2
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	18d3      	adds	r3, r2, r3
 80006e6:	3b01      	subs	r3, #1
 80006e8:	121b      	asrs	r3, r3, #8
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	709a      	strb	r2, [r3, #2]
	temp[3] = (x+w-1) & (0xFF);
 80006f0:	1dbb      	adds	r3, r7, #6
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	1cbb      	adds	r3, r7, #2
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	18d3      	adds	r3, r2, r3
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	3b01      	subs	r3, #1
 8000702:	b2da      	uxtb	r2, r3
 8000704:	187b      	adds	r3, r7, r1
 8000706:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_CASET, temp, 4, hspi);
 8000708:	6a3b      	ldr	r3, [r7, #32]
 800070a:	000c      	movs	r4, r1
 800070c:	1879      	adds	r1, r7, r1
 800070e:	2204      	movs	r2, #4
 8000710:	202a      	movs	r0, #42	; 0x2a
 8000712:	f7ff fea7 	bl	8000464 <sendCommand>

	temp[0] = (y & (0xFF00)) >> 8;
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	881b      	ldrh	r3, [r3, #0]
 800071a:	0a1b      	lsrs	r3, r3, #8
 800071c:	b29b      	uxth	r3, r3
 800071e:	b2da      	uxtb	r2, r3
 8000720:	0021      	movs	r1, r4
 8000722:	187b      	adds	r3, r7, r1
 8000724:	701a      	strb	r2, [r3, #0]
	temp[1] = y & (0xFF);
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	b2da      	uxtb	r2, r3
 800072c:	187b      	adds	r3, r7, r1
 800072e:	705a      	strb	r2, [r3, #1]
	temp[2] = ((y+h-1) & (0xFF00)) >> 8;
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	881a      	ldrh	r2, [r3, #0]
 8000734:	003b      	movs	r3, r7
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	18d3      	adds	r3, r2, r3
 800073a:	3b01      	subs	r3, #1
 800073c:	121b      	asrs	r3, r3, #8
 800073e:	b2da      	uxtb	r2, r3
 8000740:	187b      	adds	r3, r7, r1
 8000742:	709a      	strb	r2, [r3, #2]
	temp[3] = (y+h-1) & (0x00FF);
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	b2da      	uxtb	r2, r3
 800074a:	003b      	movs	r3, r7
 800074c:	881b      	ldrh	r3, [r3, #0]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	18d3      	adds	r3, r2, r3
 8000752:	b2db      	uxtb	r3, r3
 8000754:	3b01      	subs	r3, #1
 8000756:	b2da      	uxtb	r2, r3
 8000758:	187b      	adds	r3, r7, r1
 800075a:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_RASET, temp, 4, hspi);
 800075c:	6a3b      	ldr	r3, [r7, #32]
 800075e:	1879      	adds	r1, r7, r1
 8000760:	2204      	movs	r2, #4
 8000762:	202b      	movs	r0, #43	; 0x2b
 8000764:	f7ff fe7e 	bl	8000464 <sendCommand>
}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	b004      	add	sp, #16
 800076e:	bdb0      	pop	{r4, r5, r7, pc}

08000770 <colorFixer>:
// 8-bit spi bus wants msb first; in array, lowest index is sent first
// because L4 is little-endian
//   for 16-bit value, it sends lower byte before upper byte
//   resulting in device thinking lower byte is upper byte
// this switches byte order around
uint16_t colorFixer(uint16_t color) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	0002      	movs	r2, r0
 8000778:	1dbb      	adds	r3, r7, #6
 800077a:	801a      	strh	r2, [r3, #0]
	uint8_t a = color & 0xFF;
 800077c:	210f      	movs	r1, #15
 800077e:	187b      	adds	r3, r7, r1
 8000780:	1dba      	adds	r2, r7, #6
 8000782:	8812      	ldrh	r2, [r2, #0]
 8000784:	701a      	strb	r2, [r3, #0]
	uint8_t b = (color & 0xFF00) >> 8;
 8000786:	1dbb      	adds	r3, r7, #6
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	0a1b      	lsrs	r3, r3, #8
 800078c:	b29a      	uxth	r2, r3
 800078e:	200e      	movs	r0, #14
 8000790:	183b      	adds	r3, r7, r0
 8000792:	701a      	strb	r2, [r3, #0]
	uint16_t ret = (a << 8) | b;
 8000794:	187b      	adds	r3, r7, r1
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	021b      	lsls	r3, r3, #8
 800079a:	b21a      	sxth	r2, r3
 800079c:	183b      	adds	r3, r7, r0
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	b21b      	sxth	r3, r3
 80007a2:	4313      	orrs	r3, r2
 80007a4:	b21a      	sxth	r2, r3
 80007a6:	210c      	movs	r1, #12
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	801a      	strh	r2, [r3, #0]

	return ret;
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	881b      	ldrh	r3, [r3, #0]
}
 80007b0:	0018      	movs	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	b004      	add	sp, #16
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <drawBuffer>:
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
}

void drawBuffer(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t *buffer, uint16_t bufferSize, SPI_HandleTypeDef *hspi) {
 80007b8:	b5b0      	push	{r4, r5, r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af02      	add	r7, sp, #8
 80007be:	0005      	movs	r5, r0
 80007c0:	000c      	movs	r4, r1
 80007c2:	0010      	movs	r0, r2
 80007c4:	0019      	movs	r1, r3
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	1c2a      	adds	r2, r5, #0
 80007ca:	701a      	strb	r2, [r3, #0]
 80007cc:	1dbb      	adds	r3, r7, #6
 80007ce:	1c22      	adds	r2, r4, #0
 80007d0:	701a      	strb	r2, [r3, #0]
 80007d2:	1d7b      	adds	r3, r7, #5
 80007d4:	1c02      	adds	r2, r0, #0
 80007d6:	701a      	strb	r2, [r3, #0]
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	1c0a      	adds	r2, r1, #0
 80007dc:	701a      	strb	r2, [r3, #0]
	// just dont call this with out-of-range vals pls.
	if (x+w > WIDTH || y+h > HEIGHT) return;
 80007de:	1dfb      	adds	r3, r7, #7
 80007e0:	781a      	ldrb	r2, [r3, #0]
 80007e2:	1d7b      	adds	r3, r7, #5
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	18d3      	adds	r3, r2, r3
 80007e8:	2b80      	cmp	r3, #128	; 0x80
 80007ea:	dc29      	bgt.n	8000840 <drawBuffer+0x88>
 80007ec:	1dbb      	adds	r3, r7, #6
 80007ee:	781a      	ldrb	r2, [r3, #0]
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	18d3      	adds	r3, r2, r3
 80007f6:	2ba0      	cmp	r3, #160	; 0xa0
 80007f8:	dc22      	bgt.n	8000840 <drawBuffer+0x88>

	// also don't call this with buffer size too big bc there's not enough ram for all pixels of display
	if (bufferSize > 10240) return;
 80007fa:	231c      	movs	r3, #28
 80007fc:	18fb      	adds	r3, r7, r3
 80007fe:	881a      	ldrh	r2, [r3, #0]
 8000800:	23a0      	movs	r3, #160	; 0xa0
 8000802:	019b      	lsls	r3, r3, #6
 8000804:	429a      	cmp	r2, r3
 8000806:	d81d      	bhi.n	8000844 <drawBuffer+0x8c>

	setAddrWindow(x, y, w, h, hspi);
 8000808:	1dfb      	adds	r3, r7, #7
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	b298      	uxth	r0, r3
 800080e:	1dbb      	adds	r3, r7, #6
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	b299      	uxth	r1, r3
 8000814:	1d7b      	adds	r3, r7, #5
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	b29a      	uxth	r2, r3
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	b29c      	uxth	r4, r3
 8000820:	6a3b      	ldr	r3, [r7, #32]
 8000822:	9300      	str	r3, [sp, #0]
 8000824:	0023      	movs	r3, r4
 8000826:	f7ff ff31 	bl	800068c <setAddrWindow>
	sendCommand(ST77XX_RAMWR, buffer, bufferSize*2, hspi);
 800082a:	231c      	movs	r3, #28
 800082c:	18fb      	adds	r3, r7, r3
 800082e:	881b      	ldrh	r3, [r3, #0]
 8000830:	18db      	adds	r3, r3, r3
 8000832:	b29a      	uxth	r2, r3
 8000834:	6a3b      	ldr	r3, [r7, #32]
 8000836:	69b9      	ldr	r1, [r7, #24]
 8000838:	202c      	movs	r0, #44	; 0x2c
 800083a:	f7ff fe13 	bl	8000464 <sendCommand>
 800083e:	e002      	b.n	8000846 <drawBuffer+0x8e>
	if (x+w > WIDTH || y+h > HEIGHT) return;
 8000840:	46c0      	nop			; (mov r8, r8)
 8000842:	e000      	b.n	8000846 <drawBuffer+0x8e>
	if (bufferSize > 10240) return;
 8000844:	46c0      	nop			; (mov r8, r8)
}
 8000846:	46bd      	mov	sp, r7
 8000848:	b002      	add	sp, #8
 800084a:	bdb0      	pop	{r4, r5, r7, pc}

0800084c <fillScreen>:

//void fillScreen(uint16_t color, SPI_HandleTypeDef *hspi) {
//	fillRect(0, 0, WIDTH, HEIGHT, color, hspi);
//}

void fillScreen(uint16_t color, SPI_HandleTypeDef *hspi) {
 800084c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800084e:	b091      	sub	sp, #68	; 0x44
 8000850:	af04      	add	r7, sp, #16
 8000852:	61b9      	str	r1, [r7, #24]
 8000854:	221e      	movs	r2, #30
 8000856:	18ba      	adds	r2, r7, r2
 8000858:	1c01      	adds	r1, r0, #0
 800085a:	8011      	strh	r1, [r2, #0]
 800085c:	466a      	mov	r2, sp
 800085e:	607a      	str	r2, [r7, #4]
	uint16_t bufferSize = WIDTH*HEIGHT/4;
 8000860:	2012      	movs	r0, #18
 8000862:	2218      	movs	r2, #24
 8000864:	18b9      	adds	r1, r7, r2
 8000866:	180a      	adds	r2, r1, r0
 8000868:	21a0      	movs	r1, #160	; 0xa0
 800086a:	0149      	lsls	r1, r1, #5
 800086c:	8011      	strh	r1, [r2, #0]
	uint16_t buffer[bufferSize];
 800086e:	2218      	movs	r2, #24
 8000870:	18ba      	adds	r2, r7, r2
 8000872:	1812      	adds	r2, r2, r0
 8000874:	8812      	ldrh	r2, [r2, #0]
 8000876:	0011      	movs	r1, r2
 8000878:	3901      	subs	r1, #1
 800087a:	6279      	str	r1, [r7, #36]	; 0x24
 800087c:	613a      	str	r2, [r7, #16]
 800087e:	2100      	movs	r1, #0
 8000880:	6179      	str	r1, [r7, #20]
 8000882:	6939      	ldr	r1, [r7, #16]
 8000884:	0f09      	lsrs	r1, r1, #28
 8000886:	6978      	ldr	r0, [r7, #20]
 8000888:	0106      	lsls	r6, r0, #4
 800088a:	430e      	orrs	r6, r1
 800088c:	6939      	ldr	r1, [r7, #16]
 800088e:	010d      	lsls	r5, r1, #4
 8000890:	60ba      	str	r2, [r7, #8]
 8000892:	2100      	movs	r1, #0
 8000894:	60f9      	str	r1, [r7, #12]
 8000896:	68bd      	ldr	r5, [r7, #8]
 8000898:	68fe      	ldr	r6, [r7, #12]
 800089a:	0029      	movs	r1, r5
 800089c:	0f09      	lsrs	r1, r1, #28
 800089e:	0030      	movs	r0, r6
 80008a0:	0104      	lsls	r4, r0, #4
 80008a2:	430c      	orrs	r4, r1
 80008a4:	0029      	movs	r1, r5
 80008a6:	010b      	lsls	r3, r1, #4
 80008a8:	0013      	movs	r3, r2
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	3301      	adds	r3, #1
 80008ae:	3307      	adds	r3, #7
 80008b0:	08db      	lsrs	r3, r3, #3
 80008b2:	00db      	lsls	r3, r3, #3
 80008b4:	466a      	mov	r2, sp
 80008b6:	1ad3      	subs	r3, r2, r3
 80008b8:	469d      	mov	sp, r3
 80008ba:	ab04      	add	r3, sp, #16
 80008bc:	3301      	adds	r3, #1
 80008be:	085b      	lsrs	r3, r3, #1
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	623b      	str	r3, [r7, #32]
	int i;
	for (i = 0; i < bufferSize; i++) {
 80008c4:	2300      	movs	r3, #0
 80008c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008c8:	e00e      	b.n	80008e8 <fillScreen+0x9c>
		buffer[i] = colorFixer(color);
 80008ca:	231e      	movs	r3, #30
 80008cc:	18fb      	adds	r3, r7, r3
 80008ce:	881b      	ldrh	r3, [r3, #0]
 80008d0:	0018      	movs	r0, r3
 80008d2:	f7ff ff4d 	bl	8000770 <colorFixer>
 80008d6:	0003      	movs	r3, r0
 80008d8:	0019      	movs	r1, r3
 80008da:	6a3b      	ldr	r3, [r7, #32]
 80008dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008de:	0052      	lsls	r2, r2, #1
 80008e0:	52d1      	strh	r1, [r2, r3]
	for (i = 0; i < bufferSize; i++) {
 80008e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008e4:	3301      	adds	r3, #1
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008e8:	2312      	movs	r3, #18
 80008ea:	2218      	movs	r2, #24
 80008ec:	4694      	mov	ip, r2
 80008ee:	44bc      	add	ip, r7
 80008f0:	4463      	add	r3, ip
 80008f2:	881b      	ldrh	r3, [r3, #0]
 80008f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008f6:	429a      	cmp	r2, r3
 80008f8:	dbe7      	blt.n	80008ca <fillScreen+0x7e>
	}

	for (i = 0; i < 4; i++) {
 80008fa:	2300      	movs	r3, #0
 80008fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008fe:	e017      	b.n	8000930 <fillScreen+0xe4>
		drawBuffer(0, HEIGHT/4*i, WIDTH, HEIGHT/4, buffer, bufferSize, hspi);
 8000900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000902:	b2db      	uxtb	r3, r3
 8000904:	2228      	movs	r2, #40	; 0x28
 8000906:	4353      	muls	r3, r2
 8000908:	b2d9      	uxtb	r1, r3
 800090a:	6a3b      	ldr	r3, [r7, #32]
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	9202      	str	r2, [sp, #8]
 8000910:	2212      	movs	r2, #18
 8000912:	2018      	movs	r0, #24
 8000914:	4684      	mov	ip, r0
 8000916:	44bc      	add	ip, r7
 8000918:	4462      	add	r2, ip
 800091a:	8812      	ldrh	r2, [r2, #0]
 800091c:	9201      	str	r2, [sp, #4]
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	2328      	movs	r3, #40	; 0x28
 8000922:	2280      	movs	r2, #128	; 0x80
 8000924:	2000      	movs	r0, #0
 8000926:	f7ff ff47 	bl	80007b8 <drawBuffer>
	for (i = 0; i < 4; i++) {
 800092a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800092c:	3301      	adds	r3, #1
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000932:	2b03      	cmp	r3, #3
 8000934:	dde4      	ble.n	8000900 <fillScreen+0xb4>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	469d      	mov	sp, r3
//		HAL_Delay(1000);
	}
}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	b00d      	add	sp, #52	; 0x34
 8000940:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000944 <drawChar>:
//		if (textSize == 1) drawVLine(cursorX+5, cursorY, 8, bg, hspi);
//		else fillRect(cursorX+5*textSize, cursorY, textSize, 8*textSize, bg, hspi);
//	}
//}

void drawChar(uint8_t ch, SPI_HandleTypeDef *hspi) {
 8000944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000946:	b095      	sub	sp, #84	; 0x54
 8000948:	af04      	add	r7, sp, #16
 800094a:	61b9      	str	r1, [r7, #24]
 800094c:	221f      	movs	r2, #31
 800094e:	18ba      	adds	r2, r7, r2
 8000950:	1c01      	adds	r1, r0, #0
 8000952:	7011      	strb	r1, [r2, #0]
 8000954:	466a      	mov	r2, sp
 8000956:	607a      	str	r2, [r7, #4]
	uint16_t bufferSize = 6*8*textSize*textSize;
 8000958:	4abf      	ldr	r2, [pc, #764]	; (8000c58 <drawChar+0x314>)
 800095a:	7812      	ldrb	r2, [r2, #0]
 800095c:	b292      	uxth	r2, r2
 800095e:	49be      	ldr	r1, [pc, #760]	; (8000c58 <drawChar+0x314>)
 8000960:	7809      	ldrb	r1, [r1, #0]
 8000962:	b289      	uxth	r1, r1
 8000964:	434a      	muls	r2, r1
 8000966:	b291      	uxth	r1, r2
 8000968:	221a      	movs	r2, #26
 800096a:	2018      	movs	r0, #24
 800096c:	4684      	mov	ip, r0
 800096e:	44bc      	add	ip, r7
 8000970:	4462      	add	r2, ip
 8000972:	2030      	movs	r0, #48	; 0x30
 8000974:	4341      	muls	r1, r0
 8000976:	8011      	strh	r1, [r2, #0]
	uint16_t buffer[bufferSize];
 8000978:	221a      	movs	r2, #26
 800097a:	2118      	movs	r1, #24
 800097c:	468c      	mov	ip, r1
 800097e:	44bc      	add	ip, r7
 8000980:	4462      	add	r2, ip
 8000982:	8812      	ldrh	r2, [r2, #0]
 8000984:	0011      	movs	r1, r2
 8000986:	3901      	subs	r1, #1
 8000988:	62f9      	str	r1, [r7, #44]	; 0x2c
 800098a:	613a      	str	r2, [r7, #16]
 800098c:	2100      	movs	r1, #0
 800098e:	6179      	str	r1, [r7, #20]
 8000990:	6939      	ldr	r1, [r7, #16]
 8000992:	0f09      	lsrs	r1, r1, #28
 8000994:	6978      	ldr	r0, [r7, #20]
 8000996:	0106      	lsls	r6, r0, #4
 8000998:	430e      	orrs	r6, r1
 800099a:	6939      	ldr	r1, [r7, #16]
 800099c:	010d      	lsls	r5, r1, #4
 800099e:	60ba      	str	r2, [r7, #8]
 80009a0:	2100      	movs	r1, #0
 80009a2:	60f9      	str	r1, [r7, #12]
 80009a4:	68bd      	ldr	r5, [r7, #8]
 80009a6:	68fe      	ldr	r6, [r7, #12]
 80009a8:	0029      	movs	r1, r5
 80009aa:	0f09      	lsrs	r1, r1, #28
 80009ac:	0030      	movs	r0, r6
 80009ae:	0104      	lsls	r4, r0, #4
 80009b0:	430c      	orrs	r4, r1
 80009b2:	0029      	movs	r1, r5
 80009b4:	010b      	lsls	r3, r1, #4
 80009b6:	0013      	movs	r3, r2
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	3301      	adds	r3, #1
 80009bc:	3307      	adds	r3, #7
 80009be:	08db      	lsrs	r3, r3, #3
 80009c0:	00db      	lsls	r3, r3, #3
 80009c2:	466a      	mov	r2, sp
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	469d      	mov	sp, r3
 80009c8:	ab04      	add	r3, sp, #16
 80009ca:	3301      	adds	r3, #1
 80009cc:	085b      	lsrs	r3, r3, #1
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
	int16_t rowOffset, address;

	for (int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 80009d2:	2325      	movs	r3, #37	; 0x25
 80009d4:	2218      	movs	r2, #24
 80009d6:	4694      	mov	ip, r2
 80009d8:	44bc      	add	ip, r7
 80009da:	4463      	add	r3, ip
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]
 80009e0:	e1f7      	b.n	8000dd2 <drawChar+0x48e>
		uint8_t line = font[ch*5+i];
 80009e2:	231f      	movs	r3, #31
 80009e4:	18fb      	adds	r3, r7, r3
 80009e6:	781a      	ldrb	r2, [r3, #0]
 80009e8:	0013      	movs	r3, r2
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	189a      	adds	r2, r3, r2
 80009ee:	2325      	movs	r3, #37	; 0x25
 80009f0:	2118      	movs	r1, #24
 80009f2:	468c      	mov	ip, r1
 80009f4:	44bc      	add	ip, r7
 80009f6:	4463      	add	r3, ip
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	b25b      	sxtb	r3, r3
 80009fc:	18d2      	adds	r2, r2, r3
 80009fe:	2324      	movs	r3, #36	; 0x24
 8000a00:	2118      	movs	r1, #24
 8000a02:	468c      	mov	ip, r1
 8000a04:	44bc      	add	ip, r7
 8000a06:	4463      	add	r3, ip
 8000a08:	4994      	ldr	r1, [pc, #592]	; (8000c5c <drawChar+0x318>)
 8000a0a:	5c8a      	ldrb	r2, [r1, r2]
 8000a0c:	701a      	strb	r2, [r3, #0]
		for (int8_t j=0; j<8; j++, line >>= 1) {
 8000a0e:	2323      	movs	r3, #35	; 0x23
 8000a10:	2218      	movs	r2, #24
 8000a12:	4694      	mov	ip, r2
 8000a14:	44bc      	add	ip, r7
 8000a16:	4463      	add	r3, ip
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]
 8000a1c:	e1c3      	b.n	8000da6 <drawChar+0x462>
			if (line & 1) {
 8000a1e:	2324      	movs	r3, #36	; 0x24
 8000a20:	2218      	movs	r2, #24
 8000a22:	4694      	mov	ip, r2
 8000a24:	44bc      	add	ip, r7
 8000a26:	4463      	add	r3, ip
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	d100      	bne.n	8000a32 <drawChar+0xee>
 8000a30:	e0c8      	b.n	8000bc4 <drawChar+0x280>
				if (textSize == 1) {
 8000a32:	4b89      	ldr	r3, [pc, #548]	; (8000c58 <drawChar+0x314>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d11c      	bne.n	8000a74 <drawChar+0x130>
					buffer[i+j*6] = colorFixer(textColor);
 8000a3a:	4b89      	ldr	r3, [pc, #548]	; (8000c60 <drawChar+0x31c>)
 8000a3c:	8818      	ldrh	r0, [r3, #0]
 8000a3e:	2325      	movs	r3, #37	; 0x25
 8000a40:	2218      	movs	r2, #24
 8000a42:	4694      	mov	ip, r2
 8000a44:	44bc      	add	ip, r7
 8000a46:	4463      	add	r3, ip
 8000a48:	2100      	movs	r1, #0
 8000a4a:	5659      	ldrsb	r1, [r3, r1]
 8000a4c:	2323      	movs	r3, #35	; 0x23
 8000a4e:	2218      	movs	r2, #24
 8000a50:	4694      	mov	ip, r2
 8000a52:	44bc      	add	ip, r7
 8000a54:	4463      	add	r3, ip
 8000a56:	2200      	movs	r2, #0
 8000a58:	569a      	ldrsb	r2, [r3, r2]
 8000a5a:	0013      	movs	r3, r2
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	189b      	adds	r3, r3, r2
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	18cc      	adds	r4, r1, r3
 8000a64:	f7ff fe84 	bl	8000770 <colorFixer>
 8000a68:	0003      	movs	r3, r0
 8000a6a:	0019      	movs	r1, r3
 8000a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6e:	0062      	lsls	r2, r4, #1
 8000a70:	52d1      	strh	r1, [r2, r3]
 8000a72:	e182      	b.n	8000d7a <drawChar+0x436>
				}
				else {
					for (int8_t k = 0; k < textSize; k++) {
 8000a74:	2322      	movs	r3, #34	; 0x22
 8000a76:	2218      	movs	r2, #24
 8000a78:	4694      	mov	ip, r2
 8000a7a:	44bc      	add	ip, r7
 8000a7c:	4463      	add	r3, ip
 8000a7e:	2200      	movs	r2, #0
 8000a80:	701a      	strb	r2, [r3, #0]
 8000a82:	e092      	b.n	8000baa <drawChar+0x266>
						rowOffset = textSize*6;
 8000a84:	4b74      	ldr	r3, [pc, #464]	; (8000c58 <drawChar+0x314>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	1c1a      	adds	r2, r3, #0
 8000a8c:	1c13      	adds	r3, r2, #0
 8000a8e:	18db      	adds	r3, r3, r3
 8000a90:	189b      	adds	r3, r3, r2
 8000a92:	18db      	adds	r3, r3, r3
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	2326      	movs	r3, #38	; 0x26
 8000a98:	2118      	movs	r1, #24
 8000a9a:	468c      	mov	ip, r1
 8000a9c:	44bc      	add	ip, r7
 8000a9e:	4463      	add	r3, ip
 8000aa0:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 8000aa2:	2321      	movs	r3, #33	; 0x21
 8000aa4:	2218      	movs	r2, #24
 8000aa6:	4694      	mov	ip, r2
 8000aa8:	44bc      	add	ip, r7
 8000aaa:	4463      	add	r3, ip
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]
 8000ab0:	e064      	b.n	8000b7c <drawChar+0x238>
							address = (textSize*textSize*j*6)+(i*textSize);
 8000ab2:	4b69      	ldr	r3, [pc, #420]	; (8000c58 <drawChar+0x314>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	4a67      	ldr	r2, [pc, #412]	; (8000c58 <drawChar+0x314>)
 8000aba:	7812      	ldrb	r2, [r2, #0]
 8000abc:	b292      	uxth	r2, r2
 8000abe:	4353      	muls	r3, r2
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	2223      	movs	r2, #35	; 0x23
 8000ac4:	2118      	movs	r1, #24
 8000ac6:	468c      	mov	ip, r1
 8000ac8:	44bc      	add	ip, r7
 8000aca:	4462      	add	r2, ip
 8000acc:	7812      	ldrb	r2, [r2, #0]
 8000ace:	b252      	sxtb	r2, r2
 8000ad0:	b292      	uxth	r2, r2
 8000ad2:	4353      	muls	r3, r2
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	1c1a      	adds	r2, r3, #0
 8000ad8:	1c13      	adds	r3, r2, #0
 8000ada:	18db      	adds	r3, r3, r3
 8000adc:	189b      	adds	r3, r3, r2
 8000ade:	18db      	adds	r3, r3, r3
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	2325      	movs	r3, #37	; 0x25
 8000ae4:	2118      	movs	r1, #24
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	44bc      	add	ip, r7
 8000aea:	4463      	add	r3, ip
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	b25b      	sxtb	r3, r3
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	4959      	ldr	r1, [pc, #356]	; (8000c58 <drawChar+0x314>)
 8000af4:	7809      	ldrb	r1, [r1, #0]
 8000af6:	b289      	uxth	r1, r1
 8000af8:	434b      	muls	r3, r1
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	18d3      	adds	r3, r2, r3
 8000afe:	b29a      	uxth	r2, r3
 8000b00:	210e      	movs	r1, #14
 8000b02:	2018      	movs	r0, #24
 8000b04:	183b      	adds	r3, r7, r0
 8000b06:	185b      	adds	r3, r3, r1
 8000b08:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 8000b0a:	2322      	movs	r3, #34	; 0x22
 8000b0c:	2218      	movs	r2, #24
 8000b0e:	4694      	mov	ip, r2
 8000b10:	44bc      	add	ip, r7
 8000b12:	4463      	add	r3, ip
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	b25b      	sxtb	r3, r3
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	2226      	movs	r2, #38	; 0x26
 8000b1c:	2418      	movs	r4, #24
 8000b1e:	46a4      	mov	ip, r4
 8000b20:	44bc      	add	ip, r7
 8000b22:	4462      	add	r2, ip
 8000b24:	8812      	ldrh	r2, [r2, #0]
 8000b26:	4353      	muls	r3, r2
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	2521      	movs	r5, #33	; 0x21
 8000b2c:	183b      	adds	r3, r7, r0
 8000b2e:	195b      	adds	r3, r3, r5
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	b25b      	sxtb	r3, r3
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	18d3      	adds	r3, r2, r3
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	183b      	adds	r3, r7, r0
 8000b3c:	185b      	adds	r3, r3, r1
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	18d3      	adds	r3, r2, r3
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	183b      	adds	r3, r7, r0
 8000b46:	185b      	adds	r3, r3, r1
 8000b48:	801a      	strh	r2, [r3, #0]
							buffer[address] = colorFixer(textColor);
 8000b4a:	4b45      	ldr	r3, [pc, #276]	; (8000c60 <drawChar+0x31c>)
 8000b4c:	881a      	ldrh	r2, [r3, #0]
 8000b4e:	0006      	movs	r6, r0
 8000b50:	183b      	adds	r3, r7, r0
 8000b52:	185b      	adds	r3, r3, r1
 8000b54:	2400      	movs	r4, #0
 8000b56:	5f1c      	ldrsh	r4, [r3, r4]
 8000b58:	0010      	movs	r0, r2
 8000b5a:	f7ff fe09 	bl	8000770 <colorFixer>
 8000b5e:	0003      	movs	r3, r0
 8000b60:	0019      	movs	r1, r3
 8000b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b64:	0062      	lsls	r2, r4, #1
 8000b66:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 8000b68:	19bb      	adds	r3, r7, r6
 8000b6a:	195b      	adds	r3, r3, r5
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	b25b      	sxtb	r3, r3
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	3301      	adds	r3, #1
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	19bb      	adds	r3, r7, r6
 8000b78:	195b      	adds	r3, r3, r5
 8000b7a:	701a      	strb	r2, [r3, #0]
 8000b7c:	2321      	movs	r3, #33	; 0x21
 8000b7e:	2218      	movs	r2, #24
 8000b80:	4694      	mov	ip, r2
 8000b82:	44bc      	add	ip, r7
 8000b84:	4463      	add	r3, ip
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	b25b      	sxtb	r3, r3
 8000b8a:	4a33      	ldr	r2, [pc, #204]	; (8000c58 <drawChar+0x314>)
 8000b8c:	7812      	ldrb	r2, [r2, #0]
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	db8f      	blt.n	8000ab2 <drawChar+0x16e>
					for (int8_t k = 0; k < textSize; k++) {
 8000b92:	2122      	movs	r1, #34	; 0x22
 8000b94:	2018      	movs	r0, #24
 8000b96:	183b      	adds	r3, r7, r0
 8000b98:	185b      	adds	r3, r3, r1
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	b25b      	sxtb	r3, r3
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	183b      	adds	r3, r7, r0
 8000ba6:	185b      	adds	r3, r3, r1
 8000ba8:	701a      	strb	r2, [r3, #0]
 8000baa:	2322      	movs	r3, #34	; 0x22
 8000bac:	2218      	movs	r2, #24
 8000bae:	4694      	mov	ip, r2
 8000bb0:	44bc      	add	ip, r7
 8000bb2:	4463      	add	r3, ip
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	b25b      	sxtb	r3, r3
 8000bb8:	4a27      	ldr	r2, [pc, #156]	; (8000c58 <drawChar+0x314>)
 8000bba:	7812      	ldrb	r2, [r2, #0]
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	da00      	bge.n	8000bc2 <drawChar+0x27e>
 8000bc0:	e760      	b.n	8000a84 <drawChar+0x140>
 8000bc2:	e0da      	b.n	8000d7a <drawChar+0x436>
						}
					}
//					fillRect(cursorX+i*textSize, cursorY+j*textSize, textSize, textSize, textColor, hspi);
				}
			} else if (bg != textColor) {
 8000bc4:	4b27      	ldr	r3, [pc, #156]	; (8000c64 <drawChar+0x320>)
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	4b25      	ldr	r3, [pc, #148]	; (8000c60 <drawChar+0x31c>)
 8000bcc:	881b      	ldrh	r3, [r3, #0]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d100      	bne.n	8000bd4 <drawChar+0x290>
 8000bd2:	e0d2      	b.n	8000d7a <drawChar+0x436>
				if (textSize == 1) {
 8000bd4:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <drawChar+0x314>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d11d      	bne.n	8000c18 <drawChar+0x2d4>
					buffer[i+j*6] = colorFixer(bg);
 8000bdc:	4b21      	ldr	r3, [pc, #132]	; (8000c64 <drawChar+0x320>)
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	b298      	uxth	r0, r3
 8000be2:	2325      	movs	r3, #37	; 0x25
 8000be4:	2218      	movs	r2, #24
 8000be6:	4694      	mov	ip, r2
 8000be8:	44bc      	add	ip, r7
 8000bea:	4463      	add	r3, ip
 8000bec:	2100      	movs	r1, #0
 8000bee:	5659      	ldrsb	r1, [r3, r1]
 8000bf0:	2323      	movs	r3, #35	; 0x23
 8000bf2:	2218      	movs	r2, #24
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	44bc      	add	ip, r7
 8000bf8:	4463      	add	r3, ip
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	569a      	ldrsb	r2, [r3, r2]
 8000bfe:	0013      	movs	r3, r2
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	189b      	adds	r3, r3, r2
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	18cc      	adds	r4, r1, r3
 8000c08:	f7ff fdb2 	bl	8000770 <colorFixer>
 8000c0c:	0003      	movs	r3, r0
 8000c0e:	0019      	movs	r1, r3
 8000c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c12:	0062      	lsls	r2, r4, #1
 8000c14:	52d1      	strh	r1, [r2, r3]
 8000c16:	e0b0      	b.n	8000d7a <drawChar+0x436>
				}
				else {
					for (int8_t k = 0; k < textSize; k++) {
 8000c18:	2320      	movs	r3, #32
 8000c1a:	2218      	movs	r2, #24
 8000c1c:	4694      	mov	ip, r2
 8000c1e:	44bc      	add	ip, r7
 8000c20:	4463      	add	r3, ip
 8000c22:	2200      	movs	r2, #0
 8000c24:	701a      	strb	r2, [r3, #0]
 8000c26:	e09c      	b.n	8000d62 <drawChar+0x41e>
						rowOffset = textSize*6;
 8000c28:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <drawChar+0x314>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	1c1a      	adds	r2, r3, #0
 8000c30:	1c13      	adds	r3, r2, #0
 8000c32:	18db      	adds	r3, r3, r3
 8000c34:	189b      	adds	r3, r3, r2
 8000c36:	18db      	adds	r3, r3, r3
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	2326      	movs	r3, #38	; 0x26
 8000c3c:	2118      	movs	r1, #24
 8000c3e:	468c      	mov	ip, r1
 8000c40:	44bc      	add	ip, r7
 8000c42:	4463      	add	r3, ip
 8000c44:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 8000c46:	231f      	movs	r3, #31
 8000c48:	2218      	movs	r2, #24
 8000c4a:	4694      	mov	ip, r2
 8000c4c:	44bc      	add	ip, r7
 8000c4e:	4463      	add	r3, ip
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
 8000c54:	e06e      	b.n	8000d34 <drawChar+0x3f0>
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	20000086 	.word	0x20000086
 8000c5c:	08007330 	.word	0x08007330
 8000c60:	20000088 	.word	0x20000088
 8000c64:	200000c8 	.word	0x200000c8
							address = (textSize*textSize*j*6)+(i*textSize);
 8000c68:	4bdc      	ldr	r3, [pc, #880]	; (8000fdc <drawChar+0x698>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	4adb      	ldr	r2, [pc, #876]	; (8000fdc <drawChar+0x698>)
 8000c70:	7812      	ldrb	r2, [r2, #0]
 8000c72:	b292      	uxth	r2, r2
 8000c74:	4353      	muls	r3, r2
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	2223      	movs	r2, #35	; 0x23
 8000c7a:	2118      	movs	r1, #24
 8000c7c:	468c      	mov	ip, r1
 8000c7e:	44bc      	add	ip, r7
 8000c80:	4462      	add	r2, ip
 8000c82:	7812      	ldrb	r2, [r2, #0]
 8000c84:	b252      	sxtb	r2, r2
 8000c86:	b292      	uxth	r2, r2
 8000c88:	4353      	muls	r3, r2
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	1c1a      	adds	r2, r3, #0
 8000c8e:	1c13      	adds	r3, r2, #0
 8000c90:	18db      	adds	r3, r3, r3
 8000c92:	189b      	adds	r3, r3, r2
 8000c94:	18db      	adds	r3, r3, r3
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	2325      	movs	r3, #37	; 0x25
 8000c9a:	2118      	movs	r1, #24
 8000c9c:	468c      	mov	ip, r1
 8000c9e:	44bc      	add	ip, r7
 8000ca0:	4463      	add	r3, ip
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	b25b      	sxtb	r3, r3
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	49cc      	ldr	r1, [pc, #816]	; (8000fdc <drawChar+0x698>)
 8000caa:	7809      	ldrb	r1, [r1, #0]
 8000cac:	b289      	uxth	r1, r1
 8000cae:	434b      	muls	r3, r1
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	18d3      	adds	r3, r2, r3
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	210e      	movs	r1, #14
 8000cb8:	2018      	movs	r0, #24
 8000cba:	183b      	adds	r3, r7, r0
 8000cbc:	185b      	adds	r3, r3, r1
 8000cbe:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 8000cc0:	2320      	movs	r3, #32
 8000cc2:	2218      	movs	r2, #24
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	44bc      	add	ip, r7
 8000cc8:	4463      	add	r3, ip
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	b25b      	sxtb	r3, r3
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	2226      	movs	r2, #38	; 0x26
 8000cd2:	2418      	movs	r4, #24
 8000cd4:	46a4      	mov	ip, r4
 8000cd6:	44bc      	add	ip, r7
 8000cd8:	4462      	add	r2, ip
 8000cda:	8812      	ldrh	r2, [r2, #0]
 8000cdc:	4353      	muls	r3, r2
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	251f      	movs	r5, #31
 8000ce2:	183b      	adds	r3, r7, r0
 8000ce4:	195b      	adds	r3, r3, r5
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	b25b      	sxtb	r3, r3
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	18d3      	adds	r3, r2, r3
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	183b      	adds	r3, r7, r0
 8000cf2:	185b      	adds	r3, r3, r1
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	18d3      	adds	r3, r2, r3
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	183b      	adds	r3, r7, r0
 8000cfc:	185b      	adds	r3, r3, r1
 8000cfe:	801a      	strh	r2, [r3, #0]
							buffer[address] = colorFixer(bg);
 8000d00:	4bb7      	ldr	r3, [pc, #732]	; (8000fe0 <drawChar+0x69c>)
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	0006      	movs	r6, r0
 8000d08:	183b      	adds	r3, r7, r0
 8000d0a:	185b      	adds	r3, r3, r1
 8000d0c:	2400      	movs	r4, #0
 8000d0e:	5f1c      	ldrsh	r4, [r3, r4]
 8000d10:	0010      	movs	r0, r2
 8000d12:	f7ff fd2d 	bl	8000770 <colorFixer>
 8000d16:	0003      	movs	r3, r0
 8000d18:	0019      	movs	r1, r3
 8000d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d1c:	0062      	lsls	r2, r4, #1
 8000d1e:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 8000d20:	19bb      	adds	r3, r7, r6
 8000d22:	195b      	adds	r3, r3, r5
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	b25b      	sxtb	r3, r3
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	19bb      	adds	r3, r7, r6
 8000d30:	195b      	adds	r3, r3, r5
 8000d32:	701a      	strb	r2, [r3, #0]
 8000d34:	231f      	movs	r3, #31
 8000d36:	2218      	movs	r2, #24
 8000d38:	4694      	mov	ip, r2
 8000d3a:	44bc      	add	ip, r7
 8000d3c:	4463      	add	r3, ip
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	b25b      	sxtb	r3, r3
 8000d42:	4aa6      	ldr	r2, [pc, #664]	; (8000fdc <drawChar+0x698>)
 8000d44:	7812      	ldrb	r2, [r2, #0]
 8000d46:	4293      	cmp	r3, r2
 8000d48:	db8e      	blt.n	8000c68 <drawChar+0x324>
					for (int8_t k = 0; k < textSize; k++) {
 8000d4a:	2120      	movs	r1, #32
 8000d4c:	2018      	movs	r0, #24
 8000d4e:	183b      	adds	r3, r7, r0
 8000d50:	185b      	adds	r3, r3, r1
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b25b      	sxtb	r3, r3
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	3301      	adds	r3, #1
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	183b      	adds	r3, r7, r0
 8000d5e:	185b      	adds	r3, r3, r1
 8000d60:	701a      	strb	r2, [r3, #0]
 8000d62:	2320      	movs	r3, #32
 8000d64:	2218      	movs	r2, #24
 8000d66:	4694      	mov	ip, r2
 8000d68:	44bc      	add	ip, r7
 8000d6a:	4463      	add	r3, ip
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	4a9a      	ldr	r2, [pc, #616]	; (8000fdc <drawChar+0x698>)
 8000d72:	7812      	ldrb	r2, [r2, #0]
 8000d74:	4293      	cmp	r3, r2
 8000d76:	da00      	bge.n	8000d7a <drawChar+0x436>
 8000d78:	e756      	b.n	8000c28 <drawChar+0x2e4>
		for (int8_t j=0; j<8; j++, line >>= 1) {
 8000d7a:	2123      	movs	r1, #35	; 0x23
 8000d7c:	2018      	movs	r0, #24
 8000d7e:	183b      	adds	r3, r7, r0
 8000d80:	185b      	adds	r3, r3, r1
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	b25b      	sxtb	r3, r3
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	3301      	adds	r3, #1
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	183b      	adds	r3, r7, r0
 8000d8e:	185b      	adds	r3, r3, r1
 8000d90:	701a      	strb	r2, [r3, #0]
 8000d92:	2224      	movs	r2, #36	; 0x24
 8000d94:	183b      	adds	r3, r7, r0
 8000d96:	189b      	adds	r3, r3, r2
 8000d98:	2118      	movs	r1, #24
 8000d9a:	468c      	mov	ip, r1
 8000d9c:	44bc      	add	ip, r7
 8000d9e:	4462      	add	r2, ip
 8000da0:	7812      	ldrb	r2, [r2, #0]
 8000da2:	0852      	lsrs	r2, r2, #1
 8000da4:	701a      	strb	r2, [r3, #0]
 8000da6:	2323      	movs	r3, #35	; 0x23
 8000da8:	2218      	movs	r2, #24
 8000daa:	4694      	mov	ip, r2
 8000dac:	44bc      	add	ip, r7
 8000dae:	4463      	add	r3, ip
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b25b      	sxtb	r3, r3
 8000db4:	2b07      	cmp	r3, #7
 8000db6:	dc00      	bgt.n	8000dba <drawChar+0x476>
 8000db8:	e631      	b.n	8000a1e <drawChar+0xda>
	for (int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 8000dba:	2125      	movs	r1, #37	; 0x25
 8000dbc:	2018      	movs	r0, #24
 8000dbe:	183b      	adds	r3, r7, r0
 8000dc0:	185b      	adds	r3, r3, r1
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	b25b      	sxtb	r3, r3
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	3301      	adds	r3, #1
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	183b      	adds	r3, r7, r0
 8000dce:	185b      	adds	r3, r3, r1
 8000dd0:	701a      	strb	r2, [r3, #0]
 8000dd2:	2325      	movs	r3, #37	; 0x25
 8000dd4:	2218      	movs	r2, #24
 8000dd6:	4694      	mov	ip, r2
 8000dd8:	44bc      	add	ip, r7
 8000dda:	4463      	add	r3, ip
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	b25b      	sxtb	r3, r3
 8000de0:	2b04      	cmp	r3, #4
 8000de2:	dc00      	bgt.n	8000de6 <drawChar+0x4a2>
 8000de4:	e5fd      	b.n	80009e2 <drawChar+0x9e>
				}
			}
		}
	}

	if (bg != textColor) { // If opaque, draw vertical line for last column
 8000de6:	4b7e      	ldr	r3, [pc, #504]	; (8000fe0 <drawChar+0x69c>)
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	4b7d      	ldr	r3, [pc, #500]	; (8000fe4 <drawChar+0x6a0>)
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d100      	bne.n	8000df6 <drawChar+0x4b2>
 8000df4:	e0cc      	b.n	8000f90 <drawChar+0x64c>
		for (int8_t j = 0; j < 8; j++) {
 8000df6:	231e      	movs	r3, #30
 8000df8:	2218      	movs	r2, #24
 8000dfa:	4694      	mov	ip, r2
 8000dfc:	44bc      	add	ip, r7
 8000dfe:	4463      	add	r3, ip
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
 8000e04:	e0ba      	b.n	8000f7c <drawChar+0x638>
			if (textSize == 1) {
 8000e06:	4b75      	ldr	r3, [pc, #468]	; (8000fdc <drawChar+0x698>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d117      	bne.n	8000e3e <drawChar+0x4fa>
				buffer[5+j*6] = colorFixer(bg);
 8000e0e:	4b74      	ldr	r3, [pc, #464]	; (8000fe0 <drawChar+0x69c>)
 8000e10:	881b      	ldrh	r3, [r3, #0]
 8000e12:	b299      	uxth	r1, r3
 8000e14:	231e      	movs	r3, #30
 8000e16:	2218      	movs	r2, #24
 8000e18:	4694      	mov	ip, r2
 8000e1a:	44bc      	add	ip, r7
 8000e1c:	4463      	add	r3, ip
 8000e1e:	2200      	movs	r2, #0
 8000e20:	569a      	ldrsb	r2, [r3, r2]
 8000e22:	0013      	movs	r3, r2
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	189b      	adds	r3, r3, r2
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	1d5c      	adds	r4, r3, #5
 8000e2c:	0008      	movs	r0, r1
 8000e2e:	f7ff fc9f 	bl	8000770 <colorFixer>
 8000e32:	0003      	movs	r3, r0
 8000e34:	0019      	movs	r1, r3
 8000e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e38:	0062      	lsls	r2, r4, #1
 8000e3a:	52d1      	strh	r1, [r2, r3]
 8000e3c:	e092      	b.n	8000f64 <drawChar+0x620>
			}
			else {
				for (int8_t k = 0; k < textSize; k++) {
 8000e3e:	231d      	movs	r3, #29
 8000e40:	2218      	movs	r2, #24
 8000e42:	4694      	mov	ip, r2
 8000e44:	44bc      	add	ip, r7
 8000e46:	4463      	add	r3, ip
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
 8000e4c:	e07e      	b.n	8000f4c <drawChar+0x608>
					for (int8_t l = 0; l < textSize; l++) {
 8000e4e:	231c      	movs	r3, #28
 8000e50:	2218      	movs	r2, #24
 8000e52:	4694      	mov	ip, r2
 8000e54:	44bc      	add	ip, r7
 8000e56:	4463      	add	r3, ip
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
 8000e5c:	e05f      	b.n	8000f1e <drawChar+0x5da>
						address = (textSize*textSize*j*6)+(5*textSize);
 8000e5e:	4b5f      	ldr	r3, [pc, #380]	; (8000fdc <drawChar+0x698>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	4a5d      	ldr	r2, [pc, #372]	; (8000fdc <drawChar+0x698>)
 8000e66:	7812      	ldrb	r2, [r2, #0]
 8000e68:	b292      	uxth	r2, r2
 8000e6a:	4353      	muls	r3, r2
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	221e      	movs	r2, #30
 8000e70:	2118      	movs	r1, #24
 8000e72:	468c      	mov	ip, r1
 8000e74:	44bc      	add	ip, r7
 8000e76:	4462      	add	r2, ip
 8000e78:	7812      	ldrb	r2, [r2, #0]
 8000e7a:	b252      	sxtb	r2, r2
 8000e7c:	b292      	uxth	r2, r2
 8000e7e:	4353      	muls	r3, r2
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	1c1a      	adds	r2, r3, #0
 8000e84:	1c13      	adds	r3, r2, #0
 8000e86:	18db      	adds	r3, r3, r3
 8000e88:	189b      	adds	r3, r3, r2
 8000e8a:	18db      	adds	r3, r3, r3
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	4b53      	ldr	r3, [pc, #332]	; (8000fdc <drawChar+0x698>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	1c19      	adds	r1, r3, #0
 8000e96:	0089      	lsls	r1, r1, #2
 8000e98:	18cb      	adds	r3, r1, r3
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	18d3      	adds	r3, r2, r3
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	210e      	movs	r1, #14
 8000ea2:	2018      	movs	r0, #24
 8000ea4:	183b      	adds	r3, r7, r0
 8000ea6:	185b      	adds	r3, r3, r1
 8000ea8:	801a      	strh	r2, [r3, #0]
						address += rowOffset*k+l;
 8000eaa:	231d      	movs	r3, #29
 8000eac:	2218      	movs	r2, #24
 8000eae:	4694      	mov	ip, r2
 8000eb0:	44bc      	add	ip, r7
 8000eb2:	4463      	add	r3, ip
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	b25b      	sxtb	r3, r3
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	2226      	movs	r2, #38	; 0x26
 8000ebc:	2418      	movs	r4, #24
 8000ebe:	46a4      	mov	ip, r4
 8000ec0:	44bc      	add	ip, r7
 8000ec2:	4462      	add	r2, ip
 8000ec4:	8812      	ldrh	r2, [r2, #0]
 8000ec6:	4353      	muls	r3, r2
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	251c      	movs	r5, #28
 8000ecc:	183b      	adds	r3, r7, r0
 8000ece:	195b      	adds	r3, r3, r5
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	b25b      	sxtb	r3, r3
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	18d3      	adds	r3, r2, r3
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	183b      	adds	r3, r7, r0
 8000edc:	185b      	adds	r3, r3, r1
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	18d3      	adds	r3, r2, r3
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	183b      	adds	r3, r7, r0
 8000ee6:	185b      	adds	r3, r3, r1
 8000ee8:	801a      	strh	r2, [r3, #0]
						buffer[address] = colorFixer(bg);
 8000eea:	4b3d      	ldr	r3, [pc, #244]	; (8000fe0 <drawChar+0x69c>)
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	0006      	movs	r6, r0
 8000ef2:	183b      	adds	r3, r7, r0
 8000ef4:	185b      	adds	r3, r3, r1
 8000ef6:	2400      	movs	r4, #0
 8000ef8:	5f1c      	ldrsh	r4, [r3, r4]
 8000efa:	0010      	movs	r0, r2
 8000efc:	f7ff fc38 	bl	8000770 <colorFixer>
 8000f00:	0003      	movs	r3, r0
 8000f02:	0019      	movs	r1, r3
 8000f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f06:	0062      	lsls	r2, r4, #1
 8000f08:	52d1      	strh	r1, [r2, r3]
					for (int8_t l = 0; l < textSize; l++) {
 8000f0a:	19bb      	adds	r3, r7, r6
 8000f0c:	195b      	adds	r3, r3, r5
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	b25b      	sxtb	r3, r3
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	3301      	adds	r3, #1
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	19bb      	adds	r3, r7, r6
 8000f1a:	195b      	adds	r3, r3, r5
 8000f1c:	701a      	strb	r2, [r3, #0]
 8000f1e:	231c      	movs	r3, #28
 8000f20:	2218      	movs	r2, #24
 8000f22:	4694      	mov	ip, r2
 8000f24:	44bc      	add	ip, r7
 8000f26:	4463      	add	r3, ip
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	b25b      	sxtb	r3, r3
 8000f2c:	4a2b      	ldr	r2, [pc, #172]	; (8000fdc <drawChar+0x698>)
 8000f2e:	7812      	ldrb	r2, [r2, #0]
 8000f30:	4293      	cmp	r3, r2
 8000f32:	db94      	blt.n	8000e5e <drawChar+0x51a>
				for (int8_t k = 0; k < textSize; k++) {
 8000f34:	211d      	movs	r1, #29
 8000f36:	2018      	movs	r0, #24
 8000f38:	183b      	adds	r3, r7, r0
 8000f3a:	185b      	adds	r3, r3, r1
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	b25b      	sxtb	r3, r3
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	3301      	adds	r3, #1
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	183b      	adds	r3, r7, r0
 8000f48:	185b      	adds	r3, r3, r1
 8000f4a:	701a      	strb	r2, [r3, #0]
 8000f4c:	231d      	movs	r3, #29
 8000f4e:	2218      	movs	r2, #24
 8000f50:	4694      	mov	ip, r2
 8000f52:	44bc      	add	ip, r7
 8000f54:	4463      	add	r3, ip
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b25b      	sxtb	r3, r3
 8000f5a:	4a20      	ldr	r2, [pc, #128]	; (8000fdc <drawChar+0x698>)
 8000f5c:	7812      	ldrb	r2, [r2, #0]
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	da00      	bge.n	8000f64 <drawChar+0x620>
 8000f62:	e774      	b.n	8000e4e <drawChar+0x50a>
		for (int8_t j = 0; j < 8; j++) {
 8000f64:	211e      	movs	r1, #30
 8000f66:	2018      	movs	r0, #24
 8000f68:	183b      	adds	r3, r7, r0
 8000f6a:	185b      	adds	r3, r3, r1
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	b25b      	sxtb	r3, r3
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	3301      	adds	r3, #1
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	183b      	adds	r3, r7, r0
 8000f78:	185b      	adds	r3, r3, r1
 8000f7a:	701a      	strb	r2, [r3, #0]
 8000f7c:	231e      	movs	r3, #30
 8000f7e:	2218      	movs	r2, #24
 8000f80:	4694      	mov	ip, r2
 8000f82:	44bc      	add	ip, r7
 8000f84:	4463      	add	r3, ip
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	b25b      	sxtb	r3, r3
 8000f8a:	2b07      	cmp	r3, #7
 8000f8c:	dc00      	bgt.n	8000f90 <drawChar+0x64c>
 8000f8e:	e73a      	b.n	8000e06 <drawChar+0x4c2>
			}
		}
//		else fillRect(cursorX+5*textSize, cursorY, textSize, 8*textSize, bg, hspi);
	}

	drawBuffer(cursorX, cursorY, 6*textSize, 8*textSize, buffer, bufferSize, hspi);
 8000f90:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <drawChar+0x6a4>)
 8000f92:	7818      	ldrb	r0, [r3, #0]
 8000f94:	4b15      	ldr	r3, [pc, #84]	; (8000fec <drawChar+0x6a8>)
 8000f96:	7819      	ldrb	r1, [r3, #0]
 8000f98:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <drawChar+0x698>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	1c1a      	adds	r2, r3, #0
 8000f9e:	1c13      	adds	r3, r2, #0
 8000fa0:	18db      	adds	r3, r3, r3
 8000fa2:	189b      	adds	r3, r3, r2
 8000fa4:	18db      	adds	r3, r3, r3
 8000fa6:	b2dc      	uxtb	r4, r3
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <drawChar+0x698>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	b2dd      	uxtb	r5, r3
 8000fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	9202      	str	r2, [sp, #8]
 8000fb6:	221a      	movs	r2, #26
 8000fb8:	2618      	movs	r6, #24
 8000fba:	46b4      	mov	ip, r6
 8000fbc:	44bc      	add	ip, r7
 8000fbe:	4462      	add	r2, ip
 8000fc0:	8812      	ldrh	r2, [r2, #0]
 8000fc2:	9201      	str	r2, [sp, #4]
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	002b      	movs	r3, r5
 8000fc8:	0022      	movs	r2, r4
 8000fca:	f7ff fbf5 	bl	80007b8 <drawBuffer>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	469d      	mov	sp, r3
//	setCursor(cursorX+6, cursorY);
}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	b011      	add	sp, #68	; 0x44
 8000fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	20000086 	.word	0x20000086
 8000fe0:	200000c8 	.word	0x200000c8
 8000fe4:	20000088 	.word	0x20000088
 8000fe8:	20000084 	.word	0x20000084
 8000fec:	20000085 	.word	0x20000085

08000ff0 <drawTextAt>:
	for (int i = 0; str[i] != '\0'; i++) {
		drawChar(str[i], hspi);
	}
}

void drawTextAt(uint8_t x, uint8_t y, char *str, SPI_HandleTypeDef *hspi) {
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b087      	sub	sp, #28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60ba      	str	r2, [r7, #8]
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	240f      	movs	r4, #15
 8000ffc:	193b      	adds	r3, r7, r4
 8000ffe:	1c02      	adds	r2, r0, #0
 8001000:	701a      	strb	r2, [r3, #0]
 8001002:	200e      	movs	r0, #14
 8001004:	183b      	adds	r3, r7, r0
 8001006:	1c0a      	adds	r2, r1, #0
 8001008:	701a      	strb	r2, [r3, #0]
	// add text wrap
	int i = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
	setCursor(x,y);
 800100e:	183b      	adds	r3, r7, r0
 8001010:	781a      	ldrb	r2, [r3, #0]
 8001012:	193b      	adds	r3, r7, r4
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	0011      	movs	r1, r2
 8001018:	0018      	movs	r0, r3
 800101a:	f000 f831 	bl	8001080 <setCursor>
	for (i = 0; str[i] != '\0'; i++) {
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	e01d      	b.n	8001060 <drawTextAt+0x70>
		drawChar(str[i], hspi);
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	18d3      	adds	r3, r2, r3
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	0011      	movs	r1, r2
 8001030:	0018      	movs	r0, r3
 8001032:	f7ff fc87 	bl	8000944 <drawChar>
		setCursor(cursorX+textSize*6, cursorY);
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <drawTextAt+0x84>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	1c1a      	adds	r2, r3, #0
 800103c:	1c13      	adds	r3, r2, #0
 800103e:	18db      	adds	r3, r3, r3
 8001040:	189b      	adds	r3, r3, r2
 8001042:	18db      	adds	r3, r3, r3
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <drawTextAt+0x88>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	18d3      	adds	r3, r2, r3
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <drawTextAt+0x8c>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	0019      	movs	r1, r3
 8001054:	0010      	movs	r0, r2
 8001056:	f000 f813 	bl	8001080 <setCursor>
	for (i = 0; str[i] != '\0'; i++) {
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	3301      	adds	r3, #1
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	18d3      	adds	r3, r2, r3
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1db      	bne.n	8001024 <drawTextAt+0x34>
	}
//	setCursor(x+i*textSize*6, y);
}
 800106c:	46c0      	nop			; (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	b007      	add	sp, #28
 8001072:	bd90      	pop	{r4, r7, pc}
 8001074:	20000086 	.word	0x20000086
 8001078:	20000084 	.word	0x20000084
 800107c:	20000085 	.word	0x20000085

08001080 <setCursor>:

void setBackgroundColor(uint16_t color) {bg = color;}

void setCursor(uint8_t x, uint8_t y) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	0002      	movs	r2, r0
 8001088:	1dfb      	adds	r3, r7, #7
 800108a:	701a      	strb	r2, [r3, #0]
 800108c:	1dbb      	adds	r3, r7, #6
 800108e:	1c0a      	adds	r2, r1, #0
 8001090:	701a      	strb	r2, [r3, #0]
	cursorX = x;
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <setCursor+0x2c>)
 8001094:	1dfa      	adds	r2, r7, #7
 8001096:	7812      	ldrb	r2, [r2, #0]
 8001098:	701a      	strb	r2, [r3, #0]
	cursorY = y;
 800109a:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <setCursor+0x30>)
 800109c:	1dba      	adds	r2, r7, #6
 800109e:	7812      	ldrb	r2, [r2, #0]
 80010a0:	701a      	strb	r2, [r3, #0]
}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	46bd      	mov	sp, r7
 80010a6:	b002      	add	sp, #8
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	20000084 	.word	0x20000084
 80010b0:	20000085 	.word	0x20000085

080010b4 <clearScreen>:

void setTextSize(uint8_t size) {textSize = size;}

void setTextColor(uint16_t color) {textColor = color;}

void clearScreen(uint16_t backgroundColor, SPI_HandleTypeDef *hspi) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	0002      	movs	r2, r0
 80010bc:	6039      	str	r1, [r7, #0]
 80010be:	1dbb      	adds	r3, r7, #6
 80010c0:	801a      	strh	r2, [r3, #0]
	bg = backgroundColor;
 80010c2:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <clearScreen+0x2c>)
 80010c4:	1dba      	adds	r2, r7, #6
 80010c6:	8812      	ldrh	r2, [r2, #0]
 80010c8:	801a      	strh	r2, [r3, #0]
	fillScreen(backgroundColor, hspi);
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	1dbb      	adds	r3, r7, #6
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	0011      	movs	r1, r2
 80010d2:	0018      	movs	r0, r3
 80010d4:	f7ff fbba 	bl	800084c <fillScreen>
}
 80010d8:	46c0      	nop			; (mov r8, r8)
 80010da:	46bd      	mov	sp, r7
 80010dc:	b002      	add	sp, #8
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200000c8 	.word	0x200000c8

080010e4 <setTime>:


#include "clocks.h"

// set rtc time. uses perosnal struct as arg
void setTime(struct times *t) {
 80010e4:	b590      	push	{r4, r7, lr}
 80010e6:	b089      	sub	sp, #36	; 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef stime = {0};	// change to malloc call? does that work in embedded?
 80010ec:	210c      	movs	r1, #12
 80010ee:	000c      	movs	r4, r1
 80010f0:	187b      	adds	r3, r7, r1
 80010f2:	0018      	movs	r0, r3
 80010f4:	2314      	movs	r3, #20
 80010f6:	001a      	movs	r2, r3
 80010f8:	2100      	movs	r1, #0
 80010fa:	f005 fc7c 	bl	80069f6 <memset>

	// set using args later
	stime.Hours = t->hr;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	781a      	ldrb	r2, [r3, #0]
 8001102:	0021      	movs	r1, r4
 8001104:	187b      	adds	r3, r7, r1
 8001106:	701a      	strb	r2, [r3, #0]
	stime.Minutes = t->min;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	785a      	ldrb	r2, [r3, #1]
 800110c:	187b      	adds	r3, r7, r1
 800110e:	705a      	strb	r2, [r3, #1]
	stime.Seconds = t->sec;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	789a      	ldrb	r2, [r3, #2]
 8001114:	187b      	adds	r3, r7, r1
 8001116:	709a      	strb	r2, [r3, #2]

	stime.TimeFormat = RTC_HOURFORMAT_24;
 8001118:	187b      	adds	r3, r7, r1
 800111a:	2200      	movs	r2, #0
 800111c:	70da      	strb	r2, [r3, #3]

	// not sure what these do, but probably fine if set to 0 or ignored
	stime.SubSeconds = 0;
 800111e:	187b      	adds	r3, r7, r1
 8001120:	2200      	movs	r2, #0
 8001122:	605a      	str	r2, [r3, #4]
	stime.SecondFraction = 0;
 8001124:	187b      	adds	r3, r7, r1
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]

	stime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;		// add daylight savings later?
 800112a:	187b      	adds	r3, r7, r1
 800112c:	2200      	movs	r2, #0
 800112e:	60da      	str	r2, [r3, #12]
	stime.StoreOperation = RTC_STOREOPERATION_SET;		// not sure what this does
 8001130:	187b      	adds	r3, r7, r1
 8001132:	2280      	movs	r2, #128	; 0x80
 8001134:	02d2      	lsls	r2, r2, #11
 8001136:	611a      	str	r2, [r3, #16]

	// do nothing until done
	// not following BCD format (4-bit digit 1, 4-bit digit 2)
	// while makes program hang? ignore instead?
//	while (HAL_RTC_SetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK);
	HAL_RTC_SetTime(&hrtc, &stime, RTC_FORMAT_BIN);
 8001138:	1879      	adds	r1, r7, r1
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <setTime+0x70>)
 800113c:	2200      	movs	r2, #0
 800113e:	0018      	movs	r0, r3
 8001140:	f003 fdac 	bl	8004c9c <HAL_RTC_SetTime>

	runClockDisplay(&htim22);
 8001144:	4b04      	ldr	r3, [pc, #16]	; (8001158 <setTime+0x74>)
 8001146:	0018      	movs	r0, r3
 8001148:	f001 fc1e 	bl	8002988 <runClockDisplay>
}
 800114c:	46c0      	nop			; (mov r8, r8)
 800114e:	46bd      	mov	sp, r7
 8001150:	b009      	add	sp, #36	; 0x24
 8001152:	bd90      	pop	{r4, r7, pc}
 8001154:	20000170 	.word	0x20000170
 8001158:	20000100 	.word	0x20000100

0800115c <setDate>:

// set rtc date. uses personal struct
void setDate(struct dates *d) {
 800115c:	b590      	push	{r4, r7, lr}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	// ---- date ----
	RTC_DateTypeDef sdate = {0};
 8001164:	240c      	movs	r4, #12
 8001166:	193b      	adds	r3, r7, r4
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]

	sdate.Month = d->month;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	789a      	ldrb	r2, [r3, #2]
 8001170:	193b      	adds	r3, r7, r4
 8001172:	705a      	strb	r2, [r3, #1]
	sdate.Date = d->date;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	78da      	ldrb	r2, [r3, #3]
 8001178:	193b      	adds	r3, r7, r4
 800117a:	709a      	strb	r2, [r3, #2]
	sdate.WeekDay = d->weekday;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	791a      	ldrb	r2, [r3, #4]
 8001180:	193b      	adds	r3, r7, r4
 8001182:	701a      	strb	r2, [r3, #0]
	sdate.Year = d->yr % 100; 		// set only between 0-99. part of the library (!?)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	2164      	movs	r1, #100	; 0x64
 800118a:	0018      	movs	r0, r3
 800118c:	f7ff f842 	bl	8000214 <__aeabi_uidivmod>
 8001190:	000b      	movs	r3, r1
 8001192:	b29b      	uxth	r3, r3
 8001194:	b2da      	uxtb	r2, r3
 8001196:	193b      	adds	r3, r7, r4
 8001198:	70da      	strb	r2, [r3, #3]

	HAL_RTC_SetDate(&hrtc, &sdate, RTC_FORMAT_BIN);
 800119a:	1939      	adds	r1, r7, r4
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <setDate+0x5c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	0018      	movs	r0, r3
 80011a2:	f003 fe9b 	bl	8004edc <HAL_RTC_SetDate>

	runClockDisplay(&htim22);
 80011a6:	4b05      	ldr	r3, [pc, #20]	; (80011bc <setDate+0x60>)
 80011a8:	0018      	movs	r0, r3
 80011aa:	f001 fbed 	bl	8002988 <runClockDisplay>
}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	46bd      	mov	sp, r7
 80011b2:	b005      	add	sp, #20
 80011b4:	bd90      	pop	{r4, r7, pc}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	20000170 	.word	0x20000170
 80011bc:	20000100 	.word	0x20000100

080011c0 <setDateTime>:

void setDateTime(struct dates *d, struct times *t) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
	setDate(d);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	0018      	movs	r0, r3
 80011ce:	f7ff ffc5 	bl	800115c <setDate>
	setTime(t);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	0018      	movs	r0, r3
 80011d6:	f7ff ff85 	bl	80010e4 <setTime>
}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	46bd      	mov	sp, r7
 80011de:	b002      	add	sp, #8
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <setAlarm>:

// for time of day+week
void setAlarm(struct alarmTimes *a) {
 80011e4:	b5b0      	push	{r4, r5, r7, lr}
 80011e6:	b092      	sub	sp, #72	; 0x48
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef salarm = {0};
 80011ec:	2520      	movs	r5, #32
 80011ee:	197b      	adds	r3, r7, r5
 80011f0:	0018      	movs	r0, r3
 80011f2:	2328      	movs	r3, #40	; 0x28
 80011f4:	001a      	movs	r2, r3
 80011f6:	2100      	movs	r1, #0
 80011f8:	f005 fbfd 	bl	80069f6 <memset>
	RTC_TimeTypeDef salarmtime = {0};
 80011fc:	240c      	movs	r4, #12
 80011fe:	193b      	adds	r3, r7, r4
 8001200:	0018      	movs	r0, r3
 8001202:	2314      	movs	r3, #20
 8001204:	001a      	movs	r2, r3
 8001206:	2100      	movs	r1, #0
 8001208:	f005 fbf5 	bl	80069f6 <memset>

	watchAlarm = *a;	// this is probably fine (value at a is defined already)
 800120c:	4a23      	ldr	r2, [pc, #140]	; (800129c <setAlarm+0xb8>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	0010      	movs	r0, r2
 8001212:	0019      	movs	r1, r3
 8001214:	2304      	movs	r3, #4
 8001216:	001a      	movs	r2, r3
 8001218:	f005 fbe4 	bl	80069e4 <memcpy>

	// change to set with args
	salarmtime.Hours = a->hr;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	781a      	ldrb	r2, [r3, #0]
 8001220:	193b      	adds	r3, r7, r4
 8001222:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a->min;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	785a      	ldrb	r2, [r3, #1]
 8001228:	193b      	adds	r3, r7, r4
 800122a:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a->sec;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	789a      	ldrb	r2, [r3, #2]
 8001230:	193b      	adds	r3, r7, r4
 8001232:	709a      	strb	r2, [r3, #2]
	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 8001234:	193b      	adds	r3, r7, r4
 8001236:	2200      	movs	r2, #0
 8001238:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 800123a:	0021      	movs	r1, r4
 800123c:	187b      	adds	r3, r7, r1
 800123e:	2200      	movs	r2, #0
 8001240:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 8001242:	187b      	adds	r3, r7, r1
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001248:	187b      	adds	r3, r7, r1
 800124a:	2200      	movs	r2, #0
 800124c:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 800124e:	187b      	adds	r3, r7, r1
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 8001254:	197b      	adds	r3, r7, r5
 8001256:	187a      	adds	r2, r7, r1
 8001258:	ca13      	ldmia	r2!, {r0, r1, r4}
 800125a:	c313      	stmia	r3!, {r0, r1, r4}
 800125c:	ca03      	ldmia	r2!, {r0, r1}
 800125e:	c303      	stmia	r3!, {r0, r1}
//	salarm.AlarmMask = RTC_ALARMMASK_ALL;
	salarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001260:	197b      	adds	r3, r7, r5
 8001262:	2200      	movs	r2, #0
 8001264:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001266:	197b      	adds	r3, r7, r5
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 800126c:	197b      	adds	r3, r7, r5
 800126e:	2280      	movs	r2, #128	; 0x80
 8001270:	05d2      	lsls	r2, r2, #23
 8001272:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a->weekday;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	78d9      	ldrb	r1, [r3, #3]
 8001278:	197b      	adds	r3, r7, r5
 800127a:	2220      	movs	r2, #32
 800127c:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_A;			// change if using different alarm
 800127e:	197b      	adds	r3, r7, r5
 8001280:	2280      	movs	r2, #128	; 0x80
 8001282:	0052      	lsls	r2, r2, #1
 8001284:	625a      	str	r2, [r3, #36]	; 0x24

	// do nothing until done
	HAL_RTC_SetAlarm_IT(&hrtc, &salarm, RTC_FORMAT_BIN);
 8001286:	1979      	adds	r1, r7, r5
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <setAlarm+0xbc>)
 800128a:	2200      	movs	r2, #0
 800128c:	0018      	movs	r0, r3
 800128e:	f003 ff21 	bl	80050d4 <HAL_RTC_SetAlarm_IT>
}
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	46bd      	mov	sp, r7
 8001296:	b012      	add	sp, #72	; 0x48
 8001298:	bdb0      	pop	{r4, r5, r7, pc}
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	200000f0 	.word	0x200000f0
 80012a0:	20000170 	.word	0x20000170

080012a4 <setTimer>:

// set alarm for timer function of watch project
// using RTC alarm hardware
void setTimer(struct times *t_in) {
 80012a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012a6:	b097      	sub	sp, #92	; 0x5c
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef salarm = {0};
 80012ac:	2330      	movs	r3, #48	; 0x30
 80012ae:	18fb      	adds	r3, r7, r3
 80012b0:	0018      	movs	r0, r3
 80012b2:	2328      	movs	r3, #40	; 0x28
 80012b4:	001a      	movs	r2, r3
 80012b6:	2100      	movs	r1, #0
 80012b8:	f005 fb9d 	bl	80069f6 <memset>
	RTC_TimeTypeDef salarmtime = {0};
 80012bc:	231c      	movs	r3, #28
 80012be:	18fb      	adds	r3, r7, r3
 80012c0:	0018      	movs	r0, r3
 80012c2:	2314      	movs	r3, #20
 80012c4:	001a      	movs	r2, r3
 80012c6:	2100      	movs	r1, #0
 80012c8:	f005 fb95 	bl	80069f6 <memset>

	// set global variables to hold value being set
	watchTimer = *t_in;
 80012cc:	4a66      	ldr	r2, [pc, #408]	; (8001468 <setTimer+0x1c4>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	0010      	movs	r0, r2
 80012d2:	0019      	movs	r1, r3
 80012d4:	2303      	movs	r3, #3
 80012d6:	001a      	movs	r2, r3
 80012d8:	f005 fb84 	bl	80069e4 <memcpy>
	watchTimerSeconds = t_in->sec + t_in->min*60 + t_in->hr*3600;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	789b      	ldrb	r3, [r3, #2]
 80012e0:	0019      	movs	r1, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	785b      	ldrb	r3, [r3, #1]
 80012e6:	001a      	movs	r2, r3
 80012e8:	0013      	movs	r3, r2
 80012ea:	011b      	lsls	r3, r3, #4
 80012ec:	1a9b      	subs	r3, r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	18c9      	adds	r1, r1, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	001a      	movs	r2, r3
 80012f8:	0013      	movs	r3, r2
 80012fa:	011b      	lsls	r3, r3, #4
 80012fc:	1a9b      	subs	r3, r3, r2
 80012fe:	011a      	lsls	r2, r3, #4
 8001300:	1ad2      	subs	r2, r2, r3
 8001302:	0113      	lsls	r3, r2, #4
 8001304:	001a      	movs	r2, r3
 8001306:	0013      	movs	r3, r2
 8001308:	18cb      	adds	r3, r1, r3
 800130a:	001a      	movs	r2, r3
 800130c:	4b57      	ldr	r3, [pc, #348]	; (800146c <setTimer+0x1c8>)
 800130e:	601a      	str	r2, [r3, #0]

	// pull current RTC time
	struct dates d;
	struct times t;
	getDateTime(&d, &t);
 8001310:	2410      	movs	r4, #16
 8001312:	193a      	adds	r2, r7, r4
 8001314:	2314      	movs	r3, #20
 8001316:	18fb      	adds	r3, r7, r3
 8001318:	0011      	movs	r1, r2
 800131a:	0018      	movs	r0, r3
 800131c:	f000 f8aa 	bl	8001474 <getDateTime>

	struct alarmTimes a;

	// adding timer value to current time so we can set an alarm time
	if (t.sec + t_in->sec > 60) {		// adding seconds
 8001320:	193b      	adds	r3, r7, r4
 8001322:	789b      	ldrb	r3, [r3, #2]
 8001324:	001a      	movs	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	789b      	ldrb	r3, [r3, #2]
 800132a:	18d3      	adds	r3, r2, r3
 800132c:	2b3c      	cmp	r3, #60	; 0x3c
 800132e:	dd49      	ble.n	80013c4 <setTimer+0x120>
		if (t.min + t_in->min > 60) {		// adding minutes
 8001330:	2310      	movs	r3, #16
 8001332:	18fb      	adds	r3, r7, r3
 8001334:	785b      	ldrb	r3, [r3, #1]
 8001336:	001a      	movs	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	785b      	ldrb	r3, [r3, #1]
 800133c:	18d3      	adds	r3, r2, r3
 800133e:	2b3c      	cmp	r3, #60	; 0x3c
 8001340:	dd30      	ble.n	80013a4 <setTimer+0x100>
			if (t.hr + t_in->hr > 24) {			// adding hours
 8001342:	2310      	movs	r3, #16
 8001344:	18fb      	adds	r3, r7, r3
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	001a      	movs	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	18d3      	adds	r3, r2, r3
 8001350:	2b18      	cmp	r3, #24
 8001352:	dd17      	ble.n	8001384 <setTimer+0xe0>
				a.weekday = ((d.weekday + t_in->hr/24) % 7) + 1;		// bc weekday count starts from 1
 8001354:	2314      	movs	r3, #20
 8001356:	18fb      	adds	r3, r7, r3
 8001358:	791b      	ldrb	r3, [r3, #4]
 800135a:	001c      	movs	r4, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2118      	movs	r1, #24
 8001362:	0018      	movs	r0, r3
 8001364:	f7fe fed0 	bl	8000108 <__udivsi3>
 8001368:	0003      	movs	r3, r0
 800136a:	b2db      	uxtb	r3, r3
 800136c:	18e3      	adds	r3, r4, r3
 800136e:	2107      	movs	r1, #7
 8001370:	0018      	movs	r0, r3
 8001372:	f7ff f839 	bl	80003e8 <__aeabi_idivmod>
 8001376:	000b      	movs	r3, r1
 8001378:	b2db      	uxtb	r3, r3
 800137a:	3301      	adds	r3, #1
 800137c:	b2da      	uxtb	r2, r3
 800137e:	230c      	movs	r3, #12
 8001380:	18fb      	adds	r3, r7, r3
 8001382:	70da      	strb	r2, [r3, #3]
			}
			a.hr = (t.hr + t_in->hr) % 24;
 8001384:	2310      	movs	r3, #16
 8001386:	18fb      	adds	r3, r7, r3
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	001a      	movs	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	18d3      	adds	r3, r2, r3
 8001392:	2118      	movs	r1, #24
 8001394:	0018      	movs	r0, r3
 8001396:	f7ff f827 	bl	80003e8 <__aeabi_idivmod>
 800139a:	000b      	movs	r3, r1
 800139c:	b2da      	uxtb	r2, r3
 800139e:	230c      	movs	r3, #12
 80013a0:	18fb      	adds	r3, r7, r3
 80013a2:	701a      	strb	r2, [r3, #0]
		}
		a.min = (t.min + t_in->min) % 60;
 80013a4:	2310      	movs	r3, #16
 80013a6:	18fb      	adds	r3, r7, r3
 80013a8:	785b      	ldrb	r3, [r3, #1]
 80013aa:	001a      	movs	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	785b      	ldrb	r3, [r3, #1]
 80013b0:	18d3      	adds	r3, r2, r3
 80013b2:	213c      	movs	r1, #60	; 0x3c
 80013b4:	0018      	movs	r0, r3
 80013b6:	f7ff f817 	bl	80003e8 <__aeabi_idivmod>
 80013ba:	000b      	movs	r3, r1
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	230c      	movs	r3, #12
 80013c0:	18fb      	adds	r3, r7, r3
 80013c2:	705a      	strb	r2, [r3, #1]
	}
	a.sec = (t.sec + t_in->sec) % 60;
 80013c4:	2310      	movs	r3, #16
 80013c6:	18fb      	adds	r3, r7, r3
 80013c8:	789b      	ldrb	r3, [r3, #2]
 80013ca:	001a      	movs	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	789b      	ldrb	r3, [r3, #2]
 80013d0:	18d3      	adds	r3, r2, r3
 80013d2:	213c      	movs	r1, #60	; 0x3c
 80013d4:	0018      	movs	r0, r3
 80013d6:	f7ff f807 	bl	80003e8 <__aeabi_idivmod>
 80013da:	000b      	movs	r3, r1
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	240c      	movs	r4, #12
 80013e0:	193b      	adds	r3, r7, r4
 80013e2:	709a      	strb	r2, [r3, #2]

	// setting RTC parameters
	salarmtime.Hours = a.hr;
 80013e4:	193b      	adds	r3, r7, r4
 80013e6:	781a      	ldrb	r2, [r3, #0]
 80013e8:	211c      	movs	r1, #28
 80013ea:	187b      	adds	r3, r7, r1
 80013ec:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a.min;
 80013ee:	193b      	adds	r3, r7, r4
 80013f0:	785a      	ldrb	r2, [r3, #1]
 80013f2:	187b      	adds	r3, r7, r1
 80013f4:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a.sec;
 80013f6:	193b      	adds	r3, r7, r4
 80013f8:	789a      	ldrb	r2, [r3, #2]
 80013fa:	187b      	adds	r3, r7, r1
 80013fc:	709a      	strb	r2, [r3, #2]
	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 80013fe:	187b      	adds	r3, r7, r1
 8001400:	2200      	movs	r2, #0
 8001402:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 8001404:	187b      	adds	r3, r7, r1
 8001406:	2200      	movs	r2, #0
 8001408:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 800140a:	187b      	adds	r3, r7, r1
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001410:	187b      	adds	r3, r7, r1
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001416:	187b      	adds	r3, r7, r1
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 800141c:	2030      	movs	r0, #48	; 0x30
 800141e:	183b      	adds	r3, r7, r0
 8001420:	187a      	adds	r2, r7, r1
 8001422:	ca62      	ldmia	r2!, {r1, r5, r6}
 8001424:	c362      	stmia	r3!, {r1, r5, r6}
 8001426:	ca22      	ldmia	r2!, {r1, r5}
 8001428:	c322      	stmia	r3!, {r1, r5}
	salarm.AlarmMask = RTC_ALARMMASK_NONE;
 800142a:	183b      	adds	r3, r7, r0
 800142c:	2200      	movs	r2, #0
 800142e:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001430:	183b      	adds	r3, r7, r0
 8001432:	2200      	movs	r2, #0
 8001434:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8001436:	183b      	adds	r3, r7, r0
 8001438:	2280      	movs	r2, #128	; 0x80
 800143a:	05d2      	lsls	r2, r2, #23
 800143c:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a.weekday;
 800143e:	193b      	adds	r3, r7, r4
 8001440:	78d9      	ldrb	r1, [r3, #3]
 8001442:	183b      	adds	r3, r7, r0
 8001444:	2220      	movs	r2, #32
 8001446:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_B;			// change if using different alarm
 8001448:	183b      	adds	r3, r7, r0
 800144a:	2280      	movs	r2, #128	; 0x80
 800144c:	0092      	lsls	r2, r2, #2
 800144e:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_RTC_SetAlarm_IT(&hrtc, &salarm, RTC_FORMAT_BIN);
 8001450:	1839      	adds	r1, r7, r0
 8001452:	4b07      	ldr	r3, [pc, #28]	; (8001470 <setTimer+0x1cc>)
 8001454:	2200      	movs	r2, #0
 8001456:	0018      	movs	r0, r3
 8001458:	f003 fe3c 	bl	80050d4 <HAL_RTC_SetAlarm_IT>

	runTimerDisplay();
 800145c:	f001 fa7c 	bl	8002958 <runTimerDisplay>
}
 8001460:	46c0      	nop			; (mov r8, r8)
 8001462:	46bd      	mov	sp, r7
 8001464:	b017      	add	sp, #92	; 0x5c
 8001466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001468:	200000fc 	.word	0x200000fc
 800146c:	200001f4 	.word	0x200001f4
 8001470:	20000170 	.word	0x20000170

08001474 <getDateTime>:
	d->date = sdate.Date;
	d->weekday = sdate.WeekDay;
}

// not using getDate and getTime for efficiency (?)
void getDateTime(struct dates *d, struct times *t) {
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b089      	sub	sp, #36	; 0x24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
	RTC_DateTypeDef sdate;
	RTC_TimeTypeDef stime;

	// programming manual says to read time after date. something shadow registers.
	// not done automatically in HAL
	HAL_RTC_GetTime(&hrtc, &stime, RTC_FORMAT_BIN);
 800147e:	2308      	movs	r3, #8
 8001480:	18f9      	adds	r1, r7, r3
 8001482:	4b21      	ldr	r3, [pc, #132]	; (8001508 <getDateTime+0x94>)
 8001484:	2200      	movs	r2, #0
 8001486:	0018      	movs	r0, r3
 8001488:	f003 fccc 	bl	8004e24 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sdate, RTC_FORMAT_BIN);
 800148c:	241c      	movs	r4, #28
 800148e:	1939      	adds	r1, r7, r4
 8001490:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <getDateTime+0x94>)
 8001492:	2200      	movs	r2, #0
 8001494:	0018      	movs	r0, r3
 8001496:	f003 fdcf 	bl	8005038 <HAL_RTC_GetDate>

	d->yr = sdate.Year > 50 ? sdate.Year+1900 : sdate.Year+2000;		// make assumptions on whether it's 19xx or 20xx
 800149a:	193b      	adds	r3, r7, r4
 800149c:	78db      	ldrb	r3, [r3, #3]
 800149e:	2b32      	cmp	r3, #50	; 0x32
 80014a0:	d908      	bls.n	80014b4 <getDateTime+0x40>
 80014a2:	231c      	movs	r3, #28
 80014a4:	18fb      	adds	r3, r7, r3
 80014a6:	78db      	ldrb	r3, [r3, #3]
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	4a18      	ldr	r2, [pc, #96]	; (800150c <getDateTime+0x98>)
 80014ac:	4694      	mov	ip, r2
 80014ae:	4463      	add	r3, ip
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	e008      	b.n	80014c6 <getDateTime+0x52>
 80014b4:	231c      	movs	r3, #28
 80014b6:	18fb      	adds	r3, r7, r3
 80014b8:	78db      	ldrb	r3, [r3, #3]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	22fa      	movs	r2, #250	; 0xfa
 80014be:	00d2      	lsls	r2, r2, #3
 80014c0:	4694      	mov	ip, r2
 80014c2:	4463      	add	r3, ip
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	8013      	strh	r3, [r2, #0]
	d->month = sdate.Month;
 80014ca:	211c      	movs	r1, #28
 80014cc:	187b      	adds	r3, r7, r1
 80014ce:	785a      	ldrb	r2, [r3, #1]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	709a      	strb	r2, [r3, #2]
	d->date = sdate.Date;
 80014d4:	187b      	adds	r3, r7, r1
 80014d6:	789a      	ldrb	r2, [r3, #2]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	70da      	strb	r2, [r3, #3]
	d->weekday = sdate.WeekDay;
 80014dc:	187b      	adds	r3, r7, r1
 80014de:	781a      	ldrb	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	711a      	strb	r2, [r3, #4]

	t->hr = stime.Hours;
 80014e4:	2108      	movs	r1, #8
 80014e6:	187b      	adds	r3, r7, r1
 80014e8:	781a      	ldrb	r2, [r3, #0]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	701a      	strb	r2, [r3, #0]
	t->min = stime.Minutes;
 80014ee:	187b      	adds	r3, r7, r1
 80014f0:	785a      	ldrb	r2, [r3, #1]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	705a      	strb	r2, [r3, #1]
	t->sec = stime.Seconds;
 80014f6:	187b      	adds	r3, r7, r1
 80014f8:	789a      	ldrb	r2, [r3, #2]
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	709a      	strb	r2, [r3, #2]
}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	46bd      	mov	sp, r7
 8001502:	b009      	add	sp, #36	; 0x24
 8001504:	bd90      	pop	{r4, r7, pc}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	20000170 	.word	0x20000170
 800150c:	0000076c 	.word	0x0000076c

08001510 <timerTest>:
	sprintf(str, "%2u:%2u:%2u %2u", t.hr, t.min, t.sec, d.weekday);
	drawTextAt(0, 0, str, &hspi1);
}

// set a timer for a short time (10s) and watch it go
void timerTest() {
 8001510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001512:	b091      	sub	sp, #68	; 0x44
 8001514:	af02      	add	r7, sp, #8
	struct times timerTime = {0, 0, 20};
 8001516:	2134      	movs	r1, #52	; 0x34
 8001518:	187b      	adds	r3, r7, r1
 800151a:	2200      	movs	r2, #0
 800151c:	701a      	strb	r2, [r3, #0]
 800151e:	187b      	adds	r3, r7, r1
 8001520:	2200      	movs	r2, #0
 8001522:	705a      	strb	r2, [r3, #1]
 8001524:	187b      	adds	r3, r7, r1
 8001526:	2214      	movs	r2, #20
 8001528:	709a      	strb	r2, [r3, #2]

	setTimer(&timerTime);
 800152a:	187b      	adds	r3, r7, r1
 800152c:	0018      	movs	r0, r3
 800152e:	f7ff feb9 	bl	80012a4 <setTimer>

	// print current time and timer value set
	struct dates currentDate;
	struct times currentTime;
	getDateTime(&currentDate, &currentTime);
 8001532:	2528      	movs	r5, #40	; 0x28
 8001534:	197a      	adds	r2, r7, r5
 8001536:	262c      	movs	r6, #44	; 0x2c
 8001538:	19bb      	adds	r3, r7, r6
 800153a:	0011      	movs	r1, r2
 800153c:	0018      	movs	r0, r3
 800153e:	f7ff ff99 	bl	8001474 <getDateTime>

	char str[40];
	sprintf(str, "current: %2u:%2u:%2u", currentTime.hr, currentTime.min, currentTime.sec);
 8001542:	197b      	adds	r3, r7, r5
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	001a      	movs	r2, r3
 8001548:	197b      	adds	r3, r7, r5
 800154a:	785b      	ldrb	r3, [r3, #1]
 800154c:	001c      	movs	r4, r3
 800154e:	197b      	adds	r3, r7, r5
 8001550:	789b      	ldrb	r3, [r3, #2]
 8001552:	4935      	ldr	r1, [pc, #212]	; (8001628 <timerTest+0x118>)
 8001554:	0038      	movs	r0, r7
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	0023      	movs	r3, r4
 800155a:	f005 fa55 	bl	8006a08 <siprintf>
	drawTextAt(0, 0, str, &hspi1);
 800155e:	4b33      	ldr	r3, [pc, #204]	; (800162c <timerTest+0x11c>)
 8001560:	003a      	movs	r2, r7
 8001562:	2100      	movs	r1, #0
 8001564:	2000      	movs	r0, #0
 8001566:	f7ff fd43 	bl	8000ff0 <drawTextAt>
	sprintf(str, "       : %2u:%2u:%2u", currentDate.month, currentDate.date, currentDate.yr);
 800156a:	19bb      	adds	r3, r7, r6
 800156c:	789b      	ldrb	r3, [r3, #2]
 800156e:	001a      	movs	r2, r3
 8001570:	19bb      	adds	r3, r7, r6
 8001572:	78db      	ldrb	r3, [r3, #3]
 8001574:	001c      	movs	r4, r3
 8001576:	19bb      	adds	r3, r7, r6
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	492d      	ldr	r1, [pc, #180]	; (8001630 <timerTest+0x120>)
 800157c:	0038      	movs	r0, r7
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	0023      	movs	r3, r4
 8001582:	f005 fa41 	bl	8006a08 <siprintf>
	drawTextAt(0, 10, str, &hspi1);
 8001586:	4b29      	ldr	r3, [pc, #164]	; (800162c <timerTest+0x11c>)
 8001588:	003a      	movs	r2, r7
 800158a:	210a      	movs	r1, #10
 800158c:	2000      	movs	r0, #0
 800158e:	f7ff fd2f 	bl	8000ff0 <drawTextAt>
	sprintf(str, "timer: %2u:%2u:%2u", timerTime.hr, timerTime.min, timerTime.sec);
 8001592:	2134      	movs	r1, #52	; 0x34
 8001594:	187b      	adds	r3, r7, r1
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	001a      	movs	r2, r3
 800159a:	187b      	adds	r3, r7, r1
 800159c:	785b      	ldrb	r3, [r3, #1]
 800159e:	001c      	movs	r4, r3
 80015a0:	187b      	adds	r3, r7, r1
 80015a2:	789b      	ldrb	r3, [r3, #2]
 80015a4:	4923      	ldr	r1, [pc, #140]	; (8001634 <timerTest+0x124>)
 80015a6:	0038      	movs	r0, r7
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	0023      	movs	r3, r4
 80015ac:	f005 fa2c 	bl	8006a08 <siprintf>
	drawTextAt(0, 20, str, &hspi1);
 80015b0:	4b1e      	ldr	r3, [pc, #120]	; (800162c <timerTest+0x11c>)
 80015b2:	003a      	movs	r2, r7
 80015b4:	2114      	movs	r1, #20
 80015b6:	2000      	movs	r0, #0
 80015b8:	f7ff fd1a 	bl	8000ff0 <drawTextAt>

	HAL_Delay(10000);
 80015bc:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <timerTest+0x128>)
 80015be:	0018      	movs	r0, r3
 80015c0:	f001 faac 	bl	8002b1c <HAL_Delay>
	getDateTime(&currentDate, &currentTime);
 80015c4:	197a      	adds	r2, r7, r5
 80015c6:	19bb      	adds	r3, r7, r6
 80015c8:	0011      	movs	r1, r2
 80015ca:	0018      	movs	r0, r3
 80015cc:	f7ff ff52 	bl	8001474 <getDateTime>
	sprintf(str, "current: %2u:%2u:%2u", currentTime.hr, currentTime.min, currentTime.sec);
 80015d0:	197b      	adds	r3, r7, r5
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	001a      	movs	r2, r3
 80015d6:	197b      	adds	r3, r7, r5
 80015d8:	785b      	ldrb	r3, [r3, #1]
 80015da:	001c      	movs	r4, r3
 80015dc:	197b      	adds	r3, r7, r5
 80015de:	789b      	ldrb	r3, [r3, #2]
 80015e0:	4911      	ldr	r1, [pc, #68]	; (8001628 <timerTest+0x118>)
 80015e2:	0038      	movs	r0, r7
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	0023      	movs	r3, r4
 80015e8:	f005 fa0e 	bl	8006a08 <siprintf>
	drawTextAt(0, 0, str, &hspi1);
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <timerTest+0x11c>)
 80015ee:	003a      	movs	r2, r7
 80015f0:	2100      	movs	r1, #0
 80015f2:	2000      	movs	r0, #0
 80015f4:	f7ff fcfc 	bl	8000ff0 <drawTextAt>
	sprintf(str, "       : %2u:%2u:%2u", currentDate.month, currentDate.date, currentDate.yr);
 80015f8:	19bb      	adds	r3, r7, r6
 80015fa:	789b      	ldrb	r3, [r3, #2]
 80015fc:	001a      	movs	r2, r3
 80015fe:	19bb      	adds	r3, r7, r6
 8001600:	78db      	ldrb	r3, [r3, #3]
 8001602:	001c      	movs	r4, r3
 8001604:	19bb      	adds	r3, r7, r6
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	4909      	ldr	r1, [pc, #36]	; (8001630 <timerTest+0x120>)
 800160a:	0038      	movs	r0, r7
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	0023      	movs	r3, r4
 8001610:	f005 f9fa 	bl	8006a08 <siprintf>
	drawTextAt(0, 10, str, &hspi1);
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <timerTest+0x11c>)
 8001616:	003a      	movs	r2, r7
 8001618:	210a      	movs	r1, #10
 800161a:	2000      	movs	r0, #0
 800161c:	f7ff fce8 	bl	8000ff0 <drawTextAt>
}
 8001620:	46c0      	nop			; (mov r8, r8)
 8001622:	46bd      	mov	sp, r7
 8001624:	b00f      	add	sp, #60	; 0x3c
 8001626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001628:	080072ec 	.word	0x080072ec
 800162c:	2000019c 	.word	0x2000019c
 8001630:	08007304 	.word	0x08007304
 8001634:	0800731c 	.word	0x0800731c
 8001638:	00002710 	.word	0x00002710

0800163c <peripheralClockConfig>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void peripheralClockConfig() {
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	; 0x28
 8001640:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001642:	003b      	movs	r3, r7
 8001644:	0018      	movs	r0, r3
 8001646:	2328      	movs	r3, #40	; 0x28
 8001648:	001a      	movs	r2, r3
 800164a:	2100      	movs	r1, #0
 800164c:	f005 f9d3 	bl	80069f6 <memset>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPTIM1;
 8001650:	003b      	movs	r3, r7
 8001652:	22a0      	movs	r2, #160	; 0xa0
 8001654:	601a      	str	r2, [r3, #0]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001656:	003b      	movs	r3, r7
 8001658:	2280      	movs	r2, #128	; 0x80
 800165a:	0252      	lsls	r2, r2, #9
 800165c:	605a      	str	r2, [r3, #4]
	PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 800165e:	003b      	movs	r3, r7
 8001660:	22c0      	movs	r2, #192	; 0xc0
 8001662:	0312      	lsls	r2, r2, #12
 8001664:	621a      	str	r2, [r3, #32]

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001666:	003b      	movs	r3, r7
 8001668:	0018      	movs	r0, r3
 800166a:	f003 f905 	bl	8004878 <HAL_RCCEx_PeriphCLKConfig>
 800166e:	1e03      	subs	r3, r0, #0
 8001670:	d001      	beq.n	8001676 <peripheralClockConfig+0x3a>
	{
		Error_Handler();
 8001672:	f000 fbc1 	bl	8001df8 <Error_Handler>
	}
}
 8001676:	46c0      	nop			; (mov r8, r8)
 8001678:	46bd      	mov	sp, r7
 800167a:	b00a      	add	sp, #40	; 0x28
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001684:	f001 f9ea 	bl	8002a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001688:	f000 f83a 	bl	8001700 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  peripheralClockConfig();
 800168c:	f7ff ffd6 	bl	800163c <peripheralClockConfig>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001690:	f000 fb20 	bl	8001cd4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001694:	f000 f9a8 	bl	80019e8 <MX_SPI1_Init>
  MX_ADC_Init();
 8001698:	f000 f8b6 	bl	8001808 <MX_ADC_Init>
  MX_RTC_Init();
 800169c:	f000 f940 	bl	8001920 <MX_RTC_Init>
  MX_TIM21_Init();
 80016a0:	f000 f9de 	bl	8001a60 <MX_TIM21_Init>
  MX_LPTIM1_Init();
 80016a4:	f000 f914 	bl	80018d0 <MX_LPTIM1_Init>
  MX_DMA_Init();
 80016a8:	f000 faf6 	bl	8001c98 <MX_DMA_Init>
  MX_TIM22_Init();
 80016ac:	f000 fa66 	bl	8001b7c <MX_TIM22_Init>
  /* USER CODE BEGIN 2 */
  	/* initialization for display */
	HAL_Delay(2000);
 80016b0:	23fa      	movs	r3, #250	; 0xfa
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	0018      	movs	r0, r3
 80016b6:	f001 fa31 	bl	8002b1c <HAL_Delay>
	TFT_startup(&hspi1);
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <main+0x6c>)
 80016bc:	0018      	movs	r0, r3
 80016be:	f7fe ffa9 	bl	8000614 <TFT_startup>
	clearScreen(ST77XX_WHITE, &hspi1);
 80016c2:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <main+0x6c>)
 80016c4:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <main+0x70>)
 80016c6:	0019      	movs	r1, r3
 80016c8:	0010      	movs	r0, r2
 80016ca:	f7ff fcf3 	bl	80010b4 <clearScreen>

	/* start updating display for ui */
	updateFace = 1;
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <main+0x74>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	701a      	strb	r2, [r3, #0]
	face = faceClock;
 80016d4:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <main+0x78>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
	updateClock = 1;
 80016da:	4b08      	ldr	r3, [pc, #32]	; (80016fc <main+0x7c>)
 80016dc:	2201      	movs	r2, #1
 80016de:	701a      	strb	r2, [r3, #0]
	runClockDisplay();
 80016e0:	f001 f952 	bl	8002988 <runClockDisplay>

	/* tests that are only meant to run once */
//	runStopwatch(&hlptim1);
//	runTimerDisplay();
//	alarmTest();
	timerTest();
 80016e4:	f7ff ff14 	bl	8001510 <timerTest>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <main+0x68>
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	2000019c 	.word	0x2000019c
 80016f0:	0000ffff 	.word	0x0000ffff
 80016f4:	2000013c 	.word	0x2000013c
 80016f8:	2000008c 	.word	0x2000008c
 80016fc:	200000dc 	.word	0x200000dc

08001700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001700:	b590      	push	{r4, r7, lr}
 8001702:	b09f      	sub	sp, #124	; 0x7c
 8001704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001706:	2440      	movs	r4, #64	; 0x40
 8001708:	193b      	adds	r3, r7, r4
 800170a:	0018      	movs	r0, r3
 800170c:	2338      	movs	r3, #56	; 0x38
 800170e:	001a      	movs	r2, r3
 8001710:	2100      	movs	r1, #0
 8001712:	f005 f970 	bl	80069f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001716:	232c      	movs	r3, #44	; 0x2c
 8001718:	18fb      	adds	r3, r7, r3
 800171a:	0018      	movs	r0, r3
 800171c:	2314      	movs	r3, #20
 800171e:	001a      	movs	r2, r3
 8001720:	2100      	movs	r1, #0
 8001722:	f005 f968 	bl	80069f6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	0018      	movs	r0, r3
 800172a:	2328      	movs	r3, #40	; 0x28
 800172c:	001a      	movs	r2, r3
 800172e:	2100      	movs	r1, #0
 8001730:	f005 f961 	bl	80069f6 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001734:	4b31      	ldr	r3, [pc, #196]	; (80017fc <SystemClock_Config+0xfc>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a31      	ldr	r2, [pc, #196]	; (8001800 <SystemClock_Config+0x100>)
 800173a:	401a      	ands	r2, r3
 800173c:	4b2f      	ldr	r3, [pc, #188]	; (80017fc <SystemClock_Config+0xfc>)
 800173e:	2180      	movs	r1, #128	; 0x80
 8001740:	0109      	lsls	r1, r1, #4
 8001742:	430a      	orrs	r2, r1
 8001744:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001746:	f002 fb0b 	bl	8003d60 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800174a:	4b2e      	ldr	r3, [pc, #184]	; (8001804 <SystemClock_Config+0x104>)
 800174c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800174e:	4b2d      	ldr	r3, [pc, #180]	; (8001804 <SystemClock_Config+0x104>)
 8001750:	492b      	ldr	r1, [pc, #172]	; (8001800 <SystemClock_Config+0x100>)
 8001752:	400a      	ands	r2, r1
 8001754:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8001756:	193b      	adds	r3, r7, r4
 8001758:	223c      	movs	r2, #60	; 0x3c
 800175a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800175c:	193b      	adds	r3, r7, r4
 800175e:	2280      	movs	r2, #128	; 0x80
 8001760:	0052      	lsls	r2, r2, #1
 8001762:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001764:	0021      	movs	r1, r4
 8001766:	187b      	adds	r3, r7, r1
 8001768:	2201      	movs	r2, #1
 800176a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800176c:	187b      	adds	r3, r7, r1
 800176e:	2201      	movs	r2, #1
 8001770:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001772:	187b      	adds	r3, r7, r1
 8001774:	2201      	movs	r2, #1
 8001776:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001778:	187b      	adds	r3, r7, r1
 800177a:	2200      	movs	r2, #0
 800177c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800177e:	187b      	adds	r3, r7, r1
 8001780:	22a0      	movs	r2, #160	; 0xa0
 8001782:	0212      	lsls	r2, r2, #8
 8001784:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001786:	187b      	adds	r3, r7, r1
 8001788:	2200      	movs	r2, #0
 800178a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800178c:	187b      	adds	r3, r7, r1
 800178e:	0018      	movs	r0, r3
 8001790:	f002 faf4 	bl	8003d7c <HAL_RCC_OscConfig>
 8001794:	1e03      	subs	r3, r0, #0
 8001796:	d001      	beq.n	800179c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001798:	f000 fb2e 	bl	8001df8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800179c:	212c      	movs	r1, #44	; 0x2c
 800179e:	187b      	adds	r3, r7, r1
 80017a0:	220f      	movs	r2, #15
 80017a2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80017a4:	187b      	adds	r3, r7, r1
 80017a6:	2200      	movs	r2, #0
 80017a8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017aa:	187b      	adds	r3, r7, r1
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017b0:	187b      	adds	r3, r7, r1
 80017b2:	2200      	movs	r2, #0
 80017b4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017b6:	187b      	adds	r3, r7, r1
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017bc:	187b      	adds	r3, r7, r1
 80017be:	2100      	movs	r1, #0
 80017c0:	0018      	movs	r0, r3
 80017c2:	f002 feab 	bl	800451c <HAL_RCC_ClockConfig>
 80017c6:	1e03      	subs	r3, r0, #0
 80017c8:	d001      	beq.n	80017ce <SystemClock_Config+0xce>
  {
    Error_Handler();
 80017ca:	f000 fb15 	bl	8001df8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPTIM1;
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	22a0      	movs	r2, #160	; 0xa0
 80017d2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	2280      	movs	r2, #128	; 0x80
 80017d8:	0292      	lsls	r2, r2, #10
 80017da:	605a      	str	r2, [r3, #4]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	2200      	movs	r2, #0
 80017e0:	621a      	str	r2, [r3, #32]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	0018      	movs	r0, r3
 80017e6:	f003 f847 	bl	8004878 <HAL_RCCEx_PeriphCLKConfig>
 80017ea:	1e03      	subs	r3, r0, #0
 80017ec:	d001      	beq.n	80017f2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80017ee:	f000 fb03 	bl	8001df8 <Error_Handler>
  }
}
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	46bd      	mov	sp, r7
 80017f6:	b01f      	add	sp, #124	; 0x7c
 80017f8:	bd90      	pop	{r4, r7, pc}
 80017fa:	46c0      	nop			; (mov r8, r8)
 80017fc:	40007000 	.word	0x40007000
 8001800:	ffffe7ff 	.word	0xffffe7ff
 8001804:	40021000 	.word	0x40021000

08001808 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800180e:	003b      	movs	r3, r7
 8001810:	0018      	movs	r0, r3
 8001812:	2308      	movs	r3, #8
 8001814:	001a      	movs	r2, r3
 8001816:	2100      	movs	r1, #0
 8001818:	f005 f8ed 	bl	80069f6 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 800181c:	4b2a      	ldr	r3, [pc, #168]	; (80018c8 <MX_ADC_Init+0xc0>)
 800181e:	4a2b      	ldr	r2, [pc, #172]	; (80018cc <MX_ADC_Init+0xc4>)
 8001820:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8001822:	4b29      	ldr	r3, [pc, #164]	; (80018c8 <MX_ADC_Init+0xc0>)
 8001824:	2200      	movs	r2, #0
 8001826:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001828:	4b27      	ldr	r3, [pc, #156]	; (80018c8 <MX_ADC_Init+0xc0>)
 800182a:	22c0      	movs	r2, #192	; 0xc0
 800182c:	0612      	lsls	r2, r2, #24
 800182e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001830:	4b25      	ldr	r3, [pc, #148]	; (80018c8 <MX_ADC_Init+0xc0>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001836:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <MX_ADC_Init+0xc0>)
 8001838:	2200      	movs	r2, #0
 800183a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800183c:	4b22      	ldr	r3, [pc, #136]	; (80018c8 <MX_ADC_Init+0xc0>)
 800183e:	2201      	movs	r2, #1
 8001840:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001842:	4b21      	ldr	r3, [pc, #132]	; (80018c8 <MX_ADC_Init+0xc0>)
 8001844:	2200      	movs	r2, #0
 8001846:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001848:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <MX_ADC_Init+0xc0>)
 800184a:	2220      	movs	r2, #32
 800184c:	2100      	movs	r1, #0
 800184e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001850:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <MX_ADC_Init+0xc0>)
 8001852:	2221      	movs	r2, #33	; 0x21
 8001854:	2100      	movs	r1, #0
 8001856:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001858:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <MX_ADC_Init+0xc0>)
 800185a:	2200      	movs	r2, #0
 800185c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800185e:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <MX_ADC_Init+0xc0>)
 8001860:	22c2      	movs	r2, #194	; 0xc2
 8001862:	32ff      	adds	r2, #255	; 0xff
 8001864:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001866:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <MX_ADC_Init+0xc0>)
 8001868:	222c      	movs	r2, #44	; 0x2c
 800186a:	2100      	movs	r1, #0
 800186c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800186e:	4b16      	ldr	r3, [pc, #88]	; (80018c8 <MX_ADC_Init+0xc0>)
 8001870:	2204      	movs	r2, #4
 8001872:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001874:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <MX_ADC_Init+0xc0>)
 8001876:	2200      	movs	r2, #0
 8001878:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800187a:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <MX_ADC_Init+0xc0>)
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <MX_ADC_Init+0xc0>)
 8001882:	2200      	movs	r2, #0
 8001884:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <MX_ADC_Init+0xc0>)
 8001888:	2200      	movs	r2, #0
 800188a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800188c:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <MX_ADC_Init+0xc0>)
 800188e:	0018      	movs	r0, r3
 8001890:	f001 f962 	bl	8002b58 <HAL_ADC_Init>
 8001894:	1e03      	subs	r3, r0, #0
 8001896:	d001      	beq.n	800189c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8001898:	f000 faae 	bl	8001df8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800189c:	003b      	movs	r3, r7
 800189e:	2201      	movs	r2, #1
 80018a0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80018a2:	003b      	movs	r3, r7
 80018a4:	2280      	movs	r2, #128	; 0x80
 80018a6:	0152      	lsls	r2, r2, #5
 80018a8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80018aa:	003a      	movs	r2, r7
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <MX_ADC_Init+0xc0>)
 80018ae:	0011      	movs	r1, r2
 80018b0:	0018      	movs	r0, r3
 80018b2:	f001 fac5 	bl	8002e40 <HAL_ADC_ConfigChannel>
 80018b6:	1e03      	subs	r3, r0, #0
 80018b8:	d001      	beq.n	80018be <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80018ba:	f000 fa9d 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	46bd      	mov	sp, r7
 80018c2:	b002      	add	sp, #8
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	2000023c 	.word	0x2000023c
 80018cc:	40012400 	.word	0x40012400

080018d0 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80018d4:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <MX_LPTIM1_Init+0x44>)
 80018d6:	4a10      	ldr	r2, [pc, #64]	; (8001918 <MX_LPTIM1_Init+0x48>)
 80018d8:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <MX_LPTIM1_Init+0x44>)
 80018dc:	2200      	movs	r2, #0
 80018de:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <MX_LPTIM1_Init+0x44>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80018e6:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <MX_LPTIM1_Init+0x44>)
 80018e8:	4a0c      	ldr	r2, [pc, #48]	; (800191c <MX_LPTIM1_Init+0x4c>)
 80018ea:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80018ec:	4b09      	ldr	r3, [pc, #36]	; (8001914 <MX_LPTIM1_Init+0x44>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80018f2:	4b08      	ldr	r3, [pc, #32]	; (8001914 <MX_LPTIM1_Init+0x44>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80018f8:	4b06      	ldr	r3, [pc, #24]	; (8001914 <MX_LPTIM1_Init+0x44>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80018fe:	4b05      	ldr	r3, [pc, #20]	; (8001914 <MX_LPTIM1_Init+0x44>)
 8001900:	0018      	movs	r0, r3
 8001902:	f001 ff89 	bl	8003818 <HAL_LPTIM_Init>
 8001906:	1e03      	subs	r3, r0, #0
 8001908:	d001      	beq.n	800190e <MX_LPTIM1_Init+0x3e>
  {
    Error_Handler();
 800190a:	f000 fa75 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000140 	.word	0x20000140
 8001918:	40007c00 	.word	0x40007c00
 800191c:	0000ffff 	.word	0x0000ffff

08001920 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	0018      	movs	r0, r3
 800192a:	2314      	movs	r3, #20
 800192c:	001a      	movs	r2, r3
 800192e:	2100      	movs	r1, #0
 8001930:	f005 f861 	bl	80069f6 <memset>
  RTC_DateTypeDef sDate = {0};
 8001934:	003b      	movs	r3, r7
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800193a:	4b29      	ldr	r3, [pc, #164]	; (80019e0 <MX_RTC_Init+0xc0>)
 800193c:	4a29      	ldr	r2, [pc, #164]	; (80019e4 <MX_RTC_Init+0xc4>)
 800193e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001940:	4b27      	ldr	r3, [pc, #156]	; (80019e0 <MX_RTC_Init+0xc0>)
 8001942:	2200      	movs	r2, #0
 8001944:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001946:	4b26      	ldr	r3, [pc, #152]	; (80019e0 <MX_RTC_Init+0xc0>)
 8001948:	227f      	movs	r2, #127	; 0x7f
 800194a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800194c:	4b24      	ldr	r3, [pc, #144]	; (80019e0 <MX_RTC_Init+0xc0>)
 800194e:	22ff      	movs	r2, #255	; 0xff
 8001950:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001952:	4b23      	ldr	r3, [pc, #140]	; (80019e0 <MX_RTC_Init+0xc0>)
 8001954:	2200      	movs	r2, #0
 8001956:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001958:	4b21      	ldr	r3, [pc, #132]	; (80019e0 <MX_RTC_Init+0xc0>)
 800195a:	2200      	movs	r2, #0
 800195c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800195e:	4b20      	ldr	r3, [pc, #128]	; (80019e0 <MX_RTC_Init+0xc0>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001964:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <MX_RTC_Init+0xc0>)
 8001966:	2200      	movs	r2, #0
 8001968:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800196a:	4b1d      	ldr	r3, [pc, #116]	; (80019e0 <MX_RTC_Init+0xc0>)
 800196c:	0018      	movs	r0, r3
 800196e:	f003 f8f7 	bl	8004b60 <HAL_RTC_Init>
 8001972:	1e03      	subs	r3, r0, #0
 8001974:	d001      	beq.n	800197a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001976:	f000 fa3f 	bl	8001df8 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	2200      	movs	r2, #0
 8001984:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	2200      	movs	r2, #0
 800198a:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800198c:	1d3b      	adds	r3, r7, #4
 800198e:	2200      	movs	r2, #0
 8001990:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001992:	1d3b      	adds	r3, r7, #4
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001998:	1d39      	adds	r1, r7, #4
 800199a:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <MX_RTC_Init+0xc0>)
 800199c:	2200      	movs	r2, #0
 800199e:	0018      	movs	r0, r3
 80019a0:	f003 f97c 	bl	8004c9c <HAL_RTC_SetTime>
 80019a4:	1e03      	subs	r3, r0, #0
 80019a6:	d001      	beq.n	80019ac <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 80019a8:	f000 fa26 	bl	8001df8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80019ac:	003b      	movs	r3, r7
 80019ae:	2201      	movs	r2, #1
 80019b0:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80019b2:	003b      	movs	r3, r7
 80019b4:	2201      	movs	r2, #1
 80019b6:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 80019b8:	003b      	movs	r3, r7
 80019ba:	2201      	movs	r2, #1
 80019bc:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 80019be:	003b      	movs	r3, r7
 80019c0:	2200      	movs	r2, #0
 80019c2:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80019c4:	0039      	movs	r1, r7
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <MX_RTC_Init+0xc0>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	0018      	movs	r0, r3
 80019cc:	f003 fa86 	bl	8004edc <HAL_RTC_SetDate>
 80019d0:	1e03      	subs	r3, r0, #0
 80019d2:	d001      	beq.n	80019d8 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 80019d4:	f000 fa10 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80019d8:	46c0      	nop			; (mov r8, r8)
 80019da:	46bd      	mov	sp, r7
 80019dc:	b006      	add	sp, #24
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000170 	.word	0x20000170
 80019e4:	40002800 	.word	0x40002800

080019e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019ec:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <MX_SPI1_Init+0x6c>)
 80019ee:	4a1a      	ldr	r2, [pc, #104]	; (8001a58 <MX_SPI1_Init+0x70>)
 80019f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019f2:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <MX_SPI1_Init+0x6c>)
 80019f4:	2282      	movs	r2, #130	; 0x82
 80019f6:	0052      	lsls	r2, r2, #1
 80019f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019fa:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <MX_SPI1_Init+0x6c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a00:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <MX_SPI1_Init+0x6c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a06:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <MX_SPI1_Init+0x6c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <MX_SPI1_Init+0x6c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a12:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <MX_SPI1_Init+0x6c>)
 8001a14:	2280      	movs	r2, #128	; 0x80
 8001a16:	0092      	lsls	r2, r2, #2
 8001a18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <MX_SPI1_Init+0x6c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <MX_SPI1_Init+0x6c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a26:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <MX_SPI1_Init+0x6c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a2c:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <MX_SPI1_Init+0x6c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a32:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <MX_SPI1_Init+0x6c>)
 8001a34:	2207      	movs	r2, #7
 8001a36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <MX_SPI1_Init+0x6c>)
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	f003 fdce 	bl	80055dc <HAL_SPI_Init>
 8001a40:	1e03      	subs	r3, r0, #0
 8001a42:	d001      	beq.n	8001a48 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a44:	f000 f9d8 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  hspi1.hdmatx = &hdma_spi1_tx;
 8001a48:	4b02      	ldr	r3, [pc, #8]	; (8001a54 <MX_SPI1_Init+0x6c>)
 8001a4a:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <MX_SPI1_Init+0x74>)
 8001a4c:	649a      	str	r2, [r3, #72]	; 0x48
  /* USER CODE END SPI1_Init 2 */

}
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	2000019c 	.word	0x2000019c
 8001a58:	40013000 	.word	0x40013000
 8001a5c:	20000298 	.word	0x20000298

08001a60 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	; 0x28
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a66:	2318      	movs	r3, #24
 8001a68:	18fb      	adds	r3, r7, r3
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	2310      	movs	r3, #16
 8001a6e:	001a      	movs	r2, r3
 8001a70:	2100      	movs	r1, #0
 8001a72:	f004 ffc0 	bl	80069f6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a76:	2310      	movs	r3, #16
 8001a78:	18fb      	adds	r3, r7, r3
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	2308      	movs	r3, #8
 8001a7e:	001a      	movs	r2, r3
 8001a80:	2100      	movs	r1, #0
 8001a82:	f004 ffb8 	bl	80069f6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a86:	003b      	movs	r3, r7
 8001a88:	0018      	movs	r0, r3
 8001a8a:	2310      	movs	r3, #16
 8001a8c:	001a      	movs	r2, r3
 8001a8e:	2100      	movs	r1, #0
 8001a90:	f004 ffb1 	bl	80069f6 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8001a94:	4b37      	ldr	r3, [pc, #220]	; (8001b74 <MX_TIM21_Init+0x114>)
 8001a96:	4a38      	ldr	r2, [pc, #224]	; (8001b78 <MX_TIM21_Init+0x118>)
 8001a98:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 8001a9a:	4b36      	ldr	r3, [pc, #216]	; (8001b74 <MX_TIM21_Init+0x114>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001aa0:	4b34      	ldr	r3, [pc, #208]	; (8001b74 <MX_TIM21_Init+0x114>)
 8001aa2:	2210      	movs	r2, #16
 8001aa4:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 0x8000;
 8001aa6:	4b33      	ldr	r3, [pc, #204]	; (8001b74 <MX_TIM21_Init+0x114>)
 8001aa8:	2280      	movs	r2, #128	; 0x80
 8001aaa:	0212      	lsls	r2, r2, #8
 8001aac:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aae:	4b31      	ldr	r3, [pc, #196]	; (8001b74 <MX_TIM21_Init+0x114>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab4:	4b2f      	ldr	r3, [pc, #188]	; (8001b74 <MX_TIM21_Init+0x114>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8001aba:	4b2e      	ldr	r3, [pc, #184]	; (8001b74 <MX_TIM21_Init+0x114>)
 8001abc:	0018      	movs	r0, r3
 8001abe:	f004 fa53 	bl	8005f68 <HAL_TIM_Base_Init>
 8001ac2:	1e03      	subs	r3, r0, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM21_Init+0x6a>
  {
    Error_Handler();
 8001ac6:	f000 f997 	bl	8001df8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8001aca:	2118      	movs	r1, #24
 8001acc:	187b      	adds	r3, r7, r1
 8001ace:	2280      	movs	r2, #128	; 0x80
 8001ad0:	0192      	lsls	r2, r2, #6
 8001ad2:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001ad4:	187b      	adds	r3, r7, r1
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001ada:	187b      	adds	r3, r7, r1
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8001ae0:	187b      	adds	r3, r7, r1
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8001ae6:	187a      	adds	r2, r7, r1
 8001ae8:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <MX_TIM21_Init+0x114>)
 8001aea:	0011      	movs	r1, r2
 8001aec:	0018      	movs	r0, r3
 8001aee:	f004 fc15 	bl	800631c <HAL_TIM_ConfigClockSource>
 8001af2:	1e03      	subs	r3, r0, #0
 8001af4:	d001      	beq.n	8001afa <MX_TIM21_Init+0x9a>
  {
    Error_Handler();
 8001af6:	f000 f97f 	bl	8001df8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 8001afa:	4b1e      	ldr	r3, [pc, #120]	; (8001b74 <MX_TIM21_Init+0x114>)
 8001afc:	0018      	movs	r0, r3
 8001afe:	f004 faa3 	bl	8006048 <HAL_TIM_OC_Init>
 8001b02:	1e03      	subs	r3, r0, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM21_Init+0xaa>
  {
    Error_Handler();
 8001b06:	f000 f977 	bl	8001df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0a:	2110      	movs	r1, #16
 8001b0c:	187b      	adds	r3, r7, r1
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b12:	187b      	adds	r3, r7, r1
 8001b14:	2200      	movs	r2, #0
 8001b16:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8001b18:	187a      	adds	r2, r7, r1
 8001b1a:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <MX_TIM21_Init+0x114>)
 8001b1c:	0011      	movs	r1, r2
 8001b1e:	0018      	movs	r0, r3
 8001b20:	f004 fed6 	bl	80068d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b24:	1e03      	subs	r3, r0, #0
 8001b26:	d001      	beq.n	8001b2c <MX_TIM21_Init+0xcc>
  {
    Error_Handler();
 8001b28:	f000 f966 	bl	8001df8 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim21, TIM21_ETR_LSE) != HAL_OK)
 8001b2c:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <MX_TIM21_Init+0x114>)
 8001b2e:	2103      	movs	r1, #3
 8001b30:	0018      	movs	r0, r3
 8001b32:	f004 ff10 	bl	8006956 <HAL_TIMEx_RemapConfig>
 8001b36:	1e03      	subs	r3, r0, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM21_Init+0xde>
  {
    Error_Handler();
 8001b3a:	f000 f95d 	bl	8001df8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001b3e:	003b      	movs	r3, r7
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001b44:	003b      	movs	r3, r7
 8001b46:	2200      	movs	r2, #0
 8001b48:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b4a:	003b      	movs	r3, r7
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b50:	003b      	movs	r3, r7
 8001b52:	2200      	movs	r2, #0
 8001b54:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b56:	0039      	movs	r1, r7
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <MX_TIM21_Init+0x114>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	f004 fb8f 	bl	8006280 <HAL_TIM_OC_ConfigChannel>
 8001b62:	1e03      	subs	r3, r0, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM21_Init+0x10a>
  {
    Error_Handler();
 8001b66:	f000 f947 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	b00a      	add	sp, #40	; 0x28
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	20000200 	.word	0x20000200
 8001b78:	40010800 	.word	0x40010800

08001b7c <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08a      	sub	sp, #40	; 0x28
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b82:	2318      	movs	r3, #24
 8001b84:	18fb      	adds	r3, r7, r3
 8001b86:	0018      	movs	r0, r3
 8001b88:	2310      	movs	r3, #16
 8001b8a:	001a      	movs	r2, r3
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	f004 ff32 	bl	80069f6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b92:	2310      	movs	r3, #16
 8001b94:	18fb      	adds	r3, r7, r3
 8001b96:	0018      	movs	r0, r3
 8001b98:	2308      	movs	r3, #8
 8001b9a:	001a      	movs	r2, r3
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	f004 ff2a 	bl	80069f6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ba2:	003b      	movs	r3, r7
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	2310      	movs	r3, #16
 8001ba8:	001a      	movs	r2, r3
 8001baa:	2100      	movs	r1, #0
 8001bac:	f004 ff23 	bl	80069f6 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8001bb0:	4b37      	ldr	r3, [pc, #220]	; (8001c90 <MX_TIM22_Init+0x114>)
 8001bb2:	4a38      	ldr	r2, [pc, #224]	; (8001c94 <MX_TIM22_Init+0x118>)
 8001bb4:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0;
 8001bb6:	4b36      	ldr	r3, [pc, #216]	; (8001c90 <MX_TIM22_Init+0x114>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001bbc:	4b34      	ldr	r3, [pc, #208]	; (8001c90 <MX_TIM22_Init+0x114>)
 8001bbe:	2210      	movs	r2, #16
 8001bc0:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 0x8000;
 8001bc2:	4b33      	ldr	r3, [pc, #204]	; (8001c90 <MX_TIM22_Init+0x114>)
 8001bc4:	2280      	movs	r2, #128	; 0x80
 8001bc6:	0212      	lsls	r2, r2, #8
 8001bc8:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bca:	4b31      	ldr	r3, [pc, #196]	; (8001c90 <MX_TIM22_Init+0x114>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd0:	4b2f      	ldr	r3, [pc, #188]	; (8001c90 <MX_TIM22_Init+0x114>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 8001bd6:	4b2e      	ldr	r3, [pc, #184]	; (8001c90 <MX_TIM22_Init+0x114>)
 8001bd8:	0018      	movs	r0, r3
 8001bda:	f004 f9c5 	bl	8005f68 <HAL_TIM_Base_Init>
 8001bde:	1e03      	subs	r3, r0, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM22_Init+0x6a>
  {
    Error_Handler();
 8001be2:	f000 f909 	bl	8001df8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8001be6:	2118      	movs	r1, #24
 8001be8:	187b      	adds	r3, r7, r1
 8001bea:	2280      	movs	r2, #128	; 0x80
 8001bec:	0192      	lsls	r2, r2, #6
 8001bee:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001bf0:	187b      	adds	r3, r7, r1
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001bf6:	187b      	adds	r3, r7, r1
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8001bfc:	187b      	adds	r3, r7, r1
 8001bfe:	2200      	movs	r2, #0
 8001c00:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 8001c02:	187a      	adds	r2, r7, r1
 8001c04:	4b22      	ldr	r3, [pc, #136]	; (8001c90 <MX_TIM22_Init+0x114>)
 8001c06:	0011      	movs	r1, r2
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f004 fb87 	bl	800631c <HAL_TIM_ConfigClockSource>
 8001c0e:	1e03      	subs	r3, r0, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM22_Init+0x9a>
  {
    Error_Handler();
 8001c12:	f000 f8f1 	bl	8001df8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim22) != HAL_OK)
 8001c16:	4b1e      	ldr	r3, [pc, #120]	; (8001c90 <MX_TIM22_Init+0x114>)
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f004 fa15 	bl	8006048 <HAL_TIM_OC_Init>
 8001c1e:	1e03      	subs	r3, r0, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM22_Init+0xaa>
  {
    Error_Handler();
 8001c22:	f000 f8e9 	bl	8001df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c26:	2110      	movs	r1, #16
 8001c28:	187b      	adds	r3, r7, r1
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c2e:	187b      	adds	r3, r7, r1
 8001c30:	2200      	movs	r2, #0
 8001c32:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8001c34:	187a      	adds	r2, r7, r1
 8001c36:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <MX_TIM22_Init+0x114>)
 8001c38:	0011      	movs	r1, r2
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f004 fe48 	bl	80068d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c40:	1e03      	subs	r3, r0, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM22_Init+0xcc>
  {
    Error_Handler();
 8001c44:	f000 f8d8 	bl	8001df8 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim22, TIM22_ETR_LSE) != HAL_OK)
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <MX_TIM22_Init+0x114>)
 8001c4a:	2103      	movs	r1, #3
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f004 fe82 	bl	8006956 <HAL_TIMEx_RemapConfig>
 8001c52:	1e03      	subs	r3, r0, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM22_Init+0xde>
  {
    Error_Handler();
 8001c56:	f000 f8cf 	bl	8001df8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001c5a:	003b      	movs	r3, r7
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001c60:	003b      	movs	r3, r7
 8001c62:	2200      	movs	r2, #0
 8001c64:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c66:	003b      	movs	r3, r7
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c6c:	003b      	movs	r3, r7
 8001c6e:	2200      	movs	r2, #0
 8001c70:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c72:	0039      	movs	r1, r7
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <MX_TIM22_Init+0x114>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f004 fb01 	bl	8006280 <HAL_TIM_OC_ConfigChannel>
 8001c7e:	1e03      	subs	r3, r0, #0
 8001c80:	d001      	beq.n	8001c86 <MX_TIM22_Init+0x10a>
  {
    Error_Handler();
 8001c82:	f000 f8b9 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */

}
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	b00a      	add	sp, #40	; 0x28
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	20000100 	.word	0x20000100
 8001c94:	40011400 	.word	0x40011400

08001c98 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c9e:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <MX_DMA_Init+0x38>)
 8001ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ca2:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <MX_DMA_Init+0x38>)
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	631a      	str	r2, [r3, #48]	; 0x30
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <MX_DMA_Init+0x38>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	2201      	movs	r2, #1
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	607b      	str	r3, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2100      	movs	r1, #0
 8001cba:	200a      	movs	r0, #10
 8001cbc:	f001 fa26 	bl	800310c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001cc0:	200a      	movs	r0, #10
 8001cc2:	f001 fa38 	bl	8003136 <HAL_NVIC_EnableIRQ>

}
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	b002      	add	sp, #8
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	46c0      	nop			; (mov r8, r8)
 8001cd0:	40021000 	.word	0x40021000

08001cd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cd4:	b590      	push	{r4, r7, lr}
 8001cd6:	b089      	sub	sp, #36	; 0x24
 8001cd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cda:	240c      	movs	r4, #12
 8001cdc:	193b      	adds	r3, r7, r4
 8001cde:	0018      	movs	r0, r3
 8001ce0:	2314      	movs	r3, #20
 8001ce2:	001a      	movs	r2, r3
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	f004 fe86 	bl	80069f6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cea:	4b3e      	ldr	r3, [pc, #248]	; (8001de4 <MX_GPIO_Init+0x110>)
 8001cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cee:	4b3d      	ldr	r3, [pc, #244]	; (8001de4 <MX_GPIO_Init+0x110>)
 8001cf0:	2104      	movs	r1, #4
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cf6:	4b3b      	ldr	r3, [pc, #236]	; (8001de4 <MX_GPIO_Init+0x110>)
 8001cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfa:	2204      	movs	r2, #4
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d02:	4b38      	ldr	r3, [pc, #224]	; (8001de4 <MX_GPIO_Init+0x110>)
 8001d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d06:	4b37      	ldr	r3, [pc, #220]	; (8001de4 <MX_GPIO_Init+0x110>)
 8001d08:	2101      	movs	r1, #1
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d0e:	4b35      	ldr	r3, [pc, #212]	; (8001de4 <MX_GPIO_Init+0x110>)
 8001d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d12:	2201      	movs	r2, #1
 8001d14:	4013      	ands	r3, r2
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1a:	4b32      	ldr	r3, [pc, #200]	; (8001de4 <MX_GPIO_Init+0x110>)
 8001d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d1e:	4b31      	ldr	r3, [pc, #196]	; (8001de4 <MX_GPIO_Init+0x110>)
 8001d20:	2102      	movs	r1, #2
 8001d22:	430a      	orrs	r2, r1
 8001d24:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d26:	4b2f      	ldr	r3, [pc, #188]	; (8001de4 <MX_GPIO_Init+0x110>)
 8001d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_7, GPIO_PIN_RESET);
 8001d32:	4b2d      	ldr	r3, [pc, #180]	; (8001de8 <MX_GPIO_Init+0x114>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	218b      	movs	r1, #139	; 0x8b
 8001d38:	0018      	movs	r0, r3
 8001d3a:	f001 fd22 	bl	8003782 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_6, GPIO_PIN_RESET);
 8001d3e:	4b2b      	ldr	r3, [pc, #172]	; (8001dec <MX_GPIO_Init+0x118>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	2142      	movs	r1, #66	; 0x42
 8001d44:	0018      	movs	r0, r3
 8001d46:	f001 fd1c 	bl	8003782 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC3 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_7;
 8001d4a:	0021      	movs	r1, r4
 8001d4c:	187b      	adds	r3, r7, r1
 8001d4e:	228b      	movs	r2, #139	; 0x8b
 8001d50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d52:	187b      	adds	r3, r7, r1
 8001d54:	2201      	movs	r2, #1
 8001d56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	187b      	adds	r3, r7, r1
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5e:	187b      	adds	r3, r7, r1
 8001d60:	2200      	movs	r2, #0
 8001d62:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d64:	000c      	movs	r4, r1
 8001d66:	187b      	adds	r3, r7, r1
 8001d68:	4a1f      	ldr	r2, [pc, #124]	; (8001de8 <MX_GPIO_Init+0x114>)
 8001d6a:	0019      	movs	r1, r3
 8001d6c:	0010      	movs	r0, r2
 8001d6e:	f001 fb6d 	bl	800344c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8001d72:	0021      	movs	r1, r4
 8001d74:	187b      	adds	r3, r7, r1
 8001d76:	2242      	movs	r2, #66	; 0x42
 8001d78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d7a:	187b      	adds	r3, r7, r1
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	187b      	adds	r3, r7, r1
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d86:	187b      	adds	r3, r7, r1
 8001d88:	2200      	movs	r2, #0
 8001d8a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d8c:	000c      	movs	r4, r1
 8001d8e:	187b      	adds	r3, r7, r1
 8001d90:	4a16      	ldr	r2, [pc, #88]	; (8001dec <MX_GPIO_Init+0x118>)
 8001d92:	0019      	movs	r1, r3
 8001d94:	0010      	movs	r0, r2
 8001d96:	f001 fb59 	bl	800344c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d9a:	0021      	movs	r1, r4
 8001d9c:	187b      	adds	r3, r7, r1
 8001d9e:	4a14      	ldr	r2, [pc, #80]	; (8001df0 <MX_GPIO_Init+0x11c>)
 8001da0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001da2:	187b      	adds	r3, r7, r1
 8001da4:	4a13      	ldr	r2, [pc, #76]	; (8001df4 <MX_GPIO_Init+0x120>)
 8001da6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001da8:	187b      	adds	r3, r7, r1
 8001daa:	2202      	movs	r2, #2
 8001dac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dae:	187b      	adds	r3, r7, r1
 8001db0:	4a0e      	ldr	r2, [pc, #56]	; (8001dec <MX_GPIO_Init+0x118>)
 8001db2:	0019      	movs	r1, r3
 8001db4:	0010      	movs	r0, r2
 8001db6:	f001 fb49 	bl	800344c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	2006      	movs	r0, #6
 8001dc0:	f001 f9a4 	bl	800310c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001dc4:	2006      	movs	r0, #6
 8001dc6:	f001 f9b6 	bl	8003136 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2100      	movs	r1, #0
 8001dce:	2007      	movs	r0, #7
 8001dd0:	f001 f99c 	bl	800310c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001dd4:	2007      	movs	r0, #7
 8001dd6:	f001 f9ae 	bl	8003136 <HAL_NVIC_EnableIRQ>

}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b009      	add	sp, #36	; 0x24
 8001de0:	bd90      	pop	{r4, r7, pc}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	40021000 	.word	0x40021000
 8001de8:	50000800 	.word	0x50000800
 8001dec:	50000400 	.word	0x50000400
 8001df0:	0000e004 	.word	0x0000e004
 8001df4:	10110000 	.word	0x10110000

08001df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001dfc:	46c0      	nop			; (mov r8, r8)
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <HAL_GPIO_EXTI_Callback>:
	}
}

// this sure is a big callback
// need to complete
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001e04:	b5b0      	push	{r4, r5, r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	0002      	movs	r2, r0
 8001e0c:	1dbb      	adds	r3, r7, #6
 8001e0e:	801a      	strh	r2, [r3, #0]
	/* program flow:
	 *   check current face used
	 *   check current variables and check button pressed
	 */
//	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);	// should run for any button
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 8001e10:	4bb9      	ldr	r3, [pc, #740]	; (80020f8 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001e12:	2108      	movs	r1, #8
 8001e14:	0018      	movs	r0, r3
 8001e16:	f001 fcd1 	bl	80037bc <HAL_GPIO_TogglePin>
	if (GPIO_Pin == BUTTON0) {
 8001e1a:	1dbb      	adds	r3, r7, #6
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d110      	bne.n	8001e44 <HAL_GPIO_EXTI_Callback+0x40>
		face = (face + 1) % NUM_FACES;
 8001e22:	4bb6      	ldr	r3, [pc, #728]	; (80020fc <HAL_GPIO_EXTI_Callback+0x2f8>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	3301      	adds	r3, #1
 8001e28:	4ab5      	ldr	r2, [pc, #724]	; (8002100 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d504      	bpl.n	8001e38 <HAL_GPIO_EXTI_Callback+0x34>
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	2204      	movs	r2, #4
 8001e32:	4252      	negs	r2, r2
 8001e34:	4313      	orrs	r3, r2
 8001e36:	3301      	adds	r3, #1
 8001e38:	001a      	movs	r2, r3
 8001e3a:	4bb0      	ldr	r3, [pc, #704]	; (80020fc <HAL_GPIO_EXTI_Callback+0x2f8>)
 8001e3c:	601a      	str	r2, [r3, #0]
		updateFace = 1;
 8001e3e:	4bb1      	ldr	r3, [pc, #708]	; (8002104 <HAL_GPIO_EXTI_Callback+0x300>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	701a      	strb	r2, [r3, #0]
	}
	// use RTC
	if (face == faceClock) {
 8001e44:	4bad      	ldr	r3, [pc, #692]	; (80020fc <HAL_GPIO_EXTI_Callback+0x2f8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d000      	beq.n	8001e4e <HAL_GPIO_EXTI_Callback+0x4a>
 8001e4c:	e0d1      	b.n	8001ff2 <HAL_GPIO_EXTI_Callback+0x1ee>
		updateClock = 1;
 8001e4e:	4bae      	ldr	r3, [pc, #696]	; (8002108 <HAL_GPIO_EXTI_Callback+0x304>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	701a      	strb	r2, [r3, #0]
		if (GPIO_Pin == BUTTON1 && clockSet) {
 8001e54:	1dbb      	adds	r3, r7, #6
 8001e56:	881a      	ldrh	r2, [r3, #0]
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	019b      	lsls	r3, r3, #6
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d145      	bne.n	8001eec <HAL_GPIO_EXTI_Callback+0xe8>
 8001e60:	4baa      	ldr	r3, [pc, #680]	; (800210c <HAL_GPIO_EXTI_Callback+0x308>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d041      	beq.n	8001eec <HAL_GPIO_EXTI_Callback+0xe8>
			// change fields up, do nothing if not setting clock
			switch (clockField) {
 8001e68:	4ba9      	ldr	r3, [pc, #676]	; (8002110 <HAL_GPIO_EXTI_Callback+0x30c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b05      	cmp	r3, #5
 8001e6e:	d83f      	bhi.n	8001ef0 <HAL_GPIO_EXTI_Callback+0xec>
 8001e70:	009a      	lsls	r2, r3, #2
 8001e72:	4ba8      	ldr	r3, [pc, #672]	; (8002114 <HAL_GPIO_EXTI_Callback+0x310>)
 8001e74:	18d3      	adds	r3, r2, r3
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	469f      	mov	pc, r3
				case 1: tempClockTimes.min = (tempClockTimes.min+1) % 60; break;
 8001e7a:	4ba7      	ldr	r3, [pc, #668]	; (8002118 <HAL_GPIO_EXTI_Callback+0x314>)
 8001e7c:	785b      	ldrb	r3, [r3, #1]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	213c      	movs	r1, #60	; 0x3c
 8001e82:	0018      	movs	r0, r3
 8001e84:	f7fe fab0 	bl	80003e8 <__aeabi_idivmod>
 8001e88:	000b      	movs	r3, r1
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	4ba2      	ldr	r3, [pc, #648]	; (8002118 <HAL_GPIO_EXTI_Callback+0x314>)
 8001e8e:	705a      	strb	r2, [r3, #1]
 8001e90:	e02f      	b.n	8001ef2 <HAL_GPIO_EXTI_Callback+0xee>
				case 2: tempClockTimes.hr = (tempClockTimes.hr+1) % 24; break;
 8001e92:	4ba1      	ldr	r3, [pc, #644]	; (8002118 <HAL_GPIO_EXTI_Callback+0x314>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	3301      	adds	r3, #1
 8001e98:	2118      	movs	r1, #24
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f7fe faa4 	bl	80003e8 <__aeabi_idivmod>
 8001ea0:	000b      	movs	r3, r1
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	4b9c      	ldr	r3, [pc, #624]	; (8002118 <HAL_GPIO_EXTI_Callback+0x314>)
 8001ea6:	701a      	strb	r2, [r3, #0]
 8001ea8:	e023      	b.n	8001ef2 <HAL_GPIO_EXTI_Callback+0xee>
				case 3: tempClockDate.yr++; break;		// supposed to be between large numbers. no need for bounds checking
 8001eaa:	4b9c      	ldr	r3, [pc, #624]	; (800211c <HAL_GPIO_EXTI_Callback+0x318>)
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	4b9a      	ldr	r3, [pc, #616]	; (800211c <HAL_GPIO_EXTI_Callback+0x318>)
 8001eb4:	801a      	strh	r2, [r3, #0]
 8001eb6:	e01c      	b.n	8001ef2 <HAL_GPIO_EXTI_Callback+0xee>
				case 4: tempClockDate.month = (tempClockDate.month+1) % 12 + 1; break;
 8001eb8:	4b98      	ldr	r3, [pc, #608]	; (800211c <HAL_GPIO_EXTI_Callback+0x318>)
 8001eba:	789b      	ldrb	r3, [r3, #2]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	210c      	movs	r1, #12
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	f7fe fa91 	bl	80003e8 <__aeabi_idivmod>
 8001ec6:	000b      	movs	r3, r1
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	3301      	adds	r3, #1
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	4b93      	ldr	r3, [pc, #588]	; (800211c <HAL_GPIO_EXTI_Callback+0x318>)
 8001ed0:	709a      	strb	r2, [r3, #2]
 8001ed2:	e00e      	b.n	8001ef2 <HAL_GPIO_EXTI_Callback+0xee>
				case 5: tempClockDate.date = (tempClockDate.date+1) % 31; break;		// make more robust?
 8001ed4:	4b91      	ldr	r3, [pc, #580]	; (800211c <HAL_GPIO_EXTI_Callback+0x318>)
 8001ed6:	78db      	ldrb	r3, [r3, #3]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	211f      	movs	r1, #31
 8001edc:	0018      	movs	r0, r3
 8001ede:	f7fe fa83 	bl	80003e8 <__aeabi_idivmod>
 8001ee2:	000b      	movs	r3, r1
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	4b8d      	ldr	r3, [pc, #564]	; (800211c <HAL_GPIO_EXTI_Callback+0x318>)
 8001ee8:	70da      	strb	r2, [r3, #3]
 8001eea:	e002      	b.n	8001ef2 <HAL_GPIO_EXTI_Callback+0xee>
				default: break;
			}
		}
 8001eec:	46c0      	nop			; (mov r8, r8)
 8001eee:	e000      	b.n	8001ef2 <HAL_GPIO_EXTI_Callback+0xee>
				default: break;
 8001ef0:	46c0      	nop			; (mov r8, r8)
		if (GPIO_Pin == BUTTON2 && clockSet) {
 8001ef2:	1dbb      	adds	r3, r7, #6
 8001ef4:	881a      	ldrh	r2, [r3, #0]
 8001ef6:	2380      	movs	r3, #128	; 0x80
 8001ef8:	01db      	lsls	r3, r3, #7
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d147      	bne.n	8001f8e <HAL_GPIO_EXTI_Callback+0x18a>
 8001efe:	4b83      	ldr	r3, [pc, #524]	; (800210c <HAL_GPIO_EXTI_Callback+0x308>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d043      	beq.n	8001f8e <HAL_GPIO_EXTI_Callback+0x18a>
			// change fields down, do nothing if not setting clock
			switch (clockField) {
 8001f06:	4b82      	ldr	r3, [pc, #520]	; (8002110 <HAL_GPIO_EXTI_Callback+0x30c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2b05      	cmp	r3, #5
 8001f0c:	d841      	bhi.n	8001f92 <HAL_GPIO_EXTI_Callback+0x18e>
 8001f0e:	009a      	lsls	r2, r3, #2
 8001f10:	4b83      	ldr	r3, [pc, #524]	; (8002120 <HAL_GPIO_EXTI_Callback+0x31c>)
 8001f12:	18d3      	adds	r3, r2, r3
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	469f      	mov	pc, r3
				case 1: tempClockTimes.min = tempClockTimes.min == 0 ? 59 : tempClockTimes.min-1; break;
 8001f18:	4b7f      	ldr	r3, [pc, #508]	; (8002118 <HAL_GPIO_EXTI_Callback+0x314>)
 8001f1a:	785b      	ldrb	r3, [r3, #1]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d004      	beq.n	8001f2a <HAL_GPIO_EXTI_Callback+0x126>
 8001f20:	4b7d      	ldr	r3, [pc, #500]	; (8002118 <HAL_GPIO_EXTI_Callback+0x314>)
 8001f22:	785b      	ldrb	r3, [r3, #1]
 8001f24:	3b01      	subs	r3, #1
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	e000      	b.n	8001f2c <HAL_GPIO_EXTI_Callback+0x128>
 8001f2a:	223b      	movs	r2, #59	; 0x3b
 8001f2c:	4b7a      	ldr	r3, [pc, #488]	; (8002118 <HAL_GPIO_EXTI_Callback+0x314>)
 8001f2e:	705a      	strb	r2, [r3, #1]
 8001f30:	e030      	b.n	8001f94 <HAL_GPIO_EXTI_Callback+0x190>
				case 2: tempClockTimes.hr = tempClockTimes.hr == 0 ? 24 : tempClockTimes.hr-1; break;
 8001f32:	4b79      	ldr	r3, [pc, #484]	; (8002118 <HAL_GPIO_EXTI_Callback+0x314>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d004      	beq.n	8001f44 <HAL_GPIO_EXTI_Callback+0x140>
 8001f3a:	4b77      	ldr	r3, [pc, #476]	; (8002118 <HAL_GPIO_EXTI_Callback+0x314>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	e000      	b.n	8001f46 <HAL_GPIO_EXTI_Callback+0x142>
 8001f44:	2218      	movs	r2, #24
 8001f46:	4b74      	ldr	r3, [pc, #464]	; (8002118 <HAL_GPIO_EXTI_Callback+0x314>)
 8001f48:	701a      	strb	r2, [r3, #0]
 8001f4a:	e023      	b.n	8001f94 <HAL_GPIO_EXTI_Callback+0x190>
				case 3: tempClockDate.yr--; break;		// supposed to be from 1950-2050. no need to do bounds checking
 8001f4c:	4b73      	ldr	r3, [pc, #460]	; (800211c <HAL_GPIO_EXTI_Callback+0x318>)
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	3b01      	subs	r3, #1
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	4b71      	ldr	r3, [pc, #452]	; (800211c <HAL_GPIO_EXTI_Callback+0x318>)
 8001f56:	801a      	strh	r2, [r3, #0]
 8001f58:	e01c      	b.n	8001f94 <HAL_GPIO_EXTI_Callback+0x190>
				case 4: tempClockDate.month = tempClockDate.month == 1 ? 12 : tempClockDate.month-1; break;
 8001f5a:	4b70      	ldr	r3, [pc, #448]	; (800211c <HAL_GPIO_EXTI_Callback+0x318>)
 8001f5c:	789b      	ldrb	r3, [r3, #2]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d004      	beq.n	8001f6c <HAL_GPIO_EXTI_Callback+0x168>
 8001f62:	4b6e      	ldr	r3, [pc, #440]	; (800211c <HAL_GPIO_EXTI_Callback+0x318>)
 8001f64:	789b      	ldrb	r3, [r3, #2]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	e000      	b.n	8001f6e <HAL_GPIO_EXTI_Callback+0x16a>
 8001f6c:	220c      	movs	r2, #12
 8001f6e:	4b6b      	ldr	r3, [pc, #428]	; (800211c <HAL_GPIO_EXTI_Callback+0x318>)
 8001f70:	709a      	strb	r2, [r3, #2]
 8001f72:	e00f      	b.n	8001f94 <HAL_GPIO_EXTI_Callback+0x190>
				case 5: tempClockDate.date = tempClockDate.date == 0 ? 31 : tempClockDate.date-1; break;
 8001f74:	4b69      	ldr	r3, [pc, #420]	; (800211c <HAL_GPIO_EXTI_Callback+0x318>)
 8001f76:	78db      	ldrb	r3, [r3, #3]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d004      	beq.n	8001f86 <HAL_GPIO_EXTI_Callback+0x182>
 8001f7c:	4b67      	ldr	r3, [pc, #412]	; (800211c <HAL_GPIO_EXTI_Callback+0x318>)
 8001f7e:	78db      	ldrb	r3, [r3, #3]
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	e000      	b.n	8001f88 <HAL_GPIO_EXTI_Callback+0x184>
 8001f86:	221f      	movs	r2, #31
 8001f88:	4b64      	ldr	r3, [pc, #400]	; (800211c <HAL_GPIO_EXTI_Callback+0x318>)
 8001f8a:	70da      	strb	r2, [r3, #3]
 8001f8c:	e002      	b.n	8001f94 <HAL_GPIO_EXTI_Callback+0x190>
				default: break;
			}
		}
 8001f8e:	46c0      	nop			; (mov r8, r8)
 8001f90:	e000      	b.n	8001f94 <HAL_GPIO_EXTI_Callback+0x190>
				default: break;
 8001f92:	46c0      	nop			; (mov r8, r8)
		if (GPIO_Pin == BUTTON3) {
 8001f94:	1dbb      	adds	r3, r7, #6
 8001f96:	881a      	ldrh	r2, [r3, #0]
 8001f98:	2380      	movs	r3, #128	; 0x80
 8001f9a:	021b      	lsls	r3, r3, #8
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d000      	beq.n	8001fa2 <HAL_GPIO_EXTI_Callback+0x19e>
 8001fa0:	e278      	b.n	8002494 <HAL_GPIO_EXTI_Callback+0x690>
			clockField = (clockField + 1) % (NUM_CLOCKFIELDS + 1);
 8001fa2:	4b5b      	ldr	r3, [pc, #364]	; (8002110 <HAL_GPIO_EXTI_Callback+0x30c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	2106      	movs	r1, #6
 8001faa:	0018      	movs	r0, r3
 8001fac:	f7fe fa1c 	bl	80003e8 <__aeabi_idivmod>
 8001fb0:	000b      	movs	r3, r1
 8001fb2:	001a      	movs	r2, r3
 8001fb4:	4b56      	ldr	r3, [pc, #344]	; (8002110 <HAL_GPIO_EXTI_Callback+0x30c>)
 8001fb6:	601a      	str	r2, [r3, #0]
			if (clockField != 0) {
 8001fb8:	4b55      	ldr	r3, [pc, #340]	; (8002110 <HAL_GPIO_EXTI_Callback+0x30c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00e      	beq.n	8001fde <HAL_GPIO_EXTI_Callback+0x1da>
				clockSet = 1;
 8001fc0:	4b52      	ldr	r3, [pc, #328]	; (800210c <HAL_GPIO_EXTI_Callback+0x308>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]
				if (clockField == 1) getDateTime(&tempClockDate, &tempClockTimes);	// should pull current time on setting 1st field
 8001fc6:	4b52      	ldr	r3, [pc, #328]	; (8002110 <HAL_GPIO_EXTI_Callback+0x30c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d000      	beq.n	8001fd0 <HAL_GPIO_EXTI_Callback+0x1cc>
 8001fce:	e261      	b.n	8002494 <HAL_GPIO_EXTI_Callback+0x690>
 8001fd0:	4a51      	ldr	r2, [pc, #324]	; (8002118 <HAL_GPIO_EXTI_Callback+0x314>)
 8001fd2:	4b52      	ldr	r3, [pc, #328]	; (800211c <HAL_GPIO_EXTI_Callback+0x318>)
 8001fd4:	0011      	movs	r1, r2
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	f7ff fa4c 	bl	8001474 <getDateTime>
			// clear stopwatch hw
			stopwatchRunning = 0;
			clearStopwatch();
		}
	}
}
 8001fdc:	e25a      	b.n	8002494 <HAL_GPIO_EXTI_Callback+0x690>
				clockSet = 0;
 8001fde:	4b4b      	ldr	r3, [pc, #300]	; (800210c <HAL_GPIO_EXTI_Callback+0x308>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
				setDateTime(&tempClockDate, &tempClockTimes);
 8001fe4:	4a4c      	ldr	r2, [pc, #304]	; (8002118 <HAL_GPIO_EXTI_Callback+0x314>)
 8001fe6:	4b4d      	ldr	r3, [pc, #308]	; (800211c <HAL_GPIO_EXTI_Callback+0x318>)
 8001fe8:	0011      	movs	r1, r2
 8001fea:	0018      	movs	r0, r3
 8001fec:	f7ff f8e8 	bl	80011c0 <setDateTime>
}
 8001ff0:	e250      	b.n	8002494 <HAL_GPIO_EXTI_Callback+0x690>
	else if (face == faceTimer) {
 8001ff2:	4b42      	ldr	r3, [pc, #264]	; (80020fc <HAL_GPIO_EXTI_Callback+0x2f8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d000      	beq.n	8001ffc <HAL_GPIO_EXTI_Callback+0x1f8>
 8001ffa:	e0f6      	b.n	80021ea <HAL_GPIO_EXTI_Callback+0x3e6>
		updateTimer = 1;
 8001ffc:	4b49      	ldr	r3, [pc, #292]	; (8002124 <HAL_GPIO_EXTI_Callback+0x320>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	701a      	strb	r2, [r3, #0]
		if (timerRunning == 0) {
 8002002:	4b49      	ldr	r3, [pc, #292]	; (8002128 <HAL_GPIO_EXTI_Callback+0x324>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d000      	beq.n	800200c <HAL_GPIO_EXTI_Callback+0x208>
 800200a:	e0cc      	b.n	80021a6 <HAL_GPIO_EXTI_Callback+0x3a2>
			if (GPIO_Pin == BUTTON1) {
 800200c:	1dbb      	adds	r3, r7, #6
 800200e:	881a      	ldrh	r2, [r3, #0]
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	019b      	lsls	r3, r3, #6
 8002014:	429a      	cmp	r2, r3
 8002016:	d134      	bne.n	8002082 <HAL_GPIO_EXTI_Callback+0x27e>
				if (timerSet == 0) timerRunning = 1;
 8002018:	4b44      	ldr	r3, [pc, #272]	; (800212c <HAL_GPIO_EXTI_Callback+0x328>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d103      	bne.n	8002028 <HAL_GPIO_EXTI_Callback+0x224>
 8002020:	4b41      	ldr	r3, [pc, #260]	; (8002128 <HAL_GPIO_EXTI_Callback+0x324>)
 8002022:	2201      	movs	r2, #1
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	e02d      	b.n	8002084 <HAL_GPIO_EXTI_Callback+0x280>
					switch (timerField) {
 8002028:	4b41      	ldr	r3, [pc, #260]	; (8002130 <HAL_GPIO_EXTI_Callback+0x32c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b02      	cmp	r3, #2
 800202e:	d010      	beq.n	8002052 <HAL_GPIO_EXTI_Callback+0x24e>
 8002030:	2b03      	cmp	r3, #3
 8002032:	d01a      	beq.n	800206a <HAL_GPIO_EXTI_Callback+0x266>
 8002034:	2b01      	cmp	r3, #1
 8002036:	d000      	beq.n	800203a <HAL_GPIO_EXTI_Callback+0x236>
						default: break;
 8002038:	e024      	b.n	8002084 <HAL_GPIO_EXTI_Callback+0x280>
						case 1: tempTimer.sec = (tempTimer.sec+1) % 60; break;
 800203a:	4b3e      	ldr	r3, [pc, #248]	; (8002134 <HAL_GPIO_EXTI_Callback+0x330>)
 800203c:	789b      	ldrb	r3, [r3, #2]
 800203e:	3301      	adds	r3, #1
 8002040:	213c      	movs	r1, #60	; 0x3c
 8002042:	0018      	movs	r0, r3
 8002044:	f7fe f9d0 	bl	80003e8 <__aeabi_idivmod>
 8002048:	000b      	movs	r3, r1
 800204a:	b2da      	uxtb	r2, r3
 800204c:	4b39      	ldr	r3, [pc, #228]	; (8002134 <HAL_GPIO_EXTI_Callback+0x330>)
 800204e:	709a      	strb	r2, [r3, #2]
 8002050:	e018      	b.n	8002084 <HAL_GPIO_EXTI_Callback+0x280>
						case 2: tempTimer.min = (tempTimer.min+1) % 60; break;
 8002052:	4b38      	ldr	r3, [pc, #224]	; (8002134 <HAL_GPIO_EXTI_Callback+0x330>)
 8002054:	785b      	ldrb	r3, [r3, #1]
 8002056:	3301      	adds	r3, #1
 8002058:	213c      	movs	r1, #60	; 0x3c
 800205a:	0018      	movs	r0, r3
 800205c:	f7fe f9c4 	bl	80003e8 <__aeabi_idivmod>
 8002060:	000b      	movs	r3, r1
 8002062:	b2da      	uxtb	r2, r3
 8002064:	4b33      	ldr	r3, [pc, #204]	; (8002134 <HAL_GPIO_EXTI_Callback+0x330>)
 8002066:	705a      	strb	r2, [r3, #1]
 8002068:	e00c      	b.n	8002084 <HAL_GPIO_EXTI_Callback+0x280>
						case 3: tempTimer.hr = (tempTimer.hr+1) % 24; break;
 800206a:	4b32      	ldr	r3, [pc, #200]	; (8002134 <HAL_GPIO_EXTI_Callback+0x330>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	3301      	adds	r3, #1
 8002070:	2118      	movs	r1, #24
 8002072:	0018      	movs	r0, r3
 8002074:	f7fe f9b8 	bl	80003e8 <__aeabi_idivmod>
 8002078:	000b      	movs	r3, r1
 800207a:	b2da      	uxtb	r2, r3
 800207c:	4b2d      	ldr	r3, [pc, #180]	; (8002134 <HAL_GPIO_EXTI_Callback+0x330>)
 800207e:	701a      	strb	r2, [r3, #0]
 8002080:	e000      	b.n	8002084 <HAL_GPIO_EXTI_Callback+0x280>
				}
 8002082:	46c0      	nop			; (mov r8, r8)
			if (GPIO_Pin == BUTTON2) {
 8002084:	1dbb      	adds	r3, r7, #6
 8002086:	881a      	ldrh	r2, [r3, #0]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	01db      	lsls	r3, r3, #7
 800208c:	429a      	cmp	r2, r3
 800208e:	d153      	bne.n	8002138 <HAL_GPIO_EXTI_Callback+0x334>
				if (timerSet == 1) {
 8002090:	4b26      	ldr	r3, [pc, #152]	; (800212c <HAL_GPIO_EXTI_Callback+0x328>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d14f      	bne.n	8002138 <HAL_GPIO_EXTI_Callback+0x334>
					switch (timerField) {
 8002098:	4b25      	ldr	r3, [pc, #148]	; (8002130 <HAL_GPIO_EXTI_Callback+0x32c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2b02      	cmp	r3, #2
 800209e:	d011      	beq.n	80020c4 <HAL_GPIO_EXTI_Callback+0x2c0>
 80020a0:	2b03      	cmp	r3, #3
 80020a2:	d01c      	beq.n	80020de <HAL_GPIO_EXTI_Callback+0x2da>
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d000      	beq.n	80020aa <HAL_GPIO_EXTI_Callback+0x2a6>
						default: break;
 80020a8:	e047      	b.n	800213a <HAL_GPIO_EXTI_Callback+0x336>
						case 1: tempTimer.sec = tempTimer.sec == 0 ? 59 : tempTimer.sec-1; break;
 80020aa:	4b22      	ldr	r3, [pc, #136]	; (8002134 <HAL_GPIO_EXTI_Callback+0x330>)
 80020ac:	789b      	ldrb	r3, [r3, #2]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d004      	beq.n	80020bc <HAL_GPIO_EXTI_Callback+0x2b8>
 80020b2:	4b20      	ldr	r3, [pc, #128]	; (8002134 <HAL_GPIO_EXTI_Callback+0x330>)
 80020b4:	789b      	ldrb	r3, [r3, #2]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	e000      	b.n	80020be <HAL_GPIO_EXTI_Callback+0x2ba>
 80020bc:	223b      	movs	r2, #59	; 0x3b
 80020be:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <HAL_GPIO_EXTI_Callback+0x330>)
 80020c0:	709a      	strb	r2, [r3, #2]
 80020c2:	e03a      	b.n	800213a <HAL_GPIO_EXTI_Callback+0x336>
						case 2: tempTimer.min = tempTimer.min == 0 ? 59 : tempTimer.min-1; break;
 80020c4:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <HAL_GPIO_EXTI_Callback+0x330>)
 80020c6:	785b      	ldrb	r3, [r3, #1]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d004      	beq.n	80020d6 <HAL_GPIO_EXTI_Callback+0x2d2>
 80020cc:	4b19      	ldr	r3, [pc, #100]	; (8002134 <HAL_GPIO_EXTI_Callback+0x330>)
 80020ce:	785b      	ldrb	r3, [r3, #1]
 80020d0:	3b01      	subs	r3, #1
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	e000      	b.n	80020d8 <HAL_GPIO_EXTI_Callback+0x2d4>
 80020d6:	223b      	movs	r2, #59	; 0x3b
 80020d8:	4b16      	ldr	r3, [pc, #88]	; (8002134 <HAL_GPIO_EXTI_Callback+0x330>)
 80020da:	705a      	strb	r2, [r3, #1]
 80020dc:	e02d      	b.n	800213a <HAL_GPIO_EXTI_Callback+0x336>
						case 3: tempTimer.hr = tempTimer.hr == 0 ? 23 : tempTimer.hr-1; break;
 80020de:	4b15      	ldr	r3, [pc, #84]	; (8002134 <HAL_GPIO_EXTI_Callback+0x330>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d004      	beq.n	80020f0 <HAL_GPIO_EXTI_Callback+0x2ec>
 80020e6:	4b13      	ldr	r3, [pc, #76]	; (8002134 <HAL_GPIO_EXTI_Callback+0x330>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	e000      	b.n	80020f2 <HAL_GPIO_EXTI_Callback+0x2ee>
 80020f0:	2217      	movs	r2, #23
 80020f2:	4b10      	ldr	r3, [pc, #64]	; (8002134 <HAL_GPIO_EXTI_Callback+0x330>)
 80020f4:	701a      	strb	r2, [r3, #0]
 80020f6:	e020      	b.n	800213a <HAL_GPIO_EXTI_Callback+0x336>
 80020f8:	50000800 	.word	0x50000800
 80020fc:	20000090 	.word	0x20000090
 8002100:	80000003 	.word	0x80000003
 8002104:	2000013c 	.word	0x2000013c
 8002108:	200000dc 	.word	0x200000dc
 800210c:	20000094 	.word	0x20000094
 8002110:	20000098 	.word	0x20000098
 8002114:	08007830 	.word	0x08007830
 8002118:	200000d8 	.word	0x200000d8
 800211c:	200001f8 	.word	0x200001f8
 8002120:	08007848 	.word	0x08007848
 8002124:	20000198 	.word	0x20000198
 8002128:	200000a4 	.word	0x200000a4
 800212c:	2000009c 	.word	0x2000009c
 8002130:	200000a0 	.word	0x200000a0
 8002134:	200000cc 	.word	0x200000cc
				}
 8002138:	46c0      	nop			; (mov r8, r8)
			if (GPIO_Pin == BUTTON3) {
 800213a:	1dbb      	adds	r3, r7, #6
 800213c:	881a      	ldrh	r2, [r3, #0]
 800213e:	2380      	movs	r3, #128	; 0x80
 8002140:	021b      	lsls	r3, r3, #8
 8002142:	429a      	cmp	r2, r3
 8002144:	d000      	beq.n	8002148 <HAL_GPIO_EXTI_Callback+0x344>
 8002146:	e1a5      	b.n	8002494 <HAL_GPIO_EXTI_Callback+0x690>
				timerField = (timerField + 1) % (NUM_TIMERFIELDS + 1);
 8002148:	4bb5      	ldr	r3, [pc, #724]	; (8002420 <HAL_GPIO_EXTI_Callback+0x61c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	3301      	adds	r3, #1
 800214e:	4ab5      	ldr	r2, [pc, #724]	; (8002424 <HAL_GPIO_EXTI_Callback+0x620>)
 8002150:	4013      	ands	r3, r2
 8002152:	d504      	bpl.n	800215e <HAL_GPIO_EXTI_Callback+0x35a>
 8002154:	3b01      	subs	r3, #1
 8002156:	2204      	movs	r2, #4
 8002158:	4252      	negs	r2, r2
 800215a:	4313      	orrs	r3, r2
 800215c:	3301      	adds	r3, #1
 800215e:	001a      	movs	r2, r3
 8002160:	4baf      	ldr	r3, [pc, #700]	; (8002420 <HAL_GPIO_EXTI_Callback+0x61c>)
 8002162:	601a      	str	r2, [r3, #0]
				if (timerField != 0) {
 8002164:	4bae      	ldr	r3, [pc, #696]	; (8002420 <HAL_GPIO_EXTI_Callback+0x61c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d011      	beq.n	8002190 <HAL_GPIO_EXTI_Callback+0x38c>
					timerSet = 1;
 800216c:	4bae      	ldr	r3, [pc, #696]	; (8002428 <HAL_GPIO_EXTI_Callback+0x624>)
 800216e:	2201      	movs	r2, #1
 8002170:	601a      	str	r2, [r3, #0]
					if (timerField == 1) {
 8002172:	4bab      	ldr	r3, [pc, #684]	; (8002420 <HAL_GPIO_EXTI_Callback+0x61c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d000      	beq.n	800217c <HAL_GPIO_EXTI_Callback+0x378>
 800217a:	e18b      	b.n	8002494 <HAL_GPIO_EXTI_Callback+0x690>
						tempTimer.sec = 0;
 800217c:	4bab      	ldr	r3, [pc, #684]	; (800242c <HAL_GPIO_EXTI_Callback+0x628>)
 800217e:	2200      	movs	r2, #0
 8002180:	709a      	strb	r2, [r3, #2]
						tempTimer.min = 0;
 8002182:	4baa      	ldr	r3, [pc, #680]	; (800242c <HAL_GPIO_EXTI_Callback+0x628>)
 8002184:	2200      	movs	r2, #0
 8002186:	705a      	strb	r2, [r3, #1]
						tempTimer.hr = 0;
 8002188:	4ba8      	ldr	r3, [pc, #672]	; (800242c <HAL_GPIO_EXTI_Callback+0x628>)
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]
}
 800218e:	e181      	b.n	8002494 <HAL_GPIO_EXTI_Callback+0x690>
					timerSet = 0;
 8002190:	4ba5      	ldr	r3, [pc, #660]	; (8002428 <HAL_GPIO_EXTI_Callback+0x624>)
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
					timerRunning = 1;	// careful where this gets set/unset
 8002196:	4ba6      	ldr	r3, [pc, #664]	; (8002430 <HAL_GPIO_EXTI_Callback+0x62c>)
 8002198:	2201      	movs	r2, #1
 800219a:	601a      	str	r2, [r3, #0]
					setTimer(&tempTimer);
 800219c:	4ba3      	ldr	r3, [pc, #652]	; (800242c <HAL_GPIO_EXTI_Callback+0x628>)
 800219e:	0018      	movs	r0, r3
 80021a0:	f7ff f880 	bl	80012a4 <setTimer>
}
 80021a4:	e176      	b.n	8002494 <HAL_GPIO_EXTI_Callback+0x690>
		else if (timerRunning == 1) {
 80021a6:	4ba2      	ldr	r3, [pc, #648]	; (8002430 <HAL_GPIO_EXTI_Callback+0x62c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d000      	beq.n	80021b0 <HAL_GPIO_EXTI_Callback+0x3ac>
 80021ae:	e171      	b.n	8002494 <HAL_GPIO_EXTI_Callback+0x690>
			if (GPIO_Pin == BUTTON1) {
 80021b0:	1dbb      	adds	r3, r7, #6
 80021b2:	881a      	ldrh	r2, [r3, #0]
 80021b4:	2380      	movs	r3, #128	; 0x80
 80021b6:	019b      	lsls	r3, r3, #6
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d102      	bne.n	80021c2 <HAL_GPIO_EXTI_Callback+0x3be>
				timerRunning = 1;
 80021bc:	4b9c      	ldr	r3, [pc, #624]	; (8002430 <HAL_GPIO_EXTI_Callback+0x62c>)
 80021be:	2201      	movs	r2, #1
 80021c0:	601a      	str	r2, [r3, #0]
			if (GPIO_Pin == BUTTON2) {
 80021c2:	1dbb      	adds	r3, r7, #6
 80021c4:	881a      	ldrh	r2, [r3, #0]
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	01db      	lsls	r3, r3, #7
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d102      	bne.n	80021d4 <HAL_GPIO_EXTI_Callback+0x3d0>
				timerRunning = 0;
 80021ce:	4b98      	ldr	r3, [pc, #608]	; (8002430 <HAL_GPIO_EXTI_Callback+0x62c>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
			if (GPIO_Pin == BUTTON3) {
 80021d4:	1dbb      	adds	r3, r7, #6
 80021d6:	881a      	ldrh	r2, [r3, #0]
 80021d8:	2380      	movs	r3, #128	; 0x80
 80021da:	021b      	lsls	r3, r3, #8
 80021dc:	429a      	cmp	r2, r3
 80021de:	d000      	beq.n	80021e2 <HAL_GPIO_EXTI_Callback+0x3de>
 80021e0:	e158      	b.n	8002494 <HAL_GPIO_EXTI_Callback+0x690>
				timerRunning = 0;
 80021e2:	4b93      	ldr	r3, [pc, #588]	; (8002430 <HAL_GPIO_EXTI_Callback+0x62c>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
}
 80021e8:	e154      	b.n	8002494 <HAL_GPIO_EXTI_Callback+0x690>
	else if (face == faceAlarm) {
 80021ea:	4b92      	ldr	r3, [pc, #584]	; (8002434 <HAL_GPIO_EXTI_Callback+0x630>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d000      	beq.n	80021f4 <HAL_GPIO_EXTI_Callback+0x3f0>
 80021f2:	e0fd      	b.n	80023f0 <HAL_GPIO_EXTI_Callback+0x5ec>
		updateAlarm = 1;
 80021f4:	4b90      	ldr	r3, [pc, #576]	; (8002438 <HAL_GPIO_EXTI_Callback+0x634>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	701a      	strb	r2, [r3, #0]
		if (alarmRunning == 0) {
 80021fa:	4b90      	ldr	r3, [pc, #576]	; (800243c <HAL_GPIO_EXTI_Callback+0x638>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d000      	beq.n	8002204 <HAL_GPIO_EXTI_Callback+0x400>
 8002202:	e0e0      	b.n	80023c6 <HAL_GPIO_EXTI_Callback+0x5c2>
			if (GPIO_Pin == BUTTON1 && alarmSet) {
 8002204:	1dbb      	adds	r3, r7, #6
 8002206:	881a      	ldrh	r2, [r3, #0]
 8002208:	2380      	movs	r3, #128	; 0x80
 800220a:	019b      	lsls	r3, r3, #6
 800220c:	429a      	cmp	r2, r3
 800220e:	d146      	bne.n	800229e <HAL_GPIO_EXTI_Callback+0x49a>
 8002210:	4b8b      	ldr	r3, [pc, #556]	; (8002440 <HAL_GPIO_EXTI_Callback+0x63c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d042      	beq.n	800229e <HAL_GPIO_EXTI_Callback+0x49a>
				switch (alarmField) {
 8002218:	4b8a      	ldr	r3, [pc, #552]	; (8002444 <HAL_GPIO_EXTI_Callback+0x640>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b02      	cmp	r3, #2
 800221e:	d015      	beq.n	800224c <HAL_GPIO_EXTI_Callback+0x448>
 8002220:	dc02      	bgt.n	8002228 <HAL_GPIO_EXTI_Callback+0x424>
 8002222:	2b01      	cmp	r3, #1
 8002224:	d005      	beq.n	8002232 <HAL_GPIO_EXTI_Callback+0x42e>
					default: break;
 8002226:	e03b      	b.n	80022a0 <HAL_GPIO_EXTI_Callback+0x49c>
				switch (alarmField) {
 8002228:	2b03      	cmp	r3, #3
 800222a:	d01c      	beq.n	8002266 <HAL_GPIO_EXTI_Callback+0x462>
 800222c:	2b04      	cmp	r3, #4
 800222e:	d027      	beq.n	8002280 <HAL_GPIO_EXTI_Callback+0x47c>
					default: break;
 8002230:	e036      	b.n	80022a0 <HAL_GPIO_EXTI_Callback+0x49c>
					case 1: tempAlarm.sec = (tempAlarm.sec + 1) % 60; break;
 8002232:	4b85      	ldr	r3, [pc, #532]	; (8002448 <HAL_GPIO_EXTI_Callback+0x644>)
 8002234:	789b      	ldrb	r3, [r3, #2]
 8002236:	b2db      	uxtb	r3, r3
 8002238:	3301      	adds	r3, #1
 800223a:	213c      	movs	r1, #60	; 0x3c
 800223c:	0018      	movs	r0, r3
 800223e:	f7fe f8d3 	bl	80003e8 <__aeabi_idivmod>
 8002242:	000b      	movs	r3, r1
 8002244:	b2da      	uxtb	r2, r3
 8002246:	4b80      	ldr	r3, [pc, #512]	; (8002448 <HAL_GPIO_EXTI_Callback+0x644>)
 8002248:	709a      	strb	r2, [r3, #2]
 800224a:	e029      	b.n	80022a0 <HAL_GPIO_EXTI_Callback+0x49c>
					case 2: tempAlarm.min = (tempAlarm.min + 1) % 60; break;
 800224c:	4b7e      	ldr	r3, [pc, #504]	; (8002448 <HAL_GPIO_EXTI_Callback+0x644>)
 800224e:	785b      	ldrb	r3, [r3, #1]
 8002250:	b2db      	uxtb	r3, r3
 8002252:	3301      	adds	r3, #1
 8002254:	213c      	movs	r1, #60	; 0x3c
 8002256:	0018      	movs	r0, r3
 8002258:	f7fe f8c6 	bl	80003e8 <__aeabi_idivmod>
 800225c:	000b      	movs	r3, r1
 800225e:	b2da      	uxtb	r2, r3
 8002260:	4b79      	ldr	r3, [pc, #484]	; (8002448 <HAL_GPIO_EXTI_Callback+0x644>)
 8002262:	705a      	strb	r2, [r3, #1]
 8002264:	e01c      	b.n	80022a0 <HAL_GPIO_EXTI_Callback+0x49c>
					case 3: tempAlarm.hr = (tempAlarm.hr + 1) % 24; break;
 8002266:	4b78      	ldr	r3, [pc, #480]	; (8002448 <HAL_GPIO_EXTI_Callback+0x644>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	b2db      	uxtb	r3, r3
 800226c:	3301      	adds	r3, #1
 800226e:	2118      	movs	r1, #24
 8002270:	0018      	movs	r0, r3
 8002272:	f7fe f8b9 	bl	80003e8 <__aeabi_idivmod>
 8002276:	000b      	movs	r3, r1
 8002278:	b2da      	uxtb	r2, r3
 800227a:	4b73      	ldr	r3, [pc, #460]	; (8002448 <HAL_GPIO_EXTI_Callback+0x644>)
 800227c:	701a      	strb	r2, [r3, #0]
 800227e:	e00f      	b.n	80022a0 <HAL_GPIO_EXTI_Callback+0x49c>
					case 4: tempAlarm.weekday = (tempAlarm.weekday + 1) % 7 + 1; break;
 8002280:	4b71      	ldr	r3, [pc, #452]	; (8002448 <HAL_GPIO_EXTI_Callback+0x644>)
 8002282:	78db      	ldrb	r3, [r3, #3]
 8002284:	b2db      	uxtb	r3, r3
 8002286:	3301      	adds	r3, #1
 8002288:	2107      	movs	r1, #7
 800228a:	0018      	movs	r0, r3
 800228c:	f7fe f8ac 	bl	80003e8 <__aeabi_idivmod>
 8002290:	000b      	movs	r3, r1
 8002292:	b2db      	uxtb	r3, r3
 8002294:	3301      	adds	r3, #1
 8002296:	b2da      	uxtb	r2, r3
 8002298:	4b6b      	ldr	r3, [pc, #428]	; (8002448 <HAL_GPIO_EXTI_Callback+0x644>)
 800229a:	70da      	strb	r2, [r3, #3]
 800229c:	e000      	b.n	80022a0 <HAL_GPIO_EXTI_Callback+0x49c>
			}
 800229e:	46c0      	nop			; (mov r8, r8)
			if (GPIO_Pin == BUTTON2 && alarmSet) {
 80022a0:	1dbb      	adds	r3, r7, #6
 80022a2:	881a      	ldrh	r2, [r3, #0]
 80022a4:	2380      	movs	r3, #128	; 0x80
 80022a6:	01db      	lsls	r3, r3, #7
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d148      	bne.n	800233e <HAL_GPIO_EXTI_Callback+0x53a>
 80022ac:	4b64      	ldr	r3, [pc, #400]	; (8002440 <HAL_GPIO_EXTI_Callback+0x63c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d044      	beq.n	800233e <HAL_GPIO_EXTI_Callback+0x53a>
				switch (alarmField) {
 80022b4:	4b63      	ldr	r3, [pc, #396]	; (8002444 <HAL_GPIO_EXTI_Callback+0x640>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d016      	beq.n	80022ea <HAL_GPIO_EXTI_Callback+0x4e6>
 80022bc:	dc02      	bgt.n	80022c4 <HAL_GPIO_EXTI_Callback+0x4c0>
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d005      	beq.n	80022ce <HAL_GPIO_EXTI_Callback+0x4ca>
 80022c2:	e03c      	b.n	800233e <HAL_GPIO_EXTI_Callback+0x53a>
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	d01e      	beq.n	8002306 <HAL_GPIO_EXTI_Callback+0x502>
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	d02a      	beq.n	8002322 <HAL_GPIO_EXTI_Callback+0x51e>
 80022cc:	e037      	b.n	800233e <HAL_GPIO_EXTI_Callback+0x53a>
					case 1: tempAlarm.sec = tempAlarm.sec == 0 ? 59 : tempAlarm.sec-1;
 80022ce:	4b5e      	ldr	r3, [pc, #376]	; (8002448 <HAL_GPIO_EXTI_Callback+0x644>)
 80022d0:	789b      	ldrb	r3, [r3, #2]
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <HAL_GPIO_EXTI_Callback+0x4e0>
 80022d8:	4b5b      	ldr	r3, [pc, #364]	; (8002448 <HAL_GPIO_EXTI_Callback+0x644>)
 80022da:	789b      	ldrb	r3, [r3, #2]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	3b01      	subs	r3, #1
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	e000      	b.n	80022e6 <HAL_GPIO_EXTI_Callback+0x4e2>
 80022e4:	223b      	movs	r2, #59	; 0x3b
 80022e6:	4b58      	ldr	r3, [pc, #352]	; (8002448 <HAL_GPIO_EXTI_Callback+0x644>)
 80022e8:	709a      	strb	r2, [r3, #2]
					case 2: tempAlarm.min = tempAlarm.min == 0 ? 59 : tempAlarm.min-1;
 80022ea:	4b57      	ldr	r3, [pc, #348]	; (8002448 <HAL_GPIO_EXTI_Callback+0x644>)
 80022ec:	785b      	ldrb	r3, [r3, #1]
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d005      	beq.n	8002300 <HAL_GPIO_EXTI_Callback+0x4fc>
 80022f4:	4b54      	ldr	r3, [pc, #336]	; (8002448 <HAL_GPIO_EXTI_Callback+0x644>)
 80022f6:	785b      	ldrb	r3, [r3, #1]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	e000      	b.n	8002302 <HAL_GPIO_EXTI_Callback+0x4fe>
 8002300:	223b      	movs	r2, #59	; 0x3b
 8002302:	4b51      	ldr	r3, [pc, #324]	; (8002448 <HAL_GPIO_EXTI_Callback+0x644>)
 8002304:	705a      	strb	r2, [r3, #1]
					case 3: tempAlarm.hr = tempAlarm.hr == 0 ? 23 : tempAlarm.hr-1;
 8002306:	4b50      	ldr	r3, [pc, #320]	; (8002448 <HAL_GPIO_EXTI_Callback+0x644>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <HAL_GPIO_EXTI_Callback+0x518>
 8002310:	4b4d      	ldr	r3, [pc, #308]	; (8002448 <HAL_GPIO_EXTI_Callback+0x644>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	b2db      	uxtb	r3, r3
 8002316:	3b01      	subs	r3, #1
 8002318:	b2da      	uxtb	r2, r3
 800231a:	e000      	b.n	800231e <HAL_GPIO_EXTI_Callback+0x51a>
 800231c:	2217      	movs	r2, #23
 800231e:	4b4a      	ldr	r3, [pc, #296]	; (8002448 <HAL_GPIO_EXTI_Callback+0x644>)
 8002320:	701a      	strb	r2, [r3, #0]
					case 4: tempAlarm.weekday = tempAlarm.weekday == 1 ? 7 : tempAlarm.weekday-1;
 8002322:	4b49      	ldr	r3, [pc, #292]	; (8002448 <HAL_GPIO_EXTI_Callback+0x644>)
 8002324:	78db      	ldrb	r3, [r3, #3]
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b01      	cmp	r3, #1
 800232a:	d005      	beq.n	8002338 <HAL_GPIO_EXTI_Callback+0x534>
 800232c:	4b46      	ldr	r3, [pc, #280]	; (8002448 <HAL_GPIO_EXTI_Callback+0x644>)
 800232e:	78db      	ldrb	r3, [r3, #3]
 8002330:	b2db      	uxtb	r3, r3
 8002332:	3b01      	subs	r3, #1
 8002334:	b2da      	uxtb	r2, r3
 8002336:	e000      	b.n	800233a <HAL_GPIO_EXTI_Callback+0x536>
 8002338:	2207      	movs	r2, #7
 800233a:	4b43      	ldr	r3, [pc, #268]	; (8002448 <HAL_GPIO_EXTI_Callback+0x644>)
 800233c:	70da      	strb	r2, [r3, #3]
			if (GPIO_Pin == BUTTON3) {
 800233e:	1dbb      	adds	r3, r7, #6
 8002340:	881a      	ldrh	r2, [r3, #0]
 8002342:	2380      	movs	r3, #128	; 0x80
 8002344:	021b      	lsls	r3, r3, #8
 8002346:	429a      	cmp	r2, r3
 8002348:	d000      	beq.n	800234c <HAL_GPIO_EXTI_Callback+0x548>
 800234a:	e0a3      	b.n	8002494 <HAL_GPIO_EXTI_Callback+0x690>
				alarmField = (alarmField + 1) % (NUM_ALARMFIELDS + 1);
 800234c:	4b3d      	ldr	r3, [pc, #244]	; (8002444 <HAL_GPIO_EXTI_Callback+0x640>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	3301      	adds	r3, #1
 8002352:	2105      	movs	r1, #5
 8002354:	0018      	movs	r0, r3
 8002356:	f7fe f847 	bl	80003e8 <__aeabi_idivmod>
 800235a:	000b      	movs	r3, r1
 800235c:	001a      	movs	r2, r3
 800235e:	4b39      	ldr	r3, [pc, #228]	; (8002444 <HAL_GPIO_EXTI_Callback+0x640>)
 8002360:	601a      	str	r2, [r3, #0]
				if (alarmField != 0) {
 8002362:	4b38      	ldr	r3, [pc, #224]	; (8002444 <HAL_GPIO_EXTI_Callback+0x640>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d022      	beq.n	80023b0 <HAL_GPIO_EXTI_Callback+0x5ac>
					alarmSet = 1;
 800236a:	4b35      	ldr	r3, [pc, #212]	; (8002440 <HAL_GPIO_EXTI_Callback+0x63c>)
 800236c:	2201      	movs	r2, #1
 800236e:	601a      	str	r2, [r3, #0]
					if (alarmField == 1) {
 8002370:	4b34      	ldr	r3, [pc, #208]	; (8002444 <HAL_GPIO_EXTI_Callback+0x640>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d000      	beq.n	800237a <HAL_GPIO_EXTI_Callback+0x576>
 8002378:	e08c      	b.n	8002494 <HAL_GPIO_EXTI_Callback+0x690>
						getDateTime(&d, &t);
 800237a:	210c      	movs	r1, #12
 800237c:	000c      	movs	r4, r1
 800237e:	187a      	adds	r2, r7, r1
 8002380:	2510      	movs	r5, #16
 8002382:	197b      	adds	r3, r7, r5
 8002384:	0011      	movs	r1, r2
 8002386:	0018      	movs	r0, r3
 8002388:	f7ff f874 	bl	8001474 <getDateTime>
						tempAlarm.sec = t.sec;
 800238c:	0021      	movs	r1, r4
 800238e:	187b      	adds	r3, r7, r1
 8002390:	789a      	ldrb	r2, [r3, #2]
 8002392:	4b2d      	ldr	r3, [pc, #180]	; (8002448 <HAL_GPIO_EXTI_Callback+0x644>)
 8002394:	709a      	strb	r2, [r3, #2]
						tempAlarm.min = t.min;
 8002396:	187b      	adds	r3, r7, r1
 8002398:	785a      	ldrb	r2, [r3, #1]
 800239a:	4b2b      	ldr	r3, [pc, #172]	; (8002448 <HAL_GPIO_EXTI_Callback+0x644>)
 800239c:	705a      	strb	r2, [r3, #1]
						tempAlarm.hr = t.hr;
 800239e:	187b      	adds	r3, r7, r1
 80023a0:	781a      	ldrb	r2, [r3, #0]
 80023a2:	4b29      	ldr	r3, [pc, #164]	; (8002448 <HAL_GPIO_EXTI_Callback+0x644>)
 80023a4:	701a      	strb	r2, [r3, #0]
						tempAlarm.weekday = d.weekday;
 80023a6:	197b      	adds	r3, r7, r5
 80023a8:	791a      	ldrb	r2, [r3, #4]
 80023aa:	4b27      	ldr	r3, [pc, #156]	; (8002448 <HAL_GPIO_EXTI_Callback+0x644>)
 80023ac:	70da      	strb	r2, [r3, #3]
}
 80023ae:	e071      	b.n	8002494 <HAL_GPIO_EXTI_Callback+0x690>
					alarmSet = 0;
 80023b0:	4b23      	ldr	r3, [pc, #140]	; (8002440 <HAL_GPIO_EXTI_Callback+0x63c>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
					alarmRunning = 1;
 80023b6:	4b21      	ldr	r3, [pc, #132]	; (800243c <HAL_GPIO_EXTI_Callback+0x638>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	601a      	str	r2, [r3, #0]
					setAlarm(&tempAlarm);
 80023bc:	4b22      	ldr	r3, [pc, #136]	; (8002448 <HAL_GPIO_EXTI_Callback+0x644>)
 80023be:	0018      	movs	r0, r3
 80023c0:	f7fe ff10 	bl	80011e4 <setAlarm>
}
 80023c4:	e066      	b.n	8002494 <HAL_GPIO_EXTI_Callback+0x690>
		else if (alarmRunning == 1) {
 80023c6:	4b1d      	ldr	r3, [pc, #116]	; (800243c <HAL_GPIO_EXTI_Callback+0x638>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d162      	bne.n	8002494 <HAL_GPIO_EXTI_Callback+0x690>
			if (GPIO_Pin == BUTTON3) {
 80023ce:	1dbb      	adds	r3, r7, #6
 80023d0:	881a      	ldrh	r2, [r3, #0]
 80023d2:	2380      	movs	r3, #128	; 0x80
 80023d4:	021b      	lsls	r3, r3, #8
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d15c      	bne.n	8002494 <HAL_GPIO_EXTI_Callback+0x690>
				alarmRunning = 0;
 80023da:	4b18      	ldr	r3, [pc, #96]	; (800243c <HAL_GPIO_EXTI_Callback+0x638>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
				HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80023e0:	2380      	movs	r3, #128	; 0x80
 80023e2:	005a      	lsls	r2, r3, #1
 80023e4:	4b19      	ldr	r3, [pc, #100]	; (800244c <HAL_GPIO_EXTI_Callback+0x648>)
 80023e6:	0011      	movs	r1, r2
 80023e8:	0018      	movs	r0, r3
 80023ea:	f002 ffbf 	bl	800536c <HAL_RTC_DeactivateAlarm>
}
 80023ee:	e051      	b.n	8002494 <HAL_GPIO_EXTI_Callback+0x690>
	else if (face == faceStopwatch) {
 80023f0:	4b10      	ldr	r3, [pc, #64]	; (8002434 <HAL_GPIO_EXTI_Callback+0x630>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b03      	cmp	r3, #3
 80023f6:	d14d      	bne.n	8002494 <HAL_GPIO_EXTI_Callback+0x690>
		updateStopwatch = 1;
 80023f8:	4b15      	ldr	r3, [pc, #84]	; (8002450 <HAL_GPIO_EXTI_Callback+0x64c>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	701a      	strb	r2, [r3, #0]
		if (GPIO_Pin == BUTTON1) {	// start/stop
 80023fe:	1dbb      	adds	r3, r7, #6
 8002400:	881a      	ldrh	r2, [r3, #0]
 8002402:	2380      	movs	r3, #128	; 0x80
 8002404:	019b      	lsls	r3, r3, #6
 8002406:	429a      	cmp	r2, r3
 8002408:	d12b      	bne.n	8002462 <HAL_GPIO_EXTI_Callback+0x65e>
			if (stopwatchRunning == 0) {
 800240a:	4b12      	ldr	r3, [pc, #72]	; (8002454 <HAL_GPIO_EXTI_Callback+0x650>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d122      	bne.n	8002458 <HAL_GPIO_EXTI_Callback+0x654>
				stopwatchRunning = 1;
 8002412:	4b10      	ldr	r3, [pc, #64]	; (8002454 <HAL_GPIO_EXTI_Callback+0x650>)
 8002414:	2201      	movs	r2, #1
 8002416:	601a      	str	r2, [r3, #0]
				runStopwatch();
 8002418:	f000 fa5c 	bl	80028d4 <runStopwatch>
 800241c:	e021      	b.n	8002462 <HAL_GPIO_EXTI_Callback+0x65e>
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	200000a0 	.word	0x200000a0
 8002424:	80000003 	.word	0x80000003
 8002428:	2000009c 	.word	0x2000009c
 800242c:	200000cc 	.word	0x200000cc
 8002430:	200000a4 	.word	0x200000a4
 8002434:	20000090 	.word	0x20000090
 8002438:	200000d4 	.word	0x200000d4
 800243c:	200000b0 	.word	0x200000b0
 8002440:	200000a8 	.word	0x200000a8
 8002444:	200000ac 	.word	0x200000ac
 8002448:	200000f8 	.word	0x200000f8
 800244c:	20000170 	.word	0x20000170
 8002450:	200000db 	.word	0x200000db
 8002454:	200000b4 	.word	0x200000b4
				stopwatchRunning = 0;
 8002458:	4b10      	ldr	r3, [pc, #64]	; (800249c <HAL_GPIO_EXTI_Callback+0x698>)
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
				pauseStopwatch();
 800245e:	f000 fa47 	bl	80028f0 <pauseStopwatch>
		if (GPIO_Pin == BUTTON2) {
 8002462:	1dbb      	adds	r3, r7, #6
 8002464:	881a      	ldrh	r2, [r3, #0]
 8002466:	2380      	movs	r3, #128	; 0x80
 8002468:	01db      	lsls	r3, r3, #7
 800246a:	429a      	cmp	r2, r3
 800246c:	d107      	bne.n	800247e <HAL_GPIO_EXTI_Callback+0x67a>
			lapPrev = lapCurrent;
 800246e:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <HAL_GPIO_EXTI_Callback+0x69c>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <HAL_GPIO_EXTI_Callback+0x6a0>)
 8002474:	601a      	str	r2, [r3, #0]
			lapCurrent = stopwatchCNT;
 8002476:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <HAL_GPIO_EXTI_Callback+0x6a4>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <HAL_GPIO_EXTI_Callback+0x69c>)
 800247c:	601a      	str	r2, [r3, #0]
		if (GPIO_Pin == BUTTON3) {
 800247e:	1dbb      	adds	r3, r7, #6
 8002480:	881a      	ldrh	r2, [r3, #0]
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	021b      	lsls	r3, r3, #8
 8002486:	429a      	cmp	r2, r3
 8002488:	d104      	bne.n	8002494 <HAL_GPIO_EXTI_Callback+0x690>
			stopwatchRunning = 0;
 800248a:	4b04      	ldr	r3, [pc, #16]	; (800249c <HAL_GPIO_EXTI_Callback+0x698>)
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
			clearStopwatch();
 8002490:	f000 fa3a 	bl	8002908 <clearStopwatch>
}
 8002494:	46c0      	nop			; (mov r8, r8)
 8002496:	46bd      	mov	sp, r7
 8002498:	b006      	add	sp, #24
 800249a:	bdb0      	pop	{r4, r5, r7, pc}
 800249c:	200000b4 	.word	0x200000b4
 80024a0:	200000f4 	.word	0x200000f4
 80024a4:	20000194 	.word	0x20000194
 80024a8:	200000d0 	.word	0x200000d0

080024ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b0:	4b07      	ldr	r3, [pc, #28]	; (80024d0 <HAL_MspInit+0x24>)
 80024b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_MspInit+0x24>)
 80024b6:	2101      	movs	r1, #1
 80024b8:	430a      	orrs	r2, r1
 80024ba:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80024bc:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <HAL_MspInit+0x24>)
 80024be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024c0:	4b03      	ldr	r3, [pc, #12]	; (80024d0 <HAL_MspInit+0x24>)
 80024c2:	2180      	movs	r1, #128	; 0x80
 80024c4:	0549      	lsls	r1, r1, #21
 80024c6:	430a      	orrs	r2, r1
 80024c8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40021000 	.word	0x40021000

080024d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024dc:	230c      	movs	r3, #12
 80024de:	18fb      	adds	r3, r7, r3
 80024e0:	0018      	movs	r0, r3
 80024e2:	2314      	movs	r3, #20
 80024e4:	001a      	movs	r2, r3
 80024e6:	2100      	movs	r1, #0
 80024e8:	f004 fa85 	bl	80069f6 <memset>
  if(hadc->Instance==ADC1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a15      	ldr	r2, [pc, #84]	; (8002548 <HAL_ADC_MspInit+0x74>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d123      	bne.n	800253e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024f6:	4b15      	ldr	r3, [pc, #84]	; (800254c <HAL_ADC_MspInit+0x78>)
 80024f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024fa:	4b14      	ldr	r3, [pc, #80]	; (800254c <HAL_ADC_MspInit+0x78>)
 80024fc:	2180      	movs	r1, #128	; 0x80
 80024fe:	0089      	lsls	r1, r1, #2
 8002500:	430a      	orrs	r2, r1
 8002502:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002504:	4b11      	ldr	r3, [pc, #68]	; (800254c <HAL_ADC_MspInit+0x78>)
 8002506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002508:	4b10      	ldr	r3, [pc, #64]	; (800254c <HAL_ADC_MspInit+0x78>)
 800250a:	2101      	movs	r1, #1
 800250c:	430a      	orrs	r2, r1
 800250e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002510:	4b0e      	ldr	r3, [pc, #56]	; (800254c <HAL_ADC_MspInit+0x78>)
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	2201      	movs	r2, #1
 8002516:	4013      	ands	r3, r2
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800251c:	210c      	movs	r1, #12
 800251e:	187b      	adds	r3, r7, r1
 8002520:	2201      	movs	r2, #1
 8002522:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002524:	187b      	adds	r3, r7, r1
 8002526:	2203      	movs	r2, #3
 8002528:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	187b      	adds	r3, r7, r1
 800252c:	2200      	movs	r2, #0
 800252e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002530:	187a      	adds	r2, r7, r1
 8002532:	23a0      	movs	r3, #160	; 0xa0
 8002534:	05db      	lsls	r3, r3, #23
 8002536:	0011      	movs	r1, r2
 8002538:	0018      	movs	r0, r3
 800253a:	f000 ff87 	bl	800344c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	46bd      	mov	sp, r7
 8002542:	b008      	add	sp, #32
 8002544:	bd80      	pop	{r7, pc}
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	40012400 	.word	0x40012400
 800254c:	40021000 	.word	0x40021000

08002550 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  if(hlptim->Instance==LPTIM1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <HAL_LPTIM_MspInit+0x38>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d10e      	bne.n	8002580 <HAL_LPTIM_MspInit+0x30>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8002562:	4b0a      	ldr	r3, [pc, #40]	; (800258c <HAL_LPTIM_MspInit+0x3c>)
 8002564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002566:	4b09      	ldr	r3, [pc, #36]	; (800258c <HAL_LPTIM_MspInit+0x3c>)
 8002568:	2180      	movs	r1, #128	; 0x80
 800256a:	0609      	lsls	r1, r1, #24
 800256c:	430a      	orrs	r2, r1
 800256e:	639a      	str	r2, [r3, #56]	; 0x38
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8002570:	2200      	movs	r2, #0
 8002572:	2100      	movs	r1, #0
 8002574:	200d      	movs	r0, #13
 8002576:	f000 fdc9 	bl	800310c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800257a:	200d      	movs	r0, #13
 800257c:	f000 fddb 	bl	8003136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8002580:	46c0      	nop			; (mov r8, r8)
 8002582:	46bd      	mov	sp, r7
 8002584:	b002      	add	sp, #8
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40007c00 	.word	0x40007c00
 800258c:	40021000 	.word	0x40021000

08002590 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a06      	ldr	r2, [pc, #24]	; (80025b8 <HAL_RTC_MspInit+0x28>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d106      	bne.n	80025b0 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80025a2:	4b06      	ldr	r3, [pc, #24]	; (80025bc <HAL_RTC_MspInit+0x2c>)
 80025a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025a6:	4b05      	ldr	r3, [pc, #20]	; (80025bc <HAL_RTC_MspInit+0x2c>)
 80025a8:	2180      	movs	r1, #128	; 0x80
 80025aa:	02c9      	lsls	r1, r1, #11
 80025ac:	430a      	orrs	r2, r1
 80025ae:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80025b0:	46c0      	nop			; (mov r8, r8)
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b002      	add	sp, #8
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40002800 	.word	0x40002800
 80025bc:	40021000 	.word	0x40021000

080025c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c8:	230c      	movs	r3, #12
 80025ca:	18fb      	adds	r3, r7, r3
 80025cc:	0018      	movs	r0, r3
 80025ce:	2314      	movs	r3, #20
 80025d0:	001a      	movs	r2, r3
 80025d2:	2100      	movs	r1, #0
 80025d4:	f004 fa0f 	bl	80069f6 <memset>
  if(hspi->Instance==SPI1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a30      	ldr	r2, [pc, #192]	; (80026a0 <HAL_SPI_MspInit+0xe0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d15a      	bne.n	8002698 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025e2:	4b30      	ldr	r3, [pc, #192]	; (80026a4 <HAL_SPI_MspInit+0xe4>)
 80025e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025e6:	4b2f      	ldr	r3, [pc, #188]	; (80026a4 <HAL_SPI_MspInit+0xe4>)
 80025e8:	2180      	movs	r1, #128	; 0x80
 80025ea:	0149      	lsls	r1, r1, #5
 80025ec:	430a      	orrs	r2, r1
 80025ee:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f0:	4b2c      	ldr	r3, [pc, #176]	; (80026a4 <HAL_SPI_MspInit+0xe4>)
 80025f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f4:	4b2b      	ldr	r3, [pc, #172]	; (80026a4 <HAL_SPI_MspInit+0xe4>)
 80025f6:	2101      	movs	r1, #1
 80025f8:	430a      	orrs	r2, r1
 80025fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80025fc:	4b29      	ldr	r3, [pc, #164]	; (80026a4 <HAL_SPI_MspInit+0xe4>)
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	2201      	movs	r2, #1
 8002602:	4013      	ands	r3, r2
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002608:	210c      	movs	r1, #12
 800260a:	187b      	adds	r3, r7, r1
 800260c:	22a0      	movs	r2, #160	; 0xa0
 800260e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002610:	187b      	adds	r3, r7, r1
 8002612:	2202      	movs	r2, #2
 8002614:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002616:	187b      	adds	r3, r7, r1
 8002618:	2200      	movs	r2, #0
 800261a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800261c:	187b      	adds	r3, r7, r1
 800261e:	2203      	movs	r2, #3
 8002620:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002622:	187b      	adds	r3, r7, r1
 8002624:	2200      	movs	r2, #0
 8002626:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002628:	187a      	adds	r2, r7, r1
 800262a:	23a0      	movs	r3, #160	; 0xa0
 800262c:	05db      	lsls	r3, r3, #23
 800262e:	0011      	movs	r1, r2
 8002630:	0018      	movs	r0, r3
 8002632:	f000 ff0b 	bl	800344c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002636:	4b1c      	ldr	r3, [pc, #112]	; (80026a8 <HAL_SPI_MspInit+0xe8>)
 8002638:	4a1c      	ldr	r2, [pc, #112]	; (80026ac <HAL_SPI_MspInit+0xec>)
 800263a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 800263c:	4b1a      	ldr	r3, [pc, #104]	; (80026a8 <HAL_SPI_MspInit+0xe8>)
 800263e:	2201      	movs	r2, #1
 8002640:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002642:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <HAL_SPI_MspInit+0xe8>)
 8002644:	2210      	movs	r2, #16
 8002646:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002648:	4b17      	ldr	r3, [pc, #92]	; (80026a8 <HAL_SPI_MspInit+0xe8>)
 800264a:	2200      	movs	r2, #0
 800264c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800264e:	4b16      	ldr	r3, [pc, #88]	; (80026a8 <HAL_SPI_MspInit+0xe8>)
 8002650:	2280      	movs	r2, #128	; 0x80
 8002652:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002654:	4b14      	ldr	r3, [pc, #80]	; (80026a8 <HAL_SPI_MspInit+0xe8>)
 8002656:	2200      	movs	r2, #0
 8002658:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800265a:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <HAL_SPI_MspInit+0xe8>)
 800265c:	2200      	movs	r2, #0
 800265e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002660:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <HAL_SPI_MspInit+0xe8>)
 8002662:	2200      	movs	r2, #0
 8002664:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002666:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <HAL_SPI_MspInit+0xe8>)
 8002668:	2200      	movs	r2, #0
 800266a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800266c:	4b0e      	ldr	r3, [pc, #56]	; (80026a8 <HAL_SPI_MspInit+0xe8>)
 800266e:	0018      	movs	r0, r3
 8002670:	f000 fd7e 	bl	8003170 <HAL_DMA_Init>
 8002674:	1e03      	subs	r3, r0, #0
 8002676:	d001      	beq.n	800267c <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8002678:	f7ff fbbe 	bl	8001df8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a0a      	ldr	r2, [pc, #40]	; (80026a8 <HAL_SPI_MspInit+0xe8>)
 8002680:	649a      	str	r2, [r3, #72]	; 0x48
 8002682:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <HAL_SPI_MspInit+0xe8>)
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002688:	2200      	movs	r2, #0
 800268a:	2100      	movs	r1, #0
 800268c:	2019      	movs	r0, #25
 800268e:	f000 fd3d 	bl	800310c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002692:	2019      	movs	r0, #25
 8002694:	f000 fd4f 	bl	8003136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002698:	46c0      	nop			; (mov r8, r8)
 800269a:	46bd      	mov	sp, r7
 800269c:	b008      	add	sp, #32
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40013000 	.word	0x40013000
 80026a4:	40021000 	.word	0x40021000
 80026a8:	20000298 	.word	0x20000298
 80026ac:	40020030 	.word	0x40020030

080026b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM21)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a14      	ldr	r2, [pc, #80]	; (8002710 <HAL_TIM_Base_MspInit+0x60>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d10e      	bne.n	80026e0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 80026c2:	4b14      	ldr	r3, [pc, #80]	; (8002714 <HAL_TIM_Base_MspInit+0x64>)
 80026c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026c6:	4b13      	ldr	r3, [pc, #76]	; (8002714 <HAL_TIM_Base_MspInit+0x64>)
 80026c8:	2104      	movs	r1, #4
 80026ca:	430a      	orrs	r2, r1
 80026cc:	635a      	str	r2, [r3, #52]	; 0x34
    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 80026ce:	2200      	movs	r2, #0
 80026d0:	2100      	movs	r1, #0
 80026d2:	2014      	movs	r0, #20
 80026d4:	f000 fd1a 	bl	800310c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 80026d8:	2014      	movs	r0, #20
 80026da:	f000 fd2c 	bl	8003136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 80026de:	e012      	b.n	8002706 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM22)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a0c      	ldr	r2, [pc, #48]	; (8002718 <HAL_TIM_Base_MspInit+0x68>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d10d      	bne.n	8002706 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM22_CLK_ENABLE();
 80026ea:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <HAL_TIM_Base_MspInit+0x64>)
 80026ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026ee:	4b09      	ldr	r3, [pc, #36]	; (8002714 <HAL_TIM_Base_MspInit+0x64>)
 80026f0:	2120      	movs	r1, #32
 80026f2:	430a      	orrs	r2, r1
 80026f4:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM22_IRQn, 0, 0);
 80026f6:	2200      	movs	r2, #0
 80026f8:	2100      	movs	r1, #0
 80026fa:	2016      	movs	r0, #22
 80026fc:	f000 fd06 	bl	800310c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
 8002700:	2016      	movs	r0, #22
 8002702:	f000 fd18 	bl	8003136 <HAL_NVIC_EnableIRQ>
}
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	46bd      	mov	sp, r7
 800270a:	b002      	add	sp, #8
 800270c:	bd80      	pop	{r7, pc}
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	40010800 	.word	0x40010800
 8002714:	40021000 	.word	0x40021000
 8002718:	40011400 	.word	0x40011400

0800271c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002720:	46c0      	nop			; (mov r8, r8)
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800272a:	e7fe      	b.n	800272a <HardFault_Handler+0x4>

0800272c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002730:	46c0      	nop			; (mov r8, r8)
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800273a:	46c0      	nop			; (mov r8, r8)
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002744:	f000 f9d4 	bl	8002af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002748:	46c0      	nop			; (mov r8, r8)
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002752:	2004      	movs	r0, #4
 8002754:	f001 f844 	bl	80037e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002758:	46c0      	nop			; (mov r8, r8)
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002762:	2380      	movs	r3, #128	; 0x80
 8002764:	019b      	lsls	r3, r3, #6
 8002766:	0018      	movs	r0, r3
 8002768:	f001 f83a 	bl	80037e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800276c:	2380      	movs	r3, #128	; 0x80
 800276e:	01db      	lsls	r3, r3, #7
 8002770:	0018      	movs	r0, r3
 8002772:	f001 f835 	bl	80037e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002776:	2380      	movs	r3, #128	; 0x80
 8002778:	021b      	lsls	r3, r3, #8
 800277a:	0018      	movs	r0, r3
 800277c:	f001 f830 	bl	80037e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002780:	46c0      	nop			; (mov r8, r8)
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
	...

08002788 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800278c:	4b03      	ldr	r3, [pc, #12]	; (800279c <DMA1_Channel2_3_IRQHandler+0x14>)
 800278e:	0018      	movs	r0, r3
 8002790:	f000 fdae 	bl	80032f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002794:	46c0      	nop			; (mov r8, r8)
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	20000298 	.word	0x20000298

080027a0 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80027a4:	4b03      	ldr	r3, [pc, #12]	; (80027b4 <LPTIM1_IRQHandler+0x14>)
 80027a6:	0018      	movs	r0, r3
 80027a8:	f001 f93a 	bl	8003a20 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 80027ac:	46c0      	nop			; (mov r8, r8)
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	20000140 	.word	0x20000140

080027b8 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 80027bc:	4b03      	ldr	r3, [pc, #12]	; (80027cc <TIM21_IRQHandler+0x14>)
 80027be:	0018      	movs	r0, r3
 80027c0:	f003 fc76 	bl	80060b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 80027c4:	46c0      	nop			; (mov r8, r8)
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	46c0      	nop			; (mov r8, r8)
 80027cc:	20000200 	.word	0x20000200

080027d0 <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM22_IRQn 0 */

  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 80027d4:	4b03      	ldr	r3, [pc, #12]	; (80027e4 <TIM22_IRQHandler+0x14>)
 80027d6:	0018      	movs	r0, r3
 80027d8:	f003 fc6a 	bl	80060b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 80027dc:	46c0      	nop			; (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	20000100 	.word	0x20000100

080027e8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80027ec:	4b03      	ldr	r3, [pc, #12]	; (80027fc <SPI1_IRQHandler+0x14>)
 80027ee:	0018      	movs	r0, r3
 80027f0:	f003 f93a 	bl	8005a68 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80027f4:	46c0      	nop			; (mov r8, r8)
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	2000019c 	.word	0x2000019c

08002800 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002808:	4b11      	ldr	r3, [pc, #68]	; (8002850 <_sbrk+0x50>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d102      	bne.n	8002816 <_sbrk+0x16>
		heap_end = &end;
 8002810:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <_sbrk+0x50>)
 8002812:	4a10      	ldr	r2, [pc, #64]	; (8002854 <_sbrk+0x54>)
 8002814:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002816:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <_sbrk+0x50>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800281c:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <_sbrk+0x50>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	18d3      	adds	r3, r2, r3
 8002824:	466a      	mov	r2, sp
 8002826:	4293      	cmp	r3, r2
 8002828:	d907      	bls.n	800283a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800282a:	f004 f8b1 	bl	8006990 <__errno>
 800282e:	0003      	movs	r3, r0
 8002830:	220c      	movs	r2, #12
 8002832:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002834:	2301      	movs	r3, #1
 8002836:	425b      	negs	r3, r3
 8002838:	e006      	b.n	8002848 <_sbrk+0x48>
	}

	heap_end += incr;
 800283a:	4b05      	ldr	r3, [pc, #20]	; (8002850 <_sbrk+0x50>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	18d2      	adds	r2, r2, r3
 8002842:	4b03      	ldr	r3, [pc, #12]	; (8002850 <_sbrk+0x50>)
 8002844:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8002846:	68fb      	ldr	r3, [r7, #12]
}
 8002848:	0018      	movs	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	b004      	add	sp, #16
 800284e:	bd80      	pop	{r7, pc}
 8002850:	200000b8 	.word	0x200000b8
 8002854:	200002e8 	.word	0x200002e8

08002858 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800285c:	4b17      	ldr	r3, [pc, #92]	; (80028bc <SystemInit+0x64>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4b16      	ldr	r3, [pc, #88]	; (80028bc <SystemInit+0x64>)
 8002862:	2180      	movs	r1, #128	; 0x80
 8002864:	0049      	lsls	r1, r1, #1
 8002866:	430a      	orrs	r2, r1
 8002868:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800286a:	4b14      	ldr	r3, [pc, #80]	; (80028bc <SystemInit+0x64>)
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	4b13      	ldr	r3, [pc, #76]	; (80028bc <SystemInit+0x64>)
 8002870:	4913      	ldr	r1, [pc, #76]	; (80028c0 <SystemInit+0x68>)
 8002872:	400a      	ands	r2, r1
 8002874:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002876:	4b11      	ldr	r3, [pc, #68]	; (80028bc <SystemInit+0x64>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	4b10      	ldr	r3, [pc, #64]	; (80028bc <SystemInit+0x64>)
 800287c:	4911      	ldr	r1, [pc, #68]	; (80028c4 <SystemInit+0x6c>)
 800287e:	400a      	ands	r2, r1
 8002880:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002882:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <SystemInit+0x64>)
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	4b0d      	ldr	r3, [pc, #52]	; (80028bc <SystemInit+0x64>)
 8002888:	2101      	movs	r1, #1
 800288a:	438a      	bics	r2, r1
 800288c:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800288e:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <SystemInit+0x64>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <SystemInit+0x64>)
 8002894:	490c      	ldr	r1, [pc, #48]	; (80028c8 <SystemInit+0x70>)
 8002896:	400a      	ands	r2, r1
 8002898:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800289a:	4b08      	ldr	r3, [pc, #32]	; (80028bc <SystemInit+0x64>)
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	4b07      	ldr	r3, [pc, #28]	; (80028bc <SystemInit+0x64>)
 80028a0:	490a      	ldr	r1, [pc, #40]	; (80028cc <SystemInit+0x74>)
 80028a2:	400a      	ands	r2, r1
 80028a4:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80028a6:	4b05      	ldr	r3, [pc, #20]	; (80028bc <SystemInit+0x64>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80028ac:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <SystemInit+0x78>)
 80028ae:	2280      	movs	r2, #128	; 0x80
 80028b0:	0512      	lsls	r2, r2, #20
 80028b2:	609a      	str	r2, [r3, #8]
#endif
}
 80028b4:	46c0      	nop			; (mov r8, r8)
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	40021000 	.word	0x40021000
 80028c0:	88ff400c 	.word	0x88ff400c
 80028c4:	fef6fff6 	.word	0xfef6fff6
 80028c8:	fffbffff 	.word	0xfffbffff
 80028cc:	ff02ffff 	.word	0xff02ffff
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <runStopwatch>:

// ---- Stopwatch functions ----
// set stopwatch. using lptimer. maybe better with regular timer?
// can operate in stop mode if using lptimer
// modify to update screen/set flags when necessary
void runStopwatch() {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
	HAL_LPTIM_Counter_Start_IT(&hlptim1, 0x8000);
 80028d8:	2380      	movs	r3, #128	; 0x80
 80028da:	021a      	lsls	r2, r3, #8
 80028dc:	4b03      	ldr	r3, [pc, #12]	; (80028ec <runStopwatch+0x18>)
 80028de:	0011      	movs	r1, r2
 80028e0:	0018      	movs	r0, r3
 80028e2:	f001 f819 	bl	8003918 <HAL_LPTIM_Counter_Start_IT>
}
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20000140 	.word	0x20000140

080028f0 <pauseStopwatch>:

// stop the timer or pause it or whatever.
// counter value might reset and screw up timekeeping? should save?
void pauseStopwatch() {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
	HAL_LPTIM_Counter_Stop_IT(&hlptim1);
 80028f4:	4b03      	ldr	r3, [pc, #12]	; (8002904 <pauseStopwatch+0x14>)
 80028f6:	0018      	movs	r0, r3
 80028f8:	f001 f862 	bl	80039c0 <HAL_LPTIM_Counter_Stop_IT>
//	temp = hlptim->Instance->CNT;
}
 80028fc:	46c0      	nop			; (mov r8, r8)
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	20000140 	.word	0x20000140

08002908 <clearStopwatch>:

void clearStopwatch() {
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
	pauseStopwatch();
 800290c:	f7ff fff0 	bl	80028f0 <pauseStopwatch>
	stopwatchCNT = 0;
 8002910:	4b02      	ldr	r3, [pc, #8]	; (800291c <clearStopwatch+0x14>)
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
}
 8002916:	46c0      	nop			; (mov r8, r8)
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	200000d0 	.word	0x200000d0

08002920 <HAL_LPTIM_AutoReloadMatchCallback>:
// increment variable for stopwatch counting.
// update screen if on
// how to set lptim internal clock to LSE???
//   I FOUND IT: RCC->CCIPR LPTIMSEL (2-bits, 11=LSE clock for LPTIM)
//   now...does hal do this automatically?
void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim) {
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
	// toggle pin, should toggle every 1s. change this pin
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8002928:	4b08      	ldr	r3, [pc, #32]	; (800294c <HAL_LPTIM_AutoReloadMatchCallback+0x2c>)
 800292a:	2102      	movs	r1, #2
 800292c:	0018      	movs	r0, r3
 800292e:	f000 ff45 	bl	80037bc <HAL_GPIO_TogglePin>
	stopwatchCNT++;
 8002932:	4b07      	ldr	r3, [pc, #28]	; (8002950 <HAL_LPTIM_AutoReloadMatchCallback+0x30>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	1c5a      	adds	r2, r3, #1
 8002938:	4b05      	ldr	r3, [pc, #20]	; (8002950 <HAL_LPTIM_AutoReloadMatchCallback+0x30>)
 800293a:	601a      	str	r2, [r3, #0]
	updateStopwatch = 1;
 800293c:	4b05      	ldr	r3, [pc, #20]	; (8002954 <HAL_LPTIM_AutoReloadMatchCallback+0x34>)
 800293e:	2201      	movs	r2, #1
 8002940:	701a      	strb	r2, [r3, #0]
}
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	46bd      	mov	sp, r7
 8002946:	b002      	add	sp, #8
 8002948:	bd80      	pop	{r7, pc}
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	50000400 	.word	0x50000400
 8002950:	200000d0 	.word	0x200000d0
 8002954:	200000db 	.word	0x200000db

08002958 <runTimerDisplay>:
// ---- also including clock functions that use the timer ----
// should this be changed to not have any args (for convenience)
// used for screen updates.
// else, we're setting rtc alarm
// uses TIM21 with LSE (external timer w/ remap and done already by ST).
void runTimerDisplay() {
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim21);
 800295c:	4b03      	ldr	r3, [pc, #12]	; (800296c <runTimerDisplay+0x14>)
 800295e:	0018      	movs	r0, r3
 8002960:	f003 fb2e 	bl	8005fc0 <HAL_TIM_Base_Start_IT>
}
 8002964:	46c0      	nop			; (mov r8, r8)
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	20000200 	.word	0x20000200

08002970 <stopTimerDisplay>:

void stopTimerDisplay() {
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim21);
 8002974:	4b03      	ldr	r3, [pc, #12]	; (8002984 <stopTimerDisplay+0x14>)
 8002976:	0018      	movs	r0, r3
 8002978:	f003 fb44 	bl	8006004 <HAL_TIM_Base_Stop_IT>
}
 800297c:	46c0      	nop			; (mov r8, r8)
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	20000200 	.word	0x20000200

08002988 <runClockDisplay>:

void runClockDisplay() {
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim22);
 800298c:	4b03      	ldr	r3, [pc, #12]	; (800299c <runClockDisplay+0x14>)
 800298e:	0018      	movs	r0, r3
 8002990:	f003 fb16 	bl	8005fc0 <HAL_TIM_Base_Start_IT>
}
 8002994:	46c0      	nop			; (mov r8, r8)
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	20000100 	.word	0x20000100

080029a0 <HAL_TIM_PeriodElapsedCallback>:

void stopClockDisplay() {
	HAL_TIM_Base_Stop_IT(&htim22);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM21) {
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a10      	ldr	r2, [pc, #64]	; (80029f0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d112      	bne.n	80029d8 <HAL_TIM_PeriodElapsedCallback+0x38>
		updateTimer = 1;
 80029b2:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	701a      	strb	r2, [r3, #0]
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
		// should toggle pin every 1s. change pin
		if (watchTimerSeconds != 0) {
 80029b8:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d005      	beq.n	80029cc <HAL_TIM_PeriodElapsedCallback+0x2c>
//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
			watchTimerSeconds--;
 80029c0:	4b0d      	ldr	r3, [pc, #52]	; (80029f8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	1e5a      	subs	r2, r3, #1
 80029c6:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80029c8:	601a      	str	r2, [r3, #0]
		}
	}
	else if (htim->Instance == TIM22) {
		updateClock = 1;
	}
}
 80029ca:	e00d      	b.n	80029e8 <HAL_TIM_PeriodElapsedCallback+0x48>
			stopTimerDisplay();
 80029cc:	f7ff ffd0 	bl	8002970 <stopTimerDisplay>
			timerRunning = 0;
 80029d0:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
}
 80029d6:	e007      	b.n	80029e8 <HAL_TIM_PeriodElapsedCallback+0x48>
	else if (htim->Instance == TIM22) {
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a08      	ldr	r2, [pc, #32]	; (8002a00 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d102      	bne.n	80029e8 <HAL_TIM_PeriodElapsedCallback+0x48>
		updateClock = 1;
 80029e2:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80029e4:	2201      	movs	r2, #1
 80029e6:	701a      	strb	r2, [r3, #0]
}
 80029e8:	46c0      	nop			; (mov r8, r8)
 80029ea:	46bd      	mov	sp, r7
 80029ec:	b002      	add	sp, #8
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40010800 	.word	0x40010800
 80029f4:	20000198 	.word	0x20000198
 80029f8:	200001f4 	.word	0x200001f4
 80029fc:	200000bc 	.word	0x200000bc
 8002a00:	40011400 	.word	0x40011400
 8002a04:	200000dc 	.word	0x200000dc

08002a08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002a08:	480d      	ldr	r0, [pc, #52]	; (8002a40 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002a0a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002a0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002a0e:	e003      	b.n	8002a18 <LoopCopyDataInit>

08002a10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002a10:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8002a12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002a14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002a16:	3104      	adds	r1, #4

08002a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8002a18:	480b      	ldr	r0, [pc, #44]	; (8002a48 <LoopForever+0xa>)
  ldr  r3, =_edata
 8002a1a:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <LoopForever+0xe>)
  adds  r2, r0, r1
 8002a1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002a1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a20:	d3f6      	bcc.n	8002a10 <CopyDataInit>
  ldr  r2, =_sbss
 8002a22:	4a0b      	ldr	r2, [pc, #44]	; (8002a50 <LoopForever+0x12>)
  b  LoopFillZerobss
 8002a24:	e002      	b.n	8002a2c <LoopFillZerobss>

08002a26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002a26:	2300      	movs	r3, #0
  str  r3, [r2]
 8002a28:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a2a:	3204      	adds	r2, #4

08002a2c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8002a2c:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <LoopForever+0x16>)
  cmp  r2, r3
 8002a2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a30:	d3f9      	bcc.n	8002a26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002a32:	f7ff ff11 	bl	8002858 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a36:	f003 ffb1 	bl	800699c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a3a:	f7fe fe21 	bl	8001680 <main>

08002a3e <LoopForever>:

LoopForever:
    b LoopForever
 8002a3e:	e7fe      	b.n	8002a3e <LoopForever>
   ldr   r0, =_estack
 8002a40:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8002a44:	080078b4 	.word	0x080078b4
  ldr  r0, =_sdata
 8002a48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a4c:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 8002a50:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 8002a54:	200002e8 	.word	0x200002e8

08002a58 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a58:	e7fe      	b.n	8002a58 <ADC1_COMP_IRQHandler>
	...

08002a5c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a62:	1dfb      	adds	r3, r7, #7
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_Init+0x3c>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <HAL_Init+0x3c>)
 8002a6e:	2140      	movs	r1, #64	; 0x40
 8002a70:	430a      	orrs	r2, r1
 8002a72:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a74:	2000      	movs	r0, #0
 8002a76:	f000 f811 	bl	8002a9c <HAL_InitTick>
 8002a7a:	1e03      	subs	r3, r0, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002a7e:	1dfb      	adds	r3, r7, #7
 8002a80:	2201      	movs	r2, #1
 8002a82:	701a      	strb	r2, [r3, #0]
 8002a84:	e001      	b.n	8002a8a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a86:	f7ff fd11 	bl	80024ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a8a:	1dfb      	adds	r3, r7, #7
 8002a8c:	781b      	ldrb	r3, [r3, #0]
}
 8002a8e:	0018      	movs	r0, r3
 8002a90:	46bd      	mov	sp, r7
 8002a92:	b002      	add	sp, #8
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	46c0      	nop			; (mov r8, r8)
 8002a98:	40022000 	.word	0x40022000

08002a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002aa4:	230f      	movs	r3, #15
 8002aa6:	18fb      	adds	r3, r7, r3
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8002aac:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <HAL_InitTick+0x50>)
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	23fa      	movs	r3, #250	; 0xfa
 8002ab2:	0099      	lsls	r1, r3, #2
 8002ab4:	0010      	movs	r0, r2
 8002ab6:	f7fd fb27 	bl	8000108 <__udivsi3>
 8002aba:	0003      	movs	r3, r0
 8002abc:	0018      	movs	r0, r3
 8002abe:	f000 fb4a 	bl	8003156 <HAL_SYSTICK_Config>
 8002ac2:	1e03      	subs	r3, r0, #0
 8002ac4:	d004      	beq.n	8002ad0 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8002ac6:	230f      	movs	r3, #15
 8002ac8:	18fb      	adds	r3, r7, r3
 8002aca:	2201      	movs	r2, #1
 8002acc:	701a      	strb	r2, [r3, #0]
 8002ace:	e006      	b.n	8002ade <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	425b      	negs	r3, r3
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f000 fb17 	bl	800310c <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8002ade:	230f      	movs	r3, #15
 8002ae0:	18fb      	adds	r3, r7, r3
 8002ae2:	781b      	ldrb	r3, [r3, #0]
}
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	b004      	add	sp, #16
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20000000 	.word	0x20000000

08002af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  uwTick++;
 8002af4:	4b03      	ldr	r3, [pc, #12]	; (8002b04 <HAL_IncTick+0x14>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	4b02      	ldr	r3, [pc, #8]	; (8002b04 <HAL_IncTick+0x14>)
 8002afc:	601a      	str	r2, [r3, #0]
}
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	200002e0 	.word	0x200002e0

08002b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b0c:	4b02      	ldr	r3, [pc, #8]	; (8002b18 <HAL_GetTick+0x10>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
}
 8002b10:	0018      	movs	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	200002e0 	.word	0x200002e0

08002b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b24:	f7ff fff0 	bl	8002b08 <HAL_GetTick>
 8002b28:	0003      	movs	r3, r0
 8002b2a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	3301      	adds	r3, #1
 8002b34:	d002      	beq.n	8002b3c <HAL_Delay+0x20>
  {
    wait++;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b3c:	46c0      	nop			; (mov r8, r8)
 8002b3e:	f7ff ffe3 	bl	8002b08 <HAL_GetTick>
 8002b42:	0002      	movs	r2, r0
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d8f7      	bhi.n	8002b3e <HAL_Delay+0x22>
  {
  }
}
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	46bd      	mov	sp, r7
 8002b52:	b004      	add	sp, #16
 8002b54:	bd80      	pop	{r7, pc}
	...

08002b58 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e159      	b.n	8002e1e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10a      	bne.n	8002b88 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2250      	movs	r2, #80	; 0x50
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	0018      	movs	r0, r3
 8002b84:	f7ff fca6 	bl	80024d4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8c:	2210      	movs	r2, #16
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b10      	cmp	r3, #16
 8002b92:	d005      	beq.n	8002ba0 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	2204      	movs	r2, #4
 8002b9c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002b9e:	d00b      	beq.n	8002bb8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba4:	2210      	movs	r2, #16
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2250      	movs	r2, #80	; 0x50
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e132      	b.n	8002e1e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbc:	4a9a      	ldr	r2, [pc, #616]	; (8002e28 <HAL_ADC_Init+0x2d0>)
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	2203      	movs	r2, #3
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d108      	bne.n	8002be8 <HAL_ADC_Init+0x90>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d101      	bne.n	8002be8 <HAL_ADC_Init+0x90>
 8002be4:	2301      	movs	r3, #1
 8002be6:	e000      	b.n	8002bea <HAL_ADC_Init+0x92>
 8002be8:	2300      	movs	r3, #0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d149      	bne.n	8002c82 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	23c0      	movs	r3, #192	; 0xc0
 8002bf4:	061b      	lsls	r3, r3, #24
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d00b      	beq.n	8002c12 <HAL_ADC_Init+0xba>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	2380      	movs	r3, #128	; 0x80
 8002c00:	05db      	lsls	r3, r3, #23
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d005      	beq.n	8002c12 <HAL_ADC_Init+0xba>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	2380      	movs	r3, #128	; 0x80
 8002c0c:	061b      	lsls	r3, r3, #24
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d111      	bne.n	8002c36 <HAL_ADC_Init+0xde>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	691a      	ldr	r2, [r3, #16]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	0092      	lsls	r2, r2, #2
 8002c1e:	0892      	lsrs	r2, r2, #2
 8002c20:	611a      	str	r2, [r3, #16]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6919      	ldr	r1, [r3, #16]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	611a      	str	r2, [r3, #16]
 8002c34:	e014      	b.n	8002c60 <HAL_ADC_Init+0x108>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	691a      	ldr	r2, [r3, #16]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	0092      	lsls	r2, r2, #2
 8002c42:	0892      	lsrs	r2, r2, #2
 8002c44:	611a      	str	r2, [r3, #16]
 8002c46:	4b79      	ldr	r3, [pc, #484]	; (8002e2c <HAL_ADC_Init+0x2d4>)
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	4b78      	ldr	r3, [pc, #480]	; (8002e2c <HAL_ADC_Init+0x2d4>)
 8002c4c:	4978      	ldr	r1, [pc, #480]	; (8002e30 <HAL_ADC_Init+0x2d8>)
 8002c4e:	400a      	ands	r2, r1
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	4b76      	ldr	r3, [pc, #472]	; (8002e2c <HAL_ADC_Init+0x2d4>)
 8002c54:	6819      	ldr	r1, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	4b74      	ldr	r3, [pc, #464]	; (8002e2c <HAL_ADC_Init+0x2d4>)
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2118      	movs	r1, #24
 8002c6c:	438a      	bics	r2, r1
 8002c6e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68d9      	ldr	r1, [r3, #12]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689a      	ldr	r2, [r3, #8]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8002c82:	4b6a      	ldr	r3, [pc, #424]	; (8002e2c <HAL_ADC_Init+0x2d4>)
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	4b69      	ldr	r3, [pc, #420]	; (8002e2c <HAL_ADC_Init+0x2d4>)
 8002c88:	496a      	ldr	r1, [pc, #424]	; (8002e34 <HAL_ADC_Init+0x2dc>)
 8002c8a:	400a      	ands	r2, r1
 8002c8c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8002c8e:	4b67      	ldr	r3, [pc, #412]	; (8002e2c <HAL_ADC_Init+0x2d4>)
 8002c90:	6819      	ldr	r1, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c96:	065a      	lsls	r2, r3, #25
 8002c98:	4b64      	ldr	r3, [pc, #400]	; (8002e2c <HAL_ADC_Init+0x2d4>)
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	2380      	movs	r3, #128	; 0x80
 8002ca6:	055b      	lsls	r3, r3, #21
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d108      	bne.n	8002cbe <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2180      	movs	r1, #128	; 0x80
 8002cb8:	0549      	lsls	r1, r1, #21
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	495b      	ldr	r1, [pc, #364]	; (8002e38 <HAL_ADC_Init+0x2e0>)
 8002cca:	400a      	ands	r2, r1
 8002ccc:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68d9      	ldr	r1, [r3, #12]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d101      	bne.n	8002ce4 <HAL_ADC_Init+0x18c>
 8002ce0:	2304      	movs	r3, #4
 8002ce2:	e000      	b.n	8002ce6 <HAL_ADC_Init+0x18e>
 8002ce4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002ce6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2020      	movs	r0, #32
 8002cec:	5c1b      	ldrb	r3, [r3, r0]
 8002cee:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002cf0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	202c      	movs	r0, #44	; 0x2c
 8002cf6:	5c1b      	ldrb	r3, [r3, r0]
 8002cf8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002cfa:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002d00:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8002d08:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002d10:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d1e:	23c2      	movs	r3, #194	; 0xc2
 8002d20:	33ff      	adds	r3, #255	; 0xff
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d00b      	beq.n	8002d3e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68d9      	ldr	r1, [r3, #12]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002d34:	431a      	orrs	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2221      	movs	r2, #33	; 0x21
 8002d42:	5c9b      	ldrb	r3, [r3, r2]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d11a      	bne.n	8002d7e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	5c9b      	ldrb	r3, [r3, r2]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d109      	bne.n	8002d66 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68da      	ldr	r2, [r3, #12]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2180      	movs	r1, #128	; 0x80
 8002d5e:	0249      	lsls	r1, r1, #9
 8002d60:	430a      	orrs	r2, r1
 8002d62:	60da      	str	r2, [r3, #12]
 8002d64:	e00b      	b.n	8002d7e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d76:	2201      	movs	r2, #1
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d11f      	bne.n	8002dc6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	691a      	ldr	r2, [r3, #16]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	492a      	ldr	r1, [pc, #168]	; (8002e3c <HAL_ADC_Init+0x2e4>)
 8002d92:	400a      	ands	r2, r1
 8002d94:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6919      	ldr	r1, [r3, #16]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002da4:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8002daa:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	691a      	ldr	r2, [r3, #16]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	611a      	str	r2, [r3, #16]
 8002dc4:	e00e      	b.n	8002de4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	4013      	ands	r3, r2
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d107      	bne.n	8002de4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691a      	ldr	r2, [r3, #16]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2101      	movs	r1, #1
 8002de0:	438a      	bics	r2, r1
 8002de2:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695a      	ldr	r2, [r3, #20]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2107      	movs	r1, #7
 8002df0:	438a      	bics	r2, r1
 8002df2:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6959      	ldr	r1, [r3, #20]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e10:	2203      	movs	r2, #3
 8002e12:	4393      	bics	r3, r2
 8002e14:	2201      	movs	r2, #1
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	0018      	movs	r0, r3
 8002e20:	46bd      	mov	sp, r7
 8002e22:	b002      	add	sp, #8
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	fffffefd 	.word	0xfffffefd
 8002e2c:	40012708 	.word	0x40012708
 8002e30:	ffc3ffff 	.word	0xffc3ffff
 8002e34:	fdffffff 	.word	0xfdffffff
 8002e38:	fffe0219 	.word	0xfffe0219
 8002e3c:	fffffc03 	.word	0xfffffc03

08002e40 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2250      	movs	r2, #80	; 0x50
 8002e4e:	5c9b      	ldrb	r3, [r3, r2]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x18>
 8002e54:	2302      	movs	r3, #2
 8002e56:	e085      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x124>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2250      	movs	r2, #80	; 0x50
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2204      	movs	r2, #4
 8002e68:	4013      	ands	r3, r2
 8002e6a:	d00b      	beq.n	8002e84 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e70:	2220      	movs	r2, #32
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2250      	movs	r2, #80	; 0x50
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e06f      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	4a38      	ldr	r2, [pc, #224]	; (8002f6c <HAL_ADC_ConfigChannel+0x12c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d035      	beq.n	8002efa <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	035b      	lsls	r3, r3, #13
 8002e9a:	0b5a      	lsrs	r2, r3, #13
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	2380      	movs	r3, #128	; 0x80
 8002eaa:	02db      	lsls	r3, r3, #11
 8002eac:	4013      	ands	r3, r2
 8002eae:	d009      	beq.n	8002ec4 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8002eb0:	4b2f      	ldr	r3, [pc, #188]	; (8002f70 <HAL_ADC_ConfigChannel+0x130>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	4b2e      	ldr	r3, [pc, #184]	; (8002f70 <HAL_ADC_ConfigChannel+0x130>)
 8002eb6:	2180      	movs	r1, #128	; 0x80
 8002eb8:	0409      	lsls	r1, r1, #16
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8002ebe:	200a      	movs	r0, #10
 8002ec0:	f000 f85e 	bl	8002f80 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	2380      	movs	r3, #128	; 0x80
 8002eca:	029b      	lsls	r3, r3, #10
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d006      	beq.n	8002ede <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8002ed0:	4b27      	ldr	r3, [pc, #156]	; (8002f70 <HAL_ADC_ConfigChannel+0x130>)
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	4b26      	ldr	r3, [pc, #152]	; (8002f70 <HAL_ADC_ConfigChannel+0x130>)
 8002ed6:	2180      	movs	r1, #128	; 0x80
 8002ed8:	03c9      	lsls	r1, r1, #15
 8002eda:	430a      	orrs	r2, r1
 8002edc:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	2380      	movs	r3, #128	; 0x80
 8002ee4:	025b      	lsls	r3, r3, #9
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	d037      	beq.n	8002f5a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8002eea:	4b21      	ldr	r3, [pc, #132]	; (8002f70 <HAL_ADC_ConfigChannel+0x130>)
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	4b20      	ldr	r3, [pc, #128]	; (8002f70 <HAL_ADC_ConfigChannel+0x130>)
 8002ef0:	2180      	movs	r1, #128	; 0x80
 8002ef2:	0449      	lsls	r1, r1, #17
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	e02f      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	035b      	lsls	r3, r3, #13
 8002f06:	0b5b      	lsrs	r3, r3, #13
 8002f08:	43d9      	mvns	r1, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	400a      	ands	r2, r1
 8002f10:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	2380      	movs	r3, #128	; 0x80
 8002f18:	02db      	lsls	r3, r3, #11
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	d005      	beq.n	8002f2a <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8002f1e:	4b14      	ldr	r3, [pc, #80]	; (8002f70 <HAL_ADC_ConfigChannel+0x130>)
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	4b13      	ldr	r3, [pc, #76]	; (8002f70 <HAL_ADC_ConfigChannel+0x130>)
 8002f24:	4913      	ldr	r1, [pc, #76]	; (8002f74 <HAL_ADC_ConfigChannel+0x134>)
 8002f26:	400a      	ands	r2, r1
 8002f28:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	2380      	movs	r3, #128	; 0x80
 8002f30:	029b      	lsls	r3, r3, #10
 8002f32:	4013      	ands	r3, r2
 8002f34:	d005      	beq.n	8002f42 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8002f36:	4b0e      	ldr	r3, [pc, #56]	; (8002f70 <HAL_ADC_ConfigChannel+0x130>)
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	4b0d      	ldr	r3, [pc, #52]	; (8002f70 <HAL_ADC_ConfigChannel+0x130>)
 8002f3c:	490e      	ldr	r1, [pc, #56]	; (8002f78 <HAL_ADC_ConfigChannel+0x138>)
 8002f3e:	400a      	ands	r2, r1
 8002f40:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	2380      	movs	r3, #128	; 0x80
 8002f48:	025b      	lsls	r3, r3, #9
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	d005      	beq.n	8002f5a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8002f4e:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <HAL_ADC_ConfigChannel+0x130>)
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <HAL_ADC_ConfigChannel+0x130>)
 8002f54:	4909      	ldr	r1, [pc, #36]	; (8002f7c <HAL_ADC_ConfigChannel+0x13c>)
 8002f56:	400a      	ands	r2, r1
 8002f58:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2250      	movs	r2, #80	; 0x50
 8002f5e:	2100      	movs	r1, #0
 8002f60:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	0018      	movs	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	b002      	add	sp, #8
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	00001001 	.word	0x00001001
 8002f70:	40012708 	.word	0x40012708
 8002f74:	ff7fffff 	.word	0xff7fffff
 8002f78:	ffbfffff 	.word	0xffbfffff
 8002f7c:	feffffff 	.word	0xfeffffff

08002f80 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002f88:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <ADC_DelayMicroSecond+0x34>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	490a      	ldr	r1, [pc, #40]	; (8002fb8 <ADC_DelayMicroSecond+0x38>)
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f7fd f8ba 	bl	8000108 <__udivsi3>
 8002f94:	0003      	movs	r3, r0
 8002f96:	001a      	movs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4353      	muls	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8002f9e:	e002      	b.n	8002fa6 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1f9      	bne.n	8002fa0 <ADC_DelayMicroSecond+0x20>
  } 
}
 8002fac:	46c0      	nop			; (mov r8, r8)
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	b004      	add	sp, #16
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	20000000 	.word	0x20000000
 8002fb8:	000f4240 	.word	0x000f4240

08002fbc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	0002      	movs	r2, r0
 8002fc4:	1dfb      	adds	r3, r7, #7
 8002fc6:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002fc8:	1dfb      	adds	r3, r7, #7
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	001a      	movs	r2, r3
 8002fce:	231f      	movs	r3, #31
 8002fd0:	401a      	ands	r2, r3
 8002fd2:	4b04      	ldr	r3, [pc, #16]	; (8002fe4 <NVIC_EnableIRQ+0x28>)
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	4091      	lsls	r1, r2
 8002fd8:	000a      	movs	r2, r1
 8002fda:	601a      	str	r2, [r3, #0]
}
 8002fdc:	46c0      	nop			; (mov r8, r8)
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	b002      	add	sp, #8
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	e000e100 	.word	0xe000e100

08002fe8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fe8:	b590      	push	{r4, r7, lr}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	0002      	movs	r2, r0
 8002ff0:	6039      	str	r1, [r7, #0]
 8002ff2:	1dfb      	adds	r3, r7, #7
 8002ff4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8002ff6:	1dfb      	adds	r3, r7, #7
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b7f      	cmp	r3, #127	; 0x7f
 8002ffc:	d932      	bls.n	8003064 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ffe:	4a2f      	ldr	r2, [pc, #188]	; (80030bc <NVIC_SetPriority+0xd4>)
 8003000:	1dfb      	adds	r3, r7, #7
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	0019      	movs	r1, r3
 8003006:	230f      	movs	r3, #15
 8003008:	400b      	ands	r3, r1
 800300a:	3b08      	subs	r3, #8
 800300c:	089b      	lsrs	r3, r3, #2
 800300e:	3306      	adds	r3, #6
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	18d3      	adds	r3, r2, r3
 8003014:	3304      	adds	r3, #4
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	1dfa      	adds	r2, r7, #7
 800301a:	7812      	ldrb	r2, [r2, #0]
 800301c:	0011      	movs	r1, r2
 800301e:	2203      	movs	r2, #3
 8003020:	400a      	ands	r2, r1
 8003022:	00d2      	lsls	r2, r2, #3
 8003024:	21ff      	movs	r1, #255	; 0xff
 8003026:	4091      	lsls	r1, r2
 8003028:	000a      	movs	r2, r1
 800302a:	43d2      	mvns	r2, r2
 800302c:	401a      	ands	r2, r3
 800302e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	019b      	lsls	r3, r3, #6
 8003034:	22ff      	movs	r2, #255	; 0xff
 8003036:	401a      	ands	r2, r3
 8003038:	1dfb      	adds	r3, r7, #7
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	0018      	movs	r0, r3
 800303e:	2303      	movs	r3, #3
 8003040:	4003      	ands	r3, r0
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003046:	481d      	ldr	r0, [pc, #116]	; (80030bc <NVIC_SetPriority+0xd4>)
 8003048:	1dfb      	adds	r3, r7, #7
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	001c      	movs	r4, r3
 800304e:	230f      	movs	r3, #15
 8003050:	4023      	ands	r3, r4
 8003052:	3b08      	subs	r3, #8
 8003054:	089b      	lsrs	r3, r3, #2
 8003056:	430a      	orrs	r2, r1
 8003058:	3306      	adds	r3, #6
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	18c3      	adds	r3, r0, r3
 800305e:	3304      	adds	r3, #4
 8003060:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003062:	e027      	b.n	80030b4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003064:	4a16      	ldr	r2, [pc, #88]	; (80030c0 <NVIC_SetPriority+0xd8>)
 8003066:	1dfb      	adds	r3, r7, #7
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	b25b      	sxtb	r3, r3
 800306c:	089b      	lsrs	r3, r3, #2
 800306e:	33c0      	adds	r3, #192	; 0xc0
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	589b      	ldr	r3, [r3, r2]
 8003074:	1dfa      	adds	r2, r7, #7
 8003076:	7812      	ldrb	r2, [r2, #0]
 8003078:	0011      	movs	r1, r2
 800307a:	2203      	movs	r2, #3
 800307c:	400a      	ands	r2, r1
 800307e:	00d2      	lsls	r2, r2, #3
 8003080:	21ff      	movs	r1, #255	; 0xff
 8003082:	4091      	lsls	r1, r2
 8003084:	000a      	movs	r2, r1
 8003086:	43d2      	mvns	r2, r2
 8003088:	401a      	ands	r2, r3
 800308a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	019b      	lsls	r3, r3, #6
 8003090:	22ff      	movs	r2, #255	; 0xff
 8003092:	401a      	ands	r2, r3
 8003094:	1dfb      	adds	r3, r7, #7
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	0018      	movs	r0, r3
 800309a:	2303      	movs	r3, #3
 800309c:	4003      	ands	r3, r0
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030a2:	4807      	ldr	r0, [pc, #28]	; (80030c0 <NVIC_SetPriority+0xd8>)
 80030a4:	1dfb      	adds	r3, r7, #7
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	b25b      	sxtb	r3, r3
 80030aa:	089b      	lsrs	r3, r3, #2
 80030ac:	430a      	orrs	r2, r1
 80030ae:	33c0      	adds	r3, #192	; 0xc0
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	501a      	str	r2, [r3, r0]
}
 80030b4:	46c0      	nop			; (mov r8, r8)
 80030b6:	46bd      	mov	sp, r7
 80030b8:	b003      	add	sp, #12
 80030ba:	bd90      	pop	{r4, r7, pc}
 80030bc:	e000ed00 	.word	0xe000ed00
 80030c0:	e000e100 	.word	0xe000e100

080030c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	4a0c      	ldr	r2, [pc, #48]	; (8003104 <SysTick_Config+0x40>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d901      	bls.n	80030da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030d6:	2301      	movs	r3, #1
 80030d8:	e010      	b.n	80030fc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030da:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <SysTick_Config+0x44>)
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	3a01      	subs	r2, #1
 80030e0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030e2:	2301      	movs	r3, #1
 80030e4:	425b      	negs	r3, r3
 80030e6:	2103      	movs	r1, #3
 80030e8:	0018      	movs	r0, r3
 80030ea:	f7ff ff7d 	bl	8002fe8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030ee:	4b06      	ldr	r3, [pc, #24]	; (8003108 <SysTick_Config+0x44>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030f4:	4b04      	ldr	r3, [pc, #16]	; (8003108 <SysTick_Config+0x44>)
 80030f6:	2207      	movs	r2, #7
 80030f8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	0018      	movs	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	b002      	add	sp, #8
 8003102:	bd80      	pop	{r7, pc}
 8003104:	00ffffff 	.word	0x00ffffff
 8003108:	e000e010 	.word	0xe000e010

0800310c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	607a      	str	r2, [r7, #4]
 8003116:	210f      	movs	r1, #15
 8003118:	187b      	adds	r3, r7, r1
 800311a:	1c02      	adds	r2, r0, #0
 800311c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	187b      	adds	r3, r7, r1
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	b25b      	sxtb	r3, r3
 8003126:	0011      	movs	r1, r2
 8003128:	0018      	movs	r0, r3
 800312a:	f7ff ff5d 	bl	8002fe8 <NVIC_SetPriority>
}
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	46bd      	mov	sp, r7
 8003132:	b004      	add	sp, #16
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b082      	sub	sp, #8
 800313a:	af00      	add	r7, sp, #0
 800313c:	0002      	movs	r2, r0
 800313e:	1dfb      	adds	r3, r7, #7
 8003140:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003142:	1dfb      	adds	r3, r7, #7
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	b25b      	sxtb	r3, r3
 8003148:	0018      	movs	r0, r3
 800314a:	f7ff ff37 	bl	8002fbc <NVIC_EnableIRQ>
}
 800314e:	46c0      	nop			; (mov r8, r8)
 8003150:	46bd      	mov	sp, r7
 8003152:	b002      	add	sp, #8
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b082      	sub	sp, #8
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	0018      	movs	r0, r3
 8003162:	f7ff ffaf 	bl	80030c4 <SysTick_Config>
 8003166:	0003      	movs	r3, r0
}
 8003168:	0018      	movs	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	b002      	add	sp, #8
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e061      	b.n	8003246 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a32      	ldr	r2, [pc, #200]	; (8003250 <HAL_DMA_Init+0xe0>)
 8003188:	4694      	mov	ip, r2
 800318a:	4463      	add	r3, ip
 800318c:	2114      	movs	r1, #20
 800318e:	0018      	movs	r0, r3
 8003190:	f7fc ffba 	bl	8000108 <__udivsi3>
 8003194:	0003      	movs	r3, r0
 8003196:	009a      	lsls	r2, r3, #2
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a2d      	ldr	r2, [pc, #180]	; (8003254 <HAL_DMA_Init+0xe4>)
 80031a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2225      	movs	r2, #37	; 0x25
 80031a6:	2102      	movs	r1, #2
 80031a8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	4a28      	ldr	r2, [pc, #160]	; (8003258 <HAL_DMA_Init+0xe8>)
 80031b6:	4013      	ands	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80031c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	2380      	movs	r3, #128	; 0x80
 80031f6:	01db      	lsls	r3, r3, #7
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d018      	beq.n	800322e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80031fc:	4b17      	ldr	r3, [pc, #92]	; (800325c <HAL_DMA_Init+0xec>)
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003204:	211c      	movs	r1, #28
 8003206:	400b      	ands	r3, r1
 8003208:	210f      	movs	r1, #15
 800320a:	4099      	lsls	r1, r3
 800320c:	000b      	movs	r3, r1
 800320e:	43d9      	mvns	r1, r3
 8003210:	4b12      	ldr	r3, [pc, #72]	; (800325c <HAL_DMA_Init+0xec>)
 8003212:	400a      	ands	r2, r1
 8003214:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003216:	4b11      	ldr	r3, [pc, #68]	; (800325c <HAL_DMA_Init+0xec>)
 8003218:	6819      	ldr	r1, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003222:	201c      	movs	r0, #28
 8003224:	4003      	ands	r3, r0
 8003226:	409a      	lsls	r2, r3
 8003228:	4b0c      	ldr	r3, [pc, #48]	; (800325c <HAL_DMA_Init+0xec>)
 800322a:	430a      	orrs	r2, r1
 800322c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2225      	movs	r2, #37	; 0x25
 8003238:	2101      	movs	r1, #1
 800323a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2224      	movs	r2, #36	; 0x24
 8003240:	2100      	movs	r1, #0
 8003242:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	0018      	movs	r0, r3
 8003248:	46bd      	mov	sp, r7
 800324a:	b004      	add	sp, #16
 800324c:	bd80      	pop	{r7, pc}
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	bffdfff8 	.word	0xbffdfff8
 8003254:	40020000 	.word	0x40020000
 8003258:	ffff800f 	.word	0xffff800f
 800325c:	400200a8 	.word	0x400200a8

08003260 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003268:	230f      	movs	r3, #15
 800326a:	18fb      	adds	r3, r7, r3
 800326c:	2200      	movs	r2, #0
 800326e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2225      	movs	r2, #37	; 0x25
 8003274:	5c9b      	ldrb	r3, [r3, r2]
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d007      	beq.n	800328c <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2204      	movs	r2, #4
 8003280:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003282:	230f      	movs	r3, #15
 8003284:	18fb      	adds	r3, r7, r3
 8003286:	2201      	movs	r2, #1
 8003288:	701a      	strb	r2, [r3, #0]
 800328a:	e02a      	b.n	80032e2 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	210e      	movs	r1, #14
 8003298:	438a      	bics	r2, r1
 800329a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2101      	movs	r1, #1
 80032a8:	438a      	bics	r2, r1
 80032aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b0:	221c      	movs	r2, #28
 80032b2:	401a      	ands	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	2101      	movs	r1, #1
 80032ba:	4091      	lsls	r1, r2
 80032bc:	000a      	movs	r2, r1
 80032be:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2225      	movs	r2, #37	; 0x25
 80032c4:	2101      	movs	r1, #1
 80032c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2224      	movs	r2, #36	; 0x24
 80032cc:	2100      	movs	r1, #0
 80032ce:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d004      	beq.n	80032e2 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	0010      	movs	r0, r2
 80032e0:	4798      	blx	r3
    }
  }
  return status;
 80032e2:	230f      	movs	r3, #15
 80032e4:	18fb      	adds	r3, r7, r3
 80032e6:	781b      	ldrb	r3, [r3, #0]
}
 80032e8:	0018      	movs	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	b004      	add	sp, #16
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330c:	221c      	movs	r2, #28
 800330e:	4013      	ands	r3, r2
 8003310:	2204      	movs	r2, #4
 8003312:	409a      	lsls	r2, r3
 8003314:	0013      	movs	r3, r2
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	4013      	ands	r3, r2
 800331a:	d026      	beq.n	800336a <HAL_DMA_IRQHandler+0x7a>
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2204      	movs	r2, #4
 8003320:	4013      	ands	r3, r2
 8003322:	d022      	beq.n	800336a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2220      	movs	r2, #32
 800332c:	4013      	ands	r3, r2
 800332e:	d107      	bne.n	8003340 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2104      	movs	r1, #4
 800333c:	438a      	bics	r2, r1
 800333e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003344:	221c      	movs	r2, #28
 8003346:	401a      	ands	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	2104      	movs	r1, #4
 800334e:	4091      	lsls	r1, r2
 8003350:	000a      	movs	r2, r1
 8003352:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003358:	2b00      	cmp	r3, #0
 800335a:	d100      	bne.n	800335e <HAL_DMA_IRQHandler+0x6e>
 800335c:	e071      	b.n	8003442 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	0010      	movs	r0, r2
 8003366:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8003368:	e06b      	b.n	8003442 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	221c      	movs	r2, #28
 8003370:	4013      	ands	r3, r2
 8003372:	2202      	movs	r2, #2
 8003374:	409a      	lsls	r2, r3
 8003376:	0013      	movs	r3, r2
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	4013      	ands	r3, r2
 800337c:	d02d      	beq.n	80033da <HAL_DMA_IRQHandler+0xea>
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2202      	movs	r2, #2
 8003382:	4013      	ands	r3, r2
 8003384:	d029      	beq.n	80033da <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2220      	movs	r2, #32
 800338e:	4013      	ands	r3, r2
 8003390:	d10b      	bne.n	80033aa <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	210a      	movs	r1, #10
 800339e:	438a      	bics	r2, r1
 80033a0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2225      	movs	r2, #37	; 0x25
 80033a6:	2101      	movs	r1, #1
 80033a8:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ae:	221c      	movs	r2, #28
 80033b0:	401a      	ands	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	2102      	movs	r1, #2
 80033b8:	4091      	lsls	r1, r2
 80033ba:	000a      	movs	r2, r1
 80033bc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2224      	movs	r2, #36	; 0x24
 80033c2:	2100      	movs	r1, #0
 80033c4:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d039      	beq.n	8003442 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	0010      	movs	r0, r2
 80033d6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80033d8:	e033      	b.n	8003442 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033de:	221c      	movs	r2, #28
 80033e0:	4013      	ands	r3, r2
 80033e2:	2208      	movs	r2, #8
 80033e4:	409a      	lsls	r2, r3
 80033e6:	0013      	movs	r3, r2
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	4013      	ands	r3, r2
 80033ec:	d02a      	beq.n	8003444 <HAL_DMA_IRQHandler+0x154>
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2208      	movs	r2, #8
 80033f2:	4013      	ands	r3, r2
 80033f4:	d026      	beq.n	8003444 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	210e      	movs	r1, #14
 8003402:	438a      	bics	r2, r1
 8003404:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340a:	221c      	movs	r2, #28
 800340c:	401a      	ands	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	2101      	movs	r1, #1
 8003414:	4091      	lsls	r1, r2
 8003416:	000a      	movs	r2, r1
 8003418:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2225      	movs	r2, #37	; 0x25
 8003424:	2101      	movs	r1, #1
 8003426:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2224      	movs	r2, #36	; 0x24
 800342c:	2100      	movs	r1, #0
 800342e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	0010      	movs	r0, r2
 8003440:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	46c0      	nop			; (mov r8, r8)
}
 8003446:	46bd      	mov	sp, r7
 8003448:	b004      	add	sp, #16
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003456:	2300      	movs	r3, #0
 8003458:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800345e:	2300      	movs	r3, #0
 8003460:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003462:	e155      	b.n	8003710 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2101      	movs	r1, #1
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	4091      	lsls	r1, r2
 800346e:	000a      	movs	r2, r1
 8003470:	4013      	ands	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d100      	bne.n	800347c <HAL_GPIO_Init+0x30>
 800347a:	e146      	b.n	800370a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	2b02      	cmp	r3, #2
 8003482:	d003      	beq.n	800348c <HAL_GPIO_Init+0x40>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b12      	cmp	r3, #18
 800348a:	d123      	bne.n	80034d4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	08da      	lsrs	r2, r3, #3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3208      	adds	r2, #8
 8003494:	0092      	lsls	r2, r2, #2
 8003496:	58d3      	ldr	r3, [r2, r3]
 8003498:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	2207      	movs	r2, #7
 800349e:	4013      	ands	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	220f      	movs	r2, #15
 80034a4:	409a      	lsls	r2, r3
 80034a6:	0013      	movs	r3, r2
 80034a8:	43da      	mvns	r2, r3
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	4013      	ands	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	2107      	movs	r1, #7
 80034b8:	400b      	ands	r3, r1
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	409a      	lsls	r2, r3
 80034be:	0013      	movs	r3, r2
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	08da      	lsrs	r2, r3, #3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	3208      	adds	r2, #8
 80034ce:	0092      	lsls	r2, r2, #2
 80034d0:	6939      	ldr	r1, [r7, #16]
 80034d2:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d00b      	beq.n	80034f4 <HAL_GPIO_Init+0xa8>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d007      	beq.n	80034f4 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034e8:	2b11      	cmp	r3, #17
 80034ea:	d003      	beq.n	80034f4 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b12      	cmp	r3, #18
 80034f2:	d130      	bne.n	8003556 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	2203      	movs	r2, #3
 8003500:	409a      	lsls	r2, r3
 8003502:	0013      	movs	r3, r2
 8003504:	43da      	mvns	r2, r3
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	4013      	ands	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	68da      	ldr	r2, [r3, #12]
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	409a      	lsls	r2, r3
 8003516:	0013      	movs	r3, r2
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4313      	orrs	r3, r2
 800351c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800352a:	2201      	movs	r2, #1
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	409a      	lsls	r2, r3
 8003530:	0013      	movs	r3, r2
 8003532:	43da      	mvns	r2, r3
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	4013      	ands	r3, r2
 8003538:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	091b      	lsrs	r3, r3, #4
 8003540:	2201      	movs	r2, #1
 8003542:	401a      	ands	r2, r3
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	409a      	lsls	r2, r3
 8003548:	0013      	movs	r3, r2
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	4313      	orrs	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	2203      	movs	r2, #3
 8003562:	409a      	lsls	r2, r3
 8003564:	0013      	movs	r3, r2
 8003566:	43da      	mvns	r2, r3
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	4013      	ands	r3, r2
 800356c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2203      	movs	r2, #3
 8003574:	401a      	ands	r2, r3
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	409a      	lsls	r2, r3
 800357c:	0013      	movs	r3, r2
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	4313      	orrs	r3, r2
 8003582:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	2203      	movs	r2, #3
 8003596:	409a      	lsls	r2, r3
 8003598:	0013      	movs	r3, r2
 800359a:	43da      	mvns	r2, r3
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	4013      	ands	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	689a      	ldr	r2, [r3, #8]
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	409a      	lsls	r2, r3
 80035ac:	0013      	movs	r3, r2
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	2380      	movs	r3, #128	; 0x80
 80035c0:	055b      	lsls	r3, r3, #21
 80035c2:	4013      	ands	r3, r2
 80035c4:	d100      	bne.n	80035c8 <HAL_GPIO_Init+0x17c>
 80035c6:	e0a0      	b.n	800370a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035c8:	4b57      	ldr	r3, [pc, #348]	; (8003728 <HAL_GPIO_Init+0x2dc>)
 80035ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035cc:	4b56      	ldr	r3, [pc, #344]	; (8003728 <HAL_GPIO_Init+0x2dc>)
 80035ce:	2101      	movs	r1, #1
 80035d0:	430a      	orrs	r2, r1
 80035d2:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80035d4:	4a55      	ldr	r2, [pc, #340]	; (800372c <HAL_GPIO_Init+0x2e0>)
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	089b      	lsrs	r3, r3, #2
 80035da:	3302      	adds	r3, #2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	589b      	ldr	r3, [r3, r2]
 80035e0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2203      	movs	r2, #3
 80035e6:	4013      	ands	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	220f      	movs	r2, #15
 80035ec:	409a      	lsls	r2, r3
 80035ee:	0013      	movs	r3, r2
 80035f0:	43da      	mvns	r2, r3
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	4013      	ands	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	23a0      	movs	r3, #160	; 0xa0
 80035fc:	05db      	lsls	r3, r3, #23
 80035fe:	429a      	cmp	r2, r3
 8003600:	d01f      	beq.n	8003642 <HAL_GPIO_Init+0x1f6>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a4a      	ldr	r2, [pc, #296]	; (8003730 <HAL_GPIO_Init+0x2e4>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d019      	beq.n	800363e <HAL_GPIO_Init+0x1f2>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a49      	ldr	r2, [pc, #292]	; (8003734 <HAL_GPIO_Init+0x2e8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d013      	beq.n	800363a <HAL_GPIO_Init+0x1ee>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a48      	ldr	r2, [pc, #288]	; (8003738 <HAL_GPIO_Init+0x2ec>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d00d      	beq.n	8003636 <HAL_GPIO_Init+0x1ea>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a47      	ldr	r2, [pc, #284]	; (800373c <HAL_GPIO_Init+0x2f0>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d007      	beq.n	8003632 <HAL_GPIO_Init+0x1e6>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a46      	ldr	r2, [pc, #280]	; (8003740 <HAL_GPIO_Init+0x2f4>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d101      	bne.n	800362e <HAL_GPIO_Init+0x1e2>
 800362a:	2305      	movs	r3, #5
 800362c:	e00a      	b.n	8003644 <HAL_GPIO_Init+0x1f8>
 800362e:	2306      	movs	r3, #6
 8003630:	e008      	b.n	8003644 <HAL_GPIO_Init+0x1f8>
 8003632:	2304      	movs	r3, #4
 8003634:	e006      	b.n	8003644 <HAL_GPIO_Init+0x1f8>
 8003636:	2303      	movs	r3, #3
 8003638:	e004      	b.n	8003644 <HAL_GPIO_Init+0x1f8>
 800363a:	2302      	movs	r3, #2
 800363c:	e002      	b.n	8003644 <HAL_GPIO_Init+0x1f8>
 800363e:	2301      	movs	r3, #1
 8003640:	e000      	b.n	8003644 <HAL_GPIO_Init+0x1f8>
 8003642:	2300      	movs	r3, #0
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	2103      	movs	r1, #3
 8003648:	400a      	ands	r2, r1
 800364a:	0092      	lsls	r2, r2, #2
 800364c:	4093      	lsls	r3, r2
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003654:	4935      	ldr	r1, [pc, #212]	; (800372c <HAL_GPIO_Init+0x2e0>)
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	089b      	lsrs	r3, r3, #2
 800365a:	3302      	adds	r3, #2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003662:	4b38      	ldr	r3, [pc, #224]	; (8003744 <HAL_GPIO_Init+0x2f8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	43da      	mvns	r2, r3
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	4013      	ands	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	2380      	movs	r3, #128	; 0x80
 8003678:	025b      	lsls	r3, r3, #9
 800367a:	4013      	ands	r3, r2
 800367c:	d003      	beq.n	8003686 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4313      	orrs	r3, r2
 8003684:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003686:	4b2f      	ldr	r3, [pc, #188]	; (8003744 <HAL_GPIO_Init+0x2f8>)
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800368c:	4b2d      	ldr	r3, [pc, #180]	; (8003744 <HAL_GPIO_Init+0x2f8>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	43da      	mvns	r2, r3
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	4013      	ands	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	2380      	movs	r3, #128	; 0x80
 80036a2:	029b      	lsls	r3, r3, #10
 80036a4:	4013      	ands	r3, r2
 80036a6:	d003      	beq.n	80036b0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80036b0:	4b24      	ldr	r3, [pc, #144]	; (8003744 <HAL_GPIO_Init+0x2f8>)
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036b6:	4b23      	ldr	r3, [pc, #140]	; (8003744 <HAL_GPIO_Init+0x2f8>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	43da      	mvns	r2, r3
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	4013      	ands	r3, r2
 80036c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	2380      	movs	r3, #128	; 0x80
 80036cc:	035b      	lsls	r3, r3, #13
 80036ce:	4013      	ands	r3, r2
 80036d0:	d003      	beq.n	80036da <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80036da:	4b1a      	ldr	r3, [pc, #104]	; (8003744 <HAL_GPIO_Init+0x2f8>)
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80036e0:	4b18      	ldr	r3, [pc, #96]	; (8003744 <HAL_GPIO_Init+0x2f8>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	43da      	mvns	r2, r3
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	4013      	ands	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	2380      	movs	r3, #128	; 0x80
 80036f6:	039b      	lsls	r3, r3, #14
 80036f8:	4013      	ands	r3, r2
 80036fa:	d003      	beq.n	8003704 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	4313      	orrs	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003704:	4b0f      	ldr	r3, [pc, #60]	; (8003744 <HAL_GPIO_Init+0x2f8>)
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	3301      	adds	r3, #1
 800370e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	40da      	lsrs	r2, r3
 8003718:	1e13      	subs	r3, r2, #0
 800371a:	d000      	beq.n	800371e <HAL_GPIO_Init+0x2d2>
 800371c:	e6a2      	b.n	8003464 <HAL_GPIO_Init+0x18>
  }
}
 800371e:	46c0      	nop			; (mov r8, r8)
 8003720:	46bd      	mov	sp, r7
 8003722:	b006      	add	sp, #24
 8003724:	bd80      	pop	{r7, pc}
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	40021000 	.word	0x40021000
 800372c:	40010000 	.word	0x40010000
 8003730:	50000400 	.word	0x50000400
 8003734:	50000800 	.word	0x50000800
 8003738:	50000c00 	.word	0x50000c00
 800373c:	50001000 	.word	0x50001000
 8003740:	50001c00 	.word	0x50001c00
 8003744:	40010400 	.word	0x40010400

08003748 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	000a      	movs	r2, r1
 8003752:	1cbb      	adds	r3, r7, #2
 8003754:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	1cba      	adds	r2, r7, #2
 800375c:	8812      	ldrh	r2, [r2, #0]
 800375e:	4013      	ands	r3, r2
 8003760:	d004      	beq.n	800376c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003762:	230f      	movs	r3, #15
 8003764:	18fb      	adds	r3, r7, r3
 8003766:	2201      	movs	r2, #1
 8003768:	701a      	strb	r2, [r3, #0]
 800376a:	e003      	b.n	8003774 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800376c:	230f      	movs	r3, #15
 800376e:	18fb      	adds	r3, r7, r3
 8003770:	2200      	movs	r2, #0
 8003772:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003774:	230f      	movs	r3, #15
 8003776:	18fb      	adds	r3, r7, r3
 8003778:	781b      	ldrb	r3, [r3, #0]
}
 800377a:	0018      	movs	r0, r3
 800377c:	46bd      	mov	sp, r7
 800377e:	b004      	add	sp, #16
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b082      	sub	sp, #8
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
 800378a:	0008      	movs	r0, r1
 800378c:	0011      	movs	r1, r2
 800378e:	1cbb      	adds	r3, r7, #2
 8003790:	1c02      	adds	r2, r0, #0
 8003792:	801a      	strh	r2, [r3, #0]
 8003794:	1c7b      	adds	r3, r7, #1
 8003796:	1c0a      	adds	r2, r1, #0
 8003798:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 800379a:	1c7b      	adds	r3, r7, #1
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d004      	beq.n	80037ac <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037a2:	1cbb      	adds	r3, r7, #2
 80037a4:	881a      	ldrh	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80037aa:	e003      	b.n	80037b4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80037ac:	1cbb      	adds	r3, r7, #2
 80037ae:	881a      	ldrh	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037b4:	46c0      	nop			; (mov r8, r8)
 80037b6:	46bd      	mov	sp, r7
 80037b8:	b002      	add	sp, #8
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	000a      	movs	r2, r1
 80037c6:	1cbb      	adds	r3, r7, #2
 80037c8:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	695a      	ldr	r2, [r3, #20]
 80037ce:	1cbb      	adds	r3, r7, #2
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	405a      	eors	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	615a      	str	r2, [r3, #20]
}
 80037d8:	46c0      	nop			; (mov r8, r8)
 80037da:	46bd      	mov	sp, r7
 80037dc:	b002      	add	sp, #8
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	0002      	movs	r2, r0
 80037e8:	1dbb      	adds	r3, r7, #6
 80037ea:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80037ec:	4b09      	ldr	r3, [pc, #36]	; (8003814 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	1dba      	adds	r2, r7, #6
 80037f2:	8812      	ldrh	r2, [r2, #0]
 80037f4:	4013      	ands	r3, r2
 80037f6:	d008      	beq.n	800380a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037f8:	4b06      	ldr	r3, [pc, #24]	; (8003814 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80037fa:	1dba      	adds	r2, r7, #6
 80037fc:	8812      	ldrh	r2, [r2, #0]
 80037fe:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003800:	1dbb      	adds	r3, r7, #6
 8003802:	881b      	ldrh	r3, [r3, #0]
 8003804:	0018      	movs	r0, r3
 8003806:	f7fe fafd 	bl	8001e04 <HAL_GPIO_EXTI_Callback>
  }
}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	46bd      	mov	sp, r7
 800380e:	b002      	add	sp, #8
 8003810:	bd80      	pop	{r7, pc}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	40010400 	.word	0x40010400

08003818 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e06c      	b.n	8003904 <HAL_LPTIM_Init+0xec>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	222e      	movs	r2, #46	; 0x2e
 800382e:	5c9b      	ldrb	r3, [r3, r2]
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d107      	bne.n	8003846 <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	222d      	movs	r2, #45	; 0x2d
 800383a:	2100      	movs	r1, #0
 800383c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	0018      	movs	r0, r3
 8003842:	f7fe fe85 	bl	8002550 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	222e      	movs	r2, #46	; 0x2e
 800384a:	2102      	movs	r1, #2
 800384c:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d005      	beq.n	800386a <HAL_LPTIM_Init+0x52>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003862:	2380      	movs	r3, #128	; 0x80
 8003864:	041b      	lsls	r3, r3, #16
 8003866:	429a      	cmp	r2, r3
 8003868:	d103      	bne.n	8003872 <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	221e      	movs	r2, #30
 800386e:	4393      	bics	r3, r2
 8003870:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	4a25      	ldr	r2, [pc, #148]	; (800390c <HAL_LPTIM_Init+0xf4>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d003      	beq.n	8003884 <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4a24      	ldr	r2, [pc, #144]	; (8003910 <HAL_LPTIM_Init+0xf8>)
 8003880:	4013      	ands	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	4a23      	ldr	r2, [pc, #140]	; (8003914 <HAL_LPTIM_Init+0xfc>)
 8003888:	4013      	ands	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003894:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800389a:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80038a0:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80038a6:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d005      	beq.n	80038c2 <HAL_LPTIM_Init+0xaa>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038ba:	2380      	movs	r3, #128	; 0x80
 80038bc:	041b      	lsls	r3, r3, #16
 80038be:	429a      	cmp	r2, r3
 80038c0:	d107      	bne.n	80038d2 <HAL_LPTIM_Init+0xba>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80038ca:	4313      	orrs	r3, r2
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	4a0d      	ldr	r2, [pc, #52]	; (800390c <HAL_LPTIM_Init+0xf4>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d00a      	beq.n	80038f2 <HAL_LPTIM_Init+0xda>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80038e4:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80038ea:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	222e      	movs	r2, #46	; 0x2e
 80038fe:	2101      	movs	r1, #1
 8003900:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	0018      	movs	r0, r3
 8003906:	46bd      	mov	sp, r7
 8003908:	b004      	add	sp, #16
 800390a:	bd80      	pop	{r7, pc}
 800390c:	0000ffff 	.word	0x0000ffff
 8003910:	ffff1f3f 	.word	0xffff1f3f
 8003914:	ff19f1f8 	.word	0xff19f1f8

08003918 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	222e      	movs	r2, #46	; 0x2e
 8003926:	2102      	movs	r1, #2
 8003928:	5499      	strb	r1, [r3, r2]

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 800392a:	4b23      	ldr	r3, [pc, #140]	; (80039b8 <HAL_LPTIM_Counter_Start_IT+0xa0>)
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	4b22      	ldr	r3, [pc, #136]	; (80039b8 <HAL_LPTIM_Counter_Start_IT+0xa0>)
 8003930:	2180      	movs	r1, #128	; 0x80
 8003932:	0589      	lsls	r1, r1, #22
 8003934:	430a      	orrs	r2, r1
 8003936:	601a      	str	r2, [r3, #0]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM) && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d00d      	beq.n	800395c <HAL_LPTIM_Counter_Start_IT+0x44>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003944:	2380      	movs	r3, #128	; 0x80
 8003946:	041b      	lsls	r3, r3, #16
 8003948:	429a      	cmp	r2, r3
 800394a:	d107      	bne.n	800395c <HAL_LPTIM_Counter_Start_IT+0x44>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4919      	ldr	r1, [pc, #100]	; (80039bc <HAL_LPTIM_Counter_Start_IT+0xa4>)
 8003958:	400a      	ands	r2, r1
 800395a:	60da      	str	r2, [r3, #12]
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2110      	movs	r1, #16
 8003968:	430a      	orrs	r2, r1
 800396a:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2102      	movs	r1, #2
 8003978:	430a      	orrs	r2, r1
 800397a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	691a      	ldr	r2, [r3, #16]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2101      	movs	r1, #1
 8003988:	430a      	orrs	r2, r1
 800398a:	611a      	str	r2, [r3, #16]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	619a      	str	r2, [r3, #24]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691a      	ldr	r2, [r3, #16]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2104      	movs	r1, #4
 80039a0:	430a      	orrs	r2, r1
 80039a2:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	222e      	movs	r2, #46	; 0x2e
 80039a8:	2101      	movs	r1, #1
 80039aa:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	0018      	movs	r0, r3
 80039b0:	46bd      	mov	sp, r7
 80039b2:	b002      	add	sp, #8
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	46c0      	nop			; (mov r8, r8)
 80039b8:	40010400 	.word	0x40010400
 80039bc:	fffff1ff 	.word	0xfffff1ff

080039c0 <HAL_LPTIM_Counter_Stop_IT>:
  * @brief  Stop the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	222e      	movs	r2, #46	; 0x2e
 80039cc:	2102      	movs	r1, #2
 80039ce:	5499      	strb	r1, [r3, r2]

  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT();
 80039d0:	4b11      	ldr	r3, [pc, #68]	; (8003a18 <HAL_LPTIM_Counter_Stop_IT+0x58>)
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	4b10      	ldr	r3, [pc, #64]	; (8003a18 <HAL_LPTIM_Counter_Stop_IT+0x58>)
 80039d6:	4911      	ldr	r1, [pc, #68]	; (8003a1c <HAL_LPTIM_Counter_Stop_IT+0x5c>)
 80039d8:	400a      	ands	r2, r1
 80039da:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	0018      	movs	r0, r3
 80039e0:	f000 f8f0 	bl	8003bc4 <LPTIM_Disable>

  /* Disable Autoreload write complete interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689a      	ldr	r2, [r3, #8]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2110      	movs	r1, #16
 80039f0:	438a      	bics	r2, r1
 80039f2:	609a      	str	r2, [r3, #8]

  /* Disable Autoreload match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2102      	movs	r1, #2
 8003a00:	438a      	bics	r2, r1
 8003a02:	609a      	str	r2, [r3, #8]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	222e      	movs	r2, #46	; 0x2e
 8003a08:	2101      	movs	r1, #1
 8003a0a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	0018      	movs	r0, r3
 8003a10:	46bd      	mov	sp, r7
 8003a12:	b002      	add	sp, #8
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	46c0      	nop			; (mov r8, r8)
 8003a18:	40010400 	.word	0x40010400
 8003a1c:	dfffffff 	.word	0xdfffffff

08003a20 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	4013      	ands	r3, r2
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d10e      	bne.n	8003a54 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	4013      	ands	r3, r2
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d107      	bne.n	8003a54 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	0018      	movs	r0, r3
 8003a50:	f000 f888 	bl	8003b64 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d10e      	bne.n	8003a80 <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2202      	movs	r2, #2
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d107      	bne.n	8003a80 <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2202      	movs	r2, #2
 8003a76:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	f7fe ff50 	bl	8002920 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2204      	movs	r2, #4
 8003a88:	4013      	ands	r3, r2
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d10e      	bne.n	8003aac <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2204      	movs	r2, #4
 8003a96:	4013      	ands	r3, r2
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d107      	bne.n	8003aac <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2204      	movs	r2, #4
 8003aa2:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f000 f864 	bl	8003b74 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2208      	movs	r2, #8
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	2b08      	cmp	r3, #8
 8003ab8:	d10e      	bne.n	8003ad8 <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	2208      	movs	r2, #8
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d107      	bne.n	8003ad8 <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2208      	movs	r2, #8
 8003ace:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f000 f856 	bl	8003b84 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2210      	movs	r2, #16
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	2b10      	cmp	r3, #16
 8003ae4:	d10e      	bne.n	8003b04 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	2210      	movs	r2, #16
 8003aee:	4013      	ands	r3, r2
 8003af0:	2b10      	cmp	r3, #16
 8003af2:	d107      	bne.n	8003b04 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2210      	movs	r2, #16
 8003afa:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	0018      	movs	r0, r3
 8003b00:	f000 f848 	bl	8003b94 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	2b20      	cmp	r3, #32
 8003b10:	d10e      	bne.n	8003b30 <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b20      	cmp	r3, #32
 8003b1e:	d107      	bne.n	8003b30 <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2220      	movs	r2, #32
 8003b26:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	f000 f83a 	bl	8003ba4 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2240      	movs	r2, #64	; 0x40
 8003b38:	4013      	ands	r3, r2
 8003b3a:	2b40      	cmp	r3, #64	; 0x40
 8003b3c:	d10e      	bne.n	8003b5c <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	2240      	movs	r2, #64	; 0x40
 8003b46:	4013      	ands	r3, r2
 8003b48:	2b40      	cmp	r3, #64	; 0x40
 8003b4a:	d107      	bne.n	8003b5c <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2240      	movs	r2, #64	; 0x40
 8003b52:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	0018      	movs	r0, r3
 8003b58:	f000 f82c 	bl	8003bb4 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b5c:	46c0      	nop			; (mov r8, r8)
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	b002      	add	sp, #8
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8003b6c:	46c0      	nop			; (mov r8, r8)
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	b002      	add	sp, #8
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8003b7c:	46c0      	nop			; (mov r8, r8)
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	b002      	add	sp, #8
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8003b8c:	46c0      	nop			; (mov r8, r8)
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	b002      	add	sp, #8
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8003b9c:	46c0      	nop			; (mov r8, r8)
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	b002      	add	sp, #8
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8003bac:	46c0      	nop			; (mov r8, r8)
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	b002      	add	sp, #8
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8003bbc:	46c0      	nop			; (mov r8, r8)
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	b002      	add	sp, #8
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *lptim)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b08a      	sub	sp, #40	; 0x28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	627b      	str	r3, [r7, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003bd0:	b672      	cpsid	i

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)lptim->Instance)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	001a      	movs	r2, r3
 8003bd8:	4b5e      	ldr	r3, [pc, #376]	; (8003d54 <LPTIM_Disable+0x190>)
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d000      	beq.n	8003be0 <LPTIM_Disable+0x1c>
     case LPTIM2_BASE:
       tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
       break;
#endif /* LPTIM2 */
     default:
       break;
 8003bde:	e006      	b.n	8003bee <LPTIM_Disable+0x2a>
       tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003be0:	4b5d      	ldr	r3, [pc, #372]	; (8003d58 <LPTIM_Disable+0x194>)
 8003be2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003be4:	23c0      	movs	r3, #192	; 0xc0
 8003be6:	031b      	lsls	r3, r3, #12
 8003be8:	4013      	ands	r3, r2
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24
       break;
 8003bec:	46c0      	nop			; (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = lptim->Instance->IER;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	623b      	str	r3, [r7, #32]
  tmpCFGR = lptim->Instance->CFGR;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	61fb      	str	r3, [r7, #28]
  tmpCMP = lptim->Instance->CMP;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	61bb      	str	r3, [r7, #24]
  tmpARR = lptim->Instance->ARR;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)lptim->Instance)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	001a      	movs	r2, r3
 8003c14:	4b4f      	ldr	r3, [pc, #316]	; (8003d54 <LPTIM_Disable+0x190>)
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d000      	beq.n	8003c1c <LPTIM_Disable+0x58>
       __HAL_RCC_LPTIM2_FORCE_RESET();
       __HAL_RCC_LPTIM2_RELEASE_RESET();
       break;
#endif /* LPTIM2 */
     default:
       break;
 8003c1a:	e00d      	b.n	8003c38 <LPTIM_Disable+0x74>
       __HAL_RCC_LPTIM1_FORCE_RESET();
 8003c1c:	4b4e      	ldr	r3, [pc, #312]	; (8003d58 <LPTIM_Disable+0x194>)
 8003c1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c20:	4b4d      	ldr	r3, [pc, #308]	; (8003d58 <LPTIM_Disable+0x194>)
 8003c22:	2180      	movs	r1, #128	; 0x80
 8003c24:	0609      	lsls	r1, r1, #24
 8003c26:	430a      	orrs	r2, r1
 8003c28:	629a      	str	r2, [r3, #40]	; 0x28
       __HAL_RCC_LPTIM1_RELEASE_RESET();
 8003c2a:	4b4b      	ldr	r3, [pc, #300]	; (8003d58 <LPTIM_Disable+0x194>)
 8003c2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c2e:	4b4a      	ldr	r3, [pc, #296]	; (8003d58 <LPTIM_Disable+0x194>)
 8003c30:	0052      	lsls	r2, r2, #1
 8003c32:	0852      	lsrs	r2, r2, #1
 8003c34:	629a      	str	r2, [r3, #40]	; 0x28
       break;
 8003c36:	46c0      	nop			; (mov r8, r8)

  /*********** Restore LPTIM Config ***********/
  uint32_t Ref_Time;
  uint32_t Time_Elapsed;

  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d103      	bne.n	8003c46 <LPTIM_Disable+0x82>
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d100      	bne.n	8003c46 <LPTIM_Disable+0x82>
 8003c44:	e070      	b.n	8003d28 <LPTIM_Disable+0x164>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)lptim->Instance)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	001a      	movs	r2, r3
 8003c4c:	4b41      	ldr	r3, [pc, #260]	; (8003d54 <LPTIM_Disable+0x190>)
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d000      	beq.n	8003c54 <LPTIM_Disable+0x90>
       case LPTIM2_BASE:
         __HAL_RCC_LPTIM2_CONFIG(0UL);
         break;
#endif /* LPTIM2 */
       default:
         break;
 8003c52:	e006      	b.n	8003c62 <LPTIM_Disable+0x9e>
         __HAL_RCC_LPTIM1_CONFIG(0UL);
 8003c54:	4b40      	ldr	r3, [pc, #256]	; (8003d58 <LPTIM_Disable+0x194>)
 8003c56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c58:	4b3f      	ldr	r3, [pc, #252]	; (8003d58 <LPTIM_Disable+0x194>)
 8003c5a:	4940      	ldr	r1, [pc, #256]	; (8003d5c <LPTIM_Disable+0x198>)
 8003c5c:	400a      	ands	r2, r1
 8003c5e:	64da      	str	r2, [r3, #76]	; 0x4c
         break;
 8003c60:	46c0      	nop			; (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d025      	beq.n	8003cb4 <LPTIM_Disable+0xf0>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      lptim->Instance->CR |= LPTIM_CR_ENABLE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691a      	ldr	r2, [r3, #16]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2101      	movs	r1, #1
 8003c74:	430a      	orrs	r2, r1
 8003c76:	611a      	str	r2, [r3, #16]
      lptim->Instance->CMP = tmpCMP;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	615a      	str	r2, [r3, #20]
      /* Polling on CMP write ok status after above restore operation */
      Ref_Time = HAL_GetTick();
 8003c80:	f7fe ff42 	bl	8002b08 <HAL_GetTick>
 8003c84:	0003      	movs	r3, r0
 8003c86:	613b      	str	r3, [r7, #16]
      do
      {
        Time_Elapsed = HAL_GetTick() - Ref_Time;
 8003c88:	f7fe ff3e 	bl	8002b08 <HAL_GetTick>
 8003c8c:	0002      	movs	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	60fb      	str	r3, [r7, #12]
      } while ((!(__HAL_LPTIM_GET_FLAG(lptim, LPTIM_FLAG_CMPOK))) && (Time_Elapsed <= TIMEOUT));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2208      	movs	r2, #8
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d004      	beq.n	8003cac <LPTIM_Disable+0xe8>
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	23fa      	movs	r3, #250	; 0xfa
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d9ed      	bls.n	8003c88 <LPTIM_Disable+0xc4>

      __HAL_LPTIM_CLEAR_FLAG(lptim, LPTIM_FLAG_CMPOK);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2208      	movs	r2, #8
 8003cb2:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d025      	beq.n	8003d06 <LPTIM_Disable+0x142>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      lptim->Instance->CR |= LPTIM_CR_ENABLE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	691a      	ldr	r2, [r3, #16]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	611a      	str	r2, [r3, #16]
      lptim->Instance->ARR = tmpARR;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	619a      	str	r2, [r3, #24]
      /* Polling on ARR write ok status after above restore operation */
      Ref_Time = HAL_GetTick();
 8003cd2:	f7fe ff19 	bl	8002b08 <HAL_GetTick>
 8003cd6:	0003      	movs	r3, r0
 8003cd8:	613b      	str	r3, [r7, #16]
      do
      {
        Time_Elapsed = HAL_GetTick() - Ref_Time;
 8003cda:	f7fe ff15 	bl	8002b08 <HAL_GetTick>
 8003cde:	0002      	movs	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	60fb      	str	r3, [r7, #12]
      } while ((!(__HAL_LPTIM_GET_FLAG(lptim, LPTIM_FLAG_ARROK))) && (Time_Elapsed <= TIMEOUT));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2210      	movs	r2, #16
 8003cee:	4013      	ands	r3, r2
 8003cf0:	2b10      	cmp	r3, #16
 8003cf2:	d004      	beq.n	8003cfe <LPTIM_Disable+0x13a>
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	23fa      	movs	r3, #250	; 0xfa
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d9ed      	bls.n	8003cda <LPTIM_Disable+0x116>

      __HAL_LPTIM_CLEAR_FLAG(lptim, LPTIM_FLAG_ARROK);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2210      	movs	r2, #16
 8003d04:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)lptim->Instance)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	001a      	movs	r2, r3
 8003d0c:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <LPTIM_Disable+0x190>)
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d000      	beq.n	8003d14 <LPTIM_Disable+0x150>
       case LPTIM2_BASE:
         __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
         break;
#endif /* LPTIM2 */
       default:
         break;
 8003d12:	e00a      	b.n	8003d2a <LPTIM_Disable+0x166>
         __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8003d14:	4b10      	ldr	r3, [pc, #64]	; (8003d58 <LPTIM_Disable+0x194>)
 8003d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d18:	4a10      	ldr	r2, [pc, #64]	; (8003d5c <LPTIM_Disable+0x198>)
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	0019      	movs	r1, r3
 8003d1e:	4b0e      	ldr	r3, [pc, #56]	; (8003d58 <LPTIM_Disable+0x194>)
 8003d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d22:	430a      	orrs	r2, r1
 8003d24:	64da      	str	r2, [r3, #76]	; 0x4c
         break;
 8003d26:	e000      	b.n	8003d2a <LPTIM_Disable+0x166>
    }
  }
 8003d28:	46c0      	nop			; (mov r8, r8)

  /* Restore configuration registers (LPTIM should be disabled first) */
  lptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	691a      	ldr	r2, [r3, #16]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2101      	movs	r1, #1
 8003d36:	438a      	bics	r2, r1
 8003d38:	611a      	str	r2, [r3, #16]
  lptim->Instance->IER = tmpIER;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6a3a      	ldr	r2, [r7, #32]
 8003d40:	609a      	str	r2, [r3, #8]
  lptim->Instance->CFGR = tmpCFGR;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	69fa      	ldr	r2, [r7, #28]
 8003d48:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8003d4a:	b662      	cpsie	i

  __enable_irq();
}
 8003d4c:	46c0      	nop			; (mov r8, r8)
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	b00a      	add	sp, #40	; 0x28
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40007c00 	.word	0x40007c00
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	fff3ffff 	.word	0xfff3ffff

08003d60 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d64:	4b04      	ldr	r3, [pc, #16]	; (8003d78 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	4b03      	ldr	r3, [pc, #12]	; (8003d78 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003d6a:	2180      	movs	r1, #128	; 0x80
 8003d6c:	0049      	lsls	r1, r1, #1
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	601a      	str	r2, [r3, #0]
}
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	40007000 	.word	0x40007000

08003d7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d7c:	b5b0      	push	{r4, r5, r7, lr}
 8003d7e:	b08a      	sub	sp, #40	; 0x28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d102      	bne.n	8003d90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	f000 fbbc 	bl	8004508 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d90:	4bc8      	ldr	r3, [pc, #800]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	220c      	movs	r2, #12
 8003d96:	4013      	ands	r3, r2
 8003d98:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d9a:	4bc6      	ldr	r3, [pc, #792]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	2380      	movs	r3, #128	; 0x80
 8003da0:	025b      	lsls	r3, r3, #9
 8003da2:	4013      	ands	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2201      	movs	r2, #1
 8003dac:	4013      	ands	r3, r2
 8003dae:	d100      	bne.n	8003db2 <HAL_RCC_OscConfig+0x36>
 8003db0:	e07e      	b.n	8003eb0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	2b08      	cmp	r3, #8
 8003db6:	d007      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	2b0c      	cmp	r3, #12
 8003dbc:	d112      	bne.n	8003de4 <HAL_RCC_OscConfig+0x68>
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	2380      	movs	r3, #128	; 0x80
 8003dc2:	025b      	lsls	r3, r3, #9
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d10d      	bne.n	8003de4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc8:	4bba      	ldr	r3, [pc, #744]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	2380      	movs	r3, #128	; 0x80
 8003dce:	029b      	lsls	r3, r3, #10
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	d100      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x5a>
 8003dd4:	e06b      	b.n	8003eae <HAL_RCC_OscConfig+0x132>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d167      	bne.n	8003eae <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	f000 fb92 	bl	8004508 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	2380      	movs	r3, #128	; 0x80
 8003dea:	025b      	lsls	r3, r3, #9
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d107      	bne.n	8003e00 <HAL_RCC_OscConfig+0x84>
 8003df0:	4bb0      	ldr	r3, [pc, #704]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	4baf      	ldr	r3, [pc, #700]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 8003df6:	2180      	movs	r1, #128	; 0x80
 8003df8:	0249      	lsls	r1, r1, #9
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	e027      	b.n	8003e50 <HAL_RCC_OscConfig+0xd4>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	23a0      	movs	r3, #160	; 0xa0
 8003e06:	02db      	lsls	r3, r3, #11
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d10e      	bne.n	8003e2a <HAL_RCC_OscConfig+0xae>
 8003e0c:	4ba9      	ldr	r3, [pc, #676]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	4ba8      	ldr	r3, [pc, #672]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 8003e12:	2180      	movs	r1, #128	; 0x80
 8003e14:	02c9      	lsls	r1, r1, #11
 8003e16:	430a      	orrs	r2, r1
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	4ba6      	ldr	r3, [pc, #664]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	4ba5      	ldr	r3, [pc, #660]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 8003e20:	2180      	movs	r1, #128	; 0x80
 8003e22:	0249      	lsls	r1, r1, #9
 8003e24:	430a      	orrs	r2, r1
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	e012      	b.n	8003e50 <HAL_RCC_OscConfig+0xd4>
 8003e2a:	4ba2      	ldr	r3, [pc, #648]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	4ba1      	ldr	r3, [pc, #644]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 8003e30:	49a1      	ldr	r1, [pc, #644]	; (80040b8 <HAL_RCC_OscConfig+0x33c>)
 8003e32:	400a      	ands	r2, r1
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	4b9f      	ldr	r3, [pc, #636]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	2380      	movs	r3, #128	; 0x80
 8003e3c:	025b      	lsls	r3, r3, #9
 8003e3e:	4013      	ands	r3, r2
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4b9b      	ldr	r3, [pc, #620]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	4b9a      	ldr	r3, [pc, #616]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 8003e4a:	499c      	ldr	r1, [pc, #624]	; (80040bc <HAL_RCC_OscConfig+0x340>)
 8003e4c:	400a      	ands	r2, r1
 8003e4e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d015      	beq.n	8003e84 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e58:	f7fe fe56 	bl	8002b08 <HAL_GetTick>
 8003e5c:	0003      	movs	r3, r0
 8003e5e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e60:	e009      	b.n	8003e76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e62:	f7fe fe51 	bl	8002b08 <HAL_GetTick>
 8003e66:	0002      	movs	r2, r0
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b64      	cmp	r3, #100	; 0x64
 8003e6e:	d902      	bls.n	8003e76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	f000 fb49 	bl	8004508 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e76:	4b8f      	ldr	r3, [pc, #572]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	2380      	movs	r3, #128	; 0x80
 8003e7c:	029b      	lsls	r3, r3, #10
 8003e7e:	4013      	ands	r3, r2
 8003e80:	d0ef      	beq.n	8003e62 <HAL_RCC_OscConfig+0xe6>
 8003e82:	e015      	b.n	8003eb0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e84:	f7fe fe40 	bl	8002b08 <HAL_GetTick>
 8003e88:	0003      	movs	r3, r0
 8003e8a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e8e:	f7fe fe3b 	bl	8002b08 <HAL_GetTick>
 8003e92:	0002      	movs	r2, r0
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b64      	cmp	r3, #100	; 0x64
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e333      	b.n	8004508 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ea0:	4b84      	ldr	r3, [pc, #528]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	2380      	movs	r3, #128	; 0x80
 8003ea6:	029b      	lsls	r3, r3, #10
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	d1f0      	bne.n	8003e8e <HAL_RCC_OscConfig+0x112>
 8003eac:	e000      	b.n	8003eb0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	d100      	bne.n	8003ebc <HAL_RCC_OscConfig+0x140>
 8003eba:	e098      	b.n	8003fee <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d009      	beq.n	8003ede <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003eca:	4b7a      	ldr	r3, [pc, #488]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	4b79      	ldr	r3, [pc, #484]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 8003ed0:	2120      	movs	r1, #32
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	2220      	movs	r2, #32
 8003eda:	4393      	bics	r3, r2
 8003edc:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	2b04      	cmp	r3, #4
 8003ee2:	d005      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	2b0c      	cmp	r3, #12
 8003ee8:	d13d      	bne.n	8003f66 <HAL_RCC_OscConfig+0x1ea>
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d13a      	bne.n	8003f66 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003ef0:	4b70      	ldr	r3, [pc, #448]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2204      	movs	r2, #4
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	d004      	beq.n	8003f04 <HAL_RCC_OscConfig+0x188>
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e301      	b.n	8004508 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f04:	4b6b      	ldr	r3, [pc, #428]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	4a6d      	ldr	r2, [pc, #436]	; (80040c0 <HAL_RCC_OscConfig+0x344>)
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	0019      	movs	r1, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	021a      	lsls	r2, r3, #8
 8003f14:	4b67      	ldr	r3, [pc, #412]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 8003f16:	430a      	orrs	r2, r1
 8003f18:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003f1a:	4b66      	ldr	r3, [pc, #408]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2209      	movs	r2, #9
 8003f20:	4393      	bics	r3, r2
 8003f22:	0019      	movs	r1, r3
 8003f24:	4b63      	ldr	r3, [pc, #396]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 8003f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f2c:	f000 fc20 	bl	8004770 <HAL_RCC_GetSysClockFreq>
 8003f30:	0001      	movs	r1, r0
 8003f32:	4b60      	ldr	r3, [pc, #384]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	091b      	lsrs	r3, r3, #4
 8003f38:	220f      	movs	r2, #15
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	4a61      	ldr	r2, [pc, #388]	; (80040c4 <HAL_RCC_OscConfig+0x348>)
 8003f3e:	5cd3      	ldrb	r3, [r2, r3]
 8003f40:	000a      	movs	r2, r1
 8003f42:	40da      	lsrs	r2, r3
 8003f44:	4b60      	ldr	r3, [pc, #384]	; (80040c8 <HAL_RCC_OscConfig+0x34c>)
 8003f46:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8003f48:	2513      	movs	r5, #19
 8003f4a:	197c      	adds	r4, r7, r5
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	f7fe fda5 	bl	8002a9c <HAL_InitTick>
 8003f52:	0003      	movs	r3, r0
 8003f54:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003f56:	197b      	adds	r3, r7, r5
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d047      	beq.n	8003fee <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8003f5e:	2313      	movs	r3, #19
 8003f60:	18fb      	adds	r3, r7, r3
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	e2d0      	b.n	8004508 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d027      	beq.n	8003fbc <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003f6c:	4b51      	ldr	r3, [pc, #324]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2209      	movs	r2, #9
 8003f72:	4393      	bics	r3, r2
 8003f74:	0019      	movs	r1, r3
 8003f76:	4b4f      	ldr	r3, [pc, #316]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 8003f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7e:	f7fe fdc3 	bl	8002b08 <HAL_GetTick>
 8003f82:	0003      	movs	r3, r0
 8003f84:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f88:	f7fe fdbe 	bl	8002b08 <HAL_GetTick>
 8003f8c:	0002      	movs	r2, r0
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e2b6      	b.n	8004508 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f9a:	4b46      	ldr	r3, [pc, #280]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2204      	movs	r2, #4
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	d0f1      	beq.n	8003f88 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa4:	4b43      	ldr	r3, [pc, #268]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	4a45      	ldr	r2, [pc, #276]	; (80040c0 <HAL_RCC_OscConfig+0x344>)
 8003faa:	4013      	ands	r3, r2
 8003fac:	0019      	movs	r1, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	021a      	lsls	r2, r3, #8
 8003fb4:	4b3f      	ldr	r3, [pc, #252]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	605a      	str	r2, [r3, #4]
 8003fba:	e018      	b.n	8003fee <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fbc:	4b3d      	ldr	r3, [pc, #244]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	4b3c      	ldr	r3, [pc, #240]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	438a      	bics	r2, r1
 8003fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc8:	f7fe fd9e 	bl	8002b08 <HAL_GetTick>
 8003fcc:	0003      	movs	r3, r0
 8003fce:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fd2:	f7fe fd99 	bl	8002b08 <HAL_GetTick>
 8003fd6:	0002      	movs	r2, r0
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e291      	b.n	8004508 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fe4:	4b33      	ldr	r3, [pc, #204]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2204      	movs	r2, #4
 8003fea:	4013      	ands	r3, r2
 8003fec:	d1f1      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2210      	movs	r2, #16
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	d100      	bne.n	8003ffa <HAL_RCC_OscConfig+0x27e>
 8003ff8:	e09f      	b.n	800413a <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d13f      	bne.n	8004080 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004000:	4b2c      	ldr	r3, [pc, #176]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	2380      	movs	r3, #128	; 0x80
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4013      	ands	r3, r2
 800400a:	d005      	beq.n	8004018 <HAL_RCC_OscConfig+0x29c>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e277      	b.n	8004508 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004018:	4b26      	ldr	r3, [pc, #152]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	4a2b      	ldr	r2, [pc, #172]	; (80040cc <HAL_RCC_OscConfig+0x350>)
 800401e:	4013      	ands	r3, r2
 8004020:	0019      	movs	r1, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004026:	4b23      	ldr	r3, [pc, #140]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 8004028:	430a      	orrs	r2, r1
 800402a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800402c:	4b21      	ldr	r3, [pc, #132]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	021b      	lsls	r3, r3, #8
 8004032:	0a19      	lsrs	r1, r3, #8
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	061a      	lsls	r2, r3, #24
 800403a:	4b1e      	ldr	r3, [pc, #120]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 800403c:	430a      	orrs	r2, r1
 800403e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	0b5b      	lsrs	r3, r3, #13
 8004046:	3301      	adds	r3, #1
 8004048:	2280      	movs	r2, #128	; 0x80
 800404a:	0212      	lsls	r2, r2, #8
 800404c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800404e:	4b19      	ldr	r3, [pc, #100]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	091b      	lsrs	r3, r3, #4
 8004054:	210f      	movs	r1, #15
 8004056:	400b      	ands	r3, r1
 8004058:	491a      	ldr	r1, [pc, #104]	; (80040c4 <HAL_RCC_OscConfig+0x348>)
 800405a:	5ccb      	ldrb	r3, [r1, r3]
 800405c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800405e:	4b1a      	ldr	r3, [pc, #104]	; (80040c8 <HAL_RCC_OscConfig+0x34c>)
 8004060:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8004062:	2513      	movs	r5, #19
 8004064:	197c      	adds	r4, r7, r5
 8004066:	2000      	movs	r0, #0
 8004068:	f7fe fd18 	bl	8002a9c <HAL_InitTick>
 800406c:	0003      	movs	r3, r0
 800406e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004070:	197b      	adds	r3, r7, r5
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d060      	beq.n	800413a <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8004078:	2313      	movs	r3, #19
 800407a:	18fb      	adds	r3, r7, r3
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	e243      	b.n	8004508 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	69db      	ldr	r3, [r3, #28]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d03e      	beq.n	8004106 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004088:	4b0a      	ldr	r3, [pc, #40]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	4b09      	ldr	r3, [pc, #36]	; (80040b4 <HAL_RCC_OscConfig+0x338>)
 800408e:	2180      	movs	r1, #128	; 0x80
 8004090:	0049      	lsls	r1, r1, #1
 8004092:	430a      	orrs	r2, r1
 8004094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004096:	f7fe fd37 	bl	8002b08 <HAL_GetTick>
 800409a:	0003      	movs	r3, r0
 800409c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800409e:	e017      	b.n	80040d0 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040a0:	f7fe fd32 	bl	8002b08 <HAL_GetTick>
 80040a4:	0002      	movs	r2, r0
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d910      	bls.n	80040d0 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e22a      	b.n	8004508 <HAL_RCC_OscConfig+0x78c>
 80040b2:	46c0      	nop			; (mov r8, r8)
 80040b4:	40021000 	.word	0x40021000
 80040b8:	fffeffff 	.word	0xfffeffff
 80040bc:	fffbffff 	.word	0xfffbffff
 80040c0:	ffffe0ff 	.word	0xffffe0ff
 80040c4:	08007860 	.word	0x08007860
 80040c8:	20000000 	.word	0x20000000
 80040cc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80040d0:	4bc6      	ldr	r3, [pc, #792]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	2380      	movs	r3, #128	; 0x80
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4013      	ands	r3, r2
 80040da:	d0e1      	beq.n	80040a0 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040dc:	4bc3      	ldr	r3, [pc, #780]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	4ac3      	ldr	r2, [pc, #780]	; (80043f0 <HAL_RCC_OscConfig+0x674>)
 80040e2:	4013      	ands	r3, r2
 80040e4:	0019      	movs	r1, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040ea:	4bc0      	ldr	r3, [pc, #768]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 80040ec:	430a      	orrs	r2, r1
 80040ee:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040f0:	4bbe      	ldr	r3, [pc, #760]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	021b      	lsls	r3, r3, #8
 80040f6:	0a19      	lsrs	r1, r3, #8
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	061a      	lsls	r2, r3, #24
 80040fe:	4bbb      	ldr	r3, [pc, #748]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 8004100:	430a      	orrs	r2, r1
 8004102:	605a      	str	r2, [r3, #4]
 8004104:	e019      	b.n	800413a <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004106:	4bb9      	ldr	r3, [pc, #740]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	4bb8      	ldr	r3, [pc, #736]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 800410c:	49b9      	ldr	r1, [pc, #740]	; (80043f4 <HAL_RCC_OscConfig+0x678>)
 800410e:	400a      	ands	r2, r1
 8004110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004112:	f7fe fcf9 	bl	8002b08 <HAL_GetTick>
 8004116:	0003      	movs	r3, r0
 8004118:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800411c:	f7fe fcf4 	bl	8002b08 <HAL_GetTick>
 8004120:	0002      	movs	r2, r0
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e1ec      	b.n	8004508 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800412e:	4baf      	ldr	r3, [pc, #700]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	2380      	movs	r3, #128	; 0x80
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4013      	ands	r3, r2
 8004138:	d1f0      	bne.n	800411c <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2208      	movs	r2, #8
 8004140:	4013      	ands	r3, r2
 8004142:	d036      	beq.n	80041b2 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d019      	beq.n	8004180 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800414c:	4ba7      	ldr	r3, [pc, #668]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 800414e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004150:	4ba6      	ldr	r3, [pc, #664]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 8004152:	2101      	movs	r1, #1
 8004154:	430a      	orrs	r2, r1
 8004156:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004158:	f7fe fcd6 	bl	8002b08 <HAL_GetTick>
 800415c:	0003      	movs	r3, r0
 800415e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004160:	e008      	b.n	8004174 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004162:	f7fe fcd1 	bl	8002b08 <HAL_GetTick>
 8004166:	0002      	movs	r2, r0
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e1c9      	b.n	8004508 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004174:	4b9d      	ldr	r3, [pc, #628]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 8004176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004178:	2202      	movs	r2, #2
 800417a:	4013      	ands	r3, r2
 800417c:	d0f1      	beq.n	8004162 <HAL_RCC_OscConfig+0x3e6>
 800417e:	e018      	b.n	80041b2 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004180:	4b9a      	ldr	r3, [pc, #616]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 8004182:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004184:	4b99      	ldr	r3, [pc, #612]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 8004186:	2101      	movs	r1, #1
 8004188:	438a      	bics	r2, r1
 800418a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800418c:	f7fe fcbc 	bl	8002b08 <HAL_GetTick>
 8004190:	0003      	movs	r3, r0
 8004192:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004196:	f7fe fcb7 	bl	8002b08 <HAL_GetTick>
 800419a:	0002      	movs	r2, r0
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e1af      	b.n	8004508 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041a8:	4b90      	ldr	r3, [pc, #576]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 80041aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ac:	2202      	movs	r2, #2
 80041ae:	4013      	ands	r3, r2
 80041b0:	d1f1      	bne.n	8004196 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2204      	movs	r2, #4
 80041b8:	4013      	ands	r3, r2
 80041ba:	d100      	bne.n	80041be <HAL_RCC_OscConfig+0x442>
 80041bc:	e0af      	b.n	800431e <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041be:	2323      	movs	r3, #35	; 0x23
 80041c0:	18fb      	adds	r3, r7, r3
 80041c2:	2200      	movs	r2, #0
 80041c4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041c6:	4b89      	ldr	r3, [pc, #548]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 80041c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041ca:	2380      	movs	r3, #128	; 0x80
 80041cc:	055b      	lsls	r3, r3, #21
 80041ce:	4013      	ands	r3, r2
 80041d0:	d10a      	bne.n	80041e8 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041d2:	4b86      	ldr	r3, [pc, #536]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 80041d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041d6:	4b85      	ldr	r3, [pc, #532]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 80041d8:	2180      	movs	r1, #128	; 0x80
 80041da:	0549      	lsls	r1, r1, #21
 80041dc:	430a      	orrs	r2, r1
 80041de:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80041e0:	2323      	movs	r3, #35	; 0x23
 80041e2:	18fb      	adds	r3, r7, r3
 80041e4:	2201      	movs	r2, #1
 80041e6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e8:	4b83      	ldr	r3, [pc, #524]	; (80043f8 <HAL_RCC_OscConfig+0x67c>)
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	2380      	movs	r3, #128	; 0x80
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	4013      	ands	r3, r2
 80041f2:	d11a      	bne.n	800422a <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041f4:	4b80      	ldr	r3, [pc, #512]	; (80043f8 <HAL_RCC_OscConfig+0x67c>)
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	4b7f      	ldr	r3, [pc, #508]	; (80043f8 <HAL_RCC_OscConfig+0x67c>)
 80041fa:	2180      	movs	r1, #128	; 0x80
 80041fc:	0049      	lsls	r1, r1, #1
 80041fe:	430a      	orrs	r2, r1
 8004200:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004202:	f7fe fc81 	bl	8002b08 <HAL_GetTick>
 8004206:	0003      	movs	r3, r0
 8004208:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800420c:	f7fe fc7c 	bl	8002b08 <HAL_GetTick>
 8004210:	0002      	movs	r2, r0
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b64      	cmp	r3, #100	; 0x64
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e174      	b.n	8004508 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800421e:	4b76      	ldr	r3, [pc, #472]	; (80043f8 <HAL_RCC_OscConfig+0x67c>)
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	2380      	movs	r3, #128	; 0x80
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	4013      	ands	r3, r2
 8004228:	d0f0      	beq.n	800420c <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689a      	ldr	r2, [r3, #8]
 800422e:	2380      	movs	r3, #128	; 0x80
 8004230:	005b      	lsls	r3, r3, #1
 8004232:	429a      	cmp	r2, r3
 8004234:	d107      	bne.n	8004246 <HAL_RCC_OscConfig+0x4ca>
 8004236:	4b6d      	ldr	r3, [pc, #436]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 8004238:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800423a:	4b6c      	ldr	r3, [pc, #432]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 800423c:	2180      	movs	r1, #128	; 0x80
 800423e:	0049      	lsls	r1, r1, #1
 8004240:	430a      	orrs	r2, r1
 8004242:	651a      	str	r2, [r3, #80]	; 0x50
 8004244:	e031      	b.n	80042aa <HAL_RCC_OscConfig+0x52e>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10c      	bne.n	8004268 <HAL_RCC_OscConfig+0x4ec>
 800424e:	4b67      	ldr	r3, [pc, #412]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 8004250:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004252:	4b66      	ldr	r3, [pc, #408]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 8004254:	4967      	ldr	r1, [pc, #412]	; (80043f4 <HAL_RCC_OscConfig+0x678>)
 8004256:	400a      	ands	r2, r1
 8004258:	651a      	str	r2, [r3, #80]	; 0x50
 800425a:	4b64      	ldr	r3, [pc, #400]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 800425c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800425e:	4b63      	ldr	r3, [pc, #396]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 8004260:	4966      	ldr	r1, [pc, #408]	; (80043fc <HAL_RCC_OscConfig+0x680>)
 8004262:	400a      	ands	r2, r1
 8004264:	651a      	str	r2, [r3, #80]	; 0x50
 8004266:	e020      	b.n	80042aa <HAL_RCC_OscConfig+0x52e>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689a      	ldr	r2, [r3, #8]
 800426c:	23a0      	movs	r3, #160	; 0xa0
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	429a      	cmp	r2, r3
 8004272:	d10e      	bne.n	8004292 <HAL_RCC_OscConfig+0x516>
 8004274:	4b5d      	ldr	r3, [pc, #372]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 8004276:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004278:	4b5c      	ldr	r3, [pc, #368]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 800427a:	2180      	movs	r1, #128	; 0x80
 800427c:	00c9      	lsls	r1, r1, #3
 800427e:	430a      	orrs	r2, r1
 8004280:	651a      	str	r2, [r3, #80]	; 0x50
 8004282:	4b5a      	ldr	r3, [pc, #360]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 8004284:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004286:	4b59      	ldr	r3, [pc, #356]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 8004288:	2180      	movs	r1, #128	; 0x80
 800428a:	0049      	lsls	r1, r1, #1
 800428c:	430a      	orrs	r2, r1
 800428e:	651a      	str	r2, [r3, #80]	; 0x50
 8004290:	e00b      	b.n	80042aa <HAL_RCC_OscConfig+0x52e>
 8004292:	4b56      	ldr	r3, [pc, #344]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 8004294:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004296:	4b55      	ldr	r3, [pc, #340]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 8004298:	4956      	ldr	r1, [pc, #344]	; (80043f4 <HAL_RCC_OscConfig+0x678>)
 800429a:	400a      	ands	r2, r1
 800429c:	651a      	str	r2, [r3, #80]	; 0x50
 800429e:	4b53      	ldr	r3, [pc, #332]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 80042a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042a2:	4b52      	ldr	r3, [pc, #328]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 80042a4:	4955      	ldr	r1, [pc, #340]	; (80043fc <HAL_RCC_OscConfig+0x680>)
 80042a6:	400a      	ands	r2, r1
 80042a8:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d015      	beq.n	80042de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042b2:	f7fe fc29 	bl	8002b08 <HAL_GetTick>
 80042b6:	0003      	movs	r3, r0
 80042b8:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042ba:	e009      	b.n	80042d0 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042bc:	f7fe fc24 	bl	8002b08 <HAL_GetTick>
 80042c0:	0002      	movs	r2, r0
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	4a4e      	ldr	r2, [pc, #312]	; (8004400 <HAL_RCC_OscConfig+0x684>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e11b      	b.n	8004508 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042d0:	4b46      	ldr	r3, [pc, #280]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 80042d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042d4:	2380      	movs	r3, #128	; 0x80
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4013      	ands	r3, r2
 80042da:	d0ef      	beq.n	80042bc <HAL_RCC_OscConfig+0x540>
 80042dc:	e014      	b.n	8004308 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042de:	f7fe fc13 	bl	8002b08 <HAL_GetTick>
 80042e2:	0003      	movs	r3, r0
 80042e4:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042e6:	e009      	b.n	80042fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042e8:	f7fe fc0e 	bl	8002b08 <HAL_GetTick>
 80042ec:	0002      	movs	r2, r0
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	4a43      	ldr	r2, [pc, #268]	; (8004400 <HAL_RCC_OscConfig+0x684>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e105      	b.n	8004508 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042fc:	4b3b      	ldr	r3, [pc, #236]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 80042fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004300:	2380      	movs	r3, #128	; 0x80
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4013      	ands	r3, r2
 8004306:	d1ef      	bne.n	80042e8 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004308:	2323      	movs	r3, #35	; 0x23
 800430a:	18fb      	adds	r3, r7, r3
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d105      	bne.n	800431e <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004312:	4b36      	ldr	r3, [pc, #216]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 8004314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004316:	4b35      	ldr	r3, [pc, #212]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 8004318:	493a      	ldr	r1, [pc, #232]	; (8004404 <HAL_RCC_OscConfig+0x688>)
 800431a:	400a      	ands	r2, r1
 800431c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2220      	movs	r2, #32
 8004324:	4013      	ands	r3, r2
 8004326:	d049      	beq.n	80043bc <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d026      	beq.n	800437e <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004330:	4b2e      	ldr	r3, [pc, #184]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 8004332:	689a      	ldr	r2, [r3, #8]
 8004334:	4b2d      	ldr	r3, [pc, #180]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 8004336:	2101      	movs	r1, #1
 8004338:	430a      	orrs	r2, r1
 800433a:	609a      	str	r2, [r3, #8]
 800433c:	4b2b      	ldr	r3, [pc, #172]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 800433e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004340:	4b2a      	ldr	r3, [pc, #168]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 8004342:	2101      	movs	r1, #1
 8004344:	430a      	orrs	r2, r1
 8004346:	635a      	str	r2, [r3, #52]	; 0x34
 8004348:	4b2f      	ldr	r3, [pc, #188]	; (8004408 <HAL_RCC_OscConfig+0x68c>)
 800434a:	6a1a      	ldr	r2, [r3, #32]
 800434c:	4b2e      	ldr	r3, [pc, #184]	; (8004408 <HAL_RCC_OscConfig+0x68c>)
 800434e:	2180      	movs	r1, #128	; 0x80
 8004350:	0189      	lsls	r1, r1, #6
 8004352:	430a      	orrs	r2, r1
 8004354:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004356:	f7fe fbd7 	bl	8002b08 <HAL_GetTick>
 800435a:	0003      	movs	r3, r0
 800435c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004360:	f7fe fbd2 	bl	8002b08 <HAL_GetTick>
 8004364:	0002      	movs	r2, r0
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e0ca      	b.n	8004508 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004372:	4b1e      	ldr	r3, [pc, #120]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	2202      	movs	r2, #2
 8004378:	4013      	ands	r3, r2
 800437a:	d0f1      	beq.n	8004360 <HAL_RCC_OscConfig+0x5e4>
 800437c:	e01e      	b.n	80043bc <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800437e:	4b1b      	ldr	r3, [pc, #108]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	4b1a      	ldr	r3, [pc, #104]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 8004384:	2101      	movs	r1, #1
 8004386:	438a      	bics	r2, r1
 8004388:	609a      	str	r2, [r3, #8]
 800438a:	4b1f      	ldr	r3, [pc, #124]	; (8004408 <HAL_RCC_OscConfig+0x68c>)
 800438c:	6a1a      	ldr	r2, [r3, #32]
 800438e:	4b1e      	ldr	r3, [pc, #120]	; (8004408 <HAL_RCC_OscConfig+0x68c>)
 8004390:	491e      	ldr	r1, [pc, #120]	; (800440c <HAL_RCC_OscConfig+0x690>)
 8004392:	400a      	ands	r2, r1
 8004394:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004396:	f7fe fbb7 	bl	8002b08 <HAL_GetTick>
 800439a:	0003      	movs	r3, r0
 800439c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043a0:	f7fe fbb2 	bl	8002b08 <HAL_GetTick>
 80043a4:	0002      	movs	r2, r0
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e0aa      	b.n	8004508 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80043b2:	4b0e      	ldr	r3, [pc, #56]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	2202      	movs	r2, #2
 80043b8:	4013      	ands	r3, r2
 80043ba:	d1f1      	bne.n	80043a0 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d100      	bne.n	80043c6 <HAL_RCC_OscConfig+0x64a>
 80043c4:	e09f      	b.n	8004506 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	2b0c      	cmp	r3, #12
 80043ca:	d100      	bne.n	80043ce <HAL_RCC_OscConfig+0x652>
 80043cc:	e078      	b.n	80044c0 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d159      	bne.n	800448a <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d6:	4b05      	ldr	r3, [pc, #20]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	4b04      	ldr	r3, [pc, #16]	; (80043ec <HAL_RCC_OscConfig+0x670>)
 80043dc:	490c      	ldr	r1, [pc, #48]	; (8004410 <HAL_RCC_OscConfig+0x694>)
 80043de:	400a      	ands	r2, r1
 80043e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e2:	f7fe fb91 	bl	8002b08 <HAL_GetTick>
 80043e6:	0003      	movs	r3, r0
 80043e8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80043ea:	e01c      	b.n	8004426 <HAL_RCC_OscConfig+0x6aa>
 80043ec:	40021000 	.word	0x40021000
 80043f0:	ffff1fff 	.word	0xffff1fff
 80043f4:	fffffeff 	.word	0xfffffeff
 80043f8:	40007000 	.word	0x40007000
 80043fc:	fffffbff 	.word	0xfffffbff
 8004400:	00001388 	.word	0x00001388
 8004404:	efffffff 	.word	0xefffffff
 8004408:	40010000 	.word	0x40010000
 800440c:	ffffdfff 	.word	0xffffdfff
 8004410:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004414:	f7fe fb78 	bl	8002b08 <HAL_GetTick>
 8004418:	0002      	movs	r2, r0
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e070      	b.n	8004508 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004426:	4b3a      	ldr	r3, [pc, #232]	; (8004510 <HAL_RCC_OscConfig+0x794>)
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	2380      	movs	r3, #128	; 0x80
 800442c:	049b      	lsls	r3, r3, #18
 800442e:	4013      	ands	r3, r2
 8004430:	d1f0      	bne.n	8004414 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004432:	4b37      	ldr	r3, [pc, #220]	; (8004510 <HAL_RCC_OscConfig+0x794>)
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	4a37      	ldr	r2, [pc, #220]	; (8004514 <HAL_RCC_OscConfig+0x798>)
 8004438:	4013      	ands	r3, r2
 800443a:	0019      	movs	r1, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004444:	431a      	orrs	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800444a:	431a      	orrs	r2, r3
 800444c:	4b30      	ldr	r3, [pc, #192]	; (8004510 <HAL_RCC_OscConfig+0x794>)
 800444e:	430a      	orrs	r2, r1
 8004450:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004452:	4b2f      	ldr	r3, [pc, #188]	; (8004510 <HAL_RCC_OscConfig+0x794>)
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	4b2e      	ldr	r3, [pc, #184]	; (8004510 <HAL_RCC_OscConfig+0x794>)
 8004458:	2180      	movs	r1, #128	; 0x80
 800445a:	0449      	lsls	r1, r1, #17
 800445c:	430a      	orrs	r2, r1
 800445e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004460:	f7fe fb52 	bl	8002b08 <HAL_GetTick>
 8004464:	0003      	movs	r3, r0
 8004466:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004468:	e008      	b.n	800447c <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800446a:	f7fe fb4d 	bl	8002b08 <HAL_GetTick>
 800446e:	0002      	movs	r2, r0
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d901      	bls.n	800447c <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e045      	b.n	8004508 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800447c:	4b24      	ldr	r3, [pc, #144]	; (8004510 <HAL_RCC_OscConfig+0x794>)
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	2380      	movs	r3, #128	; 0x80
 8004482:	049b      	lsls	r3, r3, #18
 8004484:	4013      	ands	r3, r2
 8004486:	d0f0      	beq.n	800446a <HAL_RCC_OscConfig+0x6ee>
 8004488:	e03d      	b.n	8004506 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800448a:	4b21      	ldr	r3, [pc, #132]	; (8004510 <HAL_RCC_OscConfig+0x794>)
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	4b20      	ldr	r3, [pc, #128]	; (8004510 <HAL_RCC_OscConfig+0x794>)
 8004490:	4921      	ldr	r1, [pc, #132]	; (8004518 <HAL_RCC_OscConfig+0x79c>)
 8004492:	400a      	ands	r2, r1
 8004494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004496:	f7fe fb37 	bl	8002b08 <HAL_GetTick>
 800449a:	0003      	movs	r3, r0
 800449c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044a0:	f7fe fb32 	bl	8002b08 <HAL_GetTick>
 80044a4:	0002      	movs	r2, r0
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e02a      	b.n	8004508 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80044b2:	4b17      	ldr	r3, [pc, #92]	; (8004510 <HAL_RCC_OscConfig+0x794>)
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	2380      	movs	r3, #128	; 0x80
 80044b8:	049b      	lsls	r3, r3, #18
 80044ba:	4013      	ands	r3, r2
 80044bc:	d1f0      	bne.n	80044a0 <HAL_RCC_OscConfig+0x724>
 80044be:	e022      	b.n	8004506 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d101      	bne.n	80044cc <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e01d      	b.n	8004508 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80044cc:	4b10      	ldr	r3, [pc, #64]	; (8004510 <HAL_RCC_OscConfig+0x794>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	2380      	movs	r3, #128	; 0x80
 80044d6:	025b      	lsls	r3, r3, #9
 80044d8:	401a      	ands	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044de:	429a      	cmp	r2, r3
 80044e0:	d10f      	bne.n	8004502 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	23f0      	movs	r3, #240	; 0xf0
 80044e6:	039b      	lsls	r3, r3, #14
 80044e8:	401a      	ands	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d107      	bne.n	8004502 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	23c0      	movs	r3, #192	; 0xc0
 80044f6:	041b      	lsls	r3, r3, #16
 80044f8:	401a      	ands	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80044fe:	429a      	cmp	r2, r3
 8004500:	d001      	beq.n	8004506 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e000      	b.n	8004508 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	0018      	movs	r0, r3
 800450a:	46bd      	mov	sp, r7
 800450c:	b00a      	add	sp, #40	; 0x28
 800450e:	bdb0      	pop	{r4, r5, r7, pc}
 8004510:	40021000 	.word	0x40021000
 8004514:	ff02ffff 	.word	0xff02ffff
 8004518:	feffffff 	.word	0xfeffffff

0800451c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800451c:	b5b0      	push	{r4, r5, r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e10d      	b.n	800474c <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004530:	4b88      	ldr	r3, [pc, #544]	; (8004754 <HAL_RCC_ClockConfig+0x238>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2201      	movs	r2, #1
 8004536:	4013      	ands	r3, r2
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d911      	bls.n	8004562 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800453e:	4b85      	ldr	r3, [pc, #532]	; (8004754 <HAL_RCC_ClockConfig+0x238>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2201      	movs	r2, #1
 8004544:	4393      	bics	r3, r2
 8004546:	0019      	movs	r1, r3
 8004548:	4b82      	ldr	r3, [pc, #520]	; (8004754 <HAL_RCC_ClockConfig+0x238>)
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004550:	4b80      	ldr	r3, [pc, #512]	; (8004754 <HAL_RCC_ClockConfig+0x238>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2201      	movs	r2, #1
 8004556:	4013      	ands	r3, r2
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	429a      	cmp	r2, r3
 800455c:	d001      	beq.n	8004562 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e0f4      	b.n	800474c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2202      	movs	r2, #2
 8004568:	4013      	ands	r3, r2
 800456a:	d009      	beq.n	8004580 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800456c:	4b7a      	ldr	r3, [pc, #488]	; (8004758 <HAL_RCC_ClockConfig+0x23c>)
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	22f0      	movs	r2, #240	; 0xf0
 8004572:	4393      	bics	r3, r2
 8004574:	0019      	movs	r1, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689a      	ldr	r2, [r3, #8]
 800457a:	4b77      	ldr	r3, [pc, #476]	; (8004758 <HAL_RCC_ClockConfig+0x23c>)
 800457c:	430a      	orrs	r2, r1
 800457e:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2201      	movs	r2, #1
 8004586:	4013      	ands	r3, r2
 8004588:	d100      	bne.n	800458c <HAL_RCC_ClockConfig+0x70>
 800458a:	e089      	b.n	80046a0 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	2b02      	cmp	r3, #2
 8004592:	d107      	bne.n	80045a4 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004594:	4b70      	ldr	r3, [pc, #448]	; (8004758 <HAL_RCC_ClockConfig+0x23c>)
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	2380      	movs	r3, #128	; 0x80
 800459a:	029b      	lsls	r3, r3, #10
 800459c:	4013      	ands	r3, r2
 800459e:	d120      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e0d3      	b.n	800474c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	2b03      	cmp	r3, #3
 80045aa:	d107      	bne.n	80045bc <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045ac:	4b6a      	ldr	r3, [pc, #424]	; (8004758 <HAL_RCC_ClockConfig+0x23c>)
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	2380      	movs	r3, #128	; 0x80
 80045b2:	049b      	lsls	r3, r3, #18
 80045b4:	4013      	ands	r3, r2
 80045b6:	d114      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e0c7      	b.n	800474c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d106      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045c4:	4b64      	ldr	r3, [pc, #400]	; (8004758 <HAL_RCC_ClockConfig+0x23c>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2204      	movs	r2, #4
 80045ca:	4013      	ands	r3, r2
 80045cc:	d109      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e0bc      	b.n	800474c <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80045d2:	4b61      	ldr	r3, [pc, #388]	; (8004758 <HAL_RCC_ClockConfig+0x23c>)
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	2380      	movs	r3, #128	; 0x80
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4013      	ands	r3, r2
 80045dc:	d101      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e0b4      	b.n	800474c <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045e2:	4b5d      	ldr	r3, [pc, #372]	; (8004758 <HAL_RCC_ClockConfig+0x23c>)
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	2203      	movs	r2, #3
 80045e8:	4393      	bics	r3, r2
 80045ea:	0019      	movs	r1, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	4b59      	ldr	r3, [pc, #356]	; (8004758 <HAL_RCC_ClockConfig+0x23c>)
 80045f2:	430a      	orrs	r2, r1
 80045f4:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045f6:	f7fe fa87 	bl	8002b08 <HAL_GetTick>
 80045fa:	0003      	movs	r3, r0
 80045fc:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2b02      	cmp	r3, #2
 8004604:	d111      	bne.n	800462a <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004606:	e009      	b.n	800461c <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004608:	f7fe fa7e 	bl	8002b08 <HAL_GetTick>
 800460c:	0002      	movs	r2, r0
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	4a52      	ldr	r2, [pc, #328]	; (800475c <HAL_RCC_ClockConfig+0x240>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d901      	bls.n	800461c <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e097      	b.n	800474c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800461c:	4b4e      	ldr	r3, [pc, #312]	; (8004758 <HAL_RCC_ClockConfig+0x23c>)
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	220c      	movs	r2, #12
 8004622:	4013      	ands	r3, r2
 8004624:	2b08      	cmp	r3, #8
 8004626:	d1ef      	bne.n	8004608 <HAL_RCC_ClockConfig+0xec>
 8004628:	e03a      	b.n	80046a0 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2b03      	cmp	r3, #3
 8004630:	d111      	bne.n	8004656 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004632:	e009      	b.n	8004648 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004634:	f7fe fa68 	bl	8002b08 <HAL_GetTick>
 8004638:	0002      	movs	r2, r0
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	4a47      	ldr	r2, [pc, #284]	; (800475c <HAL_RCC_ClockConfig+0x240>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e081      	b.n	800474c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004648:	4b43      	ldr	r3, [pc, #268]	; (8004758 <HAL_RCC_ClockConfig+0x23c>)
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	220c      	movs	r2, #12
 800464e:	4013      	ands	r3, r2
 8004650:	2b0c      	cmp	r3, #12
 8004652:	d1ef      	bne.n	8004634 <HAL_RCC_ClockConfig+0x118>
 8004654:	e024      	b.n	80046a0 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d11b      	bne.n	8004696 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800465e:	e009      	b.n	8004674 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004660:	f7fe fa52 	bl	8002b08 <HAL_GetTick>
 8004664:	0002      	movs	r2, r0
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	4a3c      	ldr	r2, [pc, #240]	; (800475c <HAL_RCC_ClockConfig+0x240>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d901      	bls.n	8004674 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e06b      	b.n	800474c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004674:	4b38      	ldr	r3, [pc, #224]	; (8004758 <HAL_RCC_ClockConfig+0x23c>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	220c      	movs	r2, #12
 800467a:	4013      	ands	r3, r2
 800467c:	2b04      	cmp	r3, #4
 800467e:	d1ef      	bne.n	8004660 <HAL_RCC_ClockConfig+0x144>
 8004680:	e00e      	b.n	80046a0 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004682:	f7fe fa41 	bl	8002b08 <HAL_GetTick>
 8004686:	0002      	movs	r2, r0
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	4a33      	ldr	r2, [pc, #204]	; (800475c <HAL_RCC_ClockConfig+0x240>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e05a      	b.n	800474c <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004696:	4b30      	ldr	r3, [pc, #192]	; (8004758 <HAL_RCC_ClockConfig+0x23c>)
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	220c      	movs	r2, #12
 800469c:	4013      	ands	r3, r2
 800469e:	d1f0      	bne.n	8004682 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046a0:	4b2c      	ldr	r3, [pc, #176]	; (8004754 <HAL_RCC_ClockConfig+0x238>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2201      	movs	r2, #1
 80046a6:	4013      	ands	r3, r2
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d211      	bcs.n	80046d2 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ae:	4b29      	ldr	r3, [pc, #164]	; (8004754 <HAL_RCC_ClockConfig+0x238>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2201      	movs	r2, #1
 80046b4:	4393      	bics	r3, r2
 80046b6:	0019      	movs	r1, r3
 80046b8:	4b26      	ldr	r3, [pc, #152]	; (8004754 <HAL_RCC_ClockConfig+0x238>)
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	430a      	orrs	r2, r1
 80046be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c0:	4b24      	ldr	r3, [pc, #144]	; (8004754 <HAL_RCC_ClockConfig+0x238>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2201      	movs	r2, #1
 80046c6:	4013      	ands	r3, r2
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d001      	beq.n	80046d2 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e03c      	b.n	800474c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2204      	movs	r2, #4
 80046d8:	4013      	ands	r3, r2
 80046da:	d009      	beq.n	80046f0 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046dc:	4b1e      	ldr	r3, [pc, #120]	; (8004758 <HAL_RCC_ClockConfig+0x23c>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	4a1f      	ldr	r2, [pc, #124]	; (8004760 <HAL_RCC_ClockConfig+0x244>)
 80046e2:	4013      	ands	r3, r2
 80046e4:	0019      	movs	r1, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	4b1b      	ldr	r3, [pc, #108]	; (8004758 <HAL_RCC_ClockConfig+0x23c>)
 80046ec:	430a      	orrs	r2, r1
 80046ee:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2208      	movs	r2, #8
 80046f6:	4013      	ands	r3, r2
 80046f8:	d00a      	beq.n	8004710 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046fa:	4b17      	ldr	r3, [pc, #92]	; (8004758 <HAL_RCC_ClockConfig+0x23c>)
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	4a19      	ldr	r2, [pc, #100]	; (8004764 <HAL_RCC_ClockConfig+0x248>)
 8004700:	4013      	ands	r3, r2
 8004702:	0019      	movs	r1, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	00da      	lsls	r2, r3, #3
 800470a:	4b13      	ldr	r3, [pc, #76]	; (8004758 <HAL_RCC_ClockConfig+0x23c>)
 800470c:	430a      	orrs	r2, r1
 800470e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004710:	f000 f82e 	bl	8004770 <HAL_RCC_GetSysClockFreq>
 8004714:	0001      	movs	r1, r0
 8004716:	4b10      	ldr	r3, [pc, #64]	; (8004758 <HAL_RCC_ClockConfig+0x23c>)
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	091b      	lsrs	r3, r3, #4
 800471c:	220f      	movs	r2, #15
 800471e:	4013      	ands	r3, r2
 8004720:	4a11      	ldr	r2, [pc, #68]	; (8004768 <HAL_RCC_ClockConfig+0x24c>)
 8004722:	5cd3      	ldrb	r3, [r2, r3]
 8004724:	000a      	movs	r2, r1
 8004726:	40da      	lsrs	r2, r3
 8004728:	4b10      	ldr	r3, [pc, #64]	; (800476c <HAL_RCC_ClockConfig+0x250>)
 800472a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 800472c:	250b      	movs	r5, #11
 800472e:	197c      	adds	r4, r7, r5
 8004730:	2000      	movs	r0, #0
 8004732:	f7fe f9b3 	bl	8002a9c <HAL_InitTick>
 8004736:	0003      	movs	r3, r0
 8004738:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800473a:	197b      	adds	r3, r7, r5
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8004742:	230b      	movs	r3, #11
 8004744:	18fb      	adds	r3, r7, r3
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	e000      	b.n	800474c <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	0018      	movs	r0, r3
 800474e:	46bd      	mov	sp, r7
 8004750:	b004      	add	sp, #16
 8004752:	bdb0      	pop	{r4, r5, r7, pc}
 8004754:	40022000 	.word	0x40022000
 8004758:	40021000 	.word	0x40021000
 800475c:	00001388 	.word	0x00001388
 8004760:	fffff8ff 	.word	0xfffff8ff
 8004764:	ffffc7ff 	.word	0xffffc7ff
 8004768:	08007860 	.word	0x08007860
 800476c:	20000000 	.word	0x20000000

08004770 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004776:	4b3b      	ldr	r3, [pc, #236]	; (8004864 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	220c      	movs	r2, #12
 8004780:	4013      	ands	r3, r2
 8004782:	2b08      	cmp	r3, #8
 8004784:	d00e      	beq.n	80047a4 <HAL_RCC_GetSysClockFreq+0x34>
 8004786:	2b0c      	cmp	r3, #12
 8004788:	d00f      	beq.n	80047aa <HAL_RCC_GetSysClockFreq+0x3a>
 800478a:	2b04      	cmp	r3, #4
 800478c:	d157      	bne.n	800483e <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800478e:	4b35      	ldr	r3, [pc, #212]	; (8004864 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2210      	movs	r2, #16
 8004794:	4013      	ands	r3, r2
 8004796:	d002      	beq.n	800479e <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004798:	4b33      	ldr	r3, [pc, #204]	; (8004868 <HAL_RCC_GetSysClockFreq+0xf8>)
 800479a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800479c:	e05d      	b.n	800485a <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 800479e:	4b33      	ldr	r3, [pc, #204]	; (800486c <HAL_RCC_GetSysClockFreq+0xfc>)
 80047a0:	613b      	str	r3, [r7, #16]
      break;
 80047a2:	e05a      	b.n	800485a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047a4:	4b32      	ldr	r3, [pc, #200]	; (8004870 <HAL_RCC_GetSysClockFreq+0x100>)
 80047a6:	613b      	str	r3, [r7, #16]
      break;
 80047a8:	e057      	b.n	800485a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	0c9b      	lsrs	r3, r3, #18
 80047ae:	220f      	movs	r2, #15
 80047b0:	4013      	ands	r3, r2
 80047b2:	4a30      	ldr	r2, [pc, #192]	; (8004874 <HAL_RCC_GetSysClockFreq+0x104>)
 80047b4:	5cd3      	ldrb	r3, [r2, r3]
 80047b6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	0d9b      	lsrs	r3, r3, #22
 80047bc:	2203      	movs	r2, #3
 80047be:	4013      	ands	r3, r2
 80047c0:	3301      	adds	r3, #1
 80047c2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047c4:	4b27      	ldr	r3, [pc, #156]	; (8004864 <HAL_RCC_GetSysClockFreq+0xf4>)
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	2380      	movs	r3, #128	; 0x80
 80047ca:	025b      	lsls	r3, r3, #9
 80047cc:	4013      	ands	r3, r2
 80047ce:	d00f      	beq.n	80047f0 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80047d0:	68b9      	ldr	r1, [r7, #8]
 80047d2:	000a      	movs	r2, r1
 80047d4:	0152      	lsls	r2, r2, #5
 80047d6:	1a52      	subs	r2, r2, r1
 80047d8:	0193      	lsls	r3, r2, #6
 80047da:	1a9b      	subs	r3, r3, r2
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	185b      	adds	r3, r3, r1
 80047e0:	025b      	lsls	r3, r3, #9
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	0018      	movs	r0, r3
 80047e6:	f7fb fc8f 	bl	8000108 <__udivsi3>
 80047ea:	0003      	movs	r3, r0
 80047ec:	617b      	str	r3, [r7, #20]
 80047ee:	e023      	b.n	8004838 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80047f0:	4b1c      	ldr	r3, [pc, #112]	; (8004864 <HAL_RCC_GetSysClockFreq+0xf4>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2210      	movs	r2, #16
 80047f6:	4013      	ands	r3, r2
 80047f8:	d00f      	beq.n	800481a <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80047fa:	68b9      	ldr	r1, [r7, #8]
 80047fc:	000a      	movs	r2, r1
 80047fe:	0152      	lsls	r2, r2, #5
 8004800:	1a52      	subs	r2, r2, r1
 8004802:	0193      	lsls	r3, r2, #6
 8004804:	1a9b      	subs	r3, r3, r2
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	185b      	adds	r3, r3, r1
 800480a:	021b      	lsls	r3, r3, #8
 800480c:	6879      	ldr	r1, [r7, #4]
 800480e:	0018      	movs	r0, r3
 8004810:	f7fb fc7a 	bl	8000108 <__udivsi3>
 8004814:	0003      	movs	r3, r0
 8004816:	617b      	str	r3, [r7, #20]
 8004818:	e00e      	b.n	8004838 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800481a:	68b9      	ldr	r1, [r7, #8]
 800481c:	000a      	movs	r2, r1
 800481e:	0152      	lsls	r2, r2, #5
 8004820:	1a52      	subs	r2, r2, r1
 8004822:	0193      	lsls	r3, r2, #6
 8004824:	1a9b      	subs	r3, r3, r2
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	185b      	adds	r3, r3, r1
 800482a:	029b      	lsls	r3, r3, #10
 800482c:	6879      	ldr	r1, [r7, #4]
 800482e:	0018      	movs	r0, r3
 8004830:	f7fb fc6a 	bl	8000108 <__udivsi3>
 8004834:	0003      	movs	r3, r0
 8004836:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	613b      	str	r3, [r7, #16]
      break;
 800483c:	e00d      	b.n	800485a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800483e:	4b09      	ldr	r3, [pc, #36]	; (8004864 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	0b5b      	lsrs	r3, r3, #13
 8004844:	2207      	movs	r2, #7
 8004846:	4013      	ands	r3, r2
 8004848:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	3301      	adds	r3, #1
 800484e:	2280      	movs	r2, #128	; 0x80
 8004850:	0212      	lsls	r2, r2, #8
 8004852:	409a      	lsls	r2, r3
 8004854:	0013      	movs	r3, r2
 8004856:	613b      	str	r3, [r7, #16]
      break;
 8004858:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800485a:	693b      	ldr	r3, [r7, #16]
}
 800485c:	0018      	movs	r0, r3
 800485e:	46bd      	mov	sp, r7
 8004860:	b006      	add	sp, #24
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40021000 	.word	0x40021000
 8004868:	003d0900 	.word	0x003d0900
 800486c:	00f42400 	.word	0x00f42400
 8004870:	007a1200 	.word	0x007a1200
 8004874:	08007870 	.word	0x08007870

08004878 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2220      	movs	r2, #32
 8004886:	4013      	ands	r3, r2
 8004888:	d106      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	2380      	movs	r3, #128	; 0x80
 8004890:	011b      	lsls	r3, r3, #4
 8004892:	4013      	ands	r3, r2
 8004894:	d100      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8004896:	e0dd      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8004898:	2317      	movs	r3, #23
 800489a:	18fb      	adds	r3, r7, r3
 800489c:	2200      	movs	r2, #0
 800489e:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048a0:	4ba4      	ldr	r3, [pc, #656]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80048a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048a4:	2380      	movs	r3, #128	; 0x80
 80048a6:	055b      	lsls	r3, r3, #21
 80048a8:	4013      	ands	r3, r2
 80048aa:	d10a      	bne.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ac:	4ba1      	ldr	r3, [pc, #644]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80048ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048b0:	4ba0      	ldr	r3, [pc, #640]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80048b2:	2180      	movs	r1, #128	; 0x80
 80048b4:	0549      	lsls	r1, r1, #21
 80048b6:	430a      	orrs	r2, r1
 80048b8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80048ba:	2317      	movs	r3, #23
 80048bc:	18fb      	adds	r3, r7, r3
 80048be:	2201      	movs	r2, #1
 80048c0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c2:	4b9d      	ldr	r3, [pc, #628]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	2380      	movs	r3, #128	; 0x80
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	4013      	ands	r3, r2
 80048cc:	d11a      	bne.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048ce:	4b9a      	ldr	r3, [pc, #616]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	4b99      	ldr	r3, [pc, #612]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80048d4:	2180      	movs	r1, #128	; 0x80
 80048d6:	0049      	lsls	r1, r1, #1
 80048d8:	430a      	orrs	r2, r1
 80048da:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048dc:	f7fe f914 	bl	8002b08 <HAL_GetTick>
 80048e0:	0003      	movs	r3, r0
 80048e2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e4:	e008      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048e6:	f7fe f90f 	bl	8002b08 <HAL_GetTick>
 80048ea:	0002      	movs	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b64      	cmp	r3, #100	; 0x64
 80048f2:	d901      	bls.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e118      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f8:	4b8f      	ldr	r3, [pc, #572]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	2380      	movs	r3, #128	; 0x80
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	4013      	ands	r3, r2
 8004902:	d0f0      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004904:	4b8b      	ldr	r3, [pc, #556]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	23c0      	movs	r3, #192	; 0xc0
 800490a:	039b      	lsls	r3, r3, #14
 800490c:	4013      	ands	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	23c0      	movs	r3, #192	; 0xc0
 8004916:	039b      	lsls	r3, r3, #14
 8004918:	4013      	ands	r3, r2
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	429a      	cmp	r2, r3
 800491e:	d107      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	23c0      	movs	r3, #192	; 0xc0
 8004926:	039b      	lsls	r3, r3, #14
 8004928:	4013      	ands	r3, r2
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	429a      	cmp	r2, r3
 800492e:	d013      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	23c0      	movs	r3, #192	; 0xc0
 8004936:	029b      	lsls	r3, r3, #10
 8004938:	401a      	ands	r2, r3
 800493a:	23c0      	movs	r3, #192	; 0xc0
 800493c:	029b      	lsls	r3, r3, #10
 800493e:	429a      	cmp	r2, r3
 8004940:	d10a      	bne.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004942:	4b7c      	ldr	r3, [pc, #496]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	2380      	movs	r3, #128	; 0x80
 8004948:	029b      	lsls	r3, r3, #10
 800494a:	401a      	ands	r2, r3
 800494c:	2380      	movs	r3, #128	; 0x80
 800494e:	029b      	lsls	r3, r3, #10
 8004950:	429a      	cmp	r2, r3
 8004952:	d101      	bne.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e0e8      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004958:	4b76      	ldr	r3, [pc, #472]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800495a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800495c:	23c0      	movs	r3, #192	; 0xc0
 800495e:	029b      	lsls	r3, r3, #10
 8004960:	4013      	ands	r3, r2
 8004962:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d049      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x186>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	23c0      	movs	r3, #192	; 0xc0
 8004970:	029b      	lsls	r3, r3, #10
 8004972:	4013      	ands	r3, r2
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	429a      	cmp	r2, r3
 8004978:	d004      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2220      	movs	r2, #32
 8004980:	4013      	ands	r3, r2
 8004982:	d10d      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	23c0      	movs	r3, #192	; 0xc0
 800498a:	029b      	lsls	r3, r3, #10
 800498c:	4013      	ands	r3, r2
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	429a      	cmp	r2, r3
 8004992:	d034      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	2380      	movs	r3, #128	; 0x80
 800499a:	011b      	lsls	r3, r3, #4
 800499c:	4013      	ands	r3, r2
 800499e:	d02e      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80049a0:	4b64      	ldr	r3, [pc, #400]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a4:	4a65      	ldr	r2, [pc, #404]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049a6:	4013      	ands	r3, r2
 80049a8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049aa:	4b62      	ldr	r3, [pc, #392]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80049ae:	4b61      	ldr	r3, [pc, #388]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049b0:	2180      	movs	r1, #128	; 0x80
 80049b2:	0309      	lsls	r1, r1, #12
 80049b4:	430a      	orrs	r2, r1
 80049b6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049b8:	4b5e      	ldr	r3, [pc, #376]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80049bc:	4b5d      	ldr	r3, [pc, #372]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049be:	4960      	ldr	r1, [pc, #384]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80049c0:	400a      	ands	r2, r1
 80049c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80049c4:	4b5b      	ldr	r3, [pc, #364]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	2380      	movs	r3, #128	; 0x80
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	4013      	ands	r3, r2
 80049d2:	d014      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d4:	f7fe f898 	bl	8002b08 <HAL_GetTick>
 80049d8:	0003      	movs	r3, r0
 80049da:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049dc:	e009      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049de:	f7fe f893 	bl	8002b08 <HAL_GetTick>
 80049e2:	0002      	movs	r2, r0
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	4a56      	ldr	r2, [pc, #344]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e09b      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049f2:	4b50      	ldr	r3, [pc, #320]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80049f6:	2380      	movs	r3, #128	; 0x80
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4013      	ands	r3, r2
 80049fc:	d0ef      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	23c0      	movs	r3, #192	; 0xc0
 8004a04:	029b      	lsls	r3, r3, #10
 8004a06:	401a      	ands	r2, r3
 8004a08:	23c0      	movs	r3, #192	; 0xc0
 8004a0a:	029b      	lsls	r3, r3, #10
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d10c      	bne.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8004a10:	4b48      	ldr	r3, [pc, #288]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a4c      	ldr	r2, [pc, #304]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004a16:	4013      	ands	r3, r2
 8004a18:	0019      	movs	r1, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	23c0      	movs	r3, #192	; 0xc0
 8004a20:	039b      	lsls	r3, r3, #14
 8004a22:	401a      	ands	r2, r3
 8004a24:	4b43      	ldr	r3, [pc, #268]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a26:	430a      	orrs	r2, r1
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	4b42      	ldr	r3, [pc, #264]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a2c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685a      	ldr	r2, [r3, #4]
 8004a32:	23c0      	movs	r3, #192	; 0xc0
 8004a34:	029b      	lsls	r3, r3, #10
 8004a36:	401a      	ands	r2, r3
 8004a38:	4b3e      	ldr	r3, [pc, #248]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a3e:	2317      	movs	r3, #23
 8004a40:	18fb      	adds	r3, r7, r3
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d105      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a48:	4b3a      	ldr	r3, [pc, #232]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a4c:	4b39      	ldr	r3, [pc, #228]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a4e:	493f      	ldr	r1, [pc, #252]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a50:	400a      	ands	r2, r1
 8004a52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	d009      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a5e:	4b35      	ldr	r3, [pc, #212]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a62:	2203      	movs	r2, #3
 8004a64:	4393      	bics	r3, r2
 8004a66:	0019      	movs	r1, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68da      	ldr	r2, [r3, #12]
 8004a6c:	4b31      	ldr	r3, [pc, #196]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2202      	movs	r2, #2
 8004a78:	4013      	ands	r3, r2
 8004a7a:	d009      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a7c:	4b2d      	ldr	r3, [pc, #180]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a80:	220c      	movs	r2, #12
 8004a82:	4393      	bics	r3, r2
 8004a84:	0019      	movs	r1, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	691a      	ldr	r2, [r3, #16]
 8004a8a:	4b2a      	ldr	r3, [pc, #168]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2204      	movs	r2, #4
 8004a96:	4013      	ands	r3, r2
 8004a98:	d009      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a9a:	4b26      	ldr	r3, [pc, #152]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a9e:	4a2c      	ldr	r2, [pc, #176]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	0019      	movs	r1, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	695a      	ldr	r2, [r3, #20]
 8004aa8:	4b22      	ldr	r3, [pc, #136]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2208      	movs	r2, #8
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	d009      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ab8:	4b1e      	ldr	r3, [pc, #120]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004abc:	4a25      	ldr	r2, [pc, #148]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	0019      	movs	r1, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699a      	ldr	r2, [r3, #24]
 8004ac6:	4b1b      	ldr	r3, [pc, #108]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	2380      	movs	r3, #128	; 0x80
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	d009      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ad8:	4b16      	ldr	r3, [pc, #88]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004adc:	4a17      	ldr	r2, [pc, #92]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ade:	4013      	ands	r3, r2
 8004ae0:	0019      	movs	r1, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	69da      	ldr	r2, [r3, #28]
 8004ae6:	4b13      	ldr	r3, [pc, #76]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2240      	movs	r2, #64	; 0x40
 8004af2:	4013      	ands	r3, r2
 8004af4:	d009      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004af6:	4b0f      	ldr	r3, [pc, #60]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004afa:	4a17      	ldr	r2, [pc, #92]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004afc:	4013      	ands	r3, r2
 8004afe:	0019      	movs	r1, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b04:	4b0b      	ldr	r3, [pc, #44]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b06:	430a      	orrs	r2, r1
 8004b08:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2280      	movs	r2, #128	; 0x80
 8004b10:	4013      	ands	r3, r2
 8004b12:	d009      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004b14:	4b07      	ldr	r3, [pc, #28]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b18:	4a10      	ldr	r2, [pc, #64]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	0019      	movs	r1, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1a      	ldr	r2, [r3, #32]
 8004b22:	4b04      	ldr	r3, [pc, #16]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b24:	430a      	orrs	r2, r1
 8004b26:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	b006      	add	sp, #24
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	46c0      	nop			; (mov r8, r8)
 8004b34:	40021000 	.word	0x40021000
 8004b38:	40007000 	.word	0x40007000
 8004b3c:	fffcffff 	.word	0xfffcffff
 8004b40:	fff7ffff 	.word	0xfff7ffff
 8004b44:	00001388 	.word	0x00001388
 8004b48:	ffcfffff 	.word	0xffcfffff
 8004b4c:	efffffff 	.word	0xefffffff
 8004b50:	fffff3ff 	.word	0xfffff3ff
 8004b54:	ffffcfff 	.word	0xffffcfff
 8004b58:	fbffffff 	.word	0xfbffffff
 8004b5c:	fff3ffff 	.word	0xfff3ffff

08004b60 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e08e      	b.n	8004c90 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2221      	movs	r2, #33	; 0x21
 8004b76:	5c9b      	ldrb	r3, [r3, r2]
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d107      	bne.n	8004b8e <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2220      	movs	r2, #32
 8004b82:	2100      	movs	r1, #0
 8004b84:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	0018      	movs	r0, r3
 8004b8a:	f7fd fd01 	bl	8002590 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2221      	movs	r2, #33	; 0x21
 8004b92:	2102      	movs	r1, #2
 8004b94:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	22ca      	movs	r2, #202	; 0xca
 8004b9c:	625a      	str	r2, [r3, #36]	; 0x24
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2253      	movs	r2, #83	; 0x53
 8004ba4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f000 fca6 	bl	80054fa <RTC_EnterInitMode>
 8004bae:	1e03      	subs	r3, r0, #0
 8004bb0:	d009      	beq.n	8004bc6 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	22ff      	movs	r2, #255	; 0xff
 8004bb8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2221      	movs	r2, #33	; 0x21
 8004bbe:	2104      	movs	r1, #4
 8004bc0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e064      	b.n	8004c90 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4931      	ldr	r1, [pc, #196]	; (8004c98 <HAL_RTC_Init+0x138>)
 8004bd2:	400a      	ands	r2, r1
 8004bd4:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6899      	ldr	r1, [r3, #8]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	431a      	orrs	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	431a      	orrs	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	68d2      	ldr	r2, [r2, #12]
 8004bfc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6919      	ldr	r1, [r3, #16]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	041a      	lsls	r2, r3, #16
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68da      	ldr	r2, [r3, #12]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2180      	movs	r1, #128	; 0x80
 8004c1e:	438a      	bics	r2, r1
 8004c20:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2103      	movs	r1, #3
 8004c2e:	438a      	bics	r2, r1
 8004c30:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	69da      	ldr	r2, [r3, #28]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	431a      	orrs	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	2220      	movs	r2, #32
 8004c52:	4013      	ands	r3, r2
 8004c54:	d113      	bne.n	8004c7e <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	0018      	movs	r0, r3
 8004c5a:	f000 fc27 	bl	80054ac <HAL_RTC_WaitForSynchro>
 8004c5e:	1e03      	subs	r3, r0, #0
 8004c60:	d00d      	beq.n	8004c7e <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	22ff      	movs	r2, #255	; 0xff
 8004c68:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2221      	movs	r2, #33	; 0x21
 8004c6e:	2104      	movs	r1, #4
 8004c70:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2220      	movs	r2, #32
 8004c76:	2100      	movs	r1, #0
 8004c78:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e008      	b.n	8004c90 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	22ff      	movs	r2, #255	; 0xff
 8004c84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2221      	movs	r2, #33	; 0x21
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
  }
}
 8004c90:	0018      	movs	r0, r3
 8004c92:	46bd      	mov	sp, r7
 8004c94:	b002      	add	sp, #8
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	ff8fffbf 	.word	0xff8fffbf

08004c9c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004c9c:	b590      	push	{r4, r7, lr}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2220      	movs	r2, #32
 8004cac:	5c9b      	ldrb	r3, [r3, r2]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d101      	bne.n	8004cb6 <HAL_RTC_SetTime+0x1a>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e0ad      	b.n	8004e12 <HAL_RTC_SetTime+0x176>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	2101      	movs	r1, #1
 8004cbc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2221      	movs	r2, #33	; 0x21
 8004cc2:	2102      	movs	r1, #2
 8004cc4:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d125      	bne.n	8004d18 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	2240      	movs	r2, #64	; 0x40
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	d102      	bne.n	8004cde <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	0018      	movs	r0, r3
 8004ce4:	f000 fc33 	bl	800554e <RTC_ByteToBcd2>
 8004ce8:	0003      	movs	r3, r0
 8004cea:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	785b      	ldrb	r3, [r3, #1]
 8004cf0:	0018      	movs	r0, r3
 8004cf2:	f000 fc2c 	bl	800554e <RTC_ByteToBcd2>
 8004cf6:	0003      	movs	r3, r0
 8004cf8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004cfa:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	789b      	ldrb	r3, [r3, #2]
 8004d00:	0018      	movs	r0, r3
 8004d02:	f000 fc24 	bl	800554e <RTC_ByteToBcd2>
 8004d06:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004d08:	0022      	movs	r2, r4
 8004d0a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	78db      	ldrb	r3, [r3, #3]
 8004d10:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004d12:	4313      	orrs	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]
 8004d16:	e017      	b.n	8004d48 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	2240      	movs	r2, #64	; 0x40
 8004d20:	4013      	ands	r3, r2
 8004d22:	d102      	bne.n	8004d2a <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	2200      	movs	r2, #0
 8004d28:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	785b      	ldrb	r3, [r3, #1]
 8004d34:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004d36:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004d3c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	78db      	ldrb	r3, [r3, #3]
 8004d42:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004d44:	4313      	orrs	r3, r2
 8004d46:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	22ca      	movs	r2, #202	; 0xca
 8004d4e:	625a      	str	r2, [r3, #36]	; 0x24
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2253      	movs	r2, #83	; 0x53
 8004d56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	f000 fbcd 	bl	80054fa <RTC_EnterInitMode>
 8004d60:	1e03      	subs	r3, r0, #0
 8004d62:	d00d      	beq.n	8004d80 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	22ff      	movs	r2, #255	; 0xff
 8004d6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2221      	movs	r2, #33	; 0x21
 8004d70:	2104      	movs	r1, #4
 8004d72:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2220      	movs	r2, #32
 8004d78:	2100      	movs	r1, #0
 8004d7a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e048      	b.n	8004e12 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	4925      	ldr	r1, [pc, #148]	; (8004e1c <HAL_RTC_SetTime+0x180>)
 8004d88:	400a      	ands	r2, r1
 8004d8a:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689a      	ldr	r2, [r3, #8]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4922      	ldr	r1, [pc, #136]	; (8004e20 <HAL_RTC_SetTime+0x184>)
 8004d98:	400a      	ands	r2, r1
 8004d9a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6899      	ldr	r1, [r3, #8]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	68da      	ldr	r2, [r3, #12]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	431a      	orrs	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68da      	ldr	r2, [r3, #12]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2180      	movs	r1, #128	; 0x80
 8004dc0:	438a      	bics	r2, r1
 8004dc2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	4013      	ands	r3, r2
 8004dce:	d113      	bne.n	8004df8 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	f000 fb6a 	bl	80054ac <HAL_RTC_WaitForSynchro>
 8004dd8:	1e03      	subs	r3, r0, #0
 8004dda:	d00d      	beq.n	8004df8 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	22ff      	movs	r2, #255	; 0xff
 8004de2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2221      	movs	r2, #33	; 0x21
 8004de8:	2104      	movs	r1, #4
 8004dea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2220      	movs	r2, #32
 8004df0:	2100      	movs	r1, #0
 8004df2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e00c      	b.n	8004e12 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	22ff      	movs	r2, #255	; 0xff
 8004dfe:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2221      	movs	r2, #33	; 0x21
 8004e04:	2101      	movs	r1, #1
 8004e06:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004e10:	2300      	movs	r3, #0
  }
}
 8004e12:	0018      	movs	r0, r3
 8004e14:	46bd      	mov	sp, r7
 8004e16:	b007      	add	sp, #28
 8004e18:	bd90      	pop	{r4, r7, pc}
 8004e1a:	46c0      	nop			; (mov r8, r8)
 8004e1c:	007f7f7f 	.word	0x007f7f7f
 8004e20:	fffbffff 	.word	0xfffbffff

08004e24 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	045b      	lsls	r3, r3, #17
 8004e42:	0c5a      	lsrs	r2, r3, #17
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a22      	ldr	r2, [pc, #136]	; (8004ed8 <HAL_RTC_GetTime+0xb4>)
 8004e50:	4013      	ands	r3, r2
 8004e52:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	0c1b      	lsrs	r3, r3, #16
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	223f      	movs	r2, #63	; 0x3f
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	b2da      	uxtb	r2, r3
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	0a1b      	lsrs	r3, r3, #8
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	227f      	movs	r2, #127	; 0x7f
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	227f      	movs	r2, #127	; 0x7f
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	0c1b      	lsrs	r3, r3, #16
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2240      	movs	r2, #64	; 0x40
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	b2da      	uxtb	r2, r3
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d11a      	bne.n	8004ece <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	0018      	movs	r0, r3
 8004e9e:	f000 fb7f 	bl	80055a0 <RTC_Bcd2ToByte>
 8004ea2:	0003      	movs	r3, r0
 8004ea4:	001a      	movs	r2, r3
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	785b      	ldrb	r3, [r3, #1]
 8004eae:	0018      	movs	r0, r3
 8004eb0:	f000 fb76 	bl	80055a0 <RTC_Bcd2ToByte>
 8004eb4:	0003      	movs	r3, r0
 8004eb6:	001a      	movs	r2, r3
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	789b      	ldrb	r3, [r3, #2]
 8004ec0:	0018      	movs	r0, r3
 8004ec2:	f000 fb6d 	bl	80055a0 <RTC_Bcd2ToByte>
 8004ec6:	0003      	movs	r3, r0
 8004ec8:	001a      	movs	r2, r3
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	b006      	add	sp, #24
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	007f7f7f 	.word	0x007f7f7f

08004edc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004edc:	b590      	push	{r4, r7, lr}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2220      	movs	r2, #32
 8004eec:	5c9b      	ldrb	r3, [r3, r2]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d101      	bne.n	8004ef6 <HAL_RTC_SetDate+0x1a>
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	e099      	b.n	800502a <HAL_RTC_SetDate+0x14e>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2220      	movs	r2, #32
 8004efa:	2101      	movs	r1, #1
 8004efc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2221      	movs	r2, #33	; 0x21
 8004f02:	2102      	movs	r1, #2
 8004f04:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10e      	bne.n	8004f2a <HAL_RTC_SetDate+0x4e>
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	785b      	ldrb	r3, [r3, #1]
 8004f10:	001a      	movs	r2, r3
 8004f12:	2310      	movs	r3, #16
 8004f14:	4013      	ands	r3, r2
 8004f16:	d008      	beq.n	8004f2a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	785b      	ldrb	r3, [r3, #1]
 8004f1c:	2210      	movs	r2, #16
 8004f1e:	4393      	bics	r3, r2
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	330a      	adds	r3, #10
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d11c      	bne.n	8004f6a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	78db      	ldrb	r3, [r3, #3]
 8004f34:	0018      	movs	r0, r3
 8004f36:	f000 fb0a 	bl	800554e <RTC_ByteToBcd2>
 8004f3a:	0003      	movs	r3, r0
 8004f3c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	785b      	ldrb	r3, [r3, #1]
 8004f42:	0018      	movs	r0, r3
 8004f44:	f000 fb03 	bl	800554e <RTC_ByteToBcd2>
 8004f48:	0003      	movs	r3, r0
 8004f4a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004f4c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	789b      	ldrb	r3, [r3, #2]
 8004f52:	0018      	movs	r0, r3
 8004f54:	f000 fafb 	bl	800554e <RTC_ByteToBcd2>
 8004f58:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004f5a:	0022      	movs	r2, r4
 8004f5c:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004f64:	4313      	orrs	r3, r2
 8004f66:	617b      	str	r3, [r7, #20]
 8004f68:	e00e      	b.n	8004f88 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	78db      	ldrb	r3, [r3, #3]
 8004f6e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	785b      	ldrb	r3, [r3, #1]
 8004f74:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004f76:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004f7c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004f84:	4313      	orrs	r3, r2
 8004f86:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	22ca      	movs	r2, #202	; 0xca
 8004f8e:	625a      	str	r2, [r3, #36]	; 0x24
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2253      	movs	r2, #83	; 0x53
 8004f96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	f000 faad 	bl	80054fa <RTC_EnterInitMode>
 8004fa0:	1e03      	subs	r3, r0, #0
 8004fa2:	d00d      	beq.n	8004fc0 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	22ff      	movs	r2, #255	; 0xff
 8004faa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2221      	movs	r2, #33	; 0x21
 8004fb0:	2104      	movs	r1, #4
 8004fb2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	2100      	movs	r1, #0
 8004fba:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e034      	b.n	800502a <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	491b      	ldr	r1, [pc, #108]	; (8005034 <HAL_RTC_SetDate+0x158>)
 8004fc8:	400a      	ands	r2, r1
 8004fca:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68da      	ldr	r2, [r3, #12]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2180      	movs	r1, #128	; 0x80
 8004fd8:	438a      	bics	r2, r1
 8004fda:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	d113      	bne.n	8005010 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	0018      	movs	r0, r3
 8004fec:	f000 fa5e 	bl	80054ac <HAL_RTC_WaitForSynchro>
 8004ff0:	1e03      	subs	r3, r0, #0
 8004ff2:	d00d      	beq.n	8005010 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	22ff      	movs	r2, #255	; 0xff
 8004ffa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2221      	movs	r2, #33	; 0x21
 8005000:	2104      	movs	r1, #4
 8005002:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2220      	movs	r2, #32
 8005008:	2100      	movs	r1, #0
 800500a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e00c      	b.n	800502a <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	22ff      	movs	r2, #255	; 0xff
 8005016:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2221      	movs	r2, #33	; 0x21
 800501c:	2101      	movs	r1, #1
 800501e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2220      	movs	r2, #32
 8005024:	2100      	movs	r1, #0
 8005026:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005028:	2300      	movs	r3, #0
  }
}
 800502a:	0018      	movs	r0, r3
 800502c:	46bd      	mov	sp, r7
 800502e:	b007      	add	sp, #28
 8005030:	bd90      	pop	{r4, r7, pc}
 8005032:	46c0      	nop			; (mov r8, r8)
 8005034:	00ffff3f 	.word	0x00ffff3f

08005038 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	4a21      	ldr	r2, [pc, #132]	; (80050d0 <HAL_RTC_GetDate+0x98>)
 800504c:	4013      	ands	r3, r2
 800504e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	0c1b      	lsrs	r3, r3, #16
 8005054:	b2da      	uxtb	r2, r3
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	0a1b      	lsrs	r3, r3, #8
 800505e:	b2db      	uxtb	r3, r3
 8005060:	221f      	movs	r2, #31
 8005062:	4013      	ands	r3, r2
 8005064:	b2da      	uxtb	r2, r3
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	b2db      	uxtb	r3, r3
 800506e:	223f      	movs	r2, #63	; 0x3f
 8005070:	4013      	ands	r3, r2
 8005072:	b2da      	uxtb	r2, r3
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	0b5b      	lsrs	r3, r3, #13
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2207      	movs	r2, #7
 8005080:	4013      	ands	r3, r2
 8005082:	b2da      	uxtb	r2, r3
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d11a      	bne.n	80050c4 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	78db      	ldrb	r3, [r3, #3]
 8005092:	0018      	movs	r0, r3
 8005094:	f000 fa84 	bl	80055a0 <RTC_Bcd2ToByte>
 8005098:	0003      	movs	r3, r0
 800509a:	001a      	movs	r2, r3
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	785b      	ldrb	r3, [r3, #1]
 80050a4:	0018      	movs	r0, r3
 80050a6:	f000 fa7b 	bl	80055a0 <RTC_Bcd2ToByte>
 80050aa:	0003      	movs	r3, r0
 80050ac:	001a      	movs	r2, r3
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	789b      	ldrb	r3, [r3, #2]
 80050b6:	0018      	movs	r0, r3
 80050b8:	f000 fa72 	bl	80055a0 <RTC_Bcd2ToByte>
 80050bc:	0003      	movs	r3, r0
 80050be:	001a      	movs	r2, r3
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	0018      	movs	r0, r3
 80050c8:	46bd      	mov	sp, r7
 80050ca:	b006      	add	sp, #24
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	46c0      	nop			; (mov r8, r8)
 80050d0:	00ffff3f 	.word	0x00ffff3f

080050d4 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80050d4:	b590      	push	{r4, r7, lr}
 80050d6:	b089      	sub	sp, #36	; 0x24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2220      	movs	r2, #32
 80050e4:	5c9b      	ldrb	r3, [r3, r2]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d101      	bne.n	80050ee <HAL_RTC_SetAlarm_IT+0x1a>
 80050ea:	2302      	movs	r3, #2
 80050ec:	e130      	b.n	8005350 <HAL_RTC_SetAlarm_IT+0x27c>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2220      	movs	r2, #32
 80050f2:	2101      	movs	r1, #1
 80050f4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2221      	movs	r2, #33	; 0x21
 80050fa:	2102      	movs	r1, #2
 80050fc:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d136      	bne.n	8005172 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	2240      	movs	r2, #64	; 0x40
 800510c:	4013      	ands	r3, r2
 800510e:	d102      	bne.n	8005116 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2200      	movs	r2, #0
 8005114:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	0018      	movs	r0, r3
 800511c:	f000 fa17 	bl	800554e <RTC_ByteToBcd2>
 8005120:	0003      	movs	r3, r0
 8005122:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	785b      	ldrb	r3, [r3, #1]
 8005128:	0018      	movs	r0, r3
 800512a:	f000 fa10 	bl	800554e <RTC_ByteToBcd2>
 800512e:	0003      	movs	r3, r0
 8005130:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005132:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	789b      	ldrb	r3, [r3, #2]
 8005138:	0018      	movs	r0, r3
 800513a:	f000 fa08 	bl	800554e <RTC_ByteToBcd2>
 800513e:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005140:	0022      	movs	r2, r4
 8005142:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	78db      	ldrb	r3, [r3, #3]
 8005148:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800514a:	431a      	orrs	r2, r3
 800514c:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	2220      	movs	r2, #32
 8005152:	5c9b      	ldrb	r3, [r3, r2]
 8005154:	0018      	movs	r0, r3
 8005156:	f000 f9fa 	bl	800554e <RTC_ByteToBcd2>
 800515a:	0003      	movs	r3, r0
 800515c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800515e:	0022      	movs	r2, r4
 8005160:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005166:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800516c:	4313      	orrs	r3, r2
 800516e:	61fb      	str	r3, [r7, #28]
 8005170:	e022      	b.n	80051b8 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	2240      	movs	r2, #64	; 0x40
 800517a:	4013      	ands	r3, r2
 800517c:	d102      	bne.n	8005184 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2200      	movs	r2, #0
 8005182:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	785b      	ldrb	r3, [r3, #1]
 800518e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005190:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005192:	68ba      	ldr	r2, [r7, #8]
 8005194:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005196:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	78db      	ldrb	r3, [r3, #3]
 800519c:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800519e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2120      	movs	r1, #32
 80051a4:	5c5b      	ldrb	r3, [r3, r1]
 80051a6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80051a8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80051ae:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80051b4:	4313      	orrs	r3, r2
 80051b6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	22ca      	movs	r2, #202	; 0xca
 80051ca:	625a      	str	r2, [r3, #36]	; 0x24
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2253      	movs	r2, #83	; 0x53
 80051d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051d8:	2380      	movs	r3, #128	; 0x80
 80051da:	005b      	lsls	r3, r3, #1
 80051dc:	429a      	cmp	r2, r3
 80051de:	d14e      	bne.n	800527e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	495b      	ldr	r1, [pc, #364]	; (8005358 <HAL_RTC_SetAlarm_IT+0x284>)
 80051ec:	400a      	ands	r2, r1
 80051ee:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	22ff      	movs	r2, #255	; 0xff
 80051f8:	401a      	ands	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4957      	ldr	r1, [pc, #348]	; (800535c <HAL_RTC_SetAlarm_IT+0x288>)
 8005200:	430a      	orrs	r2, r1
 8005202:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005204:	f7fd fc80 	bl	8002b08 <HAL_GetTick>
 8005208:	0003      	movs	r3, r0
 800520a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800520c:	e016      	b.n	800523c <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800520e:	f7fd fc7b 	bl	8002b08 <HAL_GetTick>
 8005212:	0002      	movs	r2, r0
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	1ad2      	subs	r2, r2, r3
 8005218:	23fa      	movs	r3, #250	; 0xfa
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	429a      	cmp	r2, r3
 800521e:	d90d      	bls.n	800523c <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	22ff      	movs	r2, #255	; 0xff
 8005226:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2221      	movs	r2, #33	; 0x21
 800522c:	2103      	movs	r1, #3
 800522e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2220      	movs	r2, #32
 8005234:	2100      	movs	r1, #0
 8005236:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e089      	b.n	8005350 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	2201      	movs	r2, #1
 8005244:	4013      	ands	r3, r2
 8005246:	d0e2      	beq.n	800520e <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	69fa      	ldr	r2, [r7, #28]
 800524e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689a      	ldr	r2, [r3, #8]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2180      	movs	r1, #128	; 0x80
 8005264:	0049      	lsls	r1, r1, #1
 8005266:	430a      	orrs	r2, r1
 8005268:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689a      	ldr	r2, [r3, #8]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2180      	movs	r1, #128	; 0x80
 8005276:	0149      	lsls	r1, r1, #5
 8005278:	430a      	orrs	r2, r1
 800527a:	609a      	str	r2, [r3, #8]
 800527c:	e04d      	b.n	800531a <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4935      	ldr	r1, [pc, #212]	; (8005360 <HAL_RTC_SetAlarm_IT+0x28c>)
 800528a:	400a      	ands	r2, r1
 800528c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	22ff      	movs	r2, #255	; 0xff
 8005296:	401a      	ands	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4931      	ldr	r1, [pc, #196]	; (8005364 <HAL_RTC_SetAlarm_IT+0x290>)
 800529e:	430a      	orrs	r2, r1
 80052a0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80052a2:	f7fd fc31 	bl	8002b08 <HAL_GetTick>
 80052a6:	0003      	movs	r3, r0
 80052a8:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80052aa:	e016      	b.n	80052da <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80052ac:	f7fd fc2c 	bl	8002b08 <HAL_GetTick>
 80052b0:	0002      	movs	r2, r0
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	1ad2      	subs	r2, r2, r3
 80052b6:	23fa      	movs	r3, #250	; 0xfa
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d90d      	bls.n	80052da <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	22ff      	movs	r2, #255	; 0xff
 80052c4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2221      	movs	r2, #33	; 0x21
 80052ca:	2103      	movs	r1, #3
 80052cc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2220      	movs	r2, #32
 80052d2:	2100      	movs	r1, #0
 80052d4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e03a      	b.n	8005350 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	2202      	movs	r2, #2
 80052e2:	4013      	ands	r3, r2
 80052e4:	d0e2      	beq.n	80052ac <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	69fa      	ldr	r2, [r7, #28]
 80052ec:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	69ba      	ldr	r2, [r7, #24]
 80052f4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2180      	movs	r1, #128	; 0x80
 8005302:	0089      	lsls	r1, r1, #2
 8005304:	430a      	orrs	r2, r1
 8005306:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689a      	ldr	r2, [r3, #8]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2180      	movs	r1, #128	; 0x80
 8005314:	0189      	lsls	r1, r1, #6
 8005316:	430a      	orrs	r2, r1
 8005318:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800531a:	4b13      	ldr	r3, [pc, #76]	; (8005368 <HAL_RTC_SetAlarm_IT+0x294>)
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	4b12      	ldr	r3, [pc, #72]	; (8005368 <HAL_RTC_SetAlarm_IT+0x294>)
 8005320:	2180      	movs	r1, #128	; 0x80
 8005322:	0289      	lsls	r1, r1, #10
 8005324:	430a      	orrs	r2, r1
 8005326:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005328:	4b0f      	ldr	r3, [pc, #60]	; (8005368 <HAL_RTC_SetAlarm_IT+0x294>)
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	4b0e      	ldr	r3, [pc, #56]	; (8005368 <HAL_RTC_SetAlarm_IT+0x294>)
 800532e:	2180      	movs	r1, #128	; 0x80
 8005330:	0289      	lsls	r1, r1, #10
 8005332:	430a      	orrs	r2, r1
 8005334:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	22ff      	movs	r2, #255	; 0xff
 800533c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2221      	movs	r2, #33	; 0x21
 8005342:	2101      	movs	r1, #1
 8005344:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2220      	movs	r2, #32
 800534a:	2100      	movs	r1, #0
 800534c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	0018      	movs	r0, r3
 8005352:	46bd      	mov	sp, r7
 8005354:	b009      	add	sp, #36	; 0x24
 8005356:	bd90      	pop	{r4, r7, pc}
 8005358:	fffffeff 	.word	0xfffffeff
 800535c:	fffffe7f 	.word	0xfffffe7f
 8005360:	fffffdff 	.word	0xfffffdff
 8005364:	fffffd7f 	.word	0xfffffd7f
 8005368:	40010400 	.word	0x40010400

0800536c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2220      	movs	r2, #32
 800537a:	5c9b      	ldrb	r3, [r3, r2]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d101      	bne.n	8005384 <HAL_RTC_DeactivateAlarm+0x18>
 8005380:	2302      	movs	r3, #2
 8005382:	e086      	b.n	8005492 <HAL_RTC_DeactivateAlarm+0x126>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2220      	movs	r2, #32
 8005388:	2101      	movs	r1, #1
 800538a:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2221      	movs	r2, #33	; 0x21
 8005390:	2102      	movs	r1, #2
 8005392:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	22ca      	movs	r2, #202	; 0xca
 800539a:	625a      	str	r2, [r3, #36]	; 0x24
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2253      	movs	r2, #83	; 0x53
 80053a2:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	2380      	movs	r3, #128	; 0x80
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d132      	bne.n	8005414 <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4938      	ldr	r1, [pc, #224]	; (800549c <HAL_RTC_DeactivateAlarm+0x130>)
 80053ba:	400a      	ands	r2, r1
 80053bc:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4935      	ldr	r1, [pc, #212]	; (80054a0 <HAL_RTC_DeactivateAlarm+0x134>)
 80053ca:	400a      	ands	r2, r1
 80053cc:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80053ce:	f7fd fb9b 	bl	8002b08 <HAL_GetTick>
 80053d2:	0003      	movs	r3, r0
 80053d4:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80053d6:	e016      	b.n	8005406 <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80053d8:	f7fd fb96 	bl	8002b08 <HAL_GetTick>
 80053dc:	0002      	movs	r2, r0
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	1ad2      	subs	r2, r2, r3
 80053e2:	23fa      	movs	r3, #250	; 0xfa
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d90d      	bls.n	8005406 <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	22ff      	movs	r2, #255	; 0xff
 80053f0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2221      	movs	r2, #33	; 0x21
 80053f6:	2103      	movs	r1, #3
 80053f8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2220      	movs	r2, #32
 80053fe:	2100      	movs	r1, #0
 8005400:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e045      	b.n	8005492 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	2201      	movs	r2, #1
 800540e:	4013      	ands	r3, r2
 8005410:	d0e2      	beq.n	80053d8 <HAL_RTC_DeactivateAlarm+0x6c>
 8005412:	e031      	b.n	8005478 <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689a      	ldr	r2, [r3, #8]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4921      	ldr	r1, [pc, #132]	; (80054a4 <HAL_RTC_DeactivateAlarm+0x138>)
 8005420:	400a      	ands	r2, r1
 8005422:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	689a      	ldr	r2, [r3, #8]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	491e      	ldr	r1, [pc, #120]	; (80054a8 <HAL_RTC_DeactivateAlarm+0x13c>)
 8005430:	400a      	ands	r2, r1
 8005432:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8005434:	f7fd fb68 	bl	8002b08 <HAL_GetTick>
 8005438:	0003      	movs	r3, r0
 800543a:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800543c:	e016      	b.n	800546c <HAL_RTC_DeactivateAlarm+0x100>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800543e:	f7fd fb63 	bl	8002b08 <HAL_GetTick>
 8005442:	0002      	movs	r2, r0
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	1ad2      	subs	r2, r2, r3
 8005448:	23fa      	movs	r3, #250	; 0xfa
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	429a      	cmp	r2, r3
 800544e:	d90d      	bls.n	800546c <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	22ff      	movs	r2, #255	; 0xff
 8005456:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2221      	movs	r2, #33	; 0x21
 800545c:	2103      	movs	r1, #3
 800545e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2220      	movs	r2, #32
 8005464:	2100      	movs	r1, #0
 8005466:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e012      	b.n	8005492 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	2202      	movs	r2, #2
 8005474:	4013      	ands	r3, r2
 8005476:	d0e2      	beq.n	800543e <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	22ff      	movs	r2, #255	; 0xff
 800547e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2221      	movs	r2, #33	; 0x21
 8005484:	2101      	movs	r1, #1
 8005486:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2220      	movs	r2, #32
 800548c:	2100      	movs	r1, #0
 800548e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	0018      	movs	r0, r3
 8005494:	46bd      	mov	sp, r7
 8005496:	b004      	add	sp, #16
 8005498:	bd80      	pop	{r7, pc}
 800549a:	46c0      	nop			; (mov r8, r8)
 800549c:	fffffeff 	.word	0xfffffeff
 80054a0:	ffffefff 	.word	0xffffefff
 80054a4:	fffffdff 	.word	0xfffffdff
 80054a8:	ffffdfff 	.word	0xffffdfff

080054ac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68da      	ldr	r2, [r3, #12]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	21a0      	movs	r1, #160	; 0xa0
 80054c0:	438a      	bics	r2, r1
 80054c2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80054c4:	f7fd fb20 	bl	8002b08 <HAL_GetTick>
 80054c8:	0003      	movs	r3, r0
 80054ca:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80054cc:	e00a      	b.n	80054e4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80054ce:	f7fd fb1b 	bl	8002b08 <HAL_GetTick>
 80054d2:	0002      	movs	r2, r0
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	1ad2      	subs	r2, r2, r3
 80054d8:	23fa      	movs	r3, #250	; 0xfa
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	429a      	cmp	r2, r3
 80054de:	d901      	bls.n	80054e4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e006      	b.n	80054f2 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	2220      	movs	r2, #32
 80054ec:	4013      	ands	r3, r2
 80054ee:	d0ee      	beq.n	80054ce <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	0018      	movs	r0, r3
 80054f4:	46bd      	mov	sp, r7
 80054f6:	b004      	add	sp, #16
 80054f8:	bd80      	pop	{r7, pc}

080054fa <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b084      	sub	sp, #16
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	2240      	movs	r2, #64	; 0x40
 800550a:	4013      	ands	r3, r2
 800550c:	d11a      	bne.n	8005544 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2201      	movs	r2, #1
 8005514:	4252      	negs	r2, r2
 8005516:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005518:	f7fd faf6 	bl	8002b08 <HAL_GetTick>
 800551c:	0003      	movs	r3, r0
 800551e:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005520:	e00a      	b.n	8005538 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005522:	f7fd faf1 	bl	8002b08 <HAL_GetTick>
 8005526:	0002      	movs	r2, r0
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	1ad2      	subs	r2, r2, r3
 800552c:	23fa      	movs	r3, #250	; 0xfa
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	429a      	cmp	r2, r3
 8005532:	d901      	bls.n	8005538 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e006      	b.n	8005546 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	2240      	movs	r2, #64	; 0x40
 8005540:	4013      	ands	r3, r2
 8005542:	d0ee      	beq.n	8005522 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	0018      	movs	r0, r3
 8005548:	46bd      	mov	sp, r7
 800554a:	b004      	add	sp, #16
 800554c:	bd80      	pop	{r7, pc}

0800554e <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b084      	sub	sp, #16
 8005552:	af00      	add	r7, sp, #0
 8005554:	0002      	movs	r2, r0
 8005556:	1dfb      	adds	r3, r7, #7
 8005558:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800555e:	230b      	movs	r3, #11
 8005560:	18fb      	adds	r3, r7, r3
 8005562:	1dfa      	adds	r2, r7, #7
 8005564:	7812      	ldrb	r2, [r2, #0]
 8005566:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8005568:	e008      	b.n	800557c <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	3301      	adds	r3, #1
 800556e:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005570:	220b      	movs	r2, #11
 8005572:	18bb      	adds	r3, r7, r2
 8005574:	18ba      	adds	r2, r7, r2
 8005576:	7812      	ldrb	r2, [r2, #0]
 8005578:	3a0a      	subs	r2, #10
 800557a:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 800557c:	230b      	movs	r3, #11
 800557e:	18fb      	adds	r3, r7, r3
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	2b09      	cmp	r3, #9
 8005584:	d8f1      	bhi.n	800556a <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	b2db      	uxtb	r3, r3
 800558a:	011b      	lsls	r3, r3, #4
 800558c:	b2da      	uxtb	r2, r3
 800558e:	230b      	movs	r3, #11
 8005590:	18fb      	adds	r3, r7, r3
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	4313      	orrs	r3, r2
 8005596:	b2db      	uxtb	r3, r3
}
 8005598:	0018      	movs	r0, r3
 800559a:	46bd      	mov	sp, r7
 800559c:	b004      	add	sp, #16
 800559e:	bd80      	pop	{r7, pc}

080055a0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	0002      	movs	r2, r0
 80055a8:	1dfb      	adds	r3, r7, #7
 80055aa:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80055ac:	1dfb      	adds	r3, r7, #7
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	091b      	lsrs	r3, r3, #4
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	001a      	movs	r2, r3
 80055b6:	0013      	movs	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	189b      	adds	r3, r3, r2
 80055bc:	005b      	lsls	r3, r3, #1
 80055be:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	b2da      	uxtb	r2, r3
 80055c4:	1dfb      	adds	r3, r7, #7
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	210f      	movs	r1, #15
 80055ca:	400b      	ands	r3, r1
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	18d3      	adds	r3, r2, r3
 80055d0:	b2db      	uxtb	r3, r3
}
 80055d2:	0018      	movs	r0, r3
 80055d4:	46bd      	mov	sp, r7
 80055d6:	b004      	add	sp, #16
 80055d8:	bd80      	pop	{r7, pc}
	...

080055dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e059      	b.n	80056a2 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2251      	movs	r2, #81	; 0x51
 80055f8:	5c9b      	ldrb	r3, [r3, r2]
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d107      	bne.n	8005610 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2250      	movs	r2, #80	; 0x50
 8005604:	2100      	movs	r1, #0
 8005606:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	0018      	movs	r0, r3
 800560c:	f7fc ffd8 	bl	80025c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2251      	movs	r2, #81	; 0x51
 8005614:	2102      	movs	r1, #2
 8005616:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2140      	movs	r1, #64	; 0x40
 8005624:	438a      	bics	r2, r1
 8005626:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	431a      	orrs	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	431a      	orrs	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	431a      	orrs	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6999      	ldr	r1, [r3, #24]
 8005648:	2380      	movs	r3, #128	; 0x80
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	400b      	ands	r3, r1
 800564e:	431a      	orrs	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	69db      	ldr	r3, [r3, #28]
 8005654:	431a      	orrs	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	431a      	orrs	r2, r3
 800565c:	0011      	movs	r1, r2
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	0c1b      	lsrs	r3, r3, #16
 8005670:	2204      	movs	r2, #4
 8005672:	4013      	ands	r3, r2
 8005674:	0019      	movs	r1, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	69da      	ldr	r2, [r3, #28]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4907      	ldr	r1, [pc, #28]	; (80056ac <HAL_SPI_Init+0xd0>)
 800568e:	400a      	ands	r2, r1
 8005690:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2251      	movs	r2, #81	; 0x51
 800569c:	2101      	movs	r1, #1
 800569e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	0018      	movs	r0, r3
 80056a4:	46bd      	mov	sp, r7
 80056a6:	b002      	add	sp, #8
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	46c0      	nop			; (mov r8, r8)
 80056ac:	fffff7ff 	.word	0xfffff7ff

080056b0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b088      	sub	sp, #32
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	603b      	str	r3, [r7, #0]
 80056bc:	1dbb      	adds	r3, r7, #6
 80056be:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80056c0:	231f      	movs	r3, #31
 80056c2:	18fb      	adds	r3, r7, r3
 80056c4:	2200      	movs	r2, #0
 80056c6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2250      	movs	r2, #80	; 0x50
 80056cc:	5c9b      	ldrb	r3, [r3, r2]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d101      	bne.n	80056d6 <HAL_SPI_Transmit+0x26>
 80056d2:	2302      	movs	r3, #2
 80056d4:	e136      	b.n	8005944 <HAL_SPI_Transmit+0x294>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2250      	movs	r2, #80	; 0x50
 80056da:	2101      	movs	r1, #1
 80056dc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056de:	f7fd fa13 	bl	8002b08 <HAL_GetTick>
 80056e2:	0003      	movs	r3, r0
 80056e4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80056e6:	2316      	movs	r3, #22
 80056e8:	18fb      	adds	r3, r7, r3
 80056ea:	1dba      	adds	r2, r7, #6
 80056ec:	8812      	ldrh	r2, [r2, #0]
 80056ee:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2251      	movs	r2, #81	; 0x51
 80056f4:	5c9b      	ldrb	r3, [r3, r2]
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d004      	beq.n	8005706 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80056fc:	231f      	movs	r3, #31
 80056fe:	18fb      	adds	r3, r7, r3
 8005700:	2202      	movs	r2, #2
 8005702:	701a      	strb	r2, [r3, #0]
    goto error;
 8005704:	e113      	b.n	800592e <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d003      	beq.n	8005714 <HAL_SPI_Transmit+0x64>
 800570c:	1dbb      	adds	r3, r7, #6
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d104      	bne.n	800571e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005714:	231f      	movs	r3, #31
 8005716:	18fb      	adds	r3, r7, r3
 8005718:	2201      	movs	r2, #1
 800571a:	701a      	strb	r2, [r3, #0]
    goto error;
 800571c:	e107      	b.n	800592e <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2251      	movs	r2, #81	; 0x51
 8005722:	2103      	movs	r1, #3
 8005724:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	1dba      	adds	r2, r7, #6
 8005736:	8812      	ldrh	r2, [r2, #0]
 8005738:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	1dba      	adds	r2, r7, #6
 800573e:	8812      	ldrh	r2, [r2, #0]
 8005740:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	2380      	movs	r3, #128	; 0x80
 8005766:	021b      	lsls	r3, r3, #8
 8005768:	429a      	cmp	r2, r3
 800576a:	d108      	bne.n	800577e <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2180      	movs	r1, #128	; 0x80
 8005778:	01c9      	lsls	r1, r1, #7
 800577a:	430a      	orrs	r2, r1
 800577c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2240      	movs	r2, #64	; 0x40
 8005786:	4013      	ands	r3, r2
 8005788:	2b40      	cmp	r3, #64	; 0x40
 800578a:	d007      	beq.n	800579c <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2140      	movs	r1, #64	; 0x40
 8005798:	430a      	orrs	r2, r1
 800579a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	68da      	ldr	r2, [r3, #12]
 80057a0:	2380      	movs	r3, #128	; 0x80
 80057a2:	011b      	lsls	r3, r3, #4
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d14e      	bne.n	8005846 <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d004      	beq.n	80057ba <HAL_SPI_Transmit+0x10a>
 80057b0:	2316      	movs	r3, #22
 80057b2:	18fb      	adds	r3, r7, r3
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d13f      	bne.n	800583a <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057be:	881a      	ldrh	r2, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ca:	1c9a      	adds	r2, r3, #2
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	3b01      	subs	r3, #1
 80057d8:	b29a      	uxth	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80057de:	e02c      	b.n	800583a <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	2202      	movs	r2, #2
 80057e8:	4013      	ands	r3, r2
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d112      	bne.n	8005814 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f2:	881a      	ldrh	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fe:	1c9a      	adds	r2, r3, #2
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005808:	b29b      	uxth	r3, r3
 800580a:	3b01      	subs	r3, #1
 800580c:	b29a      	uxth	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	86da      	strh	r2, [r3, #54]	; 0x36
 8005812:	e012      	b.n	800583a <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005814:	f7fd f978 	bl	8002b08 <HAL_GetTick>
 8005818:	0002      	movs	r2, r0
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	683a      	ldr	r2, [r7, #0]
 8005820:	429a      	cmp	r2, r3
 8005822:	d802      	bhi.n	800582a <HAL_SPI_Transmit+0x17a>
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	3301      	adds	r3, #1
 8005828:	d102      	bne.n	8005830 <HAL_SPI_Transmit+0x180>
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d104      	bne.n	800583a <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 8005830:	231f      	movs	r3, #31
 8005832:	18fb      	adds	r3, r7, r3
 8005834:	2203      	movs	r2, #3
 8005836:	701a      	strb	r2, [r3, #0]
          goto error;
 8005838:	e079      	b.n	800592e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800583e:	b29b      	uxth	r3, r3
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1cd      	bne.n	80057e0 <HAL_SPI_Transmit+0x130>
 8005844:	e04f      	b.n	80058e6 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d004      	beq.n	8005858 <HAL_SPI_Transmit+0x1a8>
 800584e:	2316      	movs	r3, #22
 8005850:	18fb      	adds	r3, r7, r3
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d141      	bne.n	80058dc <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	330c      	adds	r3, #12
 8005862:	7812      	ldrb	r2, [r2, #0]
 8005864:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586a:	1c5a      	adds	r2, r3, #1
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005874:	b29b      	uxth	r3, r3
 8005876:	3b01      	subs	r3, #1
 8005878:	b29a      	uxth	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800587e:	e02d      	b.n	80058dc <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	2202      	movs	r2, #2
 8005888:	4013      	ands	r3, r2
 800588a:	2b02      	cmp	r3, #2
 800588c:	d113      	bne.n	80058b6 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	330c      	adds	r3, #12
 8005898:	7812      	ldrb	r2, [r2, #0]
 800589a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a0:	1c5a      	adds	r2, r3, #1
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	3b01      	subs	r3, #1
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80058b4:	e012      	b.n	80058dc <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058b6:	f7fd f927 	bl	8002b08 <HAL_GetTick>
 80058ba:	0002      	movs	r2, r0
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	683a      	ldr	r2, [r7, #0]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d802      	bhi.n	80058cc <HAL_SPI_Transmit+0x21c>
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	3301      	adds	r3, #1
 80058ca:	d102      	bne.n	80058d2 <HAL_SPI_Transmit+0x222>
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d104      	bne.n	80058dc <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 80058d2:	231f      	movs	r3, #31
 80058d4:	18fb      	adds	r3, r7, r3
 80058d6:	2203      	movs	r2, #3
 80058d8:	701a      	strb	r2, [r3, #0]
          goto error;
 80058da:	e028      	b.n	800592e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1cc      	bne.n	8005880 <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058e6:	69ba      	ldr	r2, [r7, #24]
 80058e8:	6839      	ldr	r1, [r7, #0]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	0018      	movs	r0, r3
 80058ee:	f000 fa99 	bl	8005e24 <SPI_EndRxTxTransaction>
 80058f2:	1e03      	subs	r3, r0, #0
 80058f4:	d002      	beq.n	80058fc <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2220      	movs	r2, #32
 80058fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10a      	bne.n	800591a <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005904:	2300      	movs	r3, #0
 8005906:	613b      	str	r3, [r7, #16]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	613b      	str	r3, [r7, #16]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	613b      	str	r3, [r7, #16]
 8005918:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800591e:	2b00      	cmp	r3, #0
 8005920:	d004      	beq.n	800592c <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8005922:	231f      	movs	r3, #31
 8005924:	18fb      	adds	r3, r7, r3
 8005926:	2201      	movs	r2, #1
 8005928:	701a      	strb	r2, [r3, #0]
 800592a:	e000      	b.n	800592e <HAL_SPI_Transmit+0x27e>
  }

error:
 800592c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2251      	movs	r2, #81	; 0x51
 8005932:	2101      	movs	r1, #1
 8005934:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2250      	movs	r2, #80	; 0x50
 800593a:	2100      	movs	r1, #0
 800593c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800593e:	231f      	movs	r3, #31
 8005940:	18fb      	adds	r3, r7, r3
 8005942:	781b      	ldrb	r3, [r3, #0]
}
 8005944:	0018      	movs	r0, r3
 8005946:	46bd      	mov	sp, r7
 8005948:	b008      	add	sp, #32
 800594a:	bd80      	pop	{r7, pc}

0800594c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	1dbb      	adds	r3, r7, #6
 8005958:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800595a:	2317      	movs	r3, #23
 800595c:	18fb      	adds	r3, r7, r3
 800595e:	2200      	movs	r2, #0
 8005960:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2250      	movs	r2, #80	; 0x50
 8005966:	5c9b      	ldrb	r3, [r3, r2]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d101      	bne.n	8005970 <HAL_SPI_Transmit_IT+0x24>
 800596c:	2302      	movs	r3, #2
 800596e:	e072      	b.n	8005a56 <HAL_SPI_Transmit_IT+0x10a>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2250      	movs	r2, #80	; 0x50
 8005974:	2101      	movs	r1, #1
 8005976:	5499      	strb	r1, [r3, r2]

  if ((pData == NULL) || (Size == 0U))
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <HAL_SPI_Transmit_IT+0x3a>
 800597e:	1dbb      	adds	r3, r7, #6
 8005980:	881b      	ldrh	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d104      	bne.n	8005990 <HAL_SPI_Transmit_IT+0x44>
  {
    errorcode = HAL_ERROR;
 8005986:	2317      	movs	r3, #23
 8005988:	18fb      	adds	r3, r7, r3
 800598a:	2201      	movs	r2, #1
 800598c:	701a      	strb	r2, [r3, #0]
    goto error;
 800598e:	e05b      	b.n	8005a48 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2251      	movs	r2, #81	; 0x51
 8005994:	5c9b      	ldrb	r3, [r3, r2]
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b01      	cmp	r3, #1
 800599a:	d004      	beq.n	80059a6 <HAL_SPI_Transmit_IT+0x5a>
  {
    errorcode = HAL_BUSY;
 800599c:	2317      	movs	r3, #23
 800599e:	18fb      	adds	r3, r7, r3
 80059a0:	2202      	movs	r2, #2
 80059a2:	701a      	strb	r2, [r3, #0]
    goto error;
 80059a4:	e050      	b.n	8005a48 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2251      	movs	r2, #81	; 0x51
 80059aa:	2103      	movs	r1, #3
 80059ac:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	1dba      	adds	r2, r7, #6
 80059be:	8812      	ldrh	r2, [r2, #0]
 80059c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	1dba      	adds	r2, r7, #6
 80059c6:	8812      	ldrh	r2, [r2, #0]
 80059c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d003      	beq.n	80059f2 <HAL_SPI_Transmit_IT+0xa6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	4a1c      	ldr	r2, [pc, #112]	; (8005a60 <HAL_SPI_Transmit_IT+0x114>)
 80059ee:	645a      	str	r2, [r3, #68]	; 0x44
 80059f0:	e002      	b.n	80059f8 <HAL_SPI_Transmit_IT+0xac>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	4a1b      	ldr	r2, [pc, #108]	; (8005a64 <HAL_SPI_Transmit_IT+0x118>)
 80059f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	689a      	ldr	r2, [r3, #8]
 80059fc:	2380      	movs	r3, #128	; 0x80
 80059fe:	021b      	lsls	r3, r3, #8
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d108      	bne.n	8005a16 <HAL_SPI_Transmit_IT+0xca>
  {
    SPI_1LINE_TX(hspi);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2180      	movs	r1, #128	; 0x80
 8005a10:	01c9      	lsls	r1, r1, #7
 8005a12:	430a      	orrs	r2, r1
 8005a14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	21a0      	movs	r1, #160	; 0xa0
 8005a22:	430a      	orrs	r2, r1
 8005a24:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2240      	movs	r2, #64	; 0x40
 8005a2e:	4013      	ands	r3, r2
 8005a30:	2b40      	cmp	r3, #64	; 0x40
 8005a32:	d008      	beq.n	8005a46 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2140      	movs	r1, #64	; 0x40
 8005a40:	430a      	orrs	r2, r1
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	e000      	b.n	8005a48 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8005a46:	46c0      	nop			; (mov r8, r8)
  __HAL_UNLOCK(hspi);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2250      	movs	r2, #80	; 0x50
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005a50:	2317      	movs	r3, #23
 8005a52:	18fb      	adds	r3, r7, r3
 8005a54:	781b      	ldrb	r3, [r3, #0]
}
 8005a56:	0018      	movs	r0, r3
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	b006      	add	sp, #24
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	46c0      	nop			; (mov r8, r8)
 8005a60:	08005cff 	.word	0x08005cff
 8005a64:	08005cb7 	.word	0x08005cb7

08005a68 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b088      	sub	sp, #32
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	099b      	lsrs	r3, r3, #6
 8005a84:	001a      	movs	r2, r3
 8005a86:	2301      	movs	r3, #1
 8005a88:	4013      	ands	r3, r2
 8005a8a:	d10f      	bne.n	8005aac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005a92:	d00b      	beq.n	8005aac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	099b      	lsrs	r3, r3, #6
 8005a98:	001a      	movs	r2, r3
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	d005      	beq.n	8005aac <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	0010      	movs	r0, r2
 8005aa8:	4798      	blx	r3
    return;
 8005aaa:	e0d6      	b.n	8005c5a <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	085b      	lsrs	r3, r3, #1
 8005ab0:	001a      	movs	r2, r3
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	d00b      	beq.n	8005ad0 <HAL_SPI_IRQHandler+0x68>
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	09db      	lsrs	r3, r3, #7
 8005abc:	001a      	movs	r2, r3
 8005abe:	2301      	movs	r3, #1
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	d005      	beq.n	8005ad0 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	0010      	movs	r0, r2
 8005acc:	4798      	blx	r3
    return;
 8005ace:	e0c4      	b.n	8005c5a <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	095b      	lsrs	r3, r3, #5
 8005ad4:	001a      	movs	r2, r3
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	4013      	ands	r3, r2
 8005ada:	d10c      	bne.n	8005af6 <HAL_SPI_IRQHandler+0x8e>
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	099b      	lsrs	r3, r3, #6
 8005ae0:	001a      	movs	r2, r3
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	d106      	bne.n	8005af6 <HAL_SPI_IRQHandler+0x8e>
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	0a1b      	lsrs	r3, r3, #8
 8005aec:	001a      	movs	r2, r3
 8005aee:	2301      	movs	r3, #1
 8005af0:	4013      	ands	r3, r2
 8005af2:	d100      	bne.n	8005af6 <HAL_SPI_IRQHandler+0x8e>
 8005af4:	e0b1      	b.n	8005c5a <HAL_SPI_IRQHandler+0x1f2>
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	095b      	lsrs	r3, r3, #5
 8005afa:	001a      	movs	r2, r3
 8005afc:	2301      	movs	r3, #1
 8005afe:	4013      	ands	r3, r2
 8005b00:	d100      	bne.n	8005b04 <HAL_SPI_IRQHandler+0x9c>
 8005b02:	e0aa      	b.n	8005c5a <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	099b      	lsrs	r3, r3, #6
 8005b08:	001a      	movs	r2, r3
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	d023      	beq.n	8005b58 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2251      	movs	r2, #81	; 0x51
 8005b14:	5c9b      	ldrb	r3, [r3, r2]
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b03      	cmp	r3, #3
 8005b1a:	d011      	beq.n	8005b40 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b20:	2204      	movs	r2, #4
 8005b22:	431a      	orrs	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b28:	2300      	movs	r3, #0
 8005b2a:	617b      	str	r3, [r7, #20]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	617b      	str	r3, [r7, #20]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	617b      	str	r3, [r7, #20]
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	e00b      	b.n	8005b58 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b40:	2300      	movs	r3, #0
 8005b42:	613b      	str	r3, [r7, #16]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	613b      	str	r3, [r7, #16]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	613b      	str	r3, [r7, #16]
 8005b54:	693b      	ldr	r3, [r7, #16]
        return;
 8005b56:	e080      	b.n	8005c5a <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	095b      	lsrs	r3, r3, #5
 8005b5c:	001a      	movs	r2, r3
 8005b5e:	2301      	movs	r3, #1
 8005b60:	4013      	ands	r3, r2
 8005b62:	d014      	beq.n	8005b8e <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b68:	2201      	movs	r2, #1
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005b70:	2300      	movs	r3, #0
 8005b72:	60fb      	str	r3, [r7, #12]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	60fb      	str	r3, [r7, #12]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2140      	movs	r1, #64	; 0x40
 8005b88:	438a      	bics	r2, r1
 8005b8a:	601a      	str	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	0a1b      	lsrs	r3, r3, #8
 8005b92:	001a      	movs	r2, r3
 8005b94:	2301      	movs	r3, #1
 8005b96:	4013      	ands	r3, r2
 8005b98:	d00c      	beq.n	8005bb4 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9e:	2208      	movs	r2, #8
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60bb      	str	r3, [r7, #8]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	60bb      	str	r3, [r7, #8]
 8005bb2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d04d      	beq.n	8005c58 <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	21e0      	movs	r1, #224	; 0xe0
 8005bc8:	438a      	bics	r2, r1
 8005bca:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2251      	movs	r2, #81	; 0x51
 8005bd0:	2101      	movs	r1, #1
 8005bd2:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	4013      	ands	r3, r2
 8005bda:	d103      	bne.n	8005be4 <HAL_SPI_IRQHandler+0x17c>
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	2201      	movs	r2, #1
 8005be0:	4013      	ands	r3, r2
 8005be2:	d032      	beq.n	8005c4a <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	685a      	ldr	r2, [r3, #4]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2103      	movs	r1, #3
 8005bf0:	438a      	bics	r2, r1
 8005bf2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d010      	beq.n	8005c1e <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c00:	4a17      	ldr	r2, [pc, #92]	; (8005c60 <HAL_SPI_IRQHandler+0x1f8>)
 8005c02:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c08:	0018      	movs	r0, r3
 8005c0a:	f7fd fb29 	bl	8003260 <HAL_DMA_Abort_IT>
 8005c0e:	1e03      	subs	r3, r0, #0
 8005c10:	d005      	beq.n	8005c1e <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c16:	2240      	movs	r2, #64	; 0x40
 8005c18:	431a      	orrs	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d016      	beq.n	8005c54 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c2a:	4a0d      	ldr	r2, [pc, #52]	; (8005c60 <HAL_SPI_IRQHandler+0x1f8>)
 8005c2c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c32:	0018      	movs	r0, r3
 8005c34:	f7fd fb14 	bl	8003260 <HAL_DMA_Abort_IT>
 8005c38:	1e03      	subs	r3, r0, #0
 8005c3a:	d00b      	beq.n	8005c54 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c40:	2240      	movs	r2, #64	; 0x40
 8005c42:	431a      	orrs	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005c48:	e004      	b.n	8005c54 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	0018      	movs	r0, r3
 8005c4e:	f000 f809 	bl	8005c64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005c52:	e000      	b.n	8005c56 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8005c54:	46c0      	nop			; (mov r8, r8)
    return;
 8005c56:	46c0      	nop			; (mov r8, r8)
 8005c58:	46c0      	nop			; (mov r8, r8)
  }
}
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	b008      	add	sp, #32
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	08005c8d 	.word	0x08005c8d

08005c64 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005c6c:	46c0      	nop			; (mov r8, r8)
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	b002      	add	sp, #8
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2251      	movs	r2, #81	; 0x51
 8005c80:	5c9b      	ldrb	r3, [r3, r2]
 8005c82:	b2db      	uxtb	r3, r3
}
 8005c84:	0018      	movs	r0, r3
 8005c86:	46bd      	mov	sp, r7
 8005c88:	b002      	add	sp, #8
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c98:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	0018      	movs	r0, r3
 8005caa:	f7ff ffdb 	bl	8005c64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005cae:	46c0      	nop			; (mov r8, r8)
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	b004      	add	sp, #16
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b082      	sub	sp, #8
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	330c      	adds	r3, #12
 8005cc8:	7812      	ldrb	r2, [r2, #0]
 8005cca:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd0:	1c5a      	adds	r2, r3, #1
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d103      	bne.n	8005cf6 <SPI_TxISR_8BIT+0x40>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	0018      	movs	r0, r3
 8005cf2:	f000 f8d5 	bl	8005ea0 <SPI_CloseTx_ISR>
  }
}
 8005cf6:	46c0      	nop			; (mov r8, r8)
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	b002      	add	sp, #8
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b082      	sub	sp, #8
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0a:	881a      	ldrh	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d16:	1c9a      	adds	r2, r3, #2
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	3b01      	subs	r3, #1
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d103      	bne.n	8005d3c <SPI_TxISR_16BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	0018      	movs	r0, r3
 8005d38:	f000 f8b2 	bl	8005ea0 <SPI_CloseTx_ISR>
  }
}
 8005d3c:	46c0      	nop			; (mov r8, r8)
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	b002      	add	sp, #8
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	603b      	str	r3, [r7, #0]
 8005d50:	1dfb      	adds	r3, r7, #7
 8005d52:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d54:	e050      	b.n	8005df8 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	d04d      	beq.n	8005df8 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005d5c:	f7fc fed4 	bl	8002b08 <HAL_GetTick>
 8005d60:	0002      	movs	r2, r0
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d902      	bls.n	8005d72 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d142      	bne.n	8005df8 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	21e0      	movs	r1, #224	; 0xe0
 8005d7e:	438a      	bics	r2, r1
 8005d80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	685a      	ldr	r2, [r3, #4]
 8005d86:	2382      	movs	r3, #130	; 0x82
 8005d88:	005b      	lsls	r3, r3, #1
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d113      	bne.n	8005db6 <SPI_WaitFlagStateUntilTimeout+0x72>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	689a      	ldr	r2, [r3, #8]
 8005d92:	2380      	movs	r3, #128	; 0x80
 8005d94:	021b      	lsls	r3, r3, #8
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d005      	beq.n	8005da6 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	689a      	ldr	r2, [r3, #8]
 8005d9e:	2380      	movs	r3, #128	; 0x80
 8005da0:	00db      	lsls	r3, r3, #3
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d107      	bne.n	8005db6 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2140      	movs	r1, #64	; 0x40
 8005db2:	438a      	bics	r2, r1
 8005db4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dba:	2380      	movs	r3, #128	; 0x80
 8005dbc:	019b      	lsls	r3, r3, #6
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d110      	bne.n	8005de4 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4914      	ldr	r1, [pc, #80]	; (8005e20 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8005dce:	400a      	ands	r2, r1
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2180      	movs	r1, #128	; 0x80
 8005dde:	0189      	lsls	r1, r1, #6
 8005de0:	430a      	orrs	r2, r1
 8005de2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2251      	movs	r2, #81	; 0x51
 8005de8:	2101      	movs	r1, #1
 8005dea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2250      	movs	r2, #80	; 0x50
 8005df0:	2100      	movs	r1, #0
 8005df2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e00f      	b.n	8005e18 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	4013      	ands	r3, r2
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	425a      	negs	r2, r3
 8005e08:	4153      	adcs	r3, r2
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	001a      	movs	r2, r3
 8005e0e:	1dfb      	adds	r3, r7, #7
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d19f      	bne.n	8005d56 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	0018      	movs	r0, r3
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	b004      	add	sp, #16
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	ffffdfff 	.word	0xffffdfff

08005e24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af02      	add	r7, sp, #8
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	2382      	movs	r3, #130	; 0x82
 8005e36:	005b      	lsls	r3, r3, #1
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d112      	bne.n	8005e62 <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	0013      	movs	r3, r2
 8005e46:	2200      	movs	r2, #0
 8005e48:	2180      	movs	r1, #128	; 0x80
 8005e4a:	f7ff ff7b 	bl	8005d44 <SPI_WaitFlagStateUntilTimeout>
 8005e4e:	1e03      	subs	r3, r0, #0
 8005e50:	d020      	beq.n	8005e94 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e56:	2220      	movs	r2, #32
 8005e58:	431a      	orrs	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e019      	b.n	8005e96 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2251      	movs	r2, #81	; 0x51
 8005e66:	5c9b      	ldrb	r3, [r3, r2]
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b05      	cmp	r3, #5
 8005e6c:	d112      	bne.n	8005e94 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	0013      	movs	r3, r2
 8005e78:	2200      	movs	r2, #0
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	f7ff ff62 	bl	8005d44 <SPI_WaitFlagStateUntilTimeout>
 8005e80:	1e03      	subs	r3, r0, #0
 8005e82:	d007      	beq.n	8005e94 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e88:	2220      	movs	r2, #32
 8005e8a:	431a      	orrs	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e000      	b.n	8005e96 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	0018      	movs	r0, r3
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	b004      	add	sp, #16
 8005e9c:	bd80      	pop	{r7, pc}
	...

08005ea0 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005ea8:	4b2d      	ldr	r3, [pc, #180]	; (8005f60 <SPI_CloseTx_ISR+0xc0>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	492d      	ldr	r1, [pc, #180]	; (8005f64 <SPI_CloseTx_ISR+0xc4>)
 8005eae:	0018      	movs	r0, r3
 8005eb0:	f7fa f92a 	bl	8000108 <__udivsi3>
 8005eb4:	0003      	movs	r3, r0
 8005eb6:	001a      	movs	r2, r3
 8005eb8:	2364      	movs	r3, #100	; 0x64
 8005eba:	4353      	muls	r3, r2
 8005ebc:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ebe:	f7fc fe23 	bl	8002b08 <HAL_GetTick>
 8005ec2:	0003      	movs	r3, r0
 8005ec4:	617b      	str	r3, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d106      	bne.n	8005eda <SPI_CloseTx_ISR+0x3a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	431a      	orrs	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ed8:	e008      	b.n	8005eec <SPI_CloseTx_ISR+0x4c>
    }
    count--;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	3b01      	subs	r3, #1
 8005ede:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	4013      	ands	r3, r2
 8005eea:	d0ec      	beq.n	8005ec6 <SPI_CloseTx_ISR+0x26>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	21a0      	movs	r1, #160	; 0xa0
 8005ef8:	438a      	bics	r2, r1
 8005efa:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2164      	movs	r1, #100	; 0x64
 8005f02:	0018      	movs	r0, r3
 8005f04:	f7ff ff8e 	bl	8005e24 <SPI_EndRxTxTransaction>
 8005f08:	1e03      	subs	r3, r0, #0
 8005f0a:	d005      	beq.n	8005f18 <SPI_CloseTx_ISR+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f10:	2220      	movs	r2, #32
 8005f12:	431a      	orrs	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10a      	bne.n	8005f36 <SPI_CloseTx_ISR+0x96>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f20:	2300      	movs	r3, #0
 8005f22:	60fb      	str	r3, [r7, #12]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	60fb      	str	r3, [r7, #12]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2251      	movs	r2, #81	; 0x51
 8005f3a:	2101      	movs	r1, #1
 8005f3c:	5499      	strb	r1, [r3, r2]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d004      	beq.n	8005f50 <SPI_CloseTx_ISR+0xb0>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	0018      	movs	r0, r3
 8005f4a:	f7ff fe8b 	bl	8005c64 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8005f4e:	e003      	b.n	8005f58 <SPI_CloseTx_ISR+0xb8>
    HAL_SPI_TxCpltCallback(hspi);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	0018      	movs	r0, r3
 8005f54:	f7fa fabc 	bl	80004d0 <HAL_SPI_TxCpltCallback>
}
 8005f58:	46c0      	nop			; (mov r8, r8)
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	b006      	add	sp, #24
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	20000000 	.word	0x20000000
 8005f64:	00005dc0 	.word	0x00005dc0

08005f68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e01e      	b.n	8005fb8 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2239      	movs	r2, #57	; 0x39
 8005f7e:	5c9b      	ldrb	r3, [r3, r2]
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d107      	bne.n	8005f96 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2238      	movs	r2, #56	; 0x38
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	0018      	movs	r0, r3
 8005f92:	f7fc fb8d 	bl	80026b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2239      	movs	r2, #57	; 0x39
 8005f9a:	2102      	movs	r1, #2
 8005f9c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	3304      	adds	r3, #4
 8005fa6:	0019      	movs	r1, r3
 8005fa8:	0010      	movs	r0, r2
 8005faa:	f000 fa95 	bl	80064d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2239      	movs	r2, #57	; 0x39
 8005fb2:	2101      	movs	r1, #1
 8005fb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	0018      	movs	r0, r3
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	b002      	add	sp, #8
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68da      	ldr	r2, [r3, #12]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	2207      	movs	r2, #7
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2b06      	cmp	r3, #6
 8005fe8:	d007      	beq.n	8005ffa <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2101      	movs	r1, #1
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	0018      	movs	r0, r3
 8005ffe:	46bd      	mov	sp, r7
 8006000:	b004      	add	sp, #16
 8006002:	bd80      	pop	{r7, pc}

08006004 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68da      	ldr	r2, [r3, #12]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2101      	movs	r1, #1
 8006018:	438a      	bics	r2, r1
 800601a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	4a08      	ldr	r2, [pc, #32]	; (8006044 <HAL_TIM_Base_Stop_IT+0x40>)
 8006024:	4013      	ands	r3, r2
 8006026:	d107      	bne.n	8006038 <HAL_TIM_Base_Stop_IT+0x34>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2101      	movs	r1, #1
 8006034:	438a      	bics	r2, r1
 8006036:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	0018      	movs	r0, r3
 800603c:	46bd      	mov	sp, r7
 800603e:	b002      	add	sp, #8
 8006040:	bd80      	pop	{r7, pc}
 8006042:	46c0      	nop			; (mov r8, r8)
 8006044:	00001111 	.word	0x00001111

08006048 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d101      	bne.n	800605a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e01e      	b.n	8006098 <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2239      	movs	r2, #57	; 0x39
 800605e:	5c9b      	ldrb	r3, [r3, r2]
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d107      	bne.n	8006076 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2238      	movs	r2, #56	; 0x38
 800606a:	2100      	movs	r1, #0
 800606c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	0018      	movs	r0, r3
 8006072:	f000 f815 	bl	80060a0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2239      	movs	r2, #57	; 0x39
 800607a:	2102      	movs	r1, #2
 800607c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	3304      	adds	r3, #4
 8006086:	0019      	movs	r1, r3
 8006088:	0010      	movs	r0, r2
 800608a:	f000 fa25 	bl	80064d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2239      	movs	r2, #57	; 0x39
 8006092:	2101      	movs	r1, #1
 8006094:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	0018      	movs	r0, r3
 800609a:	46bd      	mov	sp, r7
 800609c:	b002      	add	sp, #8
 800609e:	bd80      	pop	{r7, pc}

080060a0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80060a8:	46c0      	nop			; (mov r8, r8)
 80060aa:	46bd      	mov	sp, r7
 80060ac:	b002      	add	sp, #8
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	2202      	movs	r2, #2
 80060c0:	4013      	ands	r3, r2
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d124      	bne.n	8006110 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	2202      	movs	r2, #2
 80060ce:	4013      	ands	r3, r2
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d11d      	bne.n	8006110 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2203      	movs	r2, #3
 80060da:	4252      	negs	r2, r2
 80060dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	2203      	movs	r2, #3
 80060ec:	4013      	ands	r3, r2
 80060ee:	d004      	beq.n	80060fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	0018      	movs	r0, r3
 80060f4:	f000 f9d8 	bl	80064a8 <HAL_TIM_IC_CaptureCallback>
 80060f8:	e007      	b.n	800610a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	0018      	movs	r0, r3
 80060fe:	f000 f9cb 	bl	8006498 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	0018      	movs	r0, r3
 8006106:	f000 f9d7 	bl	80064b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	2204      	movs	r2, #4
 8006118:	4013      	ands	r3, r2
 800611a:	2b04      	cmp	r3, #4
 800611c:	d125      	bne.n	800616a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	2204      	movs	r2, #4
 8006126:	4013      	ands	r3, r2
 8006128:	2b04      	cmp	r3, #4
 800612a:	d11e      	bne.n	800616a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2205      	movs	r2, #5
 8006132:	4252      	negs	r2, r2
 8006134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2202      	movs	r2, #2
 800613a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	699a      	ldr	r2, [r3, #24]
 8006142:	23c0      	movs	r3, #192	; 0xc0
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4013      	ands	r3, r2
 8006148:	d004      	beq.n	8006154 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	0018      	movs	r0, r3
 800614e:	f000 f9ab 	bl	80064a8 <HAL_TIM_IC_CaptureCallback>
 8006152:	e007      	b.n	8006164 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	0018      	movs	r0, r3
 8006158:	f000 f99e 	bl	8006498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	0018      	movs	r0, r3
 8006160:	f000 f9aa 	bl	80064b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	2208      	movs	r2, #8
 8006172:	4013      	ands	r3, r2
 8006174:	2b08      	cmp	r3, #8
 8006176:	d124      	bne.n	80061c2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	2208      	movs	r2, #8
 8006180:	4013      	ands	r3, r2
 8006182:	2b08      	cmp	r3, #8
 8006184:	d11d      	bne.n	80061c2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2209      	movs	r2, #9
 800618c:	4252      	negs	r2, r2
 800618e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2204      	movs	r2, #4
 8006194:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	69db      	ldr	r3, [r3, #28]
 800619c:	2203      	movs	r2, #3
 800619e:	4013      	ands	r3, r2
 80061a0:	d004      	beq.n	80061ac <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	0018      	movs	r0, r3
 80061a6:	f000 f97f 	bl	80064a8 <HAL_TIM_IC_CaptureCallback>
 80061aa:	e007      	b.n	80061bc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	0018      	movs	r0, r3
 80061b0:	f000 f972 	bl	8006498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	0018      	movs	r0, r3
 80061b8:	f000 f97e 	bl	80064b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	2210      	movs	r2, #16
 80061ca:	4013      	ands	r3, r2
 80061cc:	2b10      	cmp	r3, #16
 80061ce:	d125      	bne.n	800621c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	2210      	movs	r2, #16
 80061d8:	4013      	ands	r3, r2
 80061da:	2b10      	cmp	r3, #16
 80061dc:	d11e      	bne.n	800621c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2211      	movs	r2, #17
 80061e4:	4252      	negs	r2, r2
 80061e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2208      	movs	r2, #8
 80061ec:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	69da      	ldr	r2, [r3, #28]
 80061f4:	23c0      	movs	r3, #192	; 0xc0
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4013      	ands	r3, r2
 80061fa:	d004      	beq.n	8006206 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	0018      	movs	r0, r3
 8006200:	f000 f952 	bl	80064a8 <HAL_TIM_IC_CaptureCallback>
 8006204:	e007      	b.n	8006216 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	0018      	movs	r0, r3
 800620a:	f000 f945 	bl	8006498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	0018      	movs	r0, r3
 8006212:	f000 f951 	bl	80064b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	2201      	movs	r2, #1
 8006224:	4013      	ands	r3, r2
 8006226:	2b01      	cmp	r3, #1
 8006228:	d10f      	bne.n	800624a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	2201      	movs	r2, #1
 8006232:	4013      	ands	r3, r2
 8006234:	2b01      	cmp	r3, #1
 8006236:	d108      	bne.n	800624a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2202      	movs	r2, #2
 800623e:	4252      	negs	r2, r2
 8006240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	0018      	movs	r0, r3
 8006246:	f7fc fbab 	bl	80029a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	2240      	movs	r2, #64	; 0x40
 8006252:	4013      	ands	r3, r2
 8006254:	2b40      	cmp	r3, #64	; 0x40
 8006256:	d10f      	bne.n	8006278 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	2240      	movs	r2, #64	; 0x40
 8006260:	4013      	ands	r3, r2
 8006262:	2b40      	cmp	r3, #64	; 0x40
 8006264:	d108      	bne.n	8006278 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2241      	movs	r2, #65	; 0x41
 800626c:	4252      	negs	r2, r2
 800626e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	0018      	movs	r0, r3
 8006274:	f000 f928 	bl	80064c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006278:	46c0      	nop			; (mov r8, r8)
 800627a:	46bd      	mov	sp, r7
 800627c:	b002      	add	sp, #8
 800627e:	bd80      	pop	{r7, pc}

08006280 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2238      	movs	r2, #56	; 0x38
 8006290:	5c9b      	ldrb	r3, [r3, r2]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d101      	bne.n	800629a <HAL_TIM_OC_ConfigChannel+0x1a>
 8006296:	2302      	movs	r3, #2
 8006298:	e03c      	b.n	8006314 <HAL_TIM_OC_ConfigChannel+0x94>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2238      	movs	r2, #56	; 0x38
 800629e:	2101      	movs	r1, #1
 80062a0:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2239      	movs	r2, #57	; 0x39
 80062a6:	2102      	movs	r1, #2
 80062a8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b04      	cmp	r3, #4
 80062ae:	d010      	beq.n	80062d2 <HAL_TIM_OC_ConfigChannel+0x52>
 80062b0:	d802      	bhi.n	80062b8 <HAL_TIM_OC_ConfigChannel+0x38>
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d005      	beq.n	80062c2 <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 80062b6:	e024      	b.n	8006302 <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	d012      	beq.n	80062e2 <HAL_TIM_OC_ConfigChannel+0x62>
 80062bc:	2b0c      	cmp	r3, #12
 80062be:	d018      	beq.n	80062f2 <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 80062c0:	e01f      	b.n	8006302 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	0011      	movs	r1, r2
 80062ca:	0018      	movs	r0, r3
 80062cc:	f000 f962 	bl	8006594 <TIM_OC1_SetConfig>
      break;
 80062d0:	e017      	b.n	8006302 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	0011      	movs	r1, r2
 80062da:	0018      	movs	r0, r3
 80062dc:	f000 f996 	bl	800660c <TIM_OC2_SetConfig>
      break;
 80062e0:	e00f      	b.n	8006302 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	0011      	movs	r1, r2
 80062ea:	0018      	movs	r0, r3
 80062ec:	f000 f9d0 	bl	8006690 <TIM_OC3_SetConfig>
      break;
 80062f0:	e007      	b.n	8006302 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	0011      	movs	r1, r2
 80062fa:	0018      	movs	r0, r3
 80062fc:	f000 fa08 	bl	8006710 <TIM_OC4_SetConfig>
      break;
 8006300:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2239      	movs	r2, #57	; 0x39
 8006306:	2101      	movs	r1, #1
 8006308:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2238      	movs	r2, #56	; 0x38
 800630e:	2100      	movs	r1, #0
 8006310:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	0018      	movs	r0, r3
 8006316:	46bd      	mov	sp, r7
 8006318:	b004      	add	sp, #16
 800631a:	bd80      	pop	{r7, pc}

0800631c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2238      	movs	r2, #56	; 0x38
 800632a:	5c9b      	ldrb	r3, [r3, r2]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d101      	bne.n	8006334 <HAL_TIM_ConfigClockSource+0x18>
 8006330:	2302      	movs	r3, #2
 8006332:	e0ab      	b.n	800648c <HAL_TIM_ConfigClockSource+0x170>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2238      	movs	r2, #56	; 0x38
 8006338:	2101      	movs	r1, #1
 800633a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2239      	movs	r2, #57	; 0x39
 8006340:	2102      	movs	r1, #2
 8006342:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2277      	movs	r2, #119	; 0x77
 8006350:	4393      	bics	r3, r2
 8006352:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	4a4f      	ldr	r2, [pc, #316]	; (8006494 <HAL_TIM_ConfigClockSource+0x178>)
 8006358:	4013      	ands	r3, r2
 800635a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2b40      	cmp	r3, #64	; 0x40
 800636a:	d100      	bne.n	800636e <HAL_TIM_ConfigClockSource+0x52>
 800636c:	e06b      	b.n	8006446 <HAL_TIM_ConfigClockSource+0x12a>
 800636e:	d80e      	bhi.n	800638e <HAL_TIM_ConfigClockSource+0x72>
 8006370:	2b10      	cmp	r3, #16
 8006372:	d100      	bne.n	8006376 <HAL_TIM_ConfigClockSource+0x5a>
 8006374:	e077      	b.n	8006466 <HAL_TIM_ConfigClockSource+0x14a>
 8006376:	d803      	bhi.n	8006380 <HAL_TIM_ConfigClockSource+0x64>
 8006378:	2b00      	cmp	r3, #0
 800637a:	d100      	bne.n	800637e <HAL_TIM_ConfigClockSource+0x62>
 800637c:	e073      	b.n	8006466 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800637e:	e07c      	b.n	800647a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8006380:	2b20      	cmp	r3, #32
 8006382:	d100      	bne.n	8006386 <HAL_TIM_ConfigClockSource+0x6a>
 8006384:	e06f      	b.n	8006466 <HAL_TIM_ConfigClockSource+0x14a>
 8006386:	2b30      	cmp	r3, #48	; 0x30
 8006388:	d100      	bne.n	800638c <HAL_TIM_ConfigClockSource+0x70>
 800638a:	e06c      	b.n	8006466 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 800638c:	e075      	b.n	800647a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800638e:	2b70      	cmp	r3, #112	; 0x70
 8006390:	d00e      	beq.n	80063b0 <HAL_TIM_ConfigClockSource+0x94>
 8006392:	d804      	bhi.n	800639e <HAL_TIM_ConfigClockSource+0x82>
 8006394:	2b50      	cmp	r3, #80	; 0x50
 8006396:	d036      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0xea>
 8006398:	2b60      	cmp	r3, #96	; 0x60
 800639a:	d044      	beq.n	8006426 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 800639c:	e06d      	b.n	800647a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800639e:	2280      	movs	r2, #128	; 0x80
 80063a0:	0152      	lsls	r2, r2, #5
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d068      	beq.n	8006478 <HAL_TIM_ConfigClockSource+0x15c>
 80063a6:	2280      	movs	r2, #128	; 0x80
 80063a8:	0192      	lsls	r2, r2, #6
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d017      	beq.n	80063de <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80063ae:	e064      	b.n	800647a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6818      	ldr	r0, [r3, #0]
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	6899      	ldr	r1, [r3, #8]
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	f000 fa66 	bl	8006890 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2277      	movs	r2, #119	; 0x77
 80063d0:	4313      	orrs	r3, r2
 80063d2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	609a      	str	r2, [r3, #8]
      break;
 80063dc:	e04d      	b.n	800647a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6818      	ldr	r0, [r3, #0]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	6899      	ldr	r1, [r3, #8]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	685a      	ldr	r2, [r3, #4]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	f000 fa4f 	bl	8006890 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	689a      	ldr	r2, [r3, #8]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2180      	movs	r1, #128	; 0x80
 80063fe:	01c9      	lsls	r1, r1, #7
 8006400:	430a      	orrs	r2, r1
 8006402:	609a      	str	r2, [r3, #8]
      break;
 8006404:	e039      	b.n	800647a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6818      	ldr	r0, [r3, #0]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	6859      	ldr	r1, [r3, #4]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	001a      	movs	r2, r3
 8006414:	f000 f9c2 	bl	800679c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2150      	movs	r1, #80	; 0x50
 800641e:	0018      	movs	r0, r3
 8006420:	f000 fa1c 	bl	800685c <TIM_ITRx_SetConfig>
      break;
 8006424:	e029      	b.n	800647a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6818      	ldr	r0, [r3, #0]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	6859      	ldr	r1, [r3, #4]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	001a      	movs	r2, r3
 8006434:	f000 f9e0 	bl	80067f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2160      	movs	r1, #96	; 0x60
 800643e:	0018      	movs	r0, r3
 8006440:	f000 fa0c 	bl	800685c <TIM_ITRx_SetConfig>
      break;
 8006444:	e019      	b.n	800647a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6818      	ldr	r0, [r3, #0]
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	6859      	ldr	r1, [r3, #4]
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	001a      	movs	r2, r3
 8006454:	f000 f9a2 	bl	800679c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2140      	movs	r1, #64	; 0x40
 800645e:	0018      	movs	r0, r3
 8006460:	f000 f9fc 	bl	800685c <TIM_ITRx_SetConfig>
      break;
 8006464:	e009      	b.n	800647a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	0019      	movs	r1, r3
 8006470:	0010      	movs	r0, r2
 8006472:	f000 f9f3 	bl	800685c <TIM_ITRx_SetConfig>
      break;
 8006476:	e000      	b.n	800647a <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8006478:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2239      	movs	r2, #57	; 0x39
 800647e:	2101      	movs	r1, #1
 8006480:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2238      	movs	r2, #56	; 0x38
 8006486:	2100      	movs	r1, #0
 8006488:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	0018      	movs	r0, r3
 800648e:	46bd      	mov	sp, r7
 8006490:	b004      	add	sp, #16
 8006492:	bd80      	pop	{r7, pc}
 8006494:	ffff00ff 	.word	0xffff00ff

08006498 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064a0:	46c0      	nop			; (mov r8, r8)
 80064a2:	46bd      	mov	sp, r7
 80064a4:	b002      	add	sp, #8
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064b0:	46c0      	nop			; (mov r8, r8)
 80064b2:	46bd      	mov	sp, r7
 80064b4:	b002      	add	sp, #8
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064c0:	46c0      	nop			; (mov r8, r8)
 80064c2:	46bd      	mov	sp, r7
 80064c4:	b002      	add	sp, #8
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064d0:	46c0      	nop			; (mov r8, r8)
 80064d2:	46bd      	mov	sp, r7
 80064d4:	b002      	add	sp, #8
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	2380      	movs	r3, #128	; 0x80
 80064ec:	05db      	lsls	r3, r3, #23
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d00b      	beq.n	800650a <TIM_Base_SetConfig+0x32>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a23      	ldr	r2, [pc, #140]	; (8006584 <TIM_Base_SetConfig+0xac>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d007      	beq.n	800650a <TIM_Base_SetConfig+0x32>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a22      	ldr	r2, [pc, #136]	; (8006588 <TIM_Base_SetConfig+0xb0>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d003      	beq.n	800650a <TIM_Base_SetConfig+0x32>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a21      	ldr	r2, [pc, #132]	; (800658c <TIM_Base_SetConfig+0xb4>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d108      	bne.n	800651c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2270      	movs	r2, #112	; 0x70
 800650e:	4393      	bics	r3, r2
 8006510:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	4313      	orrs	r3, r2
 800651a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	2380      	movs	r3, #128	; 0x80
 8006520:	05db      	lsls	r3, r3, #23
 8006522:	429a      	cmp	r2, r3
 8006524:	d00b      	beq.n	800653e <TIM_Base_SetConfig+0x66>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a16      	ldr	r2, [pc, #88]	; (8006584 <TIM_Base_SetConfig+0xac>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d007      	beq.n	800653e <TIM_Base_SetConfig+0x66>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a15      	ldr	r2, [pc, #84]	; (8006588 <TIM_Base_SetConfig+0xb0>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d003      	beq.n	800653e <TIM_Base_SetConfig+0x66>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a14      	ldr	r2, [pc, #80]	; (800658c <TIM_Base_SetConfig+0xb4>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d108      	bne.n	8006550 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	4a13      	ldr	r2, [pc, #76]	; (8006590 <TIM_Base_SetConfig+0xb8>)
 8006542:	4013      	ands	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	4313      	orrs	r3, r2
 800654e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2280      	movs	r2, #128	; 0x80
 8006554:	4393      	bics	r3, r2
 8006556:	001a      	movs	r2, r3
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	4313      	orrs	r3, r2
 800655e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	689a      	ldr	r2, [r3, #8]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2201      	movs	r2, #1
 800657a:	615a      	str	r2, [r3, #20]
}
 800657c:	46c0      	nop			; (mov r8, r8)
 800657e:	46bd      	mov	sp, r7
 8006580:	b004      	add	sp, #16
 8006582:	bd80      	pop	{r7, pc}
 8006584:	40000400 	.word	0x40000400
 8006588:	40010800 	.word	0x40010800
 800658c:	40011400 	.word	0x40011400
 8006590:	fffffcff 	.word	0xfffffcff

08006594 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	2201      	movs	r2, #1
 80065a4:	4393      	bics	r3, r2
 80065a6:	001a      	movs	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2270      	movs	r2, #112	; 0x70
 80065c2:	4393      	bics	r3, r2
 80065c4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2203      	movs	r2, #3
 80065ca:	4393      	bics	r3, r2
 80065cc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	2202      	movs	r2, #2
 80065dc:	4393      	bics	r3, r2
 80065de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	693a      	ldr	r2, [r7, #16]
 80065ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	621a      	str	r2, [r3, #32]
}
 8006604:	46c0      	nop			; (mov r8, r8)
 8006606:	46bd      	mov	sp, r7
 8006608:	b006      	add	sp, #24
 800660a:	bd80      	pop	{r7, pc}

0800660c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	2210      	movs	r2, #16
 800661c:	4393      	bics	r3, r2
 800661e:	001a      	movs	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a1b      	ldr	r3, [r3, #32]
 8006628:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	4a13      	ldr	r2, [pc, #76]	; (8006688 <TIM_OC2_SetConfig+0x7c>)
 800663a:	4013      	ands	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	4a12      	ldr	r2, [pc, #72]	; (800668c <TIM_OC2_SetConfig+0x80>)
 8006642:	4013      	ands	r3, r2
 8006644:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	021b      	lsls	r3, r3, #8
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	4313      	orrs	r3, r2
 8006650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	2220      	movs	r2, #32
 8006656:	4393      	bics	r3, r2
 8006658:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	011b      	lsls	r3, r3, #4
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	4313      	orrs	r3, r2
 8006664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	685a      	ldr	r2, [r3, #4]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	621a      	str	r2, [r3, #32]
}
 8006680:	46c0      	nop			; (mov r8, r8)
 8006682:	46bd      	mov	sp, r7
 8006684:	b006      	add	sp, #24
 8006686:	bd80      	pop	{r7, pc}
 8006688:	ffff8fff 	.word	0xffff8fff
 800668c:	fffffcff 	.word	0xfffffcff

08006690 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	4a1a      	ldr	r2, [pc, #104]	; (8006708 <TIM_OC3_SetConfig+0x78>)
 80066a0:	401a      	ands	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2270      	movs	r2, #112	; 0x70
 80066bc:	4393      	bics	r3, r2
 80066be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2203      	movs	r2, #3
 80066c4:	4393      	bics	r3, r2
 80066c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	4a0d      	ldr	r2, [pc, #52]	; (800670c <TIM_OC3_SetConfig+0x7c>)
 80066d6:	4013      	ands	r3, r2
 80066d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	021b      	lsls	r3, r3, #8
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	621a      	str	r2, [r3, #32]
}
 8006700:	46c0      	nop			; (mov r8, r8)
 8006702:	46bd      	mov	sp, r7
 8006704:	b006      	add	sp, #24
 8006706:	bd80      	pop	{r7, pc}
 8006708:	fffffeff 	.word	0xfffffeff
 800670c:	fffffdff 	.word	0xfffffdff

08006710 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	4a1b      	ldr	r2, [pc, #108]	; (800678c <TIM_OC4_SetConfig+0x7c>)
 8006720:	401a      	ands	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	4a15      	ldr	r2, [pc, #84]	; (8006790 <TIM_OC4_SetConfig+0x80>)
 800673c:	4013      	ands	r3, r2
 800673e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4a14      	ldr	r2, [pc, #80]	; (8006794 <TIM_OC4_SetConfig+0x84>)
 8006744:	4013      	ands	r3, r2
 8006746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	021b      	lsls	r3, r3, #8
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	4313      	orrs	r3, r2
 8006752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	4a10      	ldr	r2, [pc, #64]	; (8006798 <TIM_OC4_SetConfig+0x88>)
 8006758:	4013      	ands	r3, r2
 800675a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	031b      	lsls	r3, r3, #12
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	4313      	orrs	r3, r2
 8006766:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	621a      	str	r2, [r3, #32]
}
 8006782:	46c0      	nop			; (mov r8, r8)
 8006784:	46bd      	mov	sp, r7
 8006786:	b006      	add	sp, #24
 8006788:	bd80      	pop	{r7, pc}
 800678a:	46c0      	nop			; (mov r8, r8)
 800678c:	ffffefff 	.word	0xffffefff
 8006790:	ffff8fff 	.word	0xffff8fff
 8006794:	fffffcff 	.word	0xfffffcff
 8006798:	ffffdfff 	.word	0xffffdfff

0800679c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	2201      	movs	r2, #1
 80067b4:	4393      	bics	r3, r2
 80067b6:	001a      	movs	r2, r3
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	22f0      	movs	r2, #240	; 0xf0
 80067c6:	4393      	bics	r3, r2
 80067c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	011b      	lsls	r3, r3, #4
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	220a      	movs	r2, #10
 80067d8:	4393      	bics	r3, r2
 80067da:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067dc:	697a      	ldr	r2, [r7, #20]
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	693a      	ldr	r2, [r7, #16]
 80067e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	621a      	str	r2, [r3, #32]
}
 80067f0:	46c0      	nop			; (mov r8, r8)
 80067f2:	46bd      	mov	sp, r7
 80067f4:	b006      	add	sp, #24
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6a1b      	ldr	r3, [r3, #32]
 8006808:	2210      	movs	r2, #16
 800680a:	4393      	bics	r3, r2
 800680c:	001a      	movs	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6a1b      	ldr	r3, [r3, #32]
 800681c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	4a0d      	ldr	r2, [pc, #52]	; (8006858 <TIM_TI2_ConfigInputStage+0x60>)
 8006822:	4013      	ands	r3, r2
 8006824:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	031b      	lsls	r3, r3, #12
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	4313      	orrs	r3, r2
 800682e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	22a0      	movs	r2, #160	; 0xa0
 8006834:	4393      	bics	r3, r2
 8006836:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	011b      	lsls	r3, r3, #4
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	4313      	orrs	r3, r2
 8006840:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	693a      	ldr	r2, [r7, #16]
 800684c:	621a      	str	r2, [r3, #32]
}
 800684e:	46c0      	nop			; (mov r8, r8)
 8006850:	46bd      	mov	sp, r7
 8006852:	b006      	add	sp, #24
 8006854:	bd80      	pop	{r7, pc}
 8006856:	46c0      	nop			; (mov r8, r8)
 8006858:	ffff0fff 	.word	0xffff0fff

0800685c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2270      	movs	r2, #112	; 0x70
 8006870:	4393      	bics	r3, r2
 8006872:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006874:	683a      	ldr	r2, [r7, #0]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	4313      	orrs	r3, r2
 800687a:	2207      	movs	r2, #7
 800687c:	4313      	orrs	r3, r2
 800687e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	609a      	str	r2, [r3, #8]
}
 8006886:	46c0      	nop			; (mov r8, r8)
 8006888:	46bd      	mov	sp, r7
 800688a:	b004      	add	sp, #16
 800688c:	bd80      	pop	{r7, pc}
	...

08006890 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
 800689c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	4a09      	ldr	r2, [pc, #36]	; (80068cc <TIM_ETR_SetConfig+0x3c>)
 80068a8:	4013      	ands	r3, r2
 80068aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	021a      	lsls	r2, r3, #8
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	431a      	orrs	r2, r3
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	609a      	str	r2, [r3, #8]
}
 80068c4:	46c0      	nop			; (mov r8, r8)
 80068c6:	46bd      	mov	sp, r7
 80068c8:	b006      	add	sp, #24
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	ffff00ff 	.word	0xffff00ff

080068d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2238      	movs	r2, #56	; 0x38
 80068de:	5c9b      	ldrb	r3, [r3, r2]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d101      	bne.n	80068e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068e4:	2302      	movs	r3, #2
 80068e6:	e032      	b.n	800694e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2238      	movs	r2, #56	; 0x38
 80068ec:	2101      	movs	r1, #1
 80068ee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2239      	movs	r2, #57	; 0x39
 80068f4:	2102      	movs	r1, #2
 80068f6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2270      	movs	r2, #112	; 0x70
 800690c:	4393      	bics	r3, r2
 800690e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	4313      	orrs	r3, r2
 8006918:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	2280      	movs	r2, #128	; 0x80
 800691e:	4393      	bics	r3, r2
 8006920:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	68ba      	ldr	r2, [r7, #8]
 8006928:	4313      	orrs	r3, r2
 800692a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68ba      	ldr	r2, [r7, #8]
 800693a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2239      	movs	r2, #57	; 0x39
 8006940:	2101      	movs	r1, #1
 8006942:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2238      	movs	r2, #56	; 0x38
 8006948:	2100      	movs	r1, #0
 800694a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	0018      	movs	r0, r3
 8006950:	46bd      	mov	sp, r7
 8006952:	b004      	add	sp, #16
 8006954:	bd80      	pop	{r7, pc}

08006956 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b082      	sub	sp, #8
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
 800695e:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2238      	movs	r2, #56	; 0x38
 8006964:	5c9b      	ldrb	r3, [r3, r2]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d101      	bne.n	800696e <HAL_TIMEx_RemapConfig+0x18>
 800696a:	2302      	movs	r3, #2
 800696c:	e00c      	b.n	8006988 <HAL_TIMEx_RemapConfig+0x32>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2238      	movs	r2, #56	; 0x38
 8006972:	2101      	movs	r1, #1
 8006974:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	683a      	ldr	r2, [r7, #0]
 800697c:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2238      	movs	r2, #56	; 0x38
 8006982:	2100      	movs	r1, #0
 8006984:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	0018      	movs	r0, r3
 800698a:	46bd      	mov	sp, r7
 800698c:	b002      	add	sp, #8
 800698e:	bd80      	pop	{r7, pc}

08006990 <__errno>:
 8006990:	4b01      	ldr	r3, [pc, #4]	; (8006998 <__errno+0x8>)
 8006992:	6818      	ldr	r0, [r3, #0]
 8006994:	4770      	bx	lr
 8006996:	46c0      	nop			; (mov r8, r8)
 8006998:	20000004 	.word	0x20000004

0800699c <__libc_init_array>:
 800699c:	b570      	push	{r4, r5, r6, lr}
 800699e:	2600      	movs	r6, #0
 80069a0:	4d0c      	ldr	r5, [pc, #48]	; (80069d4 <__libc_init_array+0x38>)
 80069a2:	4c0d      	ldr	r4, [pc, #52]	; (80069d8 <__libc_init_array+0x3c>)
 80069a4:	1b64      	subs	r4, r4, r5
 80069a6:	10a4      	asrs	r4, r4, #2
 80069a8:	42a6      	cmp	r6, r4
 80069aa:	d109      	bne.n	80069c0 <__libc_init_array+0x24>
 80069ac:	2600      	movs	r6, #0
 80069ae:	f000 fc29 	bl	8007204 <_init>
 80069b2:	4d0a      	ldr	r5, [pc, #40]	; (80069dc <__libc_init_array+0x40>)
 80069b4:	4c0a      	ldr	r4, [pc, #40]	; (80069e0 <__libc_init_array+0x44>)
 80069b6:	1b64      	subs	r4, r4, r5
 80069b8:	10a4      	asrs	r4, r4, #2
 80069ba:	42a6      	cmp	r6, r4
 80069bc:	d105      	bne.n	80069ca <__libc_init_array+0x2e>
 80069be:	bd70      	pop	{r4, r5, r6, pc}
 80069c0:	00b3      	lsls	r3, r6, #2
 80069c2:	58eb      	ldr	r3, [r5, r3]
 80069c4:	4798      	blx	r3
 80069c6:	3601      	adds	r6, #1
 80069c8:	e7ee      	b.n	80069a8 <__libc_init_array+0xc>
 80069ca:	00b3      	lsls	r3, r6, #2
 80069cc:	58eb      	ldr	r3, [r5, r3]
 80069ce:	4798      	blx	r3
 80069d0:	3601      	adds	r6, #1
 80069d2:	e7f2      	b.n	80069ba <__libc_init_array+0x1e>
 80069d4:	080078ac 	.word	0x080078ac
 80069d8:	080078ac 	.word	0x080078ac
 80069dc:	080078ac 	.word	0x080078ac
 80069e0:	080078b0 	.word	0x080078b0

080069e4 <memcpy>:
 80069e4:	2300      	movs	r3, #0
 80069e6:	b510      	push	{r4, lr}
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d100      	bne.n	80069ee <memcpy+0xa>
 80069ec:	bd10      	pop	{r4, pc}
 80069ee:	5ccc      	ldrb	r4, [r1, r3]
 80069f0:	54c4      	strb	r4, [r0, r3]
 80069f2:	3301      	adds	r3, #1
 80069f4:	e7f8      	b.n	80069e8 <memcpy+0x4>

080069f6 <memset>:
 80069f6:	0003      	movs	r3, r0
 80069f8:	1812      	adds	r2, r2, r0
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d100      	bne.n	8006a00 <memset+0xa>
 80069fe:	4770      	bx	lr
 8006a00:	7019      	strb	r1, [r3, #0]
 8006a02:	3301      	adds	r3, #1
 8006a04:	e7f9      	b.n	80069fa <memset+0x4>
	...

08006a08 <siprintf>:
 8006a08:	b40e      	push	{r1, r2, r3}
 8006a0a:	b500      	push	{lr}
 8006a0c:	490b      	ldr	r1, [pc, #44]	; (8006a3c <siprintf+0x34>)
 8006a0e:	b09c      	sub	sp, #112	; 0x70
 8006a10:	ab1d      	add	r3, sp, #116	; 0x74
 8006a12:	9002      	str	r0, [sp, #8]
 8006a14:	9006      	str	r0, [sp, #24]
 8006a16:	9107      	str	r1, [sp, #28]
 8006a18:	9104      	str	r1, [sp, #16]
 8006a1a:	4809      	ldr	r0, [pc, #36]	; (8006a40 <siprintf+0x38>)
 8006a1c:	4909      	ldr	r1, [pc, #36]	; (8006a44 <siprintf+0x3c>)
 8006a1e:	cb04      	ldmia	r3!, {r2}
 8006a20:	9105      	str	r1, [sp, #20]
 8006a22:	6800      	ldr	r0, [r0, #0]
 8006a24:	a902      	add	r1, sp, #8
 8006a26:	9301      	str	r3, [sp, #4]
 8006a28:	f000 f870 	bl	8006b0c <_svfiprintf_r>
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	9a02      	ldr	r2, [sp, #8]
 8006a30:	7013      	strb	r3, [r2, #0]
 8006a32:	b01c      	add	sp, #112	; 0x70
 8006a34:	bc08      	pop	{r3}
 8006a36:	b003      	add	sp, #12
 8006a38:	4718      	bx	r3
 8006a3a:	46c0      	nop			; (mov r8, r8)
 8006a3c:	7fffffff 	.word	0x7fffffff
 8006a40:	20000004 	.word	0x20000004
 8006a44:	ffff0208 	.word	0xffff0208

08006a48 <__ssputs_r>:
 8006a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a4a:	688e      	ldr	r6, [r1, #8]
 8006a4c:	b085      	sub	sp, #20
 8006a4e:	0007      	movs	r7, r0
 8006a50:	000c      	movs	r4, r1
 8006a52:	9203      	str	r2, [sp, #12]
 8006a54:	9301      	str	r3, [sp, #4]
 8006a56:	429e      	cmp	r6, r3
 8006a58:	d83c      	bhi.n	8006ad4 <__ssputs_r+0x8c>
 8006a5a:	2390      	movs	r3, #144	; 0x90
 8006a5c:	898a      	ldrh	r2, [r1, #12]
 8006a5e:	00db      	lsls	r3, r3, #3
 8006a60:	421a      	tst	r2, r3
 8006a62:	d034      	beq.n	8006ace <__ssputs_r+0x86>
 8006a64:	2503      	movs	r5, #3
 8006a66:	6909      	ldr	r1, [r1, #16]
 8006a68:	6823      	ldr	r3, [r4, #0]
 8006a6a:	1a5b      	subs	r3, r3, r1
 8006a6c:	9302      	str	r3, [sp, #8]
 8006a6e:	6963      	ldr	r3, [r4, #20]
 8006a70:	9802      	ldr	r0, [sp, #8]
 8006a72:	435d      	muls	r5, r3
 8006a74:	0feb      	lsrs	r3, r5, #31
 8006a76:	195d      	adds	r5, r3, r5
 8006a78:	9b01      	ldr	r3, [sp, #4]
 8006a7a:	106d      	asrs	r5, r5, #1
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	181b      	adds	r3, r3, r0
 8006a80:	42ab      	cmp	r3, r5
 8006a82:	d900      	bls.n	8006a86 <__ssputs_r+0x3e>
 8006a84:	001d      	movs	r5, r3
 8006a86:	0553      	lsls	r3, r2, #21
 8006a88:	d532      	bpl.n	8006af0 <__ssputs_r+0xa8>
 8006a8a:	0029      	movs	r1, r5
 8006a8c:	0038      	movs	r0, r7
 8006a8e:	f000 fb19 	bl	80070c4 <_malloc_r>
 8006a92:	1e06      	subs	r6, r0, #0
 8006a94:	d109      	bne.n	8006aaa <__ssputs_r+0x62>
 8006a96:	230c      	movs	r3, #12
 8006a98:	603b      	str	r3, [r7, #0]
 8006a9a:	2340      	movs	r3, #64	; 0x40
 8006a9c:	2001      	movs	r0, #1
 8006a9e:	89a2      	ldrh	r2, [r4, #12]
 8006aa0:	4240      	negs	r0, r0
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	81a3      	strh	r3, [r4, #12]
 8006aa6:	b005      	add	sp, #20
 8006aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aaa:	9a02      	ldr	r2, [sp, #8]
 8006aac:	6921      	ldr	r1, [r4, #16]
 8006aae:	f7ff ff99 	bl	80069e4 <memcpy>
 8006ab2:	89a3      	ldrh	r3, [r4, #12]
 8006ab4:	4a14      	ldr	r2, [pc, #80]	; (8006b08 <__ssputs_r+0xc0>)
 8006ab6:	401a      	ands	r2, r3
 8006ab8:	2380      	movs	r3, #128	; 0x80
 8006aba:	4313      	orrs	r3, r2
 8006abc:	81a3      	strh	r3, [r4, #12]
 8006abe:	9b02      	ldr	r3, [sp, #8]
 8006ac0:	6126      	str	r6, [r4, #16]
 8006ac2:	18f6      	adds	r6, r6, r3
 8006ac4:	6026      	str	r6, [r4, #0]
 8006ac6:	6165      	str	r5, [r4, #20]
 8006ac8:	9e01      	ldr	r6, [sp, #4]
 8006aca:	1aed      	subs	r5, r5, r3
 8006acc:	60a5      	str	r5, [r4, #8]
 8006ace:	9b01      	ldr	r3, [sp, #4]
 8006ad0:	429e      	cmp	r6, r3
 8006ad2:	d900      	bls.n	8006ad6 <__ssputs_r+0x8e>
 8006ad4:	9e01      	ldr	r6, [sp, #4]
 8006ad6:	0032      	movs	r2, r6
 8006ad8:	9903      	ldr	r1, [sp, #12]
 8006ada:	6820      	ldr	r0, [r4, #0]
 8006adc:	f000 fa95 	bl	800700a <memmove>
 8006ae0:	68a3      	ldr	r3, [r4, #8]
 8006ae2:	2000      	movs	r0, #0
 8006ae4:	1b9b      	subs	r3, r3, r6
 8006ae6:	60a3      	str	r3, [r4, #8]
 8006ae8:	6823      	ldr	r3, [r4, #0]
 8006aea:	199e      	adds	r6, r3, r6
 8006aec:	6026      	str	r6, [r4, #0]
 8006aee:	e7da      	b.n	8006aa6 <__ssputs_r+0x5e>
 8006af0:	002a      	movs	r2, r5
 8006af2:	0038      	movs	r0, r7
 8006af4:	f000 fb44 	bl	8007180 <_realloc_r>
 8006af8:	1e06      	subs	r6, r0, #0
 8006afa:	d1e0      	bne.n	8006abe <__ssputs_r+0x76>
 8006afc:	6921      	ldr	r1, [r4, #16]
 8006afe:	0038      	movs	r0, r7
 8006b00:	f000 fa96 	bl	8007030 <_free_r>
 8006b04:	e7c7      	b.n	8006a96 <__ssputs_r+0x4e>
 8006b06:	46c0      	nop			; (mov r8, r8)
 8006b08:	fffffb7f 	.word	0xfffffb7f

08006b0c <_svfiprintf_r>:
 8006b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b0e:	b0a1      	sub	sp, #132	; 0x84
 8006b10:	9003      	str	r0, [sp, #12]
 8006b12:	001d      	movs	r5, r3
 8006b14:	898b      	ldrh	r3, [r1, #12]
 8006b16:	000f      	movs	r7, r1
 8006b18:	0016      	movs	r6, r2
 8006b1a:	061b      	lsls	r3, r3, #24
 8006b1c:	d511      	bpl.n	8006b42 <_svfiprintf_r+0x36>
 8006b1e:	690b      	ldr	r3, [r1, #16]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d10e      	bne.n	8006b42 <_svfiprintf_r+0x36>
 8006b24:	2140      	movs	r1, #64	; 0x40
 8006b26:	f000 facd 	bl	80070c4 <_malloc_r>
 8006b2a:	6038      	str	r0, [r7, #0]
 8006b2c:	6138      	str	r0, [r7, #16]
 8006b2e:	2800      	cmp	r0, #0
 8006b30:	d105      	bne.n	8006b3e <_svfiprintf_r+0x32>
 8006b32:	230c      	movs	r3, #12
 8006b34:	9a03      	ldr	r2, [sp, #12]
 8006b36:	3801      	subs	r0, #1
 8006b38:	6013      	str	r3, [r2, #0]
 8006b3a:	b021      	add	sp, #132	; 0x84
 8006b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b3e:	2340      	movs	r3, #64	; 0x40
 8006b40:	617b      	str	r3, [r7, #20]
 8006b42:	2300      	movs	r3, #0
 8006b44:	ac08      	add	r4, sp, #32
 8006b46:	6163      	str	r3, [r4, #20]
 8006b48:	3320      	adds	r3, #32
 8006b4a:	7663      	strb	r3, [r4, #25]
 8006b4c:	3310      	adds	r3, #16
 8006b4e:	76a3      	strb	r3, [r4, #26]
 8006b50:	9507      	str	r5, [sp, #28]
 8006b52:	0035      	movs	r5, r6
 8006b54:	782b      	ldrb	r3, [r5, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d001      	beq.n	8006b5e <_svfiprintf_r+0x52>
 8006b5a:	2b25      	cmp	r3, #37	; 0x25
 8006b5c:	d146      	bne.n	8006bec <_svfiprintf_r+0xe0>
 8006b5e:	1bab      	subs	r3, r5, r6
 8006b60:	9305      	str	r3, [sp, #20]
 8006b62:	d00c      	beq.n	8006b7e <_svfiprintf_r+0x72>
 8006b64:	0032      	movs	r2, r6
 8006b66:	0039      	movs	r1, r7
 8006b68:	9803      	ldr	r0, [sp, #12]
 8006b6a:	f7ff ff6d 	bl	8006a48 <__ssputs_r>
 8006b6e:	1c43      	adds	r3, r0, #1
 8006b70:	d100      	bne.n	8006b74 <_svfiprintf_r+0x68>
 8006b72:	e0ae      	b.n	8006cd2 <_svfiprintf_r+0x1c6>
 8006b74:	6962      	ldr	r2, [r4, #20]
 8006b76:	9b05      	ldr	r3, [sp, #20]
 8006b78:	4694      	mov	ip, r2
 8006b7a:	4463      	add	r3, ip
 8006b7c:	6163      	str	r3, [r4, #20]
 8006b7e:	782b      	ldrb	r3, [r5, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d100      	bne.n	8006b86 <_svfiprintf_r+0x7a>
 8006b84:	e0a5      	b.n	8006cd2 <_svfiprintf_r+0x1c6>
 8006b86:	2201      	movs	r2, #1
 8006b88:	2300      	movs	r3, #0
 8006b8a:	4252      	negs	r2, r2
 8006b8c:	6062      	str	r2, [r4, #4]
 8006b8e:	a904      	add	r1, sp, #16
 8006b90:	3254      	adds	r2, #84	; 0x54
 8006b92:	1852      	adds	r2, r2, r1
 8006b94:	1c6e      	adds	r6, r5, #1
 8006b96:	6023      	str	r3, [r4, #0]
 8006b98:	60e3      	str	r3, [r4, #12]
 8006b9a:	60a3      	str	r3, [r4, #8]
 8006b9c:	7013      	strb	r3, [r2, #0]
 8006b9e:	65a3      	str	r3, [r4, #88]	; 0x58
 8006ba0:	7831      	ldrb	r1, [r6, #0]
 8006ba2:	2205      	movs	r2, #5
 8006ba4:	4853      	ldr	r0, [pc, #332]	; (8006cf4 <_svfiprintf_r+0x1e8>)
 8006ba6:	f000 fa25 	bl	8006ff4 <memchr>
 8006baa:	1c75      	adds	r5, r6, #1
 8006bac:	2800      	cmp	r0, #0
 8006bae:	d11f      	bne.n	8006bf0 <_svfiprintf_r+0xe4>
 8006bb0:	6822      	ldr	r2, [r4, #0]
 8006bb2:	06d3      	lsls	r3, r2, #27
 8006bb4:	d504      	bpl.n	8006bc0 <_svfiprintf_r+0xb4>
 8006bb6:	2353      	movs	r3, #83	; 0x53
 8006bb8:	a904      	add	r1, sp, #16
 8006bba:	185b      	adds	r3, r3, r1
 8006bbc:	2120      	movs	r1, #32
 8006bbe:	7019      	strb	r1, [r3, #0]
 8006bc0:	0713      	lsls	r3, r2, #28
 8006bc2:	d504      	bpl.n	8006bce <_svfiprintf_r+0xc2>
 8006bc4:	2353      	movs	r3, #83	; 0x53
 8006bc6:	a904      	add	r1, sp, #16
 8006bc8:	185b      	adds	r3, r3, r1
 8006bca:	212b      	movs	r1, #43	; 0x2b
 8006bcc:	7019      	strb	r1, [r3, #0]
 8006bce:	7833      	ldrb	r3, [r6, #0]
 8006bd0:	2b2a      	cmp	r3, #42	; 0x2a
 8006bd2:	d016      	beq.n	8006c02 <_svfiprintf_r+0xf6>
 8006bd4:	0035      	movs	r5, r6
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	200a      	movs	r0, #10
 8006bda:	68e3      	ldr	r3, [r4, #12]
 8006bdc:	782a      	ldrb	r2, [r5, #0]
 8006bde:	1c6e      	adds	r6, r5, #1
 8006be0:	3a30      	subs	r2, #48	; 0x30
 8006be2:	2a09      	cmp	r2, #9
 8006be4:	d94e      	bls.n	8006c84 <_svfiprintf_r+0x178>
 8006be6:	2900      	cmp	r1, #0
 8006be8:	d018      	beq.n	8006c1c <_svfiprintf_r+0x110>
 8006bea:	e010      	b.n	8006c0e <_svfiprintf_r+0x102>
 8006bec:	3501      	adds	r5, #1
 8006bee:	e7b1      	b.n	8006b54 <_svfiprintf_r+0x48>
 8006bf0:	4b40      	ldr	r3, [pc, #256]	; (8006cf4 <_svfiprintf_r+0x1e8>)
 8006bf2:	6822      	ldr	r2, [r4, #0]
 8006bf4:	1ac0      	subs	r0, r0, r3
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	4083      	lsls	r3, r0
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	6023      	str	r3, [r4, #0]
 8006bfe:	002e      	movs	r6, r5
 8006c00:	e7ce      	b.n	8006ba0 <_svfiprintf_r+0x94>
 8006c02:	9b07      	ldr	r3, [sp, #28]
 8006c04:	1d19      	adds	r1, r3, #4
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	9107      	str	r1, [sp, #28]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	db01      	blt.n	8006c12 <_svfiprintf_r+0x106>
 8006c0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c10:	e004      	b.n	8006c1c <_svfiprintf_r+0x110>
 8006c12:	425b      	negs	r3, r3
 8006c14:	60e3      	str	r3, [r4, #12]
 8006c16:	2302      	movs	r3, #2
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	6023      	str	r3, [r4, #0]
 8006c1c:	782b      	ldrb	r3, [r5, #0]
 8006c1e:	2b2e      	cmp	r3, #46	; 0x2e
 8006c20:	d10a      	bne.n	8006c38 <_svfiprintf_r+0x12c>
 8006c22:	786b      	ldrb	r3, [r5, #1]
 8006c24:	2b2a      	cmp	r3, #42	; 0x2a
 8006c26:	d135      	bne.n	8006c94 <_svfiprintf_r+0x188>
 8006c28:	9b07      	ldr	r3, [sp, #28]
 8006c2a:	3502      	adds	r5, #2
 8006c2c:	1d1a      	adds	r2, r3, #4
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	9207      	str	r2, [sp, #28]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	db2b      	blt.n	8006c8e <_svfiprintf_r+0x182>
 8006c36:	9309      	str	r3, [sp, #36]	; 0x24
 8006c38:	4e2f      	ldr	r6, [pc, #188]	; (8006cf8 <_svfiprintf_r+0x1ec>)
 8006c3a:	7829      	ldrb	r1, [r5, #0]
 8006c3c:	2203      	movs	r2, #3
 8006c3e:	0030      	movs	r0, r6
 8006c40:	f000 f9d8 	bl	8006ff4 <memchr>
 8006c44:	2800      	cmp	r0, #0
 8006c46:	d006      	beq.n	8006c56 <_svfiprintf_r+0x14a>
 8006c48:	2340      	movs	r3, #64	; 0x40
 8006c4a:	1b80      	subs	r0, r0, r6
 8006c4c:	4083      	lsls	r3, r0
 8006c4e:	6822      	ldr	r2, [r4, #0]
 8006c50:	3501      	adds	r5, #1
 8006c52:	4313      	orrs	r3, r2
 8006c54:	6023      	str	r3, [r4, #0]
 8006c56:	7829      	ldrb	r1, [r5, #0]
 8006c58:	2206      	movs	r2, #6
 8006c5a:	4828      	ldr	r0, [pc, #160]	; (8006cfc <_svfiprintf_r+0x1f0>)
 8006c5c:	1c6e      	adds	r6, r5, #1
 8006c5e:	7621      	strb	r1, [r4, #24]
 8006c60:	f000 f9c8 	bl	8006ff4 <memchr>
 8006c64:	2800      	cmp	r0, #0
 8006c66:	d03c      	beq.n	8006ce2 <_svfiprintf_r+0x1d6>
 8006c68:	4b25      	ldr	r3, [pc, #148]	; (8006d00 <_svfiprintf_r+0x1f4>)
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d125      	bne.n	8006cba <_svfiprintf_r+0x1ae>
 8006c6e:	2207      	movs	r2, #7
 8006c70:	9b07      	ldr	r3, [sp, #28]
 8006c72:	3307      	adds	r3, #7
 8006c74:	4393      	bics	r3, r2
 8006c76:	3308      	adds	r3, #8
 8006c78:	9307      	str	r3, [sp, #28]
 8006c7a:	6963      	ldr	r3, [r4, #20]
 8006c7c:	9a04      	ldr	r2, [sp, #16]
 8006c7e:	189b      	adds	r3, r3, r2
 8006c80:	6163      	str	r3, [r4, #20]
 8006c82:	e766      	b.n	8006b52 <_svfiprintf_r+0x46>
 8006c84:	4343      	muls	r3, r0
 8006c86:	2101      	movs	r1, #1
 8006c88:	189b      	adds	r3, r3, r2
 8006c8a:	0035      	movs	r5, r6
 8006c8c:	e7a6      	b.n	8006bdc <_svfiprintf_r+0xd0>
 8006c8e:	2301      	movs	r3, #1
 8006c90:	425b      	negs	r3, r3
 8006c92:	e7d0      	b.n	8006c36 <_svfiprintf_r+0x12a>
 8006c94:	2300      	movs	r3, #0
 8006c96:	200a      	movs	r0, #10
 8006c98:	001a      	movs	r2, r3
 8006c9a:	3501      	adds	r5, #1
 8006c9c:	6063      	str	r3, [r4, #4]
 8006c9e:	7829      	ldrb	r1, [r5, #0]
 8006ca0:	1c6e      	adds	r6, r5, #1
 8006ca2:	3930      	subs	r1, #48	; 0x30
 8006ca4:	2909      	cmp	r1, #9
 8006ca6:	d903      	bls.n	8006cb0 <_svfiprintf_r+0x1a4>
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d0c5      	beq.n	8006c38 <_svfiprintf_r+0x12c>
 8006cac:	9209      	str	r2, [sp, #36]	; 0x24
 8006cae:	e7c3      	b.n	8006c38 <_svfiprintf_r+0x12c>
 8006cb0:	4342      	muls	r2, r0
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	1852      	adds	r2, r2, r1
 8006cb6:	0035      	movs	r5, r6
 8006cb8:	e7f1      	b.n	8006c9e <_svfiprintf_r+0x192>
 8006cba:	ab07      	add	r3, sp, #28
 8006cbc:	9300      	str	r3, [sp, #0]
 8006cbe:	003a      	movs	r2, r7
 8006cc0:	4b10      	ldr	r3, [pc, #64]	; (8006d04 <_svfiprintf_r+0x1f8>)
 8006cc2:	0021      	movs	r1, r4
 8006cc4:	9803      	ldr	r0, [sp, #12]
 8006cc6:	e000      	b.n	8006cca <_svfiprintf_r+0x1be>
 8006cc8:	bf00      	nop
 8006cca:	9004      	str	r0, [sp, #16]
 8006ccc:	9b04      	ldr	r3, [sp, #16]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	d1d3      	bne.n	8006c7a <_svfiprintf_r+0x16e>
 8006cd2:	89bb      	ldrh	r3, [r7, #12]
 8006cd4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006cd6:	065b      	lsls	r3, r3, #25
 8006cd8:	d400      	bmi.n	8006cdc <_svfiprintf_r+0x1d0>
 8006cda:	e72e      	b.n	8006b3a <_svfiprintf_r+0x2e>
 8006cdc:	2001      	movs	r0, #1
 8006cde:	4240      	negs	r0, r0
 8006ce0:	e72b      	b.n	8006b3a <_svfiprintf_r+0x2e>
 8006ce2:	ab07      	add	r3, sp, #28
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	003a      	movs	r2, r7
 8006ce8:	4b06      	ldr	r3, [pc, #24]	; (8006d04 <_svfiprintf_r+0x1f8>)
 8006cea:	0021      	movs	r1, r4
 8006cec:	9803      	ldr	r0, [sp, #12]
 8006cee:	f000 f879 	bl	8006de4 <_printf_i>
 8006cf2:	e7ea      	b.n	8006cca <_svfiprintf_r+0x1be>
 8006cf4:	08007879 	.word	0x08007879
 8006cf8:	0800787f 	.word	0x0800787f
 8006cfc:	08007883 	.word	0x08007883
 8006d00:	00000000 	.word	0x00000000
 8006d04:	08006a49 	.word	0x08006a49

08006d08 <_printf_common>:
 8006d08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d0a:	0015      	movs	r5, r2
 8006d0c:	9301      	str	r3, [sp, #4]
 8006d0e:	688a      	ldr	r2, [r1, #8]
 8006d10:	690b      	ldr	r3, [r1, #16]
 8006d12:	9000      	str	r0, [sp, #0]
 8006d14:	000c      	movs	r4, r1
 8006d16:	4293      	cmp	r3, r2
 8006d18:	da00      	bge.n	8006d1c <_printf_common+0x14>
 8006d1a:	0013      	movs	r3, r2
 8006d1c:	0022      	movs	r2, r4
 8006d1e:	602b      	str	r3, [r5, #0]
 8006d20:	3243      	adds	r2, #67	; 0x43
 8006d22:	7812      	ldrb	r2, [r2, #0]
 8006d24:	2a00      	cmp	r2, #0
 8006d26:	d001      	beq.n	8006d2c <_printf_common+0x24>
 8006d28:	3301      	adds	r3, #1
 8006d2a:	602b      	str	r3, [r5, #0]
 8006d2c:	6823      	ldr	r3, [r4, #0]
 8006d2e:	069b      	lsls	r3, r3, #26
 8006d30:	d502      	bpl.n	8006d38 <_printf_common+0x30>
 8006d32:	682b      	ldr	r3, [r5, #0]
 8006d34:	3302      	adds	r3, #2
 8006d36:	602b      	str	r3, [r5, #0]
 8006d38:	2706      	movs	r7, #6
 8006d3a:	6823      	ldr	r3, [r4, #0]
 8006d3c:	401f      	ands	r7, r3
 8006d3e:	d027      	beq.n	8006d90 <_printf_common+0x88>
 8006d40:	0023      	movs	r3, r4
 8006d42:	3343      	adds	r3, #67	; 0x43
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	1e5a      	subs	r2, r3, #1
 8006d48:	4193      	sbcs	r3, r2
 8006d4a:	6822      	ldr	r2, [r4, #0]
 8006d4c:	0692      	lsls	r2, r2, #26
 8006d4e:	d430      	bmi.n	8006db2 <_printf_common+0xaa>
 8006d50:	0022      	movs	r2, r4
 8006d52:	9901      	ldr	r1, [sp, #4]
 8006d54:	3243      	adds	r2, #67	; 0x43
 8006d56:	9800      	ldr	r0, [sp, #0]
 8006d58:	9e08      	ldr	r6, [sp, #32]
 8006d5a:	47b0      	blx	r6
 8006d5c:	1c43      	adds	r3, r0, #1
 8006d5e:	d025      	beq.n	8006dac <_printf_common+0xa4>
 8006d60:	2306      	movs	r3, #6
 8006d62:	6820      	ldr	r0, [r4, #0]
 8006d64:	682a      	ldr	r2, [r5, #0]
 8006d66:	68e1      	ldr	r1, [r4, #12]
 8006d68:	4003      	ands	r3, r0
 8006d6a:	2500      	movs	r5, #0
 8006d6c:	2b04      	cmp	r3, #4
 8006d6e:	d103      	bne.n	8006d78 <_printf_common+0x70>
 8006d70:	1a8d      	subs	r5, r1, r2
 8006d72:	43eb      	mvns	r3, r5
 8006d74:	17db      	asrs	r3, r3, #31
 8006d76:	401d      	ands	r5, r3
 8006d78:	68a3      	ldr	r3, [r4, #8]
 8006d7a:	6922      	ldr	r2, [r4, #16]
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	dd01      	ble.n	8006d84 <_printf_common+0x7c>
 8006d80:	1a9b      	subs	r3, r3, r2
 8006d82:	18ed      	adds	r5, r5, r3
 8006d84:	2700      	movs	r7, #0
 8006d86:	42bd      	cmp	r5, r7
 8006d88:	d120      	bne.n	8006dcc <_printf_common+0xc4>
 8006d8a:	2000      	movs	r0, #0
 8006d8c:	e010      	b.n	8006db0 <_printf_common+0xa8>
 8006d8e:	3701      	adds	r7, #1
 8006d90:	68e3      	ldr	r3, [r4, #12]
 8006d92:	682a      	ldr	r2, [r5, #0]
 8006d94:	1a9b      	subs	r3, r3, r2
 8006d96:	42bb      	cmp	r3, r7
 8006d98:	ddd2      	ble.n	8006d40 <_printf_common+0x38>
 8006d9a:	0022      	movs	r2, r4
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	3219      	adds	r2, #25
 8006da0:	9901      	ldr	r1, [sp, #4]
 8006da2:	9800      	ldr	r0, [sp, #0]
 8006da4:	9e08      	ldr	r6, [sp, #32]
 8006da6:	47b0      	blx	r6
 8006da8:	1c43      	adds	r3, r0, #1
 8006daa:	d1f0      	bne.n	8006d8e <_printf_common+0x86>
 8006dac:	2001      	movs	r0, #1
 8006dae:	4240      	negs	r0, r0
 8006db0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006db2:	2030      	movs	r0, #48	; 0x30
 8006db4:	18e1      	adds	r1, r4, r3
 8006db6:	3143      	adds	r1, #67	; 0x43
 8006db8:	7008      	strb	r0, [r1, #0]
 8006dba:	0021      	movs	r1, r4
 8006dbc:	1c5a      	adds	r2, r3, #1
 8006dbe:	3145      	adds	r1, #69	; 0x45
 8006dc0:	7809      	ldrb	r1, [r1, #0]
 8006dc2:	18a2      	adds	r2, r4, r2
 8006dc4:	3243      	adds	r2, #67	; 0x43
 8006dc6:	3302      	adds	r3, #2
 8006dc8:	7011      	strb	r1, [r2, #0]
 8006dca:	e7c1      	b.n	8006d50 <_printf_common+0x48>
 8006dcc:	0022      	movs	r2, r4
 8006dce:	2301      	movs	r3, #1
 8006dd0:	321a      	adds	r2, #26
 8006dd2:	9901      	ldr	r1, [sp, #4]
 8006dd4:	9800      	ldr	r0, [sp, #0]
 8006dd6:	9e08      	ldr	r6, [sp, #32]
 8006dd8:	47b0      	blx	r6
 8006dda:	1c43      	adds	r3, r0, #1
 8006ddc:	d0e6      	beq.n	8006dac <_printf_common+0xa4>
 8006dde:	3701      	adds	r7, #1
 8006de0:	e7d1      	b.n	8006d86 <_printf_common+0x7e>
	...

08006de4 <_printf_i>:
 8006de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006de6:	b089      	sub	sp, #36	; 0x24
 8006de8:	9204      	str	r2, [sp, #16]
 8006dea:	000a      	movs	r2, r1
 8006dec:	3243      	adds	r2, #67	; 0x43
 8006dee:	9305      	str	r3, [sp, #20]
 8006df0:	9003      	str	r0, [sp, #12]
 8006df2:	9202      	str	r2, [sp, #8]
 8006df4:	7e0a      	ldrb	r2, [r1, #24]
 8006df6:	000c      	movs	r4, r1
 8006df8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dfa:	2a6e      	cmp	r2, #110	; 0x6e
 8006dfc:	d100      	bne.n	8006e00 <_printf_i+0x1c>
 8006dfe:	e086      	b.n	8006f0e <_printf_i+0x12a>
 8006e00:	d81f      	bhi.n	8006e42 <_printf_i+0x5e>
 8006e02:	2a63      	cmp	r2, #99	; 0x63
 8006e04:	d033      	beq.n	8006e6e <_printf_i+0x8a>
 8006e06:	d808      	bhi.n	8006e1a <_printf_i+0x36>
 8006e08:	2a00      	cmp	r2, #0
 8006e0a:	d100      	bne.n	8006e0e <_printf_i+0x2a>
 8006e0c:	e08c      	b.n	8006f28 <_printf_i+0x144>
 8006e0e:	2a58      	cmp	r2, #88	; 0x58
 8006e10:	d04d      	beq.n	8006eae <_printf_i+0xca>
 8006e12:	0025      	movs	r5, r4
 8006e14:	3542      	adds	r5, #66	; 0x42
 8006e16:	702a      	strb	r2, [r5, #0]
 8006e18:	e030      	b.n	8006e7c <_printf_i+0x98>
 8006e1a:	2a64      	cmp	r2, #100	; 0x64
 8006e1c:	d001      	beq.n	8006e22 <_printf_i+0x3e>
 8006e1e:	2a69      	cmp	r2, #105	; 0x69
 8006e20:	d1f7      	bne.n	8006e12 <_printf_i+0x2e>
 8006e22:	6819      	ldr	r1, [r3, #0]
 8006e24:	6825      	ldr	r5, [r4, #0]
 8006e26:	1d0a      	adds	r2, r1, #4
 8006e28:	0628      	lsls	r0, r5, #24
 8006e2a:	d529      	bpl.n	8006e80 <_printf_i+0x9c>
 8006e2c:	6808      	ldr	r0, [r1, #0]
 8006e2e:	601a      	str	r2, [r3, #0]
 8006e30:	2800      	cmp	r0, #0
 8006e32:	da03      	bge.n	8006e3c <_printf_i+0x58>
 8006e34:	232d      	movs	r3, #45	; 0x2d
 8006e36:	9a02      	ldr	r2, [sp, #8]
 8006e38:	4240      	negs	r0, r0
 8006e3a:	7013      	strb	r3, [r2, #0]
 8006e3c:	4e6b      	ldr	r6, [pc, #428]	; (8006fec <_printf_i+0x208>)
 8006e3e:	270a      	movs	r7, #10
 8006e40:	e04f      	b.n	8006ee2 <_printf_i+0xfe>
 8006e42:	2a73      	cmp	r2, #115	; 0x73
 8006e44:	d074      	beq.n	8006f30 <_printf_i+0x14c>
 8006e46:	d808      	bhi.n	8006e5a <_printf_i+0x76>
 8006e48:	2a6f      	cmp	r2, #111	; 0x6f
 8006e4a:	d01f      	beq.n	8006e8c <_printf_i+0xa8>
 8006e4c:	2a70      	cmp	r2, #112	; 0x70
 8006e4e:	d1e0      	bne.n	8006e12 <_printf_i+0x2e>
 8006e50:	2220      	movs	r2, #32
 8006e52:	6809      	ldr	r1, [r1, #0]
 8006e54:	430a      	orrs	r2, r1
 8006e56:	6022      	str	r2, [r4, #0]
 8006e58:	e003      	b.n	8006e62 <_printf_i+0x7e>
 8006e5a:	2a75      	cmp	r2, #117	; 0x75
 8006e5c:	d016      	beq.n	8006e8c <_printf_i+0xa8>
 8006e5e:	2a78      	cmp	r2, #120	; 0x78
 8006e60:	d1d7      	bne.n	8006e12 <_printf_i+0x2e>
 8006e62:	0022      	movs	r2, r4
 8006e64:	2178      	movs	r1, #120	; 0x78
 8006e66:	3245      	adds	r2, #69	; 0x45
 8006e68:	7011      	strb	r1, [r2, #0]
 8006e6a:	4e61      	ldr	r6, [pc, #388]	; (8006ff0 <_printf_i+0x20c>)
 8006e6c:	e022      	b.n	8006eb4 <_printf_i+0xd0>
 8006e6e:	0025      	movs	r5, r4
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	3542      	adds	r5, #66	; 0x42
 8006e74:	1d11      	adds	r1, r2, #4
 8006e76:	6019      	str	r1, [r3, #0]
 8006e78:	6813      	ldr	r3, [r2, #0]
 8006e7a:	702b      	strb	r3, [r5, #0]
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e065      	b.n	8006f4c <_printf_i+0x168>
 8006e80:	6808      	ldr	r0, [r1, #0]
 8006e82:	601a      	str	r2, [r3, #0]
 8006e84:	0669      	lsls	r1, r5, #25
 8006e86:	d5d3      	bpl.n	8006e30 <_printf_i+0x4c>
 8006e88:	b200      	sxth	r0, r0
 8006e8a:	e7d1      	b.n	8006e30 <_printf_i+0x4c>
 8006e8c:	6819      	ldr	r1, [r3, #0]
 8006e8e:	6825      	ldr	r5, [r4, #0]
 8006e90:	1d08      	adds	r0, r1, #4
 8006e92:	6018      	str	r0, [r3, #0]
 8006e94:	6808      	ldr	r0, [r1, #0]
 8006e96:	062e      	lsls	r6, r5, #24
 8006e98:	d505      	bpl.n	8006ea6 <_printf_i+0xc2>
 8006e9a:	4e54      	ldr	r6, [pc, #336]	; (8006fec <_printf_i+0x208>)
 8006e9c:	2708      	movs	r7, #8
 8006e9e:	2a6f      	cmp	r2, #111	; 0x6f
 8006ea0:	d01b      	beq.n	8006eda <_printf_i+0xf6>
 8006ea2:	270a      	movs	r7, #10
 8006ea4:	e019      	b.n	8006eda <_printf_i+0xf6>
 8006ea6:	066d      	lsls	r5, r5, #25
 8006ea8:	d5f7      	bpl.n	8006e9a <_printf_i+0xb6>
 8006eaa:	b280      	uxth	r0, r0
 8006eac:	e7f5      	b.n	8006e9a <_printf_i+0xb6>
 8006eae:	3145      	adds	r1, #69	; 0x45
 8006eb0:	4e4e      	ldr	r6, [pc, #312]	; (8006fec <_printf_i+0x208>)
 8006eb2:	700a      	strb	r2, [r1, #0]
 8006eb4:	6818      	ldr	r0, [r3, #0]
 8006eb6:	6822      	ldr	r2, [r4, #0]
 8006eb8:	1d01      	adds	r1, r0, #4
 8006eba:	6800      	ldr	r0, [r0, #0]
 8006ebc:	6019      	str	r1, [r3, #0]
 8006ebe:	0615      	lsls	r5, r2, #24
 8006ec0:	d521      	bpl.n	8006f06 <_printf_i+0x122>
 8006ec2:	07d3      	lsls	r3, r2, #31
 8006ec4:	d502      	bpl.n	8006ecc <_printf_i+0xe8>
 8006ec6:	2320      	movs	r3, #32
 8006ec8:	431a      	orrs	r2, r3
 8006eca:	6022      	str	r2, [r4, #0]
 8006ecc:	2710      	movs	r7, #16
 8006ece:	2800      	cmp	r0, #0
 8006ed0:	d103      	bne.n	8006eda <_printf_i+0xf6>
 8006ed2:	2320      	movs	r3, #32
 8006ed4:	6822      	ldr	r2, [r4, #0]
 8006ed6:	439a      	bics	r2, r3
 8006ed8:	6022      	str	r2, [r4, #0]
 8006eda:	0023      	movs	r3, r4
 8006edc:	2200      	movs	r2, #0
 8006ede:	3343      	adds	r3, #67	; 0x43
 8006ee0:	701a      	strb	r2, [r3, #0]
 8006ee2:	6863      	ldr	r3, [r4, #4]
 8006ee4:	60a3      	str	r3, [r4, #8]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	db58      	blt.n	8006f9c <_printf_i+0x1b8>
 8006eea:	2204      	movs	r2, #4
 8006eec:	6821      	ldr	r1, [r4, #0]
 8006eee:	4391      	bics	r1, r2
 8006ef0:	6021      	str	r1, [r4, #0]
 8006ef2:	2800      	cmp	r0, #0
 8006ef4:	d154      	bne.n	8006fa0 <_printf_i+0x1bc>
 8006ef6:	9d02      	ldr	r5, [sp, #8]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d05a      	beq.n	8006fb2 <_printf_i+0x1ce>
 8006efc:	0025      	movs	r5, r4
 8006efe:	7833      	ldrb	r3, [r6, #0]
 8006f00:	3542      	adds	r5, #66	; 0x42
 8006f02:	702b      	strb	r3, [r5, #0]
 8006f04:	e055      	b.n	8006fb2 <_printf_i+0x1ce>
 8006f06:	0655      	lsls	r5, r2, #25
 8006f08:	d5db      	bpl.n	8006ec2 <_printf_i+0xde>
 8006f0a:	b280      	uxth	r0, r0
 8006f0c:	e7d9      	b.n	8006ec2 <_printf_i+0xde>
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	680d      	ldr	r5, [r1, #0]
 8006f12:	1d10      	adds	r0, r2, #4
 8006f14:	6949      	ldr	r1, [r1, #20]
 8006f16:	6018      	str	r0, [r3, #0]
 8006f18:	6813      	ldr	r3, [r2, #0]
 8006f1a:	062e      	lsls	r6, r5, #24
 8006f1c:	d501      	bpl.n	8006f22 <_printf_i+0x13e>
 8006f1e:	6019      	str	r1, [r3, #0]
 8006f20:	e002      	b.n	8006f28 <_printf_i+0x144>
 8006f22:	066d      	lsls	r5, r5, #25
 8006f24:	d5fb      	bpl.n	8006f1e <_printf_i+0x13a>
 8006f26:	8019      	strh	r1, [r3, #0]
 8006f28:	2300      	movs	r3, #0
 8006f2a:	9d02      	ldr	r5, [sp, #8]
 8006f2c:	6123      	str	r3, [r4, #16]
 8006f2e:	e04f      	b.n	8006fd0 <_printf_i+0x1ec>
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	1d11      	adds	r1, r2, #4
 8006f34:	6019      	str	r1, [r3, #0]
 8006f36:	6815      	ldr	r5, [r2, #0]
 8006f38:	2100      	movs	r1, #0
 8006f3a:	6862      	ldr	r2, [r4, #4]
 8006f3c:	0028      	movs	r0, r5
 8006f3e:	f000 f859 	bl	8006ff4 <memchr>
 8006f42:	2800      	cmp	r0, #0
 8006f44:	d001      	beq.n	8006f4a <_printf_i+0x166>
 8006f46:	1b40      	subs	r0, r0, r5
 8006f48:	6060      	str	r0, [r4, #4]
 8006f4a:	6863      	ldr	r3, [r4, #4]
 8006f4c:	6123      	str	r3, [r4, #16]
 8006f4e:	2300      	movs	r3, #0
 8006f50:	9a02      	ldr	r2, [sp, #8]
 8006f52:	7013      	strb	r3, [r2, #0]
 8006f54:	e03c      	b.n	8006fd0 <_printf_i+0x1ec>
 8006f56:	6923      	ldr	r3, [r4, #16]
 8006f58:	002a      	movs	r2, r5
 8006f5a:	9904      	ldr	r1, [sp, #16]
 8006f5c:	9803      	ldr	r0, [sp, #12]
 8006f5e:	9d05      	ldr	r5, [sp, #20]
 8006f60:	47a8      	blx	r5
 8006f62:	1c43      	adds	r3, r0, #1
 8006f64:	d03e      	beq.n	8006fe4 <_printf_i+0x200>
 8006f66:	6823      	ldr	r3, [r4, #0]
 8006f68:	079b      	lsls	r3, r3, #30
 8006f6a:	d415      	bmi.n	8006f98 <_printf_i+0x1b4>
 8006f6c:	9b07      	ldr	r3, [sp, #28]
 8006f6e:	68e0      	ldr	r0, [r4, #12]
 8006f70:	4298      	cmp	r0, r3
 8006f72:	da39      	bge.n	8006fe8 <_printf_i+0x204>
 8006f74:	0018      	movs	r0, r3
 8006f76:	e037      	b.n	8006fe8 <_printf_i+0x204>
 8006f78:	0022      	movs	r2, r4
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	3219      	adds	r2, #25
 8006f7e:	9904      	ldr	r1, [sp, #16]
 8006f80:	9803      	ldr	r0, [sp, #12]
 8006f82:	9e05      	ldr	r6, [sp, #20]
 8006f84:	47b0      	blx	r6
 8006f86:	1c43      	adds	r3, r0, #1
 8006f88:	d02c      	beq.n	8006fe4 <_printf_i+0x200>
 8006f8a:	3501      	adds	r5, #1
 8006f8c:	68e3      	ldr	r3, [r4, #12]
 8006f8e:	9a07      	ldr	r2, [sp, #28]
 8006f90:	1a9b      	subs	r3, r3, r2
 8006f92:	42ab      	cmp	r3, r5
 8006f94:	dcf0      	bgt.n	8006f78 <_printf_i+0x194>
 8006f96:	e7e9      	b.n	8006f6c <_printf_i+0x188>
 8006f98:	2500      	movs	r5, #0
 8006f9a:	e7f7      	b.n	8006f8c <_printf_i+0x1a8>
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	d0ad      	beq.n	8006efc <_printf_i+0x118>
 8006fa0:	9d02      	ldr	r5, [sp, #8]
 8006fa2:	0039      	movs	r1, r7
 8006fa4:	f7f9 f936 	bl	8000214 <__aeabi_uidivmod>
 8006fa8:	5c73      	ldrb	r3, [r6, r1]
 8006faa:	3d01      	subs	r5, #1
 8006fac:	702b      	strb	r3, [r5, #0]
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	d1f7      	bne.n	8006fa2 <_printf_i+0x1be>
 8006fb2:	2f08      	cmp	r7, #8
 8006fb4:	d109      	bne.n	8006fca <_printf_i+0x1e6>
 8006fb6:	6823      	ldr	r3, [r4, #0]
 8006fb8:	07db      	lsls	r3, r3, #31
 8006fba:	d506      	bpl.n	8006fca <_printf_i+0x1e6>
 8006fbc:	6863      	ldr	r3, [r4, #4]
 8006fbe:	6922      	ldr	r2, [r4, #16]
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	dc02      	bgt.n	8006fca <_printf_i+0x1e6>
 8006fc4:	2330      	movs	r3, #48	; 0x30
 8006fc6:	3d01      	subs	r5, #1
 8006fc8:	702b      	strb	r3, [r5, #0]
 8006fca:	9b02      	ldr	r3, [sp, #8]
 8006fcc:	1b5b      	subs	r3, r3, r5
 8006fce:	6123      	str	r3, [r4, #16]
 8006fd0:	9b05      	ldr	r3, [sp, #20]
 8006fd2:	aa07      	add	r2, sp, #28
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	0021      	movs	r1, r4
 8006fd8:	9b04      	ldr	r3, [sp, #16]
 8006fda:	9803      	ldr	r0, [sp, #12]
 8006fdc:	f7ff fe94 	bl	8006d08 <_printf_common>
 8006fe0:	1c43      	adds	r3, r0, #1
 8006fe2:	d1b8      	bne.n	8006f56 <_printf_i+0x172>
 8006fe4:	2001      	movs	r0, #1
 8006fe6:	4240      	negs	r0, r0
 8006fe8:	b009      	add	sp, #36	; 0x24
 8006fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fec:	0800788a 	.word	0x0800788a
 8006ff0:	0800789b 	.word	0x0800789b

08006ff4 <memchr>:
 8006ff4:	b2c9      	uxtb	r1, r1
 8006ff6:	1882      	adds	r2, r0, r2
 8006ff8:	4290      	cmp	r0, r2
 8006ffa:	d101      	bne.n	8007000 <memchr+0xc>
 8006ffc:	2000      	movs	r0, #0
 8006ffe:	4770      	bx	lr
 8007000:	7803      	ldrb	r3, [r0, #0]
 8007002:	428b      	cmp	r3, r1
 8007004:	d0fb      	beq.n	8006ffe <memchr+0xa>
 8007006:	3001      	adds	r0, #1
 8007008:	e7f6      	b.n	8006ff8 <memchr+0x4>

0800700a <memmove>:
 800700a:	b510      	push	{r4, lr}
 800700c:	4288      	cmp	r0, r1
 800700e:	d902      	bls.n	8007016 <memmove+0xc>
 8007010:	188b      	adds	r3, r1, r2
 8007012:	4298      	cmp	r0, r3
 8007014:	d303      	bcc.n	800701e <memmove+0x14>
 8007016:	2300      	movs	r3, #0
 8007018:	e007      	b.n	800702a <memmove+0x20>
 800701a:	5c8b      	ldrb	r3, [r1, r2]
 800701c:	5483      	strb	r3, [r0, r2]
 800701e:	3a01      	subs	r2, #1
 8007020:	d2fb      	bcs.n	800701a <memmove+0x10>
 8007022:	bd10      	pop	{r4, pc}
 8007024:	5ccc      	ldrb	r4, [r1, r3]
 8007026:	54c4      	strb	r4, [r0, r3]
 8007028:	3301      	adds	r3, #1
 800702a:	429a      	cmp	r2, r3
 800702c:	d1fa      	bne.n	8007024 <memmove+0x1a>
 800702e:	e7f8      	b.n	8007022 <memmove+0x18>

08007030 <_free_r>:
 8007030:	b570      	push	{r4, r5, r6, lr}
 8007032:	0005      	movs	r5, r0
 8007034:	2900      	cmp	r1, #0
 8007036:	d010      	beq.n	800705a <_free_r+0x2a>
 8007038:	1f0c      	subs	r4, r1, #4
 800703a:	6823      	ldr	r3, [r4, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	da00      	bge.n	8007042 <_free_r+0x12>
 8007040:	18e4      	adds	r4, r4, r3
 8007042:	0028      	movs	r0, r5
 8007044:	f000 f8d4 	bl	80071f0 <__malloc_lock>
 8007048:	4a1d      	ldr	r2, [pc, #116]	; (80070c0 <_free_r+0x90>)
 800704a:	6813      	ldr	r3, [r2, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d105      	bne.n	800705c <_free_r+0x2c>
 8007050:	6063      	str	r3, [r4, #4]
 8007052:	6014      	str	r4, [r2, #0]
 8007054:	0028      	movs	r0, r5
 8007056:	f000 f8cc 	bl	80071f2 <__malloc_unlock>
 800705a:	bd70      	pop	{r4, r5, r6, pc}
 800705c:	42a3      	cmp	r3, r4
 800705e:	d909      	bls.n	8007074 <_free_r+0x44>
 8007060:	6821      	ldr	r1, [r4, #0]
 8007062:	1860      	adds	r0, r4, r1
 8007064:	4283      	cmp	r3, r0
 8007066:	d1f3      	bne.n	8007050 <_free_r+0x20>
 8007068:	6818      	ldr	r0, [r3, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	1841      	adds	r1, r0, r1
 800706e:	6021      	str	r1, [r4, #0]
 8007070:	e7ee      	b.n	8007050 <_free_r+0x20>
 8007072:	0013      	movs	r3, r2
 8007074:	685a      	ldr	r2, [r3, #4]
 8007076:	2a00      	cmp	r2, #0
 8007078:	d001      	beq.n	800707e <_free_r+0x4e>
 800707a:	42a2      	cmp	r2, r4
 800707c:	d9f9      	bls.n	8007072 <_free_r+0x42>
 800707e:	6819      	ldr	r1, [r3, #0]
 8007080:	1858      	adds	r0, r3, r1
 8007082:	42a0      	cmp	r0, r4
 8007084:	d10b      	bne.n	800709e <_free_r+0x6e>
 8007086:	6820      	ldr	r0, [r4, #0]
 8007088:	1809      	adds	r1, r1, r0
 800708a:	1858      	adds	r0, r3, r1
 800708c:	6019      	str	r1, [r3, #0]
 800708e:	4282      	cmp	r2, r0
 8007090:	d1e0      	bne.n	8007054 <_free_r+0x24>
 8007092:	6810      	ldr	r0, [r2, #0]
 8007094:	6852      	ldr	r2, [r2, #4]
 8007096:	1841      	adds	r1, r0, r1
 8007098:	6019      	str	r1, [r3, #0]
 800709a:	605a      	str	r2, [r3, #4]
 800709c:	e7da      	b.n	8007054 <_free_r+0x24>
 800709e:	42a0      	cmp	r0, r4
 80070a0:	d902      	bls.n	80070a8 <_free_r+0x78>
 80070a2:	230c      	movs	r3, #12
 80070a4:	602b      	str	r3, [r5, #0]
 80070a6:	e7d5      	b.n	8007054 <_free_r+0x24>
 80070a8:	6821      	ldr	r1, [r4, #0]
 80070aa:	1860      	adds	r0, r4, r1
 80070ac:	4282      	cmp	r2, r0
 80070ae:	d103      	bne.n	80070b8 <_free_r+0x88>
 80070b0:	6810      	ldr	r0, [r2, #0]
 80070b2:	6852      	ldr	r2, [r2, #4]
 80070b4:	1841      	adds	r1, r0, r1
 80070b6:	6021      	str	r1, [r4, #0]
 80070b8:	6062      	str	r2, [r4, #4]
 80070ba:	605c      	str	r4, [r3, #4]
 80070bc:	e7ca      	b.n	8007054 <_free_r+0x24>
 80070be:	46c0      	nop			; (mov r8, r8)
 80070c0:	200000c0 	.word	0x200000c0

080070c4 <_malloc_r>:
 80070c4:	2303      	movs	r3, #3
 80070c6:	b570      	push	{r4, r5, r6, lr}
 80070c8:	1ccd      	adds	r5, r1, #3
 80070ca:	439d      	bics	r5, r3
 80070cc:	3508      	adds	r5, #8
 80070ce:	0006      	movs	r6, r0
 80070d0:	2d0c      	cmp	r5, #12
 80070d2:	d21e      	bcs.n	8007112 <_malloc_r+0x4e>
 80070d4:	250c      	movs	r5, #12
 80070d6:	42a9      	cmp	r1, r5
 80070d8:	d81d      	bhi.n	8007116 <_malloc_r+0x52>
 80070da:	0030      	movs	r0, r6
 80070dc:	f000 f888 	bl	80071f0 <__malloc_lock>
 80070e0:	4a25      	ldr	r2, [pc, #148]	; (8007178 <_malloc_r+0xb4>)
 80070e2:	6814      	ldr	r4, [r2, #0]
 80070e4:	0021      	movs	r1, r4
 80070e6:	2900      	cmp	r1, #0
 80070e8:	d119      	bne.n	800711e <_malloc_r+0x5a>
 80070ea:	4c24      	ldr	r4, [pc, #144]	; (800717c <_malloc_r+0xb8>)
 80070ec:	6823      	ldr	r3, [r4, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d103      	bne.n	80070fa <_malloc_r+0x36>
 80070f2:	0030      	movs	r0, r6
 80070f4:	f000 f86a 	bl	80071cc <_sbrk_r>
 80070f8:	6020      	str	r0, [r4, #0]
 80070fa:	0029      	movs	r1, r5
 80070fc:	0030      	movs	r0, r6
 80070fe:	f000 f865 	bl	80071cc <_sbrk_r>
 8007102:	1c43      	adds	r3, r0, #1
 8007104:	d12b      	bne.n	800715e <_malloc_r+0x9a>
 8007106:	230c      	movs	r3, #12
 8007108:	0030      	movs	r0, r6
 800710a:	6033      	str	r3, [r6, #0]
 800710c:	f000 f871 	bl	80071f2 <__malloc_unlock>
 8007110:	e003      	b.n	800711a <_malloc_r+0x56>
 8007112:	2d00      	cmp	r5, #0
 8007114:	dadf      	bge.n	80070d6 <_malloc_r+0x12>
 8007116:	230c      	movs	r3, #12
 8007118:	6033      	str	r3, [r6, #0]
 800711a:	2000      	movs	r0, #0
 800711c:	bd70      	pop	{r4, r5, r6, pc}
 800711e:	680b      	ldr	r3, [r1, #0]
 8007120:	1b5b      	subs	r3, r3, r5
 8007122:	d419      	bmi.n	8007158 <_malloc_r+0x94>
 8007124:	2b0b      	cmp	r3, #11
 8007126:	d903      	bls.n	8007130 <_malloc_r+0x6c>
 8007128:	600b      	str	r3, [r1, #0]
 800712a:	18cc      	adds	r4, r1, r3
 800712c:	6025      	str	r5, [r4, #0]
 800712e:	e003      	b.n	8007138 <_malloc_r+0x74>
 8007130:	684b      	ldr	r3, [r1, #4]
 8007132:	428c      	cmp	r4, r1
 8007134:	d10d      	bne.n	8007152 <_malloc_r+0x8e>
 8007136:	6013      	str	r3, [r2, #0]
 8007138:	0030      	movs	r0, r6
 800713a:	f000 f85a 	bl	80071f2 <__malloc_unlock>
 800713e:	0020      	movs	r0, r4
 8007140:	2207      	movs	r2, #7
 8007142:	300b      	adds	r0, #11
 8007144:	1d23      	adds	r3, r4, #4
 8007146:	4390      	bics	r0, r2
 8007148:	1ac3      	subs	r3, r0, r3
 800714a:	d0e7      	beq.n	800711c <_malloc_r+0x58>
 800714c:	425a      	negs	r2, r3
 800714e:	50e2      	str	r2, [r4, r3]
 8007150:	e7e4      	b.n	800711c <_malloc_r+0x58>
 8007152:	6063      	str	r3, [r4, #4]
 8007154:	000c      	movs	r4, r1
 8007156:	e7ef      	b.n	8007138 <_malloc_r+0x74>
 8007158:	000c      	movs	r4, r1
 800715a:	6849      	ldr	r1, [r1, #4]
 800715c:	e7c3      	b.n	80070e6 <_malloc_r+0x22>
 800715e:	2303      	movs	r3, #3
 8007160:	1cc4      	adds	r4, r0, #3
 8007162:	439c      	bics	r4, r3
 8007164:	42a0      	cmp	r0, r4
 8007166:	d0e1      	beq.n	800712c <_malloc_r+0x68>
 8007168:	1a21      	subs	r1, r4, r0
 800716a:	0030      	movs	r0, r6
 800716c:	f000 f82e 	bl	80071cc <_sbrk_r>
 8007170:	1c43      	adds	r3, r0, #1
 8007172:	d1db      	bne.n	800712c <_malloc_r+0x68>
 8007174:	e7c7      	b.n	8007106 <_malloc_r+0x42>
 8007176:	46c0      	nop			; (mov r8, r8)
 8007178:	200000c0 	.word	0x200000c0
 800717c:	200000c4 	.word	0x200000c4

08007180 <_realloc_r>:
 8007180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007182:	0007      	movs	r7, r0
 8007184:	000d      	movs	r5, r1
 8007186:	0016      	movs	r6, r2
 8007188:	2900      	cmp	r1, #0
 800718a:	d105      	bne.n	8007198 <_realloc_r+0x18>
 800718c:	0011      	movs	r1, r2
 800718e:	f7ff ff99 	bl	80070c4 <_malloc_r>
 8007192:	0004      	movs	r4, r0
 8007194:	0020      	movs	r0, r4
 8007196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007198:	2a00      	cmp	r2, #0
 800719a:	d103      	bne.n	80071a4 <_realloc_r+0x24>
 800719c:	f7ff ff48 	bl	8007030 <_free_r>
 80071a0:	0034      	movs	r4, r6
 80071a2:	e7f7      	b.n	8007194 <_realloc_r+0x14>
 80071a4:	f000 f826 	bl	80071f4 <_malloc_usable_size_r>
 80071a8:	002c      	movs	r4, r5
 80071aa:	42b0      	cmp	r0, r6
 80071ac:	d2f2      	bcs.n	8007194 <_realloc_r+0x14>
 80071ae:	0031      	movs	r1, r6
 80071b0:	0038      	movs	r0, r7
 80071b2:	f7ff ff87 	bl	80070c4 <_malloc_r>
 80071b6:	1e04      	subs	r4, r0, #0
 80071b8:	d0ec      	beq.n	8007194 <_realloc_r+0x14>
 80071ba:	0029      	movs	r1, r5
 80071bc:	0032      	movs	r2, r6
 80071be:	f7ff fc11 	bl	80069e4 <memcpy>
 80071c2:	0029      	movs	r1, r5
 80071c4:	0038      	movs	r0, r7
 80071c6:	f7ff ff33 	bl	8007030 <_free_r>
 80071ca:	e7e3      	b.n	8007194 <_realloc_r+0x14>

080071cc <_sbrk_r>:
 80071cc:	2300      	movs	r3, #0
 80071ce:	b570      	push	{r4, r5, r6, lr}
 80071d0:	4c06      	ldr	r4, [pc, #24]	; (80071ec <_sbrk_r+0x20>)
 80071d2:	0005      	movs	r5, r0
 80071d4:	0008      	movs	r0, r1
 80071d6:	6023      	str	r3, [r4, #0]
 80071d8:	f7fb fb12 	bl	8002800 <_sbrk>
 80071dc:	1c43      	adds	r3, r0, #1
 80071de:	d103      	bne.n	80071e8 <_sbrk_r+0x1c>
 80071e0:	6823      	ldr	r3, [r4, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d000      	beq.n	80071e8 <_sbrk_r+0x1c>
 80071e6:	602b      	str	r3, [r5, #0]
 80071e8:	bd70      	pop	{r4, r5, r6, pc}
 80071ea:	46c0      	nop			; (mov r8, r8)
 80071ec:	200002e4 	.word	0x200002e4

080071f0 <__malloc_lock>:
 80071f0:	4770      	bx	lr

080071f2 <__malloc_unlock>:
 80071f2:	4770      	bx	lr

080071f4 <_malloc_usable_size_r>:
 80071f4:	1f0b      	subs	r3, r1, #4
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	1f18      	subs	r0, r3, #4
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	da01      	bge.n	8007202 <_malloc_usable_size_r+0xe>
 80071fe:	580b      	ldr	r3, [r1, r0]
 8007200:	18c0      	adds	r0, r0, r3
 8007202:	4770      	bx	lr

08007204 <_init>:
 8007204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007206:	46c0      	nop			; (mov r8, r8)
 8007208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800720a:	bc08      	pop	{r3}
 800720c:	469e      	mov	lr, r3
 800720e:	4770      	bx	lr

08007210 <_fini>:
 8007210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007212:	46c0      	nop			; (mov r8, r8)
 8007214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007216:	bc08      	pop	{r3}
 8007218:	469e      	mov	lr, r3
 800721a:	4770      	bx	lr
