
project_L0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086c8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009bc  08008788  08008788  00018788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009144  08009144  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08009144  08009144  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009144  08009144  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009144  08009144  00019144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009148  08009148  00019148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800914c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  2000006c  080091b8  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  080091b8  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001828e  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f38  00000000  00000000  00038322  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001290  00000000  00000000  0003b260  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001100  00000000  00000000  0003c4f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017dde  00000000  00000000  0003d5f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ff66  00000000  00000000  000553ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d4a6  00000000  00000000  00065334  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f27da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000471c  00000000  00000000  000f2858  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008770 	.word	0x08008770

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	08008770 	.word	0x08008770

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cfrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c08      	adds	r0, r1, #0
 80003f8:	4661      	mov	r1, ip
 80003fa:	e7ff      	b.n	80003fc <__aeabi_cfcmpeq>

080003fc <__aeabi_cfcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 f9d3 	bl	80007a8 <__lesf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cfcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_fcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 f955 	bl	80006bc <__eqsf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_fcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 f9c5 	bl	80007a8 <__lesf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_fcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_fcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 f9bb 	bl	80007a8 <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_fcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_fcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 f963 	bl	800070c <__gesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_fcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_fcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 f959 	bl	800070c <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_fcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_f2uiz>:
 8000468:	219e      	movs	r1, #158	; 0x9e
 800046a:	b510      	push	{r4, lr}
 800046c:	05c9      	lsls	r1, r1, #23
 800046e:	1c04      	adds	r4, r0, #0
 8000470:	f7ff fff0 	bl	8000454 <__aeabi_fcmpge>
 8000474:	2800      	cmp	r0, #0
 8000476:	d103      	bne.n	8000480 <__aeabi_f2uiz+0x18>
 8000478:	1c20      	adds	r0, r4, #0
 800047a:	f000 fba9 	bl	8000bd0 <__aeabi_f2iz>
 800047e:	bd10      	pop	{r4, pc}
 8000480:	219e      	movs	r1, #158	; 0x9e
 8000482:	1c20      	adds	r0, r4, #0
 8000484:	05c9      	lsls	r1, r1, #23
 8000486:	f000 f9df 	bl	8000848 <__aeabi_fsub>
 800048a:	f000 fba1 	bl	8000bd0 <__aeabi_f2iz>
 800048e:	2380      	movs	r3, #128	; 0x80
 8000490:	061b      	lsls	r3, r3, #24
 8000492:	469c      	mov	ip, r3
 8000494:	4460      	add	r0, ip
 8000496:	e7f2      	b.n	800047e <__aeabi_f2uiz+0x16>

08000498 <__aeabi_fdiv>:
 8000498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049a:	4657      	mov	r7, sl
 800049c:	464e      	mov	r6, r9
 800049e:	4645      	mov	r5, r8
 80004a0:	46de      	mov	lr, fp
 80004a2:	0244      	lsls	r4, r0, #9
 80004a4:	b5e0      	push	{r5, r6, r7, lr}
 80004a6:	0046      	lsls	r6, r0, #1
 80004a8:	4688      	mov	r8, r1
 80004aa:	0a64      	lsrs	r4, r4, #9
 80004ac:	0e36      	lsrs	r6, r6, #24
 80004ae:	0fc7      	lsrs	r7, r0, #31
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d063      	beq.n	800057c <__aeabi_fdiv+0xe4>
 80004b4:	2eff      	cmp	r6, #255	; 0xff
 80004b6:	d024      	beq.n	8000502 <__aeabi_fdiv+0x6a>
 80004b8:	2380      	movs	r3, #128	; 0x80
 80004ba:	00e4      	lsls	r4, r4, #3
 80004bc:	04db      	lsls	r3, r3, #19
 80004be:	431c      	orrs	r4, r3
 80004c0:	2300      	movs	r3, #0
 80004c2:	4699      	mov	r9, r3
 80004c4:	469b      	mov	fp, r3
 80004c6:	3e7f      	subs	r6, #127	; 0x7f
 80004c8:	4643      	mov	r3, r8
 80004ca:	4642      	mov	r2, r8
 80004cc:	025d      	lsls	r5, r3, #9
 80004ce:	0fd2      	lsrs	r2, r2, #31
 80004d0:	005b      	lsls	r3, r3, #1
 80004d2:	0a6d      	lsrs	r5, r5, #9
 80004d4:	0e1b      	lsrs	r3, r3, #24
 80004d6:	4690      	mov	r8, r2
 80004d8:	4692      	mov	sl, r2
 80004da:	d065      	beq.n	80005a8 <__aeabi_fdiv+0x110>
 80004dc:	2bff      	cmp	r3, #255	; 0xff
 80004de:	d055      	beq.n	800058c <__aeabi_fdiv+0xf4>
 80004e0:	2280      	movs	r2, #128	; 0x80
 80004e2:	2100      	movs	r1, #0
 80004e4:	00ed      	lsls	r5, r5, #3
 80004e6:	04d2      	lsls	r2, r2, #19
 80004e8:	3b7f      	subs	r3, #127	; 0x7f
 80004ea:	4315      	orrs	r5, r2
 80004ec:	1af6      	subs	r6, r6, r3
 80004ee:	4643      	mov	r3, r8
 80004f0:	464a      	mov	r2, r9
 80004f2:	407b      	eors	r3, r7
 80004f4:	2a0f      	cmp	r2, #15
 80004f6:	d900      	bls.n	80004fa <__aeabi_fdiv+0x62>
 80004f8:	e08d      	b.n	8000616 <__aeabi_fdiv+0x17e>
 80004fa:	486d      	ldr	r0, [pc, #436]	; (80006b0 <__aeabi_fdiv+0x218>)
 80004fc:	0092      	lsls	r2, r2, #2
 80004fe:	5882      	ldr	r2, [r0, r2]
 8000500:	4697      	mov	pc, r2
 8000502:	2c00      	cmp	r4, #0
 8000504:	d154      	bne.n	80005b0 <__aeabi_fdiv+0x118>
 8000506:	2308      	movs	r3, #8
 8000508:	4699      	mov	r9, r3
 800050a:	3b06      	subs	r3, #6
 800050c:	26ff      	movs	r6, #255	; 0xff
 800050e:	469b      	mov	fp, r3
 8000510:	e7da      	b.n	80004c8 <__aeabi_fdiv+0x30>
 8000512:	2500      	movs	r5, #0
 8000514:	4653      	mov	r3, sl
 8000516:	2902      	cmp	r1, #2
 8000518:	d01b      	beq.n	8000552 <__aeabi_fdiv+0xba>
 800051a:	2903      	cmp	r1, #3
 800051c:	d100      	bne.n	8000520 <__aeabi_fdiv+0x88>
 800051e:	e0bf      	b.n	80006a0 <__aeabi_fdiv+0x208>
 8000520:	2901      	cmp	r1, #1
 8000522:	d028      	beq.n	8000576 <__aeabi_fdiv+0xde>
 8000524:	0030      	movs	r0, r6
 8000526:	307f      	adds	r0, #127	; 0x7f
 8000528:	2800      	cmp	r0, #0
 800052a:	dd20      	ble.n	800056e <__aeabi_fdiv+0xd6>
 800052c:	076a      	lsls	r2, r5, #29
 800052e:	d004      	beq.n	800053a <__aeabi_fdiv+0xa2>
 8000530:	220f      	movs	r2, #15
 8000532:	402a      	ands	r2, r5
 8000534:	2a04      	cmp	r2, #4
 8000536:	d000      	beq.n	800053a <__aeabi_fdiv+0xa2>
 8000538:	3504      	adds	r5, #4
 800053a:	012a      	lsls	r2, r5, #4
 800053c:	d503      	bpl.n	8000546 <__aeabi_fdiv+0xae>
 800053e:	0030      	movs	r0, r6
 8000540:	4a5c      	ldr	r2, [pc, #368]	; (80006b4 <__aeabi_fdiv+0x21c>)
 8000542:	3080      	adds	r0, #128	; 0x80
 8000544:	4015      	ands	r5, r2
 8000546:	28fe      	cmp	r0, #254	; 0xfe
 8000548:	dc03      	bgt.n	8000552 <__aeabi_fdiv+0xba>
 800054a:	01ac      	lsls	r4, r5, #6
 800054c:	0a64      	lsrs	r4, r4, #9
 800054e:	b2c2      	uxtb	r2, r0
 8000550:	e001      	b.n	8000556 <__aeabi_fdiv+0xbe>
 8000552:	22ff      	movs	r2, #255	; 0xff
 8000554:	2400      	movs	r4, #0
 8000556:	0264      	lsls	r4, r4, #9
 8000558:	05d2      	lsls	r2, r2, #23
 800055a:	0a60      	lsrs	r0, r4, #9
 800055c:	07db      	lsls	r3, r3, #31
 800055e:	4310      	orrs	r0, r2
 8000560:	4318      	orrs	r0, r3
 8000562:	bc3c      	pop	{r2, r3, r4, r5}
 8000564:	4690      	mov	r8, r2
 8000566:	4699      	mov	r9, r3
 8000568:	46a2      	mov	sl, r4
 800056a:	46ab      	mov	fp, r5
 800056c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800056e:	2201      	movs	r2, #1
 8000570:	1a10      	subs	r0, r2, r0
 8000572:	281b      	cmp	r0, #27
 8000574:	dd7c      	ble.n	8000670 <__aeabi_fdiv+0x1d8>
 8000576:	2200      	movs	r2, #0
 8000578:	2400      	movs	r4, #0
 800057a:	e7ec      	b.n	8000556 <__aeabi_fdiv+0xbe>
 800057c:	2c00      	cmp	r4, #0
 800057e:	d11d      	bne.n	80005bc <__aeabi_fdiv+0x124>
 8000580:	2304      	movs	r3, #4
 8000582:	4699      	mov	r9, r3
 8000584:	3b03      	subs	r3, #3
 8000586:	2600      	movs	r6, #0
 8000588:	469b      	mov	fp, r3
 800058a:	e79d      	b.n	80004c8 <__aeabi_fdiv+0x30>
 800058c:	3eff      	subs	r6, #255	; 0xff
 800058e:	2d00      	cmp	r5, #0
 8000590:	d120      	bne.n	80005d4 <__aeabi_fdiv+0x13c>
 8000592:	2102      	movs	r1, #2
 8000594:	4643      	mov	r3, r8
 8000596:	464a      	mov	r2, r9
 8000598:	407b      	eors	r3, r7
 800059a:	430a      	orrs	r2, r1
 800059c:	2a0f      	cmp	r2, #15
 800059e:	d8d8      	bhi.n	8000552 <__aeabi_fdiv+0xba>
 80005a0:	4845      	ldr	r0, [pc, #276]	; (80006b8 <__aeabi_fdiv+0x220>)
 80005a2:	0092      	lsls	r2, r2, #2
 80005a4:	5882      	ldr	r2, [r0, r2]
 80005a6:	4697      	mov	pc, r2
 80005a8:	2d00      	cmp	r5, #0
 80005aa:	d119      	bne.n	80005e0 <__aeabi_fdiv+0x148>
 80005ac:	2101      	movs	r1, #1
 80005ae:	e7f1      	b.n	8000594 <__aeabi_fdiv+0xfc>
 80005b0:	230c      	movs	r3, #12
 80005b2:	4699      	mov	r9, r3
 80005b4:	3b09      	subs	r3, #9
 80005b6:	26ff      	movs	r6, #255	; 0xff
 80005b8:	469b      	mov	fp, r3
 80005ba:	e785      	b.n	80004c8 <__aeabi_fdiv+0x30>
 80005bc:	0020      	movs	r0, r4
 80005be:	f001 f959 	bl	8001874 <__clzsi2>
 80005c2:	2676      	movs	r6, #118	; 0x76
 80005c4:	1f43      	subs	r3, r0, #5
 80005c6:	409c      	lsls	r4, r3
 80005c8:	2300      	movs	r3, #0
 80005ca:	4276      	negs	r6, r6
 80005cc:	1a36      	subs	r6, r6, r0
 80005ce:	4699      	mov	r9, r3
 80005d0:	469b      	mov	fp, r3
 80005d2:	e779      	b.n	80004c8 <__aeabi_fdiv+0x30>
 80005d4:	464a      	mov	r2, r9
 80005d6:	2303      	movs	r3, #3
 80005d8:	431a      	orrs	r2, r3
 80005da:	4691      	mov	r9, r2
 80005dc:	2103      	movs	r1, #3
 80005de:	e786      	b.n	80004ee <__aeabi_fdiv+0x56>
 80005e0:	0028      	movs	r0, r5
 80005e2:	f001 f947 	bl	8001874 <__clzsi2>
 80005e6:	1f43      	subs	r3, r0, #5
 80005e8:	1836      	adds	r6, r6, r0
 80005ea:	409d      	lsls	r5, r3
 80005ec:	3676      	adds	r6, #118	; 0x76
 80005ee:	2100      	movs	r1, #0
 80005f0:	e77d      	b.n	80004ee <__aeabi_fdiv+0x56>
 80005f2:	2480      	movs	r4, #128	; 0x80
 80005f4:	2300      	movs	r3, #0
 80005f6:	03e4      	lsls	r4, r4, #15
 80005f8:	22ff      	movs	r2, #255	; 0xff
 80005fa:	e7ac      	b.n	8000556 <__aeabi_fdiv+0xbe>
 80005fc:	2500      	movs	r5, #0
 80005fe:	2380      	movs	r3, #128	; 0x80
 8000600:	03db      	lsls	r3, r3, #15
 8000602:	421c      	tst	r4, r3
 8000604:	d028      	beq.n	8000658 <__aeabi_fdiv+0x1c0>
 8000606:	421d      	tst	r5, r3
 8000608:	d126      	bne.n	8000658 <__aeabi_fdiv+0x1c0>
 800060a:	432b      	orrs	r3, r5
 800060c:	025c      	lsls	r4, r3, #9
 800060e:	0a64      	lsrs	r4, r4, #9
 8000610:	4643      	mov	r3, r8
 8000612:	22ff      	movs	r2, #255	; 0xff
 8000614:	e79f      	b.n	8000556 <__aeabi_fdiv+0xbe>
 8000616:	0162      	lsls	r2, r4, #5
 8000618:	016c      	lsls	r4, r5, #5
 800061a:	42a2      	cmp	r2, r4
 800061c:	d224      	bcs.n	8000668 <__aeabi_fdiv+0x1d0>
 800061e:	211b      	movs	r1, #27
 8000620:	2500      	movs	r5, #0
 8000622:	3e01      	subs	r6, #1
 8000624:	2701      	movs	r7, #1
 8000626:	0010      	movs	r0, r2
 8000628:	006d      	lsls	r5, r5, #1
 800062a:	0052      	lsls	r2, r2, #1
 800062c:	2800      	cmp	r0, #0
 800062e:	db01      	blt.n	8000634 <__aeabi_fdiv+0x19c>
 8000630:	4294      	cmp	r4, r2
 8000632:	d801      	bhi.n	8000638 <__aeabi_fdiv+0x1a0>
 8000634:	1b12      	subs	r2, r2, r4
 8000636:	433d      	orrs	r5, r7
 8000638:	3901      	subs	r1, #1
 800063a:	2900      	cmp	r1, #0
 800063c:	d1f3      	bne.n	8000626 <__aeabi_fdiv+0x18e>
 800063e:	0014      	movs	r4, r2
 8000640:	1e62      	subs	r2, r4, #1
 8000642:	4194      	sbcs	r4, r2
 8000644:	4325      	orrs	r5, r4
 8000646:	e76d      	b.n	8000524 <__aeabi_fdiv+0x8c>
 8000648:	46ba      	mov	sl, r7
 800064a:	4659      	mov	r1, fp
 800064c:	0025      	movs	r5, r4
 800064e:	4653      	mov	r3, sl
 8000650:	2902      	cmp	r1, #2
 8000652:	d000      	beq.n	8000656 <__aeabi_fdiv+0x1be>
 8000654:	e761      	b.n	800051a <__aeabi_fdiv+0x82>
 8000656:	e77c      	b.n	8000552 <__aeabi_fdiv+0xba>
 8000658:	2380      	movs	r3, #128	; 0x80
 800065a:	03db      	lsls	r3, r3, #15
 800065c:	431c      	orrs	r4, r3
 800065e:	0264      	lsls	r4, r4, #9
 8000660:	0a64      	lsrs	r4, r4, #9
 8000662:	003b      	movs	r3, r7
 8000664:	22ff      	movs	r2, #255	; 0xff
 8000666:	e776      	b.n	8000556 <__aeabi_fdiv+0xbe>
 8000668:	1b12      	subs	r2, r2, r4
 800066a:	211a      	movs	r1, #26
 800066c:	2501      	movs	r5, #1
 800066e:	e7d9      	b.n	8000624 <__aeabi_fdiv+0x18c>
 8000670:	369e      	adds	r6, #158	; 0x9e
 8000672:	002a      	movs	r2, r5
 8000674:	40b5      	lsls	r5, r6
 8000676:	002c      	movs	r4, r5
 8000678:	40c2      	lsrs	r2, r0
 800067a:	1e65      	subs	r5, r4, #1
 800067c:	41ac      	sbcs	r4, r5
 800067e:	4314      	orrs	r4, r2
 8000680:	0762      	lsls	r2, r4, #29
 8000682:	d004      	beq.n	800068e <__aeabi_fdiv+0x1f6>
 8000684:	220f      	movs	r2, #15
 8000686:	4022      	ands	r2, r4
 8000688:	2a04      	cmp	r2, #4
 800068a:	d000      	beq.n	800068e <__aeabi_fdiv+0x1f6>
 800068c:	3404      	adds	r4, #4
 800068e:	0162      	lsls	r2, r4, #5
 8000690:	d403      	bmi.n	800069a <__aeabi_fdiv+0x202>
 8000692:	01a4      	lsls	r4, r4, #6
 8000694:	0a64      	lsrs	r4, r4, #9
 8000696:	2200      	movs	r2, #0
 8000698:	e75d      	b.n	8000556 <__aeabi_fdiv+0xbe>
 800069a:	2201      	movs	r2, #1
 800069c:	2400      	movs	r4, #0
 800069e:	e75a      	b.n	8000556 <__aeabi_fdiv+0xbe>
 80006a0:	2480      	movs	r4, #128	; 0x80
 80006a2:	03e4      	lsls	r4, r4, #15
 80006a4:	432c      	orrs	r4, r5
 80006a6:	0264      	lsls	r4, r4, #9
 80006a8:	0a64      	lsrs	r4, r4, #9
 80006aa:	22ff      	movs	r2, #255	; 0xff
 80006ac:	e753      	b.n	8000556 <__aeabi_fdiv+0xbe>
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	08008810 	.word	0x08008810
 80006b4:	f7ffffff 	.word	0xf7ffffff
 80006b8:	08008850 	.word	0x08008850

080006bc <__eqsf2>:
 80006bc:	b570      	push	{r4, r5, r6, lr}
 80006be:	0042      	lsls	r2, r0, #1
 80006c0:	024e      	lsls	r6, r1, #9
 80006c2:	004c      	lsls	r4, r1, #1
 80006c4:	0245      	lsls	r5, r0, #9
 80006c6:	0a6d      	lsrs	r5, r5, #9
 80006c8:	0e12      	lsrs	r2, r2, #24
 80006ca:	0fc3      	lsrs	r3, r0, #31
 80006cc:	0a76      	lsrs	r6, r6, #9
 80006ce:	0e24      	lsrs	r4, r4, #24
 80006d0:	0fc9      	lsrs	r1, r1, #31
 80006d2:	2aff      	cmp	r2, #255	; 0xff
 80006d4:	d00f      	beq.n	80006f6 <__eqsf2+0x3a>
 80006d6:	2cff      	cmp	r4, #255	; 0xff
 80006d8:	d011      	beq.n	80006fe <__eqsf2+0x42>
 80006da:	2001      	movs	r0, #1
 80006dc:	42a2      	cmp	r2, r4
 80006de:	d000      	beq.n	80006e2 <__eqsf2+0x26>
 80006e0:	bd70      	pop	{r4, r5, r6, pc}
 80006e2:	42b5      	cmp	r5, r6
 80006e4:	d1fc      	bne.n	80006e0 <__eqsf2+0x24>
 80006e6:	428b      	cmp	r3, r1
 80006e8:	d00d      	beq.n	8000706 <__eqsf2+0x4a>
 80006ea:	2a00      	cmp	r2, #0
 80006ec:	d1f8      	bne.n	80006e0 <__eqsf2+0x24>
 80006ee:	0028      	movs	r0, r5
 80006f0:	1e45      	subs	r5, r0, #1
 80006f2:	41a8      	sbcs	r0, r5
 80006f4:	e7f4      	b.n	80006e0 <__eqsf2+0x24>
 80006f6:	2001      	movs	r0, #1
 80006f8:	2d00      	cmp	r5, #0
 80006fa:	d1f1      	bne.n	80006e0 <__eqsf2+0x24>
 80006fc:	e7eb      	b.n	80006d6 <__eqsf2+0x1a>
 80006fe:	2001      	movs	r0, #1
 8000700:	2e00      	cmp	r6, #0
 8000702:	d1ed      	bne.n	80006e0 <__eqsf2+0x24>
 8000704:	e7e9      	b.n	80006da <__eqsf2+0x1e>
 8000706:	2000      	movs	r0, #0
 8000708:	e7ea      	b.n	80006e0 <__eqsf2+0x24>
 800070a:	46c0      	nop			; (mov r8, r8)

0800070c <__gesf2>:
 800070c:	b570      	push	{r4, r5, r6, lr}
 800070e:	004a      	lsls	r2, r1, #1
 8000710:	024e      	lsls	r6, r1, #9
 8000712:	0245      	lsls	r5, r0, #9
 8000714:	0044      	lsls	r4, r0, #1
 8000716:	0a6d      	lsrs	r5, r5, #9
 8000718:	0e24      	lsrs	r4, r4, #24
 800071a:	0fc3      	lsrs	r3, r0, #31
 800071c:	0a76      	lsrs	r6, r6, #9
 800071e:	0e12      	lsrs	r2, r2, #24
 8000720:	0fc9      	lsrs	r1, r1, #31
 8000722:	2cff      	cmp	r4, #255	; 0xff
 8000724:	d015      	beq.n	8000752 <__gesf2+0x46>
 8000726:	2aff      	cmp	r2, #255	; 0xff
 8000728:	d00e      	beq.n	8000748 <__gesf2+0x3c>
 800072a:	2c00      	cmp	r4, #0
 800072c:	d115      	bne.n	800075a <__gesf2+0x4e>
 800072e:	2a00      	cmp	r2, #0
 8000730:	d101      	bne.n	8000736 <__gesf2+0x2a>
 8000732:	2e00      	cmp	r6, #0
 8000734:	d01c      	beq.n	8000770 <__gesf2+0x64>
 8000736:	2d00      	cmp	r5, #0
 8000738:	d014      	beq.n	8000764 <__gesf2+0x58>
 800073a:	428b      	cmp	r3, r1
 800073c:	d027      	beq.n	800078e <__gesf2+0x82>
 800073e:	2002      	movs	r0, #2
 8000740:	3b01      	subs	r3, #1
 8000742:	4018      	ands	r0, r3
 8000744:	3801      	subs	r0, #1
 8000746:	bd70      	pop	{r4, r5, r6, pc}
 8000748:	2e00      	cmp	r6, #0
 800074a:	d0ee      	beq.n	800072a <__gesf2+0x1e>
 800074c:	2002      	movs	r0, #2
 800074e:	4240      	negs	r0, r0
 8000750:	e7f9      	b.n	8000746 <__gesf2+0x3a>
 8000752:	2d00      	cmp	r5, #0
 8000754:	d1fa      	bne.n	800074c <__gesf2+0x40>
 8000756:	2aff      	cmp	r2, #255	; 0xff
 8000758:	d00e      	beq.n	8000778 <__gesf2+0x6c>
 800075a:	2a00      	cmp	r2, #0
 800075c:	d10e      	bne.n	800077c <__gesf2+0x70>
 800075e:	2e00      	cmp	r6, #0
 8000760:	d0ed      	beq.n	800073e <__gesf2+0x32>
 8000762:	e00b      	b.n	800077c <__gesf2+0x70>
 8000764:	2301      	movs	r3, #1
 8000766:	3901      	subs	r1, #1
 8000768:	4399      	bics	r1, r3
 800076a:	0008      	movs	r0, r1
 800076c:	3001      	adds	r0, #1
 800076e:	e7ea      	b.n	8000746 <__gesf2+0x3a>
 8000770:	2000      	movs	r0, #0
 8000772:	2d00      	cmp	r5, #0
 8000774:	d0e7      	beq.n	8000746 <__gesf2+0x3a>
 8000776:	e7e2      	b.n	800073e <__gesf2+0x32>
 8000778:	2e00      	cmp	r6, #0
 800077a:	d1e7      	bne.n	800074c <__gesf2+0x40>
 800077c:	428b      	cmp	r3, r1
 800077e:	d1de      	bne.n	800073e <__gesf2+0x32>
 8000780:	4294      	cmp	r4, r2
 8000782:	dd05      	ble.n	8000790 <__gesf2+0x84>
 8000784:	2102      	movs	r1, #2
 8000786:	1e58      	subs	r0, r3, #1
 8000788:	4008      	ands	r0, r1
 800078a:	3801      	subs	r0, #1
 800078c:	e7db      	b.n	8000746 <__gesf2+0x3a>
 800078e:	2400      	movs	r4, #0
 8000790:	42a2      	cmp	r2, r4
 8000792:	dc04      	bgt.n	800079e <__gesf2+0x92>
 8000794:	42b5      	cmp	r5, r6
 8000796:	d8d2      	bhi.n	800073e <__gesf2+0x32>
 8000798:	2000      	movs	r0, #0
 800079a:	42b5      	cmp	r5, r6
 800079c:	d2d3      	bcs.n	8000746 <__gesf2+0x3a>
 800079e:	1e58      	subs	r0, r3, #1
 80007a0:	2301      	movs	r3, #1
 80007a2:	4398      	bics	r0, r3
 80007a4:	3001      	adds	r0, #1
 80007a6:	e7ce      	b.n	8000746 <__gesf2+0x3a>

080007a8 <__lesf2>:
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	0042      	lsls	r2, r0, #1
 80007ac:	0244      	lsls	r4, r0, #9
 80007ae:	024d      	lsls	r5, r1, #9
 80007b0:	0fc3      	lsrs	r3, r0, #31
 80007b2:	0048      	lsls	r0, r1, #1
 80007b4:	0a64      	lsrs	r4, r4, #9
 80007b6:	0e12      	lsrs	r2, r2, #24
 80007b8:	0a6d      	lsrs	r5, r5, #9
 80007ba:	0e00      	lsrs	r0, r0, #24
 80007bc:	0fc9      	lsrs	r1, r1, #31
 80007be:	2aff      	cmp	r2, #255	; 0xff
 80007c0:	d012      	beq.n	80007e8 <__lesf2+0x40>
 80007c2:	28ff      	cmp	r0, #255	; 0xff
 80007c4:	d00c      	beq.n	80007e0 <__lesf2+0x38>
 80007c6:	2a00      	cmp	r2, #0
 80007c8:	d112      	bne.n	80007f0 <__lesf2+0x48>
 80007ca:	2800      	cmp	r0, #0
 80007cc:	d119      	bne.n	8000802 <__lesf2+0x5a>
 80007ce:	2d00      	cmp	r5, #0
 80007d0:	d117      	bne.n	8000802 <__lesf2+0x5a>
 80007d2:	2c00      	cmp	r4, #0
 80007d4:	d02b      	beq.n	800082e <__lesf2+0x86>
 80007d6:	2002      	movs	r0, #2
 80007d8:	3b01      	subs	r3, #1
 80007da:	4018      	ands	r0, r3
 80007dc:	3801      	subs	r0, #1
 80007de:	e026      	b.n	800082e <__lesf2+0x86>
 80007e0:	2d00      	cmp	r5, #0
 80007e2:	d0f0      	beq.n	80007c6 <__lesf2+0x1e>
 80007e4:	2002      	movs	r0, #2
 80007e6:	e022      	b.n	800082e <__lesf2+0x86>
 80007e8:	2c00      	cmp	r4, #0
 80007ea:	d1fb      	bne.n	80007e4 <__lesf2+0x3c>
 80007ec:	28ff      	cmp	r0, #255	; 0xff
 80007ee:	d01f      	beq.n	8000830 <__lesf2+0x88>
 80007f0:	2800      	cmp	r0, #0
 80007f2:	d11f      	bne.n	8000834 <__lesf2+0x8c>
 80007f4:	2d00      	cmp	r5, #0
 80007f6:	d11d      	bne.n	8000834 <__lesf2+0x8c>
 80007f8:	2002      	movs	r0, #2
 80007fa:	3b01      	subs	r3, #1
 80007fc:	4018      	ands	r0, r3
 80007fe:	3801      	subs	r0, #1
 8000800:	e015      	b.n	800082e <__lesf2+0x86>
 8000802:	2c00      	cmp	r4, #0
 8000804:	d00e      	beq.n	8000824 <__lesf2+0x7c>
 8000806:	428b      	cmp	r3, r1
 8000808:	d1e5      	bne.n	80007d6 <__lesf2+0x2e>
 800080a:	2200      	movs	r2, #0
 800080c:	4290      	cmp	r0, r2
 800080e:	dc04      	bgt.n	800081a <__lesf2+0x72>
 8000810:	42ac      	cmp	r4, r5
 8000812:	d8e0      	bhi.n	80007d6 <__lesf2+0x2e>
 8000814:	2000      	movs	r0, #0
 8000816:	42ac      	cmp	r4, r5
 8000818:	d209      	bcs.n	800082e <__lesf2+0x86>
 800081a:	1e58      	subs	r0, r3, #1
 800081c:	2301      	movs	r3, #1
 800081e:	4398      	bics	r0, r3
 8000820:	3001      	adds	r0, #1
 8000822:	e004      	b.n	800082e <__lesf2+0x86>
 8000824:	2301      	movs	r3, #1
 8000826:	3901      	subs	r1, #1
 8000828:	4399      	bics	r1, r3
 800082a:	0008      	movs	r0, r1
 800082c:	3001      	adds	r0, #1
 800082e:	bd30      	pop	{r4, r5, pc}
 8000830:	2d00      	cmp	r5, #0
 8000832:	d1d7      	bne.n	80007e4 <__lesf2+0x3c>
 8000834:	428b      	cmp	r3, r1
 8000836:	d1ce      	bne.n	80007d6 <__lesf2+0x2e>
 8000838:	4282      	cmp	r2, r0
 800083a:	dde7      	ble.n	800080c <__lesf2+0x64>
 800083c:	2102      	movs	r1, #2
 800083e:	1e58      	subs	r0, r3, #1
 8000840:	4008      	ands	r0, r1
 8000842:	3801      	subs	r0, #1
 8000844:	e7f3      	b.n	800082e <__lesf2+0x86>
 8000846:	46c0      	nop			; (mov r8, r8)

08000848 <__aeabi_fsub>:
 8000848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800084a:	4647      	mov	r7, r8
 800084c:	46ce      	mov	lr, r9
 800084e:	0044      	lsls	r4, r0, #1
 8000850:	0fc2      	lsrs	r2, r0, #31
 8000852:	b580      	push	{r7, lr}
 8000854:	0247      	lsls	r7, r0, #9
 8000856:	0248      	lsls	r0, r1, #9
 8000858:	0a40      	lsrs	r0, r0, #9
 800085a:	4684      	mov	ip, r0
 800085c:	4666      	mov	r6, ip
 800085e:	0048      	lsls	r0, r1, #1
 8000860:	0a7f      	lsrs	r7, r7, #9
 8000862:	0e24      	lsrs	r4, r4, #24
 8000864:	00f6      	lsls	r6, r6, #3
 8000866:	0025      	movs	r5, r4
 8000868:	4690      	mov	r8, r2
 800086a:	00fb      	lsls	r3, r7, #3
 800086c:	0e00      	lsrs	r0, r0, #24
 800086e:	0fc9      	lsrs	r1, r1, #31
 8000870:	46b1      	mov	r9, r6
 8000872:	28ff      	cmp	r0, #255	; 0xff
 8000874:	d100      	bne.n	8000878 <__aeabi_fsub+0x30>
 8000876:	e085      	b.n	8000984 <__aeabi_fsub+0x13c>
 8000878:	2601      	movs	r6, #1
 800087a:	4071      	eors	r1, r6
 800087c:	1a26      	subs	r6, r4, r0
 800087e:	4291      	cmp	r1, r2
 8000880:	d057      	beq.n	8000932 <__aeabi_fsub+0xea>
 8000882:	2e00      	cmp	r6, #0
 8000884:	dd43      	ble.n	800090e <__aeabi_fsub+0xc6>
 8000886:	2800      	cmp	r0, #0
 8000888:	d000      	beq.n	800088c <__aeabi_fsub+0x44>
 800088a:	e07f      	b.n	800098c <__aeabi_fsub+0x144>
 800088c:	4649      	mov	r1, r9
 800088e:	2900      	cmp	r1, #0
 8000890:	d100      	bne.n	8000894 <__aeabi_fsub+0x4c>
 8000892:	e0aa      	b.n	80009ea <__aeabi_fsub+0x1a2>
 8000894:	3e01      	subs	r6, #1
 8000896:	2e00      	cmp	r6, #0
 8000898:	d000      	beq.n	800089c <__aeabi_fsub+0x54>
 800089a:	e0f7      	b.n	8000a8c <__aeabi_fsub+0x244>
 800089c:	1a5b      	subs	r3, r3, r1
 800089e:	015a      	lsls	r2, r3, #5
 80008a0:	d400      	bmi.n	80008a4 <__aeabi_fsub+0x5c>
 80008a2:	e08b      	b.n	80009bc <__aeabi_fsub+0x174>
 80008a4:	019b      	lsls	r3, r3, #6
 80008a6:	099c      	lsrs	r4, r3, #6
 80008a8:	0020      	movs	r0, r4
 80008aa:	f000 ffe3 	bl	8001874 <__clzsi2>
 80008ae:	3805      	subs	r0, #5
 80008b0:	4084      	lsls	r4, r0
 80008b2:	4285      	cmp	r5, r0
 80008b4:	dd00      	ble.n	80008b8 <__aeabi_fsub+0x70>
 80008b6:	e0d3      	b.n	8000a60 <__aeabi_fsub+0x218>
 80008b8:	1b45      	subs	r5, r0, r5
 80008ba:	0023      	movs	r3, r4
 80008bc:	2020      	movs	r0, #32
 80008be:	3501      	adds	r5, #1
 80008c0:	40eb      	lsrs	r3, r5
 80008c2:	1b45      	subs	r5, r0, r5
 80008c4:	40ac      	lsls	r4, r5
 80008c6:	1e62      	subs	r2, r4, #1
 80008c8:	4194      	sbcs	r4, r2
 80008ca:	4323      	orrs	r3, r4
 80008cc:	2407      	movs	r4, #7
 80008ce:	2500      	movs	r5, #0
 80008d0:	401c      	ands	r4, r3
 80008d2:	2201      	movs	r2, #1
 80008d4:	4641      	mov	r1, r8
 80008d6:	400a      	ands	r2, r1
 80008d8:	2c00      	cmp	r4, #0
 80008da:	d004      	beq.n	80008e6 <__aeabi_fsub+0x9e>
 80008dc:	210f      	movs	r1, #15
 80008de:	4019      	ands	r1, r3
 80008e0:	2904      	cmp	r1, #4
 80008e2:	d000      	beq.n	80008e6 <__aeabi_fsub+0x9e>
 80008e4:	3304      	adds	r3, #4
 80008e6:	0159      	lsls	r1, r3, #5
 80008e8:	d400      	bmi.n	80008ec <__aeabi_fsub+0xa4>
 80008ea:	e080      	b.n	80009ee <__aeabi_fsub+0x1a6>
 80008ec:	3501      	adds	r5, #1
 80008ee:	b2ec      	uxtb	r4, r5
 80008f0:	2dff      	cmp	r5, #255	; 0xff
 80008f2:	d000      	beq.n	80008f6 <__aeabi_fsub+0xae>
 80008f4:	e0a3      	b.n	8000a3e <__aeabi_fsub+0x1f6>
 80008f6:	24ff      	movs	r4, #255	; 0xff
 80008f8:	2300      	movs	r3, #0
 80008fa:	025b      	lsls	r3, r3, #9
 80008fc:	05e4      	lsls	r4, r4, #23
 80008fe:	0a58      	lsrs	r0, r3, #9
 8000900:	07d2      	lsls	r2, r2, #31
 8000902:	4320      	orrs	r0, r4
 8000904:	4310      	orrs	r0, r2
 8000906:	bc0c      	pop	{r2, r3}
 8000908:	4690      	mov	r8, r2
 800090a:	4699      	mov	r9, r3
 800090c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800090e:	2e00      	cmp	r6, #0
 8000910:	d174      	bne.n	80009fc <__aeabi_fsub+0x1b4>
 8000912:	1c60      	adds	r0, r4, #1
 8000914:	b2c0      	uxtb	r0, r0
 8000916:	2801      	cmp	r0, #1
 8000918:	dc00      	bgt.n	800091c <__aeabi_fsub+0xd4>
 800091a:	e0a7      	b.n	8000a6c <__aeabi_fsub+0x224>
 800091c:	464a      	mov	r2, r9
 800091e:	1a9c      	subs	r4, r3, r2
 8000920:	0162      	lsls	r2, r4, #5
 8000922:	d500      	bpl.n	8000926 <__aeabi_fsub+0xde>
 8000924:	e0b6      	b.n	8000a94 <__aeabi_fsub+0x24c>
 8000926:	2c00      	cmp	r4, #0
 8000928:	d1be      	bne.n	80008a8 <__aeabi_fsub+0x60>
 800092a:	2200      	movs	r2, #0
 800092c:	2400      	movs	r4, #0
 800092e:	2300      	movs	r3, #0
 8000930:	e7e3      	b.n	80008fa <__aeabi_fsub+0xb2>
 8000932:	2e00      	cmp	r6, #0
 8000934:	dc00      	bgt.n	8000938 <__aeabi_fsub+0xf0>
 8000936:	e085      	b.n	8000a44 <__aeabi_fsub+0x1fc>
 8000938:	2800      	cmp	r0, #0
 800093a:	d046      	beq.n	80009ca <__aeabi_fsub+0x182>
 800093c:	2cff      	cmp	r4, #255	; 0xff
 800093e:	d049      	beq.n	80009d4 <__aeabi_fsub+0x18c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	4648      	mov	r0, r9
 8000944:	04d2      	lsls	r2, r2, #19
 8000946:	4310      	orrs	r0, r2
 8000948:	4681      	mov	r9, r0
 800094a:	2201      	movs	r2, #1
 800094c:	2e1b      	cmp	r6, #27
 800094e:	dc09      	bgt.n	8000964 <__aeabi_fsub+0x11c>
 8000950:	2020      	movs	r0, #32
 8000952:	464c      	mov	r4, r9
 8000954:	1b80      	subs	r0, r0, r6
 8000956:	4084      	lsls	r4, r0
 8000958:	464a      	mov	r2, r9
 800095a:	0020      	movs	r0, r4
 800095c:	40f2      	lsrs	r2, r6
 800095e:	1e44      	subs	r4, r0, #1
 8000960:	41a0      	sbcs	r0, r4
 8000962:	4302      	orrs	r2, r0
 8000964:	189b      	adds	r3, r3, r2
 8000966:	015a      	lsls	r2, r3, #5
 8000968:	d528      	bpl.n	80009bc <__aeabi_fsub+0x174>
 800096a:	3501      	adds	r5, #1
 800096c:	2dff      	cmp	r5, #255	; 0xff
 800096e:	d100      	bne.n	8000972 <__aeabi_fsub+0x12a>
 8000970:	e0a8      	b.n	8000ac4 <__aeabi_fsub+0x27c>
 8000972:	2201      	movs	r2, #1
 8000974:	2407      	movs	r4, #7
 8000976:	4994      	ldr	r1, [pc, #592]	; (8000bc8 <__aeabi_fsub+0x380>)
 8000978:	401a      	ands	r2, r3
 800097a:	085b      	lsrs	r3, r3, #1
 800097c:	400b      	ands	r3, r1
 800097e:	4313      	orrs	r3, r2
 8000980:	401c      	ands	r4, r3
 8000982:	e7a6      	b.n	80008d2 <__aeabi_fsub+0x8a>
 8000984:	2e00      	cmp	r6, #0
 8000986:	d000      	beq.n	800098a <__aeabi_fsub+0x142>
 8000988:	e778      	b.n	800087c <__aeabi_fsub+0x34>
 800098a:	e775      	b.n	8000878 <__aeabi_fsub+0x30>
 800098c:	2cff      	cmp	r4, #255	; 0xff
 800098e:	d054      	beq.n	8000a3a <__aeabi_fsub+0x1f2>
 8000990:	2280      	movs	r2, #128	; 0x80
 8000992:	4649      	mov	r1, r9
 8000994:	04d2      	lsls	r2, r2, #19
 8000996:	4311      	orrs	r1, r2
 8000998:	4689      	mov	r9, r1
 800099a:	2201      	movs	r2, #1
 800099c:	2e1b      	cmp	r6, #27
 800099e:	dc09      	bgt.n	80009b4 <__aeabi_fsub+0x16c>
 80009a0:	2120      	movs	r1, #32
 80009a2:	4648      	mov	r0, r9
 80009a4:	1b89      	subs	r1, r1, r6
 80009a6:	4088      	lsls	r0, r1
 80009a8:	464a      	mov	r2, r9
 80009aa:	0001      	movs	r1, r0
 80009ac:	40f2      	lsrs	r2, r6
 80009ae:	1e48      	subs	r0, r1, #1
 80009b0:	4181      	sbcs	r1, r0
 80009b2:	430a      	orrs	r2, r1
 80009b4:	1a9b      	subs	r3, r3, r2
 80009b6:	015a      	lsls	r2, r3, #5
 80009b8:	d500      	bpl.n	80009bc <__aeabi_fsub+0x174>
 80009ba:	e773      	b.n	80008a4 <__aeabi_fsub+0x5c>
 80009bc:	2201      	movs	r2, #1
 80009be:	4641      	mov	r1, r8
 80009c0:	400a      	ands	r2, r1
 80009c2:	0759      	lsls	r1, r3, #29
 80009c4:	d000      	beq.n	80009c8 <__aeabi_fsub+0x180>
 80009c6:	e789      	b.n	80008dc <__aeabi_fsub+0x94>
 80009c8:	e011      	b.n	80009ee <__aeabi_fsub+0x1a6>
 80009ca:	4648      	mov	r0, r9
 80009cc:	2800      	cmp	r0, #0
 80009ce:	d158      	bne.n	8000a82 <__aeabi_fsub+0x23a>
 80009d0:	2cff      	cmp	r4, #255	; 0xff
 80009d2:	d10c      	bne.n	80009ee <__aeabi_fsub+0x1a6>
 80009d4:	08db      	lsrs	r3, r3, #3
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d100      	bne.n	80009dc <__aeabi_fsub+0x194>
 80009da:	e78c      	b.n	80008f6 <__aeabi_fsub+0xae>
 80009dc:	2080      	movs	r0, #128	; 0x80
 80009de:	03c0      	lsls	r0, r0, #15
 80009e0:	4303      	orrs	r3, r0
 80009e2:	025b      	lsls	r3, r3, #9
 80009e4:	0a5b      	lsrs	r3, r3, #9
 80009e6:	24ff      	movs	r4, #255	; 0xff
 80009e8:	e787      	b.n	80008fa <__aeabi_fsub+0xb2>
 80009ea:	2cff      	cmp	r4, #255	; 0xff
 80009ec:	d025      	beq.n	8000a3a <__aeabi_fsub+0x1f2>
 80009ee:	08db      	lsrs	r3, r3, #3
 80009f0:	2dff      	cmp	r5, #255	; 0xff
 80009f2:	d0f0      	beq.n	80009d6 <__aeabi_fsub+0x18e>
 80009f4:	025b      	lsls	r3, r3, #9
 80009f6:	0a5b      	lsrs	r3, r3, #9
 80009f8:	b2ec      	uxtb	r4, r5
 80009fa:	e77e      	b.n	80008fa <__aeabi_fsub+0xb2>
 80009fc:	2c00      	cmp	r4, #0
 80009fe:	d04d      	beq.n	8000a9c <__aeabi_fsub+0x254>
 8000a00:	28ff      	cmp	r0, #255	; 0xff
 8000a02:	d018      	beq.n	8000a36 <__aeabi_fsub+0x1ee>
 8000a04:	2480      	movs	r4, #128	; 0x80
 8000a06:	04e4      	lsls	r4, r4, #19
 8000a08:	4272      	negs	r2, r6
 8000a0a:	4323      	orrs	r3, r4
 8000a0c:	2a1b      	cmp	r2, #27
 8000a0e:	dd00      	ble.n	8000a12 <__aeabi_fsub+0x1ca>
 8000a10:	e0c4      	b.n	8000b9c <__aeabi_fsub+0x354>
 8000a12:	001c      	movs	r4, r3
 8000a14:	2520      	movs	r5, #32
 8000a16:	40d4      	lsrs	r4, r2
 8000a18:	1aaa      	subs	r2, r5, r2
 8000a1a:	4093      	lsls	r3, r2
 8000a1c:	1e5a      	subs	r2, r3, #1
 8000a1e:	4193      	sbcs	r3, r2
 8000a20:	4323      	orrs	r3, r4
 8000a22:	464a      	mov	r2, r9
 8000a24:	0005      	movs	r5, r0
 8000a26:	1ad3      	subs	r3, r2, r3
 8000a28:	4688      	mov	r8, r1
 8000a2a:	e738      	b.n	800089e <__aeabi_fsub+0x56>
 8000a2c:	1c72      	adds	r2, r6, #1
 8000a2e:	d0f8      	beq.n	8000a22 <__aeabi_fsub+0x1da>
 8000a30:	43f2      	mvns	r2, r6
 8000a32:	28ff      	cmp	r0, #255	; 0xff
 8000a34:	d1ea      	bne.n	8000a0c <__aeabi_fsub+0x1c4>
 8000a36:	000a      	movs	r2, r1
 8000a38:	464b      	mov	r3, r9
 8000a3a:	25ff      	movs	r5, #255	; 0xff
 8000a3c:	e7d7      	b.n	80009ee <__aeabi_fsub+0x1a6>
 8000a3e:	019b      	lsls	r3, r3, #6
 8000a40:	0a5b      	lsrs	r3, r3, #9
 8000a42:	e75a      	b.n	80008fa <__aeabi_fsub+0xb2>
 8000a44:	2e00      	cmp	r6, #0
 8000a46:	d141      	bne.n	8000acc <__aeabi_fsub+0x284>
 8000a48:	1c65      	adds	r5, r4, #1
 8000a4a:	b2e9      	uxtb	r1, r5
 8000a4c:	2901      	cmp	r1, #1
 8000a4e:	dd45      	ble.n	8000adc <__aeabi_fsub+0x294>
 8000a50:	2dff      	cmp	r5, #255	; 0xff
 8000a52:	d100      	bne.n	8000a56 <__aeabi_fsub+0x20e>
 8000a54:	e74f      	b.n	80008f6 <__aeabi_fsub+0xae>
 8000a56:	2407      	movs	r4, #7
 8000a58:	444b      	add	r3, r9
 8000a5a:	085b      	lsrs	r3, r3, #1
 8000a5c:	401c      	ands	r4, r3
 8000a5e:	e738      	b.n	80008d2 <__aeabi_fsub+0x8a>
 8000a60:	2207      	movs	r2, #7
 8000a62:	4b5a      	ldr	r3, [pc, #360]	; (8000bcc <__aeabi_fsub+0x384>)
 8000a64:	1a2d      	subs	r5, r5, r0
 8000a66:	4023      	ands	r3, r4
 8000a68:	4014      	ands	r4, r2
 8000a6a:	e732      	b.n	80008d2 <__aeabi_fsub+0x8a>
 8000a6c:	2c00      	cmp	r4, #0
 8000a6e:	d11d      	bne.n	8000aac <__aeabi_fsub+0x264>
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d17a      	bne.n	8000b6a <__aeabi_fsub+0x322>
 8000a74:	464b      	mov	r3, r9
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d100      	bne.n	8000a7c <__aeabi_fsub+0x234>
 8000a7a:	e091      	b.n	8000ba0 <__aeabi_fsub+0x358>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2500      	movs	r5, #0
 8000a80:	e7b5      	b.n	80009ee <__aeabi_fsub+0x1a6>
 8000a82:	3e01      	subs	r6, #1
 8000a84:	2e00      	cmp	r6, #0
 8000a86:	d119      	bne.n	8000abc <__aeabi_fsub+0x274>
 8000a88:	444b      	add	r3, r9
 8000a8a:	e76c      	b.n	8000966 <__aeabi_fsub+0x11e>
 8000a8c:	2cff      	cmp	r4, #255	; 0xff
 8000a8e:	d184      	bne.n	800099a <__aeabi_fsub+0x152>
 8000a90:	25ff      	movs	r5, #255	; 0xff
 8000a92:	e7ac      	b.n	80009ee <__aeabi_fsub+0x1a6>
 8000a94:	464a      	mov	r2, r9
 8000a96:	4688      	mov	r8, r1
 8000a98:	1ad4      	subs	r4, r2, r3
 8000a9a:	e705      	b.n	80008a8 <__aeabi_fsub+0x60>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d1c5      	bne.n	8000a2c <__aeabi_fsub+0x1e4>
 8000aa0:	000a      	movs	r2, r1
 8000aa2:	28ff      	cmp	r0, #255	; 0xff
 8000aa4:	d0c8      	beq.n	8000a38 <__aeabi_fsub+0x1f0>
 8000aa6:	0005      	movs	r5, r0
 8000aa8:	464b      	mov	r3, r9
 8000aaa:	e7a0      	b.n	80009ee <__aeabi_fsub+0x1a6>
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d149      	bne.n	8000b44 <__aeabi_fsub+0x2fc>
 8000ab0:	464b      	mov	r3, r9
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d077      	beq.n	8000ba6 <__aeabi_fsub+0x35e>
 8000ab6:	000a      	movs	r2, r1
 8000ab8:	25ff      	movs	r5, #255	; 0xff
 8000aba:	e798      	b.n	80009ee <__aeabi_fsub+0x1a6>
 8000abc:	2cff      	cmp	r4, #255	; 0xff
 8000abe:	d000      	beq.n	8000ac2 <__aeabi_fsub+0x27a>
 8000ac0:	e743      	b.n	800094a <__aeabi_fsub+0x102>
 8000ac2:	e787      	b.n	80009d4 <__aeabi_fsub+0x18c>
 8000ac4:	000a      	movs	r2, r1
 8000ac6:	24ff      	movs	r4, #255	; 0xff
 8000ac8:	2300      	movs	r3, #0
 8000aca:	e716      	b.n	80008fa <__aeabi_fsub+0xb2>
 8000acc:	2c00      	cmp	r4, #0
 8000ace:	d115      	bne.n	8000afc <__aeabi_fsub+0x2b4>
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d157      	bne.n	8000b84 <__aeabi_fsub+0x33c>
 8000ad4:	28ff      	cmp	r0, #255	; 0xff
 8000ad6:	d1e6      	bne.n	8000aa6 <__aeabi_fsub+0x25e>
 8000ad8:	464b      	mov	r3, r9
 8000ada:	e77b      	b.n	80009d4 <__aeabi_fsub+0x18c>
 8000adc:	2c00      	cmp	r4, #0
 8000ade:	d120      	bne.n	8000b22 <__aeabi_fsub+0x2da>
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d057      	beq.n	8000b94 <__aeabi_fsub+0x34c>
 8000ae4:	4649      	mov	r1, r9
 8000ae6:	2900      	cmp	r1, #0
 8000ae8:	d053      	beq.n	8000b92 <__aeabi_fsub+0x34a>
 8000aea:	444b      	add	r3, r9
 8000aec:	015a      	lsls	r2, r3, #5
 8000aee:	d568      	bpl.n	8000bc2 <__aeabi_fsub+0x37a>
 8000af0:	2407      	movs	r4, #7
 8000af2:	4a36      	ldr	r2, [pc, #216]	; (8000bcc <__aeabi_fsub+0x384>)
 8000af4:	401c      	ands	r4, r3
 8000af6:	2501      	movs	r5, #1
 8000af8:	4013      	ands	r3, r2
 8000afa:	e6ea      	b.n	80008d2 <__aeabi_fsub+0x8a>
 8000afc:	28ff      	cmp	r0, #255	; 0xff
 8000afe:	d0eb      	beq.n	8000ad8 <__aeabi_fsub+0x290>
 8000b00:	2280      	movs	r2, #128	; 0x80
 8000b02:	04d2      	lsls	r2, r2, #19
 8000b04:	4276      	negs	r6, r6
 8000b06:	4313      	orrs	r3, r2
 8000b08:	2e1b      	cmp	r6, #27
 8000b0a:	dc53      	bgt.n	8000bb4 <__aeabi_fsub+0x36c>
 8000b0c:	2520      	movs	r5, #32
 8000b0e:	1bad      	subs	r5, r5, r6
 8000b10:	001a      	movs	r2, r3
 8000b12:	40ab      	lsls	r3, r5
 8000b14:	40f2      	lsrs	r2, r6
 8000b16:	1e5c      	subs	r4, r3, #1
 8000b18:	41a3      	sbcs	r3, r4
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	444b      	add	r3, r9
 8000b1e:	0005      	movs	r5, r0
 8000b20:	e721      	b.n	8000966 <__aeabi_fsub+0x11e>
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d0d8      	beq.n	8000ad8 <__aeabi_fsub+0x290>
 8000b26:	4649      	mov	r1, r9
 8000b28:	2900      	cmp	r1, #0
 8000b2a:	d100      	bne.n	8000b2e <__aeabi_fsub+0x2e6>
 8000b2c:	e752      	b.n	80009d4 <__aeabi_fsub+0x18c>
 8000b2e:	2180      	movs	r1, #128	; 0x80
 8000b30:	03c9      	lsls	r1, r1, #15
 8000b32:	420f      	tst	r7, r1
 8000b34:	d100      	bne.n	8000b38 <__aeabi_fsub+0x2f0>
 8000b36:	e74d      	b.n	80009d4 <__aeabi_fsub+0x18c>
 8000b38:	4660      	mov	r0, ip
 8000b3a:	4208      	tst	r0, r1
 8000b3c:	d000      	beq.n	8000b40 <__aeabi_fsub+0x2f8>
 8000b3e:	e749      	b.n	80009d4 <__aeabi_fsub+0x18c>
 8000b40:	464b      	mov	r3, r9
 8000b42:	e747      	b.n	80009d4 <__aeabi_fsub+0x18c>
 8000b44:	4648      	mov	r0, r9
 8000b46:	25ff      	movs	r5, #255	; 0xff
 8000b48:	2800      	cmp	r0, #0
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_fsub+0x306>
 8000b4c:	e74f      	b.n	80009ee <__aeabi_fsub+0x1a6>
 8000b4e:	2280      	movs	r2, #128	; 0x80
 8000b50:	03d2      	lsls	r2, r2, #15
 8000b52:	4217      	tst	r7, r2
 8000b54:	d004      	beq.n	8000b60 <__aeabi_fsub+0x318>
 8000b56:	4660      	mov	r0, ip
 8000b58:	4210      	tst	r0, r2
 8000b5a:	d101      	bne.n	8000b60 <__aeabi_fsub+0x318>
 8000b5c:	464b      	mov	r3, r9
 8000b5e:	4688      	mov	r8, r1
 8000b60:	2201      	movs	r2, #1
 8000b62:	4641      	mov	r1, r8
 8000b64:	25ff      	movs	r5, #255	; 0xff
 8000b66:	400a      	ands	r2, r1
 8000b68:	e741      	b.n	80009ee <__aeabi_fsub+0x1a6>
 8000b6a:	4648      	mov	r0, r9
 8000b6c:	2800      	cmp	r0, #0
 8000b6e:	d01f      	beq.n	8000bb0 <__aeabi_fsub+0x368>
 8000b70:	1a1a      	subs	r2, r3, r0
 8000b72:	0150      	lsls	r0, r2, #5
 8000b74:	d520      	bpl.n	8000bb8 <__aeabi_fsub+0x370>
 8000b76:	464a      	mov	r2, r9
 8000b78:	2407      	movs	r4, #7
 8000b7a:	1ad3      	subs	r3, r2, r3
 8000b7c:	401c      	ands	r4, r3
 8000b7e:	4688      	mov	r8, r1
 8000b80:	2500      	movs	r5, #0
 8000b82:	e6a6      	b.n	80008d2 <__aeabi_fsub+0x8a>
 8000b84:	1c74      	adds	r4, r6, #1
 8000b86:	d0c9      	beq.n	8000b1c <__aeabi_fsub+0x2d4>
 8000b88:	43f6      	mvns	r6, r6
 8000b8a:	28ff      	cmp	r0, #255	; 0xff
 8000b8c:	d1bc      	bne.n	8000b08 <__aeabi_fsub+0x2c0>
 8000b8e:	464b      	mov	r3, r9
 8000b90:	e720      	b.n	80009d4 <__aeabi_fsub+0x18c>
 8000b92:	4699      	mov	r9, r3
 8000b94:	464b      	mov	r3, r9
 8000b96:	2500      	movs	r5, #0
 8000b98:	08db      	lsrs	r3, r3, #3
 8000b9a:	e72b      	b.n	80009f4 <__aeabi_fsub+0x1ac>
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e740      	b.n	8000a22 <__aeabi_fsub+0x1da>
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	e6a9      	b.n	80008fa <__aeabi_fsub+0xb2>
 8000ba6:	2380      	movs	r3, #128	; 0x80
 8000ba8:	2200      	movs	r2, #0
 8000baa:	03db      	lsls	r3, r3, #15
 8000bac:	24ff      	movs	r4, #255	; 0xff
 8000bae:	e6a4      	b.n	80008fa <__aeabi_fsub+0xb2>
 8000bb0:	2500      	movs	r5, #0
 8000bb2:	e71c      	b.n	80009ee <__aeabi_fsub+0x1a6>
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e7b1      	b.n	8000b1c <__aeabi_fsub+0x2d4>
 8000bb8:	2a00      	cmp	r2, #0
 8000bba:	d0f1      	beq.n	8000ba0 <__aeabi_fsub+0x358>
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	2500      	movs	r5, #0
 8000bc0:	e6fc      	b.n	80009bc <__aeabi_fsub+0x174>
 8000bc2:	2500      	movs	r5, #0
 8000bc4:	e6fa      	b.n	80009bc <__aeabi_fsub+0x174>
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	7dffffff 	.word	0x7dffffff
 8000bcc:	fbffffff 	.word	0xfbffffff

08000bd0 <__aeabi_f2iz>:
 8000bd0:	0241      	lsls	r1, r0, #9
 8000bd2:	0042      	lsls	r2, r0, #1
 8000bd4:	0fc3      	lsrs	r3, r0, #31
 8000bd6:	0a49      	lsrs	r1, r1, #9
 8000bd8:	0e12      	lsrs	r2, r2, #24
 8000bda:	2000      	movs	r0, #0
 8000bdc:	2a7e      	cmp	r2, #126	; 0x7e
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_f2iz+0x2c>
 8000be0:	2a9d      	cmp	r2, #157	; 0x9d
 8000be2:	d80c      	bhi.n	8000bfe <__aeabi_f2iz+0x2e>
 8000be4:	2080      	movs	r0, #128	; 0x80
 8000be6:	0400      	lsls	r0, r0, #16
 8000be8:	4301      	orrs	r1, r0
 8000bea:	2a95      	cmp	r2, #149	; 0x95
 8000bec:	dc0a      	bgt.n	8000c04 <__aeabi_f2iz+0x34>
 8000bee:	2096      	movs	r0, #150	; 0x96
 8000bf0:	1a82      	subs	r2, r0, r2
 8000bf2:	40d1      	lsrs	r1, r2
 8000bf4:	4248      	negs	r0, r1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d100      	bne.n	8000bfc <__aeabi_f2iz+0x2c>
 8000bfa:	0008      	movs	r0, r1
 8000bfc:	4770      	bx	lr
 8000bfe:	4a03      	ldr	r2, [pc, #12]	; (8000c0c <__aeabi_f2iz+0x3c>)
 8000c00:	1898      	adds	r0, r3, r2
 8000c02:	e7fb      	b.n	8000bfc <__aeabi_f2iz+0x2c>
 8000c04:	3a96      	subs	r2, #150	; 0x96
 8000c06:	4091      	lsls	r1, r2
 8000c08:	e7f4      	b.n	8000bf4 <__aeabi_f2iz+0x24>
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	7fffffff 	.word	0x7fffffff

08000c10 <__aeabi_ddiv>:
 8000c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c12:	4657      	mov	r7, sl
 8000c14:	46de      	mov	lr, fp
 8000c16:	464e      	mov	r6, r9
 8000c18:	4645      	mov	r5, r8
 8000c1a:	b5e0      	push	{r5, r6, r7, lr}
 8000c1c:	4683      	mov	fp, r0
 8000c1e:	0007      	movs	r7, r0
 8000c20:	030e      	lsls	r6, r1, #12
 8000c22:	0048      	lsls	r0, r1, #1
 8000c24:	b085      	sub	sp, #20
 8000c26:	4692      	mov	sl, r2
 8000c28:	001c      	movs	r4, r3
 8000c2a:	0b36      	lsrs	r6, r6, #12
 8000c2c:	0d40      	lsrs	r0, r0, #21
 8000c2e:	0fcd      	lsrs	r5, r1, #31
 8000c30:	2800      	cmp	r0, #0
 8000c32:	d100      	bne.n	8000c36 <__aeabi_ddiv+0x26>
 8000c34:	e09d      	b.n	8000d72 <__aeabi_ddiv+0x162>
 8000c36:	4b95      	ldr	r3, [pc, #596]	; (8000e8c <__aeabi_ddiv+0x27c>)
 8000c38:	4298      	cmp	r0, r3
 8000c3a:	d039      	beq.n	8000cb0 <__aeabi_ddiv+0xa0>
 8000c3c:	2380      	movs	r3, #128	; 0x80
 8000c3e:	00f6      	lsls	r6, r6, #3
 8000c40:	041b      	lsls	r3, r3, #16
 8000c42:	431e      	orrs	r6, r3
 8000c44:	4a92      	ldr	r2, [pc, #584]	; (8000e90 <__aeabi_ddiv+0x280>)
 8000c46:	0f7b      	lsrs	r3, r7, #29
 8000c48:	4333      	orrs	r3, r6
 8000c4a:	4699      	mov	r9, r3
 8000c4c:	4694      	mov	ip, r2
 8000c4e:	0003      	movs	r3, r0
 8000c50:	4463      	add	r3, ip
 8000c52:	9300      	str	r3, [sp, #0]
 8000c54:	2300      	movs	r3, #0
 8000c56:	2600      	movs	r6, #0
 8000c58:	00ff      	lsls	r7, r7, #3
 8000c5a:	9302      	str	r3, [sp, #8]
 8000c5c:	0323      	lsls	r3, r4, #12
 8000c5e:	0b1b      	lsrs	r3, r3, #12
 8000c60:	4698      	mov	r8, r3
 8000c62:	0063      	lsls	r3, r4, #1
 8000c64:	0fe4      	lsrs	r4, r4, #31
 8000c66:	4652      	mov	r2, sl
 8000c68:	0d5b      	lsrs	r3, r3, #21
 8000c6a:	9401      	str	r4, [sp, #4]
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_ddiv+0x60>
 8000c6e:	e0b3      	b.n	8000dd8 <__aeabi_ddiv+0x1c8>
 8000c70:	4986      	ldr	r1, [pc, #536]	; (8000e8c <__aeabi_ddiv+0x27c>)
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d100      	bne.n	8000c78 <__aeabi_ddiv+0x68>
 8000c76:	e09e      	b.n	8000db6 <__aeabi_ddiv+0x1a6>
 8000c78:	4642      	mov	r2, r8
 8000c7a:	00d1      	lsls	r1, r2, #3
 8000c7c:	2280      	movs	r2, #128	; 0x80
 8000c7e:	0412      	lsls	r2, r2, #16
 8000c80:	430a      	orrs	r2, r1
 8000c82:	4651      	mov	r1, sl
 8000c84:	0f49      	lsrs	r1, r1, #29
 8000c86:	4311      	orrs	r1, r2
 8000c88:	468b      	mov	fp, r1
 8000c8a:	4981      	ldr	r1, [pc, #516]	; (8000e90 <__aeabi_ddiv+0x280>)
 8000c8c:	4652      	mov	r2, sl
 8000c8e:	468c      	mov	ip, r1
 8000c90:	9900      	ldr	r1, [sp, #0]
 8000c92:	4463      	add	r3, ip
 8000c94:	1acb      	subs	r3, r1, r3
 8000c96:	2100      	movs	r1, #0
 8000c98:	00d2      	lsls	r2, r2, #3
 8000c9a:	9300      	str	r3, [sp, #0]
 8000c9c:	002b      	movs	r3, r5
 8000c9e:	4063      	eors	r3, r4
 8000ca0:	469a      	mov	sl, r3
 8000ca2:	2e0f      	cmp	r6, #15
 8000ca4:	d900      	bls.n	8000ca8 <__aeabi_ddiv+0x98>
 8000ca6:	e105      	b.n	8000eb4 <__aeabi_ddiv+0x2a4>
 8000ca8:	4b7a      	ldr	r3, [pc, #488]	; (8000e94 <__aeabi_ddiv+0x284>)
 8000caa:	00b6      	lsls	r6, r6, #2
 8000cac:	599b      	ldr	r3, [r3, r6]
 8000cae:	469f      	mov	pc, r3
 8000cb0:	465b      	mov	r3, fp
 8000cb2:	4333      	orrs	r3, r6
 8000cb4:	4699      	mov	r9, r3
 8000cb6:	d000      	beq.n	8000cba <__aeabi_ddiv+0xaa>
 8000cb8:	e0b8      	b.n	8000e2c <__aeabi_ddiv+0x21c>
 8000cba:	2302      	movs	r3, #2
 8000cbc:	2608      	movs	r6, #8
 8000cbe:	2700      	movs	r7, #0
 8000cc0:	9000      	str	r0, [sp, #0]
 8000cc2:	9302      	str	r3, [sp, #8]
 8000cc4:	e7ca      	b.n	8000c5c <__aeabi_ddiv+0x4c>
 8000cc6:	46cb      	mov	fp, r9
 8000cc8:	003a      	movs	r2, r7
 8000cca:	9902      	ldr	r1, [sp, #8]
 8000ccc:	9501      	str	r5, [sp, #4]
 8000cce:	9b01      	ldr	r3, [sp, #4]
 8000cd0:	469a      	mov	sl, r3
 8000cd2:	2902      	cmp	r1, #2
 8000cd4:	d027      	beq.n	8000d26 <__aeabi_ddiv+0x116>
 8000cd6:	2903      	cmp	r1, #3
 8000cd8:	d100      	bne.n	8000cdc <__aeabi_ddiv+0xcc>
 8000cda:	e280      	b.n	80011de <__aeabi_ddiv+0x5ce>
 8000cdc:	2901      	cmp	r1, #1
 8000cde:	d044      	beq.n	8000d6a <__aeabi_ddiv+0x15a>
 8000ce0:	496d      	ldr	r1, [pc, #436]	; (8000e98 <__aeabi_ddiv+0x288>)
 8000ce2:	9b00      	ldr	r3, [sp, #0]
 8000ce4:	468c      	mov	ip, r1
 8000ce6:	4463      	add	r3, ip
 8000ce8:	001c      	movs	r4, r3
 8000cea:	2c00      	cmp	r4, #0
 8000cec:	dd38      	ble.n	8000d60 <__aeabi_ddiv+0x150>
 8000cee:	0753      	lsls	r3, r2, #29
 8000cf0:	d000      	beq.n	8000cf4 <__aeabi_ddiv+0xe4>
 8000cf2:	e213      	b.n	800111c <__aeabi_ddiv+0x50c>
 8000cf4:	08d2      	lsrs	r2, r2, #3
 8000cf6:	465b      	mov	r3, fp
 8000cf8:	01db      	lsls	r3, r3, #7
 8000cfa:	d509      	bpl.n	8000d10 <__aeabi_ddiv+0x100>
 8000cfc:	4659      	mov	r1, fp
 8000cfe:	4b67      	ldr	r3, [pc, #412]	; (8000e9c <__aeabi_ddiv+0x28c>)
 8000d00:	4019      	ands	r1, r3
 8000d02:	468b      	mov	fp, r1
 8000d04:	2180      	movs	r1, #128	; 0x80
 8000d06:	00c9      	lsls	r1, r1, #3
 8000d08:	468c      	mov	ip, r1
 8000d0a:	9b00      	ldr	r3, [sp, #0]
 8000d0c:	4463      	add	r3, ip
 8000d0e:	001c      	movs	r4, r3
 8000d10:	4b63      	ldr	r3, [pc, #396]	; (8000ea0 <__aeabi_ddiv+0x290>)
 8000d12:	429c      	cmp	r4, r3
 8000d14:	dc07      	bgt.n	8000d26 <__aeabi_ddiv+0x116>
 8000d16:	465b      	mov	r3, fp
 8000d18:	0564      	lsls	r4, r4, #21
 8000d1a:	075f      	lsls	r7, r3, #29
 8000d1c:	025b      	lsls	r3, r3, #9
 8000d1e:	4317      	orrs	r7, r2
 8000d20:	0b1b      	lsrs	r3, r3, #12
 8000d22:	0d62      	lsrs	r2, r4, #21
 8000d24:	e002      	b.n	8000d2c <__aeabi_ddiv+0x11c>
 8000d26:	2300      	movs	r3, #0
 8000d28:	2700      	movs	r7, #0
 8000d2a:	4a58      	ldr	r2, [pc, #352]	; (8000e8c <__aeabi_ddiv+0x27c>)
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	031b      	lsls	r3, r3, #12
 8000d30:	0b1c      	lsrs	r4, r3, #12
 8000d32:	0d0b      	lsrs	r3, r1, #20
 8000d34:	051b      	lsls	r3, r3, #20
 8000d36:	4323      	orrs	r3, r4
 8000d38:	0514      	lsls	r4, r2, #20
 8000d3a:	4a5a      	ldr	r2, [pc, #360]	; (8000ea4 <__aeabi_ddiv+0x294>)
 8000d3c:	0038      	movs	r0, r7
 8000d3e:	4013      	ands	r3, r2
 8000d40:	431c      	orrs	r4, r3
 8000d42:	4653      	mov	r3, sl
 8000d44:	0064      	lsls	r4, r4, #1
 8000d46:	07db      	lsls	r3, r3, #31
 8000d48:	0864      	lsrs	r4, r4, #1
 8000d4a:	431c      	orrs	r4, r3
 8000d4c:	0021      	movs	r1, r4
 8000d4e:	b005      	add	sp, #20
 8000d50:	bc3c      	pop	{r2, r3, r4, r5}
 8000d52:	4690      	mov	r8, r2
 8000d54:	4699      	mov	r9, r3
 8000d56:	46a2      	mov	sl, r4
 8000d58:	46ab      	mov	fp, r5
 8000d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	4252      	negs	r2, r2
 8000d60:	2301      	movs	r3, #1
 8000d62:	1b1b      	subs	r3, r3, r4
 8000d64:	2b38      	cmp	r3, #56	; 0x38
 8000d66:	dc00      	bgt.n	8000d6a <__aeabi_ddiv+0x15a>
 8000d68:	e1ad      	b.n	80010c6 <__aeabi_ddiv+0x4b6>
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	2700      	movs	r7, #0
 8000d70:	e7dc      	b.n	8000d2c <__aeabi_ddiv+0x11c>
 8000d72:	465b      	mov	r3, fp
 8000d74:	4333      	orrs	r3, r6
 8000d76:	4699      	mov	r9, r3
 8000d78:	d05e      	beq.n	8000e38 <__aeabi_ddiv+0x228>
 8000d7a:	2e00      	cmp	r6, #0
 8000d7c:	d100      	bne.n	8000d80 <__aeabi_ddiv+0x170>
 8000d7e:	e18a      	b.n	8001096 <__aeabi_ddiv+0x486>
 8000d80:	0030      	movs	r0, r6
 8000d82:	f000 fd77 	bl	8001874 <__clzsi2>
 8000d86:	0003      	movs	r3, r0
 8000d88:	3b0b      	subs	r3, #11
 8000d8a:	2b1c      	cmp	r3, #28
 8000d8c:	dd00      	ble.n	8000d90 <__aeabi_ddiv+0x180>
 8000d8e:	e17b      	b.n	8001088 <__aeabi_ddiv+0x478>
 8000d90:	221d      	movs	r2, #29
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	465a      	mov	r2, fp
 8000d96:	0001      	movs	r1, r0
 8000d98:	40da      	lsrs	r2, r3
 8000d9a:	3908      	subs	r1, #8
 8000d9c:	408e      	lsls	r6, r1
 8000d9e:	0013      	movs	r3, r2
 8000da0:	465f      	mov	r7, fp
 8000da2:	4333      	orrs	r3, r6
 8000da4:	4699      	mov	r9, r3
 8000da6:	408f      	lsls	r7, r1
 8000da8:	4b3f      	ldr	r3, [pc, #252]	; (8000ea8 <__aeabi_ddiv+0x298>)
 8000daa:	2600      	movs	r6, #0
 8000dac:	1a1b      	subs	r3, r3, r0
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	2300      	movs	r3, #0
 8000db2:	9302      	str	r3, [sp, #8]
 8000db4:	e752      	b.n	8000c5c <__aeabi_ddiv+0x4c>
 8000db6:	4641      	mov	r1, r8
 8000db8:	4653      	mov	r3, sl
 8000dba:	430b      	orrs	r3, r1
 8000dbc:	493b      	ldr	r1, [pc, #236]	; (8000eac <__aeabi_ddiv+0x29c>)
 8000dbe:	469b      	mov	fp, r3
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	9b00      	ldr	r3, [sp, #0]
 8000dc4:	4463      	add	r3, ip
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	465b      	mov	r3, fp
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d13b      	bne.n	8000e46 <__aeabi_ddiv+0x236>
 8000dce:	2302      	movs	r3, #2
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	431e      	orrs	r6, r3
 8000dd4:	2102      	movs	r1, #2
 8000dd6:	e761      	b.n	8000c9c <__aeabi_ddiv+0x8c>
 8000dd8:	4643      	mov	r3, r8
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	469b      	mov	fp, r3
 8000dde:	d037      	beq.n	8000e50 <__aeabi_ddiv+0x240>
 8000de0:	4643      	mov	r3, r8
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d100      	bne.n	8000de8 <__aeabi_ddiv+0x1d8>
 8000de6:	e162      	b.n	80010ae <__aeabi_ddiv+0x49e>
 8000de8:	4640      	mov	r0, r8
 8000dea:	f000 fd43 	bl	8001874 <__clzsi2>
 8000dee:	0003      	movs	r3, r0
 8000df0:	3b0b      	subs	r3, #11
 8000df2:	2b1c      	cmp	r3, #28
 8000df4:	dd00      	ble.n	8000df8 <__aeabi_ddiv+0x1e8>
 8000df6:	e153      	b.n	80010a0 <__aeabi_ddiv+0x490>
 8000df8:	0002      	movs	r2, r0
 8000dfa:	4641      	mov	r1, r8
 8000dfc:	3a08      	subs	r2, #8
 8000dfe:	4091      	lsls	r1, r2
 8000e00:	4688      	mov	r8, r1
 8000e02:	211d      	movs	r1, #29
 8000e04:	1acb      	subs	r3, r1, r3
 8000e06:	4651      	mov	r1, sl
 8000e08:	40d9      	lsrs	r1, r3
 8000e0a:	000b      	movs	r3, r1
 8000e0c:	4641      	mov	r1, r8
 8000e0e:	430b      	orrs	r3, r1
 8000e10:	469b      	mov	fp, r3
 8000e12:	4653      	mov	r3, sl
 8000e14:	4093      	lsls	r3, r2
 8000e16:	001a      	movs	r2, r3
 8000e18:	9b00      	ldr	r3, [sp, #0]
 8000e1a:	4925      	ldr	r1, [pc, #148]	; (8000eb0 <__aeabi_ddiv+0x2a0>)
 8000e1c:	469c      	mov	ip, r3
 8000e1e:	4460      	add	r0, ip
 8000e20:	0003      	movs	r3, r0
 8000e22:	468c      	mov	ip, r1
 8000e24:	4463      	add	r3, ip
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e737      	b.n	8000c9c <__aeabi_ddiv+0x8c>
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	46b1      	mov	r9, r6
 8000e30:	9000      	str	r0, [sp, #0]
 8000e32:	260c      	movs	r6, #12
 8000e34:	9302      	str	r3, [sp, #8]
 8000e36:	e711      	b.n	8000c5c <__aeabi_ddiv+0x4c>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	2604      	movs	r6, #4
 8000e40:	2700      	movs	r7, #0
 8000e42:	9302      	str	r3, [sp, #8]
 8000e44:	e70a      	b.n	8000c5c <__aeabi_ddiv+0x4c>
 8000e46:	2303      	movs	r3, #3
 8000e48:	46c3      	mov	fp, r8
 8000e4a:	431e      	orrs	r6, r3
 8000e4c:	2103      	movs	r1, #3
 8000e4e:	e725      	b.n	8000c9c <__aeabi_ddiv+0x8c>
 8000e50:	3301      	adds	r3, #1
 8000e52:	431e      	orrs	r6, r3
 8000e54:	2200      	movs	r2, #0
 8000e56:	2101      	movs	r1, #1
 8000e58:	e720      	b.n	8000c9c <__aeabi_ddiv+0x8c>
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	469a      	mov	sl, r3
 8000e5e:	2380      	movs	r3, #128	; 0x80
 8000e60:	2700      	movs	r7, #0
 8000e62:	031b      	lsls	r3, r3, #12
 8000e64:	4a09      	ldr	r2, [pc, #36]	; (8000e8c <__aeabi_ddiv+0x27c>)
 8000e66:	e761      	b.n	8000d2c <__aeabi_ddiv+0x11c>
 8000e68:	2380      	movs	r3, #128	; 0x80
 8000e6a:	4649      	mov	r1, r9
 8000e6c:	031b      	lsls	r3, r3, #12
 8000e6e:	4219      	tst	r1, r3
 8000e70:	d100      	bne.n	8000e74 <__aeabi_ddiv+0x264>
 8000e72:	e0e2      	b.n	800103a <__aeabi_ddiv+0x42a>
 8000e74:	4659      	mov	r1, fp
 8000e76:	4219      	tst	r1, r3
 8000e78:	d000      	beq.n	8000e7c <__aeabi_ddiv+0x26c>
 8000e7a:	e0de      	b.n	800103a <__aeabi_ddiv+0x42a>
 8000e7c:	430b      	orrs	r3, r1
 8000e7e:	031b      	lsls	r3, r3, #12
 8000e80:	0017      	movs	r7, r2
 8000e82:	0b1b      	lsrs	r3, r3, #12
 8000e84:	46a2      	mov	sl, r4
 8000e86:	4a01      	ldr	r2, [pc, #4]	; (8000e8c <__aeabi_ddiv+0x27c>)
 8000e88:	e750      	b.n	8000d2c <__aeabi_ddiv+0x11c>
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	000007ff 	.word	0x000007ff
 8000e90:	fffffc01 	.word	0xfffffc01
 8000e94:	08008890 	.word	0x08008890
 8000e98:	000003ff 	.word	0x000003ff
 8000e9c:	feffffff 	.word	0xfeffffff
 8000ea0:	000007fe 	.word	0x000007fe
 8000ea4:	800fffff 	.word	0x800fffff
 8000ea8:	fffffc0d 	.word	0xfffffc0d
 8000eac:	fffff801 	.word	0xfffff801
 8000eb0:	000003f3 	.word	0x000003f3
 8000eb4:	45d9      	cmp	r9, fp
 8000eb6:	d900      	bls.n	8000eba <__aeabi_ddiv+0x2aa>
 8000eb8:	e0cb      	b.n	8001052 <__aeabi_ddiv+0x442>
 8000eba:	d100      	bne.n	8000ebe <__aeabi_ddiv+0x2ae>
 8000ebc:	e0c6      	b.n	800104c <__aeabi_ddiv+0x43c>
 8000ebe:	003c      	movs	r4, r7
 8000ec0:	4648      	mov	r0, r9
 8000ec2:	2700      	movs	r7, #0
 8000ec4:	9b00      	ldr	r3, [sp, #0]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	465b      	mov	r3, fp
 8000ecc:	0e16      	lsrs	r6, r2, #24
 8000ece:	021b      	lsls	r3, r3, #8
 8000ed0:	431e      	orrs	r6, r3
 8000ed2:	0213      	lsls	r3, r2, #8
 8000ed4:	4698      	mov	r8, r3
 8000ed6:	0433      	lsls	r3, r6, #16
 8000ed8:	0c1b      	lsrs	r3, r3, #16
 8000eda:	4699      	mov	r9, r3
 8000edc:	0c31      	lsrs	r1, r6, #16
 8000ede:	9101      	str	r1, [sp, #4]
 8000ee0:	f7ff f998 	bl	8000214 <__aeabi_uidivmod>
 8000ee4:	464a      	mov	r2, r9
 8000ee6:	4342      	muls	r2, r0
 8000ee8:	040b      	lsls	r3, r1, #16
 8000eea:	0c21      	lsrs	r1, r4, #16
 8000eec:	0005      	movs	r5, r0
 8000eee:	4319      	orrs	r1, r3
 8000ef0:	428a      	cmp	r2, r1
 8000ef2:	d907      	bls.n	8000f04 <__aeabi_ddiv+0x2f4>
 8000ef4:	1989      	adds	r1, r1, r6
 8000ef6:	3d01      	subs	r5, #1
 8000ef8:	428e      	cmp	r6, r1
 8000efa:	d803      	bhi.n	8000f04 <__aeabi_ddiv+0x2f4>
 8000efc:	428a      	cmp	r2, r1
 8000efe:	d901      	bls.n	8000f04 <__aeabi_ddiv+0x2f4>
 8000f00:	1e85      	subs	r5, r0, #2
 8000f02:	1989      	adds	r1, r1, r6
 8000f04:	1a88      	subs	r0, r1, r2
 8000f06:	9901      	ldr	r1, [sp, #4]
 8000f08:	f7ff f984 	bl	8000214 <__aeabi_uidivmod>
 8000f0c:	0409      	lsls	r1, r1, #16
 8000f0e:	468c      	mov	ip, r1
 8000f10:	464a      	mov	r2, r9
 8000f12:	0421      	lsls	r1, r4, #16
 8000f14:	4664      	mov	r4, ip
 8000f16:	4342      	muls	r2, r0
 8000f18:	0c09      	lsrs	r1, r1, #16
 8000f1a:	0003      	movs	r3, r0
 8000f1c:	4321      	orrs	r1, r4
 8000f1e:	428a      	cmp	r2, r1
 8000f20:	d904      	bls.n	8000f2c <__aeabi_ddiv+0x31c>
 8000f22:	1989      	adds	r1, r1, r6
 8000f24:	3b01      	subs	r3, #1
 8000f26:	428e      	cmp	r6, r1
 8000f28:	d800      	bhi.n	8000f2c <__aeabi_ddiv+0x31c>
 8000f2a:	e0f1      	b.n	8001110 <__aeabi_ddiv+0x500>
 8000f2c:	042d      	lsls	r5, r5, #16
 8000f2e:	431d      	orrs	r5, r3
 8000f30:	46ab      	mov	fp, r5
 8000f32:	4643      	mov	r3, r8
 8000f34:	1a89      	subs	r1, r1, r2
 8000f36:	4642      	mov	r2, r8
 8000f38:	0c28      	lsrs	r0, r5, #16
 8000f3a:	0412      	lsls	r2, r2, #16
 8000f3c:	0c1d      	lsrs	r5, r3, #16
 8000f3e:	465b      	mov	r3, fp
 8000f40:	0c14      	lsrs	r4, r2, #16
 8000f42:	0022      	movs	r2, r4
 8000f44:	041b      	lsls	r3, r3, #16
 8000f46:	0c1b      	lsrs	r3, r3, #16
 8000f48:	435a      	muls	r2, r3
 8000f4a:	9403      	str	r4, [sp, #12]
 8000f4c:	436b      	muls	r3, r5
 8000f4e:	4344      	muls	r4, r0
 8000f50:	9502      	str	r5, [sp, #8]
 8000f52:	4368      	muls	r0, r5
 8000f54:	191b      	adds	r3, r3, r4
 8000f56:	0c15      	lsrs	r5, r2, #16
 8000f58:	18eb      	adds	r3, r5, r3
 8000f5a:	429c      	cmp	r4, r3
 8000f5c:	d903      	bls.n	8000f66 <__aeabi_ddiv+0x356>
 8000f5e:	2480      	movs	r4, #128	; 0x80
 8000f60:	0264      	lsls	r4, r4, #9
 8000f62:	46a4      	mov	ip, r4
 8000f64:	4460      	add	r0, ip
 8000f66:	0c1c      	lsrs	r4, r3, #16
 8000f68:	0415      	lsls	r5, r2, #16
 8000f6a:	041b      	lsls	r3, r3, #16
 8000f6c:	0c2d      	lsrs	r5, r5, #16
 8000f6e:	1820      	adds	r0, r4, r0
 8000f70:	195d      	adds	r5, r3, r5
 8000f72:	4281      	cmp	r1, r0
 8000f74:	d377      	bcc.n	8001066 <__aeabi_ddiv+0x456>
 8000f76:	d073      	beq.n	8001060 <__aeabi_ddiv+0x450>
 8000f78:	1a0c      	subs	r4, r1, r0
 8000f7a:	4aa2      	ldr	r2, [pc, #648]	; (8001204 <__aeabi_ddiv+0x5f4>)
 8000f7c:	1b7d      	subs	r5, r7, r5
 8000f7e:	42af      	cmp	r7, r5
 8000f80:	41bf      	sbcs	r7, r7
 8000f82:	4694      	mov	ip, r2
 8000f84:	9b00      	ldr	r3, [sp, #0]
 8000f86:	427f      	negs	r7, r7
 8000f88:	4463      	add	r3, ip
 8000f8a:	1be0      	subs	r0, r4, r7
 8000f8c:	001c      	movs	r4, r3
 8000f8e:	4286      	cmp	r6, r0
 8000f90:	d100      	bne.n	8000f94 <__aeabi_ddiv+0x384>
 8000f92:	e0db      	b.n	800114c <__aeabi_ddiv+0x53c>
 8000f94:	9901      	ldr	r1, [sp, #4]
 8000f96:	f7ff f93d 	bl	8000214 <__aeabi_uidivmod>
 8000f9a:	464a      	mov	r2, r9
 8000f9c:	4342      	muls	r2, r0
 8000f9e:	040b      	lsls	r3, r1, #16
 8000fa0:	0c29      	lsrs	r1, r5, #16
 8000fa2:	0007      	movs	r7, r0
 8000fa4:	4319      	orrs	r1, r3
 8000fa6:	428a      	cmp	r2, r1
 8000fa8:	d907      	bls.n	8000fba <__aeabi_ddiv+0x3aa>
 8000faa:	1989      	adds	r1, r1, r6
 8000fac:	3f01      	subs	r7, #1
 8000fae:	428e      	cmp	r6, r1
 8000fb0:	d803      	bhi.n	8000fba <__aeabi_ddiv+0x3aa>
 8000fb2:	428a      	cmp	r2, r1
 8000fb4:	d901      	bls.n	8000fba <__aeabi_ddiv+0x3aa>
 8000fb6:	1e87      	subs	r7, r0, #2
 8000fb8:	1989      	adds	r1, r1, r6
 8000fba:	1a88      	subs	r0, r1, r2
 8000fbc:	9901      	ldr	r1, [sp, #4]
 8000fbe:	f7ff f929 	bl	8000214 <__aeabi_uidivmod>
 8000fc2:	0409      	lsls	r1, r1, #16
 8000fc4:	464a      	mov	r2, r9
 8000fc6:	4689      	mov	r9, r1
 8000fc8:	0429      	lsls	r1, r5, #16
 8000fca:	464d      	mov	r5, r9
 8000fcc:	4342      	muls	r2, r0
 8000fce:	0c09      	lsrs	r1, r1, #16
 8000fd0:	0003      	movs	r3, r0
 8000fd2:	4329      	orrs	r1, r5
 8000fd4:	428a      	cmp	r2, r1
 8000fd6:	d907      	bls.n	8000fe8 <__aeabi_ddiv+0x3d8>
 8000fd8:	1989      	adds	r1, r1, r6
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	428e      	cmp	r6, r1
 8000fde:	d803      	bhi.n	8000fe8 <__aeabi_ddiv+0x3d8>
 8000fe0:	428a      	cmp	r2, r1
 8000fe2:	d901      	bls.n	8000fe8 <__aeabi_ddiv+0x3d8>
 8000fe4:	1e83      	subs	r3, r0, #2
 8000fe6:	1989      	adds	r1, r1, r6
 8000fe8:	043f      	lsls	r7, r7, #16
 8000fea:	1a89      	subs	r1, r1, r2
 8000fec:	003a      	movs	r2, r7
 8000fee:	9f03      	ldr	r7, [sp, #12]
 8000ff0:	431a      	orrs	r2, r3
 8000ff2:	0038      	movs	r0, r7
 8000ff4:	0413      	lsls	r3, r2, #16
 8000ff6:	0c1b      	lsrs	r3, r3, #16
 8000ff8:	4358      	muls	r0, r3
 8000ffa:	4681      	mov	r9, r0
 8000ffc:	9802      	ldr	r0, [sp, #8]
 8000ffe:	0c15      	lsrs	r5, r2, #16
 8001000:	436f      	muls	r7, r5
 8001002:	4343      	muls	r3, r0
 8001004:	4345      	muls	r5, r0
 8001006:	4648      	mov	r0, r9
 8001008:	0c00      	lsrs	r0, r0, #16
 800100a:	4684      	mov	ip, r0
 800100c:	19db      	adds	r3, r3, r7
 800100e:	4463      	add	r3, ip
 8001010:	429f      	cmp	r7, r3
 8001012:	d903      	bls.n	800101c <__aeabi_ddiv+0x40c>
 8001014:	2080      	movs	r0, #128	; 0x80
 8001016:	0240      	lsls	r0, r0, #9
 8001018:	4684      	mov	ip, r0
 800101a:	4465      	add	r5, ip
 800101c:	4648      	mov	r0, r9
 800101e:	0c1f      	lsrs	r7, r3, #16
 8001020:	0400      	lsls	r0, r0, #16
 8001022:	041b      	lsls	r3, r3, #16
 8001024:	0c00      	lsrs	r0, r0, #16
 8001026:	197d      	adds	r5, r7, r5
 8001028:	1818      	adds	r0, r3, r0
 800102a:	42a9      	cmp	r1, r5
 800102c:	d200      	bcs.n	8001030 <__aeabi_ddiv+0x420>
 800102e:	e084      	b.n	800113a <__aeabi_ddiv+0x52a>
 8001030:	d100      	bne.n	8001034 <__aeabi_ddiv+0x424>
 8001032:	e07f      	b.n	8001134 <__aeabi_ddiv+0x524>
 8001034:	2301      	movs	r3, #1
 8001036:	431a      	orrs	r2, r3
 8001038:	e657      	b.n	8000cea <__aeabi_ddiv+0xda>
 800103a:	2380      	movs	r3, #128	; 0x80
 800103c:	464a      	mov	r2, r9
 800103e:	031b      	lsls	r3, r3, #12
 8001040:	4313      	orrs	r3, r2
 8001042:	031b      	lsls	r3, r3, #12
 8001044:	0b1b      	lsrs	r3, r3, #12
 8001046:	46aa      	mov	sl, r5
 8001048:	4a6f      	ldr	r2, [pc, #444]	; (8001208 <__aeabi_ddiv+0x5f8>)
 800104a:	e66f      	b.n	8000d2c <__aeabi_ddiv+0x11c>
 800104c:	42ba      	cmp	r2, r7
 800104e:	d900      	bls.n	8001052 <__aeabi_ddiv+0x442>
 8001050:	e735      	b.n	8000ebe <__aeabi_ddiv+0x2ae>
 8001052:	464b      	mov	r3, r9
 8001054:	07dc      	lsls	r4, r3, #31
 8001056:	0858      	lsrs	r0, r3, #1
 8001058:	087b      	lsrs	r3, r7, #1
 800105a:	431c      	orrs	r4, r3
 800105c:	07ff      	lsls	r7, r7, #31
 800105e:	e734      	b.n	8000eca <__aeabi_ddiv+0x2ba>
 8001060:	2400      	movs	r4, #0
 8001062:	42af      	cmp	r7, r5
 8001064:	d289      	bcs.n	8000f7a <__aeabi_ddiv+0x36a>
 8001066:	4447      	add	r7, r8
 8001068:	4547      	cmp	r7, r8
 800106a:	41a4      	sbcs	r4, r4
 800106c:	465b      	mov	r3, fp
 800106e:	4264      	negs	r4, r4
 8001070:	19a4      	adds	r4, r4, r6
 8001072:	1864      	adds	r4, r4, r1
 8001074:	3b01      	subs	r3, #1
 8001076:	42a6      	cmp	r6, r4
 8001078:	d21e      	bcs.n	80010b8 <__aeabi_ddiv+0x4a8>
 800107a:	42a0      	cmp	r0, r4
 800107c:	d86d      	bhi.n	800115a <__aeabi_ddiv+0x54a>
 800107e:	d100      	bne.n	8001082 <__aeabi_ddiv+0x472>
 8001080:	e0b6      	b.n	80011f0 <__aeabi_ddiv+0x5e0>
 8001082:	1a24      	subs	r4, r4, r0
 8001084:	469b      	mov	fp, r3
 8001086:	e778      	b.n	8000f7a <__aeabi_ddiv+0x36a>
 8001088:	0003      	movs	r3, r0
 800108a:	465a      	mov	r2, fp
 800108c:	3b28      	subs	r3, #40	; 0x28
 800108e:	409a      	lsls	r2, r3
 8001090:	2700      	movs	r7, #0
 8001092:	4691      	mov	r9, r2
 8001094:	e688      	b.n	8000da8 <__aeabi_ddiv+0x198>
 8001096:	4658      	mov	r0, fp
 8001098:	f000 fbec 	bl	8001874 <__clzsi2>
 800109c:	3020      	adds	r0, #32
 800109e:	e672      	b.n	8000d86 <__aeabi_ddiv+0x176>
 80010a0:	0003      	movs	r3, r0
 80010a2:	4652      	mov	r2, sl
 80010a4:	3b28      	subs	r3, #40	; 0x28
 80010a6:	409a      	lsls	r2, r3
 80010a8:	4693      	mov	fp, r2
 80010aa:	2200      	movs	r2, #0
 80010ac:	e6b4      	b.n	8000e18 <__aeabi_ddiv+0x208>
 80010ae:	4650      	mov	r0, sl
 80010b0:	f000 fbe0 	bl	8001874 <__clzsi2>
 80010b4:	3020      	adds	r0, #32
 80010b6:	e69a      	b.n	8000dee <__aeabi_ddiv+0x1de>
 80010b8:	42a6      	cmp	r6, r4
 80010ba:	d1e2      	bne.n	8001082 <__aeabi_ddiv+0x472>
 80010bc:	45b8      	cmp	r8, r7
 80010be:	d9dc      	bls.n	800107a <__aeabi_ddiv+0x46a>
 80010c0:	1a34      	subs	r4, r6, r0
 80010c2:	469b      	mov	fp, r3
 80010c4:	e759      	b.n	8000f7a <__aeabi_ddiv+0x36a>
 80010c6:	2b1f      	cmp	r3, #31
 80010c8:	dc65      	bgt.n	8001196 <__aeabi_ddiv+0x586>
 80010ca:	4c50      	ldr	r4, [pc, #320]	; (800120c <__aeabi_ddiv+0x5fc>)
 80010cc:	9900      	ldr	r1, [sp, #0]
 80010ce:	46a4      	mov	ip, r4
 80010d0:	465c      	mov	r4, fp
 80010d2:	4461      	add	r1, ip
 80010d4:	0008      	movs	r0, r1
 80010d6:	408c      	lsls	r4, r1
 80010d8:	0011      	movs	r1, r2
 80010da:	4082      	lsls	r2, r0
 80010dc:	40d9      	lsrs	r1, r3
 80010de:	1e50      	subs	r0, r2, #1
 80010e0:	4182      	sbcs	r2, r0
 80010e2:	430c      	orrs	r4, r1
 80010e4:	4314      	orrs	r4, r2
 80010e6:	465a      	mov	r2, fp
 80010e8:	40da      	lsrs	r2, r3
 80010ea:	0013      	movs	r3, r2
 80010ec:	0762      	lsls	r2, r4, #29
 80010ee:	d009      	beq.n	8001104 <__aeabi_ddiv+0x4f4>
 80010f0:	220f      	movs	r2, #15
 80010f2:	4022      	ands	r2, r4
 80010f4:	2a04      	cmp	r2, #4
 80010f6:	d005      	beq.n	8001104 <__aeabi_ddiv+0x4f4>
 80010f8:	0022      	movs	r2, r4
 80010fa:	1d14      	adds	r4, r2, #4
 80010fc:	4294      	cmp	r4, r2
 80010fe:	4189      	sbcs	r1, r1
 8001100:	4249      	negs	r1, r1
 8001102:	185b      	adds	r3, r3, r1
 8001104:	021a      	lsls	r2, r3, #8
 8001106:	d562      	bpl.n	80011ce <__aeabi_ddiv+0x5be>
 8001108:	2201      	movs	r2, #1
 800110a:	2300      	movs	r3, #0
 800110c:	2700      	movs	r7, #0
 800110e:	e60d      	b.n	8000d2c <__aeabi_ddiv+0x11c>
 8001110:	428a      	cmp	r2, r1
 8001112:	d800      	bhi.n	8001116 <__aeabi_ddiv+0x506>
 8001114:	e70a      	b.n	8000f2c <__aeabi_ddiv+0x31c>
 8001116:	1e83      	subs	r3, r0, #2
 8001118:	1989      	adds	r1, r1, r6
 800111a:	e707      	b.n	8000f2c <__aeabi_ddiv+0x31c>
 800111c:	230f      	movs	r3, #15
 800111e:	4013      	ands	r3, r2
 8001120:	2b04      	cmp	r3, #4
 8001122:	d100      	bne.n	8001126 <__aeabi_ddiv+0x516>
 8001124:	e5e6      	b.n	8000cf4 <__aeabi_ddiv+0xe4>
 8001126:	1d17      	adds	r7, r2, #4
 8001128:	4297      	cmp	r7, r2
 800112a:	4192      	sbcs	r2, r2
 800112c:	4253      	negs	r3, r2
 800112e:	449b      	add	fp, r3
 8001130:	08fa      	lsrs	r2, r7, #3
 8001132:	e5e0      	b.n	8000cf6 <__aeabi_ddiv+0xe6>
 8001134:	2800      	cmp	r0, #0
 8001136:	d100      	bne.n	800113a <__aeabi_ddiv+0x52a>
 8001138:	e5d7      	b.n	8000cea <__aeabi_ddiv+0xda>
 800113a:	1871      	adds	r1, r6, r1
 800113c:	1e53      	subs	r3, r2, #1
 800113e:	42b1      	cmp	r1, r6
 8001140:	d327      	bcc.n	8001192 <__aeabi_ddiv+0x582>
 8001142:	42a9      	cmp	r1, r5
 8001144:	d315      	bcc.n	8001172 <__aeabi_ddiv+0x562>
 8001146:	d058      	beq.n	80011fa <__aeabi_ddiv+0x5ea>
 8001148:	001a      	movs	r2, r3
 800114a:	e773      	b.n	8001034 <__aeabi_ddiv+0x424>
 800114c:	2b00      	cmp	r3, #0
 800114e:	dc00      	bgt.n	8001152 <__aeabi_ddiv+0x542>
 8001150:	e604      	b.n	8000d5c <__aeabi_ddiv+0x14c>
 8001152:	2301      	movs	r3, #1
 8001154:	2200      	movs	r2, #0
 8001156:	449b      	add	fp, r3
 8001158:	e5cd      	b.n	8000cf6 <__aeabi_ddiv+0xe6>
 800115a:	2302      	movs	r3, #2
 800115c:	4447      	add	r7, r8
 800115e:	4547      	cmp	r7, r8
 8001160:	4189      	sbcs	r1, r1
 8001162:	425b      	negs	r3, r3
 8001164:	469c      	mov	ip, r3
 8001166:	4249      	negs	r1, r1
 8001168:	1989      	adds	r1, r1, r6
 800116a:	190c      	adds	r4, r1, r4
 800116c:	44e3      	add	fp, ip
 800116e:	1a24      	subs	r4, r4, r0
 8001170:	e703      	b.n	8000f7a <__aeabi_ddiv+0x36a>
 8001172:	4643      	mov	r3, r8
 8001174:	005f      	lsls	r7, r3, #1
 8001176:	4547      	cmp	r7, r8
 8001178:	419b      	sbcs	r3, r3
 800117a:	46b8      	mov	r8, r7
 800117c:	425b      	negs	r3, r3
 800117e:	199e      	adds	r6, r3, r6
 8001180:	3a02      	subs	r2, #2
 8001182:	1989      	adds	r1, r1, r6
 8001184:	42a9      	cmp	r1, r5
 8001186:	d000      	beq.n	800118a <__aeabi_ddiv+0x57a>
 8001188:	e754      	b.n	8001034 <__aeabi_ddiv+0x424>
 800118a:	4540      	cmp	r0, r8
 800118c:	d000      	beq.n	8001190 <__aeabi_ddiv+0x580>
 800118e:	e751      	b.n	8001034 <__aeabi_ddiv+0x424>
 8001190:	e5ab      	b.n	8000cea <__aeabi_ddiv+0xda>
 8001192:	001a      	movs	r2, r3
 8001194:	e7f6      	b.n	8001184 <__aeabi_ddiv+0x574>
 8001196:	211f      	movs	r1, #31
 8001198:	465f      	mov	r7, fp
 800119a:	4249      	negs	r1, r1
 800119c:	1b0c      	subs	r4, r1, r4
 800119e:	40e7      	lsrs	r7, r4
 80011a0:	2b20      	cmp	r3, #32
 80011a2:	d007      	beq.n	80011b4 <__aeabi_ddiv+0x5a4>
 80011a4:	491a      	ldr	r1, [pc, #104]	; (8001210 <__aeabi_ddiv+0x600>)
 80011a6:	9b00      	ldr	r3, [sp, #0]
 80011a8:	468c      	mov	ip, r1
 80011aa:	4463      	add	r3, ip
 80011ac:	0018      	movs	r0, r3
 80011ae:	465b      	mov	r3, fp
 80011b0:	4083      	lsls	r3, r0
 80011b2:	431a      	orrs	r2, r3
 80011b4:	1e50      	subs	r0, r2, #1
 80011b6:	4182      	sbcs	r2, r0
 80011b8:	433a      	orrs	r2, r7
 80011ba:	2707      	movs	r7, #7
 80011bc:	2300      	movs	r3, #0
 80011be:	4017      	ands	r7, r2
 80011c0:	d009      	beq.n	80011d6 <__aeabi_ddiv+0x5c6>
 80011c2:	210f      	movs	r1, #15
 80011c4:	2300      	movs	r3, #0
 80011c6:	4011      	ands	r1, r2
 80011c8:	0014      	movs	r4, r2
 80011ca:	2904      	cmp	r1, #4
 80011cc:	d195      	bne.n	80010fa <__aeabi_ddiv+0x4ea>
 80011ce:	0022      	movs	r2, r4
 80011d0:	075f      	lsls	r7, r3, #29
 80011d2:	025b      	lsls	r3, r3, #9
 80011d4:	0b1b      	lsrs	r3, r3, #12
 80011d6:	08d2      	lsrs	r2, r2, #3
 80011d8:	4317      	orrs	r7, r2
 80011da:	2200      	movs	r2, #0
 80011dc:	e5a6      	b.n	8000d2c <__aeabi_ddiv+0x11c>
 80011de:	2380      	movs	r3, #128	; 0x80
 80011e0:	4659      	mov	r1, fp
 80011e2:	031b      	lsls	r3, r3, #12
 80011e4:	430b      	orrs	r3, r1
 80011e6:	031b      	lsls	r3, r3, #12
 80011e8:	0017      	movs	r7, r2
 80011ea:	0b1b      	lsrs	r3, r3, #12
 80011ec:	4a06      	ldr	r2, [pc, #24]	; (8001208 <__aeabi_ddiv+0x5f8>)
 80011ee:	e59d      	b.n	8000d2c <__aeabi_ddiv+0x11c>
 80011f0:	42bd      	cmp	r5, r7
 80011f2:	d8b2      	bhi.n	800115a <__aeabi_ddiv+0x54a>
 80011f4:	469b      	mov	fp, r3
 80011f6:	2400      	movs	r4, #0
 80011f8:	e6bf      	b.n	8000f7a <__aeabi_ddiv+0x36a>
 80011fa:	4580      	cmp	r8, r0
 80011fc:	d3b9      	bcc.n	8001172 <__aeabi_ddiv+0x562>
 80011fe:	001a      	movs	r2, r3
 8001200:	e7c3      	b.n	800118a <__aeabi_ddiv+0x57a>
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	000003ff 	.word	0x000003ff
 8001208:	000007ff 	.word	0x000007ff
 800120c:	0000041e 	.word	0x0000041e
 8001210:	0000043e 	.word	0x0000043e

08001214 <__aeabi_dmul>:
 8001214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001216:	4657      	mov	r7, sl
 8001218:	46de      	mov	lr, fp
 800121a:	464e      	mov	r6, r9
 800121c:	4645      	mov	r5, r8
 800121e:	b5e0      	push	{r5, r6, r7, lr}
 8001220:	4683      	mov	fp, r0
 8001222:	0006      	movs	r6, r0
 8001224:	030f      	lsls	r7, r1, #12
 8001226:	0048      	lsls	r0, r1, #1
 8001228:	b087      	sub	sp, #28
 800122a:	4692      	mov	sl, r2
 800122c:	001d      	movs	r5, r3
 800122e:	0b3f      	lsrs	r7, r7, #12
 8001230:	0d40      	lsrs	r0, r0, #21
 8001232:	0fcc      	lsrs	r4, r1, #31
 8001234:	2800      	cmp	r0, #0
 8001236:	d100      	bne.n	800123a <__aeabi_dmul+0x26>
 8001238:	e06f      	b.n	800131a <__aeabi_dmul+0x106>
 800123a:	4bde      	ldr	r3, [pc, #888]	; (80015b4 <__aeabi_dmul+0x3a0>)
 800123c:	4298      	cmp	r0, r3
 800123e:	d038      	beq.n	80012b2 <__aeabi_dmul+0x9e>
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	00ff      	lsls	r7, r7, #3
 8001244:	041b      	lsls	r3, r3, #16
 8001246:	431f      	orrs	r7, r3
 8001248:	0f73      	lsrs	r3, r6, #29
 800124a:	433b      	orrs	r3, r7
 800124c:	9301      	str	r3, [sp, #4]
 800124e:	4bda      	ldr	r3, [pc, #872]	; (80015b8 <__aeabi_dmul+0x3a4>)
 8001250:	2700      	movs	r7, #0
 8001252:	4699      	mov	r9, r3
 8001254:	2300      	movs	r3, #0
 8001256:	469b      	mov	fp, r3
 8001258:	00f6      	lsls	r6, r6, #3
 800125a:	4481      	add	r9, r0
 800125c:	032b      	lsls	r3, r5, #12
 800125e:	0069      	lsls	r1, r5, #1
 8001260:	0b1b      	lsrs	r3, r3, #12
 8001262:	4652      	mov	r2, sl
 8001264:	4698      	mov	r8, r3
 8001266:	0d49      	lsrs	r1, r1, #21
 8001268:	0fed      	lsrs	r5, r5, #31
 800126a:	2900      	cmp	r1, #0
 800126c:	d100      	bne.n	8001270 <__aeabi_dmul+0x5c>
 800126e:	e085      	b.n	800137c <__aeabi_dmul+0x168>
 8001270:	4bd0      	ldr	r3, [pc, #832]	; (80015b4 <__aeabi_dmul+0x3a0>)
 8001272:	4299      	cmp	r1, r3
 8001274:	d100      	bne.n	8001278 <__aeabi_dmul+0x64>
 8001276:	e073      	b.n	8001360 <__aeabi_dmul+0x14c>
 8001278:	4643      	mov	r3, r8
 800127a:	00da      	lsls	r2, r3, #3
 800127c:	2380      	movs	r3, #128	; 0x80
 800127e:	041b      	lsls	r3, r3, #16
 8001280:	4313      	orrs	r3, r2
 8001282:	4652      	mov	r2, sl
 8001284:	48cc      	ldr	r0, [pc, #816]	; (80015b8 <__aeabi_dmul+0x3a4>)
 8001286:	0f52      	lsrs	r2, r2, #29
 8001288:	4684      	mov	ip, r0
 800128a:	4313      	orrs	r3, r2
 800128c:	4652      	mov	r2, sl
 800128e:	2000      	movs	r0, #0
 8001290:	4461      	add	r1, ip
 8001292:	00d2      	lsls	r2, r2, #3
 8001294:	4489      	add	r9, r1
 8001296:	0021      	movs	r1, r4
 8001298:	4069      	eors	r1, r5
 800129a:	9100      	str	r1, [sp, #0]
 800129c:	468c      	mov	ip, r1
 800129e:	2101      	movs	r1, #1
 80012a0:	4449      	add	r1, r9
 80012a2:	468a      	mov	sl, r1
 80012a4:	2f0f      	cmp	r7, #15
 80012a6:	d900      	bls.n	80012aa <__aeabi_dmul+0x96>
 80012a8:	e090      	b.n	80013cc <__aeabi_dmul+0x1b8>
 80012aa:	49c4      	ldr	r1, [pc, #784]	; (80015bc <__aeabi_dmul+0x3a8>)
 80012ac:	00bf      	lsls	r7, r7, #2
 80012ae:	59cf      	ldr	r7, [r1, r7]
 80012b0:	46bf      	mov	pc, r7
 80012b2:	465b      	mov	r3, fp
 80012b4:	433b      	orrs	r3, r7
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	d000      	beq.n	80012bc <__aeabi_dmul+0xa8>
 80012ba:	e16a      	b.n	8001592 <__aeabi_dmul+0x37e>
 80012bc:	2302      	movs	r3, #2
 80012be:	2708      	movs	r7, #8
 80012c0:	2600      	movs	r6, #0
 80012c2:	4681      	mov	r9, r0
 80012c4:	469b      	mov	fp, r3
 80012c6:	e7c9      	b.n	800125c <__aeabi_dmul+0x48>
 80012c8:	0032      	movs	r2, r6
 80012ca:	4658      	mov	r0, fp
 80012cc:	9b01      	ldr	r3, [sp, #4]
 80012ce:	4661      	mov	r1, ip
 80012d0:	9100      	str	r1, [sp, #0]
 80012d2:	2802      	cmp	r0, #2
 80012d4:	d100      	bne.n	80012d8 <__aeabi_dmul+0xc4>
 80012d6:	e075      	b.n	80013c4 <__aeabi_dmul+0x1b0>
 80012d8:	2803      	cmp	r0, #3
 80012da:	d100      	bne.n	80012de <__aeabi_dmul+0xca>
 80012dc:	e1fe      	b.n	80016dc <__aeabi_dmul+0x4c8>
 80012de:	2801      	cmp	r0, #1
 80012e0:	d000      	beq.n	80012e4 <__aeabi_dmul+0xd0>
 80012e2:	e12c      	b.n	800153e <__aeabi_dmul+0x32a>
 80012e4:	2300      	movs	r3, #0
 80012e6:	2700      	movs	r7, #0
 80012e8:	2600      	movs	r6, #0
 80012ea:	2500      	movs	r5, #0
 80012ec:	033f      	lsls	r7, r7, #12
 80012ee:	0d2a      	lsrs	r2, r5, #20
 80012f0:	0b3f      	lsrs	r7, r7, #12
 80012f2:	48b3      	ldr	r0, [pc, #716]	; (80015c0 <__aeabi_dmul+0x3ac>)
 80012f4:	0512      	lsls	r2, r2, #20
 80012f6:	433a      	orrs	r2, r7
 80012f8:	4002      	ands	r2, r0
 80012fa:	051b      	lsls	r3, r3, #20
 80012fc:	4313      	orrs	r3, r2
 80012fe:	9a00      	ldr	r2, [sp, #0]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	07d1      	lsls	r1, r2, #31
 8001304:	085b      	lsrs	r3, r3, #1
 8001306:	430b      	orrs	r3, r1
 8001308:	0030      	movs	r0, r6
 800130a:	0019      	movs	r1, r3
 800130c:	b007      	add	sp, #28
 800130e:	bc3c      	pop	{r2, r3, r4, r5}
 8001310:	4690      	mov	r8, r2
 8001312:	4699      	mov	r9, r3
 8001314:	46a2      	mov	sl, r4
 8001316:	46ab      	mov	fp, r5
 8001318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800131a:	465b      	mov	r3, fp
 800131c:	433b      	orrs	r3, r7
 800131e:	9301      	str	r3, [sp, #4]
 8001320:	d100      	bne.n	8001324 <__aeabi_dmul+0x110>
 8001322:	e12f      	b.n	8001584 <__aeabi_dmul+0x370>
 8001324:	2f00      	cmp	r7, #0
 8001326:	d100      	bne.n	800132a <__aeabi_dmul+0x116>
 8001328:	e1a5      	b.n	8001676 <__aeabi_dmul+0x462>
 800132a:	0038      	movs	r0, r7
 800132c:	f000 faa2 	bl	8001874 <__clzsi2>
 8001330:	0003      	movs	r3, r0
 8001332:	3b0b      	subs	r3, #11
 8001334:	2b1c      	cmp	r3, #28
 8001336:	dd00      	ble.n	800133a <__aeabi_dmul+0x126>
 8001338:	e196      	b.n	8001668 <__aeabi_dmul+0x454>
 800133a:	221d      	movs	r2, #29
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	465a      	mov	r2, fp
 8001340:	0001      	movs	r1, r0
 8001342:	40da      	lsrs	r2, r3
 8001344:	465e      	mov	r6, fp
 8001346:	3908      	subs	r1, #8
 8001348:	408f      	lsls	r7, r1
 800134a:	0013      	movs	r3, r2
 800134c:	408e      	lsls	r6, r1
 800134e:	433b      	orrs	r3, r7
 8001350:	9301      	str	r3, [sp, #4]
 8001352:	4b9c      	ldr	r3, [pc, #624]	; (80015c4 <__aeabi_dmul+0x3b0>)
 8001354:	2700      	movs	r7, #0
 8001356:	1a1b      	subs	r3, r3, r0
 8001358:	4699      	mov	r9, r3
 800135a:	2300      	movs	r3, #0
 800135c:	469b      	mov	fp, r3
 800135e:	e77d      	b.n	800125c <__aeabi_dmul+0x48>
 8001360:	4641      	mov	r1, r8
 8001362:	4653      	mov	r3, sl
 8001364:	430b      	orrs	r3, r1
 8001366:	4993      	ldr	r1, [pc, #588]	; (80015b4 <__aeabi_dmul+0x3a0>)
 8001368:	468c      	mov	ip, r1
 800136a:	44e1      	add	r9, ip
 800136c:	2b00      	cmp	r3, #0
 800136e:	d000      	beq.n	8001372 <__aeabi_dmul+0x15e>
 8001370:	e11a      	b.n	80015a8 <__aeabi_dmul+0x394>
 8001372:	2202      	movs	r2, #2
 8001374:	2002      	movs	r0, #2
 8001376:	4317      	orrs	r7, r2
 8001378:	2200      	movs	r2, #0
 800137a:	e78c      	b.n	8001296 <__aeabi_dmul+0x82>
 800137c:	4313      	orrs	r3, r2
 800137e:	d100      	bne.n	8001382 <__aeabi_dmul+0x16e>
 8001380:	e10d      	b.n	800159e <__aeabi_dmul+0x38a>
 8001382:	4643      	mov	r3, r8
 8001384:	2b00      	cmp	r3, #0
 8001386:	d100      	bne.n	800138a <__aeabi_dmul+0x176>
 8001388:	e181      	b.n	800168e <__aeabi_dmul+0x47a>
 800138a:	4640      	mov	r0, r8
 800138c:	f000 fa72 	bl	8001874 <__clzsi2>
 8001390:	0002      	movs	r2, r0
 8001392:	3a0b      	subs	r2, #11
 8001394:	2a1c      	cmp	r2, #28
 8001396:	dd00      	ble.n	800139a <__aeabi_dmul+0x186>
 8001398:	e172      	b.n	8001680 <__aeabi_dmul+0x46c>
 800139a:	0001      	movs	r1, r0
 800139c:	4643      	mov	r3, r8
 800139e:	3908      	subs	r1, #8
 80013a0:	408b      	lsls	r3, r1
 80013a2:	4698      	mov	r8, r3
 80013a4:	231d      	movs	r3, #29
 80013a6:	1a9a      	subs	r2, r3, r2
 80013a8:	4653      	mov	r3, sl
 80013aa:	40d3      	lsrs	r3, r2
 80013ac:	001a      	movs	r2, r3
 80013ae:	4643      	mov	r3, r8
 80013b0:	4313      	orrs	r3, r2
 80013b2:	4652      	mov	r2, sl
 80013b4:	408a      	lsls	r2, r1
 80013b6:	4649      	mov	r1, r9
 80013b8:	1a08      	subs	r0, r1, r0
 80013ba:	4982      	ldr	r1, [pc, #520]	; (80015c4 <__aeabi_dmul+0x3b0>)
 80013bc:	4689      	mov	r9, r1
 80013be:	4481      	add	r9, r0
 80013c0:	2000      	movs	r0, #0
 80013c2:	e768      	b.n	8001296 <__aeabi_dmul+0x82>
 80013c4:	4b7b      	ldr	r3, [pc, #492]	; (80015b4 <__aeabi_dmul+0x3a0>)
 80013c6:	2700      	movs	r7, #0
 80013c8:	2600      	movs	r6, #0
 80013ca:	e78e      	b.n	80012ea <__aeabi_dmul+0xd6>
 80013cc:	0c14      	lsrs	r4, r2, #16
 80013ce:	0412      	lsls	r2, r2, #16
 80013d0:	0c12      	lsrs	r2, r2, #16
 80013d2:	0011      	movs	r1, r2
 80013d4:	0c37      	lsrs	r7, r6, #16
 80013d6:	0436      	lsls	r6, r6, #16
 80013d8:	0c35      	lsrs	r5, r6, #16
 80013da:	4379      	muls	r1, r7
 80013dc:	0028      	movs	r0, r5
 80013de:	468c      	mov	ip, r1
 80013e0:	002e      	movs	r6, r5
 80013e2:	4360      	muls	r0, r4
 80013e4:	4460      	add	r0, ip
 80013e6:	4683      	mov	fp, r0
 80013e8:	4356      	muls	r6, r2
 80013ea:	0021      	movs	r1, r4
 80013ec:	0c30      	lsrs	r0, r6, #16
 80013ee:	4680      	mov	r8, r0
 80013f0:	4658      	mov	r0, fp
 80013f2:	4379      	muls	r1, r7
 80013f4:	4440      	add	r0, r8
 80013f6:	9102      	str	r1, [sp, #8]
 80013f8:	4584      	cmp	ip, r0
 80013fa:	d906      	bls.n	800140a <__aeabi_dmul+0x1f6>
 80013fc:	4688      	mov	r8, r1
 80013fe:	2180      	movs	r1, #128	; 0x80
 8001400:	0249      	lsls	r1, r1, #9
 8001402:	468c      	mov	ip, r1
 8001404:	44e0      	add	r8, ip
 8001406:	4641      	mov	r1, r8
 8001408:	9102      	str	r1, [sp, #8]
 800140a:	0436      	lsls	r6, r6, #16
 800140c:	0c01      	lsrs	r1, r0, #16
 800140e:	0c36      	lsrs	r6, r6, #16
 8001410:	0400      	lsls	r0, r0, #16
 8001412:	468b      	mov	fp, r1
 8001414:	1981      	adds	r1, r0, r6
 8001416:	0c1e      	lsrs	r6, r3, #16
 8001418:	041b      	lsls	r3, r3, #16
 800141a:	0c1b      	lsrs	r3, r3, #16
 800141c:	9103      	str	r1, [sp, #12]
 800141e:	0019      	movs	r1, r3
 8001420:	4379      	muls	r1, r7
 8001422:	468c      	mov	ip, r1
 8001424:	0028      	movs	r0, r5
 8001426:	4375      	muls	r5, r6
 8001428:	4465      	add	r5, ip
 800142a:	46a8      	mov	r8, r5
 800142c:	4358      	muls	r0, r3
 800142e:	0c05      	lsrs	r5, r0, #16
 8001430:	4445      	add	r5, r8
 8001432:	4377      	muls	r7, r6
 8001434:	42a9      	cmp	r1, r5
 8001436:	d903      	bls.n	8001440 <__aeabi_dmul+0x22c>
 8001438:	2180      	movs	r1, #128	; 0x80
 800143a:	0249      	lsls	r1, r1, #9
 800143c:	468c      	mov	ip, r1
 800143e:	4467      	add	r7, ip
 8001440:	0c29      	lsrs	r1, r5, #16
 8001442:	468c      	mov	ip, r1
 8001444:	0039      	movs	r1, r7
 8001446:	0400      	lsls	r0, r0, #16
 8001448:	0c00      	lsrs	r0, r0, #16
 800144a:	042d      	lsls	r5, r5, #16
 800144c:	182d      	adds	r5, r5, r0
 800144e:	4461      	add	r1, ip
 8001450:	44ab      	add	fp, r5
 8001452:	9105      	str	r1, [sp, #20]
 8001454:	4659      	mov	r1, fp
 8001456:	9104      	str	r1, [sp, #16]
 8001458:	9901      	ldr	r1, [sp, #4]
 800145a:	040f      	lsls	r7, r1, #16
 800145c:	0c3f      	lsrs	r7, r7, #16
 800145e:	0c08      	lsrs	r0, r1, #16
 8001460:	0039      	movs	r1, r7
 8001462:	4351      	muls	r1, r2
 8001464:	4342      	muls	r2, r0
 8001466:	4690      	mov	r8, r2
 8001468:	0002      	movs	r2, r0
 800146a:	468c      	mov	ip, r1
 800146c:	0c09      	lsrs	r1, r1, #16
 800146e:	468b      	mov	fp, r1
 8001470:	4362      	muls	r2, r4
 8001472:	437c      	muls	r4, r7
 8001474:	4444      	add	r4, r8
 8001476:	445c      	add	r4, fp
 8001478:	45a0      	cmp	r8, r4
 800147a:	d903      	bls.n	8001484 <__aeabi_dmul+0x270>
 800147c:	2180      	movs	r1, #128	; 0x80
 800147e:	0249      	lsls	r1, r1, #9
 8001480:	4688      	mov	r8, r1
 8001482:	4442      	add	r2, r8
 8001484:	0c21      	lsrs	r1, r4, #16
 8001486:	4688      	mov	r8, r1
 8001488:	4661      	mov	r1, ip
 800148a:	0409      	lsls	r1, r1, #16
 800148c:	0c09      	lsrs	r1, r1, #16
 800148e:	468c      	mov	ip, r1
 8001490:	0039      	movs	r1, r7
 8001492:	4359      	muls	r1, r3
 8001494:	4343      	muls	r3, r0
 8001496:	4370      	muls	r0, r6
 8001498:	437e      	muls	r6, r7
 800149a:	0c0f      	lsrs	r7, r1, #16
 800149c:	18f6      	adds	r6, r6, r3
 800149e:	0424      	lsls	r4, r4, #16
 80014a0:	19be      	adds	r6, r7, r6
 80014a2:	4464      	add	r4, ip
 80014a4:	4442      	add	r2, r8
 80014a6:	468c      	mov	ip, r1
 80014a8:	42b3      	cmp	r3, r6
 80014aa:	d903      	bls.n	80014b4 <__aeabi_dmul+0x2a0>
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	025b      	lsls	r3, r3, #9
 80014b0:	4698      	mov	r8, r3
 80014b2:	4440      	add	r0, r8
 80014b4:	9b02      	ldr	r3, [sp, #8]
 80014b6:	4661      	mov	r1, ip
 80014b8:	4698      	mov	r8, r3
 80014ba:	9b04      	ldr	r3, [sp, #16]
 80014bc:	0437      	lsls	r7, r6, #16
 80014be:	4443      	add	r3, r8
 80014c0:	469b      	mov	fp, r3
 80014c2:	45ab      	cmp	fp, r5
 80014c4:	41ad      	sbcs	r5, r5
 80014c6:	426b      	negs	r3, r5
 80014c8:	040d      	lsls	r5, r1, #16
 80014ca:	9905      	ldr	r1, [sp, #20]
 80014cc:	0c2d      	lsrs	r5, r5, #16
 80014ce:	468c      	mov	ip, r1
 80014d0:	197f      	adds	r7, r7, r5
 80014d2:	4467      	add	r7, ip
 80014d4:	18fd      	adds	r5, r7, r3
 80014d6:	46a8      	mov	r8, r5
 80014d8:	465d      	mov	r5, fp
 80014da:	192d      	adds	r5, r5, r4
 80014dc:	42a5      	cmp	r5, r4
 80014de:	41a4      	sbcs	r4, r4
 80014e0:	4693      	mov	fp, r2
 80014e2:	4264      	negs	r4, r4
 80014e4:	46a4      	mov	ip, r4
 80014e6:	44c3      	add	fp, r8
 80014e8:	44dc      	add	ip, fp
 80014ea:	428f      	cmp	r7, r1
 80014ec:	41bf      	sbcs	r7, r7
 80014ee:	4598      	cmp	r8, r3
 80014f0:	419b      	sbcs	r3, r3
 80014f2:	4593      	cmp	fp, r2
 80014f4:	4192      	sbcs	r2, r2
 80014f6:	45a4      	cmp	ip, r4
 80014f8:	41a4      	sbcs	r4, r4
 80014fa:	425b      	negs	r3, r3
 80014fc:	427f      	negs	r7, r7
 80014fe:	431f      	orrs	r7, r3
 8001500:	0c36      	lsrs	r6, r6, #16
 8001502:	4252      	negs	r2, r2
 8001504:	4264      	negs	r4, r4
 8001506:	19bf      	adds	r7, r7, r6
 8001508:	4322      	orrs	r2, r4
 800150a:	18bf      	adds	r7, r7, r2
 800150c:	4662      	mov	r2, ip
 800150e:	1838      	adds	r0, r7, r0
 8001510:	0243      	lsls	r3, r0, #9
 8001512:	0dd2      	lsrs	r2, r2, #23
 8001514:	9903      	ldr	r1, [sp, #12]
 8001516:	4313      	orrs	r3, r2
 8001518:	026a      	lsls	r2, r5, #9
 800151a:	430a      	orrs	r2, r1
 800151c:	1e50      	subs	r0, r2, #1
 800151e:	4182      	sbcs	r2, r0
 8001520:	4661      	mov	r1, ip
 8001522:	0ded      	lsrs	r5, r5, #23
 8001524:	432a      	orrs	r2, r5
 8001526:	024e      	lsls	r6, r1, #9
 8001528:	4332      	orrs	r2, r6
 800152a:	01d9      	lsls	r1, r3, #7
 800152c:	d400      	bmi.n	8001530 <__aeabi_dmul+0x31c>
 800152e:	e0b3      	b.n	8001698 <__aeabi_dmul+0x484>
 8001530:	2601      	movs	r6, #1
 8001532:	0850      	lsrs	r0, r2, #1
 8001534:	4032      	ands	r2, r6
 8001536:	4302      	orrs	r2, r0
 8001538:	07de      	lsls	r6, r3, #31
 800153a:	4332      	orrs	r2, r6
 800153c:	085b      	lsrs	r3, r3, #1
 800153e:	4c22      	ldr	r4, [pc, #136]	; (80015c8 <__aeabi_dmul+0x3b4>)
 8001540:	4454      	add	r4, sl
 8001542:	2c00      	cmp	r4, #0
 8001544:	dd62      	ble.n	800160c <__aeabi_dmul+0x3f8>
 8001546:	0751      	lsls	r1, r2, #29
 8001548:	d009      	beq.n	800155e <__aeabi_dmul+0x34a>
 800154a:	200f      	movs	r0, #15
 800154c:	4010      	ands	r0, r2
 800154e:	2804      	cmp	r0, #4
 8001550:	d005      	beq.n	800155e <__aeabi_dmul+0x34a>
 8001552:	1d10      	adds	r0, r2, #4
 8001554:	4290      	cmp	r0, r2
 8001556:	4192      	sbcs	r2, r2
 8001558:	4252      	negs	r2, r2
 800155a:	189b      	adds	r3, r3, r2
 800155c:	0002      	movs	r2, r0
 800155e:	01d9      	lsls	r1, r3, #7
 8001560:	d504      	bpl.n	800156c <__aeabi_dmul+0x358>
 8001562:	2480      	movs	r4, #128	; 0x80
 8001564:	4819      	ldr	r0, [pc, #100]	; (80015cc <__aeabi_dmul+0x3b8>)
 8001566:	00e4      	lsls	r4, r4, #3
 8001568:	4003      	ands	r3, r0
 800156a:	4454      	add	r4, sl
 800156c:	4818      	ldr	r0, [pc, #96]	; (80015d0 <__aeabi_dmul+0x3bc>)
 800156e:	4284      	cmp	r4, r0
 8001570:	dd00      	ble.n	8001574 <__aeabi_dmul+0x360>
 8001572:	e727      	b.n	80013c4 <__aeabi_dmul+0x1b0>
 8001574:	075e      	lsls	r6, r3, #29
 8001576:	025b      	lsls	r3, r3, #9
 8001578:	08d2      	lsrs	r2, r2, #3
 800157a:	0b1f      	lsrs	r7, r3, #12
 800157c:	0563      	lsls	r3, r4, #21
 800157e:	4316      	orrs	r6, r2
 8001580:	0d5b      	lsrs	r3, r3, #21
 8001582:	e6b2      	b.n	80012ea <__aeabi_dmul+0xd6>
 8001584:	2300      	movs	r3, #0
 8001586:	4699      	mov	r9, r3
 8001588:	3301      	adds	r3, #1
 800158a:	2704      	movs	r7, #4
 800158c:	2600      	movs	r6, #0
 800158e:	469b      	mov	fp, r3
 8001590:	e664      	b.n	800125c <__aeabi_dmul+0x48>
 8001592:	2303      	movs	r3, #3
 8001594:	9701      	str	r7, [sp, #4]
 8001596:	4681      	mov	r9, r0
 8001598:	270c      	movs	r7, #12
 800159a:	469b      	mov	fp, r3
 800159c:	e65e      	b.n	800125c <__aeabi_dmul+0x48>
 800159e:	2201      	movs	r2, #1
 80015a0:	2001      	movs	r0, #1
 80015a2:	4317      	orrs	r7, r2
 80015a4:	2200      	movs	r2, #0
 80015a6:	e676      	b.n	8001296 <__aeabi_dmul+0x82>
 80015a8:	2303      	movs	r3, #3
 80015aa:	2003      	movs	r0, #3
 80015ac:	431f      	orrs	r7, r3
 80015ae:	4643      	mov	r3, r8
 80015b0:	e671      	b.n	8001296 <__aeabi_dmul+0x82>
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	000007ff 	.word	0x000007ff
 80015b8:	fffffc01 	.word	0xfffffc01
 80015bc:	080088d0 	.word	0x080088d0
 80015c0:	800fffff 	.word	0x800fffff
 80015c4:	fffffc0d 	.word	0xfffffc0d
 80015c8:	000003ff 	.word	0x000003ff
 80015cc:	feffffff 	.word	0xfeffffff
 80015d0:	000007fe 	.word	0x000007fe
 80015d4:	2300      	movs	r3, #0
 80015d6:	2780      	movs	r7, #128	; 0x80
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	033f      	lsls	r7, r7, #12
 80015dc:	2600      	movs	r6, #0
 80015de:	4b43      	ldr	r3, [pc, #268]	; (80016ec <__aeabi_dmul+0x4d8>)
 80015e0:	e683      	b.n	80012ea <__aeabi_dmul+0xd6>
 80015e2:	9b01      	ldr	r3, [sp, #4]
 80015e4:	0032      	movs	r2, r6
 80015e6:	46a4      	mov	ip, r4
 80015e8:	4658      	mov	r0, fp
 80015ea:	e670      	b.n	80012ce <__aeabi_dmul+0xba>
 80015ec:	46ac      	mov	ip, r5
 80015ee:	e66e      	b.n	80012ce <__aeabi_dmul+0xba>
 80015f0:	2780      	movs	r7, #128	; 0x80
 80015f2:	9901      	ldr	r1, [sp, #4]
 80015f4:	033f      	lsls	r7, r7, #12
 80015f6:	4239      	tst	r1, r7
 80015f8:	d02d      	beq.n	8001656 <__aeabi_dmul+0x442>
 80015fa:	423b      	tst	r3, r7
 80015fc:	d12b      	bne.n	8001656 <__aeabi_dmul+0x442>
 80015fe:	431f      	orrs	r7, r3
 8001600:	033f      	lsls	r7, r7, #12
 8001602:	0b3f      	lsrs	r7, r7, #12
 8001604:	9500      	str	r5, [sp, #0]
 8001606:	0016      	movs	r6, r2
 8001608:	4b38      	ldr	r3, [pc, #224]	; (80016ec <__aeabi_dmul+0x4d8>)
 800160a:	e66e      	b.n	80012ea <__aeabi_dmul+0xd6>
 800160c:	2501      	movs	r5, #1
 800160e:	1b2d      	subs	r5, r5, r4
 8001610:	2d38      	cmp	r5, #56	; 0x38
 8001612:	dd00      	ble.n	8001616 <__aeabi_dmul+0x402>
 8001614:	e666      	b.n	80012e4 <__aeabi_dmul+0xd0>
 8001616:	2d1f      	cmp	r5, #31
 8001618:	dc40      	bgt.n	800169c <__aeabi_dmul+0x488>
 800161a:	4835      	ldr	r0, [pc, #212]	; (80016f0 <__aeabi_dmul+0x4dc>)
 800161c:	001c      	movs	r4, r3
 800161e:	4450      	add	r0, sl
 8001620:	0016      	movs	r6, r2
 8001622:	4082      	lsls	r2, r0
 8001624:	4084      	lsls	r4, r0
 8001626:	40ee      	lsrs	r6, r5
 8001628:	1e50      	subs	r0, r2, #1
 800162a:	4182      	sbcs	r2, r0
 800162c:	4334      	orrs	r4, r6
 800162e:	4314      	orrs	r4, r2
 8001630:	40eb      	lsrs	r3, r5
 8001632:	0762      	lsls	r2, r4, #29
 8001634:	d009      	beq.n	800164a <__aeabi_dmul+0x436>
 8001636:	220f      	movs	r2, #15
 8001638:	4022      	ands	r2, r4
 800163a:	2a04      	cmp	r2, #4
 800163c:	d005      	beq.n	800164a <__aeabi_dmul+0x436>
 800163e:	0022      	movs	r2, r4
 8001640:	1d14      	adds	r4, r2, #4
 8001642:	4294      	cmp	r4, r2
 8001644:	4180      	sbcs	r0, r0
 8001646:	4240      	negs	r0, r0
 8001648:	181b      	adds	r3, r3, r0
 800164a:	021a      	lsls	r2, r3, #8
 800164c:	d53e      	bpl.n	80016cc <__aeabi_dmul+0x4b8>
 800164e:	2301      	movs	r3, #1
 8001650:	2700      	movs	r7, #0
 8001652:	2600      	movs	r6, #0
 8001654:	e649      	b.n	80012ea <__aeabi_dmul+0xd6>
 8001656:	2780      	movs	r7, #128	; 0x80
 8001658:	9b01      	ldr	r3, [sp, #4]
 800165a:	033f      	lsls	r7, r7, #12
 800165c:	431f      	orrs	r7, r3
 800165e:	033f      	lsls	r7, r7, #12
 8001660:	0b3f      	lsrs	r7, r7, #12
 8001662:	9400      	str	r4, [sp, #0]
 8001664:	4b21      	ldr	r3, [pc, #132]	; (80016ec <__aeabi_dmul+0x4d8>)
 8001666:	e640      	b.n	80012ea <__aeabi_dmul+0xd6>
 8001668:	0003      	movs	r3, r0
 800166a:	465a      	mov	r2, fp
 800166c:	3b28      	subs	r3, #40	; 0x28
 800166e:	409a      	lsls	r2, r3
 8001670:	2600      	movs	r6, #0
 8001672:	9201      	str	r2, [sp, #4]
 8001674:	e66d      	b.n	8001352 <__aeabi_dmul+0x13e>
 8001676:	4658      	mov	r0, fp
 8001678:	f000 f8fc 	bl	8001874 <__clzsi2>
 800167c:	3020      	adds	r0, #32
 800167e:	e657      	b.n	8001330 <__aeabi_dmul+0x11c>
 8001680:	0003      	movs	r3, r0
 8001682:	4652      	mov	r2, sl
 8001684:	3b28      	subs	r3, #40	; 0x28
 8001686:	409a      	lsls	r2, r3
 8001688:	0013      	movs	r3, r2
 800168a:	2200      	movs	r2, #0
 800168c:	e693      	b.n	80013b6 <__aeabi_dmul+0x1a2>
 800168e:	4650      	mov	r0, sl
 8001690:	f000 f8f0 	bl	8001874 <__clzsi2>
 8001694:	3020      	adds	r0, #32
 8001696:	e67b      	b.n	8001390 <__aeabi_dmul+0x17c>
 8001698:	46ca      	mov	sl, r9
 800169a:	e750      	b.n	800153e <__aeabi_dmul+0x32a>
 800169c:	201f      	movs	r0, #31
 800169e:	001e      	movs	r6, r3
 80016a0:	4240      	negs	r0, r0
 80016a2:	1b04      	subs	r4, r0, r4
 80016a4:	40e6      	lsrs	r6, r4
 80016a6:	2d20      	cmp	r5, #32
 80016a8:	d003      	beq.n	80016b2 <__aeabi_dmul+0x49e>
 80016aa:	4c12      	ldr	r4, [pc, #72]	; (80016f4 <__aeabi_dmul+0x4e0>)
 80016ac:	4454      	add	r4, sl
 80016ae:	40a3      	lsls	r3, r4
 80016b0:	431a      	orrs	r2, r3
 80016b2:	1e50      	subs	r0, r2, #1
 80016b4:	4182      	sbcs	r2, r0
 80016b6:	4332      	orrs	r2, r6
 80016b8:	2607      	movs	r6, #7
 80016ba:	2700      	movs	r7, #0
 80016bc:	4016      	ands	r6, r2
 80016be:	d009      	beq.n	80016d4 <__aeabi_dmul+0x4c0>
 80016c0:	200f      	movs	r0, #15
 80016c2:	2300      	movs	r3, #0
 80016c4:	4010      	ands	r0, r2
 80016c6:	0014      	movs	r4, r2
 80016c8:	2804      	cmp	r0, #4
 80016ca:	d1b9      	bne.n	8001640 <__aeabi_dmul+0x42c>
 80016cc:	0022      	movs	r2, r4
 80016ce:	075e      	lsls	r6, r3, #29
 80016d0:	025b      	lsls	r3, r3, #9
 80016d2:	0b1f      	lsrs	r7, r3, #12
 80016d4:	08d2      	lsrs	r2, r2, #3
 80016d6:	4316      	orrs	r6, r2
 80016d8:	2300      	movs	r3, #0
 80016da:	e606      	b.n	80012ea <__aeabi_dmul+0xd6>
 80016dc:	2780      	movs	r7, #128	; 0x80
 80016de:	033f      	lsls	r7, r7, #12
 80016e0:	431f      	orrs	r7, r3
 80016e2:	033f      	lsls	r7, r7, #12
 80016e4:	0b3f      	lsrs	r7, r7, #12
 80016e6:	0016      	movs	r6, r2
 80016e8:	4b00      	ldr	r3, [pc, #0]	; (80016ec <__aeabi_dmul+0x4d8>)
 80016ea:	e5fe      	b.n	80012ea <__aeabi_dmul+0xd6>
 80016ec:	000007ff 	.word	0x000007ff
 80016f0:	0000041e 	.word	0x0000041e
 80016f4:	0000043e 	.word	0x0000043e

080016f8 <__aeabi_i2d>:
 80016f8:	b570      	push	{r4, r5, r6, lr}
 80016fa:	2800      	cmp	r0, #0
 80016fc:	d02d      	beq.n	800175a <__aeabi_i2d+0x62>
 80016fe:	17c3      	asrs	r3, r0, #31
 8001700:	18c5      	adds	r5, r0, r3
 8001702:	405d      	eors	r5, r3
 8001704:	0fc4      	lsrs	r4, r0, #31
 8001706:	0028      	movs	r0, r5
 8001708:	f000 f8b4 	bl	8001874 <__clzsi2>
 800170c:	4b15      	ldr	r3, [pc, #84]	; (8001764 <__aeabi_i2d+0x6c>)
 800170e:	1a1b      	subs	r3, r3, r0
 8001710:	055b      	lsls	r3, r3, #21
 8001712:	0d5b      	lsrs	r3, r3, #21
 8001714:	280a      	cmp	r0, #10
 8001716:	dd15      	ble.n	8001744 <__aeabi_i2d+0x4c>
 8001718:	380b      	subs	r0, #11
 800171a:	4085      	lsls	r5, r0
 800171c:	2200      	movs	r2, #0
 800171e:	032d      	lsls	r5, r5, #12
 8001720:	0b2d      	lsrs	r5, r5, #12
 8001722:	2100      	movs	r1, #0
 8001724:	0010      	movs	r0, r2
 8001726:	032d      	lsls	r5, r5, #12
 8001728:	0d0a      	lsrs	r2, r1, #20
 800172a:	0b2d      	lsrs	r5, r5, #12
 800172c:	0512      	lsls	r2, r2, #20
 800172e:	432a      	orrs	r2, r5
 8001730:	4d0d      	ldr	r5, [pc, #52]	; (8001768 <__aeabi_i2d+0x70>)
 8001732:	051b      	lsls	r3, r3, #20
 8001734:	402a      	ands	r2, r5
 8001736:	4313      	orrs	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	07e4      	lsls	r4, r4, #31
 800173c:	085b      	lsrs	r3, r3, #1
 800173e:	4323      	orrs	r3, r4
 8001740:	0019      	movs	r1, r3
 8001742:	bd70      	pop	{r4, r5, r6, pc}
 8001744:	0002      	movs	r2, r0
 8001746:	0029      	movs	r1, r5
 8001748:	3215      	adds	r2, #21
 800174a:	4091      	lsls	r1, r2
 800174c:	000a      	movs	r2, r1
 800174e:	210b      	movs	r1, #11
 8001750:	1a08      	subs	r0, r1, r0
 8001752:	40c5      	lsrs	r5, r0
 8001754:	032d      	lsls	r5, r5, #12
 8001756:	0b2d      	lsrs	r5, r5, #12
 8001758:	e7e3      	b.n	8001722 <__aeabi_i2d+0x2a>
 800175a:	2400      	movs	r4, #0
 800175c:	2300      	movs	r3, #0
 800175e:	2500      	movs	r5, #0
 8001760:	2200      	movs	r2, #0
 8001762:	e7de      	b.n	8001722 <__aeabi_i2d+0x2a>
 8001764:	0000041e 	.word	0x0000041e
 8001768:	800fffff 	.word	0x800fffff

0800176c <__aeabi_d2f>:
 800176c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800176e:	004c      	lsls	r4, r1, #1
 8001770:	0d64      	lsrs	r4, r4, #21
 8001772:	030b      	lsls	r3, r1, #12
 8001774:	1c62      	adds	r2, r4, #1
 8001776:	0a5b      	lsrs	r3, r3, #9
 8001778:	0f46      	lsrs	r6, r0, #29
 800177a:	0552      	lsls	r2, r2, #21
 800177c:	0fc9      	lsrs	r1, r1, #31
 800177e:	431e      	orrs	r6, r3
 8001780:	00c5      	lsls	r5, r0, #3
 8001782:	0d52      	lsrs	r2, r2, #21
 8001784:	2a01      	cmp	r2, #1
 8001786:	dd29      	ble.n	80017dc <__aeabi_d2f+0x70>
 8001788:	4b37      	ldr	r3, [pc, #220]	; (8001868 <__aeabi_d2f+0xfc>)
 800178a:	18e7      	adds	r7, r4, r3
 800178c:	2ffe      	cmp	r7, #254	; 0xfe
 800178e:	dc1c      	bgt.n	80017ca <__aeabi_d2f+0x5e>
 8001790:	2f00      	cmp	r7, #0
 8001792:	dd3b      	ble.n	800180c <__aeabi_d2f+0xa0>
 8001794:	0180      	lsls	r0, r0, #6
 8001796:	1e43      	subs	r3, r0, #1
 8001798:	4198      	sbcs	r0, r3
 800179a:	2207      	movs	r2, #7
 800179c:	00f3      	lsls	r3, r6, #3
 800179e:	0f6d      	lsrs	r5, r5, #29
 80017a0:	4303      	orrs	r3, r0
 80017a2:	432b      	orrs	r3, r5
 80017a4:	401a      	ands	r2, r3
 80017a6:	2a00      	cmp	r2, #0
 80017a8:	d004      	beq.n	80017b4 <__aeabi_d2f+0x48>
 80017aa:	220f      	movs	r2, #15
 80017ac:	401a      	ands	r2, r3
 80017ae:	2a04      	cmp	r2, #4
 80017b0:	d000      	beq.n	80017b4 <__aeabi_d2f+0x48>
 80017b2:	3304      	adds	r3, #4
 80017b4:	2280      	movs	r2, #128	; 0x80
 80017b6:	04d2      	lsls	r2, r2, #19
 80017b8:	401a      	ands	r2, r3
 80017ba:	d024      	beq.n	8001806 <__aeabi_d2f+0x9a>
 80017bc:	3701      	adds	r7, #1
 80017be:	b2fa      	uxtb	r2, r7
 80017c0:	2fff      	cmp	r7, #255	; 0xff
 80017c2:	d002      	beq.n	80017ca <__aeabi_d2f+0x5e>
 80017c4:	019b      	lsls	r3, r3, #6
 80017c6:	0a58      	lsrs	r0, r3, #9
 80017c8:	e001      	b.n	80017ce <__aeabi_d2f+0x62>
 80017ca:	22ff      	movs	r2, #255	; 0xff
 80017cc:	2000      	movs	r0, #0
 80017ce:	0240      	lsls	r0, r0, #9
 80017d0:	05d2      	lsls	r2, r2, #23
 80017d2:	0a40      	lsrs	r0, r0, #9
 80017d4:	07c9      	lsls	r1, r1, #31
 80017d6:	4310      	orrs	r0, r2
 80017d8:	4308      	orrs	r0, r1
 80017da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017dc:	4335      	orrs	r5, r6
 80017de:	2c00      	cmp	r4, #0
 80017e0:	d104      	bne.n	80017ec <__aeabi_d2f+0x80>
 80017e2:	2d00      	cmp	r5, #0
 80017e4:	d10a      	bne.n	80017fc <__aeabi_d2f+0x90>
 80017e6:	2200      	movs	r2, #0
 80017e8:	2000      	movs	r0, #0
 80017ea:	e7f0      	b.n	80017ce <__aeabi_d2f+0x62>
 80017ec:	2d00      	cmp	r5, #0
 80017ee:	d0ec      	beq.n	80017ca <__aeabi_d2f+0x5e>
 80017f0:	2080      	movs	r0, #128	; 0x80
 80017f2:	03c0      	lsls	r0, r0, #15
 80017f4:	4330      	orrs	r0, r6
 80017f6:	22ff      	movs	r2, #255	; 0xff
 80017f8:	e7e9      	b.n	80017ce <__aeabi_d2f+0x62>
 80017fa:	2400      	movs	r4, #0
 80017fc:	2300      	movs	r3, #0
 80017fe:	025b      	lsls	r3, r3, #9
 8001800:	0a58      	lsrs	r0, r3, #9
 8001802:	b2e2      	uxtb	r2, r4
 8001804:	e7e3      	b.n	80017ce <__aeabi_d2f+0x62>
 8001806:	08db      	lsrs	r3, r3, #3
 8001808:	003c      	movs	r4, r7
 800180a:	e7f8      	b.n	80017fe <__aeabi_d2f+0x92>
 800180c:	003b      	movs	r3, r7
 800180e:	3317      	adds	r3, #23
 8001810:	dbf3      	blt.n	80017fa <__aeabi_d2f+0x8e>
 8001812:	2380      	movs	r3, #128	; 0x80
 8001814:	041b      	lsls	r3, r3, #16
 8001816:	4333      	orrs	r3, r6
 8001818:	261e      	movs	r6, #30
 800181a:	1bf6      	subs	r6, r6, r7
 800181c:	2e1f      	cmp	r6, #31
 800181e:	dd14      	ble.n	800184a <__aeabi_d2f+0xde>
 8001820:	2202      	movs	r2, #2
 8001822:	4252      	negs	r2, r2
 8001824:	1bd7      	subs	r7, r2, r7
 8001826:	001a      	movs	r2, r3
 8001828:	40fa      	lsrs	r2, r7
 800182a:	0017      	movs	r7, r2
 800182c:	2e20      	cmp	r6, #32
 800182e:	d004      	beq.n	800183a <__aeabi_d2f+0xce>
 8001830:	4a0e      	ldr	r2, [pc, #56]	; (800186c <__aeabi_d2f+0x100>)
 8001832:	4694      	mov	ip, r2
 8001834:	4464      	add	r4, ip
 8001836:	40a3      	lsls	r3, r4
 8001838:	431d      	orrs	r5, r3
 800183a:	002b      	movs	r3, r5
 800183c:	1e5d      	subs	r5, r3, #1
 800183e:	41ab      	sbcs	r3, r5
 8001840:	2207      	movs	r2, #7
 8001842:	433b      	orrs	r3, r7
 8001844:	401a      	ands	r2, r3
 8001846:	2700      	movs	r7, #0
 8001848:	e7ad      	b.n	80017a6 <__aeabi_d2f+0x3a>
 800184a:	4a09      	ldr	r2, [pc, #36]	; (8001870 <__aeabi_d2f+0x104>)
 800184c:	0028      	movs	r0, r5
 800184e:	18a2      	adds	r2, r4, r2
 8001850:	4095      	lsls	r5, r2
 8001852:	4093      	lsls	r3, r2
 8001854:	1e6c      	subs	r4, r5, #1
 8001856:	41a5      	sbcs	r5, r4
 8001858:	40f0      	lsrs	r0, r6
 800185a:	2207      	movs	r2, #7
 800185c:	432b      	orrs	r3, r5
 800185e:	4303      	orrs	r3, r0
 8001860:	401a      	ands	r2, r3
 8001862:	2700      	movs	r7, #0
 8001864:	e79f      	b.n	80017a6 <__aeabi_d2f+0x3a>
 8001866:	46c0      	nop			; (mov r8, r8)
 8001868:	fffffc80 	.word	0xfffffc80
 800186c:	fffffca2 	.word	0xfffffca2
 8001870:	fffffc82 	.word	0xfffffc82

08001874 <__clzsi2>:
 8001874:	211c      	movs	r1, #28
 8001876:	2301      	movs	r3, #1
 8001878:	041b      	lsls	r3, r3, #16
 800187a:	4298      	cmp	r0, r3
 800187c:	d301      	bcc.n	8001882 <__clzsi2+0xe>
 800187e:	0c00      	lsrs	r0, r0, #16
 8001880:	3910      	subs	r1, #16
 8001882:	0a1b      	lsrs	r3, r3, #8
 8001884:	4298      	cmp	r0, r3
 8001886:	d301      	bcc.n	800188c <__clzsi2+0x18>
 8001888:	0a00      	lsrs	r0, r0, #8
 800188a:	3908      	subs	r1, #8
 800188c:	091b      	lsrs	r3, r3, #4
 800188e:	4298      	cmp	r0, r3
 8001890:	d301      	bcc.n	8001896 <__clzsi2+0x22>
 8001892:	0900      	lsrs	r0, r0, #4
 8001894:	3904      	subs	r1, #4
 8001896:	a202      	add	r2, pc, #8	; (adr r2, 80018a0 <__clzsi2+0x2c>)
 8001898:	5c10      	ldrb	r0, [r2, r0]
 800189a:	1840      	adds	r0, r0, r1
 800189c:	4770      	bx	lr
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	02020304 	.word	0x02020304
 80018a4:	01010101 	.word	0x01010101
	...

080018b0 <SPI_CS_LOW>:
static uint8_t textSize;
static uint16_t textColor;
static uint16_t bg;

// ---- lower level functions ----
void SPI_CS_LOW() {HAL_GPIO_WritePin(CS_GPIO, CS_PIN, GPIO_PIN_RESET);}
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <SPI_CS_LOW+0x18>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	2180      	movs	r1, #128	; 0x80
 80018ba:	0018      	movs	r0, r3
 80018bc:	f003 fa41 	bl	8004d42 <HAL_GPIO_WritePin>
 80018c0:	46c0      	nop			; (mov r8, r8)
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	50000800 	.word	0x50000800

080018cc <SPI_CS_HIGH>:

void SPI_CS_HIGH() {HAL_GPIO_WritePin(CS_GPIO, CS_PIN, GPIO_PIN_SET);}
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <SPI_CS_HIGH+0x18>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	2180      	movs	r1, #128	; 0x80
 80018d6:	0018      	movs	r0, r3
 80018d8:	f003 fa33 	bl	8004d42 <HAL_GPIO_WritePin>
 80018dc:	46c0      	nop			; (mov r8, r8)
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	50000800 	.word	0x50000800

080018e8 <SPI_DC_LOW>:

void SPI_DC_LOW() {HAL_GPIO_WritePin(DC_GPIO, DC_PIN, GPIO_PIN_RESET);}
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	4b04      	ldr	r3, [pc, #16]	; (8001900 <SPI_DC_LOW+0x18>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	2140      	movs	r1, #64	; 0x40
 80018f2:	0018      	movs	r0, r3
 80018f4:	f003 fa25 	bl	8004d42 <HAL_GPIO_WritePin>
 80018f8:	46c0      	nop			; (mov r8, r8)
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	50000400 	.word	0x50000400

08001904 <SPI_DC_HIGH>:

void SPI_DC_HIGH() {HAL_GPIO_WritePin(DC_GPIO, DC_PIN, GPIO_PIN_SET);}
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
 8001908:	4b04      	ldr	r3, [pc, #16]	; (800191c <SPI_DC_HIGH+0x18>)
 800190a:	2201      	movs	r2, #1
 800190c:	2140      	movs	r1, #64	; 0x40
 800190e:	0018      	movs	r0, r3
 8001910:	f003 fa17 	bl	8004d42 <HAL_GPIO_WritePin>
 8001914:	46c0      	nop			; (mov r8, r8)
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	50000400 	.word	0x50000400

08001920 <sendCommand>:

// still ripped but now im changing it
void sendCommand(uint8_t cmd, uint8_t *args, uint16_t numArgs, SPI_HandleTypeDef *hspi) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	0011      	movs	r1, r2
 800192a:	607b      	str	r3, [r7, #4]
 800192c:	230f      	movs	r3, #15
 800192e:	18fb      	adds	r3, r7, r3
 8001930:	1c02      	adds	r2, r0, #0
 8001932:	701a      	strb	r2, [r3, #0]
 8001934:	230c      	movs	r3, #12
 8001936:	18fb      	adds	r3, r7, r3
 8001938:	1c0a      	adds	r2, r1, #0
 800193a:	801a      	strh	r2, [r3, #0]
	while (HAL_SPI_GetState(hspi) == HAL_SPI_STATE_BUSY_TX);		// block next transfer request while DMA transfer is ongoing
 800193c:	46c0      	nop			; (mov r8, r8)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	0018      	movs	r0, r3
 8001942:	f005 fadb 	bl	8006efc <HAL_SPI_GetState>
 8001946:	0003      	movs	r3, r0
 8001948:	2b03      	cmp	r3, #3
 800194a:	d0f8      	beq.n	800193e <sendCommand+0x1e>
	SPI_CS_LOW();	// chip select
 800194c:	f7ff ffb0 	bl	80018b0 <SPI_CS_LOW>

	SPI_DC_LOW();	// command mode
 8001950:	f7ff ffca 	bl	80018e8 <SPI_DC_LOW>
	HAL_SPI_Transmit(hspi, &cmd, 1, 1000);	// not using DMA bc it's only 1 byte
 8001954:	23fa      	movs	r3, #250	; 0xfa
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	220f      	movs	r2, #15
 800195a:	18b9      	adds	r1, r7, r2
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f004 ffea 	bl	8006938 <HAL_SPI_Transmit>

	SPI_DC_HIGH();	// data mode
 8001964:	f7ff ffce 	bl	8001904 <SPI_DC_HIGH>
	if (numArgs) {
 8001968:	230c      	movs	r3, #12
 800196a:	18fb      	adds	r3, r7, r3
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d007      	beq.n	8001982 <sendCommand+0x62>
		HAL_SPI_Transmit_IT(hspi, args, numArgs);
 8001972:	230c      	movs	r3, #12
 8001974:	18fb      	adds	r3, r7, r3
 8001976:	881a      	ldrh	r2, [r3, #0]
 8001978:	68b9      	ldr	r1, [r7, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	0018      	movs	r0, r3
 800197e:	f005 f929 	bl	8006bd4 <HAL_SPI_Transmit_IT>
//		HAL_SPI_Transmit_DMA(hspi, args, numArgs);
	}

//	SPI_CS_HIGH();	// chip select disable
}
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	46bd      	mov	sp, r7
 8001986:	b004      	add	sp, #16
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <HAL_SPI_TxCpltCallback>:

// DMA callback on transfer compelete
// using only for sending data, but not commands
// dont send request when transfer is ongoing
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(CS_GPIO, CS_PIN) == GPIO_PIN_RESET) SPI_CS_HIGH();	// chip select disable
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <HAL_SPI_TxCpltCallback+0x24>)
 8001996:	2180      	movs	r1, #128	; 0x80
 8001998:	0018      	movs	r0, r3
 800199a:	f003 f9b5 	bl	8004d08 <HAL_GPIO_ReadPin>
 800199e:	1e03      	subs	r3, r0, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_SPI_TxCpltCallback+0x1a>
 80019a2:	f7ff ff93 	bl	80018cc <SPI_CS_HIGH>
}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	46bd      	mov	sp, r7
 80019aa:	b002      	add	sp, #8
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	50000800 	.word	0x50000800

080019b4 <displayInit>:

// array parser heavily based on Adafruit library code
void displayInit(uint8_t *args, SPI_HandleTypeDef *hspi) {
 80019b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
	uint8_t  numCommands, cmd, numArgs;
	uint16_t ms;
	uint8_t index = 0;
 80019be:	220b      	movs	r2, #11
 80019c0:	0011      	movs	r1, r2
 80019c2:	18bb      	adds	r3, r7, r2
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	numCommands = args[index++];   // Number of commands to follow
 80019c8:	000a      	movs	r2, r1
 80019ca:	18bb      	adds	r3, r7, r2
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	18ba      	adds	r2, r7, r2
 80019d0:	1c59      	adds	r1, r3, #1
 80019d2:	7011      	strb	r1, [r2, #0]
 80019d4:	001a      	movs	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	189a      	adds	r2, r3, r2
 80019da:	230f      	movs	r3, #15
 80019dc:	18fb      	adds	r3, r7, r3
 80019de:	7812      	ldrb	r2, [r2, #0]
 80019e0:	701a      	strb	r2, [r3, #0]
	while(numCommands--) {                 // For each command...
 80019e2:	e05e      	b.n	8001aa2 <displayInit+0xee>
		cmd = args[index++];         // Read command
 80019e4:	200b      	movs	r0, #11
 80019e6:	183b      	adds	r3, r7, r0
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	183a      	adds	r2, r7, r0
 80019ec:	1c59      	adds	r1, r3, #1
 80019ee:	7011      	strb	r1, [r2, #0]
 80019f0:	001a      	movs	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	189a      	adds	r2, r3, r2
 80019f6:	230a      	movs	r3, #10
 80019f8:	18fb      	adds	r3, r7, r3
 80019fa:	7812      	ldrb	r2, [r2, #0]
 80019fc:	701a      	strb	r2, [r3, #0]
		numArgs  = args[index++];    // Number of args to follow
 80019fe:	183b      	adds	r3, r7, r0
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	183a      	adds	r2, r7, r0
 8001a04:	1c59      	adds	r1, r3, #1
 8001a06:	7011      	strb	r1, [r2, #0]
 8001a08:	001a      	movs	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	189a      	adds	r2, r3, r2
 8001a0e:	2609      	movs	r6, #9
 8001a10:	19bb      	adds	r3, r7, r6
 8001a12:	7812      	ldrb	r2, [r2, #0]
 8001a14:	701a      	strb	r2, [r3, #0]
		ms       = numArgs & ST_CMD_DELAY;   // If hibit set, delay follows args
 8001a16:	19bb      	adds	r3, r7, r6
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	210c      	movs	r1, #12
 8001a1e:	187b      	adds	r3, r7, r1
 8001a20:	2180      	movs	r1, #128	; 0x80
 8001a22:	400a      	ands	r2, r1
 8001a24:	801a      	strh	r2, [r3, #0]
		numArgs &= ~ST_CMD_DELAY;            // Mask out delay bit
 8001a26:	19bb      	adds	r3, r7, r6
 8001a28:	19ba      	adds	r2, r7, r6
 8001a2a:	7812      	ldrb	r2, [r2, #0]
 8001a2c:	217f      	movs	r1, #127	; 0x7f
 8001a2e:	400a      	ands	r2, r1
 8001a30:	701a      	strb	r2, [r3, #0]
		sendCommand(cmd, &args[index], numArgs, hspi);
 8001a32:	0005      	movs	r5, r0
 8001a34:	183b      	adds	r3, r7, r0
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	18d1      	adds	r1, r2, r3
 8001a3c:	19bb      	adds	r3, r7, r6
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	683c      	ldr	r4, [r7, #0]
 8001a44:	230a      	movs	r3, #10
 8001a46:	18fb      	adds	r3, r7, r3
 8001a48:	7818      	ldrb	r0, [r3, #0]
 8001a4a:	0023      	movs	r3, r4
 8001a4c:	f7ff ff68 	bl	8001920 <sendCommand>
		index += numArgs;
 8001a50:	0028      	movs	r0, r5
 8001a52:	183b      	adds	r3, r7, r0
 8001a54:	1839      	adds	r1, r7, r0
 8001a56:	19ba      	adds	r2, r7, r6
 8001a58:	7809      	ldrb	r1, [r1, #0]
 8001a5a:	7812      	ldrb	r2, [r2, #0]
 8001a5c:	188a      	adds	r2, r1, r2
 8001a5e:	701a      	strb	r2, [r3, #0]

		if(ms) {
 8001a60:	210c      	movs	r1, #12
 8001a62:	187b      	adds	r3, r7, r1
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d01b      	beq.n	8001aa2 <displayInit+0xee>
			ms = args[index++]; // Read post-command delay time (ms)
 8001a6a:	220b      	movs	r2, #11
 8001a6c:	18bb      	adds	r3, r7, r2
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	18ba      	adds	r2, r7, r2
 8001a72:	1c59      	adds	r1, r3, #1
 8001a74:	7011      	strb	r1, [r2, #0]
 8001a76:	001a      	movs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	189b      	adds	r3, r3, r2
 8001a7c:	781a      	ldrb	r2, [r3, #0]
 8001a7e:	210c      	movs	r1, #12
 8001a80:	187b      	adds	r3, r7, r1
 8001a82:	801a      	strh	r2, [r3, #0]
			if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 8001a84:	187b      	adds	r3, r7, r1
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	2bff      	cmp	r3, #255	; 0xff
 8001a8a:	d104      	bne.n	8001a96 <displayInit+0xe2>
 8001a8c:	230c      	movs	r3, #12
 8001a8e:	18fb      	adds	r3, r7, r3
 8001a90:	22fa      	movs	r2, #250	; 0xfa
 8001a92:	0052      	lsls	r2, r2, #1
 8001a94:	801a      	strh	r2, [r3, #0]
			HAL_Delay(ms);
 8001a96:	230c      	movs	r3, #12
 8001a98:	18fb      	adds	r3, r7, r3
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f002 f9fb 	bl	8003e98 <HAL_Delay>
	while(numCommands--) {                 // For each command...
 8001aa2:	220f      	movs	r2, #15
 8001aa4:	18bb      	adds	r3, r7, r2
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	18ba      	adds	r2, r7, r2
 8001aaa:	1e59      	subs	r1, r3, #1
 8001aac:	7011      	strb	r1, [r2, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d198      	bne.n	80019e4 <displayInit+0x30>
		}
	}

	// note: this line may be doing more work than I think
	// (hard to read in datasheet)
	data = 0xC0;
 8001ab2:	2108      	movs	r1, #8
 8001ab4:	187b      	adds	r3, r7, r1
 8001ab6:	22c0      	movs	r2, #192	; 0xc0
 8001ab8:	701a      	strb	r2, [r3, #0]
	sendCommand(ST77XX_MADCTL, &data, 1, hspi);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	1879      	adds	r1, r7, r1
 8001abe:	2201      	movs	r2, #1
 8001ac0:	2036      	movs	r0, #54	; 0x36
 8001ac2:	f7ff ff2d 	bl	8001920 <sendCommand>
}
 8001ac6:	46c0      	nop			; (mov r8, r8)
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	b005      	add	sp, #20
 8001acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001ad0 <TFT_startup>:

void TFT_startup(SPI_HandleTypeDef *hspi) {
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b0a3      	sub	sp, #140	; 0x8c
 8001ad4:	af02      	add	r7, sp, #8
 8001ad6:	6078      	str	r0, [r7, #4]
	// startup sequence: rcmd1->rcmd2red->rcmd3
	uint8_t initCommands[] = {
 8001ad8:	240c      	movs	r4, #12
 8001ada:	193a      	adds	r2, r7, r4
 8001adc:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <TFT_startup+0x60>)
 8001ade:	0010      	movs	r0, r2
 8001ae0:	0019      	movs	r1, r3
 8001ae2:	2371      	movs	r3, #113	; 0x71
 8001ae4:	001a      	movs	r2, r3
 8001ae6:	f006 fa25 	bl	8007f34 <memcpy>
			10,                           //     10 ms delay
		ST77XX_DISPON,    ST_CMD_DELAY, //  4: Main screen turn on, no args w/delay
			100	                        //     100 ms delay
	};

	displayInit(initCommands, hspi);
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	193b      	adds	r3, r7, r4
 8001aee:	0011      	movs	r1, r2
 8001af0:	0018      	movs	r0, r3
 8001af2:	f7ff ff5f 	bl	80019b4 <displayInit>
	setAddrWindow(0, 0, WIDTH, HEIGHT, hspi);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	23a0      	movs	r3, #160	; 0xa0
 8001afc:	2280      	movs	r2, #128	; 0x80
 8001afe:	2100      	movs	r1, #0
 8001b00:	2000      	movs	r0, #0
 8001b02:	f000 f821 	bl	8001b48 <setAddrWindow>

	// set the global variables
	cursorX = 0;
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <TFT_startup+0x64>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]
	cursorY = 0;
 8001b0c:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <TFT_startup+0x68>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	701a      	strb	r2, [r3, #0]
	textSize = 1;
 8001b12:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <TFT_startup+0x6c>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	701a      	strb	r2, [r3, #0]
	textColor = ST77XX_BLACK;
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <TFT_startup+0x70>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	801a      	strh	r2, [r3, #0]
	bg = ST77XX_WHITE;
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <TFT_startup+0x74>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	4252      	negs	r2, r2
 8001b24:	801a      	strh	r2, [r3, #0]
}
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b021      	add	sp, #132	; 0x84
 8001b2c:	bd90      	pop	{r4, r7, pc}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	08008788 	.word	0x08008788
 8001b34:	20000088 	.word	0x20000088
 8001b38:	20000089 	.word	0x20000089
 8001b3c:	2000008a 	.word	0x2000008a
 8001b40:	2000008c 	.word	0x2000008c
 8001b44:	2000008e 	.word	0x2000008e

08001b48 <setAddrWindow>:

// draw something: set addr window -> write to ram memory
// sets specific area on display to write pixels to
// x and y for upper left corner, w for width, h for height
void setAddrWindow(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SPI_HandleTypeDef *hspi) {
 8001b48:	b5b0      	push	{r4, r5, r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	0005      	movs	r5, r0
 8001b50:	000c      	movs	r4, r1
 8001b52:	0010      	movs	r0, r2
 8001b54:	0019      	movs	r1, r3
 8001b56:	1dbb      	adds	r3, r7, #6
 8001b58:	1c2a      	adds	r2, r5, #0
 8001b5a:	801a      	strh	r2, [r3, #0]
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	1c22      	adds	r2, r4, #0
 8001b60:	801a      	strh	r2, [r3, #0]
 8001b62:	1cbb      	adds	r3, r7, #2
 8001b64:	1c02      	adds	r2, r0, #0
 8001b66:	801a      	strh	r2, [r3, #0]
 8001b68:	003b      	movs	r3, r7
 8001b6a:	1c0a      	adds	r2, r1, #0
 8001b6c:	801a      	strh	r2, [r3, #0]
	// not really needed for our display
	x += _xstart;
 8001b6e:	1dbb      	adds	r3, r7, #6
 8001b70:	1dba      	adds	r2, r7, #6
 8001b72:	8812      	ldrh	r2, [r2, #0]
 8001b74:	801a      	strh	r2, [r3, #0]
	y += _ystart;
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	1d3a      	adds	r2, r7, #4
 8001b7a:	8812      	ldrh	r2, [r2, #0]
 8001b7c:	801a      	strh	r2, [r3, #0]

	uint8_t temp[4];
	temp[0] = (x & (0xFF00)) >> 8;
 8001b7e:	1dbb      	adds	r3, r7, #6
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	0a1b      	lsrs	r3, r3, #8
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	210c      	movs	r1, #12
 8001b8a:	187b      	adds	r3, r7, r1
 8001b8c:	701a      	strb	r2, [r3, #0]
	temp[1] = x & (0xFF);
 8001b8e:	1dbb      	adds	r3, r7, #6
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	187b      	adds	r3, r7, r1
 8001b96:	705a      	strb	r2, [r3, #1]
	temp[2] = ((x+w-1) & (0xFF00)) >> 8;
 8001b98:	1dbb      	adds	r3, r7, #6
 8001b9a:	881a      	ldrh	r2, [r3, #0]
 8001b9c:	1cbb      	adds	r3, r7, #2
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	18d3      	adds	r3, r2, r3
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	121b      	asrs	r3, r3, #8
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	187b      	adds	r3, r7, r1
 8001baa:	709a      	strb	r2, [r3, #2]
	temp[3] = (x+w-1) & (0xFF);
 8001bac:	1dbb      	adds	r3, r7, #6
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	1cbb      	adds	r3, r7, #2
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	18d3      	adds	r3, r2, r3
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	187b      	adds	r3, r7, r1
 8001bc2:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_CASET, temp, 4, hspi);
 8001bc4:	6a3b      	ldr	r3, [r7, #32]
 8001bc6:	000c      	movs	r4, r1
 8001bc8:	1879      	adds	r1, r7, r1
 8001bca:	2204      	movs	r2, #4
 8001bcc:	202a      	movs	r0, #42	; 0x2a
 8001bce:	f7ff fea7 	bl	8001920 <sendCommand>

	temp[0] = (y & (0xFF00)) >> 8;
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	0a1b      	lsrs	r3, r3, #8
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	0021      	movs	r1, r4
 8001bde:	187b      	adds	r3, r7, r1
 8001be0:	701a      	strb	r2, [r3, #0]
	temp[1] = y & (0xFF);
 8001be2:	1d3b      	adds	r3, r7, #4
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	187b      	adds	r3, r7, r1
 8001bea:	705a      	strb	r2, [r3, #1]
	temp[2] = ((y+h-1) & (0xFF00)) >> 8;
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	881a      	ldrh	r2, [r3, #0]
 8001bf0:	003b      	movs	r3, r7
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	18d3      	adds	r3, r2, r3
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	121b      	asrs	r3, r3, #8
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	187b      	adds	r3, r7, r1
 8001bfe:	709a      	strb	r2, [r3, #2]
	temp[3] = (y+h-1) & (0x00FF);
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	003b      	movs	r3, r7
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	18d3      	adds	r3, r2, r3
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	3b01      	subs	r3, #1
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	187b      	adds	r3, r7, r1
 8001c16:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_RASET, temp, 4, hspi);
 8001c18:	6a3b      	ldr	r3, [r7, #32]
 8001c1a:	1879      	adds	r1, r7, r1
 8001c1c:	2204      	movs	r2, #4
 8001c1e:	202b      	movs	r0, #43	; 0x2b
 8001c20:	f7ff fe7e 	bl	8001920 <sendCommand>
}
 8001c24:	46c0      	nop			; (mov r8, r8)
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b004      	add	sp, #16
 8001c2a:	bdb0      	pop	{r4, r5, r7, pc}

08001c2c <turnDisplayOn>:

void turnDisplayOn(SPI_HandleTypeDef *hspi) {sendCommand(ST77XX_DISPON, NULL, 0, hspi);}		// no args, null shouldn't be accessed by sendCommand func
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	2100      	movs	r1, #0
 8001c3a:	2029      	movs	r0, #41	; 0x29
 8001c3c:	f7ff fe70 	bl	8001920 <sendCommand>
 8001c40:	46c0      	nop			; (mov r8, r8)
 8001c42:	46bd      	mov	sp, r7
 8001c44:	b002      	add	sp, #8
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <turnDisplayOff>:
void turnDisplayOff(SPI_HandleTypeDef *hspi) {sendCommand(ST77XX_DISPOFF, NULL, 0, hspi);}
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	2100      	movs	r1, #0
 8001c56:	2028      	movs	r0, #40	; 0x28
 8001c58:	f7ff fe62 	bl	8001920 <sendCommand>
 8001c5c:	46c0      	nop			; (mov r8, r8)
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	b002      	add	sp, #8
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <colorFixer>:
// 8-bit spi bus wants msb first; in array, lowest index is sent first
// because L4 is little-endian
//   for 16-bit value, it sends lower byte before upper byte
//   resulting in device thinking lower byte is upper byte
// this switches byte order around
uint16_t colorFixer(uint16_t color) {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	0002      	movs	r2, r0
 8001c6c:	1dbb      	adds	r3, r7, #6
 8001c6e:	801a      	strh	r2, [r3, #0]
	uint8_t a = color & 0xFF;
 8001c70:	210f      	movs	r1, #15
 8001c72:	187b      	adds	r3, r7, r1
 8001c74:	1dba      	adds	r2, r7, #6
 8001c76:	8812      	ldrh	r2, [r2, #0]
 8001c78:	701a      	strb	r2, [r3, #0]
	uint8_t b = (color & 0xFF00) >> 8;
 8001c7a:	1dbb      	adds	r3, r7, #6
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	0a1b      	lsrs	r3, r3, #8
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	200e      	movs	r0, #14
 8001c84:	183b      	adds	r3, r7, r0
 8001c86:	701a      	strb	r2, [r3, #0]
	uint16_t ret = (a << 8) | b;
 8001c88:	187b      	adds	r3, r7, r1
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	021b      	lsls	r3, r3, #8
 8001c8e:	b21a      	sxth	r2, r3
 8001c90:	183b      	adds	r3, r7, r0
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	b21b      	sxth	r3, r3
 8001c96:	4313      	orrs	r3, r2
 8001c98:	b21a      	sxth	r2, r3
 8001c9a:	210c      	movs	r1, #12
 8001c9c:	187b      	adds	r3, r7, r1
 8001c9e:	801a      	strh	r2, [r3, #0]

	return ret;
 8001ca0:	187b      	adds	r3, r7, r1
 8001ca2:	881b      	ldrh	r3, [r3, #0]
}
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	b004      	add	sp, #16
 8001caa:	bd80      	pop	{r7, pc}

08001cac <drawBuffer>:
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
}

void drawBuffer(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t *buffer, uint16_t bufferSize, SPI_HandleTypeDef *hspi) {
 8001cac:	b5b0      	push	{r4, r5, r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af02      	add	r7, sp, #8
 8001cb2:	0005      	movs	r5, r0
 8001cb4:	000c      	movs	r4, r1
 8001cb6:	0010      	movs	r0, r2
 8001cb8:	0019      	movs	r1, r3
 8001cba:	1dfb      	adds	r3, r7, #7
 8001cbc:	1c2a      	adds	r2, r5, #0
 8001cbe:	701a      	strb	r2, [r3, #0]
 8001cc0:	1dbb      	adds	r3, r7, #6
 8001cc2:	1c22      	adds	r2, r4, #0
 8001cc4:	701a      	strb	r2, [r3, #0]
 8001cc6:	1d7b      	adds	r3, r7, #5
 8001cc8:	1c02      	adds	r2, r0, #0
 8001cca:	701a      	strb	r2, [r3, #0]
 8001ccc:	1d3b      	adds	r3, r7, #4
 8001cce:	1c0a      	adds	r2, r1, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
	// just dont call this with out-of-range vals pls.
	if (x+w > WIDTH || y+h > HEIGHT) return;
 8001cd2:	1dfb      	adds	r3, r7, #7
 8001cd4:	781a      	ldrb	r2, [r3, #0]
 8001cd6:	1d7b      	adds	r3, r7, #5
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	18d3      	adds	r3, r2, r3
 8001cdc:	2b80      	cmp	r3, #128	; 0x80
 8001cde:	dc29      	bgt.n	8001d34 <drawBuffer+0x88>
 8001ce0:	1dbb      	adds	r3, r7, #6
 8001ce2:	781a      	ldrb	r2, [r3, #0]
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	18d3      	adds	r3, r2, r3
 8001cea:	2ba0      	cmp	r3, #160	; 0xa0
 8001cec:	dc22      	bgt.n	8001d34 <drawBuffer+0x88>

	// also don't call this with buffer size too big bc there's not enough ram for all pixels of display
	if (bufferSize > 10240) return;
 8001cee:	231c      	movs	r3, #28
 8001cf0:	18fb      	adds	r3, r7, r3
 8001cf2:	881a      	ldrh	r2, [r3, #0]
 8001cf4:	23a0      	movs	r3, #160	; 0xa0
 8001cf6:	019b      	lsls	r3, r3, #6
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d81d      	bhi.n	8001d38 <drawBuffer+0x8c>

	setAddrWindow(x, y, w, h, hspi);
 8001cfc:	1dfb      	adds	r3, r7, #7
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	b298      	uxth	r0, r3
 8001d02:	1dbb      	adds	r3, r7, #6
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	b299      	uxth	r1, r3
 8001d08:	1d7b      	adds	r3, r7, #5
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	1d3b      	adds	r3, r7, #4
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	b29c      	uxth	r4, r3
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	0023      	movs	r3, r4
 8001d1a:	f7ff ff15 	bl	8001b48 <setAddrWindow>
	sendCommand(ST77XX_RAMWR, buffer, bufferSize*2, hspi);
 8001d1e:	231c      	movs	r3, #28
 8001d20:	18fb      	adds	r3, r7, r3
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	18db      	adds	r3, r3, r3
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	6a3b      	ldr	r3, [r7, #32]
 8001d2a:	69b9      	ldr	r1, [r7, #24]
 8001d2c:	202c      	movs	r0, #44	; 0x2c
 8001d2e:	f7ff fdf7 	bl	8001920 <sendCommand>
 8001d32:	e002      	b.n	8001d3a <drawBuffer+0x8e>
	if (x+w > WIDTH || y+h > HEIGHT) return;
 8001d34:	46c0      	nop			; (mov r8, r8)
 8001d36:	e000      	b.n	8001d3a <drawBuffer+0x8e>
	if (bufferSize > 10240) return;
 8001d38:	46c0      	nop			; (mov r8, r8)
}
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	b002      	add	sp, #8
 8001d3e:	bdb0      	pop	{r4, r5, r7, pc}

08001d40 <fillScreen>:
	for (int i = 0; i < h; i++) {
		drawHLine(x, y+i, w, color, hspi);
	}
}

void fillScreen(uint16_t color, SPI_HandleTypeDef *hspi) {
 8001d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d42:	b091      	sub	sp, #68	; 0x44
 8001d44:	af04      	add	r7, sp, #16
 8001d46:	61b9      	str	r1, [r7, #24]
 8001d48:	221e      	movs	r2, #30
 8001d4a:	18ba      	adds	r2, r7, r2
 8001d4c:	1c01      	adds	r1, r0, #0
 8001d4e:	8011      	strh	r1, [r2, #0]
 8001d50:	466a      	mov	r2, sp
 8001d52:	607a      	str	r2, [r7, #4]
	uint16_t bufferSize = WIDTH*HEIGHT/4;
 8001d54:	2012      	movs	r0, #18
 8001d56:	2218      	movs	r2, #24
 8001d58:	18b9      	adds	r1, r7, r2
 8001d5a:	180a      	adds	r2, r1, r0
 8001d5c:	21a0      	movs	r1, #160	; 0xa0
 8001d5e:	0149      	lsls	r1, r1, #5
 8001d60:	8011      	strh	r1, [r2, #0]
	uint16_t buffer[bufferSize];
 8001d62:	2218      	movs	r2, #24
 8001d64:	18ba      	adds	r2, r7, r2
 8001d66:	1812      	adds	r2, r2, r0
 8001d68:	8812      	ldrh	r2, [r2, #0]
 8001d6a:	0011      	movs	r1, r2
 8001d6c:	3901      	subs	r1, #1
 8001d6e:	6279      	str	r1, [r7, #36]	; 0x24
 8001d70:	613a      	str	r2, [r7, #16]
 8001d72:	2100      	movs	r1, #0
 8001d74:	6179      	str	r1, [r7, #20]
 8001d76:	6939      	ldr	r1, [r7, #16]
 8001d78:	0f09      	lsrs	r1, r1, #28
 8001d7a:	6978      	ldr	r0, [r7, #20]
 8001d7c:	0106      	lsls	r6, r0, #4
 8001d7e:	430e      	orrs	r6, r1
 8001d80:	6939      	ldr	r1, [r7, #16]
 8001d82:	010d      	lsls	r5, r1, #4
 8001d84:	60ba      	str	r2, [r7, #8]
 8001d86:	2100      	movs	r1, #0
 8001d88:	60f9      	str	r1, [r7, #12]
 8001d8a:	68bd      	ldr	r5, [r7, #8]
 8001d8c:	68fe      	ldr	r6, [r7, #12]
 8001d8e:	0029      	movs	r1, r5
 8001d90:	0f09      	lsrs	r1, r1, #28
 8001d92:	0030      	movs	r0, r6
 8001d94:	0104      	lsls	r4, r0, #4
 8001d96:	430c      	orrs	r4, r1
 8001d98:	0029      	movs	r1, r5
 8001d9a:	010b      	lsls	r3, r1, #4
 8001d9c:	0013      	movs	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	3301      	adds	r3, #1
 8001da2:	3307      	adds	r3, #7
 8001da4:	08db      	lsrs	r3, r3, #3
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	466a      	mov	r2, sp
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	469d      	mov	sp, r3
 8001dae:	ab04      	add	r3, sp, #16
 8001db0:	3301      	adds	r3, #1
 8001db2:	085b      	lsrs	r3, r3, #1
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	623b      	str	r3, [r7, #32]
	int i;
	for (i = 0; i < bufferSize; i++) {
 8001db8:	2300      	movs	r3, #0
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dbc:	e00e      	b.n	8001ddc <fillScreen+0x9c>
		buffer[i] = colorFixer(color);
 8001dbe:	231e      	movs	r3, #30
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	f7ff ff4d 	bl	8001c64 <colorFixer>
 8001dca:	0003      	movs	r3, r0
 8001dcc:	0019      	movs	r1, r3
 8001dce:	6a3b      	ldr	r3, [r7, #32]
 8001dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dd2:	0052      	lsls	r2, r2, #1
 8001dd4:	52d1      	strh	r1, [r2, r3]
	for (i = 0; i < bufferSize; i++) {
 8001dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd8:	3301      	adds	r3, #1
 8001dda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ddc:	2312      	movs	r3, #18
 8001dde:	2218      	movs	r2, #24
 8001de0:	4694      	mov	ip, r2
 8001de2:	44bc      	add	ip, r7
 8001de4:	4463      	add	r3, ip
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dea:	429a      	cmp	r2, r3
 8001dec:	dbe7      	blt.n	8001dbe <fillScreen+0x7e>
	}

	for (i = 0; i < 4; i++) {
 8001dee:	2300      	movs	r3, #0
 8001df0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001df2:	e017      	b.n	8001e24 <fillScreen+0xe4>
		drawBuffer(0, HEIGHT/4*i, WIDTH, HEIGHT/4, buffer, bufferSize, hspi);
 8001df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2228      	movs	r2, #40	; 0x28
 8001dfa:	4353      	muls	r3, r2
 8001dfc:	b2d9      	uxtb	r1, r3
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	9202      	str	r2, [sp, #8]
 8001e04:	2212      	movs	r2, #18
 8001e06:	2018      	movs	r0, #24
 8001e08:	4684      	mov	ip, r0
 8001e0a:	44bc      	add	ip, r7
 8001e0c:	4462      	add	r2, ip
 8001e0e:	8812      	ldrh	r2, [r2, #0]
 8001e10:	9201      	str	r2, [sp, #4]
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	2328      	movs	r3, #40	; 0x28
 8001e16:	2280      	movs	r2, #128	; 0x80
 8001e18:	2000      	movs	r0, #0
 8001e1a:	f7ff ff47 	bl	8001cac <drawBuffer>
	for (i = 0; i < 4; i++) {
 8001e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e20:	3301      	adds	r3, #1
 8001e22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	dde4      	ble.n	8001df4 <fillScreen+0xb4>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	469d      	mov	sp, r3
	}
}
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	46bd      	mov	sp, r7
 8001e32:	b00d      	add	sp, #52	; 0x34
 8001e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001e38 <drawChar>:
	fillRect(0, y, WIDTH, textSize*8, bg, hspi);
}
// ---- end of more complicated graphics ----

// ---- text functions ----
void drawChar(uint8_t ch, SPI_HandleTypeDef *hspi) {
 8001e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e3a:	b095      	sub	sp, #84	; 0x54
 8001e3c:	af04      	add	r7, sp, #16
 8001e3e:	61b9      	str	r1, [r7, #24]
 8001e40:	221f      	movs	r2, #31
 8001e42:	18ba      	adds	r2, r7, r2
 8001e44:	1c01      	adds	r1, r0, #0
 8001e46:	7011      	strb	r1, [r2, #0]
 8001e48:	466a      	mov	r2, sp
 8001e4a:	607a      	str	r2, [r7, #4]
	uint16_t bufferSize = 6*8*textSize*textSize;
 8001e4c:	4abe      	ldr	r2, [pc, #760]	; (8002148 <drawChar+0x310>)
 8001e4e:	7812      	ldrb	r2, [r2, #0]
 8001e50:	b292      	uxth	r2, r2
 8001e52:	49bd      	ldr	r1, [pc, #756]	; (8002148 <drawChar+0x310>)
 8001e54:	7809      	ldrb	r1, [r1, #0]
 8001e56:	b289      	uxth	r1, r1
 8001e58:	434a      	muls	r2, r1
 8001e5a:	b291      	uxth	r1, r2
 8001e5c:	221a      	movs	r2, #26
 8001e5e:	2018      	movs	r0, #24
 8001e60:	4684      	mov	ip, r0
 8001e62:	44bc      	add	ip, r7
 8001e64:	4462      	add	r2, ip
 8001e66:	2030      	movs	r0, #48	; 0x30
 8001e68:	4341      	muls	r1, r0
 8001e6a:	8011      	strh	r1, [r2, #0]
	uint16_t buffer[bufferSize];
 8001e6c:	221a      	movs	r2, #26
 8001e6e:	2118      	movs	r1, #24
 8001e70:	468c      	mov	ip, r1
 8001e72:	44bc      	add	ip, r7
 8001e74:	4462      	add	r2, ip
 8001e76:	8812      	ldrh	r2, [r2, #0]
 8001e78:	0011      	movs	r1, r2
 8001e7a:	3901      	subs	r1, #1
 8001e7c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001e7e:	613a      	str	r2, [r7, #16]
 8001e80:	2100      	movs	r1, #0
 8001e82:	6179      	str	r1, [r7, #20]
 8001e84:	6939      	ldr	r1, [r7, #16]
 8001e86:	0f09      	lsrs	r1, r1, #28
 8001e88:	6978      	ldr	r0, [r7, #20]
 8001e8a:	0106      	lsls	r6, r0, #4
 8001e8c:	430e      	orrs	r6, r1
 8001e8e:	6939      	ldr	r1, [r7, #16]
 8001e90:	010d      	lsls	r5, r1, #4
 8001e92:	60ba      	str	r2, [r7, #8]
 8001e94:	2100      	movs	r1, #0
 8001e96:	60f9      	str	r1, [r7, #12]
 8001e98:	68bd      	ldr	r5, [r7, #8]
 8001e9a:	68fe      	ldr	r6, [r7, #12]
 8001e9c:	0029      	movs	r1, r5
 8001e9e:	0f09      	lsrs	r1, r1, #28
 8001ea0:	0030      	movs	r0, r6
 8001ea2:	0104      	lsls	r4, r0, #4
 8001ea4:	430c      	orrs	r4, r1
 8001ea6:	0029      	movs	r1, r5
 8001ea8:	010b      	lsls	r3, r1, #4
 8001eaa:	0013      	movs	r3, r2
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	3301      	adds	r3, #1
 8001eb0:	3307      	adds	r3, #7
 8001eb2:	08db      	lsrs	r3, r3, #3
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	466a      	mov	r2, sp
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	469d      	mov	sp, r3
 8001ebc:	ab04      	add	r3, sp, #16
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	085b      	lsrs	r3, r3, #1
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	62bb      	str	r3, [r7, #40]	; 0x28
	int16_t rowOffset, address;

	for (int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 8001ec6:	2325      	movs	r3, #37	; 0x25
 8001ec8:	2218      	movs	r2, #24
 8001eca:	4694      	mov	ip, r2
 8001ecc:	44bc      	add	ip, r7
 8001ece:	4463      	add	r3, ip
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	701a      	strb	r2, [r3, #0]
 8001ed4:	e1f4      	b.n	80022c0 <drawChar+0x488>
		uint8_t line = font[ch*5+i];
 8001ed6:	231f      	movs	r3, #31
 8001ed8:	18fb      	adds	r3, r7, r3
 8001eda:	781a      	ldrb	r2, [r3, #0]
 8001edc:	0013      	movs	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	189a      	adds	r2, r3, r2
 8001ee2:	2325      	movs	r3, #37	; 0x25
 8001ee4:	2118      	movs	r1, #24
 8001ee6:	468c      	mov	ip, r1
 8001ee8:	44bc      	add	ip, r7
 8001eea:	4463      	add	r3, ip
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	b25b      	sxtb	r3, r3
 8001ef0:	18d2      	adds	r2, r2, r3
 8001ef2:	2324      	movs	r3, #36	; 0x24
 8001ef4:	2118      	movs	r1, #24
 8001ef6:	468c      	mov	ip, r1
 8001ef8:	44bc      	add	ip, r7
 8001efa:	4463      	add	r3, ip
 8001efc:	4993      	ldr	r1, [pc, #588]	; (800214c <drawChar+0x314>)
 8001efe:	5c8a      	ldrb	r2, [r1, r2]
 8001f00:	701a      	strb	r2, [r3, #0]
		for (int8_t j=0; j<8; j++, line >>= 1) {
 8001f02:	2323      	movs	r3, #35	; 0x23
 8001f04:	2218      	movs	r2, #24
 8001f06:	4694      	mov	ip, r2
 8001f08:	44bc      	add	ip, r7
 8001f0a:	4463      	add	r3, ip
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	701a      	strb	r2, [r3, #0]
 8001f10:	e1c0      	b.n	8002294 <drawChar+0x45c>
			if (line & 1) {
 8001f12:	2324      	movs	r3, #36	; 0x24
 8001f14:	2218      	movs	r2, #24
 8001f16:	4694      	mov	ip, r2
 8001f18:	44bc      	add	ip, r7
 8001f1a:	4463      	add	r3, ip
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	4013      	ands	r3, r2
 8001f22:	d100      	bne.n	8001f26 <drawChar+0xee>
 8001f24:	e0c8      	b.n	80020b8 <drawChar+0x280>
				if (textSize == 1) {
 8001f26:	4b88      	ldr	r3, [pc, #544]	; (8002148 <drawChar+0x310>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d11c      	bne.n	8001f68 <drawChar+0x130>
					buffer[i+j*6] = colorFixer(textColor);
 8001f2e:	4b88      	ldr	r3, [pc, #544]	; (8002150 <drawChar+0x318>)
 8001f30:	8818      	ldrh	r0, [r3, #0]
 8001f32:	2325      	movs	r3, #37	; 0x25
 8001f34:	2218      	movs	r2, #24
 8001f36:	4694      	mov	ip, r2
 8001f38:	44bc      	add	ip, r7
 8001f3a:	4463      	add	r3, ip
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	5659      	ldrsb	r1, [r3, r1]
 8001f40:	2323      	movs	r3, #35	; 0x23
 8001f42:	2218      	movs	r2, #24
 8001f44:	4694      	mov	ip, r2
 8001f46:	44bc      	add	ip, r7
 8001f48:	4463      	add	r3, ip
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	569a      	ldrsb	r2, [r3, r2]
 8001f4e:	0013      	movs	r3, r2
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	189b      	adds	r3, r3, r2
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	18cc      	adds	r4, r1, r3
 8001f58:	f7ff fe84 	bl	8001c64 <colorFixer>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	0019      	movs	r1, r3
 8001f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f62:	0062      	lsls	r2, r4, #1
 8001f64:	52d1      	strh	r1, [r2, r3]
 8001f66:	e17f      	b.n	8002268 <drawChar+0x430>
				}
				else {
					for (int8_t k = 0; k < textSize; k++) {
 8001f68:	2322      	movs	r3, #34	; 0x22
 8001f6a:	2218      	movs	r2, #24
 8001f6c:	4694      	mov	ip, r2
 8001f6e:	44bc      	add	ip, r7
 8001f70:	4463      	add	r3, ip
 8001f72:	2200      	movs	r2, #0
 8001f74:	701a      	strb	r2, [r3, #0]
 8001f76:	e092      	b.n	800209e <drawChar+0x266>
						rowOffset = textSize*6;
 8001f78:	4b73      	ldr	r3, [pc, #460]	; (8002148 <drawChar+0x310>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	1c1a      	adds	r2, r3, #0
 8001f80:	1c13      	adds	r3, r2, #0
 8001f82:	18db      	adds	r3, r3, r3
 8001f84:	189b      	adds	r3, r3, r2
 8001f86:	18db      	adds	r3, r3, r3
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	2326      	movs	r3, #38	; 0x26
 8001f8c:	2118      	movs	r1, #24
 8001f8e:	468c      	mov	ip, r1
 8001f90:	44bc      	add	ip, r7
 8001f92:	4463      	add	r3, ip
 8001f94:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 8001f96:	2321      	movs	r3, #33	; 0x21
 8001f98:	2218      	movs	r2, #24
 8001f9a:	4694      	mov	ip, r2
 8001f9c:	44bc      	add	ip, r7
 8001f9e:	4463      	add	r3, ip
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
 8001fa4:	e064      	b.n	8002070 <drawChar+0x238>
							address = (textSize*textSize*j*6)+(i*textSize);
 8001fa6:	4b68      	ldr	r3, [pc, #416]	; (8002148 <drawChar+0x310>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	4a66      	ldr	r2, [pc, #408]	; (8002148 <drawChar+0x310>)
 8001fae:	7812      	ldrb	r2, [r2, #0]
 8001fb0:	b292      	uxth	r2, r2
 8001fb2:	4353      	muls	r3, r2
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	2223      	movs	r2, #35	; 0x23
 8001fb8:	2118      	movs	r1, #24
 8001fba:	468c      	mov	ip, r1
 8001fbc:	44bc      	add	ip, r7
 8001fbe:	4462      	add	r2, ip
 8001fc0:	7812      	ldrb	r2, [r2, #0]
 8001fc2:	b252      	sxtb	r2, r2
 8001fc4:	b292      	uxth	r2, r2
 8001fc6:	4353      	muls	r3, r2
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	1c1a      	adds	r2, r3, #0
 8001fcc:	1c13      	adds	r3, r2, #0
 8001fce:	18db      	adds	r3, r3, r3
 8001fd0:	189b      	adds	r3, r3, r2
 8001fd2:	18db      	adds	r3, r3, r3
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	2325      	movs	r3, #37	; 0x25
 8001fd8:	2118      	movs	r1, #24
 8001fda:	468c      	mov	ip, r1
 8001fdc:	44bc      	add	ip, r7
 8001fde:	4463      	add	r3, ip
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	b25b      	sxtb	r3, r3
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	4958      	ldr	r1, [pc, #352]	; (8002148 <drawChar+0x310>)
 8001fe8:	7809      	ldrb	r1, [r1, #0]
 8001fea:	b289      	uxth	r1, r1
 8001fec:	434b      	muls	r3, r1
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	18d3      	adds	r3, r2, r3
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	210e      	movs	r1, #14
 8001ff6:	2018      	movs	r0, #24
 8001ff8:	183b      	adds	r3, r7, r0
 8001ffa:	185b      	adds	r3, r3, r1
 8001ffc:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 8001ffe:	2322      	movs	r3, #34	; 0x22
 8002000:	2218      	movs	r2, #24
 8002002:	4694      	mov	ip, r2
 8002004:	44bc      	add	ip, r7
 8002006:	4463      	add	r3, ip
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	b25b      	sxtb	r3, r3
 800200c:	b29b      	uxth	r3, r3
 800200e:	2226      	movs	r2, #38	; 0x26
 8002010:	2418      	movs	r4, #24
 8002012:	46a4      	mov	ip, r4
 8002014:	44bc      	add	ip, r7
 8002016:	4462      	add	r2, ip
 8002018:	8812      	ldrh	r2, [r2, #0]
 800201a:	4353      	muls	r3, r2
 800201c:	b29a      	uxth	r2, r3
 800201e:	2521      	movs	r5, #33	; 0x21
 8002020:	183b      	adds	r3, r7, r0
 8002022:	195b      	adds	r3, r3, r5
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	b25b      	sxtb	r3, r3
 8002028:	b29b      	uxth	r3, r3
 800202a:	18d3      	adds	r3, r2, r3
 800202c:	b29a      	uxth	r2, r3
 800202e:	183b      	adds	r3, r7, r0
 8002030:	185b      	adds	r3, r3, r1
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	18d3      	adds	r3, r2, r3
 8002036:	b29a      	uxth	r2, r3
 8002038:	183b      	adds	r3, r7, r0
 800203a:	185b      	adds	r3, r3, r1
 800203c:	801a      	strh	r2, [r3, #0]
							buffer[address] = colorFixer(textColor);
 800203e:	4b44      	ldr	r3, [pc, #272]	; (8002150 <drawChar+0x318>)
 8002040:	881a      	ldrh	r2, [r3, #0]
 8002042:	0006      	movs	r6, r0
 8002044:	183b      	adds	r3, r7, r0
 8002046:	185b      	adds	r3, r3, r1
 8002048:	2400      	movs	r4, #0
 800204a:	5f1c      	ldrsh	r4, [r3, r4]
 800204c:	0010      	movs	r0, r2
 800204e:	f7ff fe09 	bl	8001c64 <colorFixer>
 8002052:	0003      	movs	r3, r0
 8002054:	0019      	movs	r1, r3
 8002056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002058:	0062      	lsls	r2, r4, #1
 800205a:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 800205c:	19bb      	adds	r3, r7, r6
 800205e:	195b      	adds	r3, r3, r5
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	b25b      	sxtb	r3, r3
 8002064:	b2db      	uxtb	r3, r3
 8002066:	3301      	adds	r3, #1
 8002068:	b2da      	uxtb	r2, r3
 800206a:	19bb      	adds	r3, r7, r6
 800206c:	195b      	adds	r3, r3, r5
 800206e:	701a      	strb	r2, [r3, #0]
 8002070:	2321      	movs	r3, #33	; 0x21
 8002072:	2218      	movs	r2, #24
 8002074:	4694      	mov	ip, r2
 8002076:	44bc      	add	ip, r7
 8002078:	4463      	add	r3, ip
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	b25b      	sxtb	r3, r3
 800207e:	4a32      	ldr	r2, [pc, #200]	; (8002148 <drawChar+0x310>)
 8002080:	7812      	ldrb	r2, [r2, #0]
 8002082:	4293      	cmp	r3, r2
 8002084:	db8f      	blt.n	8001fa6 <drawChar+0x16e>
					for (int8_t k = 0; k < textSize; k++) {
 8002086:	2122      	movs	r1, #34	; 0x22
 8002088:	2018      	movs	r0, #24
 800208a:	183b      	adds	r3, r7, r0
 800208c:	185b      	adds	r3, r3, r1
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	b25b      	sxtb	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	3301      	adds	r3, #1
 8002096:	b2da      	uxtb	r2, r3
 8002098:	183b      	adds	r3, r7, r0
 800209a:	185b      	adds	r3, r3, r1
 800209c:	701a      	strb	r2, [r3, #0]
 800209e:	2322      	movs	r3, #34	; 0x22
 80020a0:	2218      	movs	r2, #24
 80020a2:	4694      	mov	ip, r2
 80020a4:	44bc      	add	ip, r7
 80020a6:	4463      	add	r3, ip
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	b25b      	sxtb	r3, r3
 80020ac:	4a26      	ldr	r2, [pc, #152]	; (8002148 <drawChar+0x310>)
 80020ae:	7812      	ldrb	r2, [r2, #0]
 80020b0:	4293      	cmp	r3, r2
 80020b2:	da00      	bge.n	80020b6 <drawChar+0x27e>
 80020b4:	e760      	b.n	8001f78 <drawChar+0x140>
 80020b6:	e0d7      	b.n	8002268 <drawChar+0x430>
						}
					}
//					fillRect(cursorX+i*textSize, cursorY+j*textSize, textSize, textSize, textColor, hspi);
				}
			} else if (bg != textColor) {
 80020b8:	4b26      	ldr	r3, [pc, #152]	; (8002154 <drawChar+0x31c>)
 80020ba:	881a      	ldrh	r2, [r3, #0]
 80020bc:	4b24      	ldr	r3, [pc, #144]	; (8002150 <drawChar+0x318>)
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d100      	bne.n	80020c6 <drawChar+0x28e>
 80020c4:	e0d0      	b.n	8002268 <drawChar+0x430>
				if (textSize == 1) {
 80020c6:	4b20      	ldr	r3, [pc, #128]	; (8002148 <drawChar+0x310>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d11c      	bne.n	8002108 <drawChar+0x2d0>
					buffer[i+j*6] = colorFixer(bg);
 80020ce:	4b21      	ldr	r3, [pc, #132]	; (8002154 <drawChar+0x31c>)
 80020d0:	8818      	ldrh	r0, [r3, #0]
 80020d2:	2325      	movs	r3, #37	; 0x25
 80020d4:	2218      	movs	r2, #24
 80020d6:	4694      	mov	ip, r2
 80020d8:	44bc      	add	ip, r7
 80020da:	4463      	add	r3, ip
 80020dc:	2100      	movs	r1, #0
 80020de:	5659      	ldrsb	r1, [r3, r1]
 80020e0:	2323      	movs	r3, #35	; 0x23
 80020e2:	2218      	movs	r2, #24
 80020e4:	4694      	mov	ip, r2
 80020e6:	44bc      	add	ip, r7
 80020e8:	4463      	add	r3, ip
 80020ea:	2200      	movs	r2, #0
 80020ec:	569a      	ldrsb	r2, [r3, r2]
 80020ee:	0013      	movs	r3, r2
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	189b      	adds	r3, r3, r2
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	18cc      	adds	r4, r1, r3
 80020f8:	f7ff fdb4 	bl	8001c64 <colorFixer>
 80020fc:	0003      	movs	r3, r0
 80020fe:	0019      	movs	r1, r3
 8002100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002102:	0062      	lsls	r2, r4, #1
 8002104:	52d1      	strh	r1, [r2, r3]
 8002106:	e0af      	b.n	8002268 <drawChar+0x430>
				}
				else {
					for (int8_t k = 0; k < textSize; k++) {
 8002108:	2320      	movs	r3, #32
 800210a:	2218      	movs	r2, #24
 800210c:	4694      	mov	ip, r2
 800210e:	44bc      	add	ip, r7
 8002110:	4463      	add	r3, ip
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]
 8002116:	e09b      	b.n	8002250 <drawChar+0x418>
						rowOffset = textSize*6;
 8002118:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <drawChar+0x310>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b29b      	uxth	r3, r3
 800211e:	1c1a      	adds	r2, r3, #0
 8002120:	1c13      	adds	r3, r2, #0
 8002122:	18db      	adds	r3, r3, r3
 8002124:	189b      	adds	r3, r3, r2
 8002126:	18db      	adds	r3, r3, r3
 8002128:	b29a      	uxth	r2, r3
 800212a:	2326      	movs	r3, #38	; 0x26
 800212c:	2118      	movs	r1, #24
 800212e:	468c      	mov	ip, r1
 8002130:	44bc      	add	ip, r7
 8002132:	4463      	add	r3, ip
 8002134:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 8002136:	231f      	movs	r3, #31
 8002138:	2218      	movs	r2, #24
 800213a:	4694      	mov	ip, r2
 800213c:	44bc      	add	ip, r7
 800213e:	4463      	add	r3, ip
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]
 8002144:	e06d      	b.n	8002222 <drawChar+0x3ea>
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	2000008a 	.word	0x2000008a
 800214c:	08008bdc 	.word	0x08008bdc
 8002150:	2000008c 	.word	0x2000008c
 8002154:	2000008e 	.word	0x2000008e
							address = (textSize*textSize*j*6)+(i*textSize);
 8002158:	4bda      	ldr	r3, [pc, #872]	; (80024c4 <drawChar+0x68c>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	b29b      	uxth	r3, r3
 800215e:	4ad9      	ldr	r2, [pc, #868]	; (80024c4 <drawChar+0x68c>)
 8002160:	7812      	ldrb	r2, [r2, #0]
 8002162:	b292      	uxth	r2, r2
 8002164:	4353      	muls	r3, r2
 8002166:	b29b      	uxth	r3, r3
 8002168:	2223      	movs	r2, #35	; 0x23
 800216a:	2118      	movs	r1, #24
 800216c:	468c      	mov	ip, r1
 800216e:	44bc      	add	ip, r7
 8002170:	4462      	add	r2, ip
 8002172:	7812      	ldrb	r2, [r2, #0]
 8002174:	b252      	sxtb	r2, r2
 8002176:	b292      	uxth	r2, r2
 8002178:	4353      	muls	r3, r2
 800217a:	b29b      	uxth	r3, r3
 800217c:	1c1a      	adds	r2, r3, #0
 800217e:	1c13      	adds	r3, r2, #0
 8002180:	18db      	adds	r3, r3, r3
 8002182:	189b      	adds	r3, r3, r2
 8002184:	18db      	adds	r3, r3, r3
 8002186:	b29a      	uxth	r2, r3
 8002188:	2325      	movs	r3, #37	; 0x25
 800218a:	2118      	movs	r1, #24
 800218c:	468c      	mov	ip, r1
 800218e:	44bc      	add	ip, r7
 8002190:	4463      	add	r3, ip
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	b25b      	sxtb	r3, r3
 8002196:	b29b      	uxth	r3, r3
 8002198:	49ca      	ldr	r1, [pc, #808]	; (80024c4 <drawChar+0x68c>)
 800219a:	7809      	ldrb	r1, [r1, #0]
 800219c:	b289      	uxth	r1, r1
 800219e:	434b      	muls	r3, r1
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	18d3      	adds	r3, r2, r3
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	210e      	movs	r1, #14
 80021a8:	2018      	movs	r0, #24
 80021aa:	183b      	adds	r3, r7, r0
 80021ac:	185b      	adds	r3, r3, r1
 80021ae:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 80021b0:	2320      	movs	r3, #32
 80021b2:	2218      	movs	r2, #24
 80021b4:	4694      	mov	ip, r2
 80021b6:	44bc      	add	ip, r7
 80021b8:	4463      	add	r3, ip
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	b25b      	sxtb	r3, r3
 80021be:	b29b      	uxth	r3, r3
 80021c0:	2226      	movs	r2, #38	; 0x26
 80021c2:	2418      	movs	r4, #24
 80021c4:	46a4      	mov	ip, r4
 80021c6:	44bc      	add	ip, r7
 80021c8:	4462      	add	r2, ip
 80021ca:	8812      	ldrh	r2, [r2, #0]
 80021cc:	4353      	muls	r3, r2
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	251f      	movs	r5, #31
 80021d2:	183b      	adds	r3, r7, r0
 80021d4:	195b      	adds	r3, r3, r5
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	b25b      	sxtb	r3, r3
 80021da:	b29b      	uxth	r3, r3
 80021dc:	18d3      	adds	r3, r2, r3
 80021de:	b29a      	uxth	r2, r3
 80021e0:	183b      	adds	r3, r7, r0
 80021e2:	185b      	adds	r3, r3, r1
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	18d3      	adds	r3, r2, r3
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	183b      	adds	r3, r7, r0
 80021ec:	185b      	adds	r3, r3, r1
 80021ee:	801a      	strh	r2, [r3, #0]
							buffer[address] = colorFixer(bg);
 80021f0:	4bb5      	ldr	r3, [pc, #724]	; (80024c8 <drawChar+0x690>)
 80021f2:	881a      	ldrh	r2, [r3, #0]
 80021f4:	0006      	movs	r6, r0
 80021f6:	183b      	adds	r3, r7, r0
 80021f8:	185b      	adds	r3, r3, r1
 80021fa:	2400      	movs	r4, #0
 80021fc:	5f1c      	ldrsh	r4, [r3, r4]
 80021fe:	0010      	movs	r0, r2
 8002200:	f7ff fd30 	bl	8001c64 <colorFixer>
 8002204:	0003      	movs	r3, r0
 8002206:	0019      	movs	r1, r3
 8002208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220a:	0062      	lsls	r2, r4, #1
 800220c:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 800220e:	19bb      	adds	r3, r7, r6
 8002210:	195b      	adds	r3, r3, r5
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	b25b      	sxtb	r3, r3
 8002216:	b2db      	uxtb	r3, r3
 8002218:	3301      	adds	r3, #1
 800221a:	b2da      	uxtb	r2, r3
 800221c:	19bb      	adds	r3, r7, r6
 800221e:	195b      	adds	r3, r3, r5
 8002220:	701a      	strb	r2, [r3, #0]
 8002222:	231f      	movs	r3, #31
 8002224:	2218      	movs	r2, #24
 8002226:	4694      	mov	ip, r2
 8002228:	44bc      	add	ip, r7
 800222a:	4463      	add	r3, ip
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	b25b      	sxtb	r3, r3
 8002230:	4aa4      	ldr	r2, [pc, #656]	; (80024c4 <drawChar+0x68c>)
 8002232:	7812      	ldrb	r2, [r2, #0]
 8002234:	4293      	cmp	r3, r2
 8002236:	db8f      	blt.n	8002158 <drawChar+0x320>
					for (int8_t k = 0; k < textSize; k++) {
 8002238:	2120      	movs	r1, #32
 800223a:	2018      	movs	r0, #24
 800223c:	183b      	adds	r3, r7, r0
 800223e:	185b      	adds	r3, r3, r1
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	b25b      	sxtb	r3, r3
 8002244:	b2db      	uxtb	r3, r3
 8002246:	3301      	adds	r3, #1
 8002248:	b2da      	uxtb	r2, r3
 800224a:	183b      	adds	r3, r7, r0
 800224c:	185b      	adds	r3, r3, r1
 800224e:	701a      	strb	r2, [r3, #0]
 8002250:	2320      	movs	r3, #32
 8002252:	2218      	movs	r2, #24
 8002254:	4694      	mov	ip, r2
 8002256:	44bc      	add	ip, r7
 8002258:	4463      	add	r3, ip
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	b25b      	sxtb	r3, r3
 800225e:	4a99      	ldr	r2, [pc, #612]	; (80024c4 <drawChar+0x68c>)
 8002260:	7812      	ldrb	r2, [r2, #0]
 8002262:	4293      	cmp	r3, r2
 8002264:	da00      	bge.n	8002268 <drawChar+0x430>
 8002266:	e757      	b.n	8002118 <drawChar+0x2e0>
		for (int8_t j=0; j<8; j++, line >>= 1) {
 8002268:	2123      	movs	r1, #35	; 0x23
 800226a:	2018      	movs	r0, #24
 800226c:	183b      	adds	r3, r7, r0
 800226e:	185b      	adds	r3, r3, r1
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	b25b      	sxtb	r3, r3
 8002274:	b2db      	uxtb	r3, r3
 8002276:	3301      	adds	r3, #1
 8002278:	b2da      	uxtb	r2, r3
 800227a:	183b      	adds	r3, r7, r0
 800227c:	185b      	adds	r3, r3, r1
 800227e:	701a      	strb	r2, [r3, #0]
 8002280:	2224      	movs	r2, #36	; 0x24
 8002282:	183b      	adds	r3, r7, r0
 8002284:	189b      	adds	r3, r3, r2
 8002286:	2118      	movs	r1, #24
 8002288:	468c      	mov	ip, r1
 800228a:	44bc      	add	ip, r7
 800228c:	4462      	add	r2, ip
 800228e:	7812      	ldrb	r2, [r2, #0]
 8002290:	0852      	lsrs	r2, r2, #1
 8002292:	701a      	strb	r2, [r3, #0]
 8002294:	2323      	movs	r3, #35	; 0x23
 8002296:	2218      	movs	r2, #24
 8002298:	4694      	mov	ip, r2
 800229a:	44bc      	add	ip, r7
 800229c:	4463      	add	r3, ip
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	b25b      	sxtb	r3, r3
 80022a2:	2b07      	cmp	r3, #7
 80022a4:	dc00      	bgt.n	80022a8 <drawChar+0x470>
 80022a6:	e634      	b.n	8001f12 <drawChar+0xda>
	for (int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 80022a8:	2125      	movs	r1, #37	; 0x25
 80022aa:	2018      	movs	r0, #24
 80022ac:	183b      	adds	r3, r7, r0
 80022ae:	185b      	adds	r3, r3, r1
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	b25b      	sxtb	r3, r3
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	3301      	adds	r3, #1
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	183b      	adds	r3, r7, r0
 80022bc:	185b      	adds	r3, r3, r1
 80022be:	701a      	strb	r2, [r3, #0]
 80022c0:	2325      	movs	r3, #37	; 0x25
 80022c2:	2218      	movs	r2, #24
 80022c4:	4694      	mov	ip, r2
 80022c6:	44bc      	add	ip, r7
 80022c8:	4463      	add	r3, ip
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	b25b      	sxtb	r3, r3
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	dc00      	bgt.n	80022d4 <drawChar+0x49c>
 80022d2:	e600      	b.n	8001ed6 <drawChar+0x9e>
				}
			}
		}
	}

	if (bg != textColor) { // If opaque, draw vertical line for last column
 80022d4:	4b7c      	ldr	r3, [pc, #496]	; (80024c8 <drawChar+0x690>)
 80022d6:	881a      	ldrh	r2, [r3, #0]
 80022d8:	4b7c      	ldr	r3, [pc, #496]	; (80024cc <drawChar+0x694>)
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d100      	bne.n	80022e2 <drawChar+0x4aa>
 80022e0:	e0ca      	b.n	8002478 <drawChar+0x640>
		for (int8_t j = 0; j < 8; j++) {
 80022e2:	231e      	movs	r3, #30
 80022e4:	2218      	movs	r2, #24
 80022e6:	4694      	mov	ip, r2
 80022e8:	44bc      	add	ip, r7
 80022ea:	4463      	add	r3, ip
 80022ec:	2200      	movs	r2, #0
 80022ee:	701a      	strb	r2, [r3, #0]
 80022f0:	e0b8      	b.n	8002464 <drawChar+0x62c>
			if (textSize == 1) {
 80022f2:	4b74      	ldr	r3, [pc, #464]	; (80024c4 <drawChar+0x68c>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d116      	bne.n	8002328 <drawChar+0x4f0>
				buffer[5+j*6] = colorFixer(bg);
 80022fa:	4b73      	ldr	r3, [pc, #460]	; (80024c8 <drawChar+0x690>)
 80022fc:	8819      	ldrh	r1, [r3, #0]
 80022fe:	231e      	movs	r3, #30
 8002300:	2218      	movs	r2, #24
 8002302:	4694      	mov	ip, r2
 8002304:	44bc      	add	ip, r7
 8002306:	4463      	add	r3, ip
 8002308:	2200      	movs	r2, #0
 800230a:	569a      	ldrsb	r2, [r3, r2]
 800230c:	0013      	movs	r3, r2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	189b      	adds	r3, r3, r2
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	1d5c      	adds	r4, r3, #5
 8002316:	0008      	movs	r0, r1
 8002318:	f7ff fca4 	bl	8001c64 <colorFixer>
 800231c:	0003      	movs	r3, r0
 800231e:	0019      	movs	r1, r3
 8002320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002322:	0062      	lsls	r2, r4, #1
 8002324:	52d1      	strh	r1, [r2, r3]
 8002326:	e091      	b.n	800244c <drawChar+0x614>
			}
			else {
				for (int8_t k = 0; k < textSize; k++) {
 8002328:	231d      	movs	r3, #29
 800232a:	2218      	movs	r2, #24
 800232c:	4694      	mov	ip, r2
 800232e:	44bc      	add	ip, r7
 8002330:	4463      	add	r3, ip
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]
 8002336:	e07d      	b.n	8002434 <drawChar+0x5fc>
					for (int8_t l = 0; l < textSize; l++) {
 8002338:	231c      	movs	r3, #28
 800233a:	2218      	movs	r2, #24
 800233c:	4694      	mov	ip, r2
 800233e:	44bc      	add	ip, r7
 8002340:	4463      	add	r3, ip
 8002342:	2200      	movs	r2, #0
 8002344:	701a      	strb	r2, [r3, #0]
 8002346:	e05e      	b.n	8002406 <drawChar+0x5ce>
						address = (textSize*textSize*j*6)+(5*textSize);
 8002348:	4b5e      	ldr	r3, [pc, #376]	; (80024c4 <drawChar+0x68c>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	b29b      	uxth	r3, r3
 800234e:	4a5d      	ldr	r2, [pc, #372]	; (80024c4 <drawChar+0x68c>)
 8002350:	7812      	ldrb	r2, [r2, #0]
 8002352:	b292      	uxth	r2, r2
 8002354:	4353      	muls	r3, r2
 8002356:	b29b      	uxth	r3, r3
 8002358:	221e      	movs	r2, #30
 800235a:	2118      	movs	r1, #24
 800235c:	468c      	mov	ip, r1
 800235e:	44bc      	add	ip, r7
 8002360:	4462      	add	r2, ip
 8002362:	7812      	ldrb	r2, [r2, #0]
 8002364:	b252      	sxtb	r2, r2
 8002366:	b292      	uxth	r2, r2
 8002368:	4353      	muls	r3, r2
 800236a:	b29b      	uxth	r3, r3
 800236c:	1c1a      	adds	r2, r3, #0
 800236e:	1c13      	adds	r3, r2, #0
 8002370:	18db      	adds	r3, r3, r3
 8002372:	189b      	adds	r3, r3, r2
 8002374:	18db      	adds	r3, r3, r3
 8002376:	b29a      	uxth	r2, r3
 8002378:	4b52      	ldr	r3, [pc, #328]	; (80024c4 <drawChar+0x68c>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	b29b      	uxth	r3, r3
 800237e:	1c19      	adds	r1, r3, #0
 8002380:	0089      	lsls	r1, r1, #2
 8002382:	18cb      	adds	r3, r1, r3
 8002384:	b29b      	uxth	r3, r3
 8002386:	18d3      	adds	r3, r2, r3
 8002388:	b29a      	uxth	r2, r3
 800238a:	210e      	movs	r1, #14
 800238c:	2018      	movs	r0, #24
 800238e:	183b      	adds	r3, r7, r0
 8002390:	185b      	adds	r3, r3, r1
 8002392:	801a      	strh	r2, [r3, #0]
						address += rowOffset*k+l;
 8002394:	231d      	movs	r3, #29
 8002396:	2218      	movs	r2, #24
 8002398:	4694      	mov	ip, r2
 800239a:	44bc      	add	ip, r7
 800239c:	4463      	add	r3, ip
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	b25b      	sxtb	r3, r3
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	2226      	movs	r2, #38	; 0x26
 80023a6:	2418      	movs	r4, #24
 80023a8:	46a4      	mov	ip, r4
 80023aa:	44bc      	add	ip, r7
 80023ac:	4462      	add	r2, ip
 80023ae:	8812      	ldrh	r2, [r2, #0]
 80023b0:	4353      	muls	r3, r2
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	251c      	movs	r5, #28
 80023b6:	183b      	adds	r3, r7, r0
 80023b8:	195b      	adds	r3, r3, r5
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	b25b      	sxtb	r3, r3
 80023be:	b29b      	uxth	r3, r3
 80023c0:	18d3      	adds	r3, r2, r3
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	183b      	adds	r3, r7, r0
 80023c6:	185b      	adds	r3, r3, r1
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	18d3      	adds	r3, r2, r3
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	183b      	adds	r3, r7, r0
 80023d0:	185b      	adds	r3, r3, r1
 80023d2:	801a      	strh	r2, [r3, #0]
						buffer[address] = colorFixer(bg);
 80023d4:	4b3c      	ldr	r3, [pc, #240]	; (80024c8 <drawChar+0x690>)
 80023d6:	881a      	ldrh	r2, [r3, #0]
 80023d8:	0006      	movs	r6, r0
 80023da:	183b      	adds	r3, r7, r0
 80023dc:	185b      	adds	r3, r3, r1
 80023de:	2400      	movs	r4, #0
 80023e0:	5f1c      	ldrsh	r4, [r3, r4]
 80023e2:	0010      	movs	r0, r2
 80023e4:	f7ff fc3e 	bl	8001c64 <colorFixer>
 80023e8:	0003      	movs	r3, r0
 80023ea:	0019      	movs	r1, r3
 80023ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ee:	0062      	lsls	r2, r4, #1
 80023f0:	52d1      	strh	r1, [r2, r3]
					for (int8_t l = 0; l < textSize; l++) {
 80023f2:	19bb      	adds	r3, r7, r6
 80023f4:	195b      	adds	r3, r3, r5
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	b25b      	sxtb	r3, r3
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	3301      	adds	r3, #1
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	19bb      	adds	r3, r7, r6
 8002402:	195b      	adds	r3, r3, r5
 8002404:	701a      	strb	r2, [r3, #0]
 8002406:	231c      	movs	r3, #28
 8002408:	2218      	movs	r2, #24
 800240a:	4694      	mov	ip, r2
 800240c:	44bc      	add	ip, r7
 800240e:	4463      	add	r3, ip
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	b25b      	sxtb	r3, r3
 8002414:	4a2b      	ldr	r2, [pc, #172]	; (80024c4 <drawChar+0x68c>)
 8002416:	7812      	ldrb	r2, [r2, #0]
 8002418:	4293      	cmp	r3, r2
 800241a:	db95      	blt.n	8002348 <drawChar+0x510>
				for (int8_t k = 0; k < textSize; k++) {
 800241c:	211d      	movs	r1, #29
 800241e:	2018      	movs	r0, #24
 8002420:	183b      	adds	r3, r7, r0
 8002422:	185b      	adds	r3, r3, r1
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	b25b      	sxtb	r3, r3
 8002428:	b2db      	uxtb	r3, r3
 800242a:	3301      	adds	r3, #1
 800242c:	b2da      	uxtb	r2, r3
 800242e:	183b      	adds	r3, r7, r0
 8002430:	185b      	adds	r3, r3, r1
 8002432:	701a      	strb	r2, [r3, #0]
 8002434:	231d      	movs	r3, #29
 8002436:	2218      	movs	r2, #24
 8002438:	4694      	mov	ip, r2
 800243a:	44bc      	add	ip, r7
 800243c:	4463      	add	r3, ip
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	b25b      	sxtb	r3, r3
 8002442:	4a20      	ldr	r2, [pc, #128]	; (80024c4 <drawChar+0x68c>)
 8002444:	7812      	ldrb	r2, [r2, #0]
 8002446:	4293      	cmp	r3, r2
 8002448:	da00      	bge.n	800244c <drawChar+0x614>
 800244a:	e775      	b.n	8002338 <drawChar+0x500>
		for (int8_t j = 0; j < 8; j++) {
 800244c:	211e      	movs	r1, #30
 800244e:	2018      	movs	r0, #24
 8002450:	183b      	adds	r3, r7, r0
 8002452:	185b      	adds	r3, r3, r1
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	b25b      	sxtb	r3, r3
 8002458:	b2db      	uxtb	r3, r3
 800245a:	3301      	adds	r3, #1
 800245c:	b2da      	uxtb	r2, r3
 800245e:	183b      	adds	r3, r7, r0
 8002460:	185b      	adds	r3, r3, r1
 8002462:	701a      	strb	r2, [r3, #0]
 8002464:	231e      	movs	r3, #30
 8002466:	2218      	movs	r2, #24
 8002468:	4694      	mov	ip, r2
 800246a:	44bc      	add	ip, r7
 800246c:	4463      	add	r3, ip
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	b25b      	sxtb	r3, r3
 8002472:	2b07      	cmp	r3, #7
 8002474:	dc00      	bgt.n	8002478 <drawChar+0x640>
 8002476:	e73c      	b.n	80022f2 <drawChar+0x4ba>
			}
		}
//		else fillRect(cursorX+5*textSize, cursorY, textSize, 8*textSize, bg, hspi);
	}

	drawBuffer(cursorX, cursorY, 6*textSize, 8*textSize, buffer, bufferSize, hspi);
 8002478:	4b15      	ldr	r3, [pc, #84]	; (80024d0 <drawChar+0x698>)
 800247a:	7818      	ldrb	r0, [r3, #0]
 800247c:	4b15      	ldr	r3, [pc, #84]	; (80024d4 <drawChar+0x69c>)
 800247e:	7819      	ldrb	r1, [r3, #0]
 8002480:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <drawChar+0x68c>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	1c1a      	adds	r2, r3, #0
 8002486:	1c13      	adds	r3, r2, #0
 8002488:	18db      	adds	r3, r3, r3
 800248a:	189b      	adds	r3, r3, r2
 800248c:	18db      	adds	r3, r3, r3
 800248e:	b2dc      	uxtb	r4, r3
 8002490:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <drawChar+0x68c>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	b2dd      	uxtb	r5, r3
 8002498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	9202      	str	r2, [sp, #8]
 800249e:	221a      	movs	r2, #26
 80024a0:	2618      	movs	r6, #24
 80024a2:	46b4      	mov	ip, r6
 80024a4:	44bc      	add	ip, r7
 80024a6:	4462      	add	r2, ip
 80024a8:	8812      	ldrh	r2, [r2, #0]
 80024aa:	9201      	str	r2, [sp, #4]
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	002b      	movs	r3, r5
 80024b0:	0022      	movs	r2, r4
 80024b2:	f7ff fbfb 	bl	8001cac <drawBuffer>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	469d      	mov	sp, r3
//	setCursor(cursorX+6, cursorY);
}
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	46bd      	mov	sp, r7
 80024be:	b011      	add	sp, #68	; 0x44
 80024c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	2000008a 	.word	0x2000008a
 80024c8:	2000008e 	.word	0x2000008e
 80024cc:	2000008c 	.word	0x2000008c
 80024d0:	20000088 	.word	0x20000088
 80024d4:	20000089 	.word	0x20000089

080024d8 <drawTextAt>:
		drawChar(str[i], hspi);
		setCursor(cursorX+textSize*6, cursorY);
	}
}

void drawTextAt(uint8_t x, uint8_t y, const char *str, SPI_HandleTypeDef *hspi) {
 80024d8:	b590      	push	{r4, r7, lr}
 80024da:	b087      	sub	sp, #28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60ba      	str	r2, [r7, #8]
 80024e0:	607b      	str	r3, [r7, #4]
 80024e2:	240f      	movs	r4, #15
 80024e4:	193b      	adds	r3, r7, r4
 80024e6:	1c02      	adds	r2, r0, #0
 80024e8:	701a      	strb	r2, [r3, #0]
 80024ea:	200e      	movs	r0, #14
 80024ec:	183b      	adds	r3, r7, r0
 80024ee:	1c0a      	adds	r2, r1, #0
 80024f0:	701a      	strb	r2, [r3, #0]
	// add text wrap
	int i = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
	setCursor(x,y);
 80024f6:	183b      	adds	r3, r7, r0
 80024f8:	781a      	ldrb	r2, [r3, #0]
 80024fa:	193b      	adds	r3, r7, r4
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	0011      	movs	r1, r2
 8002500:	0018      	movs	r0, r3
 8002502:	f000 f841 	bl	8002588 <setCursor>
	for (i = 0; str[i] != '\0'; i++) {
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	e01d      	b.n	8002548 <drawTextAt+0x70>
		drawChar(str[i], hspi);
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	18d3      	adds	r3, r2, r3
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	0011      	movs	r1, r2
 8002518:	0018      	movs	r0, r3
 800251a:	f7ff fc8d 	bl	8001e38 <drawChar>
		setCursor(cursorX+textSize*6, cursorY);
 800251e:	4b0f      	ldr	r3, [pc, #60]	; (800255c <drawTextAt+0x84>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	1c1a      	adds	r2, r3, #0
 8002524:	1c13      	adds	r3, r2, #0
 8002526:	18db      	adds	r3, r3, r3
 8002528:	189b      	adds	r3, r3, r2
 800252a:	18db      	adds	r3, r3, r3
 800252c:	b2da      	uxtb	r2, r3
 800252e:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <drawTextAt+0x88>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	18d3      	adds	r3, r2, r3
 8002534:	b2da      	uxtb	r2, r3
 8002536:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <drawTextAt+0x8c>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	0019      	movs	r1, r3
 800253c:	0010      	movs	r0, r2
 800253e:	f000 f823 	bl	8002588 <setCursor>
	for (i = 0; str[i] != '\0'; i++) {
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	3301      	adds	r3, #1
 8002546:	617b      	str	r3, [r7, #20]
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	18d3      	adds	r3, r2, r3
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1db      	bne.n	800250c <drawTextAt+0x34>
	}
//	setCursor(x+i*textSize*6, y);
}
 8002554:	46c0      	nop			; (mov r8, r8)
 8002556:	46bd      	mov	sp, r7
 8002558:	b007      	add	sp, #28
 800255a:	bd90      	pop	{r4, r7, pc}
 800255c:	2000008a 	.word	0x2000008a
 8002560:	20000088 	.word	0x20000088
 8002564:	20000089 	.word	0x20000089

08002568 <setBackgroundColor>:

void setBackgroundColor(uint16_t color) {bg = color;}
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	0002      	movs	r2, r0
 8002570:	1dbb      	adds	r3, r7, #6
 8002572:	801a      	strh	r2, [r3, #0]
 8002574:	4b03      	ldr	r3, [pc, #12]	; (8002584 <setBackgroundColor+0x1c>)
 8002576:	1dba      	adds	r2, r7, #6
 8002578:	8812      	ldrh	r2, [r2, #0]
 800257a:	801a      	strh	r2, [r3, #0]
 800257c:	46c0      	nop			; (mov r8, r8)
 800257e:	46bd      	mov	sp, r7
 8002580:	b002      	add	sp, #8
 8002582:	bd80      	pop	{r7, pc}
 8002584:	2000008e 	.word	0x2000008e

08002588 <setCursor>:

void setCursor(uint8_t x, uint8_t y) {
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	0002      	movs	r2, r0
 8002590:	1dfb      	adds	r3, r7, #7
 8002592:	701a      	strb	r2, [r3, #0]
 8002594:	1dbb      	adds	r3, r7, #6
 8002596:	1c0a      	adds	r2, r1, #0
 8002598:	701a      	strb	r2, [r3, #0]
	cursorX = x;
 800259a:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <setCursor+0x2c>)
 800259c:	1dfa      	adds	r2, r7, #7
 800259e:	7812      	ldrb	r2, [r2, #0]
 80025a0:	701a      	strb	r2, [r3, #0]
	cursorY = y;
 80025a2:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <setCursor+0x30>)
 80025a4:	1dba      	adds	r2, r7, #6
 80025a6:	7812      	ldrb	r2, [r2, #0]
 80025a8:	701a      	strb	r2, [r3, #0]
}
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	46bd      	mov	sp, r7
 80025ae:	b002      	add	sp, #8
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	46c0      	nop			; (mov r8, r8)
 80025b4:	20000088 	.word	0x20000088
 80025b8:	20000089 	.word	0x20000089

080025bc <setTextSize>:

void setTextSize(uint8_t size) {textSize = size;}
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	0002      	movs	r2, r0
 80025c4:	1dfb      	adds	r3, r7, #7
 80025c6:	701a      	strb	r2, [r3, #0]
 80025c8:	4b03      	ldr	r3, [pc, #12]	; (80025d8 <setTextSize+0x1c>)
 80025ca:	1dfa      	adds	r2, r7, #7
 80025cc:	7812      	ldrb	r2, [r2, #0]
 80025ce:	701a      	strb	r2, [r3, #0]
 80025d0:	46c0      	nop			; (mov r8, r8)
 80025d2:	46bd      	mov	sp, r7
 80025d4:	b002      	add	sp, #8
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	2000008a 	.word	0x2000008a

080025dc <setTextColor>:

void setTextColor(uint16_t color) {textColor = color;}
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	0002      	movs	r2, r0
 80025e4:	1dbb      	adds	r3, r7, #6
 80025e6:	801a      	strh	r2, [r3, #0]
 80025e8:	4b03      	ldr	r3, [pc, #12]	; (80025f8 <setTextColor+0x1c>)
 80025ea:	1dba      	adds	r2, r7, #6
 80025ec:	8812      	ldrh	r2, [r2, #0]
 80025ee:	801a      	strh	r2, [r3, #0]
 80025f0:	46c0      	nop			; (mov r8, r8)
 80025f2:	46bd      	mov	sp, r7
 80025f4:	b002      	add	sp, #8
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	2000008c 	.word	0x2000008c

080025fc <clearScreen>:

void clearScreen(uint16_t backgroundColor, SPI_HandleTypeDef *hspi) {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	0002      	movs	r2, r0
 8002604:	6039      	str	r1, [r7, #0]
 8002606:	1dbb      	adds	r3, r7, #6
 8002608:	801a      	strh	r2, [r3, #0]
	bg = backgroundColor;
 800260a:	4b07      	ldr	r3, [pc, #28]	; (8002628 <clearScreen+0x2c>)
 800260c:	1dba      	adds	r2, r7, #6
 800260e:	8812      	ldrh	r2, [r2, #0]
 8002610:	801a      	strh	r2, [r3, #0]
	fillScreen(backgroundColor, hspi);
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	1dbb      	adds	r3, r7, #6
 8002616:	881b      	ldrh	r3, [r3, #0]
 8002618:	0011      	movs	r1, r2
 800261a:	0018      	movs	r0, r3
 800261c:	f7ff fb90 	bl	8001d40 <fillScreen>
}
 8002620:	46c0      	nop			; (mov r8, r8)
 8002622:	46bd      	mov	sp, r7
 8002624:	b002      	add	sp, #8
 8002626:	bd80      	pop	{r7, pc}
 8002628:	2000008e 	.word	0x2000008e

0800262c <batteryManager>:
	batterySum += 3.3*hadc->Instance->DR/(1<<12);
	if (sampleIndex < NUM_SAMPLES) HAL_ADC_Start_IT(hadc);
	else ++sampleIndex;
}

void batteryManager(ADC_HandleTypeDef *hadc, SPI_HandleTypeDef *hspi) {
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
	if (canSampleBattery) {
 8002636:	4b21      	ldr	r3, [pc, #132]	; (80026bc <batteryManager+0x90>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	d038      	beq.n	80026b2 <batteryManager+0x86>
		canSampleBattery = 0;
 8002640:	4b1e      	ldr	r3, [pc, #120]	; (80026bc <batteryManager+0x90>)
 8002642:	2200      	movs	r2, #0
 8002644:	701a      	strb	r2, [r3, #0]

		battPercentage = getBatteryPercentage(hadc);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	0018      	movs	r0, r3
 800264a:	f000 f83f 	bl	80026cc <getBatteryPercentage>
 800264e:	0003      	movs	r3, r0
 8002650:	001a      	movs	r2, r3
 8002652:	4b1b      	ldr	r3, [pc, #108]	; (80026c0 <batteryManager+0x94>)
 8002654:	701a      	strb	r2, [r3, #0]

		// start low-power mode and set flag
		if (battPercentage <= 15) {
 8002656:	4b1a      	ldr	r3, [pc, #104]	; (80026c0 <batteryManager+0x94>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b0f      	cmp	r3, #15
 800265c:	d803      	bhi.n	8002666 <batteryManager+0x3a>
			// start turning off some hardware
			bState = batteryLow;
 800265e:	4b19      	ldr	r3, [pc, #100]	; (80026c4 <batteryManager+0x98>)
 8002660:	2201      	movs	r2, #1
 8002662:	701a      	strb	r2, [r3, #0]
				turnDisplayOn(hspi);
			}
			bState = batteryNormal;
		}
	}
}
 8002664:	e025      	b.n	80026b2 <batteryManager+0x86>
		else if (battPercentage <= 5) {
 8002666:	4b16      	ldr	r3, [pc, #88]	; (80026c0 <batteryManager+0x94>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b05      	cmp	r3, #5
 800266c:	d807      	bhi.n	800267e <batteryManager+0x52>
			turnDisplayOff(hspi);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	0018      	movs	r0, r3
 8002672:	f7ff fae9 	bl	8001c48 <turnDisplayOff>
			bState = batteryReallyLow;
 8002676:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <batteryManager+0x98>)
 8002678:	2202      	movs	r2, #2
 800267a:	701a      	strb	r2, [r3, #0]
}
 800267c:	e019      	b.n	80026b2 <batteryManager+0x86>
		else if (battPercentage == 0) {
 800267e:	4b10      	ldr	r3, [pc, #64]	; (80026c0 <batteryManager+0x94>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d106      	bne.n	8002694 <batteryManager+0x68>
			HAL_GPIO_WritePin(POWER_SUPPLY_ENABLE_PORT, POWER_SUPPLY_ENABLE_PIN, GPIO_PIN_RESET);
 8002686:	4b10      	ldr	r3, [pc, #64]	; (80026c8 <batteryManager+0x9c>)
 8002688:	2200      	movs	r2, #0
 800268a:	2110      	movs	r1, #16
 800268c:	0018      	movs	r0, r3
 800268e:	f002 fb58 	bl	8004d42 <HAL_GPIO_WritePin>
}
 8002692:	e00e      	b.n	80026b2 <batteryManager+0x86>
			if (bState == batteryLow || bState == batteryReallyLow) {
 8002694:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <batteryManager+0x98>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d003      	beq.n	80026a4 <batteryManager+0x78>
 800269c:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <batteryManager+0x98>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d103      	bne.n	80026ac <batteryManager+0x80>
				turnDisplayOn(hspi);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	0018      	movs	r0, r3
 80026a8:	f7ff fac0 	bl	8001c2c <turnDisplayOn>
			bState = batteryNormal;
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <batteryManager+0x98>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]
}
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	46bd      	mov	sp, r7
 80026b6:	b002      	add	sp, #8
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	46c0      	nop			; (mov r8, r8)
 80026bc:	200000cd 	.word	0x200000cd
 80026c0:	200000cc 	.word	0x200000cc
 80026c4:	20000095 	.word	0x20000095
 80026c8:	50000800 	.word	0x50000800

080026cc <getBatteryPercentage>:

// should return a number from 0-100
uint8_t getBatteryPercentage(ADC_HandleTypeDef *hadc) {
 80026cc:	b5b0      	push	{r4, r5, r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
	// uses c standard round(). included with stdlib.h
	float averageVoltage, temp;
	uint8_t index;

	// enable adc voltage divider for measurements, disable after
	HAL_GPIO_WritePin(ADC_DIVIDER_PORT, ADC_DIVIDER_PIN, GPIO_PIN_SET);
 80026d4:	4b2f      	ldr	r3, [pc, #188]	; (8002794 <getBatteryPercentage+0xc8>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	2120      	movs	r1, #32
 80026da:	0018      	movs	r0, r3
 80026dc:	f002 fb31 	bl	8004d42 <HAL_GPIO_WritePin>
	HAL_ADC_Start_IT(hadc);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	0018      	movs	r0, r3
 80026e4:	f001 fd6a 	bl	80041bc <HAL_ADC_Start_IT>
	while (sampleIndex != NUM_SAMPLES);		// wait until it's finished 10 samples
 80026e8:	46c0      	nop			; (mov r8, r8)
 80026ea:	4b2b      	ldr	r3, [pc, #172]	; (8002798 <getBatteryPercentage+0xcc>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b0a      	cmp	r3, #10
 80026f0:	d1fb      	bne.n	80026ea <getBatteryPercentage+0x1e>
	HAL_GPIO_WritePin(ADC_DIVIDER_PORT, ADC_DIVIDER_PIN, GPIO_PIN_RESET);
 80026f2:	4b28      	ldr	r3, [pc, #160]	; (8002794 <getBatteryPercentage+0xc8>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	2120      	movs	r1, #32
 80026f8:	0018      	movs	r0, r3
 80026fa:	f002 fb22 	bl	8004d42 <HAL_GPIO_WritePin>

	averageVoltage = batterySum / NUM_SAMPLES;
 80026fe:	4b27      	ldr	r3, [pc, #156]	; (800279c <getBatteryPercentage+0xd0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4927      	ldr	r1, [pc, #156]	; (80027a0 <getBatteryPercentage+0xd4>)
 8002704:	1c18      	adds	r0, r3, #0
 8002706:	f7fd fec7 	bl	8000498 <__aeabi_fdiv>
 800270a:	1c03      	adds	r3, r0, #0
 800270c:	617b      	str	r3, [r7, #20]

	// trying to look only for 3.9-3.4. anything above 3.7 is 100%, anything below 3.4 is 0%
	// scaled voltages at 3.0642-2.6714
	// indices at 4-152. have to scale and flip to go from 100-0 since 4->100%
	index = search(averageVoltage);
 800270e:	2513      	movs	r5, #19
 8002710:	197c      	adds	r4, r7, r5
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	1c18      	adds	r0, r3, #0
 8002716:	f000 f84b 	bl	80027b0 <search>
 800271a:	0003      	movs	r3, r0
 800271c:	7023      	strb	r3, [r4, #0]
	if (index <= 4) return 100;
 800271e:	197b      	adds	r3, r7, r5
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b04      	cmp	r3, #4
 8002724:	d801      	bhi.n	800272a <getBatteryPercentage+0x5e>
 8002726:	2364      	movs	r3, #100	; 0x64
 8002728:	e030      	b.n	800278c <getBatteryPercentage+0xc0>
	else if (index >= 152) return 0;
 800272a:	2313      	movs	r3, #19
 800272c:	18fb      	adds	r3, r7, r3
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b97      	cmp	r3, #151	; 0x97
 8002732:	d901      	bls.n	8002738 <getBatteryPercentage+0x6c>
 8002734:	2300      	movs	r3, #0
 8002736:	e029      	b.n	800278c <getBatteryPercentage+0xc0>
	else {
		index -= 4;
 8002738:	2113      	movs	r1, #19
 800273a:	187b      	adds	r3, r7, r1
 800273c:	187a      	adds	r2, r7, r1
 800273e:	7812      	ldrb	r2, [r2, #0]
 8002740:	3a04      	subs	r2, #4
 8002742:	701a      	strb	r2, [r3, #0]
		temp = index*100.0/148;
 8002744:	187b      	adds	r3, r7, r1
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	0018      	movs	r0, r3
 800274a:	f7fe ffd5 	bl	80016f8 <__aeabi_i2d>
 800274e:	2200      	movs	r2, #0
 8002750:	4b14      	ldr	r3, [pc, #80]	; (80027a4 <getBatteryPercentage+0xd8>)
 8002752:	f7fe fd5f 	bl	8001214 <__aeabi_dmul>
 8002756:	0003      	movs	r3, r0
 8002758:	000c      	movs	r4, r1
 800275a:	0018      	movs	r0, r3
 800275c:	0021      	movs	r1, r4
 800275e:	2200      	movs	r2, #0
 8002760:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <getBatteryPercentage+0xdc>)
 8002762:	f7fe fa55 	bl	8000c10 <__aeabi_ddiv>
 8002766:	0003      	movs	r3, r0
 8002768:	000c      	movs	r4, r1
 800276a:	0018      	movs	r0, r3
 800276c:	0021      	movs	r1, r4
 800276e:	f7fe fffd 	bl	800176c <__aeabi_d2f>
 8002772:	1c03      	adds	r3, r0, #0
 8002774:	60fb      	str	r3, [r7, #12]
		temp = 100-temp;
 8002776:	68f9      	ldr	r1, [r7, #12]
 8002778:	480c      	ldr	r0, [pc, #48]	; (80027ac <getBatteryPercentage+0xe0>)
 800277a:	f7fe f865 	bl	8000848 <__aeabi_fsub>
 800277e:	1c03      	adds	r3, r0, #0
 8002780:	60fb      	str	r3, [r7, #12]
		return temp;
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f7fd fe70 	bl	8000468 <__aeabi_f2uiz>
 8002788:	0003      	movs	r3, r0
 800278a:	b2db      	uxtb	r3, r3
	}
}
 800278c:	0018      	movs	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	b006      	add	sp, #24
 8002792:	bdb0      	pop	{r4, r5, r7, pc}
 8002794:	50000800 	.word	0x50000800
 8002798:	20000094 	.word	0x20000094
 800279c:	20000090 	.word	0x20000090
 80027a0:	41200000 	.word	0x41200000
 80027a4:	40590000 	.word	0x40590000
 80027a8:	40628000 	.word	0x40628000
 80027ac:	42c80000 	.word	0x42c80000

080027b0 <search>:

// should return index in array
uint8_t search(float val) {
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
	// write binary search for efficiency?
	// size not related to 2. size is not that big. maybe in the future
	uint8_t i;
	for (i = 0; i < batteryCapacityArraySize; i++) {
 80027b8:	230f      	movs	r3, #15
 80027ba:	18fb      	adds	r3, r7, r3
 80027bc:	2200      	movs	r2, #0
 80027be:	701a      	strb	r2, [r3, #0]
 80027c0:	e015      	b.n	80027ee <search+0x3e>
		if (val > batteryCapacity[i]) return i;
 80027c2:	230f      	movs	r3, #15
 80027c4:	18fb      	adds	r3, r7, r3
 80027c6:	781a      	ldrb	r2, [r3, #0]
 80027c8:	4b10      	ldr	r3, [pc, #64]	; (800280c <search+0x5c>)
 80027ca:	0092      	lsls	r2, r2, #2
 80027cc:	58d3      	ldr	r3, [r2, r3]
 80027ce:	1c19      	adds	r1, r3, #0
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7fd fe35 	bl	8000440 <__aeabi_fcmpgt>
 80027d6:	1e03      	subs	r3, r0, #0
 80027d8:	d003      	beq.n	80027e2 <search+0x32>
 80027da:	230f      	movs	r3, #15
 80027dc:	18fb      	adds	r3, r7, r3
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	e010      	b.n	8002804 <search+0x54>
	for (i = 0; i < batteryCapacityArraySize; i++) {
 80027e2:	210f      	movs	r1, #15
 80027e4:	187b      	adds	r3, r7, r1
 80027e6:	781a      	ldrb	r2, [r3, #0]
 80027e8:	187b      	adds	r3, r7, r1
 80027ea:	3201      	adds	r2, #1
 80027ec:	701a      	strb	r2, [r3, #0]
 80027ee:	230f      	movs	r3, #15
 80027f0:	18fb      	adds	r3, r7, r3
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	4b06      	ldr	r3, [pc, #24]	; (8002810 <search+0x60>)
 80027f8:	881b      	ldrh	r3, [r3, #0]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d3e1      	bcc.n	80027c2 <search+0x12>
	}
	return batteryCapacityArraySize;
 80027fe:	4b04      	ldr	r3, [pc, #16]	; (8002810 <search+0x60>)
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	b2db      	uxtb	r3, r3
}
 8002804:	0018      	movs	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	b004      	add	sp, #16
 800280a:	bd80      	pop	{r7, pc}
 800280c:	08008910 	.word	0x08008910
 8002810:	20000000 	.word	0x20000000

08002814 <testBatteryCalculator>:

// might need to put into different file so it can use display includes
void testBatteryCalculator(ADC_HandleTypeDef *hadc, SPI_HandleTypeDef *hspi) {
 8002814:	b590      	push	{r4, r7, lr}
 8002816:	b08d      	sub	sp, #52	; 0x34
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
	batteryManager(hadc, hspi);
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	0011      	movs	r1, r2
 8002824:	0018      	movs	r0, r3
 8002826:	f7ff ff01 	bl	800262c <batteryManager>

	setTextSize(1);
 800282a:	2001      	movs	r0, #1
 800282c:	f7ff fec6 	bl	80025bc <setTextSize>
	setTextColor(ST77XX_ORANGE);
 8002830:	23fc      	movs	r3, #252	; 0xfc
 8002832:	021b      	lsls	r3, r3, #8
 8002834:	0018      	movs	r0, r3
 8002836:	f7ff fed1 	bl	80025dc <setTextColor>
	setBackgroundColor(ST77XX_BLACK);
 800283a:	2000      	movs	r0, #0
 800283c:	f7ff fe94 	bl	8002568 <setBackgroundColor>
	char str[40];
	sprintf(str, "batt_level: %3d %%", battPercentage);
 8002840:	4b09      	ldr	r3, [pc, #36]	; (8002868 <testBatteryCalculator+0x54>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	001a      	movs	r2, r3
 8002846:	4909      	ldr	r1, [pc, #36]	; (800286c <testBatteryCalculator+0x58>)
 8002848:	2408      	movs	r4, #8
 800284a:	193b      	adds	r3, r7, r4
 800284c:	0018      	movs	r0, r3
 800284e:	f005 fc01 	bl	8008054 <siprintf>
	drawTextAt(0, 0, str, hspi);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	193a      	adds	r2, r7, r4
 8002856:	2100      	movs	r1, #0
 8002858:	2000      	movs	r0, #0
 800285a:	f7ff fe3d 	bl	80024d8 <drawTextAt>
}
 800285e:	46c0      	nop			; (mov r8, r8)
 8002860:	46bd      	mov	sp, r7
 8002862:	b00d      	add	sp, #52	; 0x34
 8002864:	bd90      	pop	{r4, r7, pc}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	200000cc 	.word	0x200000cc
 800286c:	080087fc 	.word	0x080087fc

08002870 <setClockAlarm>:
}

// set an alarm for the next second.
// for triggering display updates.
// uses rtc weekday. should have weekday calculator integrated before using
void setClockAlarm(RTC_HandleTypeDef *hrtc) {
 8002870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002872:	b097      	sub	sp, #92	; 0x5c
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef salarm = {0};			// malloc if using pointers
 8002878:	242c      	movs	r4, #44	; 0x2c
 800287a:	193b      	adds	r3, r7, r4
 800287c:	0018      	movs	r0, r3
 800287e:	2328      	movs	r3, #40	; 0x28
 8002880:	001a      	movs	r2, r3
 8002882:	2100      	movs	r1, #0
 8002884:	f005 fb5f 	bl	8007f46 <memset>
	RTC_TimeTypeDef salarmtime = {0};
 8002888:	2518      	movs	r5, #24
 800288a:	197b      	adds	r3, r7, r5
 800288c:	0018      	movs	r0, r3
 800288e:	2314      	movs	r3, #20
 8002890:	001a      	movs	r2, r3
 8002892:	2100      	movs	r1, #0
 8002894:	f005 fb57 	bl	8007f46 <memset>

	struct dates currentDate = {0};
 8002898:	2310      	movs	r3, #16
 800289a:	18fb      	adds	r3, r7, r3
 800289c:	0018      	movs	r0, r3
 800289e:	2306      	movs	r3, #6
 80028a0:	001a      	movs	r2, r3
 80028a2:	2100      	movs	r1, #0
 80028a4:	f005 fb4f 	bl	8007f46 <memset>
	struct times currentTime = {0};
 80028a8:	210c      	movs	r1, #12
 80028aa:	000e      	movs	r6, r1
 80028ac:	187b      	adds	r3, r7, r1
 80028ae:	0018      	movs	r0, r3
 80028b0:	2303      	movs	r3, #3
 80028b2:	001a      	movs	r2, r3
 80028b4:	2100      	movs	r1, #0
 80028b6:	f005 fb46 	bl	8007f46 <memset>

	getDateTime(&currentDate, &currentTime, hrtc);
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	0031      	movs	r1, r6
 80028be:	000c      	movs	r4, r1
 80028c0:	1879      	adds	r1, r7, r1
 80028c2:	2310      	movs	r3, #16
 80028c4:	18fb      	adds	r3, r7, r3
 80028c6:	0018      	movs	r0, r3
 80028c8:	f000 f8d4 	bl	8002a74 <getDateTime>

	struct alarmTimes a = {0};
 80028cc:	2608      	movs	r6, #8
 80028ce:	19bb      	adds	r3, r7, r6
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
	uint8_t s,m,h,w;
	s = currentTime.sec + 1;
 80028d4:	0021      	movs	r1, r4
 80028d6:	187b      	adds	r3, r7, r1
 80028d8:	789a      	ldrb	r2, [r3, #2]
 80028da:	2057      	movs	r0, #87	; 0x57
 80028dc:	183b      	adds	r3, r7, r0
 80028de:	3201      	adds	r2, #1
 80028e0:	701a      	strb	r2, [r3, #0]
	m = currentTime.min + s/60;
 80028e2:	187b      	adds	r3, r7, r1
 80028e4:	785c      	ldrb	r4, [r3, #1]
 80028e6:	183b      	adds	r3, r7, r0
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	213c      	movs	r1, #60	; 0x3c
 80028ec:	0018      	movs	r0, r3
 80028ee:	f7fd fc0b 	bl	8000108 <__udivsi3>
 80028f2:	0003      	movs	r3, r0
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	2056      	movs	r0, #86	; 0x56
 80028f8:	183b      	adds	r3, r7, r0
 80028fa:	18a2      	adds	r2, r4, r2
 80028fc:	701a      	strb	r2, [r3, #0]
	h = currentTime.hr + m/60;
 80028fe:	210c      	movs	r1, #12
 8002900:	187b      	adds	r3, r7, r1
 8002902:	781c      	ldrb	r4, [r3, #0]
 8002904:	0002      	movs	r2, r0
 8002906:	18bb      	adds	r3, r7, r2
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	213c      	movs	r1, #60	; 0x3c
 800290c:	0018      	movs	r0, r3
 800290e:	f7fd fbfb 	bl	8000108 <__udivsi3>
 8002912:	0003      	movs	r3, r0
 8002914:	b2da      	uxtb	r2, r3
 8002916:	2155      	movs	r1, #85	; 0x55
 8002918:	187b      	adds	r3, r7, r1
 800291a:	18a2      	adds	r2, r4, r2
 800291c:	701a      	strb	r2, [r3, #0]
	w = currentDate.weekday + h/24;
 800291e:	2310      	movs	r3, #16
 8002920:	18fb      	adds	r3, r7, r3
 8002922:	791c      	ldrb	r4, [r3, #4]
 8002924:	187b      	adds	r3, r7, r1
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2118      	movs	r1, #24
 800292a:	0018      	movs	r0, r3
 800292c:	f7fd fbec 	bl	8000108 <__udivsi3>
 8002930:	0003      	movs	r3, r0
 8002932:	b2da      	uxtb	r2, r3
 8002934:	2354      	movs	r3, #84	; 0x54
 8002936:	18fb      	adds	r3, r7, r3
 8002938:	18a2      	adds	r2, r4, r2
 800293a:	701a      	strb	r2, [r3, #0]
	a.sec = s % 60;
 800293c:	2057      	movs	r0, #87	; 0x57
 800293e:	183b      	adds	r3, r7, r0
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	213c      	movs	r1, #60	; 0x3c
 8002944:	0018      	movs	r0, r3
 8002946:	f7fd fc65 	bl	8000214 <__aeabi_uidivmod>
 800294a:	000b      	movs	r3, r1
 800294c:	b2da      	uxtb	r2, r3
 800294e:	19bb      	adds	r3, r7, r6
 8002950:	709a      	strb	r2, [r3, #2]
	a.min = m % 60;
 8002952:	2256      	movs	r2, #86	; 0x56
 8002954:	18bb      	adds	r3, r7, r2
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	213c      	movs	r1, #60	; 0x3c
 800295a:	0018      	movs	r0, r3
 800295c:	f7fd fc5a 	bl	8000214 <__aeabi_uidivmod>
 8002960:	000b      	movs	r3, r1
 8002962:	b2da      	uxtb	r2, r3
 8002964:	19bb      	adds	r3, r7, r6
 8002966:	705a      	strb	r2, [r3, #1]
	a.hr = h % 24;
 8002968:	2155      	movs	r1, #85	; 0x55
 800296a:	187b      	adds	r3, r7, r1
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2118      	movs	r1, #24
 8002970:	0018      	movs	r0, r3
 8002972:	f7fd fc4f 	bl	8000214 <__aeabi_uidivmod>
 8002976:	000b      	movs	r3, r1
 8002978:	b2da      	uxtb	r2, r3
 800297a:	19bb      	adds	r3, r7, r6
 800297c:	701a      	strb	r2, [r3, #0]
	a.weekday = (w-1) % 7 + 1;
 800297e:	2354      	movs	r3, #84	; 0x54
 8002980:	18fb      	adds	r3, r7, r3
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	3b01      	subs	r3, #1
 8002986:	2107      	movs	r1, #7
 8002988:	0018      	movs	r0, r3
 800298a:	f7fd fd2d 	bl	80003e8 <__aeabi_idivmod>
 800298e:	000b      	movs	r3, r1
 8002990:	b2db      	uxtb	r3, r3
 8002992:	3301      	adds	r3, #1
 8002994:	b2da      	uxtb	r2, r3
 8002996:	0030      	movs	r0, r6
 8002998:	183b      	adds	r3, r7, r0
 800299a:	70da      	strb	r2, [r3, #3]

	salarmtime.Hours = a.hr;
 800299c:	183b      	adds	r3, r7, r0
 800299e:	781a      	ldrb	r2, [r3, #0]
 80029a0:	197b      	adds	r3, r7, r5
 80029a2:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a.min;
 80029a4:	183b      	adds	r3, r7, r0
 80029a6:	785a      	ldrb	r2, [r3, #1]
 80029a8:	197b      	adds	r3, r7, r5
 80029aa:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a.sec;
 80029ac:	183b      	adds	r3, r7, r0
 80029ae:	789a      	ldrb	r2, [r3, #2]
 80029b0:	197b      	adds	r3, r7, r5
 80029b2:	709a      	strb	r2, [r3, #2]
	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 80029b4:	197b      	adds	r3, r7, r5
 80029b6:	2200      	movs	r2, #0
 80029b8:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 80029ba:	0029      	movs	r1, r5
 80029bc:	187b      	adds	r3, r7, r1
 80029be:	2200      	movs	r2, #0
 80029c0:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 80029c2:	187b      	adds	r3, r7, r1
 80029c4:	2200      	movs	r2, #0
 80029c6:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80029c8:	187b      	adds	r3, r7, r1
 80029ca:	2200      	movs	r2, #0
 80029cc:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 80029ce:	187b      	adds	r3, r7, r1
 80029d0:	2200      	movs	r2, #0
 80029d2:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 80029d4:	242c      	movs	r4, #44	; 0x2c
 80029d6:	193b      	adds	r3, r7, r4
 80029d8:	187a      	adds	r2, r7, r1
 80029da:	ca62      	ldmia	r2!, {r1, r5, r6}
 80029dc:	c362      	stmia	r3!, {r1, r5, r6}
 80029de:	ca22      	ldmia	r2!, {r1, r5}
 80029e0:	c322      	stmia	r3!, {r1, r5}
	salarm.AlarmMask = RTC_ALARMMASK_NONE;
 80029e2:	193b      	adds	r3, r7, r4
 80029e4:	2200      	movs	r2, #0
 80029e6:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80029e8:	193b      	adds	r3, r7, r4
 80029ea:	2200      	movs	r2, #0
 80029ec:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 80029ee:	193b      	adds	r3, r7, r4
 80029f0:	2280      	movs	r2, #128	; 0x80
 80029f2:	05d2      	lsls	r2, r2, #23
 80029f4:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a.weekday;
 80029f6:	183b      	adds	r3, r7, r0
 80029f8:	78d9      	ldrb	r1, [r3, #3]
 80029fa:	193b      	adds	r3, r7, r4
 80029fc:	2220      	movs	r2, #32
 80029fe:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_B;			// change if using different alarm
 8002a00:	193b      	adds	r3, r7, r4
 8002a02:	2280      	movs	r2, #128	; 0x80
 8002a04:	0092      	lsls	r2, r2, #2
 8002a06:	625a      	str	r2, [r3, #36]	; 0x24

	// do nothing until done
	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
 8002a08:	1939      	adds	r1, r7, r4
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	0018      	movs	r0, r3
 8002a10:	f003 fcf6 	bl	8006400 <HAL_RTC_SetAlarm_IT>
}
 8002a14:	46c0      	nop			; (mov r8, r8)
 8002a16:	46bd      	mov	sp, r7
 8002a18:	b017      	add	sp, #92	; 0x5c
 8002a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a1c <HAL_RTC_AlarmAEventCallback>:

// ---- callbacks for interrupts ----
// used for alarm function in project
// meant to send signal to use motor
// change to use hw timer so signal is temporary
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
	// change pin to whatever's accessible
	// using PC0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8002a24:	4b07      	ldr	r3, [pc, #28]	; (8002a44 <HAL_RTC_AlarmAEventCallback+0x28>)
 8002a26:	2101      	movs	r1, #1
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f002 f9a7 	bl	8004d7c <HAL_GPIO_TogglePin>
	isAlarmDone = 1;
 8002a2e:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <HAL_RTC_AlarmAEventCallback+0x2c>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	701a      	strb	r2, [r3, #0]
	updateFace.alarm = 1;
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <HAL_RTC_AlarmAEventCallback+0x30>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	709a      	strb	r2, [r3, #2]
}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	b002      	add	sp, #8
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	50000800 	.word	0x50000800
 8002a48:	200000d4 	.word	0x200000d4
 8002a4c:	200000dc 	.word	0x200000dc

08002a50 <HAL_RTCEx_AlarmBEventCallback>:

// used to trigger display refresh every second. used because then it's synchronous with RTC updates
void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc) {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
	updateFace.clock = 1;
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <HAL_RTCEx_AlarmBEventCallback+0x20>)
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	701a      	strb	r2, [r3, #0]
	setClockAlarm(hrtc);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	0018      	movs	r0, r3
 8002a62:	f7ff ff05 	bl	8002870 <setClockAlarm>
}
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	b002      	add	sp, #8
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	200000dc 	.word	0x200000dc

08002a74 <getDateTime>:
	d->date = sdate.Date;
	d->weekday = sdate.WeekDay;
}

// not using getDate and getTime for efficiency (?)
void getDateTime(struct dates *d, struct times *t, RTC_HandleTypeDef *hrtc) {
 8002a74:	b590      	push	{r4, r7, lr}
 8002a76:	b08b      	sub	sp, #44	; 0x2c
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
	RTC_DateTypeDef sdate;
	RTC_TimeTypeDef stime;

	// programming manual says to read time after date. something shadow registers.
	// not done automatically in HAL
	HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN);
 8002a80:	2310      	movs	r3, #16
 8002a82:	18f9      	adds	r1, r7, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f003 fb61 	bl	8006150 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 8002a8e:	2424      	movs	r4, #36	; 0x24
 8002a90:	1939      	adds	r1, r7, r4
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	0018      	movs	r0, r3
 8002a98:	f003 fc64 	bl	8006364 <HAL_RTC_GetDate>

	d->yr = sdate.Year > 50 ? sdate.Year+1900 : sdate.Year+2000;		// make assumptions on whether it's 19xx or 20xx
 8002a9c:	193b      	adds	r3, r7, r4
 8002a9e:	78db      	ldrb	r3, [r3, #3]
 8002aa0:	2b32      	cmp	r3, #50	; 0x32
 8002aa2:	d908      	bls.n	8002ab6 <getDateTime+0x42>
 8002aa4:	2324      	movs	r3, #36	; 0x24
 8002aa6:	18fb      	adds	r3, r7, r3
 8002aa8:	78db      	ldrb	r3, [r3, #3]
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	4a16      	ldr	r2, [pc, #88]	; (8002b08 <getDateTime+0x94>)
 8002aae:	4694      	mov	ip, r2
 8002ab0:	4463      	add	r3, ip
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	e008      	b.n	8002ac8 <getDateTime+0x54>
 8002ab6:	2324      	movs	r3, #36	; 0x24
 8002ab8:	18fb      	adds	r3, r7, r3
 8002aba:	78db      	ldrb	r3, [r3, #3]
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	22fa      	movs	r2, #250	; 0xfa
 8002ac0:	00d2      	lsls	r2, r2, #3
 8002ac2:	4694      	mov	ip, r2
 8002ac4:	4463      	add	r3, ip
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	8013      	strh	r3, [r2, #0]
	d->month = sdate.Month;
 8002acc:	2124      	movs	r1, #36	; 0x24
 8002ace:	187b      	adds	r3, r7, r1
 8002ad0:	785a      	ldrb	r2, [r3, #1]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	709a      	strb	r2, [r3, #2]
	d->date = sdate.Date;
 8002ad6:	187b      	adds	r3, r7, r1
 8002ad8:	789a      	ldrb	r2, [r3, #2]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	70da      	strb	r2, [r3, #3]
	d->weekday = sdate.WeekDay;
 8002ade:	187b      	adds	r3, r7, r1
 8002ae0:	781a      	ldrb	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	711a      	strb	r2, [r3, #4]

	t->hr = stime.Hours;
 8002ae6:	2110      	movs	r1, #16
 8002ae8:	187b      	adds	r3, r7, r1
 8002aea:	781a      	ldrb	r2, [r3, #0]
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	701a      	strb	r2, [r3, #0]
	t->min = stime.Minutes;
 8002af0:	187b      	adds	r3, r7, r1
 8002af2:	785a      	ldrb	r2, [r3, #1]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	705a      	strb	r2, [r3, #1]
	t->sec = stime.Seconds;
 8002af8:	187b      	adds	r3, r7, r1
 8002afa:	789a      	ldrb	r2, [r3, #2]
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	709a      	strb	r2, [r3, #2]
}
 8002b00:	46c0      	nop			; (mov r8, r8)
 8002b02:	46bd      	mov	sp, r7
 8002b04:	b00b      	add	sp, #44	; 0x2c
 8002b06:	bd90      	pop	{r4, r7, pc}
 8002b08:	0000076c 	.word	0x0000076c

08002b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b10:	f001 f962 	bl	8003dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b14:	f000 f848 	bl	8002ba8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b18:	f000 fc56 	bl	80033c8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002b1c:	f000 fa06 	bl	8002f2c <MX_SPI1_Init>
  MX_ADC_Init();
 8002b20:	f000 f8ca 	bl	8002cb8 <MX_ADC_Init>
  MX_RTC_Init();
 8002b24:	f000 f954 	bl	8002dd0 <MX_RTC_Init>
  MX_TIM21_Init();
 8002b28:	f000 fb0a 	bl	8003140 <MX_TIM21_Init>
  MX_LPTIM1_Init();
 8002b2c:	f000 f928 	bl	8002d80 <MX_LPTIM1_Init>
  MX_DMA_Init();
 8002b30:	f000 fc2c 	bl	800338c <MX_DMA_Init>
  MX_TIM22_Init();
 8002b34:	f000 fb9c 	bl	8003270 <MX_TIM22_Init>
  MX_TIM2_Init();
 8002b38:	f000 fa34 	bl	8002fa4 <MX_TIM2_Init>
  MX_TIM6_Init();
 8002b3c:	f000 fac6 	bl	80030cc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  	/* initialization for display */
	HAL_Delay(2000);
 8002b40:	23fa      	movs	r3, #250	; 0xfa
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	0018      	movs	r0, r3
 8002b46:	f001 f9a7 	bl	8003e98 <HAL_Delay>
	TFT_startup(&hspi1);
 8002b4a:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <main+0x84>)
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f7fe ffbf 	bl	8001ad0 <TFT_startup>
	clearScreen(ST77XX_BLACK, &hspi1);
 8002b52:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <main+0x84>)
 8002b54:	0019      	movs	r1, r3
 8002b56:	2000      	movs	r0, #0
 8002b58:	f7ff fd50 	bl	80025fc <clearScreen>

	/* start updating display for ui */
	initFace();
 8002b5c:	f001 f8e2 	bl	8003d24 <initFace>
	setClockAlarm(&hrtc);
 8002b60:	4b0c      	ldr	r3, [pc, #48]	; (8002b94 <main+0x88>)
 8002b62:	0018      	movs	r0, r3
 8002b64:	f7ff fe84 	bl	8002870 <setClockAlarm>
	runTimerStopwatchBase(&htim21);
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <main+0x8c>)
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f001 f85c 	bl	8003c28 <runTimerStopwatchBase>
	runBacklightMotorBase(&htim2);
 8002b70:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <main+0x90>)
 8002b72:	0018      	movs	r0, r3
 8002b74:	f001 f882 	bl	8003c7c <runBacklightMotorBase>
	runADCSampler(&htim22);
 8002b78:	4b09      	ldr	r3, [pc, #36]	; (8002ba0 <main+0x94>)
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f001 f860 	bl	8003c40 <runADCSampler>
//		lineTest(&hspi1);
//		charTest(&hspi1);
//		textTest(bg, &hspi1);

		/* adc/battery test */
		testBatteryCalculator(&hadc, &hspi1);
 8002b80:	4a03      	ldr	r2, [pc, #12]	; (8002b90 <main+0x84>)
 8002b82:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <main+0x98>)
 8002b84:	0011      	movs	r1, r2
 8002b86:	0018      	movs	r0, r3
 8002b88:	f7ff fe44 	bl	8002814 <testBatteryCalculator>
 8002b8c:	e7f8      	b.n	8002b80 <main+0x74>
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	200001cc 	.word	0x200001cc
 8002b94:	200001a8 	.word	0x200001a8
 8002b98:	20000304 	.word	0x20000304
 8002b9c:	20000224 	.word	0x20000224
 8002ba0:	2000013c 	.word	0x2000013c
 8002ba4:	20000260 	.word	0x20000260

08002ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ba8:	b590      	push	{r4, r7, lr}
 8002baa:	b09f      	sub	sp, #124	; 0x7c
 8002bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bae:	2440      	movs	r4, #64	; 0x40
 8002bb0:	193b      	adds	r3, r7, r4
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	2338      	movs	r3, #56	; 0x38
 8002bb6:	001a      	movs	r2, r3
 8002bb8:	2100      	movs	r1, #0
 8002bba:	f005 f9c4 	bl	8007f46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bbe:	232c      	movs	r3, #44	; 0x2c
 8002bc0:	18fb      	adds	r3, r7, r3
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	2314      	movs	r3, #20
 8002bc6:	001a      	movs	r2, r3
 8002bc8:	2100      	movs	r1, #0
 8002bca:	f005 f9bc 	bl	8007f46 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bce:	1d3b      	adds	r3, r7, #4
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	2328      	movs	r3, #40	; 0x28
 8002bd4:	001a      	movs	r2, r3
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	f005 f9b5 	bl	8007f46 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bdc:	4b33      	ldr	r3, [pc, #204]	; (8002cac <SystemClock_Config+0x104>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a33      	ldr	r2, [pc, #204]	; (8002cb0 <SystemClock_Config+0x108>)
 8002be2:	401a      	ands	r2, r3
 8002be4:	4b31      	ldr	r3, [pc, #196]	; (8002cac <SystemClock_Config+0x104>)
 8002be6:	2180      	movs	r1, #128	; 0x80
 8002be8:	0109      	lsls	r1, r1, #4
 8002bea:	430a      	orrs	r2, r1
 8002bec:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8002bee:	f002 fa4d 	bl	800508c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002bf2:	4b30      	ldr	r3, [pc, #192]	; (8002cb4 <SystemClock_Config+0x10c>)
 8002bf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bf6:	4b2f      	ldr	r3, [pc, #188]	; (8002cb4 <SystemClock_Config+0x10c>)
 8002bf8:	492d      	ldr	r1, [pc, #180]	; (8002cb0 <SystemClock_Config+0x108>)
 8002bfa:	400a      	ands	r2, r1
 8002bfc:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8002bfe:	193b      	adds	r3, r7, r4
 8002c00:	2226      	movs	r2, #38	; 0x26
 8002c02:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002c04:	193b      	adds	r3, r7, r4
 8002c06:	2280      	movs	r2, #128	; 0x80
 8002c08:	0052      	lsls	r2, r2, #1
 8002c0a:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c0c:	0021      	movs	r1, r4
 8002c0e:	187b      	adds	r3, r7, r1
 8002c10:	2201      	movs	r2, #1
 8002c12:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c14:	187b      	adds	r3, r7, r1
 8002c16:	2210      	movs	r2, #16
 8002c18:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002c1a:	187b      	adds	r3, r7, r1
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c20:	187b      	adds	r3, r7, r1
 8002c22:	2202      	movs	r2, #2
 8002c24:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c26:	187b      	adds	r3, r7, r1
 8002c28:	2200      	movs	r2, #0
 8002c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8002c2c:	187b      	adds	r3, r7, r1
 8002c2e:	2280      	movs	r2, #128	; 0x80
 8002c30:	02d2      	lsls	r2, r2, #11
 8002c32:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002c34:	187b      	adds	r3, r7, r1
 8002c36:	2280      	movs	r2, #128	; 0x80
 8002c38:	03d2      	lsls	r2, r2, #15
 8002c3a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c3c:	187b      	adds	r3, r7, r1
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f002 fa32 	bl	80050a8 <HAL_RCC_OscConfig>
 8002c44:	1e03      	subs	r3, r0, #0
 8002c46:	d001      	beq.n	8002c4c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002c48:	f000 fc50 	bl	80034ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c4c:	212c      	movs	r1, #44	; 0x2c
 8002c4e:	187b      	adds	r3, r7, r1
 8002c50:	220f      	movs	r2, #15
 8002c52:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c54:	187b      	adds	r3, r7, r1
 8002c56:	2203      	movs	r2, #3
 8002c58:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c5a:	187b      	adds	r3, r7, r1
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c60:	187b      	adds	r3, r7, r1
 8002c62:	2200      	movs	r2, #0
 8002c64:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c66:	187b      	adds	r3, r7, r1
 8002c68:	2200      	movs	r2, #0
 8002c6a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002c6c:	187b      	adds	r3, r7, r1
 8002c6e:	2101      	movs	r1, #1
 8002c70:	0018      	movs	r0, r3
 8002c72:	f002 fde9 	bl	8005848 <HAL_RCC_ClockConfig>
 8002c76:	1e03      	subs	r3, r0, #0
 8002c78:	d001      	beq.n	8002c7e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8002c7a:	f000 fc37 	bl	80034ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPTIM1;
 8002c7e:	1d3b      	adds	r3, r7, #4
 8002c80:	22a0      	movs	r2, #160	; 0xa0
 8002c82:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002c84:	1d3b      	adds	r3, r7, #4
 8002c86:	2280      	movs	r2, #128	; 0x80
 8002c88:	0252      	lsls	r2, r2, #9
 8002c8a:	605a      	str	r2, [r3, #4]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8002c8c:	1d3b      	adds	r3, r7, #4
 8002c8e:	22c0      	movs	r2, #192	; 0xc0
 8002c90:	0312      	lsls	r2, r2, #12
 8002c92:	621a      	str	r2, [r3, #32]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c94:	1d3b      	adds	r3, r7, #4
 8002c96:	0018      	movs	r0, r3
 8002c98:	f002 ff84 	bl	8005ba4 <HAL_RCCEx_PeriphCLKConfig>
 8002c9c:	1e03      	subs	r3, r0, #0
 8002c9e:	d001      	beq.n	8002ca4 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8002ca0:	f000 fc24 	bl	80034ec <Error_Handler>
  }
}
 8002ca4:	46c0      	nop			; (mov r8, r8)
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	b01f      	add	sp, #124	; 0x7c
 8002caa:	bd90      	pop	{r4, r7, pc}
 8002cac:	40007000 	.word	0x40007000
 8002cb0:	ffffe7ff 	.word	0xffffe7ff
 8002cb4:	40021000 	.word	0x40021000

08002cb8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002cbe:	003b      	movs	r3, r7
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	2308      	movs	r3, #8
 8002cc4:	001a      	movs	r2, r3
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	f005 f93d 	bl	8007f46 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8002ccc:	4b2a      	ldr	r3, [pc, #168]	; (8002d78 <MX_ADC_Init+0xc0>)
 8002cce:	4a2b      	ldr	r2, [pc, #172]	; (8002d7c <MX_ADC_Init+0xc4>)
 8002cd0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8002cd2:	4b29      	ldr	r3, [pc, #164]	; (8002d78 <MX_ADC_Init+0xc0>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002cd8:	4b27      	ldr	r3, [pc, #156]	; (8002d78 <MX_ADC_Init+0xc0>)
 8002cda:	2280      	movs	r2, #128	; 0x80
 8002cdc:	05d2      	lsls	r2, r2, #23
 8002cde:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002ce0:	4b25      	ldr	r3, [pc, #148]	; (8002d78 <MX_ADC_Init+0xc0>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_79CYCLES_5;
 8002ce6:	4b24      	ldr	r3, [pc, #144]	; (8002d78 <MX_ADC_Init+0xc0>)
 8002ce8:	2206      	movs	r2, #6
 8002cea:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002cec:	4b22      	ldr	r3, [pc, #136]	; (8002d78 <MX_ADC_Init+0xc0>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002cf2:	4b21      	ldr	r3, [pc, #132]	; (8002d78 <MX_ADC_Init+0xc0>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002cf8:	4b1f      	ldr	r3, [pc, #124]	; (8002d78 <MX_ADC_Init+0xc0>)
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002d00:	4b1d      	ldr	r3, [pc, #116]	; (8002d78 <MX_ADC_Init+0xc0>)
 8002d02:	2221      	movs	r2, #33	; 0x21
 8002d04:	2100      	movs	r1, #0
 8002d06:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d08:	4b1b      	ldr	r3, [pc, #108]	; (8002d78 <MX_ADC_Init+0xc0>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d0e:	4b1a      	ldr	r3, [pc, #104]	; (8002d78 <MX_ADC_Init+0xc0>)
 8002d10:	22c2      	movs	r2, #194	; 0xc2
 8002d12:	32ff      	adds	r2, #255	; 0xff
 8002d14:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002d16:	4b18      	ldr	r3, [pc, #96]	; (8002d78 <MX_ADC_Init+0xc0>)
 8002d18:	222c      	movs	r2, #44	; 0x2c
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d1e:	4b16      	ldr	r3, [pc, #88]	; (8002d78 <MX_ADC_Init+0xc0>)
 8002d20:	2204      	movs	r2, #4
 8002d22:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002d24:	4b14      	ldr	r3, [pc, #80]	; (8002d78 <MX_ADC_Init+0xc0>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002d2a:	4b13      	ldr	r3, [pc, #76]	; (8002d78 <MX_ADC_Init+0xc0>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8002d30:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <MX_ADC_Init+0xc0>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = ENABLE;
 8002d36:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <MX_ADC_Init+0xc0>)
 8002d38:	2201      	movs	r2, #1
 8002d3a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002d3c:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <MX_ADC_Init+0xc0>)
 8002d3e:	0018      	movs	r0, r3
 8002d40:	f001 f8c8 	bl	8003ed4 <HAL_ADC_Init>
 8002d44:	1e03      	subs	r3, r0, #0
 8002d46:	d001      	beq.n	8002d4c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8002d48:	f000 fbd0 	bl	80034ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002d4c:	003b      	movs	r3, r7
 8002d4e:	2201      	movs	r2, #1
 8002d50:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002d52:	003b      	movs	r3, r7
 8002d54:	2280      	movs	r2, #128	; 0x80
 8002d56:	0152      	lsls	r2, r2, #5
 8002d58:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002d5a:	003a      	movs	r2, r7
 8002d5c:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <MX_ADC_Init+0xc0>)
 8002d5e:	0011      	movs	r1, r2
 8002d60:	0018      	movs	r0, r3
 8002d62:	f001 fa9d 	bl	80042a0 <HAL_ADC_ConfigChannel>
 8002d66:	1e03      	subs	r3, r0, #0
 8002d68:	d001      	beq.n	8002d6e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8002d6a:	f000 fbbf 	bl	80034ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002d6e:	46c0      	nop			; (mov r8, r8)
 8002d70:	46bd      	mov	sp, r7
 8002d72:	b002      	add	sp, #8
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	20000260 	.word	0x20000260
 8002d7c:	40012400 	.word	0x40012400

08002d80 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8002d84:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <MX_LPTIM1_Init+0x44>)
 8002d86:	4a10      	ldr	r2, [pc, #64]	; (8002dc8 <MX_LPTIM1_Init+0x48>)
 8002d88:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8002d8a:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <MX_LPTIM1_Init+0x44>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <MX_LPTIM1_Init+0x44>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8002d96:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <MX_LPTIM1_Init+0x44>)
 8002d98:	4a0c      	ldr	r2, [pc, #48]	; (8002dcc <MX_LPTIM1_Init+0x4c>)
 8002d9a:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8002d9c:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <MX_LPTIM1_Init+0x44>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8002da2:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <MX_LPTIM1_Init+0x44>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8002da8:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <MX_LPTIM1_Init+0x44>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8002dae:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <MX_LPTIM1_Init+0x44>)
 8002db0:	0018      	movs	r0, r3
 8002db2:	f002 f811 	bl	8004dd8 <HAL_LPTIM_Init>
 8002db6:	1e03      	subs	r3, r0, #0
 8002db8:	d001      	beq.n	8002dbe <MX_LPTIM1_Init+0x3e>
  {
    Error_Handler();
 8002dba:	f000 fb97 	bl	80034ec <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	20000178 	.word	0x20000178
 8002dc8:	40007c00 	.word	0x40007c00
 8002dcc:	0000ffff 	.word	0x0000ffff

08002dd0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b090      	sub	sp, #64	; 0x40
 8002dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002dd6:	232c      	movs	r3, #44	; 0x2c
 8002dd8:	18fb      	adds	r3, r7, r3
 8002dda:	0018      	movs	r0, r3
 8002ddc:	2314      	movs	r3, #20
 8002dde:	001a      	movs	r2, r3
 8002de0:	2100      	movs	r1, #0
 8002de2:	f005 f8b0 	bl	8007f46 <memset>
  RTC_DateTypeDef sDate = {0};
 8002de6:	2328      	movs	r3, #40	; 0x28
 8002de8:	18fb      	adds	r3, r7, r3
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8002dee:	003b      	movs	r3, r7
 8002df0:	0018      	movs	r0, r3
 8002df2:	2328      	movs	r3, #40	; 0x28
 8002df4:	001a      	movs	r2, r3
 8002df6:	2100      	movs	r1, #0
 8002df8:	f005 f8a5 	bl	8007f46 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8002dfc:	4b49      	ldr	r3, [pc, #292]	; (8002f24 <MX_RTC_Init+0x154>)
 8002dfe:	4a4a      	ldr	r2, [pc, #296]	; (8002f28 <MX_RTC_Init+0x158>)
 8002e00:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002e02:	4b48      	ldr	r3, [pc, #288]	; (8002f24 <MX_RTC_Init+0x154>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002e08:	4b46      	ldr	r3, [pc, #280]	; (8002f24 <MX_RTC_Init+0x154>)
 8002e0a:	227f      	movs	r2, #127	; 0x7f
 8002e0c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002e0e:	4b45      	ldr	r3, [pc, #276]	; (8002f24 <MX_RTC_Init+0x154>)
 8002e10:	22ff      	movs	r2, #255	; 0xff
 8002e12:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002e14:	4b43      	ldr	r3, [pc, #268]	; (8002f24 <MX_RTC_Init+0x154>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002e1a:	4b42      	ldr	r3, [pc, #264]	; (8002f24 <MX_RTC_Init+0x154>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002e20:	4b40      	ldr	r3, [pc, #256]	; (8002f24 <MX_RTC_Init+0x154>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002e26:	4b3f      	ldr	r3, [pc, #252]	; (8002f24 <MX_RTC_Init+0x154>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002e2c:	4b3d      	ldr	r3, [pc, #244]	; (8002f24 <MX_RTC_Init+0x154>)
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f003 f82c 	bl	8005e8c <HAL_RTC_Init>
 8002e34:	1e03      	subs	r3, r0, #0
 8002e36:	d001      	beq.n	8002e3c <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8002e38:	f000 fb58 	bl	80034ec <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 8002e3c:	212c      	movs	r1, #44	; 0x2c
 8002e3e:	187b      	adds	r3, r7, r1
 8002e40:	2200      	movs	r2, #0
 8002e42:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8002e44:	187b      	adds	r3, r7, r1
 8002e46:	2200      	movs	r2, #0
 8002e48:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8002e4a:	187b      	adds	r3, r7, r1
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002e50:	187b      	adds	r3, r7, r1
 8002e52:	2200      	movs	r2, #0
 8002e54:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002e56:	187b      	adds	r3, r7, r1
 8002e58:	2200      	movs	r2, #0
 8002e5a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002e5c:	1879      	adds	r1, r7, r1
 8002e5e:	4b31      	ldr	r3, [pc, #196]	; (8002f24 <MX_RTC_Init+0x154>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	0018      	movs	r0, r3
 8002e64:	f003 f8b0 	bl	8005fc8 <HAL_RTC_SetTime>
 8002e68:	1e03      	subs	r3, r0, #0
 8002e6a:	d001      	beq.n	8002e70 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8002e6c:	f000 fb3e 	bl	80034ec <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8002e70:	2128      	movs	r1, #40	; 0x28
 8002e72:	187b      	adds	r3, r7, r1
 8002e74:	2207      	movs	r2, #7
 8002e76:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 8002e78:	187b      	adds	r3, r7, r1
 8002e7a:	2212      	movs	r2, #18
 8002e7c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8002e7e:	187b      	adds	r3, r7, r1
 8002e80:	2201      	movs	r2, #1
 8002e82:	709a      	strb	r2, [r3, #2]
  sDate.Year = 19;
 8002e84:	187b      	adds	r3, r7, r1
 8002e86:	2213      	movs	r2, #19
 8002e88:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002e8a:	1879      	adds	r1, r7, r1
 8002e8c:	4b25      	ldr	r3, [pc, #148]	; (8002f24 <MX_RTC_Init+0x154>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	0018      	movs	r0, r3
 8002e92:	f003 f9b9 	bl	8006208 <HAL_RTC_SetDate>
 8002e96:	1e03      	subs	r3, r0, #0
 8002e98:	d001      	beq.n	8002e9e <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8002e9a:	f000 fb27 	bl	80034ec <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 8002e9e:	003b      	movs	r3, r7
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8002ea4:	003b      	movs	r3, r7
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8002eaa:	003b      	movs	r3, r7
 8002eac:	2200      	movs	r2, #0
 8002eae:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8002eb0:	003b      	movs	r3, r7
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002eb6:	003b      	movs	r3, r7
 8002eb8:	2200      	movs	r2, #0
 8002eba:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002ebc:	003b      	movs	r3, r7
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002ec2:	003b      	movs	r3, r7
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002ec8:	003b      	movs	r3, r7
 8002eca:	2200      	movs	r2, #0
 8002ecc:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002ece:	003b      	movs	r3, r7
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8002ed4:	003b      	movs	r3, r7
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	2101      	movs	r1, #1
 8002eda:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002edc:	003b      	movs	r3, r7
 8002ede:	2280      	movs	r2, #128	; 0x80
 8002ee0:	0052      	lsls	r2, r2, #1
 8002ee2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002ee4:	0039      	movs	r1, r7
 8002ee6:	4b0f      	ldr	r3, [pc, #60]	; (8002f24 <MX_RTC_Init+0x154>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	0018      	movs	r0, r3
 8002eec:	f003 fa88 	bl	8006400 <HAL_RTC_SetAlarm_IT>
 8002ef0:	1e03      	subs	r3, r0, #0
 8002ef2:	d001      	beq.n	8002ef8 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 8002ef4:	f000 fafa 	bl	80034ec <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 1;
 8002ef8:	003b      	movs	r3, r7
 8002efa:	2220      	movs	r2, #32
 8002efc:	2101      	movs	r1, #1
 8002efe:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_B;
 8002f00:	003b      	movs	r3, r7
 8002f02:	2280      	movs	r2, #128	; 0x80
 8002f04:	0092      	lsls	r2, r2, #2
 8002f06:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002f08:	0039      	movs	r1, r7
 8002f0a:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <MX_RTC_Init+0x154>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f003 fa76 	bl	8006400 <HAL_RTC_SetAlarm_IT>
 8002f14:	1e03      	subs	r3, r0, #0
 8002f16:	d001      	beq.n	8002f1c <MX_RTC_Init+0x14c>
  {
    Error_Handler();
 8002f18:	f000 fae8 	bl	80034ec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002f1c:	46c0      	nop			; (mov r8, r8)
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b010      	add	sp, #64	; 0x40
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	200001a8 	.word	0x200001a8
 8002f28:	40002800 	.word	0x40002800

08002f2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002f30:	4b19      	ldr	r3, [pc, #100]	; (8002f98 <MX_SPI1_Init+0x6c>)
 8002f32:	4a1a      	ldr	r2, [pc, #104]	; (8002f9c <MX_SPI1_Init+0x70>)
 8002f34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f36:	4b18      	ldr	r3, [pc, #96]	; (8002f98 <MX_SPI1_Init+0x6c>)
 8002f38:	2282      	movs	r2, #130	; 0x82
 8002f3a:	0052      	lsls	r2, r2, #1
 8002f3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f3e:	4b16      	ldr	r3, [pc, #88]	; (8002f98 <MX_SPI1_Init+0x6c>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f44:	4b14      	ldr	r3, [pc, #80]	; (8002f98 <MX_SPI1_Init+0x6c>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f4a:	4b13      	ldr	r3, [pc, #76]	; (8002f98 <MX_SPI1_Init+0x6c>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f50:	4b11      	ldr	r3, [pc, #68]	; (8002f98 <MX_SPI1_Init+0x6c>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f56:	4b10      	ldr	r3, [pc, #64]	; (8002f98 <MX_SPI1_Init+0x6c>)
 8002f58:	2280      	movs	r2, #128	; 0x80
 8002f5a:	0092      	lsls	r2, r2, #2
 8002f5c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f5e:	4b0e      	ldr	r3, [pc, #56]	; (8002f98 <MX_SPI1_Init+0x6c>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f64:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <MX_SPI1_Init+0x6c>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f6a:	4b0b      	ldr	r3, [pc, #44]	; (8002f98 <MX_SPI1_Init+0x6c>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f70:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <MX_SPI1_Init+0x6c>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002f76:	4b08      	ldr	r3, [pc, #32]	; (8002f98 <MX_SPI1_Init+0x6c>)
 8002f78:	2207      	movs	r2, #7
 8002f7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f7c:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <MX_SPI1_Init+0x6c>)
 8002f7e:	0018      	movs	r0, r3
 8002f80:	f003 fc70 	bl	8006864 <HAL_SPI_Init>
 8002f84:	1e03      	subs	r3, r0, #0
 8002f86:	d001      	beq.n	8002f8c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002f88:	f000 fab0 	bl	80034ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  hspi1.hdmatx = &hdma_spi1_tx;
 8002f8c:	4b02      	ldr	r3, [pc, #8]	; (8002f98 <MX_SPI1_Init+0x6c>)
 8002f8e:	4a04      	ldr	r2, [pc, #16]	; (8002fa0 <MX_SPI1_Init+0x74>)
 8002f90:	649a      	str	r2, [r3, #72]	; 0x48
  /* USER CODE END SPI1_Init 2 */

}
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	200001cc 	.word	0x200001cc
 8002f9c:	40013000 	.word	0x40013000
 8002fa0:	200002bc 	.word	0x200002bc

08002fa4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08a      	sub	sp, #40	; 0x28
 8002fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002faa:	2318      	movs	r3, #24
 8002fac:	18fb      	adds	r3, r7, r3
 8002fae:	0018      	movs	r0, r3
 8002fb0:	2310      	movs	r3, #16
 8002fb2:	001a      	movs	r2, r3
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	f004 ffc6 	bl	8007f46 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fba:	2310      	movs	r3, #16
 8002fbc:	18fb      	adds	r3, r7, r3
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	2308      	movs	r3, #8
 8002fc2:	001a      	movs	r2, r3
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	f004 ffbe 	bl	8007f46 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fca:	003b      	movs	r3, r7
 8002fcc:	0018      	movs	r0, r3
 8002fce:	2310      	movs	r3, #16
 8002fd0:	001a      	movs	r2, r3
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	f004 ffb7 	bl	8007f46 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002fd8:	4b3b      	ldr	r3, [pc, #236]	; (80030c8 <MX_TIM2_Init+0x124>)
 8002fda:	2280      	movs	r2, #128	; 0x80
 8002fdc:	05d2      	lsls	r2, r2, #23
 8002fde:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002fe0:	4b39      	ldr	r3, [pc, #228]	; (80030c8 <MX_TIM2_Init+0x124>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fe6:	4b38      	ldr	r3, [pc, #224]	; (80030c8 <MX_TIM2_Init+0x124>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0x8000;
 8002fec:	4b36      	ldr	r3, [pc, #216]	; (80030c8 <MX_TIM2_Init+0x124>)
 8002fee:	2280      	movs	r2, #128	; 0x80
 8002ff0:	0212      	lsls	r2, r2, #8
 8002ff2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ff4:	4b34      	ldr	r3, [pc, #208]	; (80030c8 <MX_TIM2_Init+0x124>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ffa:	4b33      	ldr	r3, [pc, #204]	; (80030c8 <MX_TIM2_Init+0x124>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003000:	4b31      	ldr	r3, [pc, #196]	; (80030c8 <MX_TIM2_Init+0x124>)
 8003002:	0018      	movs	r0, r3
 8003004:	f004 f8f4 	bl	80071f0 <HAL_TIM_Base_Init>
 8003008:	1e03      	subs	r3, r0, #0
 800300a:	d001      	beq.n	8003010 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 800300c:	f000 fa6e 	bl	80034ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003010:	2118      	movs	r1, #24
 8003012:	187b      	adds	r3, r7, r1
 8003014:	2280      	movs	r2, #128	; 0x80
 8003016:	0152      	lsls	r2, r2, #5
 8003018:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800301a:	187a      	adds	r2, r7, r1
 800301c:	4b2a      	ldr	r3, [pc, #168]	; (80030c8 <MX_TIM2_Init+0x124>)
 800301e:	0011      	movs	r1, r2
 8003020:	0018      	movs	r0, r3
 8003022:	f004 fbfd 	bl	8007820 <HAL_TIM_ConfigClockSource>
 8003026:	1e03      	subs	r3, r0, #0
 8003028:	d001      	beq.n	800302e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800302a:	f000 fa5f 	bl	80034ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800302e:	4b26      	ldr	r3, [pc, #152]	; (80030c8 <MX_TIM2_Init+0x124>)
 8003030:	0018      	movs	r0, r3
 8003032:	f004 f9d3 	bl	80073dc <HAL_TIM_PWM_Init>
 8003036:	1e03      	subs	r3, r0, #0
 8003038:	d001      	beq.n	800303e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800303a:	f000 fa57 	bl	80034ec <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800303e:	4b22      	ldr	r3, [pc, #136]	; (80030c8 <MX_TIM2_Init+0x124>)
 8003040:	0018      	movs	r0, r3
 8003042:	f004 f945 	bl	80072d0 <HAL_TIM_OC_Init>
 8003046:	1e03      	subs	r3, r0, #0
 8003048:	d001      	beq.n	800304e <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 800304a:	f000 fa4f 	bl	80034ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800304e:	2110      	movs	r1, #16
 8003050:	187b      	adds	r3, r7, r1
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003056:	187b      	adds	r3, r7, r1
 8003058:	2200      	movs	r2, #0
 800305a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800305c:	187a      	adds	r2, r7, r1
 800305e:	4b1a      	ldr	r3, [pc, #104]	; (80030c8 <MX_TIM2_Init+0x124>)
 8003060:	0011      	movs	r1, r2
 8003062:	0018      	movs	r0, r3
 8003064:	f004 fed1 	bl	8007e0a <HAL_TIMEx_MasterConfigSynchronization>
 8003068:	1e03      	subs	r3, r0, #0
 800306a:	d001      	beq.n	8003070 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 800306c:	f000 fa3e 	bl	80034ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003070:	003b      	movs	r3, r7
 8003072:	2260      	movs	r2, #96	; 0x60
 8003074:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003076:	003b      	movs	r3, r7
 8003078:	2200      	movs	r2, #0
 800307a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800307c:	003b      	movs	r3, r7
 800307e:	2200      	movs	r2, #0
 8003080:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003082:	003b      	movs	r3, r7
 8003084:	2200      	movs	r2, #0
 8003086:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003088:	0039      	movs	r1, r7
 800308a:	4b0f      	ldr	r3, [pc, #60]	; (80030c8 <MX_TIM2_Init+0x124>)
 800308c:	2200      	movs	r2, #0
 800308e:	0018      	movs	r0, r3
 8003090:	f004 fb0e 	bl	80076b0 <HAL_TIM_PWM_ConfigChannel>
 8003094:	1e03      	subs	r3, r0, #0
 8003096:	d001      	beq.n	800309c <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 8003098:	f000 fa28 	bl	80034ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800309c:	003b      	movs	r3, r7
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80030a2:	0039      	movs	r1, r7
 80030a4:	4b08      	ldr	r3, [pc, #32]	; (80030c8 <MX_TIM2_Init+0x124>)
 80030a6:	2204      	movs	r2, #4
 80030a8:	0018      	movs	r0, r3
 80030aa:	f004 fab3 	bl	8007614 <HAL_TIM_OC_ConfigChannel>
 80030ae:	1e03      	subs	r3, r0, #0
 80030b0:	d001      	beq.n	80030b6 <MX_TIM2_Init+0x112>
  {
    Error_Handler();
 80030b2:	f000 fa1b 	bl	80034ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80030b6:	4b04      	ldr	r3, [pc, #16]	; (80030c8 <MX_TIM2_Init+0x124>)
 80030b8:	0018      	movs	r0, r3
 80030ba:	f000 fb87 	bl	80037cc <HAL_TIM_MspPostInit>

}
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	46bd      	mov	sp, r7
 80030c2:	b00a      	add	sp, #40	; 0x28
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	20000224 	.word	0x20000224

080030cc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030d2:	003b      	movs	r3, r7
 80030d4:	0018      	movs	r0, r3
 80030d6:	2308      	movs	r3, #8
 80030d8:	001a      	movs	r2, r3
 80030da:	2100      	movs	r1, #0
 80030dc:	f004 ff33 	bl	8007f46 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80030e0:	4b15      	ldr	r3, [pc, #84]	; (8003138 <MX_TIM6_Init+0x6c>)
 80030e2:	4a16      	ldr	r2, [pc, #88]	; (800313c <MX_TIM6_Init+0x70>)
 80030e4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0x80;
 80030e6:	4b14      	ldr	r3, [pc, #80]	; (8003138 <MX_TIM6_Init+0x6c>)
 80030e8:	2280      	movs	r2, #128	; 0x80
 80030ea:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030ec:	4b12      	ldr	r3, [pc, #72]	; (8003138 <MX_TIM6_Init+0x6c>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 32768;
 80030f2:	4b11      	ldr	r3, [pc, #68]	; (8003138 <MX_TIM6_Init+0x6c>)
 80030f4:	2280      	movs	r2, #128	; 0x80
 80030f6:	0212      	lsls	r2, r2, #8
 80030f8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030fa:	4b0f      	ldr	r3, [pc, #60]	; (8003138 <MX_TIM6_Init+0x6c>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003100:	4b0d      	ldr	r3, [pc, #52]	; (8003138 <MX_TIM6_Init+0x6c>)
 8003102:	0018      	movs	r0, r3
 8003104:	f004 f874 	bl	80071f0 <HAL_TIM_Base_Init>
 8003108:	1e03      	subs	r3, r0, #0
 800310a:	d001      	beq.n	8003110 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 800310c:	f000 f9ee 	bl	80034ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003110:	003b      	movs	r3, r7
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003116:	003b      	movs	r3, r7
 8003118:	2200      	movs	r2, #0
 800311a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800311c:	003a      	movs	r2, r7
 800311e:	4b06      	ldr	r3, [pc, #24]	; (8003138 <MX_TIM6_Init+0x6c>)
 8003120:	0011      	movs	r1, r2
 8003122:	0018      	movs	r0, r3
 8003124:	f004 fe71 	bl	8007e0a <HAL_TIMEx_MasterConfigSynchronization>
 8003128:	1e03      	subs	r3, r0, #0
 800312a:	d001      	beq.n	8003130 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 800312c:	f000 f9de 	bl	80034ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003130:	46c0      	nop			; (mov r8, r8)
 8003132:	46bd      	mov	sp, r7
 8003134:	b002      	add	sp, #8
 8003136:	bd80      	pop	{r7, pc}
 8003138:	200000ec 	.word	0x200000ec
 800313c:	40001000 	.word	0x40001000

08003140 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b08a      	sub	sp, #40	; 0x28
 8003144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003146:	2318      	movs	r3, #24
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	0018      	movs	r0, r3
 800314c:	2310      	movs	r3, #16
 800314e:	001a      	movs	r2, r3
 8003150:	2100      	movs	r1, #0
 8003152:	f004 fef8 	bl	8007f46 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003156:	2310      	movs	r3, #16
 8003158:	18fb      	adds	r3, r7, r3
 800315a:	0018      	movs	r0, r3
 800315c:	2308      	movs	r3, #8
 800315e:	001a      	movs	r2, r3
 8003160:	2100      	movs	r1, #0
 8003162:	f004 fef0 	bl	8007f46 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003166:	003b      	movs	r3, r7
 8003168:	0018      	movs	r0, r3
 800316a:	2310      	movs	r3, #16
 800316c:	001a      	movs	r2, r3
 800316e:	2100      	movs	r1, #0
 8003170:	f004 fee9 	bl	8007f46 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8003174:	4b3c      	ldr	r3, [pc, #240]	; (8003268 <MX_TIM21_Init+0x128>)
 8003176:	4a3d      	ldr	r2, [pc, #244]	; (800326c <MX_TIM21_Init+0x12c>)
 8003178:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 800317a:	4b3b      	ldr	r3, [pc, #236]	; (8003268 <MX_TIM21_Init+0x128>)
 800317c:	2200      	movs	r2, #0
 800317e:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003180:	4b39      	ldr	r3, [pc, #228]	; (8003268 <MX_TIM21_Init+0x128>)
 8003182:	2200      	movs	r2, #0
 8003184:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 0x8000;
 8003186:	4b38      	ldr	r3, [pc, #224]	; (8003268 <MX_TIM21_Init+0x128>)
 8003188:	2280      	movs	r2, #128	; 0x80
 800318a:	0212      	lsls	r2, r2, #8
 800318c:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800318e:	4b36      	ldr	r3, [pc, #216]	; (8003268 <MX_TIM21_Init+0x128>)
 8003190:	2200      	movs	r2, #0
 8003192:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003194:	4b34      	ldr	r3, [pc, #208]	; (8003268 <MX_TIM21_Init+0x128>)
 8003196:	2200      	movs	r2, #0
 8003198:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 800319a:	4b33      	ldr	r3, [pc, #204]	; (8003268 <MX_TIM21_Init+0x128>)
 800319c:	0018      	movs	r0, r3
 800319e:	f004 f827 	bl	80071f0 <HAL_TIM_Base_Init>
 80031a2:	1e03      	subs	r3, r0, #0
 80031a4:	d001      	beq.n	80031aa <MX_TIM21_Init+0x6a>
  {
    Error_Handler();
 80031a6:	f000 f9a1 	bl	80034ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80031aa:	2118      	movs	r1, #24
 80031ac:	187b      	adds	r3, r7, r1
 80031ae:	2280      	movs	r2, #128	; 0x80
 80031b0:	0192      	lsls	r2, r2, #6
 80031b2:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80031b4:	187b      	adds	r3, r7, r1
 80031b6:	2200      	movs	r2, #0
 80031b8:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80031ba:	187b      	adds	r3, r7, r1
 80031bc:	2200      	movs	r2, #0
 80031be:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 80031c0:	187b      	adds	r3, r7, r1
 80031c2:	2200      	movs	r2, #0
 80031c4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80031c6:	187a      	adds	r2, r7, r1
 80031c8:	4b27      	ldr	r3, [pc, #156]	; (8003268 <MX_TIM21_Init+0x128>)
 80031ca:	0011      	movs	r1, r2
 80031cc:	0018      	movs	r0, r3
 80031ce:	f004 fb27 	bl	8007820 <HAL_TIM_ConfigClockSource>
 80031d2:	1e03      	subs	r3, r0, #0
 80031d4:	d001      	beq.n	80031da <MX_TIM21_Init+0x9a>
  {
    Error_Handler();
 80031d6:	f000 f989 	bl	80034ec <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 80031da:	4b23      	ldr	r3, [pc, #140]	; (8003268 <MX_TIM21_Init+0x128>)
 80031dc:	0018      	movs	r0, r3
 80031de:	f004 f877 	bl	80072d0 <HAL_TIM_OC_Init>
 80031e2:	1e03      	subs	r3, r0, #0
 80031e4:	d001      	beq.n	80031ea <MX_TIM21_Init+0xaa>
  {
    Error_Handler();
 80031e6:	f000 f981 	bl	80034ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031ea:	2110      	movs	r1, #16
 80031ec:	187b      	adds	r3, r7, r1
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031f2:	187b      	adds	r3, r7, r1
 80031f4:	2200      	movs	r2, #0
 80031f6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80031f8:	187a      	adds	r2, r7, r1
 80031fa:	4b1b      	ldr	r3, [pc, #108]	; (8003268 <MX_TIM21_Init+0x128>)
 80031fc:	0011      	movs	r1, r2
 80031fe:	0018      	movs	r0, r3
 8003200:	f004 fe03 	bl	8007e0a <HAL_TIMEx_MasterConfigSynchronization>
 8003204:	1e03      	subs	r3, r0, #0
 8003206:	d001      	beq.n	800320c <MX_TIM21_Init+0xcc>
  {
    Error_Handler();
 8003208:	f000 f970 	bl	80034ec <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim21, TIM21_ETR_LSE) != HAL_OK)
 800320c:	4b16      	ldr	r3, [pc, #88]	; (8003268 <MX_TIM21_Init+0x128>)
 800320e:	2103      	movs	r1, #3
 8003210:	0018      	movs	r0, r3
 8003212:	f004 fe3d 	bl	8007e90 <HAL_TIMEx_RemapConfig>
 8003216:	1e03      	subs	r3, r0, #0
 8003218:	d001      	beq.n	800321e <MX_TIM21_Init+0xde>
  {
    Error_Handler();
 800321a:	f000 f967 	bl	80034ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800321e:	003b      	movs	r3, r7
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003224:	003b      	movs	r3, r7
 8003226:	2200      	movs	r2, #0
 8003228:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800322a:	003b      	movs	r3, r7
 800322c:	2200      	movs	r2, #0
 800322e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003230:	003b      	movs	r3, r7
 8003232:	2200      	movs	r2, #0
 8003234:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003236:	0039      	movs	r1, r7
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <MX_TIM21_Init+0x128>)
 800323a:	2200      	movs	r2, #0
 800323c:	0018      	movs	r0, r3
 800323e:	f004 f9e9 	bl	8007614 <HAL_TIM_OC_ConfigChannel>
 8003242:	1e03      	subs	r3, r0, #0
 8003244:	d001      	beq.n	800324a <MX_TIM21_Init+0x10a>
  {
    Error_Handler();
 8003246:	f000 f951 	bl	80034ec <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800324a:	0039      	movs	r1, r7
 800324c:	4b06      	ldr	r3, [pc, #24]	; (8003268 <MX_TIM21_Init+0x128>)
 800324e:	2204      	movs	r2, #4
 8003250:	0018      	movs	r0, r3
 8003252:	f004 f9df 	bl	8007614 <HAL_TIM_OC_ConfigChannel>
 8003256:	1e03      	subs	r3, r0, #0
 8003258:	d001      	beq.n	800325e <MX_TIM21_Init+0x11e>
  {
    Error_Handler();
 800325a:	f000 f947 	bl	80034ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 800325e:	46c0      	nop			; (mov r8, r8)
 8003260:	46bd      	mov	sp, r7
 8003262:	b00a      	add	sp, #40	; 0x28
 8003264:	bd80      	pop	{r7, pc}
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	20000304 	.word	0x20000304
 800326c:	40010800 	.word	0x40010800

08003270 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08a      	sub	sp, #40	; 0x28
 8003274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003276:	2318      	movs	r3, #24
 8003278:	18fb      	adds	r3, r7, r3
 800327a:	0018      	movs	r0, r3
 800327c:	2310      	movs	r3, #16
 800327e:	001a      	movs	r2, r3
 8003280:	2100      	movs	r1, #0
 8003282:	f004 fe60 	bl	8007f46 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003286:	2310      	movs	r3, #16
 8003288:	18fb      	adds	r3, r7, r3
 800328a:	0018      	movs	r0, r3
 800328c:	2308      	movs	r3, #8
 800328e:	001a      	movs	r2, r3
 8003290:	2100      	movs	r1, #0
 8003292:	f004 fe58 	bl	8007f46 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003296:	003b      	movs	r3, r7
 8003298:	0018      	movs	r0, r3
 800329a:	2310      	movs	r3, #16
 800329c:	001a      	movs	r2, r3
 800329e:	2100      	movs	r1, #0
 80032a0:	f004 fe51 	bl	8007f46 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 80032a4:	4b37      	ldr	r3, [pc, #220]	; (8003384 <MX_TIM22_Init+0x114>)
 80032a6:	4a38      	ldr	r2, [pc, #224]	; (8003388 <MX_TIM22_Init+0x118>)
 80032a8:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0x400;
 80032aa:	4b36      	ldr	r3, [pc, #216]	; (8003384 <MX_TIM22_Init+0x114>)
 80032ac:	2280      	movs	r2, #128	; 0x80
 80032ae:	00d2      	lsls	r2, r2, #3
 80032b0:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032b2:	4b34      	ldr	r3, [pc, #208]	; (8003384 <MX_TIM22_Init+0x114>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 1920;
 80032b8:	4b32      	ldr	r3, [pc, #200]	; (8003384 <MX_TIM22_Init+0x114>)
 80032ba:	22f0      	movs	r2, #240	; 0xf0
 80032bc:	00d2      	lsls	r2, r2, #3
 80032be:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032c0:	4b30      	ldr	r3, [pc, #192]	; (8003384 <MX_TIM22_Init+0x114>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032c6:	4b2f      	ldr	r3, [pc, #188]	; (8003384 <MX_TIM22_Init+0x114>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 80032cc:	4b2d      	ldr	r3, [pc, #180]	; (8003384 <MX_TIM22_Init+0x114>)
 80032ce:	0018      	movs	r0, r3
 80032d0:	f003 ff8e 	bl	80071f0 <HAL_TIM_Base_Init>
 80032d4:	1e03      	subs	r3, r0, #0
 80032d6:	d001      	beq.n	80032dc <MX_TIM22_Init+0x6c>
  {
    Error_Handler();
 80032d8:	f000 f908 	bl	80034ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80032dc:	2118      	movs	r1, #24
 80032de:	187b      	adds	r3, r7, r1
 80032e0:	2280      	movs	r2, #128	; 0x80
 80032e2:	0192      	lsls	r2, r2, #6
 80032e4:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80032e6:	187b      	adds	r3, r7, r1
 80032e8:	2200      	movs	r2, #0
 80032ea:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80032ec:	187b      	adds	r3, r7, r1
 80032ee:	2200      	movs	r2, #0
 80032f0:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 80032f2:	187b      	adds	r3, r7, r1
 80032f4:	2200      	movs	r2, #0
 80032f6:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 80032f8:	187a      	adds	r2, r7, r1
 80032fa:	4b22      	ldr	r3, [pc, #136]	; (8003384 <MX_TIM22_Init+0x114>)
 80032fc:	0011      	movs	r1, r2
 80032fe:	0018      	movs	r0, r3
 8003300:	f004 fa8e 	bl	8007820 <HAL_TIM_ConfigClockSource>
 8003304:	1e03      	subs	r3, r0, #0
 8003306:	d001      	beq.n	800330c <MX_TIM22_Init+0x9c>
  {
    Error_Handler();
 8003308:	f000 f8f0 	bl	80034ec <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim22) != HAL_OK)
 800330c:	4b1d      	ldr	r3, [pc, #116]	; (8003384 <MX_TIM22_Init+0x114>)
 800330e:	0018      	movs	r0, r3
 8003310:	f003 ffde 	bl	80072d0 <HAL_TIM_OC_Init>
 8003314:	1e03      	subs	r3, r0, #0
 8003316:	d001      	beq.n	800331c <MX_TIM22_Init+0xac>
  {
    Error_Handler();
 8003318:	f000 f8e8 	bl	80034ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800331c:	2110      	movs	r1, #16
 800331e:	187b      	adds	r3, r7, r1
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003324:	187b      	adds	r3, r7, r1
 8003326:	2200      	movs	r2, #0
 8003328:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 800332a:	187a      	adds	r2, r7, r1
 800332c:	4b15      	ldr	r3, [pc, #84]	; (8003384 <MX_TIM22_Init+0x114>)
 800332e:	0011      	movs	r1, r2
 8003330:	0018      	movs	r0, r3
 8003332:	f004 fd6a 	bl	8007e0a <HAL_TIMEx_MasterConfigSynchronization>
 8003336:	1e03      	subs	r3, r0, #0
 8003338:	d001      	beq.n	800333e <MX_TIM22_Init+0xce>
  {
    Error_Handler();
 800333a:	f000 f8d7 	bl	80034ec <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim22, TIM22_ETR_LSE) != HAL_OK)
 800333e:	4b11      	ldr	r3, [pc, #68]	; (8003384 <MX_TIM22_Init+0x114>)
 8003340:	2103      	movs	r1, #3
 8003342:	0018      	movs	r0, r3
 8003344:	f004 fda4 	bl	8007e90 <HAL_TIMEx_RemapConfig>
 8003348:	1e03      	subs	r3, r0, #0
 800334a:	d001      	beq.n	8003350 <MX_TIM22_Init+0xe0>
  {
    Error_Handler();
 800334c:	f000 f8ce 	bl	80034ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003350:	003b      	movs	r3, r7
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003356:	003b      	movs	r3, r7
 8003358:	2200      	movs	r2, #0
 800335a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800335c:	003b      	movs	r3, r7
 800335e:	2200      	movs	r2, #0
 8003360:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003362:	003b      	movs	r3, r7
 8003364:	2200      	movs	r2, #0
 8003366:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003368:	0039      	movs	r1, r7
 800336a:	4b06      	ldr	r3, [pc, #24]	; (8003384 <MX_TIM22_Init+0x114>)
 800336c:	2200      	movs	r2, #0
 800336e:	0018      	movs	r0, r3
 8003370:	f004 f950 	bl	8007614 <HAL_TIM_OC_ConfigChannel>
 8003374:	1e03      	subs	r3, r0, #0
 8003376:	d001      	beq.n	800337c <MX_TIM22_Init+0x10c>
  {
    Error_Handler();
 8003378:	f000 f8b8 	bl	80034ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */

}
 800337c:	46c0      	nop			; (mov r8, r8)
 800337e:	46bd      	mov	sp, r7
 8003380:	b00a      	add	sp, #40	; 0x28
 8003382:	bd80      	pop	{r7, pc}
 8003384:	2000013c 	.word	0x2000013c
 8003388:	40011400 	.word	0x40011400

0800338c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003392:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <MX_DMA_Init+0x38>)
 8003394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003396:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <MX_DMA_Init+0x38>)
 8003398:	2101      	movs	r1, #1
 800339a:	430a      	orrs	r2, r1
 800339c:	631a      	str	r2, [r3, #48]	; 0x30
 800339e:	4b09      	ldr	r3, [pc, #36]	; (80033c4 <MX_DMA_Init+0x38>)
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	2201      	movs	r2, #1
 80033a4:	4013      	ands	r3, r2
 80033a6:	607b      	str	r3, [r7, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80033aa:	2200      	movs	r2, #0
 80033ac:	2100      	movs	r1, #0
 80033ae:	200a      	movs	r0, #10
 80033b0:	f001 f96c 	bl	800468c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80033b4:	200a      	movs	r0, #10
 80033b6:	f001 f97e 	bl	80046b6 <HAL_NVIC_EnableIRQ>

}
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	46bd      	mov	sp, r7
 80033be:	b002      	add	sp, #8
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	46c0      	nop			; (mov r8, r8)
 80033c4:	40021000 	.word	0x40021000

080033c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033c8:	b590      	push	{r4, r7, lr}
 80033ca:	b089      	sub	sp, #36	; 0x24
 80033cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ce:	240c      	movs	r4, #12
 80033d0:	193b      	adds	r3, r7, r4
 80033d2:	0018      	movs	r0, r3
 80033d4:	2314      	movs	r3, #20
 80033d6:	001a      	movs	r2, r3
 80033d8:	2100      	movs	r1, #0
 80033da:	f004 fdb4 	bl	8007f46 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033de:	4b3e      	ldr	r3, [pc, #248]	; (80034d8 <MX_GPIO_Init+0x110>)
 80033e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e2:	4b3d      	ldr	r3, [pc, #244]	; (80034d8 <MX_GPIO_Init+0x110>)
 80033e4:	2104      	movs	r1, #4
 80033e6:	430a      	orrs	r2, r1
 80033e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80033ea:	4b3b      	ldr	r3, [pc, #236]	; (80034d8 <MX_GPIO_Init+0x110>)
 80033ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ee:	2204      	movs	r2, #4
 80033f0:	4013      	ands	r3, r2
 80033f2:	60bb      	str	r3, [r7, #8]
 80033f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033f6:	4b38      	ldr	r3, [pc, #224]	; (80034d8 <MX_GPIO_Init+0x110>)
 80033f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033fa:	4b37      	ldr	r3, [pc, #220]	; (80034d8 <MX_GPIO_Init+0x110>)
 80033fc:	2101      	movs	r1, #1
 80033fe:	430a      	orrs	r2, r1
 8003400:	62da      	str	r2, [r3, #44]	; 0x2c
 8003402:	4b35      	ldr	r3, [pc, #212]	; (80034d8 <MX_GPIO_Init+0x110>)
 8003404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003406:	2201      	movs	r2, #1
 8003408:	4013      	ands	r3, r2
 800340a:	607b      	str	r3, [r7, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800340e:	4b32      	ldr	r3, [pc, #200]	; (80034d8 <MX_GPIO_Init+0x110>)
 8003410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003412:	4b31      	ldr	r3, [pc, #196]	; (80034d8 <MX_GPIO_Init+0x110>)
 8003414:	2102      	movs	r1, #2
 8003416:	430a      	orrs	r2, r1
 8003418:	62da      	str	r2, [r3, #44]	; 0x2c
 800341a:	4b2f      	ldr	r3, [pc, #188]	; (80034d8 <MX_GPIO_Init+0x110>)
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341e:	2202      	movs	r2, #2
 8003420:	4013      	ands	r3, r2
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_7, GPIO_PIN_RESET);
 8003426:	4b2d      	ldr	r3, [pc, #180]	; (80034dc <MX_GPIO_Init+0x114>)
 8003428:	2200      	movs	r2, #0
 800342a:	218b      	movs	r1, #139	; 0x8b
 800342c:	0018      	movs	r0, r3
 800342e:	f001 fc88 	bl	8004d42 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_6, GPIO_PIN_RESET);
 8003432:	4b2b      	ldr	r3, [pc, #172]	; (80034e0 <MX_GPIO_Init+0x118>)
 8003434:	2200      	movs	r2, #0
 8003436:	2142      	movs	r1, #66	; 0x42
 8003438:	0018      	movs	r0, r3
 800343a:	f001 fc82 	bl	8004d42 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC3 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_7;
 800343e:	0021      	movs	r1, r4
 8003440:	187b      	adds	r3, r7, r1
 8003442:	228b      	movs	r2, #139	; 0x8b
 8003444:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003446:	187b      	adds	r3, r7, r1
 8003448:	2201      	movs	r2, #1
 800344a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344c:	187b      	adds	r3, r7, r1
 800344e:	2200      	movs	r2, #0
 8003450:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003452:	187b      	adds	r3, r7, r1
 8003454:	2200      	movs	r2, #0
 8003456:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003458:	000c      	movs	r4, r1
 800345a:	187b      	adds	r3, r7, r1
 800345c:	4a1f      	ldr	r2, [pc, #124]	; (80034dc <MX_GPIO_Init+0x114>)
 800345e:	0019      	movs	r1, r3
 8003460:	0010      	movs	r0, r2
 8003462:	f001 fad3 	bl	8004a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8003466:	0021      	movs	r1, r4
 8003468:	187b      	adds	r3, r7, r1
 800346a:	2242      	movs	r2, #66	; 0x42
 800346c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800346e:	187b      	adds	r3, r7, r1
 8003470:	2201      	movs	r2, #1
 8003472:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003474:	187b      	adds	r3, r7, r1
 8003476:	2200      	movs	r2, #0
 8003478:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800347a:	187b      	adds	r3, r7, r1
 800347c:	2200      	movs	r2, #0
 800347e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003480:	000c      	movs	r4, r1
 8003482:	187b      	adds	r3, r7, r1
 8003484:	4a16      	ldr	r2, [pc, #88]	; (80034e0 <MX_GPIO_Init+0x118>)
 8003486:	0019      	movs	r1, r3
 8003488:	0010      	movs	r0, r2
 800348a:	f001 fabf 	bl	8004a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800348e:	0021      	movs	r1, r4
 8003490:	187b      	adds	r3, r7, r1
 8003492:	4a14      	ldr	r2, [pc, #80]	; (80034e4 <MX_GPIO_Init+0x11c>)
 8003494:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003496:	187b      	adds	r3, r7, r1
 8003498:	4a13      	ldr	r2, [pc, #76]	; (80034e8 <MX_GPIO_Init+0x120>)
 800349a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800349c:	187b      	adds	r3, r7, r1
 800349e:	2202      	movs	r2, #2
 80034a0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034a2:	187b      	adds	r3, r7, r1
 80034a4:	4a0e      	ldr	r2, [pc, #56]	; (80034e0 <MX_GPIO_Init+0x118>)
 80034a6:	0019      	movs	r1, r3
 80034a8:	0010      	movs	r0, r2
 80034aa:	f001 faaf 	bl	8004a0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80034ae:	2200      	movs	r2, #0
 80034b0:	2100      	movs	r1, #0
 80034b2:	2006      	movs	r0, #6
 80034b4:	f001 f8ea 	bl	800468c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80034b8:	2006      	movs	r0, #6
 80034ba:	f001 f8fc 	bl	80046b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80034be:	2200      	movs	r2, #0
 80034c0:	2100      	movs	r1, #0
 80034c2:	2007      	movs	r0, #7
 80034c4:	f001 f8e2 	bl	800468c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80034c8:	2007      	movs	r0, #7
 80034ca:	f001 f8f4 	bl	80046b6 <HAL_NVIC_EnableIRQ>

}
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	46bd      	mov	sp, r7
 80034d2:	b009      	add	sp, #36	; 0x24
 80034d4:	bd90      	pop	{r4, r7, pc}
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	40021000 	.word	0x40021000
 80034dc:	50000800 	.word	0x50000800
 80034e0:	50000400 	.word	0x50000400
 80034e4:	0000e004 	.word	0x0000e004
 80034e8:	10110000 	.word	0x10110000

080034ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80034f0:	46c0      	nop			; (mov r8, r8)
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
	...

080034f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034fc:	4b07      	ldr	r3, [pc, #28]	; (800351c <HAL_MspInit+0x24>)
 80034fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003500:	4b06      	ldr	r3, [pc, #24]	; (800351c <HAL_MspInit+0x24>)
 8003502:	2101      	movs	r1, #1
 8003504:	430a      	orrs	r2, r1
 8003506:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003508:	4b04      	ldr	r3, [pc, #16]	; (800351c <HAL_MspInit+0x24>)
 800350a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800350c:	4b03      	ldr	r3, [pc, #12]	; (800351c <HAL_MspInit+0x24>)
 800350e:	2180      	movs	r1, #128	; 0x80
 8003510:	0549      	lsls	r1, r1, #21
 8003512:	430a      	orrs	r2, r1
 8003514:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40021000 	.word	0x40021000

08003520 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b088      	sub	sp, #32
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003528:	230c      	movs	r3, #12
 800352a:	18fb      	adds	r3, r7, r3
 800352c:	0018      	movs	r0, r3
 800352e:	2314      	movs	r3, #20
 8003530:	001a      	movs	r2, r3
 8003532:	2100      	movs	r1, #0
 8003534:	f004 fd07 	bl	8007f46 <memset>
  if(hadc->Instance==ADC1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a15      	ldr	r2, [pc, #84]	; (8003594 <HAL_ADC_MspInit+0x74>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d123      	bne.n	800358a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003542:	4b15      	ldr	r3, [pc, #84]	; (8003598 <HAL_ADC_MspInit+0x78>)
 8003544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003546:	4b14      	ldr	r3, [pc, #80]	; (8003598 <HAL_ADC_MspInit+0x78>)
 8003548:	2180      	movs	r1, #128	; 0x80
 800354a:	0089      	lsls	r1, r1, #2
 800354c:	430a      	orrs	r2, r1
 800354e:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003550:	4b11      	ldr	r3, [pc, #68]	; (8003598 <HAL_ADC_MspInit+0x78>)
 8003552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003554:	4b10      	ldr	r3, [pc, #64]	; (8003598 <HAL_ADC_MspInit+0x78>)
 8003556:	2101      	movs	r1, #1
 8003558:	430a      	orrs	r2, r1
 800355a:	62da      	str	r2, [r3, #44]	; 0x2c
 800355c:	4b0e      	ldr	r3, [pc, #56]	; (8003598 <HAL_ADC_MspInit+0x78>)
 800355e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003560:	2201      	movs	r2, #1
 8003562:	4013      	ands	r3, r2
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003568:	210c      	movs	r1, #12
 800356a:	187b      	adds	r3, r7, r1
 800356c:	2201      	movs	r2, #1
 800356e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003570:	187b      	adds	r3, r7, r1
 8003572:	2203      	movs	r2, #3
 8003574:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003576:	187b      	adds	r3, r7, r1
 8003578:	2200      	movs	r2, #0
 800357a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800357c:	187a      	adds	r2, r7, r1
 800357e:	23a0      	movs	r3, #160	; 0xa0
 8003580:	05db      	lsls	r3, r3, #23
 8003582:	0011      	movs	r1, r2
 8003584:	0018      	movs	r0, r3
 8003586:	f001 fa41 	bl	8004a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	46bd      	mov	sp, r7
 800358e:	b008      	add	sp, #32
 8003590:	bd80      	pop	{r7, pc}
 8003592:	46c0      	nop			; (mov r8, r8)
 8003594:	40012400 	.word	0x40012400
 8003598:	40021000 	.word	0x40021000

0800359c <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  if(hlptim->Instance==LPTIM1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a0a      	ldr	r2, [pc, #40]	; (80035d4 <HAL_LPTIM_MspInit+0x38>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d10e      	bne.n	80035cc <HAL_LPTIM_MspInit+0x30>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80035ae:	4b0a      	ldr	r3, [pc, #40]	; (80035d8 <HAL_LPTIM_MspInit+0x3c>)
 80035b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035b2:	4b09      	ldr	r3, [pc, #36]	; (80035d8 <HAL_LPTIM_MspInit+0x3c>)
 80035b4:	2180      	movs	r1, #128	; 0x80
 80035b6:	0609      	lsls	r1, r1, #24
 80035b8:	430a      	orrs	r2, r1
 80035ba:	639a      	str	r2, [r3, #56]	; 0x38
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80035bc:	2200      	movs	r2, #0
 80035be:	2100      	movs	r1, #0
 80035c0:	200d      	movs	r0, #13
 80035c2:	f001 f863 	bl	800468c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80035c6:	200d      	movs	r0, #13
 80035c8:	f001 f875 	bl	80046b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80035cc:	46c0      	nop			; (mov r8, r8)
 80035ce:	46bd      	mov	sp, r7
 80035d0:	b002      	add	sp, #8
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40007c00 	.word	0x40007c00
 80035d8:	40021000 	.word	0x40021000

080035dc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a0a      	ldr	r2, [pc, #40]	; (8003614 <HAL_RTC_MspInit+0x38>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d10e      	bne.n	800360c <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80035ee:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <HAL_RTC_MspInit+0x3c>)
 80035f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035f2:	4b09      	ldr	r3, [pc, #36]	; (8003618 <HAL_RTC_MspInit+0x3c>)
 80035f4:	2180      	movs	r1, #128	; 0x80
 80035f6:	02c9      	lsls	r1, r1, #11
 80035f8:	430a      	orrs	r2, r1
 80035fa:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80035fc:	2200      	movs	r2, #0
 80035fe:	2100      	movs	r1, #0
 8003600:	2002      	movs	r0, #2
 8003602:	f001 f843 	bl	800468c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8003606:	2002      	movs	r0, #2
 8003608:	f001 f855 	bl	80046b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800360c:	46c0      	nop			; (mov r8, r8)
 800360e:	46bd      	mov	sp, r7
 8003610:	b002      	add	sp, #8
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40002800 	.word	0x40002800
 8003618:	40021000 	.word	0x40021000

0800361c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b088      	sub	sp, #32
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003624:	230c      	movs	r3, #12
 8003626:	18fb      	adds	r3, r7, r3
 8003628:	0018      	movs	r0, r3
 800362a:	2314      	movs	r3, #20
 800362c:	001a      	movs	r2, r3
 800362e:	2100      	movs	r1, #0
 8003630:	f004 fc89 	bl	8007f46 <memset>
  if(hspi->Instance==SPI1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a30      	ldr	r2, [pc, #192]	; (80036fc <HAL_SPI_MspInit+0xe0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d15a      	bne.n	80036f4 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800363e:	4b30      	ldr	r3, [pc, #192]	; (8003700 <HAL_SPI_MspInit+0xe4>)
 8003640:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003642:	4b2f      	ldr	r3, [pc, #188]	; (8003700 <HAL_SPI_MspInit+0xe4>)
 8003644:	2180      	movs	r1, #128	; 0x80
 8003646:	0149      	lsls	r1, r1, #5
 8003648:	430a      	orrs	r2, r1
 800364a:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800364c:	4b2c      	ldr	r3, [pc, #176]	; (8003700 <HAL_SPI_MspInit+0xe4>)
 800364e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003650:	4b2b      	ldr	r3, [pc, #172]	; (8003700 <HAL_SPI_MspInit+0xe4>)
 8003652:	2101      	movs	r1, #1
 8003654:	430a      	orrs	r2, r1
 8003656:	62da      	str	r2, [r3, #44]	; 0x2c
 8003658:	4b29      	ldr	r3, [pc, #164]	; (8003700 <HAL_SPI_MspInit+0xe4>)
 800365a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365c:	2201      	movs	r2, #1
 800365e:	4013      	ands	r3, r2
 8003660:	60bb      	str	r3, [r7, #8]
 8003662:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003664:	210c      	movs	r1, #12
 8003666:	187b      	adds	r3, r7, r1
 8003668:	22a0      	movs	r2, #160	; 0xa0
 800366a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366c:	187b      	adds	r3, r7, r1
 800366e:	2202      	movs	r2, #2
 8003670:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003672:	187b      	adds	r3, r7, r1
 8003674:	2200      	movs	r2, #0
 8003676:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003678:	187b      	adds	r3, r7, r1
 800367a:	2203      	movs	r2, #3
 800367c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800367e:	187b      	adds	r3, r7, r1
 8003680:	2200      	movs	r2, #0
 8003682:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003684:	187a      	adds	r2, r7, r1
 8003686:	23a0      	movs	r3, #160	; 0xa0
 8003688:	05db      	lsls	r3, r3, #23
 800368a:	0011      	movs	r1, r2
 800368c:	0018      	movs	r0, r3
 800368e:	f001 f9bd 	bl	8004a0c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8003692:	4b1c      	ldr	r3, [pc, #112]	; (8003704 <HAL_SPI_MspInit+0xe8>)
 8003694:	4a1c      	ldr	r2, [pc, #112]	; (8003708 <HAL_SPI_MspInit+0xec>)
 8003696:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8003698:	4b1a      	ldr	r3, [pc, #104]	; (8003704 <HAL_SPI_MspInit+0xe8>)
 800369a:	2201      	movs	r2, #1
 800369c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800369e:	4b19      	ldr	r3, [pc, #100]	; (8003704 <HAL_SPI_MspInit+0xe8>)
 80036a0:	2210      	movs	r2, #16
 80036a2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036a4:	4b17      	ldr	r3, [pc, #92]	; (8003704 <HAL_SPI_MspInit+0xe8>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80036aa:	4b16      	ldr	r3, [pc, #88]	; (8003704 <HAL_SPI_MspInit+0xe8>)
 80036ac:	2280      	movs	r2, #128	; 0x80
 80036ae:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036b0:	4b14      	ldr	r3, [pc, #80]	; (8003704 <HAL_SPI_MspInit+0xe8>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036b6:	4b13      	ldr	r3, [pc, #76]	; (8003704 <HAL_SPI_MspInit+0xe8>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80036bc:	4b11      	ldr	r3, [pc, #68]	; (8003704 <HAL_SPI_MspInit+0xe8>)
 80036be:	2200      	movs	r2, #0
 80036c0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80036c2:	4b10      	ldr	r3, [pc, #64]	; (8003704 <HAL_SPI_MspInit+0xe8>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80036c8:	4b0e      	ldr	r3, [pc, #56]	; (8003704 <HAL_SPI_MspInit+0xe8>)
 80036ca:	0018      	movs	r0, r3
 80036cc:	f001 f830 	bl	8004730 <HAL_DMA_Init>
 80036d0:	1e03      	subs	r3, r0, #0
 80036d2:	d001      	beq.n	80036d8 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 80036d4:	f7ff ff0a 	bl	80034ec <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a0a      	ldr	r2, [pc, #40]	; (8003704 <HAL_SPI_MspInit+0xe8>)
 80036dc:	649a      	str	r2, [r3, #72]	; 0x48
 80036de:	4b09      	ldr	r3, [pc, #36]	; (8003704 <HAL_SPI_MspInit+0xe8>)
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80036e4:	2200      	movs	r2, #0
 80036e6:	2100      	movs	r1, #0
 80036e8:	2019      	movs	r0, #25
 80036ea:	f000 ffcf 	bl	800468c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80036ee:	2019      	movs	r0, #25
 80036f0:	f000 ffe1 	bl	80046b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80036f4:	46c0      	nop			; (mov r8, r8)
 80036f6:	46bd      	mov	sp, r7
 80036f8:	b008      	add	sp, #32
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40013000 	.word	0x40013000
 8003700:	40021000 	.word	0x40021000
 8003704:	200002bc 	.word	0x200002bc
 8003708:	40020030 	.word	0x40020030

0800370c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	2380      	movs	r3, #128	; 0x80
 800371a:	05db      	lsls	r3, r3, #23
 800371c:	429a      	cmp	r2, r3
 800371e:	d10e      	bne.n	800373e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003720:	4b26      	ldr	r3, [pc, #152]	; (80037bc <HAL_TIM_Base_MspInit+0xb0>)
 8003722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003724:	4b25      	ldr	r3, [pc, #148]	; (80037bc <HAL_TIM_Base_MspInit+0xb0>)
 8003726:	2101      	movs	r1, #1
 8003728:	430a      	orrs	r2, r1
 800372a:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800372c:	2200      	movs	r2, #0
 800372e:	2100      	movs	r1, #0
 8003730:	200f      	movs	r0, #15
 8003732:	f000 ffab 	bl	800468c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003736:	200f      	movs	r0, #15
 8003738:	f000 ffbd 	bl	80046b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 800373c:	e03a      	b.n	80037b4 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM6)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a1f      	ldr	r2, [pc, #124]	; (80037c0 <HAL_TIM_Base_MspInit+0xb4>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d10e      	bne.n	8003766 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003748:	4b1c      	ldr	r3, [pc, #112]	; (80037bc <HAL_TIM_Base_MspInit+0xb0>)
 800374a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800374c:	4b1b      	ldr	r3, [pc, #108]	; (80037bc <HAL_TIM_Base_MspInit+0xb0>)
 800374e:	2110      	movs	r1, #16
 8003750:	430a      	orrs	r2, r1
 8003752:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003754:	2200      	movs	r2, #0
 8003756:	2100      	movs	r1, #0
 8003758:	2011      	movs	r0, #17
 800375a:	f000 ff97 	bl	800468c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800375e:	2011      	movs	r0, #17
 8003760:	f000 ffa9 	bl	80046b6 <HAL_NVIC_EnableIRQ>
}
 8003764:	e026      	b.n	80037b4 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM21)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a16      	ldr	r2, [pc, #88]	; (80037c4 <HAL_TIM_Base_MspInit+0xb8>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d10e      	bne.n	800378e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8003770:	4b12      	ldr	r3, [pc, #72]	; (80037bc <HAL_TIM_Base_MspInit+0xb0>)
 8003772:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003774:	4b11      	ldr	r3, [pc, #68]	; (80037bc <HAL_TIM_Base_MspInit+0xb0>)
 8003776:	2104      	movs	r1, #4
 8003778:	430a      	orrs	r2, r1
 800377a:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 800377c:	2200      	movs	r2, #0
 800377e:	2100      	movs	r1, #0
 8003780:	2014      	movs	r0, #20
 8003782:	f000 ff83 	bl	800468c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8003786:	2014      	movs	r0, #20
 8003788:	f000 ff95 	bl	80046b6 <HAL_NVIC_EnableIRQ>
}
 800378c:	e012      	b.n	80037b4 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM22)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a0d      	ldr	r2, [pc, #52]	; (80037c8 <HAL_TIM_Base_MspInit+0xbc>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d10d      	bne.n	80037b4 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8003798:	4b08      	ldr	r3, [pc, #32]	; (80037bc <HAL_TIM_Base_MspInit+0xb0>)
 800379a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800379c:	4b07      	ldr	r3, [pc, #28]	; (80037bc <HAL_TIM_Base_MspInit+0xb0>)
 800379e:	2120      	movs	r1, #32
 80037a0:	430a      	orrs	r2, r1
 80037a2:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM22_IRQn, 0, 0);
 80037a4:	2200      	movs	r2, #0
 80037a6:	2100      	movs	r1, #0
 80037a8:	2016      	movs	r0, #22
 80037aa:	f000 ff6f 	bl	800468c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
 80037ae:	2016      	movs	r0, #22
 80037b0:	f000 ff81 	bl	80046b6 <HAL_NVIC_EnableIRQ>
}
 80037b4:	46c0      	nop			; (mov r8, r8)
 80037b6:	46bd      	mov	sp, r7
 80037b8:	b002      	add	sp, #8
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40021000 	.word	0x40021000
 80037c0:	40001000 	.word	0x40001000
 80037c4:	40010800 	.word	0x40010800
 80037c8:	40011400 	.word	0x40011400

080037cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b088      	sub	sp, #32
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d4:	230c      	movs	r3, #12
 80037d6:	18fb      	adds	r3, r7, r3
 80037d8:	0018      	movs	r0, r3
 80037da:	2314      	movs	r3, #20
 80037dc:	001a      	movs	r2, r3
 80037de:	2100      	movs	r1, #0
 80037e0:	f004 fbb1 	bl	8007f46 <memset>
  if(htim->Instance==TIM2)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	2380      	movs	r3, #128	; 0x80
 80037ea:	05db      	lsls	r3, r3, #23
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d123      	bne.n	8003838 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037f0:	4b13      	ldr	r3, [pc, #76]	; (8003840 <HAL_TIM_MspPostInit+0x74>)
 80037f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f4:	4b12      	ldr	r3, [pc, #72]	; (8003840 <HAL_TIM_MspPostInit+0x74>)
 80037f6:	2101      	movs	r1, #1
 80037f8:	430a      	orrs	r2, r1
 80037fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80037fc:	4b10      	ldr	r3, [pc, #64]	; (8003840 <HAL_TIM_MspPostInit+0x74>)
 80037fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003800:	2201      	movs	r2, #1
 8003802:	4013      	ands	r3, r2
 8003804:	60bb      	str	r3, [r7, #8]
 8003806:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003808:	210c      	movs	r1, #12
 800380a:	187b      	adds	r3, r7, r1
 800380c:	2280      	movs	r2, #128	; 0x80
 800380e:	0212      	lsls	r2, r2, #8
 8003810:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003812:	187b      	adds	r3, r7, r1
 8003814:	2202      	movs	r2, #2
 8003816:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003818:	187b      	adds	r3, r7, r1
 800381a:	2200      	movs	r2, #0
 800381c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800381e:	187b      	adds	r3, r7, r1
 8003820:	2200      	movs	r2, #0
 8003822:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8003824:	187b      	adds	r3, r7, r1
 8003826:	2205      	movs	r2, #5
 8003828:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800382a:	187a      	adds	r2, r7, r1
 800382c:	23a0      	movs	r3, #160	; 0xa0
 800382e:	05db      	lsls	r3, r3, #23
 8003830:	0011      	movs	r1, r2
 8003832:	0018      	movs	r0, r3
 8003834:	f001 f8ea 	bl	8004a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003838:	46c0      	nop			; (mov r8, r8)
 800383a:	46bd      	mov	sp, r7
 800383c:	b008      	add	sp, #32
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40021000 	.word	0x40021000

08003844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003848:	46c0      	nop			; (mov r8, r8)
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003852:	e7fe      	b.n	8003852 <HardFault_Handler+0x4>

08003854 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003858:	46c0      	nop			; (mov r8, r8)
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003862:	46c0      	nop			; (mov r8, r8)
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800386c:	f000 fafe 	bl	8003e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003870:	46c0      	nop			; (mov r8, r8)
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
	...

08003878 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800387c:	4b03      	ldr	r3, [pc, #12]	; (800388c <RTC_IRQHandler+0x14>)
 800387e:	0018      	movs	r0, r3
 8003880:	f002 ff0a 	bl	8006698 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8003884:	46c0      	nop			; (mov r8, r8)
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	46c0      	nop			; (mov r8, r8)
 800388c:	200001a8 	.word	0x200001a8

08003890 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003894:	2004      	movs	r0, #4
 8003896:	f001 fa83 	bl	8004da0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80038a4:	2380      	movs	r3, #128	; 0x80
 80038a6:	019b      	lsls	r3, r3, #6
 80038a8:	0018      	movs	r0, r3
 80038aa:	f001 fa79 	bl	8004da0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80038ae:	2380      	movs	r3, #128	; 0x80
 80038b0:	01db      	lsls	r3, r3, #7
 80038b2:	0018      	movs	r0, r3
 80038b4:	f001 fa74 	bl	8004da0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80038b8:	2380      	movs	r3, #128	; 0x80
 80038ba:	021b      	lsls	r3, r3, #8
 80038bc:	0018      	movs	r0, r3
 80038be:	f001 fa6f 	bl	8004da0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80038c2:	46c0      	nop			; (mov r8, r8)
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80038cc:	4b03      	ldr	r3, [pc, #12]	; (80038dc <DMA1_Channel2_3_IRQHandler+0x14>)
 80038ce:	0018      	movs	r0, r3
 80038d0:	f000 ffee 	bl	80048b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80038d4:	46c0      	nop			; (mov r8, r8)
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	200002bc 	.word	0x200002bc

080038e0 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80038e4:	4b03      	ldr	r3, [pc, #12]	; (80038f4 <LPTIM1_IRQHandler+0x14>)
 80038e6:	0018      	movs	r0, r3
 80038e8:	f001 faf6 	bl	8004ed8 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 80038ec:	46c0      	nop			; (mov r8, r8)
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	20000178 	.word	0x20000178

080038f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80038fc:	4b03      	ldr	r3, [pc, #12]	; (800390c <TIM2_IRQHandler+0x14>)
 80038fe:	0018      	movs	r0, r3
 8003900:	f003 fda0 	bl	8007444 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003904:	46c0      	nop			; (mov r8, r8)
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	20000224 	.word	0x20000224

08003910 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003914:	4b03      	ldr	r3, [pc, #12]	; (8003924 <TIM6_DAC_IRQHandler+0x14>)
 8003916:	0018      	movs	r0, r3
 8003918:	f003 fd94 	bl	8007444 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800391c:	46c0      	nop			; (mov r8, r8)
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	200000ec 	.word	0x200000ec

08003928 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 800392c:	4b03      	ldr	r3, [pc, #12]	; (800393c <TIM21_IRQHandler+0x14>)
 800392e:	0018      	movs	r0, r3
 8003930:	f003 fd88 	bl	8007444 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8003934:	46c0      	nop			; (mov r8, r8)
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	46c0      	nop			; (mov r8, r8)
 800393c:	20000304 	.word	0x20000304

08003940 <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM22_IRQn 0 */

  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 8003944:	4b03      	ldr	r3, [pc, #12]	; (8003954 <TIM22_IRQHandler+0x14>)
 8003946:	0018      	movs	r0, r3
 8003948:	f003 fd7c 	bl	8007444 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 800394c:	46c0      	nop			; (mov r8, r8)
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	46c0      	nop			; (mov r8, r8)
 8003954:	2000013c 	.word	0x2000013c

08003958 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800395c:	4b03      	ldr	r3, [pc, #12]	; (800396c <SPI1_IRQHandler+0x14>)
 800395e:	0018      	movs	r0, r3
 8003960:	f003 f9c6 	bl	8006cf0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003964:	46c0      	nop			; (mov r8, r8)
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	46c0      	nop			; (mov r8, r8)
 800396c:	200001cc 	.word	0x200001cc

08003970 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003978:	4b11      	ldr	r3, [pc, #68]	; (80039c0 <_sbrk+0x50>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d102      	bne.n	8003986 <_sbrk+0x16>
		heap_end = &end;
 8003980:	4b0f      	ldr	r3, [pc, #60]	; (80039c0 <_sbrk+0x50>)
 8003982:	4a10      	ldr	r2, [pc, #64]	; (80039c4 <_sbrk+0x54>)
 8003984:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003986:	4b0e      	ldr	r3, [pc, #56]	; (80039c0 <_sbrk+0x50>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800398c:	4b0c      	ldr	r3, [pc, #48]	; (80039c0 <_sbrk+0x50>)
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	18d3      	adds	r3, r2, r3
 8003994:	466a      	mov	r2, sp
 8003996:	4293      	cmp	r3, r2
 8003998:	d907      	bls.n	80039aa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800399a:	f004 faa1 	bl	8007ee0 <__errno>
 800399e:	0003      	movs	r3, r0
 80039a0:	220c      	movs	r2, #12
 80039a2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80039a4:	2301      	movs	r3, #1
 80039a6:	425b      	negs	r3, r3
 80039a8:	e006      	b.n	80039b8 <_sbrk+0x48>
	}

	heap_end += incr;
 80039aa:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <_sbrk+0x50>)
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	18d2      	adds	r2, r2, r3
 80039b2:	4b03      	ldr	r3, [pc, #12]	; (80039c0 <_sbrk+0x50>)
 80039b4:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 80039b6:	68fb      	ldr	r3, [r7, #12]
}
 80039b8:	0018      	movs	r0, r3
 80039ba:	46bd      	mov	sp, r7
 80039bc:	b004      	add	sp, #16
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	20000098 	.word	0x20000098
 80039c4:	20000348 	.word	0x20000348

080039c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80039cc:	4b17      	ldr	r3, [pc, #92]	; (8003a2c <SystemInit+0x64>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	4b16      	ldr	r3, [pc, #88]	; (8003a2c <SystemInit+0x64>)
 80039d2:	2180      	movs	r1, #128	; 0x80
 80039d4:	0049      	lsls	r1, r1, #1
 80039d6:	430a      	orrs	r2, r1
 80039d8:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80039da:	4b14      	ldr	r3, [pc, #80]	; (8003a2c <SystemInit+0x64>)
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	4b13      	ldr	r3, [pc, #76]	; (8003a2c <SystemInit+0x64>)
 80039e0:	4913      	ldr	r1, [pc, #76]	; (8003a30 <SystemInit+0x68>)
 80039e2:	400a      	ands	r2, r1
 80039e4:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80039e6:	4b11      	ldr	r3, [pc, #68]	; (8003a2c <SystemInit+0x64>)
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	4b10      	ldr	r3, [pc, #64]	; (8003a2c <SystemInit+0x64>)
 80039ec:	4911      	ldr	r1, [pc, #68]	; (8003a34 <SystemInit+0x6c>)
 80039ee:	400a      	ands	r2, r1
 80039f0:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80039f2:	4b0e      	ldr	r3, [pc, #56]	; (8003a2c <SystemInit+0x64>)
 80039f4:	689a      	ldr	r2, [r3, #8]
 80039f6:	4b0d      	ldr	r3, [pc, #52]	; (8003a2c <SystemInit+0x64>)
 80039f8:	2101      	movs	r1, #1
 80039fa:	438a      	bics	r2, r1
 80039fc:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80039fe:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <SystemInit+0x64>)
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	4b0a      	ldr	r3, [pc, #40]	; (8003a2c <SystemInit+0x64>)
 8003a04:	490c      	ldr	r1, [pc, #48]	; (8003a38 <SystemInit+0x70>)
 8003a06:	400a      	ands	r2, r1
 8003a08:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8003a0a:	4b08      	ldr	r3, [pc, #32]	; (8003a2c <SystemInit+0x64>)
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	4b07      	ldr	r3, [pc, #28]	; (8003a2c <SystemInit+0x64>)
 8003a10:	490a      	ldr	r1, [pc, #40]	; (8003a3c <SystemInit+0x74>)
 8003a12:	400a      	ands	r2, r1
 8003a14:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003a16:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <SystemInit+0x64>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a1c:	4b08      	ldr	r3, [pc, #32]	; (8003a40 <SystemInit+0x78>)
 8003a1e:	2280      	movs	r2, #128	; 0x80
 8003a20:	0512      	lsls	r2, r2, #20
 8003a22:	609a      	str	r2, [r3, #8]
#endif
}
 8003a24:	46c0      	nop			; (mov r8, r8)
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	46c0      	nop			; (mov r8, r8)
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	88ff400c 	.word	0x88ff400c
 8003a34:	fef6fff6 	.word	0xfef6fff6
 8003a38:	fffbffff 	.word	0xfffbffff
 8003a3c:	ff02ffff 	.word	0xff02ffff
 8003a40:	e000ed00 	.word	0xe000ed00

08003a44 <HAL_TIM_PeriodElapsedCallback>:
static uint32_t stopwatchStartMarker = 0;
static uint32_t stopwatchPauseMarker = 0;
static uint8_t motorStateCounter = 0;

// important boye that is called for a bunch of different timers
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
	// button's timer
	if (htim->Instance == TIM6) {
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a17      	ldr	r2, [pc, #92]	; (8003ab0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d11f      	bne.n	8003a96 <HAL_TIM_PeriodElapsedCallback+0x52>
		// renable button interrupts and clear pending
		HAL_TIM_Base_Stop_IT(htim);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	0018      	movs	r0, r3
 8003a5a:	f003 fc17 	bl	800728c <HAL_TIM_Base_Stop_IT>
		HAL_NVIC_ClearPendingIRQ(EXTI2_3_IRQn);
 8003a5e:	2006      	movs	r0, #6
 8003a60:	f000 fe56 	bl	8004710 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 8003a64:	2007      	movs	r0, #7
 8003a66:	f000 fe53 	bl	8004710 <HAL_NVIC_ClearPendingIRQ>
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON1);
 8003a6a:	4b12      	ldr	r3, [pc, #72]	; (8003ab4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003a6c:	2204      	movs	r2, #4
 8003a6e:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON2);
 8003a70:	4b10      	ldr	r3, [pc, #64]	; (8003ab4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003a72:	2280      	movs	r2, #128	; 0x80
 8003a74:	0192      	lsls	r2, r2, #6
 8003a76:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON3);
 8003a78:	4b0e      	ldr	r3, [pc, #56]	; (8003ab4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003a7a:	2280      	movs	r2, #128	; 0x80
 8003a7c:	01d2      	lsls	r2, r2, #7
 8003a7e:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON4);
 8003a80:	4b0c      	ldr	r3, [pc, #48]	; (8003ab4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003a82:	2280      	movs	r2, #128	; 0x80
 8003a84:	0212      	lsls	r2, r2, #8
 8003a86:	615a      	str	r2, [r3, #20]

		HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8003a88:	2006      	movs	r0, #6
 8003a8a:	f000 fe14 	bl	80046b6 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003a8e:	2007      	movs	r0, #7
 8003a90:	f000 fe11 	bl	80046b6 <HAL_NVIC_EnableIRQ>
	}
	// sampler's timer
	else if (htim->Instance == TIM22) {
		canSampleBattery = 1;
	}
}
 8003a94:	e007      	b.n	8003aa6 <HAL_TIM_PeriodElapsedCallback+0x62>
	else if (htim->Instance == TIM22) {
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a07      	ldr	r2, [pc, #28]	; (8003ab8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d102      	bne.n	8003aa6 <HAL_TIM_PeriodElapsedCallback+0x62>
		canSampleBattery = 1;
 8003aa0:	4b06      	ldr	r3, [pc, #24]	; (8003abc <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	701a      	strb	r2, [r3, #0]
}
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	b002      	add	sp, #8
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	40001000 	.word	0x40001000
 8003ab4:	40010400 	.word	0x40010400
 8003ab8:	40011400 	.word	0x40011400
 8003abc:	200000cd 	.word	0x200000cd

08003ac0 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM21) {
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a41      	ldr	r2, [pc, #260]	; (8003bd4 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d137      	bne.n	8003b42 <HAL_TIM_OC_DelayElapsedCallback+0x82>
		// timer's channel
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	7e1b      	ldrb	r3, [r3, #24]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d121      	bne.n	8003b1e <HAL_TIM_OC_DelayElapsedCallback+0x5e>
			updateFace.timer = 1;
 8003ada:	4b3f      	ldr	r3, [pc, #252]	; (8003bd8 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8003adc:	2201      	movs	r2, #1
 8003ade:	705a      	strb	r2, [r3, #1]
			if (timerCounter != 1) --timerCounter;
 8003ae0:	4b3e      	ldr	r3, [pc, #248]	; (8003bdc <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d005      	beq.n	8003af4 <HAL_TIM_OC_DelayElapsedCallback+0x34>
 8003ae8:	4b3c      	ldr	r3, [pc, #240]	; (8003bdc <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	1e5a      	subs	r2, r3, #1
 8003aee:	4b3b      	ldr	r3, [pc, #236]	; (8003bdc <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 8003af0:	601a      	str	r2, [r3, #0]
				break;
			default: break;
		}
		++motorStateCounter;
	}
}
 8003af2:	e06a      	b.n	8003bca <HAL_TIM_OC_DelayElapsedCallback+0x10a>
				--timerCounter;
 8003af4:	4b39      	ldr	r3, [pc, #228]	; (8003bdc <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	1e5a      	subs	r2, r3, #1
 8003afa:	4b38      	ldr	r3, [pc, #224]	; (8003bdc <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 8003afc:	601a      	str	r2, [r3, #0]
				isTimerDone = 1;
 8003afe:	4b38      	ldr	r3, [pc, #224]	; (8003be0 <HAL_TIM_OC_DelayElapsedCallback+0x120>)
 8003b00:	2201      	movs	r2, #1
 8003b02:	701a      	strb	r2, [r3, #0]
				stopTimer(htim);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	0018      	movs	r0, r3
 8003b08:	f000 f876 	bl	8003bf8 <stopTimer>
				updateFace.timer = 1;
 8003b0c:	4b32      	ldr	r3, [pc, #200]	; (8003bd8 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8003b0e:	2201      	movs	r2, #1
 8003b10:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8003b12:	4b34      	ldr	r3, [pc, #208]	; (8003be4 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8003b14:	2102      	movs	r1, #2
 8003b16:	0018      	movs	r0, r3
 8003b18:	f001 f930 	bl	8004d7c <HAL_GPIO_TogglePin>
}
 8003b1c:	e055      	b.n	8003bca <HAL_TIM_OC_DelayElapsedCallback+0x10a>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	7e1b      	ldrb	r3, [r3, #24]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d151      	bne.n	8003bca <HAL_TIM_OC_DelayElapsedCallback+0x10a>
			updateFace.stopwatch = 1;
 8003b26:	4b2c      	ldr	r3, [pc, #176]	; (8003bd8 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8003b28:	2201      	movs	r2, #1
 8003b2a:	70da      	strb	r2, [r3, #3]
			++stopwatchCounter;
 8003b2c:	4b2e      	ldr	r3, [pc, #184]	; (8003be8 <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	1c5a      	adds	r2, r3, #1
 8003b32:	4b2d      	ldr	r3, [pc, #180]	; (8003be8 <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 8003b34:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8003b36:	4b2b      	ldr	r3, [pc, #172]	; (8003be4 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8003b38:	2102      	movs	r1, #2
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f001 f91e 	bl	8004d7c <HAL_GPIO_TogglePin>
}
 8003b40:	e043      	b.n	8003bca <HAL_TIM_OC_DelayElapsedCallback+0x10a>
	else if (htim->Instance == TIM2) {
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	2380      	movs	r3, #128	; 0x80
 8003b48:	05db      	lsls	r3, r3, #23
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d13d      	bne.n	8003bca <HAL_TIM_OC_DelayElapsedCallback+0x10a>
		switch(motorStateCounter) {
 8003b4e:	4b27      	ldr	r3, [pc, #156]	; (8003bec <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b05      	cmp	r3, #5
 8003b54:	d832      	bhi.n	8003bbc <HAL_TIM_OC_DelayElapsedCallback+0xfc>
 8003b56:	009a      	lsls	r2, r3, #2
 8003b58:	4b25      	ldr	r3, [pc, #148]	; (8003bf0 <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8003b5a:	18d3      	adds	r3, r2, r3
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	469f      	mov	pc, r3
			case 0: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8003b60:	4b24      	ldr	r3, [pc, #144]	; (8003bf4 <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 8003b62:	2201      	movs	r2, #1
 8003b64:	2101      	movs	r1, #1
 8003b66:	0018      	movs	r0, r3
 8003b68:	f001 f8eb 	bl	8004d42 <HAL_GPIO_WritePin>
 8003b6c:	e027      	b.n	8003bbe <HAL_TIM_OC_DelayElapsedCallback+0xfe>
			case 1: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET); break;
 8003b6e:	4b21      	ldr	r3, [pc, #132]	; (8003bf4 <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	2101      	movs	r1, #1
 8003b74:	0018      	movs	r0, r3
 8003b76:	f001 f8e4 	bl	8004d42 <HAL_GPIO_WritePin>
 8003b7a:	e020      	b.n	8003bbe <HAL_TIM_OC_DelayElapsedCallback+0xfe>
			case 2: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8003b7c:	4b1d      	ldr	r3, [pc, #116]	; (8003bf4 <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 8003b7e:	2201      	movs	r2, #1
 8003b80:	2101      	movs	r1, #1
 8003b82:	0018      	movs	r0, r3
 8003b84:	f001 f8dd 	bl	8004d42 <HAL_GPIO_WritePin>
 8003b88:	e019      	b.n	8003bbe <HAL_TIM_OC_DelayElapsedCallback+0xfe>
			case 3: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET); break;
 8003b8a:	4b1a      	ldr	r3, [pc, #104]	; (8003bf4 <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	2101      	movs	r1, #1
 8003b90:	0018      	movs	r0, r3
 8003b92:	f001 f8d6 	bl	8004d42 <HAL_GPIO_WritePin>
 8003b96:	e012      	b.n	8003bbe <HAL_TIM_OC_DelayElapsedCallback+0xfe>
			case 4: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8003b98:	4b16      	ldr	r3, [pc, #88]	; (8003bf4 <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f001 f8cf 	bl	8004d42 <HAL_GPIO_WritePin>
 8003ba4:	e00b      	b.n	8003bbe <HAL_TIM_OC_DelayElapsedCallback+0xfe>
				HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET);
 8003ba6:	4b13      	ldr	r3, [pc, #76]	; (8003bf4 <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	2101      	movs	r1, #1
 8003bac:	0018      	movs	r0, r3
 8003bae:	f001 f8c8 	bl	8004d42 <HAL_GPIO_WritePin>
				stopMotor(htim);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	f000 f84f 	bl	8003c58 <stopMotor>
				break;
 8003bba:	e000      	b.n	8003bbe <HAL_TIM_OC_DelayElapsedCallback+0xfe>
			default: break;
 8003bbc:	46c0      	nop			; (mov r8, r8)
		++motorStateCounter;
 8003bbe:	4b0b      	ldr	r3, [pc, #44]	; (8003bec <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	4b09      	ldr	r3, [pc, #36]	; (8003bec <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 8003bc8:	701a      	strb	r2, [r3, #0]
}
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	b002      	add	sp, #8
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	46c0      	nop			; (mov r8, r8)
 8003bd4:	40010800 	.word	0x40010800
 8003bd8:	200000dc 	.word	0x200000dc
 8003bdc:	200000e4 	.word	0x200000e4
 8003be0:	200000e8 	.word	0x200000e8
 8003be4:	50000800 	.word	0x50000800
 8003be8:	20000138 	.word	0x20000138
 8003bec:	200000a4 	.word	0x200000a4
 8003bf0:	080090f8 	.word	0x080090f8
 8003bf4:	50000400 	.word	0x50000400

08003bf8 <stopTimer>:
void pauseTimer(TIM_HandleTypeDef *htim) {
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_1);
	timerPauseMarker = htim->Instance->CNT;
}

void stopTimer(TIM_HandleTypeDef *htim) {
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_1);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2100      	movs	r1, #0
 8003c04:	0018      	movs	r0, r3
 8003c06:	f003 fb97 	bl	8007338 <HAL_TIM_OC_Stop_IT>
	timerStartMarker = 0;
 8003c0a:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <stopTimer+0x28>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]
	timerPauseMarker = 0;
 8003c10:	4b04      	ldr	r3, [pc, #16]	; (8003c24 <stopTimer+0x2c>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	601a      	str	r2, [r3, #0]
}
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	b002      	add	sp, #8
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	46c0      	nop			; (mov r8, r8)
 8003c20:	2000009c 	.word	0x2000009c
 8003c24:	200000a0 	.word	0x200000a0

08003c28 <runTimerStopwatchBase>:
	stopwatchStartMarker = htim->Instance->CNT;

	stopwatchCounter = 0;
}

void runTimerStopwatchBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Start_IT(htim);}
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	0018      	movs	r0, r3
 8003c34:	f003 fb08 	bl	8007248 <HAL_TIM_Base_Start_IT>
 8003c38:	46c0      	nop			; (mov r8, r8)
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	b002      	add	sp, #8
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <runADCSampler>:
void stopTimerStopwatchBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Stop_IT(htim);}
// ---- end of important timer functions ----

// ---- motor and other things that use timer ----
// uses LSE timer TIM22
void runADCSampler(TIM_HandleTypeDef *htim) {
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(htim);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	f003 fafc 	bl	8007248 <HAL_TIM_Base_Start_IT>
}
 8003c50:	46c0      	nop			; (mov r8, r8)
 8003c52:	46bd      	mov	sp, r7
 8003c54:	b002      	add	sp, #8
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <stopMotor>:
	HAL_TIM_OC_Start_IT(htim, TIM_CHANNEL_2);

	motorStateCounter = 0;
}

void stopMotor(TIM_HandleTypeDef *htim) {
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
	// set flag only? to start looking at period complete interrupt for motor's timer?
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_2);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2104      	movs	r1, #4
 8003c64:	0018      	movs	r0, r3
 8003c66:	f003 fb67 	bl	8007338 <HAL_TIM_OC_Stop_IT>
	motorStateCounter = 0;
 8003c6a:	4b03      	ldr	r3, [pc, #12]	; (8003c78 <stopMotor+0x20>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	701a      	strb	r2, [r3, #0]
}
 8003c70:	46c0      	nop			; (mov r8, r8)
 8003c72:	46bd      	mov	sp, r7
 8003c74:	b002      	add	sp, #8
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	200000a4 	.word	0x200000a4

08003c7c <runBacklightMotorBase>:

// should use TIM22
void runBacklightMotorBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Start_IT(htim);}
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	0018      	movs	r0, r3
 8003c88:	f003 fade 	bl	8007248 <HAL_TIM_Base_Start_IT>
 8003c8c:	46c0      	nop			; (mov r8, r8)
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	b002      	add	sp, #8
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_GPIO_EXTI_Callback>:
	"Nov",
	"Dec"
};

// button interrupt(s)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	0002      	movs	r2, r0
 8003c9c:	1dbb      	adds	r3, r7, #6
 8003c9e:	801a      	strh	r2, [r3, #0]
	HAL_NVIC_DisableIRQ(EXTI2_3_IRQn);
 8003ca0:	2006      	movs	r0, #6
 8003ca2:	f000 fd18 	bl	80046d6 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 8003ca6:	2007      	movs	r0, #7
 8003ca8:	f000 fd15 	bl	80046d6 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_3_IRQn);
 8003cac:	2006      	movs	r0, #6
 8003cae:	f000 fd2f 	bl	8004710 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 8003cb2:	2007      	movs	r0, #7
 8003cb4:	f000 fd2c 	bl	8004710 <HAL_NVIC_ClearPendingIRQ>

	if (GPIO_Pin == BUTTON1) buttons.is1Pressed = 1;
 8003cb8:	1dbb      	adds	r3, r7, #6
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	2b04      	cmp	r3, #4
 8003cbe:	d102      	bne.n	8003cc6 <HAL_GPIO_EXTI_Callback+0x32>
 8003cc0:	4b15      	ldr	r3, [pc, #84]	; (8003d18 <HAL_GPIO_EXTI_Callback+0x84>)
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	701a      	strb	r2, [r3, #0]
	if (GPIO_Pin == BUTTON2) buttons.is2Pressed = 1;
 8003cc6:	1dbb      	adds	r3, r7, #6
 8003cc8:	881a      	ldrh	r2, [r3, #0]
 8003cca:	2380      	movs	r3, #128	; 0x80
 8003ccc:	019b      	lsls	r3, r3, #6
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d102      	bne.n	8003cd8 <HAL_GPIO_EXTI_Callback+0x44>
 8003cd2:	4b11      	ldr	r3, [pc, #68]	; (8003d18 <HAL_GPIO_EXTI_Callback+0x84>)
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	705a      	strb	r2, [r3, #1]
	if (GPIO_Pin == BUTTON3) buttons.is3Pressed = 1;
 8003cd8:	1dbb      	adds	r3, r7, #6
 8003cda:	881a      	ldrh	r2, [r3, #0]
 8003cdc:	2380      	movs	r3, #128	; 0x80
 8003cde:	01db      	lsls	r3, r3, #7
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d102      	bne.n	8003cea <HAL_GPIO_EXTI_Callback+0x56>
 8003ce4:	4b0c      	ldr	r3, [pc, #48]	; (8003d18 <HAL_GPIO_EXTI_Callback+0x84>)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	709a      	strb	r2, [r3, #2]
	if (GPIO_Pin == BUTTON4) buttons.is4Pressed = 1;
 8003cea:	1dbb      	adds	r3, r7, #6
 8003cec:	881a      	ldrh	r2, [r3, #0]
 8003cee:	2380      	movs	r3, #128	; 0x80
 8003cf0:	021b      	lsls	r3, r3, #8
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d102      	bne.n	8003cfc <HAL_GPIO_EXTI_Callback+0x68>
 8003cf6:	4b08      	ldr	r3, [pc, #32]	; (8003d18 <HAL_GPIO_EXTI_Callback+0x84>)
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	70da      	strb	r2, [r3, #3]

	HAL_TIM_Base_Start_IT(&htim6);
 8003cfc:	4b07      	ldr	r3, [pc, #28]	; (8003d1c <HAL_GPIO_EXTI_Callback+0x88>)
 8003cfe:	0018      	movs	r0, r3
 8003d00:	f003 faa2 	bl	8007248 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);		// should run for any button
 8003d04:	4b06      	ldr	r3, [pc, #24]	; (8003d20 <HAL_GPIO_EXTI_Callback+0x8c>)
 8003d06:	2108      	movs	r1, #8
 8003d08:	0018      	movs	r0, r3
 8003d0a:	f001 f837 	bl	8004d7c <HAL_GPIO_TogglePin>
}
 8003d0e:	46c0      	nop			; (mov r8, r8)
 8003d10:	46bd      	mov	sp, r7
 8003d12:	b002      	add	sp, #8
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	20000128 	.word	0x20000128
 8003d1c:	200000ec 	.word	0x200000ec
 8003d20:	50000800 	.word	0x50000800

08003d24 <initFace>:
	else if (year % 100 == 0) return 28;
	else if (year % 4 == 0) return 29;
	else return 28;
}

void initFace() {
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
//	isFaceBeingChanged = 1;
//	faceOnDisplay = faceClock;
	updateFace.clock = 1;
 8003d28:	4b12      	ldr	r3, [pc, #72]	; (8003d74 <initFace+0x50>)
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	701a      	strb	r2, [r3, #0]

	clockVars.dateToSet = (struct dates *)calloc(1, sizeof(struct dates *));
 8003d2e:	2104      	movs	r1, #4
 8003d30:	2001      	movs	r0, #1
 8003d32:	f004 f8cb 	bl	8007ecc <calloc>
 8003d36:	0003      	movs	r3, r0
 8003d38:	001a      	movs	r2, r3
 8003d3a:	4b0f      	ldr	r3, [pc, #60]	; (8003d78 <initFace+0x54>)
 8003d3c:	605a      	str	r2, [r3, #4]
	clockVars.timeToSet = (struct times *)calloc(1, sizeof(struct times *));
 8003d3e:	2104      	movs	r1, #4
 8003d40:	2001      	movs	r0, #1
 8003d42:	f004 f8c3 	bl	8007ecc <calloc>
 8003d46:	0003      	movs	r3, r0
 8003d48:	001a      	movs	r2, r3
 8003d4a:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <initFace+0x54>)
 8003d4c:	609a      	str	r2, [r3, #8]
	timerVars.timeToSet = (struct times *)calloc(1, sizeof(struct times *));
 8003d4e:	2104      	movs	r1, #4
 8003d50:	2001      	movs	r0, #1
 8003d52:	f004 f8bb 	bl	8007ecc <calloc>
 8003d56:	0003      	movs	r3, r0
 8003d58:	001a      	movs	r2, r3
 8003d5a:	4b08      	ldr	r3, [pc, #32]	; (8003d7c <initFace+0x58>)
 8003d5c:	605a      	str	r2, [r3, #4]
	alarmVars.alarmToSet = (struct alarmTimes *)calloc(1, sizeof(struct alarmTimes *));
 8003d5e:	2104      	movs	r1, #4
 8003d60:	2001      	movs	r0, #1
 8003d62:	f004 f8b3 	bl	8007ecc <calloc>
 8003d66:	0003      	movs	r3, r0
 8003d68:	001a      	movs	r2, r3
 8003d6a:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <initFace+0x5c>)
 8003d6c:	605a      	str	r2, [r3, #4]
//	struct alarmTimes tempalarm = {0};
//	*clockVars.dateToSet = tempclockdate;
//	*clockVars.timeToSet = tempclocktime;
//	*timerVars.timeToSet = temptimer;
//	*alarmVars.alarmToSet = tempalarm;
}
 8003d6e:	46c0      	nop			; (mov r8, r8)
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	200000dc 	.word	0x200000dc
 8003d78:	200000a8 	.word	0x200000a8
 8003d7c:	200000b4 	.word	0x200000b4
 8003d80:	200000bc 	.word	0x200000bc

08003d84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003d84:	480d      	ldr	r0, [pc, #52]	; (8003dbc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003d86:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003d88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003d8a:	e003      	b.n	8003d94 <LoopCopyDataInit>

08003d8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003d8c:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8003d8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003d90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003d92:	3104      	adds	r1, #4

08003d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8003d94:	480b      	ldr	r0, [pc, #44]	; (8003dc4 <LoopForever+0xa>)
  ldr  r3, =_edata
 8003d96:	4b0c      	ldr	r3, [pc, #48]	; (8003dc8 <LoopForever+0xe>)
  adds  r2, r0, r1
 8003d98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003d9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003d9c:	d3f6      	bcc.n	8003d8c <CopyDataInit>
  ldr  r2, =_sbss
 8003d9e:	4a0b      	ldr	r2, [pc, #44]	; (8003dcc <LoopForever+0x12>)
  b  LoopFillZerobss
 8003da0:	e002      	b.n	8003da8 <LoopFillZerobss>

08003da2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8003da2:	2300      	movs	r3, #0
  str  r3, [r2]
 8003da4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003da6:	3204      	adds	r2, #4

08003da8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8003da8:	4b09      	ldr	r3, [pc, #36]	; (8003dd0 <LoopForever+0x16>)
  cmp  r2, r3
 8003daa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003dac:	d3f9      	bcc.n	8003da2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003dae:	f7ff fe0b 	bl	80039c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003db2:	f004 f89b 	bl	8007eec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003db6:	f7fe fea9 	bl	8002b0c <main>

08003dba <LoopForever>:

LoopForever:
    b LoopForever
 8003dba:	e7fe      	b.n	8003dba <LoopForever>
   ldr   r0, =_estack
 8003dbc:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8003dc0:	0800914c 	.word	0x0800914c
  ldr  r0, =_sdata
 8003dc4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003dc8:	2000006c 	.word	0x2000006c
  ldr  r2, =_sbss
 8003dcc:	2000006c 	.word	0x2000006c
  ldr  r3, = _ebss
 8003dd0:	20000348 	.word	0x20000348

08003dd4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003dd4:	e7fe      	b.n	8003dd4 <ADC1_COMP_IRQHandler>
	...

08003dd8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003dde:	1dfb      	adds	r3, r7, #7
 8003de0:	2200      	movs	r2, #0
 8003de2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003de4:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <HAL_Init+0x3c>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	4b0a      	ldr	r3, [pc, #40]	; (8003e14 <HAL_Init+0x3c>)
 8003dea:	2140      	movs	r1, #64	; 0x40
 8003dec:	430a      	orrs	r2, r1
 8003dee:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003df0:	2000      	movs	r0, #0
 8003df2:	f000 f811 	bl	8003e18 <HAL_InitTick>
 8003df6:	1e03      	subs	r3, r0, #0
 8003df8:	d003      	beq.n	8003e02 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003dfa:	1dfb      	adds	r3, r7, #7
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	701a      	strb	r2, [r3, #0]
 8003e00:	e001      	b.n	8003e06 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003e02:	f7ff fb79 	bl	80034f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003e06:	1dfb      	adds	r3, r7, #7
 8003e08:	781b      	ldrb	r3, [r3, #0]
}
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	b002      	add	sp, #8
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	46c0      	nop			; (mov r8, r8)
 8003e14:	40022000 	.word	0x40022000

08003e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003e20:	230f      	movs	r3, #15
 8003e22:	18fb      	adds	r3, r7, r3
 8003e24:	2200      	movs	r2, #0
 8003e26:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8003e28:	4b0f      	ldr	r3, [pc, #60]	; (8003e68 <HAL_InitTick+0x50>)
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	23fa      	movs	r3, #250	; 0xfa
 8003e2e:	0099      	lsls	r1, r3, #2
 8003e30:	0010      	movs	r0, r2
 8003e32:	f7fc f969 	bl	8000108 <__udivsi3>
 8003e36:	0003      	movs	r3, r0
 8003e38:	0018      	movs	r0, r3
 8003e3a:	f000 fc5c 	bl	80046f6 <HAL_SYSTICK_Config>
 8003e3e:	1e03      	subs	r3, r0, #0
 8003e40:	d004      	beq.n	8003e4c <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8003e42:	230f      	movs	r3, #15
 8003e44:	18fb      	adds	r3, r7, r3
 8003e46:	2201      	movs	r2, #1
 8003e48:	701a      	strb	r2, [r3, #0]
 8003e4a:	e006      	b.n	8003e5a <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8003e4c:	6879      	ldr	r1, [r7, #4]
 8003e4e:	2301      	movs	r3, #1
 8003e50:	425b      	negs	r3, r3
 8003e52:	2200      	movs	r2, #0
 8003e54:	0018      	movs	r0, r3
 8003e56:	f000 fc19 	bl	800468c <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8003e5a:	230f      	movs	r3, #15
 8003e5c:	18fb      	adds	r3, r7, r3
 8003e5e:	781b      	ldrb	r3, [r3, #0]
}
 8003e60:	0018      	movs	r0, r3
 8003e62:	46bd      	mov	sp, r7
 8003e64:	b004      	add	sp, #16
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	20000004 	.word	0x20000004

08003e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  uwTick++;
 8003e70:	4b03      	ldr	r3, [pc, #12]	; (8003e80 <HAL_IncTick+0x14>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	4b02      	ldr	r3, [pc, #8]	; (8003e80 <HAL_IncTick+0x14>)
 8003e78:	601a      	str	r2, [r3, #0]
}
 8003e7a:	46c0      	nop			; (mov r8, r8)
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	20000340 	.word	0x20000340

08003e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
  return uwTick;
 8003e88:	4b02      	ldr	r3, [pc, #8]	; (8003e94 <HAL_GetTick+0x10>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
}
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	20000340 	.word	0x20000340

08003e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ea0:	f7ff fff0 	bl	8003e84 <HAL_GetTick>
 8003ea4:	0003      	movs	r3, r0
 8003ea6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	d002      	beq.n	8003eb8 <HAL_Delay+0x20>
  {
    wait++;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003eb8:	46c0      	nop			; (mov r8, r8)
 8003eba:	f7ff ffe3 	bl	8003e84 <HAL_GetTick>
 8003ebe:	0002      	movs	r2, r0
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d8f7      	bhi.n	8003eba <HAL_Delay+0x22>
  {
  }
}
 8003eca:	46c0      	nop			; (mov r8, r8)
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	b004      	add	sp, #16
 8003ed0:	bd80      	pop	{r7, pc}
	...

08003ed4 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e159      	b.n	800419a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10a      	bne.n	8003f04 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2250      	movs	r2, #80	; 0x50
 8003ef8:	2100      	movs	r1, #0
 8003efa:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	0018      	movs	r0, r3
 8003f00:	f7ff fb0e 	bl	8003520 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f08:	2210      	movs	r2, #16
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	2b10      	cmp	r3, #16
 8003f0e:	d005      	beq.n	8003f1c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	2204      	movs	r2, #4
 8003f18:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003f1a:	d00b      	beq.n	8003f34 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f20:	2210      	movs	r2, #16
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2250      	movs	r2, #80	; 0x50
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e132      	b.n	800419a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f38:	4a9a      	ldr	r2, [pc, #616]	; (80041a4 <HAL_ADC_Init+0x2d0>)
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	2203      	movs	r2, #3
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d108      	bne.n	8003f64 <HAL_ADC_Init+0x90>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d101      	bne.n	8003f64 <HAL_ADC_Init+0x90>
 8003f60:	2301      	movs	r3, #1
 8003f62:	e000      	b.n	8003f66 <HAL_ADC_Init+0x92>
 8003f64:	2300      	movs	r3, #0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d149      	bne.n	8003ffe <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	23c0      	movs	r3, #192	; 0xc0
 8003f70:	061b      	lsls	r3, r3, #24
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d00b      	beq.n	8003f8e <HAL_ADC_Init+0xba>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	2380      	movs	r3, #128	; 0x80
 8003f7c:	05db      	lsls	r3, r3, #23
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d005      	beq.n	8003f8e <HAL_ADC_Init+0xba>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	2380      	movs	r3, #128	; 0x80
 8003f88:	061b      	lsls	r3, r3, #24
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d111      	bne.n	8003fb2 <HAL_ADC_Init+0xde>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	691a      	ldr	r2, [r3, #16]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	0092      	lsls	r2, r2, #2
 8003f9a:	0892      	lsrs	r2, r2, #2
 8003f9c:	611a      	str	r2, [r3, #16]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6919      	ldr	r1, [r3, #16]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	611a      	str	r2, [r3, #16]
 8003fb0:	e014      	b.n	8003fdc <HAL_ADC_Init+0x108>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	691a      	ldr	r2, [r3, #16]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	0092      	lsls	r2, r2, #2
 8003fbe:	0892      	lsrs	r2, r2, #2
 8003fc0:	611a      	str	r2, [r3, #16]
 8003fc2:	4b79      	ldr	r3, [pc, #484]	; (80041a8 <HAL_ADC_Init+0x2d4>)
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	4b78      	ldr	r3, [pc, #480]	; (80041a8 <HAL_ADC_Init+0x2d4>)
 8003fc8:	4978      	ldr	r1, [pc, #480]	; (80041ac <HAL_ADC_Init+0x2d8>)
 8003fca:	400a      	ands	r2, r1
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	4b76      	ldr	r3, [pc, #472]	; (80041a8 <HAL_ADC_Init+0x2d4>)
 8003fd0:	6819      	ldr	r1, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	4b74      	ldr	r3, [pc, #464]	; (80041a8 <HAL_ADC_Init+0x2d4>)
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2118      	movs	r1, #24
 8003fe8:	438a      	bics	r2, r1
 8003fea:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68d9      	ldr	r1, [r3, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689a      	ldr	r2, [r3, #8]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8003ffe:	4b6a      	ldr	r3, [pc, #424]	; (80041a8 <HAL_ADC_Init+0x2d4>)
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	4b69      	ldr	r3, [pc, #420]	; (80041a8 <HAL_ADC_Init+0x2d4>)
 8004004:	496a      	ldr	r1, [pc, #424]	; (80041b0 <HAL_ADC_Init+0x2dc>)
 8004006:	400a      	ands	r2, r1
 8004008:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800400a:	4b67      	ldr	r3, [pc, #412]	; (80041a8 <HAL_ADC_Init+0x2d4>)
 800400c:	6819      	ldr	r1, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004012:	065a      	lsls	r2, r3, #25
 8004014:	4b64      	ldr	r3, [pc, #400]	; (80041a8 <HAL_ADC_Init+0x2d4>)
 8004016:	430a      	orrs	r2, r1
 8004018:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	2380      	movs	r3, #128	; 0x80
 8004022:	055b      	lsls	r3, r3, #21
 8004024:	4013      	ands	r3, r2
 8004026:	d108      	bne.n	800403a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689a      	ldr	r2, [r3, #8]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2180      	movs	r1, #128	; 0x80
 8004034:	0549      	lsls	r1, r1, #21
 8004036:	430a      	orrs	r2, r1
 8004038:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	495b      	ldr	r1, [pc, #364]	; (80041b4 <HAL_ADC_Init+0x2e0>)
 8004046:	400a      	ands	r2, r1
 8004048:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68d9      	ldr	r1, [r3, #12]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	2b02      	cmp	r3, #2
 800405a:	d101      	bne.n	8004060 <HAL_ADC_Init+0x18c>
 800405c:	2304      	movs	r3, #4
 800405e:	e000      	b.n	8004062 <HAL_ADC_Init+0x18e>
 8004060:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004062:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2020      	movs	r0, #32
 8004068:	5c1b      	ldrb	r3, [r3, r0]
 800406a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800406c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	202c      	movs	r0, #44	; 0x2c
 8004072:	5c1b      	ldrb	r3, [r3, r0]
 8004074:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004076:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800407c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8004084:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800408c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800409a:	23c2      	movs	r3, #194	; 0xc2
 800409c:	33ff      	adds	r3, #255	; 0xff
 800409e:	429a      	cmp	r2, r3
 80040a0:	d00b      	beq.n	80040ba <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68d9      	ldr	r1, [r3, #12]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80040b0:	431a      	orrs	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2221      	movs	r2, #33	; 0x21
 80040be:	5c9b      	ldrb	r3, [r3, r2]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d11a      	bne.n	80040fa <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2220      	movs	r2, #32
 80040c8:	5c9b      	ldrb	r3, [r3, r2]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d109      	bne.n	80040e2 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68da      	ldr	r2, [r3, #12]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2180      	movs	r1, #128	; 0x80
 80040da:	0249      	lsls	r1, r1, #9
 80040dc:	430a      	orrs	r2, r1
 80040de:	60da      	str	r2, [r3, #12]
 80040e0:	e00b      	b.n	80040fa <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e6:	2220      	movs	r2, #32
 80040e8:	431a      	orrs	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f2:	2201      	movs	r2, #1
 80040f4:	431a      	orrs	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d11f      	bne.n	8004142 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	691a      	ldr	r2, [r3, #16]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	492a      	ldr	r1, [pc, #168]	; (80041b8 <HAL_ADC_Init+0x2e4>)
 800410e:	400a      	ands	r2, r1
 8004110:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6919      	ldr	r1, [r3, #16]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004120:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8004126:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	430a      	orrs	r2, r1
 800412e:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691a      	ldr	r2, [r3, #16]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2101      	movs	r1, #1
 800413c:	430a      	orrs	r2, r1
 800413e:	611a      	str	r2, [r3, #16]
 8004140:	e00e      	b.n	8004160 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	2201      	movs	r2, #1
 800414a:	4013      	ands	r3, r2
 800414c:	2b01      	cmp	r3, #1
 800414e:	d107      	bne.n	8004160 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	691a      	ldr	r2, [r3, #16]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2101      	movs	r1, #1
 800415c:	438a      	bics	r2, r1
 800415e:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695a      	ldr	r2, [r3, #20]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2107      	movs	r1, #7
 800416c:	438a      	bics	r2, r1
 800416e:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6959      	ldr	r1, [r3, #20]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418c:	2203      	movs	r2, #3
 800418e:	4393      	bics	r3, r2
 8004190:	2201      	movs	r2, #1
 8004192:	431a      	orrs	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	0018      	movs	r0, r3
 800419c:	46bd      	mov	sp, r7
 800419e:	b002      	add	sp, #8
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	46c0      	nop			; (mov r8, r8)
 80041a4:	fffffefd 	.word	0xfffffefd
 80041a8:	40012708 	.word	0x40012708
 80041ac:	ffc3ffff 	.word	0xffc3ffff
 80041b0:	fdffffff 	.word	0xfdffffff
 80041b4:	fffe0219 	.word	0xfffe0219
 80041b8:	fffffc03 	.word	0xfffffc03

080041bc <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80041bc:	b590      	push	{r4, r7, lr}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041c4:	230f      	movs	r3, #15
 80041c6:	18fb      	adds	r3, r7, r3
 80041c8:	2200      	movs	r2, #0
 80041ca:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	2204      	movs	r2, #4
 80041d4:	4013      	ands	r3, r2
 80041d6:	d156      	bne.n	8004286 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2250      	movs	r2, #80	; 0x50
 80041dc:	5c9b      	ldrb	r3, [r3, r2]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <HAL_ADC_Start_IT+0x2a>
 80041e2:	2302      	movs	r3, #2
 80041e4:	e056      	b.n	8004294 <HAL_ADC_Start_IT+0xd8>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2250      	movs	r2, #80	; 0x50
 80041ea:	2101      	movs	r1, #1
 80041ec:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d007      	beq.n	8004206 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80041f6:	230f      	movs	r3, #15
 80041f8:	18fc      	adds	r4, r7, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	0018      	movs	r0, r3
 80041fe:	f000 f8ef 	bl	80043e0 <ADC_Enable>
 8004202:	0003      	movs	r3, r0
 8004204:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004206:	230f      	movs	r3, #15
 8004208:	18fb      	adds	r3, r7, r3
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d13e      	bne.n	800428e <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004214:	4a21      	ldr	r2, [pc, #132]	; (800429c <HAL_ADC_Start_IT+0xe0>)
 8004216:	4013      	ands	r3, r2
 8004218:	2280      	movs	r2, #128	; 0x80
 800421a:	0052      	lsls	r2, r2, #1
 800421c:	431a      	orrs	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2250      	movs	r2, #80	; 0x50
 800422c:	2100      	movs	r1, #0
 800422e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	221c      	movs	r2, #28
 8004236:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	2b08      	cmp	r3, #8
 800423e:	d110      	bne.n	8004262 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2104      	movs	r1, #4
 800424c:	438a      	bics	r2, r1
 800424e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2118      	movs	r1, #24
 800425c:	430a      	orrs	r2, r1
 800425e:	605a      	str	r2, [r3, #4]
          break;
 8004260:	e008      	b.n	8004274 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	211c      	movs	r1, #28
 800426e:	430a      	orrs	r2, r1
 8004270:	605a      	str	r2, [r3, #4]
          break;
 8004272:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689a      	ldr	r2, [r3, #8]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2104      	movs	r1, #4
 8004280:	430a      	orrs	r2, r1
 8004282:	609a      	str	r2, [r3, #8]
 8004284:	e003      	b.n	800428e <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004286:	230f      	movs	r3, #15
 8004288:	18fb      	adds	r3, r7, r3
 800428a:	2202      	movs	r2, #2
 800428c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800428e:	230f      	movs	r3, #15
 8004290:	18fb      	adds	r3, r7, r3
 8004292:	781b      	ldrb	r3, [r3, #0]
}
 8004294:	0018      	movs	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	b005      	add	sp, #20
 800429a:	bd90      	pop	{r4, r7, pc}
 800429c:	fffff0fe 	.word	0xfffff0fe

080042a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2250      	movs	r2, #80	; 0x50
 80042ae:	5c9b      	ldrb	r3, [r3, r2]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d101      	bne.n	80042b8 <HAL_ADC_ConfigChannel+0x18>
 80042b4:	2302      	movs	r3, #2
 80042b6:	e085      	b.n	80043c4 <HAL_ADC_ConfigChannel+0x124>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2250      	movs	r2, #80	; 0x50
 80042bc:	2101      	movs	r1, #1
 80042be:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	2204      	movs	r2, #4
 80042c8:	4013      	ands	r3, r2
 80042ca:	d00b      	beq.n	80042e4 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d0:	2220      	movs	r2, #32
 80042d2:	431a      	orrs	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2250      	movs	r2, #80	; 0x50
 80042dc:	2100      	movs	r1, #0
 80042de:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e06f      	b.n	80043c4 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	4a38      	ldr	r2, [pc, #224]	; (80043cc <HAL_ADC_ConfigChannel+0x12c>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d035      	beq.n	800435a <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	035b      	lsls	r3, r3, #13
 80042fa:	0b5a      	lsrs	r2, r3, #13
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	2380      	movs	r3, #128	; 0x80
 800430a:	02db      	lsls	r3, r3, #11
 800430c:	4013      	ands	r3, r2
 800430e:	d009      	beq.n	8004324 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8004310:	4b2f      	ldr	r3, [pc, #188]	; (80043d0 <HAL_ADC_ConfigChannel+0x130>)
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	4b2e      	ldr	r3, [pc, #184]	; (80043d0 <HAL_ADC_ConfigChannel+0x130>)
 8004316:	2180      	movs	r1, #128	; 0x80
 8004318:	0409      	lsls	r1, r1, #16
 800431a:	430a      	orrs	r2, r1
 800431c:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800431e:	200a      	movs	r0, #10
 8004320:	f000 f8be 	bl	80044a0 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	2380      	movs	r3, #128	; 0x80
 800432a:	029b      	lsls	r3, r3, #10
 800432c:	4013      	ands	r3, r2
 800432e:	d006      	beq.n	800433e <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8004330:	4b27      	ldr	r3, [pc, #156]	; (80043d0 <HAL_ADC_ConfigChannel+0x130>)
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	4b26      	ldr	r3, [pc, #152]	; (80043d0 <HAL_ADC_ConfigChannel+0x130>)
 8004336:	2180      	movs	r1, #128	; 0x80
 8004338:	03c9      	lsls	r1, r1, #15
 800433a:	430a      	orrs	r2, r1
 800433c:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	2380      	movs	r3, #128	; 0x80
 8004344:	025b      	lsls	r3, r3, #9
 8004346:	4013      	ands	r3, r2
 8004348:	d037      	beq.n	80043ba <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 800434a:	4b21      	ldr	r3, [pc, #132]	; (80043d0 <HAL_ADC_ConfigChannel+0x130>)
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	4b20      	ldr	r3, [pc, #128]	; (80043d0 <HAL_ADC_ConfigChannel+0x130>)
 8004350:	2180      	movs	r1, #128	; 0x80
 8004352:	0449      	lsls	r1, r1, #17
 8004354:	430a      	orrs	r2, r1
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	e02f      	b.n	80043ba <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	035b      	lsls	r3, r3, #13
 8004366:	0b5b      	lsrs	r3, r3, #13
 8004368:	43d9      	mvns	r1, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	400a      	ands	r2, r1
 8004370:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	2380      	movs	r3, #128	; 0x80
 8004378:	02db      	lsls	r3, r3, #11
 800437a:	4013      	ands	r3, r2
 800437c:	d005      	beq.n	800438a <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800437e:	4b14      	ldr	r3, [pc, #80]	; (80043d0 <HAL_ADC_ConfigChannel+0x130>)
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	4b13      	ldr	r3, [pc, #76]	; (80043d0 <HAL_ADC_ConfigChannel+0x130>)
 8004384:	4913      	ldr	r1, [pc, #76]	; (80043d4 <HAL_ADC_ConfigChannel+0x134>)
 8004386:	400a      	ands	r2, r1
 8004388:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	2380      	movs	r3, #128	; 0x80
 8004390:	029b      	lsls	r3, r3, #10
 8004392:	4013      	ands	r3, r2
 8004394:	d005      	beq.n	80043a2 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8004396:	4b0e      	ldr	r3, [pc, #56]	; (80043d0 <HAL_ADC_ConfigChannel+0x130>)
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	4b0d      	ldr	r3, [pc, #52]	; (80043d0 <HAL_ADC_ConfigChannel+0x130>)
 800439c:	490e      	ldr	r1, [pc, #56]	; (80043d8 <HAL_ADC_ConfigChannel+0x138>)
 800439e:	400a      	ands	r2, r1
 80043a0:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	2380      	movs	r3, #128	; 0x80
 80043a8:	025b      	lsls	r3, r3, #9
 80043aa:	4013      	ands	r3, r2
 80043ac:	d005      	beq.n	80043ba <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 80043ae:	4b08      	ldr	r3, [pc, #32]	; (80043d0 <HAL_ADC_ConfigChannel+0x130>)
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	4b07      	ldr	r3, [pc, #28]	; (80043d0 <HAL_ADC_ConfigChannel+0x130>)
 80043b4:	4909      	ldr	r1, [pc, #36]	; (80043dc <HAL_ADC_ConfigChannel+0x13c>)
 80043b6:	400a      	ands	r2, r1
 80043b8:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2250      	movs	r2, #80	; 0x50
 80043be:	2100      	movs	r1, #0
 80043c0:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	0018      	movs	r0, r3
 80043c6:	46bd      	mov	sp, r7
 80043c8:	b002      	add	sp, #8
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	00001001 	.word	0x00001001
 80043d0:	40012708 	.word	0x40012708
 80043d4:	ff7fffff 	.word	0xff7fffff
 80043d8:	ffbfffff 	.word	0xffbfffff
 80043dc:	feffffff 	.word	0xfeffffff

080043e0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	2203      	movs	r2, #3
 80043f4:	4013      	ands	r3, r2
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d108      	bne.n	800440c <ADC_Enable+0x2c>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2201      	movs	r2, #1
 8004402:	4013      	ands	r3, r2
 8004404:	2b01      	cmp	r3, #1
 8004406:	d101      	bne.n	800440c <ADC_Enable+0x2c>
 8004408:	2301      	movs	r3, #1
 800440a:	e000      	b.n	800440e <ADC_Enable+0x2e>
 800440c:	2300      	movs	r3, #0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d13f      	bne.n	8004492 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	4a20      	ldr	r2, [pc, #128]	; (800449c <ADC_Enable+0xbc>)
 800441a:	4013      	ands	r3, r2
 800441c:	d00d      	beq.n	800443a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004422:	2210      	movs	r2, #16
 8004424:	431a      	orrs	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442e:	2201      	movs	r2, #1
 8004430:	431a      	orrs	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e02c      	b.n	8004494 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2101      	movs	r1, #1
 8004446:	430a      	orrs	r2, r1
 8004448:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800444a:	2001      	movs	r0, #1
 800444c:	f000 f828 	bl	80044a0 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004450:	f7ff fd18 	bl	8003e84 <HAL_GetTick>
 8004454:	0003      	movs	r3, r0
 8004456:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004458:	e014      	b.n	8004484 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800445a:	f7ff fd13 	bl	8003e84 <HAL_GetTick>
 800445e:	0002      	movs	r2, r0
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b0a      	cmp	r3, #10
 8004466:	d90d      	bls.n	8004484 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446c:	2210      	movs	r2, #16
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004478:	2201      	movs	r2, #1
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e007      	b.n	8004494 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2201      	movs	r2, #1
 800448c:	4013      	ands	r3, r2
 800448e:	2b01      	cmp	r3, #1
 8004490:	d1e3      	bne.n	800445a <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	0018      	movs	r0, r3
 8004496:	46bd      	mov	sp, r7
 8004498:	b004      	add	sp, #16
 800449a:	bd80      	pop	{r7, pc}
 800449c:	80000017 	.word	0x80000017

080044a0 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80044a8:	4b0a      	ldr	r3, [pc, #40]	; (80044d4 <ADC_DelayMicroSecond+0x34>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	490a      	ldr	r1, [pc, #40]	; (80044d8 <ADC_DelayMicroSecond+0x38>)
 80044ae:	0018      	movs	r0, r3
 80044b0:	f7fb fe2a 	bl	8000108 <__udivsi3>
 80044b4:	0003      	movs	r3, r0
 80044b6:	001a      	movs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4353      	muls	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80044be:	e002      	b.n	80044c6 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	3b01      	subs	r3, #1
 80044c4:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1f9      	bne.n	80044c0 <ADC_DelayMicroSecond+0x20>
  } 
}
 80044cc:	46c0      	nop			; (mov r8, r8)
 80044ce:	46bd      	mov	sp, r7
 80044d0:	b004      	add	sp, #16
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	20000004 	.word	0x20000004
 80044d8:	000f4240 	.word	0x000f4240

080044dc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	0002      	movs	r2, r0
 80044e4:	1dfb      	adds	r3, r7, #7
 80044e6:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80044e8:	1dfb      	adds	r3, r7, #7
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	001a      	movs	r2, r3
 80044ee:	231f      	movs	r3, #31
 80044f0:	401a      	ands	r2, r3
 80044f2:	4b04      	ldr	r3, [pc, #16]	; (8004504 <NVIC_EnableIRQ+0x28>)
 80044f4:	2101      	movs	r1, #1
 80044f6:	4091      	lsls	r1, r2
 80044f8:	000a      	movs	r2, r1
 80044fa:	601a      	str	r2, [r3, #0]
}
 80044fc:	46c0      	nop			; (mov r8, r8)
 80044fe:	46bd      	mov	sp, r7
 8004500:	b002      	add	sp, #8
 8004502:	bd80      	pop	{r7, pc}
 8004504:	e000e100 	.word	0xe000e100

08004508 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	0002      	movs	r2, r0
 8004510:	1dfb      	adds	r3, r7, #7
 8004512:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004514:	1dfb      	adds	r3, r7, #7
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	001a      	movs	r2, r3
 800451a:	231f      	movs	r3, #31
 800451c:	4013      	ands	r3, r2
 800451e:	4905      	ldr	r1, [pc, #20]	; (8004534 <NVIC_DisableIRQ+0x2c>)
 8004520:	2201      	movs	r2, #1
 8004522:	409a      	lsls	r2, r3
 8004524:	0013      	movs	r3, r2
 8004526:	2280      	movs	r2, #128	; 0x80
 8004528:	508b      	str	r3, [r1, r2]
}
 800452a:	46c0      	nop			; (mov r8, r8)
 800452c:	46bd      	mov	sp, r7
 800452e:	b002      	add	sp, #8
 8004530:	bd80      	pop	{r7, pc}
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	e000e100 	.word	0xe000e100

08004538 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	0002      	movs	r2, r0
 8004540:	1dfb      	adds	r3, r7, #7
 8004542:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004544:	1dfb      	adds	r3, r7, #7
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	001a      	movs	r2, r3
 800454a:	231f      	movs	r3, #31
 800454c:	4013      	ands	r3, r2
 800454e:	4905      	ldr	r1, [pc, #20]	; (8004564 <NVIC_ClearPendingIRQ+0x2c>)
 8004550:	2201      	movs	r2, #1
 8004552:	409a      	lsls	r2, r3
 8004554:	23c0      	movs	r3, #192	; 0xc0
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	50ca      	str	r2, [r1, r3]
}
 800455a:	46c0      	nop			; (mov r8, r8)
 800455c:	46bd      	mov	sp, r7
 800455e:	b002      	add	sp, #8
 8004560:	bd80      	pop	{r7, pc}
 8004562:	46c0      	nop			; (mov r8, r8)
 8004564:	e000e100 	.word	0xe000e100

08004568 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004568:	b590      	push	{r4, r7, lr}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	0002      	movs	r2, r0
 8004570:	6039      	str	r1, [r7, #0]
 8004572:	1dfb      	adds	r3, r7, #7
 8004574:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8004576:	1dfb      	adds	r3, r7, #7
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	2b7f      	cmp	r3, #127	; 0x7f
 800457c:	d932      	bls.n	80045e4 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800457e:	4a2f      	ldr	r2, [pc, #188]	; (800463c <NVIC_SetPriority+0xd4>)
 8004580:	1dfb      	adds	r3, r7, #7
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	0019      	movs	r1, r3
 8004586:	230f      	movs	r3, #15
 8004588:	400b      	ands	r3, r1
 800458a:	3b08      	subs	r3, #8
 800458c:	089b      	lsrs	r3, r3, #2
 800458e:	3306      	adds	r3, #6
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	18d3      	adds	r3, r2, r3
 8004594:	3304      	adds	r3, #4
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	1dfa      	adds	r2, r7, #7
 800459a:	7812      	ldrb	r2, [r2, #0]
 800459c:	0011      	movs	r1, r2
 800459e:	2203      	movs	r2, #3
 80045a0:	400a      	ands	r2, r1
 80045a2:	00d2      	lsls	r2, r2, #3
 80045a4:	21ff      	movs	r1, #255	; 0xff
 80045a6:	4091      	lsls	r1, r2
 80045a8:	000a      	movs	r2, r1
 80045aa:	43d2      	mvns	r2, r2
 80045ac:	401a      	ands	r2, r3
 80045ae:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	019b      	lsls	r3, r3, #6
 80045b4:	22ff      	movs	r2, #255	; 0xff
 80045b6:	401a      	ands	r2, r3
 80045b8:	1dfb      	adds	r3, r7, #7
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	0018      	movs	r0, r3
 80045be:	2303      	movs	r3, #3
 80045c0:	4003      	ands	r3, r0
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80045c6:	481d      	ldr	r0, [pc, #116]	; (800463c <NVIC_SetPriority+0xd4>)
 80045c8:	1dfb      	adds	r3, r7, #7
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	001c      	movs	r4, r3
 80045ce:	230f      	movs	r3, #15
 80045d0:	4023      	ands	r3, r4
 80045d2:	3b08      	subs	r3, #8
 80045d4:	089b      	lsrs	r3, r3, #2
 80045d6:	430a      	orrs	r2, r1
 80045d8:	3306      	adds	r3, #6
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	18c3      	adds	r3, r0, r3
 80045de:	3304      	adds	r3, #4
 80045e0:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80045e2:	e027      	b.n	8004634 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80045e4:	4a16      	ldr	r2, [pc, #88]	; (8004640 <NVIC_SetPriority+0xd8>)
 80045e6:	1dfb      	adds	r3, r7, #7
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	b25b      	sxtb	r3, r3
 80045ec:	089b      	lsrs	r3, r3, #2
 80045ee:	33c0      	adds	r3, #192	; 0xc0
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	589b      	ldr	r3, [r3, r2]
 80045f4:	1dfa      	adds	r2, r7, #7
 80045f6:	7812      	ldrb	r2, [r2, #0]
 80045f8:	0011      	movs	r1, r2
 80045fa:	2203      	movs	r2, #3
 80045fc:	400a      	ands	r2, r1
 80045fe:	00d2      	lsls	r2, r2, #3
 8004600:	21ff      	movs	r1, #255	; 0xff
 8004602:	4091      	lsls	r1, r2
 8004604:	000a      	movs	r2, r1
 8004606:	43d2      	mvns	r2, r2
 8004608:	401a      	ands	r2, r3
 800460a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	019b      	lsls	r3, r3, #6
 8004610:	22ff      	movs	r2, #255	; 0xff
 8004612:	401a      	ands	r2, r3
 8004614:	1dfb      	adds	r3, r7, #7
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	0018      	movs	r0, r3
 800461a:	2303      	movs	r3, #3
 800461c:	4003      	ands	r3, r0
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004622:	4807      	ldr	r0, [pc, #28]	; (8004640 <NVIC_SetPriority+0xd8>)
 8004624:	1dfb      	adds	r3, r7, #7
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	b25b      	sxtb	r3, r3
 800462a:	089b      	lsrs	r3, r3, #2
 800462c:	430a      	orrs	r2, r1
 800462e:	33c0      	adds	r3, #192	; 0xc0
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	501a      	str	r2, [r3, r0]
}
 8004634:	46c0      	nop			; (mov r8, r8)
 8004636:	46bd      	mov	sp, r7
 8004638:	b003      	add	sp, #12
 800463a:	bd90      	pop	{r4, r7, pc}
 800463c:	e000ed00 	.word	0xe000ed00
 8004640:	e000e100 	.word	0xe000e100

08004644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3b01      	subs	r3, #1
 8004650:	4a0c      	ldr	r2, [pc, #48]	; (8004684 <SysTick_Config+0x40>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d901      	bls.n	800465a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004656:	2301      	movs	r3, #1
 8004658:	e010      	b.n	800467c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800465a:	4b0b      	ldr	r3, [pc, #44]	; (8004688 <SysTick_Config+0x44>)
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	3a01      	subs	r2, #1
 8004660:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004662:	2301      	movs	r3, #1
 8004664:	425b      	negs	r3, r3
 8004666:	2103      	movs	r1, #3
 8004668:	0018      	movs	r0, r3
 800466a:	f7ff ff7d 	bl	8004568 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800466e:	4b06      	ldr	r3, [pc, #24]	; (8004688 <SysTick_Config+0x44>)
 8004670:	2200      	movs	r2, #0
 8004672:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004674:	4b04      	ldr	r3, [pc, #16]	; (8004688 <SysTick_Config+0x44>)
 8004676:	2207      	movs	r2, #7
 8004678:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800467a:	2300      	movs	r3, #0
}
 800467c:	0018      	movs	r0, r3
 800467e:	46bd      	mov	sp, r7
 8004680:	b002      	add	sp, #8
 8004682:	bd80      	pop	{r7, pc}
 8004684:	00ffffff 	.word	0x00ffffff
 8004688:	e000e010 	.word	0xe000e010

0800468c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	60b9      	str	r1, [r7, #8]
 8004694:	607a      	str	r2, [r7, #4]
 8004696:	210f      	movs	r1, #15
 8004698:	187b      	adds	r3, r7, r1
 800469a:	1c02      	adds	r2, r0, #0
 800469c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	187b      	adds	r3, r7, r1
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	b25b      	sxtb	r3, r3
 80046a6:	0011      	movs	r1, r2
 80046a8:	0018      	movs	r0, r3
 80046aa:	f7ff ff5d 	bl	8004568 <NVIC_SetPriority>
}
 80046ae:	46c0      	nop			; (mov r8, r8)
 80046b0:	46bd      	mov	sp, r7
 80046b2:	b004      	add	sp, #16
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b082      	sub	sp, #8
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	0002      	movs	r2, r0
 80046be:	1dfb      	adds	r3, r7, #7
 80046c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046c2:	1dfb      	adds	r3, r7, #7
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	b25b      	sxtb	r3, r3
 80046c8:	0018      	movs	r0, r3
 80046ca:	f7ff ff07 	bl	80044dc <NVIC_EnableIRQ>
}
 80046ce:	46c0      	nop			; (mov r8, r8)
 80046d0:	46bd      	mov	sp, r7
 80046d2:	b002      	add	sp, #8
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b082      	sub	sp, #8
 80046da:	af00      	add	r7, sp, #0
 80046dc:	0002      	movs	r2, r0
 80046de:	1dfb      	adds	r3, r7, #7
 80046e0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80046e2:	1dfb      	adds	r3, r7, #7
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	b25b      	sxtb	r3, r3
 80046e8:	0018      	movs	r0, r3
 80046ea:	f7ff ff0d 	bl	8004508 <NVIC_DisableIRQ>
}
 80046ee:	46c0      	nop			; (mov r8, r8)
 80046f0:	46bd      	mov	sp, r7
 80046f2:	b002      	add	sp, #8
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b082      	sub	sp, #8
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	0018      	movs	r0, r3
 8004702:	f7ff ff9f 	bl	8004644 <SysTick_Config>
 8004706:	0003      	movs	r3, r0
}
 8004708:	0018      	movs	r0, r3
 800470a:	46bd      	mov	sp, r7
 800470c:	b002      	add	sp, #8
 800470e:	bd80      	pop	{r7, pc}

08004710 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	0002      	movs	r2, r0
 8004718:	1dfb      	adds	r3, r7, #7
 800471a:	701a      	strb	r2, [r3, #0]
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800471c:	1dfb      	adds	r3, r7, #7
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	b25b      	sxtb	r3, r3
 8004722:	0018      	movs	r0, r3
 8004724:	f7ff ff08 	bl	8004538 <NVIC_ClearPendingIRQ>
}
 8004728:	46c0      	nop			; (mov r8, r8)
 800472a:	46bd      	mov	sp, r7
 800472c:	b002      	add	sp, #8
 800472e:	bd80      	pop	{r7, pc}

08004730 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e061      	b.n	8004806 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a32      	ldr	r2, [pc, #200]	; (8004810 <HAL_DMA_Init+0xe0>)
 8004748:	4694      	mov	ip, r2
 800474a:	4463      	add	r3, ip
 800474c:	2114      	movs	r1, #20
 800474e:	0018      	movs	r0, r3
 8004750:	f7fb fcda 	bl	8000108 <__udivsi3>
 8004754:	0003      	movs	r3, r0
 8004756:	009a      	lsls	r2, r3, #2
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a2d      	ldr	r2, [pc, #180]	; (8004814 <HAL_DMA_Init+0xe4>)
 8004760:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2225      	movs	r2, #37	; 0x25
 8004766:	2102      	movs	r1, #2
 8004768:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4a28      	ldr	r2, [pc, #160]	; (8004818 <HAL_DMA_Init+0xe8>)
 8004776:	4013      	ands	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004782:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800478e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800479a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	2380      	movs	r3, #128	; 0x80
 80047b6:	01db      	lsls	r3, r3, #7
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d018      	beq.n	80047ee <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80047bc:	4b17      	ldr	r3, [pc, #92]	; (800481c <HAL_DMA_Init+0xec>)
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c4:	211c      	movs	r1, #28
 80047c6:	400b      	ands	r3, r1
 80047c8:	210f      	movs	r1, #15
 80047ca:	4099      	lsls	r1, r3
 80047cc:	000b      	movs	r3, r1
 80047ce:	43d9      	mvns	r1, r3
 80047d0:	4b12      	ldr	r3, [pc, #72]	; (800481c <HAL_DMA_Init+0xec>)
 80047d2:	400a      	ands	r2, r1
 80047d4:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80047d6:	4b11      	ldr	r3, [pc, #68]	; (800481c <HAL_DMA_Init+0xec>)
 80047d8:	6819      	ldr	r1, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e2:	201c      	movs	r0, #28
 80047e4:	4003      	ands	r3, r0
 80047e6:	409a      	lsls	r2, r3
 80047e8:	4b0c      	ldr	r3, [pc, #48]	; (800481c <HAL_DMA_Init+0xec>)
 80047ea:	430a      	orrs	r2, r1
 80047ec:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2225      	movs	r2, #37	; 0x25
 80047f8:	2101      	movs	r1, #1
 80047fa:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2224      	movs	r2, #36	; 0x24
 8004800:	2100      	movs	r1, #0
 8004802:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	0018      	movs	r0, r3
 8004808:	46bd      	mov	sp, r7
 800480a:	b004      	add	sp, #16
 800480c:	bd80      	pop	{r7, pc}
 800480e:	46c0      	nop			; (mov r8, r8)
 8004810:	bffdfff8 	.word	0xbffdfff8
 8004814:	40020000 	.word	0x40020000
 8004818:	ffff800f 	.word	0xffff800f
 800481c:	400200a8 	.word	0x400200a8

08004820 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004828:	230f      	movs	r3, #15
 800482a:	18fb      	adds	r3, r7, r3
 800482c:	2200      	movs	r2, #0
 800482e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2225      	movs	r2, #37	; 0x25
 8004834:	5c9b      	ldrb	r3, [r3, r2]
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d007      	beq.n	800484c <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2204      	movs	r2, #4
 8004840:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004842:	230f      	movs	r3, #15
 8004844:	18fb      	adds	r3, r7, r3
 8004846:	2201      	movs	r2, #1
 8004848:	701a      	strb	r2, [r3, #0]
 800484a:	e02a      	b.n	80048a2 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	210e      	movs	r1, #14
 8004858:	438a      	bics	r2, r1
 800485a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2101      	movs	r1, #1
 8004868:	438a      	bics	r2, r1
 800486a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004870:	221c      	movs	r2, #28
 8004872:	401a      	ands	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004878:	2101      	movs	r1, #1
 800487a:	4091      	lsls	r1, r2
 800487c:	000a      	movs	r2, r1
 800487e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2225      	movs	r2, #37	; 0x25
 8004884:	2101      	movs	r1, #1
 8004886:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2224      	movs	r2, #36	; 0x24
 800488c:	2100      	movs	r1, #0
 800488e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004894:	2b00      	cmp	r3, #0
 8004896:	d004      	beq.n	80048a2 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	0010      	movs	r0, r2
 80048a0:	4798      	blx	r3
    }
  }
  return status;
 80048a2:	230f      	movs	r3, #15
 80048a4:	18fb      	adds	r3, r7, r3
 80048a6:	781b      	ldrb	r3, [r3, #0]
}
 80048a8:	0018      	movs	r0, r3
 80048aa:	46bd      	mov	sp, r7
 80048ac:	b004      	add	sp, #16
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048cc:	221c      	movs	r2, #28
 80048ce:	4013      	ands	r3, r2
 80048d0:	2204      	movs	r2, #4
 80048d2:	409a      	lsls	r2, r3
 80048d4:	0013      	movs	r3, r2
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	4013      	ands	r3, r2
 80048da:	d026      	beq.n	800492a <HAL_DMA_IRQHandler+0x7a>
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	2204      	movs	r2, #4
 80048e0:	4013      	ands	r3, r2
 80048e2:	d022      	beq.n	800492a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2220      	movs	r2, #32
 80048ec:	4013      	ands	r3, r2
 80048ee:	d107      	bne.n	8004900 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2104      	movs	r1, #4
 80048fc:	438a      	bics	r2, r1
 80048fe:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004904:	221c      	movs	r2, #28
 8004906:	401a      	ands	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490c:	2104      	movs	r1, #4
 800490e:	4091      	lsls	r1, r2
 8004910:	000a      	movs	r2, r1
 8004912:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	2b00      	cmp	r3, #0
 800491a:	d100      	bne.n	800491e <HAL_DMA_IRQHandler+0x6e>
 800491c:	e071      	b.n	8004a02 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	0010      	movs	r0, r2
 8004926:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8004928:	e06b      	b.n	8004a02 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492e:	221c      	movs	r2, #28
 8004930:	4013      	ands	r3, r2
 8004932:	2202      	movs	r2, #2
 8004934:	409a      	lsls	r2, r3
 8004936:	0013      	movs	r3, r2
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	4013      	ands	r3, r2
 800493c:	d02d      	beq.n	800499a <HAL_DMA_IRQHandler+0xea>
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	2202      	movs	r2, #2
 8004942:	4013      	ands	r3, r2
 8004944:	d029      	beq.n	800499a <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2220      	movs	r2, #32
 800494e:	4013      	ands	r3, r2
 8004950:	d10b      	bne.n	800496a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	210a      	movs	r1, #10
 800495e:	438a      	bics	r2, r1
 8004960:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2225      	movs	r2, #37	; 0x25
 8004966:	2101      	movs	r1, #1
 8004968:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496e:	221c      	movs	r2, #28
 8004970:	401a      	ands	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	2102      	movs	r1, #2
 8004978:	4091      	lsls	r1, r2
 800497a:	000a      	movs	r2, r1
 800497c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2224      	movs	r2, #36	; 0x24
 8004982:	2100      	movs	r1, #0
 8004984:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498a:	2b00      	cmp	r3, #0
 800498c:	d039      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	0010      	movs	r0, r2
 8004996:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004998:	e033      	b.n	8004a02 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499e:	221c      	movs	r2, #28
 80049a0:	4013      	ands	r3, r2
 80049a2:	2208      	movs	r2, #8
 80049a4:	409a      	lsls	r2, r3
 80049a6:	0013      	movs	r3, r2
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	4013      	ands	r3, r2
 80049ac:	d02a      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x154>
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2208      	movs	r2, #8
 80049b2:	4013      	ands	r3, r2
 80049b4:	d026      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	210e      	movs	r1, #14
 80049c2:	438a      	bics	r2, r1
 80049c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ca:	221c      	movs	r2, #28
 80049cc:	401a      	ands	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	2101      	movs	r1, #1
 80049d4:	4091      	lsls	r1, r2
 80049d6:	000a      	movs	r2, r1
 80049d8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2225      	movs	r2, #37	; 0x25
 80049e4:	2101      	movs	r1, #1
 80049e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2224      	movs	r2, #36	; 0x24
 80049ec:	2100      	movs	r1, #0
 80049ee:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d005      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	0010      	movs	r0, r2
 8004a00:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004a02:	46c0      	nop			; (mov r8, r8)
 8004a04:	46c0      	nop			; (mov r8, r8)
}
 8004a06:	46bd      	mov	sp, r7
 8004a08:	b004      	add	sp, #16
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004a16:	2300      	movs	r3, #0
 8004a18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004a22:	e155      	b.n	8004cd0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2101      	movs	r1, #1
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	4091      	lsls	r1, r2
 8004a2e:	000a      	movs	r2, r1
 8004a30:	4013      	ands	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d100      	bne.n	8004a3c <HAL_GPIO_Init+0x30>
 8004a3a:	e146      	b.n	8004cca <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d003      	beq.n	8004a4c <HAL_GPIO_Init+0x40>
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	2b12      	cmp	r3, #18
 8004a4a:	d123      	bne.n	8004a94 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	08da      	lsrs	r2, r3, #3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3208      	adds	r2, #8
 8004a54:	0092      	lsls	r2, r2, #2
 8004a56:	58d3      	ldr	r3, [r2, r3]
 8004a58:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2207      	movs	r2, #7
 8004a5e:	4013      	ands	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	220f      	movs	r2, #15
 8004a64:	409a      	lsls	r2, r3
 8004a66:	0013      	movs	r3, r2
 8004a68:	43da      	mvns	r2, r3
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	691a      	ldr	r2, [r3, #16]
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	2107      	movs	r1, #7
 8004a78:	400b      	ands	r3, r1
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	409a      	lsls	r2, r3
 8004a7e:	0013      	movs	r3, r2
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	08da      	lsrs	r2, r3, #3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	3208      	adds	r2, #8
 8004a8e:	0092      	lsls	r2, r2, #2
 8004a90:	6939      	ldr	r1, [r7, #16]
 8004a92:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d00b      	beq.n	8004ab4 <HAL_GPIO_Init+0xa8>
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d007      	beq.n	8004ab4 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004aa8:	2b11      	cmp	r3, #17
 8004aaa:	d003      	beq.n	8004ab4 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	2b12      	cmp	r3, #18
 8004ab2:	d130      	bne.n	8004b16 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	2203      	movs	r2, #3
 8004ac0:	409a      	lsls	r2, r3
 8004ac2:	0013      	movs	r3, r2
 8004ac4:	43da      	mvns	r2, r3
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	68da      	ldr	r2, [r3, #12]
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	409a      	lsls	r2, r3
 8004ad6:	0013      	movs	r3, r2
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004aea:	2201      	movs	r2, #1
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	409a      	lsls	r2, r3
 8004af0:	0013      	movs	r3, r2
 8004af2:	43da      	mvns	r2, r3
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	4013      	ands	r3, r2
 8004af8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	091b      	lsrs	r3, r3, #4
 8004b00:	2201      	movs	r2, #1
 8004b02:	401a      	ands	r2, r3
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	409a      	lsls	r2, r3
 8004b08:	0013      	movs	r3, r2
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	2203      	movs	r2, #3
 8004b22:	409a      	lsls	r2, r3
 8004b24:	0013      	movs	r3, r2
 8004b26:	43da      	mvns	r2, r3
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2203      	movs	r2, #3
 8004b34:	401a      	ands	r2, r3
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	409a      	lsls	r2, r3
 8004b3c:	0013      	movs	r3, r2
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	2203      	movs	r2, #3
 8004b56:	409a      	lsls	r2, r3
 8004b58:	0013      	movs	r3, r2
 8004b5a:	43da      	mvns	r2, r3
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	689a      	ldr	r2, [r3, #8]
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	409a      	lsls	r2, r3
 8004b6c:	0013      	movs	r3, r2
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	2380      	movs	r3, #128	; 0x80
 8004b80:	055b      	lsls	r3, r3, #21
 8004b82:	4013      	ands	r3, r2
 8004b84:	d100      	bne.n	8004b88 <HAL_GPIO_Init+0x17c>
 8004b86:	e0a0      	b.n	8004cca <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b88:	4b57      	ldr	r3, [pc, #348]	; (8004ce8 <HAL_GPIO_Init+0x2dc>)
 8004b8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b8c:	4b56      	ldr	r3, [pc, #344]	; (8004ce8 <HAL_GPIO_Init+0x2dc>)
 8004b8e:	2101      	movs	r1, #1
 8004b90:	430a      	orrs	r2, r1
 8004b92:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8004b94:	4a55      	ldr	r2, [pc, #340]	; (8004cec <HAL_GPIO_Init+0x2e0>)
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	089b      	lsrs	r3, r3, #2
 8004b9a:	3302      	adds	r3, #2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	589b      	ldr	r3, [r3, r2]
 8004ba0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	2203      	movs	r2, #3
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	220f      	movs	r2, #15
 8004bac:	409a      	lsls	r2, r3
 8004bae:	0013      	movs	r3, r2
 8004bb0:	43da      	mvns	r2, r3
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	23a0      	movs	r3, #160	; 0xa0
 8004bbc:	05db      	lsls	r3, r3, #23
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d01f      	beq.n	8004c02 <HAL_GPIO_Init+0x1f6>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a4a      	ldr	r2, [pc, #296]	; (8004cf0 <HAL_GPIO_Init+0x2e4>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d019      	beq.n	8004bfe <HAL_GPIO_Init+0x1f2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a49      	ldr	r2, [pc, #292]	; (8004cf4 <HAL_GPIO_Init+0x2e8>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d013      	beq.n	8004bfa <HAL_GPIO_Init+0x1ee>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a48      	ldr	r2, [pc, #288]	; (8004cf8 <HAL_GPIO_Init+0x2ec>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00d      	beq.n	8004bf6 <HAL_GPIO_Init+0x1ea>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a47      	ldr	r2, [pc, #284]	; (8004cfc <HAL_GPIO_Init+0x2f0>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d007      	beq.n	8004bf2 <HAL_GPIO_Init+0x1e6>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a46      	ldr	r2, [pc, #280]	; (8004d00 <HAL_GPIO_Init+0x2f4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d101      	bne.n	8004bee <HAL_GPIO_Init+0x1e2>
 8004bea:	2305      	movs	r3, #5
 8004bec:	e00a      	b.n	8004c04 <HAL_GPIO_Init+0x1f8>
 8004bee:	2306      	movs	r3, #6
 8004bf0:	e008      	b.n	8004c04 <HAL_GPIO_Init+0x1f8>
 8004bf2:	2304      	movs	r3, #4
 8004bf4:	e006      	b.n	8004c04 <HAL_GPIO_Init+0x1f8>
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e004      	b.n	8004c04 <HAL_GPIO_Init+0x1f8>
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	e002      	b.n	8004c04 <HAL_GPIO_Init+0x1f8>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e000      	b.n	8004c04 <HAL_GPIO_Init+0x1f8>
 8004c02:	2300      	movs	r3, #0
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	2103      	movs	r1, #3
 8004c08:	400a      	ands	r2, r1
 8004c0a:	0092      	lsls	r2, r2, #2
 8004c0c:	4093      	lsls	r3, r2
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c14:	4935      	ldr	r1, [pc, #212]	; (8004cec <HAL_GPIO_Init+0x2e0>)
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	089b      	lsrs	r3, r3, #2
 8004c1a:	3302      	adds	r3, #2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c22:	4b38      	ldr	r3, [pc, #224]	; (8004d04 <HAL_GPIO_Init+0x2f8>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	43da      	mvns	r2, r3
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	2380      	movs	r3, #128	; 0x80
 8004c38:	025b      	lsls	r3, r3, #9
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	d003      	beq.n	8004c46 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004c46:	4b2f      	ldr	r3, [pc, #188]	; (8004d04 <HAL_GPIO_Init+0x2f8>)
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004c4c:	4b2d      	ldr	r3, [pc, #180]	; (8004d04 <HAL_GPIO_Init+0x2f8>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	43da      	mvns	r2, r3
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	2380      	movs	r3, #128	; 0x80
 8004c62:	029b      	lsls	r3, r3, #10
 8004c64:	4013      	ands	r3, r2
 8004c66:	d003      	beq.n	8004c70 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004c70:	4b24      	ldr	r3, [pc, #144]	; (8004d04 <HAL_GPIO_Init+0x2f8>)
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c76:	4b23      	ldr	r3, [pc, #140]	; (8004d04 <HAL_GPIO_Init+0x2f8>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	43da      	mvns	r2, r3
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	4013      	ands	r3, r2
 8004c84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	2380      	movs	r3, #128	; 0x80
 8004c8c:	035b      	lsls	r3, r3, #13
 8004c8e:	4013      	ands	r3, r2
 8004c90:	d003      	beq.n	8004c9a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004c9a:	4b1a      	ldr	r3, [pc, #104]	; (8004d04 <HAL_GPIO_Init+0x2f8>)
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004ca0:	4b18      	ldr	r3, [pc, #96]	; (8004d04 <HAL_GPIO_Init+0x2f8>)
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	43da      	mvns	r2, r3
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	4013      	ands	r3, r2
 8004cae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	2380      	movs	r3, #128	; 0x80
 8004cb6:	039b      	lsls	r3, r3, #14
 8004cb8:	4013      	ands	r3, r2
 8004cba:	d003      	beq.n	8004cc4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004cc4:	4b0f      	ldr	r3, [pc, #60]	; (8004d04 <HAL_GPIO_Init+0x2f8>)
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	40da      	lsrs	r2, r3
 8004cd8:	1e13      	subs	r3, r2, #0
 8004cda:	d000      	beq.n	8004cde <HAL_GPIO_Init+0x2d2>
 8004cdc:	e6a2      	b.n	8004a24 <HAL_GPIO_Init+0x18>
  }
}
 8004cde:	46c0      	nop			; (mov r8, r8)
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	b006      	add	sp, #24
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	46c0      	nop			; (mov r8, r8)
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	40010000 	.word	0x40010000
 8004cf0:	50000400 	.word	0x50000400
 8004cf4:	50000800 	.word	0x50000800
 8004cf8:	50000c00 	.word	0x50000c00
 8004cfc:	50001000 	.word	0x50001000
 8004d00:	50001c00 	.word	0x50001c00
 8004d04:	40010400 	.word	0x40010400

08004d08 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	000a      	movs	r2, r1
 8004d12:	1cbb      	adds	r3, r7, #2
 8004d14:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	1cba      	adds	r2, r7, #2
 8004d1c:	8812      	ldrh	r2, [r2, #0]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	d004      	beq.n	8004d2c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004d22:	230f      	movs	r3, #15
 8004d24:	18fb      	adds	r3, r7, r3
 8004d26:	2201      	movs	r2, #1
 8004d28:	701a      	strb	r2, [r3, #0]
 8004d2a:	e003      	b.n	8004d34 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d2c:	230f      	movs	r3, #15
 8004d2e:	18fb      	adds	r3, r7, r3
 8004d30:	2200      	movs	r2, #0
 8004d32:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004d34:	230f      	movs	r3, #15
 8004d36:	18fb      	adds	r3, r7, r3
 8004d38:	781b      	ldrb	r3, [r3, #0]
}
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	b004      	add	sp, #16
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b082      	sub	sp, #8
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
 8004d4a:	0008      	movs	r0, r1
 8004d4c:	0011      	movs	r1, r2
 8004d4e:	1cbb      	adds	r3, r7, #2
 8004d50:	1c02      	adds	r2, r0, #0
 8004d52:	801a      	strh	r2, [r3, #0]
 8004d54:	1c7b      	adds	r3, r7, #1
 8004d56:	1c0a      	adds	r2, r1, #0
 8004d58:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8004d5a:	1c7b      	adds	r3, r7, #1
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d004      	beq.n	8004d6c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d62:	1cbb      	adds	r3, r7, #2
 8004d64:	881a      	ldrh	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004d6a:	e003      	b.n	8004d74 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004d6c:	1cbb      	adds	r3, r7, #2
 8004d6e:	881a      	ldrh	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d74:	46c0      	nop			; (mov r8, r8)
 8004d76:	46bd      	mov	sp, r7
 8004d78:	b002      	add	sp, #8
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	000a      	movs	r2, r1
 8004d86:	1cbb      	adds	r3, r7, #2
 8004d88:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	695a      	ldr	r2, [r3, #20]
 8004d8e:	1cbb      	adds	r3, r7, #2
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	405a      	eors	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	615a      	str	r2, [r3, #20]
}
 8004d98:	46c0      	nop			; (mov r8, r8)
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	b002      	add	sp, #8
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	0002      	movs	r2, r0
 8004da8:	1dbb      	adds	r3, r7, #6
 8004daa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8004dac:	4b09      	ldr	r3, [pc, #36]	; (8004dd4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	1dba      	adds	r2, r7, #6
 8004db2:	8812      	ldrh	r2, [r2, #0]
 8004db4:	4013      	ands	r3, r2
 8004db6:	d008      	beq.n	8004dca <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004db8:	4b06      	ldr	r3, [pc, #24]	; (8004dd4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004dba:	1dba      	adds	r2, r7, #6
 8004dbc:	8812      	ldrh	r2, [r2, #0]
 8004dbe:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004dc0:	1dbb      	adds	r3, r7, #6
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	f7fe ff65 	bl	8003c94 <HAL_GPIO_EXTI_Callback>
  }
}
 8004dca:	46c0      	nop			; (mov r8, r8)
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	b002      	add	sp, #8
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	40010400 	.word	0x40010400

08004dd8 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e06c      	b.n	8004ec4 <HAL_LPTIM_Init+0xec>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	222e      	movs	r2, #46	; 0x2e
 8004dee:	5c9b      	ldrb	r3, [r3, r2]
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d107      	bne.n	8004e06 <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	222d      	movs	r2, #45	; 0x2d
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	0018      	movs	r0, r3
 8004e02:	f7fe fbcb 	bl	800359c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	222e      	movs	r2, #46	; 0x2e
 8004e0a:	2102      	movs	r1, #2
 8004e0c:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d005      	beq.n	8004e2a <HAL_LPTIM_Init+0x52>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e22:	2380      	movs	r3, #128	; 0x80
 8004e24:	041b      	lsls	r3, r3, #16
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d103      	bne.n	8004e32 <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	221e      	movs	r2, #30
 8004e2e:	4393      	bics	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	4a25      	ldr	r2, [pc, #148]	; (8004ecc <HAL_LPTIM_Init+0xf4>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d003      	beq.n	8004e44 <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	4a24      	ldr	r2, [pc, #144]	; (8004ed0 <HAL_LPTIM_Init+0xf8>)
 8004e40:	4013      	ands	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4a23      	ldr	r2, [pc, #140]	; (8004ed4 <HAL_LPTIM_Init+0xfc>)
 8004e48:	4013      	ands	r3, r2
 8004e4a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004e54:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8004e5a:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8004e60:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8004e66:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d005      	beq.n	8004e82 <HAL_LPTIM_Init+0xaa>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e7a:	2380      	movs	r3, #128	; 0x80
 8004e7c:	041b      	lsls	r3, r3, #16
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d107      	bne.n	8004e92 <HAL_LPTIM_Init+0xba>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	4a0d      	ldr	r2, [pc, #52]	; (8004ecc <HAL_LPTIM_Init+0xf4>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d00a      	beq.n	8004eb2 <HAL_LPTIM_Init+0xda>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004ea4:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004eaa:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	222e      	movs	r2, #46	; 0x2e
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	b004      	add	sp, #16
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	0000ffff 	.word	0x0000ffff
 8004ed0:	ffff1f3f 	.word	0xffff1f3f
 8004ed4:	ff19f1f8 	.word	0xff19f1f8

08004ed8 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	4013      	ands	r3, r2
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d10e      	bne.n	8004f0c <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d107      	bne.n	8004f0c <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2201      	movs	r2, #1
 8004f02:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	0018      	movs	r0, r3
 8004f08:	f000 f888 	bl	800501c <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2202      	movs	r2, #2
 8004f14:	4013      	ands	r3, r2
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d10e      	bne.n	8004f38 <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	2202      	movs	r2, #2
 8004f22:	4013      	ands	r3, r2
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d107      	bne.n	8004f38 <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	0018      	movs	r0, r3
 8004f34:	f000 f87a 	bl	800502c <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2204      	movs	r2, #4
 8004f40:	4013      	ands	r3, r2
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	d10e      	bne.n	8004f64 <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	2204      	movs	r2, #4
 8004f4e:	4013      	ands	r3, r2
 8004f50:	2b04      	cmp	r3, #4
 8004f52:	d107      	bne.n	8004f64 <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2204      	movs	r2, #4
 8004f5a:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	0018      	movs	r0, r3
 8004f60:	f000 f86c 	bl	800503c <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2208      	movs	r2, #8
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	2b08      	cmp	r3, #8
 8004f70:	d10e      	bne.n	8004f90 <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	2208      	movs	r2, #8
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d107      	bne.n	8004f90 <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2208      	movs	r2, #8
 8004f86:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	0018      	movs	r0, r3
 8004f8c:	f000 f85e 	bl	800504c <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2210      	movs	r2, #16
 8004f98:	4013      	ands	r3, r2
 8004f9a:	2b10      	cmp	r3, #16
 8004f9c:	d10e      	bne.n	8004fbc <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	2210      	movs	r2, #16
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	2b10      	cmp	r3, #16
 8004faa:	d107      	bne.n	8004fbc <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2210      	movs	r2, #16
 8004fb2:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	0018      	movs	r0, r3
 8004fb8:	f000 f850 	bl	800505c <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	2b20      	cmp	r3, #32
 8004fc8:	d10e      	bne.n	8004fe8 <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	2b20      	cmp	r3, #32
 8004fd6:	d107      	bne.n	8004fe8 <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	f000 f842 	bl	800506c <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2240      	movs	r2, #64	; 0x40
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	2b40      	cmp	r3, #64	; 0x40
 8004ff4:	d10e      	bne.n	8005014 <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	2240      	movs	r2, #64	; 0x40
 8004ffe:	4013      	ands	r3, r2
 8005000:	2b40      	cmp	r3, #64	; 0x40
 8005002:	d107      	bne.n	8005014 <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2240      	movs	r2, #64	; 0x40
 800500a:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	0018      	movs	r0, r3
 8005010:	f000 f834 	bl	800507c <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8005014:	46c0      	nop			; (mov r8, r8)
 8005016:	46bd      	mov	sp, r7
 8005018:	b002      	add	sp, #8
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8005024:	46c0      	nop			; (mov r8, r8)
 8005026:	46bd      	mov	sp, r7
 8005028:	b002      	add	sp, #8
 800502a:	bd80      	pop	{r7, pc}

0800502c <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8005034:	46c0      	nop			; (mov r8, r8)
 8005036:	46bd      	mov	sp, r7
 8005038:	b002      	add	sp, #8
 800503a:	bd80      	pop	{r7, pc}

0800503c <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8005044:	46c0      	nop			; (mov r8, r8)
 8005046:	46bd      	mov	sp, r7
 8005048:	b002      	add	sp, #8
 800504a:	bd80      	pop	{r7, pc}

0800504c <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8005054:	46c0      	nop			; (mov r8, r8)
 8005056:	46bd      	mov	sp, r7
 8005058:	b002      	add	sp, #8
 800505a:	bd80      	pop	{r7, pc}

0800505c <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8005064:	46c0      	nop			; (mov r8, r8)
 8005066:	46bd      	mov	sp, r7
 8005068:	b002      	add	sp, #8
 800506a:	bd80      	pop	{r7, pc}

0800506c <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8005074:	46c0      	nop			; (mov r8, r8)
 8005076:	46bd      	mov	sp, r7
 8005078:	b002      	add	sp, #8
 800507a:	bd80      	pop	{r7, pc}

0800507c <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8005084:	46c0      	nop			; (mov r8, r8)
 8005086:	46bd      	mov	sp, r7
 8005088:	b002      	add	sp, #8
 800508a:	bd80      	pop	{r7, pc}

0800508c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8005090:	4b04      	ldr	r3, [pc, #16]	; (80050a4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	4b03      	ldr	r3, [pc, #12]	; (80050a4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005096:	2180      	movs	r1, #128	; 0x80
 8005098:	0049      	lsls	r1, r1, #1
 800509a:	430a      	orrs	r2, r1
 800509c:	601a      	str	r2, [r3, #0]
}
 800509e:	46c0      	nop			; (mov r8, r8)
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	40007000 	.word	0x40007000

080050a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050a8:	b5b0      	push	{r4, r5, r7, lr}
 80050aa:	b08a      	sub	sp, #40	; 0x28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d102      	bne.n	80050bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	f000 fbbc 	bl	8005834 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050bc:	4bc8      	ldr	r3, [pc, #800]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	220c      	movs	r2, #12
 80050c2:	4013      	ands	r3, r2
 80050c4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050c6:	4bc6      	ldr	r3, [pc, #792]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 80050c8:	68da      	ldr	r2, [r3, #12]
 80050ca:	2380      	movs	r3, #128	; 0x80
 80050cc:	025b      	lsls	r3, r3, #9
 80050ce:	4013      	ands	r3, r2
 80050d0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2201      	movs	r2, #1
 80050d8:	4013      	ands	r3, r2
 80050da:	d100      	bne.n	80050de <HAL_RCC_OscConfig+0x36>
 80050dc:	e07e      	b.n	80051dc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d007      	beq.n	80050f4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	2b0c      	cmp	r3, #12
 80050e8:	d112      	bne.n	8005110 <HAL_RCC_OscConfig+0x68>
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	2380      	movs	r3, #128	; 0x80
 80050ee:	025b      	lsls	r3, r3, #9
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d10d      	bne.n	8005110 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f4:	4bba      	ldr	r3, [pc, #744]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	2380      	movs	r3, #128	; 0x80
 80050fa:	029b      	lsls	r3, r3, #10
 80050fc:	4013      	ands	r3, r2
 80050fe:	d100      	bne.n	8005102 <HAL_RCC_OscConfig+0x5a>
 8005100:	e06b      	b.n	80051da <HAL_RCC_OscConfig+0x132>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d167      	bne.n	80051da <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	f000 fb92 	bl	8005834 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	2380      	movs	r3, #128	; 0x80
 8005116:	025b      	lsls	r3, r3, #9
 8005118:	429a      	cmp	r2, r3
 800511a:	d107      	bne.n	800512c <HAL_RCC_OscConfig+0x84>
 800511c:	4bb0      	ldr	r3, [pc, #704]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	4baf      	ldr	r3, [pc, #700]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 8005122:	2180      	movs	r1, #128	; 0x80
 8005124:	0249      	lsls	r1, r1, #9
 8005126:	430a      	orrs	r2, r1
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	e027      	b.n	800517c <HAL_RCC_OscConfig+0xd4>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	23a0      	movs	r3, #160	; 0xa0
 8005132:	02db      	lsls	r3, r3, #11
 8005134:	429a      	cmp	r2, r3
 8005136:	d10e      	bne.n	8005156 <HAL_RCC_OscConfig+0xae>
 8005138:	4ba9      	ldr	r3, [pc, #676]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	4ba8      	ldr	r3, [pc, #672]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 800513e:	2180      	movs	r1, #128	; 0x80
 8005140:	02c9      	lsls	r1, r1, #11
 8005142:	430a      	orrs	r2, r1
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	4ba6      	ldr	r3, [pc, #664]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	4ba5      	ldr	r3, [pc, #660]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 800514c:	2180      	movs	r1, #128	; 0x80
 800514e:	0249      	lsls	r1, r1, #9
 8005150:	430a      	orrs	r2, r1
 8005152:	601a      	str	r2, [r3, #0]
 8005154:	e012      	b.n	800517c <HAL_RCC_OscConfig+0xd4>
 8005156:	4ba2      	ldr	r3, [pc, #648]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	4ba1      	ldr	r3, [pc, #644]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 800515c:	49a1      	ldr	r1, [pc, #644]	; (80053e4 <HAL_RCC_OscConfig+0x33c>)
 800515e:	400a      	ands	r2, r1
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	4b9f      	ldr	r3, [pc, #636]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	2380      	movs	r3, #128	; 0x80
 8005168:	025b      	lsls	r3, r3, #9
 800516a:	4013      	ands	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	4b9b      	ldr	r3, [pc, #620]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	4b9a      	ldr	r3, [pc, #616]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 8005176:	499c      	ldr	r1, [pc, #624]	; (80053e8 <HAL_RCC_OscConfig+0x340>)
 8005178:	400a      	ands	r2, r1
 800517a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d015      	beq.n	80051b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005184:	f7fe fe7e 	bl	8003e84 <HAL_GetTick>
 8005188:	0003      	movs	r3, r0
 800518a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800518c:	e009      	b.n	80051a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800518e:	f7fe fe79 	bl	8003e84 <HAL_GetTick>
 8005192:	0002      	movs	r2, r0
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b64      	cmp	r3, #100	; 0x64
 800519a:	d902      	bls.n	80051a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	f000 fb49 	bl	8005834 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051a2:	4b8f      	ldr	r3, [pc, #572]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	2380      	movs	r3, #128	; 0x80
 80051a8:	029b      	lsls	r3, r3, #10
 80051aa:	4013      	ands	r3, r2
 80051ac:	d0ef      	beq.n	800518e <HAL_RCC_OscConfig+0xe6>
 80051ae:	e015      	b.n	80051dc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b0:	f7fe fe68 	bl	8003e84 <HAL_GetTick>
 80051b4:	0003      	movs	r3, r0
 80051b6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80051b8:	e008      	b.n	80051cc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051ba:	f7fe fe63 	bl	8003e84 <HAL_GetTick>
 80051be:	0002      	movs	r2, r0
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	2b64      	cmp	r3, #100	; 0x64
 80051c6:	d901      	bls.n	80051cc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e333      	b.n	8005834 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80051cc:	4b84      	ldr	r3, [pc, #528]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	2380      	movs	r3, #128	; 0x80
 80051d2:	029b      	lsls	r3, r3, #10
 80051d4:	4013      	ands	r3, r2
 80051d6:	d1f0      	bne.n	80051ba <HAL_RCC_OscConfig+0x112>
 80051d8:	e000      	b.n	80051dc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051da:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2202      	movs	r2, #2
 80051e2:	4013      	ands	r3, r2
 80051e4:	d100      	bne.n	80051e8 <HAL_RCC_OscConfig+0x140>
 80051e6:	e098      	b.n	800531a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	2220      	movs	r2, #32
 80051f2:	4013      	ands	r3, r2
 80051f4:	d009      	beq.n	800520a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80051f6:	4b7a      	ldr	r3, [pc, #488]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	4b79      	ldr	r3, [pc, #484]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 80051fc:	2120      	movs	r1, #32
 80051fe:	430a      	orrs	r2, r1
 8005200:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	2220      	movs	r2, #32
 8005206:	4393      	bics	r3, r2
 8005208:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	2b04      	cmp	r3, #4
 800520e:	d005      	beq.n	800521c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	2b0c      	cmp	r3, #12
 8005214:	d13d      	bne.n	8005292 <HAL_RCC_OscConfig+0x1ea>
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d13a      	bne.n	8005292 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800521c:	4b70      	ldr	r3, [pc, #448]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2204      	movs	r2, #4
 8005222:	4013      	ands	r3, r2
 8005224:	d004      	beq.n	8005230 <HAL_RCC_OscConfig+0x188>
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e301      	b.n	8005834 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005230:	4b6b      	ldr	r3, [pc, #428]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	4a6d      	ldr	r2, [pc, #436]	; (80053ec <HAL_RCC_OscConfig+0x344>)
 8005236:	4013      	ands	r3, r2
 8005238:	0019      	movs	r1, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	021a      	lsls	r2, r3, #8
 8005240:	4b67      	ldr	r3, [pc, #412]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 8005242:	430a      	orrs	r2, r1
 8005244:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005246:	4b66      	ldr	r3, [pc, #408]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2209      	movs	r2, #9
 800524c:	4393      	bics	r3, r2
 800524e:	0019      	movs	r1, r3
 8005250:	4b63      	ldr	r3, [pc, #396]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 8005252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005254:	430a      	orrs	r2, r1
 8005256:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005258:	f000 fc20 	bl	8005a9c <HAL_RCC_GetSysClockFreq>
 800525c:	0001      	movs	r1, r0
 800525e:	4b60      	ldr	r3, [pc, #384]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	091b      	lsrs	r3, r3, #4
 8005264:	220f      	movs	r2, #15
 8005266:	4013      	ands	r3, r2
 8005268:	4a61      	ldr	r2, [pc, #388]	; (80053f0 <HAL_RCC_OscConfig+0x348>)
 800526a:	5cd3      	ldrb	r3, [r2, r3]
 800526c:	000a      	movs	r2, r1
 800526e:	40da      	lsrs	r2, r3
 8005270:	4b60      	ldr	r3, [pc, #384]	; (80053f4 <HAL_RCC_OscConfig+0x34c>)
 8005272:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8005274:	2513      	movs	r5, #19
 8005276:	197c      	adds	r4, r7, r5
 8005278:	2000      	movs	r0, #0
 800527a:	f7fe fdcd 	bl	8003e18 <HAL_InitTick>
 800527e:	0003      	movs	r3, r0
 8005280:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005282:	197b      	adds	r3, r7, r5
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d047      	beq.n	800531a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 800528a:	2313      	movs	r3, #19
 800528c:	18fb      	adds	r3, r7, r3
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	e2d0      	b.n	8005834 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	2b00      	cmp	r3, #0
 8005296:	d027      	beq.n	80052e8 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005298:	4b51      	ldr	r3, [pc, #324]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2209      	movs	r2, #9
 800529e:	4393      	bics	r3, r2
 80052a0:	0019      	movs	r1, r3
 80052a2:	4b4f      	ldr	r3, [pc, #316]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 80052a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a6:	430a      	orrs	r2, r1
 80052a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052aa:	f7fe fdeb 	bl	8003e84 <HAL_GetTick>
 80052ae:	0003      	movs	r3, r0
 80052b0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052b2:	e008      	b.n	80052c6 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052b4:	f7fe fde6 	bl	8003e84 <HAL_GetTick>
 80052b8:	0002      	movs	r2, r0
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e2b6      	b.n	8005834 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052c6:	4b46      	ldr	r3, [pc, #280]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2204      	movs	r2, #4
 80052cc:	4013      	ands	r3, r2
 80052ce:	d0f1      	beq.n	80052b4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052d0:	4b43      	ldr	r3, [pc, #268]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	4a45      	ldr	r2, [pc, #276]	; (80053ec <HAL_RCC_OscConfig+0x344>)
 80052d6:	4013      	ands	r3, r2
 80052d8:	0019      	movs	r1, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	021a      	lsls	r2, r3, #8
 80052e0:	4b3f      	ldr	r3, [pc, #252]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 80052e2:	430a      	orrs	r2, r1
 80052e4:	605a      	str	r2, [r3, #4]
 80052e6:	e018      	b.n	800531a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052e8:	4b3d      	ldr	r3, [pc, #244]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	4b3c      	ldr	r3, [pc, #240]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 80052ee:	2101      	movs	r1, #1
 80052f0:	438a      	bics	r2, r1
 80052f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f4:	f7fe fdc6 	bl	8003e84 <HAL_GetTick>
 80052f8:	0003      	movs	r3, r0
 80052fa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80052fc:	e008      	b.n	8005310 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052fe:	f7fe fdc1 	bl	8003e84 <HAL_GetTick>
 8005302:	0002      	movs	r2, r0
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	2b02      	cmp	r3, #2
 800530a:	d901      	bls.n	8005310 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e291      	b.n	8005834 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005310:	4b33      	ldr	r3, [pc, #204]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2204      	movs	r2, #4
 8005316:	4013      	ands	r3, r2
 8005318:	d1f1      	bne.n	80052fe <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2210      	movs	r2, #16
 8005320:	4013      	ands	r3, r2
 8005322:	d100      	bne.n	8005326 <HAL_RCC_OscConfig+0x27e>
 8005324:	e09f      	b.n	8005466 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d13f      	bne.n	80053ac <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800532c:	4b2c      	ldr	r3, [pc, #176]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	2380      	movs	r3, #128	; 0x80
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4013      	ands	r3, r2
 8005336:	d005      	beq.n	8005344 <HAL_RCC_OscConfig+0x29c>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e277      	b.n	8005834 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005344:	4b26      	ldr	r3, [pc, #152]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	4a2b      	ldr	r2, [pc, #172]	; (80053f8 <HAL_RCC_OscConfig+0x350>)
 800534a:	4013      	ands	r3, r2
 800534c:	0019      	movs	r1, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005352:	4b23      	ldr	r3, [pc, #140]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 8005354:	430a      	orrs	r2, r1
 8005356:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005358:	4b21      	ldr	r3, [pc, #132]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	021b      	lsls	r3, r3, #8
 800535e:	0a19      	lsrs	r1, r3, #8
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	061a      	lsls	r2, r3, #24
 8005366:	4b1e      	ldr	r3, [pc, #120]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 8005368:	430a      	orrs	r2, r1
 800536a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005370:	0b5b      	lsrs	r3, r3, #13
 8005372:	3301      	adds	r3, #1
 8005374:	2280      	movs	r2, #128	; 0x80
 8005376:	0212      	lsls	r2, r2, #8
 8005378:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800537a:	4b19      	ldr	r3, [pc, #100]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	091b      	lsrs	r3, r3, #4
 8005380:	210f      	movs	r1, #15
 8005382:	400b      	ands	r3, r1
 8005384:	491a      	ldr	r1, [pc, #104]	; (80053f0 <HAL_RCC_OscConfig+0x348>)
 8005386:	5ccb      	ldrb	r3, [r1, r3]
 8005388:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800538a:	4b1a      	ldr	r3, [pc, #104]	; (80053f4 <HAL_RCC_OscConfig+0x34c>)
 800538c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800538e:	2513      	movs	r5, #19
 8005390:	197c      	adds	r4, r7, r5
 8005392:	2000      	movs	r0, #0
 8005394:	f7fe fd40 	bl	8003e18 <HAL_InitTick>
 8005398:	0003      	movs	r3, r0
 800539a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800539c:	197b      	adds	r3, r7, r5
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d060      	beq.n	8005466 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 80053a4:	2313      	movs	r3, #19
 80053a6:	18fb      	adds	r3, r7, r3
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	e243      	b.n	8005834 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	69db      	ldr	r3, [r3, #28]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d03e      	beq.n	8005432 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80053b4:	4b0a      	ldr	r3, [pc, #40]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	4b09      	ldr	r3, [pc, #36]	; (80053e0 <HAL_RCC_OscConfig+0x338>)
 80053ba:	2180      	movs	r1, #128	; 0x80
 80053bc:	0049      	lsls	r1, r1, #1
 80053be:	430a      	orrs	r2, r1
 80053c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c2:	f7fe fd5f 	bl	8003e84 <HAL_GetTick>
 80053c6:	0003      	movs	r3, r0
 80053c8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80053ca:	e017      	b.n	80053fc <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053cc:	f7fe fd5a 	bl	8003e84 <HAL_GetTick>
 80053d0:	0002      	movs	r2, r0
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d910      	bls.n	80053fc <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e22a      	b.n	8005834 <HAL_RCC_OscConfig+0x78c>
 80053de:	46c0      	nop			; (mov r8, r8)
 80053e0:	40021000 	.word	0x40021000
 80053e4:	fffeffff 	.word	0xfffeffff
 80053e8:	fffbffff 	.word	0xfffbffff
 80053ec:	ffffe0ff 	.word	0xffffe0ff
 80053f0:	080090dc 	.word	0x080090dc
 80053f4:	20000004 	.word	0x20000004
 80053f8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80053fc:	4bc6      	ldr	r3, [pc, #792]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	2380      	movs	r3, #128	; 0x80
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4013      	ands	r3, r2
 8005406:	d0e1      	beq.n	80053cc <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005408:	4bc3      	ldr	r3, [pc, #780]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	4ac3      	ldr	r2, [pc, #780]	; (800571c <HAL_RCC_OscConfig+0x674>)
 800540e:	4013      	ands	r3, r2
 8005410:	0019      	movs	r1, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005416:	4bc0      	ldr	r3, [pc, #768]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 8005418:	430a      	orrs	r2, r1
 800541a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800541c:	4bbe      	ldr	r3, [pc, #760]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	021b      	lsls	r3, r3, #8
 8005422:	0a19      	lsrs	r1, r3, #8
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	061a      	lsls	r2, r3, #24
 800542a:	4bbb      	ldr	r3, [pc, #748]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 800542c:	430a      	orrs	r2, r1
 800542e:	605a      	str	r2, [r3, #4]
 8005430:	e019      	b.n	8005466 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005432:	4bb9      	ldr	r3, [pc, #740]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	4bb8      	ldr	r3, [pc, #736]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 8005438:	49b9      	ldr	r1, [pc, #740]	; (8005720 <HAL_RCC_OscConfig+0x678>)
 800543a:	400a      	ands	r2, r1
 800543c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800543e:	f7fe fd21 	bl	8003e84 <HAL_GetTick>
 8005442:	0003      	movs	r3, r0
 8005444:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005448:	f7fe fd1c 	bl	8003e84 <HAL_GetTick>
 800544c:	0002      	movs	r2, r0
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e1ec      	b.n	8005834 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800545a:	4baf      	ldr	r3, [pc, #700]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	2380      	movs	r3, #128	; 0x80
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4013      	ands	r3, r2
 8005464:	d1f0      	bne.n	8005448 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2208      	movs	r2, #8
 800546c:	4013      	ands	r3, r2
 800546e:	d036      	beq.n	80054de <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d019      	beq.n	80054ac <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005478:	4ba7      	ldr	r3, [pc, #668]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 800547a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800547c:	4ba6      	ldr	r3, [pc, #664]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 800547e:	2101      	movs	r1, #1
 8005480:	430a      	orrs	r2, r1
 8005482:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005484:	f7fe fcfe 	bl	8003e84 <HAL_GetTick>
 8005488:	0003      	movs	r3, r0
 800548a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800548c:	e008      	b.n	80054a0 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800548e:	f7fe fcf9 	bl	8003e84 <HAL_GetTick>
 8005492:	0002      	movs	r2, r0
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d901      	bls.n	80054a0 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e1c9      	b.n	8005834 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054a0:	4b9d      	ldr	r3, [pc, #628]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 80054a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054a4:	2202      	movs	r2, #2
 80054a6:	4013      	ands	r3, r2
 80054a8:	d0f1      	beq.n	800548e <HAL_RCC_OscConfig+0x3e6>
 80054aa:	e018      	b.n	80054de <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054ac:	4b9a      	ldr	r3, [pc, #616]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 80054ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054b0:	4b99      	ldr	r3, [pc, #612]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 80054b2:	2101      	movs	r1, #1
 80054b4:	438a      	bics	r2, r1
 80054b6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054b8:	f7fe fce4 	bl	8003e84 <HAL_GetTick>
 80054bc:	0003      	movs	r3, r0
 80054be:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80054c0:	e008      	b.n	80054d4 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054c2:	f7fe fcdf 	bl	8003e84 <HAL_GetTick>
 80054c6:	0002      	movs	r2, r0
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d901      	bls.n	80054d4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e1af      	b.n	8005834 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80054d4:	4b90      	ldr	r3, [pc, #576]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 80054d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054d8:	2202      	movs	r2, #2
 80054da:	4013      	ands	r3, r2
 80054dc:	d1f1      	bne.n	80054c2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2204      	movs	r2, #4
 80054e4:	4013      	ands	r3, r2
 80054e6:	d100      	bne.n	80054ea <HAL_RCC_OscConfig+0x442>
 80054e8:	e0af      	b.n	800564a <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054ea:	2323      	movs	r3, #35	; 0x23
 80054ec:	18fb      	adds	r3, r7, r3
 80054ee:	2200      	movs	r2, #0
 80054f0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054f2:	4b89      	ldr	r3, [pc, #548]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 80054f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054f6:	2380      	movs	r3, #128	; 0x80
 80054f8:	055b      	lsls	r3, r3, #21
 80054fa:	4013      	ands	r3, r2
 80054fc:	d10a      	bne.n	8005514 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054fe:	4b86      	ldr	r3, [pc, #536]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 8005500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005502:	4b85      	ldr	r3, [pc, #532]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 8005504:	2180      	movs	r1, #128	; 0x80
 8005506:	0549      	lsls	r1, r1, #21
 8005508:	430a      	orrs	r2, r1
 800550a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800550c:	2323      	movs	r3, #35	; 0x23
 800550e:	18fb      	adds	r3, r7, r3
 8005510:	2201      	movs	r2, #1
 8005512:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005514:	4b83      	ldr	r3, [pc, #524]	; (8005724 <HAL_RCC_OscConfig+0x67c>)
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	2380      	movs	r3, #128	; 0x80
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	4013      	ands	r3, r2
 800551e:	d11a      	bne.n	8005556 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005520:	4b80      	ldr	r3, [pc, #512]	; (8005724 <HAL_RCC_OscConfig+0x67c>)
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	4b7f      	ldr	r3, [pc, #508]	; (8005724 <HAL_RCC_OscConfig+0x67c>)
 8005526:	2180      	movs	r1, #128	; 0x80
 8005528:	0049      	lsls	r1, r1, #1
 800552a:	430a      	orrs	r2, r1
 800552c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800552e:	f7fe fca9 	bl	8003e84 <HAL_GetTick>
 8005532:	0003      	movs	r3, r0
 8005534:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005538:	f7fe fca4 	bl	8003e84 <HAL_GetTick>
 800553c:	0002      	movs	r2, r0
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b64      	cmp	r3, #100	; 0x64
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e174      	b.n	8005834 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800554a:	4b76      	ldr	r3, [pc, #472]	; (8005724 <HAL_RCC_OscConfig+0x67c>)
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	2380      	movs	r3, #128	; 0x80
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	4013      	ands	r3, r2
 8005554:	d0f0      	beq.n	8005538 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	689a      	ldr	r2, [r3, #8]
 800555a:	2380      	movs	r3, #128	; 0x80
 800555c:	005b      	lsls	r3, r3, #1
 800555e:	429a      	cmp	r2, r3
 8005560:	d107      	bne.n	8005572 <HAL_RCC_OscConfig+0x4ca>
 8005562:	4b6d      	ldr	r3, [pc, #436]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 8005564:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005566:	4b6c      	ldr	r3, [pc, #432]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 8005568:	2180      	movs	r1, #128	; 0x80
 800556a:	0049      	lsls	r1, r1, #1
 800556c:	430a      	orrs	r2, r1
 800556e:	651a      	str	r2, [r3, #80]	; 0x50
 8005570:	e031      	b.n	80055d6 <HAL_RCC_OscConfig+0x52e>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10c      	bne.n	8005594 <HAL_RCC_OscConfig+0x4ec>
 800557a:	4b67      	ldr	r3, [pc, #412]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 800557c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800557e:	4b66      	ldr	r3, [pc, #408]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 8005580:	4967      	ldr	r1, [pc, #412]	; (8005720 <HAL_RCC_OscConfig+0x678>)
 8005582:	400a      	ands	r2, r1
 8005584:	651a      	str	r2, [r3, #80]	; 0x50
 8005586:	4b64      	ldr	r3, [pc, #400]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 8005588:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800558a:	4b63      	ldr	r3, [pc, #396]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 800558c:	4966      	ldr	r1, [pc, #408]	; (8005728 <HAL_RCC_OscConfig+0x680>)
 800558e:	400a      	ands	r2, r1
 8005590:	651a      	str	r2, [r3, #80]	; 0x50
 8005592:	e020      	b.n	80055d6 <HAL_RCC_OscConfig+0x52e>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	23a0      	movs	r3, #160	; 0xa0
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	429a      	cmp	r2, r3
 800559e:	d10e      	bne.n	80055be <HAL_RCC_OscConfig+0x516>
 80055a0:	4b5d      	ldr	r3, [pc, #372]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 80055a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055a4:	4b5c      	ldr	r3, [pc, #368]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 80055a6:	2180      	movs	r1, #128	; 0x80
 80055a8:	00c9      	lsls	r1, r1, #3
 80055aa:	430a      	orrs	r2, r1
 80055ac:	651a      	str	r2, [r3, #80]	; 0x50
 80055ae:	4b5a      	ldr	r3, [pc, #360]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 80055b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055b2:	4b59      	ldr	r3, [pc, #356]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 80055b4:	2180      	movs	r1, #128	; 0x80
 80055b6:	0049      	lsls	r1, r1, #1
 80055b8:	430a      	orrs	r2, r1
 80055ba:	651a      	str	r2, [r3, #80]	; 0x50
 80055bc:	e00b      	b.n	80055d6 <HAL_RCC_OscConfig+0x52e>
 80055be:	4b56      	ldr	r3, [pc, #344]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 80055c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055c2:	4b55      	ldr	r3, [pc, #340]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 80055c4:	4956      	ldr	r1, [pc, #344]	; (8005720 <HAL_RCC_OscConfig+0x678>)
 80055c6:	400a      	ands	r2, r1
 80055c8:	651a      	str	r2, [r3, #80]	; 0x50
 80055ca:	4b53      	ldr	r3, [pc, #332]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 80055cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055ce:	4b52      	ldr	r3, [pc, #328]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 80055d0:	4955      	ldr	r1, [pc, #340]	; (8005728 <HAL_RCC_OscConfig+0x680>)
 80055d2:	400a      	ands	r2, r1
 80055d4:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d015      	beq.n	800560a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055de:	f7fe fc51 	bl	8003e84 <HAL_GetTick>
 80055e2:	0003      	movs	r3, r0
 80055e4:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055e6:	e009      	b.n	80055fc <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055e8:	f7fe fc4c 	bl	8003e84 <HAL_GetTick>
 80055ec:	0002      	movs	r2, r0
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	4a4e      	ldr	r2, [pc, #312]	; (800572c <HAL_RCC_OscConfig+0x684>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d901      	bls.n	80055fc <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e11b      	b.n	8005834 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055fc:	4b46      	ldr	r3, [pc, #280]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 80055fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005600:	2380      	movs	r3, #128	; 0x80
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4013      	ands	r3, r2
 8005606:	d0ef      	beq.n	80055e8 <HAL_RCC_OscConfig+0x540>
 8005608:	e014      	b.n	8005634 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800560a:	f7fe fc3b 	bl	8003e84 <HAL_GetTick>
 800560e:	0003      	movs	r3, r0
 8005610:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005612:	e009      	b.n	8005628 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005614:	f7fe fc36 	bl	8003e84 <HAL_GetTick>
 8005618:	0002      	movs	r2, r0
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	4a43      	ldr	r2, [pc, #268]	; (800572c <HAL_RCC_OscConfig+0x684>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d901      	bls.n	8005628 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e105      	b.n	8005834 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005628:	4b3b      	ldr	r3, [pc, #236]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 800562a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800562c:	2380      	movs	r3, #128	; 0x80
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4013      	ands	r3, r2
 8005632:	d1ef      	bne.n	8005614 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005634:	2323      	movs	r3, #35	; 0x23
 8005636:	18fb      	adds	r3, r7, r3
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d105      	bne.n	800564a <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800563e:	4b36      	ldr	r3, [pc, #216]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 8005640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005642:	4b35      	ldr	r3, [pc, #212]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 8005644:	493a      	ldr	r1, [pc, #232]	; (8005730 <HAL_RCC_OscConfig+0x688>)
 8005646:	400a      	ands	r2, r1
 8005648:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2220      	movs	r2, #32
 8005650:	4013      	ands	r3, r2
 8005652:	d049      	beq.n	80056e8 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d026      	beq.n	80056aa <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800565c:	4b2e      	ldr	r3, [pc, #184]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 800565e:	689a      	ldr	r2, [r3, #8]
 8005660:	4b2d      	ldr	r3, [pc, #180]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 8005662:	2101      	movs	r1, #1
 8005664:	430a      	orrs	r2, r1
 8005666:	609a      	str	r2, [r3, #8]
 8005668:	4b2b      	ldr	r3, [pc, #172]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 800566a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800566c:	4b2a      	ldr	r3, [pc, #168]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 800566e:	2101      	movs	r1, #1
 8005670:	430a      	orrs	r2, r1
 8005672:	635a      	str	r2, [r3, #52]	; 0x34
 8005674:	4b2f      	ldr	r3, [pc, #188]	; (8005734 <HAL_RCC_OscConfig+0x68c>)
 8005676:	6a1a      	ldr	r2, [r3, #32]
 8005678:	4b2e      	ldr	r3, [pc, #184]	; (8005734 <HAL_RCC_OscConfig+0x68c>)
 800567a:	2180      	movs	r1, #128	; 0x80
 800567c:	0189      	lsls	r1, r1, #6
 800567e:	430a      	orrs	r2, r1
 8005680:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005682:	f7fe fbff 	bl	8003e84 <HAL_GetTick>
 8005686:	0003      	movs	r3, r0
 8005688:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800568a:	e008      	b.n	800569e <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800568c:	f7fe fbfa 	bl	8003e84 <HAL_GetTick>
 8005690:	0002      	movs	r2, r0
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e0ca      	b.n	8005834 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800569e:	4b1e      	ldr	r3, [pc, #120]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	2202      	movs	r2, #2
 80056a4:	4013      	ands	r3, r2
 80056a6:	d0f1      	beq.n	800568c <HAL_RCC_OscConfig+0x5e4>
 80056a8:	e01e      	b.n	80056e8 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80056aa:	4b1b      	ldr	r3, [pc, #108]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 80056ac:	689a      	ldr	r2, [r3, #8]
 80056ae:	4b1a      	ldr	r3, [pc, #104]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 80056b0:	2101      	movs	r1, #1
 80056b2:	438a      	bics	r2, r1
 80056b4:	609a      	str	r2, [r3, #8]
 80056b6:	4b1f      	ldr	r3, [pc, #124]	; (8005734 <HAL_RCC_OscConfig+0x68c>)
 80056b8:	6a1a      	ldr	r2, [r3, #32]
 80056ba:	4b1e      	ldr	r3, [pc, #120]	; (8005734 <HAL_RCC_OscConfig+0x68c>)
 80056bc:	491e      	ldr	r1, [pc, #120]	; (8005738 <HAL_RCC_OscConfig+0x690>)
 80056be:	400a      	ands	r2, r1
 80056c0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056c2:	f7fe fbdf 	bl	8003e84 <HAL_GetTick>
 80056c6:	0003      	movs	r3, r0
 80056c8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056cc:	f7fe fbda 	bl	8003e84 <HAL_GetTick>
 80056d0:	0002      	movs	r2, r0
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e0aa      	b.n	8005834 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80056de:	4b0e      	ldr	r3, [pc, #56]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	2202      	movs	r2, #2
 80056e4:	4013      	ands	r3, r2
 80056e6:	d1f1      	bne.n	80056cc <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d100      	bne.n	80056f2 <HAL_RCC_OscConfig+0x64a>
 80056f0:	e09f      	b.n	8005832 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	2b0c      	cmp	r3, #12
 80056f6:	d100      	bne.n	80056fa <HAL_RCC_OscConfig+0x652>
 80056f8:	e078      	b.n	80057ec <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d159      	bne.n	80057b6 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005702:	4b05      	ldr	r3, [pc, #20]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	4b04      	ldr	r3, [pc, #16]	; (8005718 <HAL_RCC_OscConfig+0x670>)
 8005708:	490c      	ldr	r1, [pc, #48]	; (800573c <HAL_RCC_OscConfig+0x694>)
 800570a:	400a      	ands	r2, r1
 800570c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800570e:	f7fe fbb9 	bl	8003e84 <HAL_GetTick>
 8005712:	0003      	movs	r3, r0
 8005714:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005716:	e01c      	b.n	8005752 <HAL_RCC_OscConfig+0x6aa>
 8005718:	40021000 	.word	0x40021000
 800571c:	ffff1fff 	.word	0xffff1fff
 8005720:	fffffeff 	.word	0xfffffeff
 8005724:	40007000 	.word	0x40007000
 8005728:	fffffbff 	.word	0xfffffbff
 800572c:	00001388 	.word	0x00001388
 8005730:	efffffff 	.word	0xefffffff
 8005734:	40010000 	.word	0x40010000
 8005738:	ffffdfff 	.word	0xffffdfff
 800573c:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005740:	f7fe fba0 	bl	8003e84 <HAL_GetTick>
 8005744:	0002      	movs	r2, r0
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b02      	cmp	r3, #2
 800574c:	d901      	bls.n	8005752 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e070      	b.n	8005834 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005752:	4b3a      	ldr	r3, [pc, #232]	; (800583c <HAL_RCC_OscConfig+0x794>)
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	2380      	movs	r3, #128	; 0x80
 8005758:	049b      	lsls	r3, r3, #18
 800575a:	4013      	ands	r3, r2
 800575c:	d1f0      	bne.n	8005740 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800575e:	4b37      	ldr	r3, [pc, #220]	; (800583c <HAL_RCC_OscConfig+0x794>)
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	4a37      	ldr	r2, [pc, #220]	; (8005840 <HAL_RCC_OscConfig+0x798>)
 8005764:	4013      	ands	r3, r2
 8005766:	0019      	movs	r1, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005770:	431a      	orrs	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005776:	431a      	orrs	r2, r3
 8005778:	4b30      	ldr	r3, [pc, #192]	; (800583c <HAL_RCC_OscConfig+0x794>)
 800577a:	430a      	orrs	r2, r1
 800577c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800577e:	4b2f      	ldr	r3, [pc, #188]	; (800583c <HAL_RCC_OscConfig+0x794>)
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	4b2e      	ldr	r3, [pc, #184]	; (800583c <HAL_RCC_OscConfig+0x794>)
 8005784:	2180      	movs	r1, #128	; 0x80
 8005786:	0449      	lsls	r1, r1, #17
 8005788:	430a      	orrs	r2, r1
 800578a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800578c:	f7fe fb7a 	bl	8003e84 <HAL_GetTick>
 8005790:	0003      	movs	r3, r0
 8005792:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005794:	e008      	b.n	80057a8 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005796:	f7fe fb75 	bl	8003e84 <HAL_GetTick>
 800579a:	0002      	movs	r2, r0
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d901      	bls.n	80057a8 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e045      	b.n	8005834 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80057a8:	4b24      	ldr	r3, [pc, #144]	; (800583c <HAL_RCC_OscConfig+0x794>)
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	2380      	movs	r3, #128	; 0x80
 80057ae:	049b      	lsls	r3, r3, #18
 80057b0:	4013      	ands	r3, r2
 80057b2:	d0f0      	beq.n	8005796 <HAL_RCC_OscConfig+0x6ee>
 80057b4:	e03d      	b.n	8005832 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057b6:	4b21      	ldr	r3, [pc, #132]	; (800583c <HAL_RCC_OscConfig+0x794>)
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	4b20      	ldr	r3, [pc, #128]	; (800583c <HAL_RCC_OscConfig+0x794>)
 80057bc:	4921      	ldr	r1, [pc, #132]	; (8005844 <HAL_RCC_OscConfig+0x79c>)
 80057be:	400a      	ands	r2, r1
 80057c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c2:	f7fe fb5f 	bl	8003e84 <HAL_GetTick>
 80057c6:	0003      	movs	r3, r0
 80057c8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80057ca:	e008      	b.n	80057de <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057cc:	f7fe fb5a 	bl	8003e84 <HAL_GetTick>
 80057d0:	0002      	movs	r2, r0
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d901      	bls.n	80057de <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e02a      	b.n	8005834 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80057de:	4b17      	ldr	r3, [pc, #92]	; (800583c <HAL_RCC_OscConfig+0x794>)
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	2380      	movs	r3, #128	; 0x80
 80057e4:	049b      	lsls	r3, r3, #18
 80057e6:	4013      	ands	r3, r2
 80057e8:	d1f0      	bne.n	80057cc <HAL_RCC_OscConfig+0x724>
 80057ea:	e022      	b.n	8005832 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d101      	bne.n	80057f8 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e01d      	b.n	8005834 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80057f8:	4b10      	ldr	r3, [pc, #64]	; (800583c <HAL_RCC_OscConfig+0x794>)
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057fe:	69ba      	ldr	r2, [r7, #24]
 8005800:	2380      	movs	r3, #128	; 0x80
 8005802:	025b      	lsls	r3, r3, #9
 8005804:	401a      	ands	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580a:	429a      	cmp	r2, r3
 800580c:	d10f      	bne.n	800582e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	23f0      	movs	r3, #240	; 0xf0
 8005812:	039b      	lsls	r3, r3, #14
 8005814:	401a      	ands	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800581a:	429a      	cmp	r2, r3
 800581c:	d107      	bne.n	800582e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	23c0      	movs	r3, #192	; 0xc0
 8005822:	041b      	lsls	r3, r3, #16
 8005824:	401a      	ands	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800582a:	429a      	cmp	r2, r3
 800582c:	d001      	beq.n	8005832 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e000      	b.n	8005834 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	0018      	movs	r0, r3
 8005836:	46bd      	mov	sp, r7
 8005838:	b00a      	add	sp, #40	; 0x28
 800583a:	bdb0      	pop	{r4, r5, r7, pc}
 800583c:	40021000 	.word	0x40021000
 8005840:	ff02ffff 	.word	0xff02ffff
 8005844:	feffffff 	.word	0xfeffffff

08005848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005848:	b5b0      	push	{r4, r5, r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e10d      	b.n	8005a78 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800585c:	4b88      	ldr	r3, [pc, #544]	; (8005a80 <HAL_RCC_ClockConfig+0x238>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2201      	movs	r2, #1
 8005862:	4013      	ands	r3, r2
 8005864:	683a      	ldr	r2, [r7, #0]
 8005866:	429a      	cmp	r2, r3
 8005868:	d911      	bls.n	800588e <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800586a:	4b85      	ldr	r3, [pc, #532]	; (8005a80 <HAL_RCC_ClockConfig+0x238>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2201      	movs	r2, #1
 8005870:	4393      	bics	r3, r2
 8005872:	0019      	movs	r1, r3
 8005874:	4b82      	ldr	r3, [pc, #520]	; (8005a80 <HAL_RCC_ClockConfig+0x238>)
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	430a      	orrs	r2, r1
 800587a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800587c:	4b80      	ldr	r3, [pc, #512]	; (8005a80 <HAL_RCC_ClockConfig+0x238>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2201      	movs	r2, #1
 8005882:	4013      	ands	r3, r2
 8005884:	683a      	ldr	r2, [r7, #0]
 8005886:	429a      	cmp	r2, r3
 8005888:	d001      	beq.n	800588e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e0f4      	b.n	8005a78 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2202      	movs	r2, #2
 8005894:	4013      	ands	r3, r2
 8005896:	d009      	beq.n	80058ac <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005898:	4b7a      	ldr	r3, [pc, #488]	; (8005a84 <HAL_RCC_ClockConfig+0x23c>)
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	22f0      	movs	r2, #240	; 0xf0
 800589e:	4393      	bics	r3, r2
 80058a0:	0019      	movs	r1, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	689a      	ldr	r2, [r3, #8]
 80058a6:	4b77      	ldr	r3, [pc, #476]	; (8005a84 <HAL_RCC_ClockConfig+0x23c>)
 80058a8:	430a      	orrs	r2, r1
 80058aa:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2201      	movs	r2, #1
 80058b2:	4013      	ands	r3, r2
 80058b4:	d100      	bne.n	80058b8 <HAL_RCC_ClockConfig+0x70>
 80058b6:	e089      	b.n	80059cc <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d107      	bne.n	80058d0 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058c0:	4b70      	ldr	r3, [pc, #448]	; (8005a84 <HAL_RCC_ClockConfig+0x23c>)
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	2380      	movs	r3, #128	; 0x80
 80058c6:	029b      	lsls	r3, r3, #10
 80058c8:	4013      	ands	r3, r2
 80058ca:	d120      	bne.n	800590e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e0d3      	b.n	8005a78 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	2b03      	cmp	r3, #3
 80058d6:	d107      	bne.n	80058e8 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058d8:	4b6a      	ldr	r3, [pc, #424]	; (8005a84 <HAL_RCC_ClockConfig+0x23c>)
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	2380      	movs	r3, #128	; 0x80
 80058de:	049b      	lsls	r3, r3, #18
 80058e0:	4013      	ands	r3, r2
 80058e2:	d114      	bne.n	800590e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e0c7      	b.n	8005a78 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d106      	bne.n	80058fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058f0:	4b64      	ldr	r3, [pc, #400]	; (8005a84 <HAL_RCC_ClockConfig+0x23c>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2204      	movs	r2, #4
 80058f6:	4013      	ands	r3, r2
 80058f8:	d109      	bne.n	800590e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e0bc      	b.n	8005a78 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80058fe:	4b61      	ldr	r3, [pc, #388]	; (8005a84 <HAL_RCC_ClockConfig+0x23c>)
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	2380      	movs	r3, #128	; 0x80
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4013      	ands	r3, r2
 8005908:	d101      	bne.n	800590e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e0b4      	b.n	8005a78 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800590e:	4b5d      	ldr	r3, [pc, #372]	; (8005a84 <HAL_RCC_ClockConfig+0x23c>)
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	2203      	movs	r2, #3
 8005914:	4393      	bics	r3, r2
 8005916:	0019      	movs	r1, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	4b59      	ldr	r3, [pc, #356]	; (8005a84 <HAL_RCC_ClockConfig+0x23c>)
 800591e:	430a      	orrs	r2, r1
 8005920:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005922:	f7fe faaf 	bl	8003e84 <HAL_GetTick>
 8005926:	0003      	movs	r3, r0
 8005928:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	2b02      	cmp	r3, #2
 8005930:	d111      	bne.n	8005956 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005932:	e009      	b.n	8005948 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005934:	f7fe faa6 	bl	8003e84 <HAL_GetTick>
 8005938:	0002      	movs	r2, r0
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	4a52      	ldr	r2, [pc, #328]	; (8005a88 <HAL_RCC_ClockConfig+0x240>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d901      	bls.n	8005948 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e097      	b.n	8005a78 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005948:	4b4e      	ldr	r3, [pc, #312]	; (8005a84 <HAL_RCC_ClockConfig+0x23c>)
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	220c      	movs	r2, #12
 800594e:	4013      	ands	r3, r2
 8005950:	2b08      	cmp	r3, #8
 8005952:	d1ef      	bne.n	8005934 <HAL_RCC_ClockConfig+0xec>
 8005954:	e03a      	b.n	80059cc <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	2b03      	cmp	r3, #3
 800595c:	d111      	bne.n	8005982 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800595e:	e009      	b.n	8005974 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005960:	f7fe fa90 	bl	8003e84 <HAL_GetTick>
 8005964:	0002      	movs	r2, r0
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	4a47      	ldr	r2, [pc, #284]	; (8005a88 <HAL_RCC_ClockConfig+0x240>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d901      	bls.n	8005974 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e081      	b.n	8005a78 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005974:	4b43      	ldr	r3, [pc, #268]	; (8005a84 <HAL_RCC_ClockConfig+0x23c>)
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	220c      	movs	r2, #12
 800597a:	4013      	ands	r3, r2
 800597c:	2b0c      	cmp	r3, #12
 800597e:	d1ef      	bne.n	8005960 <HAL_RCC_ClockConfig+0x118>
 8005980:	e024      	b.n	80059cc <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d11b      	bne.n	80059c2 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800598a:	e009      	b.n	80059a0 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800598c:	f7fe fa7a 	bl	8003e84 <HAL_GetTick>
 8005990:	0002      	movs	r2, r0
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	4a3c      	ldr	r2, [pc, #240]	; (8005a88 <HAL_RCC_ClockConfig+0x240>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d901      	bls.n	80059a0 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e06b      	b.n	8005a78 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80059a0:	4b38      	ldr	r3, [pc, #224]	; (8005a84 <HAL_RCC_ClockConfig+0x23c>)
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	220c      	movs	r2, #12
 80059a6:	4013      	ands	r3, r2
 80059a8:	2b04      	cmp	r3, #4
 80059aa:	d1ef      	bne.n	800598c <HAL_RCC_ClockConfig+0x144>
 80059ac:	e00e      	b.n	80059cc <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059ae:	f7fe fa69 	bl	8003e84 <HAL_GetTick>
 80059b2:	0002      	movs	r2, r0
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	4a33      	ldr	r2, [pc, #204]	; (8005a88 <HAL_RCC_ClockConfig+0x240>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d901      	bls.n	80059c2 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e05a      	b.n	8005a78 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80059c2:	4b30      	ldr	r3, [pc, #192]	; (8005a84 <HAL_RCC_ClockConfig+0x23c>)
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	220c      	movs	r2, #12
 80059c8:	4013      	ands	r3, r2
 80059ca:	d1f0      	bne.n	80059ae <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059cc:	4b2c      	ldr	r3, [pc, #176]	; (8005a80 <HAL_RCC_ClockConfig+0x238>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2201      	movs	r2, #1
 80059d2:	4013      	ands	r3, r2
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d211      	bcs.n	80059fe <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059da:	4b29      	ldr	r3, [pc, #164]	; (8005a80 <HAL_RCC_ClockConfig+0x238>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2201      	movs	r2, #1
 80059e0:	4393      	bics	r3, r2
 80059e2:	0019      	movs	r1, r3
 80059e4:	4b26      	ldr	r3, [pc, #152]	; (8005a80 <HAL_RCC_ClockConfig+0x238>)
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	430a      	orrs	r2, r1
 80059ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ec:	4b24      	ldr	r3, [pc, #144]	; (8005a80 <HAL_RCC_ClockConfig+0x238>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2201      	movs	r2, #1
 80059f2:	4013      	ands	r3, r2
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d001      	beq.n	80059fe <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e03c      	b.n	8005a78 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2204      	movs	r2, #4
 8005a04:	4013      	ands	r3, r2
 8005a06:	d009      	beq.n	8005a1c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a08:	4b1e      	ldr	r3, [pc, #120]	; (8005a84 <HAL_RCC_ClockConfig+0x23c>)
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	4a1f      	ldr	r2, [pc, #124]	; (8005a8c <HAL_RCC_ClockConfig+0x244>)
 8005a0e:	4013      	ands	r3, r2
 8005a10:	0019      	movs	r1, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68da      	ldr	r2, [r3, #12]
 8005a16:	4b1b      	ldr	r3, [pc, #108]	; (8005a84 <HAL_RCC_ClockConfig+0x23c>)
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2208      	movs	r2, #8
 8005a22:	4013      	ands	r3, r2
 8005a24:	d00a      	beq.n	8005a3c <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005a26:	4b17      	ldr	r3, [pc, #92]	; (8005a84 <HAL_RCC_ClockConfig+0x23c>)
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	4a19      	ldr	r2, [pc, #100]	; (8005a90 <HAL_RCC_ClockConfig+0x248>)
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	0019      	movs	r1, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	00da      	lsls	r2, r3, #3
 8005a36:	4b13      	ldr	r3, [pc, #76]	; (8005a84 <HAL_RCC_ClockConfig+0x23c>)
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a3c:	f000 f82e 	bl	8005a9c <HAL_RCC_GetSysClockFreq>
 8005a40:	0001      	movs	r1, r0
 8005a42:	4b10      	ldr	r3, [pc, #64]	; (8005a84 <HAL_RCC_ClockConfig+0x23c>)
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	091b      	lsrs	r3, r3, #4
 8005a48:	220f      	movs	r2, #15
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	4a11      	ldr	r2, [pc, #68]	; (8005a94 <HAL_RCC_ClockConfig+0x24c>)
 8005a4e:	5cd3      	ldrb	r3, [r2, r3]
 8005a50:	000a      	movs	r2, r1
 8005a52:	40da      	lsrs	r2, r3
 8005a54:	4b10      	ldr	r3, [pc, #64]	; (8005a98 <HAL_RCC_ClockConfig+0x250>)
 8005a56:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8005a58:	250b      	movs	r5, #11
 8005a5a:	197c      	adds	r4, r7, r5
 8005a5c:	2000      	movs	r0, #0
 8005a5e:	f7fe f9db 	bl	8003e18 <HAL_InitTick>
 8005a62:	0003      	movs	r3, r0
 8005a64:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005a66:	197b      	adds	r3, r7, r5
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8005a6e:	230b      	movs	r3, #11
 8005a70:	18fb      	adds	r3, r7, r3
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	e000      	b.n	8005a78 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	0018      	movs	r0, r3
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	b004      	add	sp, #16
 8005a7e:	bdb0      	pop	{r4, r5, r7, pc}
 8005a80:	40022000 	.word	0x40022000
 8005a84:	40021000 	.word	0x40021000
 8005a88:	00001388 	.word	0x00001388
 8005a8c:	fffff8ff 	.word	0xfffff8ff
 8005a90:	ffffc7ff 	.word	0xffffc7ff
 8005a94:	080090dc 	.word	0x080090dc
 8005a98:	20000004 	.word	0x20000004

08005a9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b086      	sub	sp, #24
 8005aa0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005aa2:	4b3b      	ldr	r3, [pc, #236]	; (8005b90 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	220c      	movs	r2, #12
 8005aac:	4013      	ands	r3, r2
 8005aae:	2b08      	cmp	r3, #8
 8005ab0:	d00e      	beq.n	8005ad0 <HAL_RCC_GetSysClockFreq+0x34>
 8005ab2:	2b0c      	cmp	r3, #12
 8005ab4:	d00f      	beq.n	8005ad6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005ab6:	2b04      	cmp	r3, #4
 8005ab8:	d157      	bne.n	8005b6a <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005aba:	4b35      	ldr	r3, [pc, #212]	; (8005b90 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2210      	movs	r2, #16
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	d002      	beq.n	8005aca <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005ac4:	4b33      	ldr	r3, [pc, #204]	; (8005b94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ac6:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005ac8:	e05d      	b.n	8005b86 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8005aca:	4b33      	ldr	r3, [pc, #204]	; (8005b98 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005acc:	613b      	str	r3, [r7, #16]
      break;
 8005ace:	e05a      	b.n	8005b86 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ad0:	4b32      	ldr	r3, [pc, #200]	; (8005b9c <HAL_RCC_GetSysClockFreq+0x100>)
 8005ad2:	613b      	str	r3, [r7, #16]
      break;
 8005ad4:	e057      	b.n	8005b86 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	0c9b      	lsrs	r3, r3, #18
 8005ada:	220f      	movs	r2, #15
 8005adc:	4013      	ands	r3, r2
 8005ade:	4a30      	ldr	r2, [pc, #192]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0x104>)
 8005ae0:	5cd3      	ldrb	r3, [r2, r3]
 8005ae2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	0d9b      	lsrs	r3, r3, #22
 8005ae8:	2203      	movs	r2, #3
 8005aea:	4013      	ands	r3, r2
 8005aec:	3301      	adds	r3, #1
 8005aee:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005af0:	4b27      	ldr	r3, [pc, #156]	; (8005b90 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005af2:	68da      	ldr	r2, [r3, #12]
 8005af4:	2380      	movs	r3, #128	; 0x80
 8005af6:	025b      	lsls	r3, r3, #9
 8005af8:	4013      	ands	r3, r2
 8005afa:	d00f      	beq.n	8005b1c <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8005afc:	68b9      	ldr	r1, [r7, #8]
 8005afe:	000a      	movs	r2, r1
 8005b00:	0152      	lsls	r2, r2, #5
 8005b02:	1a52      	subs	r2, r2, r1
 8005b04:	0193      	lsls	r3, r2, #6
 8005b06:	1a9b      	subs	r3, r3, r2
 8005b08:	00db      	lsls	r3, r3, #3
 8005b0a:	185b      	adds	r3, r3, r1
 8005b0c:	025b      	lsls	r3, r3, #9
 8005b0e:	6879      	ldr	r1, [r7, #4]
 8005b10:	0018      	movs	r0, r3
 8005b12:	f7fa faf9 	bl	8000108 <__udivsi3>
 8005b16:	0003      	movs	r3, r0
 8005b18:	617b      	str	r3, [r7, #20]
 8005b1a:	e023      	b.n	8005b64 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005b1c:	4b1c      	ldr	r3, [pc, #112]	; (8005b90 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2210      	movs	r2, #16
 8005b22:	4013      	ands	r3, r2
 8005b24:	d00f      	beq.n	8005b46 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8005b26:	68b9      	ldr	r1, [r7, #8]
 8005b28:	000a      	movs	r2, r1
 8005b2a:	0152      	lsls	r2, r2, #5
 8005b2c:	1a52      	subs	r2, r2, r1
 8005b2e:	0193      	lsls	r3, r2, #6
 8005b30:	1a9b      	subs	r3, r3, r2
 8005b32:	00db      	lsls	r3, r3, #3
 8005b34:	185b      	adds	r3, r3, r1
 8005b36:	021b      	lsls	r3, r3, #8
 8005b38:	6879      	ldr	r1, [r7, #4]
 8005b3a:	0018      	movs	r0, r3
 8005b3c:	f7fa fae4 	bl	8000108 <__udivsi3>
 8005b40:	0003      	movs	r3, r0
 8005b42:	617b      	str	r3, [r7, #20]
 8005b44:	e00e      	b.n	8005b64 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8005b46:	68b9      	ldr	r1, [r7, #8]
 8005b48:	000a      	movs	r2, r1
 8005b4a:	0152      	lsls	r2, r2, #5
 8005b4c:	1a52      	subs	r2, r2, r1
 8005b4e:	0193      	lsls	r3, r2, #6
 8005b50:	1a9b      	subs	r3, r3, r2
 8005b52:	00db      	lsls	r3, r3, #3
 8005b54:	185b      	adds	r3, r3, r1
 8005b56:	029b      	lsls	r3, r3, #10
 8005b58:	6879      	ldr	r1, [r7, #4]
 8005b5a:	0018      	movs	r0, r3
 8005b5c:	f7fa fad4 	bl	8000108 <__udivsi3>
 8005b60:	0003      	movs	r3, r0
 8005b62:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	613b      	str	r3, [r7, #16]
      break;
 8005b68:	e00d      	b.n	8005b86 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005b6a:	4b09      	ldr	r3, [pc, #36]	; (8005b90 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	0b5b      	lsrs	r3, r3, #13
 8005b70:	2207      	movs	r2, #7
 8005b72:	4013      	ands	r3, r2
 8005b74:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	2280      	movs	r2, #128	; 0x80
 8005b7c:	0212      	lsls	r2, r2, #8
 8005b7e:	409a      	lsls	r2, r3
 8005b80:	0013      	movs	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]
      break;
 8005b84:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005b86:	693b      	ldr	r3, [r7, #16]
}
 8005b88:	0018      	movs	r0, r3
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	b006      	add	sp, #24
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	40021000 	.word	0x40021000
 8005b94:	003d0900 	.word	0x003d0900
 8005b98:	00f42400 	.word	0x00f42400
 8005b9c:	007a1200 	.word	0x007a1200
 8005ba0:	080090ec 	.word	0x080090ec

08005ba4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	d106      	bne.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	2380      	movs	r3, #128	; 0x80
 8005bbc:	011b      	lsls	r3, r3, #4
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	d100      	bne.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8005bc2:	e0dd      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8005bc4:	2317      	movs	r3, #23
 8005bc6:	18fb      	adds	r3, r7, r3
 8005bc8:	2200      	movs	r2, #0
 8005bca:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bcc:	4ba4      	ldr	r3, [pc, #656]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005bce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bd0:	2380      	movs	r3, #128	; 0x80
 8005bd2:	055b      	lsls	r3, r3, #21
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	d10a      	bne.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bd8:	4ba1      	ldr	r3, [pc, #644]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005bda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bdc:	4ba0      	ldr	r3, [pc, #640]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005bde:	2180      	movs	r1, #128	; 0x80
 8005be0:	0549      	lsls	r1, r1, #21
 8005be2:	430a      	orrs	r2, r1
 8005be4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005be6:	2317      	movs	r3, #23
 8005be8:	18fb      	adds	r3, r7, r3
 8005bea:	2201      	movs	r2, #1
 8005bec:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bee:	4b9d      	ldr	r3, [pc, #628]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	2380      	movs	r3, #128	; 0x80
 8005bf4:	005b      	lsls	r3, r3, #1
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	d11a      	bne.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bfa:	4b9a      	ldr	r3, [pc, #616]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	4b99      	ldr	r3, [pc, #612]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005c00:	2180      	movs	r1, #128	; 0x80
 8005c02:	0049      	lsls	r1, r1, #1
 8005c04:	430a      	orrs	r2, r1
 8005c06:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c08:	f7fe f93c 	bl	8003e84 <HAL_GetTick>
 8005c0c:	0003      	movs	r3, r0
 8005c0e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c10:	e008      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c12:	f7fe f937 	bl	8003e84 <HAL_GetTick>
 8005c16:	0002      	movs	r2, r0
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	2b64      	cmp	r3, #100	; 0x64
 8005c1e:	d901      	bls.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e118      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c24:	4b8f      	ldr	r3, [pc, #572]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	2380      	movs	r3, #128	; 0x80
 8005c2a:	005b      	lsls	r3, r3, #1
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	d0f0      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005c30:	4b8b      	ldr	r3, [pc, #556]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	23c0      	movs	r3, #192	; 0xc0
 8005c36:	039b      	lsls	r3, r3, #14
 8005c38:	4013      	ands	r3, r2
 8005c3a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	23c0      	movs	r3, #192	; 0xc0
 8005c42:	039b      	lsls	r3, r3, #14
 8005c44:	4013      	ands	r3, r2
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d107      	bne.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689a      	ldr	r2, [r3, #8]
 8005c50:	23c0      	movs	r3, #192	; 0xc0
 8005c52:	039b      	lsls	r3, r3, #14
 8005c54:	4013      	ands	r3, r2
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d013      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	23c0      	movs	r3, #192	; 0xc0
 8005c62:	029b      	lsls	r3, r3, #10
 8005c64:	401a      	ands	r2, r3
 8005c66:	23c0      	movs	r3, #192	; 0xc0
 8005c68:	029b      	lsls	r3, r3, #10
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d10a      	bne.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005c6e:	4b7c      	ldr	r3, [pc, #496]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	2380      	movs	r3, #128	; 0x80
 8005c74:	029b      	lsls	r3, r3, #10
 8005c76:	401a      	ands	r2, r3
 8005c78:	2380      	movs	r3, #128	; 0x80
 8005c7a:	029b      	lsls	r3, r3, #10
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d101      	bne.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e0e8      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005c84:	4b76      	ldr	r3, [pc, #472]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005c86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c88:	23c0      	movs	r3, #192	; 0xc0
 8005c8a:	029b      	lsls	r3, r3, #10
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d049      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	23c0      	movs	r3, #192	; 0xc0
 8005c9c:	029b      	lsls	r3, r3, #10
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d004      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2220      	movs	r2, #32
 8005cac:	4013      	ands	r3, r2
 8005cae:	d10d      	bne.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689a      	ldr	r2, [r3, #8]
 8005cb4:	23c0      	movs	r3, #192	; 0xc0
 8005cb6:	029b      	lsls	r3, r3, #10
 8005cb8:	4013      	ands	r3, r2
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d034      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	2380      	movs	r3, #128	; 0x80
 8005cc6:	011b      	lsls	r3, r3, #4
 8005cc8:	4013      	ands	r3, r2
 8005cca:	d02e      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005ccc:	4b64      	ldr	r3, [pc, #400]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cd0:	4a65      	ldr	r2, [pc, #404]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005cd6:	4b62      	ldr	r3, [pc, #392]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005cd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005cda:	4b61      	ldr	r3, [pc, #388]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005cdc:	2180      	movs	r1, #128	; 0x80
 8005cde:	0309      	lsls	r1, r1, #12
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ce4:	4b5e      	ldr	r3, [pc, #376]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005ce6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ce8:	4b5d      	ldr	r3, [pc, #372]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005cea:	4960      	ldr	r1, [pc, #384]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005cec:	400a      	ands	r2, r1
 8005cee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005cf0:	4b5b      	ldr	r3, [pc, #364]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	2380      	movs	r3, #128	; 0x80
 8005cfa:	005b      	lsls	r3, r3, #1
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	d014      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d00:	f7fe f8c0 	bl	8003e84 <HAL_GetTick>
 8005d04:	0003      	movs	r3, r0
 8005d06:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d08:	e009      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d0a:	f7fe f8bb 	bl	8003e84 <HAL_GetTick>
 8005d0e:	0002      	movs	r2, r0
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	4a56      	ldr	r2, [pc, #344]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d901      	bls.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e09b      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d1e:	4b50      	ldr	r3, [pc, #320]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005d20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d22:	2380      	movs	r3, #128	; 0x80
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4013      	ands	r3, r2
 8005d28:	d0ef      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685a      	ldr	r2, [r3, #4]
 8005d2e:	23c0      	movs	r3, #192	; 0xc0
 8005d30:	029b      	lsls	r3, r3, #10
 8005d32:	401a      	ands	r2, r3
 8005d34:	23c0      	movs	r3, #192	; 0xc0
 8005d36:	029b      	lsls	r3, r3, #10
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d10c      	bne.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005d3c:	4b48      	ldr	r3, [pc, #288]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a4c      	ldr	r2, [pc, #304]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8005d42:	4013      	ands	r3, r2
 8005d44:	0019      	movs	r1, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	23c0      	movs	r3, #192	; 0xc0
 8005d4c:	039b      	lsls	r3, r3, #14
 8005d4e:	401a      	ands	r2, r3
 8005d50:	4b43      	ldr	r3, [pc, #268]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005d52:	430a      	orrs	r2, r1
 8005d54:	601a      	str	r2, [r3, #0]
 8005d56:	4b42      	ldr	r3, [pc, #264]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005d58:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	23c0      	movs	r3, #192	; 0xc0
 8005d60:	029b      	lsls	r3, r3, #10
 8005d62:	401a      	ands	r2, r3
 8005d64:	4b3e      	ldr	r3, [pc, #248]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005d66:	430a      	orrs	r2, r1
 8005d68:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005d6a:	2317      	movs	r3, #23
 8005d6c:	18fb      	adds	r3, r7, r3
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d105      	bne.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d74:	4b3a      	ldr	r3, [pc, #232]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005d76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d78:	4b39      	ldr	r3, [pc, #228]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005d7a:	493f      	ldr	r1, [pc, #252]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005d7c:	400a      	ands	r2, r1
 8005d7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2201      	movs	r2, #1
 8005d86:	4013      	ands	r3, r2
 8005d88:	d009      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d8a:	4b35      	ldr	r3, [pc, #212]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d8e:	2203      	movs	r2, #3
 8005d90:	4393      	bics	r3, r2
 8005d92:	0019      	movs	r1, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68da      	ldr	r2, [r3, #12]
 8005d98:	4b31      	ldr	r3, [pc, #196]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2202      	movs	r2, #2
 8005da4:	4013      	ands	r3, r2
 8005da6:	d009      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005da8:	4b2d      	ldr	r3, [pc, #180]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dac:	220c      	movs	r2, #12
 8005dae:	4393      	bics	r3, r2
 8005db0:	0019      	movs	r1, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	691a      	ldr	r2, [r3, #16]
 8005db6:	4b2a      	ldr	r3, [pc, #168]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005db8:	430a      	orrs	r2, r1
 8005dba:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2204      	movs	r2, #4
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	d009      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005dc6:	4b26      	ldr	r3, [pc, #152]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dca:	4a2c      	ldr	r2, [pc, #176]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005dcc:	4013      	ands	r3, r2
 8005dce:	0019      	movs	r1, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	695a      	ldr	r2, [r3, #20]
 8005dd4:	4b22      	ldr	r3, [pc, #136]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2208      	movs	r2, #8
 8005de0:	4013      	ands	r3, r2
 8005de2:	d009      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005de4:	4b1e      	ldr	r3, [pc, #120]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005de8:	4a25      	ldr	r2, [pc, #148]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005dea:	4013      	ands	r3, r2
 8005dec:	0019      	movs	r1, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	699a      	ldr	r2, [r3, #24]
 8005df2:	4b1b      	ldr	r3, [pc, #108]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005df4:	430a      	orrs	r2, r1
 8005df6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	2380      	movs	r3, #128	; 0x80
 8005dfe:	005b      	lsls	r3, r3, #1
 8005e00:	4013      	ands	r3, r2
 8005e02:	d009      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e04:	4b16      	ldr	r3, [pc, #88]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e08:	4a17      	ldr	r2, [pc, #92]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	0019      	movs	r1, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	69da      	ldr	r2, [r3, #28]
 8005e12:	4b13      	ldr	r3, [pc, #76]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005e14:	430a      	orrs	r2, r1
 8005e16:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2240      	movs	r2, #64	; 0x40
 8005e1e:	4013      	ands	r3, r2
 8005e20:	d009      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e22:	4b0f      	ldr	r3, [pc, #60]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e26:	4a17      	ldr	r2, [pc, #92]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005e28:	4013      	ands	r3, r2
 8005e2a:	0019      	movs	r1, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e30:	4b0b      	ldr	r3, [pc, #44]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005e32:	430a      	orrs	r2, r1
 8005e34:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2280      	movs	r2, #128	; 0x80
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	d009      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005e40:	4b07      	ldr	r3, [pc, #28]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e44:	4a10      	ldr	r2, [pc, #64]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005e46:	4013      	ands	r3, r2
 8005e48:	0019      	movs	r1, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1a      	ldr	r2, [r3, #32]
 8005e4e:	4b04      	ldr	r3, [pc, #16]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005e50:	430a      	orrs	r2, r1
 8005e52:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	0018      	movs	r0, r3
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	b006      	add	sp, #24
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	46c0      	nop			; (mov r8, r8)
 8005e60:	40021000 	.word	0x40021000
 8005e64:	40007000 	.word	0x40007000
 8005e68:	fffcffff 	.word	0xfffcffff
 8005e6c:	fff7ffff 	.word	0xfff7ffff
 8005e70:	00001388 	.word	0x00001388
 8005e74:	ffcfffff 	.word	0xffcfffff
 8005e78:	efffffff 	.word	0xefffffff
 8005e7c:	fffff3ff 	.word	0xfffff3ff
 8005e80:	ffffcfff 	.word	0xffffcfff
 8005e84:	fbffffff 	.word	0xfbffffff
 8005e88:	fff3ffff 	.word	0xfff3ffff

08005e8c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d101      	bne.n	8005e9e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e08e      	b.n	8005fbc <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2221      	movs	r2, #33	; 0x21
 8005ea2:	5c9b      	ldrb	r3, [r3, r2]
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d107      	bne.n	8005eba <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2220      	movs	r2, #32
 8005eae:	2100      	movs	r1, #0
 8005eb0:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	0018      	movs	r0, r3
 8005eb6:	f7fd fb91 	bl	80035dc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2221      	movs	r2, #33	; 0x21
 8005ebe:	2102      	movs	r1, #2
 8005ec0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	22ca      	movs	r2, #202	; 0xca
 8005ec8:	625a      	str	r2, [r3, #36]	; 0x24
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2253      	movs	r2, #83	; 0x53
 8005ed0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	0018      	movs	r0, r3
 8005ed6:	f000 fc54 	bl	8006782 <RTC_EnterInitMode>
 8005eda:	1e03      	subs	r3, r0, #0
 8005edc:	d009      	beq.n	8005ef2 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	22ff      	movs	r2, #255	; 0xff
 8005ee4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2221      	movs	r2, #33	; 0x21
 8005eea:	2104      	movs	r1, #4
 8005eec:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e064      	b.n	8005fbc <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689a      	ldr	r2, [r3, #8]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4931      	ldr	r1, [pc, #196]	; (8005fc4 <HAL_RTC_Init+0x138>)
 8005efe:	400a      	ands	r2, r1
 8005f00:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6899      	ldr	r1, [r3, #8]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	431a      	orrs	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	431a      	orrs	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	68d2      	ldr	r2, [r2, #12]
 8005f28:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6919      	ldr	r1, [r3, #16]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	041a      	lsls	r2, r3, #16
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68da      	ldr	r2, [r3, #12]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2180      	movs	r1, #128	; 0x80
 8005f4a:	438a      	bics	r2, r1
 8005f4c:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2103      	movs	r1, #3
 8005f5a:	438a      	bics	r2, r1
 8005f5c:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	69da      	ldr	r2, [r3, #28]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	431a      	orrs	r2, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	430a      	orrs	r2, r1
 8005f74:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	2220      	movs	r2, #32
 8005f7e:	4013      	ands	r3, r2
 8005f80:	d113      	bne.n	8005faa <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	0018      	movs	r0, r3
 8005f86:	f000 fbd5 	bl	8006734 <HAL_RTC_WaitForSynchro>
 8005f8a:	1e03      	subs	r3, r0, #0
 8005f8c:	d00d      	beq.n	8005faa <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	22ff      	movs	r2, #255	; 0xff
 8005f94:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2221      	movs	r2, #33	; 0x21
 8005f9a:	2104      	movs	r1, #4
 8005f9c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2220      	movs	r2, #32
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e008      	b.n	8005fbc <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	22ff      	movs	r2, #255	; 0xff
 8005fb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2221      	movs	r2, #33	; 0x21
 8005fb6:	2101      	movs	r1, #1
 8005fb8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005fba:	2300      	movs	r3, #0
  }
}
 8005fbc:	0018      	movs	r0, r3
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	b002      	add	sp, #8
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	ff8fffbf 	.word	0xff8fffbf

08005fc8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005fc8:	b590      	push	{r4, r7, lr}
 8005fca:	b087      	sub	sp, #28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	5c9b      	ldrb	r3, [r3, r2]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d101      	bne.n	8005fe2 <HAL_RTC_SetTime+0x1a>
 8005fde:	2302      	movs	r3, #2
 8005fe0:	e0ad      	b.n	800613e <HAL_RTC_SetTime+0x176>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2221      	movs	r2, #33	; 0x21
 8005fee:	2102      	movs	r1, #2
 8005ff0:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d125      	bne.n	8006044 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	2240      	movs	r2, #64	; 0x40
 8006000:	4013      	ands	r3, r2
 8006002:	d102      	bne.n	800600a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	2200      	movs	r2, #0
 8006008:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	0018      	movs	r0, r3
 8006010:	f000 fbe1 	bl	80067d6 <RTC_ByteToBcd2>
 8006014:	0003      	movs	r3, r0
 8006016:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	785b      	ldrb	r3, [r3, #1]
 800601c:	0018      	movs	r0, r3
 800601e:	f000 fbda 	bl	80067d6 <RTC_ByteToBcd2>
 8006022:	0003      	movs	r3, r0
 8006024:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006026:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	789b      	ldrb	r3, [r3, #2]
 800602c:	0018      	movs	r0, r3
 800602e:	f000 fbd2 	bl	80067d6 <RTC_ByteToBcd2>
 8006032:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006034:	0022      	movs	r2, r4
 8006036:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	78db      	ldrb	r3, [r3, #3]
 800603c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800603e:	4313      	orrs	r3, r2
 8006040:	617b      	str	r3, [r7, #20]
 8006042:	e017      	b.n	8006074 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	2240      	movs	r2, #64	; 0x40
 800604c:	4013      	ands	r3, r2
 800604e:	d102      	bne.n	8006056 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2200      	movs	r2, #0
 8006054:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	785b      	ldrb	r3, [r3, #1]
 8006060:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006062:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006068:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	78db      	ldrb	r3, [r3, #3]
 800606e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006070:	4313      	orrs	r3, r2
 8006072:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	22ca      	movs	r2, #202	; 0xca
 800607a:	625a      	str	r2, [r3, #36]	; 0x24
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2253      	movs	r2, #83	; 0x53
 8006082:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	0018      	movs	r0, r3
 8006088:	f000 fb7b 	bl	8006782 <RTC_EnterInitMode>
 800608c:	1e03      	subs	r3, r0, #0
 800608e:	d00d      	beq.n	80060ac <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	22ff      	movs	r2, #255	; 0xff
 8006096:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2221      	movs	r2, #33	; 0x21
 800609c:	2104      	movs	r1, #4
 800609e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2220      	movs	r2, #32
 80060a4:	2100      	movs	r1, #0
 80060a6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e048      	b.n	800613e <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	4925      	ldr	r1, [pc, #148]	; (8006148 <HAL_RTC_SetTime+0x180>)
 80060b4:	400a      	ands	r2, r1
 80060b6:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689a      	ldr	r2, [r3, #8]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4922      	ldr	r1, [pc, #136]	; (800614c <HAL_RTC_SetTime+0x184>)
 80060c4:	400a      	ands	r2, r1
 80060c6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6899      	ldr	r1, [r3, #8]
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	431a      	orrs	r2, r3
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	430a      	orrs	r2, r1
 80060de:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68da      	ldr	r2, [r3, #12]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2180      	movs	r1, #128	; 0x80
 80060ec:	438a      	bics	r2, r1
 80060ee:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	2220      	movs	r2, #32
 80060f8:	4013      	ands	r3, r2
 80060fa:	d113      	bne.n	8006124 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	0018      	movs	r0, r3
 8006100:	f000 fb18 	bl	8006734 <HAL_RTC_WaitForSynchro>
 8006104:	1e03      	subs	r3, r0, #0
 8006106:	d00d      	beq.n	8006124 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	22ff      	movs	r2, #255	; 0xff
 800610e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2221      	movs	r2, #33	; 0x21
 8006114:	2104      	movs	r1, #4
 8006116:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2220      	movs	r2, #32
 800611c:	2100      	movs	r1, #0
 800611e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e00c      	b.n	800613e <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	22ff      	movs	r2, #255	; 0xff
 800612a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2221      	movs	r2, #33	; 0x21
 8006130:	2101      	movs	r1, #1
 8006132:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2220      	movs	r2, #32
 8006138:	2100      	movs	r1, #0
 800613a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800613c:	2300      	movs	r3, #0
  }
}
 800613e:	0018      	movs	r0, r3
 8006140:	46bd      	mov	sp, r7
 8006142:	b007      	add	sp, #28
 8006144:	bd90      	pop	{r4, r7, pc}
 8006146:	46c0      	nop			; (mov r8, r8)
 8006148:	007f7f7f 	.word	0x007f7f7f
 800614c:	fffbffff 	.word	0xfffbffff

08006150 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	045b      	lsls	r3, r3, #17
 800616e:	0c5a      	lsrs	r2, r3, #17
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a22      	ldr	r2, [pc, #136]	; (8006204 <HAL_RTC_GetTime+0xb4>)
 800617c:	4013      	ands	r3, r2
 800617e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	0c1b      	lsrs	r3, r3, #16
 8006184:	b2db      	uxtb	r3, r3
 8006186:	223f      	movs	r2, #63	; 0x3f
 8006188:	4013      	ands	r3, r2
 800618a:	b2da      	uxtb	r2, r3
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	0a1b      	lsrs	r3, r3, #8
 8006194:	b2db      	uxtb	r3, r3
 8006196:	227f      	movs	r2, #127	; 0x7f
 8006198:	4013      	ands	r3, r2
 800619a:	b2da      	uxtb	r2, r3
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	227f      	movs	r2, #127	; 0x7f
 80061a6:	4013      	ands	r3, r2
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	0c1b      	lsrs	r3, r3, #16
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2240      	movs	r2, #64	; 0x40
 80061b6:	4013      	ands	r3, r2
 80061b8:	b2da      	uxtb	r2, r3
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d11a      	bne.n	80061fa <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	0018      	movs	r0, r3
 80061ca:	f000 fb2d 	bl	8006828 <RTC_Bcd2ToByte>
 80061ce:	0003      	movs	r3, r0
 80061d0:	001a      	movs	r2, r3
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	785b      	ldrb	r3, [r3, #1]
 80061da:	0018      	movs	r0, r3
 80061dc:	f000 fb24 	bl	8006828 <RTC_Bcd2ToByte>
 80061e0:	0003      	movs	r3, r0
 80061e2:	001a      	movs	r2, r3
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	789b      	ldrb	r3, [r3, #2]
 80061ec:	0018      	movs	r0, r3
 80061ee:	f000 fb1b 	bl	8006828 <RTC_Bcd2ToByte>
 80061f2:	0003      	movs	r3, r0
 80061f4:	001a      	movs	r2, r3
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	0018      	movs	r0, r3
 80061fe:	46bd      	mov	sp, r7
 8006200:	b006      	add	sp, #24
 8006202:	bd80      	pop	{r7, pc}
 8006204:	007f7f7f 	.word	0x007f7f7f

08006208 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006208:	b590      	push	{r4, r7, lr}
 800620a:	b087      	sub	sp, #28
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2220      	movs	r2, #32
 8006218:	5c9b      	ldrb	r3, [r3, r2]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d101      	bne.n	8006222 <HAL_RTC_SetDate+0x1a>
 800621e:	2302      	movs	r3, #2
 8006220:	e099      	b.n	8006356 <HAL_RTC_SetDate+0x14e>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2220      	movs	r2, #32
 8006226:	2101      	movs	r1, #1
 8006228:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2221      	movs	r2, #33	; 0x21
 800622e:	2102      	movs	r1, #2
 8006230:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10e      	bne.n	8006256 <HAL_RTC_SetDate+0x4e>
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	785b      	ldrb	r3, [r3, #1]
 800623c:	001a      	movs	r2, r3
 800623e:	2310      	movs	r3, #16
 8006240:	4013      	ands	r3, r2
 8006242:	d008      	beq.n	8006256 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	785b      	ldrb	r3, [r3, #1]
 8006248:	2210      	movs	r2, #16
 800624a:	4393      	bics	r3, r2
 800624c:	b2db      	uxtb	r3, r3
 800624e:	330a      	adds	r3, #10
 8006250:	b2da      	uxtb	r2, r3
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d11c      	bne.n	8006296 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	78db      	ldrb	r3, [r3, #3]
 8006260:	0018      	movs	r0, r3
 8006262:	f000 fab8 	bl	80067d6 <RTC_ByteToBcd2>
 8006266:	0003      	movs	r3, r0
 8006268:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	785b      	ldrb	r3, [r3, #1]
 800626e:	0018      	movs	r0, r3
 8006270:	f000 fab1 	bl	80067d6 <RTC_ByteToBcd2>
 8006274:	0003      	movs	r3, r0
 8006276:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006278:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	789b      	ldrb	r3, [r3, #2]
 800627e:	0018      	movs	r0, r3
 8006280:	f000 faa9 	bl	80067d6 <RTC_ByteToBcd2>
 8006284:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006286:	0022      	movs	r2, r4
 8006288:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006290:	4313      	orrs	r3, r2
 8006292:	617b      	str	r3, [r7, #20]
 8006294:	e00e      	b.n	80062b4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	78db      	ldrb	r3, [r3, #3]
 800629a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	785b      	ldrb	r3, [r3, #1]
 80062a0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80062a2:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80062a8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80062b0:	4313      	orrs	r3, r2
 80062b2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	22ca      	movs	r2, #202	; 0xca
 80062ba:	625a      	str	r2, [r3, #36]	; 0x24
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2253      	movs	r2, #83	; 0x53
 80062c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	0018      	movs	r0, r3
 80062c8:	f000 fa5b 	bl	8006782 <RTC_EnterInitMode>
 80062cc:	1e03      	subs	r3, r0, #0
 80062ce:	d00d      	beq.n	80062ec <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	22ff      	movs	r2, #255	; 0xff
 80062d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2221      	movs	r2, #33	; 0x21
 80062dc:	2104      	movs	r1, #4
 80062de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2220      	movs	r2, #32
 80062e4:	2100      	movs	r1, #0
 80062e6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e034      	b.n	8006356 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	491b      	ldr	r1, [pc, #108]	; (8006360 <HAL_RTC_SetDate+0x158>)
 80062f4:	400a      	ands	r2, r1
 80062f6:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68da      	ldr	r2, [r3, #12]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2180      	movs	r1, #128	; 0x80
 8006304:	438a      	bics	r2, r1
 8006306:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	2220      	movs	r2, #32
 8006310:	4013      	ands	r3, r2
 8006312:	d113      	bne.n	800633c <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	0018      	movs	r0, r3
 8006318:	f000 fa0c 	bl	8006734 <HAL_RTC_WaitForSynchro>
 800631c:	1e03      	subs	r3, r0, #0
 800631e:	d00d      	beq.n	800633c <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	22ff      	movs	r2, #255	; 0xff
 8006326:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2221      	movs	r2, #33	; 0x21
 800632c:	2104      	movs	r1, #4
 800632e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2220      	movs	r2, #32
 8006334:	2100      	movs	r1, #0
 8006336:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e00c      	b.n	8006356 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	22ff      	movs	r2, #255	; 0xff
 8006342:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2221      	movs	r2, #33	; 0x21
 8006348:	2101      	movs	r1, #1
 800634a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2220      	movs	r2, #32
 8006350:	2100      	movs	r1, #0
 8006352:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006354:	2300      	movs	r3, #0
  }
}
 8006356:	0018      	movs	r0, r3
 8006358:	46bd      	mov	sp, r7
 800635a:	b007      	add	sp, #28
 800635c:	bd90      	pop	{r4, r7, pc}
 800635e:	46c0      	nop			; (mov r8, r8)
 8006360:	00ffff3f 	.word	0x00ffff3f

08006364 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	4a21      	ldr	r2, [pc, #132]	; (80063fc <HAL_RTC_GetDate+0x98>)
 8006378:	4013      	ands	r3, r2
 800637a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	0c1b      	lsrs	r3, r3, #16
 8006380:	b2da      	uxtb	r2, r3
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	0a1b      	lsrs	r3, r3, #8
 800638a:	b2db      	uxtb	r3, r3
 800638c:	221f      	movs	r2, #31
 800638e:	4013      	ands	r3, r2
 8006390:	b2da      	uxtb	r2, r3
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	b2db      	uxtb	r3, r3
 800639a:	223f      	movs	r2, #63	; 0x3f
 800639c:	4013      	ands	r3, r2
 800639e:	b2da      	uxtb	r2, r3
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	0b5b      	lsrs	r3, r3, #13
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2207      	movs	r2, #7
 80063ac:	4013      	ands	r3, r2
 80063ae:	b2da      	uxtb	r2, r3
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d11a      	bne.n	80063f0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	78db      	ldrb	r3, [r3, #3]
 80063be:	0018      	movs	r0, r3
 80063c0:	f000 fa32 	bl	8006828 <RTC_Bcd2ToByte>
 80063c4:	0003      	movs	r3, r0
 80063c6:	001a      	movs	r2, r3
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	785b      	ldrb	r3, [r3, #1]
 80063d0:	0018      	movs	r0, r3
 80063d2:	f000 fa29 	bl	8006828 <RTC_Bcd2ToByte>
 80063d6:	0003      	movs	r3, r0
 80063d8:	001a      	movs	r2, r3
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	789b      	ldrb	r3, [r3, #2]
 80063e2:	0018      	movs	r0, r3
 80063e4:	f000 fa20 	bl	8006828 <RTC_Bcd2ToByte>
 80063e8:	0003      	movs	r3, r0
 80063ea:	001a      	movs	r2, r3
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	0018      	movs	r0, r3
 80063f4:	46bd      	mov	sp, r7
 80063f6:	b006      	add	sp, #24
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	46c0      	nop			; (mov r8, r8)
 80063fc:	00ffff3f 	.word	0x00ffff3f

08006400 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006400:	b590      	push	{r4, r7, lr}
 8006402:	b089      	sub	sp, #36	; 0x24
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2220      	movs	r2, #32
 8006410:	5c9b      	ldrb	r3, [r3, r2]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d101      	bne.n	800641a <HAL_RTC_SetAlarm_IT+0x1a>
 8006416:	2302      	movs	r3, #2
 8006418:	e130      	b.n	800667c <HAL_RTC_SetAlarm_IT+0x27c>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2220      	movs	r2, #32
 800641e:	2101      	movs	r1, #1
 8006420:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2221      	movs	r2, #33	; 0x21
 8006426:	2102      	movs	r1, #2
 8006428:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d136      	bne.n	800649e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	2240      	movs	r2, #64	; 0x40
 8006438:	4013      	ands	r3, r2
 800643a:	d102      	bne.n	8006442 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	2200      	movs	r2, #0
 8006440:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	0018      	movs	r0, r3
 8006448:	f000 f9c5 	bl	80067d6 <RTC_ByteToBcd2>
 800644c:	0003      	movs	r3, r0
 800644e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	785b      	ldrb	r3, [r3, #1]
 8006454:	0018      	movs	r0, r3
 8006456:	f000 f9be 	bl	80067d6 <RTC_ByteToBcd2>
 800645a:	0003      	movs	r3, r0
 800645c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800645e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	789b      	ldrb	r3, [r3, #2]
 8006464:	0018      	movs	r0, r3
 8006466:	f000 f9b6 	bl	80067d6 <RTC_ByteToBcd2>
 800646a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800646c:	0022      	movs	r2, r4
 800646e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	78db      	ldrb	r3, [r3, #3]
 8006474:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006476:	431a      	orrs	r2, r3
 8006478:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	2220      	movs	r2, #32
 800647e:	5c9b      	ldrb	r3, [r3, r2]
 8006480:	0018      	movs	r0, r3
 8006482:	f000 f9a8 	bl	80067d6 <RTC_ByteToBcd2>
 8006486:	0003      	movs	r3, r0
 8006488:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800648a:	0022      	movs	r2, r4
 800648c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006492:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006498:	4313      	orrs	r3, r2
 800649a:	61fb      	str	r3, [r7, #28]
 800649c:	e022      	b.n	80064e4 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	2240      	movs	r2, #64	; 0x40
 80064a6:	4013      	ands	r3, r2
 80064a8:	d102      	bne.n	80064b0 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	2200      	movs	r2, #0
 80064ae:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	785b      	ldrb	r3, [r3, #1]
 80064ba:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80064bc:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80064c2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	78db      	ldrb	r3, [r3, #3]
 80064c8:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80064ca:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	2120      	movs	r1, #32
 80064d0:	5c5b      	ldrb	r3, [r3, r1]
 80064d2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80064d4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80064da:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80064e0:	4313      	orrs	r3, r2
 80064e2:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	22ca      	movs	r2, #202	; 0xca
 80064f6:	625a      	str	r2, [r3, #36]	; 0x24
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2253      	movs	r2, #83	; 0x53
 80064fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006504:	2380      	movs	r3, #128	; 0x80
 8006506:	005b      	lsls	r3, r3, #1
 8006508:	429a      	cmp	r2, r3
 800650a:	d14e      	bne.n	80065aa <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	689a      	ldr	r2, [r3, #8]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	495b      	ldr	r1, [pc, #364]	; (8006684 <HAL_RTC_SetAlarm_IT+0x284>)
 8006518:	400a      	ands	r2, r1
 800651a:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	22ff      	movs	r2, #255	; 0xff
 8006524:	401a      	ands	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4957      	ldr	r1, [pc, #348]	; (8006688 <HAL_RTC_SetAlarm_IT+0x288>)
 800652c:	430a      	orrs	r2, r1
 800652e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006530:	f7fd fca8 	bl	8003e84 <HAL_GetTick>
 8006534:	0003      	movs	r3, r0
 8006536:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006538:	e016      	b.n	8006568 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800653a:	f7fd fca3 	bl	8003e84 <HAL_GetTick>
 800653e:	0002      	movs	r2, r0
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	1ad2      	subs	r2, r2, r3
 8006544:	23fa      	movs	r3, #250	; 0xfa
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	429a      	cmp	r2, r3
 800654a:	d90d      	bls.n	8006568 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	22ff      	movs	r2, #255	; 0xff
 8006552:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2221      	movs	r2, #33	; 0x21
 8006558:	2103      	movs	r1, #3
 800655a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2220      	movs	r2, #32
 8006560:	2100      	movs	r1, #0
 8006562:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e089      	b.n	800667c <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	2201      	movs	r2, #1
 8006570:	4013      	ands	r3, r2
 8006572:	d0e2      	beq.n	800653a <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	69fa      	ldr	r2, [r7, #28]
 800657a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	69ba      	ldr	r2, [r7, #24]
 8006582:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689a      	ldr	r2, [r3, #8]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2180      	movs	r1, #128	; 0x80
 8006590:	0049      	lsls	r1, r1, #1
 8006592:	430a      	orrs	r2, r1
 8006594:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	689a      	ldr	r2, [r3, #8]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2180      	movs	r1, #128	; 0x80
 80065a2:	0149      	lsls	r1, r1, #5
 80065a4:	430a      	orrs	r2, r1
 80065a6:	609a      	str	r2, [r3, #8]
 80065a8:	e04d      	b.n	8006646 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	689a      	ldr	r2, [r3, #8]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4935      	ldr	r1, [pc, #212]	; (800668c <HAL_RTC_SetAlarm_IT+0x28c>)
 80065b6:	400a      	ands	r2, r1
 80065b8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	22ff      	movs	r2, #255	; 0xff
 80065c2:	401a      	ands	r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4931      	ldr	r1, [pc, #196]	; (8006690 <HAL_RTC_SetAlarm_IT+0x290>)
 80065ca:	430a      	orrs	r2, r1
 80065cc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80065ce:	f7fd fc59 	bl	8003e84 <HAL_GetTick>
 80065d2:	0003      	movs	r3, r0
 80065d4:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80065d6:	e016      	b.n	8006606 <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80065d8:	f7fd fc54 	bl	8003e84 <HAL_GetTick>
 80065dc:	0002      	movs	r2, r0
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	1ad2      	subs	r2, r2, r3
 80065e2:	23fa      	movs	r3, #250	; 0xfa
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d90d      	bls.n	8006606 <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	22ff      	movs	r2, #255	; 0xff
 80065f0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2221      	movs	r2, #33	; 0x21
 80065f6:	2103      	movs	r1, #3
 80065f8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2220      	movs	r2, #32
 80065fe:	2100      	movs	r1, #0
 8006600:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e03a      	b.n	800667c <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	2202      	movs	r2, #2
 800660e:	4013      	ands	r3, r2
 8006610:	d0e2      	beq.n	80065d8 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	69fa      	ldr	r2, [r7, #28]
 8006618:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	69ba      	ldr	r2, [r7, #24]
 8006620:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	689a      	ldr	r2, [r3, #8]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2180      	movs	r1, #128	; 0x80
 800662e:	0089      	lsls	r1, r1, #2
 8006630:	430a      	orrs	r2, r1
 8006632:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	689a      	ldr	r2, [r3, #8]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2180      	movs	r1, #128	; 0x80
 8006640:	0189      	lsls	r1, r1, #6
 8006642:	430a      	orrs	r2, r1
 8006644:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006646:	4b13      	ldr	r3, [pc, #76]	; (8006694 <HAL_RTC_SetAlarm_IT+0x294>)
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	4b12      	ldr	r3, [pc, #72]	; (8006694 <HAL_RTC_SetAlarm_IT+0x294>)
 800664c:	2180      	movs	r1, #128	; 0x80
 800664e:	0289      	lsls	r1, r1, #10
 8006650:	430a      	orrs	r2, r1
 8006652:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006654:	4b0f      	ldr	r3, [pc, #60]	; (8006694 <HAL_RTC_SetAlarm_IT+0x294>)
 8006656:	689a      	ldr	r2, [r3, #8]
 8006658:	4b0e      	ldr	r3, [pc, #56]	; (8006694 <HAL_RTC_SetAlarm_IT+0x294>)
 800665a:	2180      	movs	r1, #128	; 0x80
 800665c:	0289      	lsls	r1, r1, #10
 800665e:	430a      	orrs	r2, r1
 8006660:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	22ff      	movs	r2, #255	; 0xff
 8006668:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2221      	movs	r2, #33	; 0x21
 800666e:	2101      	movs	r1, #1
 8006670:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2220      	movs	r2, #32
 8006676:	2100      	movs	r1, #0
 8006678:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	0018      	movs	r0, r3
 800667e:	46bd      	mov	sp, r7
 8006680:	b009      	add	sp, #36	; 0x24
 8006682:	bd90      	pop	{r4, r7, pc}
 8006684:	fffffeff 	.word	0xfffffeff
 8006688:	fffffe7f 	.word	0xfffffe7f
 800668c:	fffffdff 	.word	0xfffffdff
 8006690:	fffffd7f 	.word	0xfffffd7f
 8006694:	40010400 	.word	0x40010400

08006698 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	689a      	ldr	r2, [r3, #8]
 80066a6:	2380      	movs	r3, #128	; 0x80
 80066a8:	015b      	lsls	r3, r3, #5
 80066aa:	4013      	ands	r3, r2
 80066ac:	d014      	beq.n	80066d8 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68da      	ldr	r2, [r3, #12]
 80066b4:	2380      	movs	r3, #128	; 0x80
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	4013      	ands	r3, r2
 80066ba:	d00d      	beq.n	80066d8 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	0018      	movs	r0, r3
 80066c0:	f7fc f9ac 	bl	8002a1c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	22ff      	movs	r2, #255	; 0xff
 80066cc:	401a      	ands	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4915      	ldr	r1, [pc, #84]	; (8006728 <HAL_RTC_AlarmIRQHandler+0x90>)
 80066d4:	430a      	orrs	r2, r1
 80066d6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	689a      	ldr	r2, [r3, #8]
 80066de:	2380      	movs	r3, #128	; 0x80
 80066e0:	019b      	lsls	r3, r3, #6
 80066e2:	4013      	ands	r3, r2
 80066e4:	d014      	beq.n	8006710 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68da      	ldr	r2, [r3, #12]
 80066ec:	2380      	movs	r3, #128	; 0x80
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4013      	ands	r3, r2
 80066f2:	d00d      	beq.n	8006710 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	0018      	movs	r0, r3
 80066f8:	f7fc f9aa 	bl	8002a50 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	22ff      	movs	r2, #255	; 0xff
 8006704:	401a      	ands	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4908      	ldr	r1, [pc, #32]	; (800672c <HAL_RTC_AlarmIRQHandler+0x94>)
 800670c:	430a      	orrs	r2, r1
 800670e:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006710:	4b07      	ldr	r3, [pc, #28]	; (8006730 <HAL_RTC_AlarmIRQHandler+0x98>)
 8006712:	2280      	movs	r2, #128	; 0x80
 8006714:	0292      	lsls	r2, r2, #10
 8006716:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2221      	movs	r2, #33	; 0x21
 800671c:	2101      	movs	r1, #1
 800671e:	5499      	strb	r1, [r3, r2]
}
 8006720:	46c0      	nop			; (mov r8, r8)
 8006722:	46bd      	mov	sp, r7
 8006724:	b002      	add	sp, #8
 8006726:	bd80      	pop	{r7, pc}
 8006728:	fffffe7f 	.word	0xfffffe7f
 800672c:	fffffd7f 	.word	0xfffffd7f
 8006730:	40010400 	.word	0x40010400

08006734 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68da      	ldr	r2, [r3, #12]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	21a0      	movs	r1, #160	; 0xa0
 8006748:	438a      	bics	r2, r1
 800674a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800674c:	f7fd fb9a 	bl	8003e84 <HAL_GetTick>
 8006750:	0003      	movs	r3, r0
 8006752:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006754:	e00a      	b.n	800676c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006756:	f7fd fb95 	bl	8003e84 <HAL_GetTick>
 800675a:	0002      	movs	r2, r0
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	1ad2      	subs	r2, r2, r3
 8006760:	23fa      	movs	r3, #250	; 0xfa
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	429a      	cmp	r2, r3
 8006766:	d901      	bls.n	800676c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e006      	b.n	800677a <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	2220      	movs	r2, #32
 8006774:	4013      	ands	r3, r2
 8006776:	d0ee      	beq.n	8006756 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	0018      	movs	r0, r3
 800677c:	46bd      	mov	sp, r7
 800677e:	b004      	add	sp, #16
 8006780:	bd80      	pop	{r7, pc}

08006782 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b084      	sub	sp, #16
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	2240      	movs	r2, #64	; 0x40
 8006792:	4013      	ands	r3, r2
 8006794:	d11a      	bne.n	80067cc <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2201      	movs	r2, #1
 800679c:	4252      	negs	r2, r2
 800679e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80067a0:	f7fd fb70 	bl	8003e84 <HAL_GetTick>
 80067a4:	0003      	movs	r3, r0
 80067a6:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80067a8:	e00a      	b.n	80067c0 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80067aa:	f7fd fb6b 	bl	8003e84 <HAL_GetTick>
 80067ae:	0002      	movs	r2, r0
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	1ad2      	subs	r2, r2, r3
 80067b4:	23fa      	movs	r3, #250	; 0xfa
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d901      	bls.n	80067c0 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e006      	b.n	80067ce <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	2240      	movs	r2, #64	; 0x40
 80067c8:	4013      	ands	r3, r2
 80067ca:	d0ee      	beq.n	80067aa <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	0018      	movs	r0, r3
 80067d0:	46bd      	mov	sp, r7
 80067d2:	b004      	add	sp, #16
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b084      	sub	sp, #16
 80067da:	af00      	add	r7, sp, #0
 80067dc:	0002      	movs	r2, r0
 80067de:	1dfb      	adds	r3, r7, #7
 80067e0:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80067e2:	2300      	movs	r3, #0
 80067e4:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80067e6:	230b      	movs	r3, #11
 80067e8:	18fb      	adds	r3, r7, r3
 80067ea:	1dfa      	adds	r2, r7, #7
 80067ec:	7812      	ldrb	r2, [r2, #0]
 80067ee:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 80067f0:	e008      	b.n	8006804 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	3301      	adds	r3, #1
 80067f6:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80067f8:	220b      	movs	r2, #11
 80067fa:	18bb      	adds	r3, r7, r2
 80067fc:	18ba      	adds	r2, r7, r2
 80067fe:	7812      	ldrb	r2, [r2, #0]
 8006800:	3a0a      	subs	r2, #10
 8006802:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8006804:	230b      	movs	r3, #11
 8006806:	18fb      	adds	r3, r7, r3
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	2b09      	cmp	r3, #9
 800680c:	d8f1      	bhi.n	80067f2 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	b2db      	uxtb	r3, r3
 8006812:	011b      	lsls	r3, r3, #4
 8006814:	b2da      	uxtb	r2, r3
 8006816:	230b      	movs	r3, #11
 8006818:	18fb      	adds	r3, r7, r3
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	4313      	orrs	r3, r2
 800681e:	b2db      	uxtb	r3, r3
}
 8006820:	0018      	movs	r0, r3
 8006822:	46bd      	mov	sp, r7
 8006824:	b004      	add	sp, #16
 8006826:	bd80      	pop	{r7, pc}

08006828 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	0002      	movs	r2, r0
 8006830:	1dfb      	adds	r3, r7, #7
 8006832:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006834:	1dfb      	adds	r3, r7, #7
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	091b      	lsrs	r3, r3, #4
 800683a:	b2db      	uxtb	r3, r3
 800683c:	001a      	movs	r2, r3
 800683e:	0013      	movs	r3, r2
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	189b      	adds	r3, r3, r2
 8006844:	005b      	lsls	r3, r3, #1
 8006846:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	b2da      	uxtb	r2, r3
 800684c:	1dfb      	adds	r3, r7, #7
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	210f      	movs	r1, #15
 8006852:	400b      	ands	r3, r1
 8006854:	b2db      	uxtb	r3, r3
 8006856:	18d3      	adds	r3, r2, r3
 8006858:	b2db      	uxtb	r3, r3
}
 800685a:	0018      	movs	r0, r3
 800685c:	46bd      	mov	sp, r7
 800685e:	b004      	add	sp, #16
 8006860:	bd80      	pop	{r7, pc}
	...

08006864 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d101      	bne.n	8006876 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e059      	b.n	800692a <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2251      	movs	r2, #81	; 0x51
 8006880:	5c9b      	ldrb	r3, [r3, r2]
 8006882:	b2db      	uxtb	r3, r3
 8006884:	2b00      	cmp	r3, #0
 8006886:	d107      	bne.n	8006898 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2250      	movs	r2, #80	; 0x50
 800688c:	2100      	movs	r1, #0
 800688e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	0018      	movs	r0, r3
 8006894:	f7fc fec2 	bl	800361c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2251      	movs	r2, #81	; 0x51
 800689c:	2102      	movs	r1, #2
 800689e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2140      	movs	r1, #64	; 0x40
 80068ac:	438a      	bics	r2, r1
 80068ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	431a      	orrs	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	431a      	orrs	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	431a      	orrs	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	431a      	orrs	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6999      	ldr	r1, [r3, #24]
 80068d0:	2380      	movs	r3, #128	; 0x80
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	400b      	ands	r3, r1
 80068d6:	431a      	orrs	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	69db      	ldr	r3, [r3, #28]
 80068dc:	431a      	orrs	r2, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	431a      	orrs	r2, r3
 80068e4:	0011      	movs	r1, r2
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	0c1b      	lsrs	r3, r3, #16
 80068f8:	2204      	movs	r2, #4
 80068fa:	4013      	ands	r3, r2
 80068fc:	0019      	movs	r1, r3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	430a      	orrs	r2, r1
 8006908:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	69da      	ldr	r2, [r3, #28]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4907      	ldr	r1, [pc, #28]	; (8006934 <HAL_SPI_Init+0xd0>)
 8006916:	400a      	ands	r2, r1
 8006918:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2251      	movs	r2, #81	; 0x51
 8006924:	2101      	movs	r1, #1
 8006926:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	0018      	movs	r0, r3
 800692c:	46bd      	mov	sp, r7
 800692e:	b002      	add	sp, #8
 8006930:	bd80      	pop	{r7, pc}
 8006932:	46c0      	nop			; (mov r8, r8)
 8006934:	fffff7ff 	.word	0xfffff7ff

08006938 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b088      	sub	sp, #32
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	603b      	str	r3, [r7, #0]
 8006944:	1dbb      	adds	r3, r7, #6
 8006946:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006948:	231f      	movs	r3, #31
 800694a:	18fb      	adds	r3, r7, r3
 800694c:	2200      	movs	r2, #0
 800694e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2250      	movs	r2, #80	; 0x50
 8006954:	5c9b      	ldrb	r3, [r3, r2]
 8006956:	2b01      	cmp	r3, #1
 8006958:	d101      	bne.n	800695e <HAL_SPI_Transmit+0x26>
 800695a:	2302      	movs	r3, #2
 800695c:	e136      	b.n	8006bcc <HAL_SPI_Transmit+0x294>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2250      	movs	r2, #80	; 0x50
 8006962:	2101      	movs	r1, #1
 8006964:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006966:	f7fd fa8d 	bl	8003e84 <HAL_GetTick>
 800696a:	0003      	movs	r3, r0
 800696c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800696e:	2316      	movs	r3, #22
 8006970:	18fb      	adds	r3, r7, r3
 8006972:	1dba      	adds	r2, r7, #6
 8006974:	8812      	ldrh	r2, [r2, #0]
 8006976:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2251      	movs	r2, #81	; 0x51
 800697c:	5c9b      	ldrb	r3, [r3, r2]
 800697e:	b2db      	uxtb	r3, r3
 8006980:	2b01      	cmp	r3, #1
 8006982:	d004      	beq.n	800698e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006984:	231f      	movs	r3, #31
 8006986:	18fb      	adds	r3, r7, r3
 8006988:	2202      	movs	r2, #2
 800698a:	701a      	strb	r2, [r3, #0]
    goto error;
 800698c:	e113      	b.n	8006bb6 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d003      	beq.n	800699c <HAL_SPI_Transmit+0x64>
 8006994:	1dbb      	adds	r3, r7, #6
 8006996:	881b      	ldrh	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d104      	bne.n	80069a6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800699c:	231f      	movs	r3, #31
 800699e:	18fb      	adds	r3, r7, r3
 80069a0:	2201      	movs	r2, #1
 80069a2:	701a      	strb	r2, [r3, #0]
    goto error;
 80069a4:	e107      	b.n	8006bb6 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2251      	movs	r2, #81	; 0x51
 80069aa:	2103      	movs	r1, #3
 80069ac:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	1dba      	adds	r2, r7, #6
 80069be:	8812      	ldrh	r2, [r2, #0]
 80069c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	1dba      	adds	r2, r7, #6
 80069c6:	8812      	ldrh	r2, [r2, #0]
 80069c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	689a      	ldr	r2, [r3, #8]
 80069ec:	2380      	movs	r3, #128	; 0x80
 80069ee:	021b      	lsls	r3, r3, #8
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d108      	bne.n	8006a06 <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2180      	movs	r1, #128	; 0x80
 8006a00:	01c9      	lsls	r1, r1, #7
 8006a02:	430a      	orrs	r2, r1
 8006a04:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2240      	movs	r2, #64	; 0x40
 8006a0e:	4013      	ands	r3, r2
 8006a10:	2b40      	cmp	r3, #64	; 0x40
 8006a12:	d007      	beq.n	8006a24 <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2140      	movs	r1, #64	; 0x40
 8006a20:	430a      	orrs	r2, r1
 8006a22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	68da      	ldr	r2, [r3, #12]
 8006a28:	2380      	movs	r3, #128	; 0x80
 8006a2a:	011b      	lsls	r3, r3, #4
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d14e      	bne.n	8006ace <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d004      	beq.n	8006a42 <HAL_SPI_Transmit+0x10a>
 8006a38:	2316      	movs	r3, #22
 8006a3a:	18fb      	adds	r3, r7, r3
 8006a3c:	881b      	ldrh	r3, [r3, #0]
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d13f      	bne.n	8006ac2 <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a46:	881a      	ldrh	r2, [r3, #0]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a52:	1c9a      	adds	r2, r3, #2
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006a66:	e02c      	b.n	8006ac2 <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	2202      	movs	r2, #2
 8006a70:	4013      	ands	r3, r2
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d112      	bne.n	8006a9c <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7a:	881a      	ldrh	r2, [r3, #0]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a86:	1c9a      	adds	r2, r3, #2
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	3b01      	subs	r3, #1
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	86da      	strh	r2, [r3, #54]	; 0x36
 8006a9a:	e012      	b.n	8006ac2 <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a9c:	f7fd f9f2 	bl	8003e84 <HAL_GetTick>
 8006aa0:	0002      	movs	r2, r0
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	683a      	ldr	r2, [r7, #0]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d802      	bhi.n	8006ab2 <HAL_SPI_Transmit+0x17a>
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	d102      	bne.n	8006ab8 <HAL_SPI_Transmit+0x180>
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d104      	bne.n	8006ac2 <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 8006ab8:	231f      	movs	r3, #31
 8006aba:	18fb      	adds	r3, r7, r3
 8006abc:	2203      	movs	r2, #3
 8006abe:	701a      	strb	r2, [r3, #0]
          goto error;
 8006ac0:	e079      	b.n	8006bb6 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1cd      	bne.n	8006a68 <HAL_SPI_Transmit+0x130>
 8006acc:	e04f      	b.n	8006b6e <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d004      	beq.n	8006ae0 <HAL_SPI_Transmit+0x1a8>
 8006ad6:	2316      	movs	r3, #22
 8006ad8:	18fb      	adds	r3, r7, r3
 8006ada:	881b      	ldrh	r3, [r3, #0]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d141      	bne.n	8006b64 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	330c      	adds	r3, #12
 8006aea:	7812      	ldrb	r2, [r2, #0]
 8006aec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af2:	1c5a      	adds	r2, r3, #1
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	3b01      	subs	r3, #1
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006b06:	e02d      	b.n	8006b64 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	2202      	movs	r2, #2
 8006b10:	4013      	ands	r3, r2
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d113      	bne.n	8006b3e <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	330c      	adds	r3, #12
 8006b20:	7812      	ldrb	r2, [r2, #0]
 8006b22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b28:	1c5a      	adds	r2, r3, #1
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	3b01      	subs	r3, #1
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	86da      	strh	r2, [r3, #54]	; 0x36
 8006b3c:	e012      	b.n	8006b64 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b3e:	f7fd f9a1 	bl	8003e84 <HAL_GetTick>
 8006b42:	0002      	movs	r2, r0
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	683a      	ldr	r2, [r7, #0]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d802      	bhi.n	8006b54 <HAL_SPI_Transmit+0x21c>
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	3301      	adds	r3, #1
 8006b52:	d102      	bne.n	8006b5a <HAL_SPI_Transmit+0x222>
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d104      	bne.n	8006b64 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8006b5a:	231f      	movs	r3, #31
 8006b5c:	18fb      	adds	r3, r7, r3
 8006b5e:	2203      	movs	r2, #3
 8006b60:	701a      	strb	r2, [r3, #0]
          goto error;
 8006b62:	e028      	b.n	8006bb6 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1cc      	bne.n	8006b08 <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b6e:	69ba      	ldr	r2, [r7, #24]
 8006b70:	6839      	ldr	r1, [r7, #0]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	0018      	movs	r0, r3
 8006b76:	f000 fa99 	bl	80070ac <SPI_EndRxTxTransaction>
 8006b7a:	1e03      	subs	r3, r0, #0
 8006b7c:	d002      	beq.n	8006b84 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2220      	movs	r2, #32
 8006b82:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10a      	bne.n	8006ba2 <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	613b      	str	r3, [r7, #16]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	613b      	str	r3, [r7, #16]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	613b      	str	r3, [r7, #16]
 8006ba0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d004      	beq.n	8006bb4 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8006baa:	231f      	movs	r3, #31
 8006bac:	18fb      	adds	r3, r7, r3
 8006bae:	2201      	movs	r2, #1
 8006bb0:	701a      	strb	r2, [r3, #0]
 8006bb2:	e000      	b.n	8006bb6 <HAL_SPI_Transmit+0x27e>
  }

error:
 8006bb4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2251      	movs	r2, #81	; 0x51
 8006bba:	2101      	movs	r1, #1
 8006bbc:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2250      	movs	r2, #80	; 0x50
 8006bc2:	2100      	movs	r1, #0
 8006bc4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006bc6:	231f      	movs	r3, #31
 8006bc8:	18fb      	adds	r3, r7, r3
 8006bca:	781b      	ldrb	r3, [r3, #0]
}
 8006bcc:	0018      	movs	r0, r3
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	b008      	add	sp, #32
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b086      	sub	sp, #24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	1dbb      	adds	r3, r7, #6
 8006be0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006be2:	2317      	movs	r3, #23
 8006be4:	18fb      	adds	r3, r7, r3
 8006be6:	2200      	movs	r2, #0
 8006be8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2250      	movs	r2, #80	; 0x50
 8006bee:	5c9b      	ldrb	r3, [r3, r2]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d101      	bne.n	8006bf8 <HAL_SPI_Transmit_IT+0x24>
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	e072      	b.n	8006cde <HAL_SPI_Transmit_IT+0x10a>
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2250      	movs	r2, #80	; 0x50
 8006bfc:	2101      	movs	r1, #1
 8006bfe:	5499      	strb	r1, [r3, r2]

  if ((pData == NULL) || (Size == 0U))
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d003      	beq.n	8006c0e <HAL_SPI_Transmit_IT+0x3a>
 8006c06:	1dbb      	adds	r3, r7, #6
 8006c08:	881b      	ldrh	r3, [r3, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d104      	bne.n	8006c18 <HAL_SPI_Transmit_IT+0x44>
  {
    errorcode = HAL_ERROR;
 8006c0e:	2317      	movs	r3, #23
 8006c10:	18fb      	adds	r3, r7, r3
 8006c12:	2201      	movs	r2, #1
 8006c14:	701a      	strb	r2, [r3, #0]
    goto error;
 8006c16:	e05b      	b.n	8006cd0 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2251      	movs	r2, #81	; 0x51
 8006c1c:	5c9b      	ldrb	r3, [r3, r2]
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d004      	beq.n	8006c2e <HAL_SPI_Transmit_IT+0x5a>
  {
    errorcode = HAL_BUSY;
 8006c24:	2317      	movs	r3, #23
 8006c26:	18fb      	adds	r3, r7, r3
 8006c28:	2202      	movs	r2, #2
 8006c2a:	701a      	strb	r2, [r3, #0]
    goto error;
 8006c2c:	e050      	b.n	8006cd0 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2251      	movs	r2, #81	; 0x51
 8006c32:	2103      	movs	r1, #3
 8006c34:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	68ba      	ldr	r2, [r7, #8]
 8006c40:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	1dba      	adds	r2, r7, #6
 8006c46:	8812      	ldrh	r2, [r2, #0]
 8006c48:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	1dba      	adds	r2, r7, #6
 8006c4e:	8812      	ldrh	r2, [r2, #0]
 8006c50:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2200      	movs	r2, #0
 8006c68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d003      	beq.n	8006c7a <HAL_SPI_Transmit_IT+0xa6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	4a1c      	ldr	r2, [pc, #112]	; (8006ce8 <HAL_SPI_Transmit_IT+0x114>)
 8006c76:	645a      	str	r2, [r3, #68]	; 0x44
 8006c78:	e002      	b.n	8006c80 <HAL_SPI_Transmit_IT+0xac>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	4a1b      	ldr	r2, [pc, #108]	; (8006cec <HAL_SPI_Transmit_IT+0x118>)
 8006c7e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	689a      	ldr	r2, [r3, #8]
 8006c84:	2380      	movs	r3, #128	; 0x80
 8006c86:	021b      	lsls	r3, r3, #8
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d108      	bne.n	8006c9e <HAL_SPI_Transmit_IT+0xca>
  {
    SPI_1LINE_TX(hspi);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2180      	movs	r1, #128	; 0x80
 8006c98:	01c9      	lsls	r1, r1, #7
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	21a0      	movs	r1, #160	; 0xa0
 8006caa:	430a      	orrs	r2, r1
 8006cac:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2240      	movs	r2, #64	; 0x40
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	2b40      	cmp	r3, #64	; 0x40
 8006cba:	d008      	beq.n	8006cce <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2140      	movs	r1, #64	; 0x40
 8006cc8:	430a      	orrs	r2, r1
 8006cca:	601a      	str	r2, [r3, #0]
 8006ccc:	e000      	b.n	8006cd0 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8006cce:	46c0      	nop			; (mov r8, r8)
  __HAL_UNLOCK(hspi);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2250      	movs	r2, #80	; 0x50
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006cd8:	2317      	movs	r3, #23
 8006cda:	18fb      	adds	r3, r7, r3
 8006cdc:	781b      	ldrb	r3, [r3, #0]
}
 8006cde:	0018      	movs	r0, r3
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	b006      	add	sp, #24
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	46c0      	nop			; (mov r8, r8)
 8006ce8:	08006f87 	.word	0x08006f87
 8006cec:	08006f3f 	.word	0x08006f3f

08006cf0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b088      	sub	sp, #32
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	099b      	lsrs	r3, r3, #6
 8006d0c:	001a      	movs	r2, r3
 8006d0e:	2301      	movs	r3, #1
 8006d10:	4013      	ands	r3, r2
 8006d12:	d10f      	bne.n	8006d34 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	2201      	movs	r2, #1
 8006d18:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006d1a:	d00b      	beq.n	8006d34 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	099b      	lsrs	r3, r3, #6
 8006d20:	001a      	movs	r2, r3
 8006d22:	2301      	movs	r3, #1
 8006d24:	4013      	ands	r3, r2
 8006d26:	d005      	beq.n	8006d34 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	0010      	movs	r0, r2
 8006d30:	4798      	blx	r3
    return;
 8006d32:	e0d6      	b.n	8006ee2 <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	085b      	lsrs	r3, r3, #1
 8006d38:	001a      	movs	r2, r3
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	d00b      	beq.n	8006d58 <HAL_SPI_IRQHandler+0x68>
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	09db      	lsrs	r3, r3, #7
 8006d44:	001a      	movs	r2, r3
 8006d46:	2301      	movs	r3, #1
 8006d48:	4013      	ands	r3, r2
 8006d4a:	d005      	beq.n	8006d58 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	0010      	movs	r0, r2
 8006d54:	4798      	blx	r3
    return;
 8006d56:	e0c4      	b.n	8006ee2 <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	095b      	lsrs	r3, r3, #5
 8006d5c:	001a      	movs	r2, r3
 8006d5e:	2301      	movs	r3, #1
 8006d60:	4013      	ands	r3, r2
 8006d62:	d10c      	bne.n	8006d7e <HAL_SPI_IRQHandler+0x8e>
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	099b      	lsrs	r3, r3, #6
 8006d68:	001a      	movs	r2, r3
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	d106      	bne.n	8006d7e <HAL_SPI_IRQHandler+0x8e>
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	0a1b      	lsrs	r3, r3, #8
 8006d74:	001a      	movs	r2, r3
 8006d76:	2301      	movs	r3, #1
 8006d78:	4013      	ands	r3, r2
 8006d7a:	d100      	bne.n	8006d7e <HAL_SPI_IRQHandler+0x8e>
 8006d7c:	e0b1      	b.n	8006ee2 <HAL_SPI_IRQHandler+0x1f2>
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	095b      	lsrs	r3, r3, #5
 8006d82:	001a      	movs	r2, r3
 8006d84:	2301      	movs	r3, #1
 8006d86:	4013      	ands	r3, r2
 8006d88:	d100      	bne.n	8006d8c <HAL_SPI_IRQHandler+0x9c>
 8006d8a:	e0aa      	b.n	8006ee2 <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	099b      	lsrs	r3, r3, #6
 8006d90:	001a      	movs	r2, r3
 8006d92:	2301      	movs	r3, #1
 8006d94:	4013      	ands	r3, r2
 8006d96:	d023      	beq.n	8006de0 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2251      	movs	r2, #81	; 0x51
 8006d9c:	5c9b      	ldrb	r3, [r3, r2]
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	2b03      	cmp	r3, #3
 8006da2:	d011      	beq.n	8006dc8 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da8:	2204      	movs	r2, #4
 8006daa:	431a      	orrs	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006db0:	2300      	movs	r3, #0
 8006db2:	617b      	str	r3, [r7, #20]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	617b      	str	r3, [r7, #20]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	617b      	str	r3, [r7, #20]
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	e00b      	b.n	8006de0 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006dc8:	2300      	movs	r3, #0
 8006dca:	613b      	str	r3, [r7, #16]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	613b      	str	r3, [r7, #16]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	613b      	str	r3, [r7, #16]
 8006ddc:	693b      	ldr	r3, [r7, #16]
        return;
 8006dde:	e080      	b.n	8006ee2 <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	095b      	lsrs	r3, r3, #5
 8006de4:	001a      	movs	r2, r3
 8006de6:	2301      	movs	r3, #1
 8006de8:	4013      	ands	r3, r2
 8006dea:	d014      	beq.n	8006e16 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df0:	2201      	movs	r2, #1
 8006df2:	431a      	orrs	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006df8:	2300      	movs	r3, #0
 8006dfa:	60fb      	str	r3, [r7, #12]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	60fb      	str	r3, [r7, #12]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2140      	movs	r1, #64	; 0x40
 8006e10:	438a      	bics	r2, r1
 8006e12:	601a      	str	r2, [r3, #0]
 8006e14:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	0a1b      	lsrs	r3, r3, #8
 8006e1a:	001a      	movs	r2, r3
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	4013      	ands	r3, r2
 8006e20:	d00c      	beq.n	8006e3c <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e26:	2208      	movs	r2, #8
 8006e28:	431a      	orrs	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006e2e:	2300      	movs	r3, #0
 8006e30:	60bb      	str	r3, [r7, #8]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	60bb      	str	r3, [r7, #8]
 8006e3a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d04d      	beq.n	8006ee0 <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	685a      	ldr	r2, [r3, #4]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	21e0      	movs	r1, #224	; 0xe0
 8006e50:	438a      	bics	r2, r1
 8006e52:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2251      	movs	r2, #81	; 0x51
 8006e58:	2101      	movs	r1, #1
 8006e5a:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	2202      	movs	r2, #2
 8006e60:	4013      	ands	r3, r2
 8006e62:	d103      	bne.n	8006e6c <HAL_SPI_IRQHandler+0x17c>
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	2201      	movs	r2, #1
 8006e68:	4013      	ands	r3, r2
 8006e6a:	d032      	beq.n	8006ed2 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	685a      	ldr	r2, [r3, #4]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2103      	movs	r1, #3
 8006e78:	438a      	bics	r2, r1
 8006e7a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d010      	beq.n	8006ea6 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e88:	4a17      	ldr	r2, [pc, #92]	; (8006ee8 <HAL_SPI_IRQHandler+0x1f8>)
 8006e8a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e90:	0018      	movs	r0, r3
 8006e92:	f7fd fcc5 	bl	8004820 <HAL_DMA_Abort_IT>
 8006e96:	1e03      	subs	r3, r0, #0
 8006e98:	d005      	beq.n	8006ea6 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e9e:	2240      	movs	r2, #64	; 0x40
 8006ea0:	431a      	orrs	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d016      	beq.n	8006edc <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eb2:	4a0d      	ldr	r2, [pc, #52]	; (8006ee8 <HAL_SPI_IRQHandler+0x1f8>)
 8006eb4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eba:	0018      	movs	r0, r3
 8006ebc:	f7fd fcb0 	bl	8004820 <HAL_DMA_Abort_IT>
 8006ec0:	1e03      	subs	r3, r0, #0
 8006ec2:	d00b      	beq.n	8006edc <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ec8:	2240      	movs	r2, #64	; 0x40
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006ed0:	e004      	b.n	8006edc <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	0018      	movs	r0, r3
 8006ed6:	f000 f809 	bl	8006eec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006eda:	e000      	b.n	8006ede <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8006edc:	46c0      	nop			; (mov r8, r8)
    return;
 8006ede:	46c0      	nop			; (mov r8, r8)
 8006ee0:	46c0      	nop			; (mov r8, r8)
  }
}
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	b008      	add	sp, #32
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	08006f15 	.word	0x08006f15

08006eec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006ef4:	46c0      	nop			; (mov r8, r8)
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	b002      	add	sp, #8
 8006efa:	bd80      	pop	{r7, pc}

08006efc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2251      	movs	r2, #81	; 0x51
 8006f08:	5c9b      	ldrb	r3, [r3, r2]
 8006f0a:	b2db      	uxtb	r3, r3
}
 8006f0c:	0018      	movs	r0, r3
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	b002      	add	sp, #8
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f20:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	0018      	movs	r0, r3
 8006f32:	f7ff ffdb 	bl	8006eec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f36:	46c0      	nop			; (mov r8, r8)
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	b004      	add	sp, #16
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b082      	sub	sp, #8
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	330c      	adds	r3, #12
 8006f50:	7812      	ldrb	r2, [r2, #0]
 8006f52:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f58:	1c5a      	adds	r2, r3, #1
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	3b01      	subs	r3, #1
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d103      	bne.n	8006f7e <SPI_TxISR_8BIT+0x40>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	0018      	movs	r0, r3
 8006f7a:	f000 f8d5 	bl	8007128 <SPI_CloseTx_ISR>
  }
}
 8006f7e:	46c0      	nop			; (mov r8, r8)
 8006f80:	46bd      	mov	sp, r7
 8006f82:	b002      	add	sp, #8
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b082      	sub	sp, #8
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f92:	881a      	ldrh	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9e:	1c9a      	adds	r2, r3, #2
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	3b01      	subs	r3, #1
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d103      	bne.n	8006fc4 <SPI_TxISR_16BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	0018      	movs	r0, r3
 8006fc0:	f000 f8b2 	bl	8007128 <SPI_CloseTx_ISR>
  }
}
 8006fc4:	46c0      	nop			; (mov r8, r8)
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	b002      	add	sp, #8
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	603b      	str	r3, [r7, #0]
 8006fd8:	1dfb      	adds	r3, r7, #7
 8006fda:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fdc:	e050      	b.n	8007080 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	d04d      	beq.n	8007080 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006fe4:	f7fc ff4e 	bl	8003e84 <HAL_GetTick>
 8006fe8:	0002      	movs	r2, r0
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	683a      	ldr	r2, [r7, #0]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d902      	bls.n	8006ffa <SPI_WaitFlagStateUntilTimeout+0x2e>
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d142      	bne.n	8007080 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	685a      	ldr	r2, [r3, #4]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	21e0      	movs	r1, #224	; 0xe0
 8007006:	438a      	bics	r2, r1
 8007008:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	685a      	ldr	r2, [r3, #4]
 800700e:	2382      	movs	r3, #130	; 0x82
 8007010:	005b      	lsls	r3, r3, #1
 8007012:	429a      	cmp	r2, r3
 8007014:	d113      	bne.n	800703e <SPI_WaitFlagStateUntilTimeout+0x72>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	689a      	ldr	r2, [r3, #8]
 800701a:	2380      	movs	r3, #128	; 0x80
 800701c:	021b      	lsls	r3, r3, #8
 800701e:	429a      	cmp	r2, r3
 8007020:	d005      	beq.n	800702e <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	689a      	ldr	r2, [r3, #8]
 8007026:	2380      	movs	r3, #128	; 0x80
 8007028:	00db      	lsls	r3, r3, #3
 800702a:	429a      	cmp	r2, r3
 800702c:	d107      	bne.n	800703e <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2140      	movs	r1, #64	; 0x40
 800703a:	438a      	bics	r2, r1
 800703c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007042:	2380      	movs	r3, #128	; 0x80
 8007044:	019b      	lsls	r3, r3, #6
 8007046:	429a      	cmp	r2, r3
 8007048:	d110      	bne.n	800706c <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4914      	ldr	r1, [pc, #80]	; (80070a8 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8007056:	400a      	ands	r2, r1
 8007058:	601a      	str	r2, [r3, #0]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2180      	movs	r1, #128	; 0x80
 8007066:	0189      	lsls	r1, r1, #6
 8007068:	430a      	orrs	r2, r1
 800706a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2251      	movs	r2, #81	; 0x51
 8007070:	2101      	movs	r1, #1
 8007072:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2250      	movs	r2, #80	; 0x50
 8007078:	2100      	movs	r1, #0
 800707a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800707c:	2303      	movs	r3, #3
 800707e:	e00f      	b.n	80070a0 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	4013      	ands	r3, r2
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	1ad3      	subs	r3, r2, r3
 800708e:	425a      	negs	r2, r3
 8007090:	4153      	adcs	r3, r2
 8007092:	b2db      	uxtb	r3, r3
 8007094:	001a      	movs	r2, r3
 8007096:	1dfb      	adds	r3, r7, #7
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	429a      	cmp	r2, r3
 800709c:	d19f      	bne.n	8006fde <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	0018      	movs	r0, r3
 80070a2:	46bd      	mov	sp, r7
 80070a4:	b004      	add	sp, #16
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	ffffdfff 	.word	0xffffdfff

080070ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b086      	sub	sp, #24
 80070b0:	af02      	add	r7, sp, #8
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	2382      	movs	r3, #130	; 0x82
 80070be:	005b      	lsls	r3, r3, #1
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d112      	bne.n	80070ea <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	9300      	str	r3, [sp, #0]
 80070cc:	0013      	movs	r3, r2
 80070ce:	2200      	movs	r2, #0
 80070d0:	2180      	movs	r1, #128	; 0x80
 80070d2:	f7ff ff7b 	bl	8006fcc <SPI_WaitFlagStateUntilTimeout>
 80070d6:	1e03      	subs	r3, r0, #0
 80070d8:	d020      	beq.n	800711c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070de:	2220      	movs	r2, #32
 80070e0:	431a      	orrs	r2, r3
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	e019      	b.n	800711e <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2251      	movs	r2, #81	; 0x51
 80070ee:	5c9b      	ldrb	r3, [r3, r2]
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	2b05      	cmp	r3, #5
 80070f4:	d112      	bne.n	800711c <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	0013      	movs	r3, r2
 8007100:	2200      	movs	r2, #0
 8007102:	2101      	movs	r1, #1
 8007104:	f7ff ff62 	bl	8006fcc <SPI_WaitFlagStateUntilTimeout>
 8007108:	1e03      	subs	r3, r0, #0
 800710a:	d007      	beq.n	800711c <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007110:	2220      	movs	r2, #32
 8007112:	431a      	orrs	r2, r3
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e000      	b.n	800711e <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	0018      	movs	r0, r3
 8007120:	46bd      	mov	sp, r7
 8007122:	b004      	add	sp, #16
 8007124:	bd80      	pop	{r7, pc}
	...

08007128 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8007130:	4b2d      	ldr	r3, [pc, #180]	; (80071e8 <SPI_CloseTx_ISR+0xc0>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	492d      	ldr	r1, [pc, #180]	; (80071ec <SPI_CloseTx_ISR+0xc4>)
 8007136:	0018      	movs	r0, r3
 8007138:	f7f8 ffe6 	bl	8000108 <__udivsi3>
 800713c:	0003      	movs	r3, r0
 800713e:	001a      	movs	r2, r3
 8007140:	2364      	movs	r3, #100	; 0x64
 8007142:	4353      	muls	r3, r2
 8007144:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007146:	f7fc fe9d 	bl	8003e84 <HAL_GetTick>
 800714a:	0003      	movs	r3, r0
 800714c:	617b      	str	r3, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d106      	bne.n	8007162 <SPI_CloseTx_ISR+0x3a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007158:	2220      	movs	r2, #32
 800715a:	431a      	orrs	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007160:	e008      	b.n	8007174 <SPI_CloseTx_ISR+0x4c>
    }
    count--;
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	3b01      	subs	r3, #1
 8007166:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	2202      	movs	r2, #2
 8007170:	4013      	ands	r3, r2
 8007172:	d0ec      	beq.n	800714e <SPI_CloseTx_ISR+0x26>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	685a      	ldr	r2, [r3, #4]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	21a0      	movs	r1, #160	; 0xa0
 8007180:	438a      	bics	r2, r1
 8007182:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2164      	movs	r1, #100	; 0x64
 800718a:	0018      	movs	r0, r3
 800718c:	f7ff ff8e 	bl	80070ac <SPI_EndRxTxTransaction>
 8007190:	1e03      	subs	r3, r0, #0
 8007192:	d005      	beq.n	80071a0 <SPI_CloseTx_ISR+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007198:	2220      	movs	r2, #32
 800719a:	431a      	orrs	r2, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d10a      	bne.n	80071be <SPI_CloseTx_ISR+0x96>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071a8:	2300      	movs	r3, #0
 80071aa:	60fb      	str	r3, [r7, #12]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	60fb      	str	r3, [r7, #12]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	60fb      	str	r3, [r7, #12]
 80071bc:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2251      	movs	r2, #81	; 0x51
 80071c2:	2101      	movs	r1, #1
 80071c4:	5499      	strb	r1, [r3, r2]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d004      	beq.n	80071d8 <SPI_CloseTx_ISR+0xb0>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	0018      	movs	r0, r3
 80071d2:	f7ff fe8b 	bl	8006eec <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80071d6:	e003      	b.n	80071e0 <SPI_CloseTx_ISR+0xb8>
    HAL_SPI_TxCpltCallback(hspi);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	0018      	movs	r0, r3
 80071dc:	f7fa fbd6 	bl	800198c <HAL_SPI_TxCpltCallback>
}
 80071e0:	46c0      	nop			; (mov r8, r8)
 80071e2:	46bd      	mov	sp, r7
 80071e4:	b006      	add	sp, #24
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	20000004 	.word	0x20000004
 80071ec:	00005dc0 	.word	0x00005dc0

080071f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d101      	bne.n	8007202 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	e01e      	b.n	8007240 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2239      	movs	r2, #57	; 0x39
 8007206:	5c9b      	ldrb	r3, [r3, r2]
 8007208:	b2db      	uxtb	r3, r3
 800720a:	2b00      	cmp	r3, #0
 800720c:	d107      	bne.n	800721e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2238      	movs	r2, #56	; 0x38
 8007212:	2100      	movs	r1, #0
 8007214:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	0018      	movs	r0, r3
 800721a:	f7fc fa77 	bl	800370c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2239      	movs	r2, #57	; 0x39
 8007222:	2102      	movs	r1, #2
 8007224:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	3304      	adds	r3, #4
 800722e:	0019      	movs	r1, r3
 8007230:	0010      	movs	r0, r2
 8007232:	f000 fbcb 	bl	80079cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2239      	movs	r2, #57	; 0x39
 800723a:	2101      	movs	r1, #1
 800723c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	0018      	movs	r0, r3
 8007242:	46bd      	mov	sp, r7
 8007244:	b002      	add	sp, #8
 8007246:	bd80      	pop	{r7, pc}

08007248 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68da      	ldr	r2, [r3, #12]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2101      	movs	r1, #1
 800725c:	430a      	orrs	r2, r1
 800725e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	2207      	movs	r2, #7
 8007268:	4013      	ands	r3, r2
 800726a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2b06      	cmp	r3, #6
 8007270:	d007      	beq.n	8007282 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2101      	movs	r1, #1
 800727e:	430a      	orrs	r2, r1
 8007280:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	0018      	movs	r0, r3
 8007286:	46bd      	mov	sp, r7
 8007288:	b004      	add	sp, #16
 800728a:	bd80      	pop	{r7, pc}

0800728c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68da      	ldr	r2, [r3, #12]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2101      	movs	r1, #1
 80072a0:	438a      	bics	r2, r1
 80072a2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6a1b      	ldr	r3, [r3, #32]
 80072aa:	4a08      	ldr	r2, [pc, #32]	; (80072cc <HAL_TIM_Base_Stop_IT+0x40>)
 80072ac:	4013      	ands	r3, r2
 80072ae:	d107      	bne.n	80072c0 <HAL_TIM_Base_Stop_IT+0x34>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2101      	movs	r1, #1
 80072bc:	438a      	bics	r2, r1
 80072be:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	0018      	movs	r0, r3
 80072c4:	46bd      	mov	sp, r7
 80072c6:	b002      	add	sp, #8
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	46c0      	nop			; (mov r8, r8)
 80072cc:	00001111 	.word	0x00001111

080072d0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d101      	bne.n	80072e2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e01e      	b.n	8007320 <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2239      	movs	r2, #57	; 0x39
 80072e6:	5c9b      	ldrb	r3, [r3, r2]
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d107      	bne.n	80072fe <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2238      	movs	r2, #56	; 0x38
 80072f2:	2100      	movs	r1, #0
 80072f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	0018      	movs	r0, r3
 80072fa:	f000 f815 	bl	8007328 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2239      	movs	r2, #57	; 0x39
 8007302:	2102      	movs	r1, #2
 8007304:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	3304      	adds	r3, #4
 800730e:	0019      	movs	r1, r3
 8007310:	0010      	movs	r0, r2
 8007312:	f000 fb5b 	bl	80079cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2239      	movs	r2, #57	; 0x39
 800731a:	2101      	movs	r1, #1
 800731c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	0018      	movs	r0, r3
 8007322:	46bd      	mov	sp, r7
 8007324:	b002      	add	sp, #8
 8007326:	bd80      	pop	{r7, pc}

08007328 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007330:	46c0      	nop			; (mov r8, r8)
 8007332:	46bd      	mov	sp, r7
 8007334:	b002      	add	sp, #8
 8007336:	bd80      	pop	{r7, pc}

08007338 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	2b04      	cmp	r3, #4
 8007346:	d011      	beq.n	800736c <HAL_TIM_OC_Stop_IT+0x34>
 8007348:	d802      	bhi.n	8007350 <HAL_TIM_OC_Stop_IT+0x18>
 800734a:	2b00      	cmp	r3, #0
 800734c:	d005      	beq.n	800735a <HAL_TIM_OC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 800734e:	e028      	b.n	80073a2 <HAL_TIM_OC_Stop_IT+0x6a>
  switch (Channel)
 8007350:	2b08      	cmp	r3, #8
 8007352:	d014      	beq.n	800737e <HAL_TIM_OC_Stop_IT+0x46>
 8007354:	2b0c      	cmp	r3, #12
 8007356:	d01b      	beq.n	8007390 <HAL_TIM_OC_Stop_IT+0x58>
      break;
 8007358:	e023      	b.n	80073a2 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68da      	ldr	r2, [r3, #12]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2102      	movs	r1, #2
 8007366:	438a      	bics	r2, r1
 8007368:	60da      	str	r2, [r3, #12]
      break;
 800736a:	e01a      	b.n	80073a2 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68da      	ldr	r2, [r3, #12]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2104      	movs	r1, #4
 8007378:	438a      	bics	r2, r1
 800737a:	60da      	str	r2, [r3, #12]
      break;
 800737c:	e011      	b.n	80073a2 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68da      	ldr	r2, [r3, #12]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2108      	movs	r1, #8
 800738a:	438a      	bics	r2, r1
 800738c:	60da      	str	r2, [r3, #12]
      break;
 800738e:	e008      	b.n	80073a2 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68da      	ldr	r2, [r3, #12]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2110      	movs	r1, #16
 800739c:	438a      	bics	r2, r1
 800739e:	60da      	str	r2, [r3, #12]
      break;
 80073a0:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	6839      	ldr	r1, [r7, #0]
 80073a8:	2200      	movs	r2, #0
 80073aa:	0018      	movs	r0, r3
 80073ac:	f000 fd0a 	bl	8007dc4 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6a1b      	ldr	r3, [r3, #32]
 80073b6:	4a08      	ldr	r2, [pc, #32]	; (80073d8 <HAL_TIM_OC_Stop_IT+0xa0>)
 80073b8:	4013      	ands	r3, r2
 80073ba:	d107      	bne.n	80073cc <HAL_TIM_OC_Stop_IT+0x94>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2101      	movs	r1, #1
 80073c8:	438a      	bics	r2, r1
 80073ca:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	0018      	movs	r0, r3
 80073d0:	46bd      	mov	sp, r7
 80073d2:	b002      	add	sp, #8
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	46c0      	nop			; (mov r8, r8)
 80073d8:	00001111 	.word	0x00001111

080073dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d101      	bne.n	80073ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e01e      	b.n	800742c <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2239      	movs	r2, #57	; 0x39
 80073f2:	5c9b      	ldrb	r3, [r3, r2]
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d107      	bne.n	800740a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2238      	movs	r2, #56	; 0x38
 80073fe:	2100      	movs	r1, #0
 8007400:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	0018      	movs	r0, r3
 8007406:	f000 f815 	bl	8007434 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2239      	movs	r2, #57	; 0x39
 800740e:	2102      	movs	r1, #2
 8007410:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	3304      	adds	r3, #4
 800741a:	0019      	movs	r1, r3
 800741c:	0010      	movs	r0, r2
 800741e:	f000 fad5 	bl	80079cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2239      	movs	r2, #57	; 0x39
 8007426:	2101      	movs	r1, #1
 8007428:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	0018      	movs	r0, r3
 800742e:	46bd      	mov	sp, r7
 8007430:	b002      	add	sp, #8
 8007432:	bd80      	pop	{r7, pc}

08007434 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800743c:	46c0      	nop			; (mov r8, r8)
 800743e:	46bd      	mov	sp, r7
 8007440:	b002      	add	sp, #8
 8007442:	bd80      	pop	{r7, pc}

08007444 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	2202      	movs	r2, #2
 8007454:	4013      	ands	r3, r2
 8007456:	2b02      	cmp	r3, #2
 8007458:	d124      	bne.n	80074a4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	2202      	movs	r2, #2
 8007462:	4013      	ands	r3, r2
 8007464:	2b02      	cmp	r3, #2
 8007466:	d11d      	bne.n	80074a4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2203      	movs	r2, #3
 800746e:	4252      	negs	r2, r2
 8007470:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2201      	movs	r2, #1
 8007476:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	699b      	ldr	r3, [r3, #24]
 800747e:	2203      	movs	r2, #3
 8007480:	4013      	ands	r3, r2
 8007482:	d004      	beq.n	800748e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	0018      	movs	r0, r3
 8007488:	f000 fa88 	bl	800799c <HAL_TIM_IC_CaptureCallback>
 800748c:	e007      	b.n	800749e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	0018      	movs	r0, r3
 8007492:	f7fc fb15 	bl	8003ac0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	0018      	movs	r0, r3
 800749a:	f000 fa87 	bl	80079ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	2204      	movs	r2, #4
 80074ac:	4013      	ands	r3, r2
 80074ae:	2b04      	cmp	r3, #4
 80074b0:	d125      	bne.n	80074fe <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	2204      	movs	r2, #4
 80074ba:	4013      	ands	r3, r2
 80074bc:	2b04      	cmp	r3, #4
 80074be:	d11e      	bne.n	80074fe <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2205      	movs	r2, #5
 80074c6:	4252      	negs	r2, r2
 80074c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2202      	movs	r2, #2
 80074ce:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	699a      	ldr	r2, [r3, #24]
 80074d6:	23c0      	movs	r3, #192	; 0xc0
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	4013      	ands	r3, r2
 80074dc:	d004      	beq.n	80074e8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	0018      	movs	r0, r3
 80074e2:	f000 fa5b 	bl	800799c <HAL_TIM_IC_CaptureCallback>
 80074e6:	e007      	b.n	80074f8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	0018      	movs	r0, r3
 80074ec:	f7fc fae8 	bl	8003ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	0018      	movs	r0, r3
 80074f4:	f000 fa5a 	bl	80079ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	2208      	movs	r2, #8
 8007506:	4013      	ands	r3, r2
 8007508:	2b08      	cmp	r3, #8
 800750a:	d124      	bne.n	8007556 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	2208      	movs	r2, #8
 8007514:	4013      	ands	r3, r2
 8007516:	2b08      	cmp	r3, #8
 8007518:	d11d      	bne.n	8007556 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2209      	movs	r2, #9
 8007520:	4252      	negs	r2, r2
 8007522:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2204      	movs	r2, #4
 8007528:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	69db      	ldr	r3, [r3, #28]
 8007530:	2203      	movs	r2, #3
 8007532:	4013      	ands	r3, r2
 8007534:	d004      	beq.n	8007540 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	0018      	movs	r0, r3
 800753a:	f000 fa2f 	bl	800799c <HAL_TIM_IC_CaptureCallback>
 800753e:	e007      	b.n	8007550 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	0018      	movs	r0, r3
 8007544:	f7fc fabc 	bl	8003ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	0018      	movs	r0, r3
 800754c:	f000 fa2e 	bl	80079ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	2210      	movs	r2, #16
 800755e:	4013      	ands	r3, r2
 8007560:	2b10      	cmp	r3, #16
 8007562:	d125      	bne.n	80075b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	2210      	movs	r2, #16
 800756c:	4013      	ands	r3, r2
 800756e:	2b10      	cmp	r3, #16
 8007570:	d11e      	bne.n	80075b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2211      	movs	r2, #17
 8007578:	4252      	negs	r2, r2
 800757a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2208      	movs	r2, #8
 8007580:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	69da      	ldr	r2, [r3, #28]
 8007588:	23c0      	movs	r3, #192	; 0xc0
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4013      	ands	r3, r2
 800758e:	d004      	beq.n	800759a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	0018      	movs	r0, r3
 8007594:	f000 fa02 	bl	800799c <HAL_TIM_IC_CaptureCallback>
 8007598:	e007      	b.n	80075aa <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	0018      	movs	r0, r3
 800759e:	f7fc fa8f 	bl	8003ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	0018      	movs	r0, r3
 80075a6:	f000 fa01 	bl	80079ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	2201      	movs	r2, #1
 80075b8:	4013      	ands	r3, r2
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d10f      	bne.n	80075de <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	2201      	movs	r2, #1
 80075c6:	4013      	ands	r3, r2
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d108      	bne.n	80075de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2202      	movs	r2, #2
 80075d2:	4252      	negs	r2, r2
 80075d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	0018      	movs	r0, r3
 80075da:	f7fc fa33 	bl	8003a44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	2240      	movs	r2, #64	; 0x40
 80075e6:	4013      	ands	r3, r2
 80075e8:	2b40      	cmp	r3, #64	; 0x40
 80075ea:	d10f      	bne.n	800760c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	2240      	movs	r2, #64	; 0x40
 80075f4:	4013      	ands	r3, r2
 80075f6:	2b40      	cmp	r3, #64	; 0x40
 80075f8:	d108      	bne.n	800760c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2241      	movs	r2, #65	; 0x41
 8007600:	4252      	negs	r2, r2
 8007602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	0018      	movs	r0, r3
 8007608:	f000 f9d8 	bl	80079bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800760c:	46c0      	nop			; (mov r8, r8)
 800760e:	46bd      	mov	sp, r7
 8007610:	b002      	add	sp, #8
 8007612:	bd80      	pop	{r7, pc}

08007614 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2238      	movs	r2, #56	; 0x38
 8007624:	5c9b      	ldrb	r3, [r3, r2]
 8007626:	2b01      	cmp	r3, #1
 8007628:	d101      	bne.n	800762e <HAL_TIM_OC_ConfigChannel+0x1a>
 800762a:	2302      	movs	r3, #2
 800762c:	e03c      	b.n	80076a8 <HAL_TIM_OC_ConfigChannel+0x94>
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2238      	movs	r2, #56	; 0x38
 8007632:	2101      	movs	r1, #1
 8007634:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2239      	movs	r2, #57	; 0x39
 800763a:	2102      	movs	r1, #2
 800763c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2b04      	cmp	r3, #4
 8007642:	d010      	beq.n	8007666 <HAL_TIM_OC_ConfigChannel+0x52>
 8007644:	d802      	bhi.n	800764c <HAL_TIM_OC_ConfigChannel+0x38>
 8007646:	2b00      	cmp	r3, #0
 8007648:	d005      	beq.n	8007656 <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 800764a:	e024      	b.n	8007696 <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 800764c:	2b08      	cmp	r3, #8
 800764e:	d012      	beq.n	8007676 <HAL_TIM_OC_ConfigChannel+0x62>
 8007650:	2b0c      	cmp	r3, #12
 8007652:	d018      	beq.n	8007686 <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 8007654:	e01f      	b.n	8007696 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	0011      	movs	r1, r2
 800765e:	0018      	movs	r0, r3
 8007660:	f000 fa12 	bl	8007a88 <TIM_OC1_SetConfig>
      break;
 8007664:	e017      	b.n	8007696 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	0011      	movs	r1, r2
 800766e:	0018      	movs	r0, r3
 8007670:	f000 fa46 	bl	8007b00 <TIM_OC2_SetConfig>
      break;
 8007674:	e00f      	b.n	8007696 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68ba      	ldr	r2, [r7, #8]
 800767c:	0011      	movs	r1, r2
 800767e:	0018      	movs	r0, r3
 8007680:	f000 fa80 	bl	8007b84 <TIM_OC3_SetConfig>
      break;
 8007684:	e007      	b.n	8007696 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	0011      	movs	r1, r2
 800768e:	0018      	movs	r0, r3
 8007690:	f000 fab8 	bl	8007c04 <TIM_OC4_SetConfig>
      break;
 8007694:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2239      	movs	r2, #57	; 0x39
 800769a:	2101      	movs	r1, #1
 800769c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2238      	movs	r2, #56	; 0x38
 80076a2:	2100      	movs	r1, #0
 80076a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	0018      	movs	r0, r3
 80076aa:	46bd      	mov	sp, r7
 80076ac:	b004      	add	sp, #16
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2238      	movs	r2, #56	; 0x38
 80076c0:	5c9b      	ldrb	r3, [r3, r2]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d101      	bne.n	80076ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80076c6:	2302      	movs	r3, #2
 80076c8:	e0a4      	b.n	8007814 <HAL_TIM_PWM_ConfigChannel+0x164>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2238      	movs	r2, #56	; 0x38
 80076ce:	2101      	movs	r1, #1
 80076d0:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2239      	movs	r2, #57	; 0x39
 80076d6:	2102      	movs	r1, #2
 80076d8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2b04      	cmp	r3, #4
 80076de:	d029      	beq.n	8007734 <HAL_TIM_PWM_ConfigChannel+0x84>
 80076e0:	d802      	bhi.n	80076e8 <HAL_TIM_PWM_ConfigChannel+0x38>
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d005      	beq.n	80076f2 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 80076e6:	e08c      	b.n	8007802 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 80076e8:	2b08      	cmp	r3, #8
 80076ea:	d046      	beq.n	800777a <HAL_TIM_PWM_ConfigChannel+0xca>
 80076ec:	2b0c      	cmp	r3, #12
 80076ee:	d065      	beq.n	80077bc <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 80076f0:	e087      	b.n	8007802 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68ba      	ldr	r2, [r7, #8]
 80076f8:	0011      	movs	r1, r2
 80076fa:	0018      	movs	r0, r3
 80076fc:	f000 f9c4 	bl	8007a88 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	699a      	ldr	r2, [r3, #24]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2108      	movs	r1, #8
 800770c:	430a      	orrs	r2, r1
 800770e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	699a      	ldr	r2, [r3, #24]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2104      	movs	r1, #4
 800771c:	438a      	bics	r2, r1
 800771e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6999      	ldr	r1, [r3, #24]
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	68da      	ldr	r2, [r3, #12]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	430a      	orrs	r2, r1
 8007730:	619a      	str	r2, [r3, #24]
      break;
 8007732:	e066      	b.n	8007802 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68ba      	ldr	r2, [r7, #8]
 800773a:	0011      	movs	r1, r2
 800773c:	0018      	movs	r0, r3
 800773e:	f000 f9df 	bl	8007b00 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	699a      	ldr	r2, [r3, #24]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2180      	movs	r1, #128	; 0x80
 800774e:	0109      	lsls	r1, r1, #4
 8007750:	430a      	orrs	r2, r1
 8007752:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	699a      	ldr	r2, [r3, #24]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	492f      	ldr	r1, [pc, #188]	; (800781c <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8007760:	400a      	ands	r2, r1
 8007762:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	6999      	ldr	r1, [r3, #24]
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	021a      	lsls	r2, r3, #8
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	430a      	orrs	r2, r1
 8007776:	619a      	str	r2, [r3, #24]
      break;
 8007778:	e043      	b.n	8007802 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	0011      	movs	r1, r2
 8007782:	0018      	movs	r0, r3
 8007784:	f000 f9fe 	bl	8007b84 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	69da      	ldr	r2, [r3, #28]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2108      	movs	r1, #8
 8007794:	430a      	orrs	r2, r1
 8007796:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	69da      	ldr	r2, [r3, #28]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2104      	movs	r1, #4
 80077a4:	438a      	bics	r2, r1
 80077a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	69d9      	ldr	r1, [r3, #28]
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	68da      	ldr	r2, [r3, #12]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	430a      	orrs	r2, r1
 80077b8:	61da      	str	r2, [r3, #28]
      break;
 80077ba:	e022      	b.n	8007802 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	0011      	movs	r1, r2
 80077c4:	0018      	movs	r0, r3
 80077c6:	f000 fa1d 	bl	8007c04 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	69da      	ldr	r2, [r3, #28]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2180      	movs	r1, #128	; 0x80
 80077d6:	0109      	lsls	r1, r1, #4
 80077d8:	430a      	orrs	r2, r1
 80077da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	69da      	ldr	r2, [r3, #28]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	490d      	ldr	r1, [pc, #52]	; (800781c <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80077e8:	400a      	ands	r2, r1
 80077ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	69d9      	ldr	r1, [r3, #28]
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	021a      	lsls	r2, r3, #8
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	430a      	orrs	r2, r1
 80077fe:	61da      	str	r2, [r3, #28]
      break;
 8007800:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2239      	movs	r2, #57	; 0x39
 8007806:	2101      	movs	r1, #1
 8007808:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2238      	movs	r2, #56	; 0x38
 800780e:	2100      	movs	r1, #0
 8007810:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	0018      	movs	r0, r3
 8007816:	46bd      	mov	sp, r7
 8007818:	b004      	add	sp, #16
 800781a:	bd80      	pop	{r7, pc}
 800781c:	fffffbff 	.word	0xfffffbff

08007820 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2238      	movs	r2, #56	; 0x38
 800782e:	5c9b      	ldrb	r3, [r3, r2]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d101      	bne.n	8007838 <HAL_TIM_ConfigClockSource+0x18>
 8007834:	2302      	movs	r3, #2
 8007836:	e0ab      	b.n	8007990 <HAL_TIM_ConfigClockSource+0x170>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2238      	movs	r2, #56	; 0x38
 800783c:	2101      	movs	r1, #1
 800783e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2239      	movs	r2, #57	; 0x39
 8007844:	2102      	movs	r1, #2
 8007846:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2277      	movs	r2, #119	; 0x77
 8007854:	4393      	bics	r3, r2
 8007856:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	4a4f      	ldr	r2, [pc, #316]	; (8007998 <HAL_TIM_ConfigClockSource+0x178>)
 800785c:	4013      	ands	r3, r2
 800785e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2b40      	cmp	r3, #64	; 0x40
 800786e:	d100      	bne.n	8007872 <HAL_TIM_ConfigClockSource+0x52>
 8007870:	e06b      	b.n	800794a <HAL_TIM_ConfigClockSource+0x12a>
 8007872:	d80e      	bhi.n	8007892 <HAL_TIM_ConfigClockSource+0x72>
 8007874:	2b10      	cmp	r3, #16
 8007876:	d100      	bne.n	800787a <HAL_TIM_ConfigClockSource+0x5a>
 8007878:	e077      	b.n	800796a <HAL_TIM_ConfigClockSource+0x14a>
 800787a:	d803      	bhi.n	8007884 <HAL_TIM_ConfigClockSource+0x64>
 800787c:	2b00      	cmp	r3, #0
 800787e:	d100      	bne.n	8007882 <HAL_TIM_ConfigClockSource+0x62>
 8007880:	e073      	b.n	800796a <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007882:	e07c      	b.n	800797e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8007884:	2b20      	cmp	r3, #32
 8007886:	d100      	bne.n	800788a <HAL_TIM_ConfigClockSource+0x6a>
 8007888:	e06f      	b.n	800796a <HAL_TIM_ConfigClockSource+0x14a>
 800788a:	2b30      	cmp	r3, #48	; 0x30
 800788c:	d100      	bne.n	8007890 <HAL_TIM_ConfigClockSource+0x70>
 800788e:	e06c      	b.n	800796a <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8007890:	e075      	b.n	800797e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8007892:	2b70      	cmp	r3, #112	; 0x70
 8007894:	d00e      	beq.n	80078b4 <HAL_TIM_ConfigClockSource+0x94>
 8007896:	d804      	bhi.n	80078a2 <HAL_TIM_ConfigClockSource+0x82>
 8007898:	2b50      	cmp	r3, #80	; 0x50
 800789a:	d036      	beq.n	800790a <HAL_TIM_ConfigClockSource+0xea>
 800789c:	2b60      	cmp	r3, #96	; 0x60
 800789e:	d044      	beq.n	800792a <HAL_TIM_ConfigClockSource+0x10a>
      break;
 80078a0:	e06d      	b.n	800797e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80078a2:	2280      	movs	r2, #128	; 0x80
 80078a4:	0152      	lsls	r2, r2, #5
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d068      	beq.n	800797c <HAL_TIM_ConfigClockSource+0x15c>
 80078aa:	2280      	movs	r2, #128	; 0x80
 80078ac:	0192      	lsls	r2, r2, #6
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d017      	beq.n	80078e2 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80078b2:	e064      	b.n	800797e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6818      	ldr	r0, [r3, #0]
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	6899      	ldr	r1, [r3, #8]
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	685a      	ldr	r2, [r3, #4]
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	f000 fa5e 	bl	8007d84 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2277      	movs	r2, #119	; 0x77
 80078d4:	4313      	orrs	r3, r2
 80078d6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	609a      	str	r2, [r3, #8]
      break;
 80078e0:	e04d      	b.n	800797e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6818      	ldr	r0, [r3, #0]
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	6899      	ldr	r1, [r3, #8]
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	685a      	ldr	r2, [r3, #4]
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	f000 fa47 	bl	8007d84 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	689a      	ldr	r2, [r3, #8]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2180      	movs	r1, #128	; 0x80
 8007902:	01c9      	lsls	r1, r1, #7
 8007904:	430a      	orrs	r2, r1
 8007906:	609a      	str	r2, [r3, #8]
      break;
 8007908:	e039      	b.n	800797e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6818      	ldr	r0, [r3, #0]
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	6859      	ldr	r1, [r3, #4]
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	001a      	movs	r2, r3
 8007918:	f000 f9ba 	bl	8007c90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2150      	movs	r1, #80	; 0x50
 8007922:	0018      	movs	r0, r3
 8007924:	f000 fa14 	bl	8007d50 <TIM_ITRx_SetConfig>
      break;
 8007928:	e029      	b.n	800797e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6818      	ldr	r0, [r3, #0]
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	6859      	ldr	r1, [r3, #4]
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	001a      	movs	r2, r3
 8007938:	f000 f9d8 	bl	8007cec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2160      	movs	r1, #96	; 0x60
 8007942:	0018      	movs	r0, r3
 8007944:	f000 fa04 	bl	8007d50 <TIM_ITRx_SetConfig>
      break;
 8007948:	e019      	b.n	800797e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6818      	ldr	r0, [r3, #0]
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	6859      	ldr	r1, [r3, #4]
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	001a      	movs	r2, r3
 8007958:	f000 f99a 	bl	8007c90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2140      	movs	r1, #64	; 0x40
 8007962:	0018      	movs	r0, r3
 8007964:	f000 f9f4 	bl	8007d50 <TIM_ITRx_SetConfig>
      break;
 8007968:	e009      	b.n	800797e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	0019      	movs	r1, r3
 8007974:	0010      	movs	r0, r2
 8007976:	f000 f9eb 	bl	8007d50 <TIM_ITRx_SetConfig>
      break;
 800797a:	e000      	b.n	800797e <HAL_TIM_ConfigClockSource+0x15e>
      break;
 800797c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2239      	movs	r2, #57	; 0x39
 8007982:	2101      	movs	r1, #1
 8007984:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2238      	movs	r2, #56	; 0x38
 800798a:	2100      	movs	r1, #0
 800798c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	0018      	movs	r0, r3
 8007992:	46bd      	mov	sp, r7
 8007994:	b004      	add	sp, #16
 8007996:	bd80      	pop	{r7, pc}
 8007998:	ffff00ff 	.word	0xffff00ff

0800799c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079a4:	46c0      	nop			; (mov r8, r8)
 80079a6:	46bd      	mov	sp, r7
 80079a8:	b002      	add	sp, #8
 80079aa:	bd80      	pop	{r7, pc}

080079ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079b4:	46c0      	nop			; (mov r8, r8)
 80079b6:	46bd      	mov	sp, r7
 80079b8:	b002      	add	sp, #8
 80079ba:	bd80      	pop	{r7, pc}

080079bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079c4:	46c0      	nop			; (mov r8, r8)
 80079c6:	46bd      	mov	sp, r7
 80079c8:	b002      	add	sp, #8
 80079ca:	bd80      	pop	{r7, pc}

080079cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	2380      	movs	r3, #128	; 0x80
 80079e0:	05db      	lsls	r3, r3, #23
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d00b      	beq.n	80079fe <TIM_Base_SetConfig+0x32>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a23      	ldr	r2, [pc, #140]	; (8007a78 <TIM_Base_SetConfig+0xac>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d007      	beq.n	80079fe <TIM_Base_SetConfig+0x32>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a22      	ldr	r2, [pc, #136]	; (8007a7c <TIM_Base_SetConfig+0xb0>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d003      	beq.n	80079fe <TIM_Base_SetConfig+0x32>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a21      	ldr	r2, [pc, #132]	; (8007a80 <TIM_Base_SetConfig+0xb4>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d108      	bne.n	8007a10 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2270      	movs	r2, #112	; 0x70
 8007a02:	4393      	bics	r3, r2
 8007a04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	2380      	movs	r3, #128	; 0x80
 8007a14:	05db      	lsls	r3, r3, #23
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d00b      	beq.n	8007a32 <TIM_Base_SetConfig+0x66>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a16      	ldr	r2, [pc, #88]	; (8007a78 <TIM_Base_SetConfig+0xac>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d007      	beq.n	8007a32 <TIM_Base_SetConfig+0x66>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a15      	ldr	r2, [pc, #84]	; (8007a7c <TIM_Base_SetConfig+0xb0>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d003      	beq.n	8007a32 <TIM_Base_SetConfig+0x66>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a14      	ldr	r2, [pc, #80]	; (8007a80 <TIM_Base_SetConfig+0xb4>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d108      	bne.n	8007a44 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	4a13      	ldr	r2, [pc, #76]	; (8007a84 <TIM_Base_SetConfig+0xb8>)
 8007a36:	4013      	ands	r3, r2
 8007a38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2280      	movs	r2, #128	; 0x80
 8007a48:	4393      	bics	r3, r2
 8007a4a:	001a      	movs	r2, r3
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	691b      	ldr	r3, [r3, #16]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	689a      	ldr	r2, [r3, #8]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	615a      	str	r2, [r3, #20]
}
 8007a70:	46c0      	nop			; (mov r8, r8)
 8007a72:	46bd      	mov	sp, r7
 8007a74:	b004      	add	sp, #16
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	40000400 	.word	0x40000400
 8007a7c:	40010800 	.word	0x40010800
 8007a80:	40011400 	.word	0x40011400
 8007a84:	fffffcff 	.word	0xfffffcff

08007a88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	2201      	movs	r2, #1
 8007a98:	4393      	bics	r3, r2
 8007a9a:	001a      	movs	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a1b      	ldr	r3, [r3, #32]
 8007aa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2270      	movs	r2, #112	; 0x70
 8007ab6:	4393      	bics	r3, r2
 8007ab8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2203      	movs	r2, #3
 8007abe:	4393      	bics	r3, r2
 8007ac0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	2202      	movs	r2, #2
 8007ad0:	4393      	bics	r3, r2
 8007ad2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	697a      	ldr	r2, [r7, #20]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	693a      	ldr	r2, [r7, #16]
 8007ae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	685a      	ldr	r2, [r3, #4]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	697a      	ldr	r2, [r7, #20]
 8007af6:	621a      	str	r2, [r3, #32]
}
 8007af8:	46c0      	nop			; (mov r8, r8)
 8007afa:	46bd      	mov	sp, r7
 8007afc:	b006      	add	sp, #24
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b086      	sub	sp, #24
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	2210      	movs	r2, #16
 8007b10:	4393      	bics	r3, r2
 8007b12:	001a      	movs	r2, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a1b      	ldr	r3, [r3, #32]
 8007b1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	699b      	ldr	r3, [r3, #24]
 8007b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	4a13      	ldr	r2, [pc, #76]	; (8007b7c <TIM_OC2_SetConfig+0x7c>)
 8007b2e:	4013      	ands	r3, r2
 8007b30:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	4a12      	ldr	r2, [pc, #72]	; (8007b80 <TIM_OC2_SetConfig+0x80>)
 8007b36:	4013      	ands	r3, r2
 8007b38:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	021b      	lsls	r3, r3, #8
 8007b40:	68fa      	ldr	r2, [r7, #12]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	2220      	movs	r2, #32
 8007b4a:	4393      	bics	r3, r2
 8007b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	011b      	lsls	r3, r3, #4
 8007b54:	697a      	ldr	r2, [r7, #20]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	693a      	ldr	r2, [r7, #16]
 8007b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	685a      	ldr	r2, [r3, #4]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	621a      	str	r2, [r3, #32]
}
 8007b74:	46c0      	nop			; (mov r8, r8)
 8007b76:	46bd      	mov	sp, r7
 8007b78:	b006      	add	sp, #24
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	ffff8fff 	.word	0xffff8fff
 8007b80:	fffffcff 	.word	0xfffffcff

08007b84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a1b      	ldr	r3, [r3, #32]
 8007b92:	4a1a      	ldr	r2, [pc, #104]	; (8007bfc <TIM_OC3_SetConfig+0x78>)
 8007b94:	401a      	ands	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a1b      	ldr	r3, [r3, #32]
 8007b9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	69db      	ldr	r3, [r3, #28]
 8007baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2270      	movs	r2, #112	; 0x70
 8007bb0:	4393      	bics	r3, r2
 8007bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2203      	movs	r2, #3
 8007bb8:	4393      	bics	r3, r2
 8007bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	4a0d      	ldr	r2, [pc, #52]	; (8007c00 <TIM_OC3_SetConfig+0x7c>)
 8007bca:	4013      	ands	r3, r2
 8007bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	021b      	lsls	r3, r3, #8
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	685a      	ldr	r2, [r3, #4]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	697a      	ldr	r2, [r7, #20]
 8007bf2:	621a      	str	r2, [r3, #32]
}
 8007bf4:	46c0      	nop			; (mov r8, r8)
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	b006      	add	sp, #24
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	fffffeff 	.word	0xfffffeff
 8007c00:	fffffdff 	.word	0xfffffdff

08007c04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b086      	sub	sp, #24
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a1b      	ldr	r3, [r3, #32]
 8007c12:	4a1b      	ldr	r2, [pc, #108]	; (8007c80 <TIM_OC4_SetConfig+0x7c>)
 8007c14:	401a      	ands	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a1b      	ldr	r3, [r3, #32]
 8007c1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	69db      	ldr	r3, [r3, #28]
 8007c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	4a15      	ldr	r2, [pc, #84]	; (8007c84 <TIM_OC4_SetConfig+0x80>)
 8007c30:	4013      	ands	r3, r2
 8007c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	4a14      	ldr	r2, [pc, #80]	; (8007c88 <TIM_OC4_SetConfig+0x84>)
 8007c38:	4013      	ands	r3, r2
 8007c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	021b      	lsls	r3, r3, #8
 8007c42:	68fa      	ldr	r2, [r7, #12]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	4a10      	ldr	r2, [pc, #64]	; (8007c8c <TIM_OC4_SetConfig+0x88>)
 8007c4c:	4013      	ands	r3, r2
 8007c4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	031b      	lsls	r3, r3, #12
 8007c56:	697a      	ldr	r2, [r7, #20]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	693a      	ldr	r2, [r7, #16]
 8007c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	621a      	str	r2, [r3, #32]
}
 8007c76:	46c0      	nop			; (mov r8, r8)
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	b006      	add	sp, #24
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	46c0      	nop			; (mov r8, r8)
 8007c80:	ffffefff 	.word	0xffffefff
 8007c84:	ffff8fff 	.word	0xffff8fff
 8007c88:	fffffcff 	.word	0xfffffcff
 8007c8c:	ffffdfff 	.word	0xffffdfff

08007c90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6a1b      	ldr	r3, [r3, #32]
 8007ca0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6a1b      	ldr	r3, [r3, #32]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	4393      	bics	r3, r2
 8007caa:	001a      	movs	r2, r3
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	22f0      	movs	r2, #240	; 0xf0
 8007cba:	4393      	bics	r3, r2
 8007cbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	011b      	lsls	r3, r3, #4
 8007cc2:	693a      	ldr	r2, [r7, #16]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	220a      	movs	r2, #10
 8007ccc:	4393      	bics	r3, r2
 8007cce:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007cd0:	697a      	ldr	r2, [r7, #20]
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	693a      	ldr	r2, [r7, #16]
 8007cdc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	697a      	ldr	r2, [r7, #20]
 8007ce2:	621a      	str	r2, [r3, #32]
}
 8007ce4:	46c0      	nop			; (mov r8, r8)
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	b006      	add	sp, #24
 8007cea:	bd80      	pop	{r7, pc}

08007cec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6a1b      	ldr	r3, [r3, #32]
 8007cfc:	2210      	movs	r2, #16
 8007cfe:	4393      	bics	r3, r2
 8007d00:	001a      	movs	r2, r3
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	699b      	ldr	r3, [r3, #24]
 8007d0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6a1b      	ldr	r3, [r3, #32]
 8007d10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	4a0d      	ldr	r2, [pc, #52]	; (8007d4c <TIM_TI2_ConfigInputStage+0x60>)
 8007d16:	4013      	ands	r3, r2
 8007d18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	031b      	lsls	r3, r3, #12
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	22a0      	movs	r2, #160	; 0xa0
 8007d28:	4393      	bics	r3, r2
 8007d2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	011b      	lsls	r3, r3, #4
 8007d30:	693a      	ldr	r2, [r7, #16]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	697a      	ldr	r2, [r7, #20]
 8007d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	693a      	ldr	r2, [r7, #16]
 8007d40:	621a      	str	r2, [r3, #32]
}
 8007d42:	46c0      	nop			; (mov r8, r8)
 8007d44:	46bd      	mov	sp, r7
 8007d46:	b006      	add	sp, #24
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	46c0      	nop			; (mov r8, r8)
 8007d4c:	ffff0fff 	.word	0xffff0fff

08007d50 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2270      	movs	r2, #112	; 0x70
 8007d64:	4393      	bics	r3, r2
 8007d66:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d68:	683a      	ldr	r2, [r7, #0]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	2207      	movs	r2, #7
 8007d70:	4313      	orrs	r3, r2
 8007d72:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	609a      	str	r2, [r3, #8]
}
 8007d7a:	46c0      	nop			; (mov r8, r8)
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	b004      	add	sp, #16
 8007d80:	bd80      	pop	{r7, pc}
	...

08007d84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b086      	sub	sp, #24
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
 8007d90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	4a09      	ldr	r2, [pc, #36]	; (8007dc0 <TIM_ETR_SetConfig+0x3c>)
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	021a      	lsls	r2, r3, #8
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	431a      	orrs	r2, r3
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	697a      	ldr	r2, [r7, #20]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	697a      	ldr	r2, [r7, #20]
 8007db6:	609a      	str	r2, [r3, #8]
}
 8007db8:	46c0      	nop			; (mov r8, r8)
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	b006      	add	sp, #24
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	ffff00ff 	.word	0xffff00ff

08007dc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b086      	sub	sp, #24
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	221f      	movs	r2, #31
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	409a      	lsls	r2, r3
 8007dda:	0013      	movs	r3, r2
 8007ddc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	697a      	ldr	r2, [r7, #20]
 8007de4:	43d2      	mvns	r2, r2
 8007de6:	401a      	ands	r2, r3
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6a1a      	ldr	r2, [r3, #32]
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	211f      	movs	r1, #31
 8007df4:	400b      	ands	r3, r1
 8007df6:	6879      	ldr	r1, [r7, #4]
 8007df8:	4099      	lsls	r1, r3
 8007dfa:	000b      	movs	r3, r1
 8007dfc:	431a      	orrs	r2, r3
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	621a      	str	r2, [r3, #32]
}
 8007e02:	46c0      	nop			; (mov r8, r8)
 8007e04:	46bd      	mov	sp, r7
 8007e06:	b006      	add	sp, #24
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b084      	sub	sp, #16
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2238      	movs	r2, #56	; 0x38
 8007e18:	5c9b      	ldrb	r3, [r3, r2]
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d101      	bne.n	8007e22 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e1e:	2302      	movs	r3, #2
 8007e20:	e032      	b.n	8007e88 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2238      	movs	r2, #56	; 0x38
 8007e26:	2101      	movs	r1, #1
 8007e28:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2239      	movs	r2, #57	; 0x39
 8007e2e:	2102      	movs	r1, #2
 8007e30:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2270      	movs	r2, #112	; 0x70
 8007e46:	4393      	bics	r3, r2
 8007e48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	2280      	movs	r2, #128	; 0x80
 8007e58:	4393      	bics	r3, r2
 8007e5a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	68ba      	ldr	r2, [r7, #8]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	68fa      	ldr	r2, [r7, #12]
 8007e6c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2239      	movs	r2, #57	; 0x39
 8007e7a:	2101      	movs	r1, #1
 8007e7c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2238      	movs	r2, #56	; 0x38
 8007e82:	2100      	movs	r1, #0
 8007e84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	0018      	movs	r0, r3
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	b004      	add	sp, #16
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2238      	movs	r2, #56	; 0x38
 8007e9e:	5c9b      	ldrb	r3, [r3, r2]
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d101      	bne.n	8007ea8 <HAL_TIMEx_RemapConfig+0x18>
 8007ea4:	2302      	movs	r3, #2
 8007ea6:	e00c      	b.n	8007ec2 <HAL_TIMEx_RemapConfig+0x32>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2238      	movs	r2, #56	; 0x38
 8007eac:	2101      	movs	r1, #1
 8007eae:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	683a      	ldr	r2, [r7, #0]
 8007eb6:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2238      	movs	r2, #56	; 0x38
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	0018      	movs	r0, r3
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	b002      	add	sp, #8
 8007ec8:	bd80      	pop	{r7, pc}
	...

08007ecc <calloc>:
 8007ecc:	b510      	push	{r4, lr}
 8007ece:	4b03      	ldr	r3, [pc, #12]	; (8007edc <calloc+0x10>)
 8007ed0:	000a      	movs	r2, r1
 8007ed2:	0001      	movs	r1, r0
 8007ed4:	6818      	ldr	r0, [r3, #0]
 8007ed6:	f000 f83e 	bl	8007f56 <_calloc_r>
 8007eda:	bd10      	pop	{r4, pc}
 8007edc:	20000008 	.word	0x20000008

08007ee0 <__errno>:
 8007ee0:	4b01      	ldr	r3, [pc, #4]	; (8007ee8 <__errno+0x8>)
 8007ee2:	6818      	ldr	r0, [r3, #0]
 8007ee4:	4770      	bx	lr
 8007ee6:	46c0      	nop			; (mov r8, r8)
 8007ee8:	20000008 	.word	0x20000008

08007eec <__libc_init_array>:
 8007eec:	b570      	push	{r4, r5, r6, lr}
 8007eee:	2600      	movs	r6, #0
 8007ef0:	4d0c      	ldr	r5, [pc, #48]	; (8007f24 <__libc_init_array+0x38>)
 8007ef2:	4c0d      	ldr	r4, [pc, #52]	; (8007f28 <__libc_init_array+0x3c>)
 8007ef4:	1b64      	subs	r4, r4, r5
 8007ef6:	10a4      	asrs	r4, r4, #2
 8007ef8:	42a6      	cmp	r6, r4
 8007efa:	d109      	bne.n	8007f10 <__libc_init_array+0x24>
 8007efc:	2600      	movs	r6, #0
 8007efe:	f000 fc37 	bl	8008770 <_init>
 8007f02:	4d0a      	ldr	r5, [pc, #40]	; (8007f2c <__libc_init_array+0x40>)
 8007f04:	4c0a      	ldr	r4, [pc, #40]	; (8007f30 <__libc_init_array+0x44>)
 8007f06:	1b64      	subs	r4, r4, r5
 8007f08:	10a4      	asrs	r4, r4, #2
 8007f0a:	42a6      	cmp	r6, r4
 8007f0c:	d105      	bne.n	8007f1a <__libc_init_array+0x2e>
 8007f0e:	bd70      	pop	{r4, r5, r6, pc}
 8007f10:	00b3      	lsls	r3, r6, #2
 8007f12:	58eb      	ldr	r3, [r5, r3]
 8007f14:	4798      	blx	r3
 8007f16:	3601      	adds	r6, #1
 8007f18:	e7ee      	b.n	8007ef8 <__libc_init_array+0xc>
 8007f1a:	00b3      	lsls	r3, r6, #2
 8007f1c:	58eb      	ldr	r3, [r5, r3]
 8007f1e:	4798      	blx	r3
 8007f20:	3601      	adds	r6, #1
 8007f22:	e7f2      	b.n	8007f0a <__libc_init_array+0x1e>
 8007f24:	08009144 	.word	0x08009144
 8007f28:	08009144 	.word	0x08009144
 8007f2c:	08009144 	.word	0x08009144
 8007f30:	08009148 	.word	0x08009148

08007f34 <memcpy>:
 8007f34:	2300      	movs	r3, #0
 8007f36:	b510      	push	{r4, lr}
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d100      	bne.n	8007f3e <memcpy+0xa>
 8007f3c:	bd10      	pop	{r4, pc}
 8007f3e:	5ccc      	ldrb	r4, [r1, r3]
 8007f40:	54c4      	strb	r4, [r0, r3]
 8007f42:	3301      	adds	r3, #1
 8007f44:	e7f8      	b.n	8007f38 <memcpy+0x4>

08007f46 <memset>:
 8007f46:	0003      	movs	r3, r0
 8007f48:	1812      	adds	r2, r2, r0
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d100      	bne.n	8007f50 <memset+0xa>
 8007f4e:	4770      	bx	lr
 8007f50:	7019      	strb	r1, [r3, #0]
 8007f52:	3301      	adds	r3, #1
 8007f54:	e7f9      	b.n	8007f4a <memset+0x4>

08007f56 <_calloc_r>:
 8007f56:	434a      	muls	r2, r1
 8007f58:	b570      	push	{r4, r5, r6, lr}
 8007f5a:	0011      	movs	r1, r2
 8007f5c:	0014      	movs	r4, r2
 8007f5e:	f000 f809 	bl	8007f74 <_malloc_r>
 8007f62:	1e05      	subs	r5, r0, #0
 8007f64:	d003      	beq.n	8007f6e <_calloc_r+0x18>
 8007f66:	0022      	movs	r2, r4
 8007f68:	2100      	movs	r1, #0
 8007f6a:	f7ff ffec 	bl	8007f46 <memset>
 8007f6e:	0028      	movs	r0, r5
 8007f70:	bd70      	pop	{r4, r5, r6, pc}
	...

08007f74 <_malloc_r>:
 8007f74:	2303      	movs	r3, #3
 8007f76:	b570      	push	{r4, r5, r6, lr}
 8007f78:	1ccd      	adds	r5, r1, #3
 8007f7a:	439d      	bics	r5, r3
 8007f7c:	3508      	adds	r5, #8
 8007f7e:	0006      	movs	r6, r0
 8007f80:	2d0c      	cmp	r5, #12
 8007f82:	d21e      	bcs.n	8007fc2 <_malloc_r+0x4e>
 8007f84:	250c      	movs	r5, #12
 8007f86:	42a9      	cmp	r1, r5
 8007f88:	d81d      	bhi.n	8007fc6 <_malloc_r+0x52>
 8007f8a:	0030      	movs	r0, r6
 8007f8c:	f000 f882 	bl	8008094 <__malloc_lock>
 8007f90:	4a25      	ldr	r2, [pc, #148]	; (8008028 <_malloc_r+0xb4>)
 8007f92:	6814      	ldr	r4, [r2, #0]
 8007f94:	0021      	movs	r1, r4
 8007f96:	2900      	cmp	r1, #0
 8007f98:	d119      	bne.n	8007fce <_malloc_r+0x5a>
 8007f9a:	4c24      	ldr	r4, [pc, #144]	; (800802c <_malloc_r+0xb8>)
 8007f9c:	6823      	ldr	r3, [r4, #0]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d103      	bne.n	8007faa <_malloc_r+0x36>
 8007fa2:	0030      	movs	r0, r6
 8007fa4:	f000 f844 	bl	8008030 <_sbrk_r>
 8007fa8:	6020      	str	r0, [r4, #0]
 8007faa:	0029      	movs	r1, r5
 8007fac:	0030      	movs	r0, r6
 8007fae:	f000 f83f 	bl	8008030 <_sbrk_r>
 8007fb2:	1c43      	adds	r3, r0, #1
 8007fb4:	d12b      	bne.n	800800e <_malloc_r+0x9a>
 8007fb6:	230c      	movs	r3, #12
 8007fb8:	0030      	movs	r0, r6
 8007fba:	6033      	str	r3, [r6, #0]
 8007fbc:	f000 f86b 	bl	8008096 <__malloc_unlock>
 8007fc0:	e003      	b.n	8007fca <_malloc_r+0x56>
 8007fc2:	2d00      	cmp	r5, #0
 8007fc4:	dadf      	bge.n	8007f86 <_malloc_r+0x12>
 8007fc6:	230c      	movs	r3, #12
 8007fc8:	6033      	str	r3, [r6, #0]
 8007fca:	2000      	movs	r0, #0
 8007fcc:	bd70      	pop	{r4, r5, r6, pc}
 8007fce:	680b      	ldr	r3, [r1, #0]
 8007fd0:	1b5b      	subs	r3, r3, r5
 8007fd2:	d419      	bmi.n	8008008 <_malloc_r+0x94>
 8007fd4:	2b0b      	cmp	r3, #11
 8007fd6:	d903      	bls.n	8007fe0 <_malloc_r+0x6c>
 8007fd8:	600b      	str	r3, [r1, #0]
 8007fda:	18cc      	adds	r4, r1, r3
 8007fdc:	6025      	str	r5, [r4, #0]
 8007fde:	e003      	b.n	8007fe8 <_malloc_r+0x74>
 8007fe0:	684b      	ldr	r3, [r1, #4]
 8007fe2:	428c      	cmp	r4, r1
 8007fe4:	d10d      	bne.n	8008002 <_malloc_r+0x8e>
 8007fe6:	6013      	str	r3, [r2, #0]
 8007fe8:	0030      	movs	r0, r6
 8007fea:	f000 f854 	bl	8008096 <__malloc_unlock>
 8007fee:	0020      	movs	r0, r4
 8007ff0:	2207      	movs	r2, #7
 8007ff2:	300b      	adds	r0, #11
 8007ff4:	1d23      	adds	r3, r4, #4
 8007ff6:	4390      	bics	r0, r2
 8007ff8:	1ac3      	subs	r3, r0, r3
 8007ffa:	d0e7      	beq.n	8007fcc <_malloc_r+0x58>
 8007ffc:	425a      	negs	r2, r3
 8007ffe:	50e2      	str	r2, [r4, r3]
 8008000:	e7e4      	b.n	8007fcc <_malloc_r+0x58>
 8008002:	6063      	str	r3, [r4, #4]
 8008004:	000c      	movs	r4, r1
 8008006:	e7ef      	b.n	8007fe8 <_malloc_r+0x74>
 8008008:	000c      	movs	r4, r1
 800800a:	6849      	ldr	r1, [r1, #4]
 800800c:	e7c3      	b.n	8007f96 <_malloc_r+0x22>
 800800e:	2303      	movs	r3, #3
 8008010:	1cc4      	adds	r4, r0, #3
 8008012:	439c      	bics	r4, r3
 8008014:	42a0      	cmp	r0, r4
 8008016:	d0e1      	beq.n	8007fdc <_malloc_r+0x68>
 8008018:	1a21      	subs	r1, r4, r0
 800801a:	0030      	movs	r0, r6
 800801c:	f000 f808 	bl	8008030 <_sbrk_r>
 8008020:	1c43      	adds	r3, r0, #1
 8008022:	d1db      	bne.n	8007fdc <_malloc_r+0x68>
 8008024:	e7c7      	b.n	8007fb6 <_malloc_r+0x42>
 8008026:	46c0      	nop			; (mov r8, r8)
 8008028:	200000c4 	.word	0x200000c4
 800802c:	200000c8 	.word	0x200000c8

08008030 <_sbrk_r>:
 8008030:	2300      	movs	r3, #0
 8008032:	b570      	push	{r4, r5, r6, lr}
 8008034:	4c06      	ldr	r4, [pc, #24]	; (8008050 <_sbrk_r+0x20>)
 8008036:	0005      	movs	r5, r0
 8008038:	0008      	movs	r0, r1
 800803a:	6023      	str	r3, [r4, #0]
 800803c:	f7fb fc98 	bl	8003970 <_sbrk>
 8008040:	1c43      	adds	r3, r0, #1
 8008042:	d103      	bne.n	800804c <_sbrk_r+0x1c>
 8008044:	6823      	ldr	r3, [r4, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d000      	beq.n	800804c <_sbrk_r+0x1c>
 800804a:	602b      	str	r3, [r5, #0]
 800804c:	bd70      	pop	{r4, r5, r6, pc}
 800804e:	46c0      	nop			; (mov r8, r8)
 8008050:	20000344 	.word	0x20000344

08008054 <siprintf>:
 8008054:	b40e      	push	{r1, r2, r3}
 8008056:	b500      	push	{lr}
 8008058:	490b      	ldr	r1, [pc, #44]	; (8008088 <siprintf+0x34>)
 800805a:	b09c      	sub	sp, #112	; 0x70
 800805c:	ab1d      	add	r3, sp, #116	; 0x74
 800805e:	9002      	str	r0, [sp, #8]
 8008060:	9006      	str	r0, [sp, #24]
 8008062:	9107      	str	r1, [sp, #28]
 8008064:	9104      	str	r1, [sp, #16]
 8008066:	4809      	ldr	r0, [pc, #36]	; (800808c <siprintf+0x38>)
 8008068:	4909      	ldr	r1, [pc, #36]	; (8008090 <siprintf+0x3c>)
 800806a:	cb04      	ldmia	r3!, {r2}
 800806c:	9105      	str	r1, [sp, #20]
 800806e:	6800      	ldr	r0, [r0, #0]
 8008070:	a902      	add	r1, sp, #8
 8008072:	9301      	str	r3, [sp, #4]
 8008074:	f000 f872 	bl	800815c <_svfiprintf_r>
 8008078:	2300      	movs	r3, #0
 800807a:	9a02      	ldr	r2, [sp, #8]
 800807c:	7013      	strb	r3, [r2, #0]
 800807e:	b01c      	add	sp, #112	; 0x70
 8008080:	bc08      	pop	{r3}
 8008082:	b003      	add	sp, #12
 8008084:	4718      	bx	r3
 8008086:	46c0      	nop			; (mov r8, r8)
 8008088:	7fffffff 	.word	0x7fffffff
 800808c:	20000008 	.word	0x20000008
 8008090:	ffff0208 	.word	0xffff0208

08008094 <__malloc_lock>:
 8008094:	4770      	bx	lr

08008096 <__malloc_unlock>:
 8008096:	4770      	bx	lr

08008098 <__ssputs_r>:
 8008098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800809a:	688e      	ldr	r6, [r1, #8]
 800809c:	b085      	sub	sp, #20
 800809e:	0007      	movs	r7, r0
 80080a0:	000c      	movs	r4, r1
 80080a2:	9203      	str	r2, [sp, #12]
 80080a4:	9301      	str	r3, [sp, #4]
 80080a6:	429e      	cmp	r6, r3
 80080a8:	d83c      	bhi.n	8008124 <__ssputs_r+0x8c>
 80080aa:	2390      	movs	r3, #144	; 0x90
 80080ac:	898a      	ldrh	r2, [r1, #12]
 80080ae:	00db      	lsls	r3, r3, #3
 80080b0:	421a      	tst	r2, r3
 80080b2:	d034      	beq.n	800811e <__ssputs_r+0x86>
 80080b4:	2503      	movs	r5, #3
 80080b6:	6909      	ldr	r1, [r1, #16]
 80080b8:	6823      	ldr	r3, [r4, #0]
 80080ba:	1a5b      	subs	r3, r3, r1
 80080bc:	9302      	str	r3, [sp, #8]
 80080be:	6963      	ldr	r3, [r4, #20]
 80080c0:	9802      	ldr	r0, [sp, #8]
 80080c2:	435d      	muls	r5, r3
 80080c4:	0feb      	lsrs	r3, r5, #31
 80080c6:	195d      	adds	r5, r3, r5
 80080c8:	9b01      	ldr	r3, [sp, #4]
 80080ca:	106d      	asrs	r5, r5, #1
 80080cc:	3301      	adds	r3, #1
 80080ce:	181b      	adds	r3, r3, r0
 80080d0:	42ab      	cmp	r3, r5
 80080d2:	d900      	bls.n	80080d6 <__ssputs_r+0x3e>
 80080d4:	001d      	movs	r5, r3
 80080d6:	0553      	lsls	r3, r2, #21
 80080d8:	d532      	bpl.n	8008140 <__ssputs_r+0xa8>
 80080da:	0029      	movs	r1, r5
 80080dc:	0038      	movs	r0, r7
 80080de:	f7ff ff49 	bl	8007f74 <_malloc_r>
 80080e2:	1e06      	subs	r6, r0, #0
 80080e4:	d109      	bne.n	80080fa <__ssputs_r+0x62>
 80080e6:	230c      	movs	r3, #12
 80080e8:	603b      	str	r3, [r7, #0]
 80080ea:	2340      	movs	r3, #64	; 0x40
 80080ec:	2001      	movs	r0, #1
 80080ee:	89a2      	ldrh	r2, [r4, #12]
 80080f0:	4240      	negs	r0, r0
 80080f2:	4313      	orrs	r3, r2
 80080f4:	81a3      	strh	r3, [r4, #12]
 80080f6:	b005      	add	sp, #20
 80080f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080fa:	9a02      	ldr	r2, [sp, #8]
 80080fc:	6921      	ldr	r1, [r4, #16]
 80080fe:	f7ff ff19 	bl	8007f34 <memcpy>
 8008102:	89a3      	ldrh	r3, [r4, #12]
 8008104:	4a14      	ldr	r2, [pc, #80]	; (8008158 <__ssputs_r+0xc0>)
 8008106:	401a      	ands	r2, r3
 8008108:	2380      	movs	r3, #128	; 0x80
 800810a:	4313      	orrs	r3, r2
 800810c:	81a3      	strh	r3, [r4, #12]
 800810e:	9b02      	ldr	r3, [sp, #8]
 8008110:	6126      	str	r6, [r4, #16]
 8008112:	18f6      	adds	r6, r6, r3
 8008114:	6026      	str	r6, [r4, #0]
 8008116:	6165      	str	r5, [r4, #20]
 8008118:	9e01      	ldr	r6, [sp, #4]
 800811a:	1aed      	subs	r5, r5, r3
 800811c:	60a5      	str	r5, [r4, #8]
 800811e:	9b01      	ldr	r3, [sp, #4]
 8008120:	429e      	cmp	r6, r3
 8008122:	d900      	bls.n	8008126 <__ssputs_r+0x8e>
 8008124:	9e01      	ldr	r6, [sp, #4]
 8008126:	0032      	movs	r2, r6
 8008128:	9903      	ldr	r1, [sp, #12]
 800812a:	6820      	ldr	r0, [r4, #0]
 800812c:	f000 fa95 	bl	800865a <memmove>
 8008130:	68a3      	ldr	r3, [r4, #8]
 8008132:	2000      	movs	r0, #0
 8008134:	1b9b      	subs	r3, r3, r6
 8008136:	60a3      	str	r3, [r4, #8]
 8008138:	6823      	ldr	r3, [r4, #0]
 800813a:	199e      	adds	r6, r3, r6
 800813c:	6026      	str	r6, [r4, #0]
 800813e:	e7da      	b.n	80080f6 <__ssputs_r+0x5e>
 8008140:	002a      	movs	r2, r5
 8008142:	0038      	movs	r0, r7
 8008144:	f000 fae6 	bl	8008714 <_realloc_r>
 8008148:	1e06      	subs	r6, r0, #0
 800814a:	d1e0      	bne.n	800810e <__ssputs_r+0x76>
 800814c:	6921      	ldr	r1, [r4, #16]
 800814e:	0038      	movs	r0, r7
 8008150:	f000 fa96 	bl	8008680 <_free_r>
 8008154:	e7c7      	b.n	80080e6 <__ssputs_r+0x4e>
 8008156:	46c0      	nop			; (mov r8, r8)
 8008158:	fffffb7f 	.word	0xfffffb7f

0800815c <_svfiprintf_r>:
 800815c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800815e:	b0a1      	sub	sp, #132	; 0x84
 8008160:	9003      	str	r0, [sp, #12]
 8008162:	001d      	movs	r5, r3
 8008164:	898b      	ldrh	r3, [r1, #12]
 8008166:	000f      	movs	r7, r1
 8008168:	0016      	movs	r6, r2
 800816a:	061b      	lsls	r3, r3, #24
 800816c:	d511      	bpl.n	8008192 <_svfiprintf_r+0x36>
 800816e:	690b      	ldr	r3, [r1, #16]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d10e      	bne.n	8008192 <_svfiprintf_r+0x36>
 8008174:	2140      	movs	r1, #64	; 0x40
 8008176:	f7ff fefd 	bl	8007f74 <_malloc_r>
 800817a:	6038      	str	r0, [r7, #0]
 800817c:	6138      	str	r0, [r7, #16]
 800817e:	2800      	cmp	r0, #0
 8008180:	d105      	bne.n	800818e <_svfiprintf_r+0x32>
 8008182:	230c      	movs	r3, #12
 8008184:	9a03      	ldr	r2, [sp, #12]
 8008186:	3801      	subs	r0, #1
 8008188:	6013      	str	r3, [r2, #0]
 800818a:	b021      	add	sp, #132	; 0x84
 800818c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800818e:	2340      	movs	r3, #64	; 0x40
 8008190:	617b      	str	r3, [r7, #20]
 8008192:	2300      	movs	r3, #0
 8008194:	ac08      	add	r4, sp, #32
 8008196:	6163      	str	r3, [r4, #20]
 8008198:	3320      	adds	r3, #32
 800819a:	7663      	strb	r3, [r4, #25]
 800819c:	3310      	adds	r3, #16
 800819e:	76a3      	strb	r3, [r4, #26]
 80081a0:	9507      	str	r5, [sp, #28]
 80081a2:	0035      	movs	r5, r6
 80081a4:	782b      	ldrb	r3, [r5, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d001      	beq.n	80081ae <_svfiprintf_r+0x52>
 80081aa:	2b25      	cmp	r3, #37	; 0x25
 80081ac:	d146      	bne.n	800823c <_svfiprintf_r+0xe0>
 80081ae:	1bab      	subs	r3, r5, r6
 80081b0:	9305      	str	r3, [sp, #20]
 80081b2:	d00c      	beq.n	80081ce <_svfiprintf_r+0x72>
 80081b4:	0032      	movs	r2, r6
 80081b6:	0039      	movs	r1, r7
 80081b8:	9803      	ldr	r0, [sp, #12]
 80081ba:	f7ff ff6d 	bl	8008098 <__ssputs_r>
 80081be:	1c43      	adds	r3, r0, #1
 80081c0:	d100      	bne.n	80081c4 <_svfiprintf_r+0x68>
 80081c2:	e0ae      	b.n	8008322 <_svfiprintf_r+0x1c6>
 80081c4:	6962      	ldr	r2, [r4, #20]
 80081c6:	9b05      	ldr	r3, [sp, #20]
 80081c8:	4694      	mov	ip, r2
 80081ca:	4463      	add	r3, ip
 80081cc:	6163      	str	r3, [r4, #20]
 80081ce:	782b      	ldrb	r3, [r5, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d100      	bne.n	80081d6 <_svfiprintf_r+0x7a>
 80081d4:	e0a5      	b.n	8008322 <_svfiprintf_r+0x1c6>
 80081d6:	2201      	movs	r2, #1
 80081d8:	2300      	movs	r3, #0
 80081da:	4252      	negs	r2, r2
 80081dc:	6062      	str	r2, [r4, #4]
 80081de:	a904      	add	r1, sp, #16
 80081e0:	3254      	adds	r2, #84	; 0x54
 80081e2:	1852      	adds	r2, r2, r1
 80081e4:	1c6e      	adds	r6, r5, #1
 80081e6:	6023      	str	r3, [r4, #0]
 80081e8:	60e3      	str	r3, [r4, #12]
 80081ea:	60a3      	str	r3, [r4, #8]
 80081ec:	7013      	strb	r3, [r2, #0]
 80081ee:	65a3      	str	r3, [r4, #88]	; 0x58
 80081f0:	7831      	ldrb	r1, [r6, #0]
 80081f2:	2205      	movs	r2, #5
 80081f4:	4853      	ldr	r0, [pc, #332]	; (8008344 <_svfiprintf_r+0x1e8>)
 80081f6:	f000 fa25 	bl	8008644 <memchr>
 80081fa:	1c75      	adds	r5, r6, #1
 80081fc:	2800      	cmp	r0, #0
 80081fe:	d11f      	bne.n	8008240 <_svfiprintf_r+0xe4>
 8008200:	6822      	ldr	r2, [r4, #0]
 8008202:	06d3      	lsls	r3, r2, #27
 8008204:	d504      	bpl.n	8008210 <_svfiprintf_r+0xb4>
 8008206:	2353      	movs	r3, #83	; 0x53
 8008208:	a904      	add	r1, sp, #16
 800820a:	185b      	adds	r3, r3, r1
 800820c:	2120      	movs	r1, #32
 800820e:	7019      	strb	r1, [r3, #0]
 8008210:	0713      	lsls	r3, r2, #28
 8008212:	d504      	bpl.n	800821e <_svfiprintf_r+0xc2>
 8008214:	2353      	movs	r3, #83	; 0x53
 8008216:	a904      	add	r1, sp, #16
 8008218:	185b      	adds	r3, r3, r1
 800821a:	212b      	movs	r1, #43	; 0x2b
 800821c:	7019      	strb	r1, [r3, #0]
 800821e:	7833      	ldrb	r3, [r6, #0]
 8008220:	2b2a      	cmp	r3, #42	; 0x2a
 8008222:	d016      	beq.n	8008252 <_svfiprintf_r+0xf6>
 8008224:	0035      	movs	r5, r6
 8008226:	2100      	movs	r1, #0
 8008228:	200a      	movs	r0, #10
 800822a:	68e3      	ldr	r3, [r4, #12]
 800822c:	782a      	ldrb	r2, [r5, #0]
 800822e:	1c6e      	adds	r6, r5, #1
 8008230:	3a30      	subs	r2, #48	; 0x30
 8008232:	2a09      	cmp	r2, #9
 8008234:	d94e      	bls.n	80082d4 <_svfiprintf_r+0x178>
 8008236:	2900      	cmp	r1, #0
 8008238:	d018      	beq.n	800826c <_svfiprintf_r+0x110>
 800823a:	e010      	b.n	800825e <_svfiprintf_r+0x102>
 800823c:	3501      	adds	r5, #1
 800823e:	e7b1      	b.n	80081a4 <_svfiprintf_r+0x48>
 8008240:	4b40      	ldr	r3, [pc, #256]	; (8008344 <_svfiprintf_r+0x1e8>)
 8008242:	6822      	ldr	r2, [r4, #0]
 8008244:	1ac0      	subs	r0, r0, r3
 8008246:	2301      	movs	r3, #1
 8008248:	4083      	lsls	r3, r0
 800824a:	4313      	orrs	r3, r2
 800824c:	6023      	str	r3, [r4, #0]
 800824e:	002e      	movs	r6, r5
 8008250:	e7ce      	b.n	80081f0 <_svfiprintf_r+0x94>
 8008252:	9b07      	ldr	r3, [sp, #28]
 8008254:	1d19      	adds	r1, r3, #4
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	9107      	str	r1, [sp, #28]
 800825a:	2b00      	cmp	r3, #0
 800825c:	db01      	blt.n	8008262 <_svfiprintf_r+0x106>
 800825e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008260:	e004      	b.n	800826c <_svfiprintf_r+0x110>
 8008262:	425b      	negs	r3, r3
 8008264:	60e3      	str	r3, [r4, #12]
 8008266:	2302      	movs	r3, #2
 8008268:	4313      	orrs	r3, r2
 800826a:	6023      	str	r3, [r4, #0]
 800826c:	782b      	ldrb	r3, [r5, #0]
 800826e:	2b2e      	cmp	r3, #46	; 0x2e
 8008270:	d10a      	bne.n	8008288 <_svfiprintf_r+0x12c>
 8008272:	786b      	ldrb	r3, [r5, #1]
 8008274:	2b2a      	cmp	r3, #42	; 0x2a
 8008276:	d135      	bne.n	80082e4 <_svfiprintf_r+0x188>
 8008278:	9b07      	ldr	r3, [sp, #28]
 800827a:	3502      	adds	r5, #2
 800827c:	1d1a      	adds	r2, r3, #4
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	9207      	str	r2, [sp, #28]
 8008282:	2b00      	cmp	r3, #0
 8008284:	db2b      	blt.n	80082de <_svfiprintf_r+0x182>
 8008286:	9309      	str	r3, [sp, #36]	; 0x24
 8008288:	4e2f      	ldr	r6, [pc, #188]	; (8008348 <_svfiprintf_r+0x1ec>)
 800828a:	7829      	ldrb	r1, [r5, #0]
 800828c:	2203      	movs	r2, #3
 800828e:	0030      	movs	r0, r6
 8008290:	f000 f9d8 	bl	8008644 <memchr>
 8008294:	2800      	cmp	r0, #0
 8008296:	d006      	beq.n	80082a6 <_svfiprintf_r+0x14a>
 8008298:	2340      	movs	r3, #64	; 0x40
 800829a:	1b80      	subs	r0, r0, r6
 800829c:	4083      	lsls	r3, r0
 800829e:	6822      	ldr	r2, [r4, #0]
 80082a0:	3501      	adds	r5, #1
 80082a2:	4313      	orrs	r3, r2
 80082a4:	6023      	str	r3, [r4, #0]
 80082a6:	7829      	ldrb	r1, [r5, #0]
 80082a8:	2206      	movs	r2, #6
 80082aa:	4828      	ldr	r0, [pc, #160]	; (800834c <_svfiprintf_r+0x1f0>)
 80082ac:	1c6e      	adds	r6, r5, #1
 80082ae:	7621      	strb	r1, [r4, #24]
 80082b0:	f000 f9c8 	bl	8008644 <memchr>
 80082b4:	2800      	cmp	r0, #0
 80082b6:	d03c      	beq.n	8008332 <_svfiprintf_r+0x1d6>
 80082b8:	4b25      	ldr	r3, [pc, #148]	; (8008350 <_svfiprintf_r+0x1f4>)
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d125      	bne.n	800830a <_svfiprintf_r+0x1ae>
 80082be:	2207      	movs	r2, #7
 80082c0:	9b07      	ldr	r3, [sp, #28]
 80082c2:	3307      	adds	r3, #7
 80082c4:	4393      	bics	r3, r2
 80082c6:	3308      	adds	r3, #8
 80082c8:	9307      	str	r3, [sp, #28]
 80082ca:	6963      	ldr	r3, [r4, #20]
 80082cc:	9a04      	ldr	r2, [sp, #16]
 80082ce:	189b      	adds	r3, r3, r2
 80082d0:	6163      	str	r3, [r4, #20]
 80082d2:	e766      	b.n	80081a2 <_svfiprintf_r+0x46>
 80082d4:	4343      	muls	r3, r0
 80082d6:	2101      	movs	r1, #1
 80082d8:	189b      	adds	r3, r3, r2
 80082da:	0035      	movs	r5, r6
 80082dc:	e7a6      	b.n	800822c <_svfiprintf_r+0xd0>
 80082de:	2301      	movs	r3, #1
 80082e0:	425b      	negs	r3, r3
 80082e2:	e7d0      	b.n	8008286 <_svfiprintf_r+0x12a>
 80082e4:	2300      	movs	r3, #0
 80082e6:	200a      	movs	r0, #10
 80082e8:	001a      	movs	r2, r3
 80082ea:	3501      	adds	r5, #1
 80082ec:	6063      	str	r3, [r4, #4]
 80082ee:	7829      	ldrb	r1, [r5, #0]
 80082f0:	1c6e      	adds	r6, r5, #1
 80082f2:	3930      	subs	r1, #48	; 0x30
 80082f4:	2909      	cmp	r1, #9
 80082f6:	d903      	bls.n	8008300 <_svfiprintf_r+0x1a4>
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d0c5      	beq.n	8008288 <_svfiprintf_r+0x12c>
 80082fc:	9209      	str	r2, [sp, #36]	; 0x24
 80082fe:	e7c3      	b.n	8008288 <_svfiprintf_r+0x12c>
 8008300:	4342      	muls	r2, r0
 8008302:	2301      	movs	r3, #1
 8008304:	1852      	adds	r2, r2, r1
 8008306:	0035      	movs	r5, r6
 8008308:	e7f1      	b.n	80082ee <_svfiprintf_r+0x192>
 800830a:	ab07      	add	r3, sp, #28
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	003a      	movs	r2, r7
 8008310:	4b10      	ldr	r3, [pc, #64]	; (8008354 <_svfiprintf_r+0x1f8>)
 8008312:	0021      	movs	r1, r4
 8008314:	9803      	ldr	r0, [sp, #12]
 8008316:	e000      	b.n	800831a <_svfiprintf_r+0x1be>
 8008318:	bf00      	nop
 800831a:	9004      	str	r0, [sp, #16]
 800831c:	9b04      	ldr	r3, [sp, #16]
 800831e:	3301      	adds	r3, #1
 8008320:	d1d3      	bne.n	80082ca <_svfiprintf_r+0x16e>
 8008322:	89bb      	ldrh	r3, [r7, #12]
 8008324:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008326:	065b      	lsls	r3, r3, #25
 8008328:	d400      	bmi.n	800832c <_svfiprintf_r+0x1d0>
 800832a:	e72e      	b.n	800818a <_svfiprintf_r+0x2e>
 800832c:	2001      	movs	r0, #1
 800832e:	4240      	negs	r0, r0
 8008330:	e72b      	b.n	800818a <_svfiprintf_r+0x2e>
 8008332:	ab07      	add	r3, sp, #28
 8008334:	9300      	str	r3, [sp, #0]
 8008336:	003a      	movs	r2, r7
 8008338:	4b06      	ldr	r3, [pc, #24]	; (8008354 <_svfiprintf_r+0x1f8>)
 800833a:	0021      	movs	r1, r4
 800833c:	9803      	ldr	r0, [sp, #12]
 800833e:	f000 f879 	bl	8008434 <_printf_i>
 8008342:	e7ea      	b.n	800831a <_svfiprintf_r+0x1be>
 8008344:	08009110 	.word	0x08009110
 8008348:	08009116 	.word	0x08009116
 800834c:	0800911a 	.word	0x0800911a
 8008350:	00000000 	.word	0x00000000
 8008354:	08008099 	.word	0x08008099

08008358 <_printf_common>:
 8008358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800835a:	0015      	movs	r5, r2
 800835c:	9301      	str	r3, [sp, #4]
 800835e:	688a      	ldr	r2, [r1, #8]
 8008360:	690b      	ldr	r3, [r1, #16]
 8008362:	9000      	str	r0, [sp, #0]
 8008364:	000c      	movs	r4, r1
 8008366:	4293      	cmp	r3, r2
 8008368:	da00      	bge.n	800836c <_printf_common+0x14>
 800836a:	0013      	movs	r3, r2
 800836c:	0022      	movs	r2, r4
 800836e:	602b      	str	r3, [r5, #0]
 8008370:	3243      	adds	r2, #67	; 0x43
 8008372:	7812      	ldrb	r2, [r2, #0]
 8008374:	2a00      	cmp	r2, #0
 8008376:	d001      	beq.n	800837c <_printf_common+0x24>
 8008378:	3301      	adds	r3, #1
 800837a:	602b      	str	r3, [r5, #0]
 800837c:	6823      	ldr	r3, [r4, #0]
 800837e:	069b      	lsls	r3, r3, #26
 8008380:	d502      	bpl.n	8008388 <_printf_common+0x30>
 8008382:	682b      	ldr	r3, [r5, #0]
 8008384:	3302      	adds	r3, #2
 8008386:	602b      	str	r3, [r5, #0]
 8008388:	2706      	movs	r7, #6
 800838a:	6823      	ldr	r3, [r4, #0]
 800838c:	401f      	ands	r7, r3
 800838e:	d027      	beq.n	80083e0 <_printf_common+0x88>
 8008390:	0023      	movs	r3, r4
 8008392:	3343      	adds	r3, #67	; 0x43
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	1e5a      	subs	r2, r3, #1
 8008398:	4193      	sbcs	r3, r2
 800839a:	6822      	ldr	r2, [r4, #0]
 800839c:	0692      	lsls	r2, r2, #26
 800839e:	d430      	bmi.n	8008402 <_printf_common+0xaa>
 80083a0:	0022      	movs	r2, r4
 80083a2:	9901      	ldr	r1, [sp, #4]
 80083a4:	3243      	adds	r2, #67	; 0x43
 80083a6:	9800      	ldr	r0, [sp, #0]
 80083a8:	9e08      	ldr	r6, [sp, #32]
 80083aa:	47b0      	blx	r6
 80083ac:	1c43      	adds	r3, r0, #1
 80083ae:	d025      	beq.n	80083fc <_printf_common+0xa4>
 80083b0:	2306      	movs	r3, #6
 80083b2:	6820      	ldr	r0, [r4, #0]
 80083b4:	682a      	ldr	r2, [r5, #0]
 80083b6:	68e1      	ldr	r1, [r4, #12]
 80083b8:	4003      	ands	r3, r0
 80083ba:	2500      	movs	r5, #0
 80083bc:	2b04      	cmp	r3, #4
 80083be:	d103      	bne.n	80083c8 <_printf_common+0x70>
 80083c0:	1a8d      	subs	r5, r1, r2
 80083c2:	43eb      	mvns	r3, r5
 80083c4:	17db      	asrs	r3, r3, #31
 80083c6:	401d      	ands	r5, r3
 80083c8:	68a3      	ldr	r3, [r4, #8]
 80083ca:	6922      	ldr	r2, [r4, #16]
 80083cc:	4293      	cmp	r3, r2
 80083ce:	dd01      	ble.n	80083d4 <_printf_common+0x7c>
 80083d0:	1a9b      	subs	r3, r3, r2
 80083d2:	18ed      	adds	r5, r5, r3
 80083d4:	2700      	movs	r7, #0
 80083d6:	42bd      	cmp	r5, r7
 80083d8:	d120      	bne.n	800841c <_printf_common+0xc4>
 80083da:	2000      	movs	r0, #0
 80083dc:	e010      	b.n	8008400 <_printf_common+0xa8>
 80083de:	3701      	adds	r7, #1
 80083e0:	68e3      	ldr	r3, [r4, #12]
 80083e2:	682a      	ldr	r2, [r5, #0]
 80083e4:	1a9b      	subs	r3, r3, r2
 80083e6:	42bb      	cmp	r3, r7
 80083e8:	ddd2      	ble.n	8008390 <_printf_common+0x38>
 80083ea:	0022      	movs	r2, r4
 80083ec:	2301      	movs	r3, #1
 80083ee:	3219      	adds	r2, #25
 80083f0:	9901      	ldr	r1, [sp, #4]
 80083f2:	9800      	ldr	r0, [sp, #0]
 80083f4:	9e08      	ldr	r6, [sp, #32]
 80083f6:	47b0      	blx	r6
 80083f8:	1c43      	adds	r3, r0, #1
 80083fa:	d1f0      	bne.n	80083de <_printf_common+0x86>
 80083fc:	2001      	movs	r0, #1
 80083fe:	4240      	negs	r0, r0
 8008400:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008402:	2030      	movs	r0, #48	; 0x30
 8008404:	18e1      	adds	r1, r4, r3
 8008406:	3143      	adds	r1, #67	; 0x43
 8008408:	7008      	strb	r0, [r1, #0]
 800840a:	0021      	movs	r1, r4
 800840c:	1c5a      	adds	r2, r3, #1
 800840e:	3145      	adds	r1, #69	; 0x45
 8008410:	7809      	ldrb	r1, [r1, #0]
 8008412:	18a2      	adds	r2, r4, r2
 8008414:	3243      	adds	r2, #67	; 0x43
 8008416:	3302      	adds	r3, #2
 8008418:	7011      	strb	r1, [r2, #0]
 800841a:	e7c1      	b.n	80083a0 <_printf_common+0x48>
 800841c:	0022      	movs	r2, r4
 800841e:	2301      	movs	r3, #1
 8008420:	321a      	adds	r2, #26
 8008422:	9901      	ldr	r1, [sp, #4]
 8008424:	9800      	ldr	r0, [sp, #0]
 8008426:	9e08      	ldr	r6, [sp, #32]
 8008428:	47b0      	blx	r6
 800842a:	1c43      	adds	r3, r0, #1
 800842c:	d0e6      	beq.n	80083fc <_printf_common+0xa4>
 800842e:	3701      	adds	r7, #1
 8008430:	e7d1      	b.n	80083d6 <_printf_common+0x7e>
	...

08008434 <_printf_i>:
 8008434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008436:	b089      	sub	sp, #36	; 0x24
 8008438:	9204      	str	r2, [sp, #16]
 800843a:	000a      	movs	r2, r1
 800843c:	3243      	adds	r2, #67	; 0x43
 800843e:	9305      	str	r3, [sp, #20]
 8008440:	9003      	str	r0, [sp, #12]
 8008442:	9202      	str	r2, [sp, #8]
 8008444:	7e0a      	ldrb	r2, [r1, #24]
 8008446:	000c      	movs	r4, r1
 8008448:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800844a:	2a6e      	cmp	r2, #110	; 0x6e
 800844c:	d100      	bne.n	8008450 <_printf_i+0x1c>
 800844e:	e086      	b.n	800855e <_printf_i+0x12a>
 8008450:	d81f      	bhi.n	8008492 <_printf_i+0x5e>
 8008452:	2a63      	cmp	r2, #99	; 0x63
 8008454:	d033      	beq.n	80084be <_printf_i+0x8a>
 8008456:	d808      	bhi.n	800846a <_printf_i+0x36>
 8008458:	2a00      	cmp	r2, #0
 800845a:	d100      	bne.n	800845e <_printf_i+0x2a>
 800845c:	e08c      	b.n	8008578 <_printf_i+0x144>
 800845e:	2a58      	cmp	r2, #88	; 0x58
 8008460:	d04d      	beq.n	80084fe <_printf_i+0xca>
 8008462:	0025      	movs	r5, r4
 8008464:	3542      	adds	r5, #66	; 0x42
 8008466:	702a      	strb	r2, [r5, #0]
 8008468:	e030      	b.n	80084cc <_printf_i+0x98>
 800846a:	2a64      	cmp	r2, #100	; 0x64
 800846c:	d001      	beq.n	8008472 <_printf_i+0x3e>
 800846e:	2a69      	cmp	r2, #105	; 0x69
 8008470:	d1f7      	bne.n	8008462 <_printf_i+0x2e>
 8008472:	6819      	ldr	r1, [r3, #0]
 8008474:	6825      	ldr	r5, [r4, #0]
 8008476:	1d0a      	adds	r2, r1, #4
 8008478:	0628      	lsls	r0, r5, #24
 800847a:	d529      	bpl.n	80084d0 <_printf_i+0x9c>
 800847c:	6808      	ldr	r0, [r1, #0]
 800847e:	601a      	str	r2, [r3, #0]
 8008480:	2800      	cmp	r0, #0
 8008482:	da03      	bge.n	800848c <_printf_i+0x58>
 8008484:	232d      	movs	r3, #45	; 0x2d
 8008486:	9a02      	ldr	r2, [sp, #8]
 8008488:	4240      	negs	r0, r0
 800848a:	7013      	strb	r3, [r2, #0]
 800848c:	4e6b      	ldr	r6, [pc, #428]	; (800863c <_printf_i+0x208>)
 800848e:	270a      	movs	r7, #10
 8008490:	e04f      	b.n	8008532 <_printf_i+0xfe>
 8008492:	2a73      	cmp	r2, #115	; 0x73
 8008494:	d074      	beq.n	8008580 <_printf_i+0x14c>
 8008496:	d808      	bhi.n	80084aa <_printf_i+0x76>
 8008498:	2a6f      	cmp	r2, #111	; 0x6f
 800849a:	d01f      	beq.n	80084dc <_printf_i+0xa8>
 800849c:	2a70      	cmp	r2, #112	; 0x70
 800849e:	d1e0      	bne.n	8008462 <_printf_i+0x2e>
 80084a0:	2220      	movs	r2, #32
 80084a2:	6809      	ldr	r1, [r1, #0]
 80084a4:	430a      	orrs	r2, r1
 80084a6:	6022      	str	r2, [r4, #0]
 80084a8:	e003      	b.n	80084b2 <_printf_i+0x7e>
 80084aa:	2a75      	cmp	r2, #117	; 0x75
 80084ac:	d016      	beq.n	80084dc <_printf_i+0xa8>
 80084ae:	2a78      	cmp	r2, #120	; 0x78
 80084b0:	d1d7      	bne.n	8008462 <_printf_i+0x2e>
 80084b2:	0022      	movs	r2, r4
 80084b4:	2178      	movs	r1, #120	; 0x78
 80084b6:	3245      	adds	r2, #69	; 0x45
 80084b8:	7011      	strb	r1, [r2, #0]
 80084ba:	4e61      	ldr	r6, [pc, #388]	; (8008640 <_printf_i+0x20c>)
 80084bc:	e022      	b.n	8008504 <_printf_i+0xd0>
 80084be:	0025      	movs	r5, r4
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	3542      	adds	r5, #66	; 0x42
 80084c4:	1d11      	adds	r1, r2, #4
 80084c6:	6019      	str	r1, [r3, #0]
 80084c8:	6813      	ldr	r3, [r2, #0]
 80084ca:	702b      	strb	r3, [r5, #0]
 80084cc:	2301      	movs	r3, #1
 80084ce:	e065      	b.n	800859c <_printf_i+0x168>
 80084d0:	6808      	ldr	r0, [r1, #0]
 80084d2:	601a      	str	r2, [r3, #0]
 80084d4:	0669      	lsls	r1, r5, #25
 80084d6:	d5d3      	bpl.n	8008480 <_printf_i+0x4c>
 80084d8:	b200      	sxth	r0, r0
 80084da:	e7d1      	b.n	8008480 <_printf_i+0x4c>
 80084dc:	6819      	ldr	r1, [r3, #0]
 80084de:	6825      	ldr	r5, [r4, #0]
 80084e0:	1d08      	adds	r0, r1, #4
 80084e2:	6018      	str	r0, [r3, #0]
 80084e4:	6808      	ldr	r0, [r1, #0]
 80084e6:	062e      	lsls	r6, r5, #24
 80084e8:	d505      	bpl.n	80084f6 <_printf_i+0xc2>
 80084ea:	4e54      	ldr	r6, [pc, #336]	; (800863c <_printf_i+0x208>)
 80084ec:	2708      	movs	r7, #8
 80084ee:	2a6f      	cmp	r2, #111	; 0x6f
 80084f0:	d01b      	beq.n	800852a <_printf_i+0xf6>
 80084f2:	270a      	movs	r7, #10
 80084f4:	e019      	b.n	800852a <_printf_i+0xf6>
 80084f6:	066d      	lsls	r5, r5, #25
 80084f8:	d5f7      	bpl.n	80084ea <_printf_i+0xb6>
 80084fa:	b280      	uxth	r0, r0
 80084fc:	e7f5      	b.n	80084ea <_printf_i+0xb6>
 80084fe:	3145      	adds	r1, #69	; 0x45
 8008500:	4e4e      	ldr	r6, [pc, #312]	; (800863c <_printf_i+0x208>)
 8008502:	700a      	strb	r2, [r1, #0]
 8008504:	6818      	ldr	r0, [r3, #0]
 8008506:	6822      	ldr	r2, [r4, #0]
 8008508:	1d01      	adds	r1, r0, #4
 800850a:	6800      	ldr	r0, [r0, #0]
 800850c:	6019      	str	r1, [r3, #0]
 800850e:	0615      	lsls	r5, r2, #24
 8008510:	d521      	bpl.n	8008556 <_printf_i+0x122>
 8008512:	07d3      	lsls	r3, r2, #31
 8008514:	d502      	bpl.n	800851c <_printf_i+0xe8>
 8008516:	2320      	movs	r3, #32
 8008518:	431a      	orrs	r2, r3
 800851a:	6022      	str	r2, [r4, #0]
 800851c:	2710      	movs	r7, #16
 800851e:	2800      	cmp	r0, #0
 8008520:	d103      	bne.n	800852a <_printf_i+0xf6>
 8008522:	2320      	movs	r3, #32
 8008524:	6822      	ldr	r2, [r4, #0]
 8008526:	439a      	bics	r2, r3
 8008528:	6022      	str	r2, [r4, #0]
 800852a:	0023      	movs	r3, r4
 800852c:	2200      	movs	r2, #0
 800852e:	3343      	adds	r3, #67	; 0x43
 8008530:	701a      	strb	r2, [r3, #0]
 8008532:	6863      	ldr	r3, [r4, #4]
 8008534:	60a3      	str	r3, [r4, #8]
 8008536:	2b00      	cmp	r3, #0
 8008538:	db58      	blt.n	80085ec <_printf_i+0x1b8>
 800853a:	2204      	movs	r2, #4
 800853c:	6821      	ldr	r1, [r4, #0]
 800853e:	4391      	bics	r1, r2
 8008540:	6021      	str	r1, [r4, #0]
 8008542:	2800      	cmp	r0, #0
 8008544:	d154      	bne.n	80085f0 <_printf_i+0x1bc>
 8008546:	9d02      	ldr	r5, [sp, #8]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d05a      	beq.n	8008602 <_printf_i+0x1ce>
 800854c:	0025      	movs	r5, r4
 800854e:	7833      	ldrb	r3, [r6, #0]
 8008550:	3542      	adds	r5, #66	; 0x42
 8008552:	702b      	strb	r3, [r5, #0]
 8008554:	e055      	b.n	8008602 <_printf_i+0x1ce>
 8008556:	0655      	lsls	r5, r2, #25
 8008558:	d5db      	bpl.n	8008512 <_printf_i+0xde>
 800855a:	b280      	uxth	r0, r0
 800855c:	e7d9      	b.n	8008512 <_printf_i+0xde>
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	680d      	ldr	r5, [r1, #0]
 8008562:	1d10      	adds	r0, r2, #4
 8008564:	6949      	ldr	r1, [r1, #20]
 8008566:	6018      	str	r0, [r3, #0]
 8008568:	6813      	ldr	r3, [r2, #0]
 800856a:	062e      	lsls	r6, r5, #24
 800856c:	d501      	bpl.n	8008572 <_printf_i+0x13e>
 800856e:	6019      	str	r1, [r3, #0]
 8008570:	e002      	b.n	8008578 <_printf_i+0x144>
 8008572:	066d      	lsls	r5, r5, #25
 8008574:	d5fb      	bpl.n	800856e <_printf_i+0x13a>
 8008576:	8019      	strh	r1, [r3, #0]
 8008578:	2300      	movs	r3, #0
 800857a:	9d02      	ldr	r5, [sp, #8]
 800857c:	6123      	str	r3, [r4, #16]
 800857e:	e04f      	b.n	8008620 <_printf_i+0x1ec>
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	1d11      	adds	r1, r2, #4
 8008584:	6019      	str	r1, [r3, #0]
 8008586:	6815      	ldr	r5, [r2, #0]
 8008588:	2100      	movs	r1, #0
 800858a:	6862      	ldr	r2, [r4, #4]
 800858c:	0028      	movs	r0, r5
 800858e:	f000 f859 	bl	8008644 <memchr>
 8008592:	2800      	cmp	r0, #0
 8008594:	d001      	beq.n	800859a <_printf_i+0x166>
 8008596:	1b40      	subs	r0, r0, r5
 8008598:	6060      	str	r0, [r4, #4]
 800859a:	6863      	ldr	r3, [r4, #4]
 800859c:	6123      	str	r3, [r4, #16]
 800859e:	2300      	movs	r3, #0
 80085a0:	9a02      	ldr	r2, [sp, #8]
 80085a2:	7013      	strb	r3, [r2, #0]
 80085a4:	e03c      	b.n	8008620 <_printf_i+0x1ec>
 80085a6:	6923      	ldr	r3, [r4, #16]
 80085a8:	002a      	movs	r2, r5
 80085aa:	9904      	ldr	r1, [sp, #16]
 80085ac:	9803      	ldr	r0, [sp, #12]
 80085ae:	9d05      	ldr	r5, [sp, #20]
 80085b0:	47a8      	blx	r5
 80085b2:	1c43      	adds	r3, r0, #1
 80085b4:	d03e      	beq.n	8008634 <_printf_i+0x200>
 80085b6:	6823      	ldr	r3, [r4, #0]
 80085b8:	079b      	lsls	r3, r3, #30
 80085ba:	d415      	bmi.n	80085e8 <_printf_i+0x1b4>
 80085bc:	9b07      	ldr	r3, [sp, #28]
 80085be:	68e0      	ldr	r0, [r4, #12]
 80085c0:	4298      	cmp	r0, r3
 80085c2:	da39      	bge.n	8008638 <_printf_i+0x204>
 80085c4:	0018      	movs	r0, r3
 80085c6:	e037      	b.n	8008638 <_printf_i+0x204>
 80085c8:	0022      	movs	r2, r4
 80085ca:	2301      	movs	r3, #1
 80085cc:	3219      	adds	r2, #25
 80085ce:	9904      	ldr	r1, [sp, #16]
 80085d0:	9803      	ldr	r0, [sp, #12]
 80085d2:	9e05      	ldr	r6, [sp, #20]
 80085d4:	47b0      	blx	r6
 80085d6:	1c43      	adds	r3, r0, #1
 80085d8:	d02c      	beq.n	8008634 <_printf_i+0x200>
 80085da:	3501      	adds	r5, #1
 80085dc:	68e3      	ldr	r3, [r4, #12]
 80085de:	9a07      	ldr	r2, [sp, #28]
 80085e0:	1a9b      	subs	r3, r3, r2
 80085e2:	42ab      	cmp	r3, r5
 80085e4:	dcf0      	bgt.n	80085c8 <_printf_i+0x194>
 80085e6:	e7e9      	b.n	80085bc <_printf_i+0x188>
 80085e8:	2500      	movs	r5, #0
 80085ea:	e7f7      	b.n	80085dc <_printf_i+0x1a8>
 80085ec:	2800      	cmp	r0, #0
 80085ee:	d0ad      	beq.n	800854c <_printf_i+0x118>
 80085f0:	9d02      	ldr	r5, [sp, #8]
 80085f2:	0039      	movs	r1, r7
 80085f4:	f7f7 fe0e 	bl	8000214 <__aeabi_uidivmod>
 80085f8:	5c73      	ldrb	r3, [r6, r1]
 80085fa:	3d01      	subs	r5, #1
 80085fc:	702b      	strb	r3, [r5, #0]
 80085fe:	2800      	cmp	r0, #0
 8008600:	d1f7      	bne.n	80085f2 <_printf_i+0x1be>
 8008602:	2f08      	cmp	r7, #8
 8008604:	d109      	bne.n	800861a <_printf_i+0x1e6>
 8008606:	6823      	ldr	r3, [r4, #0]
 8008608:	07db      	lsls	r3, r3, #31
 800860a:	d506      	bpl.n	800861a <_printf_i+0x1e6>
 800860c:	6863      	ldr	r3, [r4, #4]
 800860e:	6922      	ldr	r2, [r4, #16]
 8008610:	4293      	cmp	r3, r2
 8008612:	dc02      	bgt.n	800861a <_printf_i+0x1e6>
 8008614:	2330      	movs	r3, #48	; 0x30
 8008616:	3d01      	subs	r5, #1
 8008618:	702b      	strb	r3, [r5, #0]
 800861a:	9b02      	ldr	r3, [sp, #8]
 800861c:	1b5b      	subs	r3, r3, r5
 800861e:	6123      	str	r3, [r4, #16]
 8008620:	9b05      	ldr	r3, [sp, #20]
 8008622:	aa07      	add	r2, sp, #28
 8008624:	9300      	str	r3, [sp, #0]
 8008626:	0021      	movs	r1, r4
 8008628:	9b04      	ldr	r3, [sp, #16]
 800862a:	9803      	ldr	r0, [sp, #12]
 800862c:	f7ff fe94 	bl	8008358 <_printf_common>
 8008630:	1c43      	adds	r3, r0, #1
 8008632:	d1b8      	bne.n	80085a6 <_printf_i+0x172>
 8008634:	2001      	movs	r0, #1
 8008636:	4240      	negs	r0, r0
 8008638:	b009      	add	sp, #36	; 0x24
 800863a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800863c:	08009121 	.word	0x08009121
 8008640:	08009132 	.word	0x08009132

08008644 <memchr>:
 8008644:	b2c9      	uxtb	r1, r1
 8008646:	1882      	adds	r2, r0, r2
 8008648:	4290      	cmp	r0, r2
 800864a:	d101      	bne.n	8008650 <memchr+0xc>
 800864c:	2000      	movs	r0, #0
 800864e:	4770      	bx	lr
 8008650:	7803      	ldrb	r3, [r0, #0]
 8008652:	428b      	cmp	r3, r1
 8008654:	d0fb      	beq.n	800864e <memchr+0xa>
 8008656:	3001      	adds	r0, #1
 8008658:	e7f6      	b.n	8008648 <memchr+0x4>

0800865a <memmove>:
 800865a:	b510      	push	{r4, lr}
 800865c:	4288      	cmp	r0, r1
 800865e:	d902      	bls.n	8008666 <memmove+0xc>
 8008660:	188b      	adds	r3, r1, r2
 8008662:	4298      	cmp	r0, r3
 8008664:	d303      	bcc.n	800866e <memmove+0x14>
 8008666:	2300      	movs	r3, #0
 8008668:	e007      	b.n	800867a <memmove+0x20>
 800866a:	5c8b      	ldrb	r3, [r1, r2]
 800866c:	5483      	strb	r3, [r0, r2]
 800866e:	3a01      	subs	r2, #1
 8008670:	d2fb      	bcs.n	800866a <memmove+0x10>
 8008672:	bd10      	pop	{r4, pc}
 8008674:	5ccc      	ldrb	r4, [r1, r3]
 8008676:	54c4      	strb	r4, [r0, r3]
 8008678:	3301      	adds	r3, #1
 800867a:	429a      	cmp	r2, r3
 800867c:	d1fa      	bne.n	8008674 <memmove+0x1a>
 800867e:	e7f8      	b.n	8008672 <memmove+0x18>

08008680 <_free_r>:
 8008680:	b570      	push	{r4, r5, r6, lr}
 8008682:	0005      	movs	r5, r0
 8008684:	2900      	cmp	r1, #0
 8008686:	d010      	beq.n	80086aa <_free_r+0x2a>
 8008688:	1f0c      	subs	r4, r1, #4
 800868a:	6823      	ldr	r3, [r4, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	da00      	bge.n	8008692 <_free_r+0x12>
 8008690:	18e4      	adds	r4, r4, r3
 8008692:	0028      	movs	r0, r5
 8008694:	f7ff fcfe 	bl	8008094 <__malloc_lock>
 8008698:	4a1d      	ldr	r2, [pc, #116]	; (8008710 <_free_r+0x90>)
 800869a:	6813      	ldr	r3, [r2, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d105      	bne.n	80086ac <_free_r+0x2c>
 80086a0:	6063      	str	r3, [r4, #4]
 80086a2:	6014      	str	r4, [r2, #0]
 80086a4:	0028      	movs	r0, r5
 80086a6:	f7ff fcf6 	bl	8008096 <__malloc_unlock>
 80086aa:	bd70      	pop	{r4, r5, r6, pc}
 80086ac:	42a3      	cmp	r3, r4
 80086ae:	d909      	bls.n	80086c4 <_free_r+0x44>
 80086b0:	6821      	ldr	r1, [r4, #0]
 80086b2:	1860      	adds	r0, r4, r1
 80086b4:	4283      	cmp	r3, r0
 80086b6:	d1f3      	bne.n	80086a0 <_free_r+0x20>
 80086b8:	6818      	ldr	r0, [r3, #0]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	1841      	adds	r1, r0, r1
 80086be:	6021      	str	r1, [r4, #0]
 80086c0:	e7ee      	b.n	80086a0 <_free_r+0x20>
 80086c2:	0013      	movs	r3, r2
 80086c4:	685a      	ldr	r2, [r3, #4]
 80086c6:	2a00      	cmp	r2, #0
 80086c8:	d001      	beq.n	80086ce <_free_r+0x4e>
 80086ca:	42a2      	cmp	r2, r4
 80086cc:	d9f9      	bls.n	80086c2 <_free_r+0x42>
 80086ce:	6819      	ldr	r1, [r3, #0]
 80086d0:	1858      	adds	r0, r3, r1
 80086d2:	42a0      	cmp	r0, r4
 80086d4:	d10b      	bne.n	80086ee <_free_r+0x6e>
 80086d6:	6820      	ldr	r0, [r4, #0]
 80086d8:	1809      	adds	r1, r1, r0
 80086da:	1858      	adds	r0, r3, r1
 80086dc:	6019      	str	r1, [r3, #0]
 80086de:	4282      	cmp	r2, r0
 80086e0:	d1e0      	bne.n	80086a4 <_free_r+0x24>
 80086e2:	6810      	ldr	r0, [r2, #0]
 80086e4:	6852      	ldr	r2, [r2, #4]
 80086e6:	1841      	adds	r1, r0, r1
 80086e8:	6019      	str	r1, [r3, #0]
 80086ea:	605a      	str	r2, [r3, #4]
 80086ec:	e7da      	b.n	80086a4 <_free_r+0x24>
 80086ee:	42a0      	cmp	r0, r4
 80086f0:	d902      	bls.n	80086f8 <_free_r+0x78>
 80086f2:	230c      	movs	r3, #12
 80086f4:	602b      	str	r3, [r5, #0]
 80086f6:	e7d5      	b.n	80086a4 <_free_r+0x24>
 80086f8:	6821      	ldr	r1, [r4, #0]
 80086fa:	1860      	adds	r0, r4, r1
 80086fc:	4282      	cmp	r2, r0
 80086fe:	d103      	bne.n	8008708 <_free_r+0x88>
 8008700:	6810      	ldr	r0, [r2, #0]
 8008702:	6852      	ldr	r2, [r2, #4]
 8008704:	1841      	adds	r1, r0, r1
 8008706:	6021      	str	r1, [r4, #0]
 8008708:	6062      	str	r2, [r4, #4]
 800870a:	605c      	str	r4, [r3, #4]
 800870c:	e7ca      	b.n	80086a4 <_free_r+0x24>
 800870e:	46c0      	nop			; (mov r8, r8)
 8008710:	200000c4 	.word	0x200000c4

08008714 <_realloc_r>:
 8008714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008716:	0007      	movs	r7, r0
 8008718:	000d      	movs	r5, r1
 800871a:	0016      	movs	r6, r2
 800871c:	2900      	cmp	r1, #0
 800871e:	d105      	bne.n	800872c <_realloc_r+0x18>
 8008720:	0011      	movs	r1, r2
 8008722:	f7ff fc27 	bl	8007f74 <_malloc_r>
 8008726:	0004      	movs	r4, r0
 8008728:	0020      	movs	r0, r4
 800872a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800872c:	2a00      	cmp	r2, #0
 800872e:	d103      	bne.n	8008738 <_realloc_r+0x24>
 8008730:	f7ff ffa6 	bl	8008680 <_free_r>
 8008734:	0034      	movs	r4, r6
 8008736:	e7f7      	b.n	8008728 <_realloc_r+0x14>
 8008738:	f000 f812 	bl	8008760 <_malloc_usable_size_r>
 800873c:	002c      	movs	r4, r5
 800873e:	42b0      	cmp	r0, r6
 8008740:	d2f2      	bcs.n	8008728 <_realloc_r+0x14>
 8008742:	0031      	movs	r1, r6
 8008744:	0038      	movs	r0, r7
 8008746:	f7ff fc15 	bl	8007f74 <_malloc_r>
 800874a:	1e04      	subs	r4, r0, #0
 800874c:	d0ec      	beq.n	8008728 <_realloc_r+0x14>
 800874e:	0029      	movs	r1, r5
 8008750:	0032      	movs	r2, r6
 8008752:	f7ff fbef 	bl	8007f34 <memcpy>
 8008756:	0029      	movs	r1, r5
 8008758:	0038      	movs	r0, r7
 800875a:	f7ff ff91 	bl	8008680 <_free_r>
 800875e:	e7e3      	b.n	8008728 <_realloc_r+0x14>

08008760 <_malloc_usable_size_r>:
 8008760:	1f0b      	subs	r3, r1, #4
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	1f18      	subs	r0, r3, #4
 8008766:	2b00      	cmp	r3, #0
 8008768:	da01      	bge.n	800876e <_malloc_usable_size_r+0xe>
 800876a:	580b      	ldr	r3, [r1, r0]
 800876c:	18c0      	adds	r0, r0, r3
 800876e:	4770      	bx	lr

08008770 <_init>:
 8008770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008772:	46c0      	nop			; (mov r8, r8)
 8008774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008776:	bc08      	pop	{r3}
 8008778:	469e      	mov	lr, r3
 800877a:	4770      	bx	lr

0800877c <_fini>:
 800877c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800877e:	46c0      	nop			; (mov r8, r8)
 8008780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008782:	bc08      	pop	{r3}
 8008784:	469e      	mov	lr, r3
 8008786:	4770      	bx	lr
