
project_L0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b388  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ba0  0800b448  0800b448  0001b448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfe8  0800bfe8  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800bfe8  0800bfe8  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bfe8  0800bfe8  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bfe8  0800bfe8  0001bfe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bfec  0800bfec  0001bfec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0800bff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  200000d0  0800c0c0  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  0800c0c0  000203a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a0da  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003344  00000000  00000000  0003a1d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001400  00000000  00000000  0003d518  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001250  00000000  00000000  0003e918  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000183f0  00000000  00000000  0003fb68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011917  00000000  00000000  00057f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008dc8e  00000000  00000000  0006986f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f74fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c2c  00000000  00000000  000f7578  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000d0 	.word	0x200000d0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b430 	.word	0x0800b430

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000d4 	.word	0x200000d4
 8000104:	0800b430 	.word	0x0800b430

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cfrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	1c08      	adds	r0, r1, #0
 8000408:	4661      	mov	r1, ip
 800040a:	e7ff      	b.n	800040c <__aeabi_cfcmpeq>

0800040c <__aeabi_cfcmpeq>:
 800040c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800040e:	f000 f8c1 	bl	8000594 <__lesf2>
 8000412:	2800      	cmp	r0, #0
 8000414:	d401      	bmi.n	800041a <__aeabi_cfcmpeq+0xe>
 8000416:	2100      	movs	r1, #0
 8000418:	42c8      	cmn	r0, r1
 800041a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800041c <__aeabi_fcmpeq>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f000 f843 	bl	80004a8 <__eqsf2>
 8000422:	4240      	negs	r0, r0
 8000424:	3001      	adds	r0, #1
 8000426:	bd10      	pop	{r4, pc}

08000428 <__aeabi_fcmplt>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 f8b3 	bl	8000594 <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	db01      	blt.n	8000436 <__aeabi_fcmplt+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_fcmple>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 f8a9 	bl	8000594 <__lesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dd01      	ble.n	800044a <__aeabi_fcmple+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_fcmpgt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 f851 	bl	80004f8 <__gesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	dc01      	bgt.n	800045e <__aeabi_fcmpgt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_fcmpge>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 f847 	bl	80004f8 <__gesf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	da01      	bge.n	8000472 <__aeabi_fcmpge+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_f2uiz>:
 8000478:	219e      	movs	r1, #158	; 0x9e
 800047a:	b510      	push	{r4, lr}
 800047c:	05c9      	lsls	r1, r1, #23
 800047e:	1c04      	adds	r4, r0, #0
 8000480:	f7ff fff0 	bl	8000464 <__aeabi_fcmpge>
 8000484:	2800      	cmp	r0, #0
 8000486:	d103      	bne.n	8000490 <__aeabi_f2uiz+0x18>
 8000488:	1c20      	adds	r0, r4, #0
 800048a:	f000 fa97 	bl	80009bc <__aeabi_f2iz>
 800048e:	bd10      	pop	{r4, pc}
 8000490:	219e      	movs	r1, #158	; 0x9e
 8000492:	1c20      	adds	r0, r4, #0
 8000494:	05c9      	lsls	r1, r1, #23
 8000496:	f000 f8cd 	bl	8000634 <__aeabi_fsub>
 800049a:	f000 fa8f 	bl	80009bc <__aeabi_f2iz>
 800049e:	2380      	movs	r3, #128	; 0x80
 80004a0:	061b      	lsls	r3, r3, #24
 80004a2:	469c      	mov	ip, r3
 80004a4:	4460      	add	r0, ip
 80004a6:	e7f2      	b.n	800048e <__aeabi_f2uiz+0x16>

080004a8 <__eqsf2>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	0042      	lsls	r2, r0, #1
 80004ac:	024e      	lsls	r6, r1, #9
 80004ae:	004c      	lsls	r4, r1, #1
 80004b0:	0245      	lsls	r5, r0, #9
 80004b2:	0a6d      	lsrs	r5, r5, #9
 80004b4:	0e12      	lsrs	r2, r2, #24
 80004b6:	0fc3      	lsrs	r3, r0, #31
 80004b8:	0a76      	lsrs	r6, r6, #9
 80004ba:	0e24      	lsrs	r4, r4, #24
 80004bc:	0fc9      	lsrs	r1, r1, #31
 80004be:	2aff      	cmp	r2, #255	; 0xff
 80004c0:	d00f      	beq.n	80004e2 <__eqsf2+0x3a>
 80004c2:	2cff      	cmp	r4, #255	; 0xff
 80004c4:	d011      	beq.n	80004ea <__eqsf2+0x42>
 80004c6:	2001      	movs	r0, #1
 80004c8:	42a2      	cmp	r2, r4
 80004ca:	d000      	beq.n	80004ce <__eqsf2+0x26>
 80004cc:	bd70      	pop	{r4, r5, r6, pc}
 80004ce:	42b5      	cmp	r5, r6
 80004d0:	d1fc      	bne.n	80004cc <__eqsf2+0x24>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d00d      	beq.n	80004f2 <__eqsf2+0x4a>
 80004d6:	2a00      	cmp	r2, #0
 80004d8:	d1f8      	bne.n	80004cc <__eqsf2+0x24>
 80004da:	0028      	movs	r0, r5
 80004dc:	1e45      	subs	r5, r0, #1
 80004de:	41a8      	sbcs	r0, r5
 80004e0:	e7f4      	b.n	80004cc <__eqsf2+0x24>
 80004e2:	2001      	movs	r0, #1
 80004e4:	2d00      	cmp	r5, #0
 80004e6:	d1f1      	bne.n	80004cc <__eqsf2+0x24>
 80004e8:	e7eb      	b.n	80004c2 <__eqsf2+0x1a>
 80004ea:	2001      	movs	r0, #1
 80004ec:	2e00      	cmp	r6, #0
 80004ee:	d1ed      	bne.n	80004cc <__eqsf2+0x24>
 80004f0:	e7e9      	b.n	80004c6 <__eqsf2+0x1e>
 80004f2:	2000      	movs	r0, #0
 80004f4:	e7ea      	b.n	80004cc <__eqsf2+0x24>
 80004f6:	46c0      	nop			; (mov r8, r8)

080004f8 <__gesf2>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	004a      	lsls	r2, r1, #1
 80004fc:	024e      	lsls	r6, r1, #9
 80004fe:	0245      	lsls	r5, r0, #9
 8000500:	0044      	lsls	r4, r0, #1
 8000502:	0a6d      	lsrs	r5, r5, #9
 8000504:	0e24      	lsrs	r4, r4, #24
 8000506:	0fc3      	lsrs	r3, r0, #31
 8000508:	0a76      	lsrs	r6, r6, #9
 800050a:	0e12      	lsrs	r2, r2, #24
 800050c:	0fc9      	lsrs	r1, r1, #31
 800050e:	2cff      	cmp	r4, #255	; 0xff
 8000510:	d015      	beq.n	800053e <__gesf2+0x46>
 8000512:	2aff      	cmp	r2, #255	; 0xff
 8000514:	d00e      	beq.n	8000534 <__gesf2+0x3c>
 8000516:	2c00      	cmp	r4, #0
 8000518:	d115      	bne.n	8000546 <__gesf2+0x4e>
 800051a:	2a00      	cmp	r2, #0
 800051c:	d101      	bne.n	8000522 <__gesf2+0x2a>
 800051e:	2e00      	cmp	r6, #0
 8000520:	d01c      	beq.n	800055c <__gesf2+0x64>
 8000522:	2d00      	cmp	r5, #0
 8000524:	d014      	beq.n	8000550 <__gesf2+0x58>
 8000526:	428b      	cmp	r3, r1
 8000528:	d027      	beq.n	800057a <__gesf2+0x82>
 800052a:	2002      	movs	r0, #2
 800052c:	3b01      	subs	r3, #1
 800052e:	4018      	ands	r0, r3
 8000530:	3801      	subs	r0, #1
 8000532:	bd70      	pop	{r4, r5, r6, pc}
 8000534:	2e00      	cmp	r6, #0
 8000536:	d0ee      	beq.n	8000516 <__gesf2+0x1e>
 8000538:	2002      	movs	r0, #2
 800053a:	4240      	negs	r0, r0
 800053c:	e7f9      	b.n	8000532 <__gesf2+0x3a>
 800053e:	2d00      	cmp	r5, #0
 8000540:	d1fa      	bne.n	8000538 <__gesf2+0x40>
 8000542:	2aff      	cmp	r2, #255	; 0xff
 8000544:	d00e      	beq.n	8000564 <__gesf2+0x6c>
 8000546:	2a00      	cmp	r2, #0
 8000548:	d10e      	bne.n	8000568 <__gesf2+0x70>
 800054a:	2e00      	cmp	r6, #0
 800054c:	d0ed      	beq.n	800052a <__gesf2+0x32>
 800054e:	e00b      	b.n	8000568 <__gesf2+0x70>
 8000550:	2301      	movs	r3, #1
 8000552:	3901      	subs	r1, #1
 8000554:	4399      	bics	r1, r3
 8000556:	0008      	movs	r0, r1
 8000558:	3001      	adds	r0, #1
 800055a:	e7ea      	b.n	8000532 <__gesf2+0x3a>
 800055c:	2000      	movs	r0, #0
 800055e:	2d00      	cmp	r5, #0
 8000560:	d0e7      	beq.n	8000532 <__gesf2+0x3a>
 8000562:	e7e2      	b.n	800052a <__gesf2+0x32>
 8000564:	2e00      	cmp	r6, #0
 8000566:	d1e7      	bne.n	8000538 <__gesf2+0x40>
 8000568:	428b      	cmp	r3, r1
 800056a:	d1de      	bne.n	800052a <__gesf2+0x32>
 800056c:	4294      	cmp	r4, r2
 800056e:	dd05      	ble.n	800057c <__gesf2+0x84>
 8000570:	2102      	movs	r1, #2
 8000572:	1e58      	subs	r0, r3, #1
 8000574:	4008      	ands	r0, r1
 8000576:	3801      	subs	r0, #1
 8000578:	e7db      	b.n	8000532 <__gesf2+0x3a>
 800057a:	2400      	movs	r4, #0
 800057c:	42a2      	cmp	r2, r4
 800057e:	dc04      	bgt.n	800058a <__gesf2+0x92>
 8000580:	42b5      	cmp	r5, r6
 8000582:	d8d2      	bhi.n	800052a <__gesf2+0x32>
 8000584:	2000      	movs	r0, #0
 8000586:	42b5      	cmp	r5, r6
 8000588:	d2d3      	bcs.n	8000532 <__gesf2+0x3a>
 800058a:	1e58      	subs	r0, r3, #1
 800058c:	2301      	movs	r3, #1
 800058e:	4398      	bics	r0, r3
 8000590:	3001      	adds	r0, #1
 8000592:	e7ce      	b.n	8000532 <__gesf2+0x3a>

08000594 <__lesf2>:
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	0042      	lsls	r2, r0, #1
 8000598:	0244      	lsls	r4, r0, #9
 800059a:	024d      	lsls	r5, r1, #9
 800059c:	0fc3      	lsrs	r3, r0, #31
 800059e:	0048      	lsls	r0, r1, #1
 80005a0:	0a64      	lsrs	r4, r4, #9
 80005a2:	0e12      	lsrs	r2, r2, #24
 80005a4:	0a6d      	lsrs	r5, r5, #9
 80005a6:	0e00      	lsrs	r0, r0, #24
 80005a8:	0fc9      	lsrs	r1, r1, #31
 80005aa:	2aff      	cmp	r2, #255	; 0xff
 80005ac:	d012      	beq.n	80005d4 <__lesf2+0x40>
 80005ae:	28ff      	cmp	r0, #255	; 0xff
 80005b0:	d00c      	beq.n	80005cc <__lesf2+0x38>
 80005b2:	2a00      	cmp	r2, #0
 80005b4:	d112      	bne.n	80005dc <__lesf2+0x48>
 80005b6:	2800      	cmp	r0, #0
 80005b8:	d119      	bne.n	80005ee <__lesf2+0x5a>
 80005ba:	2d00      	cmp	r5, #0
 80005bc:	d117      	bne.n	80005ee <__lesf2+0x5a>
 80005be:	2c00      	cmp	r4, #0
 80005c0:	d02b      	beq.n	800061a <__lesf2+0x86>
 80005c2:	2002      	movs	r0, #2
 80005c4:	3b01      	subs	r3, #1
 80005c6:	4018      	ands	r0, r3
 80005c8:	3801      	subs	r0, #1
 80005ca:	e026      	b.n	800061a <__lesf2+0x86>
 80005cc:	2d00      	cmp	r5, #0
 80005ce:	d0f0      	beq.n	80005b2 <__lesf2+0x1e>
 80005d0:	2002      	movs	r0, #2
 80005d2:	e022      	b.n	800061a <__lesf2+0x86>
 80005d4:	2c00      	cmp	r4, #0
 80005d6:	d1fb      	bne.n	80005d0 <__lesf2+0x3c>
 80005d8:	28ff      	cmp	r0, #255	; 0xff
 80005da:	d01f      	beq.n	800061c <__lesf2+0x88>
 80005dc:	2800      	cmp	r0, #0
 80005de:	d11f      	bne.n	8000620 <__lesf2+0x8c>
 80005e0:	2d00      	cmp	r5, #0
 80005e2:	d11d      	bne.n	8000620 <__lesf2+0x8c>
 80005e4:	2002      	movs	r0, #2
 80005e6:	3b01      	subs	r3, #1
 80005e8:	4018      	ands	r0, r3
 80005ea:	3801      	subs	r0, #1
 80005ec:	e015      	b.n	800061a <__lesf2+0x86>
 80005ee:	2c00      	cmp	r4, #0
 80005f0:	d00e      	beq.n	8000610 <__lesf2+0x7c>
 80005f2:	428b      	cmp	r3, r1
 80005f4:	d1e5      	bne.n	80005c2 <__lesf2+0x2e>
 80005f6:	2200      	movs	r2, #0
 80005f8:	4290      	cmp	r0, r2
 80005fa:	dc04      	bgt.n	8000606 <__lesf2+0x72>
 80005fc:	42ac      	cmp	r4, r5
 80005fe:	d8e0      	bhi.n	80005c2 <__lesf2+0x2e>
 8000600:	2000      	movs	r0, #0
 8000602:	42ac      	cmp	r4, r5
 8000604:	d209      	bcs.n	800061a <__lesf2+0x86>
 8000606:	1e58      	subs	r0, r3, #1
 8000608:	2301      	movs	r3, #1
 800060a:	4398      	bics	r0, r3
 800060c:	3001      	adds	r0, #1
 800060e:	e004      	b.n	800061a <__lesf2+0x86>
 8000610:	2301      	movs	r3, #1
 8000612:	3901      	subs	r1, #1
 8000614:	4399      	bics	r1, r3
 8000616:	0008      	movs	r0, r1
 8000618:	3001      	adds	r0, #1
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	2d00      	cmp	r5, #0
 800061e:	d1d7      	bne.n	80005d0 <__lesf2+0x3c>
 8000620:	428b      	cmp	r3, r1
 8000622:	d1ce      	bne.n	80005c2 <__lesf2+0x2e>
 8000624:	4282      	cmp	r2, r0
 8000626:	dde7      	ble.n	80005f8 <__lesf2+0x64>
 8000628:	2102      	movs	r1, #2
 800062a:	1e58      	subs	r0, r3, #1
 800062c:	4008      	ands	r0, r1
 800062e:	3801      	subs	r0, #1
 8000630:	e7f3      	b.n	800061a <__lesf2+0x86>
 8000632:	46c0      	nop			; (mov r8, r8)

08000634 <__aeabi_fsub>:
 8000634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000636:	4647      	mov	r7, r8
 8000638:	46ce      	mov	lr, r9
 800063a:	0044      	lsls	r4, r0, #1
 800063c:	0fc2      	lsrs	r2, r0, #31
 800063e:	b580      	push	{r7, lr}
 8000640:	0247      	lsls	r7, r0, #9
 8000642:	0248      	lsls	r0, r1, #9
 8000644:	0a40      	lsrs	r0, r0, #9
 8000646:	4684      	mov	ip, r0
 8000648:	4666      	mov	r6, ip
 800064a:	0048      	lsls	r0, r1, #1
 800064c:	0a7f      	lsrs	r7, r7, #9
 800064e:	0e24      	lsrs	r4, r4, #24
 8000650:	00f6      	lsls	r6, r6, #3
 8000652:	0025      	movs	r5, r4
 8000654:	4690      	mov	r8, r2
 8000656:	00fb      	lsls	r3, r7, #3
 8000658:	0e00      	lsrs	r0, r0, #24
 800065a:	0fc9      	lsrs	r1, r1, #31
 800065c:	46b1      	mov	r9, r6
 800065e:	28ff      	cmp	r0, #255	; 0xff
 8000660:	d100      	bne.n	8000664 <__aeabi_fsub+0x30>
 8000662:	e085      	b.n	8000770 <__aeabi_fsub+0x13c>
 8000664:	2601      	movs	r6, #1
 8000666:	4071      	eors	r1, r6
 8000668:	1a26      	subs	r6, r4, r0
 800066a:	4291      	cmp	r1, r2
 800066c:	d057      	beq.n	800071e <__aeabi_fsub+0xea>
 800066e:	2e00      	cmp	r6, #0
 8000670:	dd43      	ble.n	80006fa <__aeabi_fsub+0xc6>
 8000672:	2800      	cmp	r0, #0
 8000674:	d000      	beq.n	8000678 <__aeabi_fsub+0x44>
 8000676:	e07f      	b.n	8000778 <__aeabi_fsub+0x144>
 8000678:	4649      	mov	r1, r9
 800067a:	2900      	cmp	r1, #0
 800067c:	d100      	bne.n	8000680 <__aeabi_fsub+0x4c>
 800067e:	e0aa      	b.n	80007d6 <__aeabi_fsub+0x1a2>
 8000680:	3e01      	subs	r6, #1
 8000682:	2e00      	cmp	r6, #0
 8000684:	d000      	beq.n	8000688 <__aeabi_fsub+0x54>
 8000686:	e0f7      	b.n	8000878 <__aeabi_fsub+0x244>
 8000688:	1a5b      	subs	r3, r3, r1
 800068a:	015a      	lsls	r2, r3, #5
 800068c:	d400      	bmi.n	8000690 <__aeabi_fsub+0x5c>
 800068e:	e08b      	b.n	80007a8 <__aeabi_fsub+0x174>
 8000690:	019b      	lsls	r3, r3, #6
 8000692:	099c      	lsrs	r4, r3, #6
 8000694:	0020      	movs	r0, r4
 8000696:	f001 f815 	bl	80016c4 <__clzsi2>
 800069a:	3805      	subs	r0, #5
 800069c:	4084      	lsls	r4, r0
 800069e:	4285      	cmp	r5, r0
 80006a0:	dd00      	ble.n	80006a4 <__aeabi_fsub+0x70>
 80006a2:	e0d3      	b.n	800084c <__aeabi_fsub+0x218>
 80006a4:	1b45      	subs	r5, r0, r5
 80006a6:	0023      	movs	r3, r4
 80006a8:	2020      	movs	r0, #32
 80006aa:	3501      	adds	r5, #1
 80006ac:	40eb      	lsrs	r3, r5
 80006ae:	1b45      	subs	r5, r0, r5
 80006b0:	40ac      	lsls	r4, r5
 80006b2:	1e62      	subs	r2, r4, #1
 80006b4:	4194      	sbcs	r4, r2
 80006b6:	4323      	orrs	r3, r4
 80006b8:	2407      	movs	r4, #7
 80006ba:	2500      	movs	r5, #0
 80006bc:	401c      	ands	r4, r3
 80006be:	2201      	movs	r2, #1
 80006c0:	4641      	mov	r1, r8
 80006c2:	400a      	ands	r2, r1
 80006c4:	2c00      	cmp	r4, #0
 80006c6:	d004      	beq.n	80006d2 <__aeabi_fsub+0x9e>
 80006c8:	210f      	movs	r1, #15
 80006ca:	4019      	ands	r1, r3
 80006cc:	2904      	cmp	r1, #4
 80006ce:	d000      	beq.n	80006d2 <__aeabi_fsub+0x9e>
 80006d0:	3304      	adds	r3, #4
 80006d2:	0159      	lsls	r1, r3, #5
 80006d4:	d400      	bmi.n	80006d8 <__aeabi_fsub+0xa4>
 80006d6:	e080      	b.n	80007da <__aeabi_fsub+0x1a6>
 80006d8:	3501      	adds	r5, #1
 80006da:	b2ec      	uxtb	r4, r5
 80006dc:	2dff      	cmp	r5, #255	; 0xff
 80006de:	d000      	beq.n	80006e2 <__aeabi_fsub+0xae>
 80006e0:	e0a3      	b.n	800082a <__aeabi_fsub+0x1f6>
 80006e2:	24ff      	movs	r4, #255	; 0xff
 80006e4:	2300      	movs	r3, #0
 80006e6:	025b      	lsls	r3, r3, #9
 80006e8:	05e4      	lsls	r4, r4, #23
 80006ea:	0a58      	lsrs	r0, r3, #9
 80006ec:	07d2      	lsls	r2, r2, #31
 80006ee:	4320      	orrs	r0, r4
 80006f0:	4310      	orrs	r0, r2
 80006f2:	bc0c      	pop	{r2, r3}
 80006f4:	4690      	mov	r8, r2
 80006f6:	4699      	mov	r9, r3
 80006f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006fa:	2e00      	cmp	r6, #0
 80006fc:	d174      	bne.n	80007e8 <__aeabi_fsub+0x1b4>
 80006fe:	1c60      	adds	r0, r4, #1
 8000700:	b2c0      	uxtb	r0, r0
 8000702:	2801      	cmp	r0, #1
 8000704:	dc00      	bgt.n	8000708 <__aeabi_fsub+0xd4>
 8000706:	e0a7      	b.n	8000858 <__aeabi_fsub+0x224>
 8000708:	464a      	mov	r2, r9
 800070a:	1a9c      	subs	r4, r3, r2
 800070c:	0162      	lsls	r2, r4, #5
 800070e:	d500      	bpl.n	8000712 <__aeabi_fsub+0xde>
 8000710:	e0b6      	b.n	8000880 <__aeabi_fsub+0x24c>
 8000712:	2c00      	cmp	r4, #0
 8000714:	d1be      	bne.n	8000694 <__aeabi_fsub+0x60>
 8000716:	2200      	movs	r2, #0
 8000718:	2400      	movs	r4, #0
 800071a:	2300      	movs	r3, #0
 800071c:	e7e3      	b.n	80006e6 <__aeabi_fsub+0xb2>
 800071e:	2e00      	cmp	r6, #0
 8000720:	dc00      	bgt.n	8000724 <__aeabi_fsub+0xf0>
 8000722:	e085      	b.n	8000830 <__aeabi_fsub+0x1fc>
 8000724:	2800      	cmp	r0, #0
 8000726:	d046      	beq.n	80007b6 <__aeabi_fsub+0x182>
 8000728:	2cff      	cmp	r4, #255	; 0xff
 800072a:	d049      	beq.n	80007c0 <__aeabi_fsub+0x18c>
 800072c:	2280      	movs	r2, #128	; 0x80
 800072e:	4648      	mov	r0, r9
 8000730:	04d2      	lsls	r2, r2, #19
 8000732:	4310      	orrs	r0, r2
 8000734:	4681      	mov	r9, r0
 8000736:	2201      	movs	r2, #1
 8000738:	2e1b      	cmp	r6, #27
 800073a:	dc09      	bgt.n	8000750 <__aeabi_fsub+0x11c>
 800073c:	2020      	movs	r0, #32
 800073e:	464c      	mov	r4, r9
 8000740:	1b80      	subs	r0, r0, r6
 8000742:	4084      	lsls	r4, r0
 8000744:	464a      	mov	r2, r9
 8000746:	0020      	movs	r0, r4
 8000748:	40f2      	lsrs	r2, r6
 800074a:	1e44      	subs	r4, r0, #1
 800074c:	41a0      	sbcs	r0, r4
 800074e:	4302      	orrs	r2, r0
 8000750:	189b      	adds	r3, r3, r2
 8000752:	015a      	lsls	r2, r3, #5
 8000754:	d528      	bpl.n	80007a8 <__aeabi_fsub+0x174>
 8000756:	3501      	adds	r5, #1
 8000758:	2dff      	cmp	r5, #255	; 0xff
 800075a:	d100      	bne.n	800075e <__aeabi_fsub+0x12a>
 800075c:	e0a8      	b.n	80008b0 <__aeabi_fsub+0x27c>
 800075e:	2201      	movs	r2, #1
 8000760:	2407      	movs	r4, #7
 8000762:	4994      	ldr	r1, [pc, #592]	; (80009b4 <__aeabi_fsub+0x380>)
 8000764:	401a      	ands	r2, r3
 8000766:	085b      	lsrs	r3, r3, #1
 8000768:	400b      	ands	r3, r1
 800076a:	4313      	orrs	r3, r2
 800076c:	401c      	ands	r4, r3
 800076e:	e7a6      	b.n	80006be <__aeabi_fsub+0x8a>
 8000770:	2e00      	cmp	r6, #0
 8000772:	d000      	beq.n	8000776 <__aeabi_fsub+0x142>
 8000774:	e778      	b.n	8000668 <__aeabi_fsub+0x34>
 8000776:	e775      	b.n	8000664 <__aeabi_fsub+0x30>
 8000778:	2cff      	cmp	r4, #255	; 0xff
 800077a:	d054      	beq.n	8000826 <__aeabi_fsub+0x1f2>
 800077c:	2280      	movs	r2, #128	; 0x80
 800077e:	4649      	mov	r1, r9
 8000780:	04d2      	lsls	r2, r2, #19
 8000782:	4311      	orrs	r1, r2
 8000784:	4689      	mov	r9, r1
 8000786:	2201      	movs	r2, #1
 8000788:	2e1b      	cmp	r6, #27
 800078a:	dc09      	bgt.n	80007a0 <__aeabi_fsub+0x16c>
 800078c:	2120      	movs	r1, #32
 800078e:	4648      	mov	r0, r9
 8000790:	1b89      	subs	r1, r1, r6
 8000792:	4088      	lsls	r0, r1
 8000794:	464a      	mov	r2, r9
 8000796:	0001      	movs	r1, r0
 8000798:	40f2      	lsrs	r2, r6
 800079a:	1e48      	subs	r0, r1, #1
 800079c:	4181      	sbcs	r1, r0
 800079e:	430a      	orrs	r2, r1
 80007a0:	1a9b      	subs	r3, r3, r2
 80007a2:	015a      	lsls	r2, r3, #5
 80007a4:	d500      	bpl.n	80007a8 <__aeabi_fsub+0x174>
 80007a6:	e773      	b.n	8000690 <__aeabi_fsub+0x5c>
 80007a8:	2201      	movs	r2, #1
 80007aa:	4641      	mov	r1, r8
 80007ac:	400a      	ands	r2, r1
 80007ae:	0759      	lsls	r1, r3, #29
 80007b0:	d000      	beq.n	80007b4 <__aeabi_fsub+0x180>
 80007b2:	e789      	b.n	80006c8 <__aeabi_fsub+0x94>
 80007b4:	e011      	b.n	80007da <__aeabi_fsub+0x1a6>
 80007b6:	4648      	mov	r0, r9
 80007b8:	2800      	cmp	r0, #0
 80007ba:	d158      	bne.n	800086e <__aeabi_fsub+0x23a>
 80007bc:	2cff      	cmp	r4, #255	; 0xff
 80007be:	d10c      	bne.n	80007da <__aeabi_fsub+0x1a6>
 80007c0:	08db      	lsrs	r3, r3, #3
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d100      	bne.n	80007c8 <__aeabi_fsub+0x194>
 80007c6:	e78c      	b.n	80006e2 <__aeabi_fsub+0xae>
 80007c8:	2080      	movs	r0, #128	; 0x80
 80007ca:	03c0      	lsls	r0, r0, #15
 80007cc:	4303      	orrs	r3, r0
 80007ce:	025b      	lsls	r3, r3, #9
 80007d0:	0a5b      	lsrs	r3, r3, #9
 80007d2:	24ff      	movs	r4, #255	; 0xff
 80007d4:	e787      	b.n	80006e6 <__aeabi_fsub+0xb2>
 80007d6:	2cff      	cmp	r4, #255	; 0xff
 80007d8:	d025      	beq.n	8000826 <__aeabi_fsub+0x1f2>
 80007da:	08db      	lsrs	r3, r3, #3
 80007dc:	2dff      	cmp	r5, #255	; 0xff
 80007de:	d0f0      	beq.n	80007c2 <__aeabi_fsub+0x18e>
 80007e0:	025b      	lsls	r3, r3, #9
 80007e2:	0a5b      	lsrs	r3, r3, #9
 80007e4:	b2ec      	uxtb	r4, r5
 80007e6:	e77e      	b.n	80006e6 <__aeabi_fsub+0xb2>
 80007e8:	2c00      	cmp	r4, #0
 80007ea:	d04d      	beq.n	8000888 <__aeabi_fsub+0x254>
 80007ec:	28ff      	cmp	r0, #255	; 0xff
 80007ee:	d018      	beq.n	8000822 <__aeabi_fsub+0x1ee>
 80007f0:	2480      	movs	r4, #128	; 0x80
 80007f2:	04e4      	lsls	r4, r4, #19
 80007f4:	4272      	negs	r2, r6
 80007f6:	4323      	orrs	r3, r4
 80007f8:	2a1b      	cmp	r2, #27
 80007fa:	dd00      	ble.n	80007fe <__aeabi_fsub+0x1ca>
 80007fc:	e0c4      	b.n	8000988 <__aeabi_fsub+0x354>
 80007fe:	001c      	movs	r4, r3
 8000800:	2520      	movs	r5, #32
 8000802:	40d4      	lsrs	r4, r2
 8000804:	1aaa      	subs	r2, r5, r2
 8000806:	4093      	lsls	r3, r2
 8000808:	1e5a      	subs	r2, r3, #1
 800080a:	4193      	sbcs	r3, r2
 800080c:	4323      	orrs	r3, r4
 800080e:	464a      	mov	r2, r9
 8000810:	0005      	movs	r5, r0
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	4688      	mov	r8, r1
 8000816:	e738      	b.n	800068a <__aeabi_fsub+0x56>
 8000818:	1c72      	adds	r2, r6, #1
 800081a:	d0f8      	beq.n	800080e <__aeabi_fsub+0x1da>
 800081c:	43f2      	mvns	r2, r6
 800081e:	28ff      	cmp	r0, #255	; 0xff
 8000820:	d1ea      	bne.n	80007f8 <__aeabi_fsub+0x1c4>
 8000822:	000a      	movs	r2, r1
 8000824:	464b      	mov	r3, r9
 8000826:	25ff      	movs	r5, #255	; 0xff
 8000828:	e7d7      	b.n	80007da <__aeabi_fsub+0x1a6>
 800082a:	019b      	lsls	r3, r3, #6
 800082c:	0a5b      	lsrs	r3, r3, #9
 800082e:	e75a      	b.n	80006e6 <__aeabi_fsub+0xb2>
 8000830:	2e00      	cmp	r6, #0
 8000832:	d141      	bne.n	80008b8 <__aeabi_fsub+0x284>
 8000834:	1c65      	adds	r5, r4, #1
 8000836:	b2e9      	uxtb	r1, r5
 8000838:	2901      	cmp	r1, #1
 800083a:	dd45      	ble.n	80008c8 <__aeabi_fsub+0x294>
 800083c:	2dff      	cmp	r5, #255	; 0xff
 800083e:	d100      	bne.n	8000842 <__aeabi_fsub+0x20e>
 8000840:	e74f      	b.n	80006e2 <__aeabi_fsub+0xae>
 8000842:	2407      	movs	r4, #7
 8000844:	444b      	add	r3, r9
 8000846:	085b      	lsrs	r3, r3, #1
 8000848:	401c      	ands	r4, r3
 800084a:	e738      	b.n	80006be <__aeabi_fsub+0x8a>
 800084c:	2207      	movs	r2, #7
 800084e:	4b5a      	ldr	r3, [pc, #360]	; (80009b8 <__aeabi_fsub+0x384>)
 8000850:	1a2d      	subs	r5, r5, r0
 8000852:	4023      	ands	r3, r4
 8000854:	4014      	ands	r4, r2
 8000856:	e732      	b.n	80006be <__aeabi_fsub+0x8a>
 8000858:	2c00      	cmp	r4, #0
 800085a:	d11d      	bne.n	8000898 <__aeabi_fsub+0x264>
 800085c:	2b00      	cmp	r3, #0
 800085e:	d17a      	bne.n	8000956 <__aeabi_fsub+0x322>
 8000860:	464b      	mov	r3, r9
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_fsub+0x234>
 8000866:	e091      	b.n	800098c <__aeabi_fsub+0x358>
 8000868:	000a      	movs	r2, r1
 800086a:	2500      	movs	r5, #0
 800086c:	e7b5      	b.n	80007da <__aeabi_fsub+0x1a6>
 800086e:	3e01      	subs	r6, #1
 8000870:	2e00      	cmp	r6, #0
 8000872:	d119      	bne.n	80008a8 <__aeabi_fsub+0x274>
 8000874:	444b      	add	r3, r9
 8000876:	e76c      	b.n	8000752 <__aeabi_fsub+0x11e>
 8000878:	2cff      	cmp	r4, #255	; 0xff
 800087a:	d184      	bne.n	8000786 <__aeabi_fsub+0x152>
 800087c:	25ff      	movs	r5, #255	; 0xff
 800087e:	e7ac      	b.n	80007da <__aeabi_fsub+0x1a6>
 8000880:	464a      	mov	r2, r9
 8000882:	4688      	mov	r8, r1
 8000884:	1ad4      	subs	r4, r2, r3
 8000886:	e705      	b.n	8000694 <__aeabi_fsub+0x60>
 8000888:	2b00      	cmp	r3, #0
 800088a:	d1c5      	bne.n	8000818 <__aeabi_fsub+0x1e4>
 800088c:	000a      	movs	r2, r1
 800088e:	28ff      	cmp	r0, #255	; 0xff
 8000890:	d0c8      	beq.n	8000824 <__aeabi_fsub+0x1f0>
 8000892:	0005      	movs	r5, r0
 8000894:	464b      	mov	r3, r9
 8000896:	e7a0      	b.n	80007da <__aeabi_fsub+0x1a6>
 8000898:	2b00      	cmp	r3, #0
 800089a:	d149      	bne.n	8000930 <__aeabi_fsub+0x2fc>
 800089c:	464b      	mov	r3, r9
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d077      	beq.n	8000992 <__aeabi_fsub+0x35e>
 80008a2:	000a      	movs	r2, r1
 80008a4:	25ff      	movs	r5, #255	; 0xff
 80008a6:	e798      	b.n	80007da <__aeabi_fsub+0x1a6>
 80008a8:	2cff      	cmp	r4, #255	; 0xff
 80008aa:	d000      	beq.n	80008ae <__aeabi_fsub+0x27a>
 80008ac:	e743      	b.n	8000736 <__aeabi_fsub+0x102>
 80008ae:	e787      	b.n	80007c0 <__aeabi_fsub+0x18c>
 80008b0:	000a      	movs	r2, r1
 80008b2:	24ff      	movs	r4, #255	; 0xff
 80008b4:	2300      	movs	r3, #0
 80008b6:	e716      	b.n	80006e6 <__aeabi_fsub+0xb2>
 80008b8:	2c00      	cmp	r4, #0
 80008ba:	d115      	bne.n	80008e8 <__aeabi_fsub+0x2b4>
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d157      	bne.n	8000970 <__aeabi_fsub+0x33c>
 80008c0:	28ff      	cmp	r0, #255	; 0xff
 80008c2:	d1e6      	bne.n	8000892 <__aeabi_fsub+0x25e>
 80008c4:	464b      	mov	r3, r9
 80008c6:	e77b      	b.n	80007c0 <__aeabi_fsub+0x18c>
 80008c8:	2c00      	cmp	r4, #0
 80008ca:	d120      	bne.n	800090e <__aeabi_fsub+0x2da>
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d057      	beq.n	8000980 <__aeabi_fsub+0x34c>
 80008d0:	4649      	mov	r1, r9
 80008d2:	2900      	cmp	r1, #0
 80008d4:	d053      	beq.n	800097e <__aeabi_fsub+0x34a>
 80008d6:	444b      	add	r3, r9
 80008d8:	015a      	lsls	r2, r3, #5
 80008da:	d568      	bpl.n	80009ae <__aeabi_fsub+0x37a>
 80008dc:	2407      	movs	r4, #7
 80008de:	4a36      	ldr	r2, [pc, #216]	; (80009b8 <__aeabi_fsub+0x384>)
 80008e0:	401c      	ands	r4, r3
 80008e2:	2501      	movs	r5, #1
 80008e4:	4013      	ands	r3, r2
 80008e6:	e6ea      	b.n	80006be <__aeabi_fsub+0x8a>
 80008e8:	28ff      	cmp	r0, #255	; 0xff
 80008ea:	d0eb      	beq.n	80008c4 <__aeabi_fsub+0x290>
 80008ec:	2280      	movs	r2, #128	; 0x80
 80008ee:	04d2      	lsls	r2, r2, #19
 80008f0:	4276      	negs	r6, r6
 80008f2:	4313      	orrs	r3, r2
 80008f4:	2e1b      	cmp	r6, #27
 80008f6:	dc53      	bgt.n	80009a0 <__aeabi_fsub+0x36c>
 80008f8:	2520      	movs	r5, #32
 80008fa:	1bad      	subs	r5, r5, r6
 80008fc:	001a      	movs	r2, r3
 80008fe:	40ab      	lsls	r3, r5
 8000900:	40f2      	lsrs	r2, r6
 8000902:	1e5c      	subs	r4, r3, #1
 8000904:	41a3      	sbcs	r3, r4
 8000906:	4313      	orrs	r3, r2
 8000908:	444b      	add	r3, r9
 800090a:	0005      	movs	r5, r0
 800090c:	e721      	b.n	8000752 <__aeabi_fsub+0x11e>
 800090e:	2b00      	cmp	r3, #0
 8000910:	d0d8      	beq.n	80008c4 <__aeabi_fsub+0x290>
 8000912:	4649      	mov	r1, r9
 8000914:	2900      	cmp	r1, #0
 8000916:	d100      	bne.n	800091a <__aeabi_fsub+0x2e6>
 8000918:	e752      	b.n	80007c0 <__aeabi_fsub+0x18c>
 800091a:	2180      	movs	r1, #128	; 0x80
 800091c:	03c9      	lsls	r1, r1, #15
 800091e:	420f      	tst	r7, r1
 8000920:	d100      	bne.n	8000924 <__aeabi_fsub+0x2f0>
 8000922:	e74d      	b.n	80007c0 <__aeabi_fsub+0x18c>
 8000924:	4660      	mov	r0, ip
 8000926:	4208      	tst	r0, r1
 8000928:	d000      	beq.n	800092c <__aeabi_fsub+0x2f8>
 800092a:	e749      	b.n	80007c0 <__aeabi_fsub+0x18c>
 800092c:	464b      	mov	r3, r9
 800092e:	e747      	b.n	80007c0 <__aeabi_fsub+0x18c>
 8000930:	4648      	mov	r0, r9
 8000932:	25ff      	movs	r5, #255	; 0xff
 8000934:	2800      	cmp	r0, #0
 8000936:	d100      	bne.n	800093a <__aeabi_fsub+0x306>
 8000938:	e74f      	b.n	80007da <__aeabi_fsub+0x1a6>
 800093a:	2280      	movs	r2, #128	; 0x80
 800093c:	03d2      	lsls	r2, r2, #15
 800093e:	4217      	tst	r7, r2
 8000940:	d004      	beq.n	800094c <__aeabi_fsub+0x318>
 8000942:	4660      	mov	r0, ip
 8000944:	4210      	tst	r0, r2
 8000946:	d101      	bne.n	800094c <__aeabi_fsub+0x318>
 8000948:	464b      	mov	r3, r9
 800094a:	4688      	mov	r8, r1
 800094c:	2201      	movs	r2, #1
 800094e:	4641      	mov	r1, r8
 8000950:	25ff      	movs	r5, #255	; 0xff
 8000952:	400a      	ands	r2, r1
 8000954:	e741      	b.n	80007da <__aeabi_fsub+0x1a6>
 8000956:	4648      	mov	r0, r9
 8000958:	2800      	cmp	r0, #0
 800095a:	d01f      	beq.n	800099c <__aeabi_fsub+0x368>
 800095c:	1a1a      	subs	r2, r3, r0
 800095e:	0150      	lsls	r0, r2, #5
 8000960:	d520      	bpl.n	80009a4 <__aeabi_fsub+0x370>
 8000962:	464a      	mov	r2, r9
 8000964:	2407      	movs	r4, #7
 8000966:	1ad3      	subs	r3, r2, r3
 8000968:	401c      	ands	r4, r3
 800096a:	4688      	mov	r8, r1
 800096c:	2500      	movs	r5, #0
 800096e:	e6a6      	b.n	80006be <__aeabi_fsub+0x8a>
 8000970:	1c74      	adds	r4, r6, #1
 8000972:	d0c9      	beq.n	8000908 <__aeabi_fsub+0x2d4>
 8000974:	43f6      	mvns	r6, r6
 8000976:	28ff      	cmp	r0, #255	; 0xff
 8000978:	d1bc      	bne.n	80008f4 <__aeabi_fsub+0x2c0>
 800097a:	464b      	mov	r3, r9
 800097c:	e720      	b.n	80007c0 <__aeabi_fsub+0x18c>
 800097e:	4699      	mov	r9, r3
 8000980:	464b      	mov	r3, r9
 8000982:	2500      	movs	r5, #0
 8000984:	08db      	lsrs	r3, r3, #3
 8000986:	e72b      	b.n	80007e0 <__aeabi_fsub+0x1ac>
 8000988:	2301      	movs	r3, #1
 800098a:	e740      	b.n	800080e <__aeabi_fsub+0x1da>
 800098c:	2200      	movs	r2, #0
 800098e:	2300      	movs	r3, #0
 8000990:	e6a9      	b.n	80006e6 <__aeabi_fsub+0xb2>
 8000992:	2380      	movs	r3, #128	; 0x80
 8000994:	2200      	movs	r2, #0
 8000996:	03db      	lsls	r3, r3, #15
 8000998:	24ff      	movs	r4, #255	; 0xff
 800099a:	e6a4      	b.n	80006e6 <__aeabi_fsub+0xb2>
 800099c:	2500      	movs	r5, #0
 800099e:	e71c      	b.n	80007da <__aeabi_fsub+0x1a6>
 80009a0:	2301      	movs	r3, #1
 80009a2:	e7b1      	b.n	8000908 <__aeabi_fsub+0x2d4>
 80009a4:	2a00      	cmp	r2, #0
 80009a6:	d0f1      	beq.n	800098c <__aeabi_fsub+0x358>
 80009a8:	0013      	movs	r3, r2
 80009aa:	2500      	movs	r5, #0
 80009ac:	e6fc      	b.n	80007a8 <__aeabi_fsub+0x174>
 80009ae:	2500      	movs	r5, #0
 80009b0:	e6fa      	b.n	80007a8 <__aeabi_fsub+0x174>
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	7dffffff 	.word	0x7dffffff
 80009b8:	fbffffff 	.word	0xfbffffff

080009bc <__aeabi_f2iz>:
 80009bc:	0241      	lsls	r1, r0, #9
 80009be:	0042      	lsls	r2, r0, #1
 80009c0:	0fc3      	lsrs	r3, r0, #31
 80009c2:	0a49      	lsrs	r1, r1, #9
 80009c4:	0e12      	lsrs	r2, r2, #24
 80009c6:	2000      	movs	r0, #0
 80009c8:	2a7e      	cmp	r2, #126	; 0x7e
 80009ca:	d90d      	bls.n	80009e8 <__aeabi_f2iz+0x2c>
 80009cc:	2a9d      	cmp	r2, #157	; 0x9d
 80009ce:	d80c      	bhi.n	80009ea <__aeabi_f2iz+0x2e>
 80009d0:	2080      	movs	r0, #128	; 0x80
 80009d2:	0400      	lsls	r0, r0, #16
 80009d4:	4301      	orrs	r1, r0
 80009d6:	2a95      	cmp	r2, #149	; 0x95
 80009d8:	dc0a      	bgt.n	80009f0 <__aeabi_f2iz+0x34>
 80009da:	2096      	movs	r0, #150	; 0x96
 80009dc:	1a82      	subs	r2, r0, r2
 80009de:	40d1      	lsrs	r1, r2
 80009e0:	4248      	negs	r0, r1
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d100      	bne.n	80009e8 <__aeabi_f2iz+0x2c>
 80009e6:	0008      	movs	r0, r1
 80009e8:	4770      	bx	lr
 80009ea:	4a03      	ldr	r2, [pc, #12]	; (80009f8 <__aeabi_f2iz+0x3c>)
 80009ec:	1898      	adds	r0, r3, r2
 80009ee:	e7fb      	b.n	80009e8 <__aeabi_f2iz+0x2c>
 80009f0:	3a96      	subs	r2, #150	; 0x96
 80009f2:	4091      	lsls	r1, r2
 80009f4:	e7f4      	b.n	80009e0 <__aeabi_f2iz+0x24>
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	7fffffff 	.word	0x7fffffff

080009fc <__aeabi_ddiv>:
 80009fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009fe:	4657      	mov	r7, sl
 8000a00:	46de      	mov	lr, fp
 8000a02:	464e      	mov	r6, r9
 8000a04:	4645      	mov	r5, r8
 8000a06:	b5e0      	push	{r5, r6, r7, lr}
 8000a08:	4683      	mov	fp, r0
 8000a0a:	0007      	movs	r7, r0
 8000a0c:	030e      	lsls	r6, r1, #12
 8000a0e:	0048      	lsls	r0, r1, #1
 8000a10:	b085      	sub	sp, #20
 8000a12:	4692      	mov	sl, r2
 8000a14:	001c      	movs	r4, r3
 8000a16:	0b36      	lsrs	r6, r6, #12
 8000a18:	0d40      	lsrs	r0, r0, #21
 8000a1a:	0fcd      	lsrs	r5, r1, #31
 8000a1c:	2800      	cmp	r0, #0
 8000a1e:	d100      	bne.n	8000a22 <__aeabi_ddiv+0x26>
 8000a20:	e09d      	b.n	8000b5e <__aeabi_ddiv+0x162>
 8000a22:	4b95      	ldr	r3, [pc, #596]	; (8000c78 <__aeabi_ddiv+0x27c>)
 8000a24:	4298      	cmp	r0, r3
 8000a26:	d039      	beq.n	8000a9c <__aeabi_ddiv+0xa0>
 8000a28:	2380      	movs	r3, #128	; 0x80
 8000a2a:	00f6      	lsls	r6, r6, #3
 8000a2c:	041b      	lsls	r3, r3, #16
 8000a2e:	431e      	orrs	r6, r3
 8000a30:	4a92      	ldr	r2, [pc, #584]	; (8000c7c <__aeabi_ddiv+0x280>)
 8000a32:	0f7b      	lsrs	r3, r7, #29
 8000a34:	4333      	orrs	r3, r6
 8000a36:	4699      	mov	r9, r3
 8000a38:	4694      	mov	ip, r2
 8000a3a:	0003      	movs	r3, r0
 8000a3c:	4463      	add	r3, ip
 8000a3e:	9300      	str	r3, [sp, #0]
 8000a40:	2300      	movs	r3, #0
 8000a42:	2600      	movs	r6, #0
 8000a44:	00ff      	lsls	r7, r7, #3
 8000a46:	9302      	str	r3, [sp, #8]
 8000a48:	0323      	lsls	r3, r4, #12
 8000a4a:	0b1b      	lsrs	r3, r3, #12
 8000a4c:	4698      	mov	r8, r3
 8000a4e:	0063      	lsls	r3, r4, #1
 8000a50:	0fe4      	lsrs	r4, r4, #31
 8000a52:	4652      	mov	r2, sl
 8000a54:	0d5b      	lsrs	r3, r3, #21
 8000a56:	9401      	str	r4, [sp, #4]
 8000a58:	d100      	bne.n	8000a5c <__aeabi_ddiv+0x60>
 8000a5a:	e0b3      	b.n	8000bc4 <__aeabi_ddiv+0x1c8>
 8000a5c:	4986      	ldr	r1, [pc, #536]	; (8000c78 <__aeabi_ddiv+0x27c>)
 8000a5e:	428b      	cmp	r3, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_ddiv+0x68>
 8000a62:	e09e      	b.n	8000ba2 <__aeabi_ddiv+0x1a6>
 8000a64:	4642      	mov	r2, r8
 8000a66:	00d1      	lsls	r1, r2, #3
 8000a68:	2280      	movs	r2, #128	; 0x80
 8000a6a:	0412      	lsls	r2, r2, #16
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	4651      	mov	r1, sl
 8000a70:	0f49      	lsrs	r1, r1, #29
 8000a72:	4311      	orrs	r1, r2
 8000a74:	468b      	mov	fp, r1
 8000a76:	4981      	ldr	r1, [pc, #516]	; (8000c7c <__aeabi_ddiv+0x280>)
 8000a78:	4652      	mov	r2, sl
 8000a7a:	468c      	mov	ip, r1
 8000a7c:	9900      	ldr	r1, [sp, #0]
 8000a7e:	4463      	add	r3, ip
 8000a80:	1acb      	subs	r3, r1, r3
 8000a82:	2100      	movs	r1, #0
 8000a84:	00d2      	lsls	r2, r2, #3
 8000a86:	9300      	str	r3, [sp, #0]
 8000a88:	002b      	movs	r3, r5
 8000a8a:	4063      	eors	r3, r4
 8000a8c:	469a      	mov	sl, r3
 8000a8e:	2e0f      	cmp	r6, #15
 8000a90:	d900      	bls.n	8000a94 <__aeabi_ddiv+0x98>
 8000a92:	e105      	b.n	8000ca0 <__aeabi_ddiv+0x2a4>
 8000a94:	4b7a      	ldr	r3, [pc, #488]	; (8000c80 <__aeabi_ddiv+0x284>)
 8000a96:	00b6      	lsls	r6, r6, #2
 8000a98:	599b      	ldr	r3, [r3, r6]
 8000a9a:	469f      	mov	pc, r3
 8000a9c:	465b      	mov	r3, fp
 8000a9e:	4333      	orrs	r3, r6
 8000aa0:	4699      	mov	r9, r3
 8000aa2:	d000      	beq.n	8000aa6 <__aeabi_ddiv+0xaa>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_ddiv+0x21c>
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	2608      	movs	r6, #8
 8000aaa:	2700      	movs	r7, #0
 8000aac:	9000      	str	r0, [sp, #0]
 8000aae:	9302      	str	r3, [sp, #8]
 8000ab0:	e7ca      	b.n	8000a48 <__aeabi_ddiv+0x4c>
 8000ab2:	46cb      	mov	fp, r9
 8000ab4:	003a      	movs	r2, r7
 8000ab6:	9902      	ldr	r1, [sp, #8]
 8000ab8:	9501      	str	r5, [sp, #4]
 8000aba:	9b01      	ldr	r3, [sp, #4]
 8000abc:	469a      	mov	sl, r3
 8000abe:	2902      	cmp	r1, #2
 8000ac0:	d027      	beq.n	8000b12 <__aeabi_ddiv+0x116>
 8000ac2:	2903      	cmp	r1, #3
 8000ac4:	d100      	bne.n	8000ac8 <__aeabi_ddiv+0xcc>
 8000ac6:	e280      	b.n	8000fca <__aeabi_ddiv+0x5ce>
 8000ac8:	2901      	cmp	r1, #1
 8000aca:	d044      	beq.n	8000b56 <__aeabi_ddiv+0x15a>
 8000acc:	496d      	ldr	r1, [pc, #436]	; (8000c84 <__aeabi_ddiv+0x288>)
 8000ace:	9b00      	ldr	r3, [sp, #0]
 8000ad0:	468c      	mov	ip, r1
 8000ad2:	4463      	add	r3, ip
 8000ad4:	001c      	movs	r4, r3
 8000ad6:	2c00      	cmp	r4, #0
 8000ad8:	dd38      	ble.n	8000b4c <__aeabi_ddiv+0x150>
 8000ada:	0753      	lsls	r3, r2, #29
 8000adc:	d000      	beq.n	8000ae0 <__aeabi_ddiv+0xe4>
 8000ade:	e213      	b.n	8000f08 <__aeabi_ddiv+0x50c>
 8000ae0:	08d2      	lsrs	r2, r2, #3
 8000ae2:	465b      	mov	r3, fp
 8000ae4:	01db      	lsls	r3, r3, #7
 8000ae6:	d509      	bpl.n	8000afc <__aeabi_ddiv+0x100>
 8000ae8:	4659      	mov	r1, fp
 8000aea:	4b67      	ldr	r3, [pc, #412]	; (8000c88 <__aeabi_ddiv+0x28c>)
 8000aec:	4019      	ands	r1, r3
 8000aee:	468b      	mov	fp, r1
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	00c9      	lsls	r1, r1, #3
 8000af4:	468c      	mov	ip, r1
 8000af6:	9b00      	ldr	r3, [sp, #0]
 8000af8:	4463      	add	r3, ip
 8000afa:	001c      	movs	r4, r3
 8000afc:	4b63      	ldr	r3, [pc, #396]	; (8000c8c <__aeabi_ddiv+0x290>)
 8000afe:	429c      	cmp	r4, r3
 8000b00:	dc07      	bgt.n	8000b12 <__aeabi_ddiv+0x116>
 8000b02:	465b      	mov	r3, fp
 8000b04:	0564      	lsls	r4, r4, #21
 8000b06:	075f      	lsls	r7, r3, #29
 8000b08:	025b      	lsls	r3, r3, #9
 8000b0a:	4317      	orrs	r7, r2
 8000b0c:	0b1b      	lsrs	r3, r3, #12
 8000b0e:	0d62      	lsrs	r2, r4, #21
 8000b10:	e002      	b.n	8000b18 <__aeabi_ddiv+0x11c>
 8000b12:	2300      	movs	r3, #0
 8000b14:	2700      	movs	r7, #0
 8000b16:	4a58      	ldr	r2, [pc, #352]	; (8000c78 <__aeabi_ddiv+0x27c>)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	031b      	lsls	r3, r3, #12
 8000b1c:	0b1c      	lsrs	r4, r3, #12
 8000b1e:	0d0b      	lsrs	r3, r1, #20
 8000b20:	051b      	lsls	r3, r3, #20
 8000b22:	4323      	orrs	r3, r4
 8000b24:	0514      	lsls	r4, r2, #20
 8000b26:	4a5a      	ldr	r2, [pc, #360]	; (8000c90 <__aeabi_ddiv+0x294>)
 8000b28:	0038      	movs	r0, r7
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	431c      	orrs	r4, r3
 8000b2e:	4653      	mov	r3, sl
 8000b30:	0064      	lsls	r4, r4, #1
 8000b32:	07db      	lsls	r3, r3, #31
 8000b34:	0864      	lsrs	r4, r4, #1
 8000b36:	431c      	orrs	r4, r3
 8000b38:	0021      	movs	r1, r4
 8000b3a:	b005      	add	sp, #20
 8000b3c:	bc3c      	pop	{r2, r3, r4, r5}
 8000b3e:	4690      	mov	r8, r2
 8000b40:	4699      	mov	r9, r3
 8000b42:	46a2      	mov	sl, r4
 8000b44:	46ab      	mov	fp, r5
 8000b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b48:	2201      	movs	r2, #1
 8000b4a:	4252      	negs	r2, r2
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	1b1b      	subs	r3, r3, r4
 8000b50:	2b38      	cmp	r3, #56	; 0x38
 8000b52:	dc00      	bgt.n	8000b56 <__aeabi_ddiv+0x15a>
 8000b54:	e1ad      	b.n	8000eb2 <__aeabi_ddiv+0x4b6>
 8000b56:	2200      	movs	r2, #0
 8000b58:	2300      	movs	r3, #0
 8000b5a:	2700      	movs	r7, #0
 8000b5c:	e7dc      	b.n	8000b18 <__aeabi_ddiv+0x11c>
 8000b5e:	465b      	mov	r3, fp
 8000b60:	4333      	orrs	r3, r6
 8000b62:	4699      	mov	r9, r3
 8000b64:	d05e      	beq.n	8000c24 <__aeabi_ddiv+0x228>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d100      	bne.n	8000b6c <__aeabi_ddiv+0x170>
 8000b6a:	e18a      	b.n	8000e82 <__aeabi_ddiv+0x486>
 8000b6c:	0030      	movs	r0, r6
 8000b6e:	f000 fda9 	bl	80016c4 <__clzsi2>
 8000b72:	0003      	movs	r3, r0
 8000b74:	3b0b      	subs	r3, #11
 8000b76:	2b1c      	cmp	r3, #28
 8000b78:	dd00      	ble.n	8000b7c <__aeabi_ddiv+0x180>
 8000b7a:	e17b      	b.n	8000e74 <__aeabi_ddiv+0x478>
 8000b7c:	221d      	movs	r2, #29
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	465a      	mov	r2, fp
 8000b82:	0001      	movs	r1, r0
 8000b84:	40da      	lsrs	r2, r3
 8000b86:	3908      	subs	r1, #8
 8000b88:	408e      	lsls	r6, r1
 8000b8a:	0013      	movs	r3, r2
 8000b8c:	465f      	mov	r7, fp
 8000b8e:	4333      	orrs	r3, r6
 8000b90:	4699      	mov	r9, r3
 8000b92:	408f      	lsls	r7, r1
 8000b94:	4b3f      	ldr	r3, [pc, #252]	; (8000c94 <__aeabi_ddiv+0x298>)
 8000b96:	2600      	movs	r6, #0
 8000b98:	1a1b      	subs	r3, r3, r0
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	9302      	str	r3, [sp, #8]
 8000ba0:	e752      	b.n	8000a48 <__aeabi_ddiv+0x4c>
 8000ba2:	4641      	mov	r1, r8
 8000ba4:	4653      	mov	r3, sl
 8000ba6:	430b      	orrs	r3, r1
 8000ba8:	493b      	ldr	r1, [pc, #236]	; (8000c98 <__aeabi_ddiv+0x29c>)
 8000baa:	469b      	mov	fp, r3
 8000bac:	468c      	mov	ip, r1
 8000bae:	9b00      	ldr	r3, [sp, #0]
 8000bb0:	4463      	add	r3, ip
 8000bb2:	9300      	str	r3, [sp, #0]
 8000bb4:	465b      	mov	r3, fp
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d13b      	bne.n	8000c32 <__aeabi_ddiv+0x236>
 8000bba:	2302      	movs	r3, #2
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	431e      	orrs	r6, r3
 8000bc0:	2102      	movs	r1, #2
 8000bc2:	e761      	b.n	8000a88 <__aeabi_ddiv+0x8c>
 8000bc4:	4643      	mov	r3, r8
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	469b      	mov	fp, r3
 8000bca:	d037      	beq.n	8000c3c <__aeabi_ddiv+0x240>
 8000bcc:	4643      	mov	r3, r8
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_ddiv+0x1d8>
 8000bd2:	e162      	b.n	8000e9a <__aeabi_ddiv+0x49e>
 8000bd4:	4640      	mov	r0, r8
 8000bd6:	f000 fd75 	bl	80016c4 <__clzsi2>
 8000bda:	0003      	movs	r3, r0
 8000bdc:	3b0b      	subs	r3, #11
 8000bde:	2b1c      	cmp	r3, #28
 8000be0:	dd00      	ble.n	8000be4 <__aeabi_ddiv+0x1e8>
 8000be2:	e153      	b.n	8000e8c <__aeabi_ddiv+0x490>
 8000be4:	0002      	movs	r2, r0
 8000be6:	4641      	mov	r1, r8
 8000be8:	3a08      	subs	r2, #8
 8000bea:	4091      	lsls	r1, r2
 8000bec:	4688      	mov	r8, r1
 8000bee:	211d      	movs	r1, #29
 8000bf0:	1acb      	subs	r3, r1, r3
 8000bf2:	4651      	mov	r1, sl
 8000bf4:	40d9      	lsrs	r1, r3
 8000bf6:	000b      	movs	r3, r1
 8000bf8:	4641      	mov	r1, r8
 8000bfa:	430b      	orrs	r3, r1
 8000bfc:	469b      	mov	fp, r3
 8000bfe:	4653      	mov	r3, sl
 8000c00:	4093      	lsls	r3, r2
 8000c02:	001a      	movs	r2, r3
 8000c04:	9b00      	ldr	r3, [sp, #0]
 8000c06:	4925      	ldr	r1, [pc, #148]	; (8000c9c <__aeabi_ddiv+0x2a0>)
 8000c08:	469c      	mov	ip, r3
 8000c0a:	4460      	add	r0, ip
 8000c0c:	0003      	movs	r3, r0
 8000c0e:	468c      	mov	ip, r1
 8000c10:	4463      	add	r3, ip
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	2100      	movs	r1, #0
 8000c16:	e737      	b.n	8000a88 <__aeabi_ddiv+0x8c>
 8000c18:	2303      	movs	r3, #3
 8000c1a:	46b1      	mov	r9, r6
 8000c1c:	9000      	str	r0, [sp, #0]
 8000c1e:	260c      	movs	r6, #12
 8000c20:	9302      	str	r3, [sp, #8]
 8000c22:	e711      	b.n	8000a48 <__aeabi_ddiv+0x4c>
 8000c24:	2300      	movs	r3, #0
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	2604      	movs	r6, #4
 8000c2c:	2700      	movs	r7, #0
 8000c2e:	9302      	str	r3, [sp, #8]
 8000c30:	e70a      	b.n	8000a48 <__aeabi_ddiv+0x4c>
 8000c32:	2303      	movs	r3, #3
 8000c34:	46c3      	mov	fp, r8
 8000c36:	431e      	orrs	r6, r3
 8000c38:	2103      	movs	r1, #3
 8000c3a:	e725      	b.n	8000a88 <__aeabi_ddiv+0x8c>
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	431e      	orrs	r6, r3
 8000c40:	2200      	movs	r2, #0
 8000c42:	2101      	movs	r1, #1
 8000c44:	e720      	b.n	8000a88 <__aeabi_ddiv+0x8c>
 8000c46:	2300      	movs	r3, #0
 8000c48:	469a      	mov	sl, r3
 8000c4a:	2380      	movs	r3, #128	; 0x80
 8000c4c:	2700      	movs	r7, #0
 8000c4e:	031b      	lsls	r3, r3, #12
 8000c50:	4a09      	ldr	r2, [pc, #36]	; (8000c78 <__aeabi_ddiv+0x27c>)
 8000c52:	e761      	b.n	8000b18 <__aeabi_ddiv+0x11c>
 8000c54:	2380      	movs	r3, #128	; 0x80
 8000c56:	4649      	mov	r1, r9
 8000c58:	031b      	lsls	r3, r3, #12
 8000c5a:	4219      	tst	r1, r3
 8000c5c:	d100      	bne.n	8000c60 <__aeabi_ddiv+0x264>
 8000c5e:	e0e2      	b.n	8000e26 <__aeabi_ddiv+0x42a>
 8000c60:	4659      	mov	r1, fp
 8000c62:	4219      	tst	r1, r3
 8000c64:	d000      	beq.n	8000c68 <__aeabi_ddiv+0x26c>
 8000c66:	e0de      	b.n	8000e26 <__aeabi_ddiv+0x42a>
 8000c68:	430b      	orrs	r3, r1
 8000c6a:	031b      	lsls	r3, r3, #12
 8000c6c:	0017      	movs	r7, r2
 8000c6e:	0b1b      	lsrs	r3, r3, #12
 8000c70:	46a2      	mov	sl, r4
 8000c72:	4a01      	ldr	r2, [pc, #4]	; (8000c78 <__aeabi_ddiv+0x27c>)
 8000c74:	e750      	b.n	8000b18 <__aeabi_ddiv+0x11c>
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	000007ff 	.word	0x000007ff
 8000c7c:	fffffc01 	.word	0xfffffc01
 8000c80:	0800b6c0 	.word	0x0800b6c0
 8000c84:	000003ff 	.word	0x000003ff
 8000c88:	feffffff 	.word	0xfeffffff
 8000c8c:	000007fe 	.word	0x000007fe
 8000c90:	800fffff 	.word	0x800fffff
 8000c94:	fffffc0d 	.word	0xfffffc0d
 8000c98:	fffff801 	.word	0xfffff801
 8000c9c:	000003f3 	.word	0x000003f3
 8000ca0:	45d9      	cmp	r9, fp
 8000ca2:	d900      	bls.n	8000ca6 <__aeabi_ddiv+0x2aa>
 8000ca4:	e0cb      	b.n	8000e3e <__aeabi_ddiv+0x442>
 8000ca6:	d100      	bne.n	8000caa <__aeabi_ddiv+0x2ae>
 8000ca8:	e0c6      	b.n	8000e38 <__aeabi_ddiv+0x43c>
 8000caa:	003c      	movs	r4, r7
 8000cac:	4648      	mov	r0, r9
 8000cae:	2700      	movs	r7, #0
 8000cb0:	9b00      	ldr	r3, [sp, #0]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	465b      	mov	r3, fp
 8000cb8:	0e16      	lsrs	r6, r2, #24
 8000cba:	021b      	lsls	r3, r3, #8
 8000cbc:	431e      	orrs	r6, r3
 8000cbe:	0213      	lsls	r3, r2, #8
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	0433      	lsls	r3, r6, #16
 8000cc4:	0c1b      	lsrs	r3, r3, #16
 8000cc6:	4699      	mov	r9, r3
 8000cc8:	0c31      	lsrs	r1, r6, #16
 8000cca:	9101      	str	r1, [sp, #4]
 8000ccc:	f7ff faaa 	bl	8000224 <__aeabi_uidivmod>
 8000cd0:	464a      	mov	r2, r9
 8000cd2:	4342      	muls	r2, r0
 8000cd4:	040b      	lsls	r3, r1, #16
 8000cd6:	0c21      	lsrs	r1, r4, #16
 8000cd8:	0005      	movs	r5, r0
 8000cda:	4319      	orrs	r1, r3
 8000cdc:	428a      	cmp	r2, r1
 8000cde:	d907      	bls.n	8000cf0 <__aeabi_ddiv+0x2f4>
 8000ce0:	1989      	adds	r1, r1, r6
 8000ce2:	3d01      	subs	r5, #1
 8000ce4:	428e      	cmp	r6, r1
 8000ce6:	d803      	bhi.n	8000cf0 <__aeabi_ddiv+0x2f4>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	d901      	bls.n	8000cf0 <__aeabi_ddiv+0x2f4>
 8000cec:	1e85      	subs	r5, r0, #2
 8000cee:	1989      	adds	r1, r1, r6
 8000cf0:	1a88      	subs	r0, r1, r2
 8000cf2:	9901      	ldr	r1, [sp, #4]
 8000cf4:	f7ff fa96 	bl	8000224 <__aeabi_uidivmod>
 8000cf8:	0409      	lsls	r1, r1, #16
 8000cfa:	468c      	mov	ip, r1
 8000cfc:	464a      	mov	r2, r9
 8000cfe:	0421      	lsls	r1, r4, #16
 8000d00:	4664      	mov	r4, ip
 8000d02:	4342      	muls	r2, r0
 8000d04:	0c09      	lsrs	r1, r1, #16
 8000d06:	0003      	movs	r3, r0
 8000d08:	4321      	orrs	r1, r4
 8000d0a:	428a      	cmp	r2, r1
 8000d0c:	d904      	bls.n	8000d18 <__aeabi_ddiv+0x31c>
 8000d0e:	1989      	adds	r1, r1, r6
 8000d10:	3b01      	subs	r3, #1
 8000d12:	428e      	cmp	r6, r1
 8000d14:	d800      	bhi.n	8000d18 <__aeabi_ddiv+0x31c>
 8000d16:	e0f1      	b.n	8000efc <__aeabi_ddiv+0x500>
 8000d18:	042d      	lsls	r5, r5, #16
 8000d1a:	431d      	orrs	r5, r3
 8000d1c:	46ab      	mov	fp, r5
 8000d1e:	4643      	mov	r3, r8
 8000d20:	1a89      	subs	r1, r1, r2
 8000d22:	4642      	mov	r2, r8
 8000d24:	0c28      	lsrs	r0, r5, #16
 8000d26:	0412      	lsls	r2, r2, #16
 8000d28:	0c1d      	lsrs	r5, r3, #16
 8000d2a:	465b      	mov	r3, fp
 8000d2c:	0c14      	lsrs	r4, r2, #16
 8000d2e:	0022      	movs	r2, r4
 8000d30:	041b      	lsls	r3, r3, #16
 8000d32:	0c1b      	lsrs	r3, r3, #16
 8000d34:	435a      	muls	r2, r3
 8000d36:	9403      	str	r4, [sp, #12]
 8000d38:	436b      	muls	r3, r5
 8000d3a:	4344      	muls	r4, r0
 8000d3c:	9502      	str	r5, [sp, #8]
 8000d3e:	4368      	muls	r0, r5
 8000d40:	191b      	adds	r3, r3, r4
 8000d42:	0c15      	lsrs	r5, r2, #16
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	429c      	cmp	r4, r3
 8000d48:	d903      	bls.n	8000d52 <__aeabi_ddiv+0x356>
 8000d4a:	2480      	movs	r4, #128	; 0x80
 8000d4c:	0264      	lsls	r4, r4, #9
 8000d4e:	46a4      	mov	ip, r4
 8000d50:	4460      	add	r0, ip
 8000d52:	0c1c      	lsrs	r4, r3, #16
 8000d54:	0415      	lsls	r5, r2, #16
 8000d56:	041b      	lsls	r3, r3, #16
 8000d58:	0c2d      	lsrs	r5, r5, #16
 8000d5a:	1820      	adds	r0, r4, r0
 8000d5c:	195d      	adds	r5, r3, r5
 8000d5e:	4281      	cmp	r1, r0
 8000d60:	d377      	bcc.n	8000e52 <__aeabi_ddiv+0x456>
 8000d62:	d073      	beq.n	8000e4c <__aeabi_ddiv+0x450>
 8000d64:	1a0c      	subs	r4, r1, r0
 8000d66:	4aa2      	ldr	r2, [pc, #648]	; (8000ff0 <__aeabi_ddiv+0x5f4>)
 8000d68:	1b7d      	subs	r5, r7, r5
 8000d6a:	42af      	cmp	r7, r5
 8000d6c:	41bf      	sbcs	r7, r7
 8000d6e:	4694      	mov	ip, r2
 8000d70:	9b00      	ldr	r3, [sp, #0]
 8000d72:	427f      	negs	r7, r7
 8000d74:	4463      	add	r3, ip
 8000d76:	1be0      	subs	r0, r4, r7
 8000d78:	001c      	movs	r4, r3
 8000d7a:	4286      	cmp	r6, r0
 8000d7c:	d100      	bne.n	8000d80 <__aeabi_ddiv+0x384>
 8000d7e:	e0db      	b.n	8000f38 <__aeabi_ddiv+0x53c>
 8000d80:	9901      	ldr	r1, [sp, #4]
 8000d82:	f7ff fa4f 	bl	8000224 <__aeabi_uidivmod>
 8000d86:	464a      	mov	r2, r9
 8000d88:	4342      	muls	r2, r0
 8000d8a:	040b      	lsls	r3, r1, #16
 8000d8c:	0c29      	lsrs	r1, r5, #16
 8000d8e:	0007      	movs	r7, r0
 8000d90:	4319      	orrs	r1, r3
 8000d92:	428a      	cmp	r2, r1
 8000d94:	d907      	bls.n	8000da6 <__aeabi_ddiv+0x3aa>
 8000d96:	1989      	adds	r1, r1, r6
 8000d98:	3f01      	subs	r7, #1
 8000d9a:	428e      	cmp	r6, r1
 8000d9c:	d803      	bhi.n	8000da6 <__aeabi_ddiv+0x3aa>
 8000d9e:	428a      	cmp	r2, r1
 8000da0:	d901      	bls.n	8000da6 <__aeabi_ddiv+0x3aa>
 8000da2:	1e87      	subs	r7, r0, #2
 8000da4:	1989      	adds	r1, r1, r6
 8000da6:	1a88      	subs	r0, r1, r2
 8000da8:	9901      	ldr	r1, [sp, #4]
 8000daa:	f7ff fa3b 	bl	8000224 <__aeabi_uidivmod>
 8000dae:	0409      	lsls	r1, r1, #16
 8000db0:	464a      	mov	r2, r9
 8000db2:	4689      	mov	r9, r1
 8000db4:	0429      	lsls	r1, r5, #16
 8000db6:	464d      	mov	r5, r9
 8000db8:	4342      	muls	r2, r0
 8000dba:	0c09      	lsrs	r1, r1, #16
 8000dbc:	0003      	movs	r3, r0
 8000dbe:	4329      	orrs	r1, r5
 8000dc0:	428a      	cmp	r2, r1
 8000dc2:	d907      	bls.n	8000dd4 <__aeabi_ddiv+0x3d8>
 8000dc4:	1989      	adds	r1, r1, r6
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	428e      	cmp	r6, r1
 8000dca:	d803      	bhi.n	8000dd4 <__aeabi_ddiv+0x3d8>
 8000dcc:	428a      	cmp	r2, r1
 8000dce:	d901      	bls.n	8000dd4 <__aeabi_ddiv+0x3d8>
 8000dd0:	1e83      	subs	r3, r0, #2
 8000dd2:	1989      	adds	r1, r1, r6
 8000dd4:	043f      	lsls	r7, r7, #16
 8000dd6:	1a89      	subs	r1, r1, r2
 8000dd8:	003a      	movs	r2, r7
 8000dda:	9f03      	ldr	r7, [sp, #12]
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	0038      	movs	r0, r7
 8000de0:	0413      	lsls	r3, r2, #16
 8000de2:	0c1b      	lsrs	r3, r3, #16
 8000de4:	4358      	muls	r0, r3
 8000de6:	4681      	mov	r9, r0
 8000de8:	9802      	ldr	r0, [sp, #8]
 8000dea:	0c15      	lsrs	r5, r2, #16
 8000dec:	436f      	muls	r7, r5
 8000dee:	4343      	muls	r3, r0
 8000df0:	4345      	muls	r5, r0
 8000df2:	4648      	mov	r0, r9
 8000df4:	0c00      	lsrs	r0, r0, #16
 8000df6:	4684      	mov	ip, r0
 8000df8:	19db      	adds	r3, r3, r7
 8000dfa:	4463      	add	r3, ip
 8000dfc:	429f      	cmp	r7, r3
 8000dfe:	d903      	bls.n	8000e08 <__aeabi_ddiv+0x40c>
 8000e00:	2080      	movs	r0, #128	; 0x80
 8000e02:	0240      	lsls	r0, r0, #9
 8000e04:	4684      	mov	ip, r0
 8000e06:	4465      	add	r5, ip
 8000e08:	4648      	mov	r0, r9
 8000e0a:	0c1f      	lsrs	r7, r3, #16
 8000e0c:	0400      	lsls	r0, r0, #16
 8000e0e:	041b      	lsls	r3, r3, #16
 8000e10:	0c00      	lsrs	r0, r0, #16
 8000e12:	197d      	adds	r5, r7, r5
 8000e14:	1818      	adds	r0, r3, r0
 8000e16:	42a9      	cmp	r1, r5
 8000e18:	d200      	bcs.n	8000e1c <__aeabi_ddiv+0x420>
 8000e1a:	e084      	b.n	8000f26 <__aeabi_ddiv+0x52a>
 8000e1c:	d100      	bne.n	8000e20 <__aeabi_ddiv+0x424>
 8000e1e:	e07f      	b.n	8000f20 <__aeabi_ddiv+0x524>
 8000e20:	2301      	movs	r3, #1
 8000e22:	431a      	orrs	r2, r3
 8000e24:	e657      	b.n	8000ad6 <__aeabi_ddiv+0xda>
 8000e26:	2380      	movs	r3, #128	; 0x80
 8000e28:	464a      	mov	r2, r9
 8000e2a:	031b      	lsls	r3, r3, #12
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	031b      	lsls	r3, r3, #12
 8000e30:	0b1b      	lsrs	r3, r3, #12
 8000e32:	46aa      	mov	sl, r5
 8000e34:	4a6f      	ldr	r2, [pc, #444]	; (8000ff4 <__aeabi_ddiv+0x5f8>)
 8000e36:	e66f      	b.n	8000b18 <__aeabi_ddiv+0x11c>
 8000e38:	42ba      	cmp	r2, r7
 8000e3a:	d900      	bls.n	8000e3e <__aeabi_ddiv+0x442>
 8000e3c:	e735      	b.n	8000caa <__aeabi_ddiv+0x2ae>
 8000e3e:	464b      	mov	r3, r9
 8000e40:	07dc      	lsls	r4, r3, #31
 8000e42:	0858      	lsrs	r0, r3, #1
 8000e44:	087b      	lsrs	r3, r7, #1
 8000e46:	431c      	orrs	r4, r3
 8000e48:	07ff      	lsls	r7, r7, #31
 8000e4a:	e734      	b.n	8000cb6 <__aeabi_ddiv+0x2ba>
 8000e4c:	2400      	movs	r4, #0
 8000e4e:	42af      	cmp	r7, r5
 8000e50:	d289      	bcs.n	8000d66 <__aeabi_ddiv+0x36a>
 8000e52:	4447      	add	r7, r8
 8000e54:	4547      	cmp	r7, r8
 8000e56:	41a4      	sbcs	r4, r4
 8000e58:	465b      	mov	r3, fp
 8000e5a:	4264      	negs	r4, r4
 8000e5c:	19a4      	adds	r4, r4, r6
 8000e5e:	1864      	adds	r4, r4, r1
 8000e60:	3b01      	subs	r3, #1
 8000e62:	42a6      	cmp	r6, r4
 8000e64:	d21e      	bcs.n	8000ea4 <__aeabi_ddiv+0x4a8>
 8000e66:	42a0      	cmp	r0, r4
 8000e68:	d86d      	bhi.n	8000f46 <__aeabi_ddiv+0x54a>
 8000e6a:	d100      	bne.n	8000e6e <__aeabi_ddiv+0x472>
 8000e6c:	e0b6      	b.n	8000fdc <__aeabi_ddiv+0x5e0>
 8000e6e:	1a24      	subs	r4, r4, r0
 8000e70:	469b      	mov	fp, r3
 8000e72:	e778      	b.n	8000d66 <__aeabi_ddiv+0x36a>
 8000e74:	0003      	movs	r3, r0
 8000e76:	465a      	mov	r2, fp
 8000e78:	3b28      	subs	r3, #40	; 0x28
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	2700      	movs	r7, #0
 8000e7e:	4691      	mov	r9, r2
 8000e80:	e688      	b.n	8000b94 <__aeabi_ddiv+0x198>
 8000e82:	4658      	mov	r0, fp
 8000e84:	f000 fc1e 	bl	80016c4 <__clzsi2>
 8000e88:	3020      	adds	r0, #32
 8000e8a:	e672      	b.n	8000b72 <__aeabi_ddiv+0x176>
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	4652      	mov	r2, sl
 8000e90:	3b28      	subs	r3, #40	; 0x28
 8000e92:	409a      	lsls	r2, r3
 8000e94:	4693      	mov	fp, r2
 8000e96:	2200      	movs	r2, #0
 8000e98:	e6b4      	b.n	8000c04 <__aeabi_ddiv+0x208>
 8000e9a:	4650      	mov	r0, sl
 8000e9c:	f000 fc12 	bl	80016c4 <__clzsi2>
 8000ea0:	3020      	adds	r0, #32
 8000ea2:	e69a      	b.n	8000bda <__aeabi_ddiv+0x1de>
 8000ea4:	42a6      	cmp	r6, r4
 8000ea6:	d1e2      	bne.n	8000e6e <__aeabi_ddiv+0x472>
 8000ea8:	45b8      	cmp	r8, r7
 8000eaa:	d9dc      	bls.n	8000e66 <__aeabi_ddiv+0x46a>
 8000eac:	1a34      	subs	r4, r6, r0
 8000eae:	469b      	mov	fp, r3
 8000eb0:	e759      	b.n	8000d66 <__aeabi_ddiv+0x36a>
 8000eb2:	2b1f      	cmp	r3, #31
 8000eb4:	dc65      	bgt.n	8000f82 <__aeabi_ddiv+0x586>
 8000eb6:	4c50      	ldr	r4, [pc, #320]	; (8000ff8 <__aeabi_ddiv+0x5fc>)
 8000eb8:	9900      	ldr	r1, [sp, #0]
 8000eba:	46a4      	mov	ip, r4
 8000ebc:	465c      	mov	r4, fp
 8000ebe:	4461      	add	r1, ip
 8000ec0:	0008      	movs	r0, r1
 8000ec2:	408c      	lsls	r4, r1
 8000ec4:	0011      	movs	r1, r2
 8000ec6:	4082      	lsls	r2, r0
 8000ec8:	40d9      	lsrs	r1, r3
 8000eca:	1e50      	subs	r0, r2, #1
 8000ecc:	4182      	sbcs	r2, r0
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	4314      	orrs	r4, r2
 8000ed2:	465a      	mov	r2, fp
 8000ed4:	40da      	lsrs	r2, r3
 8000ed6:	0013      	movs	r3, r2
 8000ed8:	0762      	lsls	r2, r4, #29
 8000eda:	d009      	beq.n	8000ef0 <__aeabi_ddiv+0x4f4>
 8000edc:	220f      	movs	r2, #15
 8000ede:	4022      	ands	r2, r4
 8000ee0:	2a04      	cmp	r2, #4
 8000ee2:	d005      	beq.n	8000ef0 <__aeabi_ddiv+0x4f4>
 8000ee4:	0022      	movs	r2, r4
 8000ee6:	1d14      	adds	r4, r2, #4
 8000ee8:	4294      	cmp	r4, r2
 8000eea:	4189      	sbcs	r1, r1
 8000eec:	4249      	negs	r1, r1
 8000eee:	185b      	adds	r3, r3, r1
 8000ef0:	021a      	lsls	r2, r3, #8
 8000ef2:	d562      	bpl.n	8000fba <__aeabi_ddiv+0x5be>
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	2700      	movs	r7, #0
 8000efa:	e60d      	b.n	8000b18 <__aeabi_ddiv+0x11c>
 8000efc:	428a      	cmp	r2, r1
 8000efe:	d800      	bhi.n	8000f02 <__aeabi_ddiv+0x506>
 8000f00:	e70a      	b.n	8000d18 <__aeabi_ddiv+0x31c>
 8000f02:	1e83      	subs	r3, r0, #2
 8000f04:	1989      	adds	r1, r1, r6
 8000f06:	e707      	b.n	8000d18 <__aeabi_ddiv+0x31c>
 8000f08:	230f      	movs	r3, #15
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	2b04      	cmp	r3, #4
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_ddiv+0x516>
 8000f10:	e5e6      	b.n	8000ae0 <__aeabi_ddiv+0xe4>
 8000f12:	1d17      	adds	r7, r2, #4
 8000f14:	4297      	cmp	r7, r2
 8000f16:	4192      	sbcs	r2, r2
 8000f18:	4253      	negs	r3, r2
 8000f1a:	449b      	add	fp, r3
 8000f1c:	08fa      	lsrs	r2, r7, #3
 8000f1e:	e5e0      	b.n	8000ae2 <__aeabi_ddiv+0xe6>
 8000f20:	2800      	cmp	r0, #0
 8000f22:	d100      	bne.n	8000f26 <__aeabi_ddiv+0x52a>
 8000f24:	e5d7      	b.n	8000ad6 <__aeabi_ddiv+0xda>
 8000f26:	1871      	adds	r1, r6, r1
 8000f28:	1e53      	subs	r3, r2, #1
 8000f2a:	42b1      	cmp	r1, r6
 8000f2c:	d327      	bcc.n	8000f7e <__aeabi_ddiv+0x582>
 8000f2e:	42a9      	cmp	r1, r5
 8000f30:	d315      	bcc.n	8000f5e <__aeabi_ddiv+0x562>
 8000f32:	d058      	beq.n	8000fe6 <__aeabi_ddiv+0x5ea>
 8000f34:	001a      	movs	r2, r3
 8000f36:	e773      	b.n	8000e20 <__aeabi_ddiv+0x424>
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	dc00      	bgt.n	8000f3e <__aeabi_ddiv+0x542>
 8000f3c:	e604      	b.n	8000b48 <__aeabi_ddiv+0x14c>
 8000f3e:	2301      	movs	r3, #1
 8000f40:	2200      	movs	r2, #0
 8000f42:	449b      	add	fp, r3
 8000f44:	e5cd      	b.n	8000ae2 <__aeabi_ddiv+0xe6>
 8000f46:	2302      	movs	r3, #2
 8000f48:	4447      	add	r7, r8
 8000f4a:	4547      	cmp	r7, r8
 8000f4c:	4189      	sbcs	r1, r1
 8000f4e:	425b      	negs	r3, r3
 8000f50:	469c      	mov	ip, r3
 8000f52:	4249      	negs	r1, r1
 8000f54:	1989      	adds	r1, r1, r6
 8000f56:	190c      	adds	r4, r1, r4
 8000f58:	44e3      	add	fp, ip
 8000f5a:	1a24      	subs	r4, r4, r0
 8000f5c:	e703      	b.n	8000d66 <__aeabi_ddiv+0x36a>
 8000f5e:	4643      	mov	r3, r8
 8000f60:	005f      	lsls	r7, r3, #1
 8000f62:	4547      	cmp	r7, r8
 8000f64:	419b      	sbcs	r3, r3
 8000f66:	46b8      	mov	r8, r7
 8000f68:	425b      	negs	r3, r3
 8000f6a:	199e      	adds	r6, r3, r6
 8000f6c:	3a02      	subs	r2, #2
 8000f6e:	1989      	adds	r1, r1, r6
 8000f70:	42a9      	cmp	r1, r5
 8000f72:	d000      	beq.n	8000f76 <__aeabi_ddiv+0x57a>
 8000f74:	e754      	b.n	8000e20 <__aeabi_ddiv+0x424>
 8000f76:	4540      	cmp	r0, r8
 8000f78:	d000      	beq.n	8000f7c <__aeabi_ddiv+0x580>
 8000f7a:	e751      	b.n	8000e20 <__aeabi_ddiv+0x424>
 8000f7c:	e5ab      	b.n	8000ad6 <__aeabi_ddiv+0xda>
 8000f7e:	001a      	movs	r2, r3
 8000f80:	e7f6      	b.n	8000f70 <__aeabi_ddiv+0x574>
 8000f82:	211f      	movs	r1, #31
 8000f84:	465f      	mov	r7, fp
 8000f86:	4249      	negs	r1, r1
 8000f88:	1b0c      	subs	r4, r1, r4
 8000f8a:	40e7      	lsrs	r7, r4
 8000f8c:	2b20      	cmp	r3, #32
 8000f8e:	d007      	beq.n	8000fa0 <__aeabi_ddiv+0x5a4>
 8000f90:	491a      	ldr	r1, [pc, #104]	; (8000ffc <__aeabi_ddiv+0x600>)
 8000f92:	9b00      	ldr	r3, [sp, #0]
 8000f94:	468c      	mov	ip, r1
 8000f96:	4463      	add	r3, ip
 8000f98:	0018      	movs	r0, r3
 8000f9a:	465b      	mov	r3, fp
 8000f9c:	4083      	lsls	r3, r0
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	1e50      	subs	r0, r2, #1
 8000fa2:	4182      	sbcs	r2, r0
 8000fa4:	433a      	orrs	r2, r7
 8000fa6:	2707      	movs	r7, #7
 8000fa8:	2300      	movs	r3, #0
 8000faa:	4017      	ands	r7, r2
 8000fac:	d009      	beq.n	8000fc2 <__aeabi_ddiv+0x5c6>
 8000fae:	210f      	movs	r1, #15
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	4011      	ands	r1, r2
 8000fb4:	0014      	movs	r4, r2
 8000fb6:	2904      	cmp	r1, #4
 8000fb8:	d195      	bne.n	8000ee6 <__aeabi_ddiv+0x4ea>
 8000fba:	0022      	movs	r2, r4
 8000fbc:	075f      	lsls	r7, r3, #29
 8000fbe:	025b      	lsls	r3, r3, #9
 8000fc0:	0b1b      	lsrs	r3, r3, #12
 8000fc2:	08d2      	lsrs	r2, r2, #3
 8000fc4:	4317      	orrs	r7, r2
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	e5a6      	b.n	8000b18 <__aeabi_ddiv+0x11c>
 8000fca:	2380      	movs	r3, #128	; 0x80
 8000fcc:	4659      	mov	r1, fp
 8000fce:	031b      	lsls	r3, r3, #12
 8000fd0:	430b      	orrs	r3, r1
 8000fd2:	031b      	lsls	r3, r3, #12
 8000fd4:	0017      	movs	r7, r2
 8000fd6:	0b1b      	lsrs	r3, r3, #12
 8000fd8:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <__aeabi_ddiv+0x5f8>)
 8000fda:	e59d      	b.n	8000b18 <__aeabi_ddiv+0x11c>
 8000fdc:	42bd      	cmp	r5, r7
 8000fde:	d8b2      	bhi.n	8000f46 <__aeabi_ddiv+0x54a>
 8000fe0:	469b      	mov	fp, r3
 8000fe2:	2400      	movs	r4, #0
 8000fe4:	e6bf      	b.n	8000d66 <__aeabi_ddiv+0x36a>
 8000fe6:	4580      	cmp	r8, r0
 8000fe8:	d3b9      	bcc.n	8000f5e <__aeabi_ddiv+0x562>
 8000fea:	001a      	movs	r2, r3
 8000fec:	e7c3      	b.n	8000f76 <__aeabi_ddiv+0x57a>
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	000003ff 	.word	0x000003ff
 8000ff4:	000007ff 	.word	0x000007ff
 8000ff8:	0000041e 	.word	0x0000041e
 8000ffc:	0000043e 	.word	0x0000043e

08001000 <__aeabi_dmul>:
 8001000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001002:	4657      	mov	r7, sl
 8001004:	46de      	mov	lr, fp
 8001006:	464e      	mov	r6, r9
 8001008:	4645      	mov	r5, r8
 800100a:	b5e0      	push	{r5, r6, r7, lr}
 800100c:	4683      	mov	fp, r0
 800100e:	0006      	movs	r6, r0
 8001010:	030f      	lsls	r7, r1, #12
 8001012:	0048      	lsls	r0, r1, #1
 8001014:	b087      	sub	sp, #28
 8001016:	4692      	mov	sl, r2
 8001018:	001d      	movs	r5, r3
 800101a:	0b3f      	lsrs	r7, r7, #12
 800101c:	0d40      	lsrs	r0, r0, #21
 800101e:	0fcc      	lsrs	r4, r1, #31
 8001020:	2800      	cmp	r0, #0
 8001022:	d100      	bne.n	8001026 <__aeabi_dmul+0x26>
 8001024:	e06f      	b.n	8001106 <__aeabi_dmul+0x106>
 8001026:	4bde      	ldr	r3, [pc, #888]	; (80013a0 <__aeabi_dmul+0x3a0>)
 8001028:	4298      	cmp	r0, r3
 800102a:	d038      	beq.n	800109e <__aeabi_dmul+0x9e>
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	00ff      	lsls	r7, r7, #3
 8001030:	041b      	lsls	r3, r3, #16
 8001032:	431f      	orrs	r7, r3
 8001034:	0f73      	lsrs	r3, r6, #29
 8001036:	433b      	orrs	r3, r7
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	4bda      	ldr	r3, [pc, #872]	; (80013a4 <__aeabi_dmul+0x3a4>)
 800103c:	2700      	movs	r7, #0
 800103e:	4699      	mov	r9, r3
 8001040:	2300      	movs	r3, #0
 8001042:	469b      	mov	fp, r3
 8001044:	00f6      	lsls	r6, r6, #3
 8001046:	4481      	add	r9, r0
 8001048:	032b      	lsls	r3, r5, #12
 800104a:	0069      	lsls	r1, r5, #1
 800104c:	0b1b      	lsrs	r3, r3, #12
 800104e:	4652      	mov	r2, sl
 8001050:	4698      	mov	r8, r3
 8001052:	0d49      	lsrs	r1, r1, #21
 8001054:	0fed      	lsrs	r5, r5, #31
 8001056:	2900      	cmp	r1, #0
 8001058:	d100      	bne.n	800105c <__aeabi_dmul+0x5c>
 800105a:	e085      	b.n	8001168 <__aeabi_dmul+0x168>
 800105c:	4bd0      	ldr	r3, [pc, #832]	; (80013a0 <__aeabi_dmul+0x3a0>)
 800105e:	4299      	cmp	r1, r3
 8001060:	d100      	bne.n	8001064 <__aeabi_dmul+0x64>
 8001062:	e073      	b.n	800114c <__aeabi_dmul+0x14c>
 8001064:	4643      	mov	r3, r8
 8001066:	00da      	lsls	r2, r3, #3
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	041b      	lsls	r3, r3, #16
 800106c:	4313      	orrs	r3, r2
 800106e:	4652      	mov	r2, sl
 8001070:	48cc      	ldr	r0, [pc, #816]	; (80013a4 <__aeabi_dmul+0x3a4>)
 8001072:	0f52      	lsrs	r2, r2, #29
 8001074:	4684      	mov	ip, r0
 8001076:	4313      	orrs	r3, r2
 8001078:	4652      	mov	r2, sl
 800107a:	2000      	movs	r0, #0
 800107c:	4461      	add	r1, ip
 800107e:	00d2      	lsls	r2, r2, #3
 8001080:	4489      	add	r9, r1
 8001082:	0021      	movs	r1, r4
 8001084:	4069      	eors	r1, r5
 8001086:	9100      	str	r1, [sp, #0]
 8001088:	468c      	mov	ip, r1
 800108a:	2101      	movs	r1, #1
 800108c:	4449      	add	r1, r9
 800108e:	468a      	mov	sl, r1
 8001090:	2f0f      	cmp	r7, #15
 8001092:	d900      	bls.n	8001096 <__aeabi_dmul+0x96>
 8001094:	e090      	b.n	80011b8 <__aeabi_dmul+0x1b8>
 8001096:	49c4      	ldr	r1, [pc, #784]	; (80013a8 <__aeabi_dmul+0x3a8>)
 8001098:	00bf      	lsls	r7, r7, #2
 800109a:	59cf      	ldr	r7, [r1, r7]
 800109c:	46bf      	mov	pc, r7
 800109e:	465b      	mov	r3, fp
 80010a0:	433b      	orrs	r3, r7
 80010a2:	9301      	str	r3, [sp, #4]
 80010a4:	d000      	beq.n	80010a8 <__aeabi_dmul+0xa8>
 80010a6:	e16a      	b.n	800137e <__aeabi_dmul+0x37e>
 80010a8:	2302      	movs	r3, #2
 80010aa:	2708      	movs	r7, #8
 80010ac:	2600      	movs	r6, #0
 80010ae:	4681      	mov	r9, r0
 80010b0:	469b      	mov	fp, r3
 80010b2:	e7c9      	b.n	8001048 <__aeabi_dmul+0x48>
 80010b4:	0032      	movs	r2, r6
 80010b6:	4658      	mov	r0, fp
 80010b8:	9b01      	ldr	r3, [sp, #4]
 80010ba:	4661      	mov	r1, ip
 80010bc:	9100      	str	r1, [sp, #0]
 80010be:	2802      	cmp	r0, #2
 80010c0:	d100      	bne.n	80010c4 <__aeabi_dmul+0xc4>
 80010c2:	e075      	b.n	80011b0 <__aeabi_dmul+0x1b0>
 80010c4:	2803      	cmp	r0, #3
 80010c6:	d100      	bne.n	80010ca <__aeabi_dmul+0xca>
 80010c8:	e1fe      	b.n	80014c8 <__aeabi_dmul+0x4c8>
 80010ca:	2801      	cmp	r0, #1
 80010cc:	d000      	beq.n	80010d0 <__aeabi_dmul+0xd0>
 80010ce:	e12c      	b.n	800132a <__aeabi_dmul+0x32a>
 80010d0:	2300      	movs	r3, #0
 80010d2:	2700      	movs	r7, #0
 80010d4:	2600      	movs	r6, #0
 80010d6:	2500      	movs	r5, #0
 80010d8:	033f      	lsls	r7, r7, #12
 80010da:	0d2a      	lsrs	r2, r5, #20
 80010dc:	0b3f      	lsrs	r7, r7, #12
 80010de:	48b3      	ldr	r0, [pc, #716]	; (80013ac <__aeabi_dmul+0x3ac>)
 80010e0:	0512      	lsls	r2, r2, #20
 80010e2:	433a      	orrs	r2, r7
 80010e4:	4002      	ands	r2, r0
 80010e6:	051b      	lsls	r3, r3, #20
 80010e8:	4313      	orrs	r3, r2
 80010ea:	9a00      	ldr	r2, [sp, #0]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	07d1      	lsls	r1, r2, #31
 80010f0:	085b      	lsrs	r3, r3, #1
 80010f2:	430b      	orrs	r3, r1
 80010f4:	0030      	movs	r0, r6
 80010f6:	0019      	movs	r1, r3
 80010f8:	b007      	add	sp, #28
 80010fa:	bc3c      	pop	{r2, r3, r4, r5}
 80010fc:	4690      	mov	r8, r2
 80010fe:	4699      	mov	r9, r3
 8001100:	46a2      	mov	sl, r4
 8001102:	46ab      	mov	fp, r5
 8001104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001106:	465b      	mov	r3, fp
 8001108:	433b      	orrs	r3, r7
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	d100      	bne.n	8001110 <__aeabi_dmul+0x110>
 800110e:	e12f      	b.n	8001370 <__aeabi_dmul+0x370>
 8001110:	2f00      	cmp	r7, #0
 8001112:	d100      	bne.n	8001116 <__aeabi_dmul+0x116>
 8001114:	e1a5      	b.n	8001462 <__aeabi_dmul+0x462>
 8001116:	0038      	movs	r0, r7
 8001118:	f000 fad4 	bl	80016c4 <__clzsi2>
 800111c:	0003      	movs	r3, r0
 800111e:	3b0b      	subs	r3, #11
 8001120:	2b1c      	cmp	r3, #28
 8001122:	dd00      	ble.n	8001126 <__aeabi_dmul+0x126>
 8001124:	e196      	b.n	8001454 <__aeabi_dmul+0x454>
 8001126:	221d      	movs	r2, #29
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	465a      	mov	r2, fp
 800112c:	0001      	movs	r1, r0
 800112e:	40da      	lsrs	r2, r3
 8001130:	465e      	mov	r6, fp
 8001132:	3908      	subs	r1, #8
 8001134:	408f      	lsls	r7, r1
 8001136:	0013      	movs	r3, r2
 8001138:	408e      	lsls	r6, r1
 800113a:	433b      	orrs	r3, r7
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	4b9c      	ldr	r3, [pc, #624]	; (80013b0 <__aeabi_dmul+0x3b0>)
 8001140:	2700      	movs	r7, #0
 8001142:	1a1b      	subs	r3, r3, r0
 8001144:	4699      	mov	r9, r3
 8001146:	2300      	movs	r3, #0
 8001148:	469b      	mov	fp, r3
 800114a:	e77d      	b.n	8001048 <__aeabi_dmul+0x48>
 800114c:	4641      	mov	r1, r8
 800114e:	4653      	mov	r3, sl
 8001150:	430b      	orrs	r3, r1
 8001152:	4993      	ldr	r1, [pc, #588]	; (80013a0 <__aeabi_dmul+0x3a0>)
 8001154:	468c      	mov	ip, r1
 8001156:	44e1      	add	r9, ip
 8001158:	2b00      	cmp	r3, #0
 800115a:	d000      	beq.n	800115e <__aeabi_dmul+0x15e>
 800115c:	e11a      	b.n	8001394 <__aeabi_dmul+0x394>
 800115e:	2202      	movs	r2, #2
 8001160:	2002      	movs	r0, #2
 8001162:	4317      	orrs	r7, r2
 8001164:	2200      	movs	r2, #0
 8001166:	e78c      	b.n	8001082 <__aeabi_dmul+0x82>
 8001168:	4313      	orrs	r3, r2
 800116a:	d100      	bne.n	800116e <__aeabi_dmul+0x16e>
 800116c:	e10d      	b.n	800138a <__aeabi_dmul+0x38a>
 800116e:	4643      	mov	r3, r8
 8001170:	2b00      	cmp	r3, #0
 8001172:	d100      	bne.n	8001176 <__aeabi_dmul+0x176>
 8001174:	e181      	b.n	800147a <__aeabi_dmul+0x47a>
 8001176:	4640      	mov	r0, r8
 8001178:	f000 faa4 	bl	80016c4 <__clzsi2>
 800117c:	0002      	movs	r2, r0
 800117e:	3a0b      	subs	r2, #11
 8001180:	2a1c      	cmp	r2, #28
 8001182:	dd00      	ble.n	8001186 <__aeabi_dmul+0x186>
 8001184:	e172      	b.n	800146c <__aeabi_dmul+0x46c>
 8001186:	0001      	movs	r1, r0
 8001188:	4643      	mov	r3, r8
 800118a:	3908      	subs	r1, #8
 800118c:	408b      	lsls	r3, r1
 800118e:	4698      	mov	r8, r3
 8001190:	231d      	movs	r3, #29
 8001192:	1a9a      	subs	r2, r3, r2
 8001194:	4653      	mov	r3, sl
 8001196:	40d3      	lsrs	r3, r2
 8001198:	001a      	movs	r2, r3
 800119a:	4643      	mov	r3, r8
 800119c:	4313      	orrs	r3, r2
 800119e:	4652      	mov	r2, sl
 80011a0:	408a      	lsls	r2, r1
 80011a2:	4649      	mov	r1, r9
 80011a4:	1a08      	subs	r0, r1, r0
 80011a6:	4982      	ldr	r1, [pc, #520]	; (80013b0 <__aeabi_dmul+0x3b0>)
 80011a8:	4689      	mov	r9, r1
 80011aa:	4481      	add	r9, r0
 80011ac:	2000      	movs	r0, #0
 80011ae:	e768      	b.n	8001082 <__aeabi_dmul+0x82>
 80011b0:	4b7b      	ldr	r3, [pc, #492]	; (80013a0 <__aeabi_dmul+0x3a0>)
 80011b2:	2700      	movs	r7, #0
 80011b4:	2600      	movs	r6, #0
 80011b6:	e78e      	b.n	80010d6 <__aeabi_dmul+0xd6>
 80011b8:	0c14      	lsrs	r4, r2, #16
 80011ba:	0412      	lsls	r2, r2, #16
 80011bc:	0c12      	lsrs	r2, r2, #16
 80011be:	0011      	movs	r1, r2
 80011c0:	0c37      	lsrs	r7, r6, #16
 80011c2:	0436      	lsls	r6, r6, #16
 80011c4:	0c35      	lsrs	r5, r6, #16
 80011c6:	4379      	muls	r1, r7
 80011c8:	0028      	movs	r0, r5
 80011ca:	468c      	mov	ip, r1
 80011cc:	002e      	movs	r6, r5
 80011ce:	4360      	muls	r0, r4
 80011d0:	4460      	add	r0, ip
 80011d2:	4683      	mov	fp, r0
 80011d4:	4356      	muls	r6, r2
 80011d6:	0021      	movs	r1, r4
 80011d8:	0c30      	lsrs	r0, r6, #16
 80011da:	4680      	mov	r8, r0
 80011dc:	4658      	mov	r0, fp
 80011de:	4379      	muls	r1, r7
 80011e0:	4440      	add	r0, r8
 80011e2:	9102      	str	r1, [sp, #8]
 80011e4:	4584      	cmp	ip, r0
 80011e6:	d906      	bls.n	80011f6 <__aeabi_dmul+0x1f6>
 80011e8:	4688      	mov	r8, r1
 80011ea:	2180      	movs	r1, #128	; 0x80
 80011ec:	0249      	lsls	r1, r1, #9
 80011ee:	468c      	mov	ip, r1
 80011f0:	44e0      	add	r8, ip
 80011f2:	4641      	mov	r1, r8
 80011f4:	9102      	str	r1, [sp, #8]
 80011f6:	0436      	lsls	r6, r6, #16
 80011f8:	0c01      	lsrs	r1, r0, #16
 80011fa:	0c36      	lsrs	r6, r6, #16
 80011fc:	0400      	lsls	r0, r0, #16
 80011fe:	468b      	mov	fp, r1
 8001200:	1981      	adds	r1, r0, r6
 8001202:	0c1e      	lsrs	r6, r3, #16
 8001204:	041b      	lsls	r3, r3, #16
 8001206:	0c1b      	lsrs	r3, r3, #16
 8001208:	9103      	str	r1, [sp, #12]
 800120a:	0019      	movs	r1, r3
 800120c:	4379      	muls	r1, r7
 800120e:	468c      	mov	ip, r1
 8001210:	0028      	movs	r0, r5
 8001212:	4375      	muls	r5, r6
 8001214:	4465      	add	r5, ip
 8001216:	46a8      	mov	r8, r5
 8001218:	4358      	muls	r0, r3
 800121a:	0c05      	lsrs	r5, r0, #16
 800121c:	4445      	add	r5, r8
 800121e:	4377      	muls	r7, r6
 8001220:	42a9      	cmp	r1, r5
 8001222:	d903      	bls.n	800122c <__aeabi_dmul+0x22c>
 8001224:	2180      	movs	r1, #128	; 0x80
 8001226:	0249      	lsls	r1, r1, #9
 8001228:	468c      	mov	ip, r1
 800122a:	4467      	add	r7, ip
 800122c:	0c29      	lsrs	r1, r5, #16
 800122e:	468c      	mov	ip, r1
 8001230:	0039      	movs	r1, r7
 8001232:	0400      	lsls	r0, r0, #16
 8001234:	0c00      	lsrs	r0, r0, #16
 8001236:	042d      	lsls	r5, r5, #16
 8001238:	182d      	adds	r5, r5, r0
 800123a:	4461      	add	r1, ip
 800123c:	44ab      	add	fp, r5
 800123e:	9105      	str	r1, [sp, #20]
 8001240:	4659      	mov	r1, fp
 8001242:	9104      	str	r1, [sp, #16]
 8001244:	9901      	ldr	r1, [sp, #4]
 8001246:	040f      	lsls	r7, r1, #16
 8001248:	0c3f      	lsrs	r7, r7, #16
 800124a:	0c08      	lsrs	r0, r1, #16
 800124c:	0039      	movs	r1, r7
 800124e:	4351      	muls	r1, r2
 8001250:	4342      	muls	r2, r0
 8001252:	4690      	mov	r8, r2
 8001254:	0002      	movs	r2, r0
 8001256:	468c      	mov	ip, r1
 8001258:	0c09      	lsrs	r1, r1, #16
 800125a:	468b      	mov	fp, r1
 800125c:	4362      	muls	r2, r4
 800125e:	437c      	muls	r4, r7
 8001260:	4444      	add	r4, r8
 8001262:	445c      	add	r4, fp
 8001264:	45a0      	cmp	r8, r4
 8001266:	d903      	bls.n	8001270 <__aeabi_dmul+0x270>
 8001268:	2180      	movs	r1, #128	; 0x80
 800126a:	0249      	lsls	r1, r1, #9
 800126c:	4688      	mov	r8, r1
 800126e:	4442      	add	r2, r8
 8001270:	0c21      	lsrs	r1, r4, #16
 8001272:	4688      	mov	r8, r1
 8001274:	4661      	mov	r1, ip
 8001276:	0409      	lsls	r1, r1, #16
 8001278:	0c09      	lsrs	r1, r1, #16
 800127a:	468c      	mov	ip, r1
 800127c:	0039      	movs	r1, r7
 800127e:	4359      	muls	r1, r3
 8001280:	4343      	muls	r3, r0
 8001282:	4370      	muls	r0, r6
 8001284:	437e      	muls	r6, r7
 8001286:	0c0f      	lsrs	r7, r1, #16
 8001288:	18f6      	adds	r6, r6, r3
 800128a:	0424      	lsls	r4, r4, #16
 800128c:	19be      	adds	r6, r7, r6
 800128e:	4464      	add	r4, ip
 8001290:	4442      	add	r2, r8
 8001292:	468c      	mov	ip, r1
 8001294:	42b3      	cmp	r3, r6
 8001296:	d903      	bls.n	80012a0 <__aeabi_dmul+0x2a0>
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	025b      	lsls	r3, r3, #9
 800129c:	4698      	mov	r8, r3
 800129e:	4440      	add	r0, r8
 80012a0:	9b02      	ldr	r3, [sp, #8]
 80012a2:	4661      	mov	r1, ip
 80012a4:	4698      	mov	r8, r3
 80012a6:	9b04      	ldr	r3, [sp, #16]
 80012a8:	0437      	lsls	r7, r6, #16
 80012aa:	4443      	add	r3, r8
 80012ac:	469b      	mov	fp, r3
 80012ae:	45ab      	cmp	fp, r5
 80012b0:	41ad      	sbcs	r5, r5
 80012b2:	426b      	negs	r3, r5
 80012b4:	040d      	lsls	r5, r1, #16
 80012b6:	9905      	ldr	r1, [sp, #20]
 80012b8:	0c2d      	lsrs	r5, r5, #16
 80012ba:	468c      	mov	ip, r1
 80012bc:	197f      	adds	r7, r7, r5
 80012be:	4467      	add	r7, ip
 80012c0:	18fd      	adds	r5, r7, r3
 80012c2:	46a8      	mov	r8, r5
 80012c4:	465d      	mov	r5, fp
 80012c6:	192d      	adds	r5, r5, r4
 80012c8:	42a5      	cmp	r5, r4
 80012ca:	41a4      	sbcs	r4, r4
 80012cc:	4693      	mov	fp, r2
 80012ce:	4264      	negs	r4, r4
 80012d0:	46a4      	mov	ip, r4
 80012d2:	44c3      	add	fp, r8
 80012d4:	44dc      	add	ip, fp
 80012d6:	428f      	cmp	r7, r1
 80012d8:	41bf      	sbcs	r7, r7
 80012da:	4598      	cmp	r8, r3
 80012dc:	419b      	sbcs	r3, r3
 80012de:	4593      	cmp	fp, r2
 80012e0:	4192      	sbcs	r2, r2
 80012e2:	45a4      	cmp	ip, r4
 80012e4:	41a4      	sbcs	r4, r4
 80012e6:	425b      	negs	r3, r3
 80012e8:	427f      	negs	r7, r7
 80012ea:	431f      	orrs	r7, r3
 80012ec:	0c36      	lsrs	r6, r6, #16
 80012ee:	4252      	negs	r2, r2
 80012f0:	4264      	negs	r4, r4
 80012f2:	19bf      	adds	r7, r7, r6
 80012f4:	4322      	orrs	r2, r4
 80012f6:	18bf      	adds	r7, r7, r2
 80012f8:	4662      	mov	r2, ip
 80012fa:	1838      	adds	r0, r7, r0
 80012fc:	0243      	lsls	r3, r0, #9
 80012fe:	0dd2      	lsrs	r2, r2, #23
 8001300:	9903      	ldr	r1, [sp, #12]
 8001302:	4313      	orrs	r3, r2
 8001304:	026a      	lsls	r2, r5, #9
 8001306:	430a      	orrs	r2, r1
 8001308:	1e50      	subs	r0, r2, #1
 800130a:	4182      	sbcs	r2, r0
 800130c:	4661      	mov	r1, ip
 800130e:	0ded      	lsrs	r5, r5, #23
 8001310:	432a      	orrs	r2, r5
 8001312:	024e      	lsls	r6, r1, #9
 8001314:	4332      	orrs	r2, r6
 8001316:	01d9      	lsls	r1, r3, #7
 8001318:	d400      	bmi.n	800131c <__aeabi_dmul+0x31c>
 800131a:	e0b3      	b.n	8001484 <__aeabi_dmul+0x484>
 800131c:	2601      	movs	r6, #1
 800131e:	0850      	lsrs	r0, r2, #1
 8001320:	4032      	ands	r2, r6
 8001322:	4302      	orrs	r2, r0
 8001324:	07de      	lsls	r6, r3, #31
 8001326:	4332      	orrs	r2, r6
 8001328:	085b      	lsrs	r3, r3, #1
 800132a:	4c22      	ldr	r4, [pc, #136]	; (80013b4 <__aeabi_dmul+0x3b4>)
 800132c:	4454      	add	r4, sl
 800132e:	2c00      	cmp	r4, #0
 8001330:	dd62      	ble.n	80013f8 <__aeabi_dmul+0x3f8>
 8001332:	0751      	lsls	r1, r2, #29
 8001334:	d009      	beq.n	800134a <__aeabi_dmul+0x34a>
 8001336:	200f      	movs	r0, #15
 8001338:	4010      	ands	r0, r2
 800133a:	2804      	cmp	r0, #4
 800133c:	d005      	beq.n	800134a <__aeabi_dmul+0x34a>
 800133e:	1d10      	adds	r0, r2, #4
 8001340:	4290      	cmp	r0, r2
 8001342:	4192      	sbcs	r2, r2
 8001344:	4252      	negs	r2, r2
 8001346:	189b      	adds	r3, r3, r2
 8001348:	0002      	movs	r2, r0
 800134a:	01d9      	lsls	r1, r3, #7
 800134c:	d504      	bpl.n	8001358 <__aeabi_dmul+0x358>
 800134e:	2480      	movs	r4, #128	; 0x80
 8001350:	4819      	ldr	r0, [pc, #100]	; (80013b8 <__aeabi_dmul+0x3b8>)
 8001352:	00e4      	lsls	r4, r4, #3
 8001354:	4003      	ands	r3, r0
 8001356:	4454      	add	r4, sl
 8001358:	4818      	ldr	r0, [pc, #96]	; (80013bc <__aeabi_dmul+0x3bc>)
 800135a:	4284      	cmp	r4, r0
 800135c:	dd00      	ble.n	8001360 <__aeabi_dmul+0x360>
 800135e:	e727      	b.n	80011b0 <__aeabi_dmul+0x1b0>
 8001360:	075e      	lsls	r6, r3, #29
 8001362:	025b      	lsls	r3, r3, #9
 8001364:	08d2      	lsrs	r2, r2, #3
 8001366:	0b1f      	lsrs	r7, r3, #12
 8001368:	0563      	lsls	r3, r4, #21
 800136a:	4316      	orrs	r6, r2
 800136c:	0d5b      	lsrs	r3, r3, #21
 800136e:	e6b2      	b.n	80010d6 <__aeabi_dmul+0xd6>
 8001370:	2300      	movs	r3, #0
 8001372:	4699      	mov	r9, r3
 8001374:	3301      	adds	r3, #1
 8001376:	2704      	movs	r7, #4
 8001378:	2600      	movs	r6, #0
 800137a:	469b      	mov	fp, r3
 800137c:	e664      	b.n	8001048 <__aeabi_dmul+0x48>
 800137e:	2303      	movs	r3, #3
 8001380:	9701      	str	r7, [sp, #4]
 8001382:	4681      	mov	r9, r0
 8001384:	270c      	movs	r7, #12
 8001386:	469b      	mov	fp, r3
 8001388:	e65e      	b.n	8001048 <__aeabi_dmul+0x48>
 800138a:	2201      	movs	r2, #1
 800138c:	2001      	movs	r0, #1
 800138e:	4317      	orrs	r7, r2
 8001390:	2200      	movs	r2, #0
 8001392:	e676      	b.n	8001082 <__aeabi_dmul+0x82>
 8001394:	2303      	movs	r3, #3
 8001396:	2003      	movs	r0, #3
 8001398:	431f      	orrs	r7, r3
 800139a:	4643      	mov	r3, r8
 800139c:	e671      	b.n	8001082 <__aeabi_dmul+0x82>
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	000007ff 	.word	0x000007ff
 80013a4:	fffffc01 	.word	0xfffffc01
 80013a8:	0800b700 	.word	0x0800b700
 80013ac:	800fffff 	.word	0x800fffff
 80013b0:	fffffc0d 	.word	0xfffffc0d
 80013b4:	000003ff 	.word	0x000003ff
 80013b8:	feffffff 	.word	0xfeffffff
 80013bc:	000007fe 	.word	0x000007fe
 80013c0:	2300      	movs	r3, #0
 80013c2:	2780      	movs	r7, #128	; 0x80
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	033f      	lsls	r7, r7, #12
 80013c8:	2600      	movs	r6, #0
 80013ca:	4b43      	ldr	r3, [pc, #268]	; (80014d8 <__aeabi_dmul+0x4d8>)
 80013cc:	e683      	b.n	80010d6 <__aeabi_dmul+0xd6>
 80013ce:	9b01      	ldr	r3, [sp, #4]
 80013d0:	0032      	movs	r2, r6
 80013d2:	46a4      	mov	ip, r4
 80013d4:	4658      	mov	r0, fp
 80013d6:	e670      	b.n	80010ba <__aeabi_dmul+0xba>
 80013d8:	46ac      	mov	ip, r5
 80013da:	e66e      	b.n	80010ba <__aeabi_dmul+0xba>
 80013dc:	2780      	movs	r7, #128	; 0x80
 80013de:	9901      	ldr	r1, [sp, #4]
 80013e0:	033f      	lsls	r7, r7, #12
 80013e2:	4239      	tst	r1, r7
 80013e4:	d02d      	beq.n	8001442 <__aeabi_dmul+0x442>
 80013e6:	423b      	tst	r3, r7
 80013e8:	d12b      	bne.n	8001442 <__aeabi_dmul+0x442>
 80013ea:	431f      	orrs	r7, r3
 80013ec:	033f      	lsls	r7, r7, #12
 80013ee:	0b3f      	lsrs	r7, r7, #12
 80013f0:	9500      	str	r5, [sp, #0]
 80013f2:	0016      	movs	r6, r2
 80013f4:	4b38      	ldr	r3, [pc, #224]	; (80014d8 <__aeabi_dmul+0x4d8>)
 80013f6:	e66e      	b.n	80010d6 <__aeabi_dmul+0xd6>
 80013f8:	2501      	movs	r5, #1
 80013fa:	1b2d      	subs	r5, r5, r4
 80013fc:	2d38      	cmp	r5, #56	; 0x38
 80013fe:	dd00      	ble.n	8001402 <__aeabi_dmul+0x402>
 8001400:	e666      	b.n	80010d0 <__aeabi_dmul+0xd0>
 8001402:	2d1f      	cmp	r5, #31
 8001404:	dc40      	bgt.n	8001488 <__aeabi_dmul+0x488>
 8001406:	4835      	ldr	r0, [pc, #212]	; (80014dc <__aeabi_dmul+0x4dc>)
 8001408:	001c      	movs	r4, r3
 800140a:	4450      	add	r0, sl
 800140c:	0016      	movs	r6, r2
 800140e:	4082      	lsls	r2, r0
 8001410:	4084      	lsls	r4, r0
 8001412:	40ee      	lsrs	r6, r5
 8001414:	1e50      	subs	r0, r2, #1
 8001416:	4182      	sbcs	r2, r0
 8001418:	4334      	orrs	r4, r6
 800141a:	4314      	orrs	r4, r2
 800141c:	40eb      	lsrs	r3, r5
 800141e:	0762      	lsls	r2, r4, #29
 8001420:	d009      	beq.n	8001436 <__aeabi_dmul+0x436>
 8001422:	220f      	movs	r2, #15
 8001424:	4022      	ands	r2, r4
 8001426:	2a04      	cmp	r2, #4
 8001428:	d005      	beq.n	8001436 <__aeabi_dmul+0x436>
 800142a:	0022      	movs	r2, r4
 800142c:	1d14      	adds	r4, r2, #4
 800142e:	4294      	cmp	r4, r2
 8001430:	4180      	sbcs	r0, r0
 8001432:	4240      	negs	r0, r0
 8001434:	181b      	adds	r3, r3, r0
 8001436:	021a      	lsls	r2, r3, #8
 8001438:	d53e      	bpl.n	80014b8 <__aeabi_dmul+0x4b8>
 800143a:	2301      	movs	r3, #1
 800143c:	2700      	movs	r7, #0
 800143e:	2600      	movs	r6, #0
 8001440:	e649      	b.n	80010d6 <__aeabi_dmul+0xd6>
 8001442:	2780      	movs	r7, #128	; 0x80
 8001444:	9b01      	ldr	r3, [sp, #4]
 8001446:	033f      	lsls	r7, r7, #12
 8001448:	431f      	orrs	r7, r3
 800144a:	033f      	lsls	r7, r7, #12
 800144c:	0b3f      	lsrs	r7, r7, #12
 800144e:	9400      	str	r4, [sp, #0]
 8001450:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <__aeabi_dmul+0x4d8>)
 8001452:	e640      	b.n	80010d6 <__aeabi_dmul+0xd6>
 8001454:	0003      	movs	r3, r0
 8001456:	465a      	mov	r2, fp
 8001458:	3b28      	subs	r3, #40	; 0x28
 800145a:	409a      	lsls	r2, r3
 800145c:	2600      	movs	r6, #0
 800145e:	9201      	str	r2, [sp, #4]
 8001460:	e66d      	b.n	800113e <__aeabi_dmul+0x13e>
 8001462:	4658      	mov	r0, fp
 8001464:	f000 f92e 	bl	80016c4 <__clzsi2>
 8001468:	3020      	adds	r0, #32
 800146a:	e657      	b.n	800111c <__aeabi_dmul+0x11c>
 800146c:	0003      	movs	r3, r0
 800146e:	4652      	mov	r2, sl
 8001470:	3b28      	subs	r3, #40	; 0x28
 8001472:	409a      	lsls	r2, r3
 8001474:	0013      	movs	r3, r2
 8001476:	2200      	movs	r2, #0
 8001478:	e693      	b.n	80011a2 <__aeabi_dmul+0x1a2>
 800147a:	4650      	mov	r0, sl
 800147c:	f000 f922 	bl	80016c4 <__clzsi2>
 8001480:	3020      	adds	r0, #32
 8001482:	e67b      	b.n	800117c <__aeabi_dmul+0x17c>
 8001484:	46ca      	mov	sl, r9
 8001486:	e750      	b.n	800132a <__aeabi_dmul+0x32a>
 8001488:	201f      	movs	r0, #31
 800148a:	001e      	movs	r6, r3
 800148c:	4240      	negs	r0, r0
 800148e:	1b04      	subs	r4, r0, r4
 8001490:	40e6      	lsrs	r6, r4
 8001492:	2d20      	cmp	r5, #32
 8001494:	d003      	beq.n	800149e <__aeabi_dmul+0x49e>
 8001496:	4c12      	ldr	r4, [pc, #72]	; (80014e0 <__aeabi_dmul+0x4e0>)
 8001498:	4454      	add	r4, sl
 800149a:	40a3      	lsls	r3, r4
 800149c:	431a      	orrs	r2, r3
 800149e:	1e50      	subs	r0, r2, #1
 80014a0:	4182      	sbcs	r2, r0
 80014a2:	4332      	orrs	r2, r6
 80014a4:	2607      	movs	r6, #7
 80014a6:	2700      	movs	r7, #0
 80014a8:	4016      	ands	r6, r2
 80014aa:	d009      	beq.n	80014c0 <__aeabi_dmul+0x4c0>
 80014ac:	200f      	movs	r0, #15
 80014ae:	2300      	movs	r3, #0
 80014b0:	4010      	ands	r0, r2
 80014b2:	0014      	movs	r4, r2
 80014b4:	2804      	cmp	r0, #4
 80014b6:	d1b9      	bne.n	800142c <__aeabi_dmul+0x42c>
 80014b8:	0022      	movs	r2, r4
 80014ba:	075e      	lsls	r6, r3, #29
 80014bc:	025b      	lsls	r3, r3, #9
 80014be:	0b1f      	lsrs	r7, r3, #12
 80014c0:	08d2      	lsrs	r2, r2, #3
 80014c2:	4316      	orrs	r6, r2
 80014c4:	2300      	movs	r3, #0
 80014c6:	e606      	b.n	80010d6 <__aeabi_dmul+0xd6>
 80014c8:	2780      	movs	r7, #128	; 0x80
 80014ca:	033f      	lsls	r7, r7, #12
 80014cc:	431f      	orrs	r7, r3
 80014ce:	033f      	lsls	r7, r7, #12
 80014d0:	0b3f      	lsrs	r7, r7, #12
 80014d2:	0016      	movs	r6, r2
 80014d4:	4b00      	ldr	r3, [pc, #0]	; (80014d8 <__aeabi_dmul+0x4d8>)
 80014d6:	e5fe      	b.n	80010d6 <__aeabi_dmul+0xd6>
 80014d8:	000007ff 	.word	0x000007ff
 80014dc:	0000041e 	.word	0x0000041e
 80014e0:	0000043e 	.word	0x0000043e

080014e4 <__aeabi_i2d>:
 80014e4:	b570      	push	{r4, r5, r6, lr}
 80014e6:	2800      	cmp	r0, #0
 80014e8:	d02d      	beq.n	8001546 <__aeabi_i2d+0x62>
 80014ea:	17c3      	asrs	r3, r0, #31
 80014ec:	18c5      	adds	r5, r0, r3
 80014ee:	405d      	eors	r5, r3
 80014f0:	0fc4      	lsrs	r4, r0, #31
 80014f2:	0028      	movs	r0, r5
 80014f4:	f000 f8e6 	bl	80016c4 <__clzsi2>
 80014f8:	4b15      	ldr	r3, [pc, #84]	; (8001550 <__aeabi_i2d+0x6c>)
 80014fa:	1a1b      	subs	r3, r3, r0
 80014fc:	055b      	lsls	r3, r3, #21
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	280a      	cmp	r0, #10
 8001502:	dd15      	ble.n	8001530 <__aeabi_i2d+0x4c>
 8001504:	380b      	subs	r0, #11
 8001506:	4085      	lsls	r5, r0
 8001508:	2200      	movs	r2, #0
 800150a:	032d      	lsls	r5, r5, #12
 800150c:	0b2d      	lsrs	r5, r5, #12
 800150e:	2100      	movs	r1, #0
 8001510:	0010      	movs	r0, r2
 8001512:	032d      	lsls	r5, r5, #12
 8001514:	0d0a      	lsrs	r2, r1, #20
 8001516:	0b2d      	lsrs	r5, r5, #12
 8001518:	0512      	lsls	r2, r2, #20
 800151a:	432a      	orrs	r2, r5
 800151c:	4d0d      	ldr	r5, [pc, #52]	; (8001554 <__aeabi_i2d+0x70>)
 800151e:	051b      	lsls	r3, r3, #20
 8001520:	402a      	ands	r2, r5
 8001522:	4313      	orrs	r3, r2
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	07e4      	lsls	r4, r4, #31
 8001528:	085b      	lsrs	r3, r3, #1
 800152a:	4323      	orrs	r3, r4
 800152c:	0019      	movs	r1, r3
 800152e:	bd70      	pop	{r4, r5, r6, pc}
 8001530:	0002      	movs	r2, r0
 8001532:	0029      	movs	r1, r5
 8001534:	3215      	adds	r2, #21
 8001536:	4091      	lsls	r1, r2
 8001538:	000a      	movs	r2, r1
 800153a:	210b      	movs	r1, #11
 800153c:	1a08      	subs	r0, r1, r0
 800153e:	40c5      	lsrs	r5, r0
 8001540:	032d      	lsls	r5, r5, #12
 8001542:	0b2d      	lsrs	r5, r5, #12
 8001544:	e7e3      	b.n	800150e <__aeabi_i2d+0x2a>
 8001546:	2400      	movs	r4, #0
 8001548:	2300      	movs	r3, #0
 800154a:	2500      	movs	r5, #0
 800154c:	2200      	movs	r2, #0
 800154e:	e7de      	b.n	800150e <__aeabi_i2d+0x2a>
 8001550:	0000041e 	.word	0x0000041e
 8001554:	800fffff 	.word	0x800fffff

08001558 <__aeabi_ui2d>:
 8001558:	b510      	push	{r4, lr}
 800155a:	1e04      	subs	r4, r0, #0
 800155c:	d025      	beq.n	80015aa <__aeabi_ui2d+0x52>
 800155e:	f000 f8b1 	bl	80016c4 <__clzsi2>
 8001562:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <__aeabi_ui2d+0x5c>)
 8001564:	1a1b      	subs	r3, r3, r0
 8001566:	055b      	lsls	r3, r3, #21
 8001568:	0d5b      	lsrs	r3, r3, #21
 800156a:	280a      	cmp	r0, #10
 800156c:	dd12      	ble.n	8001594 <__aeabi_ui2d+0x3c>
 800156e:	380b      	subs	r0, #11
 8001570:	4084      	lsls	r4, r0
 8001572:	2200      	movs	r2, #0
 8001574:	0324      	lsls	r4, r4, #12
 8001576:	0b24      	lsrs	r4, r4, #12
 8001578:	2100      	movs	r1, #0
 800157a:	0010      	movs	r0, r2
 800157c:	0324      	lsls	r4, r4, #12
 800157e:	0d0a      	lsrs	r2, r1, #20
 8001580:	0b24      	lsrs	r4, r4, #12
 8001582:	0512      	lsls	r2, r2, #20
 8001584:	4322      	orrs	r2, r4
 8001586:	4c0c      	ldr	r4, [pc, #48]	; (80015b8 <__aeabi_ui2d+0x60>)
 8001588:	051b      	lsls	r3, r3, #20
 800158a:	4022      	ands	r2, r4
 800158c:	4313      	orrs	r3, r2
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	0859      	lsrs	r1, r3, #1
 8001592:	bd10      	pop	{r4, pc}
 8001594:	0002      	movs	r2, r0
 8001596:	0021      	movs	r1, r4
 8001598:	3215      	adds	r2, #21
 800159a:	4091      	lsls	r1, r2
 800159c:	000a      	movs	r2, r1
 800159e:	210b      	movs	r1, #11
 80015a0:	1a08      	subs	r0, r1, r0
 80015a2:	40c4      	lsrs	r4, r0
 80015a4:	0324      	lsls	r4, r4, #12
 80015a6:	0b24      	lsrs	r4, r4, #12
 80015a8:	e7e6      	b.n	8001578 <__aeabi_ui2d+0x20>
 80015aa:	2300      	movs	r3, #0
 80015ac:	2400      	movs	r4, #0
 80015ae:	2200      	movs	r2, #0
 80015b0:	e7e2      	b.n	8001578 <__aeabi_ui2d+0x20>
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	0000041e 	.word	0x0000041e
 80015b8:	800fffff 	.word	0x800fffff

080015bc <__aeabi_d2f>:
 80015bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015be:	004c      	lsls	r4, r1, #1
 80015c0:	0d64      	lsrs	r4, r4, #21
 80015c2:	030b      	lsls	r3, r1, #12
 80015c4:	1c62      	adds	r2, r4, #1
 80015c6:	0a5b      	lsrs	r3, r3, #9
 80015c8:	0f46      	lsrs	r6, r0, #29
 80015ca:	0552      	lsls	r2, r2, #21
 80015cc:	0fc9      	lsrs	r1, r1, #31
 80015ce:	431e      	orrs	r6, r3
 80015d0:	00c5      	lsls	r5, r0, #3
 80015d2:	0d52      	lsrs	r2, r2, #21
 80015d4:	2a01      	cmp	r2, #1
 80015d6:	dd29      	ble.n	800162c <__aeabi_d2f+0x70>
 80015d8:	4b37      	ldr	r3, [pc, #220]	; (80016b8 <__aeabi_d2f+0xfc>)
 80015da:	18e7      	adds	r7, r4, r3
 80015dc:	2ffe      	cmp	r7, #254	; 0xfe
 80015de:	dc1c      	bgt.n	800161a <__aeabi_d2f+0x5e>
 80015e0:	2f00      	cmp	r7, #0
 80015e2:	dd3b      	ble.n	800165c <__aeabi_d2f+0xa0>
 80015e4:	0180      	lsls	r0, r0, #6
 80015e6:	1e43      	subs	r3, r0, #1
 80015e8:	4198      	sbcs	r0, r3
 80015ea:	2207      	movs	r2, #7
 80015ec:	00f3      	lsls	r3, r6, #3
 80015ee:	0f6d      	lsrs	r5, r5, #29
 80015f0:	4303      	orrs	r3, r0
 80015f2:	432b      	orrs	r3, r5
 80015f4:	401a      	ands	r2, r3
 80015f6:	2a00      	cmp	r2, #0
 80015f8:	d004      	beq.n	8001604 <__aeabi_d2f+0x48>
 80015fa:	220f      	movs	r2, #15
 80015fc:	401a      	ands	r2, r3
 80015fe:	2a04      	cmp	r2, #4
 8001600:	d000      	beq.n	8001604 <__aeabi_d2f+0x48>
 8001602:	3304      	adds	r3, #4
 8001604:	2280      	movs	r2, #128	; 0x80
 8001606:	04d2      	lsls	r2, r2, #19
 8001608:	401a      	ands	r2, r3
 800160a:	d024      	beq.n	8001656 <__aeabi_d2f+0x9a>
 800160c:	3701      	adds	r7, #1
 800160e:	b2fa      	uxtb	r2, r7
 8001610:	2fff      	cmp	r7, #255	; 0xff
 8001612:	d002      	beq.n	800161a <__aeabi_d2f+0x5e>
 8001614:	019b      	lsls	r3, r3, #6
 8001616:	0a58      	lsrs	r0, r3, #9
 8001618:	e001      	b.n	800161e <__aeabi_d2f+0x62>
 800161a:	22ff      	movs	r2, #255	; 0xff
 800161c:	2000      	movs	r0, #0
 800161e:	0240      	lsls	r0, r0, #9
 8001620:	05d2      	lsls	r2, r2, #23
 8001622:	0a40      	lsrs	r0, r0, #9
 8001624:	07c9      	lsls	r1, r1, #31
 8001626:	4310      	orrs	r0, r2
 8001628:	4308      	orrs	r0, r1
 800162a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800162c:	4335      	orrs	r5, r6
 800162e:	2c00      	cmp	r4, #0
 8001630:	d104      	bne.n	800163c <__aeabi_d2f+0x80>
 8001632:	2d00      	cmp	r5, #0
 8001634:	d10a      	bne.n	800164c <__aeabi_d2f+0x90>
 8001636:	2200      	movs	r2, #0
 8001638:	2000      	movs	r0, #0
 800163a:	e7f0      	b.n	800161e <__aeabi_d2f+0x62>
 800163c:	2d00      	cmp	r5, #0
 800163e:	d0ec      	beq.n	800161a <__aeabi_d2f+0x5e>
 8001640:	2080      	movs	r0, #128	; 0x80
 8001642:	03c0      	lsls	r0, r0, #15
 8001644:	4330      	orrs	r0, r6
 8001646:	22ff      	movs	r2, #255	; 0xff
 8001648:	e7e9      	b.n	800161e <__aeabi_d2f+0x62>
 800164a:	2400      	movs	r4, #0
 800164c:	2300      	movs	r3, #0
 800164e:	025b      	lsls	r3, r3, #9
 8001650:	0a58      	lsrs	r0, r3, #9
 8001652:	b2e2      	uxtb	r2, r4
 8001654:	e7e3      	b.n	800161e <__aeabi_d2f+0x62>
 8001656:	08db      	lsrs	r3, r3, #3
 8001658:	003c      	movs	r4, r7
 800165a:	e7f8      	b.n	800164e <__aeabi_d2f+0x92>
 800165c:	003b      	movs	r3, r7
 800165e:	3317      	adds	r3, #23
 8001660:	dbf3      	blt.n	800164a <__aeabi_d2f+0x8e>
 8001662:	2380      	movs	r3, #128	; 0x80
 8001664:	041b      	lsls	r3, r3, #16
 8001666:	4333      	orrs	r3, r6
 8001668:	261e      	movs	r6, #30
 800166a:	1bf6      	subs	r6, r6, r7
 800166c:	2e1f      	cmp	r6, #31
 800166e:	dd14      	ble.n	800169a <__aeabi_d2f+0xde>
 8001670:	2202      	movs	r2, #2
 8001672:	4252      	negs	r2, r2
 8001674:	1bd7      	subs	r7, r2, r7
 8001676:	001a      	movs	r2, r3
 8001678:	40fa      	lsrs	r2, r7
 800167a:	0017      	movs	r7, r2
 800167c:	2e20      	cmp	r6, #32
 800167e:	d004      	beq.n	800168a <__aeabi_d2f+0xce>
 8001680:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <__aeabi_d2f+0x100>)
 8001682:	4694      	mov	ip, r2
 8001684:	4464      	add	r4, ip
 8001686:	40a3      	lsls	r3, r4
 8001688:	431d      	orrs	r5, r3
 800168a:	002b      	movs	r3, r5
 800168c:	1e5d      	subs	r5, r3, #1
 800168e:	41ab      	sbcs	r3, r5
 8001690:	2207      	movs	r2, #7
 8001692:	433b      	orrs	r3, r7
 8001694:	401a      	ands	r2, r3
 8001696:	2700      	movs	r7, #0
 8001698:	e7ad      	b.n	80015f6 <__aeabi_d2f+0x3a>
 800169a:	4a09      	ldr	r2, [pc, #36]	; (80016c0 <__aeabi_d2f+0x104>)
 800169c:	0028      	movs	r0, r5
 800169e:	18a2      	adds	r2, r4, r2
 80016a0:	4095      	lsls	r5, r2
 80016a2:	4093      	lsls	r3, r2
 80016a4:	1e6c      	subs	r4, r5, #1
 80016a6:	41a5      	sbcs	r5, r4
 80016a8:	40f0      	lsrs	r0, r6
 80016aa:	2207      	movs	r2, #7
 80016ac:	432b      	orrs	r3, r5
 80016ae:	4303      	orrs	r3, r0
 80016b0:	401a      	ands	r2, r3
 80016b2:	2700      	movs	r7, #0
 80016b4:	e79f      	b.n	80015f6 <__aeabi_d2f+0x3a>
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	fffffc80 	.word	0xfffffc80
 80016bc:	fffffca2 	.word	0xfffffca2
 80016c0:	fffffc82 	.word	0xfffffc82

080016c4 <__clzsi2>:
 80016c4:	211c      	movs	r1, #28
 80016c6:	2301      	movs	r3, #1
 80016c8:	041b      	lsls	r3, r3, #16
 80016ca:	4298      	cmp	r0, r3
 80016cc:	d301      	bcc.n	80016d2 <__clzsi2+0xe>
 80016ce:	0c00      	lsrs	r0, r0, #16
 80016d0:	3910      	subs	r1, #16
 80016d2:	0a1b      	lsrs	r3, r3, #8
 80016d4:	4298      	cmp	r0, r3
 80016d6:	d301      	bcc.n	80016dc <__clzsi2+0x18>
 80016d8:	0a00      	lsrs	r0, r0, #8
 80016da:	3908      	subs	r1, #8
 80016dc:	091b      	lsrs	r3, r3, #4
 80016de:	4298      	cmp	r0, r3
 80016e0:	d301      	bcc.n	80016e6 <__clzsi2+0x22>
 80016e2:	0900      	lsrs	r0, r0, #4
 80016e4:	3904      	subs	r1, #4
 80016e6:	a202      	add	r2, pc, #8	; (adr r2, 80016f0 <__clzsi2+0x2c>)
 80016e8:	5c10      	ldrb	r0, [r2, r0]
 80016ea:	1840      	adds	r0, r0, r1
 80016ec:	4770      	bx	lr
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	02020304 	.word	0x02020304
 80016f4:	01010101 	.word	0x01010101
	...

08001700 <SPI_CS_LOW>:
static uint8_t textSize;		// size of characters
static uint16_t textColor;		// color of characters
static uint16_t bg;				// background color

// ---- lower level functions ----
void SPI_CS_LOW() {HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);}
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
 8001704:	4b04      	ldr	r3, [pc, #16]	; (8001718 <SPI_CS_LOW+0x18>)
 8001706:	2200      	movs	r2, #0
 8001708:	2180      	movs	r1, #128	; 0x80
 800170a:	0018      	movs	r0, r3
 800170c:	f005 ffbb 	bl	8007686 <HAL_GPIO_WritePin>
 8001710:	46c0      	nop			; (mov r8, r8)
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	50000800 	.word	0x50000800

0800171c <SPI_CS_HIGH>:
void SPI_CS_HIGH() {HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);}
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <SPI_CS_HIGH+0x18>)
 8001722:	2201      	movs	r2, #1
 8001724:	2180      	movs	r1, #128	; 0x80
 8001726:	0018      	movs	r0, r3
 8001728:	f005 ffad 	bl	8007686 <HAL_GPIO_WritePin>
 800172c:	46c0      	nop			; (mov r8, r8)
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	50000800 	.word	0x50000800

08001738 <SPI_DC_LOW>:
void SPI_DC_LOW() {HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);}
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <SPI_DC_LOW+0x18>)
 800173e:	2200      	movs	r2, #0
 8001740:	2140      	movs	r1, #64	; 0x40
 8001742:	0018      	movs	r0, r3
 8001744:	f005 ff9f 	bl	8007686 <HAL_GPIO_WritePin>
 8001748:	46c0      	nop			; (mov r8, r8)
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	50000400 	.word	0x50000400

08001754 <SPI_DC_HIGH>:
void SPI_DC_HIGH() {HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);}
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <SPI_DC_HIGH+0x18>)
 800175a:	2201      	movs	r2, #1
 800175c:	2140      	movs	r1, #64	; 0x40
 800175e:	0018      	movs	r0, r3
 8001760:	f005 ff91 	bl	8007686 <HAL_GPIO_WritePin>
 8001764:	46c0      	nop			; (mov r8, r8)
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	50000400 	.word	0x50000400

08001770 <sendCommand>:

void sendCommand(uint8_t cmd, uint8_t *args, uint16_t numArgs, SPI_HandleTypeDef *hspi) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	0011      	movs	r1, r2
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	230f      	movs	r3, #15
 800177e:	18fb      	adds	r3, r7, r3
 8001780:	1c02      	adds	r2, r0, #0
 8001782:	701a      	strb	r2, [r3, #0]
 8001784:	230c      	movs	r3, #12
 8001786:	18fb      	adds	r3, r7, r3
 8001788:	1c0a      	adds	r2, r1, #0
 800178a:	801a      	strh	r2, [r3, #0]
	while (HAL_SPI_GetState(hspi) == HAL_SPI_STATE_BUSY_TX);		// block next transfer request while DMA transfer is ongoing
 800178c:	46c0      	nop			; (mov r8, r8)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	0018      	movs	r0, r3
 8001792:	f008 f99f 	bl	8009ad4 <HAL_SPI_GetState>
 8001796:	0003      	movs	r3, r0
 8001798:	2b03      	cmp	r3, #3
 800179a:	d0f8      	beq.n	800178e <sendCommand+0x1e>
	SPI_CS_LOW();	// chip select
 800179c:	f7ff ffb0 	bl	8001700 <SPI_CS_LOW>

	SPI_DC_LOW();	// command mode
 80017a0:	f7ff ffca 	bl	8001738 <SPI_DC_LOW>
	HAL_SPI_Transmit(hspi, &cmd, 1, 1000);	// not using DMA bc it's only 1 byte
 80017a4:	23fa      	movs	r3, #250	; 0xfa
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	220f      	movs	r2, #15
 80017aa:	18b9      	adds	r1, r7, r2
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f007 feae 	bl	8009510 <HAL_SPI_Transmit>

	SPI_DC_HIGH();	// data mode
 80017b4:	f7ff ffce 	bl	8001754 <SPI_DC_HIGH>
	if (numArgs) {
 80017b8:	230c      	movs	r3, #12
 80017ba:	18fb      	adds	r3, r7, r3
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d007      	beq.n	80017d2 <sendCommand+0x62>
		HAL_SPI_Transmit_IT(hspi, args, numArgs);
 80017c2:	230c      	movs	r3, #12
 80017c4:	18fb      	adds	r3, r7, r3
 80017c6:	881a      	ldrh	r2, [r3, #0]
 80017c8:	68b9      	ldr	r1, [r7, #8]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	0018      	movs	r0, r3
 80017ce:	f007 ffed 	bl	80097ac <HAL_SPI_Transmit_IT>
	}
}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	46bd      	mov	sp, r7
 80017d6:	b004      	add	sp, #16
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <HAL_SPI_TxCpltCallback>:

// using only for sending data, but not commands
// dont send request when transfer is ongoing
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(CS_PORT, CS_PIN) == GPIO_PIN_RESET) SPI_CS_HIGH();	// chip select disable
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_SPI_TxCpltCallback+0x24>)
 80017e6:	2180      	movs	r1, #128	; 0x80
 80017e8:	0018      	movs	r0, r3
 80017ea:	f005 ff2f 	bl	800764c <HAL_GPIO_ReadPin>
 80017ee:	1e03      	subs	r3, r0, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_SPI_TxCpltCallback+0x1a>
 80017f2:	f7ff ff93 	bl	800171c <SPI_CS_HIGH>
}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	46bd      	mov	sp, r7
 80017fa:	b002      	add	sp, #8
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	50000800 	.word	0x50000800

08001804 <displayInit>:

// array parser heavily based on Adafruit library code
void displayInit(uint8_t *args, SPI_HandleTypeDef *hspi) {
 8001804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
	uint8_t  numCommands, cmd, numArgs;
	uint16_t ms;
	uint8_t index = 0;
 800180e:	220b      	movs	r2, #11
 8001810:	0011      	movs	r1, r2
 8001812:	18bb      	adds	r3, r7, r2
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	numCommands = args[index++];			// Number of commands to follow
 8001818:	000a      	movs	r2, r1
 800181a:	18bb      	adds	r3, r7, r2
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	18ba      	adds	r2, r7, r2
 8001820:	1c59      	adds	r1, r3, #1
 8001822:	7011      	strb	r1, [r2, #0]
 8001824:	001a      	movs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	189a      	adds	r2, r3, r2
 800182a:	230f      	movs	r3, #15
 800182c:	18fb      	adds	r3, r7, r3
 800182e:	7812      	ldrb	r2, [r2, #0]
 8001830:	701a      	strb	r2, [r3, #0]
	while(numCommands--) {					// For each command...
 8001832:	e05e      	b.n	80018f2 <displayInit+0xee>
		cmd = args[index++];				// Read command
 8001834:	200b      	movs	r0, #11
 8001836:	183b      	adds	r3, r7, r0
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	183a      	adds	r2, r7, r0
 800183c:	1c59      	adds	r1, r3, #1
 800183e:	7011      	strb	r1, [r2, #0]
 8001840:	001a      	movs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	189a      	adds	r2, r3, r2
 8001846:	230a      	movs	r3, #10
 8001848:	18fb      	adds	r3, r7, r3
 800184a:	7812      	ldrb	r2, [r2, #0]
 800184c:	701a      	strb	r2, [r3, #0]
		numArgs  = args[index++];			// Number of args to follow
 800184e:	183b      	adds	r3, r7, r0
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	183a      	adds	r2, r7, r0
 8001854:	1c59      	adds	r1, r3, #1
 8001856:	7011      	strb	r1, [r2, #0]
 8001858:	001a      	movs	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	189a      	adds	r2, r3, r2
 800185e:	2609      	movs	r6, #9
 8001860:	19bb      	adds	r3, r7, r6
 8001862:	7812      	ldrb	r2, [r2, #0]
 8001864:	701a      	strb	r2, [r3, #0]
		ms       = numArgs & ST_CMD_DELAY;	// If hibit set, delay follows args
 8001866:	19bb      	adds	r3, r7, r6
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	b29a      	uxth	r2, r3
 800186c:	210c      	movs	r1, #12
 800186e:	187b      	adds	r3, r7, r1
 8001870:	2180      	movs	r1, #128	; 0x80
 8001872:	400a      	ands	r2, r1
 8001874:	801a      	strh	r2, [r3, #0]
		numArgs &= ~ST_CMD_DELAY;			// Mask out delay bit
 8001876:	19bb      	adds	r3, r7, r6
 8001878:	19ba      	adds	r2, r7, r6
 800187a:	7812      	ldrb	r2, [r2, #0]
 800187c:	217f      	movs	r1, #127	; 0x7f
 800187e:	400a      	ands	r2, r1
 8001880:	701a      	strb	r2, [r3, #0]
		sendCommand(cmd, &args[index], numArgs, hspi);
 8001882:	0005      	movs	r5, r0
 8001884:	183b      	adds	r3, r7, r0
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	18d1      	adds	r1, r2, r3
 800188c:	19bb      	adds	r3, r7, r6
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	b29a      	uxth	r2, r3
 8001892:	683c      	ldr	r4, [r7, #0]
 8001894:	230a      	movs	r3, #10
 8001896:	18fb      	adds	r3, r7, r3
 8001898:	7818      	ldrb	r0, [r3, #0]
 800189a:	0023      	movs	r3, r4
 800189c:	f7ff ff68 	bl	8001770 <sendCommand>
		index += numArgs;
 80018a0:	0028      	movs	r0, r5
 80018a2:	183b      	adds	r3, r7, r0
 80018a4:	1839      	adds	r1, r7, r0
 80018a6:	19ba      	adds	r2, r7, r6
 80018a8:	7809      	ldrb	r1, [r1, #0]
 80018aa:	7812      	ldrb	r2, [r2, #0]
 80018ac:	188a      	adds	r2, r1, r2
 80018ae:	701a      	strb	r2, [r3, #0]

		if(ms) {
 80018b0:	210c      	movs	r1, #12
 80018b2:	187b      	adds	r3, r7, r1
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d01b      	beq.n	80018f2 <displayInit+0xee>
			ms = args[index++];			// Read post-command delay time (ms)
 80018ba:	220b      	movs	r2, #11
 80018bc:	18bb      	adds	r3, r7, r2
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	18ba      	adds	r2, r7, r2
 80018c2:	1c59      	adds	r1, r3, #1
 80018c4:	7011      	strb	r1, [r2, #0]
 80018c6:	001a      	movs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	189b      	adds	r3, r3, r2
 80018cc:	781a      	ldrb	r2, [r3, #0]
 80018ce:	210c      	movs	r1, #12
 80018d0:	187b      	adds	r3, r7, r1
 80018d2:	801a      	strh	r2, [r3, #0]
			if(ms == 255) ms = 500;		// If 255, delay for 500 ms
 80018d4:	187b      	adds	r3, r7, r1
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	2bff      	cmp	r3, #255	; 0xff
 80018da:	d104      	bne.n	80018e6 <displayInit+0xe2>
 80018dc:	230c      	movs	r3, #12
 80018de:	18fb      	adds	r3, r7, r3
 80018e0:	22fa      	movs	r2, #250	; 0xfa
 80018e2:	0052      	lsls	r2, r2, #1
 80018e4:	801a      	strh	r2, [r3, #0]
			HAL_Delay(ms);
 80018e6:	230c      	movs	r3, #12
 80018e8:	18fb      	adds	r3, r7, r3
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	0018      	movs	r0, r3
 80018ee:	f004 fded 	bl	80064cc <HAL_Delay>
	while(numCommands--) {					// For each command...
 80018f2:	220f      	movs	r2, #15
 80018f4:	18bb      	adds	r3, r7, r2
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	18ba      	adds	r2, r7, r2
 80018fa:	1e59      	subs	r1, r3, #1
 80018fc:	7011      	strb	r1, [r2, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d198      	bne.n	8001834 <displayInit+0x30>
		}
	}
}
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	46bd      	mov	sp, r7
 8001906:	b005      	add	sp, #20
 8001908:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800190c <TFT_startup>:

void TFT_startup(SPI_HandleTypeDef *hspi) {
 800190c:	b590      	push	{r4, r7, lr}
 800190e:	b0a3      	sub	sp, #140	; 0x8c
 8001910:	af02      	add	r7, sp, #8
 8001912:	6078      	str	r0, [r7, #4]
	// array pulled from Adafruit's library for ST7735R driver
	uint8_t initCommands[] = {
 8001914:	240c      	movs	r4, #12
 8001916:	193a      	adds	r2, r7, r4
 8001918:	4b14      	ldr	r3, [pc, #80]	; (800196c <TFT_startup+0x60>)
 800191a:	0010      	movs	r0, r2
 800191c:	0019      	movs	r1, r3
 800191e:	2371      	movs	r3, #113	; 0x71
 8001920:	001a      	movs	r2, r3
 8001922:	f009 f967 	bl	800abf4 <memcpy>
			10,                         //     10 ms delay
		ST77XX_DISPON,    ST_CMD_DELAY, //  4: Main screen turn on, no args w/delay
			100	                        //     100 ms delay
	};

	displayInit(initCommands, hspi);
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	193b      	adds	r3, r7, r4
 800192a:	0011      	movs	r1, r2
 800192c:	0018      	movs	r0, r3
 800192e:	f7ff ff69 	bl	8001804 <displayInit>
	setAddrWindow(0, 0, WIDTH, HEIGHT, hspi);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	23a0      	movs	r3, #160	; 0xa0
 8001938:	2280      	movs	r2, #128	; 0x80
 800193a:	2100      	movs	r1, #0
 800193c:	2000      	movs	r0, #0
 800193e:	f000 f821 	bl	8001984 <setAddrWindow>

	// set the global variables
	cursorX = 0;
 8001942:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <TFT_startup+0x64>)
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
	cursorY = 0;
 8001948:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <TFT_startup+0x68>)
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
	textSize = 1;
 800194e:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <TFT_startup+0x6c>)
 8001950:	2201      	movs	r2, #1
 8001952:	701a      	strb	r2, [r3, #0]
	textColor = ST77XX_BLACK;
 8001954:	4b09      	ldr	r3, [pc, #36]	; (800197c <TFT_startup+0x70>)
 8001956:	2200      	movs	r2, #0
 8001958:	801a      	strh	r2, [r3, #0]
	bg = ST77XX_WHITE;
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <TFT_startup+0x74>)
 800195c:	2201      	movs	r2, #1
 800195e:	4252      	negs	r2, r2
 8001960:	801a      	strh	r2, [r3, #0]
}
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	46bd      	mov	sp, r7
 8001966:	b021      	add	sp, #132	; 0x84
 8001968:	bd90      	pop	{r4, r7, pc}
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	0800b448 	.word	0x0800b448
 8001970:	200000ec 	.word	0x200000ec
 8001974:	200000ed 	.word	0x200000ed
 8001978:	200000ee 	.word	0x200000ee
 800197c:	200000f0 	.word	0x200000f0
 8001980:	200000f2 	.word	0x200000f2

08001984 <setAddrWindow>:

// draw something: set addr window -> write to ram memory
// sets specific area on display to write pixels to
// x and y for upper left corner, w for width, h for height
void setAddrWindow(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SPI_HandleTypeDef *hspi) {
 8001984:	b5b0      	push	{r4, r5, r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	0005      	movs	r5, r0
 800198c:	000c      	movs	r4, r1
 800198e:	0010      	movs	r0, r2
 8001990:	0019      	movs	r1, r3
 8001992:	1dbb      	adds	r3, r7, #6
 8001994:	1c2a      	adds	r2, r5, #0
 8001996:	801a      	strh	r2, [r3, #0]
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	1c22      	adds	r2, r4, #0
 800199c:	801a      	strh	r2, [r3, #0]
 800199e:	1cbb      	adds	r3, r7, #2
 80019a0:	1c02      	adds	r2, r0, #0
 80019a2:	801a      	strh	r2, [r3, #0]
 80019a4:	003b      	movs	r3, r7
 80019a6:	1c0a      	adds	r2, r1, #0
 80019a8:	801a      	strh	r2, [r3, #0]
	// building 32-bit window args
	uint8_t temp[4];
	temp[0] = (x & (0xFF00)) >> 8;
 80019aa:	1dbb      	adds	r3, r7, #6
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	0a1b      	lsrs	r3, r3, #8
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	210c      	movs	r1, #12
 80019b6:	187b      	adds	r3, r7, r1
 80019b8:	701a      	strb	r2, [r3, #0]
	temp[1] = x & (0xFF);
 80019ba:	1dbb      	adds	r3, r7, #6
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	187b      	adds	r3, r7, r1
 80019c2:	705a      	strb	r2, [r3, #1]
	temp[2] = ((x+w-1) & (0xFF00)) >> 8;
 80019c4:	1dbb      	adds	r3, r7, #6
 80019c6:	881a      	ldrh	r2, [r3, #0]
 80019c8:	1cbb      	adds	r3, r7, #2
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	18d3      	adds	r3, r2, r3
 80019ce:	3b01      	subs	r3, #1
 80019d0:	121b      	asrs	r3, r3, #8
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	187b      	adds	r3, r7, r1
 80019d6:	709a      	strb	r2, [r3, #2]
	temp[3] = (x+w-1) & (0xFF);
 80019d8:	1dbb      	adds	r3, r7, #6
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	1cbb      	adds	r3, r7, #2
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	18d3      	adds	r3, r2, r3
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	3b01      	subs	r3, #1
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	187b      	adds	r3, r7, r1
 80019ee:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_CASET, temp, 4, hspi);
 80019f0:	6a3b      	ldr	r3, [r7, #32]
 80019f2:	000c      	movs	r4, r1
 80019f4:	1879      	adds	r1, r7, r1
 80019f6:	2204      	movs	r2, #4
 80019f8:	202a      	movs	r0, #42	; 0x2a
 80019fa:	f7ff feb9 	bl	8001770 <sendCommand>

	temp[0] = (y & (0xFF00)) >> 8;
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	0a1b      	lsrs	r3, r3, #8
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	0021      	movs	r1, r4
 8001a0a:	187b      	adds	r3, r7, r1
 8001a0c:	701a      	strb	r2, [r3, #0]
	temp[1] = y & (0xFF);
 8001a0e:	1d3b      	adds	r3, r7, #4
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	187b      	adds	r3, r7, r1
 8001a16:	705a      	strb	r2, [r3, #1]
	temp[2] = ((y+h-1) & (0xFF00)) >> 8;
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	881a      	ldrh	r2, [r3, #0]
 8001a1c:	003b      	movs	r3, r7
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	18d3      	adds	r3, r2, r3
 8001a22:	3b01      	subs	r3, #1
 8001a24:	121b      	asrs	r3, r3, #8
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	187b      	adds	r3, r7, r1
 8001a2a:	709a      	strb	r2, [r3, #2]
	temp[3] = (y+h-1) & (0x00FF);
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	003b      	movs	r3, r7
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	18d3      	adds	r3, r2, r3
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	187b      	adds	r3, r7, r1
 8001a42:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_RASET, temp, 4, hspi);
 8001a44:	6a3b      	ldr	r3, [r7, #32]
 8001a46:	1879      	adds	r1, r7, r1
 8001a48:	2204      	movs	r2, #4
 8001a4a:	202b      	movs	r0, #43	; 0x2b
 8001a4c:	f7ff fe90 	bl	8001770 <sendCommand>
}
 8001a50:	46c0      	nop			; (mov r8, r8)
 8001a52:	46bd      	mov	sp, r7
 8001a54:	b004      	add	sp, #16
 8001a56:	bdb0      	pop	{r4, r5, r7, pc}

08001a58 <turnDisplayOn>:

// sends turn on/off command
void turnDisplayOn(SPI_HandleTypeDef *hspi) {sendCommand(ST77XX_DISPON, NULL, 0, hspi);}
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	2100      	movs	r1, #0
 8001a66:	2029      	movs	r0, #41	; 0x29
 8001a68:	f7ff fe82 	bl	8001770 <sendCommand>
 8001a6c:	46c0      	nop			; (mov r8, r8)
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	b002      	add	sp, #8
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <turnDisplayOff>:
void turnDisplayOff(SPI_HandleTypeDef *hspi) {sendCommand(ST77XX_DISPOFF, NULL, 0, hspi);}
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2100      	movs	r1, #0
 8001a82:	2028      	movs	r0, #40	; 0x28
 8001a84:	f7ff fe74 	bl	8001770 <sendCommand>
 8001a88:	46c0      	nop			; (mov r8, r8)
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	b002      	add	sp, #8
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <colorFixer>:
// 8-bit spi bus wants msb first; in array, lowest index is sent first
// because ARM is little-endian
//   for 16-bit value, it sends lower byte before upper byte
//   resulting in device thinking lower byte is upper byte
// this switches byte order around
uint16_t colorFixer(uint16_t color) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	0002      	movs	r2, r0
 8001a98:	1dbb      	adds	r3, r7, #6
 8001a9a:	801a      	strh	r2, [r3, #0]
	uint8_t a = color & 0xFF;
 8001a9c:	210f      	movs	r1, #15
 8001a9e:	187b      	adds	r3, r7, r1
 8001aa0:	1dba      	adds	r2, r7, #6
 8001aa2:	8812      	ldrh	r2, [r2, #0]
 8001aa4:	701a      	strb	r2, [r3, #0]
	uint8_t b = (color & 0xFF00) >> 8;
 8001aa6:	1dbb      	adds	r3, r7, #6
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	0a1b      	lsrs	r3, r3, #8
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	200e      	movs	r0, #14
 8001ab0:	183b      	adds	r3, r7, r0
 8001ab2:	701a      	strb	r2, [r3, #0]
	uint16_t ret = (a << 8) | b;
 8001ab4:	187b      	adds	r3, r7, r1
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	021b      	lsls	r3, r3, #8
 8001aba:	b21a      	sxth	r2, r3
 8001abc:	183b      	adds	r3, r7, r0
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	b21b      	sxth	r3, r3
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	b21a      	sxth	r2, r3
 8001ac6:	210c      	movs	r1, #12
 8001ac8:	187b      	adds	r3, r7, r1
 8001aca:	801a      	strh	r2, [r3, #0]

	return ret;
 8001acc:	187b      	adds	r3, r7, r1
 8001ace:	881b      	ldrh	r3, [r3, #0]
//	return color;
}
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	b004      	add	sp, #16
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <drawHLine>:
	uint16_t tempColor = colorFixer(color);		// else we're using address of something passed by value
	sendCommand(ST77XX_RAMWR, &tempColor, 2, hspi);
}

// draw a horizontal line. coordinates are for left point
void drawHLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 8001ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ada:	b091      	sub	sp, #68	; 0x44
 8001adc:	af02      	add	r7, sp, #8
 8001ade:	000c      	movs	r4, r1
 8001ae0:	0016      	movs	r6, r2
 8001ae2:	0019      	movs	r1, r3
 8001ae4:	2327      	movs	r3, #39	; 0x27
 8001ae6:	18fa      	adds	r2, r7, r3
 8001ae8:	1c03      	adds	r3, r0, #0
 8001aea:	7013      	strb	r3, [r2, #0]
 8001aec:	2326      	movs	r3, #38	; 0x26
 8001aee:	18fb      	adds	r3, r7, r3
 8001af0:	1c22      	adds	r2, r4, #0
 8001af2:	701a      	strb	r2, [r3, #0]
 8001af4:	2325      	movs	r3, #37	; 0x25
 8001af6:	18fb      	adds	r3, r7, r3
 8001af8:	1c32      	adds	r2, r6, #0
 8001afa:	701a      	strb	r2, [r3, #0]
 8001afc:	2322      	movs	r3, #34	; 0x22
 8001afe:	18fb      	adds	r3, r7, r3
 8001b00:	1c0a      	adds	r2, r1, #0
 8001b02:	801a      	strh	r2, [r3, #0]
 8001b04:	466b      	mov	r3, sp
 8001b06:	001e      	movs	r6, r3
	// bounds checking
	if (x < 0) x = 0;						// don't set x out of bounds
	if (x > WIDTH) x = WIDTH;
 8001b08:	2327      	movs	r3, #39	; 0x27
 8001b0a:	18fb      	adds	r3, r7, r3
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b80      	cmp	r3, #128	; 0x80
 8001b10:	d903      	bls.n	8001b1a <drawHLine+0x42>
 8001b12:	2327      	movs	r3, #39	; 0x27
 8001b14:	18fb      	adds	r3, r7, r3
 8001b16:	2280      	movs	r2, #128	; 0x80
 8001b18:	701a      	strb	r2, [r3, #0]
	if (x+size > WIDTH) size = WIDTH-x;		// don't set size so line draws out of bounds
 8001b1a:	2327      	movs	r3, #39	; 0x27
 8001b1c:	18fb      	adds	r3, r7, r3
 8001b1e:	781a      	ldrb	r2, [r3, #0]
 8001b20:	2325      	movs	r3, #37	; 0x25
 8001b22:	18fb      	adds	r3, r7, r3
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	18d3      	adds	r3, r2, r3
 8001b28:	2b80      	cmp	r3, #128	; 0x80
 8001b2a:	dd08      	ble.n	8001b3e <drawHLine+0x66>
 8001b2c:	2325      	movs	r3, #37	; 0x25
 8001b2e:	18fb      	adds	r3, r7, r3
 8001b30:	2227      	movs	r2, #39	; 0x27
 8001b32:	18ba      	adds	r2, r7, r2
 8001b34:	7812      	ldrb	r2, [r2, #0]
 8001b36:	2180      	movs	r1, #128	; 0x80
 8001b38:	4249      	negs	r1, r1
 8001b3a:	1a8a      	subs	r2, r1, r2
 8001b3c:	701a      	strb	r2, [r3, #0]
	if (x+size < 0) size = 0-x;
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 8001b3e:	2326      	movs	r3, #38	; 0x26
 8001b40:	18fb      	adds	r3, r7, r3
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2ba0      	cmp	r3, #160	; 0xa0
 8001b46:	d868      	bhi.n	8001c1a <drawHLine+0x142>

	setAddrWindow(x, y, size, 1, hspi);
 8001b48:	2327      	movs	r3, #39	; 0x27
 8001b4a:	18fb      	adds	r3, r7, r3
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	b298      	uxth	r0, r3
 8001b50:	2326      	movs	r3, #38	; 0x26
 8001b52:	18fb      	adds	r3, r7, r3
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	b299      	uxth	r1, r3
 8001b58:	2325      	movs	r3, #37	; 0x25
 8001b5a:	18fb      	adds	r3, r7, r3
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	2301      	movs	r3, #1
 8001b66:	f7ff ff0d 	bl	8001984 <setAddrWindow>
	uint16_t colors[size];
 8001b6a:	2325      	movs	r3, #37	; 0x25
 8001b6c:	18fb      	adds	r3, r7, r3
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	001a      	movs	r2, r3
 8001b72:	3a01      	subs	r2, #1
 8001b74:	633a      	str	r2, [r7, #48]	; 0x30
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	60fa      	str	r2, [r7, #12]
 8001b7c:	68b8      	ldr	r0, [r7, #8]
 8001b7e:	68f9      	ldr	r1, [r7, #12]
 8001b80:	0002      	movs	r2, r0
 8001b82:	0f12      	lsrs	r2, r2, #28
 8001b84:	000c      	movs	r4, r1
 8001b86:	0124      	lsls	r4, r4, #4
 8001b88:	61fc      	str	r4, [r7, #28]
 8001b8a:	69fc      	ldr	r4, [r7, #28]
 8001b8c:	4314      	orrs	r4, r2
 8001b8e:	61fc      	str	r4, [r7, #28]
 8001b90:	0002      	movs	r2, r0
 8001b92:	0112      	lsls	r2, r2, #4
 8001b94:	61ba      	str	r2, [r7, #24]
 8001b96:	603b      	str	r3, [r7, #0]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	607a      	str	r2, [r7, #4]
 8001b9c:	6838      	ldr	r0, [r7, #0]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	0002      	movs	r2, r0
 8001ba2:	0f12      	lsrs	r2, r2, #28
 8001ba4:	000c      	movs	r4, r1
 8001ba6:	0124      	lsls	r4, r4, #4
 8001ba8:	617c      	str	r4, [r7, #20]
 8001baa:	697c      	ldr	r4, [r7, #20]
 8001bac:	4314      	orrs	r4, r2
 8001bae:	617c      	str	r4, [r7, #20]
 8001bb0:	0002      	movs	r2, r0
 8001bb2:	0112      	lsls	r2, r2, #4
 8001bb4:	613a      	str	r2, [r7, #16]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	3301      	adds	r3, #1
 8001bba:	3307      	adds	r3, #7
 8001bbc:	08db      	lsrs	r3, r3, #3
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	466a      	mov	r2, sp
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	469d      	mov	sp, r3
 8001bc6:	ab02      	add	r3, sp, #8
 8001bc8:	3301      	adds	r3, #1
 8001bca:	085b      	lsrs	r3, r3, #1
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	637b      	str	r3, [r7, #52]	; 0x34
 8001bd4:	e00e      	b.n	8001bf4 <drawHLine+0x11c>
		colors[i] = colorFixer(color);
 8001bd6:	2322      	movs	r3, #34	; 0x22
 8001bd8:	18fb      	adds	r3, r7, r3
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	0018      	movs	r0, r3
 8001bde:	f7ff ff57 	bl	8001a90 <colorFixer>
 8001be2:	0003      	movs	r3, r0
 8001be4:	0019      	movs	r1, r3
 8001be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bea:	0052      	lsls	r2, r2, #1
 8001bec:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {
 8001bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	637b      	str	r3, [r7, #52]	; 0x34
 8001bf4:	2325      	movs	r3, #37	; 0x25
 8001bf6:	18fb      	adds	r3, r7, r3
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	dbea      	blt.n	8001bd6 <drawHLine+0xfe>
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 8001c00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c02:	2325      	movs	r3, #37	; 0x25
 8001c04:	18fb      	adds	r3, r7, r3
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	18db      	adds	r3, r3, r3
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c10:	202c      	movs	r0, #44	; 0x2c
 8001c12:	f7ff fdad 	bl	8001770 <sendCommand>
 8001c16:	46b5      	mov	sp, r6
 8001c18:	e001      	b.n	8001c1e <drawHLine+0x146>
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	46b5      	mov	sp, r6
}
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	b00f      	add	sp, #60	; 0x3c
 8001c22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c24 <drawVLine>:

// draws a vertical line. coordinates are for top point
void drawVLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 8001c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c26:	b091      	sub	sp, #68	; 0x44
 8001c28:	af02      	add	r7, sp, #8
 8001c2a:	000c      	movs	r4, r1
 8001c2c:	0016      	movs	r6, r2
 8001c2e:	0019      	movs	r1, r3
 8001c30:	2327      	movs	r3, #39	; 0x27
 8001c32:	18fa      	adds	r2, r7, r3
 8001c34:	1c03      	adds	r3, r0, #0
 8001c36:	7013      	strb	r3, [r2, #0]
 8001c38:	2326      	movs	r3, #38	; 0x26
 8001c3a:	18fb      	adds	r3, r7, r3
 8001c3c:	1c22      	adds	r2, r4, #0
 8001c3e:	701a      	strb	r2, [r3, #0]
 8001c40:	2325      	movs	r3, #37	; 0x25
 8001c42:	18fb      	adds	r3, r7, r3
 8001c44:	1c32      	adds	r2, r6, #0
 8001c46:	701a      	strb	r2, [r3, #0]
 8001c48:	2322      	movs	r3, #34	; 0x22
 8001c4a:	18fb      	adds	r3, r7, r3
 8001c4c:	1c0a      	adds	r2, r1, #0
 8001c4e:	801a      	strh	r2, [r3, #0]
 8001c50:	466b      	mov	r3, sp
 8001c52:	001e      	movs	r6, r3
	// bounds checking
	if (y < 0) y = 0;						// don't set y out of bounds
	if (y > HEIGHT) y = HEIGHT;
 8001c54:	2326      	movs	r3, #38	; 0x26
 8001c56:	18fb      	adds	r3, r7, r3
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2ba0      	cmp	r3, #160	; 0xa0
 8001c5c:	d903      	bls.n	8001c66 <drawVLine+0x42>
 8001c5e:	2326      	movs	r3, #38	; 0x26
 8001c60:	18fb      	adds	r3, r7, r3
 8001c62:	22a0      	movs	r2, #160	; 0xa0
 8001c64:	701a      	strb	r2, [r3, #0]
	if (y+size > HEIGHT) size = HEIGHT-y;	// don't set size so line draws out of bounds
 8001c66:	2326      	movs	r3, #38	; 0x26
 8001c68:	18fb      	adds	r3, r7, r3
 8001c6a:	781a      	ldrb	r2, [r3, #0]
 8001c6c:	2325      	movs	r3, #37	; 0x25
 8001c6e:	18fb      	adds	r3, r7, r3
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	18d3      	adds	r3, r2, r3
 8001c74:	2ba0      	cmp	r3, #160	; 0xa0
 8001c76:	dd08      	ble.n	8001c8a <drawVLine+0x66>
 8001c78:	2325      	movs	r3, #37	; 0x25
 8001c7a:	18fb      	adds	r3, r7, r3
 8001c7c:	2226      	movs	r2, #38	; 0x26
 8001c7e:	18ba      	adds	r2, r7, r2
 8001c80:	7812      	ldrb	r2, [r2, #0]
 8001c82:	2160      	movs	r1, #96	; 0x60
 8001c84:	4249      	negs	r1, r1
 8001c86:	1a8a      	subs	r2, r1, r2
 8001c88:	701a      	strb	r2, [r3, #0]
	if (y+size < 0) size = 0-y;
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if x is out of bounds
 8001c8a:	2327      	movs	r3, #39	; 0x27
 8001c8c:	18fb      	adds	r3, r7, r3
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b80      	cmp	r3, #128	; 0x80
 8001c92:	d869      	bhi.n	8001d68 <drawVLine+0x144>

	setAddrWindow(x, y, 1, size, hspi);
 8001c94:	2327      	movs	r3, #39	; 0x27
 8001c96:	18fb      	adds	r3, r7, r3
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	b298      	uxth	r0, r3
 8001c9c:	2326      	movs	r3, #38	; 0x26
 8001c9e:	18fb      	adds	r3, r7, r3
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	b299      	uxth	r1, r3
 8001ca4:	2325      	movs	r3, #37	; 0x25
 8001ca6:	18fb      	adds	r3, r7, r3
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	0013      	movs	r3, r2
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f7ff fe66 	bl	8001984 <setAddrWindow>
	uint16_t colors[size];
 8001cb8:	2325      	movs	r3, #37	; 0x25
 8001cba:	18fb      	adds	r3, r7, r3
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	001a      	movs	r2, r3
 8001cc0:	3a01      	subs	r2, #1
 8001cc2:	633a      	str	r2, [r7, #48]	; 0x30
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	60fa      	str	r2, [r7, #12]
 8001cca:	68b8      	ldr	r0, [r7, #8]
 8001ccc:	68f9      	ldr	r1, [r7, #12]
 8001cce:	0002      	movs	r2, r0
 8001cd0:	0f12      	lsrs	r2, r2, #28
 8001cd2:	000c      	movs	r4, r1
 8001cd4:	0124      	lsls	r4, r4, #4
 8001cd6:	61fc      	str	r4, [r7, #28]
 8001cd8:	69fc      	ldr	r4, [r7, #28]
 8001cda:	4314      	orrs	r4, r2
 8001cdc:	61fc      	str	r4, [r7, #28]
 8001cde:	0002      	movs	r2, r0
 8001ce0:	0112      	lsls	r2, r2, #4
 8001ce2:	61ba      	str	r2, [r7, #24]
 8001ce4:	603b      	str	r3, [r7, #0]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	607a      	str	r2, [r7, #4]
 8001cea:	6838      	ldr	r0, [r7, #0]
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	0002      	movs	r2, r0
 8001cf0:	0f12      	lsrs	r2, r2, #28
 8001cf2:	000c      	movs	r4, r1
 8001cf4:	0124      	lsls	r4, r4, #4
 8001cf6:	617c      	str	r4, [r7, #20]
 8001cf8:	697c      	ldr	r4, [r7, #20]
 8001cfa:	4314      	orrs	r4, r2
 8001cfc:	617c      	str	r4, [r7, #20]
 8001cfe:	0002      	movs	r2, r0
 8001d00:	0112      	lsls	r2, r2, #4
 8001d02:	613a      	str	r2, [r7, #16]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	3301      	adds	r3, #1
 8001d08:	3307      	adds	r3, #7
 8001d0a:	08db      	lsrs	r3, r3, #3
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	466a      	mov	r2, sp
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	469d      	mov	sp, r3
 8001d14:	ab02      	add	r3, sp, #8
 8001d16:	3301      	adds	r3, #1
 8001d18:	085b      	lsrs	r3, r3, #1
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {
 8001d1e:	2300      	movs	r3, #0
 8001d20:	637b      	str	r3, [r7, #52]	; 0x34
 8001d22:	e00e      	b.n	8001d42 <drawVLine+0x11e>
		colors[i] = colorFixer(color);
 8001d24:	2322      	movs	r3, #34	; 0x22
 8001d26:	18fb      	adds	r3, r7, r3
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	f7ff feb0 	bl	8001a90 <colorFixer>
 8001d30:	0003      	movs	r3, r0
 8001d32:	0019      	movs	r1, r3
 8001d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d38:	0052      	lsls	r2, r2, #1
 8001d3a:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {
 8001d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d3e:	3301      	adds	r3, #1
 8001d40:	637b      	str	r3, [r7, #52]	; 0x34
 8001d42:	2325      	movs	r3, #37	; 0x25
 8001d44:	18fb      	adds	r3, r7, r3
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	dbea      	blt.n	8001d24 <drawVLine+0x100>
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 8001d4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d50:	2325      	movs	r3, #37	; 0x25
 8001d52:	18fb      	adds	r3, r7, r3
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	18db      	adds	r3, r3, r3
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d5e:	202c      	movs	r0, #44	; 0x2c
 8001d60:	f7ff fd06 	bl	8001770 <sendCommand>
 8001d64:	46b5      	mov	sp, r6
 8001d66:	e001      	b.n	8001d6c <drawVLine+0x148>
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if x is out of bounds
 8001d68:	46c0      	nop			; (mov r8, r8)
 8001d6a:	46b5      	mov	sp, r6
}
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	b00f      	add	sp, #60	; 0x3c
 8001d70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d72 <drawBuffer>:

// draws on a specific region with input 16-bit buffer
void drawBuffer(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t *buffer, uint16_t bufferSize, SPI_HandleTypeDef *hspi) {
 8001d72:	b5b0      	push	{r4, r5, r7, lr}
 8001d74:	b084      	sub	sp, #16
 8001d76:	af02      	add	r7, sp, #8
 8001d78:	0005      	movs	r5, r0
 8001d7a:	000c      	movs	r4, r1
 8001d7c:	0010      	movs	r0, r2
 8001d7e:	0019      	movs	r1, r3
 8001d80:	1dfb      	adds	r3, r7, #7
 8001d82:	1c2a      	adds	r2, r5, #0
 8001d84:	701a      	strb	r2, [r3, #0]
 8001d86:	1dbb      	adds	r3, r7, #6
 8001d88:	1c22      	adds	r2, r4, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
 8001d8c:	1d7b      	adds	r3, r7, #5
 8001d8e:	1c02      	adds	r2, r0, #0
 8001d90:	701a      	strb	r2, [r3, #0]
 8001d92:	1d3b      	adds	r3, r7, #4
 8001d94:	1c0a      	adds	r2, r1, #0
 8001d96:	701a      	strb	r2, [r3, #0]
	if (x+w > WIDTH || y+h > HEIGHT) return;
 8001d98:	1dfb      	adds	r3, r7, #7
 8001d9a:	781a      	ldrb	r2, [r3, #0]
 8001d9c:	1d7b      	adds	r3, r7, #5
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	18d3      	adds	r3, r2, r3
 8001da2:	2b80      	cmp	r3, #128	; 0x80
 8001da4:	dc29      	bgt.n	8001dfa <drawBuffer+0x88>
 8001da6:	1dbb      	adds	r3, r7, #6
 8001da8:	781a      	ldrb	r2, [r3, #0]
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	18d3      	adds	r3, r2, r3
 8001db0:	2ba0      	cmp	r3, #160	; 0xa0
 8001db2:	dc22      	bgt.n	8001dfa <drawBuffer+0x88>

	// also don't call this with buffer size too big bc there's not enough ram for all pixels of display
	if (bufferSize > 10240) return;			// about 1/2 of total system ram
 8001db4:	231c      	movs	r3, #28
 8001db6:	18fb      	adds	r3, r7, r3
 8001db8:	881a      	ldrh	r2, [r3, #0]
 8001dba:	23a0      	movs	r3, #160	; 0xa0
 8001dbc:	019b      	lsls	r3, r3, #6
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d81d      	bhi.n	8001dfe <drawBuffer+0x8c>

	setAddrWindow(x, y, w, h, hspi);
 8001dc2:	1dfb      	adds	r3, r7, #7
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	b298      	uxth	r0, r3
 8001dc8:	1dbb      	adds	r3, r7, #6
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	b299      	uxth	r1, r3
 8001dce:	1d7b      	adds	r3, r7, #5
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	1d3b      	adds	r3, r7, #4
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	b29c      	uxth	r4, r3
 8001dda:	6a3b      	ldr	r3, [r7, #32]
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	0023      	movs	r3, r4
 8001de0:	f7ff fdd0 	bl	8001984 <setAddrWindow>
	sendCommand(ST77XX_RAMWR, buffer, bufferSize*2, hspi);
 8001de4:	231c      	movs	r3, #28
 8001de6:	18fb      	adds	r3, r7, r3
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	18db      	adds	r3, r3, r3
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	6a3b      	ldr	r3, [r7, #32]
 8001df0:	69b9      	ldr	r1, [r7, #24]
 8001df2:	202c      	movs	r0, #44	; 0x2c
 8001df4:	f7ff fcbc 	bl	8001770 <sendCommand>
 8001df8:	e002      	b.n	8001e00 <drawBuffer+0x8e>
	if (x+w > WIDTH || y+h > HEIGHT) return;
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	e000      	b.n	8001e00 <drawBuffer+0x8e>
	if (bufferSize > 10240) return;			// about 1/2 of total system ram
 8001dfe:	46c0      	nop			; (mov r8, r8)
}
 8001e00:	46bd      	mov	sp, r7
 8001e02:	b002      	add	sp, #8
 8001e04:	bdb0      	pop	{r4, r5, r7, pc}

08001e06 <drawRect>:
		}
	}
}

// draw an empty rectangle
void drawRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color, SPI_HandleTypeDef *hspi) {
 8001e06:	b5b0      	push	{r4, r5, r7, lr}
 8001e08:	b084      	sub	sp, #16
 8001e0a:	af02      	add	r7, sp, #8
 8001e0c:	0005      	movs	r5, r0
 8001e0e:	000c      	movs	r4, r1
 8001e10:	0010      	movs	r0, r2
 8001e12:	0019      	movs	r1, r3
 8001e14:	1dfb      	adds	r3, r7, #7
 8001e16:	1c2a      	adds	r2, r5, #0
 8001e18:	701a      	strb	r2, [r3, #0]
 8001e1a:	1dbb      	adds	r3, r7, #6
 8001e1c:	1c22      	adds	r2, r4, #0
 8001e1e:	701a      	strb	r2, [r3, #0]
 8001e20:	1d7b      	adds	r3, r7, #5
 8001e22:	1c02      	adds	r2, r0, #0
 8001e24:	701a      	strb	r2, [r3, #0]
 8001e26:	1d3b      	adds	r3, r7, #4
 8001e28:	1c0a      	adds	r2, r1, #0
 8001e2a:	701a      	strb	r2, [r3, #0]
	drawHLine(x, y, w, color, hspi);
 8001e2c:	2518      	movs	r5, #24
 8001e2e:	197b      	adds	r3, r7, r5
 8001e30:	881c      	ldrh	r4, [r3, #0]
 8001e32:	1d7b      	adds	r3, r7, #5
 8001e34:	781a      	ldrb	r2, [r3, #0]
 8001e36:	1dbb      	adds	r3, r7, #6
 8001e38:	7819      	ldrb	r1, [r3, #0]
 8001e3a:	1dfb      	adds	r3, r7, #7
 8001e3c:	7818      	ldrb	r0, [r3, #0]
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	0023      	movs	r3, r4
 8001e44:	f7ff fe48 	bl	8001ad8 <drawHLine>
	drawHLine(x, y+h-1, w, color, hspi);
 8001e48:	1dba      	adds	r2, r7, #6
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	7812      	ldrb	r2, [r2, #0]
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	18d3      	adds	r3, r2, r3
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	3b01      	subs	r3, #1
 8001e56:	b2d9      	uxtb	r1, r3
 8001e58:	197b      	adds	r3, r7, r5
 8001e5a:	881c      	ldrh	r4, [r3, #0]
 8001e5c:	1d7b      	adds	r3, r7, #5
 8001e5e:	781a      	ldrb	r2, [r3, #0]
 8001e60:	1dfb      	adds	r3, r7, #7
 8001e62:	7818      	ldrb	r0, [r3, #0]
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	0023      	movs	r3, r4
 8001e6a:	f7ff fe35 	bl	8001ad8 <drawHLine>
	drawVLine(x, y, h, color, hspi);
 8001e6e:	197b      	adds	r3, r7, r5
 8001e70:	881c      	ldrh	r4, [r3, #0]
 8001e72:	1d3b      	adds	r3, r7, #4
 8001e74:	781a      	ldrb	r2, [r3, #0]
 8001e76:	1dbb      	adds	r3, r7, #6
 8001e78:	7819      	ldrb	r1, [r3, #0]
 8001e7a:	1dfb      	adds	r3, r7, #7
 8001e7c:	7818      	ldrb	r0, [r3, #0]
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	0023      	movs	r3, r4
 8001e84:	f7ff fece 	bl	8001c24 <drawVLine>
	drawVLine(x+w-1, y, h, color, hspi);
 8001e88:	1dfa      	adds	r2, r7, #7
 8001e8a:	1d7b      	adds	r3, r7, #5
 8001e8c:	7812      	ldrb	r2, [r2, #0]
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	18d3      	adds	r3, r2, r3
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	3b01      	subs	r3, #1
 8001e96:	b2d8      	uxtb	r0, r3
 8001e98:	197b      	adds	r3, r7, r5
 8001e9a:	881c      	ldrh	r4, [r3, #0]
 8001e9c:	1d3b      	adds	r3, r7, #4
 8001e9e:	781a      	ldrb	r2, [r3, #0]
 8001ea0:	1dbb      	adds	r3, r7, #6
 8001ea2:	7819      	ldrb	r1, [r3, #0]
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	0023      	movs	r3, r4
 8001eaa:	f7ff febb 	bl	8001c24 <drawVLine>
}
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	b002      	add	sp, #8
 8001eb4:	bdb0      	pop	{r4, r5, r7, pc}

08001eb6 <fillRect>:

// draw a filled rectangle
void fillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color, SPI_HandleTypeDef *hspi) {
 8001eb6:	b5b0      	push	{r4, r5, r7, lr}
 8001eb8:	b086      	sub	sp, #24
 8001eba:	af02      	add	r7, sp, #8
 8001ebc:	0005      	movs	r5, r0
 8001ebe:	000c      	movs	r4, r1
 8001ec0:	0010      	movs	r0, r2
 8001ec2:	0019      	movs	r1, r3
 8001ec4:	1dfb      	adds	r3, r7, #7
 8001ec6:	1c2a      	adds	r2, r5, #0
 8001ec8:	701a      	strb	r2, [r3, #0]
 8001eca:	1dbb      	adds	r3, r7, #6
 8001ecc:	1c22      	adds	r2, r4, #0
 8001ece:	701a      	strb	r2, [r3, #0]
 8001ed0:	1d7b      	adds	r3, r7, #5
 8001ed2:	1c02      	adds	r2, r0, #0
 8001ed4:	701a      	strb	r2, [r3, #0]
 8001ed6:	1d3b      	adds	r3, r7, #4
 8001ed8:	1c0a      	adds	r2, r1, #0
 8001eda:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < h; i++) {
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	e014      	b.n	8001f0c <fillRect+0x56>
		drawHLine(x, y+i, w, color, hspi);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	1dbb      	adds	r3, r7, #6
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	18d3      	adds	r3, r2, r3
 8001eec:	b2d9      	uxtb	r1, r3
 8001eee:	2320      	movs	r3, #32
 8001ef0:	18fb      	adds	r3, r7, r3
 8001ef2:	881c      	ldrh	r4, [r3, #0]
 8001ef4:	1d7b      	adds	r3, r7, #5
 8001ef6:	781a      	ldrb	r2, [r3, #0]
 8001ef8:	1dfb      	adds	r3, r7, #7
 8001efa:	7818      	ldrb	r0, [r3, #0]
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	0023      	movs	r3, r4
 8001f02:	f7ff fde9 	bl	8001ad8 <drawHLine>
	for (int i = 0; i < h; i++) {
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	1d3b      	adds	r3, r7, #4
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	dbe5      	blt.n	8001ee2 <fillRect+0x2c>
	}
}
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	b004      	add	sp, #16
 8001f1c:	bdb0      	pop	{r4, r5, r7, pc}

08001f1e <fillScreen>:

// a big rectangle, but for the whole screen
void fillScreen(uint16_t color, SPI_HandleTypeDef *hspi) {
 8001f1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f20:	b091      	sub	sp, #68	; 0x44
 8001f22:	af04      	add	r7, sp, #16
 8001f24:	61b9      	str	r1, [r7, #24]
 8001f26:	221e      	movs	r2, #30
 8001f28:	18ba      	adds	r2, r7, r2
 8001f2a:	1c01      	adds	r1, r0, #0
 8001f2c:	8011      	strh	r1, [r2, #0]
 8001f2e:	466a      	mov	r2, sp
 8001f30:	607a      	str	r2, [r7, #4]
	uint16_t bufferSize = WIDTH*HEIGHT/4;
 8001f32:	2012      	movs	r0, #18
 8001f34:	2218      	movs	r2, #24
 8001f36:	18b9      	adds	r1, r7, r2
 8001f38:	180a      	adds	r2, r1, r0
 8001f3a:	21a0      	movs	r1, #160	; 0xa0
 8001f3c:	0149      	lsls	r1, r1, #5
 8001f3e:	8011      	strh	r1, [r2, #0]
	uint16_t buffer[bufferSize];
 8001f40:	2218      	movs	r2, #24
 8001f42:	18ba      	adds	r2, r7, r2
 8001f44:	1812      	adds	r2, r2, r0
 8001f46:	8812      	ldrh	r2, [r2, #0]
 8001f48:	0011      	movs	r1, r2
 8001f4a:	3901      	subs	r1, #1
 8001f4c:	6279      	str	r1, [r7, #36]	; 0x24
 8001f4e:	613a      	str	r2, [r7, #16]
 8001f50:	2100      	movs	r1, #0
 8001f52:	6179      	str	r1, [r7, #20]
 8001f54:	6939      	ldr	r1, [r7, #16]
 8001f56:	0f09      	lsrs	r1, r1, #28
 8001f58:	6978      	ldr	r0, [r7, #20]
 8001f5a:	0106      	lsls	r6, r0, #4
 8001f5c:	430e      	orrs	r6, r1
 8001f5e:	6939      	ldr	r1, [r7, #16]
 8001f60:	010d      	lsls	r5, r1, #4
 8001f62:	60ba      	str	r2, [r7, #8]
 8001f64:	2100      	movs	r1, #0
 8001f66:	60f9      	str	r1, [r7, #12]
 8001f68:	68bd      	ldr	r5, [r7, #8]
 8001f6a:	68fe      	ldr	r6, [r7, #12]
 8001f6c:	0029      	movs	r1, r5
 8001f6e:	0f09      	lsrs	r1, r1, #28
 8001f70:	0030      	movs	r0, r6
 8001f72:	0104      	lsls	r4, r0, #4
 8001f74:	430c      	orrs	r4, r1
 8001f76:	0029      	movs	r1, r5
 8001f78:	010b      	lsls	r3, r1, #4
 8001f7a:	0013      	movs	r3, r2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	3301      	adds	r3, #1
 8001f80:	3307      	adds	r3, #7
 8001f82:	08db      	lsrs	r3, r3, #3
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	466a      	mov	r2, sp
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	469d      	mov	sp, r3
 8001f8c:	ab04      	add	r3, sp, #16
 8001f8e:	3301      	adds	r3, #1
 8001f90:	085b      	lsrs	r3, r3, #1
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	623b      	str	r3, [r7, #32]
	int i;
	for (i = 0; i < bufferSize; i++) {
 8001f96:	2300      	movs	r3, #0
 8001f98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f9a:	e00e      	b.n	8001fba <fillScreen+0x9c>
		buffer[i] = colorFixer(color);
 8001f9c:	231e      	movs	r3, #30
 8001f9e:	18fb      	adds	r3, r7, r3
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	f7ff fd74 	bl	8001a90 <colorFixer>
 8001fa8:	0003      	movs	r3, r0
 8001faa:	0019      	movs	r1, r3
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fb0:	0052      	lsls	r2, r2, #1
 8001fb2:	52d1      	strh	r1, [r2, r3]
	for (i = 0; i < bufferSize; i++) {
 8001fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fba:	2312      	movs	r3, #18
 8001fbc:	2218      	movs	r2, #24
 8001fbe:	4694      	mov	ip, r2
 8001fc0:	44bc      	add	ip, r7
 8001fc2:	4463      	add	r3, ip
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	dbe7      	blt.n	8001f9c <fillScreen+0x7e>
	}

	// divided into 4 parts, since system ram is not big enough
	for (i = 0; i < 4; i++) {
 8001fcc:	2300      	movs	r3, #0
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fd0:	e017      	b.n	8002002 <fillScreen+0xe4>
		drawBuffer(0, HEIGHT/4*i, WIDTH, HEIGHT/4, buffer, bufferSize, hspi);
 8001fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2228      	movs	r2, #40	; 0x28
 8001fd8:	4353      	muls	r3, r2
 8001fda:	b2d9      	uxtb	r1, r3
 8001fdc:	6a3b      	ldr	r3, [r7, #32]
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	9202      	str	r2, [sp, #8]
 8001fe2:	2212      	movs	r2, #18
 8001fe4:	2018      	movs	r0, #24
 8001fe6:	4684      	mov	ip, r0
 8001fe8:	44bc      	add	ip, r7
 8001fea:	4462      	add	r2, ip
 8001fec:	8812      	ldrh	r2, [r2, #0]
 8001fee:	9201      	str	r2, [sp, #4]
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	2328      	movs	r3, #40	; 0x28
 8001ff4:	2280      	movs	r2, #128	; 0x80
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f7ff febb 	bl	8001d72 <drawBuffer>
	for (i = 0; i < 4; i++) {
 8001ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ffe:	3301      	adds	r3, #1
 8002000:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002004:	2b03      	cmp	r3, #3
 8002006:	dde4      	ble.n	8001fd2 <fillScreen+0xb4>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	469d      	mov	sp, r3
	}
}
 800200c:	46c0      	nop			; (mov r8, r8)
 800200e:	46bd      	mov	sp, r7
 8002010:	b00d      	add	sp, #52	; 0x34
 8002012:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002014 <clearScreen>:

void clearScreen(uint16_t backgroundColor, SPI_HandleTypeDef *hspi) {
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	0002      	movs	r2, r0
 800201c:	6039      	str	r1, [r7, #0]
 800201e:	1dbb      	adds	r3, r7, #6
 8002020:	801a      	strh	r2, [r3, #0]
	bg = backgroundColor;
 8002022:	4b07      	ldr	r3, [pc, #28]	; (8002040 <clearScreen+0x2c>)
 8002024:	1dba      	adds	r2, r7, #6
 8002026:	8812      	ldrh	r2, [r2, #0]
 8002028:	801a      	strh	r2, [r3, #0]
	fillScreen(backgroundColor, hspi);
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	1dbb      	adds	r3, r7, #6
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	0011      	movs	r1, r2
 8002032:	0018      	movs	r0, r3
 8002034:	f7ff ff73 	bl	8001f1e <fillScreen>
}
 8002038:	46c0      	nop			; (mov r8, r8)
 800203a:	46bd      	mov	sp, r7
 800203c:	b002      	add	sp, #8
 800203e:	bd80      	pop	{r7, pc}
 8002040:	200000f2 	.word	0x200000f2

08002044 <drawChar>:
// ---- end of basic shapes and lines ----

// ---- text functions ----
// draw a character. based on 6x8 font, but scalable
// instead of drawing pixel by pixel, function builds a buffer first and then sends
void drawChar(uint8_t ch, SPI_HandleTypeDef *hspi) {
 8002044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002046:	b095      	sub	sp, #84	; 0x54
 8002048:	af04      	add	r7, sp, #16
 800204a:	61b9      	str	r1, [r7, #24]
 800204c:	221f      	movs	r2, #31
 800204e:	18ba      	adds	r2, r7, r2
 8002050:	1c01      	adds	r1, r0, #0
 8002052:	7011      	strb	r1, [r2, #0]
 8002054:	466a      	mov	r2, sp
 8002056:	607a      	str	r2, [r7, #4]
	uint16_t bufferSize = 6*8*textSize*textSize;
 8002058:	4abe      	ldr	r2, [pc, #760]	; (8002354 <drawChar+0x310>)
 800205a:	7812      	ldrb	r2, [r2, #0]
 800205c:	b292      	uxth	r2, r2
 800205e:	49bd      	ldr	r1, [pc, #756]	; (8002354 <drawChar+0x310>)
 8002060:	7809      	ldrb	r1, [r1, #0]
 8002062:	b289      	uxth	r1, r1
 8002064:	434a      	muls	r2, r1
 8002066:	b291      	uxth	r1, r2
 8002068:	221a      	movs	r2, #26
 800206a:	2018      	movs	r0, #24
 800206c:	4684      	mov	ip, r0
 800206e:	44bc      	add	ip, r7
 8002070:	4462      	add	r2, ip
 8002072:	2030      	movs	r0, #48	; 0x30
 8002074:	4341      	muls	r1, r0
 8002076:	8011      	strh	r1, [r2, #0]
	uint16_t buffer[bufferSize];
 8002078:	221a      	movs	r2, #26
 800207a:	2118      	movs	r1, #24
 800207c:	468c      	mov	ip, r1
 800207e:	44bc      	add	ip, r7
 8002080:	4462      	add	r2, ip
 8002082:	8812      	ldrh	r2, [r2, #0]
 8002084:	0011      	movs	r1, r2
 8002086:	3901      	subs	r1, #1
 8002088:	62f9      	str	r1, [r7, #44]	; 0x2c
 800208a:	613a      	str	r2, [r7, #16]
 800208c:	2100      	movs	r1, #0
 800208e:	6179      	str	r1, [r7, #20]
 8002090:	6939      	ldr	r1, [r7, #16]
 8002092:	0f09      	lsrs	r1, r1, #28
 8002094:	6978      	ldr	r0, [r7, #20]
 8002096:	0106      	lsls	r6, r0, #4
 8002098:	430e      	orrs	r6, r1
 800209a:	6939      	ldr	r1, [r7, #16]
 800209c:	010d      	lsls	r5, r1, #4
 800209e:	60ba      	str	r2, [r7, #8]
 80020a0:	2100      	movs	r1, #0
 80020a2:	60f9      	str	r1, [r7, #12]
 80020a4:	68bd      	ldr	r5, [r7, #8]
 80020a6:	68fe      	ldr	r6, [r7, #12]
 80020a8:	0029      	movs	r1, r5
 80020aa:	0f09      	lsrs	r1, r1, #28
 80020ac:	0030      	movs	r0, r6
 80020ae:	0104      	lsls	r4, r0, #4
 80020b0:	430c      	orrs	r4, r1
 80020b2:	0029      	movs	r1, r5
 80020b4:	010b      	lsls	r3, r1, #4
 80020b6:	0013      	movs	r3, r2
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	3301      	adds	r3, #1
 80020bc:	3307      	adds	r3, #7
 80020be:	08db      	lsrs	r3, r3, #3
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	466a      	mov	r2, sp
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	469d      	mov	sp, r3
 80020c8:	ab04      	add	r3, sp, #16
 80020ca:	3301      	adds	r3, #1
 80020cc:	085b      	lsrs	r3, r3, #1
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	62bb      	str	r3, [r7, #40]	; 0x28
	int16_t rowOffset, address;

	// Char bitmap = 5 columns
	for (int8_t i=0; i<5; i++) {
 80020d2:	2325      	movs	r3, #37	; 0x25
 80020d4:	2218      	movs	r2, #24
 80020d6:	4694      	mov	ip, r2
 80020d8:	44bc      	add	ip, r7
 80020da:	4463      	add	r3, ip
 80020dc:	2200      	movs	r2, #0
 80020de:	701a      	strb	r2, [r3, #0]
 80020e0:	e1f4      	b.n	80024cc <drawChar+0x488>
		uint8_t line = font[ch*5+i];
 80020e2:	231f      	movs	r3, #31
 80020e4:	18fb      	adds	r3, r7, r3
 80020e6:	781a      	ldrb	r2, [r3, #0]
 80020e8:	0013      	movs	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	189a      	adds	r2, r3, r2
 80020ee:	2325      	movs	r3, #37	; 0x25
 80020f0:	2118      	movs	r1, #24
 80020f2:	468c      	mov	ip, r1
 80020f4:	44bc      	add	ip, r7
 80020f6:	4463      	add	r3, ip
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	b25b      	sxtb	r3, r3
 80020fc:	18d2      	adds	r2, r2, r3
 80020fe:	2324      	movs	r3, #36	; 0x24
 8002100:	2118      	movs	r1, #24
 8002102:	468c      	mov	ip, r1
 8002104:	44bc      	add	ip, r7
 8002106:	4463      	add	r3, ip
 8002108:	4993      	ldr	r1, [pc, #588]	; (8002358 <drawChar+0x314>)
 800210a:	5c8a      	ldrb	r2, [r1, r2]
 800210c:	701a      	strb	r2, [r3, #0]
		for (int8_t j=0; j<8; j++, line >>= 1) {
 800210e:	2323      	movs	r3, #35	; 0x23
 8002110:	2218      	movs	r2, #24
 8002112:	4694      	mov	ip, r2
 8002114:	44bc      	add	ip, r7
 8002116:	4463      	add	r3, ip
 8002118:	2200      	movs	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]
 800211c:	e1c0      	b.n	80024a0 <drawChar+0x45c>
			// draw character pixel
			if (line & 1) {
 800211e:	2324      	movs	r3, #36	; 0x24
 8002120:	2218      	movs	r2, #24
 8002122:	4694      	mov	ip, r2
 8002124:	44bc      	add	ip, r7
 8002126:	4463      	add	r3, ip
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2201      	movs	r2, #1
 800212c:	4013      	ands	r3, r2
 800212e:	d100      	bne.n	8002132 <drawChar+0xee>
 8002130:	e0c8      	b.n	80022c4 <drawChar+0x280>
				if (textSize == 1) {
 8002132:	4b88      	ldr	r3, [pc, #544]	; (8002354 <drawChar+0x310>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d11c      	bne.n	8002174 <drawChar+0x130>
					buffer[i+j*6] = colorFixer(textColor);
 800213a:	4b88      	ldr	r3, [pc, #544]	; (800235c <drawChar+0x318>)
 800213c:	8818      	ldrh	r0, [r3, #0]
 800213e:	2325      	movs	r3, #37	; 0x25
 8002140:	2218      	movs	r2, #24
 8002142:	4694      	mov	ip, r2
 8002144:	44bc      	add	ip, r7
 8002146:	4463      	add	r3, ip
 8002148:	2100      	movs	r1, #0
 800214a:	5659      	ldrsb	r1, [r3, r1]
 800214c:	2323      	movs	r3, #35	; 0x23
 800214e:	2218      	movs	r2, #24
 8002150:	4694      	mov	ip, r2
 8002152:	44bc      	add	ip, r7
 8002154:	4463      	add	r3, ip
 8002156:	2200      	movs	r2, #0
 8002158:	569a      	ldrsb	r2, [r3, r2]
 800215a:	0013      	movs	r3, r2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	189b      	adds	r3, r3, r2
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	18cc      	adds	r4, r1, r3
 8002164:	f7ff fc94 	bl	8001a90 <colorFixer>
 8002168:	0003      	movs	r3, r0
 800216a:	0019      	movs	r1, r3
 800216c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216e:	0062      	lsls	r2, r4, #1
 8002170:	52d1      	strh	r1, [r2, r3]
 8002172:	e17f      	b.n	8002474 <drawChar+0x430>
				}
				else {
					// indexing scheme for textSize > 1
					for (int8_t k = 0; k < textSize; k++) {
 8002174:	2322      	movs	r3, #34	; 0x22
 8002176:	2218      	movs	r2, #24
 8002178:	4694      	mov	ip, r2
 800217a:	44bc      	add	ip, r7
 800217c:	4463      	add	r3, ip
 800217e:	2200      	movs	r2, #0
 8002180:	701a      	strb	r2, [r3, #0]
 8002182:	e092      	b.n	80022aa <drawChar+0x266>
						rowOffset = textSize*6;
 8002184:	4b73      	ldr	r3, [pc, #460]	; (8002354 <drawChar+0x310>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	b29b      	uxth	r3, r3
 800218a:	1c1a      	adds	r2, r3, #0
 800218c:	1c13      	adds	r3, r2, #0
 800218e:	18db      	adds	r3, r3, r3
 8002190:	189b      	adds	r3, r3, r2
 8002192:	18db      	adds	r3, r3, r3
 8002194:	b29a      	uxth	r2, r3
 8002196:	2326      	movs	r3, #38	; 0x26
 8002198:	2118      	movs	r1, #24
 800219a:	468c      	mov	ip, r1
 800219c:	44bc      	add	ip, r7
 800219e:	4463      	add	r3, ip
 80021a0:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 80021a2:	2321      	movs	r3, #33	; 0x21
 80021a4:	2218      	movs	r2, #24
 80021a6:	4694      	mov	ip, r2
 80021a8:	44bc      	add	ip, r7
 80021aa:	4463      	add	r3, ip
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
 80021b0:	e064      	b.n	800227c <drawChar+0x238>
							address = (textSize*textSize*j*6)+(i*textSize);
 80021b2:	4b68      	ldr	r3, [pc, #416]	; (8002354 <drawChar+0x310>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	4a66      	ldr	r2, [pc, #408]	; (8002354 <drawChar+0x310>)
 80021ba:	7812      	ldrb	r2, [r2, #0]
 80021bc:	b292      	uxth	r2, r2
 80021be:	4353      	muls	r3, r2
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	2223      	movs	r2, #35	; 0x23
 80021c4:	2118      	movs	r1, #24
 80021c6:	468c      	mov	ip, r1
 80021c8:	44bc      	add	ip, r7
 80021ca:	4462      	add	r2, ip
 80021cc:	7812      	ldrb	r2, [r2, #0]
 80021ce:	b252      	sxtb	r2, r2
 80021d0:	b292      	uxth	r2, r2
 80021d2:	4353      	muls	r3, r2
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	1c1a      	adds	r2, r3, #0
 80021d8:	1c13      	adds	r3, r2, #0
 80021da:	18db      	adds	r3, r3, r3
 80021dc:	189b      	adds	r3, r3, r2
 80021de:	18db      	adds	r3, r3, r3
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	2325      	movs	r3, #37	; 0x25
 80021e4:	2118      	movs	r1, #24
 80021e6:	468c      	mov	ip, r1
 80021e8:	44bc      	add	ip, r7
 80021ea:	4463      	add	r3, ip
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	b25b      	sxtb	r3, r3
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	4958      	ldr	r1, [pc, #352]	; (8002354 <drawChar+0x310>)
 80021f4:	7809      	ldrb	r1, [r1, #0]
 80021f6:	b289      	uxth	r1, r1
 80021f8:	434b      	muls	r3, r1
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	18d3      	adds	r3, r2, r3
 80021fe:	b29a      	uxth	r2, r3
 8002200:	210e      	movs	r1, #14
 8002202:	2018      	movs	r0, #24
 8002204:	183b      	adds	r3, r7, r0
 8002206:	185b      	adds	r3, r3, r1
 8002208:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 800220a:	2322      	movs	r3, #34	; 0x22
 800220c:	2218      	movs	r2, #24
 800220e:	4694      	mov	ip, r2
 8002210:	44bc      	add	ip, r7
 8002212:	4463      	add	r3, ip
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	b25b      	sxtb	r3, r3
 8002218:	b29b      	uxth	r3, r3
 800221a:	2226      	movs	r2, #38	; 0x26
 800221c:	2418      	movs	r4, #24
 800221e:	46a4      	mov	ip, r4
 8002220:	44bc      	add	ip, r7
 8002222:	4462      	add	r2, ip
 8002224:	8812      	ldrh	r2, [r2, #0]
 8002226:	4353      	muls	r3, r2
 8002228:	b29a      	uxth	r2, r3
 800222a:	2521      	movs	r5, #33	; 0x21
 800222c:	183b      	adds	r3, r7, r0
 800222e:	195b      	adds	r3, r3, r5
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	b25b      	sxtb	r3, r3
 8002234:	b29b      	uxth	r3, r3
 8002236:	18d3      	adds	r3, r2, r3
 8002238:	b29a      	uxth	r2, r3
 800223a:	183b      	adds	r3, r7, r0
 800223c:	185b      	adds	r3, r3, r1
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	18d3      	adds	r3, r2, r3
 8002242:	b29a      	uxth	r2, r3
 8002244:	183b      	adds	r3, r7, r0
 8002246:	185b      	adds	r3, r3, r1
 8002248:	801a      	strh	r2, [r3, #0]
							buffer[address] = colorFixer(textColor);
 800224a:	4b44      	ldr	r3, [pc, #272]	; (800235c <drawChar+0x318>)
 800224c:	881a      	ldrh	r2, [r3, #0]
 800224e:	0006      	movs	r6, r0
 8002250:	183b      	adds	r3, r7, r0
 8002252:	185b      	adds	r3, r3, r1
 8002254:	2400      	movs	r4, #0
 8002256:	5f1c      	ldrsh	r4, [r3, r4]
 8002258:	0010      	movs	r0, r2
 800225a:	f7ff fc19 	bl	8001a90 <colorFixer>
 800225e:	0003      	movs	r3, r0
 8002260:	0019      	movs	r1, r3
 8002262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002264:	0062      	lsls	r2, r4, #1
 8002266:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 8002268:	19bb      	adds	r3, r7, r6
 800226a:	195b      	adds	r3, r3, r5
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	b25b      	sxtb	r3, r3
 8002270:	b2db      	uxtb	r3, r3
 8002272:	3301      	adds	r3, #1
 8002274:	b2da      	uxtb	r2, r3
 8002276:	19bb      	adds	r3, r7, r6
 8002278:	195b      	adds	r3, r3, r5
 800227a:	701a      	strb	r2, [r3, #0]
 800227c:	2321      	movs	r3, #33	; 0x21
 800227e:	2218      	movs	r2, #24
 8002280:	4694      	mov	ip, r2
 8002282:	44bc      	add	ip, r7
 8002284:	4463      	add	r3, ip
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	b25b      	sxtb	r3, r3
 800228a:	4a32      	ldr	r2, [pc, #200]	; (8002354 <drawChar+0x310>)
 800228c:	7812      	ldrb	r2, [r2, #0]
 800228e:	4293      	cmp	r3, r2
 8002290:	db8f      	blt.n	80021b2 <drawChar+0x16e>
					for (int8_t k = 0; k < textSize; k++) {
 8002292:	2122      	movs	r1, #34	; 0x22
 8002294:	2018      	movs	r0, #24
 8002296:	183b      	adds	r3, r7, r0
 8002298:	185b      	adds	r3, r3, r1
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	b25b      	sxtb	r3, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	3301      	adds	r3, #1
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	183b      	adds	r3, r7, r0
 80022a6:	185b      	adds	r3, r3, r1
 80022a8:	701a      	strb	r2, [r3, #0]
 80022aa:	2322      	movs	r3, #34	; 0x22
 80022ac:	2218      	movs	r2, #24
 80022ae:	4694      	mov	ip, r2
 80022b0:	44bc      	add	ip, r7
 80022b2:	4463      	add	r3, ip
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	b25b      	sxtb	r3, r3
 80022b8:	4a26      	ldr	r2, [pc, #152]	; (8002354 <drawChar+0x310>)
 80022ba:	7812      	ldrb	r2, [r2, #0]
 80022bc:	4293      	cmp	r3, r2
 80022be:	da00      	bge.n	80022c2 <drawChar+0x27e>
 80022c0:	e760      	b.n	8002184 <drawChar+0x140>
 80022c2:	e0d7      	b.n	8002474 <drawChar+0x430>
						}
					}
				}
			}
			// draw text background
			else if (bg != textColor) {
 80022c4:	4b26      	ldr	r3, [pc, #152]	; (8002360 <drawChar+0x31c>)
 80022c6:	881a      	ldrh	r2, [r3, #0]
 80022c8:	4b24      	ldr	r3, [pc, #144]	; (800235c <drawChar+0x318>)
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d100      	bne.n	80022d2 <drawChar+0x28e>
 80022d0:	e0d0      	b.n	8002474 <drawChar+0x430>
				if (textSize == 1) {
 80022d2:	4b20      	ldr	r3, [pc, #128]	; (8002354 <drawChar+0x310>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d11c      	bne.n	8002314 <drawChar+0x2d0>
					buffer[i+j*6] = colorFixer(bg);
 80022da:	4b21      	ldr	r3, [pc, #132]	; (8002360 <drawChar+0x31c>)
 80022dc:	8818      	ldrh	r0, [r3, #0]
 80022de:	2325      	movs	r3, #37	; 0x25
 80022e0:	2218      	movs	r2, #24
 80022e2:	4694      	mov	ip, r2
 80022e4:	44bc      	add	ip, r7
 80022e6:	4463      	add	r3, ip
 80022e8:	2100      	movs	r1, #0
 80022ea:	5659      	ldrsb	r1, [r3, r1]
 80022ec:	2323      	movs	r3, #35	; 0x23
 80022ee:	2218      	movs	r2, #24
 80022f0:	4694      	mov	ip, r2
 80022f2:	44bc      	add	ip, r7
 80022f4:	4463      	add	r3, ip
 80022f6:	2200      	movs	r2, #0
 80022f8:	569a      	ldrsb	r2, [r3, r2]
 80022fa:	0013      	movs	r3, r2
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	189b      	adds	r3, r3, r2
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	18cc      	adds	r4, r1, r3
 8002304:	f7ff fbc4 	bl	8001a90 <colorFixer>
 8002308:	0003      	movs	r3, r0
 800230a:	0019      	movs	r1, r3
 800230c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230e:	0062      	lsls	r2, r4, #1
 8002310:	52d1      	strh	r1, [r2, r3]
 8002312:	e0af      	b.n	8002474 <drawChar+0x430>
				}
				else {
					for (int8_t k = 0; k < textSize; k++) {
 8002314:	2320      	movs	r3, #32
 8002316:	2218      	movs	r2, #24
 8002318:	4694      	mov	ip, r2
 800231a:	44bc      	add	ip, r7
 800231c:	4463      	add	r3, ip
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]
 8002322:	e09b      	b.n	800245c <drawChar+0x418>
						rowOffset = textSize*6;
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <drawChar+0x310>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	b29b      	uxth	r3, r3
 800232a:	1c1a      	adds	r2, r3, #0
 800232c:	1c13      	adds	r3, r2, #0
 800232e:	18db      	adds	r3, r3, r3
 8002330:	189b      	adds	r3, r3, r2
 8002332:	18db      	adds	r3, r3, r3
 8002334:	b29a      	uxth	r2, r3
 8002336:	2326      	movs	r3, #38	; 0x26
 8002338:	2118      	movs	r1, #24
 800233a:	468c      	mov	ip, r1
 800233c:	44bc      	add	ip, r7
 800233e:	4463      	add	r3, ip
 8002340:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 8002342:	231f      	movs	r3, #31
 8002344:	2218      	movs	r2, #24
 8002346:	4694      	mov	ip, r2
 8002348:	44bc      	add	ip, r7
 800234a:	4463      	add	r3, ip
 800234c:	2200      	movs	r2, #0
 800234e:	701a      	strb	r2, [r3, #0]
 8002350:	e06d      	b.n	800242e <drawChar+0x3ea>
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	200000ee 	.word	0x200000ee
 8002358:	0800ba0c 	.word	0x0800ba0c
 800235c:	200000f0 	.word	0x200000f0
 8002360:	200000f2 	.word	0x200000f2
							address = (textSize*textSize*j*6)+(i*textSize);
 8002364:	4bda      	ldr	r3, [pc, #872]	; (80026d0 <drawChar+0x68c>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	b29b      	uxth	r3, r3
 800236a:	4ad9      	ldr	r2, [pc, #868]	; (80026d0 <drawChar+0x68c>)
 800236c:	7812      	ldrb	r2, [r2, #0]
 800236e:	b292      	uxth	r2, r2
 8002370:	4353      	muls	r3, r2
 8002372:	b29b      	uxth	r3, r3
 8002374:	2223      	movs	r2, #35	; 0x23
 8002376:	2118      	movs	r1, #24
 8002378:	468c      	mov	ip, r1
 800237a:	44bc      	add	ip, r7
 800237c:	4462      	add	r2, ip
 800237e:	7812      	ldrb	r2, [r2, #0]
 8002380:	b252      	sxtb	r2, r2
 8002382:	b292      	uxth	r2, r2
 8002384:	4353      	muls	r3, r2
 8002386:	b29b      	uxth	r3, r3
 8002388:	1c1a      	adds	r2, r3, #0
 800238a:	1c13      	adds	r3, r2, #0
 800238c:	18db      	adds	r3, r3, r3
 800238e:	189b      	adds	r3, r3, r2
 8002390:	18db      	adds	r3, r3, r3
 8002392:	b29a      	uxth	r2, r3
 8002394:	2325      	movs	r3, #37	; 0x25
 8002396:	2118      	movs	r1, #24
 8002398:	468c      	mov	ip, r1
 800239a:	44bc      	add	ip, r7
 800239c:	4463      	add	r3, ip
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	b25b      	sxtb	r3, r3
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	49ca      	ldr	r1, [pc, #808]	; (80026d0 <drawChar+0x68c>)
 80023a6:	7809      	ldrb	r1, [r1, #0]
 80023a8:	b289      	uxth	r1, r1
 80023aa:	434b      	muls	r3, r1
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	18d3      	adds	r3, r2, r3
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	210e      	movs	r1, #14
 80023b4:	2018      	movs	r0, #24
 80023b6:	183b      	adds	r3, r7, r0
 80023b8:	185b      	adds	r3, r3, r1
 80023ba:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 80023bc:	2320      	movs	r3, #32
 80023be:	2218      	movs	r2, #24
 80023c0:	4694      	mov	ip, r2
 80023c2:	44bc      	add	ip, r7
 80023c4:	4463      	add	r3, ip
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	b25b      	sxtb	r3, r3
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	2226      	movs	r2, #38	; 0x26
 80023ce:	2418      	movs	r4, #24
 80023d0:	46a4      	mov	ip, r4
 80023d2:	44bc      	add	ip, r7
 80023d4:	4462      	add	r2, ip
 80023d6:	8812      	ldrh	r2, [r2, #0]
 80023d8:	4353      	muls	r3, r2
 80023da:	b29a      	uxth	r2, r3
 80023dc:	251f      	movs	r5, #31
 80023de:	183b      	adds	r3, r7, r0
 80023e0:	195b      	adds	r3, r3, r5
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	b25b      	sxtb	r3, r3
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	18d3      	adds	r3, r2, r3
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	183b      	adds	r3, r7, r0
 80023ee:	185b      	adds	r3, r3, r1
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	18d3      	adds	r3, r2, r3
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	183b      	adds	r3, r7, r0
 80023f8:	185b      	adds	r3, r3, r1
 80023fa:	801a      	strh	r2, [r3, #0]
							buffer[address] = colorFixer(bg);
 80023fc:	4bb5      	ldr	r3, [pc, #724]	; (80026d4 <drawChar+0x690>)
 80023fe:	881a      	ldrh	r2, [r3, #0]
 8002400:	0006      	movs	r6, r0
 8002402:	183b      	adds	r3, r7, r0
 8002404:	185b      	adds	r3, r3, r1
 8002406:	2400      	movs	r4, #0
 8002408:	5f1c      	ldrsh	r4, [r3, r4]
 800240a:	0010      	movs	r0, r2
 800240c:	f7ff fb40 	bl	8001a90 <colorFixer>
 8002410:	0003      	movs	r3, r0
 8002412:	0019      	movs	r1, r3
 8002414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002416:	0062      	lsls	r2, r4, #1
 8002418:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 800241a:	19bb      	adds	r3, r7, r6
 800241c:	195b      	adds	r3, r3, r5
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	b25b      	sxtb	r3, r3
 8002422:	b2db      	uxtb	r3, r3
 8002424:	3301      	adds	r3, #1
 8002426:	b2da      	uxtb	r2, r3
 8002428:	19bb      	adds	r3, r7, r6
 800242a:	195b      	adds	r3, r3, r5
 800242c:	701a      	strb	r2, [r3, #0]
 800242e:	231f      	movs	r3, #31
 8002430:	2218      	movs	r2, #24
 8002432:	4694      	mov	ip, r2
 8002434:	44bc      	add	ip, r7
 8002436:	4463      	add	r3, ip
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	b25b      	sxtb	r3, r3
 800243c:	4aa4      	ldr	r2, [pc, #656]	; (80026d0 <drawChar+0x68c>)
 800243e:	7812      	ldrb	r2, [r2, #0]
 8002440:	4293      	cmp	r3, r2
 8002442:	db8f      	blt.n	8002364 <drawChar+0x320>
					for (int8_t k = 0; k < textSize; k++) {
 8002444:	2120      	movs	r1, #32
 8002446:	2018      	movs	r0, #24
 8002448:	183b      	adds	r3, r7, r0
 800244a:	185b      	adds	r3, r3, r1
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	b25b      	sxtb	r3, r3
 8002450:	b2db      	uxtb	r3, r3
 8002452:	3301      	adds	r3, #1
 8002454:	b2da      	uxtb	r2, r3
 8002456:	183b      	adds	r3, r7, r0
 8002458:	185b      	adds	r3, r3, r1
 800245a:	701a      	strb	r2, [r3, #0]
 800245c:	2320      	movs	r3, #32
 800245e:	2218      	movs	r2, #24
 8002460:	4694      	mov	ip, r2
 8002462:	44bc      	add	ip, r7
 8002464:	4463      	add	r3, ip
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	b25b      	sxtb	r3, r3
 800246a:	4a99      	ldr	r2, [pc, #612]	; (80026d0 <drawChar+0x68c>)
 800246c:	7812      	ldrb	r2, [r2, #0]
 800246e:	4293      	cmp	r3, r2
 8002470:	da00      	bge.n	8002474 <drawChar+0x430>
 8002472:	e757      	b.n	8002324 <drawChar+0x2e0>
		for (int8_t j=0; j<8; j++, line >>= 1) {
 8002474:	2123      	movs	r1, #35	; 0x23
 8002476:	2018      	movs	r0, #24
 8002478:	183b      	adds	r3, r7, r0
 800247a:	185b      	adds	r3, r3, r1
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	b25b      	sxtb	r3, r3
 8002480:	b2db      	uxtb	r3, r3
 8002482:	3301      	adds	r3, #1
 8002484:	b2da      	uxtb	r2, r3
 8002486:	183b      	adds	r3, r7, r0
 8002488:	185b      	adds	r3, r3, r1
 800248a:	701a      	strb	r2, [r3, #0]
 800248c:	2224      	movs	r2, #36	; 0x24
 800248e:	183b      	adds	r3, r7, r0
 8002490:	189b      	adds	r3, r3, r2
 8002492:	2118      	movs	r1, #24
 8002494:	468c      	mov	ip, r1
 8002496:	44bc      	add	ip, r7
 8002498:	4462      	add	r2, ip
 800249a:	7812      	ldrb	r2, [r2, #0]
 800249c:	0852      	lsrs	r2, r2, #1
 800249e:	701a      	strb	r2, [r3, #0]
 80024a0:	2323      	movs	r3, #35	; 0x23
 80024a2:	2218      	movs	r2, #24
 80024a4:	4694      	mov	ip, r2
 80024a6:	44bc      	add	ip, r7
 80024a8:	4463      	add	r3, ip
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	b25b      	sxtb	r3, r3
 80024ae:	2b07      	cmp	r3, #7
 80024b0:	dc00      	bgt.n	80024b4 <drawChar+0x470>
 80024b2:	e634      	b.n	800211e <drawChar+0xda>
	for (int8_t i=0; i<5; i++) {
 80024b4:	2125      	movs	r1, #37	; 0x25
 80024b6:	2018      	movs	r0, #24
 80024b8:	183b      	adds	r3, r7, r0
 80024ba:	185b      	adds	r3, r3, r1
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	b25b      	sxtb	r3, r3
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	3301      	adds	r3, #1
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	183b      	adds	r3, r7, r0
 80024c8:	185b      	adds	r3, r3, r1
 80024ca:	701a      	strb	r2, [r3, #0]
 80024cc:	2325      	movs	r3, #37	; 0x25
 80024ce:	2218      	movs	r2, #24
 80024d0:	4694      	mov	ip, r2
 80024d2:	44bc      	add	ip, r7
 80024d4:	4463      	add	r3, ip
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	b25b      	sxtb	r3, r3
 80024da:	2b04      	cmp	r3, #4
 80024dc:	dc00      	bgt.n	80024e0 <drawChar+0x49c>
 80024de:	e600      	b.n	80020e2 <drawChar+0x9e>
		}
	}

	// If opaque, draw vertical line for last column
	// for character 1px kerning
	if (bg != textColor) {
 80024e0:	4b7c      	ldr	r3, [pc, #496]	; (80026d4 <drawChar+0x690>)
 80024e2:	881a      	ldrh	r2, [r3, #0]
 80024e4:	4b7c      	ldr	r3, [pc, #496]	; (80026d8 <drawChar+0x694>)
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d100      	bne.n	80024ee <drawChar+0x4aa>
 80024ec:	e0ca      	b.n	8002684 <drawChar+0x640>
		for (int8_t j = 0; j < 8; j++) {
 80024ee:	231e      	movs	r3, #30
 80024f0:	2218      	movs	r2, #24
 80024f2:	4694      	mov	ip, r2
 80024f4:	44bc      	add	ip, r7
 80024f6:	4463      	add	r3, ip
 80024f8:	2200      	movs	r2, #0
 80024fa:	701a      	strb	r2, [r3, #0]
 80024fc:	e0b8      	b.n	8002670 <drawChar+0x62c>
			if (textSize == 1) {
 80024fe:	4b74      	ldr	r3, [pc, #464]	; (80026d0 <drawChar+0x68c>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d116      	bne.n	8002534 <drawChar+0x4f0>
				buffer[5+j*6] = colorFixer(bg);
 8002506:	4b73      	ldr	r3, [pc, #460]	; (80026d4 <drawChar+0x690>)
 8002508:	8819      	ldrh	r1, [r3, #0]
 800250a:	231e      	movs	r3, #30
 800250c:	2218      	movs	r2, #24
 800250e:	4694      	mov	ip, r2
 8002510:	44bc      	add	ip, r7
 8002512:	4463      	add	r3, ip
 8002514:	2200      	movs	r2, #0
 8002516:	569a      	ldrsb	r2, [r3, r2]
 8002518:	0013      	movs	r3, r2
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	189b      	adds	r3, r3, r2
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	1d5c      	adds	r4, r3, #5
 8002522:	0008      	movs	r0, r1
 8002524:	f7ff fab4 	bl	8001a90 <colorFixer>
 8002528:	0003      	movs	r3, r0
 800252a:	0019      	movs	r1, r3
 800252c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252e:	0062      	lsls	r2, r4, #1
 8002530:	52d1      	strh	r1, [r2, r3]
 8002532:	e091      	b.n	8002658 <drawChar+0x614>
			}
			else {
				for (int8_t k = 0; k < textSize; k++) {
 8002534:	231d      	movs	r3, #29
 8002536:	2218      	movs	r2, #24
 8002538:	4694      	mov	ip, r2
 800253a:	44bc      	add	ip, r7
 800253c:	4463      	add	r3, ip
 800253e:	2200      	movs	r2, #0
 8002540:	701a      	strb	r2, [r3, #0]
 8002542:	e07d      	b.n	8002640 <drawChar+0x5fc>
					for (int8_t l = 0; l < textSize; l++) {
 8002544:	231c      	movs	r3, #28
 8002546:	2218      	movs	r2, #24
 8002548:	4694      	mov	ip, r2
 800254a:	44bc      	add	ip, r7
 800254c:	4463      	add	r3, ip
 800254e:	2200      	movs	r2, #0
 8002550:	701a      	strb	r2, [r3, #0]
 8002552:	e05e      	b.n	8002612 <drawChar+0x5ce>
						address = (textSize*textSize*j*6)+(5*textSize);
 8002554:	4b5e      	ldr	r3, [pc, #376]	; (80026d0 <drawChar+0x68c>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	b29b      	uxth	r3, r3
 800255a:	4a5d      	ldr	r2, [pc, #372]	; (80026d0 <drawChar+0x68c>)
 800255c:	7812      	ldrb	r2, [r2, #0]
 800255e:	b292      	uxth	r2, r2
 8002560:	4353      	muls	r3, r2
 8002562:	b29b      	uxth	r3, r3
 8002564:	221e      	movs	r2, #30
 8002566:	2118      	movs	r1, #24
 8002568:	468c      	mov	ip, r1
 800256a:	44bc      	add	ip, r7
 800256c:	4462      	add	r2, ip
 800256e:	7812      	ldrb	r2, [r2, #0]
 8002570:	b252      	sxtb	r2, r2
 8002572:	b292      	uxth	r2, r2
 8002574:	4353      	muls	r3, r2
 8002576:	b29b      	uxth	r3, r3
 8002578:	1c1a      	adds	r2, r3, #0
 800257a:	1c13      	adds	r3, r2, #0
 800257c:	18db      	adds	r3, r3, r3
 800257e:	189b      	adds	r3, r3, r2
 8002580:	18db      	adds	r3, r3, r3
 8002582:	b29a      	uxth	r2, r3
 8002584:	4b52      	ldr	r3, [pc, #328]	; (80026d0 <drawChar+0x68c>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	b29b      	uxth	r3, r3
 800258a:	1c19      	adds	r1, r3, #0
 800258c:	0089      	lsls	r1, r1, #2
 800258e:	18cb      	adds	r3, r1, r3
 8002590:	b29b      	uxth	r3, r3
 8002592:	18d3      	adds	r3, r2, r3
 8002594:	b29a      	uxth	r2, r3
 8002596:	210e      	movs	r1, #14
 8002598:	2018      	movs	r0, #24
 800259a:	183b      	adds	r3, r7, r0
 800259c:	185b      	adds	r3, r3, r1
 800259e:	801a      	strh	r2, [r3, #0]
						address += rowOffset*k+l;
 80025a0:	231d      	movs	r3, #29
 80025a2:	2218      	movs	r2, #24
 80025a4:	4694      	mov	ip, r2
 80025a6:	44bc      	add	ip, r7
 80025a8:	4463      	add	r3, ip
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	b25b      	sxtb	r3, r3
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	2226      	movs	r2, #38	; 0x26
 80025b2:	2418      	movs	r4, #24
 80025b4:	46a4      	mov	ip, r4
 80025b6:	44bc      	add	ip, r7
 80025b8:	4462      	add	r2, ip
 80025ba:	8812      	ldrh	r2, [r2, #0]
 80025bc:	4353      	muls	r3, r2
 80025be:	b29a      	uxth	r2, r3
 80025c0:	251c      	movs	r5, #28
 80025c2:	183b      	adds	r3, r7, r0
 80025c4:	195b      	adds	r3, r3, r5
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	b25b      	sxtb	r3, r3
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	18d3      	adds	r3, r2, r3
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	183b      	adds	r3, r7, r0
 80025d2:	185b      	adds	r3, r3, r1
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	18d3      	adds	r3, r2, r3
 80025d8:	b29a      	uxth	r2, r3
 80025da:	183b      	adds	r3, r7, r0
 80025dc:	185b      	adds	r3, r3, r1
 80025de:	801a      	strh	r2, [r3, #0]
						buffer[address] = colorFixer(bg);
 80025e0:	4b3c      	ldr	r3, [pc, #240]	; (80026d4 <drawChar+0x690>)
 80025e2:	881a      	ldrh	r2, [r3, #0]
 80025e4:	0006      	movs	r6, r0
 80025e6:	183b      	adds	r3, r7, r0
 80025e8:	185b      	adds	r3, r3, r1
 80025ea:	2400      	movs	r4, #0
 80025ec:	5f1c      	ldrsh	r4, [r3, r4]
 80025ee:	0010      	movs	r0, r2
 80025f0:	f7ff fa4e 	bl	8001a90 <colorFixer>
 80025f4:	0003      	movs	r3, r0
 80025f6:	0019      	movs	r1, r3
 80025f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fa:	0062      	lsls	r2, r4, #1
 80025fc:	52d1      	strh	r1, [r2, r3]
					for (int8_t l = 0; l < textSize; l++) {
 80025fe:	19bb      	adds	r3, r7, r6
 8002600:	195b      	adds	r3, r3, r5
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	b25b      	sxtb	r3, r3
 8002606:	b2db      	uxtb	r3, r3
 8002608:	3301      	adds	r3, #1
 800260a:	b2da      	uxtb	r2, r3
 800260c:	19bb      	adds	r3, r7, r6
 800260e:	195b      	adds	r3, r3, r5
 8002610:	701a      	strb	r2, [r3, #0]
 8002612:	231c      	movs	r3, #28
 8002614:	2218      	movs	r2, #24
 8002616:	4694      	mov	ip, r2
 8002618:	44bc      	add	ip, r7
 800261a:	4463      	add	r3, ip
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	b25b      	sxtb	r3, r3
 8002620:	4a2b      	ldr	r2, [pc, #172]	; (80026d0 <drawChar+0x68c>)
 8002622:	7812      	ldrb	r2, [r2, #0]
 8002624:	4293      	cmp	r3, r2
 8002626:	db95      	blt.n	8002554 <drawChar+0x510>
				for (int8_t k = 0; k < textSize; k++) {
 8002628:	211d      	movs	r1, #29
 800262a:	2018      	movs	r0, #24
 800262c:	183b      	adds	r3, r7, r0
 800262e:	185b      	adds	r3, r3, r1
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	b25b      	sxtb	r3, r3
 8002634:	b2db      	uxtb	r3, r3
 8002636:	3301      	adds	r3, #1
 8002638:	b2da      	uxtb	r2, r3
 800263a:	183b      	adds	r3, r7, r0
 800263c:	185b      	adds	r3, r3, r1
 800263e:	701a      	strb	r2, [r3, #0]
 8002640:	231d      	movs	r3, #29
 8002642:	2218      	movs	r2, #24
 8002644:	4694      	mov	ip, r2
 8002646:	44bc      	add	ip, r7
 8002648:	4463      	add	r3, ip
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	b25b      	sxtb	r3, r3
 800264e:	4a20      	ldr	r2, [pc, #128]	; (80026d0 <drawChar+0x68c>)
 8002650:	7812      	ldrb	r2, [r2, #0]
 8002652:	4293      	cmp	r3, r2
 8002654:	da00      	bge.n	8002658 <drawChar+0x614>
 8002656:	e775      	b.n	8002544 <drawChar+0x500>
		for (int8_t j = 0; j < 8; j++) {
 8002658:	211e      	movs	r1, #30
 800265a:	2018      	movs	r0, #24
 800265c:	183b      	adds	r3, r7, r0
 800265e:	185b      	adds	r3, r3, r1
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	b25b      	sxtb	r3, r3
 8002664:	b2db      	uxtb	r3, r3
 8002666:	3301      	adds	r3, #1
 8002668:	b2da      	uxtb	r2, r3
 800266a:	183b      	adds	r3, r7, r0
 800266c:	185b      	adds	r3, r3, r1
 800266e:	701a      	strb	r2, [r3, #0]
 8002670:	231e      	movs	r3, #30
 8002672:	2218      	movs	r2, #24
 8002674:	4694      	mov	ip, r2
 8002676:	44bc      	add	ip, r7
 8002678:	4463      	add	r3, ip
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	b25b      	sxtb	r3, r3
 800267e:	2b07      	cmp	r3, #7
 8002680:	dc00      	bgt.n	8002684 <drawChar+0x640>
 8002682:	e73c      	b.n	80024fe <drawChar+0x4ba>
				}
			}
		}
	}

	drawBuffer(cursorX, cursorY, 6*textSize, 8*textSize, buffer, bufferSize, hspi);
 8002684:	4b15      	ldr	r3, [pc, #84]	; (80026dc <drawChar+0x698>)
 8002686:	7818      	ldrb	r0, [r3, #0]
 8002688:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <drawChar+0x69c>)
 800268a:	7819      	ldrb	r1, [r3, #0]
 800268c:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <drawChar+0x68c>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	1c1a      	adds	r2, r3, #0
 8002692:	1c13      	adds	r3, r2, #0
 8002694:	18db      	adds	r3, r3, r3
 8002696:	189b      	adds	r3, r3, r2
 8002698:	18db      	adds	r3, r3, r3
 800269a:	b2dc      	uxtb	r4, r3
 800269c:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <drawChar+0x68c>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	b2dd      	uxtb	r5, r3
 80026a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	9202      	str	r2, [sp, #8]
 80026aa:	221a      	movs	r2, #26
 80026ac:	2618      	movs	r6, #24
 80026ae:	46b4      	mov	ip, r6
 80026b0:	44bc      	add	ip, r7
 80026b2:	4462      	add	r2, ip
 80026b4:	8812      	ldrh	r2, [r2, #0]
 80026b6:	9201      	str	r2, [sp, #4]
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	002b      	movs	r3, r5
 80026bc:	0022      	movs	r2, r4
 80026be:	f7ff fb58 	bl	8001d72 <drawBuffer>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	469d      	mov	sp, r3
}
 80026c6:	46c0      	nop			; (mov r8, r8)
 80026c8:	46bd      	mov	sp, r7
 80026ca:	b011      	add	sp, #68	; 0x44
 80026cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	200000ee 	.word	0x200000ee
 80026d4:	200000f2 	.word	0x200000f2
 80026d8:	200000f0 	.word	0x200000f0
 80026dc:	200000ec 	.word	0x200000ec
 80026e0:	200000ed 	.word	0x200000ed

080026e4 <drawText>:

// draws character strings
void drawText(const char *str, SPI_HandleTypeDef *hspi) {
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
	for (int i = 0; str[i] != '\0'; i++) {
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	e01d      	b.n	8002730 <drawText+0x4c>
		drawChar(str[i], hspi);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	18d3      	adds	r3, r2, r3
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	0011      	movs	r1, r2
 8002700:	0018      	movs	r0, r3
 8002702:	f7ff fc9f 	bl	8002044 <drawChar>

		// moves cursor on every character print so it's not printed to the same place
		setCursor(cursorX+textSize*6, cursorY);
 8002706:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <drawText+0x60>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	1c1a      	adds	r2, r3, #0
 800270c:	1c13      	adds	r3, r2, #0
 800270e:	18db      	adds	r3, r3, r3
 8002710:	189b      	adds	r3, r3, r2
 8002712:	18db      	adds	r3, r3, r3
 8002714:	b2da      	uxtb	r2, r3
 8002716:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <drawText+0x64>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	18d3      	adds	r3, r2, r3
 800271c:	b2da      	uxtb	r2, r3
 800271e:	4b0b      	ldr	r3, [pc, #44]	; (800274c <drawText+0x68>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	0019      	movs	r1, r3
 8002724:	0010      	movs	r0, r2
 8002726:	f000 f9c5 	bl	8002ab4 <setCursor>
	for (int i = 0; str[i] != '\0'; i++) {
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	3301      	adds	r3, #1
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	18d3      	adds	r3, r2, r3
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1db      	bne.n	80026f4 <drawText+0x10>
	}
}
 800273c:	46c0      	nop			; (mov r8, r8)
 800273e:	46bd      	mov	sp, r7
 8002740:	b004      	add	sp, #16
 8002742:	bd80      	pop	{r7, pc}
 8002744:	200000ee 	.word	0x200000ee
 8002748:	200000ec 	.word	0x200000ec
 800274c:	200000ed 	.word	0x200000ed

08002750 <drawTextAt>:

// drawText, but coordinates as arguments. coordinates are for upper left bound
void drawTextAt(uint8_t x, uint8_t y, const char *str, SPI_HandleTypeDef *hspi) {
 8002750:	b590      	push	{r4, r7, lr}
 8002752:	b087      	sub	sp, #28
 8002754:	af00      	add	r7, sp, #0
 8002756:	60ba      	str	r2, [r7, #8]
 8002758:	607b      	str	r3, [r7, #4]
 800275a:	240f      	movs	r4, #15
 800275c:	193b      	adds	r3, r7, r4
 800275e:	1c02      	adds	r2, r0, #0
 8002760:	701a      	strb	r2, [r3, #0]
 8002762:	200e      	movs	r0, #14
 8002764:	183b      	adds	r3, r7, r0
 8002766:	1c0a      	adds	r2, r1, #0
 8002768:	701a      	strb	r2, [r3, #0]
	// add text wrap
	int i = 0;
 800276a:	2300      	movs	r3, #0
 800276c:	617b      	str	r3, [r7, #20]
	setCursor(x,y);
 800276e:	183b      	adds	r3, r7, r0
 8002770:	781a      	ldrb	r2, [r3, #0]
 8002772:	193b      	adds	r3, r7, r4
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	0011      	movs	r1, r2
 8002778:	0018      	movs	r0, r3
 800277a:	f000 f99b 	bl	8002ab4 <setCursor>
	for (i = 0; str[i] != '\0'; i++) {
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]
 8002782:	e01d      	b.n	80027c0 <drawTextAt+0x70>
		drawChar(str[i], hspi);
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	18d3      	adds	r3, r2, r3
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	0011      	movs	r1, r2
 8002790:	0018      	movs	r0, r3
 8002792:	f7ff fc57 	bl	8002044 <drawChar>
		setCursor(cursorX+textSize*6, cursorY);
 8002796:	4b0f      	ldr	r3, [pc, #60]	; (80027d4 <drawTextAt+0x84>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	1c1a      	adds	r2, r3, #0
 800279c:	1c13      	adds	r3, r2, #0
 800279e:	18db      	adds	r3, r3, r3
 80027a0:	189b      	adds	r3, r3, r2
 80027a2:	18db      	adds	r3, r3, r3
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <drawTextAt+0x88>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	18d3      	adds	r3, r2, r3
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <drawTextAt+0x8c>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	0019      	movs	r1, r3
 80027b4:	0010      	movs	r0, r2
 80027b6:	f000 f97d 	bl	8002ab4 <setCursor>
	for (i = 0; str[i] != '\0'; i++) {
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	3301      	adds	r3, #1
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	18d3      	adds	r3, r2, r3
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1db      	bne.n	8002784 <drawTextAt+0x34>
	}
}
 80027cc:	46c0      	nop			; (mov r8, r8)
 80027ce:	46bd      	mov	sp, r7
 80027d0:	b007      	add	sp, #28
 80027d2:	bd90      	pop	{r4, r7, pc}
 80027d4:	200000ee 	.word	0x200000ee
 80027d8:	200000ec 	.word	0x200000ec
 80027dc:	200000ed 	.word	0x200000ed

080027e0 <drawCenteredText>:

// draws text centered on an x coordinate. y is upper bound of box
void drawCenteredText(uint8_t x_center, uint8_t y, const char *str, SPI_HandleTypeDef *hspi) {
 80027e0:	b590      	push	{r4, r7, lr}
 80027e2:	b089      	sub	sp, #36	; 0x24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60ba      	str	r2, [r7, #8]
 80027e8:	607b      	str	r3, [r7, #4]
 80027ea:	230f      	movs	r3, #15
 80027ec:	18fb      	adds	r3, r7, r3
 80027ee:	1c02      	adds	r2, r0, #0
 80027f0:	701a      	strb	r2, [r3, #0]
 80027f2:	240e      	movs	r4, #14
 80027f4:	193b      	adds	r3, r7, r4
 80027f6:	1c0a      	adds	r2, r1, #0
 80027f8:	701a      	strb	r2, [r3, #0]
	uint8_t strSize = strlen(str);
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	0018      	movs	r0, r3
 80027fe:	f7fd fc83 	bl	8000108 <strlen>
 8002802:	0002      	movs	r2, r0
 8002804:	231f      	movs	r3, #31
 8002806:	18fb      	adds	r3, r7, r3
 8002808:	701a      	strb	r2, [r3, #0]
	// bounds checking. text box needed to print text should not end up out of bounds
	// also calculating what bounds of text box should be
	if (y+textSize*8 > HEIGHT) return;
 800280a:	193b      	adds	r3, r7, r4
 800280c:	781a      	ldrb	r2, [r3, #0]
 800280e:	4b24      	ldr	r3, [pc, #144]	; (80028a0 <drawCenteredText+0xc0>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	18d3      	adds	r3, r2, r3
 8002816:	2ba0      	cmp	r3, #160	; 0xa0
 8002818:	dc3a      	bgt.n	8002890 <drawCenteredText+0xb0>
	int leftBound = x_center-(strSize*textSize*6)/2;
 800281a:	230f      	movs	r3, #15
 800281c:	18fb      	adds	r3, r7, r3
 800281e:	7819      	ldrb	r1, [r3, #0]
 8002820:	231f      	movs	r3, #31
 8002822:	18fb      	adds	r3, r7, r3
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	4a1e      	ldr	r2, [pc, #120]	; (80028a0 <drawCenteredText+0xc0>)
 8002828:	7812      	ldrb	r2, [r2, #0]
 800282a:	435a      	muls	r2, r3
 800282c:	0013      	movs	r3, r2
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	189b      	adds	r3, r3, r2
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	d500      	bpl.n	8002838 <drawCenteredText+0x58>
 8002836:	3301      	adds	r3, #1
 8002838:	105b      	asrs	r3, r3, #1
 800283a:	425b      	negs	r3, r3
 800283c:	18cb      	adds	r3, r1, r3
 800283e:	61bb      	str	r3, [r7, #24]
	int rightBound = x_center+(strSize*textSize*6)/2;
 8002840:	230f      	movs	r3, #15
 8002842:	18fb      	adds	r3, r7, r3
 8002844:	7819      	ldrb	r1, [r3, #0]
 8002846:	231f      	movs	r3, #31
 8002848:	18fb      	adds	r3, r7, r3
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	4a14      	ldr	r2, [pc, #80]	; (80028a0 <drawCenteredText+0xc0>)
 800284e:	7812      	ldrb	r2, [r2, #0]
 8002850:	435a      	muls	r2, r3
 8002852:	0013      	movs	r3, r2
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	189b      	adds	r3, r3, r2
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	d500      	bpl.n	800285e <drawCenteredText+0x7e>
 800285c:	3301      	adds	r3, #1
 800285e:	105b      	asrs	r3, r3, #1
 8002860:	18cb      	adds	r3, r1, r3
 8002862:	617b      	str	r3, [r7, #20]
	if (leftBound < 0) return;
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	2b00      	cmp	r3, #0
 8002868:	db14      	blt.n	8002894 <drawCenteredText+0xb4>
	if (rightBound > WIDTH) return;
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2b80      	cmp	r3, #128	; 0x80
 800286e:	dc13      	bgt.n	8002898 <drawCenteredText+0xb8>

	setCursor(leftBound, y);
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	b2da      	uxtb	r2, r3
 8002874:	230e      	movs	r3, #14
 8002876:	18fb      	adds	r3, r7, r3
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	0019      	movs	r1, r3
 800287c:	0010      	movs	r0, r2
 800287e:	f000 f919 	bl	8002ab4 <setCursor>
	drawText(str, hspi);
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	0011      	movs	r1, r2
 8002888:	0018      	movs	r0, r3
 800288a:	f7ff ff2b 	bl	80026e4 <drawText>
 800288e:	e004      	b.n	800289a <drawCenteredText+0xba>
	if (y+textSize*8 > HEIGHT) return;
 8002890:	46c0      	nop			; (mov r8, r8)
 8002892:	e002      	b.n	800289a <drawCenteredText+0xba>
	if (leftBound < 0) return;
 8002894:	46c0      	nop			; (mov r8, r8)
 8002896:	e000      	b.n	800289a <drawCenteredText+0xba>
	if (rightBound > WIDTH) return;
 8002898:	46c0      	nop			; (mov r8, r8)
}
 800289a:	46bd      	mov	sp, r7
 800289c:	b009      	add	sp, #36	; 0x24
 800289e:	bd90      	pop	{r4, r7, pc}
 80028a0:	200000ee 	.word	0x200000ee

080028a4 <drawCenteredTextWithPadding>:

// drawCenteredText, but background is filled to left and right of box
// used for cases where you're printing strings to the same place, but they have different sizes
void drawCenteredTextWithPadding(uint8_t x_center, uint8_t y, uint8_t maxLength, const char *str, SPI_HandleTypeDef *hspi) {
 80028a4:	b5b0      	push	{r4, r5, r7, lr}
 80028a6:	b088      	sub	sp, #32
 80028a8:	af02      	add	r7, sp, #8
 80028aa:	0004      	movs	r4, r0
 80028ac:	0008      	movs	r0, r1
 80028ae:	0011      	movs	r1, r2
 80028b0:	603b      	str	r3, [r7, #0]
 80028b2:	1dfb      	adds	r3, r7, #7
 80028b4:	1c22      	adds	r2, r4, #0
 80028b6:	701a      	strb	r2, [r3, #0]
 80028b8:	1dbb      	adds	r3, r7, #6
 80028ba:	1c02      	adds	r2, r0, #0
 80028bc:	701a      	strb	r2, [r3, #0]
 80028be:	1d7b      	adds	r3, r7, #5
 80028c0:	1c0a      	adds	r2, r1, #0
 80028c2:	701a      	strb	r2, [r3, #0]
	// bounds checking. text box needed to print text should not end up out of bounds
	if (y+textSize*8 > HEIGHT) return;
 80028c4:	1dbb      	adds	r3, r7, #6
 80028c6:	781a      	ldrb	r2, [r3, #0]
 80028c8:	4b60      	ldr	r3, [pc, #384]	; (8002a4c <drawCenteredTextWithPadding+0x1a8>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	18d3      	adds	r3, r2, r3
 80028d0:	2ba0      	cmp	r3, #160	; 0xa0
 80028d2:	dd00      	ble.n	80028d6 <drawCenteredTextWithPadding+0x32>
 80028d4:	e0af      	b.n	8002a36 <drawCenteredTextWithPadding+0x192>
	int leftBound = x_center-(maxLength*textSize*6)/2;
 80028d6:	1dfb      	adds	r3, r7, #7
 80028d8:	7819      	ldrb	r1, [r3, #0]
 80028da:	1d7b      	adds	r3, r7, #5
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	4a5b      	ldr	r2, [pc, #364]	; (8002a4c <drawCenteredTextWithPadding+0x1a8>)
 80028e0:	7812      	ldrb	r2, [r2, #0]
 80028e2:	435a      	muls	r2, r3
 80028e4:	0013      	movs	r3, r2
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	189b      	adds	r3, r3, r2
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	d500      	bpl.n	80028f0 <drawCenteredTextWithPadding+0x4c>
 80028ee:	3301      	adds	r3, #1
 80028f0:	105b      	asrs	r3, r3, #1
 80028f2:	425b      	negs	r3, r3
 80028f4:	18cb      	adds	r3, r1, r3
 80028f6:	617b      	str	r3, [r7, #20]
	int rightBound = x_center+(maxLength*textSize*6)/2;
 80028f8:	1dfb      	adds	r3, r7, #7
 80028fa:	7819      	ldrb	r1, [r3, #0]
 80028fc:	1d7b      	adds	r3, r7, #5
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	4a52      	ldr	r2, [pc, #328]	; (8002a4c <drawCenteredTextWithPadding+0x1a8>)
 8002902:	7812      	ldrb	r2, [r2, #0]
 8002904:	435a      	muls	r2, r3
 8002906:	0013      	movs	r3, r2
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	189b      	adds	r3, r3, r2
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	d500      	bpl.n	8002912 <drawCenteredTextWithPadding+0x6e>
 8002910:	3301      	adds	r3, #1
 8002912:	105b      	asrs	r3, r3, #1
 8002914:	18cb      	adds	r3, r1, r3
 8002916:	613b      	str	r3, [r7, #16]
	if (leftBound < 0) return;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	2b00      	cmp	r3, #0
 800291c:	da00      	bge.n	8002920 <drawCenteredTextWithPadding+0x7c>
 800291e:	e08c      	b.n	8002a3a <drawCenteredTextWithPadding+0x196>
	if (rightBound > WIDTH) return;
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	2b80      	cmp	r3, #128	; 0x80
 8002924:	dd00      	ble.n	8002928 <drawCenteredTextWithPadding+0x84>
 8002926:	e08a      	b.n	8002a3e <drawCenteredTextWithPadding+0x19a>

	uint8_t strSize = strlen(str);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	0018      	movs	r0, r3
 800292c:	f7fd fbec 	bl	8000108 <strlen>
 8002930:	0002      	movs	r2, r0
 8002932:	210f      	movs	r1, #15
 8002934:	187b      	adds	r3, r7, r1
 8002936:	701a      	strb	r2, [r3, #0]
	if (maxLength < strSize) return;		// size should not be greater than max
 8002938:	1d7a      	adds	r2, r7, #5
 800293a:	187b      	adds	r3, r7, r1
 800293c:	7812      	ldrb	r2, [r2, #0]
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d200      	bcs.n	8002946 <drawCenteredTextWithPadding+0xa2>
 8002944:	e07d      	b.n	8002a42 <drawCenteredTextWithPadding+0x19e>

	// draw left and right padding
	uint8_t diff = maxLength-strSize;
 8002946:	240e      	movs	r4, #14
 8002948:	193b      	adds	r3, r7, r4
 800294a:	1d79      	adds	r1, r7, #5
 800294c:	220f      	movs	r2, #15
 800294e:	18ba      	adds	r2, r7, r2
 8002950:	7809      	ldrb	r1, [r1, #0]
 8002952:	7812      	ldrb	r2, [r2, #0]
 8002954:	1a8a      	subs	r2, r1, r2
 8002956:	701a      	strb	r2, [r3, #0]
	fillRect(leftBound, y, diff*textSize*6/2, textSize*8, bg, hspi);		// math out of order to accomodate diff/2 being a non-int
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	b2d8      	uxtb	r0, r3
 800295c:	193b      	adds	r3, r7, r4
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	4a3a      	ldr	r2, [pc, #232]	; (8002a4c <drawCenteredTextWithPadding+0x1a8>)
 8002962:	7812      	ldrb	r2, [r2, #0]
 8002964:	435a      	muls	r2, r3
 8002966:	0013      	movs	r3, r2
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	189b      	adds	r3, r3, r2
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	d500      	bpl.n	8002972 <drawCenteredTextWithPadding+0xce>
 8002970:	3301      	adds	r3, #1
 8002972:	105b      	asrs	r3, r3, #1
 8002974:	b2dc      	uxtb	r4, r3
 8002976:	4b35      	ldr	r3, [pc, #212]	; (8002a4c <drawCenteredTextWithPadding+0x1a8>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	b2dd      	uxtb	r5, r3
 800297e:	4b34      	ldr	r3, [pc, #208]	; (8002a50 <drawCenteredTextWithPadding+0x1ac>)
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	1dba      	adds	r2, r7, #6
 8002984:	7811      	ldrb	r1, [r2, #0]
 8002986:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002988:	9201      	str	r2, [sp, #4]
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	002b      	movs	r3, r5
 800298e:	0022      	movs	r2, r4
 8002990:	f7ff fa91 	bl	8001eb6 <fillRect>
	fillRect(rightBound-diff*textSize*6/2, y, diff*textSize*6/2, textSize*8, bg, hspi);
 8002994:	230e      	movs	r3, #14
 8002996:	18fb      	adds	r3, r7, r3
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	4a2c      	ldr	r2, [pc, #176]	; (8002a4c <drawCenteredTextWithPadding+0x1a8>)
 800299c:	7812      	ldrb	r2, [r2, #0]
 800299e:	435a      	muls	r2, r3
 80029a0:	0013      	movs	r3, r2
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	189b      	adds	r3, r3, r2
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	d500      	bpl.n	80029ac <drawCenteredTextWithPadding+0x108>
 80029aa:	3301      	adds	r3, #1
 80029ac:	105b      	asrs	r3, r3, #1
 80029ae:	425b      	negs	r3, r3
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	18d3      	adds	r3, r2, r3
 80029b8:	b2d8      	uxtb	r0, r3
 80029ba:	230e      	movs	r3, #14
 80029bc:	18fb      	adds	r3, r7, r3
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	4a22      	ldr	r2, [pc, #136]	; (8002a4c <drawCenteredTextWithPadding+0x1a8>)
 80029c2:	7812      	ldrb	r2, [r2, #0]
 80029c4:	435a      	muls	r2, r3
 80029c6:	0013      	movs	r3, r2
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	189b      	adds	r3, r3, r2
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	d500      	bpl.n	80029d2 <drawCenteredTextWithPadding+0x12e>
 80029d0:	3301      	adds	r3, #1
 80029d2:	105b      	asrs	r3, r3, #1
 80029d4:	b2dc      	uxtb	r4, r3
 80029d6:	4b1d      	ldr	r3, [pc, #116]	; (8002a4c <drawCenteredTextWithPadding+0x1a8>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	b2dd      	uxtb	r5, r3
 80029de:	4b1c      	ldr	r3, [pc, #112]	; (8002a50 <drawCenteredTextWithPadding+0x1ac>)
 80029e0:	881b      	ldrh	r3, [r3, #0]
 80029e2:	1dba      	adds	r2, r7, #6
 80029e4:	7811      	ldrb	r1, [r2, #0]
 80029e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029e8:	9201      	str	r2, [sp, #4]
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	002b      	movs	r3, r5
 80029ee:	0022      	movs	r2, r4
 80029f0:	f7ff fa61 	bl	8001eb6 <fillRect>

	int textLeftBound = x_center-(strSize*textSize*6)/2;
 80029f4:	1dfb      	adds	r3, r7, #7
 80029f6:	7819      	ldrb	r1, [r3, #0]
 80029f8:	230f      	movs	r3, #15
 80029fa:	18fb      	adds	r3, r7, r3
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	4a13      	ldr	r2, [pc, #76]	; (8002a4c <drawCenteredTextWithPadding+0x1a8>)
 8002a00:	7812      	ldrb	r2, [r2, #0]
 8002a02:	435a      	muls	r2, r3
 8002a04:	0013      	movs	r3, r2
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	189b      	adds	r3, r3, r2
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	d500      	bpl.n	8002a10 <drawCenteredTextWithPadding+0x16c>
 8002a0e:	3301      	adds	r3, #1
 8002a10:	105b      	asrs	r3, r3, #1
 8002a12:	425b      	negs	r3, r3
 8002a14:	18cb      	adds	r3, r1, r3
 8002a16:	60bb      	str	r3, [r7, #8]
	setCursor(textLeftBound, y);
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	1dbb      	adds	r3, r7, #6
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	0019      	movs	r1, r3
 8002a22:	0010      	movs	r0, r2
 8002a24:	f000 f846 	bl	8002ab4 <setCursor>
	drawText(str, hspi);
 8002a28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	0011      	movs	r1, r2
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f7ff fe58 	bl	80026e4 <drawText>
 8002a34:	e006      	b.n	8002a44 <drawCenteredTextWithPadding+0x1a0>
	if (y+textSize*8 > HEIGHT) return;
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	e004      	b.n	8002a44 <drawCenteredTextWithPadding+0x1a0>
	if (leftBound < 0) return;
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	e002      	b.n	8002a44 <drawCenteredTextWithPadding+0x1a0>
	if (rightBound > WIDTH) return;
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	e000      	b.n	8002a44 <drawCenteredTextWithPadding+0x1a0>
	if (maxLength < strSize) return;		// size should not be greater than max
 8002a42:	46c0      	nop			; (mov r8, r8)
}
 8002a44:	46bd      	mov	sp, r7
 8002a46:	b006      	add	sp, #24
 8002a48:	bdb0      	pop	{r4, r5, r7, pc}
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	200000ee 	.word	0x200000ee
 8002a50:	200000f2 	.word	0x200000f2

08002a54 <clearTextLine>:

// clear a line of text. y gives upper bound of text box
void clearTextLine(uint8_t y, SPI_HandleTypeDef *hspi) {
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af02      	add	r7, sp, #8
 8002a5a:	0002      	movs	r2, r0
 8002a5c:	6039      	str	r1, [r7, #0]
 8002a5e:	1dfb      	adds	r3, r7, #7
 8002a60:	701a      	strb	r2, [r3, #0]
	fillRect(0, y, WIDTH, textSize*8, bg, hspi);
 8002a62:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <clearTextLine+0x38>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	b2d8      	uxtb	r0, r3
 8002a6a:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <clearTextLine+0x3c>)
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	1dfa      	adds	r2, r7, #7
 8002a70:	7811      	ldrb	r1, [r2, #0]
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	9201      	str	r2, [sp, #4]
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	0003      	movs	r3, r0
 8002a7a:	2280      	movs	r2, #128	; 0x80
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	f7ff fa1a 	bl	8001eb6 <fillRect>
}
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	46bd      	mov	sp, r7
 8002a86:	b002      	add	sp, #8
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	200000ee 	.word	0x200000ee
 8002a90:	200000f2 	.word	0x200000f2

08002a94 <setBackgroundColor>:

// ---- getters and setters ----
// sets static variables
void setBackgroundColor(uint16_t color) {bg = color;}
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	0002      	movs	r2, r0
 8002a9c:	1dbb      	adds	r3, r7, #6
 8002a9e:	801a      	strh	r2, [r3, #0]
 8002aa0:	4b03      	ldr	r3, [pc, #12]	; (8002ab0 <setBackgroundColor+0x1c>)
 8002aa2:	1dba      	adds	r2, r7, #6
 8002aa4:	8812      	ldrh	r2, [r2, #0]
 8002aa6:	801a      	strh	r2, [r3, #0]
 8002aa8:	46c0      	nop			; (mov r8, r8)
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	b002      	add	sp, #8
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	200000f2 	.word	0x200000f2

08002ab4 <setCursor>:

void setCursor(uint8_t x, uint8_t y) {
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	0002      	movs	r2, r0
 8002abc:	1dfb      	adds	r3, r7, #7
 8002abe:	701a      	strb	r2, [r3, #0]
 8002ac0:	1dbb      	adds	r3, r7, #6
 8002ac2:	1c0a      	adds	r2, r1, #0
 8002ac4:	701a      	strb	r2, [r3, #0]
	cursorX = x;
 8002ac6:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <setCursor+0x2c>)
 8002ac8:	1dfa      	adds	r2, r7, #7
 8002aca:	7812      	ldrb	r2, [r2, #0]
 8002acc:	701a      	strb	r2, [r3, #0]
	cursorY = y;
 8002ace:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <setCursor+0x30>)
 8002ad0:	1dba      	adds	r2, r7, #6
 8002ad2:	7812      	ldrb	r2, [r2, #0]
 8002ad4:	701a      	strb	r2, [r3, #0]
}
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	b002      	add	sp, #8
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	200000ec 	.word	0x200000ec
 8002ae4:	200000ed 	.word	0x200000ed

08002ae8 <setTextSize>:

void setTextSize(uint8_t size) {textSize = size;}
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	0002      	movs	r2, r0
 8002af0:	1dfb      	adds	r3, r7, #7
 8002af2:	701a      	strb	r2, [r3, #0]
 8002af4:	4b03      	ldr	r3, [pc, #12]	; (8002b04 <setTextSize+0x1c>)
 8002af6:	1dfa      	adds	r2, r7, #7
 8002af8:	7812      	ldrb	r2, [r2, #0]
 8002afa:	701a      	strb	r2, [r3, #0]
 8002afc:	46c0      	nop			; (mov r8, r8)
 8002afe:	46bd      	mov	sp, r7
 8002b00:	b002      	add	sp, #8
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	200000ee 	.word	0x200000ee

08002b08 <setTextColor>:

void setTextColor(uint16_t color) {textColor = color;}
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	0002      	movs	r2, r0
 8002b10:	1dbb      	adds	r3, r7, #6
 8002b12:	801a      	strh	r2, [r3, #0]
 8002b14:	4b03      	ldr	r3, [pc, #12]	; (8002b24 <setTextColor+0x1c>)
 8002b16:	1dba      	adds	r2, r7, #6
 8002b18:	8812      	ldrh	r2, [r2, #0]
 8002b1a:	801a      	strh	r2, [r3, #0]
 8002b1c:	46c0      	nop			; (mov r8, r8)
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	b002      	add	sp, #8
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	200000f0 	.word	0x200000f0

08002b28 <batteryManager>:
static uint8_t bState = batteryNormal;
static const float batteryCapacity[];
static uint16_t batteryCapacityArraySize = 179;

// spi used to turn display on/off and drawing battery graphic
void batteryManager(ADC_HandleTypeDef *hadc, SPI_HandleTypeDef *hspi) {
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
	if (canSampleBattery) {
 8002b32:	4b29      	ldr	r3, [pc, #164]	; (8002bd8 <batteryManager+0xb0>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d049      	beq.n	8002bd0 <batteryManager+0xa8>
		canSampleBattery = 0;
 8002b3c:	4b26      	ldr	r3, [pc, #152]	; (8002bd8 <batteryManager+0xb0>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	701a      	strb	r2, [r3, #0]

		battPercentage = getBatteryPercentage(hadc);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	0018      	movs	r0, r3
 8002b46:	f000 f84f 	bl	8002be8 <getBatteryPercentage>
 8002b4a:	0003      	movs	r3, r0
 8002b4c:	001a      	movs	r2, r3
 8002b4e:	4b23      	ldr	r3, [pc, #140]	; (8002bdc <batteryManager+0xb4>)
 8002b50:	701a      	strb	r2, [r3, #0]

		// start really shutting down & set flag
		// disable power supply (setting enable pin to 0)
		if (battPercentage == 0) {
 8002b52:	4b22      	ldr	r3, [pc, #136]	; (8002bdc <batteryManager+0xb4>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10a      	bne.n	8002b70 <batteryManager+0x48>
			turnDisplayOff(hspi);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	f7fe ff89 	bl	8001a74 <turnDisplayOff>
			HAL_GPIO_WritePin(POWER_SUPPLY_ENABLE_PORT, POWER_SUPPLY_ENABLE_PIN, GPIO_PIN_RESET);
 8002b62:	4b1f      	ldr	r3, [pc, #124]	; (8002be0 <batteryManager+0xb8>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	2110      	movs	r1, #16
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f004 fd8c 	bl	8007686 <HAL_GPIO_WritePin>
 8002b6e:	e028      	b.n	8002bc2 <batteryManager+0x9a>
		}
		else if (battPercentage <= 5) {
 8002b70:	4b1a      	ldr	r3, [pc, #104]	; (8002bdc <batteryManager+0xb4>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b05      	cmp	r3, #5
 8002b76:	d807      	bhi.n	8002b88 <batteryManager+0x60>
			// start turning off most hardware
			turnDisplayOff(hspi);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f7fe ff7a 	bl	8001a74 <turnDisplayOff>
			bState = batteryReallyLow;
 8002b80:	4b18      	ldr	r3, [pc, #96]	; (8002be4 <batteryManager+0xbc>)
 8002b82:	2202      	movs	r2, #2
 8002b84:	701a      	strb	r2, [r3, #0]
 8002b86:	e01c      	b.n	8002bc2 <batteryManager+0x9a>
		}
		// start low-power mode and set flag
		else if (battPercentage <= 15) {
 8002b88:	4b14      	ldr	r3, [pc, #80]	; (8002bdc <batteryManager+0xb4>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b0f      	cmp	r3, #15
 8002b8e:	d803      	bhi.n	8002b98 <batteryManager+0x70>
			// start turning off some hardware
			bState = batteryLow;
 8002b90:	4b14      	ldr	r3, [pc, #80]	; (8002be4 <batteryManager+0xbc>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	701a      	strb	r2, [r3, #0]
 8002b96:	e014      	b.n	8002bc2 <batteryManager+0x9a>
		}
		// set hardware to use power normally
		else {
			if (bState == batteryLow || bState == batteryReallyLow) {
 8002b98:	4b12      	ldr	r3, [pc, #72]	; (8002be4 <batteryManager+0xbc>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d003      	beq.n	8002ba8 <batteryManager+0x80>
 8002ba0:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <batteryManager+0xbc>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d103      	bne.n	8002bb0 <batteryManager+0x88>
				turnDisplayOn(hspi);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	0018      	movs	r0, r3
 8002bac:	f7fe ff54 	bl	8001a58 <turnDisplayOn>
			}
			HAL_GPIO_WritePin(POWER_SUPPLY_ENABLE_PORT, POWER_SUPPLY_ENABLE_PIN, GPIO_PIN_SET);
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <batteryManager+0xb8>)
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	2110      	movs	r1, #16
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	f004 fd65 	bl	8007686 <HAL_GPIO_WritePin>
			bState = batteryNormal;
 8002bbc:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <batteryManager+0xbc>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	701a      	strb	r2, [r3, #0]
		}

		drawBattery(battPercentage, hspi);
 8002bc2:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <batteryManager+0xb4>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	0011      	movs	r1, r2
 8002bca:	0018      	movs	r0, r3
 8002bcc:	f003 f9ba 	bl	8005f44 <drawBattery>
	}
}
 8002bd0:	46c0      	nop			; (mov r8, r8)
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	b002      	add	sp, #8
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	20000141 	.word	0x20000141
 8002bdc:	20000140 	.word	0x20000140
 8002be0:	50000800 	.word	0x50000800
 8002be4:	200000f4 	.word	0x200000f4

08002be8 <getBatteryPercentage>:

// should return a number from 0-100
uint8_t getBatteryPercentage(ADC_HandleTypeDef *hadc) {
 8002be8:	b5b0      	push	{r4, r5, r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
	float v, temp;
	uint8_t index;

	// enable adc voltage divider for measurements, disable after
	HAL_GPIO_WritePin(ADC_DIVIDER_PORT, ADC_DIVIDER_PIN, GPIO_PIN_SET);
 8002bf0:	4b3c      	ldr	r3, [pc, #240]	; (8002ce4 <getBatteryPercentage+0xfc>)
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	2120      	movs	r1, #32
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f004 fd45 	bl	8007686 <HAL_GPIO_WritePin>
	HAL_ADC_Start_IT(hadc);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f003 fecc 	bl	800699c <HAL_ADC_Start_IT>

	HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8002c04:	2301      	movs	r3, #1
 8002c06:	425a      	negs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	0011      	movs	r1, r2
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f003 fe2f 	bl	8006870 <HAL_ADC_PollForConversion>
	v = 3.3*HAL_ADC_GetValue(hadc)/(0xFFF);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	0018      	movs	r0, r3
 8002c16:	f003 ff33 	bl	8006a80 <HAL_ADC_GetValue>
 8002c1a:	0003      	movs	r3, r0
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	f7fe fc9b 	bl	8001558 <__aeabi_ui2d>
 8002c22:	4a31      	ldr	r2, [pc, #196]	; (8002ce8 <getBatteryPercentage+0x100>)
 8002c24:	4b31      	ldr	r3, [pc, #196]	; (8002cec <getBatteryPercentage+0x104>)
 8002c26:	f7fe f9eb 	bl	8001000 <__aeabi_dmul>
 8002c2a:	0003      	movs	r3, r0
 8002c2c:	000c      	movs	r4, r1
 8002c2e:	0018      	movs	r0, r3
 8002c30:	0021      	movs	r1, r4
 8002c32:	2200      	movs	r2, #0
 8002c34:	4b2e      	ldr	r3, [pc, #184]	; (8002cf0 <getBatteryPercentage+0x108>)
 8002c36:	f7fd fee1 	bl	80009fc <__aeabi_ddiv>
 8002c3a:	0003      	movs	r3, r0
 8002c3c:	000c      	movs	r4, r1
 8002c3e:	0018      	movs	r0, r3
 8002c40:	0021      	movs	r1, r4
 8002c42:	f7fe fcbb 	bl	80015bc <__aeabi_d2f>
 8002c46:	1c03      	adds	r3, r0, #0
 8002c48:	617b      	str	r3, [r7, #20]

	HAL_ADC_Stop(hadc);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f003 fdcf 	bl	80067f0 <HAL_ADC_Stop>
	HAL_GPIO_WritePin(ADC_DIVIDER_PORT, ADC_DIVIDER_PIN, GPIO_PIN_RESET);
 8002c52:	4b24      	ldr	r3, [pc, #144]	; (8002ce4 <getBatteryPercentage+0xfc>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	2120      	movs	r1, #32
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f004 fd14 	bl	8007686 <HAL_GPIO_WritePin>

	// trying to look only for 3.9-3.4. anything above 3.7 is 100%, anything below 3.4 is 0%
	// scaled voltages at 3.0642-2.6714
	// indices at 6-151. have to scale and flip to go from 100-0 since 6->100%
	index = search(v);
 8002c5e:	2513      	movs	r5, #19
 8002c60:	197c      	adds	r4, r7, r5
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	1c18      	adds	r0, r3, #0
 8002c66:	f000 f84b 	bl	8002d00 <search>
 8002c6a:	0003      	movs	r3, r0
 8002c6c:	7023      	strb	r3, [r4, #0]
	if (index <= 6) return 100;
 8002c6e:	197b      	adds	r3, r7, r5
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b06      	cmp	r3, #6
 8002c74:	d801      	bhi.n	8002c7a <getBatteryPercentage+0x92>
 8002c76:	2364      	movs	r3, #100	; 0x64
 8002c78:	e030      	b.n	8002cdc <getBatteryPercentage+0xf4>
	else if (index >= 135) return 0;		// adjusting numbers because tests want to call 2.65V non-zero
 8002c7a:	2313      	movs	r3, #19
 8002c7c:	18fb      	adds	r3, r7, r3
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b86      	cmp	r3, #134	; 0x86
 8002c82:	d901      	bls.n	8002c88 <getBatteryPercentage+0xa0>
 8002c84:	2300      	movs	r3, #0
 8002c86:	e029      	b.n	8002cdc <getBatteryPercentage+0xf4>
	else {
		index -= 6;
 8002c88:	2113      	movs	r1, #19
 8002c8a:	187b      	adds	r3, r7, r1
 8002c8c:	187a      	adds	r2, r7, r1
 8002c8e:	7812      	ldrb	r2, [r2, #0]
 8002c90:	3a06      	subs	r2, #6
 8002c92:	701a      	strb	r2, [r3, #0]
		temp = index*100.0/129;
 8002c94:	187b      	adds	r3, r7, r1
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f7fe fc23 	bl	80014e4 <__aeabi_i2d>
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	4b14      	ldr	r3, [pc, #80]	; (8002cf4 <getBatteryPercentage+0x10c>)
 8002ca2:	f7fe f9ad 	bl	8001000 <__aeabi_dmul>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	000c      	movs	r4, r1
 8002caa:	0018      	movs	r0, r3
 8002cac:	0021      	movs	r1, r4
 8002cae:	2200      	movs	r2, #0
 8002cb0:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <getBatteryPercentage+0x110>)
 8002cb2:	f7fd fea3 	bl	80009fc <__aeabi_ddiv>
 8002cb6:	0003      	movs	r3, r0
 8002cb8:	000c      	movs	r4, r1
 8002cba:	0018      	movs	r0, r3
 8002cbc:	0021      	movs	r1, r4
 8002cbe:	f7fe fc7d 	bl	80015bc <__aeabi_d2f>
 8002cc2:	1c03      	adds	r3, r0, #0
 8002cc4:	60fb      	str	r3, [r7, #12]
		temp = 100-temp;
 8002cc6:	68f9      	ldr	r1, [r7, #12]
 8002cc8:	480c      	ldr	r0, [pc, #48]	; (8002cfc <getBatteryPercentage+0x114>)
 8002cca:	f7fd fcb3 	bl	8000634 <__aeabi_fsub>
 8002cce:	1c03      	adds	r3, r0, #0
 8002cd0:	60fb      	str	r3, [r7, #12]
		return temp;
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f7fd fbd0 	bl	8000478 <__aeabi_f2uiz>
 8002cd8:	0003      	movs	r3, r0
 8002cda:	b2db      	uxtb	r3, r3
	}
}
 8002cdc:	0018      	movs	r0, r3
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	b006      	add	sp, #24
 8002ce2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ce4:	50000800 	.word	0x50000800
 8002ce8:	66666666 	.word	0x66666666
 8002cec:	400a6666 	.word	0x400a6666
 8002cf0:	40affe00 	.word	0x40affe00
 8002cf4:	40590000 	.word	0x40590000
 8002cf8:	40602000 	.word	0x40602000
 8002cfc:	42c80000 	.word	0x42c80000

08002d00 <search>:

// should return index in array
uint8_t search(float val) {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
	// O(n) lookup. array is only size=179.
	uint8_t i;
	for (i = 0; i < batteryCapacityArraySize; i++) {
 8002d08:	230f      	movs	r3, #15
 8002d0a:	18fb      	adds	r3, r7, r3
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]
 8002d10:	e015      	b.n	8002d3e <search+0x3e>
		if (val > batteryCapacity[i]) return i;
 8002d12:	230f      	movs	r3, #15
 8002d14:	18fb      	adds	r3, r7, r3
 8002d16:	781a      	ldrb	r2, [r3, #0]
 8002d18:	4b10      	ldr	r3, [pc, #64]	; (8002d5c <search+0x5c>)
 8002d1a:	0092      	lsls	r2, r2, #2
 8002d1c:	58d3      	ldr	r3, [r2, r3]
 8002d1e:	1c19      	adds	r1, r3, #0
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7fd fb95 	bl	8000450 <__aeabi_fcmpgt>
 8002d26:	1e03      	subs	r3, r0, #0
 8002d28:	d003      	beq.n	8002d32 <search+0x32>
 8002d2a:	230f      	movs	r3, #15
 8002d2c:	18fb      	adds	r3, r7, r3
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	e010      	b.n	8002d54 <search+0x54>
	for (i = 0; i < batteryCapacityArraySize; i++) {
 8002d32:	210f      	movs	r1, #15
 8002d34:	187b      	adds	r3, r7, r1
 8002d36:	781a      	ldrb	r2, [r3, #0]
 8002d38:	187b      	adds	r3, r7, r1
 8002d3a:	3201      	adds	r2, #1
 8002d3c:	701a      	strb	r2, [r3, #0]
 8002d3e:	230f      	movs	r3, #15
 8002d40:	18fb      	adds	r3, r7, r3
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <search+0x60>)
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d3e1      	bcc.n	8002d12 <search+0x12>
	}
	return batteryCapacityArraySize;
 8002d4e:	4b04      	ldr	r3, [pc, #16]	; (8002d60 <search+0x60>)
 8002d50:	881b      	ldrh	r3, [r3, #0]
 8002d52:	b2db      	uxtb	r3, r3
}
 8002d54:	0018      	movs	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	b004      	add	sp, #16
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	0800b740 	.word	0x0800b740
 8002d60:	20000000 	.word	0x20000000

08002d64 <setTime>:
#include "clocks.h"

// ---- RTC setters ----
// set rtc time. uses personal struct as arg
// assumes t's fields are aleady set to something or not null
void setTime(struct times *t, RTC_HandleTypeDef *hrtc) {
 8002d64:	b590      	push	{r4, r7, lr}
 8002d66:	b089      	sub	sp, #36	; 0x24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
	RTC_TimeTypeDef stime = {0};
 8002d6e:	210c      	movs	r1, #12
 8002d70:	000c      	movs	r4, r1
 8002d72:	187b      	adds	r3, r7, r1
 8002d74:	0018      	movs	r0, r3
 8002d76:	2314      	movs	r3, #20
 8002d78:	001a      	movs	r2, r3
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	f007 ff43 	bl	800ac06 <memset>

	stime.Hours = t->hr;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	781a      	ldrb	r2, [r3, #0]
 8002d84:	0021      	movs	r1, r4
 8002d86:	187b      	adds	r3, r7, r1
 8002d88:	701a      	strb	r2, [r3, #0]
	stime.Minutes = t->min;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	785a      	ldrb	r2, [r3, #1]
 8002d8e:	187b      	adds	r3, r7, r1
 8002d90:	705a      	strb	r2, [r3, #1]
	stime.Seconds = t->sec;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	789a      	ldrb	r2, [r3, #2]
 8002d96:	187b      	adds	r3, r7, r1
 8002d98:	709a      	strb	r2, [r3, #2]

	stime.TimeFormat = RTC_HOURFORMAT_24;
 8002d9a:	187b      	adds	r3, r7, r1
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	70da      	strb	r2, [r3, #3]

	// not really using
	stime.SubSeconds = 0;
 8002da0:	187b      	adds	r3, r7, r1
 8002da2:	2200      	movs	r2, #0
 8002da4:	605a      	str	r2, [r3, #4]
	stime.SecondFraction = 0;
 8002da6:	187b      	adds	r3, r7, r1
 8002da8:	2200      	movs	r2, #0
 8002daa:	609a      	str	r2, [r3, #8]
	stime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002dac:	187b      	adds	r3, r7, r1
 8002dae:	2200      	movs	r2, #0
 8002db0:	60da      	str	r2, [r3, #12]
	stime.StoreOperation = RTC_STOREOPERATION_SET;
 8002db2:	187b      	adds	r3, r7, r1
 8002db4:	2280      	movs	r2, #128	; 0x80
 8002db6:	02d2      	lsls	r2, r2, #11
 8002db8:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(hrtc, &stime, RTC_FORMAT_BIN);
 8002dba:	1879      	adds	r1, r7, r1
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	f005 fda3 	bl	800890c <HAL_RTC_SetTime>
}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	b009      	add	sp, #36	; 0x24
 8002dcc:	bd90      	pop	{r4, r7, pc}

08002dce <setDate>:

// set rtc date. uses personal struct as arg
// assumes struct has values
void setDate(struct dates *d, RTC_HandleTypeDef *hrtc) {
 8002dce:	b590      	push	{r4, r7, lr}
 8002dd0:	b085      	sub	sp, #20
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
 8002dd6:	6039      	str	r1, [r7, #0]
	RTC_DateTypeDef sdate = {0};
 8002dd8:	240c      	movs	r4, #12
 8002dda:	193b      	adds	r3, r7, r4
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]

	sdate.Month = d->month;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	789a      	ldrb	r2, [r3, #2]
 8002de4:	193b      	adds	r3, r7, r4
 8002de6:	705a      	strb	r2, [r3, #1]
	sdate.Date = d->date;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	78da      	ldrb	r2, [r3, #3]
 8002dec:	193b      	adds	r3, r7, r4
 8002dee:	709a      	strb	r2, [r3, #2]
	sdate.Year = d->yr % 100; 		// set only between 0-99. limitation of RTC
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	2164      	movs	r1, #100	; 0x64
 8002df6:	0018      	movs	r0, r3
 8002df8:	f7fd fa14 	bl	8000224 <__aeabi_uidivmod>
 8002dfc:	000b      	movs	r3, r1
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	193b      	adds	r3, r7, r4
 8002e04:	70da      	strb	r2, [r3, #3]

	sdate.WeekDay = weekdayCalculator(d->yr, d->month, d->date);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	8818      	ldrh	r0, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	7899      	ldrb	r1, [r3, #2]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	78db      	ldrb	r3, [r3, #3]
 8002e12:	001a      	movs	r2, r3
 8002e14:	f000 fa76 	bl	8003304 <weekdayCalculator>
 8002e18:	0003      	movs	r3, r0
 8002e1a:	001a      	movs	r2, r3
 8002e1c:	193b      	adds	r3, r7, r4
 8002e1e:	701a      	strb	r2, [r3, #0]

	HAL_RTC_SetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 8002e20:	1939      	adds	r1, r7, r4
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2200      	movs	r2, #0
 8002e26:	0018      	movs	r0, r3
 8002e28:	f005 fe90 	bl	8008b4c <HAL_RTC_SetDate>
}
 8002e2c:	46c0      	nop			; (mov r8, r8)
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	b005      	add	sp, #20
 8002e32:	bd90      	pop	{r4, r7, pc}

08002e34 <setDateTime>:

void setDateTime(struct dates *d, struct times *t, RTC_HandleTypeDef *hrtc) {
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
	setDate(d, hrtc);
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	0011      	movs	r1, r2
 8002e46:	0018      	movs	r0, r3
 8002e48:	f7ff ffc1 	bl	8002dce <setDate>
	setTime(t, hrtc);
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	0011      	movs	r1, r2
 8002e52:	0018      	movs	r0, r3
 8002e54:	f7ff ff86 	bl	8002d64 <setTime>
}
 8002e58:	46c0      	nop			; (mov r8, r8)
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	b004      	add	sp, #16
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <setAlarm>:

// for time of day+week
void setAlarm(struct alarmTimes *a, RTC_HandleTypeDef *hrtc) {
 8002e60:	b5b0      	push	{r4, r5, r7, lr}
 8002e62:	b092      	sub	sp, #72	; 0x48
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
	RTC_AlarmTypeDef salarm = {0};
 8002e6a:	2520      	movs	r5, #32
 8002e6c:	197b      	adds	r3, r7, r5
 8002e6e:	0018      	movs	r0, r3
 8002e70:	2328      	movs	r3, #40	; 0x28
 8002e72:	001a      	movs	r2, r3
 8002e74:	2100      	movs	r1, #0
 8002e76:	f007 fec6 	bl	800ac06 <memset>
	RTC_TimeTypeDef salarmtime = {0};
 8002e7a:	210c      	movs	r1, #12
 8002e7c:	000c      	movs	r4, r1
 8002e7e:	187b      	adds	r3, r7, r1
 8002e80:	0018      	movs	r0, r3
 8002e82:	2314      	movs	r3, #20
 8002e84:	001a      	movs	r2, r3
 8002e86:	2100      	movs	r1, #0
 8002e88:	f007 febd 	bl	800ac06 <memset>

	salarmtime.Hours = a->hr;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	781a      	ldrb	r2, [r3, #0]
 8002e90:	0021      	movs	r1, r4
 8002e92:	187b      	adds	r3, r7, r1
 8002e94:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a->min;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	785a      	ldrb	r2, [r3, #1]
 8002e9a:	187b      	adds	r3, r7, r1
 8002e9c:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a->sec;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	789a      	ldrb	r2, [r3, #2]
 8002ea2:	187b      	adds	r3, r7, r1
 8002ea4:	709a      	strb	r2, [r3, #2]

	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 8002ea6:	187b      	adds	r3, r7, r1
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 8002eac:	187b      	adds	r3, r7, r1
 8002eae:	2200      	movs	r2, #0
 8002eb0:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 8002eb2:	187b      	adds	r3, r7, r1
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002eb8:	187b      	adds	r3, r7, r1
 8002eba:	2200      	movs	r2, #0
 8002ebc:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002ebe:	187b      	adds	r3, r7, r1
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 8002ec4:	197b      	adds	r3, r7, r5
 8002ec6:	187a      	adds	r2, r7, r1
 8002ec8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002eca:	c313      	stmia	r3!, {r0, r1, r4}
 8002ecc:	ca03      	ldmia	r2!, {r0, r1}
 8002ece:	c303      	stmia	r3!, {r0, r1}
	salarm.AlarmMask = RTC_ALARMMASK_NONE;		// allows comparison for all fields (sec, min, hour, weekday)
 8002ed0:	197b      	adds	r3, r7, r5
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002ed6:	197b      	adds	r3, r7, r5
 8002ed8:	2200      	movs	r2, #0
 8002eda:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8002edc:	197b      	adds	r3, r7, r5
 8002ede:	2280      	movs	r2, #128	; 0x80
 8002ee0:	05d2      	lsls	r2, r2, #23
 8002ee2:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a->weekday;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	78d9      	ldrb	r1, [r3, #3]
 8002ee8:	197b      	adds	r3, r7, r5
 8002eea:	2220      	movs	r2, #32
 8002eec:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_A;
 8002eee:	197b      	adds	r3, r7, r5
 8002ef0:	2280      	movs	r2, #128	; 0x80
 8002ef2:	0052      	lsls	r2, r2, #1
 8002ef4:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
 8002ef6:	1979      	adds	r1, r7, r5
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	2200      	movs	r2, #0
 8002efc:	0018      	movs	r0, r3
 8002efe:	f005 ff21 	bl	8008d44 <HAL_RTC_SetAlarm_IT>
}
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	46bd      	mov	sp, r7
 8002f06:	b012      	add	sp, #72	; 0x48
 8002f08:	bdb0      	pop	{r4, r5, r7, pc}

08002f0a <setClockAlarm>:

// set an alarm for the next second for triggering display updates
void setClockAlarm(RTC_HandleTypeDef *hrtc) {
 8002f0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f0c:	b097      	sub	sp, #92	; 0x5c
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef salarm = {0};
 8002f12:	242c      	movs	r4, #44	; 0x2c
 8002f14:	193b      	adds	r3, r7, r4
 8002f16:	0018      	movs	r0, r3
 8002f18:	2328      	movs	r3, #40	; 0x28
 8002f1a:	001a      	movs	r2, r3
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	f007 fe72 	bl	800ac06 <memset>
	RTC_TimeTypeDef salarmtime = {0};
 8002f22:	2518      	movs	r5, #24
 8002f24:	197b      	adds	r3, r7, r5
 8002f26:	0018      	movs	r0, r3
 8002f28:	2314      	movs	r3, #20
 8002f2a:	001a      	movs	r2, r3
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	f007 fe6a 	bl	800ac06 <memset>

	// pull current time
	struct dates currentDate = {0};
 8002f32:	2310      	movs	r3, #16
 8002f34:	18fb      	adds	r3, r7, r3
 8002f36:	0018      	movs	r0, r3
 8002f38:	2306      	movs	r3, #6
 8002f3a:	001a      	movs	r2, r3
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	f007 fe62 	bl	800ac06 <memset>
	struct times currentTime = {0};
 8002f42:	210c      	movs	r1, #12
 8002f44:	000e      	movs	r6, r1
 8002f46:	187b      	adds	r3, r7, r1
 8002f48:	0018      	movs	r0, r3
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	001a      	movs	r2, r3
 8002f4e:	2100      	movs	r1, #0
 8002f50:	f007 fe59 	bl	800ac06 <memset>
	getDateTime(&currentDate, &currentTime, hrtc);
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	0031      	movs	r1, r6
 8002f58:	000c      	movs	r4, r1
 8002f5a:	1879      	adds	r1, r7, r1
 8002f5c:	2310      	movs	r3, #16
 8002f5e:	18fb      	adds	r3, r7, r3
 8002f60:	0018      	movs	r0, r3
 8002f62:	f000 f8d5 	bl	8003110 <getDateTime>

	// start setting alarm
	struct alarmTimes a = {0};
 8002f66:	2608      	movs	r6, #8
 8002f68:	19bb      	adds	r3, r7, r6
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]
	uint8_t s,m,h,w;
	s = currentTime.sec + 1;
 8002f6e:	0021      	movs	r1, r4
 8002f70:	187b      	adds	r3, r7, r1
 8002f72:	789a      	ldrb	r2, [r3, #2]
 8002f74:	2057      	movs	r0, #87	; 0x57
 8002f76:	183b      	adds	r3, r7, r0
 8002f78:	3201      	adds	r2, #1
 8002f7a:	701a      	strb	r2, [r3, #0]
	m = currentTime.min + s/60;
 8002f7c:	187b      	adds	r3, r7, r1
 8002f7e:	785c      	ldrb	r4, [r3, #1]
 8002f80:	183b      	adds	r3, r7, r0
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	213c      	movs	r1, #60	; 0x3c
 8002f86:	0018      	movs	r0, r3
 8002f88:	f7fd f8c6 	bl	8000118 <__udivsi3>
 8002f8c:	0003      	movs	r3, r0
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	2056      	movs	r0, #86	; 0x56
 8002f92:	183b      	adds	r3, r7, r0
 8002f94:	18a2      	adds	r2, r4, r2
 8002f96:	701a      	strb	r2, [r3, #0]
	h = currentTime.hr + m/60;
 8002f98:	210c      	movs	r1, #12
 8002f9a:	187b      	adds	r3, r7, r1
 8002f9c:	781c      	ldrb	r4, [r3, #0]
 8002f9e:	0002      	movs	r2, r0
 8002fa0:	18bb      	adds	r3, r7, r2
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	213c      	movs	r1, #60	; 0x3c
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f7fd f8b6 	bl	8000118 <__udivsi3>
 8002fac:	0003      	movs	r3, r0
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	2155      	movs	r1, #85	; 0x55
 8002fb2:	187b      	adds	r3, r7, r1
 8002fb4:	18a2      	adds	r2, r4, r2
 8002fb6:	701a      	strb	r2, [r3, #0]
	w = currentDate.weekday + h/24;
 8002fb8:	2310      	movs	r3, #16
 8002fba:	18fb      	adds	r3, r7, r3
 8002fbc:	791c      	ldrb	r4, [r3, #4]
 8002fbe:	187b      	adds	r3, r7, r1
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2118      	movs	r1, #24
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f7fd f8a7 	bl	8000118 <__udivsi3>
 8002fca:	0003      	movs	r3, r0
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	2354      	movs	r3, #84	; 0x54
 8002fd0:	18fb      	adds	r3, r7, r3
 8002fd2:	18a2      	adds	r2, r4, r2
 8002fd4:	701a      	strb	r2, [r3, #0]
	a.sec = s % 60;
 8002fd6:	2057      	movs	r0, #87	; 0x57
 8002fd8:	183b      	adds	r3, r7, r0
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	213c      	movs	r1, #60	; 0x3c
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f7fd f920 	bl	8000224 <__aeabi_uidivmod>
 8002fe4:	000b      	movs	r3, r1
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	19bb      	adds	r3, r7, r6
 8002fea:	709a      	strb	r2, [r3, #2]
	a.min = m % 60;
 8002fec:	2256      	movs	r2, #86	; 0x56
 8002fee:	18bb      	adds	r3, r7, r2
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	213c      	movs	r1, #60	; 0x3c
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	f7fd f915 	bl	8000224 <__aeabi_uidivmod>
 8002ffa:	000b      	movs	r3, r1
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	19bb      	adds	r3, r7, r6
 8003000:	705a      	strb	r2, [r3, #1]
	a.hr = h % 24;
 8003002:	2155      	movs	r1, #85	; 0x55
 8003004:	187b      	adds	r3, r7, r1
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2118      	movs	r1, #24
 800300a:	0018      	movs	r0, r3
 800300c:	f7fd f90a 	bl	8000224 <__aeabi_uidivmod>
 8003010:	000b      	movs	r3, r1
 8003012:	b2da      	uxtb	r2, r3
 8003014:	19bb      	adds	r3, r7, r6
 8003016:	701a      	strb	r2, [r3, #0]
	a.weekday = (w-1) % 7 + 1;
 8003018:	2354      	movs	r3, #84	; 0x54
 800301a:	18fb      	adds	r3, r7, r3
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	3b01      	subs	r3, #1
 8003020:	2107      	movs	r1, #7
 8003022:	0018      	movs	r0, r3
 8003024:	f7fd f9e8 	bl	80003f8 <__aeabi_idivmod>
 8003028:	000b      	movs	r3, r1
 800302a:	b2db      	uxtb	r3, r3
 800302c:	3301      	adds	r3, #1
 800302e:	b2da      	uxtb	r2, r3
 8003030:	0030      	movs	r0, r6
 8003032:	183b      	adds	r3, r7, r0
 8003034:	70da      	strb	r2, [r3, #3]

	salarmtime.Hours = a.hr;
 8003036:	183b      	adds	r3, r7, r0
 8003038:	781a      	ldrb	r2, [r3, #0]
 800303a:	197b      	adds	r3, r7, r5
 800303c:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a.min;
 800303e:	183b      	adds	r3, r7, r0
 8003040:	785a      	ldrb	r2, [r3, #1]
 8003042:	197b      	adds	r3, r7, r5
 8003044:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a.sec;
 8003046:	183b      	adds	r3, r7, r0
 8003048:	789a      	ldrb	r2, [r3, #2]
 800304a:	197b      	adds	r3, r7, r5
 800304c:	709a      	strb	r2, [r3, #2]
	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 800304e:	197b      	adds	r3, r7, r5
 8003050:	2200      	movs	r2, #0
 8003052:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 8003054:	0029      	movs	r1, r5
 8003056:	187b      	adds	r3, r7, r1
 8003058:	2200      	movs	r2, #0
 800305a:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 800305c:	187b      	adds	r3, r7, r1
 800305e:	2200      	movs	r2, #0
 8003060:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003062:	187b      	adds	r3, r7, r1
 8003064:	2200      	movs	r2, #0
 8003066:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003068:	187b      	adds	r3, r7, r1
 800306a:	2200      	movs	r2, #0
 800306c:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 800306e:	242c      	movs	r4, #44	; 0x2c
 8003070:	193b      	adds	r3, r7, r4
 8003072:	187a      	adds	r2, r7, r1
 8003074:	ca62      	ldmia	r2!, {r1, r5, r6}
 8003076:	c362      	stmia	r3!, {r1, r5, r6}
 8003078:	ca22      	ldmia	r2!, {r1, r5}
 800307a:	c322      	stmia	r3!, {r1, r5}
	salarm.AlarmMask = RTC_ALARMMASK_NONE;
 800307c:	193b      	adds	r3, r7, r4
 800307e:	2200      	movs	r2, #0
 8003080:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003082:	193b      	adds	r3, r7, r4
 8003084:	2200      	movs	r2, #0
 8003086:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8003088:	193b      	adds	r3, r7, r4
 800308a:	2280      	movs	r2, #128	; 0x80
 800308c:	05d2      	lsls	r2, r2, #23
 800308e:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a.weekday;
 8003090:	183b      	adds	r3, r7, r0
 8003092:	78d9      	ldrb	r1, [r3, #3]
 8003094:	193b      	adds	r3, r7, r4
 8003096:	2220      	movs	r2, #32
 8003098:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_B;
 800309a:	193b      	adds	r3, r7, r4
 800309c:	2280      	movs	r2, #128	; 0x80
 800309e:	0092      	lsls	r2, r2, #2
 80030a0:	625a      	str	r2, [r3, #36]	; 0x24

	// do nothing until done
	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
 80030a2:	1939      	adds	r1, r7, r4
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	0018      	movs	r0, r3
 80030aa:	f005 fe4b 	bl	8008d44 <HAL_RTC_SetAlarm_IT>
}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	46bd      	mov	sp, r7
 80030b2:	b017      	add	sp, #92	; 0x5c
 80030b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080030b8 <HAL_RTC_AlarmAEventCallback>:
// ---- end of RTC setters ----

// ---- callbacks for interrupts ----
// used for alarm function in project
// meant to send signal to use motor
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED1_PORT, LED1_PIN);
 80030c0:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <HAL_RTC_AlarmAEventCallback+0x28>)
 80030c2:	2110      	movs	r1, #16
 80030c4:	0018      	movs	r0, r3
 80030c6:	f004 fafb 	bl	80076c0 <HAL_GPIO_TogglePin>
	isAlarmDone = 1;
 80030ca:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <HAL_RTC_AlarmAEventCallback+0x2c>)
 80030cc:	2201      	movs	r2, #1
 80030ce:	701a      	strb	r2, [r3, #0]
	updateFace.alarm = 1;
 80030d0:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <HAL_RTC_AlarmAEventCallback+0x30>)
 80030d2:	2201      	movs	r2, #1
 80030d4:	709a      	strb	r2, [r3, #2]
}
 80030d6:	46c0      	nop			; (mov r8, r8)
 80030d8:	46bd      	mov	sp, r7
 80030da:	b002      	add	sp, #8
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	50000400 	.word	0x50000400
 80030e4:	20000142 	.word	0x20000142
 80030e8:	20000144 	.word	0x20000144

080030ec <HAL_RTCEx_AlarmBEventCallback>:

// used to trigger display refresh every second. used because then it's synchronous with RTC updates
void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc) {
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
	updateFace.clock = 1;
 80030f4:	4b05      	ldr	r3, [pc, #20]	; (800310c <HAL_RTCEx_AlarmBEventCallback+0x20>)
 80030f6:	2201      	movs	r2, #1
 80030f8:	701a      	strb	r2, [r3, #0]
	setClockAlarm(hrtc);		// set something for next second
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	0018      	movs	r0, r3
 80030fe:	f7ff ff04 	bl	8002f0a <setClockAlarm>
}
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	46bd      	mov	sp, r7
 8003106:	b002      	add	sp, #8
 8003108:	bd80      	pop	{r7, pc}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	20000144 	.word	0x20000144

08003110 <getDateTime>:
	d->date = sdate.Date;
	d->weekday = sdate.WeekDay;
}

// not using getDate and getTime for possible efficiency
void getDateTime(struct dates *d, struct times *t, RTC_HandleTypeDef *hrtc) {
 8003110:	b590      	push	{r4, r7, lr}
 8003112:	b08b      	sub	sp, #44	; 0x2c
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
	RTC_DateTypeDef sdate;
	RTC_TimeTypeDef stime;

	// programming manual says to read time after date. something shadow registers.
	// not done automatically in HAL
	HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN);
 800311c:	2310      	movs	r3, #16
 800311e:	18f9      	adds	r1, r7, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	0018      	movs	r0, r3
 8003126:	f005 fcb5 	bl	8008a94 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 800312a:	2424      	movs	r4, #36	; 0x24
 800312c:	1939      	adds	r1, r7, r4
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	0018      	movs	r0, r3
 8003134:	f005 fdb8 	bl	8008ca8 <HAL_RTC_GetDate>

	// make assumptions on whether it's 19xx or 20xx
	d->yr = sdate.Year > 50 ? sdate.Year+1900 : sdate.Year+2000;
 8003138:	193b      	adds	r3, r7, r4
 800313a:	78db      	ldrb	r3, [r3, #3]
 800313c:	2b32      	cmp	r3, #50	; 0x32
 800313e:	d908      	bls.n	8003152 <getDateTime+0x42>
 8003140:	2324      	movs	r3, #36	; 0x24
 8003142:	18fb      	adds	r3, r7, r3
 8003144:	78db      	ldrb	r3, [r3, #3]
 8003146:	b29b      	uxth	r3, r3
 8003148:	4a16      	ldr	r2, [pc, #88]	; (80031a4 <getDateTime+0x94>)
 800314a:	4694      	mov	ip, r2
 800314c:	4463      	add	r3, ip
 800314e:	b29b      	uxth	r3, r3
 8003150:	e008      	b.n	8003164 <getDateTime+0x54>
 8003152:	2324      	movs	r3, #36	; 0x24
 8003154:	18fb      	adds	r3, r7, r3
 8003156:	78db      	ldrb	r3, [r3, #3]
 8003158:	b29b      	uxth	r3, r3
 800315a:	22fa      	movs	r2, #250	; 0xfa
 800315c:	00d2      	lsls	r2, r2, #3
 800315e:	4694      	mov	ip, r2
 8003160:	4463      	add	r3, ip
 8003162:	b29b      	uxth	r3, r3
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	8013      	strh	r3, [r2, #0]
	d->month = sdate.Month;
 8003168:	2124      	movs	r1, #36	; 0x24
 800316a:	187b      	adds	r3, r7, r1
 800316c:	785a      	ldrb	r2, [r3, #1]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	709a      	strb	r2, [r3, #2]
	d->date = sdate.Date;
 8003172:	187b      	adds	r3, r7, r1
 8003174:	789a      	ldrb	r2, [r3, #2]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	70da      	strb	r2, [r3, #3]
	d->weekday = sdate.WeekDay;
 800317a:	187b      	adds	r3, r7, r1
 800317c:	781a      	ldrb	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	711a      	strb	r2, [r3, #4]

	t->hr = stime.Hours;
 8003182:	2110      	movs	r1, #16
 8003184:	187b      	adds	r3, r7, r1
 8003186:	781a      	ldrb	r2, [r3, #0]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	701a      	strb	r2, [r3, #0]
	t->min = stime.Minutes;
 800318c:	187b      	adds	r3, r7, r1
 800318e:	785a      	ldrb	r2, [r3, #1]
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	705a      	strb	r2, [r3, #1]
	t->sec = stime.Seconds;
 8003194:	187b      	adds	r3, r7, r1
 8003196:	789a      	ldrb	r2, [r3, #2]
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	709a      	strb	r2, [r3, #2]
}
 800319c:	46c0      	nop			; (mov r8, r8)
 800319e:	46bd      	mov	sp, r7
 80031a0:	b00b      	add	sp, #44	; 0x2c
 80031a2:	bd90      	pop	{r4, r7, pc}
 80031a4:	0000076c 	.word	0x0000076c

080031a8 <setRTCCalibration>:
// ---- end of RTC getters ----

// ---- RTC calibration function ----
// calibVal should be given in drift/day in seconds
// calibration output on PC13
void setRTCCalibration(int calibVal, RTC_HandleTypeDef *hrtc) {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
	uint16_t calm = 0;
 80031b2:	230e      	movs	r3, #14
 80031b4:	18fb      	adds	r3, r7, r3
 80031b6:	2200      	movs	r2, #0
 80031b8:	801a      	strh	r2, [r3, #0]
	uint32_t temp;

	if (calibVal == 0) return;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d048      	beq.n	8003252 <setRTCCalibration+0xaa>
	else if (calibVal < 0) {		// drift offset is negative. need to slow rtc down
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	da20      	bge.n	8003208 <setRTCCalibration+0x60>
		if (calibVal <= -42) {		// bounds checking. just set to max
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3329      	adds	r3, #41	; 0x29
 80031ca:	da06      	bge.n	80031da <setRTCCalibration+0x32>
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_RESET, 0x1FF);
 80031cc:	4b23      	ldr	r3, [pc, #140]	; (800325c <setRTCCalibration+0xb4>)
 80031ce:	6838      	ldr	r0, [r7, #0]
 80031d0:	2200      	movs	r2, #0
 80031d2:	2100      	movs	r1, #0
 80031d4:	f006 f887 	bl	80092e6 <HAL_RTCEx_SetSmoothCalib>
 80031d8:	e03c      	b.n	8003254 <setRTCCalibration+0xac>
		}
		else {
			// math for setting CALM 9-bit register in RTC. formula in notes and in L0 programming reference manual
			temp = -calibVal*32768*32/86400;		// possible overflow when doing math, so reordering
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	0013      	movs	r3, r2
 80031de:	031b      	lsls	r3, r3, #12
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	051b      	lsls	r3, r3, #20
 80031e4:	491e      	ldr	r1, [pc, #120]	; (8003260 <setRTCCalibration+0xb8>)
 80031e6:	0018      	movs	r0, r3
 80031e8:	f7fd f820 	bl	800022c <__divsi3>
 80031ec:	0003      	movs	r3, r0
 80031ee:	60bb      	str	r3, [r7, #8]
			calm = temp;
 80031f0:	210e      	movs	r1, #14
 80031f2:	187b      	adds	r3, r7, r1
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	801a      	strh	r2, [r3, #0]
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_RESET, calm);
 80031f8:	187b      	adds	r3, r7, r1
 80031fa:	881b      	ldrh	r3, [r3, #0]
 80031fc:	6838      	ldr	r0, [r7, #0]
 80031fe:	2200      	movs	r2, #0
 8003200:	2100      	movs	r1, #0
 8003202:	f006 f870 	bl	80092e6 <HAL_RTCEx_SetSmoothCalib>
 8003206:	e025      	b.n	8003254 <setRTCCalibration+0xac>
		}
	}
	else {
		if (calibVal >= 42) { 		// drift offset is positive. need to speed rtc up
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b29      	cmp	r3, #41	; 0x29
 800320c:	dd07      	ble.n	800321e <setRTCCalibration+0x76>
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_SET, 0);
 800320e:	2380      	movs	r3, #128	; 0x80
 8003210:	021a      	lsls	r2, r3, #8
 8003212:	6838      	ldr	r0, [r7, #0]
 8003214:	2300      	movs	r3, #0
 8003216:	2100      	movs	r1, #0
 8003218:	f006 f865 	bl	80092e6 <HAL_RTCEx_SetSmoothCalib>
 800321c:	e01a      	b.n	8003254 <setRTCCalibration+0xac>
		}
		else {
			// math
			temp = 512-(calibVal*32768*32/86400);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	051b      	lsls	r3, r3, #20
 8003222:	4910      	ldr	r1, [pc, #64]	; (8003264 <setRTCCalibration+0xbc>)
 8003224:	0018      	movs	r0, r3
 8003226:	f7fd f801 	bl	800022c <__divsi3>
 800322a:	0003      	movs	r3, r0
 800322c:	2280      	movs	r2, #128	; 0x80
 800322e:	0092      	lsls	r2, r2, #2
 8003230:	4694      	mov	ip, r2
 8003232:	4463      	add	r3, ip
 8003234:	60bb      	str	r3, [r7, #8]
			calm = temp;
 8003236:	210e      	movs	r1, #14
 8003238:	187b      	adds	r3, r7, r1
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	801a      	strh	r2, [r3, #0]
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_SET, calm);
 800323e:	187b      	adds	r3, r7, r1
 8003240:	8819      	ldrh	r1, [r3, #0]
 8003242:	2380      	movs	r3, #128	; 0x80
 8003244:	021a      	lsls	r2, r3, #8
 8003246:	6838      	ldr	r0, [r7, #0]
 8003248:	000b      	movs	r3, r1
 800324a:	2100      	movs	r1, #0
 800324c:	f006 f84b 	bl	80092e6 <HAL_RTCEx_SetSmoothCalib>
 8003250:	e000      	b.n	8003254 <setRTCCalibration+0xac>
	if (calibVal == 0) return;
 8003252:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8003254:	46bd      	mov	sp, r7
 8003256:	b004      	add	sp, #16
 8003258:	bd80      	pop	{r7, pc}
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	000001ff 	.word	0x000001ff
 8003260:	00015180 	.word	0x00015180
 8003264:	fffeae80 	.word	0xfffeae80

08003268 <timeToSeconds>:
// ---- end of RTC calibration function ----

// ---- converters and calculators ----
uint32_t timeToSeconds(struct times *t) {
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
	return t->sec + t->min*60 + t->hr*3600;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	789b      	ldrb	r3, [r3, #2]
 8003274:	0019      	movs	r1, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	785b      	ldrb	r3, [r3, #1]
 800327a:	001a      	movs	r2, r3
 800327c:	0013      	movs	r3, r2
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	18c9      	adds	r1, r1, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	001a      	movs	r2, r3
 800328c:	0013      	movs	r3, r2
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	1a9b      	subs	r3, r3, r2
 8003292:	011a      	lsls	r2, r3, #4
 8003294:	1ad2      	subs	r2, r2, r3
 8003296:	0113      	lsls	r3, r2, #4
 8003298:	001a      	movs	r2, r3
 800329a:	0013      	movs	r3, r2
 800329c:	18cb      	adds	r3, r1, r3
}
 800329e:	0018      	movs	r0, r3
 80032a0:	46bd      	mov	sp, r7
 80032a2:	b002      	add	sp, #8
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <secondsToTime>:

void secondsToTime(struct times *t, uint32_t seconds) {
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b082      	sub	sp, #8
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	6039      	str	r1, [r7, #0]
	t->hr = seconds / 3600;
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	23e1      	movs	r3, #225	; 0xe1
 80032b4:	0119      	lsls	r1, r3, #4
 80032b6:	0010      	movs	r0, r2
 80032b8:	f7fc ff2e 	bl	8000118 <__udivsi3>
 80032bc:	0003      	movs	r3, r0
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	701a      	strb	r2, [r3, #0]
	seconds %= 3600;
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	23e1      	movs	r3, #225	; 0xe1
 80032c8:	0119      	lsls	r1, r3, #4
 80032ca:	0010      	movs	r0, r2
 80032cc:	f7fc ffaa 	bl	8000224 <__aeabi_uidivmod>
 80032d0:	000b      	movs	r3, r1
 80032d2:	603b      	str	r3, [r7, #0]
	t->min = seconds / 60;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	213c      	movs	r1, #60	; 0x3c
 80032d8:	0018      	movs	r0, r3
 80032da:	f7fc ff1d 	bl	8000118 <__udivsi3>
 80032de:	0003      	movs	r3, r0
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	705a      	strb	r2, [r3, #1]
	seconds %= 60;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	213c      	movs	r1, #60	; 0x3c
 80032ea:	0018      	movs	r0, r3
 80032ec:	f7fc ff9a 	bl	8000224 <__aeabi_uidivmod>
 80032f0:	000b      	movs	r3, r1
 80032f2:	603b      	str	r3, [r7, #0]
	t->sec = seconds;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	709a      	strb	r2, [r3, #2]
}
 80032fc:	46c0      	nop			; (mov r8, r8)
 80032fe:	46bd      	mov	sp, r7
 8003300:	b002      	add	sp, #8
 8003302:	bd80      	pop	{r7, pc}

08003304 <weekdayCalculator>:
 * weekdays is 0-6, with 0 being sunday. hal uses 1=monday, 7=sunday - just call with % 7 to integrate with hal
 * months given in 1-12, with 1 being january. hal uses the same setup
 * rtc represents years with last 2 digits only. make sure year has all 4 numbers
 * should be accurate for any gregorian date
 */
uint8_t weekdayCalculator(uint16_t year, uint8_t month, uint8_t day) {
 8003304:	b590      	push	{r4, r7, lr}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	0004      	movs	r4, r0
 800330c:	0008      	movs	r0, r1
 800330e:	0011      	movs	r1, r2
 8003310:	1dbb      	adds	r3, r7, #6
 8003312:	1c22      	adds	r2, r4, #0
 8003314:	801a      	strh	r2, [r3, #0]
 8003316:	1d7b      	adds	r3, r7, #5
 8003318:	1c02      	adds	r2, r0, #0
 800331a:	701a      	strb	r2, [r3, #0]
 800331c:	1d3b      	adds	r3, r7, #4
 800331e:	1c0a      	adds	r2, r1, #0
 8003320:	701a      	strb	r2, [r3, #0]
	static uint8_t table[] = {0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4};
	if (month < 3) year--;
 8003322:	1d7b      	adds	r3, r7, #5
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	2b02      	cmp	r3, #2
 8003328:	d804      	bhi.n	8003334 <weekdayCalculator+0x30>
 800332a:	1dbb      	adds	r3, r7, #6
 800332c:	881a      	ldrh	r2, [r3, #0]
 800332e:	1dbb      	adds	r3, r7, #6
 8003330:	3a01      	subs	r2, #1
 8003332:	801a      	strh	r2, [r3, #0]
	uint16_t temp = (year + year/4 - year/100 + year/400 + table[month-1] + day) % 7;
 8003334:	1dbb      	adds	r3, r7, #6
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	1dba      	adds	r2, r7, #6
 800333a:	8812      	ldrh	r2, [r2, #0]
 800333c:	0892      	lsrs	r2, r2, #2
 800333e:	b292      	uxth	r2, r2
 8003340:	189c      	adds	r4, r3, r2
 8003342:	1dbb      	adds	r3, r7, #6
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	2164      	movs	r1, #100	; 0x64
 8003348:	0018      	movs	r0, r3
 800334a:	f7fc fee5 	bl	8000118 <__udivsi3>
 800334e:	0003      	movs	r3, r0
 8003350:	b29b      	uxth	r3, r3
 8003352:	1ae4      	subs	r4, r4, r3
 8003354:	1dbb      	adds	r3, r7, #6
 8003356:	881a      	ldrh	r2, [r3, #0]
 8003358:	23c8      	movs	r3, #200	; 0xc8
 800335a:	0059      	lsls	r1, r3, #1
 800335c:	0010      	movs	r0, r2
 800335e:	f7fc fedb 	bl	8000118 <__udivsi3>
 8003362:	0003      	movs	r3, r0
 8003364:	b29b      	uxth	r3, r3
 8003366:	18e3      	adds	r3, r4, r3
 8003368:	1d7a      	adds	r2, r7, #5
 800336a:	7812      	ldrb	r2, [r2, #0]
 800336c:	3a01      	subs	r2, #1
 800336e:	490e      	ldr	r1, [pc, #56]	; (80033a8 <weekdayCalculator+0xa4>)
 8003370:	5c8a      	ldrb	r2, [r1, r2]
 8003372:	189a      	adds	r2, r3, r2
 8003374:	1d3b      	adds	r3, r7, #4
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	18d3      	adds	r3, r2, r3
 800337a:	2107      	movs	r1, #7
 800337c:	0018      	movs	r0, r3
 800337e:	f7fd f83b 	bl	80003f8 <__aeabi_idivmod>
 8003382:	000b      	movs	r3, r1
 8003384:	001a      	movs	r2, r3
 8003386:	210e      	movs	r1, #14
 8003388:	187b      	adds	r3, r7, r1
 800338a:	801a      	strh	r2, [r3, #0]
	if (temp == 0) return RTC_WEEKDAY_SUNDAY;
 800338c:	187b      	adds	r3, r7, r1
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <weekdayCalculator+0x94>
 8003394:	2307      	movs	r3, #7
 8003396:	e003      	b.n	80033a0 <weekdayCalculator+0x9c>
	else return temp;
 8003398:	230e      	movs	r3, #14
 800339a:	18fb      	adds	r3, r7, r3
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	b2db      	uxtb	r3, r3
}
 80033a0:	0018      	movs	r0, r3
 80033a2:	46bd      	mov	sp, r7
 80033a4:	b005      	add	sp, #20
 80033a6:	bd90      	pop	{r4, r7, pc}
 80033a8:	20000004 	.word	0x20000004

080033ac <maxDaysInMonth>:

// calculator for number of days in a month given a month and accounting for leap years
// assumes month is 1-12, 1=january, 12=december
uint8_t maxDaysInMonth(uint8_t month, uint16_t year) {
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	0002      	movs	r2, r0
 80033b4:	1dfb      	adds	r3, r7, #7
 80033b6:	701a      	strb	r2, [r3, #0]
 80033b8:	1d3b      	adds	r3, r7, #4
 80033ba:	1c0a      	adds	r2, r1, #0
 80033bc:	801a      	strh	r2, [r3, #0]
	if (month == 0 || month > 12) return 0;		// bounds checking
 80033be:	1dfb      	adds	r3, r7, #7
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <maxDaysInMonth+0x22>
 80033c6:	1dfb      	adds	r3, r7, #7
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	2b0c      	cmp	r3, #12
 80033cc:	d901      	bls.n	80033d2 <maxDaysInMonth+0x26>
 80033ce:	2300      	movs	r3, #0
 80033d0:	e052      	b.n	8003478 <maxDaysInMonth+0xcc>

	// not using built-in defines, because they're in BCD
	if (month == 1  ||		// january
 80033d2:	1dfb      	adds	r3, r7, #7
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d017      	beq.n	800340a <maxDaysInMonth+0x5e>
 80033da:	1dfb      	adds	r3, r7, #7
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b03      	cmp	r3, #3
 80033e0:	d013      	beq.n	800340a <maxDaysInMonth+0x5e>
		month == 3  ||		// march
 80033e2:	1dfb      	adds	r3, r7, #7
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b05      	cmp	r3, #5
 80033e8:	d00f      	beq.n	800340a <maxDaysInMonth+0x5e>
		month == 5  ||		// may
 80033ea:	1dfb      	adds	r3, r7, #7
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	2b07      	cmp	r3, #7
 80033f0:	d00b      	beq.n	800340a <maxDaysInMonth+0x5e>
		month == 7  ||		// july
 80033f2:	1dfb      	adds	r3, r7, #7
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d007      	beq.n	800340a <maxDaysInMonth+0x5e>
		month == 8  ||		// august
 80033fa:	1dfb      	adds	r3, r7, #7
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b0a      	cmp	r3, #10
 8003400:	d003      	beq.n	800340a <maxDaysInMonth+0x5e>
		month == 10 ||		// october
 8003402:	1dfb      	adds	r3, r7, #7
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b0c      	cmp	r3, #12
 8003408:	d101      	bne.n	800340e <maxDaysInMonth+0x62>
		month == 12) {		// december
		return 31;
 800340a:	231f      	movs	r3, #31
 800340c:	e034      	b.n	8003478 <maxDaysInMonth+0xcc>
	}
	else if (month == 4 ||	// april
 800340e:	1dfb      	adds	r3, r7, #7
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b04      	cmp	r3, #4
 8003414:	d00b      	beq.n	800342e <maxDaysInMonth+0x82>
 8003416:	1dfb      	adds	r3, r7, #7
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b06      	cmp	r3, #6
 800341c:	d007      	beq.n	800342e <maxDaysInMonth+0x82>
			 month == 6 ||	// june
 800341e:	1dfb      	adds	r3, r7, #7
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b09      	cmp	r3, #9
 8003424:	d003      	beq.n	800342e <maxDaysInMonth+0x82>
			 month == 9 ||	// september
 8003426:	1dfb      	adds	r3, r7, #7
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b0b      	cmp	r3, #11
 800342c:	d101      	bne.n	8003432 <maxDaysInMonth+0x86>
			 month == 11) {	// november
		return 30;
 800342e:	231e      	movs	r3, #30
 8003430:	e022      	b.n	8003478 <maxDaysInMonth+0xcc>
	}

	// february/leap year calculator
	// leap year for every 4th year, but every 100th year is not a leap year except on every 400th year
	// ex. 2020 is a leap year, 2100 is not a leap year, 2000 is a leap year.
	else if (year % 400 == 0) return 29;
 8003432:	1d3b      	adds	r3, r7, #4
 8003434:	881a      	ldrh	r2, [r3, #0]
 8003436:	23c8      	movs	r3, #200	; 0xc8
 8003438:	0059      	lsls	r1, r3, #1
 800343a:	0010      	movs	r0, r2
 800343c:	f7fc fef2 	bl	8000224 <__aeabi_uidivmod>
 8003440:	000b      	movs	r3, r1
 8003442:	b29b      	uxth	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <maxDaysInMonth+0xa0>
 8003448:	231d      	movs	r3, #29
 800344a:	e015      	b.n	8003478 <maxDaysInMonth+0xcc>
	else if (year % 100 == 0) return 28;
 800344c:	1d3b      	adds	r3, r7, #4
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	2164      	movs	r1, #100	; 0x64
 8003452:	0018      	movs	r0, r3
 8003454:	f7fc fee6 	bl	8000224 <__aeabi_uidivmod>
 8003458:	000b      	movs	r3, r1
 800345a:	b29b      	uxth	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <maxDaysInMonth+0xb8>
 8003460:	231c      	movs	r3, #28
 8003462:	e009      	b.n	8003478 <maxDaysInMonth+0xcc>
	else if (year % 4 == 0) return 29;
 8003464:	1d3b      	adds	r3, r7, #4
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	2203      	movs	r2, #3
 800346a:	4013      	ands	r3, r2
 800346c:	b29b      	uxth	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <maxDaysInMonth+0xca>
 8003472:	231d      	movs	r3, #29
 8003474:	e000      	b.n	8003478 <maxDaysInMonth+0xcc>
	else return 28;
 8003476:	231c      	movs	r3, #28
}
 8003478:	0018      	movs	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	b002      	add	sp, #8
 800347e:	bd80      	pop	{r7, pc}

08003480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003480:	b590      	push	{r4, r7, lr}
 8003482:	b083      	sub	sp, #12
 8003484:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003486:	f002 ffc1 	bl	800640c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800348a:	f000 f875 	bl	8003578 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800348e:	f000 fca7 	bl	8003de0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003492:	f000 fa41 	bl	8003918 <MX_SPI1_Init>
  MX_ADC_Init();
 8003496:	f000 f8f7 	bl	8003688 <MX_ADC_Init>
  MX_RTC_Init();
 800349a:	f000 f983 	bl	80037a4 <MX_RTC_Init>
  MX_TIM21_Init();
 800349e:	f000 fb59 	bl	8003b54 <MX_TIM21_Init>
  MX_LPTIM1_Init();
 80034a2:	f000 f957 	bl	8003754 <MX_LPTIM1_Init>
  MX_DMA_Init();
 80034a6:	f000 fc7d 	bl	8003da4 <MX_DMA_Init>
  MX_TIM22_Init();
 80034aa:	f000 fbeb 	bl	8003c84 <MX_TIM22_Init>
  MX_TIM2_Init();
 80034ae:	f000 fa6f 	bl	8003990 <MX_TIM2_Init>
  MX_TIM6_Init();
 80034b2:	f000 fb13 	bl	8003adc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	// rtc software calibration
	setRTCCalibration(-3, &hrtc);
 80034b6:	4a27      	ldr	r2, [pc, #156]	; (8003554 <main+0xd4>)
 80034b8:	2303      	movs	r3, #3
 80034ba:	425b      	negs	r3, r3
 80034bc:	0011      	movs	r1, r2
 80034be:	0018      	movs	r0, r3
 80034c0:	f7ff fe72 	bl	80031a8 <setRTCCalibration>

  	// initialization for display
	TFT_startup(&hspi1);
 80034c4:	4b24      	ldr	r3, [pc, #144]	; (8003558 <main+0xd8>)
 80034c6:	0018      	movs	r0, r3
 80034c8:	f7fe fa20 	bl	800190c <TFT_startup>
	clearScreen(ST77XX_BLACK, &hspi1);
 80034cc:	4b22      	ldr	r3, [pc, #136]	; (8003558 <main+0xd8>)
 80034ce:	0019      	movs	r1, r3
 80034d0:	2000      	movs	r0, #0
 80034d2:	f7fe fd9f 	bl	8002014 <clearScreen>

	// initialization for ui and hardware
	initFace();
 80034d6:	f002 ff39 	bl	800634c <initFace>
	setClockAlarm(&hrtc);
 80034da:	4b1e      	ldr	r3, [pc, #120]	; (8003554 <main+0xd4>)
 80034dc:	0018      	movs	r0, r3
 80034de:	f7ff fd14 	bl	8002f0a <setClockAlarm>
	runTimerStopwatchBase(&htim21);		// running time bases
 80034e2:	4b1e      	ldr	r3, [pc, #120]	; (800355c <main+0xdc>)
 80034e4:	0018      	movs	r0, r3
 80034e6:	f001 f9f9 	bl	80048dc <runTimerStopwatchBase>
	runBacklightMotorBase(&htim2);
 80034ea:	4b1d      	ldr	r3, [pc, #116]	; (8003560 <main+0xe0>)
 80034ec:	0018      	movs	r0, r3
 80034ee:	f001 fa4d 	bl	800498c <runBacklightMotorBase>
	runADCSampler(&htim22);
 80034f2:	4b1c      	ldr	r3, [pc, #112]	; (8003564 <main+0xe4>)
 80034f4:	0018      	movs	r0, r3
 80034f6:	f001 f9fd 	bl	80048f4 <runADCSampler>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		updateState(&hrtc, &htim21, &htim2, &htim6, &hspi1);
 80034fa:	4c1b      	ldr	r4, [pc, #108]	; (8003568 <main+0xe8>)
 80034fc:	4a18      	ldr	r2, [pc, #96]	; (8003560 <main+0xe0>)
 80034fe:	4917      	ldr	r1, [pc, #92]	; (800355c <main+0xdc>)
 8003500:	4814      	ldr	r0, [pc, #80]	; (8003554 <main+0xd4>)
 8003502:	4b15      	ldr	r3, [pc, #84]	; (8003558 <main+0xd8>)
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	0023      	movs	r3, r4
 8003508:	f001 fa94 	bl	8004a34 <updateState>
		updateDisplay(&hrtc, &hspi1);
 800350c:	4a12      	ldr	r2, [pc, #72]	; (8003558 <main+0xd8>)
 800350e:	4b11      	ldr	r3, [pc, #68]	; (8003554 <main+0xd4>)
 8003510:	0011      	movs	r1, r2
 8003512:	0018      	movs	r0, r3
 8003514:	f002 f89c 	bl	8005650 <updateDisplay>
		batteryManager(&hadc, &hspi1);
 8003518:	4a0f      	ldr	r2, [pc, #60]	; (8003558 <main+0xd8>)
 800351a:	4b14      	ldr	r3, [pc, #80]	; (800356c <main+0xec>)
 800351c:	0011      	movs	r1, r2
 800351e:	0018      	movs	r0, r3
 8003520:	f7ff fb02 	bl	8002b28 <batteryManager>

		if (isTimerDone || isAlarmDone) {
 8003524:	4b12      	ldr	r3, [pc, #72]	; (8003570 <main+0xf0>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d104      	bne.n	8003538 <main+0xb8>
 800352e:	4b11      	ldr	r3, [pc, #68]	; (8003574 <main+0xf4>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00a      	beq.n	800354e <main+0xce>
			runMotor(&htim2);
 8003538:	4b09      	ldr	r3, [pc, #36]	; (8003560 <main+0xe0>)
 800353a:	0018      	movs	r0, r3
 800353c:	f001 f9ec 	bl	8004918 <runMotor>
			isTimerDone = isAlarmDone = 0;
 8003540:	2100      	movs	r1, #0
 8003542:	4b0c      	ldr	r3, [pc, #48]	; (8003574 <main+0xf4>)
 8003544:	1c0a      	adds	r2, r1, #0
 8003546:	701a      	strb	r2, [r3, #0]
 8003548:	4b09      	ldr	r3, [pc, #36]	; (8003570 <main+0xf0>)
 800354a:	1c0a      	adds	r2, r1, #0
 800354c:	701a      	strb	r2, [r3, #0]
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 800354e:	bf30      	wfi
		updateState(&hrtc, &htim21, &htim2, &htim6, &hspi1);
 8003550:	e7d3      	b.n	80034fa <main+0x7a>
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	20000208 	.word	0x20000208
 8003558:	2000022c 	.word	0x2000022c
 800355c:	20000364 	.word	0x20000364
 8003560:	20000284 	.word	0x20000284
 8003564:	2000019c 	.word	0x2000019c
 8003568:	20000154 	.word	0x20000154
 800356c:	200002c0 	.word	0x200002c0
 8003570:	20000150 	.word	0x20000150
 8003574:	20000142 	.word	0x20000142

08003578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003578:	b590      	push	{r4, r7, lr}
 800357a:	b09f      	sub	sp, #124	; 0x7c
 800357c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800357e:	2440      	movs	r4, #64	; 0x40
 8003580:	193b      	adds	r3, r7, r4
 8003582:	0018      	movs	r0, r3
 8003584:	2338      	movs	r3, #56	; 0x38
 8003586:	001a      	movs	r2, r3
 8003588:	2100      	movs	r1, #0
 800358a:	f007 fb3c 	bl	800ac06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800358e:	232c      	movs	r3, #44	; 0x2c
 8003590:	18fb      	adds	r3, r7, r3
 8003592:	0018      	movs	r0, r3
 8003594:	2314      	movs	r3, #20
 8003596:	001a      	movs	r2, r3
 8003598:	2100      	movs	r1, #0
 800359a:	f007 fb34 	bl	800ac06 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800359e:	1d3b      	adds	r3, r7, #4
 80035a0:	0018      	movs	r0, r3
 80035a2:	2328      	movs	r3, #40	; 0x28
 80035a4:	001a      	movs	r2, r3
 80035a6:	2100      	movs	r1, #0
 80035a8:	f007 fb2d 	bl	800ac06 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80035ac:	4b33      	ldr	r3, [pc, #204]	; (800367c <SystemClock_Config+0x104>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a33      	ldr	r2, [pc, #204]	; (8003680 <SystemClock_Config+0x108>)
 80035b2:	401a      	ands	r2, r3
 80035b4:	4b31      	ldr	r3, [pc, #196]	; (800367c <SystemClock_Config+0x104>)
 80035b6:	2180      	movs	r1, #128	; 0x80
 80035b8:	0109      	lsls	r1, r1, #4
 80035ba:	430a      	orrs	r2, r1
 80035bc:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80035be:	f004 fa07 	bl	80079d0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80035c2:	4b30      	ldr	r3, [pc, #192]	; (8003684 <SystemClock_Config+0x10c>)
 80035c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035c6:	4b2f      	ldr	r3, [pc, #188]	; (8003684 <SystemClock_Config+0x10c>)
 80035c8:	492d      	ldr	r1, [pc, #180]	; (8003680 <SystemClock_Config+0x108>)
 80035ca:	400a      	ands	r2, r1
 80035cc:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80035ce:	193b      	adds	r3, r7, r4
 80035d0:	2226      	movs	r2, #38	; 0x26
 80035d2:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80035d4:	193b      	adds	r3, r7, r4
 80035d6:	2280      	movs	r2, #128	; 0x80
 80035d8:	0052      	lsls	r2, r2, #1
 80035da:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80035dc:	0021      	movs	r1, r4
 80035de:	187b      	adds	r3, r7, r1
 80035e0:	2201      	movs	r2, #1
 80035e2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80035e4:	187b      	adds	r3, r7, r1
 80035e6:	2210      	movs	r2, #16
 80035e8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80035ea:	187b      	adds	r3, r7, r1
 80035ec:	2201      	movs	r2, #1
 80035ee:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035f0:	187b      	adds	r3, r7, r1
 80035f2:	2202      	movs	r2, #2
 80035f4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80035f6:	187b      	adds	r3, r7, r1
 80035f8:	2200      	movs	r2, #0
 80035fa:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80035fc:	187b      	adds	r3, r7, r1
 80035fe:	2280      	movs	r2, #128	; 0x80
 8003600:	02d2      	lsls	r2, r2, #11
 8003602:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8003604:	187b      	adds	r3, r7, r1
 8003606:	2280      	movs	r2, #128	; 0x80
 8003608:	03d2      	lsls	r2, r2, #15
 800360a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800360c:	187b      	adds	r3, r7, r1
 800360e:	0018      	movs	r0, r3
 8003610:	f004 f9ec 	bl	80079ec <HAL_RCC_OscConfig>
 8003614:	1e03      	subs	r3, r0, #0
 8003616:	d001      	beq.n	800361c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8003618:	f000 fc98 	bl	8003f4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800361c:	212c      	movs	r1, #44	; 0x2c
 800361e:	187b      	adds	r3, r7, r1
 8003620:	220f      	movs	r2, #15
 8003622:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003624:	187b      	adds	r3, r7, r1
 8003626:	2203      	movs	r2, #3
 8003628:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800362a:	187b      	adds	r3, r7, r1
 800362c:	2200      	movs	r2, #0
 800362e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003630:	187b      	adds	r3, r7, r1
 8003632:	2200      	movs	r2, #0
 8003634:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003636:	187b      	adds	r3, r7, r1
 8003638:	2200      	movs	r2, #0
 800363a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800363c:	187b      	adds	r3, r7, r1
 800363e:	2101      	movs	r1, #1
 8003640:	0018      	movs	r0, r3
 8003642:	f004 fda3 	bl	800818c <HAL_RCC_ClockConfig>
 8003646:	1e03      	subs	r3, r0, #0
 8003648:	d001      	beq.n	800364e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800364a:	f000 fc7f 	bl	8003f4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPTIM1;
 800364e:	1d3b      	adds	r3, r7, #4
 8003650:	22a0      	movs	r2, #160	; 0xa0
 8003652:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003654:	1d3b      	adds	r3, r7, #4
 8003656:	2280      	movs	r2, #128	; 0x80
 8003658:	0252      	lsls	r2, r2, #9
 800365a:	605a      	str	r2, [r3, #4]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 800365c:	1d3b      	adds	r3, r7, #4
 800365e:	22c0      	movs	r2, #192	; 0xc0
 8003660:	0312      	lsls	r2, r2, #12
 8003662:	621a      	str	r2, [r3, #32]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003664:	1d3b      	adds	r3, r7, #4
 8003666:	0018      	movs	r0, r3
 8003668:	f004 ff3e 	bl	80084e8 <HAL_RCCEx_PeriphCLKConfig>
 800366c:	1e03      	subs	r3, r0, #0
 800366e:	d001      	beq.n	8003674 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8003670:	f000 fc6c 	bl	8003f4c <Error_Handler>
  }
}
 8003674:	46c0      	nop			; (mov r8, r8)
 8003676:	46bd      	mov	sp, r7
 8003678:	b01f      	add	sp, #124	; 0x7c
 800367a:	bd90      	pop	{r4, r7, pc}
 800367c:	40007000 	.word	0x40007000
 8003680:	ffffe7ff 	.word	0xffffe7ff
 8003684:	40021000 	.word	0x40021000

08003688 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800368e:	003b      	movs	r3, r7
 8003690:	0018      	movs	r0, r3
 8003692:	2308      	movs	r3, #8
 8003694:	001a      	movs	r2, r3
 8003696:	2100      	movs	r1, #0
 8003698:	f007 fab5 	bl	800ac06 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 800369c:	4b2a      	ldr	r3, [pc, #168]	; (8003748 <MX_ADC_Init+0xc0>)
 800369e:	4a2b      	ldr	r2, [pc, #172]	; (800374c <MX_ADC_Init+0xc4>)
 80036a0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80036a2:	4b29      	ldr	r3, [pc, #164]	; (8003748 <MX_ADC_Init+0xc0>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80036a8:	4b27      	ldr	r3, [pc, #156]	; (8003748 <MX_ADC_Init+0xc0>)
 80036aa:	2280      	movs	r2, #128	; 0x80
 80036ac:	05d2      	lsls	r2, r2, #23
 80036ae:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80036b0:	4b25      	ldr	r3, [pc, #148]	; (8003748 <MX_ADC_Init+0xc0>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_79CYCLES_5;
 80036b6:	4b24      	ldr	r3, [pc, #144]	; (8003748 <MX_ADC_Init+0xc0>)
 80036b8:	2206      	movs	r2, #6
 80036ba:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80036bc:	4b22      	ldr	r3, [pc, #136]	; (8003748 <MX_ADC_Init+0xc0>)
 80036be:	2201      	movs	r2, #1
 80036c0:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80036c2:	4b21      	ldr	r3, [pc, #132]	; (8003748 <MX_ADC_Init+0xc0>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80036c8:	4b1f      	ldr	r3, [pc, #124]	; (8003748 <MX_ADC_Init+0xc0>)
 80036ca:	2220      	movs	r2, #32
 80036cc:	2100      	movs	r1, #0
 80036ce:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80036d0:	4b1d      	ldr	r3, [pc, #116]	; (8003748 <MX_ADC_Init+0xc0>)
 80036d2:	2221      	movs	r2, #33	; 0x21
 80036d4:	2100      	movs	r1, #0
 80036d6:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80036d8:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <MX_ADC_Init+0xc0>)
 80036da:	2200      	movs	r2, #0
 80036dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80036de:	4b1a      	ldr	r3, [pc, #104]	; (8003748 <MX_ADC_Init+0xc0>)
 80036e0:	22c2      	movs	r2, #194	; 0xc2
 80036e2:	32ff      	adds	r2, #255	; 0xff
 80036e4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80036e6:	4b18      	ldr	r3, [pc, #96]	; (8003748 <MX_ADC_Init+0xc0>)
 80036e8:	222c      	movs	r2, #44	; 0x2c
 80036ea:	2100      	movs	r1, #0
 80036ec:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80036ee:	4b16      	ldr	r3, [pc, #88]	; (8003748 <MX_ADC_Init+0xc0>)
 80036f0:	2204      	movs	r2, #4
 80036f2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80036f4:	4b14      	ldr	r3, [pc, #80]	; (8003748 <MX_ADC_Init+0xc0>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80036fa:	4b13      	ldr	r3, [pc, #76]	; (8003748 <MX_ADC_Init+0xc0>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8003700:	4b11      	ldr	r3, [pc, #68]	; (8003748 <MX_ADC_Init+0xc0>)
 8003702:	2200      	movs	r2, #0
 8003704:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003706:	4b10      	ldr	r3, [pc, #64]	; (8003748 <MX_ADC_Init+0xc0>)
 8003708:	2200      	movs	r2, #0
 800370a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800370c:	4b0e      	ldr	r3, [pc, #56]	; (8003748 <MX_ADC_Init+0xc0>)
 800370e:	0018      	movs	r0, r3
 8003710:	f002 fefa 	bl	8006508 <HAL_ADC_Init>
 8003714:	1e03      	subs	r3, r0, #0
 8003716:	d001      	beq.n	800371c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8003718:	f000 fc18 	bl	8003f4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800371c:	003b      	movs	r3, r7
 800371e:	4a0c      	ldr	r2, [pc, #48]	; (8003750 <MX_ADC_Init+0xc8>)
 8003720:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003722:	003b      	movs	r3, r7
 8003724:	2280      	movs	r2, #128	; 0x80
 8003726:	0152      	lsls	r2, r2, #5
 8003728:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800372a:	003a      	movs	r2, r7
 800372c:	4b06      	ldr	r3, [pc, #24]	; (8003748 <MX_ADC_Init+0xc0>)
 800372e:	0011      	movs	r1, r2
 8003730:	0018      	movs	r0, r3
 8003732:	f003 f9b1 	bl	8006a98 <HAL_ADC_ConfigChannel>
 8003736:	1e03      	subs	r3, r0, #0
 8003738:	d001      	beq.n	800373e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800373a:	f000 fc07 	bl	8003f4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	46bd      	mov	sp, r7
 8003742:	b002      	add	sp, #8
 8003744:	bd80      	pop	{r7, pc}
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	200002c0 	.word	0x200002c0
 800374c:	40012400 	.word	0x40012400
 8003750:	0c000008 	.word	0x0c000008

08003754 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8003758:	4b0f      	ldr	r3, [pc, #60]	; (8003798 <MX_LPTIM1_Init+0x44>)
 800375a:	4a10      	ldr	r2, [pc, #64]	; (800379c <MX_LPTIM1_Init+0x48>)
 800375c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800375e:	4b0e      	ldr	r3, [pc, #56]	; (8003798 <MX_LPTIM1_Init+0x44>)
 8003760:	2200      	movs	r2, #0
 8003762:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8003764:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <MX_LPTIM1_Init+0x44>)
 8003766:	2200      	movs	r2, #0
 8003768:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800376a:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <MX_LPTIM1_Init+0x44>)
 800376c:	4a0c      	ldr	r2, [pc, #48]	; (80037a0 <MX_LPTIM1_Init+0x4c>)
 800376e:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8003770:	4b09      	ldr	r3, [pc, #36]	; (8003798 <MX_LPTIM1_Init+0x44>)
 8003772:	2200      	movs	r2, #0
 8003774:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8003776:	4b08      	ldr	r3, [pc, #32]	; (8003798 <MX_LPTIM1_Init+0x44>)
 8003778:	2200      	movs	r2, #0
 800377a:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800377c:	4b06      	ldr	r3, [pc, #24]	; (8003798 <MX_LPTIM1_Init+0x44>)
 800377e:	2200      	movs	r2, #0
 8003780:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8003782:	4b05      	ldr	r3, [pc, #20]	; (8003798 <MX_LPTIM1_Init+0x44>)
 8003784:	0018      	movs	r0, r3
 8003786:	f003 ffc9 	bl	800771c <HAL_LPTIM_Init>
 800378a:	1e03      	subs	r3, r0, #0
 800378c:	d001      	beq.n	8003792 <MX_LPTIM1_Init+0x3e>
  {
    Error_Handler();
 800378e:	f000 fbdd 	bl	8003f4c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	200001d8 	.word	0x200001d8
 800379c:	40007c00 	.word	0x40007c00
 80037a0:	0000ffff 	.word	0x0000ffff

080037a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b090      	sub	sp, #64	; 0x40
 80037a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80037aa:	232c      	movs	r3, #44	; 0x2c
 80037ac:	18fb      	adds	r3, r7, r3
 80037ae:	0018      	movs	r0, r3
 80037b0:	2314      	movs	r3, #20
 80037b2:	001a      	movs	r2, r3
 80037b4:	2100      	movs	r1, #0
 80037b6:	f007 fa26 	bl	800ac06 <memset>
  RTC_DateTypeDef sDate = {0};
 80037ba:	2328      	movs	r3, #40	; 0x28
 80037bc:	18fb      	adds	r3, r7, r3
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80037c2:	003b      	movs	r3, r7
 80037c4:	0018      	movs	r0, r3
 80037c6:	2328      	movs	r3, #40	; 0x28
 80037c8:	001a      	movs	r2, r3
 80037ca:	2100      	movs	r1, #0
 80037cc:	f007 fa1b 	bl	800ac06 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80037d0:	4b4f      	ldr	r3, [pc, #316]	; (8003910 <MX_RTC_Init+0x16c>)
 80037d2:	4a50      	ldr	r2, [pc, #320]	; (8003914 <MX_RTC_Init+0x170>)
 80037d4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80037d6:	4b4e      	ldr	r3, [pc, #312]	; (8003910 <MX_RTC_Init+0x16c>)
 80037d8:	2200      	movs	r2, #0
 80037da:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80037dc:	4b4c      	ldr	r3, [pc, #304]	; (8003910 <MX_RTC_Init+0x16c>)
 80037de:	227f      	movs	r2, #127	; 0x7f
 80037e0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80037e2:	4b4b      	ldr	r3, [pc, #300]	; (8003910 <MX_RTC_Init+0x16c>)
 80037e4:	22ff      	movs	r2, #255	; 0xff
 80037e6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80037e8:	4b49      	ldr	r3, [pc, #292]	; (8003910 <MX_RTC_Init+0x16c>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80037ee:	4b48      	ldr	r3, [pc, #288]	; (8003910 <MX_RTC_Init+0x16c>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80037f4:	4b46      	ldr	r3, [pc, #280]	; (8003910 <MX_RTC_Init+0x16c>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80037fa:	4b45      	ldr	r3, [pc, #276]	; (8003910 <MX_RTC_Init+0x16c>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003800:	4b43      	ldr	r3, [pc, #268]	; (8003910 <MX_RTC_Init+0x16c>)
 8003802:	0018      	movs	r0, r3
 8003804:	f004 ffe4 	bl	80087d0 <HAL_RTC_Init>
 8003808:	1e03      	subs	r3, r0, #0
 800380a:	d001      	beq.n	8003810 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 800380c:	f000 fb9e 	bl	8003f4c <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 8003810:	212c      	movs	r1, #44	; 0x2c
 8003812:	187b      	adds	r3, r7, r1
 8003814:	2200      	movs	r2, #0
 8003816:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8003818:	187b      	adds	r3, r7, r1
 800381a:	2200      	movs	r2, #0
 800381c:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800381e:	187b      	adds	r3, r7, r1
 8003820:	2200      	movs	r2, #0
 8003822:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003824:	187b      	adds	r3, r7, r1
 8003826:	2200      	movs	r2, #0
 8003828:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800382a:	187b      	adds	r3, r7, r1
 800382c:	2200      	movs	r2, #0
 800382e:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003830:	1879      	adds	r1, r7, r1
 8003832:	4b37      	ldr	r3, [pc, #220]	; (8003910 <MX_RTC_Init+0x16c>)
 8003834:	2200      	movs	r2, #0
 8003836:	0018      	movs	r0, r3
 8003838:	f005 f868 	bl	800890c <HAL_RTC_SetTime>
 800383c:	1e03      	subs	r3, r0, #0
 800383e:	d001      	beq.n	8003844 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8003840:	f000 fb84 	bl	8003f4c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8003844:	2128      	movs	r1, #40	; 0x28
 8003846:	187b      	adds	r3, r7, r1
 8003848:	2207      	movs	r2, #7
 800384a:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 800384c:	187b      	adds	r3, r7, r1
 800384e:	2212      	movs	r2, #18
 8003850:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8003852:	187b      	adds	r3, r7, r1
 8003854:	2201      	movs	r2, #1
 8003856:	709a      	strb	r2, [r3, #2]
  sDate.Year = 19;
 8003858:	187b      	adds	r3, r7, r1
 800385a:	2213      	movs	r2, #19
 800385c:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800385e:	1879      	adds	r1, r7, r1
 8003860:	4b2b      	ldr	r3, [pc, #172]	; (8003910 <MX_RTC_Init+0x16c>)
 8003862:	2200      	movs	r2, #0
 8003864:	0018      	movs	r0, r3
 8003866:	f005 f971 	bl	8008b4c <HAL_RTC_SetDate>
 800386a:	1e03      	subs	r3, r0, #0
 800386c:	d001      	beq.n	8003872 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 800386e:	f000 fb6d 	bl	8003f4c <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 8003872:	003b      	movs	r3, r7
 8003874:	2200      	movs	r2, #0
 8003876:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8003878:	003b      	movs	r3, r7
 800387a:	2200      	movs	r2, #0
 800387c:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 800387e:	003b      	movs	r3, r7
 8003880:	2200      	movs	r2, #0
 8003882:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8003884:	003b      	movs	r3, r7
 8003886:	2200      	movs	r2, #0
 8003888:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800388a:	003b      	movs	r3, r7
 800388c:	2200      	movs	r2, #0
 800388e:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003890:	003b      	movs	r3, r7
 8003892:	2200      	movs	r2, #0
 8003894:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003896:	003b      	movs	r3, r7
 8003898:	2200      	movs	r2, #0
 800389a:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800389c:	003b      	movs	r3, r7
 800389e:	2200      	movs	r2, #0
 80038a0:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80038a2:	003b      	movs	r3, r7
 80038a4:	2200      	movs	r2, #0
 80038a6:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80038a8:	003b      	movs	r3, r7
 80038aa:	2220      	movs	r2, #32
 80038ac:	2101      	movs	r1, #1
 80038ae:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80038b0:	003b      	movs	r3, r7
 80038b2:	2280      	movs	r2, #128	; 0x80
 80038b4:	0052      	lsls	r2, r2, #1
 80038b6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80038b8:	0039      	movs	r1, r7
 80038ba:	4b15      	ldr	r3, [pc, #84]	; (8003910 <MX_RTC_Init+0x16c>)
 80038bc:	2200      	movs	r2, #0
 80038be:	0018      	movs	r0, r3
 80038c0:	f005 fa40 	bl	8008d44 <HAL_RTC_SetAlarm_IT>
 80038c4:	1e03      	subs	r3, r0, #0
 80038c6:	d001      	beq.n	80038cc <MX_RTC_Init+0x128>
  {
    Error_Handler();
 80038c8:	f000 fb40 	bl	8003f4c <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 1;
 80038cc:	003b      	movs	r3, r7
 80038ce:	2220      	movs	r2, #32
 80038d0:	2101      	movs	r1, #1
 80038d2:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_B;
 80038d4:	003b      	movs	r3, r7
 80038d6:	2280      	movs	r2, #128	; 0x80
 80038d8:	0092      	lsls	r2, r2, #2
 80038da:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80038dc:	0039      	movs	r1, r7
 80038de:	4b0c      	ldr	r3, [pc, #48]	; (8003910 <MX_RTC_Init+0x16c>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	0018      	movs	r0, r3
 80038e4:	f005 fa2e 	bl	8008d44 <HAL_RTC_SetAlarm_IT>
 80038e8:	1e03      	subs	r3, r0, #0
 80038ea:	d001      	beq.n	80038f0 <MX_RTC_Init+0x14c>
  {
    Error_Handler();
 80038ec:	f000 fb2e 	bl	8003f4c <Error_Handler>
  }
  /** Enable Calibrartion 
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 80038f0:	2380      	movs	r3, #128	; 0x80
 80038f2:	031a      	lsls	r2, r3, #12
 80038f4:	4b06      	ldr	r3, [pc, #24]	; (8003910 <MX_RTC_Init+0x16c>)
 80038f6:	0011      	movs	r1, r2
 80038f8:	0018      	movs	r0, r3
 80038fa:	f005 fd57 	bl	80093ac <HAL_RTCEx_SetCalibrationOutPut>
 80038fe:	1e03      	subs	r3, r0, #0
 8003900:	d001      	beq.n	8003906 <MX_RTC_Init+0x162>
  {
    Error_Handler();
 8003902:	f000 fb23 	bl	8003f4c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	46bd      	mov	sp, r7
 800390a:	b010      	add	sp, #64	; 0x40
 800390c:	bd80      	pop	{r7, pc}
 800390e:	46c0      	nop			; (mov r8, r8)
 8003910:	20000208 	.word	0x20000208
 8003914:	40002800 	.word	0x40002800

08003918 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800391c:	4b19      	ldr	r3, [pc, #100]	; (8003984 <MX_SPI1_Init+0x6c>)
 800391e:	4a1a      	ldr	r2, [pc, #104]	; (8003988 <MX_SPI1_Init+0x70>)
 8003920:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003922:	4b18      	ldr	r3, [pc, #96]	; (8003984 <MX_SPI1_Init+0x6c>)
 8003924:	2282      	movs	r2, #130	; 0x82
 8003926:	0052      	lsls	r2, r2, #1
 8003928:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800392a:	4b16      	ldr	r3, [pc, #88]	; (8003984 <MX_SPI1_Init+0x6c>)
 800392c:	2200      	movs	r2, #0
 800392e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003930:	4b14      	ldr	r3, [pc, #80]	; (8003984 <MX_SPI1_Init+0x6c>)
 8003932:	2200      	movs	r2, #0
 8003934:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003936:	4b13      	ldr	r3, [pc, #76]	; (8003984 <MX_SPI1_Init+0x6c>)
 8003938:	2200      	movs	r2, #0
 800393a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800393c:	4b11      	ldr	r3, [pc, #68]	; (8003984 <MX_SPI1_Init+0x6c>)
 800393e:	2200      	movs	r2, #0
 8003940:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003942:	4b10      	ldr	r3, [pc, #64]	; (8003984 <MX_SPI1_Init+0x6c>)
 8003944:	2280      	movs	r2, #128	; 0x80
 8003946:	0092      	lsls	r2, r2, #2
 8003948:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800394a:	4b0e      	ldr	r3, [pc, #56]	; (8003984 <MX_SPI1_Init+0x6c>)
 800394c:	2200      	movs	r2, #0
 800394e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003950:	4b0c      	ldr	r3, [pc, #48]	; (8003984 <MX_SPI1_Init+0x6c>)
 8003952:	2200      	movs	r2, #0
 8003954:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003956:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <MX_SPI1_Init+0x6c>)
 8003958:	2200      	movs	r2, #0
 800395a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800395c:	4b09      	ldr	r3, [pc, #36]	; (8003984 <MX_SPI1_Init+0x6c>)
 800395e:	2200      	movs	r2, #0
 8003960:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003962:	4b08      	ldr	r3, [pc, #32]	; (8003984 <MX_SPI1_Init+0x6c>)
 8003964:	2207      	movs	r2, #7
 8003966:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003968:	4b06      	ldr	r3, [pc, #24]	; (8003984 <MX_SPI1_Init+0x6c>)
 800396a:	0018      	movs	r0, r3
 800396c:	f005 fd66 	bl	800943c <HAL_SPI_Init>
 8003970:	1e03      	subs	r3, r0, #0
 8003972:	d001      	beq.n	8003978 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003974:	f000 faea 	bl	8003f4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  hspi1.hdmatx = &hdma_spi1_tx;
 8003978:	4b02      	ldr	r3, [pc, #8]	; (8003984 <MX_SPI1_Init+0x6c>)
 800397a:	4a04      	ldr	r2, [pc, #16]	; (800398c <MX_SPI1_Init+0x74>)
 800397c:	649a      	str	r2, [r3, #72]	; 0x48
  /* USER CODE END SPI1_Init 2 */

}
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	2000022c 	.word	0x2000022c
 8003988:	40013000 	.word	0x40013000
 800398c:	2000031c 	.word	0x2000031c

08003990 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b08a      	sub	sp, #40	; 0x28
 8003994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003996:	2318      	movs	r3, #24
 8003998:	18fb      	adds	r3, r7, r3
 800399a:	0018      	movs	r0, r3
 800399c:	2310      	movs	r3, #16
 800399e:	001a      	movs	r2, r3
 80039a0:	2100      	movs	r1, #0
 80039a2:	f007 f930 	bl	800ac06 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039a6:	2310      	movs	r3, #16
 80039a8:	18fb      	adds	r3, r7, r3
 80039aa:	0018      	movs	r0, r3
 80039ac:	2308      	movs	r3, #8
 80039ae:	001a      	movs	r2, r3
 80039b0:	2100      	movs	r1, #0
 80039b2:	f007 f928 	bl	800ac06 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039b6:	003b      	movs	r3, r7
 80039b8:	0018      	movs	r0, r3
 80039ba:	2310      	movs	r3, #16
 80039bc:	001a      	movs	r2, r3
 80039be:	2100      	movs	r1, #0
 80039c0:	f007 f921 	bl	800ac06 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80039c4:	4b43      	ldr	r3, [pc, #268]	; (8003ad4 <MX_TIM2_Init+0x144>)
 80039c6:	2280      	movs	r2, #128	; 0x80
 80039c8:	05d2      	lsls	r2, r2, #23
 80039ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80039cc:	4b41      	ldr	r3, [pc, #260]	; (8003ad4 <MX_TIM2_Init+0x144>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039d2:	4b40      	ldr	r3, [pc, #256]	; (8003ad4 <MX_TIM2_Init+0x144>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0x3FFF;
 80039d8:	4b3e      	ldr	r3, [pc, #248]	; (8003ad4 <MX_TIM2_Init+0x144>)
 80039da:	4a3f      	ldr	r2, [pc, #252]	; (8003ad8 <MX_TIM2_Init+0x148>)
 80039dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039de:	4b3d      	ldr	r3, [pc, #244]	; (8003ad4 <MX_TIM2_Init+0x144>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039e4:	4b3b      	ldr	r3, [pc, #236]	; (8003ad4 <MX_TIM2_Init+0x144>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80039ea:	4b3a      	ldr	r3, [pc, #232]	; (8003ad4 <MX_TIM2_Init+0x144>)
 80039ec:	0018      	movs	r0, r3
 80039ee:	f006 f9eb 	bl	8009dc8 <HAL_TIM_Base_Init>
 80039f2:	1e03      	subs	r3, r0, #0
 80039f4:	d001      	beq.n	80039fa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80039f6:	f000 faa9 	bl	8003f4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80039fa:	2118      	movs	r1, #24
 80039fc:	187b      	adds	r3, r7, r1
 80039fe:	2280      	movs	r2, #128	; 0x80
 8003a00:	0192      	lsls	r2, r2, #6
 8003a02:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8003a04:	187b      	adds	r3, r7, r1
 8003a06:	2200      	movs	r2, #0
 8003a08:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8003a0a:	187b      	adds	r3, r7, r1
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8003a10:	187b      	adds	r3, r7, r1
 8003a12:	2200      	movs	r2, #0
 8003a14:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003a16:	187a      	adds	r2, r7, r1
 8003a18:	4b2e      	ldr	r3, [pc, #184]	; (8003ad4 <MX_TIM2_Init+0x144>)
 8003a1a:	0011      	movs	r1, r2
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	f006 fd5f 	bl	800a4e0 <HAL_TIM_ConfigClockSource>
 8003a22:	1e03      	subs	r3, r0, #0
 8003a24:	d001      	beq.n	8003a2a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003a26:	f000 fa91 	bl	8003f4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003a2a:	4b2a      	ldr	r3, [pc, #168]	; (8003ad4 <MX_TIM2_Init+0x144>)
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	f006 fb35 	bl	800a09c <HAL_TIM_PWM_Init>
 8003a32:	1e03      	subs	r3, r0, #0
 8003a34:	d001      	beq.n	8003a3a <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8003a36:	f000 fa89 	bl	8003f4c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8003a3a:	4b26      	ldr	r3, [pc, #152]	; (8003ad4 <MX_TIM2_Init+0x144>)
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f006 fa55 	bl	8009eec <HAL_TIM_OC_Init>
 8003a42:	1e03      	subs	r3, r0, #0
 8003a44:	d001      	beq.n	8003a4a <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8003a46:	f000 fa81 	bl	8003f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a4a:	2110      	movs	r1, #16
 8003a4c:	187b      	adds	r3, r7, r1
 8003a4e:	2200      	movs	r2, #0
 8003a50:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a52:	187b      	adds	r3, r7, r1
 8003a54:	2200      	movs	r2, #0
 8003a56:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a58:	187a      	adds	r2, r7, r1
 8003a5a:	4b1e      	ldr	r3, [pc, #120]	; (8003ad4 <MX_TIM2_Init+0x144>)
 8003a5c:	0011      	movs	r1, r2
 8003a5e:	0018      	movs	r0, r3
 8003a60:	f007 f833 	bl	800aaca <HAL_TIMEx_MasterConfigSynchronization>
 8003a64:	1e03      	subs	r3, r0, #0
 8003a66:	d001      	beq.n	8003a6c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8003a68:	f000 fa70 	bl	8003f4c <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim2, TIM2_ETR_LSE) != HAL_OK)
 8003a6c:	4b19      	ldr	r3, [pc, #100]	; (8003ad4 <MX_TIM2_Init+0x144>)
 8003a6e:	2105      	movs	r1, #5
 8003a70:	0018      	movs	r0, r3
 8003a72:	f007 f86d 	bl	800ab50 <HAL_TIMEx_RemapConfig>
 8003a76:	1e03      	subs	r3, r0, #0
 8003a78:	d001      	beq.n	8003a7e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8003a7a:	f000 fa67 	bl	8003f4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a7e:	003b      	movs	r3, r7
 8003a80:	2260      	movs	r2, #96	; 0x60
 8003a82:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003a84:	003b      	movs	r3, r7
 8003a86:	2200      	movs	r2, #0
 8003a88:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a8a:	003b      	movs	r3, r7
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a90:	003b      	movs	r3, r7
 8003a92:	2200      	movs	r2, #0
 8003a94:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a96:	0039      	movs	r1, r7
 8003a98:	4b0e      	ldr	r3, [pc, #56]	; (8003ad4 <MX_TIM2_Init+0x144>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	f006 fc67 	bl	800a370 <HAL_TIM_PWM_ConfigChannel>
 8003aa2:	1e03      	subs	r3, r0, #0
 8003aa4:	d001      	beq.n	8003aaa <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8003aa6:	f000 fa51 	bl	8003f4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003aaa:	003b      	movs	r3, r7
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ab0:	0039      	movs	r1, r7
 8003ab2:	4b08      	ldr	r3, [pc, #32]	; (8003ad4 <MX_TIM2_Init+0x144>)
 8003ab4:	2204      	movs	r2, #4
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	f006 fc0c 	bl	800a2d4 <HAL_TIM_OC_ConfigChannel>
 8003abc:	1e03      	subs	r3, r0, #0
 8003abe:	d001      	beq.n	8003ac4 <MX_TIM2_Init+0x134>
  {
    Error_Handler();
 8003ac0:	f000 fa44 	bl	8003f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003ac4:	4b03      	ldr	r3, [pc, #12]	; (8003ad4 <MX_TIM2_Init+0x144>)
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f000 fbce 	bl	8004268 <HAL_TIM_MspPostInit>

}
 8003acc:	46c0      	nop			; (mov r8, r8)
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b00a      	add	sp, #40	; 0x28
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	20000284 	.word	0x20000284
 8003ad8:	00003fff 	.word	0x00003fff

08003adc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ae2:	003b      	movs	r3, r7
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	2308      	movs	r3, #8
 8003ae8:	001a      	movs	r2, r3
 8003aea:	2100      	movs	r1, #0
 8003aec:	f007 f88b 	bl	800ac06 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003af0:	4b15      	ldr	r3, [pc, #84]	; (8003b48 <MX_TIM6_Init+0x6c>)
 8003af2:	4a16      	ldr	r2, [pc, #88]	; (8003b4c <MX_TIM6_Init+0x70>)
 8003af4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0x40;
 8003af6:	4b14      	ldr	r3, [pc, #80]	; (8003b48 <MX_TIM6_Init+0x6c>)
 8003af8:	2240      	movs	r2, #64	; 0x40
 8003afa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003afc:	4b12      	ldr	r3, [pc, #72]	; (8003b48 <MX_TIM6_Init+0x6c>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8003b02:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <MX_TIM6_Init+0x6c>)
 8003b04:	4a12      	ldr	r2, [pc, #72]	; (8003b50 <MX_TIM6_Init+0x74>)
 8003b06:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b08:	4b0f      	ldr	r3, [pc, #60]	; (8003b48 <MX_TIM6_Init+0x6c>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003b0e:	4b0e      	ldr	r3, [pc, #56]	; (8003b48 <MX_TIM6_Init+0x6c>)
 8003b10:	0018      	movs	r0, r3
 8003b12:	f006 f959 	bl	8009dc8 <HAL_TIM_Base_Init>
 8003b16:	1e03      	subs	r3, r0, #0
 8003b18:	d001      	beq.n	8003b1e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003b1a:	f000 fa17 	bl	8003f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b1e:	003b      	movs	r3, r7
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b24:	003b      	movs	r3, r7
 8003b26:	2200      	movs	r2, #0
 8003b28:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003b2a:	003a      	movs	r2, r7
 8003b2c:	4b06      	ldr	r3, [pc, #24]	; (8003b48 <MX_TIM6_Init+0x6c>)
 8003b2e:	0011      	movs	r1, r2
 8003b30:	0018      	movs	r0, r3
 8003b32:	f006 ffca 	bl	800aaca <HAL_TIMEx_MasterConfigSynchronization>
 8003b36:	1e03      	subs	r3, r0, #0
 8003b38:	d001      	beq.n	8003b3e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8003b3a:	f000 fa07 	bl	8003f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	46bd      	mov	sp, r7
 8003b42:	b002      	add	sp, #8
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	20000154 	.word	0x20000154
 8003b4c:	40001000 	.word	0x40001000
 8003b50:	0000ffff 	.word	0x0000ffff

08003b54 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08a      	sub	sp, #40	; 0x28
 8003b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b5a:	2318      	movs	r3, #24
 8003b5c:	18fb      	adds	r3, r7, r3
 8003b5e:	0018      	movs	r0, r3
 8003b60:	2310      	movs	r3, #16
 8003b62:	001a      	movs	r2, r3
 8003b64:	2100      	movs	r1, #0
 8003b66:	f007 f84e 	bl	800ac06 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b6a:	2310      	movs	r3, #16
 8003b6c:	18fb      	adds	r3, r7, r3
 8003b6e:	0018      	movs	r0, r3
 8003b70:	2308      	movs	r3, #8
 8003b72:	001a      	movs	r2, r3
 8003b74:	2100      	movs	r1, #0
 8003b76:	f007 f846 	bl	800ac06 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b7a:	003b      	movs	r3, r7
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	2310      	movs	r3, #16
 8003b80:	001a      	movs	r2, r3
 8003b82:	2100      	movs	r1, #0
 8003b84:	f007 f83f 	bl	800ac06 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8003b88:	4b3b      	ldr	r3, [pc, #236]	; (8003c78 <MX_TIM21_Init+0x124>)
 8003b8a:	4a3c      	ldr	r2, [pc, #240]	; (8003c7c <MX_TIM21_Init+0x128>)
 8003b8c:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 8003b8e:	4b3a      	ldr	r3, [pc, #232]	; (8003c78 <MX_TIM21_Init+0x124>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b94:	4b38      	ldr	r3, [pc, #224]	; (8003c78 <MX_TIM21_Init+0x124>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 0x7FFF;
 8003b9a:	4b37      	ldr	r3, [pc, #220]	; (8003c78 <MX_TIM21_Init+0x124>)
 8003b9c:	4a38      	ldr	r2, [pc, #224]	; (8003c80 <MX_TIM21_Init+0x12c>)
 8003b9e:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ba0:	4b35      	ldr	r3, [pc, #212]	; (8003c78 <MX_TIM21_Init+0x124>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ba6:	4b34      	ldr	r3, [pc, #208]	; (8003c78 <MX_TIM21_Init+0x124>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8003bac:	4b32      	ldr	r3, [pc, #200]	; (8003c78 <MX_TIM21_Init+0x124>)
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f006 f90a 	bl	8009dc8 <HAL_TIM_Base_Init>
 8003bb4:	1e03      	subs	r3, r0, #0
 8003bb6:	d001      	beq.n	8003bbc <MX_TIM21_Init+0x68>
  {
    Error_Handler();
 8003bb8:	f000 f9c8 	bl	8003f4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8003bbc:	2118      	movs	r1, #24
 8003bbe:	187b      	adds	r3, r7, r1
 8003bc0:	2280      	movs	r2, #128	; 0x80
 8003bc2:	0192      	lsls	r2, r2, #6
 8003bc4:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8003bc6:	187b      	adds	r3, r7, r1
 8003bc8:	2200      	movs	r2, #0
 8003bca:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8003bcc:	187b      	adds	r3, r7, r1
 8003bce:	2200      	movs	r2, #0
 8003bd0:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8003bd2:	187b      	adds	r3, r7, r1
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8003bd8:	187a      	adds	r2, r7, r1
 8003bda:	4b27      	ldr	r3, [pc, #156]	; (8003c78 <MX_TIM21_Init+0x124>)
 8003bdc:	0011      	movs	r1, r2
 8003bde:	0018      	movs	r0, r3
 8003be0:	f006 fc7e 	bl	800a4e0 <HAL_TIM_ConfigClockSource>
 8003be4:	1e03      	subs	r3, r0, #0
 8003be6:	d001      	beq.n	8003bec <MX_TIM21_Init+0x98>
  {
    Error_Handler();
 8003be8:	f000 f9b0 	bl	8003f4c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 8003bec:	4b22      	ldr	r3, [pc, #136]	; (8003c78 <MX_TIM21_Init+0x124>)
 8003bee:	0018      	movs	r0, r3
 8003bf0:	f006 f97c 	bl	8009eec <HAL_TIM_OC_Init>
 8003bf4:	1e03      	subs	r3, r0, #0
 8003bf6:	d001      	beq.n	8003bfc <MX_TIM21_Init+0xa8>
  {
    Error_Handler();
 8003bf8:	f000 f9a8 	bl	8003f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bfc:	2110      	movs	r1, #16
 8003bfe:	187b      	adds	r3, r7, r1
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c04:	187b      	adds	r3, r7, r1
 8003c06:	2200      	movs	r2, #0
 8003c08:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8003c0a:	187a      	adds	r2, r7, r1
 8003c0c:	4b1a      	ldr	r3, [pc, #104]	; (8003c78 <MX_TIM21_Init+0x124>)
 8003c0e:	0011      	movs	r1, r2
 8003c10:	0018      	movs	r0, r3
 8003c12:	f006 ff5a 	bl	800aaca <HAL_TIMEx_MasterConfigSynchronization>
 8003c16:	1e03      	subs	r3, r0, #0
 8003c18:	d001      	beq.n	8003c1e <MX_TIM21_Init+0xca>
  {
    Error_Handler();
 8003c1a:	f000 f997 	bl	8003f4c <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim21, TIM21_ETR_LSE) != HAL_OK)
 8003c1e:	4b16      	ldr	r3, [pc, #88]	; (8003c78 <MX_TIM21_Init+0x124>)
 8003c20:	2103      	movs	r1, #3
 8003c22:	0018      	movs	r0, r3
 8003c24:	f006 ff94 	bl	800ab50 <HAL_TIMEx_RemapConfig>
 8003c28:	1e03      	subs	r3, r0, #0
 8003c2a:	d001      	beq.n	8003c30 <MX_TIM21_Init+0xdc>
  {
    Error_Handler();
 8003c2c:	f000 f98e 	bl	8003f4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003c30:	003b      	movs	r3, r7
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003c36:	003b      	movs	r3, r7
 8003c38:	2200      	movs	r2, #0
 8003c3a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c3c:	003b      	movs	r3, r7
 8003c3e:	2200      	movs	r2, #0
 8003c40:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c42:	003b      	movs	r3, r7
 8003c44:	2200      	movs	r2, #0
 8003c46:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c48:	0039      	movs	r1, r7
 8003c4a:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <MX_TIM21_Init+0x124>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	0018      	movs	r0, r3
 8003c50:	f006 fb40 	bl	800a2d4 <HAL_TIM_OC_ConfigChannel>
 8003c54:	1e03      	subs	r3, r0, #0
 8003c56:	d001      	beq.n	8003c5c <MX_TIM21_Init+0x108>
  {
    Error_Handler();
 8003c58:	f000 f978 	bl	8003f4c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c5c:	0039      	movs	r1, r7
 8003c5e:	4b06      	ldr	r3, [pc, #24]	; (8003c78 <MX_TIM21_Init+0x124>)
 8003c60:	2204      	movs	r2, #4
 8003c62:	0018      	movs	r0, r3
 8003c64:	f006 fb36 	bl	800a2d4 <HAL_TIM_OC_ConfigChannel>
 8003c68:	1e03      	subs	r3, r0, #0
 8003c6a:	d001      	beq.n	8003c70 <MX_TIM21_Init+0x11c>
  {
    Error_Handler();
 8003c6c:	f000 f96e 	bl	8003f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8003c70:	46c0      	nop			; (mov r8, r8)
 8003c72:	46bd      	mov	sp, r7
 8003c74:	b00a      	add	sp, #40	; 0x28
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	20000364 	.word	0x20000364
 8003c7c:	40010800 	.word	0x40010800
 8003c80:	00007fff 	.word	0x00007fff

08003c84 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b08a      	sub	sp, #40	; 0x28
 8003c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c8a:	2318      	movs	r3, #24
 8003c8c:	18fb      	adds	r3, r7, r3
 8003c8e:	0018      	movs	r0, r3
 8003c90:	2310      	movs	r3, #16
 8003c92:	001a      	movs	r2, r3
 8003c94:	2100      	movs	r1, #0
 8003c96:	f006 ffb6 	bl	800ac06 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c9a:	2310      	movs	r3, #16
 8003c9c:	18fb      	adds	r3, r7, r3
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	2308      	movs	r3, #8
 8003ca2:	001a      	movs	r2, r3
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	f006 ffae 	bl	800ac06 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003caa:	003b      	movs	r3, r7
 8003cac:	0018      	movs	r0, r3
 8003cae:	2310      	movs	r3, #16
 8003cb0:	001a      	movs	r2, r3
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	f006 ffa7 	bl	800ac06 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8003cb8:	4b37      	ldr	r3, [pc, #220]	; (8003d98 <MX_TIM22_Init+0x114>)
 8003cba:	4a38      	ldr	r2, [pc, #224]	; (8003d9c <MX_TIM22_Init+0x118>)
 8003cbc:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0x400;
 8003cbe:	4b36      	ldr	r3, [pc, #216]	; (8003d98 <MX_TIM22_Init+0x114>)
 8003cc0:	2280      	movs	r2, #128	; 0x80
 8003cc2:	00d2      	lsls	r2, r2, #3
 8003cc4:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cc6:	4b34      	ldr	r3, [pc, #208]	; (8003d98 <MX_TIM22_Init+0x114>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 1919;
 8003ccc:	4b32      	ldr	r3, [pc, #200]	; (8003d98 <MX_TIM22_Init+0x114>)
 8003cce:	4a34      	ldr	r2, [pc, #208]	; (8003da0 <MX_TIM22_Init+0x11c>)
 8003cd0:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cd2:	4b31      	ldr	r3, [pc, #196]	; (8003d98 <MX_TIM22_Init+0x114>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cd8:	4b2f      	ldr	r3, [pc, #188]	; (8003d98 <MX_TIM22_Init+0x114>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 8003cde:	4b2e      	ldr	r3, [pc, #184]	; (8003d98 <MX_TIM22_Init+0x114>)
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	f006 f871 	bl	8009dc8 <HAL_TIM_Base_Init>
 8003ce6:	1e03      	subs	r3, r0, #0
 8003ce8:	d001      	beq.n	8003cee <MX_TIM22_Init+0x6a>
  {
    Error_Handler();
 8003cea:	f000 f92f 	bl	8003f4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8003cee:	2118      	movs	r1, #24
 8003cf0:	187b      	adds	r3, r7, r1
 8003cf2:	2280      	movs	r2, #128	; 0x80
 8003cf4:	0192      	lsls	r2, r2, #6
 8003cf6:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8003cf8:	187b      	adds	r3, r7, r1
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8003cfe:	187b      	adds	r3, r7, r1
 8003d00:	2200      	movs	r2, #0
 8003d02:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8003d04:	187b      	adds	r3, r7, r1
 8003d06:	2200      	movs	r2, #0
 8003d08:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 8003d0a:	187a      	adds	r2, r7, r1
 8003d0c:	4b22      	ldr	r3, [pc, #136]	; (8003d98 <MX_TIM22_Init+0x114>)
 8003d0e:	0011      	movs	r1, r2
 8003d10:	0018      	movs	r0, r3
 8003d12:	f006 fbe5 	bl	800a4e0 <HAL_TIM_ConfigClockSource>
 8003d16:	1e03      	subs	r3, r0, #0
 8003d18:	d001      	beq.n	8003d1e <MX_TIM22_Init+0x9a>
  {
    Error_Handler();
 8003d1a:	f000 f917 	bl	8003f4c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim22) != HAL_OK)
 8003d1e:	4b1e      	ldr	r3, [pc, #120]	; (8003d98 <MX_TIM22_Init+0x114>)
 8003d20:	0018      	movs	r0, r3
 8003d22:	f006 f8e3 	bl	8009eec <HAL_TIM_OC_Init>
 8003d26:	1e03      	subs	r3, r0, #0
 8003d28:	d001      	beq.n	8003d2e <MX_TIM22_Init+0xaa>
  {
    Error_Handler();
 8003d2a:	f000 f90f 	bl	8003f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d2e:	2110      	movs	r1, #16
 8003d30:	187b      	adds	r3, r7, r1
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d36:	187b      	adds	r3, r7, r1
 8003d38:	2200      	movs	r2, #0
 8003d3a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8003d3c:	187a      	adds	r2, r7, r1
 8003d3e:	4b16      	ldr	r3, [pc, #88]	; (8003d98 <MX_TIM22_Init+0x114>)
 8003d40:	0011      	movs	r1, r2
 8003d42:	0018      	movs	r0, r3
 8003d44:	f006 fec1 	bl	800aaca <HAL_TIMEx_MasterConfigSynchronization>
 8003d48:	1e03      	subs	r3, r0, #0
 8003d4a:	d001      	beq.n	8003d50 <MX_TIM22_Init+0xcc>
  {
    Error_Handler();
 8003d4c:	f000 f8fe 	bl	8003f4c <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim22, TIM22_ETR_LSE) != HAL_OK)
 8003d50:	4b11      	ldr	r3, [pc, #68]	; (8003d98 <MX_TIM22_Init+0x114>)
 8003d52:	2103      	movs	r1, #3
 8003d54:	0018      	movs	r0, r3
 8003d56:	f006 fefb 	bl	800ab50 <HAL_TIMEx_RemapConfig>
 8003d5a:	1e03      	subs	r3, r0, #0
 8003d5c:	d001      	beq.n	8003d62 <MX_TIM22_Init+0xde>
  {
    Error_Handler();
 8003d5e:	f000 f8f5 	bl	8003f4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003d62:	003b      	movs	r3, r7
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003d68:	003b      	movs	r3, r7
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d6e:	003b      	movs	r3, r7
 8003d70:	2200      	movs	r2, #0
 8003d72:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d74:	003b      	movs	r3, r7
 8003d76:	2200      	movs	r2, #0
 8003d78:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d7a:	0039      	movs	r1, r7
 8003d7c:	4b06      	ldr	r3, [pc, #24]	; (8003d98 <MX_TIM22_Init+0x114>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	0018      	movs	r0, r3
 8003d82:	f006 faa7 	bl	800a2d4 <HAL_TIM_OC_ConfigChannel>
 8003d86:	1e03      	subs	r3, r0, #0
 8003d88:	d001      	beq.n	8003d8e <MX_TIM22_Init+0x10a>
  {
    Error_Handler();
 8003d8a:	f000 f8df 	bl	8003f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */

}
 8003d8e:	46c0      	nop			; (mov r8, r8)
 8003d90:	46bd      	mov	sp, r7
 8003d92:	b00a      	add	sp, #40	; 0x28
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	2000019c 	.word	0x2000019c
 8003d9c:	40011400 	.word	0x40011400
 8003da0:	0000077f 	.word	0x0000077f

08003da4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003daa:	4b0c      	ldr	r3, [pc, #48]	; (8003ddc <MX_DMA_Init+0x38>)
 8003dac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dae:	4b0b      	ldr	r3, [pc, #44]	; (8003ddc <MX_DMA_Init+0x38>)
 8003db0:	2101      	movs	r1, #1
 8003db2:	430a      	orrs	r2, r1
 8003db4:	631a      	str	r2, [r3, #48]	; 0x30
 8003db6:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <MX_DMA_Init+0x38>)
 8003db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dba:	2201      	movs	r2, #1
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	607b      	str	r3, [r7, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	200a      	movs	r0, #10
 8003dc8:	f003 f902 	bl	8006fd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8003dcc:	200a      	movs	r0, #10
 8003dce:	f003 f914 	bl	8006ffa <HAL_NVIC_EnableIRQ>

}
 8003dd2:	46c0      	nop			; (mov r8, r8)
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	b002      	add	sp, #8
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	46c0      	nop			; (mov r8, r8)
 8003ddc:	40021000 	.word	0x40021000

08003de0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003de0:	b590      	push	{r4, r7, lr}
 8003de2:	b089      	sub	sp, #36	; 0x24
 8003de4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de6:	240c      	movs	r4, #12
 8003de8:	193b      	adds	r3, r7, r4
 8003dea:	0018      	movs	r0, r3
 8003dec:	2314      	movs	r3, #20
 8003dee:	001a      	movs	r2, r3
 8003df0:	2100      	movs	r1, #0
 8003df2:	f006 ff08 	bl	800ac06 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003df6:	4b50      	ldr	r3, [pc, #320]	; (8003f38 <MX_GPIO_Init+0x158>)
 8003df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfa:	4b4f      	ldr	r3, [pc, #316]	; (8003f38 <MX_GPIO_Init+0x158>)
 8003dfc:	2104      	movs	r1, #4
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e02:	4b4d      	ldr	r3, [pc, #308]	; (8003f38 <MX_GPIO_Init+0x158>)
 8003e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e06:	2204      	movs	r2, #4
 8003e08:	4013      	ands	r3, r2
 8003e0a:	60bb      	str	r3, [r7, #8]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e0e:	4b4a      	ldr	r3, [pc, #296]	; (8003f38 <MX_GPIO_Init+0x158>)
 8003e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e12:	4b49      	ldr	r3, [pc, #292]	; (8003f38 <MX_GPIO_Init+0x158>)
 8003e14:	2101      	movs	r1, #1
 8003e16:	430a      	orrs	r2, r1
 8003e18:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e1a:	4b47      	ldr	r3, [pc, #284]	; (8003f38 <MX_GPIO_Init+0x158>)
 8003e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1e:	2201      	movs	r2, #1
 8003e20:	4013      	ands	r3, r2
 8003e22:	607b      	str	r3, [r7, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e26:	4b44      	ldr	r3, [pc, #272]	; (8003f38 <MX_GPIO_Init+0x158>)
 8003e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e2a:	4b43      	ldr	r3, [pc, #268]	; (8003f38 <MX_GPIO_Init+0x158>)
 8003e2c:	2102      	movs	r1, #2
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e32:	4b41      	ldr	r3, [pc, #260]	; (8003f38 <MX_GPIO_Init+0x158>)
 8003e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e36:	2202      	movs	r2, #2
 8003e38:	4013      	ands	r3, r2
 8003e3a:	603b      	str	r3, [r7, #0]
 8003e3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8003e3e:	4b3f      	ldr	r3, [pc, #252]	; (8003f3c <MX_GPIO_Init+0x15c>)
 8003e40:	2201      	movs	r2, #1
 8003e42:	2110      	movs	r1, #16
 8003e44:	0018      	movs	r0, r3
 8003e46:	f003 fc1e 	bl	8007686 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8003e4a:	4b3c      	ldr	r3, [pc, #240]	; (8003f3c <MX_GPIO_Init+0x15c>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	21a0      	movs	r1, #160	; 0xa0
 8003e50:	0018      	movs	r0, r3
 8003e52:	f003 fc18 	bl	8007686 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4 
 8003e56:	4b3a      	ldr	r3, [pc, #232]	; (8003f40 <MX_GPIO_Init+0x160>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	217b      	movs	r1, #123	; 0x7b
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	f003 fc12 	bl	8007686 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8003e62:	2380      	movs	r3, #128	; 0x80
 8003e64:	00d9      	lsls	r1, r3, #3
 8003e66:	23a0      	movs	r3, #160	; 0xa0
 8003e68:	05db      	lsls	r3, r3, #23
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f003 fc0a 	bl	8007686 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC4 PC5 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8003e72:	0021      	movs	r1, r4
 8003e74:	187b      	adds	r3, r7, r1
 8003e76:	22b0      	movs	r2, #176	; 0xb0
 8003e78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e7a:	187b      	adds	r3, r7, r1
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e80:	187b      	adds	r3, r7, r1
 8003e82:	2200      	movs	r2, #0
 8003e84:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e86:	187b      	adds	r3, r7, r1
 8003e88:	2200      	movs	r2, #0
 8003e8a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e8c:	000c      	movs	r4, r1
 8003e8e:	187b      	adds	r3, r7, r1
 8003e90:	4a2a      	ldr	r2, [pc, #168]	; (8003f3c <MX_GPIO_Init+0x15c>)
 8003e92:	0019      	movs	r1, r3
 8003e94:	0010      	movs	r0, r2
 8003e96:	f003 fa5b 	bl	8007350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4 
                           PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4 
 8003e9a:	0021      	movs	r1, r4
 8003e9c:	187b      	adds	r3, r7, r1
 8003e9e:	227b      	movs	r2, #123	; 0x7b
 8003ea0:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ea2:	187b      	adds	r3, r7, r1
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea8:	187b      	adds	r3, r7, r1
 8003eaa:	2200      	movs	r2, #0
 8003eac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eae:	187b      	adds	r3, r7, r1
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eb4:	000c      	movs	r4, r1
 8003eb6:	187b      	adds	r3, r7, r1
 8003eb8:	4a21      	ldr	r2, [pc, #132]	; (8003f40 <MX_GPIO_Init+0x160>)
 8003eba:	0019      	movs	r1, r3
 8003ebc:	0010      	movs	r0, r2
 8003ebe:	f003 fa47 	bl	8007350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003ec2:	0021      	movs	r1, r4
 8003ec4:	187b      	adds	r3, r7, r1
 8003ec6:	4a1f      	ldr	r2, [pc, #124]	; (8003f44 <MX_GPIO_Init+0x164>)
 8003ec8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003eca:	187b      	adds	r3, r7, r1
 8003ecc:	4a1e      	ldr	r2, [pc, #120]	; (8003f48 <MX_GPIO_Init+0x168>)
 8003ece:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003ed0:	187b      	adds	r3, r7, r1
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ed6:	000c      	movs	r4, r1
 8003ed8:	187b      	adds	r3, r7, r1
 8003eda:	4a19      	ldr	r2, [pc, #100]	; (8003f40 <MX_GPIO_Init+0x160>)
 8003edc:	0019      	movs	r1, r3
 8003ede:	0010      	movs	r0, r2
 8003ee0:	f003 fa36 	bl	8007350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003ee4:	0021      	movs	r1, r4
 8003ee6:	187b      	adds	r3, r7, r1
 8003ee8:	2280      	movs	r2, #128	; 0x80
 8003eea:	00d2      	lsls	r2, r2, #3
 8003eec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003eee:	187b      	adds	r3, r7, r1
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef4:	187b      	adds	r3, r7, r1
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003efa:	187b      	adds	r3, r7, r1
 8003efc:	2200      	movs	r2, #0
 8003efe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f00:	187a      	adds	r2, r7, r1
 8003f02:	23a0      	movs	r3, #160	; 0xa0
 8003f04:	05db      	lsls	r3, r3, #23
 8003f06:	0011      	movs	r1, r2
 8003f08:	0018      	movs	r0, r3
 8003f0a:	f003 fa21 	bl	8007350 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8003f0e:	2200      	movs	r2, #0
 8003f10:	2100      	movs	r1, #0
 8003f12:	2006      	movs	r0, #6
 8003f14:	f003 f85c 	bl	8006fd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8003f18:	2006      	movs	r0, #6
 8003f1a:	f003 f86e 	bl	8006ffa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003f1e:	2200      	movs	r2, #0
 8003f20:	2100      	movs	r1, #0
 8003f22:	2007      	movs	r0, #7
 8003f24:	f003 f854 	bl	8006fd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003f28:	2007      	movs	r0, #7
 8003f2a:	f003 f866 	bl	8006ffa <HAL_NVIC_EnableIRQ>

}
 8003f2e:	46c0      	nop			; (mov r8, r8)
 8003f30:	46bd      	mov	sp, r7
 8003f32:	b009      	add	sp, #36	; 0x24
 8003f34:	bd90      	pop	{r4, r7, pc}
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	50000800 	.word	0x50000800
 8003f40:	50000400 	.word	0x50000400
 8003f44:	0000e004 	.word	0x0000e004
 8003f48:	10110000 	.word	0x10110000

08003f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003f50:	46c0      	nop			; (mov r8, r8)
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
	...

08003f58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f5c:	4b07      	ldr	r3, [pc, #28]	; (8003f7c <HAL_MspInit+0x24>)
 8003f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f60:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <HAL_MspInit+0x24>)
 8003f62:	2101      	movs	r1, #1
 8003f64:	430a      	orrs	r2, r1
 8003f66:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f68:	4b04      	ldr	r3, [pc, #16]	; (8003f7c <HAL_MspInit+0x24>)
 8003f6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f6c:	4b03      	ldr	r3, [pc, #12]	; (8003f7c <HAL_MspInit+0x24>)
 8003f6e:	2180      	movs	r1, #128	; 0x80
 8003f70:	0549      	lsls	r1, r1, #21
 8003f72:	430a      	orrs	r2, r1
 8003f74:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40021000 	.word	0x40021000

08003f80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b088      	sub	sp, #32
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f88:	230c      	movs	r3, #12
 8003f8a:	18fb      	adds	r3, r7, r3
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	2314      	movs	r3, #20
 8003f90:	001a      	movs	r2, r3
 8003f92:	2100      	movs	r1, #0
 8003f94:	f006 fe37 	bl	800ac06 <memset>
  if(hadc->Instance==ADC1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a15      	ldr	r2, [pc, #84]	; (8003ff4 <HAL_ADC_MspInit+0x74>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d123      	bne.n	8003fea <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003fa2:	4b15      	ldr	r3, [pc, #84]	; (8003ff8 <HAL_ADC_MspInit+0x78>)
 8003fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fa6:	4b14      	ldr	r3, [pc, #80]	; (8003ff8 <HAL_ADC_MspInit+0x78>)
 8003fa8:	2180      	movs	r1, #128	; 0x80
 8003faa:	0089      	lsls	r1, r1, #2
 8003fac:	430a      	orrs	r2, r1
 8003fae:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fb0:	4b11      	ldr	r3, [pc, #68]	; (8003ff8 <HAL_ADC_MspInit+0x78>)
 8003fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb4:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <HAL_ADC_MspInit+0x78>)
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	62da      	str	r2, [r3, #44]	; 0x2c
 8003fbc:	4b0e      	ldr	r3, [pc, #56]	; (8003ff8 <HAL_ADC_MspInit+0x78>)
 8003fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	60bb      	str	r3, [r7, #8]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA3     ------> ADC_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003fc8:	210c      	movs	r1, #12
 8003fca:	187b      	adds	r3, r7, r1
 8003fcc:	2208      	movs	r2, #8
 8003fce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003fd0:	187b      	adds	r3, r7, r1
 8003fd2:	2203      	movs	r2, #3
 8003fd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd6:	187b      	adds	r3, r7, r1
 8003fd8:	2200      	movs	r2, #0
 8003fda:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fdc:	187a      	adds	r2, r7, r1
 8003fde:	23a0      	movs	r3, #160	; 0xa0
 8003fe0:	05db      	lsls	r3, r3, #23
 8003fe2:	0011      	movs	r1, r2
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	f003 f9b3 	bl	8007350 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003fea:	46c0      	nop			; (mov r8, r8)
 8003fec:	46bd      	mov	sp, r7
 8003fee:	b008      	add	sp, #32
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	46c0      	nop			; (mov r8, r8)
 8003ff4:	40012400 	.word	0x40012400
 8003ff8:	40021000 	.word	0x40021000

08003ffc <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  if(hlptim->Instance==LPTIM1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a0a      	ldr	r2, [pc, #40]	; (8004034 <HAL_LPTIM_MspInit+0x38>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d10e      	bne.n	800402c <HAL_LPTIM_MspInit+0x30>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800400e:	4b0a      	ldr	r3, [pc, #40]	; (8004038 <HAL_LPTIM_MspInit+0x3c>)
 8004010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004012:	4b09      	ldr	r3, [pc, #36]	; (8004038 <HAL_LPTIM_MspInit+0x3c>)
 8004014:	2180      	movs	r1, #128	; 0x80
 8004016:	0609      	lsls	r1, r1, #24
 8004018:	430a      	orrs	r2, r1
 800401a:	639a      	str	r2, [r3, #56]	; 0x38
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 800401c:	2200      	movs	r2, #0
 800401e:	2100      	movs	r1, #0
 8004020:	200d      	movs	r0, #13
 8004022:	f002 ffd5 	bl	8006fd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8004026:	200d      	movs	r0, #13
 8004028:	f002 ffe7 	bl	8006ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 800402c:	46c0      	nop			; (mov r8, r8)
 800402e:	46bd      	mov	sp, r7
 8004030:	b002      	add	sp, #8
 8004032:	bd80      	pop	{r7, pc}
 8004034:	40007c00 	.word	0x40007c00
 8004038:	40021000 	.word	0x40021000

0800403c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b088      	sub	sp, #32
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004044:	230c      	movs	r3, #12
 8004046:	18fb      	adds	r3, r7, r3
 8004048:	0018      	movs	r0, r3
 800404a:	2314      	movs	r3, #20
 800404c:	001a      	movs	r2, r3
 800404e:	2100      	movs	r1, #0
 8004050:	f006 fdd9 	bl	800ac06 <memset>
  if(hrtc->Instance==RTC)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a14      	ldr	r2, [pc, #80]	; (80040ac <HAL_RTC_MspInit+0x70>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d121      	bne.n	80040a2 <HAL_RTC_MspInit+0x66>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800405e:	4b14      	ldr	r3, [pc, #80]	; (80040b0 <HAL_RTC_MspInit+0x74>)
 8004060:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004062:	4b13      	ldr	r3, [pc, #76]	; (80040b0 <HAL_RTC_MspInit+0x74>)
 8004064:	2180      	movs	r1, #128	; 0x80
 8004066:	02c9      	lsls	r1, r1, #11
 8004068:	430a      	orrs	r2, r1
 800406a:	651a      	str	r2, [r3, #80]	; 0x50
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800406c:	4b10      	ldr	r3, [pc, #64]	; (80040b0 <HAL_RTC_MspInit+0x74>)
 800406e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004070:	4b0f      	ldr	r3, [pc, #60]	; (80040b0 <HAL_RTC_MspInit+0x74>)
 8004072:	2104      	movs	r1, #4
 8004074:	430a      	orrs	r2, r1
 8004076:	62da      	str	r2, [r3, #44]	; 0x2c
 8004078:	4b0d      	ldr	r3, [pc, #52]	; (80040b0 <HAL_RTC_MspInit+0x74>)
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	2204      	movs	r2, #4
 800407e:	4013      	ands	r3, r2
 8004080:	60bb      	str	r3, [r7, #8]
 8004082:	68bb      	ldr	r3, [r7, #8]
    /**RTC GPIO Configuration    
    PC13     ------> RTC_OUT_CALIB 
    */
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004084:	230c      	movs	r3, #12
 8004086:	18fb      	adds	r3, r7, r3
 8004088:	4a0a      	ldr	r2, [pc, #40]	; (80040b4 <HAL_RTC_MspInit+0x78>)
 800408a:	0019      	movs	r1, r3
 800408c:	0010      	movs	r0, r2
 800408e:	f003 f95f 	bl	8007350 <HAL_GPIO_Init>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8004092:	2200      	movs	r2, #0
 8004094:	2100      	movs	r1, #0
 8004096:	2002      	movs	r0, #2
 8004098:	f002 ff9a 	bl	8006fd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800409c:	2002      	movs	r0, #2
 800409e:	f002 ffac 	bl	8006ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	46bd      	mov	sp, r7
 80040a6:	b008      	add	sp, #32
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	46c0      	nop			; (mov r8, r8)
 80040ac:	40002800 	.word	0x40002800
 80040b0:	40021000 	.word	0x40021000
 80040b4:	50000800 	.word	0x50000800

080040b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b088      	sub	sp, #32
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040c0:	230c      	movs	r3, #12
 80040c2:	18fb      	adds	r3, r7, r3
 80040c4:	0018      	movs	r0, r3
 80040c6:	2314      	movs	r3, #20
 80040c8:	001a      	movs	r2, r3
 80040ca:	2100      	movs	r1, #0
 80040cc:	f006 fd9b 	bl	800ac06 <memset>
  if(hspi->Instance==SPI1)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a30      	ldr	r2, [pc, #192]	; (8004198 <HAL_SPI_MspInit+0xe0>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d15a      	bne.n	8004190 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80040da:	4b30      	ldr	r3, [pc, #192]	; (800419c <HAL_SPI_MspInit+0xe4>)
 80040dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040de:	4b2f      	ldr	r3, [pc, #188]	; (800419c <HAL_SPI_MspInit+0xe4>)
 80040e0:	2180      	movs	r1, #128	; 0x80
 80040e2:	0149      	lsls	r1, r1, #5
 80040e4:	430a      	orrs	r2, r1
 80040e6:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040e8:	4b2c      	ldr	r3, [pc, #176]	; (800419c <HAL_SPI_MspInit+0xe4>)
 80040ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ec:	4b2b      	ldr	r3, [pc, #172]	; (800419c <HAL_SPI_MspInit+0xe4>)
 80040ee:	2101      	movs	r1, #1
 80040f0:	430a      	orrs	r2, r1
 80040f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80040f4:	4b29      	ldr	r3, [pc, #164]	; (800419c <HAL_SPI_MspInit+0xe4>)
 80040f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f8:	2201      	movs	r2, #1
 80040fa:	4013      	ands	r3, r2
 80040fc:	60bb      	str	r3, [r7, #8]
 80040fe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004100:	210c      	movs	r1, #12
 8004102:	187b      	adds	r3, r7, r1
 8004104:	22a0      	movs	r2, #160	; 0xa0
 8004106:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004108:	187b      	adds	r3, r7, r1
 800410a:	2202      	movs	r2, #2
 800410c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800410e:	187b      	adds	r3, r7, r1
 8004110:	2200      	movs	r2, #0
 8004112:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004114:	187b      	adds	r3, r7, r1
 8004116:	2203      	movs	r2, #3
 8004118:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800411a:	187b      	adds	r3, r7, r1
 800411c:	2200      	movs	r2, #0
 800411e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004120:	187a      	adds	r2, r7, r1
 8004122:	23a0      	movs	r3, #160	; 0xa0
 8004124:	05db      	lsls	r3, r3, #23
 8004126:	0011      	movs	r1, r2
 8004128:	0018      	movs	r0, r3
 800412a:	f003 f911 	bl	8007350 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800412e:	4b1c      	ldr	r3, [pc, #112]	; (80041a0 <HAL_SPI_MspInit+0xe8>)
 8004130:	4a1c      	ldr	r2, [pc, #112]	; (80041a4 <HAL_SPI_MspInit+0xec>)
 8004132:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8004134:	4b1a      	ldr	r3, [pc, #104]	; (80041a0 <HAL_SPI_MspInit+0xe8>)
 8004136:	2201      	movs	r2, #1
 8004138:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800413a:	4b19      	ldr	r3, [pc, #100]	; (80041a0 <HAL_SPI_MspInit+0xe8>)
 800413c:	2210      	movs	r2, #16
 800413e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004140:	4b17      	ldr	r3, [pc, #92]	; (80041a0 <HAL_SPI_MspInit+0xe8>)
 8004142:	2200      	movs	r2, #0
 8004144:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004146:	4b16      	ldr	r3, [pc, #88]	; (80041a0 <HAL_SPI_MspInit+0xe8>)
 8004148:	2280      	movs	r2, #128	; 0x80
 800414a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800414c:	4b14      	ldr	r3, [pc, #80]	; (80041a0 <HAL_SPI_MspInit+0xe8>)
 800414e:	2200      	movs	r2, #0
 8004150:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004152:	4b13      	ldr	r3, [pc, #76]	; (80041a0 <HAL_SPI_MspInit+0xe8>)
 8004154:	2200      	movs	r2, #0
 8004156:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004158:	4b11      	ldr	r3, [pc, #68]	; (80041a0 <HAL_SPI_MspInit+0xe8>)
 800415a:	2200      	movs	r2, #0
 800415c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800415e:	4b10      	ldr	r3, [pc, #64]	; (80041a0 <HAL_SPI_MspInit+0xe8>)
 8004160:	2200      	movs	r2, #0
 8004162:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004164:	4b0e      	ldr	r3, [pc, #56]	; (80041a0 <HAL_SPI_MspInit+0xe8>)
 8004166:	0018      	movs	r0, r3
 8004168:	f002 ff84 	bl	8007074 <HAL_DMA_Init>
 800416c:	1e03      	subs	r3, r0, #0
 800416e:	d001      	beq.n	8004174 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8004170:	f7ff feec 	bl	8003f4c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a0a      	ldr	r2, [pc, #40]	; (80041a0 <HAL_SPI_MspInit+0xe8>)
 8004178:	649a      	str	r2, [r3, #72]	; 0x48
 800417a:	4b09      	ldr	r3, [pc, #36]	; (80041a0 <HAL_SPI_MspInit+0xe8>)
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8004180:	2200      	movs	r2, #0
 8004182:	2100      	movs	r1, #0
 8004184:	2019      	movs	r0, #25
 8004186:	f002 ff23 	bl	8006fd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800418a:	2019      	movs	r0, #25
 800418c:	f002 ff35 	bl	8006ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004190:	46c0      	nop			; (mov r8, r8)
 8004192:	46bd      	mov	sp, r7
 8004194:	b008      	add	sp, #32
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40013000 	.word	0x40013000
 800419c:	40021000 	.word	0x40021000
 80041a0:	2000031c 	.word	0x2000031c
 80041a4:	40020030 	.word	0x40020030

080041a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	2380      	movs	r3, #128	; 0x80
 80041b6:	05db      	lsls	r3, r3, #23
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d10e      	bne.n	80041da <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80041bc:	4b26      	ldr	r3, [pc, #152]	; (8004258 <HAL_TIM_Base_MspInit+0xb0>)
 80041be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041c0:	4b25      	ldr	r3, [pc, #148]	; (8004258 <HAL_TIM_Base_MspInit+0xb0>)
 80041c2:	2101      	movs	r1, #1
 80041c4:	430a      	orrs	r2, r1
 80041c6:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80041c8:	2200      	movs	r2, #0
 80041ca:	2100      	movs	r1, #0
 80041cc:	200f      	movs	r0, #15
 80041ce:	f002 feff 	bl	8006fd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80041d2:	200f      	movs	r0, #15
 80041d4:	f002 ff11 	bl	8006ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 80041d8:	e03a      	b.n	8004250 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM6)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a1f      	ldr	r2, [pc, #124]	; (800425c <HAL_TIM_Base_MspInit+0xb4>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d10e      	bne.n	8004202 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80041e4:	4b1c      	ldr	r3, [pc, #112]	; (8004258 <HAL_TIM_Base_MspInit+0xb0>)
 80041e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041e8:	4b1b      	ldr	r3, [pc, #108]	; (8004258 <HAL_TIM_Base_MspInit+0xb0>)
 80041ea:	2110      	movs	r1, #16
 80041ec:	430a      	orrs	r2, r1
 80041ee:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80041f0:	2200      	movs	r2, #0
 80041f2:	2100      	movs	r1, #0
 80041f4:	2011      	movs	r0, #17
 80041f6:	f002 feeb 	bl	8006fd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80041fa:	2011      	movs	r0, #17
 80041fc:	f002 fefd 	bl	8006ffa <HAL_NVIC_EnableIRQ>
}
 8004200:	e026      	b.n	8004250 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM21)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a16      	ldr	r2, [pc, #88]	; (8004260 <HAL_TIM_Base_MspInit+0xb8>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d10e      	bne.n	800422a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM21_CLK_ENABLE();
 800420c:	4b12      	ldr	r3, [pc, #72]	; (8004258 <HAL_TIM_Base_MspInit+0xb0>)
 800420e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004210:	4b11      	ldr	r3, [pc, #68]	; (8004258 <HAL_TIM_Base_MspInit+0xb0>)
 8004212:	2104      	movs	r1, #4
 8004214:	430a      	orrs	r2, r1
 8004216:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8004218:	2200      	movs	r2, #0
 800421a:	2100      	movs	r1, #0
 800421c:	2014      	movs	r0, #20
 800421e:	f002 fed7 	bl	8006fd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8004222:	2014      	movs	r0, #20
 8004224:	f002 fee9 	bl	8006ffa <HAL_NVIC_EnableIRQ>
}
 8004228:	e012      	b.n	8004250 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM22)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a0d      	ldr	r2, [pc, #52]	; (8004264 <HAL_TIM_Base_MspInit+0xbc>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d10d      	bne.n	8004250 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8004234:	4b08      	ldr	r3, [pc, #32]	; (8004258 <HAL_TIM_Base_MspInit+0xb0>)
 8004236:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004238:	4b07      	ldr	r3, [pc, #28]	; (8004258 <HAL_TIM_Base_MspInit+0xb0>)
 800423a:	2120      	movs	r1, #32
 800423c:	430a      	orrs	r2, r1
 800423e:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM22_IRQn, 0, 0);
 8004240:	2200      	movs	r2, #0
 8004242:	2100      	movs	r1, #0
 8004244:	2016      	movs	r0, #22
 8004246:	f002 fec3 	bl	8006fd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
 800424a:	2016      	movs	r0, #22
 800424c:	f002 fed5 	bl	8006ffa <HAL_NVIC_EnableIRQ>
}
 8004250:	46c0      	nop			; (mov r8, r8)
 8004252:	46bd      	mov	sp, r7
 8004254:	b002      	add	sp, #8
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40021000 	.word	0x40021000
 800425c:	40001000 	.word	0x40001000
 8004260:	40010800 	.word	0x40010800
 8004264:	40011400 	.word	0x40011400

08004268 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b088      	sub	sp, #32
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004270:	230c      	movs	r3, #12
 8004272:	18fb      	adds	r3, r7, r3
 8004274:	0018      	movs	r0, r3
 8004276:	2314      	movs	r3, #20
 8004278:	001a      	movs	r2, r3
 800427a:	2100      	movs	r1, #0
 800427c:	f006 fcc3 	bl	800ac06 <memset>
  if(htim->Instance==TIM2)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	2380      	movs	r3, #128	; 0x80
 8004286:	05db      	lsls	r3, r3, #23
 8004288:	429a      	cmp	r2, r3
 800428a:	d123      	bne.n	80042d4 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800428c:	4b13      	ldr	r3, [pc, #76]	; (80042dc <HAL_TIM_MspPostInit+0x74>)
 800428e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004290:	4b12      	ldr	r3, [pc, #72]	; (80042dc <HAL_TIM_MspPostInit+0x74>)
 8004292:	2101      	movs	r1, #1
 8004294:	430a      	orrs	r2, r1
 8004296:	62da      	str	r2, [r3, #44]	; 0x2c
 8004298:	4b10      	ldr	r3, [pc, #64]	; (80042dc <HAL_TIM_MspPostInit+0x74>)
 800429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429c:	2201      	movs	r2, #1
 800429e:	4013      	ands	r3, r2
 80042a0:	60bb      	str	r3, [r7, #8]
 80042a2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80042a4:	210c      	movs	r1, #12
 80042a6:	187b      	adds	r3, r7, r1
 80042a8:	2280      	movs	r2, #128	; 0x80
 80042aa:	0212      	lsls	r2, r2, #8
 80042ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ae:	187b      	adds	r3, r7, r1
 80042b0:	2202      	movs	r2, #2
 80042b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b4:	187b      	adds	r3, r7, r1
 80042b6:	2200      	movs	r2, #0
 80042b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ba:	187b      	adds	r3, r7, r1
 80042bc:	2200      	movs	r2, #0
 80042be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 80042c0:	187b      	adds	r3, r7, r1
 80042c2:	2205      	movs	r2, #5
 80042c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042c6:	187a      	adds	r2, r7, r1
 80042c8:	23a0      	movs	r3, #160	; 0xa0
 80042ca:	05db      	lsls	r3, r3, #23
 80042cc:	0011      	movs	r1, r2
 80042ce:	0018      	movs	r0, r3
 80042d0:	f003 f83e 	bl	8007350 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80042d4:	46c0      	nop			; (mov r8, r8)
 80042d6:	46bd      	mov	sp, r7
 80042d8:	b008      	add	sp, #32
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40021000 	.word	0x40021000

080042e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80042e4:	46c0      	nop			; (mov r8, r8)
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042ee:	e7fe      	b.n	80042ee <HardFault_Handler+0x4>

080042f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80042f4:	46c0      	nop			; (mov r8, r8)
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042fe:	46c0      	nop			; (mov r8, r8)
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004308:	f002 f8ca 	bl	80064a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800430c:	46c0      	nop			; (mov r8, r8)
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
	...

08004314 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8004318:	4b03      	ldr	r3, [pc, #12]	; (8004328 <RTC_IRQHandler+0x14>)
 800431a:	0018      	movs	r0, r3
 800431c:	f004 fefe 	bl	800911c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8004320:	46c0      	nop			; (mov r8, r8)
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	20000208 	.word	0x20000208

0800432c <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004330:	2004      	movs	r0, #4
 8004332:	f003 f9d7 	bl	80076e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8004336:	46c0      	nop			; (mov r8, r8)
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004340:	2380      	movs	r3, #128	; 0x80
 8004342:	019b      	lsls	r3, r3, #6
 8004344:	0018      	movs	r0, r3
 8004346:	f003 f9cd 	bl	80076e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800434a:	2380      	movs	r3, #128	; 0x80
 800434c:	01db      	lsls	r3, r3, #7
 800434e:	0018      	movs	r0, r3
 8004350:	f003 f9c8 	bl	80076e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004354:	2380      	movs	r3, #128	; 0x80
 8004356:	021b      	lsls	r3, r3, #8
 8004358:	0018      	movs	r0, r3
 800435a:	f003 f9c3 	bl	80076e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800435e:	46c0      	nop			; (mov r8, r8)
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004368:	4b03      	ldr	r3, [pc, #12]	; (8004378 <DMA1_Channel2_3_IRQHandler+0x14>)
 800436a:	0018      	movs	r0, r3
 800436c:	f002 ff42 	bl	80071f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8004370:	46c0      	nop			; (mov r8, r8)
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	2000031c 	.word	0x2000031c

0800437c <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8004380:	4b03      	ldr	r3, [pc, #12]	; (8004390 <LPTIM1_IRQHandler+0x14>)
 8004382:	0018      	movs	r0, r3
 8004384:	f003 fa4a 	bl	800781c <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8004388:	46c0      	nop			; (mov r8, r8)
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	46c0      	nop			; (mov r8, r8)
 8004390:	200001d8 	.word	0x200001d8

08004394 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004398:	4b03      	ldr	r3, [pc, #12]	; (80043a8 <TIM2_IRQHandler+0x14>)
 800439a:	0018      	movs	r0, r3
 800439c:	f005 feb2 	bl	800a104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80043a0:	46c0      	nop			; (mov r8, r8)
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	46c0      	nop			; (mov r8, r8)
 80043a8:	20000284 	.word	0x20000284

080043ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80043b0:	4b03      	ldr	r3, [pc, #12]	; (80043c0 <TIM6_DAC_IRQHandler+0x14>)
 80043b2:	0018      	movs	r0, r3
 80043b4:	f005 fea6 	bl	800a104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80043b8:	46c0      	nop			; (mov r8, r8)
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	46c0      	nop			; (mov r8, r8)
 80043c0:	20000154 	.word	0x20000154

080043c4 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 80043c8:	4b03      	ldr	r3, [pc, #12]	; (80043d8 <TIM21_IRQHandler+0x14>)
 80043ca:	0018      	movs	r0, r3
 80043cc:	f005 fe9a 	bl	800a104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 80043d0:	46c0      	nop			; (mov r8, r8)
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	46c0      	nop			; (mov r8, r8)
 80043d8:	20000364 	.word	0x20000364

080043dc <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM22_IRQn 0 */

  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 80043e0:	4b03      	ldr	r3, [pc, #12]	; (80043f0 <TIM22_IRQHandler+0x14>)
 80043e2:	0018      	movs	r0, r3
 80043e4:	f005 fe8e 	bl	800a104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 80043e8:	46c0      	nop			; (mov r8, r8)
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	46c0      	nop			; (mov r8, r8)
 80043f0:	2000019c 	.word	0x2000019c

080043f4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80043f8:	4b03      	ldr	r3, [pc, #12]	; (8004408 <SPI1_IRQHandler+0x14>)
 80043fa:	0018      	movs	r0, r3
 80043fc:	f005 fa64 	bl	80098c8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004400:	46c0      	nop			; (mov r8, r8)
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	2000022c 	.word	0x2000022c

0800440c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004414:	4b11      	ldr	r3, [pc, #68]	; (800445c <_sbrk+0x50>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d102      	bne.n	8004422 <_sbrk+0x16>
		heap_end = &end;
 800441c:	4b0f      	ldr	r3, [pc, #60]	; (800445c <_sbrk+0x50>)
 800441e:	4a10      	ldr	r2, [pc, #64]	; (8004460 <_sbrk+0x54>)
 8004420:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004422:	4b0e      	ldr	r3, [pc, #56]	; (800445c <_sbrk+0x50>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004428:	4b0c      	ldr	r3, [pc, #48]	; (800445c <_sbrk+0x50>)
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	18d3      	adds	r3, r2, r3
 8004430:	466a      	mov	r2, sp
 8004432:	4293      	cmp	r3, r2
 8004434:	d907      	bls.n	8004446 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004436:	f006 fbb3 	bl	800aba0 <__errno>
 800443a:	0003      	movs	r3, r0
 800443c:	220c      	movs	r2, #12
 800443e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004440:	2301      	movs	r3, #1
 8004442:	425b      	negs	r3, r3
 8004444:	e006      	b.n	8004454 <_sbrk+0x48>
	}

	heap_end += incr;
 8004446:	4b05      	ldr	r3, [pc, #20]	; (800445c <_sbrk+0x50>)
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	18d2      	adds	r2, r2, r3
 800444e:	4b03      	ldr	r3, [pc, #12]	; (800445c <_sbrk+0x50>)
 8004450:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8004452:	68fb      	ldr	r3, [r7, #12]
}
 8004454:	0018      	movs	r0, r3
 8004456:	46bd      	mov	sp, r7
 8004458:	b004      	add	sp, #16
 800445a:	bd80      	pop	{r7, pc}
 800445c:	200000f8 	.word	0x200000f8
 8004460:	200003a8 	.word	0x200003a8

08004464 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8004468:	4b17      	ldr	r3, [pc, #92]	; (80044c8 <SystemInit+0x64>)
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	4b16      	ldr	r3, [pc, #88]	; (80044c8 <SystemInit+0x64>)
 800446e:	2180      	movs	r1, #128	; 0x80
 8004470:	0049      	lsls	r1, r1, #1
 8004472:	430a      	orrs	r2, r1
 8004474:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8004476:	4b14      	ldr	r3, [pc, #80]	; (80044c8 <SystemInit+0x64>)
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	4b13      	ldr	r3, [pc, #76]	; (80044c8 <SystemInit+0x64>)
 800447c:	4913      	ldr	r1, [pc, #76]	; (80044cc <SystemInit+0x68>)
 800447e:	400a      	ands	r2, r1
 8004480:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8004482:	4b11      	ldr	r3, [pc, #68]	; (80044c8 <SystemInit+0x64>)
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	4b10      	ldr	r3, [pc, #64]	; (80044c8 <SystemInit+0x64>)
 8004488:	4911      	ldr	r1, [pc, #68]	; (80044d0 <SystemInit+0x6c>)
 800448a:	400a      	ands	r2, r1
 800448c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800448e:	4b0e      	ldr	r3, [pc, #56]	; (80044c8 <SystemInit+0x64>)
 8004490:	689a      	ldr	r2, [r3, #8]
 8004492:	4b0d      	ldr	r3, [pc, #52]	; (80044c8 <SystemInit+0x64>)
 8004494:	2101      	movs	r1, #1
 8004496:	438a      	bics	r2, r1
 8004498:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800449a:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <SystemInit+0x64>)
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	4b0a      	ldr	r3, [pc, #40]	; (80044c8 <SystemInit+0x64>)
 80044a0:	490c      	ldr	r1, [pc, #48]	; (80044d4 <SystemInit+0x70>)
 80044a2:	400a      	ands	r2, r1
 80044a4:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80044a6:	4b08      	ldr	r3, [pc, #32]	; (80044c8 <SystemInit+0x64>)
 80044a8:	68da      	ldr	r2, [r3, #12]
 80044aa:	4b07      	ldr	r3, [pc, #28]	; (80044c8 <SystemInit+0x64>)
 80044ac:	490a      	ldr	r1, [pc, #40]	; (80044d8 <SystemInit+0x74>)
 80044ae:	400a      	ands	r2, r1
 80044b0:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80044b2:	4b05      	ldr	r3, [pc, #20]	; (80044c8 <SystemInit+0x64>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80044b8:	4b08      	ldr	r3, [pc, #32]	; (80044dc <SystemInit+0x78>)
 80044ba:	2280      	movs	r2, #128	; 0x80
 80044bc:	0512      	lsls	r2, r2, #20
 80044be:	609a      	str	r2, [r3, #8]
#endif
}
 80044c0:	46c0      	nop			; (mov r8, r8)
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	46c0      	nop			; (mov r8, r8)
 80044c8:	40021000 	.word	0x40021000
 80044cc:	88ff400c 	.word	0x88ff400c
 80044d0:	fef6fff6 	.word	0xfef6fff6
 80044d4:	fffbffff 	.word	0xfffbffff
 80044d8:	ff02ffff 	.word	0xff02ffff
 80044dc:	e000ed00 	.word	0xe000ed00

080044e0 <HAL_TIM_PeriodElapsedCallback>:
static uint32_t stopwatchStartMarker = 0;
static uint32_t stopwatchPauseMarker = 0;
static uint8_t motorStateCounter = 0;

// called for a bunch of timers when timer has to circle back (arr->0, 0->arr)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
	// button's timer
	if (htim->Instance == TIM6) {
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a17      	ldr	r2, [pc, #92]	; (800454c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d11f      	bne.n	8004532 <HAL_TIM_PeriodElapsedCallback+0x52>
		// stop timer, renable button interrupts, and clear pending
		HAL_TIM_Base_Stop_IT(htim);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	0018      	movs	r0, r3
 80044f6:	f005 fcd7 	bl	8009ea8 <HAL_TIM_Base_Stop_IT>
		HAL_NVIC_ClearPendingIRQ(EXTI2_3_IRQn);
 80044fa:	2006      	movs	r0, #6
 80044fc:	f002 fdaa 	bl	8007054 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 8004500:	2007      	movs	r0, #7
 8004502:	f002 fda7 	bl	8007054 <HAL_NVIC_ClearPendingIRQ>
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON1);
 8004506:	4b12      	ldr	r3, [pc, #72]	; (8004550 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8004508:	2204      	movs	r2, #4
 800450a:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON2);
 800450c:	4b10      	ldr	r3, [pc, #64]	; (8004550 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800450e:	2280      	movs	r2, #128	; 0x80
 8004510:	0192      	lsls	r2, r2, #6
 8004512:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON3);
 8004514:	4b0e      	ldr	r3, [pc, #56]	; (8004550 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8004516:	2280      	movs	r2, #128	; 0x80
 8004518:	01d2      	lsls	r2, r2, #7
 800451a:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON4);
 800451c:	4b0c      	ldr	r3, [pc, #48]	; (8004550 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800451e:	2280      	movs	r2, #128	; 0x80
 8004520:	0212      	lsls	r2, r2, #8
 8004522:	615a      	str	r2, [r3, #20]

		HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8004524:	2006      	movs	r0, #6
 8004526:	f002 fd68 	bl	8006ffa <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800452a:	2007      	movs	r0, #7
 800452c:	f002 fd65 	bl	8006ffa <HAL_NVIC_EnableIRQ>
	// sampler's timer
	else if (htim->Instance == TIM22) {
		// set flag to start ADC sample
		canSampleBattery = 1;
	}
}
 8004530:	e007      	b.n	8004542 <HAL_TIM_PeriodElapsedCallback+0x62>
	else if (htim->Instance == TIM22) {
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a07      	ldr	r2, [pc, #28]	; (8004554 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d102      	bne.n	8004542 <HAL_TIM_PeriodElapsedCallback+0x62>
		canSampleBattery = 1;
 800453c:	4b06      	ldr	r3, [pc, #24]	; (8004558 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800453e:	2201      	movs	r2, #1
 8004540:	701a      	strb	r2, [r3, #0]
}
 8004542:	46c0      	nop			; (mov r8, r8)
 8004544:	46bd      	mov	sp, r7
 8004546:	b002      	add	sp, #8
 8004548:	bd80      	pop	{r7, pc}
 800454a:	46c0      	nop			; (mov r8, r8)
 800454c:	40001000 	.word	0x40001000
 8004550:	40010400 	.word	0x40010400
 8004554:	40011400 	.word	0x40011400
 8004558:	20000141 	.word	0x20000141

0800455c <HAL_TIM_OC_DelayElapsedCallback>:

// called for a bunch of timers when channel value = counter value
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM21) {
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a43      	ldr	r2, [pc, #268]	; (8004678 <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d13d      	bne.n	80045ea <HAL_TIM_OC_DelayElapsedCallback+0x8e>
		// timer's channel
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	7e1b      	ldrb	r3, [r3, #24]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d124      	bne.n	80045c0 <HAL_TIM_OC_DelayElapsedCallback+0x64>
			updateFace.timer = 1;		// set update screen flag
 8004576:	4b41      	ldr	r3, [pc, #260]	; (800467c <HAL_TIM_OC_DelayElapsedCallback+0x120>)
 8004578:	2201      	movs	r2, #1
 800457a:	705a      	strb	r2, [r3, #1]

			// decrement value if non-zero, else set done flag
			if (timerCounter != 1) --timerCounter;
 800457c:	4b40      	ldr	r3, [pc, #256]	; (8004680 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d005      	beq.n	8004590 <HAL_TIM_OC_DelayElapsedCallback+0x34>
 8004584:	4b3e      	ldr	r3, [pc, #248]	; (8004680 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	1e5a      	subs	r2, r3, #1
 800458a:	4b3d      	ldr	r3, [pc, #244]	; (8004680 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 800458c:	601a      	str	r2, [r3, #0]
				stopMotor(htim);
				break;
			default: break;
		}
	}
}
 800458e:	e06e      	b.n	800466e <HAL_TIM_OC_DelayElapsedCallback+0x112>
				--timerCounter;
 8004590:	4b3b      	ldr	r3, [pc, #236]	; (8004680 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	1e5a      	subs	r2, r3, #1
 8004596:	4b3a      	ldr	r3, [pc, #232]	; (8004680 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8004598:	601a      	str	r2, [r3, #0]
				isTimerDone = 1;
 800459a:	4b3a      	ldr	r3, [pc, #232]	; (8004684 <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 800459c:	2201      	movs	r2, #1
 800459e:	701a      	strb	r2, [r3, #0]
				stopTimer(htim);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	0018      	movs	r0, r3
 80045a4:	f000 f8e8 	bl	8004778 <stopTimer>
				updateFace.timer = 1;
 80045a8:	4b34      	ldr	r3, [pc, #208]	; (800467c <HAL_TIM_OC_DelayElapsedCallback+0x120>)
 80045aa:	2201      	movs	r2, #1
 80045ac:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_TogglePin(LED2_PORT, LED2_PIN);
 80045ae:	2380      	movs	r3, #128	; 0x80
 80045b0:	00da      	lsls	r2, r3, #3
 80045b2:	23a0      	movs	r3, #160	; 0xa0
 80045b4:	05db      	lsls	r3, r3, #23
 80045b6:	0011      	movs	r1, r2
 80045b8:	0018      	movs	r0, r3
 80045ba:	f003 f881 	bl	80076c0 <HAL_GPIO_TogglePin>
}
 80045be:	e056      	b.n	800466e <HAL_TIM_OC_DelayElapsedCallback+0x112>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	7e1b      	ldrb	r3, [r3, #24]
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d152      	bne.n	800466e <HAL_TIM_OC_DelayElapsedCallback+0x112>
			updateFace.stopwatch = 1;
 80045c8:	4b2c      	ldr	r3, [pc, #176]	; (800467c <HAL_TIM_OC_DelayElapsedCallback+0x120>)
 80045ca:	2201      	movs	r2, #1
 80045cc:	70da      	strb	r2, [r3, #3]
			++stopwatchCounter;
 80045ce:	4b2e      	ldr	r3, [pc, #184]	; (8004688 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	4b2c      	ldr	r3, [pc, #176]	; (8004688 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 80045d6:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED2_PORT, LED2_PIN);
 80045d8:	2380      	movs	r3, #128	; 0x80
 80045da:	00da      	lsls	r2, r3, #3
 80045dc:	23a0      	movs	r3, #160	; 0xa0
 80045de:	05db      	lsls	r3, r3, #23
 80045e0:	0011      	movs	r1, r2
 80045e2:	0018      	movs	r0, r3
 80045e4:	f003 f86c 	bl	80076c0 <HAL_GPIO_TogglePin>
}
 80045e8:	e041      	b.n	800466e <HAL_TIM_OC_DelayElapsedCallback+0x112>
	else if (htim->Instance == TIM2) {
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	2380      	movs	r3, #128	; 0x80
 80045f0:	05db      	lsls	r3, r3, #23
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d138      	bne.n	8004668 <HAL_TIM_OC_DelayElapsedCallback+0x10c>
		++motorStateCounter;
 80045f6:	4b25      	ldr	r3, [pc, #148]	; (800468c <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	3301      	adds	r3, #1
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	4b23      	ldr	r3, [pc, #140]	; (800468c <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8004600:	701a      	strb	r2, [r3, #0]
		switch(motorStateCounter) {
 8004602:	4b22      	ldr	r3, [pc, #136]	; (800468c <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2b06      	cmp	r3, #6
 8004608:	d830      	bhi.n	800466c <HAL_TIM_OC_DelayElapsedCallback+0x110>
 800460a:	009a      	lsls	r2, r3, #2
 800460c:	4b20      	ldr	r3, [pc, #128]	; (8004690 <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 800460e:	18d3      	adds	r3, r2, r3
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	469f      	mov	pc, r3
			case 1: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8004614:	4b1f      	ldr	r3, [pc, #124]	; (8004694 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8004616:	2201      	movs	r2, #1
 8004618:	2120      	movs	r1, #32
 800461a:	0018      	movs	r0, r3
 800461c:	f003 f833 	bl	8007686 <HAL_GPIO_WritePin>
 8004620:	e025      	b.n	800466e <HAL_TIM_OC_DelayElapsedCallback+0x112>
			case 2: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET); break;
 8004622:	4b1c      	ldr	r3, [pc, #112]	; (8004694 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8004624:	2200      	movs	r2, #0
 8004626:	2120      	movs	r1, #32
 8004628:	0018      	movs	r0, r3
 800462a:	f003 f82c 	bl	8007686 <HAL_GPIO_WritePin>
 800462e:	e01e      	b.n	800466e <HAL_TIM_OC_DelayElapsedCallback+0x112>
			case 3: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8004630:	4b18      	ldr	r3, [pc, #96]	; (8004694 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8004632:	2201      	movs	r2, #1
 8004634:	2120      	movs	r1, #32
 8004636:	0018      	movs	r0, r3
 8004638:	f003 f825 	bl	8007686 <HAL_GPIO_WritePin>
 800463c:	e017      	b.n	800466e <HAL_TIM_OC_DelayElapsedCallback+0x112>
			case 4: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET); break;
 800463e:	4b15      	ldr	r3, [pc, #84]	; (8004694 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8004640:	2200      	movs	r2, #0
 8004642:	2120      	movs	r1, #32
 8004644:	0018      	movs	r0, r3
 8004646:	f003 f81e 	bl	8007686 <HAL_GPIO_WritePin>
 800464a:	e010      	b.n	800466e <HAL_TIM_OC_DelayElapsedCallback+0x112>
			case 5: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 800464c:	4b11      	ldr	r3, [pc, #68]	; (8004694 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 800464e:	2201      	movs	r2, #1
 8004650:	2120      	movs	r1, #32
 8004652:	0018      	movs	r0, r3
 8004654:	f003 f817 	bl	8007686 <HAL_GPIO_WritePin>
 8004658:	e009      	b.n	800466e <HAL_TIM_OC_DelayElapsedCallback+0x112>
				HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET); break;
 800465a:	4b0e      	ldr	r3, [pc, #56]	; (8004694 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 800465c:	2200      	movs	r2, #0
 800465e:	2120      	movs	r1, #32
 8004660:	0018      	movs	r0, r3
 8004662:	f003 f810 	bl	8007686 <HAL_GPIO_WritePin>
 8004666:	e002      	b.n	800466e <HAL_TIM_OC_DelayElapsedCallback+0x112>
	}
 8004668:	46c0      	nop			; (mov r8, r8)
 800466a:	e000      	b.n	800466e <HAL_TIM_OC_DelayElapsedCallback+0x112>
			default: break;
 800466c:	46c0      	nop			; (mov r8, r8)
}
 800466e:	46c0      	nop			; (mov r8, r8)
 8004670:	46bd      	mov	sp, r7
 8004672:	b002      	add	sp, #8
 8004674:	bd80      	pop	{r7, pc}
 8004676:	46c0      	nop			; (mov r8, r8)
 8004678:	40010800 	.word	0x40010800
 800467c:	20000144 	.word	0x20000144
 8004680:	2000014c 	.word	0x2000014c
 8004684:	20000150 	.word	0x20000150
 8004688:	20000198 	.word	0x20000198
 800468c:	2000010c 	.word	0x2000010c
 8004690:	0800bf28 	.word	0x0800bf28
 8004694:	50000400 	.word	0x50000400

08004698 <runTimer>:

// ---- important timer functions  ----
void runTimer(TIM_HandleTypeDef *htim) {
 8004698:	b590      	push	{r4, r7, lr}
 800469a:	b089      	sub	sp, #36	; 0x24
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfig = {0};
 80046a0:	2408      	movs	r4, #8
 80046a2:	193b      	adds	r3, r7, r4
 80046a4:	0018      	movs	r0, r3
 80046a6:	2310      	movs	r3, #16
 80046a8:	001a      	movs	r2, r3
 80046aa:	2100      	movs	r1, #0
 80046ac:	f006 faab 	bl	800ac06 <memset>
	sConfig.OCMode = TIM_OCMODE_TIMING;
 80046b0:	193b      	adds	r3, r7, r4
 80046b2:	2200      	movs	r2, #0
 80046b4:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 80046b6:	193b      	adds	r3, r7, r4
 80046b8:	2200      	movs	r2, #0
 80046ba:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 80046bc:	193b      	adds	r3, r7, r4
 80046be:	2200      	movs	r2, #0
 80046c0:	60da      	str	r2, [r3, #12]

	// calculating pulse/OC trigger
	if (isTimerPaused == 0) {		// 1st run, hasn't been paused yet
 80046c2:	4b1e      	ldr	r3, [pc, #120]	; (800473c <runTimer+0xa4>)
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d106      	bne.n	80046da <runTimer+0x42>
		sConfig.Pulse = htim->Instance->CNT;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046d2:	2308      	movs	r3, #8
 80046d4:	18fb      	adds	r3, r7, r3
 80046d6:	605a      	str	r2, [r3, #4]
 80046d8:	e020      	b.n	800471c <runTimer+0x84>
	}
	else {		// unpausing
		uint32_t temp = htim->Instance->CNT;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	61fb      	str	r3, [r7, #28]

		// count needed to get from pause marker to start marker - basically how many steps it would've taken to get to next cycle
		// shifted to account for negative behavior
		uint32_t diff = ((int)(timerStartMarker-timerPauseMarker)+0x8000) % 0x8000;
 80046e2:	4b17      	ldr	r3, [pc, #92]	; (8004740 <runTimer+0xa8>)
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	4b17      	ldr	r3, [pc, #92]	; (8004744 <runTimer+0xac>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2280      	movs	r2, #128	; 0x80
 80046ee:	0212      	lsls	r2, r2, #8
 80046f0:	4694      	mov	ip, r2
 80046f2:	4463      	add	r3, ip
 80046f4:	4a14      	ldr	r2, [pc, #80]	; (8004748 <runTimer+0xb0>)
 80046f6:	4013      	ands	r3, r2
 80046f8:	d503      	bpl.n	8004702 <runTimer+0x6a>
 80046fa:	3b01      	subs	r3, #1
 80046fc:	4a13      	ldr	r2, [pc, #76]	; (800474c <runTimer+0xb4>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	3301      	adds	r3, #1
 8004702:	61bb      	str	r3, [r7, #24]
		sConfig.Pulse = (temp+diff) % 0x8000;
 8004704:	69fa      	ldr	r2, [r7, #28]
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	18d3      	adds	r3, r2, r3
 800470a:	045b      	lsls	r3, r3, #17
 800470c:	0c5a      	lsrs	r2, r3, #17
 800470e:	2108      	movs	r1, #8
 8004710:	187b      	adds	r3, r7, r1
 8004712:	605a      	str	r2, [r3, #4]
		timerStartMarker = sConfig.Pulse;		// set new start marker
 8004714:	187b      	adds	r3, r7, r1
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	4b09      	ldr	r3, [pc, #36]	; (8004740 <runTimer+0xa8>)
 800471a:	601a      	str	r2, [r3, #0]
	}

	HAL_TIM_OC_ConfigChannel(htim, &sConfig, TIM_CHANNEL_1);
 800471c:	2308      	movs	r3, #8
 800471e:	18f9      	adds	r1, r7, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	0018      	movs	r0, r3
 8004726:	f005 fdd5 	bl	800a2d4 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_OC_Start_IT(htim, TIM_CHANNEL_1);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2100      	movs	r1, #0
 800472e:	0018      	movs	r0, r3
 8004730:	f005 fc10 	bl	8009f54 <HAL_TIM_OC_Start_IT>
}
 8004734:	46c0      	nop			; (mov r8, r8)
 8004736:	46bd      	mov	sp, r7
 8004738:	b009      	add	sp, #36	; 0x24
 800473a:	bd90      	pop	{r4, r7, pc}
 800473c:	20000196 	.word	0x20000196
 8004740:	200000fc 	.word	0x200000fc
 8004744:	20000100 	.word	0x20000100
 8004748:	80007fff 	.word	0x80007fff
 800474c:	ffff8000 	.word	0xffff8000

08004750 <pauseTimer>:

void pauseTimer(TIM_HandleTypeDef *htim) {
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
	// stop timer, but hold marker so you can track milliseconds to next second
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_1);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2100      	movs	r1, #0
 800475c:	0018      	movs	r0, r3
 800475e:	f005 fc4b 	bl	8009ff8 <HAL_TIM_OC_Stop_IT>
	timerPauseMarker = htim->Instance->CNT;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004768:	4b02      	ldr	r3, [pc, #8]	; (8004774 <pauseTimer+0x24>)
 800476a:	601a      	str	r2, [r3, #0]
}
 800476c:	46c0      	nop			; (mov r8, r8)
 800476e:	46bd      	mov	sp, r7
 8004770:	b002      	add	sp, #8
 8004772:	bd80      	pop	{r7, pc}
 8004774:	20000100 	.word	0x20000100

08004778 <stopTimer>:

void stopTimer(TIM_HandleTypeDef *htim) {
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
	// clear everything
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_1);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2100      	movs	r1, #0
 8004784:	0018      	movs	r0, r3
 8004786:	f005 fc37 	bl	8009ff8 <HAL_TIM_OC_Stop_IT>
	timerStartMarker = 0;
 800478a:	4b05      	ldr	r3, [pc, #20]	; (80047a0 <stopTimer+0x28>)
 800478c:	2200      	movs	r2, #0
 800478e:	601a      	str	r2, [r3, #0]
	timerPauseMarker = 0;
 8004790:	4b04      	ldr	r3, [pc, #16]	; (80047a4 <stopTimer+0x2c>)
 8004792:	2200      	movs	r2, #0
 8004794:	601a      	str	r2, [r3, #0]
}
 8004796:	46c0      	nop			; (mov r8, r8)
 8004798:	46bd      	mov	sp, r7
 800479a:	b002      	add	sp, #8
 800479c:	bd80      	pop	{r7, pc}
 800479e:	46c0      	nop			; (mov r8, r8)
 80047a0:	200000fc 	.word	0x200000fc
 80047a4:	20000100 	.word	0x20000100

080047a8 <runStopwatch>:

void runStopwatch(TIM_HandleTypeDef *htim) {
 80047a8:	b590      	push	{r4, r7, lr}
 80047aa:	b089      	sub	sp, #36	; 0x24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfig = {0};
 80047b0:	2408      	movs	r4, #8
 80047b2:	193b      	adds	r3, r7, r4
 80047b4:	0018      	movs	r0, r3
 80047b6:	2310      	movs	r3, #16
 80047b8:	001a      	movs	r2, r3
 80047ba:	2100      	movs	r1, #0
 80047bc:	f006 fa23 	bl	800ac06 <memset>
	sConfig.OCMode = TIM_OCMODE_TIMING;
 80047c0:	193b      	adds	r3, r7, r4
 80047c2:	2200      	movs	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047c6:	193b      	adds	r3, r7, r4
 80047c8:	2200      	movs	r2, #0
 80047ca:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 80047cc:	193b      	adds	r3, r7, r4
 80047ce:	2200      	movs	r2, #0
 80047d0:	60da      	str	r2, [r3, #12]

	// calculating pulse/OC trigger
	if (isStopwatchPaused == 0) {		// 1st run, hasn't been paused yet
 80047d2:	4b22      	ldr	r3, [pc, #136]	; (800485c <runStopwatch+0xb4>)
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10d      	bne.n	80047f8 <runStopwatch+0x50>
		stopwatchCounter = 0;
 80047dc:	4b20      	ldr	r3, [pc, #128]	; (8004860 <runStopwatch+0xb8>)
 80047de:	2200      	movs	r2, #0
 80047e0:	601a      	str	r2, [r3, #0]
		sConfig.Pulse = htim->Instance->CNT;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047e8:	2108      	movs	r1, #8
 80047ea:	187b      	adds	r3, r7, r1
 80047ec:	605a      	str	r2, [r3, #4]
		stopwatchStartMarker = sConfig.Pulse;		// set new start marker
 80047ee:	187b      	adds	r3, r7, r1
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	4b1c      	ldr	r3, [pc, #112]	; (8004864 <runStopwatch+0xbc>)
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	e020      	b.n	800483a <runStopwatch+0x92>
	}
	else {		// unpausing
		uint32_t temp = htim->Instance->CNT;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	61fb      	str	r3, [r7, #28]

		// count needed to get from pause marker to start marker - basically how many steps it would've taken to get to next cycle
		// shifted to account for negative behavior
		uint32_t diff = ((int)(stopwatchStartMarker-stopwatchPauseMarker)+0x8000) % 0x8000;
 8004800:	4b18      	ldr	r3, [pc, #96]	; (8004864 <runStopwatch+0xbc>)
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	4b18      	ldr	r3, [pc, #96]	; (8004868 <runStopwatch+0xc0>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2280      	movs	r2, #128	; 0x80
 800480c:	0212      	lsls	r2, r2, #8
 800480e:	4694      	mov	ip, r2
 8004810:	4463      	add	r3, ip
 8004812:	4a16      	ldr	r2, [pc, #88]	; (800486c <runStopwatch+0xc4>)
 8004814:	4013      	ands	r3, r2
 8004816:	d503      	bpl.n	8004820 <runStopwatch+0x78>
 8004818:	3b01      	subs	r3, #1
 800481a:	4a15      	ldr	r2, [pc, #84]	; (8004870 <runStopwatch+0xc8>)
 800481c:	4313      	orrs	r3, r2
 800481e:	3301      	adds	r3, #1
 8004820:	61bb      	str	r3, [r7, #24]
		sConfig.Pulse = (temp+diff) % 0x8000;
 8004822:	69fa      	ldr	r2, [r7, #28]
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	18d3      	adds	r3, r2, r3
 8004828:	045b      	lsls	r3, r3, #17
 800482a:	0c5a      	lsrs	r2, r3, #17
 800482c:	2108      	movs	r1, #8
 800482e:	187b      	adds	r3, r7, r1
 8004830:	605a      	str	r2, [r3, #4]
		stopwatchStartMarker = sConfig.Pulse;		// set new start marker
 8004832:	187b      	adds	r3, r7, r1
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	4b0b      	ldr	r3, [pc, #44]	; (8004864 <runStopwatch+0xbc>)
 8004838:	601a      	str	r2, [r3, #0]
	}

	HAL_TIM_OC_ConfigChannel(htim, &sConfig, TIM_CHANNEL_2);
 800483a:	2308      	movs	r3, #8
 800483c:	18f9      	adds	r1, r7, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2204      	movs	r2, #4
 8004842:	0018      	movs	r0, r3
 8004844:	f005 fd46 	bl	800a2d4 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_OC_Start_IT(htim, TIM_CHANNEL_2);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2104      	movs	r1, #4
 800484c:	0018      	movs	r0, r3
 800484e:	f005 fb81 	bl	8009f54 <HAL_TIM_OC_Start_IT>
}
 8004852:	46c0      	nop			; (mov r8, r8)
 8004854:	46bd      	mov	sp, r7
 8004856:	b009      	add	sp, #36	; 0x24
 8004858:	bd90      	pop	{r4, r7, pc}
 800485a:	46c0      	nop			; (mov r8, r8)
 800485c:	20000195 	.word	0x20000195
 8004860:	20000198 	.word	0x20000198
 8004864:	20000104 	.word	0x20000104
 8004868:	20000108 	.word	0x20000108
 800486c:	80007fff 	.word	0x80007fff
 8004870:	ffff8000 	.word	0xffff8000

08004874 <pauseStopwatch>:

void pauseStopwatch(TIM_HandleTypeDef *htim) {
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
	// save marker to hold milliseconds
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_2);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2104      	movs	r1, #4
 8004880:	0018      	movs	r0, r3
 8004882:	f005 fbb9 	bl	8009ff8 <HAL_TIM_OC_Stop_IT>
	stopwatchPauseMarker = htim->Instance->CNT;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800488c:	4b02      	ldr	r3, [pc, #8]	; (8004898 <pauseStopwatch+0x24>)
 800488e:	601a      	str	r2, [r3, #0]
}
 8004890:	46c0      	nop			; (mov r8, r8)
 8004892:	46bd      	mov	sp, r7
 8004894:	b002      	add	sp, #8
 8004896:	bd80      	pop	{r7, pc}
 8004898:	20000108 	.word	0x20000108

0800489c <clearStopwatch>:

void clearStopwatch(TIM_HandleTypeDef *htim) {
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
	// clear everything
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_2);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2104      	movs	r1, #4
 80048a8:	0018      	movs	r0, r3
 80048aa:	f005 fba5 	bl	8009ff8 <HAL_TIM_OC_Stop_IT>
	stopwatchPauseMarker = htim->Instance->CNT;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048b4:	4b06      	ldr	r3, [pc, #24]	; (80048d0 <clearStopwatch+0x34>)
 80048b6:	601a      	str	r2, [r3, #0]
	stopwatchStartMarker = htim->Instance->CNT;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048be:	4b05      	ldr	r3, [pc, #20]	; (80048d4 <clearStopwatch+0x38>)
 80048c0:	601a      	str	r2, [r3, #0]

	stopwatchCounter = 0;
 80048c2:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <clearStopwatch+0x3c>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]
}
 80048c8:	46c0      	nop			; (mov r8, r8)
 80048ca:	46bd      	mov	sp, r7
 80048cc:	b002      	add	sp, #8
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	20000108 	.word	0x20000108
 80048d4:	20000104 	.word	0x20000104
 80048d8:	20000198 	.word	0x20000198

080048dc <runTimerStopwatchBase>:

void runTimerStopwatchBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Start(htim);}
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	0018      	movs	r0, r3
 80048e8:	f005 fa9a 	bl	8009e20 <HAL_TIM_Base_Start>
 80048ec:	46c0      	nop			; (mov r8, r8)
 80048ee:	46bd      	mov	sp, r7
 80048f0:	b002      	add	sp, #8
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <runADCSampler>:
void stopTimerStopwatchBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Stop(htim);}
// ---- end of important timer functions ----

// ---- motor and other things that use timer ----
// uses LSE timer TIM22
void runADCSampler(TIM_HandleTypeDef *htim) {
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(htim);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	0018      	movs	r0, r3
 8004900:	f005 fab0 	bl	8009e64 <HAL_TIM_Base_Start_IT>
	canSampleBattery = 1;			// set flag to let ADC run at the start
 8004904:	4b03      	ldr	r3, [pc, #12]	; (8004914 <runADCSampler+0x20>)
 8004906:	2201      	movs	r2, #1
 8004908:	701a      	strb	r2, [r3, #0]
}
 800490a:	46c0      	nop			; (mov r8, r8)
 800490c:	46bd      	mov	sp, r7
 800490e:	b002      	add	sp, #8
 8004910:	bd80      	pop	{r7, pc}
 8004912:	46c0      	nop			; (mov r8, r8)
 8004914:	20000141 	.word	0x20000141

08004918 <runMotor>:
	HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_1);
}

// running motor for vibration. runs for a finite amount of time
// uses LSE timer TIM2 CH2
void runMotor(TIM_HandleTypeDef *htim) {
 8004918:	b590      	push	{r4, r7, lr}
 800491a:	b087      	sub	sp, #28
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfig = {0};
 8004920:	2408      	movs	r4, #8
 8004922:	193b      	adds	r3, r7, r4
 8004924:	0018      	movs	r0, r3
 8004926:	2310      	movs	r3, #16
 8004928:	001a      	movs	r2, r3
 800492a:	2100      	movs	r1, #0
 800492c:	f006 f96b 	bl	800ac06 <memset>
	sConfig.OCMode = TIM_OCMODE_TIMING;
 8004930:	0021      	movs	r1, r4
 8004932:	187b      	adds	r3, r7, r1
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004938:	187b      	adds	r3, r7, r1
 800493a:	2200      	movs	r2, #0
 800493c:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 800493e:	187b      	adds	r3, r7, r1
 8004940:	2200      	movs	r2, #0
 8004942:	60da      	str	r2, [r3, #12]
	sConfig.Pulse = htim->Instance->CNT;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800494a:	000c      	movs	r4, r1
 800494c:	187b      	adds	r3, r7, r1
 800494e:	605a      	str	r2, [r3, #4]

	HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET);
 8004950:	4b0c      	ldr	r3, [pc, #48]	; (8004984 <runMotor+0x6c>)
 8004952:	2201      	movs	r2, #1
 8004954:	2120      	movs	r1, #32
 8004956:	0018      	movs	r0, r3
 8004958:	f002 fe95 	bl	8007686 <HAL_GPIO_WritePin>
	HAL_TIM_OC_ConfigChannel(htim, &sConfig, TIM_CHANNEL_2);
 800495c:	0021      	movs	r1, r4
 800495e:	1879      	adds	r1, r7, r1
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2204      	movs	r2, #4
 8004964:	0018      	movs	r0, r3
 8004966:	f005 fcb5 	bl	800a2d4 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_OC_Start_IT(htim, TIM_CHANNEL_2);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2104      	movs	r1, #4
 800496e:	0018      	movs	r0, r3
 8004970:	f005 faf0 	bl	8009f54 <HAL_TIM_OC_Start_IT>

	motorStateCounter = 0;
 8004974:	4b04      	ldr	r3, [pc, #16]	; (8004988 <runMotor+0x70>)
 8004976:	2200      	movs	r2, #0
 8004978:	701a      	strb	r2, [r3, #0]
}
 800497a:	46c0      	nop			; (mov r8, r8)
 800497c:	46bd      	mov	sp, r7
 800497e:	b007      	add	sp, #28
 8004980:	bd90      	pop	{r4, r7, pc}
 8004982:	46c0      	nop			; (mov r8, r8)
 8004984:	50000400 	.word	0x50000400
 8004988:	2000010c 	.word	0x2000010c

0800498c <runBacklightMotorBase>:
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_2);
	motorStateCounter = 0;
}

// should use TIM22
void runBacklightMotorBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Start(htim);}
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	0018      	movs	r0, r3
 8004998:	f005 fa42 	bl	8009e20 <HAL_TIM_Base_Start>
 800499c:	46c0      	nop			; (mov r8, r8)
 800499e:	46bd      	mov	sp, r7
 80049a0:	b002      	add	sp, #8
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_GPIO_EXTI_Callback>:
	"Nov",
	"Dec"
};

// callback for button interrupts.
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	0002      	movs	r2, r0
 80049ac:	1dbb      	adds	r3, r7, #6
 80049ae:	801a      	strh	r2, [r3, #0]
	// toggles LED whenever a button is pressed
	HAL_GPIO_TogglePin(LED3_PORT, LED3_PIN);
 80049b0:	4b1d      	ldr	r3, [pc, #116]	; (8004a28 <HAL_GPIO_EXTI_Callback+0x84>)
 80049b2:	2108      	movs	r1, #8
 80049b4:	0018      	movs	r0, r3
 80049b6:	f002 fe83 	bl	80076c0 <HAL_GPIO_TogglePin>

	// disables interrupts for software debouncing
	HAL_NVIC_DisableIRQ(EXTI2_3_IRQn);
 80049ba:	2006      	movs	r0, #6
 80049bc:	f002 fb2d 	bl	800701a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 80049c0:	2007      	movs	r0, #7
 80049c2:	f002 fb2a 	bl	800701a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_3_IRQn);
 80049c6:	2006      	movs	r0, #6
 80049c8:	f002 fb44 	bl	8007054 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 80049cc:	2007      	movs	r0, #7
 80049ce:	f002 fb41 	bl	8007054 <HAL_NVIC_ClearPendingIRQ>

	// updates flags
	if (GPIO_Pin == BUTTON1) buttons.is1Pressed = 1;
 80049d2:	1dbb      	adds	r3, r7, #6
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	2b04      	cmp	r3, #4
 80049d8:	d102      	bne.n	80049e0 <HAL_GPIO_EXTI_Callback+0x3c>
 80049da:	4b14      	ldr	r3, [pc, #80]	; (8004a2c <HAL_GPIO_EXTI_Callback+0x88>)
 80049dc:	2201      	movs	r2, #1
 80049de:	701a      	strb	r2, [r3, #0]
	if (GPIO_Pin == BUTTON2) buttons.is2Pressed = 1;
 80049e0:	1dbb      	adds	r3, r7, #6
 80049e2:	881a      	ldrh	r2, [r3, #0]
 80049e4:	2380      	movs	r3, #128	; 0x80
 80049e6:	019b      	lsls	r3, r3, #6
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d102      	bne.n	80049f2 <HAL_GPIO_EXTI_Callback+0x4e>
 80049ec:	4b0f      	ldr	r3, [pc, #60]	; (8004a2c <HAL_GPIO_EXTI_Callback+0x88>)
 80049ee:	2201      	movs	r2, #1
 80049f0:	705a      	strb	r2, [r3, #1]
	if (GPIO_Pin == BUTTON3) buttons.is3Pressed = 1;
 80049f2:	1dbb      	adds	r3, r7, #6
 80049f4:	881a      	ldrh	r2, [r3, #0]
 80049f6:	2380      	movs	r3, #128	; 0x80
 80049f8:	01db      	lsls	r3, r3, #7
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d102      	bne.n	8004a04 <HAL_GPIO_EXTI_Callback+0x60>
 80049fe:	4b0b      	ldr	r3, [pc, #44]	; (8004a2c <HAL_GPIO_EXTI_Callback+0x88>)
 8004a00:	2201      	movs	r2, #1
 8004a02:	709a      	strb	r2, [r3, #2]
	if (GPIO_Pin == BUTTON4) buttons.is4Pressed = 1;
 8004a04:	1dbb      	adds	r3, r7, #6
 8004a06:	881a      	ldrh	r2, [r3, #0]
 8004a08:	2380      	movs	r3, #128	; 0x80
 8004a0a:	021b      	lsls	r3, r3, #8
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d102      	bne.n	8004a16 <HAL_GPIO_EXTI_Callback+0x72>
 8004a10:	4b06      	ldr	r3, [pc, #24]	; (8004a2c <HAL_GPIO_EXTI_Callback+0x88>)
 8004a12:	2201      	movs	r2, #1
 8004a14:	70da      	strb	r2, [r3, #3]

	// runs timer for software debouncing delay
	HAL_TIM_Base_Start_IT(&htim6);
 8004a16:	4b06      	ldr	r3, [pc, #24]	; (8004a30 <HAL_GPIO_EXTI_Callback+0x8c>)
 8004a18:	0018      	movs	r0, r3
 8004a1a:	f005 fa23 	bl	8009e64 <HAL_TIM_Base_Start_IT>
}
 8004a1e:	46c0      	nop			; (mov r8, r8)
 8004a20:	46bd      	mov	sp, r7
 8004a22:	b002      	add	sp, #8
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	46c0      	nop			; (mov r8, r8)
 8004a28:	50000400 	.word	0x50000400
 8004a2c:	20000190 	.word	0x20000190
 8004a30:	20000154 	.word	0x20000154

08004a34 <updateState>:

//
void updateState(RTC_HandleTypeDef *hrtc, TIM_HandleTypeDef *timerStopwatchTim, TIM_HandleTypeDef *motorBacklightTim, TIM_HandleTypeDef *buttonTim, SPI_HandleTypeDef *hspi) {
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	603b      	str	r3, [r7, #0]
	if (buttons.is1Pressed || buttons.is2Pressed || buttons.is3Pressed || buttons.is4Pressed) {
 8004a42:	4bbf      	ldr	r3, [pc, #764]	; (8004d40 <updateState+0x30c>)
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10f      	bne.n	8004a6c <updateState+0x38>
 8004a4c:	4bbc      	ldr	r3, [pc, #752]	; (8004d40 <updateState+0x30c>)
 8004a4e:	785b      	ldrb	r3, [r3, #1]
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10a      	bne.n	8004a6c <updateState+0x38>
 8004a56:	4bba      	ldr	r3, [pc, #744]	; (8004d40 <updateState+0x30c>)
 8004a58:	789b      	ldrb	r3, [r3, #2]
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d105      	bne.n	8004a6c <updateState+0x38>
 8004a60:	4bb7      	ldr	r3, [pc, #732]	; (8004d40 <updateState+0x30c>)
 8004a62:	78db      	ldrb	r3, [r3, #3]
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d100      	bne.n	8004a6c <updateState+0x38>
 8004a6a:	e1ab      	b.n	8004dc4 <updateState+0x390>

		// button 1 changes the face on screen.
		if (buttons.is1Pressed) {
 8004a6c:	4bb4      	ldr	r3, [pc, #720]	; (8004d40 <updateState+0x30c>)
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d02d      	beq.n	8004ad2 <updateState+0x9e>
			isFaceBeingChanged = 1;
 8004a76:	4bb3      	ldr	r3, [pc, #716]	; (8004d44 <updateState+0x310>)
 8004a78:	2201      	movs	r2, #1
 8004a7a:	701a      	strb	r2, [r3, #0]
			faceOnDisplay = (faceOnDisplay + 1) % NUM_FACES;
 8004a7c:	4bb2      	ldr	r3, [pc, #712]	; (8004d48 <updateState+0x314>)
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	3301      	adds	r3, #1
 8004a82:	4ab2      	ldr	r2, [pc, #712]	; (8004d4c <updateState+0x318>)
 8004a84:	4013      	ands	r3, r2
 8004a86:	d504      	bpl.n	8004a92 <updateState+0x5e>
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	2204      	movs	r2, #4
 8004a8c:	4252      	negs	r2, r2
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	3301      	adds	r3, #1
 8004a92:	b2da      	uxtb	r2, r3
 8004a94:	4bac      	ldr	r3, [pc, #688]	; (8004d48 <updateState+0x314>)
 8004a96:	701a      	strb	r2, [r3, #0]
			switch (faceOnDisplay) {
 8004a98:	4bab      	ldr	r3, [pc, #684]	; (8004d48 <updateState+0x314>)
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d00c      	beq.n	8004aba <updateState+0x86>
 8004aa0:	dc02      	bgt.n	8004aa8 <updateState+0x74>
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d005      	beq.n	8004ab2 <updateState+0x7e>
				case faceClock: updateFace.clock = 1; break;
				case faceTimer: updateFace.timer = 1; break;
				case faceAlarm: updateFace.alarm = 1; break;
				case faceStopwatch: updateFace.stopwatch = 1; break;
				default: break;
 8004aa6:	e015      	b.n	8004ad4 <updateState+0xa0>
			switch (faceOnDisplay) {
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d00a      	beq.n	8004ac2 <updateState+0x8e>
 8004aac:	2b03      	cmp	r3, #3
 8004aae:	d00c      	beq.n	8004aca <updateState+0x96>
				default: break;
 8004ab0:	e010      	b.n	8004ad4 <updateState+0xa0>
				case faceClock: updateFace.clock = 1; break;
 8004ab2:	4ba7      	ldr	r3, [pc, #668]	; (8004d50 <updateState+0x31c>)
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	701a      	strb	r2, [r3, #0]
 8004ab8:	e00c      	b.n	8004ad4 <updateState+0xa0>
				case faceTimer: updateFace.timer = 1; break;
 8004aba:	4ba5      	ldr	r3, [pc, #660]	; (8004d50 <updateState+0x31c>)
 8004abc:	2201      	movs	r2, #1
 8004abe:	705a      	strb	r2, [r3, #1]
 8004ac0:	e008      	b.n	8004ad4 <updateState+0xa0>
				case faceAlarm: updateFace.alarm = 1; break;
 8004ac2:	4ba3      	ldr	r3, [pc, #652]	; (8004d50 <updateState+0x31c>)
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	709a      	strb	r2, [r3, #2]
 8004ac8:	e004      	b.n	8004ad4 <updateState+0xa0>
				case faceStopwatch: updateFace.stopwatch = 1; break;
 8004aca:	4ba1      	ldr	r3, [pc, #644]	; (8004d50 <updateState+0x31c>)
 8004acc:	2201      	movs	r2, #1
 8004ace:	70da      	strb	r2, [r3, #3]
 8004ad0:	e000      	b.n	8004ad4 <updateState+0xa0>
			}
		}
 8004ad2:	46c0      	nop			; (mov r8, r8)

		// button combo: press 2 and 3 alternatively 5 times to reinit display.
		// needed since screen often turns white when its power supply is rustled, and there's no way to show the information
		static uint8_t s = 0;
		switch(s) {
 8004ad4:	4b9f      	ldr	r3, [pc, #636]	; (8004d54 <updateState+0x320>)
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	2b09      	cmp	r3, #9
 8004ada:	d900      	bls.n	8004ade <updateState+0xaa>
 8004adc:	e11b      	b.n	8004d16 <updateState+0x2e2>
 8004ade:	009a      	lsls	r2, r3, #2
 8004ae0:	4b9d      	ldr	r3, [pc, #628]	; (8004d58 <updateState+0x324>)
 8004ae2:	18d3      	adds	r3, r2, r3
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	469f      	mov	pc, r3
			case 0:	if (buttons.is2Pressed) s++; break;
 8004ae8:	4b95      	ldr	r3, [pc, #596]	; (8004d40 <updateState+0x30c>)
 8004aea:	785b      	ldrb	r3, [r3, #1]
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d100      	bne.n	8004af4 <updateState+0xc0>
 8004af2:	e112      	b.n	8004d1a <updateState+0x2e6>
 8004af4:	4b97      	ldr	r3, [pc, #604]	; (8004d54 <updateState+0x320>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	3301      	adds	r3, #1
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	4b95      	ldr	r3, [pc, #596]	; (8004d54 <updateState+0x320>)
 8004afe:	701a      	strb	r2, [r3, #0]
 8004b00:	e10b      	b.n	8004d1a <updateState+0x2e6>
			case 1: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8004b02:	4b8f      	ldr	r3, [pc, #572]	; (8004d40 <updateState+0x30c>)
 8004b04:	789b      	ldrb	r3, [r3, #2]
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d006      	beq.n	8004b1a <updateState+0xe6>
 8004b0c:	4b91      	ldr	r3, [pc, #580]	; (8004d54 <updateState+0x320>)
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	3301      	adds	r3, #1
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	4b8f      	ldr	r3, [pc, #572]	; (8004d54 <updateState+0x320>)
 8004b16:	701a      	strb	r2, [r3, #0]
 8004b18:	e101      	b.n	8004d1e <updateState+0x2ea>
 8004b1a:	4b89      	ldr	r3, [pc, #548]	; (8004d40 <updateState+0x30c>)
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10a      	bne.n	8004b3a <updateState+0x106>
 8004b24:	4b86      	ldr	r3, [pc, #536]	; (8004d40 <updateState+0x30c>)
 8004b26:	785b      	ldrb	r3, [r3, #1]
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d105      	bne.n	8004b3a <updateState+0x106>
 8004b2e:	4b84      	ldr	r3, [pc, #528]	; (8004d40 <updateState+0x30c>)
 8004b30:	78db      	ldrb	r3, [r3, #3]
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d100      	bne.n	8004b3a <updateState+0x106>
 8004b38:	e0f1      	b.n	8004d1e <updateState+0x2ea>
 8004b3a:	4b86      	ldr	r3, [pc, #536]	; (8004d54 <updateState+0x320>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	701a      	strb	r2, [r3, #0]
 8004b40:	e0ed      	b.n	8004d1e <updateState+0x2ea>
			case 2: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8004b42:	4b7f      	ldr	r3, [pc, #508]	; (8004d40 <updateState+0x30c>)
 8004b44:	785b      	ldrb	r3, [r3, #1]
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d006      	beq.n	8004b5a <updateState+0x126>
 8004b4c:	4b81      	ldr	r3, [pc, #516]	; (8004d54 <updateState+0x320>)
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	3301      	adds	r3, #1
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	4b7f      	ldr	r3, [pc, #508]	; (8004d54 <updateState+0x320>)
 8004b56:	701a      	strb	r2, [r3, #0]
 8004b58:	e0e3      	b.n	8004d22 <updateState+0x2ee>
 8004b5a:	4b79      	ldr	r3, [pc, #484]	; (8004d40 <updateState+0x30c>)
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10a      	bne.n	8004b7a <updateState+0x146>
 8004b64:	4b76      	ldr	r3, [pc, #472]	; (8004d40 <updateState+0x30c>)
 8004b66:	789b      	ldrb	r3, [r3, #2]
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d105      	bne.n	8004b7a <updateState+0x146>
 8004b6e:	4b74      	ldr	r3, [pc, #464]	; (8004d40 <updateState+0x30c>)
 8004b70:	78db      	ldrb	r3, [r3, #3]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d100      	bne.n	8004b7a <updateState+0x146>
 8004b78:	e0d3      	b.n	8004d22 <updateState+0x2ee>
 8004b7a:	4b76      	ldr	r3, [pc, #472]	; (8004d54 <updateState+0x320>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	701a      	strb	r2, [r3, #0]
 8004b80:	e0cf      	b.n	8004d22 <updateState+0x2ee>
			case 3: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8004b82:	4b6f      	ldr	r3, [pc, #444]	; (8004d40 <updateState+0x30c>)
 8004b84:	789b      	ldrb	r3, [r3, #2]
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d006      	beq.n	8004b9a <updateState+0x166>
 8004b8c:	4b71      	ldr	r3, [pc, #452]	; (8004d54 <updateState+0x320>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	3301      	adds	r3, #1
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	4b6f      	ldr	r3, [pc, #444]	; (8004d54 <updateState+0x320>)
 8004b96:	701a      	strb	r2, [r3, #0]
 8004b98:	e0c5      	b.n	8004d26 <updateState+0x2f2>
 8004b9a:	4b69      	ldr	r3, [pc, #420]	; (8004d40 <updateState+0x30c>)
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10a      	bne.n	8004bba <updateState+0x186>
 8004ba4:	4b66      	ldr	r3, [pc, #408]	; (8004d40 <updateState+0x30c>)
 8004ba6:	785b      	ldrb	r3, [r3, #1]
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d105      	bne.n	8004bba <updateState+0x186>
 8004bae:	4b64      	ldr	r3, [pc, #400]	; (8004d40 <updateState+0x30c>)
 8004bb0:	78db      	ldrb	r3, [r3, #3]
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d100      	bne.n	8004bba <updateState+0x186>
 8004bb8:	e0b5      	b.n	8004d26 <updateState+0x2f2>
 8004bba:	4b66      	ldr	r3, [pc, #408]	; (8004d54 <updateState+0x320>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	701a      	strb	r2, [r3, #0]
 8004bc0:	e0b1      	b.n	8004d26 <updateState+0x2f2>
			case 4: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8004bc2:	4b5f      	ldr	r3, [pc, #380]	; (8004d40 <updateState+0x30c>)
 8004bc4:	785b      	ldrb	r3, [r3, #1]
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d006      	beq.n	8004bda <updateState+0x1a6>
 8004bcc:	4b61      	ldr	r3, [pc, #388]	; (8004d54 <updateState+0x320>)
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	4b5f      	ldr	r3, [pc, #380]	; (8004d54 <updateState+0x320>)
 8004bd6:	701a      	strb	r2, [r3, #0]
 8004bd8:	e0a7      	b.n	8004d2a <updateState+0x2f6>
 8004bda:	4b59      	ldr	r3, [pc, #356]	; (8004d40 <updateState+0x30c>)
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10a      	bne.n	8004bfa <updateState+0x1c6>
 8004be4:	4b56      	ldr	r3, [pc, #344]	; (8004d40 <updateState+0x30c>)
 8004be6:	789b      	ldrb	r3, [r3, #2]
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d105      	bne.n	8004bfa <updateState+0x1c6>
 8004bee:	4b54      	ldr	r3, [pc, #336]	; (8004d40 <updateState+0x30c>)
 8004bf0:	78db      	ldrb	r3, [r3, #3]
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d100      	bne.n	8004bfa <updateState+0x1c6>
 8004bf8:	e097      	b.n	8004d2a <updateState+0x2f6>
 8004bfa:	4b56      	ldr	r3, [pc, #344]	; (8004d54 <updateState+0x320>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	701a      	strb	r2, [r3, #0]
 8004c00:	e093      	b.n	8004d2a <updateState+0x2f6>
			case 5: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8004c02:	4b4f      	ldr	r3, [pc, #316]	; (8004d40 <updateState+0x30c>)
 8004c04:	789b      	ldrb	r3, [r3, #2]
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d006      	beq.n	8004c1a <updateState+0x1e6>
 8004c0c:	4b51      	ldr	r3, [pc, #324]	; (8004d54 <updateState+0x320>)
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	3301      	adds	r3, #1
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	4b4f      	ldr	r3, [pc, #316]	; (8004d54 <updateState+0x320>)
 8004c16:	701a      	strb	r2, [r3, #0]
 8004c18:	e089      	b.n	8004d2e <updateState+0x2fa>
 8004c1a:	4b49      	ldr	r3, [pc, #292]	; (8004d40 <updateState+0x30c>)
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10a      	bne.n	8004c3a <updateState+0x206>
 8004c24:	4b46      	ldr	r3, [pc, #280]	; (8004d40 <updateState+0x30c>)
 8004c26:	785b      	ldrb	r3, [r3, #1]
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d105      	bne.n	8004c3a <updateState+0x206>
 8004c2e:	4b44      	ldr	r3, [pc, #272]	; (8004d40 <updateState+0x30c>)
 8004c30:	78db      	ldrb	r3, [r3, #3]
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d100      	bne.n	8004c3a <updateState+0x206>
 8004c38:	e079      	b.n	8004d2e <updateState+0x2fa>
 8004c3a:	4b46      	ldr	r3, [pc, #280]	; (8004d54 <updateState+0x320>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	701a      	strb	r2, [r3, #0]
 8004c40:	e075      	b.n	8004d2e <updateState+0x2fa>
			case 6: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8004c42:	4b3f      	ldr	r3, [pc, #252]	; (8004d40 <updateState+0x30c>)
 8004c44:	785b      	ldrb	r3, [r3, #1]
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d006      	beq.n	8004c5a <updateState+0x226>
 8004c4c:	4b41      	ldr	r3, [pc, #260]	; (8004d54 <updateState+0x320>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	3301      	adds	r3, #1
 8004c52:	b2da      	uxtb	r2, r3
 8004c54:	4b3f      	ldr	r3, [pc, #252]	; (8004d54 <updateState+0x320>)
 8004c56:	701a      	strb	r2, [r3, #0]
 8004c58:	e06b      	b.n	8004d32 <updateState+0x2fe>
 8004c5a:	4b39      	ldr	r3, [pc, #228]	; (8004d40 <updateState+0x30c>)
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d109      	bne.n	8004c78 <updateState+0x244>
 8004c64:	4b36      	ldr	r3, [pc, #216]	; (8004d40 <updateState+0x30c>)
 8004c66:	789b      	ldrb	r3, [r3, #2]
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d104      	bne.n	8004c78 <updateState+0x244>
 8004c6e:	4b34      	ldr	r3, [pc, #208]	; (8004d40 <updateState+0x30c>)
 8004c70:	78db      	ldrb	r3, [r3, #3]
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d05c      	beq.n	8004d32 <updateState+0x2fe>
 8004c78:	4b36      	ldr	r3, [pc, #216]	; (8004d54 <updateState+0x320>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	701a      	strb	r2, [r3, #0]
 8004c7e:	e058      	b.n	8004d32 <updateState+0x2fe>
			case 7: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8004c80:	4b2f      	ldr	r3, [pc, #188]	; (8004d40 <updateState+0x30c>)
 8004c82:	789b      	ldrb	r3, [r3, #2]
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d006      	beq.n	8004c98 <updateState+0x264>
 8004c8a:	4b32      	ldr	r3, [pc, #200]	; (8004d54 <updateState+0x320>)
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	b2da      	uxtb	r2, r3
 8004c92:	4b30      	ldr	r3, [pc, #192]	; (8004d54 <updateState+0x320>)
 8004c94:	701a      	strb	r2, [r3, #0]
 8004c96:	e04e      	b.n	8004d36 <updateState+0x302>
 8004c98:	4b29      	ldr	r3, [pc, #164]	; (8004d40 <updateState+0x30c>)
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d109      	bne.n	8004cb6 <updateState+0x282>
 8004ca2:	4b27      	ldr	r3, [pc, #156]	; (8004d40 <updateState+0x30c>)
 8004ca4:	785b      	ldrb	r3, [r3, #1]
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d104      	bne.n	8004cb6 <updateState+0x282>
 8004cac:	4b24      	ldr	r3, [pc, #144]	; (8004d40 <updateState+0x30c>)
 8004cae:	78db      	ldrb	r3, [r3, #3]
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d03f      	beq.n	8004d36 <updateState+0x302>
 8004cb6:	4b27      	ldr	r3, [pc, #156]	; (8004d54 <updateState+0x320>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	701a      	strb	r2, [r3, #0]
 8004cbc:	e03b      	b.n	8004d36 <updateState+0x302>
			case 8: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8004cbe:	4b20      	ldr	r3, [pc, #128]	; (8004d40 <updateState+0x30c>)
 8004cc0:	785b      	ldrb	r3, [r3, #1]
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d006      	beq.n	8004cd6 <updateState+0x2a2>
 8004cc8:	4b22      	ldr	r3, [pc, #136]	; (8004d54 <updateState+0x320>)
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	b2da      	uxtb	r2, r3
 8004cd0:	4b20      	ldr	r3, [pc, #128]	; (8004d54 <updateState+0x320>)
 8004cd2:	701a      	strb	r2, [r3, #0]
 8004cd4:	e031      	b.n	8004d3a <updateState+0x306>
 8004cd6:	4b1a      	ldr	r3, [pc, #104]	; (8004d40 <updateState+0x30c>)
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d109      	bne.n	8004cf4 <updateState+0x2c0>
 8004ce0:	4b17      	ldr	r3, [pc, #92]	; (8004d40 <updateState+0x30c>)
 8004ce2:	789b      	ldrb	r3, [r3, #2]
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d104      	bne.n	8004cf4 <updateState+0x2c0>
 8004cea:	4b15      	ldr	r3, [pc, #84]	; (8004d40 <updateState+0x30c>)
 8004cec:	78db      	ldrb	r3, [r3, #3]
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d022      	beq.n	8004d3a <updateState+0x306>
 8004cf4:	4b17      	ldr	r3, [pc, #92]	; (8004d54 <updateState+0x320>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	701a      	strb	r2, [r3, #0]
 8004cfa:	e01e      	b.n	8004d3a <updateState+0x306>
			case 9: if (buttons.is3Pressed) {TFT_startup(hspi); s = 0;} break;
 8004cfc:	4b10      	ldr	r3, [pc, #64]	; (8004d40 <updateState+0x30c>)
 8004cfe:	789b      	ldrb	r3, [r3, #2]
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d02a      	beq.n	8004d5c <updateState+0x328>
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	0018      	movs	r0, r3
 8004d0a:	f7fc fdff 	bl	800190c <TFT_startup>
 8004d0e:	4b11      	ldr	r3, [pc, #68]	; (8004d54 <updateState+0x320>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	701a      	strb	r2, [r3, #0]
 8004d14:	e022      	b.n	8004d5c <updateState+0x328>
			default: break;
 8004d16:	46c0      	nop			; (mov r8, r8)
 8004d18:	e021      	b.n	8004d5e <updateState+0x32a>
			case 0:	if (buttons.is2Pressed) s++; break;
 8004d1a:	46c0      	nop			; (mov r8, r8)
 8004d1c:	e01f      	b.n	8004d5e <updateState+0x32a>
			case 1: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8004d1e:	46c0      	nop			; (mov r8, r8)
 8004d20:	e01d      	b.n	8004d5e <updateState+0x32a>
			case 2: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8004d22:	46c0      	nop			; (mov r8, r8)
 8004d24:	e01b      	b.n	8004d5e <updateState+0x32a>
			case 3: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8004d26:	46c0      	nop			; (mov r8, r8)
 8004d28:	e019      	b.n	8004d5e <updateState+0x32a>
			case 4: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8004d2a:	46c0      	nop			; (mov r8, r8)
 8004d2c:	e017      	b.n	8004d5e <updateState+0x32a>
			case 5: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8004d2e:	46c0      	nop			; (mov r8, r8)
 8004d30:	e015      	b.n	8004d5e <updateState+0x32a>
			case 6: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8004d32:	46c0      	nop			; (mov r8, r8)
 8004d34:	e013      	b.n	8004d5e <updateState+0x32a>
			case 7: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8004d36:	46c0      	nop			; (mov r8, r8)
 8004d38:	e011      	b.n	8004d5e <updateState+0x32a>
			case 8: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8004d3a:	46c0      	nop			; (mov r8, r8)
 8004d3c:	e00f      	b.n	8004d5e <updateState+0x32a>
 8004d3e:	46c0      	nop			; (mov r8, r8)
 8004d40:	20000190 	.word	0x20000190
 8004d44:	20000068 	.word	0x20000068
 8004d48:	20000134 	.word	0x20000134
 8004d4c:	80000003 	.word	0x80000003
 8004d50:	20000144 	.word	0x20000144
 8004d54:	20000135 	.word	0x20000135
 8004d58:	0800bf44 	.word	0x0800bf44
			case 9: if (buttons.is3Pressed) {TFT_startup(hspi); s = 0;} break;
 8004d5c:	46c0      	nop			; (mov r8, r8)
		}

		// run helper functions when their face is on screen
		if (faceOnDisplay == faceClock) updateClockState(hrtc);
 8004d5e:	4b1b      	ldr	r3, [pc, #108]	; (8004dcc <updateState+0x398>)
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d104      	bne.n	8004d70 <updateState+0x33c>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	0018      	movs	r0, r3
 8004d6a:	f000 f833 	bl	8004dd4 <updateClockState>
 8004d6e:	e01d      	b.n	8004dac <updateState+0x378>
		else if (faceOnDisplay == faceTimer) updateTimerState(timerStopwatchTim, motorBacklightTim);
 8004d70:	4b16      	ldr	r3, [pc, #88]	; (8004dcc <updateState+0x398>)
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d106      	bne.n	8004d86 <updateState+0x352>
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	0011      	movs	r1, r2
 8004d7e:	0018      	movs	r0, r3
 8004d80:	f000 f970 	bl	8005064 <updateTimerState>
 8004d84:	e012      	b.n	8004dac <updateState+0x378>
		else if (faceOnDisplay == faceAlarm) updateAlarmState(hrtc, motorBacklightTim);
 8004d86:	4b11      	ldr	r3, [pc, #68]	; (8004dcc <updateState+0x398>)
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d106      	bne.n	8004d9c <updateState+0x368>
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	0011      	movs	r1, r2
 8004d94:	0018      	movs	r0, r3
 8004d96:	f000 fabb 	bl	8005310 <updateAlarmState>
 8004d9a:	e007      	b.n	8004dac <updateState+0x378>
		else if (faceOnDisplay == faceStopwatch) updateStopwatchState(timerStopwatchTim);
 8004d9c:	4b0b      	ldr	r3, [pc, #44]	; (8004dcc <updateState+0x398>)
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	2b03      	cmp	r3, #3
 8004da2:	d103      	bne.n	8004dac <updateState+0x378>
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	0018      	movs	r0, r3
 8004da8:	f000 fbe6 	bl	8005578 <updateStopwatchState>

		// flags cleared only when state code has finished executing once
		buttons.is1Pressed = buttons.is2Pressed = buttons.is3Pressed = buttons.is4Pressed = 0;
 8004dac:	2200      	movs	r2, #0
 8004dae:	4b08      	ldr	r3, [pc, #32]	; (8004dd0 <updateState+0x39c>)
 8004db0:	1c11      	adds	r1, r2, #0
 8004db2:	70d9      	strb	r1, [r3, #3]
 8004db4:	4b06      	ldr	r3, [pc, #24]	; (8004dd0 <updateState+0x39c>)
 8004db6:	1c11      	adds	r1, r2, #0
 8004db8:	7099      	strb	r1, [r3, #2]
 8004dba:	4b05      	ldr	r3, [pc, #20]	; (8004dd0 <updateState+0x39c>)
 8004dbc:	1c11      	adds	r1, r2, #0
 8004dbe:	7059      	strb	r1, [r3, #1]
 8004dc0:	4b03      	ldr	r3, [pc, #12]	; (8004dd0 <updateState+0x39c>)
 8004dc2:	701a      	strb	r2, [r3, #0]
	}
}
 8004dc4:	46c0      	nop			; (mov r8, r8)
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	b004      	add	sp, #16
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	20000134 	.word	0x20000134
 8004dd0:	20000190 	.word	0x20000190

08004dd4 <updateClockState>:
 *   button 2 changes value up
 *   button 3 changes value down
 *   button 4 changes field being set. changes between min, hr, year, month, and day. once it finishes cycling through it once,
 *     the clock is updated and we revert back to default mode.
 */
void updateClockState(RTC_HandleTypeDef *hrtc) {
 8004dd4:	b590      	push	{r4, r7, lr}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
	// change fields up, do nothing if not setting clock
	if (buttons.is2Pressed && clockVars.isBeingSet) {
 8004ddc:	4b9c      	ldr	r3, [pc, #624]	; (8005050 <updateClockState+0x27c>)
 8004dde:	785b      	ldrb	r3, [r3, #1]
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d060      	beq.n	8004ea8 <updateClockState+0xd4>
 8004de6:	4b9b      	ldr	r3, [pc, #620]	; (8005054 <updateClockState+0x280>)
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d05c      	beq.n	8004ea8 <updateClockState+0xd4>
		buttons.is2Pressed = 0;
 8004dee:	4b98      	ldr	r3, [pc, #608]	; (8005050 <updateClockState+0x27c>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	705a      	strb	r2, [r3, #1]
		updateFace.clock = 1;
 8004df4:	4b98      	ldr	r3, [pc, #608]	; (8005058 <updateClockState+0x284>)
 8004df6:	2201      	movs	r2, #1
 8004df8:	701a      	strb	r2, [r3, #0]
		switch (clockVars.fieldBeingSet) {
 8004dfa:	4b96      	ldr	r3, [pc, #600]	; (8005054 <updateClockState+0x280>)
 8004dfc:	785b      	ldrb	r3, [r3, #1]
 8004dfe:	2b05      	cmp	r3, #5
 8004e00:	d854      	bhi.n	8004eac <updateClockState+0xd8>
 8004e02:	009a      	lsls	r2, r3, #2
 8004e04:	4b95      	ldr	r3, [pc, #596]	; (800505c <updateClockState+0x288>)
 8004e06:	18d3      	adds	r3, r2, r3
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	469f      	mov	pc, r3
			case 1: clockVars.timeToSet->min = (clockVars.timeToSet->min+1) % 60; break;
 8004e0c:	4b91      	ldr	r3, [pc, #580]	; (8005054 <updateClockState+0x280>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	785b      	ldrb	r3, [r3, #1]
 8004e12:	3301      	adds	r3, #1
 8004e14:	213c      	movs	r1, #60	; 0x3c
 8004e16:	0018      	movs	r0, r3
 8004e18:	f7fb faee 	bl	80003f8 <__aeabi_idivmod>
 8004e1c:	000b      	movs	r3, r1
 8004e1e:	001a      	movs	r2, r3
 8004e20:	4b8c      	ldr	r3, [pc, #560]	; (8005054 <updateClockState+0x280>)
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	b2d2      	uxtb	r2, r2
 8004e26:	705a      	strb	r2, [r3, #1]
 8004e28:	e041      	b.n	8004eae <updateClockState+0xda>
			case 2: clockVars.timeToSet->hr = (clockVars.timeToSet->hr+1) % 24; break;
 8004e2a:	4b8a      	ldr	r3, [pc, #552]	; (8005054 <updateClockState+0x280>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	3301      	adds	r3, #1
 8004e32:	2118      	movs	r1, #24
 8004e34:	0018      	movs	r0, r3
 8004e36:	f7fb fadf 	bl	80003f8 <__aeabi_idivmod>
 8004e3a:	000b      	movs	r3, r1
 8004e3c:	001a      	movs	r2, r3
 8004e3e:	4b85      	ldr	r3, [pc, #532]	; (8005054 <updateClockState+0x280>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	b2d2      	uxtb	r2, r2
 8004e44:	701a      	strb	r2, [r3, #0]
 8004e46:	e032      	b.n	8004eae <updateClockState+0xda>
			case 3: clockVars.dateToSet->yr++; break;		// supposed to be between large numbers. no need for bounds checking
 8004e48:	4b82      	ldr	r3, [pc, #520]	; (8005054 <updateClockState+0x280>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	881a      	ldrh	r2, [r3, #0]
 8004e4e:	3201      	adds	r2, #1
 8004e50:	b292      	uxth	r2, r2
 8004e52:	801a      	strh	r2, [r3, #0]
 8004e54:	e02b      	b.n	8004eae <updateClockState+0xda>
			case 4: clockVars.dateToSet->month = (clockVars.dateToSet->month) % 12 + 1; break;
 8004e56:	4b7f      	ldr	r3, [pc, #508]	; (8005054 <updateClockState+0x280>)
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	789b      	ldrb	r3, [r3, #2]
 8004e5c:	210c      	movs	r1, #12
 8004e5e:	0018      	movs	r0, r3
 8004e60:	f7fb f9e0 	bl	8000224 <__aeabi_uidivmod>
 8004e64:	000b      	movs	r3, r1
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	4b7a      	ldr	r3, [pc, #488]	; (8005054 <updateClockState+0x280>)
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	3201      	adds	r2, #1
 8004e6e:	b2d2      	uxtb	r2, r2
 8004e70:	709a      	strb	r2, [r3, #2]
 8004e72:	e01c      	b.n	8004eae <updateClockState+0xda>
			case 5: clockVars.dateToSet->date = ((clockVars.dateToSet->date) % maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr)) + 1; break;
 8004e74:	4b77      	ldr	r3, [pc, #476]	; (8005054 <updateClockState+0x280>)
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	78dc      	ldrb	r4, [r3, #3]
 8004e7a:	4b76      	ldr	r3, [pc, #472]	; (8005054 <updateClockState+0x280>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	789a      	ldrb	r2, [r3, #2]
 8004e80:	4b74      	ldr	r3, [pc, #464]	; (8005054 <updateClockState+0x280>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	0019      	movs	r1, r3
 8004e88:	0010      	movs	r0, r2
 8004e8a:	f7fe fa8f 	bl	80033ac <maxDaysInMonth>
 8004e8e:	0003      	movs	r3, r0
 8004e90:	0019      	movs	r1, r3
 8004e92:	0020      	movs	r0, r4
 8004e94:	f7fb f9c6 	bl	8000224 <__aeabi_uidivmod>
 8004e98:	000b      	movs	r3, r1
 8004e9a:	b2da      	uxtb	r2, r3
 8004e9c:	4b6d      	ldr	r3, [pc, #436]	; (8005054 <updateClockState+0x280>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	3201      	adds	r2, #1
 8004ea2:	b2d2      	uxtb	r2, r2
 8004ea4:	70da      	strb	r2, [r3, #3]
 8004ea6:	e002      	b.n	8004eae <updateClockState+0xda>
			default: break;
		}
	}
 8004ea8:	46c0      	nop			; (mov r8, r8)
 8004eaa:	e000      	b.n	8004eae <updateClockState+0xda>
			default: break;
 8004eac:	46c0      	nop			; (mov r8, r8)
	// change fields down, do nothing if not setting clock
	if (buttons.is3Pressed && clockVars.isBeingSet) {
 8004eae:	4b68      	ldr	r3, [pc, #416]	; (8005050 <updateClockState+0x27c>)
 8004eb0:	789b      	ldrb	r3, [r3, #2]
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d066      	beq.n	8004f86 <updateClockState+0x1b2>
 8004eb8:	4b66      	ldr	r3, [pc, #408]	; (8005054 <updateClockState+0x280>)
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d062      	beq.n	8004f86 <updateClockState+0x1b2>
		buttons.is3Pressed = 0;
 8004ec0:	4b63      	ldr	r3, [pc, #396]	; (8005050 <updateClockState+0x27c>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	709a      	strb	r2, [r3, #2]
		updateFace.clock = 1;
 8004ec6:	4b64      	ldr	r3, [pc, #400]	; (8005058 <updateClockState+0x284>)
 8004ec8:	2201      	movs	r2, #1
 8004eca:	701a      	strb	r2, [r3, #0]
		switch (clockVars.fieldBeingSet) {
 8004ecc:	4b61      	ldr	r3, [pc, #388]	; (8005054 <updateClockState+0x280>)
 8004ece:	785b      	ldrb	r3, [r3, #1]
 8004ed0:	2b05      	cmp	r3, #5
 8004ed2:	d85a      	bhi.n	8004f8a <updateClockState+0x1b6>
 8004ed4:	009a      	lsls	r2, r3, #2
 8004ed6:	4b62      	ldr	r3, [pc, #392]	; (8005060 <updateClockState+0x28c>)
 8004ed8:	18d3      	adds	r3, r2, r3
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	469f      	mov	pc, r3
			case 1:
				if (clockVars.timeToSet->min == 0) clockVars.timeToSet->min = 59;
 8004ede:	4b5d      	ldr	r3, [pc, #372]	; (8005054 <updateClockState+0x280>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	785b      	ldrb	r3, [r3, #1]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d104      	bne.n	8004ef2 <updateClockState+0x11e>
 8004ee8:	4b5a      	ldr	r3, [pc, #360]	; (8005054 <updateClockState+0x280>)
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	223b      	movs	r2, #59	; 0x3b
 8004eee:	705a      	strb	r2, [r3, #1]
				else clockVars.timeToSet->min--;
				break;
 8004ef0:	e04c      	b.n	8004f8c <updateClockState+0x1b8>
				else clockVars.timeToSet->min--;
 8004ef2:	4b58      	ldr	r3, [pc, #352]	; (8005054 <updateClockState+0x280>)
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	785a      	ldrb	r2, [r3, #1]
 8004ef8:	3a01      	subs	r2, #1
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	705a      	strb	r2, [r3, #1]
				break;
 8004efe:	e045      	b.n	8004f8c <updateClockState+0x1b8>
			case 2:
				if (clockVars.timeToSet->hr == 0) clockVars.timeToSet->hr = 23;
 8004f00:	4b54      	ldr	r3, [pc, #336]	; (8005054 <updateClockState+0x280>)
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d104      	bne.n	8004f14 <updateClockState+0x140>
 8004f0a:	4b52      	ldr	r3, [pc, #328]	; (8005054 <updateClockState+0x280>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	2217      	movs	r2, #23
 8004f10:	701a      	strb	r2, [r3, #0]
				else clockVars.timeToSet->hr--;
				break;
 8004f12:	e03b      	b.n	8004f8c <updateClockState+0x1b8>
				else clockVars.timeToSet->hr--;
 8004f14:	4b4f      	ldr	r3, [pc, #316]	; (8005054 <updateClockState+0x280>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	781a      	ldrb	r2, [r3, #0]
 8004f1a:	3a01      	subs	r2, #1
 8004f1c:	b2d2      	uxtb	r2, r2
 8004f1e:	701a      	strb	r2, [r3, #0]
				break;
 8004f20:	e034      	b.n	8004f8c <updateClockState+0x1b8>
			case 3: clockVars.dateToSet->yr--; break;		// supposed to be from 1950-2050. no need to do bounds checking
 8004f22:	4b4c      	ldr	r3, [pc, #304]	; (8005054 <updateClockState+0x280>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	881a      	ldrh	r2, [r3, #0]
 8004f28:	3a01      	subs	r2, #1
 8004f2a:	b292      	uxth	r2, r2
 8004f2c:	801a      	strh	r2, [r3, #0]
 8004f2e:	e02d      	b.n	8004f8c <updateClockState+0x1b8>
			case 4: //clockVars.dateToSet->month = clockVars.dateToSet->month == 1 ? 12 : clockVars.dateToSet->month-1; break;
				if (clockVars.dateToSet->month == 1) clockVars.dateToSet->month = 12;
 8004f30:	4b48      	ldr	r3, [pc, #288]	; (8005054 <updateClockState+0x280>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	789b      	ldrb	r3, [r3, #2]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d104      	bne.n	8004f44 <updateClockState+0x170>
 8004f3a:	4b46      	ldr	r3, [pc, #280]	; (8005054 <updateClockState+0x280>)
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	220c      	movs	r2, #12
 8004f40:	709a      	strb	r2, [r3, #2]
				else clockVars.dateToSet->month--;
				break;
 8004f42:	e023      	b.n	8004f8c <updateClockState+0x1b8>
				else clockVars.dateToSet->month--;
 8004f44:	4b43      	ldr	r3, [pc, #268]	; (8005054 <updateClockState+0x280>)
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	789a      	ldrb	r2, [r3, #2]
 8004f4a:	3a01      	subs	r2, #1
 8004f4c:	b2d2      	uxtb	r2, r2
 8004f4e:	709a      	strb	r2, [r3, #2]
				break;
 8004f50:	e01c      	b.n	8004f8c <updateClockState+0x1b8>
			case 5:
				if (clockVars.dateToSet->date == 1) clockVars.dateToSet->date = maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr);
 8004f52:	4b40      	ldr	r3, [pc, #256]	; (8005054 <updateClockState+0x280>)
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	78db      	ldrb	r3, [r3, #3]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d10d      	bne.n	8004f78 <updateClockState+0x1a4>
 8004f5c:	4b3d      	ldr	r3, [pc, #244]	; (8005054 <updateClockState+0x280>)
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	789a      	ldrb	r2, [r3, #2]
 8004f62:	4b3c      	ldr	r3, [pc, #240]	; (8005054 <updateClockState+0x280>)
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	8819      	ldrh	r1, [r3, #0]
 8004f68:	4b3a      	ldr	r3, [pc, #232]	; (8005054 <updateClockState+0x280>)
 8004f6a:	685c      	ldr	r4, [r3, #4]
 8004f6c:	0010      	movs	r0, r2
 8004f6e:	f7fe fa1d 	bl	80033ac <maxDaysInMonth>
 8004f72:	0003      	movs	r3, r0
 8004f74:	70e3      	strb	r3, [r4, #3]
				else clockVars.dateToSet->date--;
				break;
 8004f76:	e009      	b.n	8004f8c <updateClockState+0x1b8>
				else clockVars.dateToSet->date--;
 8004f78:	4b36      	ldr	r3, [pc, #216]	; (8005054 <updateClockState+0x280>)
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	78da      	ldrb	r2, [r3, #3]
 8004f7e:	3a01      	subs	r2, #1
 8004f80:	b2d2      	uxtb	r2, r2
 8004f82:	70da      	strb	r2, [r3, #3]
				break;
 8004f84:	e002      	b.n	8004f8c <updateClockState+0x1b8>
			default: break;
		}
	}
 8004f86:	46c0      	nop			; (mov r8, r8)
 8004f88:	e000      	b.n	8004f8c <updateClockState+0x1b8>
			default: break;
 8004f8a:	46c0      	nop			; (mov r8, r8)
	// switches between setting mode and default mode. changes between different clock fields
	if (buttons.is4Pressed) {
 8004f8c:	4b30      	ldr	r3, [pc, #192]	; (8005050 <updateClockState+0x27c>)
 8004f8e:	78db      	ldrb	r3, [r3, #3]
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d057      	beq.n	8005046 <updateClockState+0x272>
		buttons.is4Pressed = 0;
 8004f96:	4b2e      	ldr	r3, [pc, #184]	; (8005050 <updateClockState+0x27c>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	70da      	strb	r2, [r3, #3]
		updateFace.clock = 1;
 8004f9c:	4b2e      	ldr	r3, [pc, #184]	; (8005058 <updateClockState+0x284>)
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	701a      	strb	r2, [r3, #0]
		clockVars.fieldBeingSet = (clockVars.fieldBeingSet + 1) % (NUM_CLOCKFIELDS + 1);
 8004fa2:	4b2c      	ldr	r3, [pc, #176]	; (8005054 <updateClockState+0x280>)
 8004fa4:	785b      	ldrb	r3, [r3, #1]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	2106      	movs	r1, #6
 8004faa:	0018      	movs	r0, r3
 8004fac:	f7fb fa24 	bl	80003f8 <__aeabi_idivmod>
 8004fb0:	000b      	movs	r3, r1
 8004fb2:	b2da      	uxtb	r2, r3
 8004fb4:	4b27      	ldr	r3, [pc, #156]	; (8005054 <updateClockState+0x280>)
 8004fb6:	705a      	strb	r2, [r3, #1]
		if (clockVars.fieldBeingSet != 0) {
 8004fb8:	4b26      	ldr	r3, [pc, #152]	; (8005054 <updateClockState+0x280>)
 8004fba:	785b      	ldrb	r3, [r3, #1]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d033      	beq.n	8005028 <updateClockState+0x254>
			clockVars.isBeingSet = 1;
 8004fc0:	4b24      	ldr	r3, [pc, #144]	; (8005054 <updateClockState+0x280>)
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	701a      	strb	r2, [r3, #0]

			// should pull current time when first entering setting mode
			if (clockVars.fieldBeingSet == 1) {
 8004fc6:	4b23      	ldr	r3, [pc, #140]	; (8005054 <updateClockState+0x280>)
 8004fc8:	785b      	ldrb	r3, [r3, #1]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d10e      	bne.n	8004fec <updateClockState+0x218>
				getDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
 8004fce:	4b21      	ldr	r3, [pc, #132]	; (8005054 <updateClockState+0x280>)
 8004fd0:	6858      	ldr	r0, [r3, #4]
 8004fd2:	4b20      	ldr	r3, [pc, #128]	; (8005054 <updateClockState+0x280>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	0019      	movs	r1, r3
 8004fda:	f7fe f899 	bl	8003110 <getDateTime>
				HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_B);
 8004fde:	2380      	movs	r3, #128	; 0x80
 8004fe0:	009a      	lsls	r2, r3, #2
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	0011      	movs	r1, r2
 8004fe6:	0018      	movs	r0, r3
 8004fe8:	f003 fff8 	bl	8008fdc <HAL_RTC_DeactivateAlarm>
			}

			if (clockVars.dateToSet->date > maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr)) {
 8004fec:	4b19      	ldr	r3, [pc, #100]	; (8005054 <updateClockState+0x280>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	78dc      	ldrb	r4, [r3, #3]
 8004ff2:	4b18      	ldr	r3, [pc, #96]	; (8005054 <updateClockState+0x280>)
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	789a      	ldrb	r2, [r3, #2]
 8004ff8:	4b16      	ldr	r3, [pc, #88]	; (8005054 <updateClockState+0x280>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	0019      	movs	r1, r3
 8005000:	0010      	movs	r0, r2
 8005002:	f7fe f9d3 	bl	80033ac <maxDaysInMonth>
 8005006:	0003      	movs	r3, r0
 8005008:	429c      	cmp	r4, r3
 800500a:	d91c      	bls.n	8005046 <updateClockState+0x272>
				clockVars.dateToSet->date = maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr);
 800500c:	4b11      	ldr	r3, [pc, #68]	; (8005054 <updateClockState+0x280>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	789a      	ldrb	r2, [r3, #2]
 8005012:	4b10      	ldr	r3, [pc, #64]	; (8005054 <updateClockState+0x280>)
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	8819      	ldrh	r1, [r3, #0]
 8005018:	4b0e      	ldr	r3, [pc, #56]	; (8005054 <updateClockState+0x280>)
 800501a:	685c      	ldr	r4, [r3, #4]
 800501c:	0010      	movs	r0, r2
 800501e:	f7fe f9c5 	bl	80033ac <maxDaysInMonth>
 8005022:	0003      	movs	r3, r0
 8005024:	70e3      	strb	r3, [r4, #3]
			// second set to 0, weekday ignored
			setDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
			setClockAlarm(hrtc);
		}
	}
}
 8005026:	e00e      	b.n	8005046 <updateClockState+0x272>
			clockVars.isBeingSet = 0;
 8005028:	4b0a      	ldr	r3, [pc, #40]	; (8005054 <updateClockState+0x280>)
 800502a:	2200      	movs	r2, #0
 800502c:	701a      	strb	r2, [r3, #0]
			setDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
 800502e:	4b09      	ldr	r3, [pc, #36]	; (8005054 <updateClockState+0x280>)
 8005030:	6858      	ldr	r0, [r3, #4]
 8005032:	4b08      	ldr	r3, [pc, #32]	; (8005054 <updateClockState+0x280>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	0019      	movs	r1, r3
 800503a:	f7fd fefb 	bl	8002e34 <setDateTime>
			setClockAlarm(hrtc);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	0018      	movs	r0, r3
 8005042:	f7fd ff62 	bl	8002f0a <setClockAlarm>
}
 8005046:	46c0      	nop			; (mov r8, r8)
 8005048:	46bd      	mov	sp, r7
 800504a:	b003      	add	sp, #12
 800504c:	bd90      	pop	{r4, r7, pc}
 800504e:	46c0      	nop			; (mov r8, r8)
 8005050:	20000190 	.word	0x20000190
 8005054:	20000110 	.word	0x20000110
 8005058:	20000144 	.word	0x20000144
 800505c:	0800bf6c 	.word	0x0800bf6c
 8005060:	0800bf84 	.word	0x0800bf84

08005064 <updateTimerState>:
 *     second, timer only runs for half second.)
 *     also not sure how to implement pause using rtc (alarm value has to change depending on how long timer is paused for)
 *   might need to change to using only hardware timer for this instead of rtc because of problems listed above
 *   insert a few more functions into this (those that need to use the hardware)
 */
void updateTimerState(TIM_HandleTypeDef *timerStopwatchTim, TIM_HandleTypeDef *motorTim) {
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
	if (timerVars.isBeingSet) {
 800506e:	4ba0      	ldr	r3, [pc, #640]	; (80052f0 <updateTimerState+0x28c>)
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d100      	bne.n	8005078 <updateTimerState+0x14>
 8005076:	e089      	b.n	800518c <updateTimerState+0x128>
		if (buttons.is2Pressed) {
 8005078:	4b9e      	ldr	r3, [pc, #632]	; (80052f4 <updateTimerState+0x290>)
 800507a:	785b      	ldrb	r3, [r3, #1]
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d03b      	beq.n	80050fa <updateTimerState+0x96>
			buttons.is2Pressed = 0;
 8005082:	4b9c      	ldr	r3, [pc, #624]	; (80052f4 <updateTimerState+0x290>)
 8005084:	2200      	movs	r2, #0
 8005086:	705a      	strb	r2, [r3, #1]
			updateFace.timer = 1;
 8005088:	4b9b      	ldr	r3, [pc, #620]	; (80052f8 <updateTimerState+0x294>)
 800508a:	2201      	movs	r2, #1
 800508c:	705a      	strb	r2, [r3, #1]

			// set field up
			switch (timerVars.fieldBeingSet) {
 800508e:	4b98      	ldr	r3, [pc, #608]	; (80052f0 <updateTimerState+0x28c>)
 8005090:	785b      	ldrb	r3, [r3, #1]
 8005092:	2b02      	cmp	r3, #2
 8005094:	d013      	beq.n	80050be <updateTimerState+0x5a>
 8005096:	2b03      	cmp	r3, #3
 8005098:	d020      	beq.n	80050dc <updateTimerState+0x78>
 800509a:	2b01      	cmp	r3, #1
 800509c:	d000      	beq.n	80050a0 <updateTimerState+0x3c>
				case 1: timerVars.timeToSet->sec = (timerVars.timeToSet->sec+1) % 60; break;
				case 2: timerVars.timeToSet->min = (timerVars.timeToSet->min+1) % 60; break;
				case 3: timerVars.timeToSet->hr = (timerVars.timeToSet->hr+1) % 100; break;
				default: break;
 800509e:	e02d      	b.n	80050fc <updateTimerState+0x98>
				case 1: timerVars.timeToSet->sec = (timerVars.timeToSet->sec+1) % 60; break;
 80050a0:	4b93      	ldr	r3, [pc, #588]	; (80052f0 <updateTimerState+0x28c>)
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	789b      	ldrb	r3, [r3, #2]
 80050a6:	3301      	adds	r3, #1
 80050a8:	213c      	movs	r1, #60	; 0x3c
 80050aa:	0018      	movs	r0, r3
 80050ac:	f7fb f9a4 	bl	80003f8 <__aeabi_idivmod>
 80050b0:	000b      	movs	r3, r1
 80050b2:	001a      	movs	r2, r3
 80050b4:	4b8e      	ldr	r3, [pc, #568]	; (80052f0 <updateTimerState+0x28c>)
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	b2d2      	uxtb	r2, r2
 80050ba:	709a      	strb	r2, [r3, #2]
 80050bc:	e01e      	b.n	80050fc <updateTimerState+0x98>
				case 2: timerVars.timeToSet->min = (timerVars.timeToSet->min+1) % 60; break;
 80050be:	4b8c      	ldr	r3, [pc, #560]	; (80052f0 <updateTimerState+0x28c>)
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	785b      	ldrb	r3, [r3, #1]
 80050c4:	3301      	adds	r3, #1
 80050c6:	213c      	movs	r1, #60	; 0x3c
 80050c8:	0018      	movs	r0, r3
 80050ca:	f7fb f995 	bl	80003f8 <__aeabi_idivmod>
 80050ce:	000b      	movs	r3, r1
 80050d0:	001a      	movs	r2, r3
 80050d2:	4b87      	ldr	r3, [pc, #540]	; (80052f0 <updateTimerState+0x28c>)
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	b2d2      	uxtb	r2, r2
 80050d8:	705a      	strb	r2, [r3, #1]
 80050da:	e00f      	b.n	80050fc <updateTimerState+0x98>
				case 3: timerVars.timeToSet->hr = (timerVars.timeToSet->hr+1) % 100; break;
 80050dc:	4b84      	ldr	r3, [pc, #528]	; (80052f0 <updateTimerState+0x28c>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	3301      	adds	r3, #1
 80050e4:	2164      	movs	r1, #100	; 0x64
 80050e6:	0018      	movs	r0, r3
 80050e8:	f7fb f986 	bl	80003f8 <__aeabi_idivmod>
 80050ec:	000b      	movs	r3, r1
 80050ee:	001a      	movs	r2, r3
 80050f0:	4b7f      	ldr	r3, [pc, #508]	; (80052f0 <updateTimerState+0x28c>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	b2d2      	uxtb	r2, r2
 80050f6:	701a      	strb	r2, [r3, #0]
 80050f8:	e000      	b.n	80050fc <updateTimerState+0x98>
			}
		}
 80050fa:	46c0      	nop			; (mov r8, r8)
		if (buttons.is3Pressed) {
 80050fc:	4b7d      	ldr	r3, [pc, #500]	; (80052f4 <updateTimerState+0x290>)
 80050fe:	789b      	ldrb	r3, [r3, #2]
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d100      	bne.n	8005108 <updateTimerState+0xa4>
 8005106:	e09a      	b.n	800523e <updateTimerState+0x1da>
			buttons.is3Pressed = 0;
 8005108:	4b7a      	ldr	r3, [pc, #488]	; (80052f4 <updateTimerState+0x290>)
 800510a:	2200      	movs	r2, #0
 800510c:	709a      	strb	r2, [r3, #2]
			updateFace.timer = 1;
 800510e:	4b7a      	ldr	r3, [pc, #488]	; (80052f8 <updateTimerState+0x294>)
 8005110:	2201      	movs	r2, #1
 8005112:	705a      	strb	r2, [r3, #1]

			// set field down
			switch (timerVars.fieldBeingSet) {
 8005114:	4b76      	ldr	r3, [pc, #472]	; (80052f0 <updateTimerState+0x28c>)
 8005116:	785b      	ldrb	r3, [r3, #1]
 8005118:	2b02      	cmp	r3, #2
 800511a:	d015      	beq.n	8005148 <updateTimerState+0xe4>
 800511c:	2b03      	cmp	r3, #3
 800511e:	d024      	beq.n	800516a <updateTimerState+0x106>
 8005120:	2b01      	cmp	r3, #1
 8005122:	d000      	beq.n	8005126 <updateTimerState+0xc2>
					break;
				case 3:
					if (timerVars.timeToSet->hr == 0) timerVars.timeToSet->hr = 99;		// no limit on hour, since we're not using day
					else timerVars.timeToSet->hr--;
					break;
				default: break;
 8005124:	e08c      	b.n	8005240 <updateTimerState+0x1dc>
					if (timerVars.timeToSet->sec == 0) timerVars.timeToSet->sec = 59;
 8005126:	4b72      	ldr	r3, [pc, #456]	; (80052f0 <updateTimerState+0x28c>)
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	789b      	ldrb	r3, [r3, #2]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d104      	bne.n	800513a <updateTimerState+0xd6>
 8005130:	4b6f      	ldr	r3, [pc, #444]	; (80052f0 <updateTimerState+0x28c>)
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	223b      	movs	r2, #59	; 0x3b
 8005136:	709a      	strb	r2, [r3, #2]
					break;
 8005138:	e082      	b.n	8005240 <updateTimerState+0x1dc>
					else timerVars.timeToSet->sec--;
 800513a:	4b6d      	ldr	r3, [pc, #436]	; (80052f0 <updateTimerState+0x28c>)
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	789a      	ldrb	r2, [r3, #2]
 8005140:	3a01      	subs	r2, #1
 8005142:	b2d2      	uxtb	r2, r2
 8005144:	709a      	strb	r2, [r3, #2]
					break;
 8005146:	e07b      	b.n	8005240 <updateTimerState+0x1dc>
					if (timerVars.timeToSet->min == 0) timerVars.timeToSet->min = 59;
 8005148:	4b69      	ldr	r3, [pc, #420]	; (80052f0 <updateTimerState+0x28c>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	785b      	ldrb	r3, [r3, #1]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d104      	bne.n	800515c <updateTimerState+0xf8>
 8005152:	4b67      	ldr	r3, [pc, #412]	; (80052f0 <updateTimerState+0x28c>)
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	223b      	movs	r2, #59	; 0x3b
 8005158:	705a      	strb	r2, [r3, #1]
					break;
 800515a:	e071      	b.n	8005240 <updateTimerState+0x1dc>
					else timerVars.timeToSet->min--;
 800515c:	4b64      	ldr	r3, [pc, #400]	; (80052f0 <updateTimerState+0x28c>)
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	785a      	ldrb	r2, [r3, #1]
 8005162:	3a01      	subs	r2, #1
 8005164:	b2d2      	uxtb	r2, r2
 8005166:	705a      	strb	r2, [r3, #1]
					break;
 8005168:	e06a      	b.n	8005240 <updateTimerState+0x1dc>
					if (timerVars.timeToSet->hr == 0) timerVars.timeToSet->hr = 99;		// no limit on hour, since we're not using day
 800516a:	4b61      	ldr	r3, [pc, #388]	; (80052f0 <updateTimerState+0x28c>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d104      	bne.n	800517e <updateTimerState+0x11a>
 8005174:	4b5e      	ldr	r3, [pc, #376]	; (80052f0 <updateTimerState+0x28c>)
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	2263      	movs	r2, #99	; 0x63
 800517a:	701a      	strb	r2, [r3, #0]
					break;
 800517c:	e060      	b.n	8005240 <updateTimerState+0x1dc>
					else timerVars.timeToSet->hr--;
 800517e:	4b5c      	ldr	r3, [pc, #368]	; (80052f0 <updateTimerState+0x28c>)
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	781a      	ldrb	r2, [r3, #0]
 8005184:	3a01      	subs	r2, #1
 8005186:	b2d2      	uxtb	r2, r2
 8005188:	701a      	strb	r2, [r3, #0]
					break;
 800518a:	e059      	b.n	8005240 <updateTimerState+0x1dc>
			}
		}
	}
	// set and ready to run
	else if (timerVars.isSet) {
 800518c:	4b58      	ldr	r3, [pc, #352]	; (80052f0 <updateTimerState+0x28c>)
 800518e:	789b      	ldrb	r3, [r3, #2]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d055      	beq.n	8005240 <updateTimerState+0x1dc>
		if (buttons.is2Pressed && isTimerRunning == 0 && timerCounter != 0) {
 8005194:	4b57      	ldr	r3, [pc, #348]	; (80052f4 <updateTimerState+0x290>)
 8005196:	785b      	ldrb	r3, [r3, #1]
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d018      	beq.n	80051d0 <updateTimerState+0x16c>
 800519e:	4b57      	ldr	r3, [pc, #348]	; (80052fc <updateTimerState+0x298>)
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d113      	bne.n	80051d0 <updateTimerState+0x16c>
 80051a8:	4b55      	ldr	r3, [pc, #340]	; (8005300 <updateTimerState+0x29c>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00f      	beq.n	80051d0 <updateTimerState+0x16c>
			buttons.is2Pressed = 0;
 80051b0:	4b50      	ldr	r3, [pc, #320]	; (80052f4 <updateTimerState+0x290>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	705a      	strb	r2, [r3, #1]
			updateFace.timer = 1;
 80051b6:	4b50      	ldr	r3, [pc, #320]	; (80052f8 <updateTimerState+0x294>)
 80051b8:	2201      	movs	r2, #1
 80051ba:	705a      	strb	r2, [r3, #1]

			// start timer
			runTimer(timerStopwatchTim);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	0018      	movs	r0, r3
 80051c0:	f7ff fa6a 	bl	8004698 <runTimer>
			isTimerRunning = 1;
 80051c4:	4b4d      	ldr	r3, [pc, #308]	; (80052fc <updateTimerState+0x298>)
 80051c6:	2201      	movs	r2, #1
 80051c8:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 0;
 80051ca:	4b4e      	ldr	r3, [pc, #312]	; (8005304 <updateTimerState+0x2a0>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	701a      	strb	r2, [r3, #0]
		}
		if (buttons.is3Pressed && isTimerRunning && timerCounter != 0) {
 80051d0:	4b48      	ldr	r3, [pc, #288]	; (80052f4 <updateTimerState+0x290>)
 80051d2:	789b      	ldrb	r3, [r3, #2]
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d018      	beq.n	800520c <updateTimerState+0x1a8>
 80051da:	4b48      	ldr	r3, [pc, #288]	; (80052fc <updateTimerState+0x298>)
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d013      	beq.n	800520c <updateTimerState+0x1a8>
 80051e4:	4b46      	ldr	r3, [pc, #280]	; (8005300 <updateTimerState+0x29c>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00f      	beq.n	800520c <updateTimerState+0x1a8>
			buttons.is3Pressed = 0;
 80051ec:	4b41      	ldr	r3, [pc, #260]	; (80052f4 <updateTimerState+0x290>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	709a      	strb	r2, [r3, #2]
			updateFace.timer = 1;
 80051f2:	4b41      	ldr	r3, [pc, #260]	; (80052f8 <updateTimerState+0x294>)
 80051f4:	2201      	movs	r2, #1
 80051f6:	705a      	strb	r2, [r3, #1]

			// pause timer
			pauseTimer(timerStopwatchTim);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	0018      	movs	r0, r3
 80051fc:	f7ff faa8 	bl	8004750 <pauseTimer>
			isTimerRunning = 0;
 8005200:	4b3e      	ldr	r3, [pc, #248]	; (80052fc <updateTimerState+0x298>)
 8005202:	2200      	movs	r2, #0
 8005204:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 1;
 8005206:	4b3f      	ldr	r3, [pc, #252]	; (8005304 <updateTimerState+0x2a0>)
 8005208:	2201      	movs	r2, #1
 800520a:	701a      	strb	r2, [r3, #0]
		}
		if (buttons.is4Pressed) {
 800520c:	4b39      	ldr	r3, [pc, #228]	; (80052f4 <updateTimerState+0x290>)
 800520e:	78db      	ldrb	r3, [r3, #3]
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d014      	beq.n	8005240 <updateTimerState+0x1dc>
			buttons.is4Pressed = 0;
 8005216:	4b37      	ldr	r3, [pc, #220]	; (80052f4 <updateTimerState+0x290>)
 8005218:	2200      	movs	r2, #0
 800521a:	70da      	strb	r2, [r3, #3]
			updateFace.timer = 1;
 800521c:	4b36      	ldr	r3, [pc, #216]	; (80052f8 <updateTimerState+0x294>)
 800521e:	2201      	movs	r2, #1
 8005220:	705a      	strb	r2, [r3, #1]

			// stop and clear timer
			stopTimer(timerStopwatchTim);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	0018      	movs	r0, r3
 8005226:	f7ff faa7 	bl	8004778 <stopTimer>
			timerVars.isSet = 0;
 800522a:	4b31      	ldr	r3, [pc, #196]	; (80052f0 <updateTimerState+0x28c>)
 800522c:	2200      	movs	r2, #0
 800522e:	709a      	strb	r2, [r3, #2]
			isTimerRunning = 0;
 8005230:	4b32      	ldr	r3, [pc, #200]	; (80052fc <updateTimerState+0x298>)
 8005232:	2200      	movs	r2, #0
 8005234:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 0;
 8005236:	4b33      	ldr	r3, [pc, #204]	; (8005304 <updateTimerState+0x2a0>)
 8005238:	2200      	movs	r2, #0
 800523a:	701a      	strb	r2, [r3, #0]
 800523c:	e000      	b.n	8005240 <updateTimerState+0x1dc>
		}
 800523e:	46c0      	nop			; (mov r8, r8)
//			timerCounter = timeToSeconds(timerVars.timeToSet);
//			runMotor(motorTim);
//		}
	}
	// not done? might be done (other buttons start/stop timer)
	if (buttons.is4Pressed) {
 8005240:	4b2c      	ldr	r3, [pc, #176]	; (80052f4 <updateTimerState+0x290>)
 8005242:	78db      	ldrb	r3, [r3, #3]
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d04d      	beq.n	80052e6 <updateTimerState+0x282>
		buttons.is4Pressed = 0;
 800524a:	4b2a      	ldr	r3, [pc, #168]	; (80052f4 <updateTimerState+0x290>)
 800524c:	2200      	movs	r2, #0
 800524e:	70da      	strb	r2, [r3, #3]
		updateFace.timer = 1;
 8005250:	4b29      	ldr	r3, [pc, #164]	; (80052f8 <updateTimerState+0x294>)
 8005252:	2201      	movs	r2, #1
 8005254:	705a      	strb	r2, [r3, #1]

		// change field/mode
		timerVars.fieldBeingSet = (timerVars.fieldBeingSet + 1) % (NUM_TIMERFIELDS + 1);
 8005256:	4b26      	ldr	r3, [pc, #152]	; (80052f0 <updateTimerState+0x28c>)
 8005258:	785b      	ldrb	r3, [r3, #1]
 800525a:	3301      	adds	r3, #1
 800525c:	4a2a      	ldr	r2, [pc, #168]	; (8005308 <updateTimerState+0x2a4>)
 800525e:	4013      	ands	r3, r2
 8005260:	d504      	bpl.n	800526c <updateTimerState+0x208>
 8005262:	3b01      	subs	r3, #1
 8005264:	2204      	movs	r2, #4
 8005266:	4252      	negs	r2, r2
 8005268:	4313      	orrs	r3, r2
 800526a:	3301      	adds	r3, #1
 800526c:	b2da      	uxtb	r2, r3
 800526e:	4b20      	ldr	r3, [pc, #128]	; (80052f0 <updateTimerState+0x28c>)
 8005270:	705a      	strb	r2, [r3, #1]
		if (timerVars.fieldBeingSet != 0) {
 8005272:	4b1f      	ldr	r3, [pc, #124]	; (80052f0 <updateTimerState+0x28c>)
 8005274:	785b      	ldrb	r3, [r3, #1]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d016      	beq.n	80052a8 <updateTimerState+0x244>
			timerVars.isBeingSet = 1;
 800527a:	4b1d      	ldr	r3, [pc, #116]	; (80052f0 <updateTimerState+0x28c>)
 800527c:	2201      	movs	r2, #1
 800527e:	701a      	strb	r2, [r3, #0]
			timerVars.isSet = 0;
 8005280:	4b1b      	ldr	r3, [pc, #108]	; (80052f0 <updateTimerState+0x28c>)
 8005282:	2200      	movs	r2, #0
 8005284:	709a      	strb	r2, [r3, #2]

			// set temp fields to 0 when first entering setting mode
			if (timerVars.fieldBeingSet == 1) {
 8005286:	4b1a      	ldr	r3, [pc, #104]	; (80052f0 <updateTimerState+0x28c>)
 8005288:	785b      	ldrb	r3, [r3, #1]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d12b      	bne.n	80052e6 <updateTimerState+0x282>
				timerVars.timeToSet->sec = 0;
 800528e:	4b18      	ldr	r3, [pc, #96]	; (80052f0 <updateTimerState+0x28c>)
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	709a      	strb	r2, [r3, #2]
				timerVars.timeToSet->min = 0;
 8005296:	4b16      	ldr	r3, [pc, #88]	; (80052f0 <updateTimerState+0x28c>)
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	705a      	strb	r2, [r3, #1]
				timerVars.timeToSet->hr = 0;
 800529e:	4b14      	ldr	r3, [pc, #80]	; (80052f0 <updateTimerState+0x28c>)
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	701a      	strb	r2, [r3, #0]
		else {
			timerVars.isBeingSet = 0;
			timerVars.isSet = 0;
		}
	}
}
 80052a6:	e01e      	b.n	80052e6 <updateTimerState+0x282>
		else if (timeToSeconds(timerVars.timeToSet) != 0) {
 80052a8:	4b11      	ldr	r3, [pc, #68]	; (80052f0 <updateTimerState+0x28c>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	0018      	movs	r0, r3
 80052ae:	f7fd ffdb 	bl	8003268 <timeToSeconds>
 80052b2:	1e03      	subs	r3, r0, #0
 80052b4:	d011      	beq.n	80052da <updateTimerState+0x276>
			timerVars.isBeingSet = 0;
 80052b6:	4b0e      	ldr	r3, [pc, #56]	; (80052f0 <updateTimerState+0x28c>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	701a      	strb	r2, [r3, #0]
			timerVars.isSet = 1;
 80052bc:	4b0c      	ldr	r3, [pc, #48]	; (80052f0 <updateTimerState+0x28c>)
 80052be:	2201      	movs	r2, #1
 80052c0:	709a      	strb	r2, [r3, #2]
			isTimerDone = 0;
 80052c2:	4b12      	ldr	r3, [pc, #72]	; (800530c <updateTimerState+0x2a8>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	701a      	strb	r2, [r3, #0]
			timerCounter = timeToSeconds(timerVars.timeToSet);
 80052c8:	4b09      	ldr	r3, [pc, #36]	; (80052f0 <updateTimerState+0x28c>)
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	0018      	movs	r0, r3
 80052ce:	f7fd ffcb 	bl	8003268 <timeToSeconds>
 80052d2:	0002      	movs	r2, r0
 80052d4:	4b0a      	ldr	r3, [pc, #40]	; (8005300 <updateTimerState+0x29c>)
 80052d6:	601a      	str	r2, [r3, #0]
}
 80052d8:	e005      	b.n	80052e6 <updateTimerState+0x282>
			timerVars.isBeingSet = 0;
 80052da:	4b05      	ldr	r3, [pc, #20]	; (80052f0 <updateTimerState+0x28c>)
 80052dc:	2200      	movs	r2, #0
 80052de:	701a      	strb	r2, [r3, #0]
			timerVars.isSet = 0;
 80052e0:	4b03      	ldr	r3, [pc, #12]	; (80052f0 <updateTimerState+0x28c>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	709a      	strb	r2, [r3, #2]
}
 80052e6:	46c0      	nop			; (mov r8, r8)
 80052e8:	46bd      	mov	sp, r7
 80052ea:	b002      	add	sp, #8
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	46c0      	nop			; (mov r8, r8)
 80052f0:	2000011c 	.word	0x2000011c
 80052f4:	20000190 	.word	0x20000190
 80052f8:	20000144 	.word	0x20000144
 80052fc:	20000194 	.word	0x20000194
 8005300:	2000014c 	.word	0x2000014c
 8005304:	20000196 	.word	0x20000196
 8005308:	80000003 	.word	0x80000003
 800530c:	20000150 	.word	0x20000150

08005310 <updateAlarmState>:
 *   should change to make it possible to have multiple alarms
 *   also pick alarms that repeat and alarms that don't
 *   need to make changes to ui to make this happen
 *   currently just does old behavior (only 1 alarm)
 */
void updateAlarmState(RTC_HandleTypeDef *hrtc, TIM_HandleTypeDef *motorTim) {
 8005310:	b5b0      	push	{r4, r5, r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
	if (buttons.is2Pressed && alarmVars.isBeingSet) {
 800531a:	4b94      	ldr	r3, [pc, #592]	; (800556c <updateAlarmState+0x25c>)
 800531c:	785b      	ldrb	r3, [r3, #1]
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b00      	cmp	r3, #0
 8005322:	d052      	beq.n	80053ca <updateAlarmState+0xba>
 8005324:	4b92      	ldr	r3, [pc, #584]	; (8005570 <updateAlarmState+0x260>)
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d04e      	beq.n	80053ca <updateAlarmState+0xba>
		buttons.is2Pressed = 0;
 800532c:	4b8f      	ldr	r3, [pc, #572]	; (800556c <updateAlarmState+0x25c>)
 800532e:	2200      	movs	r2, #0
 8005330:	705a      	strb	r2, [r3, #1]
		updateFace.alarm = 1;
 8005332:	4b90      	ldr	r3, [pc, #576]	; (8005574 <updateAlarmState+0x264>)
 8005334:	2201      	movs	r2, #1
 8005336:	709a      	strb	r2, [r3, #2]

		// change fields up
		switch (alarmVars.fieldBeingSet) {
 8005338:	4b8d      	ldr	r3, [pc, #564]	; (8005570 <updateAlarmState+0x260>)
 800533a:	785b      	ldrb	r3, [r3, #1]
 800533c:	2b02      	cmp	r3, #2
 800533e:	d017      	beq.n	8005370 <updateAlarmState+0x60>
 8005340:	dc02      	bgt.n	8005348 <updateAlarmState+0x38>
 8005342:	2b01      	cmp	r3, #1
 8005344:	d005      	beq.n	8005352 <updateAlarmState+0x42>
			case 1: alarmVars.alarmToSet->sec = (alarmVars.alarmToSet->sec + 1) % 60; break;
			case 2: alarmVars.alarmToSet->min = (alarmVars.alarmToSet->min + 1) % 60; break;
			case 3: alarmVars.alarmToSet->hr = (alarmVars.alarmToSet->hr + 1) % 24; break;
			case 4: alarmVars.alarmToSet->weekday = (alarmVars.alarmToSet->weekday) % 7 + 1; break;
			default: break;
 8005346:	e041      	b.n	80053cc <updateAlarmState+0xbc>
		switch (alarmVars.fieldBeingSet) {
 8005348:	2b03      	cmp	r3, #3
 800534a:	d020      	beq.n	800538e <updateAlarmState+0x7e>
 800534c:	2b04      	cmp	r3, #4
 800534e:	d02d      	beq.n	80053ac <updateAlarmState+0x9c>
			default: break;
 8005350:	e03c      	b.n	80053cc <updateAlarmState+0xbc>
			case 1: alarmVars.alarmToSet->sec = (alarmVars.alarmToSet->sec + 1) % 60; break;
 8005352:	4b87      	ldr	r3, [pc, #540]	; (8005570 <updateAlarmState+0x260>)
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	789b      	ldrb	r3, [r3, #2]
 8005358:	3301      	adds	r3, #1
 800535a:	213c      	movs	r1, #60	; 0x3c
 800535c:	0018      	movs	r0, r3
 800535e:	f7fb f84b 	bl	80003f8 <__aeabi_idivmod>
 8005362:	000b      	movs	r3, r1
 8005364:	001a      	movs	r2, r3
 8005366:	4b82      	ldr	r3, [pc, #520]	; (8005570 <updateAlarmState+0x260>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	b2d2      	uxtb	r2, r2
 800536c:	709a      	strb	r2, [r3, #2]
 800536e:	e02d      	b.n	80053cc <updateAlarmState+0xbc>
			case 2: alarmVars.alarmToSet->min = (alarmVars.alarmToSet->min + 1) % 60; break;
 8005370:	4b7f      	ldr	r3, [pc, #508]	; (8005570 <updateAlarmState+0x260>)
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	785b      	ldrb	r3, [r3, #1]
 8005376:	3301      	adds	r3, #1
 8005378:	213c      	movs	r1, #60	; 0x3c
 800537a:	0018      	movs	r0, r3
 800537c:	f7fb f83c 	bl	80003f8 <__aeabi_idivmod>
 8005380:	000b      	movs	r3, r1
 8005382:	001a      	movs	r2, r3
 8005384:	4b7a      	ldr	r3, [pc, #488]	; (8005570 <updateAlarmState+0x260>)
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	b2d2      	uxtb	r2, r2
 800538a:	705a      	strb	r2, [r3, #1]
 800538c:	e01e      	b.n	80053cc <updateAlarmState+0xbc>
			case 3: alarmVars.alarmToSet->hr = (alarmVars.alarmToSet->hr + 1) % 24; break;
 800538e:	4b78      	ldr	r3, [pc, #480]	; (8005570 <updateAlarmState+0x260>)
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	3301      	adds	r3, #1
 8005396:	2118      	movs	r1, #24
 8005398:	0018      	movs	r0, r3
 800539a:	f7fb f82d 	bl	80003f8 <__aeabi_idivmod>
 800539e:	000b      	movs	r3, r1
 80053a0:	001a      	movs	r2, r3
 80053a2:	4b73      	ldr	r3, [pc, #460]	; (8005570 <updateAlarmState+0x260>)
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	b2d2      	uxtb	r2, r2
 80053a8:	701a      	strb	r2, [r3, #0]
 80053aa:	e00f      	b.n	80053cc <updateAlarmState+0xbc>
			case 4: alarmVars.alarmToSet->weekday = (alarmVars.alarmToSet->weekday) % 7 + 1; break;
 80053ac:	4b70      	ldr	r3, [pc, #448]	; (8005570 <updateAlarmState+0x260>)
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	78db      	ldrb	r3, [r3, #3]
 80053b2:	2107      	movs	r1, #7
 80053b4:	0018      	movs	r0, r3
 80053b6:	f7fa ff35 	bl	8000224 <__aeabi_uidivmod>
 80053ba:	000b      	movs	r3, r1
 80053bc:	b2da      	uxtb	r2, r3
 80053be:	4b6c      	ldr	r3, [pc, #432]	; (8005570 <updateAlarmState+0x260>)
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	3201      	adds	r2, #1
 80053c4:	b2d2      	uxtb	r2, r2
 80053c6:	70da      	strb	r2, [r3, #3]
 80053c8:	e000      	b.n	80053cc <updateAlarmState+0xbc>
		}
	}
 80053ca:	46c0      	nop			; (mov r8, r8)
	if (buttons.is3Pressed && alarmVars.isBeingSet) {
 80053cc:	4b67      	ldr	r3, [pc, #412]	; (800556c <updateAlarmState+0x25c>)
 80053ce:	789b      	ldrb	r3, [r3, #2]
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d05a      	beq.n	800548c <updateAlarmState+0x17c>
 80053d6:	4b66      	ldr	r3, [pc, #408]	; (8005570 <updateAlarmState+0x260>)
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d056      	beq.n	800548c <updateAlarmState+0x17c>
		buttons.is3Pressed = 0;
 80053de:	4b63      	ldr	r3, [pc, #396]	; (800556c <updateAlarmState+0x25c>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	709a      	strb	r2, [r3, #2]
		updateFace.alarm = 1;
 80053e4:	4b63      	ldr	r3, [pc, #396]	; (8005574 <updateAlarmState+0x264>)
 80053e6:	2201      	movs	r2, #1
 80053e8:	709a      	strb	r2, [r3, #2]

		// change fields down
		switch (alarmVars.fieldBeingSet) {
 80053ea:	4b61      	ldr	r3, [pc, #388]	; (8005570 <updateAlarmState+0x260>)
 80053ec:	785b      	ldrb	r3, [r3, #1]
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d019      	beq.n	8005426 <updateAlarmState+0x116>
 80053f2:	dc02      	bgt.n	80053fa <updateAlarmState+0xea>
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d005      	beq.n	8005404 <updateAlarmState+0xf4>
				break;
			case 4:
				if (alarmVars.alarmToSet->weekday == RTC_WEEKDAY_MONDAY) alarmVars.alarmToSet->weekday = RTC_WEEKDAY_SUNDAY;
				else alarmVars.alarmToSet->weekday--;
				break;
			default: break;
 80053f8:	e049      	b.n	800548e <updateAlarmState+0x17e>
		switch (alarmVars.fieldBeingSet) {
 80053fa:	2b03      	cmp	r3, #3
 80053fc:	d024      	beq.n	8005448 <updateAlarmState+0x138>
 80053fe:	2b04      	cmp	r3, #4
 8005400:	d033      	beq.n	800546a <updateAlarmState+0x15a>
			default: break;
 8005402:	e044      	b.n	800548e <updateAlarmState+0x17e>
				if (alarmVars.alarmToSet->sec == 0) alarmVars.alarmToSet->sec = 59;
 8005404:	4b5a      	ldr	r3, [pc, #360]	; (8005570 <updateAlarmState+0x260>)
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	789b      	ldrb	r3, [r3, #2]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d104      	bne.n	8005418 <updateAlarmState+0x108>
 800540e:	4b58      	ldr	r3, [pc, #352]	; (8005570 <updateAlarmState+0x260>)
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	223b      	movs	r2, #59	; 0x3b
 8005414:	709a      	strb	r2, [r3, #2]
				break;
 8005416:	e03a      	b.n	800548e <updateAlarmState+0x17e>
				else alarmVars.alarmToSet->sec--;
 8005418:	4b55      	ldr	r3, [pc, #340]	; (8005570 <updateAlarmState+0x260>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	789a      	ldrb	r2, [r3, #2]
 800541e:	3a01      	subs	r2, #1
 8005420:	b2d2      	uxtb	r2, r2
 8005422:	709a      	strb	r2, [r3, #2]
				break;
 8005424:	e033      	b.n	800548e <updateAlarmState+0x17e>
				if (alarmVars.alarmToSet->min == 0) alarmVars.alarmToSet->min = 59;
 8005426:	4b52      	ldr	r3, [pc, #328]	; (8005570 <updateAlarmState+0x260>)
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	785b      	ldrb	r3, [r3, #1]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d104      	bne.n	800543a <updateAlarmState+0x12a>
 8005430:	4b4f      	ldr	r3, [pc, #316]	; (8005570 <updateAlarmState+0x260>)
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	223b      	movs	r2, #59	; 0x3b
 8005436:	705a      	strb	r2, [r3, #1]
				break;
 8005438:	e029      	b.n	800548e <updateAlarmState+0x17e>
				else alarmVars.alarmToSet->min--;
 800543a:	4b4d      	ldr	r3, [pc, #308]	; (8005570 <updateAlarmState+0x260>)
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	785a      	ldrb	r2, [r3, #1]
 8005440:	3a01      	subs	r2, #1
 8005442:	b2d2      	uxtb	r2, r2
 8005444:	705a      	strb	r2, [r3, #1]
				break;
 8005446:	e022      	b.n	800548e <updateAlarmState+0x17e>
				if (alarmVars.alarmToSet->hr == 0) alarmVars.alarmToSet->hr = 23;
 8005448:	4b49      	ldr	r3, [pc, #292]	; (8005570 <updateAlarmState+0x260>)
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d104      	bne.n	800545c <updateAlarmState+0x14c>
 8005452:	4b47      	ldr	r3, [pc, #284]	; (8005570 <updateAlarmState+0x260>)
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	2217      	movs	r2, #23
 8005458:	701a      	strb	r2, [r3, #0]
				break;
 800545a:	e018      	b.n	800548e <updateAlarmState+0x17e>
				else alarmVars.alarmToSet->hr--;
 800545c:	4b44      	ldr	r3, [pc, #272]	; (8005570 <updateAlarmState+0x260>)
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	781a      	ldrb	r2, [r3, #0]
 8005462:	3a01      	subs	r2, #1
 8005464:	b2d2      	uxtb	r2, r2
 8005466:	701a      	strb	r2, [r3, #0]
				break;
 8005468:	e011      	b.n	800548e <updateAlarmState+0x17e>
				if (alarmVars.alarmToSet->weekday == RTC_WEEKDAY_MONDAY) alarmVars.alarmToSet->weekday = RTC_WEEKDAY_SUNDAY;
 800546a:	4b41      	ldr	r3, [pc, #260]	; (8005570 <updateAlarmState+0x260>)
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	78db      	ldrb	r3, [r3, #3]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d104      	bne.n	800547e <updateAlarmState+0x16e>
 8005474:	4b3e      	ldr	r3, [pc, #248]	; (8005570 <updateAlarmState+0x260>)
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	2207      	movs	r2, #7
 800547a:	70da      	strb	r2, [r3, #3]
				break;
 800547c:	e007      	b.n	800548e <updateAlarmState+0x17e>
				else alarmVars.alarmToSet->weekday--;
 800547e:	4b3c      	ldr	r3, [pc, #240]	; (8005570 <updateAlarmState+0x260>)
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	78da      	ldrb	r2, [r3, #3]
 8005484:	3a01      	subs	r2, #1
 8005486:	b2d2      	uxtb	r2, r2
 8005488:	70da      	strb	r2, [r3, #3]
				break;
 800548a:	e000      	b.n	800548e <updateAlarmState+0x17e>
		}
	}
 800548c:	46c0      	nop			; (mov r8, r8)
	if (buttons.is4Pressed) {
 800548e:	4b37      	ldr	r3, [pc, #220]	; (800556c <updateAlarmState+0x25c>)
 8005490:	78db      	ldrb	r3, [r3, #3]
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	d065      	beq.n	8005564 <updateAlarmState+0x254>
		buttons.is4Pressed = 0;
 8005498:	4b34      	ldr	r3, [pc, #208]	; (800556c <updateAlarmState+0x25c>)
 800549a:	2200      	movs	r2, #0
 800549c:	70da      	strb	r2, [r3, #3]
		updateFace.alarm = 1;
 800549e:	4b35      	ldr	r3, [pc, #212]	; (8005574 <updateAlarmState+0x264>)
 80054a0:	2201      	movs	r2, #1
 80054a2:	709a      	strb	r2, [r3, #2]

		if (alarmVars.isSet == 0) {
 80054a4:	4b32      	ldr	r3, [pc, #200]	; (8005570 <updateAlarmState+0x260>)
 80054a6:	789b      	ldrb	r3, [r3, #2]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d151      	bne.n	8005550 <updateAlarmState+0x240>
			// toggle between fields
			alarmVars.fieldBeingSet = (alarmVars.fieldBeingSet + 1) % (NUM_ALARMFIELDS + 1);
 80054ac:	4b30      	ldr	r3, [pc, #192]	; (8005570 <updateAlarmState+0x260>)
 80054ae:	785b      	ldrb	r3, [r3, #1]
 80054b0:	3301      	adds	r3, #1
 80054b2:	2105      	movs	r1, #5
 80054b4:	0018      	movs	r0, r3
 80054b6:	f7fa ff9f 	bl	80003f8 <__aeabi_idivmod>
 80054ba:	000b      	movs	r3, r1
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	4b2c      	ldr	r3, [pc, #176]	; (8005570 <updateAlarmState+0x260>)
 80054c0:	705a      	strb	r2, [r3, #1]
			if (alarmVars.fieldBeingSet != 0) {
 80054c2:	4b2b      	ldr	r3, [pc, #172]	; (8005570 <updateAlarmState+0x260>)
 80054c4:	785b      	ldrb	r3, [r3, #1]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d034      	beq.n	8005534 <updateAlarmState+0x224>
				alarmVars.isBeingSet = 1;
 80054ca:	4b29      	ldr	r3, [pc, #164]	; (8005570 <updateAlarmState+0x260>)
 80054cc:	2201      	movs	r2, #1
 80054ce:	701a      	strb	r2, [r3, #0]
				if (alarmVars.fieldBeingSet == 1) {
 80054d0:	4b27      	ldr	r3, [pc, #156]	; (8005570 <updateAlarmState+0x260>)
 80054d2:	785b      	ldrb	r3, [r3, #1]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d145      	bne.n	8005564 <updateAlarmState+0x254>
					struct dates d = {0};
 80054d8:	2510      	movs	r5, #16
 80054da:	197b      	adds	r3, r7, r5
 80054dc:	0018      	movs	r0, r3
 80054de:	2306      	movs	r3, #6
 80054e0:	001a      	movs	r2, r3
 80054e2:	2100      	movs	r1, #0
 80054e4:	f005 fb8f 	bl	800ac06 <memset>
					struct times t = {0};
 80054e8:	240c      	movs	r4, #12
 80054ea:	193b      	adds	r3, r7, r4
 80054ec:	0018      	movs	r0, r3
 80054ee:	2303      	movs	r3, #3
 80054f0:	001a      	movs	r2, r3
 80054f2:	2100      	movs	r1, #0
 80054f4:	f005 fb87 	bl	800ac06 <memset>
					getDateTime(&d, &t, hrtc);
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	0021      	movs	r1, r4
 80054fc:	000c      	movs	r4, r1
 80054fe:	1879      	adds	r1, r7, r1
 8005500:	197b      	adds	r3, r7, r5
 8005502:	0018      	movs	r0, r3
 8005504:	f7fd fe04 	bl	8003110 <getDateTime>
					alarmVars.alarmToSet->sec = t.sec;
 8005508:	4b19      	ldr	r3, [pc, #100]	; (8005570 <updateAlarmState+0x260>)
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	0021      	movs	r1, r4
 800550e:	187a      	adds	r2, r7, r1
 8005510:	7892      	ldrb	r2, [r2, #2]
 8005512:	709a      	strb	r2, [r3, #2]
					alarmVars.alarmToSet->min = t.min;
 8005514:	4b16      	ldr	r3, [pc, #88]	; (8005570 <updateAlarmState+0x260>)
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	187a      	adds	r2, r7, r1
 800551a:	7852      	ldrb	r2, [r2, #1]
 800551c:	705a      	strb	r2, [r3, #1]
					alarmVars.alarmToSet->hr = t.hr;
 800551e:	4b14      	ldr	r3, [pc, #80]	; (8005570 <updateAlarmState+0x260>)
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	187a      	adds	r2, r7, r1
 8005524:	7812      	ldrb	r2, [r2, #0]
 8005526:	701a      	strb	r2, [r3, #0]
					alarmVars.alarmToSet->weekday = d.weekday;
 8005528:	4b11      	ldr	r3, [pc, #68]	; (8005570 <updateAlarmState+0x260>)
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	197a      	adds	r2, r7, r5
 800552e:	7912      	ldrb	r2, [r2, #4]
 8005530:	70da      	strb	r2, [r3, #3]
		}
	}
//	if (isAlarmDone) {
//		runMotor(motorTim);
//	}
}
 8005532:	e017      	b.n	8005564 <updateAlarmState+0x254>
				alarmVars.isBeingSet = 0;
 8005534:	4b0e      	ldr	r3, [pc, #56]	; (8005570 <updateAlarmState+0x260>)
 8005536:	2200      	movs	r2, #0
 8005538:	701a      	strb	r2, [r3, #0]
				alarmVars.isSet = 1;
 800553a:	4b0d      	ldr	r3, [pc, #52]	; (8005570 <updateAlarmState+0x260>)
 800553c:	2201      	movs	r2, #1
 800553e:	709a      	strb	r2, [r3, #2]
				setAlarm(alarmVars.alarmToSet, hrtc);
 8005540:	4b0b      	ldr	r3, [pc, #44]	; (8005570 <updateAlarmState+0x260>)
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	0011      	movs	r1, r2
 8005548:	0018      	movs	r0, r3
 800554a:	f7fd fc89 	bl	8002e60 <setAlarm>
}
 800554e:	e009      	b.n	8005564 <updateAlarmState+0x254>
			alarmVars.isSet = 0;
 8005550:	4b07      	ldr	r3, [pc, #28]	; (8005570 <updateAlarmState+0x260>)
 8005552:	2200      	movs	r2, #0
 8005554:	709a      	strb	r2, [r3, #2]
			HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);
 8005556:	2380      	movs	r3, #128	; 0x80
 8005558:	005a      	lsls	r2, r3, #1
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	0011      	movs	r1, r2
 800555e:	0018      	movs	r0, r3
 8005560:	f003 fd3c 	bl	8008fdc <HAL_RTC_DeactivateAlarm>
}
 8005564:	46c0      	nop			; (mov r8, r8)
 8005566:	46bd      	mov	sp, r7
 8005568:	b006      	add	sp, #24
 800556a:	bdb0      	pop	{r4, r5, r7, pc}
 800556c:	20000190 	.word	0x20000190
 8005570:	20000124 	.word	0x20000124
 8005574:	20000144 	.word	0x20000144

08005578 <updateStopwatchState>:
 * notes:
 *   using lptim now, but might need to change to use other timer as lptim might be used by adc
 *     to take regular measurements of the battery
 *   would just have to modify functions in timers.c
 */
void updateStopwatchState(TIM_HandleTypeDef *timerStopwatchTim) {
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
	if (buttons.is2Pressed) {	// start/stop
 8005580:	4b2d      	ldr	r3, [pc, #180]	; (8005638 <updateStopwatchState+0xc0>)
 8005582:	785b      	ldrb	r3, [r3, #1]
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d01f      	beq.n	80055ca <updateStopwatchState+0x52>
		buttons.is2Pressed = 0;
 800558a:	4b2b      	ldr	r3, [pc, #172]	; (8005638 <updateStopwatchState+0xc0>)
 800558c:	2200      	movs	r2, #0
 800558e:	705a      	strb	r2, [r3, #1]
		updateFace.stopwatch = 1;
 8005590:	4b2a      	ldr	r3, [pc, #168]	; (800563c <updateStopwatchState+0xc4>)
 8005592:	2201      	movs	r2, #1
 8005594:	70da      	strb	r2, [r3, #3]

		if (isStopwatchRunning == 0) {
 8005596:	4b2a      	ldr	r3, [pc, #168]	; (8005640 <updateStopwatchState+0xc8>)
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10a      	bne.n	80055b6 <updateStopwatchState+0x3e>
			runStopwatch(timerStopwatchTim);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	0018      	movs	r0, r3
 80055a4:	f7ff f900 	bl	80047a8 <runStopwatch>
			isStopwatchRunning = 1;
 80055a8:	4b25      	ldr	r3, [pc, #148]	; (8005640 <updateStopwatchState+0xc8>)
 80055aa:	2201      	movs	r2, #1
 80055ac:	701a      	strb	r2, [r3, #0]
			isStopwatchPaused = 0;
 80055ae:	4b25      	ldr	r3, [pc, #148]	; (8005644 <updateStopwatchState+0xcc>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	701a      	strb	r2, [r3, #0]
 80055b4:	e009      	b.n	80055ca <updateStopwatchState+0x52>
		}
		else {
			pauseStopwatch(timerStopwatchTim);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	0018      	movs	r0, r3
 80055ba:	f7ff f95b 	bl	8004874 <pauseStopwatch>
			isStopwatchRunning = 0;
 80055be:	4b20      	ldr	r3, [pc, #128]	; (8005640 <updateStopwatchState+0xc8>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	701a      	strb	r2, [r3, #0]
			isStopwatchPaused = 1;
 80055c4:	4b1f      	ldr	r3, [pc, #124]	; (8005644 <updateStopwatchState+0xcc>)
 80055c6:	2201      	movs	r2, #1
 80055c8:	701a      	strb	r2, [r3, #0]
		}
	}
	if (buttons.is3Pressed && stopwatchCounter != 0) {
 80055ca:	4b1b      	ldr	r3, [pc, #108]	; (8005638 <updateStopwatchState+0xc0>)
 80055cc:	789b      	ldrb	r3, [r3, #2]
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d011      	beq.n	80055f8 <updateStopwatchState+0x80>
 80055d4:	4b1c      	ldr	r3, [pc, #112]	; (8005648 <updateStopwatchState+0xd0>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00d      	beq.n	80055f8 <updateStopwatchState+0x80>
		buttons.is3Pressed = 0;
 80055dc:	4b16      	ldr	r3, [pc, #88]	; (8005638 <updateStopwatchState+0xc0>)
 80055de:	2200      	movs	r2, #0
 80055e0:	709a      	strb	r2, [r3, #2]
		updateFace.stopwatch = 1;
 80055e2:	4b16      	ldr	r3, [pc, #88]	; (800563c <updateStopwatchState+0xc4>)
 80055e4:	2201      	movs	r2, #1
 80055e6:	70da      	strb	r2, [r3, #3]

		// pull data and set lap
		stopwatchVars.lapPrev = stopwatchVars.lapCurrent;
 80055e8:	4b18      	ldr	r3, [pc, #96]	; (800564c <updateStopwatchState+0xd4>)
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	4b17      	ldr	r3, [pc, #92]	; (800564c <updateStopwatchState+0xd4>)
 80055ee:	601a      	str	r2, [r3, #0]
		stopwatchVars.lapCurrent = stopwatchCounter;
 80055f0:	4b15      	ldr	r3, [pc, #84]	; (8005648 <updateStopwatchState+0xd0>)
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	4b15      	ldr	r3, [pc, #84]	; (800564c <updateStopwatchState+0xd4>)
 80055f6:	605a      	str	r2, [r3, #4]
	}
	if (buttons.is4Pressed) {
 80055f8:	4b0f      	ldr	r3, [pc, #60]	; (8005638 <updateStopwatchState+0xc0>)
 80055fa:	78db      	ldrb	r3, [r3, #3]
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d015      	beq.n	800562e <updateStopwatchState+0xb6>
		buttons.is4Pressed = 0;
 8005602:	4b0d      	ldr	r3, [pc, #52]	; (8005638 <updateStopwatchState+0xc0>)
 8005604:	2200      	movs	r2, #0
 8005606:	70da      	strb	r2, [r3, #3]
		updateFace.stopwatch = 1;
 8005608:	4b0c      	ldr	r3, [pc, #48]	; (800563c <updateStopwatchState+0xc4>)
 800560a:	2201      	movs	r2, #1
 800560c:	70da      	strb	r2, [r3, #3]

		// clear stopwatch hw
		clearStopwatch(timerStopwatchTim);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	0018      	movs	r0, r3
 8005612:	f7ff f943 	bl	800489c <clearStopwatch>
		stopwatchVars.lapCurrent = 0;
 8005616:	4b0d      	ldr	r3, [pc, #52]	; (800564c <updateStopwatchState+0xd4>)
 8005618:	2200      	movs	r2, #0
 800561a:	605a      	str	r2, [r3, #4]
		stopwatchVars.lapPrev = 0;
 800561c:	4b0b      	ldr	r3, [pc, #44]	; (800564c <updateStopwatchState+0xd4>)
 800561e:	2200      	movs	r2, #0
 8005620:	601a      	str	r2, [r3, #0]
		isStopwatchRunning = 0;
 8005622:	4b07      	ldr	r3, [pc, #28]	; (8005640 <updateStopwatchState+0xc8>)
 8005624:	2200      	movs	r2, #0
 8005626:	701a      	strb	r2, [r3, #0]
		isStopwatchPaused = 0;
 8005628:	4b06      	ldr	r3, [pc, #24]	; (8005644 <updateStopwatchState+0xcc>)
 800562a:	2200      	movs	r2, #0
 800562c:	701a      	strb	r2, [r3, #0]
	}
}
 800562e:	46c0      	nop			; (mov r8, r8)
 8005630:	46bd      	mov	sp, r7
 8005632:	b002      	add	sp, #8
 8005634:	bd80      	pop	{r7, pc}
 8005636:	46c0      	nop			; (mov r8, r8)
 8005638:	20000190 	.word	0x20000190
 800563c:	20000144 	.word	0x20000144
 8005640:	20000148 	.word	0x20000148
 8005644:	20000195 	.word	0x20000195
 8005648:	20000198 	.word	0x20000198
 800564c:	2000012c 	.word	0x2000012c

08005650 <updateDisplay>:

// update screen based on global variables
// going in main, so it's executing in a while loop
//   software interrupt on flag so that this doesn't run all the time?
void updateDisplay(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
	// change faces
	if (isFaceBeingChanged == 1) {
 800565a:	4b56      	ldr	r3, [pc, #344]	; (80057b4 <updateDisplay+0x164>)
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d14e      	bne.n	8005700 <updateDisplay+0xb0>
		isFaceBeingChanged = 0;
 8005662:	4b54      	ldr	r3, [pc, #336]	; (80057b4 <updateDisplay+0x164>)
 8005664:	2200      	movs	r2, #0
 8005666:	701a      	strb	r2, [r3, #0]

		// drawing titles and boxes that won't be rewritten during normal operation within
		// a specific face (titles and buttons)
		if (faceOnDisplay == faceClock) {
 8005668:	4b53      	ldr	r3, [pc, #332]	; (80057b8 <updateDisplay+0x168>)
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10b      	bne.n	8005688 <updateDisplay+0x38>
			clearScreen(ST77XX_CYAN, hspi);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	4a52      	ldr	r2, [pc, #328]	; (80057bc <updateDisplay+0x16c>)
 8005674:	0019      	movs	r1, r3
 8005676:	0010      	movs	r0, r2
 8005678:	f7fc fccc 	bl	8002014 <clearScreen>
			drawTitle("clock", hspi);
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	4b50      	ldr	r3, [pc, #320]	; (80057c0 <updateDisplay+0x170>)
 8005680:	0011      	movs	r1, r2
 8005682:	0018      	movs	r0, r3
 8005684:	f000 fbea 	bl	8005e5c <drawTitle>
		}
		if (faceOnDisplay == faceTimer) {
 8005688:	4b4b      	ldr	r3, [pc, #300]	; (80057b8 <updateDisplay+0x168>)
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d10c      	bne.n	80056aa <updateDisplay+0x5a>
			clearScreen(ST77XX_GREEN, hspi);
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	23fc      	movs	r3, #252	; 0xfc
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	0011      	movs	r1, r2
 8005698:	0018      	movs	r0, r3
 800569a:	f7fc fcbb 	bl	8002014 <clearScreen>
			drawTitle("timer", hspi);
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	4b48      	ldr	r3, [pc, #288]	; (80057c4 <updateDisplay+0x174>)
 80056a2:	0011      	movs	r1, r2
 80056a4:	0018      	movs	r0, r3
 80056a6:	f000 fbd9 	bl	8005e5c <drawTitle>
		}
		if (faceOnDisplay == faceAlarm) {
 80056aa:	4b43      	ldr	r3, [pc, #268]	; (80057b8 <updateDisplay+0x168>)
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d10b      	bne.n	80056ca <updateDisplay+0x7a>
			clearScreen(ST77XX_MAGENTA, hspi);
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	4a44      	ldr	r2, [pc, #272]	; (80057c8 <updateDisplay+0x178>)
 80056b6:	0019      	movs	r1, r3
 80056b8:	0010      	movs	r0, r2
 80056ba:	f7fc fcab 	bl	8002014 <clearScreen>
			drawTitle("alarm", hspi);
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	4b42      	ldr	r3, [pc, #264]	; (80057cc <updateDisplay+0x17c>)
 80056c2:	0011      	movs	r1, r2
 80056c4:	0018      	movs	r0, r3
 80056c6:	f000 fbc9 	bl	8005e5c <drawTitle>
		}
		if (faceOnDisplay == faceStopwatch) {
 80056ca:	4b3b      	ldr	r3, [pc, #236]	; (80057b8 <updateDisplay+0x168>)
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b03      	cmp	r3, #3
 80056d0:	d10b      	bne.n	80056ea <updateDisplay+0x9a>
			clearScreen(ST77XX_YELLOW, hspi);
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	4a3e      	ldr	r2, [pc, #248]	; (80057d0 <updateDisplay+0x180>)
 80056d6:	0019      	movs	r1, r3
 80056d8:	0010      	movs	r0, r2
 80056da:	f7fc fc9b 	bl	8002014 <clearScreen>
			drawTitle("stopwatch", hspi);
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	4b3c      	ldr	r3, [pc, #240]	; (80057d4 <updateDisplay+0x184>)
 80056e2:	0011      	movs	r1, r2
 80056e4:	0018      	movs	r0, r3
 80056e6:	f000 fbb9 	bl	8005e5c <drawTitle>
		}

		drawBattery(battPercentage, hspi);
 80056ea:	4b3b      	ldr	r3, [pc, #236]	; (80057d8 <updateDisplay+0x188>)
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	0011      	movs	r1, r2
 80056f2:	0018      	movs	r0, r3
 80056f4:	f000 fc26 	bl	8005f44 <drawBattery>
		drawButtons(hspi);
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	0018      	movs	r0, r3
 80056fc:	f000 fb68 	bl	8005dd0 <drawButtons>
	}

	// update clock face
	if (faceOnDisplay == faceClock) {
 8005700:	4b2d      	ldr	r3, [pc, #180]	; (80057b8 <updateDisplay+0x168>)
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d112      	bne.n	800572e <updateDisplay+0xde>
		if (updateFace.clock == 1) {
 8005708:	4b34      	ldr	r3, [pc, #208]	; (80057dc <updateDisplay+0x18c>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b01      	cmp	r3, #1
 8005710:	d14c      	bne.n	80057ac <updateDisplay+0x15c>
			updateFace.clock = 0;
 8005712:	4b32      	ldr	r3, [pc, #200]	; (80057dc <updateDisplay+0x18c>)
 8005714:	2200      	movs	r2, #0
 8005716:	701a      	strb	r2, [r3, #0]
			setBackgroundColor(ST77XX_CYAN);
 8005718:	4b28      	ldr	r3, [pc, #160]	; (80057bc <updateDisplay+0x16c>)
 800571a:	0018      	movs	r0, r3
 800571c:	f7fd f9ba 	bl	8002a94 <setBackgroundColor>
			updateClockDisplay(hrtc, hspi);
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	0011      	movs	r1, r2
 8005726:	0018      	movs	r0, r3
 8005728:	f000 f85a 	bl	80057e0 <updateClockDisplay>
		}
	}

	// is called a lot and redrawn every time. inefficient, but w/e
//	drawBattery(battPercentage, hspi);
}
 800572c:	e03e      	b.n	80057ac <updateDisplay+0x15c>
	else if (faceOnDisplay == faceTimer) {
 800572e:	4b22      	ldr	r3, [pc, #136]	; (80057b8 <updateDisplay+0x168>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d111      	bne.n	800575a <updateDisplay+0x10a>
		if (updateFace.timer == 1) {
 8005736:	4b29      	ldr	r3, [pc, #164]	; (80057dc <updateDisplay+0x18c>)
 8005738:	785b      	ldrb	r3, [r3, #1]
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b01      	cmp	r3, #1
 800573e:	d135      	bne.n	80057ac <updateDisplay+0x15c>
			updateFace.timer = 0;
 8005740:	4b26      	ldr	r3, [pc, #152]	; (80057dc <updateDisplay+0x18c>)
 8005742:	2200      	movs	r2, #0
 8005744:	705a      	strb	r2, [r3, #1]
			setBackgroundColor(ST77XX_GREEN);
 8005746:	23fc      	movs	r3, #252	; 0xfc
 8005748:	00db      	lsls	r3, r3, #3
 800574a:	0018      	movs	r0, r3
 800574c:	f7fd f9a2 	bl	8002a94 <setBackgroundColor>
			updateTimerDisplay(hspi);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	0018      	movs	r0, r3
 8005754:	f000 f8ee 	bl	8005934 <updateTimerDisplay>
}
 8005758:	e028      	b.n	80057ac <updateDisplay+0x15c>
	else if (faceOnDisplay == faceAlarm) {
 800575a:	4b17      	ldr	r3, [pc, #92]	; (80057b8 <updateDisplay+0x168>)
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	2b02      	cmp	r3, #2
 8005760:	d110      	bne.n	8005784 <updateDisplay+0x134>
		if (updateFace.alarm == 1) {
 8005762:	4b1e      	ldr	r3, [pc, #120]	; (80057dc <updateDisplay+0x18c>)
 8005764:	789b      	ldrb	r3, [r3, #2]
 8005766:	b2db      	uxtb	r3, r3
 8005768:	2b01      	cmp	r3, #1
 800576a:	d11f      	bne.n	80057ac <updateDisplay+0x15c>
			updateFace.alarm = 0;
 800576c:	4b1b      	ldr	r3, [pc, #108]	; (80057dc <updateDisplay+0x18c>)
 800576e:	2200      	movs	r2, #0
 8005770:	709a      	strb	r2, [r3, #2]
			setBackgroundColor(ST77XX_MAGENTA);
 8005772:	4b15      	ldr	r3, [pc, #84]	; (80057c8 <updateDisplay+0x178>)
 8005774:	0018      	movs	r0, r3
 8005776:	f7fd f98d 	bl	8002a94 <setBackgroundColor>
			updateAlarmDisplay(hspi);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	0018      	movs	r0, r3
 800577e:	f000 f9d9 	bl	8005b34 <updateAlarmDisplay>
}
 8005782:	e013      	b.n	80057ac <updateDisplay+0x15c>
	else if (faceOnDisplay == faceStopwatch) {
 8005784:	4b0c      	ldr	r3, [pc, #48]	; (80057b8 <updateDisplay+0x168>)
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	2b03      	cmp	r3, #3
 800578a:	d10f      	bne.n	80057ac <updateDisplay+0x15c>
		if (updateFace.stopwatch == 1) {
 800578c:	4b13      	ldr	r3, [pc, #76]	; (80057dc <updateDisplay+0x18c>)
 800578e:	78db      	ldrb	r3, [r3, #3]
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b01      	cmp	r3, #1
 8005794:	d10a      	bne.n	80057ac <updateDisplay+0x15c>
			updateFace.stopwatch = 0;
 8005796:	4b11      	ldr	r3, [pc, #68]	; (80057dc <updateDisplay+0x18c>)
 8005798:	2200      	movs	r2, #0
 800579a:	70da      	strb	r2, [r3, #3]
			setBackgroundColor(ST77XX_YELLOW);
 800579c:	4b0c      	ldr	r3, [pc, #48]	; (80057d0 <updateDisplay+0x180>)
 800579e:	0018      	movs	r0, r3
 80057a0:	f7fd f978 	bl	8002a94 <setBackgroundColor>
			updateStopwatchDisplay(hspi);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	0018      	movs	r0, r3
 80057a8:	f000 fa8a 	bl	8005cc0 <updateStopwatchDisplay>
}
 80057ac:	46c0      	nop			; (mov r8, r8)
 80057ae:	46bd      	mov	sp, r7
 80057b0:	b002      	add	sp, #8
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	20000068 	.word	0x20000068
 80057b8:	20000134 	.word	0x20000134
 80057bc:	000007ff 	.word	0x000007ff
 80057c0:	0800b538 	.word	0x0800b538
 80057c4:	0800b540 	.word	0x0800b540
 80057c8:	0000f81f 	.word	0x0000f81f
 80057cc:	0800b548 	.word	0x0800b548
 80057d0:	0000ffe0 	.word	0x0000ffe0
 80057d4:	0800b550 	.word	0x0800b550
 80057d8:	20000140 	.word	0x20000140
 80057dc:	20000144 	.word	0x20000144

080057e0 <updateClockDisplay>:

void updateClockDisplay(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 80057e0:	b5b0      	push	{r4, r5, r7, lr}
 80057e2:	b088      	sub	sp, #32
 80057e4:	af02      	add	r7, sp, #8
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
	struct dates currentDate = {0};
 80057ea:	2310      	movs	r3, #16
 80057ec:	18fb      	adds	r3, r7, r3
 80057ee:	0018      	movs	r0, r3
 80057f0:	2306      	movs	r3, #6
 80057f2:	001a      	movs	r2, r3
 80057f4:	2100      	movs	r1, #0
 80057f6:	f005 fa06 	bl	800ac06 <memset>
	struct times currentTime = {0};
 80057fa:	230c      	movs	r3, #12
 80057fc:	18fb      	adds	r3, r7, r3
 80057fe:	0018      	movs	r0, r3
 8005800:	2303      	movs	r3, #3
 8005802:	001a      	movs	r2, r3
 8005804:	2100      	movs	r1, #0
 8005806:	f005 f9fe 	bl	800ac06 <memset>

	setTextColor(ST77XX_BLACK);
 800580a:	2000      	movs	r0, #0
 800580c:	f7fd f97c 	bl	8002b08 <setTextColor>
	if (clockVars.isBeingSet == 0) {
 8005810:	4b3c      	ldr	r3, [pc, #240]	; (8005904 <updateClockDisplay+0x124>)
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d11c      	bne.n	8005852 <updateClockDisplay+0x72>
		getDateTime(&currentDate, &currentTime, hrtc);
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	240c      	movs	r4, #12
 800581c:	1939      	adds	r1, r7, r4
 800581e:	2510      	movs	r5, #16
 8005820:	197b      	adds	r3, r7, r5
 8005822:	0018      	movs	r0, r3
 8005824:	f7fd fc74 	bl	8003110 <getDateTime>
		drawClock(&currentDate, &currentTime, hspi);
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	1939      	adds	r1, r7, r4
 800582c:	197b      	adds	r3, r7, r5
 800582e:	0018      	movs	r0, r3
 8005830:	f000 fc22 	bl	8006078 <drawClock>

		setTextSize(1);
 8005834:	2001      	movs	r0, #1
 8005836:	f7fd f957 	bl	8002ae8 <setTextSize>
		// clear line that says "setting ___"
		clearTextLine(44, hspi);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	0019      	movs	r1, r3
 800583e:	202c      	movs	r0, #44	; 0x2c
 8005840:	f7fd f908 	bl	8002a54 <clearTextLine>

		// draw button text
		drawButtonText("", "", "set", hspi);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	4a30      	ldr	r2, [pc, #192]	; (8005908 <updateClockDisplay+0x128>)
 8005848:	4930      	ldr	r1, [pc, #192]	; (800590c <updateClockDisplay+0x12c>)
 800584a:	4830      	ldr	r0, [pc, #192]	; (800590c <updateClockDisplay+0x12c>)
 800584c:	f000 fada 	bl	8005e04 <drawButtonText>
			default: break;
		}

		drawClock(clockVars.dateToSet, clockVars.timeToSet, hspi);
	}
}
 8005850:	e054      	b.n	80058fc <updateClockDisplay+0x11c>
	else if (clockVars.isBeingSet == 1) {
 8005852:	4b2c      	ldr	r3, [pc, #176]	; (8005904 <updateClockDisplay+0x124>)
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d150      	bne.n	80058fc <updateClockDisplay+0x11c>
		if (clockVars.fieldBeingSet == 1) drawButtonText("up", "down", "change", hspi);
 800585a:	4b2a      	ldr	r3, [pc, #168]	; (8005904 <updateClockDisplay+0x124>)
 800585c:	785b      	ldrb	r3, [r3, #1]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d105      	bne.n	800586e <updateClockDisplay+0x8e>
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	4a2a      	ldr	r2, [pc, #168]	; (8005910 <updateClockDisplay+0x130>)
 8005866:	492b      	ldr	r1, [pc, #172]	; (8005914 <updateClockDisplay+0x134>)
 8005868:	482b      	ldr	r0, [pc, #172]	; (8005918 <updateClockDisplay+0x138>)
 800586a:	f000 facb 	bl	8005e04 <drawButtonText>
		setTextSize(1);
 800586e:	2001      	movs	r0, #1
 8005870:	f7fd f93a 	bl	8002ae8 <setTextSize>
		switch (clockVars.fieldBeingSet) {
 8005874:	4b23      	ldr	r3, [pc, #140]	; (8005904 <updateClockDisplay+0x124>)
 8005876:	785b      	ldrb	r3, [r3, #1]
 8005878:	2b05      	cmp	r3, #5
 800587a:	d836      	bhi.n	80058ea <updateClockDisplay+0x10a>
 800587c:	009a      	lsls	r2, r3, #2
 800587e:	4b27      	ldr	r3, [pc, #156]	; (800591c <updateClockDisplay+0x13c>)
 8005880:	18d3      	adds	r3, r2, r3
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	469f      	mov	pc, r3
			case 1:	drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting minute...", hspi); break;
 8005886:	4a26      	ldr	r2, [pc, #152]	; (8005920 <updateClockDisplay+0x140>)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	0013      	movs	r3, r2
 800588e:	2211      	movs	r2, #17
 8005890:	212c      	movs	r1, #44	; 0x2c
 8005892:	2040      	movs	r0, #64	; 0x40
 8005894:	f7fd f806 	bl	80028a4 <drawCenteredTextWithPadding>
 8005898:	e028      	b.n	80058ec <updateClockDisplay+0x10c>
			case 2:	drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting hour...", hspi);	break;
 800589a:	4a22      	ldr	r2, [pc, #136]	; (8005924 <updateClockDisplay+0x144>)
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	0013      	movs	r3, r2
 80058a2:	2211      	movs	r2, #17
 80058a4:	212c      	movs	r1, #44	; 0x2c
 80058a6:	2040      	movs	r0, #64	; 0x40
 80058a8:	f7fc fffc 	bl	80028a4 <drawCenteredTextWithPadding>
 80058ac:	e01e      	b.n	80058ec <updateClockDisplay+0x10c>
			case 3: drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting year...", hspi); break;
 80058ae:	4a1e      	ldr	r2, [pc, #120]	; (8005928 <updateClockDisplay+0x148>)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	9300      	str	r3, [sp, #0]
 80058b4:	0013      	movs	r3, r2
 80058b6:	2211      	movs	r2, #17
 80058b8:	212c      	movs	r1, #44	; 0x2c
 80058ba:	2040      	movs	r0, #64	; 0x40
 80058bc:	f7fc fff2 	bl	80028a4 <drawCenteredTextWithPadding>
 80058c0:	e014      	b.n	80058ec <updateClockDisplay+0x10c>
			case 4: drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting month...", hspi); break;
 80058c2:	4a1a      	ldr	r2, [pc, #104]	; (800592c <updateClockDisplay+0x14c>)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	0013      	movs	r3, r2
 80058ca:	2211      	movs	r2, #17
 80058cc:	212c      	movs	r1, #44	; 0x2c
 80058ce:	2040      	movs	r0, #64	; 0x40
 80058d0:	f7fc ffe8 	bl	80028a4 <drawCenteredTextWithPadding>
 80058d4:	e00a      	b.n	80058ec <updateClockDisplay+0x10c>
			case 5: drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting date...", hspi); break;
 80058d6:	4a16      	ldr	r2, [pc, #88]	; (8005930 <updateClockDisplay+0x150>)
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	0013      	movs	r3, r2
 80058de:	2211      	movs	r2, #17
 80058e0:	212c      	movs	r1, #44	; 0x2c
 80058e2:	2040      	movs	r0, #64	; 0x40
 80058e4:	f7fc ffde 	bl	80028a4 <drawCenteredTextWithPadding>
 80058e8:	e000      	b.n	80058ec <updateClockDisplay+0x10c>
			default: break;
 80058ea:	46c0      	nop			; (mov r8, r8)
		drawClock(clockVars.dateToSet, clockVars.timeToSet, hspi);
 80058ec:	4b05      	ldr	r3, [pc, #20]	; (8005904 <updateClockDisplay+0x124>)
 80058ee:	6858      	ldr	r0, [r3, #4]
 80058f0:	4b04      	ldr	r3, [pc, #16]	; (8005904 <updateClockDisplay+0x124>)
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	0019      	movs	r1, r3
 80058f8:	f000 fbbe 	bl	8006078 <drawClock>
}
 80058fc:	46c0      	nop			; (mov r8, r8)
 80058fe:	46bd      	mov	sp, r7
 8005900:	b006      	add	sp, #24
 8005902:	bdb0      	pop	{r4, r5, r7, pc}
 8005904:	20000110 	.word	0x20000110
 8005908:	0800b55c 	.word	0x0800b55c
 800590c:	0800b4bc 	.word	0x0800b4bc
 8005910:	0800b560 	.word	0x0800b560
 8005914:	0800b568 	.word	0x0800b568
 8005918:	0800b570 	.word	0x0800b570
 800591c:	0800bf9c 	.word	0x0800bf9c
 8005920:	0800b574 	.word	0x0800b574
 8005924:	0800b588 	.word	0x0800b588
 8005928:	0800b598 	.word	0x0800b598
 800592c:	0800b5a8 	.word	0x0800b5a8
 8005930:	0800b5bc 	.word	0x0800b5bc

08005934 <updateTimerDisplay>:

void updateTimerDisplay(SPI_HandleTypeDef *hspi) {
 8005934:	b590      	push	{r4, r7, lr}
 8005936:	b087      	sub	sp, #28
 8005938:	af02      	add	r7, sp, #8
 800593a:	6078      	str	r0, [r7, #4]
	struct times currentTimer = {0};
 800593c:	230c      	movs	r3, #12
 800593e:	18fb      	adds	r3, r7, r3
 8005940:	0018      	movs	r0, r3
 8005942:	2303      	movs	r3, #3
 8005944:	001a      	movs	r2, r3
 8005946:	2100      	movs	r1, #0
 8005948:	f005 f95d 	bl	800ac06 <memset>

	setTextColor(ST77XX_BLACK);
 800594c:	2000      	movs	r0, #0
 800594e:	f7fd f8db 	bl	8002b08 <setTextColor>
	if (timerVars.isBeingSet == 0) {
 8005952:	4b64      	ldr	r3, [pc, #400]	; (8005ae4 <updateTimerDisplay+0x1b0>)
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d000      	beq.n	800595c <updateTimerDisplay+0x28>
 800595a:	e087      	b.n	8005a6c <updateTimerDisplay+0x138>
		if (timerVars.isSet == 0) {
 800595c:	4b61      	ldr	r3, [pc, #388]	; (8005ae4 <updateTimerDisplay+0x1b0>)
 800595e:	789b      	ldrb	r3, [r3, #2]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d11f      	bne.n	80059a4 <updateTimerDisplay+0x70>
			setTextSize(2);
 8005964:	2002      	movs	r0, #2
 8005966:	f7fd f8bf 	bl	8002ae8 <setTextSize>
			clearTextLine(68, hspi);	// clear timer time text
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	0019      	movs	r1, r3
 800596e:	2044      	movs	r0, #68	; 0x44
 8005970:	f7fd f870 	bl	8002a54 <clearTextLine>

			// write "timer unset"
			setTextSize(1);
 8005974:	2001      	movs	r0, #1
 8005976:	f7fd f8b7 	bl	8002ae8 <setTextSize>
			clearTextLine(52, hspi);	// clear setting ___ text
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	0019      	movs	r1, r3
 800597e:	2034      	movs	r0, #52	; 0x34
 8005980:	f7fd f868 	bl	8002a54 <clearTextLine>
			drawCenteredTextWithPadding(WIDTH/2, 84, 12, "timer unset", hspi);
 8005984:	4a58      	ldr	r2, [pc, #352]	; (8005ae8 <updateTimerDisplay+0x1b4>)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	0013      	movs	r3, r2
 800598c:	220c      	movs	r2, #12
 800598e:	2154      	movs	r1, #84	; 0x54
 8005990:	2040      	movs	r0, #64	; 0x40
 8005992:	f7fc ff87 	bl	80028a4 <drawCenteredTextWithPadding>

			// draw button text
			drawButtonText("", "", "set", hspi);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a54      	ldr	r2, [pc, #336]	; (8005aec <updateTimerDisplay+0x1b8>)
 800599a:	4955      	ldr	r1, [pc, #340]	; (8005af0 <updateTimerDisplay+0x1bc>)
 800599c:	4854      	ldr	r0, [pc, #336]	; (8005af0 <updateTimerDisplay+0x1bc>)
 800599e:	f000 fa31 	bl	8005e04 <drawButtonText>
			default: break;
		}

		drawTimer(timerVars.timeToSet, hspi);
	}
}
 80059a2:	e09b      	b.n	8005adc <updateTimerDisplay+0x1a8>
		else if (isTimerDone == 0) {
 80059a4:	4b53      	ldr	r3, [pc, #332]	; (8005af4 <updateTimerDisplay+0x1c0>)
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d143      	bne.n	8005a36 <updateTimerDisplay+0x102>
			secondsToTime(&currentTimer, timerCounter);
 80059ae:	4b52      	ldr	r3, [pc, #328]	; (8005af8 <updateTimerDisplay+0x1c4>)
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	240c      	movs	r4, #12
 80059b4:	193b      	adds	r3, r7, r4
 80059b6:	0011      	movs	r1, r2
 80059b8:	0018      	movs	r0, r3
 80059ba:	f7fd fc74 	bl	80032a6 <secondsToTime>
			drawTimer(&currentTimer, hspi);
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	193b      	adds	r3, r7, r4
 80059c2:	0011      	movs	r1, r2
 80059c4:	0018      	movs	r0, r3
 80059c6:	f000 fbf1 	bl	80061ac <drawTimer>
			setTextSize(1);
 80059ca:	2001      	movs	r0, #1
 80059cc:	f7fd f88c 	bl	8002ae8 <setTextSize>
			clearTextLine(52, hspi);	// clear setting ___ text
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	0019      	movs	r1, r3
 80059d4:	2034      	movs	r0, #52	; 0x34
 80059d6:	f7fd f83d 	bl	8002a54 <clearTextLine>
			if (isTimerPaused == 1) {
 80059da:	4b48      	ldr	r3, [pc, #288]	; (8005afc <updateTimerDisplay+0x1c8>)
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d109      	bne.n	80059f8 <updateTimerDisplay+0xc4>
				drawCenteredTextWithPadding(WIDTH/2, 84, 12, "timer paused", hspi);
 80059e4:	4a46      	ldr	r2, [pc, #280]	; (8005b00 <updateTimerDisplay+0x1cc>)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	0013      	movs	r3, r2
 80059ec:	220c      	movs	r2, #12
 80059ee:	2154      	movs	r1, #84	; 0x54
 80059f0:	2040      	movs	r0, #64	; 0x40
 80059f2:	f7fc ff57 	bl	80028a4 <drawCenteredTextWithPadding>
 80059f6:	e017      	b.n	8005a28 <updateTimerDisplay+0xf4>
			else if (isTimerRunning == 0 && timerCounter != 0) {
 80059f8:	4b42      	ldr	r3, [pc, #264]	; (8005b04 <updateTimerDisplay+0x1d0>)
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10d      	bne.n	8005a1e <updateTimerDisplay+0xea>
 8005a02:	4b3d      	ldr	r3, [pc, #244]	; (8005af8 <updateTimerDisplay+0x1c4>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d009      	beq.n	8005a1e <updateTimerDisplay+0xea>
				drawCenteredTextWithPadding(WIDTH/2, 84, 12, "timer set!", hspi);
 8005a0a:	4a3f      	ldr	r2, [pc, #252]	; (8005b08 <updateTimerDisplay+0x1d4>)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	0013      	movs	r3, r2
 8005a12:	220c      	movs	r2, #12
 8005a14:	2154      	movs	r1, #84	; 0x54
 8005a16:	2040      	movs	r0, #64	; 0x40
 8005a18:	f7fc ff44 	bl	80028a4 <drawCenteredTextWithPadding>
 8005a1c:	e004      	b.n	8005a28 <updateTimerDisplay+0xf4>
				clearTextLine(84, hspi);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	0019      	movs	r1, r3
 8005a22:	2054      	movs	r0, #84	; 0x54
 8005a24:	f7fd f816 	bl	8002a54 <clearTextLine>
			drawButtonText("run", "pause", "clear", hspi);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a38      	ldr	r2, [pc, #224]	; (8005b0c <updateTimerDisplay+0x1d8>)
 8005a2c:	4938      	ldr	r1, [pc, #224]	; (8005b10 <updateTimerDisplay+0x1dc>)
 8005a2e:	4839      	ldr	r0, [pc, #228]	; (8005b14 <updateTimerDisplay+0x1e0>)
 8005a30:	f000 f9e8 	bl	8005e04 <drawButtonText>
}
 8005a34:	e052      	b.n	8005adc <updateTimerDisplay+0x1a8>
			secondsToTime(&currentTimer, timerCounter);
 8005a36:	4b30      	ldr	r3, [pc, #192]	; (8005af8 <updateTimerDisplay+0x1c4>)
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	240c      	movs	r4, #12
 8005a3c:	193b      	adds	r3, r7, r4
 8005a3e:	0011      	movs	r1, r2
 8005a40:	0018      	movs	r0, r3
 8005a42:	f7fd fc30 	bl	80032a6 <secondsToTime>
			drawTimer(&currentTimer, hspi);
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	193b      	adds	r3, r7, r4
 8005a4a:	0011      	movs	r1, r2
 8005a4c:	0018      	movs	r0, r3
 8005a4e:	f000 fbad 	bl	80061ac <drawTimer>
			setTextSize(1);
 8005a52:	2001      	movs	r0, #1
 8005a54:	f7fd f848 	bl	8002ae8 <setTextSize>
			drawCenteredTextWithPadding(WIDTH/2, 84, 12, "timer done!", hspi);
 8005a58:	4a2f      	ldr	r2, [pc, #188]	; (8005b18 <updateTimerDisplay+0x1e4>)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	0013      	movs	r3, r2
 8005a60:	220c      	movs	r2, #12
 8005a62:	2154      	movs	r1, #84	; 0x54
 8005a64:	2040      	movs	r0, #64	; 0x40
 8005a66:	f7fc ff1d 	bl	80028a4 <drawCenteredTextWithPadding>
}
 8005a6a:	e037      	b.n	8005adc <updateTimerDisplay+0x1a8>
	else if (timerVars.isBeingSet == 1) {
 8005a6c:	4b1d      	ldr	r3, [pc, #116]	; (8005ae4 <updateTimerDisplay+0x1b0>)
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d133      	bne.n	8005adc <updateTimerDisplay+0x1a8>
		drawButtonText("up", "down", "change", hspi);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a29      	ldr	r2, [pc, #164]	; (8005b1c <updateTimerDisplay+0x1e8>)
 8005a78:	4929      	ldr	r1, [pc, #164]	; (8005b20 <updateTimerDisplay+0x1ec>)
 8005a7a:	482a      	ldr	r0, [pc, #168]	; (8005b24 <updateTimerDisplay+0x1f0>)
 8005a7c:	f000 f9c2 	bl	8005e04 <drawButtonText>
		switch (timerVars.fieldBeingSet) {
 8005a80:	4b18      	ldr	r3, [pc, #96]	; (8005ae4 <updateTimerDisplay+0x1b0>)
 8005a82:	785b      	ldrb	r3, [r3, #1]
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d00e      	beq.n	8005aa6 <updateTimerDisplay+0x172>
 8005a88:	2b03      	cmp	r3, #3
 8005a8a:	d016      	beq.n	8005aba <updateTimerDisplay+0x186>
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d000      	beq.n	8005a92 <updateTimerDisplay+0x15e>
			default: break;
 8005a90:	e01d      	b.n	8005ace <updateTimerDisplay+0x19a>
			case 1: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting second...", hspi); break;
 8005a92:	4a25      	ldr	r2, [pc, #148]	; (8005b28 <updateTimerDisplay+0x1f4>)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	0013      	movs	r3, r2
 8005a9a:	2211      	movs	r2, #17
 8005a9c:	2134      	movs	r1, #52	; 0x34
 8005a9e:	2040      	movs	r0, #64	; 0x40
 8005aa0:	f7fc ff00 	bl	80028a4 <drawCenteredTextWithPadding>
 8005aa4:	e013      	b.n	8005ace <updateTimerDisplay+0x19a>
			case 2: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting minute...", hspi); break;
 8005aa6:	4a21      	ldr	r2, [pc, #132]	; (8005b2c <updateTimerDisplay+0x1f8>)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	9300      	str	r3, [sp, #0]
 8005aac:	0013      	movs	r3, r2
 8005aae:	2211      	movs	r2, #17
 8005ab0:	2134      	movs	r1, #52	; 0x34
 8005ab2:	2040      	movs	r0, #64	; 0x40
 8005ab4:	f7fc fef6 	bl	80028a4 <drawCenteredTextWithPadding>
 8005ab8:	e009      	b.n	8005ace <updateTimerDisplay+0x19a>
			case 3: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting hour...", hspi); break;
 8005aba:	4a1d      	ldr	r2, [pc, #116]	; (8005b30 <updateTimerDisplay+0x1fc>)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	0013      	movs	r3, r2
 8005ac2:	2211      	movs	r2, #17
 8005ac4:	2134      	movs	r1, #52	; 0x34
 8005ac6:	2040      	movs	r0, #64	; 0x40
 8005ac8:	f7fc feec 	bl	80028a4 <drawCenteredTextWithPadding>
 8005acc:	46c0      	nop			; (mov r8, r8)
		drawTimer(timerVars.timeToSet, hspi);
 8005ace:	4b05      	ldr	r3, [pc, #20]	; (8005ae4 <updateTimerDisplay+0x1b0>)
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	0011      	movs	r1, r2
 8005ad6:	0018      	movs	r0, r3
 8005ad8:	f000 fb68 	bl	80061ac <drawTimer>
}
 8005adc:	46c0      	nop			; (mov r8, r8)
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	b005      	add	sp, #20
 8005ae2:	bd90      	pop	{r4, r7, pc}
 8005ae4:	2000011c 	.word	0x2000011c
 8005ae8:	0800b5cc 	.word	0x0800b5cc
 8005aec:	0800b55c 	.word	0x0800b55c
 8005af0:	0800b4bc 	.word	0x0800b4bc
 8005af4:	20000150 	.word	0x20000150
 8005af8:	2000014c 	.word	0x2000014c
 8005afc:	20000196 	.word	0x20000196
 8005b00:	0800b5d8 	.word	0x0800b5d8
 8005b04:	20000194 	.word	0x20000194
 8005b08:	0800b5e8 	.word	0x0800b5e8
 8005b0c:	0800b5f4 	.word	0x0800b5f4
 8005b10:	0800b5fc 	.word	0x0800b5fc
 8005b14:	0800b604 	.word	0x0800b604
 8005b18:	0800b608 	.word	0x0800b608
 8005b1c:	0800b560 	.word	0x0800b560
 8005b20:	0800b568 	.word	0x0800b568
 8005b24:	0800b570 	.word	0x0800b570
 8005b28:	0800b614 	.word	0x0800b614
 8005b2c:	0800b574 	.word	0x0800b574
 8005b30:	0800b588 	.word	0x0800b588

08005b34 <updateAlarmDisplay>:

void updateAlarmDisplay(SPI_HandleTypeDef *hspi) {
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af02      	add	r7, sp, #8
 8005b3a:	6078      	str	r0, [r7, #4]
	setTextColor(ST77XX_BLACK);
 8005b3c:	2000      	movs	r0, #0
 8005b3e:	f7fc ffe3 	bl	8002b08 <setTextColor>
	if (alarmVars.isBeingSet == 0) {
 8005b42:	4b50      	ldr	r3, [pc, #320]	; (8005c84 <updateAlarmDisplay+0x150>)
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d14f      	bne.n	8005bea <updateAlarmDisplay+0xb6>
		if (alarmVars.isSet == 0) {
 8005b4a:	4b4e      	ldr	r3, [pc, #312]	; (8005c84 <updateAlarmDisplay+0x150>)
 8005b4c:	789b      	ldrb	r3, [r3, #2]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d11f      	bne.n	8005b92 <updateAlarmDisplay+0x5e>
			setTextSize(3);
 8005b52:	2003      	movs	r0, #3
 8005b54:	f7fc ffc8 	bl	8002ae8 <setTextSize>
			clearTextLine(68, hspi);	// clear alarm time text
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	0019      	movs	r1, r3
 8005b5c:	2044      	movs	r0, #68	; 0x44
 8005b5e:	f7fc ff79 	bl	8002a54 <clearTextLine>

			setTextSize(1);
 8005b62:	2001      	movs	r0, #1
 8005b64:	f7fc ffc0 	bl	8002ae8 <setTextSize>
			clearTextLine(52, hspi);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	0019      	movs	r1, r3
 8005b6c:	2034      	movs	r0, #52	; 0x34
 8005b6e:	f7fc ff71 	bl	8002a54 <clearTextLine>
			drawCenteredTextWithPadding(WIDTH/2, 100, 11, "alarm unset", hspi);
 8005b72:	4a45      	ldr	r2, [pc, #276]	; (8005c88 <updateAlarmDisplay+0x154>)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	0013      	movs	r3, r2
 8005b7a:	220b      	movs	r2, #11
 8005b7c:	2164      	movs	r1, #100	; 0x64
 8005b7e:	2040      	movs	r0, #64	; 0x40
 8005b80:	f7fc fe90 	bl	80028a4 <drawCenteredTextWithPadding>

			// draw button text
			drawButtonText("", "", "set", hspi);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a41      	ldr	r2, [pc, #260]	; (8005c8c <updateAlarmDisplay+0x158>)
 8005b88:	4941      	ldr	r1, [pc, #260]	; (8005c90 <updateAlarmDisplay+0x15c>)
 8005b8a:	4841      	ldr	r0, [pc, #260]	; (8005c90 <updateAlarmDisplay+0x15c>)
 8005b8c:	f000 f93a 	bl	8005e04 <drawButtonText>
		// draw button text
		drawButtonText("up", "down", "change", hspi);

		drawAlarm(alarmVars.alarmToSet, hspi);
	}
}
 8005b90:	e074      	b.n	8005c7c <updateAlarmDisplay+0x148>
		else if (isAlarmDone == 0) {
 8005b92:	4b40      	ldr	r3, [pc, #256]	; (8005c94 <updateAlarmDisplay+0x160>)
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d119      	bne.n	8005bd0 <updateAlarmDisplay+0x9c>
			setTextSize(1);
 8005b9c:	2001      	movs	r0, #1
 8005b9e:	f7fc ffa3 	bl	8002ae8 <setTextSize>
			drawCenteredTextWithPadding(WIDTH/2, 100, 11, "alarm set", hspi);
 8005ba2:	4a3d      	ldr	r2, [pc, #244]	; (8005c98 <updateAlarmDisplay+0x164>)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	0013      	movs	r3, r2
 8005baa:	220b      	movs	r2, #11
 8005bac:	2164      	movs	r1, #100	; 0x64
 8005bae:	2040      	movs	r0, #64	; 0x40
 8005bb0:	f7fc fe78 	bl	80028a4 <drawCenteredTextWithPadding>
			drawAlarm(alarmVars.alarmToSet, hspi);
 8005bb4:	4b33      	ldr	r3, [pc, #204]	; (8005c84 <updateAlarmDisplay+0x150>)
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	0011      	movs	r1, r2
 8005bbc:	0018      	movs	r0, r3
 8005bbe:	f000 fb1b 	bl	80061f8 <drawAlarm>
			drawButtonText("", "", "clear", hspi);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a35      	ldr	r2, [pc, #212]	; (8005c9c <updateAlarmDisplay+0x168>)
 8005bc6:	4932      	ldr	r1, [pc, #200]	; (8005c90 <updateAlarmDisplay+0x15c>)
 8005bc8:	4831      	ldr	r0, [pc, #196]	; (8005c90 <updateAlarmDisplay+0x15c>)
 8005bca:	f000 f91b 	bl	8005e04 <drawButtonText>
}
 8005bce:	e055      	b.n	8005c7c <updateAlarmDisplay+0x148>
			setTextSize(1);
 8005bd0:	2001      	movs	r0, #1
 8005bd2:	f7fc ff89 	bl	8002ae8 <setTextSize>
			drawCenteredTextWithPadding(WIDTH/2, 100, 11, "alarm done!", hspi);
 8005bd6:	4a32      	ldr	r2, [pc, #200]	; (8005ca0 <updateAlarmDisplay+0x16c>)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	9300      	str	r3, [sp, #0]
 8005bdc:	0013      	movs	r3, r2
 8005bde:	220b      	movs	r2, #11
 8005be0:	2164      	movs	r1, #100	; 0x64
 8005be2:	2040      	movs	r0, #64	; 0x40
 8005be4:	f7fc fe5e 	bl	80028a4 <drawCenteredTextWithPadding>
}
 8005be8:	e048      	b.n	8005c7c <updateAlarmDisplay+0x148>
	else if (alarmVars.isBeingSet == 1) {
 8005bea:	4b26      	ldr	r3, [pc, #152]	; (8005c84 <updateAlarmDisplay+0x150>)
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d144      	bne.n	8005c7c <updateAlarmDisplay+0x148>
		setTextSize(1);
 8005bf2:	2001      	movs	r0, #1
 8005bf4:	f7fc ff78 	bl	8002ae8 <setTextSize>
		switch (alarmVars.fieldBeingSet) {
 8005bf8:	4b22      	ldr	r3, [pc, #136]	; (8005c84 <updateAlarmDisplay+0x150>)
 8005bfa:	785b      	ldrb	r3, [r3, #1]
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d012      	beq.n	8005c26 <updateAlarmDisplay+0xf2>
 8005c00:	dc02      	bgt.n	8005c08 <updateAlarmDisplay+0xd4>
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d005      	beq.n	8005c12 <updateAlarmDisplay+0xde>
			default: break;
 8005c06:	e02c      	b.n	8005c62 <updateAlarmDisplay+0x12e>
		switch (alarmVars.fieldBeingSet) {
 8005c08:	2b03      	cmp	r3, #3
 8005c0a:	d016      	beq.n	8005c3a <updateAlarmDisplay+0x106>
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	d01e      	beq.n	8005c4e <updateAlarmDisplay+0x11a>
			default: break;
 8005c10:	e027      	b.n	8005c62 <updateAlarmDisplay+0x12e>
			case 1: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting second...", hspi); break;
 8005c12:	4a24      	ldr	r2, [pc, #144]	; (8005ca4 <updateAlarmDisplay+0x170>)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	0013      	movs	r3, r2
 8005c1a:	2211      	movs	r2, #17
 8005c1c:	2134      	movs	r1, #52	; 0x34
 8005c1e:	2040      	movs	r0, #64	; 0x40
 8005c20:	f7fc fe40 	bl	80028a4 <drawCenteredTextWithPadding>
 8005c24:	e01d      	b.n	8005c62 <updateAlarmDisplay+0x12e>
			case 2: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting minute...", hspi); break;
 8005c26:	4a20      	ldr	r2, [pc, #128]	; (8005ca8 <updateAlarmDisplay+0x174>)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	0013      	movs	r3, r2
 8005c2e:	2211      	movs	r2, #17
 8005c30:	2134      	movs	r1, #52	; 0x34
 8005c32:	2040      	movs	r0, #64	; 0x40
 8005c34:	f7fc fe36 	bl	80028a4 <drawCenteredTextWithPadding>
 8005c38:	e013      	b.n	8005c62 <updateAlarmDisplay+0x12e>
			case 3: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting hour...", hspi); break;
 8005c3a:	4a1c      	ldr	r2, [pc, #112]	; (8005cac <updateAlarmDisplay+0x178>)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	9300      	str	r3, [sp, #0]
 8005c40:	0013      	movs	r3, r2
 8005c42:	2211      	movs	r2, #17
 8005c44:	2134      	movs	r1, #52	; 0x34
 8005c46:	2040      	movs	r0, #64	; 0x40
 8005c48:	f7fc fe2c 	bl	80028a4 <drawCenteredTextWithPadding>
 8005c4c:	e009      	b.n	8005c62 <updateAlarmDisplay+0x12e>
			case 4: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting day...", hspi); break;
 8005c4e:	4a18      	ldr	r2, [pc, #96]	; (8005cb0 <updateAlarmDisplay+0x17c>)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	0013      	movs	r3, r2
 8005c56:	2211      	movs	r2, #17
 8005c58:	2134      	movs	r1, #52	; 0x34
 8005c5a:	2040      	movs	r0, #64	; 0x40
 8005c5c:	f7fc fe22 	bl	80028a4 <drawCenteredTextWithPadding>
 8005c60:	46c0      	nop			; (mov r8, r8)
		drawButtonText("up", "down", "change", hspi);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a13      	ldr	r2, [pc, #76]	; (8005cb4 <updateAlarmDisplay+0x180>)
 8005c66:	4914      	ldr	r1, [pc, #80]	; (8005cb8 <updateAlarmDisplay+0x184>)
 8005c68:	4814      	ldr	r0, [pc, #80]	; (8005cbc <updateAlarmDisplay+0x188>)
 8005c6a:	f000 f8cb 	bl	8005e04 <drawButtonText>
		drawAlarm(alarmVars.alarmToSet, hspi);
 8005c6e:	4b05      	ldr	r3, [pc, #20]	; (8005c84 <updateAlarmDisplay+0x150>)
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	0011      	movs	r1, r2
 8005c76:	0018      	movs	r0, r3
 8005c78:	f000 fabe 	bl	80061f8 <drawAlarm>
}
 8005c7c:	46c0      	nop			; (mov r8, r8)
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	b002      	add	sp, #8
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	20000124 	.word	0x20000124
 8005c88:	0800b628 	.word	0x0800b628
 8005c8c:	0800b55c 	.word	0x0800b55c
 8005c90:	0800b4bc 	.word	0x0800b4bc
 8005c94:	20000142 	.word	0x20000142
 8005c98:	0800b634 	.word	0x0800b634
 8005c9c:	0800b5f4 	.word	0x0800b5f4
 8005ca0:	0800b640 	.word	0x0800b640
 8005ca4:	0800b614 	.word	0x0800b614
 8005ca8:	0800b574 	.word	0x0800b574
 8005cac:	0800b588 	.word	0x0800b588
 8005cb0:	0800b64c 	.word	0x0800b64c
 8005cb4:	0800b560 	.word	0x0800b560
 8005cb8:	0800b568 	.word	0x0800b568
 8005cbc:	0800b570 	.word	0x0800b570

08005cc0 <updateStopwatchDisplay>:

void updateStopwatchDisplay(SPI_HandleTypeDef *hspi) {
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
	setTextColor(ST77XX_BLACK);
 8005cc8:	2000      	movs	r0, #0
 8005cca:	f7fc ff1d 	bl	8002b08 <setTextColor>
	drawStopwatch(stopwatchCounter, hspi);
 8005cce:	4b16      	ldr	r3, [pc, #88]	; (8005d28 <updateStopwatchDisplay+0x68>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	0011      	movs	r1, r2
 8005cd6:	0018      	movs	r0, r3
 8005cd8:	f000 fac8 	bl	800626c <drawStopwatch>
	drawStopwatchLap(stopwatchVars.lapCurrent-stopwatchVars.lapPrev, hspi);
 8005cdc:	4b13      	ldr	r3, [pc, #76]	; (8005d2c <updateStopwatchDisplay+0x6c>)
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	4b12      	ldr	r3, [pc, #72]	; (8005d2c <updateStopwatchDisplay+0x6c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	0011      	movs	r1, r2
 8005cea:	0018      	movs	r0, r3
 8005cec:	f000 faf6 	bl	80062dc <drawStopwatchLap>

	if (isStopwatchRunning == 0) drawButtonText("run", "lap", "clear", hspi);
 8005cf0:	4b0f      	ldr	r3, [pc, #60]	; (8005d30 <updateStopwatchDisplay+0x70>)
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d106      	bne.n	8005d08 <updateStopwatchDisplay+0x48>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a0d      	ldr	r2, [pc, #52]	; (8005d34 <updateStopwatchDisplay+0x74>)
 8005cfe:	490e      	ldr	r1, [pc, #56]	; (8005d38 <updateStopwatchDisplay+0x78>)
 8005d00:	480e      	ldr	r0, [pc, #56]	; (8005d3c <updateStopwatchDisplay+0x7c>)
 8005d02:	f000 f87f 	bl	8005e04 <drawButtonText>
	else if (isStopwatchRunning == 1) drawButtonText("pause", "lap", "clear", hspi);
}
 8005d06:	e00a      	b.n	8005d1e <updateStopwatchDisplay+0x5e>
	else if (isStopwatchRunning == 1) drawButtonText("pause", "lap", "clear", hspi);
 8005d08:	4b09      	ldr	r3, [pc, #36]	; (8005d30 <updateStopwatchDisplay+0x70>)
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d105      	bne.n	8005d1e <updateStopwatchDisplay+0x5e>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a07      	ldr	r2, [pc, #28]	; (8005d34 <updateStopwatchDisplay+0x74>)
 8005d16:	4908      	ldr	r1, [pc, #32]	; (8005d38 <updateStopwatchDisplay+0x78>)
 8005d18:	4809      	ldr	r0, [pc, #36]	; (8005d40 <updateStopwatchDisplay+0x80>)
 8005d1a:	f000 f873 	bl	8005e04 <drawButtonText>
}
 8005d1e:	46c0      	nop			; (mov r8, r8)
 8005d20:	46bd      	mov	sp, r7
 8005d22:	b002      	add	sp, #8
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	46c0      	nop			; (mov r8, r8)
 8005d28:	20000198 	.word	0x20000198
 8005d2c:	2000012c 	.word	0x2000012c
 8005d30:	20000148 	.word	0x20000148
 8005d34:	0800b5f4 	.word	0x0800b5f4
 8005d38:	0800b65c 	.word	0x0800b65c
 8005d3c:	0800b604 	.word	0x0800b604
 8005d40:	0800b5fc 	.word	0x0800b5fc

08005d44 <drawButton>:

// ---- drawing functions related specifically to the user interface ----
void drawButton(uint8_t x_center, uint8_t y_center, SPI_HandleTypeDef *hspi) {
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af02      	add	r7, sp, #8
 8005d4a:	603a      	str	r2, [r7, #0]
 8005d4c:	1dfb      	adds	r3, r7, #7
 8005d4e:	1c02      	adds	r2, r0, #0
 8005d50:	701a      	strb	r2, [r3, #0]
 8005d52:	1dbb      	adds	r3, r7, #6
 8005d54:	1c0a      	adds	r2, r1, #0
 8005d56:	701a      	strb	r2, [r3, #0]
	// bounds checking. probably already done in draw/fillRect
	if (x_center-5 < 0 || x_center+5 > WIDTH || y_center-5 < 0 || y_center+5 > HEIGHT) return;
 8005d58:	1dfb      	adds	r3, r7, #7
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	3b05      	subs	r3, #5
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	db2f      	blt.n	8005dc2 <drawButton+0x7e>
 8005d62:	1dfb      	adds	r3, r7, #7
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	3305      	adds	r3, #5
 8005d68:	2b80      	cmp	r3, #128	; 0x80
 8005d6a:	dc2a      	bgt.n	8005dc2 <drawButton+0x7e>
 8005d6c:	1dbb      	adds	r3, r7, #6
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	3b05      	subs	r3, #5
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	db25      	blt.n	8005dc2 <drawButton+0x7e>
 8005d76:	1dbb      	adds	r3, r7, #6
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	3305      	adds	r3, #5
 8005d7c:	2ba0      	cmp	r3, #160	; 0xa0
 8005d7e:	dc20      	bgt.n	8005dc2 <drawButton+0x7e>

	// draw rect size 8 with 1 pixel border
	// parameters give center position of graphic
	drawRect(x_center-5, y_center-5, 10, 10, ST77XX_BLACK, hspi);
 8005d80:	1dfb      	adds	r3, r7, #7
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	3b05      	subs	r3, #5
 8005d86:	b2d8      	uxtb	r0, r3
 8005d88:	1dbb      	adds	r3, r7, #6
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	3b05      	subs	r3, #5
 8005d8e:	b2d9      	uxtb	r1, r3
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	9301      	str	r3, [sp, #4]
 8005d94:	2300      	movs	r3, #0
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	230a      	movs	r3, #10
 8005d9a:	220a      	movs	r2, #10
 8005d9c:	f7fc f833 	bl	8001e06 <drawRect>
	fillRect(x_center-4, y_center-4, 8, 8, ST77XX_WHITE, hspi);
 8005da0:	1dfb      	adds	r3, r7, #7
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	3b04      	subs	r3, #4
 8005da6:	b2d8      	uxtb	r0, r3
 8005da8:	1dbb      	adds	r3, r7, #6
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	3b04      	subs	r3, #4
 8005dae:	b2d9      	uxtb	r1, r3
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	9301      	str	r3, [sp, #4]
 8005db4:	4b05      	ldr	r3, [pc, #20]	; (8005dcc <drawButton+0x88>)
 8005db6:	9300      	str	r3, [sp, #0]
 8005db8:	2308      	movs	r3, #8
 8005dba:	2208      	movs	r2, #8
 8005dbc:	f7fc f87b 	bl	8001eb6 <fillRect>
 8005dc0:	e000      	b.n	8005dc4 <drawButton+0x80>
	if (x_center-5 < 0 || x_center+5 > WIDTH || y_center-5 < 0 || y_center+5 > HEIGHT) return;
 8005dc2:	46c0      	nop			; (mov r8, r8)
}
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	b002      	add	sp, #8
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	46c0      	nop			; (mov r8, r8)
 8005dcc:	0000ffff 	.word	0x0000ffff

08005dd0 <drawButtons>:

void drawButtons(SPI_HandleTypeDef *hspi) {
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
	// 3 buttons. positioned so their text boxes, which are centered over button, can have equal spacing left and right
	drawButton(22, HEIGHT-15, hspi);		// button 1
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	001a      	movs	r2, r3
 8005ddc:	2191      	movs	r1, #145	; 0x91
 8005dde:	2016      	movs	r0, #22
 8005de0:	f7ff ffb0 	bl	8005d44 <drawButton>
	drawButton(64, HEIGHT-15, hspi);		// button 2
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	001a      	movs	r2, r3
 8005de8:	2191      	movs	r1, #145	; 0x91
 8005dea:	2040      	movs	r0, #64	; 0x40
 8005dec:	f7ff ffaa 	bl	8005d44 <drawButton>
	drawButton(106, HEIGHT-15, hspi);		// button 3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	001a      	movs	r2, r3
 8005df4:	2191      	movs	r1, #145	; 0x91
 8005df6:	206a      	movs	r0, #106	; 0x6a
 8005df8:	f7ff ffa4 	bl	8005d44 <drawButton>
}
 8005dfc:	46c0      	nop			; (mov r8, r8)
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	b002      	add	sp, #8
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <drawButtonText>:

void drawButtonText(const char *str1, const char *str2, const char *str3, SPI_HandleTypeDef *hspi) {
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af02      	add	r7, sp, #8
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
 8005e10:	603b      	str	r3, [r7, #0]
	setTextSize(1);
 8005e12:	2001      	movs	r0, #1
 8005e14:	f7fc fe68 	bl	8002ae8 <setTextSize>
	setTextColor(ST77XX_BLACK);
 8005e18:	2000      	movs	r0, #0
 8005e1a:	f7fc fe75 	bl	8002b08 <setTextColor>
	drawCenteredTextWithPadding(22, HEIGHT-28, 7, str1, hspi);		// button 1
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	0013      	movs	r3, r2
 8005e26:	2207      	movs	r2, #7
 8005e28:	2184      	movs	r1, #132	; 0x84
 8005e2a:	2016      	movs	r0, #22
 8005e2c:	f7fc fd3a 	bl	80028a4 <drawCenteredTextWithPadding>
	drawCenteredTextWithPadding(64, HEIGHT-28, 7, str2, hspi);		// button 2
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	9300      	str	r3, [sp, #0]
 8005e36:	0013      	movs	r3, r2
 8005e38:	2207      	movs	r2, #7
 8005e3a:	2184      	movs	r1, #132	; 0x84
 8005e3c:	2040      	movs	r0, #64	; 0x40
 8005e3e:	f7fc fd31 	bl	80028a4 <drawCenteredTextWithPadding>
	drawCenteredTextWithPadding(106, HEIGHT-28, 7, str3, hspi);		// button 3
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	0013      	movs	r3, r2
 8005e4a:	2207      	movs	r2, #7
 8005e4c:	2184      	movs	r1, #132	; 0x84
 8005e4e:	206a      	movs	r0, #106	; 0x6a
 8005e50:	f7fc fd28 	bl	80028a4 <drawCenteredTextWithPadding>
}
 8005e54:	46c0      	nop			; (mov r8, r8)
 8005e56:	46bd      	mov	sp, r7
 8005e58:	b004      	add	sp, #16
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <drawTitle>:

void drawTitle(char *str, SPI_HandleTypeDef *hspi) {
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
	uint8_t strSize = strlen(str);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	0018      	movs	r0, r3
 8005e6a:	f7fa f94d 	bl	8000108 <strlen>
 8005e6e:	0002      	movs	r2, r0
 8005e70:	210f      	movs	r1, #15
 8005e72:	187b      	adds	r3, r7, r1
 8005e74:	701a      	strb	r2, [r3, #0]

	// drawing title
	if (12*strSize < WIDTH) {			// about string size = 10 for width = 128
 8005e76:	187b      	adds	r3, r7, r1
 8005e78:	781a      	ldrb	r2, [r3, #0]
 8005e7a:	0013      	movs	r3, r2
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	189b      	adds	r3, r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	2b7f      	cmp	r3, #127	; 0x7f
 8005e84:	dc14      	bgt.n	8005eb0 <drawTitle+0x54>
		setTextSize(2);
 8005e86:	2002      	movs	r0, #2
 8005e88:	f7fc fe2e 	bl	8002ae8 <setTextSize>
		setCursor((WIDTH-12*strSize)/2, 10);
 8005e8c:	230f      	movs	r3, #15
 8005e8e:	18fb      	adds	r3, r7, r3
 8005e90:	781a      	ldrb	r2, [r3, #0]
 8005e92:	0013      	movs	r3, r2
 8005e94:	0092      	lsls	r2, r2, #2
 8005e96:	1a9b      	subs	r3, r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	3380      	adds	r3, #128	; 0x80
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	da00      	bge.n	8005ea2 <drawTitle+0x46>
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	105b      	asrs	r3, r3, #1
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	210a      	movs	r1, #10
 8005ea8:	0018      	movs	r0, r3
 8005eaa:	f7fc fe03 	bl	8002ab4 <setCursor>
 8005eae:	e039      	b.n	8005f24 <drawTitle+0xc8>
	}
	else if (6*strSize < WIDTH) {		// about string size = 21 for width = 128
 8005eb0:	230f      	movs	r3, #15
 8005eb2:	18fb      	adds	r3, r7, r3
 8005eb4:	781a      	ldrb	r2, [r3, #0]
 8005eb6:	0013      	movs	r3, r2
 8005eb8:	005b      	lsls	r3, r3, #1
 8005eba:	189b      	adds	r3, r3, r2
 8005ebc:	005b      	lsls	r3, r3, #1
 8005ebe:	2b7f      	cmp	r3, #127	; 0x7f
 8005ec0:	dc14      	bgt.n	8005eec <drawTitle+0x90>
		setTextSize(1);
 8005ec2:	2001      	movs	r0, #1
 8005ec4:	f7fc fe10 	bl	8002ae8 <setTextSize>
		setCursor((WIDTH-6*strSize)/2, 10);
 8005ec8:	230f      	movs	r3, #15
 8005eca:	18fb      	adds	r3, r7, r3
 8005ecc:	781a      	ldrb	r2, [r3, #0]
 8005ece:	0013      	movs	r3, r2
 8005ed0:	0092      	lsls	r2, r2, #2
 8005ed2:	1a9b      	subs	r3, r3, r2
 8005ed4:	005b      	lsls	r3, r3, #1
 8005ed6:	3380      	adds	r3, #128	; 0x80
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	da00      	bge.n	8005ede <drawTitle+0x82>
 8005edc:	3301      	adds	r3, #1
 8005ede:	105b      	asrs	r3, r3, #1
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	210a      	movs	r1, #10
 8005ee4:	0018      	movs	r0, r3
 8005ee6:	f7fc fde5 	bl	8002ab4 <setCursor>
 8005eea:	e01b      	b.n	8005f24 <drawTitle+0xc8>
	}
	else {
		setTextSize(1);
 8005eec:	2001      	movs	r0, #1
 8005eee:	f7fc fdfb 	bl	8002ae8 <setTextSize>
		sprintf(str, "it's too long");		// should not need to worry about null access, since this string is shorter than case above
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	4b12      	ldr	r3, [pc, #72]	; (8005f40 <drawTitle+0xe4>)
 8005ef6:	0010      	movs	r0, r2
 8005ef8:	0019      	movs	r1, r3
 8005efa:	230e      	movs	r3, #14
 8005efc:	001a      	movs	r2, r3
 8005efe:	f004 fe79 	bl	800abf4 <memcpy>
		setCursor((WIDTH-6*strSize)/2, 10);
 8005f02:	230f      	movs	r3, #15
 8005f04:	18fb      	adds	r3, r7, r3
 8005f06:	781a      	ldrb	r2, [r3, #0]
 8005f08:	0013      	movs	r3, r2
 8005f0a:	0092      	lsls	r2, r2, #2
 8005f0c:	1a9b      	subs	r3, r3, r2
 8005f0e:	005b      	lsls	r3, r3, #1
 8005f10:	3380      	adds	r3, #128	; 0x80
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	da00      	bge.n	8005f18 <drawTitle+0xbc>
 8005f16:	3301      	adds	r3, #1
 8005f18:	105b      	asrs	r3, r3, #1
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	210a      	movs	r1, #10
 8005f1e:	0018      	movs	r0, r3
 8005f20:	f7fc fdc8 	bl	8002ab4 <setCursor>
	}

	setTextColor(ST77XX_BLACK);
 8005f24:	2000      	movs	r0, #0
 8005f26:	f7fc fdef 	bl	8002b08 <setTextColor>
	drawText(str, hspi);
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	0011      	movs	r1, r2
 8005f30:	0018      	movs	r0, r3
 8005f32:	f7fc fbd7 	bl	80026e4 <drawText>
}
 8005f36:	46c0      	nop			; (mov r8, r8)
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	b004      	add	sp, #16
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	46c0      	nop			; (mov r8, r8)
 8005f40:	0800b660 	.word	0x0800b660

08005f44 <drawBattery>:

void drawBattery(uint8_t batteryLevel, SPI_HandleTypeDef *hspi) {
 8005f44:	b590      	push	{r4, r7, lr}
 8005f46:	b087      	sub	sp, #28
 8005f48:	af02      	add	r7, sp, #8
 8005f4a:	0002      	movs	r2, r0
 8005f4c:	6039      	str	r1, [r7, #0]
 8005f4e:	1dfb      	adds	r3, r7, #7
 8005f50:	701a      	strb	r2, [r3, #0]
	// doesn't move and is used on an empty screen, so shouldn't need to clear then print
	char str[5];

	// drawing battery symbol. hard coded to be 6x13, upper left corner on (49,26)
	drawVLine(49, 28, 10, ST77XX_BLACK, hspi);		// left col
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	2300      	movs	r3, #0
 8005f58:	220a      	movs	r2, #10
 8005f5a:	211c      	movs	r1, #28
 8005f5c:	2031      	movs	r0, #49	; 0x31
 8005f5e:	f7fb fe61 	bl	8001c24 <drawVLine>
	drawVLine(54, 28, 10, ST77XX_BLACK, hspi);		// right col
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	9300      	str	r3, [sp, #0]
 8005f66:	2300      	movs	r3, #0
 8005f68:	220a      	movs	r2, #10
 8005f6a:	211c      	movs	r1, #28
 8005f6c:	2036      	movs	r0, #54	; 0x36
 8005f6e:	f7fb fe59 	bl	8001c24 <drawVLine>
	drawHLine(50, 38, 4, ST77XX_BLACK, hspi);		// bottom
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	2300      	movs	r3, #0
 8005f78:	2204      	movs	r2, #4
 8005f7a:	2126      	movs	r1, #38	; 0x26
 8005f7c:	2032      	movs	r0, #50	; 0x32
 8005f7e:	f7fb fdab 	bl	8001ad8 <drawHLine>
	drawHLine(50, 27, 4, ST77XX_BLACK, hspi);		// top bottom level
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	2300      	movs	r3, #0
 8005f88:	2204      	movs	r2, #4
 8005f8a:	211b      	movs	r1, #27
 8005f8c:	2032      	movs	r0, #50	; 0x32
 8005f8e:	f7fb fda3 	bl	8001ad8 <drawHLine>
	drawHLine(51, 26, 2, ST77XX_BLACK, hspi);		// top upper level
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	2300      	movs	r3, #0
 8005f98:	2202      	movs	r2, #2
 8005f9a:	211a      	movs	r1, #26
 8005f9c:	2033      	movs	r0, #51	; 0x33
 8005f9e:	f7fb fd9b 	bl	8001ad8 <drawHLine>

	uint16_t color = ST77XX_GREEN;
 8005fa2:	230e      	movs	r3, #14
 8005fa4:	18fb      	adds	r3, r7, r3
 8005fa6:	22fc      	movs	r2, #252	; 0xfc
 8005fa8:	00d2      	lsls	r2, r2, #3
 8005faa:	801a      	strh	r2, [r3, #0]
	if (batteryLevel < 20) color = ST77XX_RED;
 8005fac:	1dfb      	adds	r3, r7, #7
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	2b13      	cmp	r3, #19
 8005fb2:	d803      	bhi.n	8005fbc <drawBattery+0x78>
 8005fb4:	230e      	movs	r3, #14
 8005fb6:	18fb      	adds	r3, r7, r3
 8005fb8:	4a2c      	ldr	r2, [pc, #176]	; (800606c <drawBattery+0x128>)
 8005fba:	801a      	strh	r2, [r3, #0]
	fillRect(50, 28+(100-batteryLevel)/10, 4, (batteryLevel+9)/10, color, hspi);	// +9 to avoid having to use float and round()
 8005fbc:	1dfb      	adds	r3, r7, #7
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	2264      	movs	r2, #100	; 0x64
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	210a      	movs	r1, #10
 8005fc6:	0018      	movs	r0, r3
 8005fc8:	f7fa f930 	bl	800022c <__divsi3>
 8005fcc:	0003      	movs	r3, r0
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	331c      	adds	r3, #28
 8005fd2:	b2dc      	uxtb	r4, r3
 8005fd4:	1dfb      	adds	r3, r7, #7
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	3309      	adds	r3, #9
 8005fda:	210a      	movs	r1, #10
 8005fdc:	0018      	movs	r0, r3
 8005fde:	f7fa f925 	bl	800022c <__divsi3>
 8005fe2:	0003      	movs	r3, r0
 8005fe4:	b2da      	uxtb	r2, r3
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	9301      	str	r3, [sp, #4]
 8005fea:	230e      	movs	r3, #14
 8005fec:	18fb      	adds	r3, r7, r3
 8005fee:	881b      	ldrh	r3, [r3, #0]
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	0013      	movs	r3, r2
 8005ff4:	2204      	movs	r2, #4
 8005ff6:	0021      	movs	r1, r4
 8005ff8:	2032      	movs	r0, #50	; 0x32
 8005ffa:	f7fb ff5c 	bl	8001eb6 <fillRect>
	fillRect(50, 28, 4, (100-batteryLevel)/10, ST77XX_WHITE, hspi);
 8005ffe:	1dfb      	adds	r3, r7, #7
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	2264      	movs	r2, #100	; 0x64
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	210a      	movs	r1, #10
 8006008:	0018      	movs	r0, r3
 800600a:	f7fa f90f 	bl	800022c <__divsi3>
 800600e:	0003      	movs	r3, r0
 8006010:	b2da      	uxtb	r2, r3
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	9301      	str	r3, [sp, #4]
 8006016:	4b16      	ldr	r3, [pc, #88]	; (8006070 <drawBattery+0x12c>)
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	0013      	movs	r3, r2
 800601c:	2204      	movs	r2, #4
 800601e:	211c      	movs	r1, #28
 8006020:	2032      	movs	r0, #50	; 0x32
 8006022:	f7fb ff48 	bl	8001eb6 <fillRect>

	setTextSize(1);
 8006026:	2001      	movs	r0, #1
 8006028:	f7fc fd5e 	bl	8002ae8 <setTextSize>
	if (batteryLevel >= 20) color = ST77XX_BLACK;		// reusing variable for more obfuscated code.
 800602c:	1dfb      	adds	r3, r7, #7
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	2b13      	cmp	r3, #19
 8006032:	d903      	bls.n	800603c <drawBattery+0xf8>
 8006034:	230e      	movs	r3, #14
 8006036:	18fb      	adds	r3, r7, r3
 8006038:	2200      	movs	r2, #0
 800603a:	801a      	strh	r2, [r3, #0]
	setTextColor(color);
 800603c:	230e      	movs	r3, #14
 800603e:	18fb      	adds	r3, r7, r3
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	0018      	movs	r0, r3
 8006044:	f7fc fd60 	bl	8002b08 <setTextColor>
	sprintf(str, "%3d%%", batteryLevel);
 8006048:	1dfb      	adds	r3, r7, #7
 800604a:	781a      	ldrb	r2, [r3, #0]
 800604c:	4909      	ldr	r1, [pc, #36]	; (8006074 <drawBattery+0x130>)
 800604e:	2408      	movs	r4, #8
 8006050:	193b      	adds	r3, r7, r4
 8006052:	0018      	movs	r0, r3
 8006054:	f004 fe5e 	bl	800ad14 <siprintf>
	drawTextAt(55, 31, str, hspi);
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	193a      	adds	r2, r7, r4
 800605c:	211f      	movs	r1, #31
 800605e:	2037      	movs	r0, #55	; 0x37
 8006060:	f7fc fb76 	bl	8002750 <drawTextAt>
}
 8006064:	46c0      	nop			; (mov r8, r8)
 8006066:	46bd      	mov	sp, r7
 8006068:	b005      	add	sp, #20
 800606a:	bd90      	pop	{r4, r7, pc}
 800606c:	fffff800 	.word	0xfffff800
 8006070:	0000ffff 	.word	0x0000ffff
 8006074:	0800b670 	.word	0x0800b670

08006078 <drawClock>:

// draw time and date
// should optimize to only redraw part that changed
void drawClock(struct dates *d, struct times *t, SPI_HandleTypeDef *hspi) {
 8006078:	b5b0      	push	{r4, r5, r7, lr}
 800607a:	b090      	sub	sp, #64	; 0x40
 800607c:	af02      	add	r7, sp, #8
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
	// notes on paper.
	char str[40];

	// no need to draw padding for those that always have the same length
	// drawing hr and min, 12-hr format
	if (t->hr % 12 == 0) sprintf(str, "%2d:%02d", 12, t->min);
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	210c      	movs	r1, #12
 800608a:	0018      	movs	r0, r3
 800608c:	f7fa f8ca 	bl	8000224 <__aeabi_uidivmod>
 8006090:	000b      	movs	r3, r1
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b00      	cmp	r3, #0
 8006096:	d108      	bne.n	80060aa <drawClock+0x32>
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	785b      	ldrb	r3, [r3, #1]
 800609c:	493c      	ldr	r1, [pc, #240]	; (8006190 <drawClock+0x118>)
 800609e:	2210      	movs	r2, #16
 80060a0:	18b8      	adds	r0, r7, r2
 80060a2:	220c      	movs	r2, #12
 80060a4:	f004 fe36 	bl	800ad14 <siprintf>
 80060a8:	e00f      	b.n	80060ca <drawClock+0x52>
	else sprintf(str, "%2d:%02d", t->hr%12, t->min);
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	210c      	movs	r1, #12
 80060b0:	0018      	movs	r0, r3
 80060b2:	f7fa f8b7 	bl	8000224 <__aeabi_uidivmod>
 80060b6:	000b      	movs	r3, r1
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	001a      	movs	r2, r3
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	785b      	ldrb	r3, [r3, #1]
 80060c0:	4933      	ldr	r1, [pc, #204]	; (8006190 <drawClock+0x118>)
 80060c2:	2010      	movs	r0, #16
 80060c4:	1838      	adds	r0, r7, r0
 80060c6:	f004 fe25 	bl	800ad14 <siprintf>
	setTextSize(3);
 80060ca:	2003      	movs	r0, #3
 80060cc:	f7fc fd0c 	bl	8002ae8 <setTextSize>
	setTextColor(ST77XX_BLACK);
 80060d0:	2000      	movs	r0, #0
 80060d2:	f7fc fd19 	bl	8002b08 <setTextColor>
	drawCenteredText(52, 60, str, hspi);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2410      	movs	r4, #16
 80060da:	193a      	adds	r2, r7, r4
 80060dc:	213c      	movs	r1, #60	; 0x3c
 80060de:	2034      	movs	r0, #52	; 0x34
 80060e0:	f7fc fb7e 	bl	80027e0 <drawCenteredText>

	// drawing sec
	sprintf(str, "%02d", t->sec);
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	789b      	ldrb	r3, [r3, #2]
 80060e8:	001a      	movs	r2, r3
 80060ea:	492a      	ldr	r1, [pc, #168]	; (8006194 <drawClock+0x11c>)
 80060ec:	193b      	adds	r3, r7, r4
 80060ee:	0018      	movs	r0, r3
 80060f0:	f004 fe10 	bl	800ad14 <siprintf>
	setTextSize(2);
 80060f4:	2002      	movs	r0, #2
 80060f6:	f7fc fcf7 	bl	8002ae8 <setTextSize>
	drawCenteredText(109, 68, str, hspi);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	193a      	adds	r2, r7, r4
 80060fe:	2144      	movs	r1, #68	; 0x44
 8006100:	206d      	movs	r0, #109	; 0x6d
 8006102:	f7fc fb6d 	bl	80027e0 <drawCenteredText>

	// drawing AM/PM text
	setTextSize(1);
 8006106:	2001      	movs	r0, #1
 8006108:	f7fc fcee 	bl	8002ae8 <setTextSize>
	if (t->hr < 12) drawCenteredText(103, 60, "AM", hspi);
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	2b0b      	cmp	r3, #11
 8006112:	d806      	bhi.n	8006122 <drawClock+0xaa>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a20      	ldr	r2, [pc, #128]	; (8006198 <drawClock+0x120>)
 8006118:	213c      	movs	r1, #60	; 0x3c
 800611a:	2067      	movs	r0, #103	; 0x67
 800611c:	f7fc fb60 	bl	80027e0 <drawCenteredText>
 8006120:	e005      	b.n	800612e <drawClock+0xb6>
	else drawCenteredText(103, 60, "PM", hspi);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a1d      	ldr	r2, [pc, #116]	; (800619c <drawClock+0x124>)
 8006126:	213c      	movs	r1, #60	; 0x3c
 8006128:	2067      	movs	r0, #103	; 0x67
 800612a:	f7fc fb59 	bl	80027e0 <drawCenteredText>

	// drawing date
	setTextSize(1);
 800612e:	2001      	movs	r0, #1
 8006130:	f7fc fcda 	bl	8002ae8 <setTextSize>
	sprintf(str, "%s %d %04d", monthNames[d->month], d->date, d->yr);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	789b      	ldrb	r3, [r3, #2]
 8006138:	001a      	movs	r2, r3
 800613a:	4b19      	ldr	r3, [pc, #100]	; (80061a0 <drawClock+0x128>)
 800613c:	0092      	lsls	r2, r2, #2
 800613e:	58d2      	ldr	r2, [r2, r3]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	78db      	ldrb	r3, [r3, #3]
 8006144:	001c      	movs	r4, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	881b      	ldrh	r3, [r3, #0]
 800614a:	4916      	ldr	r1, [pc, #88]	; (80061a4 <drawClock+0x12c>)
 800614c:	2510      	movs	r5, #16
 800614e:	1978      	adds	r0, r7, r5
 8006150:	9300      	str	r3, [sp, #0]
 8006152:	0023      	movs	r3, r4
 8006154:	f004 fdde 	bl	800ad14 <siprintf>
	drawCenteredTextWithPadding(WIDTH/2, 84, 11, str, hspi);
 8006158:	197a      	adds	r2, r7, r5
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	0013      	movs	r3, r2
 8006160:	220b      	movs	r2, #11
 8006162:	2154      	movs	r1, #84	; 0x54
 8006164:	2040      	movs	r0, #64	; 0x40
 8006166:	f7fc fb9d 	bl	80028a4 <drawCenteredTextWithPadding>

	// drawing weekday
	drawCenteredTextWithPadding(WIDTH/2, 92, 9, weekdayNames[d->weekday], hspi);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	791b      	ldrb	r3, [r3, #4]
 800616e:	001a      	movs	r2, r3
 8006170:	4b0d      	ldr	r3, [pc, #52]	; (80061a8 <drawClock+0x130>)
 8006172:	0092      	lsls	r2, r2, #2
 8006174:	58d2      	ldr	r2, [r2, r3]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	0013      	movs	r3, r2
 800617c:	2209      	movs	r2, #9
 800617e:	215c      	movs	r1, #92	; 0x5c
 8006180:	2040      	movs	r0, #64	; 0x40
 8006182:	f7fc fb8f 	bl	80028a4 <drawCenteredTextWithPadding>
}
 8006186:	46c0      	nop			; (mov r8, r8)
 8006188:	46bd      	mov	sp, r7
 800618a:	b00e      	add	sp, #56	; 0x38
 800618c:	bdb0      	pop	{r4, r5, r7, pc}
 800618e:	46c0      	nop			; (mov r8, r8)
 8006190:	0800b678 	.word	0x0800b678
 8006194:	0800b684 	.word	0x0800b684
 8006198:	0800b68c 	.word	0x0800b68c
 800619c:	0800b690 	.word	0x0800b690
 80061a0:	20000034 	.word	0x20000034
 80061a4:	0800b694 	.word	0x0800b694
 80061a8:	20000014 	.word	0x20000014

080061ac <drawTimer>:

void drawTimer(struct times *t, SPI_HandleTypeDef *hspi) {
 80061ac:	b5b0      	push	{r4, r5, r7, lr}
 80061ae:	b08e      	sub	sp, #56	; 0x38
 80061b0:	af02      	add	r7, sp, #8
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
	char str[40];

	// only drawing hr:min:sec of timer
	setTextSize(2);
 80061b6:	2002      	movs	r0, #2
 80061b8:	f7fc fc96 	bl	8002ae8 <setTextSize>
	setTextColor(ST77XX_BLACK);
 80061bc:	2000      	movs	r0, #0
 80061be:	f7fc fca3 	bl	8002b08 <setTextColor>
	sprintf(str, "%2d:%2d:%2d", t->hr, t->min, t->sec);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	001a      	movs	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	785b      	ldrb	r3, [r3, #1]
 80061cc:	001c      	movs	r4, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	789b      	ldrb	r3, [r3, #2]
 80061d2:	4908      	ldr	r1, [pc, #32]	; (80061f4 <drawTimer+0x48>)
 80061d4:	2508      	movs	r5, #8
 80061d6:	1978      	adds	r0, r7, r5
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	0023      	movs	r3, r4
 80061dc:	f004 fd9a 	bl	800ad14 <siprintf>
	drawCenteredText(WIDTH/2, HEIGHT/2-12, str, hspi);		// about y=68
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	197a      	adds	r2, r7, r5
 80061e4:	2144      	movs	r1, #68	; 0x44
 80061e6:	2040      	movs	r0, #64	; 0x40
 80061e8:	f7fc fafa 	bl	80027e0 <drawCenteredText>

	// leaving room to draw "timer set!/unset"
}
 80061ec:	46c0      	nop			; (mov r8, r8)
 80061ee:	46bd      	mov	sp, r7
 80061f0:	b00c      	add	sp, #48	; 0x30
 80061f2:	bdb0      	pop	{r4, r5, r7, pc}
 80061f4:	0800b6a0 	.word	0x0800b6a0

080061f8 <drawAlarm>:

void drawAlarm(struct alarmTimes *a, SPI_HandleTypeDef *hspi) {
 80061f8:	b5b0      	push	{r4, r5, r7, lr}
 80061fa:	b08e      	sub	sp, #56	; 0x38
 80061fc:	af02      	add	r7, sp, #8
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
	char str[40];

	// drawing hr:min:sec
	setTextSize(2);
 8006202:	2002      	movs	r0, #2
 8006204:	f7fc fc70 	bl	8002ae8 <setTextSize>
	setTextColor(ST77XX_BLACK);
 8006208:	2000      	movs	r0, #0
 800620a:	f7fc fc7d 	bl	8002b08 <setTextColor>
	sprintf(str, "%2d:%2d:%2d", a->hr, a->min, a->sec);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	001a      	movs	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	785b      	ldrb	r3, [r3, #1]
 8006218:	001c      	movs	r4, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	789b      	ldrb	r3, [r3, #2]
 800621e:	4911      	ldr	r1, [pc, #68]	; (8006264 <drawAlarm+0x6c>)
 8006220:	2508      	movs	r5, #8
 8006222:	1978      	adds	r0, r7, r5
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	0023      	movs	r3, r4
 8006228:	f004 fd74 	bl	800ad14 <siprintf>
	drawCenteredText(WIDTH/2, 68, str, hspi);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	197a      	adds	r2, r7, r5
 8006230:	2144      	movs	r1, #68	; 0x44
 8006232:	2040      	movs	r0, #64	; 0x40
 8006234:	f7fc fad4 	bl	80027e0 <drawCenteredText>

	// drawing weekday
	setTextSize(1);
 8006238:	2001      	movs	r0, #1
 800623a:	f7fc fc55 	bl	8002ae8 <setTextSize>
	drawCenteredTextWithPadding(WIDTH/2, 84, 9, weekdayNames[a->weekday], hspi);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	78db      	ldrb	r3, [r3, #3]
 8006242:	001a      	movs	r2, r3
 8006244:	4b08      	ldr	r3, [pc, #32]	; (8006268 <drawAlarm+0x70>)
 8006246:	0092      	lsls	r2, r2, #2
 8006248:	58d2      	ldr	r2, [r2, r3]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	0013      	movs	r3, r2
 8006250:	2209      	movs	r2, #9
 8006252:	2154      	movs	r1, #84	; 0x54
 8006254:	2040      	movs	r0, #64	; 0x40
 8006256:	f7fc fb25 	bl	80028a4 <drawCenteredTextWithPadding>
}
 800625a:	46c0      	nop			; (mov r8, r8)
 800625c:	46bd      	mov	sp, r7
 800625e:	b00c      	add	sp, #48	; 0x30
 8006260:	bdb0      	pop	{r4, r5, r7, pc}
 8006262:	46c0      	nop			; (mov r8, r8)
 8006264:	0800b6a0 	.word	0x0800b6a0
 8006268:	20000014 	.word	0x20000014

0800626c <drawStopwatch>:

void drawStopwatch(uint32_t seconds, SPI_HandleTypeDef *hspi) {
 800626c:	b5b0      	push	{r4, r5, r7, lr}
 800626e:	b090      	sub	sp, #64	; 0x40
 8006270:	af02      	add	r7, sp, #8
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
	struct times t = {0};
 8006276:	2134      	movs	r1, #52	; 0x34
 8006278:	000c      	movs	r4, r1
 800627a:	187b      	adds	r3, r7, r1
 800627c:	0018      	movs	r0, r3
 800627e:	2303      	movs	r3, #3
 8006280:	001a      	movs	r2, r3
 8006282:	2100      	movs	r1, #0
 8006284:	f004 fcbf 	bl	800ac06 <memset>
	char str[40];

	secondsToTime(&t, seconds);
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	0021      	movs	r1, r4
 800628c:	000c      	movs	r4, r1
 800628e:	187b      	adds	r3, r7, r1
 8006290:	0011      	movs	r1, r2
 8006292:	0018      	movs	r0, r3
 8006294:	f7fd f807 	bl	80032a6 <secondsToTime>

	// drawing hr:min:sec
	setTextSize(2);
 8006298:	2002      	movs	r0, #2
 800629a:	f7fc fc25 	bl	8002ae8 <setTextSize>
	setTextColor(ST77XX_BLACK);
 800629e:	2000      	movs	r0, #0
 80062a0:	f7fc fc32 	bl	8002b08 <setTextColor>
	sprintf(str, "%2d:%2d:%2d", t.hr, t.min, t.sec);
 80062a4:	0021      	movs	r1, r4
 80062a6:	187b      	adds	r3, r7, r1
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	001a      	movs	r2, r3
 80062ac:	187b      	adds	r3, r7, r1
 80062ae:	785b      	ldrb	r3, [r3, #1]
 80062b0:	001c      	movs	r4, r3
 80062b2:	187b      	adds	r3, r7, r1
 80062b4:	789b      	ldrb	r3, [r3, #2]
 80062b6:	4908      	ldr	r1, [pc, #32]	; (80062d8 <drawStopwatch+0x6c>)
 80062b8:	250c      	movs	r5, #12
 80062ba:	1978      	adds	r0, r7, r5
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	0023      	movs	r3, r4
 80062c0:	f004 fd28 	bl	800ad14 <siprintf>
	drawCenteredText(WIDTH/2, 68, str, hspi);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	197a      	adds	r2, r7, r5
 80062c8:	2144      	movs	r1, #68	; 0x44
 80062ca:	2040      	movs	r0, #64	; 0x40
 80062cc:	f7fc fa88 	bl	80027e0 <drawCenteredText>

	// leaving room for lap
}
 80062d0:	46c0      	nop			; (mov r8, r8)
 80062d2:	46bd      	mov	sp, r7
 80062d4:	b00e      	add	sp, #56	; 0x38
 80062d6:	bdb0      	pop	{r4, r5, r7, pc}
 80062d8:	0800b6a0 	.word	0x0800b6a0

080062dc <drawStopwatchLap>:

void drawStopwatchLap(uint32_t seconds, SPI_HandleTypeDef *hspi) {
 80062dc:	b5b0      	push	{r4, r5, r7, lr}
 80062de:	b090      	sub	sp, #64	; 0x40
 80062e0:	af02      	add	r7, sp, #8
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
	struct times t = {0};
 80062e6:	2134      	movs	r1, #52	; 0x34
 80062e8:	000c      	movs	r4, r1
 80062ea:	187b      	adds	r3, r7, r1
 80062ec:	0018      	movs	r0, r3
 80062ee:	2303      	movs	r3, #3
 80062f0:	001a      	movs	r2, r3
 80062f2:	2100      	movs	r1, #0
 80062f4:	f004 fc87 	bl	800ac06 <memset>
	char str[40];

	secondsToTime(&t, seconds);
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	0021      	movs	r1, r4
 80062fc:	000c      	movs	r4, r1
 80062fe:	187b      	adds	r3, r7, r1
 8006300:	0011      	movs	r1, r2
 8006302:	0018      	movs	r0, r3
 8006304:	f7fc ffcf 	bl	80032a6 <secondsToTime>

	// drawing hr:min:sec
	setTextSize(1);
 8006308:	2001      	movs	r0, #1
 800630a:	f7fc fbed 	bl	8002ae8 <setTextSize>
	setTextColor(ST77XX_BLACK);
 800630e:	2000      	movs	r0, #0
 8006310:	f7fc fbfa 	bl	8002b08 <setTextColor>
	sprintf(str, "lap: %2d:%2d:%2d", t.hr, t.min, t.sec);
 8006314:	0021      	movs	r1, r4
 8006316:	187b      	adds	r3, r7, r1
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	001a      	movs	r2, r3
 800631c:	187b      	adds	r3, r7, r1
 800631e:	785b      	ldrb	r3, [r3, #1]
 8006320:	001c      	movs	r4, r3
 8006322:	187b      	adds	r3, r7, r1
 8006324:	789b      	ldrb	r3, [r3, #2]
 8006326:	4908      	ldr	r1, [pc, #32]	; (8006348 <drawStopwatchLap+0x6c>)
 8006328:	250c      	movs	r5, #12
 800632a:	1978      	adds	r0, r7, r5
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	0023      	movs	r3, r4
 8006330:	f004 fcf0 	bl	800ad14 <siprintf>
	drawCenteredText(WIDTH/2, 84, str, hspi);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	197a      	adds	r2, r7, r5
 8006338:	2154      	movs	r1, #84	; 0x54
 800633a:	2040      	movs	r0, #64	; 0x40
 800633c:	f7fc fa50 	bl	80027e0 <drawCenteredText>
}
 8006340:	46c0      	nop			; (mov r8, r8)
 8006342:	46bd      	mov	sp, r7
 8006344:	b00e      	add	sp, #56	; 0x38
 8006346:	bdb0      	pop	{r4, r5, r7, pc}
 8006348:	0800b6ac 	.word	0x0800b6ac

0800634c <initFace>:
// ---- end of drawing functions ----

// initializes variables. should be called at the start of the run
void initFace() {
 800634c:	b580      	push	{r7, lr}
 800634e:	af00      	add	r7, sp, #0
	faceOnDisplay = faceClock;
 8006350:	4b14      	ldr	r3, [pc, #80]	; (80063a4 <initFace+0x58>)
 8006352:	2200      	movs	r2, #0
 8006354:	701a      	strb	r2, [r3, #0]
	updateFace.clock = 1;
 8006356:	4b14      	ldr	r3, [pc, #80]	; (80063a8 <initFace+0x5c>)
 8006358:	2201      	movs	r2, #1
 800635a:	701a      	strb	r2, [r3, #0]

	clockVars.dateToSet = (struct dates *)calloc(1, sizeof(struct dates *));
 800635c:	2104      	movs	r1, #4
 800635e:	2001      	movs	r0, #1
 8006360:	f004 fc14 	bl	800ab8c <calloc>
 8006364:	0003      	movs	r3, r0
 8006366:	001a      	movs	r2, r3
 8006368:	4b10      	ldr	r3, [pc, #64]	; (80063ac <initFace+0x60>)
 800636a:	605a      	str	r2, [r3, #4]
	clockVars.timeToSet = (struct times *)calloc(1, sizeof(struct times *));
 800636c:	2104      	movs	r1, #4
 800636e:	2001      	movs	r0, #1
 8006370:	f004 fc0c 	bl	800ab8c <calloc>
 8006374:	0003      	movs	r3, r0
 8006376:	001a      	movs	r2, r3
 8006378:	4b0c      	ldr	r3, [pc, #48]	; (80063ac <initFace+0x60>)
 800637a:	609a      	str	r2, [r3, #8]
	timerVars.timeToSet = (struct times *)calloc(1, sizeof(struct times *));
 800637c:	2104      	movs	r1, #4
 800637e:	2001      	movs	r0, #1
 8006380:	f004 fc04 	bl	800ab8c <calloc>
 8006384:	0003      	movs	r3, r0
 8006386:	001a      	movs	r2, r3
 8006388:	4b09      	ldr	r3, [pc, #36]	; (80063b0 <initFace+0x64>)
 800638a:	605a      	str	r2, [r3, #4]
	alarmVars.alarmToSet = (struct alarmTimes *)calloc(1, sizeof(struct alarmTimes *));
 800638c:	2104      	movs	r1, #4
 800638e:	2001      	movs	r0, #1
 8006390:	f004 fbfc 	bl	800ab8c <calloc>
 8006394:	0003      	movs	r3, r0
 8006396:	001a      	movs	r2, r3
 8006398:	4b06      	ldr	r3, [pc, #24]	; (80063b4 <initFace+0x68>)
 800639a:	605a      	str	r2, [r3, #4]
}
 800639c:	46c0      	nop			; (mov r8, r8)
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	46c0      	nop			; (mov r8, r8)
 80063a4:	20000134 	.word	0x20000134
 80063a8:	20000144 	.word	0x20000144
 80063ac:	20000110 	.word	0x20000110
 80063b0:	2000011c 	.word	0x2000011c
 80063b4:	20000124 	.word	0x20000124

080063b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80063b8:	480d      	ldr	r0, [pc, #52]	; (80063f0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80063ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80063bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80063be:	e003      	b.n	80063c8 <LoopCopyDataInit>

080063c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80063c0:	4b0c      	ldr	r3, [pc, #48]	; (80063f4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80063c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80063c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80063c6:	3104      	adds	r1, #4

080063c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80063c8:	480b      	ldr	r0, [pc, #44]	; (80063f8 <LoopForever+0xa>)
  ldr  r3, =_edata
 80063ca:	4b0c      	ldr	r3, [pc, #48]	; (80063fc <LoopForever+0xe>)
  adds  r2, r0, r1
 80063cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80063ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80063d0:	d3f6      	bcc.n	80063c0 <CopyDataInit>
  ldr  r2, =_sbss
 80063d2:	4a0b      	ldr	r2, [pc, #44]	; (8006400 <LoopForever+0x12>)
  b  LoopFillZerobss
 80063d4:	e002      	b.n	80063dc <LoopFillZerobss>

080063d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80063d6:	2300      	movs	r3, #0
  str  r3, [r2]
 80063d8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80063da:	3204      	adds	r2, #4

080063dc <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80063dc:	4b09      	ldr	r3, [pc, #36]	; (8006404 <LoopForever+0x16>)
  cmp  r2, r3
 80063de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80063e0:	d3f9      	bcc.n	80063d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80063e2:	f7fe f83f 	bl	8004464 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80063e6:	f004 fbe1 	bl	800abac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80063ea:	f7fd f849 	bl	8003480 <main>

080063ee <LoopForever>:

LoopForever:
    b LoopForever
 80063ee:	e7fe      	b.n	80063ee <LoopForever>
   ldr   r0, =_estack
 80063f0:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 80063f4:	0800bff0 	.word	0x0800bff0
  ldr  r0, =_sdata
 80063f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80063fc:	200000d0 	.word	0x200000d0
  ldr  r2, =_sbss
 8006400:	200000d0 	.word	0x200000d0
  ldr  r3, = _ebss
 8006404:	200003a8 	.word	0x200003a8

08006408 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006408:	e7fe      	b.n	8006408 <ADC1_COMP_IRQHandler>
	...

0800640c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006412:	1dfb      	adds	r3, r7, #7
 8006414:	2200      	movs	r2, #0
 8006416:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8006418:	4b0b      	ldr	r3, [pc, #44]	; (8006448 <HAL_Init+0x3c>)
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	4b0a      	ldr	r3, [pc, #40]	; (8006448 <HAL_Init+0x3c>)
 800641e:	2140      	movs	r1, #64	; 0x40
 8006420:	430a      	orrs	r2, r1
 8006422:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006424:	2000      	movs	r0, #0
 8006426:	f000 f811 	bl	800644c <HAL_InitTick>
 800642a:	1e03      	subs	r3, r0, #0
 800642c:	d003      	beq.n	8006436 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800642e:	1dfb      	adds	r3, r7, #7
 8006430:	2201      	movs	r2, #1
 8006432:	701a      	strb	r2, [r3, #0]
 8006434:	e001      	b.n	800643a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006436:	f7fd fd8f 	bl	8003f58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800643a:	1dfb      	adds	r3, r7, #7
 800643c:	781b      	ldrb	r3, [r3, #0]
}
 800643e:	0018      	movs	r0, r3
 8006440:	46bd      	mov	sp, r7
 8006442:	b002      	add	sp, #8
 8006444:	bd80      	pop	{r7, pc}
 8006446:	46c0      	nop			; (mov r8, r8)
 8006448:	40022000 	.word	0x40022000

0800644c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006454:	230f      	movs	r3, #15
 8006456:	18fb      	adds	r3, r7, r3
 8006458:	2200      	movs	r2, #0
 800645a:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800645c:	4b0f      	ldr	r3, [pc, #60]	; (800649c <HAL_InitTick+0x50>)
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	23fa      	movs	r3, #250	; 0xfa
 8006462:	0099      	lsls	r1, r3, #2
 8006464:	0010      	movs	r0, r2
 8006466:	f7f9 fe57 	bl	8000118 <__udivsi3>
 800646a:	0003      	movs	r3, r0
 800646c:	0018      	movs	r0, r3
 800646e:	f000 fde4 	bl	800703a <HAL_SYSTICK_Config>
 8006472:	1e03      	subs	r3, r0, #0
 8006474:	d004      	beq.n	8006480 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8006476:	230f      	movs	r3, #15
 8006478:	18fb      	adds	r3, r7, r3
 800647a:	2201      	movs	r2, #1
 800647c:	701a      	strb	r2, [r3, #0]
 800647e:	e006      	b.n	800648e <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8006480:	6879      	ldr	r1, [r7, #4]
 8006482:	2301      	movs	r3, #1
 8006484:	425b      	negs	r3, r3
 8006486:	2200      	movs	r2, #0
 8006488:	0018      	movs	r0, r3
 800648a:	f000 fda1 	bl	8006fd0 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 800648e:	230f      	movs	r3, #15
 8006490:	18fb      	adds	r3, r7, r3
 8006492:	781b      	ldrb	r3, [r3, #0]
}
 8006494:	0018      	movs	r0, r3
 8006496:	46bd      	mov	sp, r7
 8006498:	b004      	add	sp, #16
 800649a:	bd80      	pop	{r7, pc}
 800649c:	20000010 	.word	0x20000010

080064a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	af00      	add	r7, sp, #0
  uwTick++;
 80064a4:	4b03      	ldr	r3, [pc, #12]	; (80064b4 <HAL_IncTick+0x14>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	1c5a      	adds	r2, r3, #1
 80064aa:	4b02      	ldr	r3, [pc, #8]	; (80064b4 <HAL_IncTick+0x14>)
 80064ac:	601a      	str	r2, [r3, #0]
}
 80064ae:	46c0      	nop			; (mov r8, r8)
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	200003a0 	.word	0x200003a0

080064b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	af00      	add	r7, sp, #0
  return uwTick;
 80064bc:	4b02      	ldr	r3, [pc, #8]	; (80064c8 <HAL_GetTick+0x10>)
 80064be:	681b      	ldr	r3, [r3, #0]
}
 80064c0:	0018      	movs	r0, r3
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	46c0      	nop			; (mov r8, r8)
 80064c8:	200003a0 	.word	0x200003a0

080064cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80064d4:	f7ff fff0 	bl	80064b8 <HAL_GetTick>
 80064d8:	0003      	movs	r3, r0
 80064da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	3301      	adds	r3, #1
 80064e4:	d002      	beq.n	80064ec <HAL_Delay+0x20>
  {
    wait++;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	3301      	adds	r3, #1
 80064ea:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80064ec:	46c0      	nop			; (mov r8, r8)
 80064ee:	f7ff ffe3 	bl	80064b8 <HAL_GetTick>
 80064f2:	0002      	movs	r2, r0
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d8f7      	bhi.n	80064ee <HAL_Delay+0x22>
  {
  }
}
 80064fe:	46c0      	nop			; (mov r8, r8)
 8006500:	46bd      	mov	sp, r7
 8006502:	b004      	add	sp, #16
 8006504:	bd80      	pop	{r7, pc}
	...

08006508 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d101      	bne.n	800651a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e159      	b.n	80067ce <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10a      	bne.n	8006538 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2250      	movs	r2, #80	; 0x50
 800652c:	2100      	movs	r1, #0
 800652e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	0018      	movs	r0, r3
 8006534:	f7fd fd24 	bl	8003f80 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800653c:	2210      	movs	r2, #16
 800653e:	4013      	ands	r3, r2
 8006540:	2b10      	cmp	r3, #16
 8006542:	d005      	beq.n	8006550 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	2204      	movs	r2, #4
 800654c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800654e:	d00b      	beq.n	8006568 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006554:	2210      	movs	r2, #16
 8006556:	431a      	orrs	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2250      	movs	r2, #80	; 0x50
 8006560:	2100      	movs	r1, #0
 8006562:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e132      	b.n	80067ce <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800656c:	4a9a      	ldr	r2, [pc, #616]	; (80067d8 <HAL_ADC_Init+0x2d0>)
 800656e:	4013      	ands	r3, r2
 8006570:	2202      	movs	r2, #2
 8006572:	431a      	orrs	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	2203      	movs	r2, #3
 8006580:	4013      	ands	r3, r2
 8006582:	2b01      	cmp	r3, #1
 8006584:	d108      	bne.n	8006598 <HAL_ADC_Init+0x90>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2201      	movs	r2, #1
 800658e:	4013      	ands	r3, r2
 8006590:	2b01      	cmp	r3, #1
 8006592:	d101      	bne.n	8006598 <HAL_ADC_Init+0x90>
 8006594:	2301      	movs	r3, #1
 8006596:	e000      	b.n	800659a <HAL_ADC_Init+0x92>
 8006598:	2300      	movs	r3, #0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d149      	bne.n	8006632 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685a      	ldr	r2, [r3, #4]
 80065a2:	23c0      	movs	r3, #192	; 0xc0
 80065a4:	061b      	lsls	r3, r3, #24
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d00b      	beq.n	80065c2 <HAL_ADC_Init+0xba>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	685a      	ldr	r2, [r3, #4]
 80065ae:	2380      	movs	r3, #128	; 0x80
 80065b0:	05db      	lsls	r3, r3, #23
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d005      	beq.n	80065c2 <HAL_ADC_Init+0xba>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685a      	ldr	r2, [r3, #4]
 80065ba:	2380      	movs	r3, #128	; 0x80
 80065bc:	061b      	lsls	r3, r3, #24
 80065be:	429a      	cmp	r2, r3
 80065c0:	d111      	bne.n	80065e6 <HAL_ADC_Init+0xde>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	691a      	ldr	r2, [r3, #16]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	0092      	lsls	r2, r2, #2
 80065ce:	0892      	lsrs	r2, r2, #2
 80065d0:	611a      	str	r2, [r3, #16]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6919      	ldr	r1, [r3, #16]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	430a      	orrs	r2, r1
 80065e2:	611a      	str	r2, [r3, #16]
 80065e4:	e014      	b.n	8006610 <HAL_ADC_Init+0x108>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	691a      	ldr	r2, [r3, #16]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	0092      	lsls	r2, r2, #2
 80065f2:	0892      	lsrs	r2, r2, #2
 80065f4:	611a      	str	r2, [r3, #16]
 80065f6:	4b79      	ldr	r3, [pc, #484]	; (80067dc <HAL_ADC_Init+0x2d4>)
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	4b78      	ldr	r3, [pc, #480]	; (80067dc <HAL_ADC_Init+0x2d4>)
 80065fc:	4978      	ldr	r1, [pc, #480]	; (80067e0 <HAL_ADC_Init+0x2d8>)
 80065fe:	400a      	ands	r2, r1
 8006600:	601a      	str	r2, [r3, #0]
 8006602:	4b76      	ldr	r3, [pc, #472]	; (80067dc <HAL_ADC_Init+0x2d4>)
 8006604:	6819      	ldr	r1, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	4b74      	ldr	r3, [pc, #464]	; (80067dc <HAL_ADC_Init+0x2d4>)
 800660c:	430a      	orrs	r2, r1
 800660e:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68da      	ldr	r2, [r3, #12]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2118      	movs	r1, #24
 800661c:	438a      	bics	r2, r1
 800661e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68d9      	ldr	r1, [r3, #12]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	689a      	ldr	r2, [r3, #8]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	430a      	orrs	r2, r1
 8006630:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8006632:	4b6a      	ldr	r3, [pc, #424]	; (80067dc <HAL_ADC_Init+0x2d4>)
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	4b69      	ldr	r3, [pc, #420]	; (80067dc <HAL_ADC_Init+0x2d4>)
 8006638:	496a      	ldr	r1, [pc, #424]	; (80067e4 <HAL_ADC_Init+0x2dc>)
 800663a:	400a      	ands	r2, r1
 800663c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800663e:	4b67      	ldr	r3, [pc, #412]	; (80067dc <HAL_ADC_Init+0x2d4>)
 8006640:	6819      	ldr	r1, [r3, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006646:	065a      	lsls	r2, r3, #25
 8006648:	4b64      	ldr	r3, [pc, #400]	; (80067dc <HAL_ADC_Init+0x2d4>)
 800664a:	430a      	orrs	r2, r1
 800664c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	689a      	ldr	r2, [r3, #8]
 8006654:	2380      	movs	r3, #128	; 0x80
 8006656:	055b      	lsls	r3, r3, #21
 8006658:	4013      	ands	r3, r2
 800665a:	d108      	bne.n	800666e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689a      	ldr	r2, [r3, #8]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2180      	movs	r1, #128	; 0x80
 8006668:	0549      	lsls	r1, r1, #21
 800666a:	430a      	orrs	r2, r1
 800666c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68da      	ldr	r2, [r3, #12]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	495b      	ldr	r1, [pc, #364]	; (80067e8 <HAL_ADC_Init+0x2e0>)
 800667a:	400a      	ands	r2, r1
 800667c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68d9      	ldr	r1, [r3, #12]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	2b02      	cmp	r3, #2
 800668e:	d101      	bne.n	8006694 <HAL_ADC_Init+0x18c>
 8006690:	2304      	movs	r3, #4
 8006692:	e000      	b.n	8006696 <HAL_ADC_Init+0x18e>
 8006694:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006696:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2020      	movs	r0, #32
 800669c:	5c1b      	ldrb	r3, [r3, r0]
 800669e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80066a0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	202c      	movs	r0, #44	; 0x2c
 80066a6:	5c1b      	ldrb	r3, [r3, r0]
 80066a8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80066aa:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80066b0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80066b8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	69db      	ldr	r3, [r3, #28]
 80066be:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80066c0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	430a      	orrs	r2, r1
 80066c8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066ce:	23c2      	movs	r3, #194	; 0xc2
 80066d0:	33ff      	adds	r3, #255	; 0xff
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d00b      	beq.n	80066ee <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68d9      	ldr	r1, [r3, #12]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80066e4:	431a      	orrs	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2221      	movs	r2, #33	; 0x21
 80066f2:	5c9b      	ldrb	r3, [r3, r2]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d11a      	bne.n	800672e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2220      	movs	r2, #32
 80066fc:	5c9b      	ldrb	r3, [r3, r2]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d109      	bne.n	8006716 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68da      	ldr	r2, [r3, #12]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2180      	movs	r1, #128	; 0x80
 800670e:	0249      	lsls	r1, r1, #9
 8006710:	430a      	orrs	r2, r1
 8006712:	60da      	str	r2, [r3, #12]
 8006714:	e00b      	b.n	800672e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800671a:	2220      	movs	r2, #32
 800671c:	431a      	orrs	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006726:	2201      	movs	r2, #1
 8006728:	431a      	orrs	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006732:	2b01      	cmp	r3, #1
 8006734:	d11f      	bne.n	8006776 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	691a      	ldr	r2, [r3, #16]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	492a      	ldr	r1, [pc, #168]	; (80067ec <HAL_ADC_Init+0x2e4>)
 8006742:	400a      	ands	r2, r1
 8006744:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	6919      	ldr	r1, [r3, #16]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006754:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 800675a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	430a      	orrs	r2, r1
 8006762:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	691a      	ldr	r2, [r3, #16]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2101      	movs	r1, #1
 8006770:	430a      	orrs	r2, r1
 8006772:	611a      	str	r2, [r3, #16]
 8006774:	e00e      	b.n	8006794 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	2201      	movs	r2, #1
 800677e:	4013      	ands	r3, r2
 8006780:	2b01      	cmp	r3, #1
 8006782:	d107      	bne.n	8006794 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	691a      	ldr	r2, [r3, #16]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2101      	movs	r1, #1
 8006790:	438a      	bics	r2, r1
 8006792:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	695a      	ldr	r2, [r3, #20]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2107      	movs	r1, #7
 80067a0:	438a      	bics	r2, r1
 80067a2:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6959      	ldr	r1, [r3, #20]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067c0:	2203      	movs	r2, #3
 80067c2:	4393      	bics	r3, r2
 80067c4:	2201      	movs	r2, #1
 80067c6:	431a      	orrs	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	0018      	movs	r0, r3
 80067d0:	46bd      	mov	sp, r7
 80067d2:	b002      	add	sp, #8
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	46c0      	nop			; (mov r8, r8)
 80067d8:	fffffefd 	.word	0xfffffefd
 80067dc:	40012708 	.word	0x40012708
 80067e0:	ffc3ffff 	.word	0xffc3ffff
 80067e4:	fdffffff 	.word	0xfdffffff
 80067e8:	fffe0219 	.word	0xfffe0219
 80067ec:	fffffc03 	.word	0xfffffc03

080067f0 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80067f0:	b5b0      	push	{r4, r5, r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80067f8:	230f      	movs	r3, #15
 80067fa:	18fb      	adds	r3, r7, r3
 80067fc:	2200      	movs	r2, #0
 80067fe:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2250      	movs	r2, #80	; 0x50
 8006804:	5c9b      	ldrb	r3, [r3, r2]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d101      	bne.n	800680e <HAL_ADC_Stop+0x1e>
 800680a:	2302      	movs	r3, #2
 800680c:	e02a      	b.n	8006864 <HAL_ADC_Stop+0x74>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2250      	movs	r2, #80	; 0x50
 8006812:	2101      	movs	r1, #1
 8006814:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8006816:	250f      	movs	r5, #15
 8006818:	197c      	adds	r4, r7, r5
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	0018      	movs	r0, r3
 800681e:	f000 fa9b 	bl	8006d58 <ADC_ConversionStop>
 8006822:	0003      	movs	r3, r0
 8006824:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006826:	197b      	adds	r3, r7, r5
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d113      	bne.n	8006856 <HAL_ADC_Stop+0x66>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800682e:	250f      	movs	r5, #15
 8006830:	197c      	adds	r4, r7, r5
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	0018      	movs	r0, r3
 8006836:	f000 fa2f 	bl	8006c98 <ADC_Disable>
 800683a:	0003      	movs	r3, r0
 800683c:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800683e:	197b      	adds	r3, r7, r5
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d107      	bne.n	8006856 <HAL_ADC_Stop+0x66>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800684a:	4a08      	ldr	r2, [pc, #32]	; (800686c <HAL_ADC_Stop+0x7c>)
 800684c:	4013      	ands	r3, r2
 800684e:	2201      	movs	r2, #1
 8006850:	431a      	orrs	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2250      	movs	r2, #80	; 0x50
 800685a:	2100      	movs	r1, #0
 800685c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800685e:	230f      	movs	r3, #15
 8006860:	18fb      	adds	r3, r7, r3
 8006862:	781b      	ldrb	r3, [r3, #0]
}
 8006864:	0018      	movs	r0, r3
 8006866:	46bd      	mov	sp, r7
 8006868:	b004      	add	sp, #16
 800686a:	bdb0      	pop	{r4, r5, r7, pc}
 800686c:	fffffefe 	.word	0xfffffefe

08006870 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800687a:	2300      	movs	r3, #0
 800687c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800687e:	2300      	movs	r3, #0
 8006880:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	2b08      	cmp	r3, #8
 8006888:	d102      	bne.n	8006890 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800688a:	2308      	movs	r3, #8
 800688c:	60fb      	str	r3, [r7, #12]
 800688e:	e014      	b.n	80068ba <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	2201      	movs	r2, #1
 8006898:	4013      	ands	r3, r2
 800689a:	2b01      	cmp	r3, #1
 800689c:	d10b      	bne.n	80068b6 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a2:	2220      	movs	r2, #32
 80068a4:	431a      	orrs	r2, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2250      	movs	r2, #80	; 0x50
 80068ae:	2100      	movs	r1, #0
 80068b0:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e06c      	b.n	8006990 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80068b6:	230c      	movs	r3, #12
 80068b8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80068ba:	f7ff fdfd 	bl	80064b8 <HAL_GetTick>
 80068be:	0003      	movs	r3, r0
 80068c0:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80068c2:	e019      	b.n	80068f8 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	3301      	adds	r3, #1
 80068c8:	d016      	beq.n	80068f8 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d007      	beq.n	80068e0 <HAL_ADC_PollForConversion+0x70>
 80068d0:	f7ff fdf2 	bl	80064b8 <HAL_GetTick>
 80068d4:	0002      	movs	r2, r0
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	683a      	ldr	r2, [r7, #0]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d20b      	bcs.n	80068f8 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e4:	2204      	movs	r2, #4
 80068e6:	431a      	orrs	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2250      	movs	r2, #80	; 0x50
 80068f0:	2100      	movs	r1, #0
 80068f2:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e04b      	b.n	8006990 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	4013      	ands	r3, r2
 8006902:	d0df      	beq.n	80068c4 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006908:	2280      	movs	r2, #128	; 0x80
 800690a:	0092      	lsls	r2, r2, #2
 800690c:	431a      	orrs	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68da      	ldr	r2, [r3, #12]
 8006918:	23c0      	movs	r3, #192	; 0xc0
 800691a:	011b      	lsls	r3, r3, #4
 800691c:	4013      	ands	r3, r2
 800691e:	d12e      	bne.n	800697e <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2220      	movs	r2, #32
 8006924:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006926:	2b00      	cmp	r3, #0
 8006928:	d129      	bne.n	800697e <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2208      	movs	r2, #8
 8006932:	4013      	ands	r3, r2
 8006934:	2b08      	cmp	r3, #8
 8006936:	d122      	bne.n	800697e <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	2204      	movs	r2, #4
 8006940:	4013      	ands	r3, r2
 8006942:	d110      	bne.n	8006966 <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685a      	ldr	r2, [r3, #4]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	210c      	movs	r1, #12
 8006950:	438a      	bics	r2, r1
 8006952:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006958:	4a0f      	ldr	r2, [pc, #60]	; (8006998 <HAL_ADC_PollForConversion+0x128>)
 800695a:	4013      	ands	r3, r2
 800695c:	2201      	movs	r2, #1
 800695e:	431a      	orrs	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	655a      	str	r2, [r3, #84]	; 0x54
 8006964:	e00b      	b.n	800697e <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800696a:	2220      	movs	r2, #32
 800696c:	431a      	orrs	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006976:	2201      	movs	r2, #1
 8006978:	431a      	orrs	r2, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d103      	bne.n	800698e <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	220c      	movs	r2, #12
 800698c:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	0018      	movs	r0, r3
 8006992:	46bd      	mov	sp, r7
 8006994:	b004      	add	sp, #16
 8006996:	bd80      	pop	{r7, pc}
 8006998:	fffffefe 	.word	0xfffffefe

0800699c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800699c:	b590      	push	{r4, r7, lr}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80069a4:	230f      	movs	r3, #15
 80069a6:	18fb      	adds	r3, r7, r3
 80069a8:	2200      	movs	r2, #0
 80069aa:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	2204      	movs	r2, #4
 80069b4:	4013      	ands	r3, r2
 80069b6:	d156      	bne.n	8006a66 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2250      	movs	r2, #80	; 0x50
 80069bc:	5c9b      	ldrb	r3, [r3, r2]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d101      	bne.n	80069c6 <HAL_ADC_Start_IT+0x2a>
 80069c2:	2302      	movs	r3, #2
 80069c4:	e056      	b.n	8006a74 <HAL_ADC_Start_IT+0xd8>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2250      	movs	r2, #80	; 0x50
 80069ca:	2101      	movs	r1, #1
 80069cc:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d007      	beq.n	80069e6 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80069d6:	230f      	movs	r3, #15
 80069d8:	18fc      	adds	r4, r7, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	0018      	movs	r0, r3
 80069de:	f000 f8fb 	bl	8006bd8 <ADC_Enable>
 80069e2:	0003      	movs	r3, r0
 80069e4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80069e6:	230f      	movs	r3, #15
 80069e8:	18fb      	adds	r3, r7, r3
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d13e      	bne.n	8006a6e <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069f4:	4a21      	ldr	r2, [pc, #132]	; (8006a7c <HAL_ADC_Start_IT+0xe0>)
 80069f6:	4013      	ands	r3, r2
 80069f8:	2280      	movs	r2, #128	; 0x80
 80069fa:	0052      	lsls	r2, r2, #1
 80069fc:	431a      	orrs	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2250      	movs	r2, #80	; 0x50
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	221c      	movs	r2, #28
 8006a16:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	695b      	ldr	r3, [r3, #20]
 8006a1c:	2b08      	cmp	r3, #8
 8006a1e:	d110      	bne.n	8006a42 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	685a      	ldr	r2, [r3, #4]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2104      	movs	r1, #4
 8006a2c:	438a      	bics	r2, r1
 8006a2e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	685a      	ldr	r2, [r3, #4]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2118      	movs	r1, #24
 8006a3c:	430a      	orrs	r2, r1
 8006a3e:	605a      	str	r2, [r3, #4]
          break;
 8006a40:	e008      	b.n	8006a54 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	685a      	ldr	r2, [r3, #4]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	211c      	movs	r1, #28
 8006a4e:	430a      	orrs	r2, r1
 8006a50:	605a      	str	r2, [r3, #4]
          break;
 8006a52:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689a      	ldr	r2, [r3, #8]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2104      	movs	r1, #4
 8006a60:	430a      	orrs	r2, r1
 8006a62:	609a      	str	r2, [r3, #8]
 8006a64:	e003      	b.n	8006a6e <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006a66:	230f      	movs	r3, #15
 8006a68:	18fb      	adds	r3, r7, r3
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006a6e:	230f      	movs	r3, #15
 8006a70:	18fb      	adds	r3, r7, r3
 8006a72:	781b      	ldrb	r3, [r3, #0]
}
 8006a74:	0018      	movs	r0, r3
 8006a76:	46bd      	mov	sp, r7
 8006a78:	b005      	add	sp, #20
 8006a7a:	bd90      	pop	{r4, r7, pc}
 8006a7c:	fffff0fe 	.word	0xfffff0fe

08006a80 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006a8e:	0018      	movs	r0, r3
 8006a90:	46bd      	mov	sp, r7
 8006a92:	b002      	add	sp, #8
 8006a94:	bd80      	pop	{r7, pc}
	...

08006a98 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2250      	movs	r2, #80	; 0x50
 8006aa6:	5c9b      	ldrb	r3, [r3, r2]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d101      	bne.n	8006ab0 <HAL_ADC_ConfigChannel+0x18>
 8006aac:	2302      	movs	r3, #2
 8006aae:	e085      	b.n	8006bbc <HAL_ADC_ConfigChannel+0x124>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2250      	movs	r2, #80	; 0x50
 8006ab4:	2101      	movs	r1, #1
 8006ab6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	2204      	movs	r2, #4
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	d00b      	beq.n	8006adc <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac8:	2220      	movs	r2, #32
 8006aca:	431a      	orrs	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2250      	movs	r2, #80	; 0x50
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e06f      	b.n	8006bbc <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	4a38      	ldr	r2, [pc, #224]	; (8006bc4 <HAL_ADC_ConfigChannel+0x12c>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d035      	beq.n	8006b52 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	035b      	lsls	r3, r3, #13
 8006af2:	0b5a      	lsrs	r2, r3, #13
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	430a      	orrs	r2, r1
 8006afa:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	2380      	movs	r3, #128	; 0x80
 8006b02:	02db      	lsls	r3, r3, #11
 8006b04:	4013      	ands	r3, r2
 8006b06:	d009      	beq.n	8006b1c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8006b08:	4b2f      	ldr	r3, [pc, #188]	; (8006bc8 <HAL_ADC_ConfigChannel+0x130>)
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	4b2e      	ldr	r3, [pc, #184]	; (8006bc8 <HAL_ADC_ConfigChannel+0x130>)
 8006b0e:	2180      	movs	r1, #128	; 0x80
 8006b10:	0409      	lsls	r1, r1, #16
 8006b12:	430a      	orrs	r2, r1
 8006b14:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8006b16:	200a      	movs	r0, #10
 8006b18:	f000 f964 	bl	8006de4 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	2380      	movs	r3, #128	; 0x80
 8006b22:	029b      	lsls	r3, r3, #10
 8006b24:	4013      	ands	r3, r2
 8006b26:	d006      	beq.n	8006b36 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8006b28:	4b27      	ldr	r3, [pc, #156]	; (8006bc8 <HAL_ADC_ConfigChannel+0x130>)
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	4b26      	ldr	r3, [pc, #152]	; (8006bc8 <HAL_ADC_ConfigChannel+0x130>)
 8006b2e:	2180      	movs	r1, #128	; 0x80
 8006b30:	03c9      	lsls	r1, r1, #15
 8006b32:	430a      	orrs	r2, r1
 8006b34:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	2380      	movs	r3, #128	; 0x80
 8006b3c:	025b      	lsls	r3, r3, #9
 8006b3e:	4013      	ands	r3, r2
 8006b40:	d037      	beq.n	8006bb2 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8006b42:	4b21      	ldr	r3, [pc, #132]	; (8006bc8 <HAL_ADC_ConfigChannel+0x130>)
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	4b20      	ldr	r3, [pc, #128]	; (8006bc8 <HAL_ADC_ConfigChannel+0x130>)
 8006b48:	2180      	movs	r1, #128	; 0x80
 8006b4a:	0449      	lsls	r1, r1, #17
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	601a      	str	r2, [r3, #0]
 8006b50:	e02f      	b.n	8006bb2 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	035b      	lsls	r3, r3, #13
 8006b5e:	0b5b      	lsrs	r3, r3, #13
 8006b60:	43d9      	mvns	r1, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	400a      	ands	r2, r1
 8006b68:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	2380      	movs	r3, #128	; 0x80
 8006b70:	02db      	lsls	r3, r3, #11
 8006b72:	4013      	ands	r3, r2
 8006b74:	d005      	beq.n	8006b82 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8006b76:	4b14      	ldr	r3, [pc, #80]	; (8006bc8 <HAL_ADC_ConfigChannel+0x130>)
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	4b13      	ldr	r3, [pc, #76]	; (8006bc8 <HAL_ADC_ConfigChannel+0x130>)
 8006b7c:	4913      	ldr	r1, [pc, #76]	; (8006bcc <HAL_ADC_ConfigChannel+0x134>)
 8006b7e:	400a      	ands	r2, r1
 8006b80:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	2380      	movs	r3, #128	; 0x80
 8006b88:	029b      	lsls	r3, r3, #10
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	d005      	beq.n	8006b9a <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8006b8e:	4b0e      	ldr	r3, [pc, #56]	; (8006bc8 <HAL_ADC_ConfigChannel+0x130>)
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	4b0d      	ldr	r3, [pc, #52]	; (8006bc8 <HAL_ADC_ConfigChannel+0x130>)
 8006b94:	490e      	ldr	r1, [pc, #56]	; (8006bd0 <HAL_ADC_ConfigChannel+0x138>)
 8006b96:	400a      	ands	r2, r1
 8006b98:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	2380      	movs	r3, #128	; 0x80
 8006ba0:	025b      	lsls	r3, r3, #9
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	d005      	beq.n	8006bb2 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8006ba6:	4b08      	ldr	r3, [pc, #32]	; (8006bc8 <HAL_ADC_ConfigChannel+0x130>)
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	4b07      	ldr	r3, [pc, #28]	; (8006bc8 <HAL_ADC_ConfigChannel+0x130>)
 8006bac:	4909      	ldr	r1, [pc, #36]	; (8006bd4 <HAL_ADC_ConfigChannel+0x13c>)
 8006bae:	400a      	ands	r2, r1
 8006bb0:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2250      	movs	r2, #80	; 0x50
 8006bb6:	2100      	movs	r1, #0
 8006bb8:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	0018      	movs	r0, r3
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	b002      	add	sp, #8
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	00001001 	.word	0x00001001
 8006bc8:	40012708 	.word	0x40012708
 8006bcc:	ff7fffff 	.word	0xff7fffff
 8006bd0:	ffbfffff 	.word	0xffbfffff
 8006bd4:	feffffff 	.word	0xfeffffff

08006bd8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006be0:	2300      	movs	r3, #0
 8006be2:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	2203      	movs	r2, #3
 8006bec:	4013      	ands	r3, r2
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d108      	bne.n	8006c04 <ADC_Enable+0x2c>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d101      	bne.n	8006c04 <ADC_Enable+0x2c>
 8006c00:	2301      	movs	r3, #1
 8006c02:	e000      	b.n	8006c06 <ADC_Enable+0x2e>
 8006c04:	2300      	movs	r3, #0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d13f      	bne.n	8006c8a <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	4a20      	ldr	r2, [pc, #128]	; (8006c94 <ADC_Enable+0xbc>)
 8006c12:	4013      	ands	r3, r2
 8006c14:	d00d      	beq.n	8006c32 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c1a:	2210      	movs	r2, #16
 8006c1c:	431a      	orrs	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c26:	2201      	movs	r2, #1
 8006c28:	431a      	orrs	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e02c      	b.n	8006c8c <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	689a      	ldr	r2, [r3, #8]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2101      	movs	r1, #1
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8006c42:	2001      	movs	r0, #1
 8006c44:	f000 f8ce 	bl	8006de4 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8006c48:	f7ff fc36 	bl	80064b8 <HAL_GetTick>
 8006c4c:	0003      	movs	r3, r0
 8006c4e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006c50:	e014      	b.n	8006c7c <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006c52:	f7ff fc31 	bl	80064b8 <HAL_GetTick>
 8006c56:	0002      	movs	r2, r0
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	2b0a      	cmp	r3, #10
 8006c5e:	d90d      	bls.n	8006c7c <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c64:	2210      	movs	r2, #16
 8006c66:	431a      	orrs	r2, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c70:	2201      	movs	r2, #1
 8006c72:	431a      	orrs	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e007      	b.n	8006c8c <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2201      	movs	r2, #1
 8006c84:	4013      	ands	r3, r2
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d1e3      	bne.n	8006c52 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	0018      	movs	r0, r3
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	b004      	add	sp, #16
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	80000017 	.word	0x80000017

08006c98 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	2203      	movs	r2, #3
 8006cac:	4013      	ands	r3, r2
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d108      	bne.n	8006cc4 <ADC_Disable+0x2c>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	4013      	ands	r3, r2
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d101      	bne.n	8006cc4 <ADC_Disable+0x2c>
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e000      	b.n	8006cc6 <ADC_Disable+0x2e>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d041      	beq.n	8006d4e <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	2205      	movs	r2, #5
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d110      	bne.n	8006cfa <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	689a      	ldr	r2, [r3, #8]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2102      	movs	r1, #2
 8006ce4:	430a      	orrs	r2, r1
 8006ce6:	609a      	str	r2, [r3, #8]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2203      	movs	r2, #3
 8006cee:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006cf0:	f7ff fbe2 	bl	80064b8 <HAL_GetTick>
 8006cf4:	0003      	movs	r3, r0
 8006cf6:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006cf8:	e022      	b.n	8006d40 <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cfe:	2210      	movs	r2, #16
 8006d00:	431a      	orrs	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	431a      	orrs	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e01c      	b.n	8006d50 <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006d16:	f7ff fbcf 	bl	80064b8 <HAL_GetTick>
 8006d1a:	0002      	movs	r2, r0
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	2b0a      	cmp	r3, #10
 8006d22:	d90d      	bls.n	8006d40 <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d28:	2210      	movs	r2, #16
 8006d2a:	431a      	orrs	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d34:	2201      	movs	r2, #1
 8006d36:	431a      	orrs	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e007      	b.n	8006d50 <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	2201      	movs	r2, #1
 8006d48:	4013      	ands	r3, r2
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d0e3      	beq.n	8006d16 <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	0018      	movs	r0, r3
 8006d52:	46bd      	mov	sp, r7
 8006d54:	b004      	add	sp, #16
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d60:	2300      	movs	r3, #0
 8006d62:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	2204      	movs	r2, #4
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	d034      	beq.n	8006dda <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	2204      	movs	r2, #4
 8006d78:	4013      	ands	r3, r2
 8006d7a:	2b04      	cmp	r3, #4
 8006d7c:	d10d      	bne.n	8006d9a <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	2202      	movs	r2, #2
 8006d86:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8006d88:	d107      	bne.n	8006d9a <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	689a      	ldr	r2, [r3, #8]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2110      	movs	r1, #16
 8006d96:	430a      	orrs	r2, r1
 8006d98:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006d9a:	f7ff fb8d 	bl	80064b8 <HAL_GetTick>
 8006d9e:	0003      	movs	r3, r0
 8006da0:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8006da2:	e014      	b.n	8006dce <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006da4:	f7ff fb88 	bl	80064b8 <HAL_GetTick>
 8006da8:	0002      	movs	r2, r0
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	2b0a      	cmp	r3, #10
 8006db0:	d90d      	bls.n	8006dce <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db6:	2210      	movs	r2, #16
 8006db8:	431a      	orrs	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	431a      	orrs	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e006      	b.n	8006ddc <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	2204      	movs	r2, #4
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	d1e4      	bne.n	8006da4 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	0018      	movs	r0, r3
 8006dde:	46bd      	mov	sp, r7
 8006de0:	b004      	add	sp, #16
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8006dec:	4b0a      	ldr	r3, [pc, #40]	; (8006e18 <ADC_DelayMicroSecond+0x34>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	490a      	ldr	r1, [pc, #40]	; (8006e1c <ADC_DelayMicroSecond+0x38>)
 8006df2:	0018      	movs	r0, r3
 8006df4:	f7f9 f990 	bl	8000118 <__udivsi3>
 8006df8:	0003      	movs	r3, r0
 8006dfa:	001a      	movs	r2, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4353      	muls	r3, r2
 8006e00:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8006e02:	e002      	b.n	8006e0a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	3b01      	subs	r3, #1
 8006e08:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1f9      	bne.n	8006e04 <ADC_DelayMicroSecond+0x20>
  } 
}
 8006e10:	46c0      	nop			; (mov r8, r8)
 8006e12:	46bd      	mov	sp, r7
 8006e14:	b004      	add	sp, #16
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	20000010 	.word	0x20000010
 8006e1c:	000f4240 	.word	0x000f4240

08006e20 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	0002      	movs	r2, r0
 8006e28:	1dfb      	adds	r3, r7, #7
 8006e2a:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006e2c:	1dfb      	adds	r3, r7, #7
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	001a      	movs	r2, r3
 8006e32:	231f      	movs	r3, #31
 8006e34:	401a      	ands	r2, r3
 8006e36:	4b04      	ldr	r3, [pc, #16]	; (8006e48 <NVIC_EnableIRQ+0x28>)
 8006e38:	2101      	movs	r1, #1
 8006e3a:	4091      	lsls	r1, r2
 8006e3c:	000a      	movs	r2, r1
 8006e3e:	601a      	str	r2, [r3, #0]
}
 8006e40:	46c0      	nop			; (mov r8, r8)
 8006e42:	46bd      	mov	sp, r7
 8006e44:	b002      	add	sp, #8
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	e000e100 	.word	0xe000e100

08006e4c <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	0002      	movs	r2, r0
 8006e54:	1dfb      	adds	r3, r7, #7
 8006e56:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006e58:	1dfb      	adds	r3, r7, #7
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	001a      	movs	r2, r3
 8006e5e:	231f      	movs	r3, #31
 8006e60:	4013      	ands	r3, r2
 8006e62:	4905      	ldr	r1, [pc, #20]	; (8006e78 <NVIC_DisableIRQ+0x2c>)
 8006e64:	2201      	movs	r2, #1
 8006e66:	409a      	lsls	r2, r3
 8006e68:	0013      	movs	r3, r2
 8006e6a:	2280      	movs	r2, #128	; 0x80
 8006e6c:	508b      	str	r3, [r1, r2]
}
 8006e6e:	46c0      	nop			; (mov r8, r8)
 8006e70:	46bd      	mov	sp, r7
 8006e72:	b002      	add	sp, #8
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	46c0      	nop			; (mov r8, r8)
 8006e78:	e000e100 	.word	0xe000e100

08006e7c <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	0002      	movs	r2, r0
 8006e84:	1dfb      	adds	r3, r7, #7
 8006e86:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006e88:	1dfb      	adds	r3, r7, #7
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	001a      	movs	r2, r3
 8006e8e:	231f      	movs	r3, #31
 8006e90:	4013      	ands	r3, r2
 8006e92:	4905      	ldr	r1, [pc, #20]	; (8006ea8 <NVIC_ClearPendingIRQ+0x2c>)
 8006e94:	2201      	movs	r2, #1
 8006e96:	409a      	lsls	r2, r3
 8006e98:	23c0      	movs	r3, #192	; 0xc0
 8006e9a:	005b      	lsls	r3, r3, #1
 8006e9c:	50ca      	str	r2, [r1, r3]
}
 8006e9e:	46c0      	nop			; (mov r8, r8)
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	b002      	add	sp, #8
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	46c0      	nop			; (mov r8, r8)
 8006ea8:	e000e100 	.word	0xe000e100

08006eac <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006eac:	b590      	push	{r4, r7, lr}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	0002      	movs	r2, r0
 8006eb4:	6039      	str	r1, [r7, #0]
 8006eb6:	1dfb      	adds	r3, r7, #7
 8006eb8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8006eba:	1dfb      	adds	r3, r7, #7
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	2b7f      	cmp	r3, #127	; 0x7f
 8006ec0:	d932      	bls.n	8006f28 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006ec2:	4a2f      	ldr	r2, [pc, #188]	; (8006f80 <NVIC_SetPriority+0xd4>)
 8006ec4:	1dfb      	adds	r3, r7, #7
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	0019      	movs	r1, r3
 8006eca:	230f      	movs	r3, #15
 8006ecc:	400b      	ands	r3, r1
 8006ece:	3b08      	subs	r3, #8
 8006ed0:	089b      	lsrs	r3, r3, #2
 8006ed2:	3306      	adds	r3, #6
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	18d3      	adds	r3, r2, r3
 8006ed8:	3304      	adds	r3, #4
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	1dfa      	adds	r2, r7, #7
 8006ede:	7812      	ldrb	r2, [r2, #0]
 8006ee0:	0011      	movs	r1, r2
 8006ee2:	2203      	movs	r2, #3
 8006ee4:	400a      	ands	r2, r1
 8006ee6:	00d2      	lsls	r2, r2, #3
 8006ee8:	21ff      	movs	r1, #255	; 0xff
 8006eea:	4091      	lsls	r1, r2
 8006eec:	000a      	movs	r2, r1
 8006eee:	43d2      	mvns	r2, r2
 8006ef0:	401a      	ands	r2, r3
 8006ef2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	019b      	lsls	r3, r3, #6
 8006ef8:	22ff      	movs	r2, #255	; 0xff
 8006efa:	401a      	ands	r2, r3
 8006efc:	1dfb      	adds	r3, r7, #7
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	0018      	movs	r0, r3
 8006f02:	2303      	movs	r3, #3
 8006f04:	4003      	ands	r3, r0
 8006f06:	00db      	lsls	r3, r3, #3
 8006f08:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006f0a:	481d      	ldr	r0, [pc, #116]	; (8006f80 <NVIC_SetPriority+0xd4>)
 8006f0c:	1dfb      	adds	r3, r7, #7
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	001c      	movs	r4, r3
 8006f12:	230f      	movs	r3, #15
 8006f14:	4023      	ands	r3, r4
 8006f16:	3b08      	subs	r3, #8
 8006f18:	089b      	lsrs	r3, r3, #2
 8006f1a:	430a      	orrs	r2, r1
 8006f1c:	3306      	adds	r3, #6
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	18c3      	adds	r3, r0, r3
 8006f22:	3304      	adds	r3, #4
 8006f24:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006f26:	e027      	b.n	8006f78 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006f28:	4a16      	ldr	r2, [pc, #88]	; (8006f84 <NVIC_SetPriority+0xd8>)
 8006f2a:	1dfb      	adds	r3, r7, #7
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	b25b      	sxtb	r3, r3
 8006f30:	089b      	lsrs	r3, r3, #2
 8006f32:	33c0      	adds	r3, #192	; 0xc0
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	589b      	ldr	r3, [r3, r2]
 8006f38:	1dfa      	adds	r2, r7, #7
 8006f3a:	7812      	ldrb	r2, [r2, #0]
 8006f3c:	0011      	movs	r1, r2
 8006f3e:	2203      	movs	r2, #3
 8006f40:	400a      	ands	r2, r1
 8006f42:	00d2      	lsls	r2, r2, #3
 8006f44:	21ff      	movs	r1, #255	; 0xff
 8006f46:	4091      	lsls	r1, r2
 8006f48:	000a      	movs	r2, r1
 8006f4a:	43d2      	mvns	r2, r2
 8006f4c:	401a      	ands	r2, r3
 8006f4e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	019b      	lsls	r3, r3, #6
 8006f54:	22ff      	movs	r2, #255	; 0xff
 8006f56:	401a      	ands	r2, r3
 8006f58:	1dfb      	adds	r3, r7, #7
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	0018      	movs	r0, r3
 8006f5e:	2303      	movs	r3, #3
 8006f60:	4003      	ands	r3, r0
 8006f62:	00db      	lsls	r3, r3, #3
 8006f64:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006f66:	4807      	ldr	r0, [pc, #28]	; (8006f84 <NVIC_SetPriority+0xd8>)
 8006f68:	1dfb      	adds	r3, r7, #7
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	b25b      	sxtb	r3, r3
 8006f6e:	089b      	lsrs	r3, r3, #2
 8006f70:	430a      	orrs	r2, r1
 8006f72:	33c0      	adds	r3, #192	; 0xc0
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	501a      	str	r2, [r3, r0]
}
 8006f78:	46c0      	nop			; (mov r8, r8)
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	b003      	add	sp, #12
 8006f7e:	bd90      	pop	{r4, r7, pc}
 8006f80:	e000ed00 	.word	0xe000ed00
 8006f84:	e000e100 	.word	0xe000e100

08006f88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	3b01      	subs	r3, #1
 8006f94:	4a0c      	ldr	r2, [pc, #48]	; (8006fc8 <SysTick_Config+0x40>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d901      	bls.n	8006f9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e010      	b.n	8006fc0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f9e:	4b0b      	ldr	r3, [pc, #44]	; (8006fcc <SysTick_Config+0x44>)
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	3a01      	subs	r2, #1
 8006fa4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	425b      	negs	r3, r3
 8006faa:	2103      	movs	r1, #3
 8006fac:	0018      	movs	r0, r3
 8006fae:	f7ff ff7d 	bl	8006eac <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006fb2:	4b06      	ldr	r3, [pc, #24]	; (8006fcc <SysTick_Config+0x44>)
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006fb8:	4b04      	ldr	r3, [pc, #16]	; (8006fcc <SysTick_Config+0x44>)
 8006fba:	2207      	movs	r2, #7
 8006fbc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	0018      	movs	r0, r3
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	b002      	add	sp, #8
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	00ffffff 	.word	0x00ffffff
 8006fcc:	e000e010 	.word	0xe000e010

08006fd0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60b9      	str	r1, [r7, #8]
 8006fd8:	607a      	str	r2, [r7, #4]
 8006fda:	210f      	movs	r1, #15
 8006fdc:	187b      	adds	r3, r7, r1
 8006fde:	1c02      	adds	r2, r0, #0
 8006fe0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	187b      	adds	r3, r7, r1
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	b25b      	sxtb	r3, r3
 8006fea:	0011      	movs	r1, r2
 8006fec:	0018      	movs	r0, r3
 8006fee:	f7ff ff5d 	bl	8006eac <NVIC_SetPriority>
}
 8006ff2:	46c0      	nop			; (mov r8, r8)
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	b004      	add	sp, #16
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	0002      	movs	r2, r0
 8007002:	1dfb      	adds	r3, r7, #7
 8007004:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007006:	1dfb      	adds	r3, r7, #7
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	b25b      	sxtb	r3, r3
 800700c:	0018      	movs	r0, r3
 800700e:	f7ff ff07 	bl	8006e20 <NVIC_EnableIRQ>
}
 8007012:	46c0      	nop			; (mov r8, r8)
 8007014:	46bd      	mov	sp, r7
 8007016:	b002      	add	sp, #8
 8007018:	bd80      	pop	{r7, pc}

0800701a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800701a:	b580      	push	{r7, lr}
 800701c:	b082      	sub	sp, #8
 800701e:	af00      	add	r7, sp, #0
 8007020:	0002      	movs	r2, r0
 8007022:	1dfb      	adds	r3, r7, #7
 8007024:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007026:	1dfb      	adds	r3, r7, #7
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	b25b      	sxtb	r3, r3
 800702c:	0018      	movs	r0, r3
 800702e:	f7ff ff0d 	bl	8006e4c <NVIC_DisableIRQ>
}
 8007032:	46c0      	nop			; (mov r8, r8)
 8007034:	46bd      	mov	sp, r7
 8007036:	b002      	add	sp, #8
 8007038:	bd80      	pop	{r7, pc}

0800703a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b082      	sub	sp, #8
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	0018      	movs	r0, r3
 8007046:	f7ff ff9f 	bl	8006f88 <SysTick_Config>
 800704a:	0003      	movs	r3, r0
}
 800704c:	0018      	movs	r0, r3
 800704e:	46bd      	mov	sp, r7
 8007050:	b002      	add	sp, #8
 8007052:	bd80      	pop	{r7, pc}

08007054 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	0002      	movs	r2, r0
 800705c:	1dfb      	adds	r3, r7, #7
 800705e:	701a      	strb	r2, [r3, #0]
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8007060:	1dfb      	adds	r3, r7, #7
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	b25b      	sxtb	r3, r3
 8007066:	0018      	movs	r0, r3
 8007068:	f7ff ff08 	bl	8006e7c <NVIC_ClearPendingIRQ>
}
 800706c:	46c0      	nop			; (mov r8, r8)
 800706e:	46bd      	mov	sp, r7
 8007070:	b002      	add	sp, #8
 8007072:	bd80      	pop	{r7, pc}

08007074 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e061      	b.n	800714a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a32      	ldr	r2, [pc, #200]	; (8007154 <HAL_DMA_Init+0xe0>)
 800708c:	4694      	mov	ip, r2
 800708e:	4463      	add	r3, ip
 8007090:	2114      	movs	r1, #20
 8007092:	0018      	movs	r0, r3
 8007094:	f7f9 f840 	bl	8000118 <__udivsi3>
 8007098:	0003      	movs	r3, r0
 800709a:	009a      	lsls	r2, r3, #2
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a2d      	ldr	r2, [pc, #180]	; (8007158 <HAL_DMA_Init+0xe4>)
 80070a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2225      	movs	r2, #37	; 0x25
 80070aa:	2102      	movs	r1, #2
 80070ac:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	4a28      	ldr	r2, [pc, #160]	; (800715c <HAL_DMA_Init+0xe8>)
 80070ba:	4013      	ands	r3, r2
 80070bc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80070c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a1b      	ldr	r3, [r3, #32]
 80070e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	689a      	ldr	r2, [r3, #8]
 80070f8:	2380      	movs	r3, #128	; 0x80
 80070fa:	01db      	lsls	r3, r3, #7
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d018      	beq.n	8007132 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007100:	4b17      	ldr	r3, [pc, #92]	; (8007160 <HAL_DMA_Init+0xec>)
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007108:	211c      	movs	r1, #28
 800710a:	400b      	ands	r3, r1
 800710c:	210f      	movs	r1, #15
 800710e:	4099      	lsls	r1, r3
 8007110:	000b      	movs	r3, r1
 8007112:	43d9      	mvns	r1, r3
 8007114:	4b12      	ldr	r3, [pc, #72]	; (8007160 <HAL_DMA_Init+0xec>)
 8007116:	400a      	ands	r2, r1
 8007118:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800711a:	4b11      	ldr	r3, [pc, #68]	; (8007160 <HAL_DMA_Init+0xec>)
 800711c:	6819      	ldr	r1, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	685a      	ldr	r2, [r3, #4]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007126:	201c      	movs	r0, #28
 8007128:	4003      	ands	r3, r0
 800712a:	409a      	lsls	r2, r3
 800712c:	4b0c      	ldr	r3, [pc, #48]	; (8007160 <HAL_DMA_Init+0xec>)
 800712e:	430a      	orrs	r2, r1
 8007130:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2225      	movs	r2, #37	; 0x25
 800713c:	2101      	movs	r1, #1
 800713e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2224      	movs	r2, #36	; 0x24
 8007144:	2100      	movs	r1, #0
 8007146:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	0018      	movs	r0, r3
 800714c:	46bd      	mov	sp, r7
 800714e:	b004      	add	sp, #16
 8007150:	bd80      	pop	{r7, pc}
 8007152:	46c0      	nop			; (mov r8, r8)
 8007154:	bffdfff8 	.word	0xbffdfff8
 8007158:	40020000 	.word	0x40020000
 800715c:	ffff800f 	.word	0xffff800f
 8007160:	400200a8 	.word	0x400200a8

08007164 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800716c:	230f      	movs	r3, #15
 800716e:	18fb      	adds	r3, r7, r3
 8007170:	2200      	movs	r2, #0
 8007172:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2225      	movs	r2, #37	; 0x25
 8007178:	5c9b      	ldrb	r3, [r3, r2]
 800717a:	b2db      	uxtb	r3, r3
 800717c:	2b02      	cmp	r3, #2
 800717e:	d007      	beq.n	8007190 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2204      	movs	r2, #4
 8007184:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007186:	230f      	movs	r3, #15
 8007188:	18fb      	adds	r3, r7, r3
 800718a:	2201      	movs	r2, #1
 800718c:	701a      	strb	r2, [r3, #0]
 800718e:	e02a      	b.n	80071e6 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	210e      	movs	r1, #14
 800719c:	438a      	bics	r2, r1
 800719e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2101      	movs	r1, #1
 80071ac:	438a      	bics	r2, r1
 80071ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b4:	221c      	movs	r2, #28
 80071b6:	401a      	ands	r2, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071bc:	2101      	movs	r1, #1
 80071be:	4091      	lsls	r1, r2
 80071c0:	000a      	movs	r2, r1
 80071c2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2225      	movs	r2, #37	; 0x25
 80071c8:	2101      	movs	r1, #1
 80071ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2224      	movs	r2, #36	; 0x24
 80071d0:	2100      	movs	r1, #0
 80071d2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d004      	beq.n	80071e6 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	0010      	movs	r0, r2
 80071e4:	4798      	blx	r3
    }
  }
  return status;
 80071e6:	230f      	movs	r3, #15
 80071e8:	18fb      	adds	r3, r7, r3
 80071ea:	781b      	ldrb	r3, [r3, #0]
}
 80071ec:	0018      	movs	r0, r3
 80071ee:	46bd      	mov	sp, r7
 80071f0:	b004      	add	sp, #16
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007210:	221c      	movs	r2, #28
 8007212:	4013      	ands	r3, r2
 8007214:	2204      	movs	r2, #4
 8007216:	409a      	lsls	r2, r3
 8007218:	0013      	movs	r3, r2
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	4013      	ands	r3, r2
 800721e:	d026      	beq.n	800726e <HAL_DMA_IRQHandler+0x7a>
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	2204      	movs	r2, #4
 8007224:	4013      	ands	r3, r2
 8007226:	d022      	beq.n	800726e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2220      	movs	r2, #32
 8007230:	4013      	ands	r3, r2
 8007232:	d107      	bne.n	8007244 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2104      	movs	r1, #4
 8007240:	438a      	bics	r2, r1
 8007242:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007248:	221c      	movs	r2, #28
 800724a:	401a      	ands	r2, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007250:	2104      	movs	r1, #4
 8007252:	4091      	lsls	r1, r2
 8007254:	000a      	movs	r2, r1
 8007256:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725c:	2b00      	cmp	r3, #0
 800725e:	d100      	bne.n	8007262 <HAL_DMA_IRQHandler+0x6e>
 8007260:	e071      	b.n	8007346 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	0010      	movs	r0, r2
 800726a:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800726c:	e06b      	b.n	8007346 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007272:	221c      	movs	r2, #28
 8007274:	4013      	ands	r3, r2
 8007276:	2202      	movs	r2, #2
 8007278:	409a      	lsls	r2, r3
 800727a:	0013      	movs	r3, r2
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	4013      	ands	r3, r2
 8007280:	d02d      	beq.n	80072de <HAL_DMA_IRQHandler+0xea>
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	2202      	movs	r2, #2
 8007286:	4013      	ands	r3, r2
 8007288:	d029      	beq.n	80072de <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2220      	movs	r2, #32
 8007292:	4013      	ands	r3, r2
 8007294:	d10b      	bne.n	80072ae <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	210a      	movs	r1, #10
 80072a2:	438a      	bics	r2, r1
 80072a4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2225      	movs	r2, #37	; 0x25
 80072aa:	2101      	movs	r1, #1
 80072ac:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072b2:	221c      	movs	r2, #28
 80072b4:	401a      	ands	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ba:	2102      	movs	r1, #2
 80072bc:	4091      	lsls	r1, r2
 80072be:	000a      	movs	r2, r1
 80072c0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2224      	movs	r2, #36	; 0x24
 80072c6:	2100      	movs	r1, #0
 80072c8:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d039      	beq.n	8007346 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	0010      	movs	r0, r2
 80072da:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80072dc:	e033      	b.n	8007346 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e2:	221c      	movs	r2, #28
 80072e4:	4013      	ands	r3, r2
 80072e6:	2208      	movs	r2, #8
 80072e8:	409a      	lsls	r2, r3
 80072ea:	0013      	movs	r3, r2
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	4013      	ands	r3, r2
 80072f0:	d02a      	beq.n	8007348 <HAL_DMA_IRQHandler+0x154>
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	2208      	movs	r2, #8
 80072f6:	4013      	ands	r3, r2
 80072f8:	d026      	beq.n	8007348 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	210e      	movs	r1, #14
 8007306:	438a      	bics	r2, r1
 8007308:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800730e:	221c      	movs	r2, #28
 8007310:	401a      	ands	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007316:	2101      	movs	r1, #1
 8007318:	4091      	lsls	r1, r2
 800731a:	000a      	movs	r2, r1
 800731c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2201      	movs	r2, #1
 8007322:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2225      	movs	r2, #37	; 0x25
 8007328:	2101      	movs	r1, #1
 800732a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2224      	movs	r2, #36	; 0x24
 8007330:	2100      	movs	r1, #0
 8007332:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007338:	2b00      	cmp	r3, #0
 800733a:	d005      	beq.n	8007348 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	0010      	movs	r0, r2
 8007344:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007346:	46c0      	nop			; (mov r8, r8)
 8007348:	46c0      	nop			; (mov r8, r8)
}
 800734a:	46bd      	mov	sp, r7
 800734c:	b004      	add	sp, #16
 800734e:	bd80      	pop	{r7, pc}

08007350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800735a:	2300      	movs	r3, #0
 800735c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800735e:	2300      	movs	r3, #0
 8007360:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8007362:	2300      	movs	r3, #0
 8007364:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8007366:	e155      	b.n	8007614 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2101      	movs	r1, #1
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	4091      	lsls	r1, r2
 8007372:	000a      	movs	r2, r1
 8007374:	4013      	ands	r3, r2
 8007376:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d100      	bne.n	8007380 <HAL_GPIO_Init+0x30>
 800737e:	e146      	b.n	800760e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	2b02      	cmp	r3, #2
 8007386:	d003      	beq.n	8007390 <HAL_GPIO_Init+0x40>
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	2b12      	cmp	r3, #18
 800738e:	d123      	bne.n	80073d8 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	08da      	lsrs	r2, r3, #3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	3208      	adds	r2, #8
 8007398:	0092      	lsls	r2, r2, #2
 800739a:	58d3      	ldr	r3, [r2, r3]
 800739c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	2207      	movs	r2, #7
 80073a2:	4013      	ands	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	220f      	movs	r2, #15
 80073a8:	409a      	lsls	r2, r3
 80073aa:	0013      	movs	r3, r2
 80073ac:	43da      	mvns	r2, r3
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	4013      	ands	r3, r2
 80073b2:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	691a      	ldr	r2, [r3, #16]
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	2107      	movs	r1, #7
 80073bc:	400b      	ands	r3, r1
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	409a      	lsls	r2, r3
 80073c2:	0013      	movs	r3, r2
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	08da      	lsrs	r2, r3, #3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	3208      	adds	r2, #8
 80073d2:	0092      	lsls	r2, r2, #2
 80073d4:	6939      	ldr	r1, [r7, #16]
 80073d6:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d00b      	beq.n	80073f8 <HAL_GPIO_Init+0xa8>
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d007      	beq.n	80073f8 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80073ec:	2b11      	cmp	r3, #17
 80073ee:	d003      	beq.n	80073f8 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	2b12      	cmp	r3, #18
 80073f6:	d130      	bne.n	800745a <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	005b      	lsls	r3, r3, #1
 8007402:	2203      	movs	r2, #3
 8007404:	409a      	lsls	r2, r3
 8007406:	0013      	movs	r3, r2
 8007408:	43da      	mvns	r2, r3
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	4013      	ands	r3, r2
 800740e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	68da      	ldr	r2, [r3, #12]
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	005b      	lsls	r3, r3, #1
 8007418:	409a      	lsls	r2, r3
 800741a:	0013      	movs	r3, r2
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	4313      	orrs	r3, r2
 8007420:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	693a      	ldr	r2, [r7, #16]
 8007426:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800742e:	2201      	movs	r2, #1
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	409a      	lsls	r2, r3
 8007434:	0013      	movs	r3, r2
 8007436:	43da      	mvns	r2, r3
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	4013      	ands	r3, r2
 800743c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	091b      	lsrs	r3, r3, #4
 8007444:	2201      	movs	r2, #1
 8007446:	401a      	ands	r2, r3
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	409a      	lsls	r2, r3
 800744c:	0013      	movs	r3, r2
 800744e:	693a      	ldr	r2, [r7, #16]
 8007450:	4313      	orrs	r3, r2
 8007452:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	693a      	ldr	r2, [r7, #16]
 8007458:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	005b      	lsls	r3, r3, #1
 8007464:	2203      	movs	r2, #3
 8007466:	409a      	lsls	r2, r3
 8007468:	0013      	movs	r3, r2
 800746a:	43da      	mvns	r2, r3
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	4013      	ands	r3, r2
 8007470:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	2203      	movs	r2, #3
 8007478:	401a      	ands	r2, r3
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	005b      	lsls	r3, r3, #1
 800747e:	409a      	lsls	r2, r3
 8007480:	0013      	movs	r3, r2
 8007482:	693a      	ldr	r2, [r7, #16]
 8007484:	4313      	orrs	r3, r2
 8007486:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	005b      	lsls	r3, r3, #1
 8007498:	2203      	movs	r2, #3
 800749a:	409a      	lsls	r2, r3
 800749c:	0013      	movs	r3, r2
 800749e:	43da      	mvns	r2, r3
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	4013      	ands	r3, r2
 80074a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	689a      	ldr	r2, [r3, #8]
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	005b      	lsls	r3, r3, #1
 80074ae:	409a      	lsls	r2, r3
 80074b0:	0013      	movs	r3, r2
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	693a      	ldr	r2, [r7, #16]
 80074bc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	685a      	ldr	r2, [r3, #4]
 80074c2:	2380      	movs	r3, #128	; 0x80
 80074c4:	055b      	lsls	r3, r3, #21
 80074c6:	4013      	ands	r3, r2
 80074c8:	d100      	bne.n	80074cc <HAL_GPIO_Init+0x17c>
 80074ca:	e0a0      	b.n	800760e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80074cc:	4b57      	ldr	r3, [pc, #348]	; (800762c <HAL_GPIO_Init+0x2dc>)
 80074ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074d0:	4b56      	ldr	r3, [pc, #344]	; (800762c <HAL_GPIO_Init+0x2dc>)
 80074d2:	2101      	movs	r1, #1
 80074d4:	430a      	orrs	r2, r1
 80074d6:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80074d8:	4a55      	ldr	r2, [pc, #340]	; (8007630 <HAL_GPIO_Init+0x2e0>)
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	089b      	lsrs	r3, r3, #2
 80074de:	3302      	adds	r3, #2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	589b      	ldr	r3, [r3, r2]
 80074e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	2203      	movs	r2, #3
 80074ea:	4013      	ands	r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	220f      	movs	r2, #15
 80074f0:	409a      	lsls	r2, r3
 80074f2:	0013      	movs	r3, r2
 80074f4:	43da      	mvns	r2, r3
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	4013      	ands	r3, r2
 80074fa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	23a0      	movs	r3, #160	; 0xa0
 8007500:	05db      	lsls	r3, r3, #23
 8007502:	429a      	cmp	r2, r3
 8007504:	d01f      	beq.n	8007546 <HAL_GPIO_Init+0x1f6>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a4a      	ldr	r2, [pc, #296]	; (8007634 <HAL_GPIO_Init+0x2e4>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d019      	beq.n	8007542 <HAL_GPIO_Init+0x1f2>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a49      	ldr	r2, [pc, #292]	; (8007638 <HAL_GPIO_Init+0x2e8>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d013      	beq.n	800753e <HAL_GPIO_Init+0x1ee>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a48      	ldr	r2, [pc, #288]	; (800763c <HAL_GPIO_Init+0x2ec>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d00d      	beq.n	800753a <HAL_GPIO_Init+0x1ea>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a47      	ldr	r2, [pc, #284]	; (8007640 <HAL_GPIO_Init+0x2f0>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d007      	beq.n	8007536 <HAL_GPIO_Init+0x1e6>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a46      	ldr	r2, [pc, #280]	; (8007644 <HAL_GPIO_Init+0x2f4>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d101      	bne.n	8007532 <HAL_GPIO_Init+0x1e2>
 800752e:	2305      	movs	r3, #5
 8007530:	e00a      	b.n	8007548 <HAL_GPIO_Init+0x1f8>
 8007532:	2306      	movs	r3, #6
 8007534:	e008      	b.n	8007548 <HAL_GPIO_Init+0x1f8>
 8007536:	2304      	movs	r3, #4
 8007538:	e006      	b.n	8007548 <HAL_GPIO_Init+0x1f8>
 800753a:	2303      	movs	r3, #3
 800753c:	e004      	b.n	8007548 <HAL_GPIO_Init+0x1f8>
 800753e:	2302      	movs	r3, #2
 8007540:	e002      	b.n	8007548 <HAL_GPIO_Init+0x1f8>
 8007542:	2301      	movs	r3, #1
 8007544:	e000      	b.n	8007548 <HAL_GPIO_Init+0x1f8>
 8007546:	2300      	movs	r3, #0
 8007548:	697a      	ldr	r2, [r7, #20]
 800754a:	2103      	movs	r1, #3
 800754c:	400a      	ands	r2, r1
 800754e:	0092      	lsls	r2, r2, #2
 8007550:	4093      	lsls	r3, r2
 8007552:	693a      	ldr	r2, [r7, #16]
 8007554:	4313      	orrs	r3, r2
 8007556:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007558:	4935      	ldr	r1, [pc, #212]	; (8007630 <HAL_GPIO_Init+0x2e0>)
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	089b      	lsrs	r3, r3, #2
 800755e:	3302      	adds	r3, #2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007566:	4b38      	ldr	r3, [pc, #224]	; (8007648 <HAL_GPIO_Init+0x2f8>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	43da      	mvns	r2, r3
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	4013      	ands	r3, r2
 8007574:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	685a      	ldr	r2, [r3, #4]
 800757a:	2380      	movs	r3, #128	; 0x80
 800757c:	025b      	lsls	r3, r3, #9
 800757e:	4013      	ands	r3, r2
 8007580:	d003      	beq.n	800758a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8007582:	693a      	ldr	r2, [r7, #16]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	4313      	orrs	r3, r2
 8007588:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800758a:	4b2f      	ldr	r3, [pc, #188]	; (8007648 <HAL_GPIO_Init+0x2f8>)
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8007590:	4b2d      	ldr	r3, [pc, #180]	; (8007648 <HAL_GPIO_Init+0x2f8>)
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	43da      	mvns	r2, r3
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	4013      	ands	r3, r2
 800759e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	685a      	ldr	r2, [r3, #4]
 80075a4:	2380      	movs	r3, #128	; 0x80
 80075a6:	029b      	lsls	r3, r3, #10
 80075a8:	4013      	ands	r3, r2
 80075aa:	d003      	beq.n	80075b4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80075b4:	4b24      	ldr	r3, [pc, #144]	; (8007648 <HAL_GPIO_Init+0x2f8>)
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80075ba:	4b23      	ldr	r3, [pc, #140]	; (8007648 <HAL_GPIO_Init+0x2f8>)
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	43da      	mvns	r2, r3
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	4013      	ands	r3, r2
 80075c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	685a      	ldr	r2, [r3, #4]
 80075ce:	2380      	movs	r3, #128	; 0x80
 80075d0:	035b      	lsls	r3, r3, #13
 80075d2:	4013      	ands	r3, r2
 80075d4:	d003      	beq.n	80075de <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80075d6:	693a      	ldr	r2, [r7, #16]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	4313      	orrs	r3, r2
 80075dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80075de:	4b1a      	ldr	r3, [pc, #104]	; (8007648 <HAL_GPIO_Init+0x2f8>)
 80075e0:	693a      	ldr	r2, [r7, #16]
 80075e2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80075e4:	4b18      	ldr	r3, [pc, #96]	; (8007648 <HAL_GPIO_Init+0x2f8>)
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	43da      	mvns	r2, r3
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	4013      	ands	r3, r2
 80075f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	685a      	ldr	r2, [r3, #4]
 80075f8:	2380      	movs	r3, #128	; 0x80
 80075fa:	039b      	lsls	r3, r3, #14
 80075fc:	4013      	ands	r3, r2
 80075fe:	d003      	beq.n	8007608 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	4313      	orrs	r3, r2
 8007606:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007608:	4b0f      	ldr	r3, [pc, #60]	; (8007648 <HAL_GPIO_Init+0x2f8>)
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	3301      	adds	r3, #1
 8007612:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	40da      	lsrs	r2, r3
 800761c:	1e13      	subs	r3, r2, #0
 800761e:	d000      	beq.n	8007622 <HAL_GPIO_Init+0x2d2>
 8007620:	e6a2      	b.n	8007368 <HAL_GPIO_Init+0x18>
  }
}
 8007622:	46c0      	nop			; (mov r8, r8)
 8007624:	46bd      	mov	sp, r7
 8007626:	b006      	add	sp, #24
 8007628:	bd80      	pop	{r7, pc}
 800762a:	46c0      	nop			; (mov r8, r8)
 800762c:	40021000 	.word	0x40021000
 8007630:	40010000 	.word	0x40010000
 8007634:	50000400 	.word	0x50000400
 8007638:	50000800 	.word	0x50000800
 800763c:	50000c00 	.word	0x50000c00
 8007640:	50001000 	.word	0x50001000
 8007644:	50001c00 	.word	0x50001c00
 8007648:	40010400 	.word	0x40010400

0800764c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	000a      	movs	r2, r1
 8007656:	1cbb      	adds	r3, r7, #2
 8007658:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	1cba      	adds	r2, r7, #2
 8007660:	8812      	ldrh	r2, [r2, #0]
 8007662:	4013      	ands	r3, r2
 8007664:	d004      	beq.n	8007670 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8007666:	230f      	movs	r3, #15
 8007668:	18fb      	adds	r3, r7, r3
 800766a:	2201      	movs	r2, #1
 800766c:	701a      	strb	r2, [r3, #0]
 800766e:	e003      	b.n	8007678 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007670:	230f      	movs	r3, #15
 8007672:	18fb      	adds	r3, r7, r3
 8007674:	2200      	movs	r2, #0
 8007676:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8007678:	230f      	movs	r3, #15
 800767a:	18fb      	adds	r3, r7, r3
 800767c:	781b      	ldrb	r3, [r3, #0]
}
 800767e:	0018      	movs	r0, r3
 8007680:	46bd      	mov	sp, r7
 8007682:	b004      	add	sp, #16
 8007684:	bd80      	pop	{r7, pc}

08007686 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b082      	sub	sp, #8
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	0008      	movs	r0, r1
 8007690:	0011      	movs	r1, r2
 8007692:	1cbb      	adds	r3, r7, #2
 8007694:	1c02      	adds	r2, r0, #0
 8007696:	801a      	strh	r2, [r3, #0]
 8007698:	1c7b      	adds	r3, r7, #1
 800769a:	1c0a      	adds	r2, r1, #0
 800769c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 800769e:	1c7b      	adds	r3, r7, #1
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d004      	beq.n	80076b0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80076a6:	1cbb      	adds	r3, r7, #2
 80076a8:	881a      	ldrh	r2, [r3, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80076ae:	e003      	b.n	80076b8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80076b0:	1cbb      	adds	r3, r7, #2
 80076b2:	881a      	ldrh	r2, [r3, #0]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80076b8:	46c0      	nop			; (mov r8, r8)
 80076ba:	46bd      	mov	sp, r7
 80076bc:	b002      	add	sp, #8
 80076be:	bd80      	pop	{r7, pc}

080076c0 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	000a      	movs	r2, r1
 80076ca:	1cbb      	adds	r3, r7, #2
 80076cc:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	695a      	ldr	r2, [r3, #20]
 80076d2:	1cbb      	adds	r3, r7, #2
 80076d4:	881b      	ldrh	r3, [r3, #0]
 80076d6:	405a      	eors	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	615a      	str	r2, [r3, #20]
}
 80076dc:	46c0      	nop			; (mov r8, r8)
 80076de:	46bd      	mov	sp, r7
 80076e0:	b002      	add	sp, #8
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	0002      	movs	r2, r0
 80076ec:	1dbb      	adds	r3, r7, #6
 80076ee:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80076f0:	4b09      	ldr	r3, [pc, #36]	; (8007718 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80076f2:	695b      	ldr	r3, [r3, #20]
 80076f4:	1dba      	adds	r2, r7, #6
 80076f6:	8812      	ldrh	r2, [r2, #0]
 80076f8:	4013      	ands	r3, r2
 80076fa:	d008      	beq.n	800770e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80076fc:	4b06      	ldr	r3, [pc, #24]	; (8007718 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80076fe:	1dba      	adds	r2, r7, #6
 8007700:	8812      	ldrh	r2, [r2, #0]
 8007702:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007704:	1dbb      	adds	r3, r7, #6
 8007706:	881b      	ldrh	r3, [r3, #0]
 8007708:	0018      	movs	r0, r3
 800770a:	f7fd f94b 	bl	80049a4 <HAL_GPIO_EXTI_Callback>
  }
}
 800770e:	46c0      	nop			; (mov r8, r8)
 8007710:	46bd      	mov	sp, r7
 8007712:	b002      	add	sp, #8
 8007714:	bd80      	pop	{r7, pc}
 8007716:	46c0      	nop			; (mov r8, r8)
 8007718:	40010400 	.word	0x40010400

0800771c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d101      	bne.n	800772e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e06c      	b.n	8007808 <HAL_LPTIM_Init+0xec>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	222e      	movs	r2, #46	; 0x2e
 8007732:	5c9b      	ldrb	r3, [r3, r2]
 8007734:	b2db      	uxtb	r3, r3
 8007736:	2b00      	cmp	r3, #0
 8007738:	d107      	bne.n	800774a <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	222d      	movs	r2, #45	; 0x2d
 800773e:	2100      	movs	r1, #0
 8007740:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	0018      	movs	r0, r3
 8007746:	f7fc fc59 	bl	8003ffc <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	222e      	movs	r2, #46	; 0x2e
 800774e:	2102      	movs	r1, #2
 8007750:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d005      	beq.n	800776e <HAL_LPTIM_Init+0x52>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007766:	2380      	movs	r3, #128	; 0x80
 8007768:	041b      	lsls	r3, r3, #16
 800776a:	429a      	cmp	r2, r3
 800776c:	d103      	bne.n	8007776 <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	221e      	movs	r2, #30
 8007772:	4393      	bics	r3, r2
 8007774:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	4a25      	ldr	r2, [pc, #148]	; (8007810 <HAL_LPTIM_Init+0xf4>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d003      	beq.n	8007788 <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	4a24      	ldr	r2, [pc, #144]	; (8007814 <HAL_LPTIM_Init+0xf8>)
 8007784:	4013      	ands	r3, r2
 8007786:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	4a23      	ldr	r2, [pc, #140]	; (8007818 <HAL_LPTIM_Init+0xfc>)
 800778c:	4013      	ands	r3, r2
 800778e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007798:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800779e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80077a4:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80077aa:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d005      	beq.n	80077c6 <HAL_LPTIM_Init+0xaa>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077be:	2380      	movs	r3, #128	; 0x80
 80077c0:	041b      	lsls	r3, r3, #16
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d107      	bne.n	80077d6 <HAL_LPTIM_Init+0xba>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80077ce:	4313      	orrs	r3, r2
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	695b      	ldr	r3, [r3, #20]
 80077da:	4a0d      	ldr	r2, [pc, #52]	; (8007810 <HAL_LPTIM_Init+0xf4>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d00a      	beq.n	80077f6 <HAL_LPTIM_Init+0xda>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80077e8:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80077ee:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	222e      	movs	r2, #46	; 0x2e
 8007802:	2101      	movs	r1, #1
 8007804:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	0018      	movs	r0, r3
 800780a:	46bd      	mov	sp, r7
 800780c:	b004      	add	sp, #16
 800780e:	bd80      	pop	{r7, pc}
 8007810:	0000ffff 	.word	0x0000ffff
 8007814:	ffff1f3f 	.word	0xffff1f3f
 8007818:	ff19f1f8 	.word	0xff19f1f8

0800781c <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2201      	movs	r2, #1
 800782c:	4013      	ands	r3, r2
 800782e:	2b01      	cmp	r3, #1
 8007830:	d10e      	bne.n	8007850 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	2201      	movs	r2, #1
 800783a:	4013      	ands	r3, r2
 800783c:	2b01      	cmp	r3, #1
 800783e:	d107      	bne.n	8007850 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2201      	movs	r2, #1
 8007846:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	0018      	movs	r0, r3
 800784c:	f000 f888 	bl	8007960 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2202      	movs	r2, #2
 8007858:	4013      	ands	r3, r2
 800785a:	2b02      	cmp	r3, #2
 800785c:	d10e      	bne.n	800787c <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	2202      	movs	r2, #2
 8007866:	4013      	ands	r3, r2
 8007868:	2b02      	cmp	r3, #2
 800786a:	d107      	bne.n	800787c <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2202      	movs	r2, #2
 8007872:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	0018      	movs	r0, r3
 8007878:	f000 f87a 	bl	8007970 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2204      	movs	r2, #4
 8007884:	4013      	ands	r3, r2
 8007886:	2b04      	cmp	r3, #4
 8007888:	d10e      	bne.n	80078a8 <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	2204      	movs	r2, #4
 8007892:	4013      	ands	r3, r2
 8007894:	2b04      	cmp	r3, #4
 8007896:	d107      	bne.n	80078a8 <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2204      	movs	r2, #4
 800789e:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	0018      	movs	r0, r3
 80078a4:	f000 f86c 	bl	8007980 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2208      	movs	r2, #8
 80078b0:	4013      	ands	r3, r2
 80078b2:	2b08      	cmp	r3, #8
 80078b4:	d10e      	bne.n	80078d4 <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	2208      	movs	r2, #8
 80078be:	4013      	ands	r3, r2
 80078c0:	2b08      	cmp	r3, #8
 80078c2:	d107      	bne.n	80078d4 <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2208      	movs	r2, #8
 80078ca:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	0018      	movs	r0, r3
 80078d0:	f000 f85e 	bl	8007990 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2210      	movs	r2, #16
 80078dc:	4013      	ands	r3, r2
 80078de:	2b10      	cmp	r3, #16
 80078e0:	d10e      	bne.n	8007900 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	2210      	movs	r2, #16
 80078ea:	4013      	ands	r3, r2
 80078ec:	2b10      	cmp	r3, #16
 80078ee:	d107      	bne.n	8007900 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2210      	movs	r2, #16
 80078f6:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	0018      	movs	r0, r3
 80078fc:	f000 f850 	bl	80079a0 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2220      	movs	r2, #32
 8007908:	4013      	ands	r3, r2
 800790a:	2b20      	cmp	r3, #32
 800790c:	d10e      	bne.n	800792c <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	2220      	movs	r2, #32
 8007916:	4013      	ands	r3, r2
 8007918:	2b20      	cmp	r3, #32
 800791a:	d107      	bne.n	800792c <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2220      	movs	r2, #32
 8007922:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	0018      	movs	r0, r3
 8007928:	f000 f842 	bl	80079b0 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2240      	movs	r2, #64	; 0x40
 8007934:	4013      	ands	r3, r2
 8007936:	2b40      	cmp	r3, #64	; 0x40
 8007938:	d10e      	bne.n	8007958 <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	2240      	movs	r2, #64	; 0x40
 8007942:	4013      	ands	r3, r2
 8007944:	2b40      	cmp	r3, #64	; 0x40
 8007946:	d107      	bne.n	8007958 <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2240      	movs	r2, #64	; 0x40
 800794e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	0018      	movs	r0, r3
 8007954:	f000 f834 	bl	80079c0 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8007958:	46c0      	nop			; (mov r8, r8)
 800795a:	46bd      	mov	sp, r7
 800795c:	b002      	add	sp, #8
 800795e:	bd80      	pop	{r7, pc}

08007960 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8007968:	46c0      	nop			; (mov r8, r8)
 800796a:	46bd      	mov	sp, r7
 800796c:	b002      	add	sp, #8
 800796e:	bd80      	pop	{r7, pc}

08007970 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8007978:	46c0      	nop			; (mov r8, r8)
 800797a:	46bd      	mov	sp, r7
 800797c:	b002      	add	sp, #8
 800797e:	bd80      	pop	{r7, pc}

08007980 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8007988:	46c0      	nop			; (mov r8, r8)
 800798a:	46bd      	mov	sp, r7
 800798c:	b002      	add	sp, #8
 800798e:	bd80      	pop	{r7, pc}

08007990 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8007998:	46c0      	nop			; (mov r8, r8)
 800799a:	46bd      	mov	sp, r7
 800799c:	b002      	add	sp, #8
 800799e:	bd80      	pop	{r7, pc}

080079a0 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80079a8:	46c0      	nop			; (mov r8, r8)
 80079aa:	46bd      	mov	sp, r7
 80079ac:	b002      	add	sp, #8
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 80079b8:	46c0      	nop			; (mov r8, r8)
 80079ba:	46bd      	mov	sp, r7
 80079bc:	b002      	add	sp, #8
 80079be:	bd80      	pop	{r7, pc}

080079c0 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80079c8:	46c0      	nop			; (mov r8, r8)
 80079ca:	46bd      	mov	sp, r7
 80079cc:	b002      	add	sp, #8
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80079d4:	4b04      	ldr	r3, [pc, #16]	; (80079e8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	4b03      	ldr	r3, [pc, #12]	; (80079e8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80079da:	2180      	movs	r1, #128	; 0x80
 80079dc:	0049      	lsls	r1, r1, #1
 80079de:	430a      	orrs	r2, r1
 80079e0:	601a      	str	r2, [r3, #0]
}
 80079e2:	46c0      	nop			; (mov r8, r8)
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	40007000 	.word	0x40007000

080079ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079ec:	b5b0      	push	{r4, r5, r7, lr}
 80079ee:	b08a      	sub	sp, #40	; 0x28
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d102      	bne.n	8007a00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	f000 fbbc 	bl	8008178 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a00:	4bc8      	ldr	r3, [pc, #800]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	220c      	movs	r2, #12
 8007a06:	4013      	ands	r3, r2
 8007a08:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007a0a:	4bc6      	ldr	r3, [pc, #792]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007a0c:	68da      	ldr	r2, [r3, #12]
 8007a0e:	2380      	movs	r3, #128	; 0x80
 8007a10:	025b      	lsls	r3, r3, #9
 8007a12:	4013      	ands	r3, r2
 8007a14:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	d100      	bne.n	8007a22 <HAL_RCC_OscConfig+0x36>
 8007a20:	e07e      	b.n	8007b20 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	2b08      	cmp	r3, #8
 8007a26:	d007      	beq.n	8007a38 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	2b0c      	cmp	r3, #12
 8007a2c:	d112      	bne.n	8007a54 <HAL_RCC_OscConfig+0x68>
 8007a2e:	69ba      	ldr	r2, [r7, #24]
 8007a30:	2380      	movs	r3, #128	; 0x80
 8007a32:	025b      	lsls	r3, r3, #9
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d10d      	bne.n	8007a54 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a38:	4bba      	ldr	r3, [pc, #744]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	2380      	movs	r3, #128	; 0x80
 8007a3e:	029b      	lsls	r3, r3, #10
 8007a40:	4013      	ands	r3, r2
 8007a42:	d100      	bne.n	8007a46 <HAL_RCC_OscConfig+0x5a>
 8007a44:	e06b      	b.n	8007b1e <HAL_RCC_OscConfig+0x132>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d167      	bne.n	8007b1e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	f000 fb92 	bl	8008178 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	685a      	ldr	r2, [r3, #4]
 8007a58:	2380      	movs	r3, #128	; 0x80
 8007a5a:	025b      	lsls	r3, r3, #9
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d107      	bne.n	8007a70 <HAL_RCC_OscConfig+0x84>
 8007a60:	4bb0      	ldr	r3, [pc, #704]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	4baf      	ldr	r3, [pc, #700]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007a66:	2180      	movs	r1, #128	; 0x80
 8007a68:	0249      	lsls	r1, r1, #9
 8007a6a:	430a      	orrs	r2, r1
 8007a6c:	601a      	str	r2, [r3, #0]
 8007a6e:	e027      	b.n	8007ac0 <HAL_RCC_OscConfig+0xd4>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	685a      	ldr	r2, [r3, #4]
 8007a74:	23a0      	movs	r3, #160	; 0xa0
 8007a76:	02db      	lsls	r3, r3, #11
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d10e      	bne.n	8007a9a <HAL_RCC_OscConfig+0xae>
 8007a7c:	4ba9      	ldr	r3, [pc, #676]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	4ba8      	ldr	r3, [pc, #672]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007a82:	2180      	movs	r1, #128	; 0x80
 8007a84:	02c9      	lsls	r1, r1, #11
 8007a86:	430a      	orrs	r2, r1
 8007a88:	601a      	str	r2, [r3, #0]
 8007a8a:	4ba6      	ldr	r3, [pc, #664]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	4ba5      	ldr	r3, [pc, #660]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007a90:	2180      	movs	r1, #128	; 0x80
 8007a92:	0249      	lsls	r1, r1, #9
 8007a94:	430a      	orrs	r2, r1
 8007a96:	601a      	str	r2, [r3, #0]
 8007a98:	e012      	b.n	8007ac0 <HAL_RCC_OscConfig+0xd4>
 8007a9a:	4ba2      	ldr	r3, [pc, #648]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	4ba1      	ldr	r3, [pc, #644]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007aa0:	49a1      	ldr	r1, [pc, #644]	; (8007d28 <HAL_RCC_OscConfig+0x33c>)
 8007aa2:	400a      	ands	r2, r1
 8007aa4:	601a      	str	r2, [r3, #0]
 8007aa6:	4b9f      	ldr	r3, [pc, #636]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	2380      	movs	r3, #128	; 0x80
 8007aac:	025b      	lsls	r3, r3, #9
 8007aae:	4013      	ands	r3, r2
 8007ab0:	60fb      	str	r3, [r7, #12]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	4b9b      	ldr	r3, [pc, #620]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	4b9a      	ldr	r3, [pc, #616]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007aba:	499c      	ldr	r1, [pc, #624]	; (8007d2c <HAL_RCC_OscConfig+0x340>)
 8007abc:	400a      	ands	r2, r1
 8007abe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d015      	beq.n	8007af4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ac8:	f7fe fcf6 	bl	80064b8 <HAL_GetTick>
 8007acc:	0003      	movs	r3, r0
 8007ace:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ad0:	e009      	b.n	8007ae6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ad2:	f7fe fcf1 	bl	80064b8 <HAL_GetTick>
 8007ad6:	0002      	movs	r2, r0
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	1ad3      	subs	r3, r2, r3
 8007adc:	2b64      	cmp	r3, #100	; 0x64
 8007ade:	d902      	bls.n	8007ae6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007ae0:	2303      	movs	r3, #3
 8007ae2:	f000 fb49 	bl	8008178 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ae6:	4b8f      	ldr	r3, [pc, #572]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	2380      	movs	r3, #128	; 0x80
 8007aec:	029b      	lsls	r3, r3, #10
 8007aee:	4013      	ands	r3, r2
 8007af0:	d0ef      	beq.n	8007ad2 <HAL_RCC_OscConfig+0xe6>
 8007af2:	e015      	b.n	8007b20 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007af4:	f7fe fce0 	bl	80064b8 <HAL_GetTick>
 8007af8:	0003      	movs	r3, r0
 8007afa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007afc:	e008      	b.n	8007b10 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007afe:	f7fe fcdb 	bl	80064b8 <HAL_GetTick>
 8007b02:	0002      	movs	r2, r0
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	1ad3      	subs	r3, r2, r3
 8007b08:	2b64      	cmp	r3, #100	; 0x64
 8007b0a:	d901      	bls.n	8007b10 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8007b0c:	2303      	movs	r3, #3
 8007b0e:	e333      	b.n	8008178 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007b10:	4b84      	ldr	r3, [pc, #528]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	2380      	movs	r3, #128	; 0x80
 8007b16:	029b      	lsls	r3, r3, #10
 8007b18:	4013      	ands	r3, r2
 8007b1a:	d1f0      	bne.n	8007afe <HAL_RCC_OscConfig+0x112>
 8007b1c:	e000      	b.n	8007b20 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b1e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2202      	movs	r2, #2
 8007b26:	4013      	ands	r3, r2
 8007b28:	d100      	bne.n	8007b2c <HAL_RCC_OscConfig+0x140>
 8007b2a:	e098      	b.n	8007c5e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8007b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b34:	2220      	movs	r2, #32
 8007b36:	4013      	ands	r3, r2
 8007b38:	d009      	beq.n	8007b4e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8007b3a:	4b7a      	ldr	r3, [pc, #488]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	4b79      	ldr	r3, [pc, #484]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007b40:	2120      	movs	r1, #32
 8007b42:	430a      	orrs	r2, r1
 8007b44:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8007b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b48:	2220      	movs	r2, #32
 8007b4a:	4393      	bics	r3, r2
 8007b4c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	2b04      	cmp	r3, #4
 8007b52:	d005      	beq.n	8007b60 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	2b0c      	cmp	r3, #12
 8007b58:	d13d      	bne.n	8007bd6 <HAL_RCC_OscConfig+0x1ea>
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d13a      	bne.n	8007bd6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8007b60:	4b70      	ldr	r3, [pc, #448]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	2204      	movs	r2, #4
 8007b66:	4013      	ands	r3, r2
 8007b68:	d004      	beq.n	8007b74 <HAL_RCC_OscConfig+0x188>
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d101      	bne.n	8007b74 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e301      	b.n	8008178 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b74:	4b6b      	ldr	r3, [pc, #428]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	4a6d      	ldr	r2, [pc, #436]	; (8007d30 <HAL_RCC_OscConfig+0x344>)
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	0019      	movs	r1, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	021a      	lsls	r2, r3, #8
 8007b84:	4b67      	ldr	r3, [pc, #412]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007b86:	430a      	orrs	r2, r1
 8007b88:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8007b8a:	4b66      	ldr	r3, [pc, #408]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2209      	movs	r2, #9
 8007b90:	4393      	bics	r3, r2
 8007b92:	0019      	movs	r1, r3
 8007b94:	4b63      	ldr	r3, [pc, #396]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b98:	430a      	orrs	r2, r1
 8007b9a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007b9c:	f000 fc20 	bl	80083e0 <HAL_RCC_GetSysClockFreq>
 8007ba0:	0001      	movs	r1, r0
 8007ba2:	4b60      	ldr	r3, [pc, #384]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	091b      	lsrs	r3, r3, #4
 8007ba8:	220f      	movs	r2, #15
 8007baa:	4013      	ands	r3, r2
 8007bac:	4a61      	ldr	r2, [pc, #388]	; (8007d34 <HAL_RCC_OscConfig+0x348>)
 8007bae:	5cd3      	ldrb	r3, [r2, r3]
 8007bb0:	000a      	movs	r2, r1
 8007bb2:	40da      	lsrs	r2, r3
 8007bb4:	4b60      	ldr	r3, [pc, #384]	; (8007d38 <HAL_RCC_OscConfig+0x34c>)
 8007bb6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8007bb8:	2513      	movs	r5, #19
 8007bba:	197c      	adds	r4, r7, r5
 8007bbc:	2000      	movs	r0, #0
 8007bbe:	f7fe fc45 	bl	800644c <HAL_InitTick>
 8007bc2:	0003      	movs	r3, r0
 8007bc4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8007bc6:	197b      	adds	r3, r7, r5
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d047      	beq.n	8007c5e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8007bce:	2313      	movs	r3, #19
 8007bd0:	18fb      	adds	r3, r7, r3
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	e2d0      	b.n	8008178 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8007bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d027      	beq.n	8007c2c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8007bdc:	4b51      	ldr	r3, [pc, #324]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2209      	movs	r2, #9
 8007be2:	4393      	bics	r3, r2
 8007be4:	0019      	movs	r1, r3
 8007be6:	4b4f      	ldr	r3, [pc, #316]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bea:	430a      	orrs	r2, r1
 8007bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bee:	f7fe fc63 	bl	80064b8 <HAL_GetTick>
 8007bf2:	0003      	movs	r3, r0
 8007bf4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007bf6:	e008      	b.n	8007c0a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007bf8:	f7fe fc5e 	bl	80064b8 <HAL_GetTick>
 8007bfc:	0002      	movs	r2, r0
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	1ad3      	subs	r3, r2, r3
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d901      	bls.n	8007c0a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	e2b6      	b.n	8008178 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c0a:	4b46      	ldr	r3, [pc, #280]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2204      	movs	r2, #4
 8007c10:	4013      	ands	r3, r2
 8007c12:	d0f1      	beq.n	8007bf8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c14:	4b43      	ldr	r3, [pc, #268]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	4a45      	ldr	r2, [pc, #276]	; (8007d30 <HAL_RCC_OscConfig+0x344>)
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	0019      	movs	r1, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	021a      	lsls	r2, r3, #8
 8007c24:	4b3f      	ldr	r3, [pc, #252]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007c26:	430a      	orrs	r2, r1
 8007c28:	605a      	str	r2, [r3, #4]
 8007c2a:	e018      	b.n	8007c5e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c2c:	4b3d      	ldr	r3, [pc, #244]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	4b3c      	ldr	r3, [pc, #240]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007c32:	2101      	movs	r1, #1
 8007c34:	438a      	bics	r2, r1
 8007c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c38:	f7fe fc3e 	bl	80064b8 <HAL_GetTick>
 8007c3c:	0003      	movs	r3, r0
 8007c3e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007c40:	e008      	b.n	8007c54 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c42:	f7fe fc39 	bl	80064b8 <HAL_GetTick>
 8007c46:	0002      	movs	r2, r0
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	d901      	bls.n	8007c54 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8007c50:	2303      	movs	r3, #3
 8007c52:	e291      	b.n	8008178 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007c54:	4b33      	ldr	r3, [pc, #204]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2204      	movs	r2, #4
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	d1f1      	bne.n	8007c42 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2210      	movs	r2, #16
 8007c64:	4013      	ands	r3, r2
 8007c66:	d100      	bne.n	8007c6a <HAL_RCC_OscConfig+0x27e>
 8007c68:	e09f      	b.n	8007daa <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d13f      	bne.n	8007cf0 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007c70:	4b2c      	ldr	r3, [pc, #176]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	2380      	movs	r3, #128	; 0x80
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	4013      	ands	r3, r2
 8007c7a:	d005      	beq.n	8007c88 <HAL_RCC_OscConfig+0x29c>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	69db      	ldr	r3, [r3, #28]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d101      	bne.n	8007c88 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	e277      	b.n	8008178 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007c88:	4b26      	ldr	r3, [pc, #152]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	4a2b      	ldr	r2, [pc, #172]	; (8007d3c <HAL_RCC_OscConfig+0x350>)
 8007c8e:	4013      	ands	r3, r2
 8007c90:	0019      	movs	r1, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c96:	4b23      	ldr	r3, [pc, #140]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007c98:	430a      	orrs	r2, r1
 8007c9a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007c9c:	4b21      	ldr	r3, [pc, #132]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	021b      	lsls	r3, r3, #8
 8007ca2:	0a19      	lsrs	r1, r3, #8
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6a1b      	ldr	r3, [r3, #32]
 8007ca8:	061a      	lsls	r2, r3, #24
 8007caa:	4b1e      	ldr	r3, [pc, #120]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007cac:	430a      	orrs	r2, r1
 8007cae:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb4:	0b5b      	lsrs	r3, r3, #13
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	2280      	movs	r2, #128	; 0x80
 8007cba:	0212      	lsls	r2, r2, #8
 8007cbc:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8007cbe:	4b19      	ldr	r3, [pc, #100]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	091b      	lsrs	r3, r3, #4
 8007cc4:	210f      	movs	r1, #15
 8007cc6:	400b      	ands	r3, r1
 8007cc8:	491a      	ldr	r1, [pc, #104]	; (8007d34 <HAL_RCC_OscConfig+0x348>)
 8007cca:	5ccb      	ldrb	r3, [r1, r3]
 8007ccc:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007cce:	4b1a      	ldr	r3, [pc, #104]	; (8007d38 <HAL_RCC_OscConfig+0x34c>)
 8007cd0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8007cd2:	2513      	movs	r5, #19
 8007cd4:	197c      	adds	r4, r7, r5
 8007cd6:	2000      	movs	r0, #0
 8007cd8:	f7fe fbb8 	bl	800644c <HAL_InitTick>
 8007cdc:	0003      	movs	r3, r0
 8007cde:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8007ce0:	197b      	adds	r3, r7, r5
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d060      	beq.n	8007daa <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8007ce8:	2313      	movs	r3, #19
 8007cea:	18fb      	adds	r3, r7, r3
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	e243      	b.n	8008178 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	69db      	ldr	r3, [r3, #28]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d03e      	beq.n	8007d76 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007cf8:	4b0a      	ldr	r3, [pc, #40]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	4b09      	ldr	r3, [pc, #36]	; (8007d24 <HAL_RCC_OscConfig+0x338>)
 8007cfe:	2180      	movs	r1, #128	; 0x80
 8007d00:	0049      	lsls	r1, r1, #1
 8007d02:	430a      	orrs	r2, r1
 8007d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d06:	f7fe fbd7 	bl	80064b8 <HAL_GetTick>
 8007d0a:	0003      	movs	r3, r0
 8007d0c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007d0e:	e017      	b.n	8007d40 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007d10:	f7fe fbd2 	bl	80064b8 <HAL_GetTick>
 8007d14:	0002      	movs	r2, r0
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	2b02      	cmp	r3, #2
 8007d1c:	d910      	bls.n	8007d40 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8007d1e:	2303      	movs	r3, #3
 8007d20:	e22a      	b.n	8008178 <HAL_RCC_OscConfig+0x78c>
 8007d22:	46c0      	nop			; (mov r8, r8)
 8007d24:	40021000 	.word	0x40021000
 8007d28:	fffeffff 	.word	0xfffeffff
 8007d2c:	fffbffff 	.word	0xfffbffff
 8007d30:	ffffe0ff 	.word	0xffffe0ff
 8007d34:	0800bf0c 	.word	0x0800bf0c
 8007d38:	20000010 	.word	0x20000010
 8007d3c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007d40:	4bc6      	ldr	r3, [pc, #792]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	2380      	movs	r3, #128	; 0x80
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	4013      	ands	r3, r2
 8007d4a:	d0e1      	beq.n	8007d10 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007d4c:	4bc3      	ldr	r3, [pc, #780]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	4ac3      	ldr	r2, [pc, #780]	; (8008060 <HAL_RCC_OscConfig+0x674>)
 8007d52:	4013      	ands	r3, r2
 8007d54:	0019      	movs	r1, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d5a:	4bc0      	ldr	r3, [pc, #768]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007d5c:	430a      	orrs	r2, r1
 8007d5e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007d60:	4bbe      	ldr	r3, [pc, #760]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	021b      	lsls	r3, r3, #8
 8007d66:	0a19      	lsrs	r1, r3, #8
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6a1b      	ldr	r3, [r3, #32]
 8007d6c:	061a      	lsls	r2, r3, #24
 8007d6e:	4bbb      	ldr	r3, [pc, #748]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007d70:	430a      	orrs	r2, r1
 8007d72:	605a      	str	r2, [r3, #4]
 8007d74:	e019      	b.n	8007daa <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007d76:	4bb9      	ldr	r3, [pc, #740]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	4bb8      	ldr	r3, [pc, #736]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007d7c:	49b9      	ldr	r1, [pc, #740]	; (8008064 <HAL_RCC_OscConfig+0x678>)
 8007d7e:	400a      	ands	r2, r1
 8007d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d82:	f7fe fb99 	bl	80064b8 <HAL_GetTick>
 8007d86:	0003      	movs	r3, r0
 8007d88:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007d8a:	e008      	b.n	8007d9e <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007d8c:	f7fe fb94 	bl	80064b8 <HAL_GetTick>
 8007d90:	0002      	movs	r2, r0
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	d901      	bls.n	8007d9e <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	e1ec      	b.n	8008178 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007d9e:	4baf      	ldr	r3, [pc, #700]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	2380      	movs	r3, #128	; 0x80
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4013      	ands	r3, r2
 8007da8:	d1f0      	bne.n	8007d8c <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2208      	movs	r2, #8
 8007db0:	4013      	ands	r3, r2
 8007db2:	d036      	beq.n	8007e22 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	695b      	ldr	r3, [r3, #20]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d019      	beq.n	8007df0 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007dbc:	4ba7      	ldr	r3, [pc, #668]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007dbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007dc0:	4ba6      	ldr	r3, [pc, #664]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007dc2:	2101      	movs	r1, #1
 8007dc4:	430a      	orrs	r2, r1
 8007dc6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007dc8:	f7fe fb76 	bl	80064b8 <HAL_GetTick>
 8007dcc:	0003      	movs	r3, r0
 8007dce:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007dd0:	e008      	b.n	8007de4 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007dd2:	f7fe fb71 	bl	80064b8 <HAL_GetTick>
 8007dd6:	0002      	movs	r2, r0
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	1ad3      	subs	r3, r2, r3
 8007ddc:	2b02      	cmp	r3, #2
 8007dde:	d901      	bls.n	8007de4 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8007de0:	2303      	movs	r3, #3
 8007de2:	e1c9      	b.n	8008178 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007de4:	4b9d      	ldr	r3, [pc, #628]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007de8:	2202      	movs	r2, #2
 8007dea:	4013      	ands	r3, r2
 8007dec:	d0f1      	beq.n	8007dd2 <HAL_RCC_OscConfig+0x3e6>
 8007dee:	e018      	b.n	8007e22 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007df0:	4b9a      	ldr	r3, [pc, #616]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007df2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007df4:	4b99      	ldr	r3, [pc, #612]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007df6:	2101      	movs	r1, #1
 8007df8:	438a      	bics	r2, r1
 8007dfa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007dfc:	f7fe fb5c 	bl	80064b8 <HAL_GetTick>
 8007e00:	0003      	movs	r3, r0
 8007e02:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007e04:	e008      	b.n	8007e18 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e06:	f7fe fb57 	bl	80064b8 <HAL_GetTick>
 8007e0a:	0002      	movs	r2, r0
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	1ad3      	subs	r3, r2, r3
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	d901      	bls.n	8007e18 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8007e14:	2303      	movs	r3, #3
 8007e16:	e1af      	b.n	8008178 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007e18:	4b90      	ldr	r3, [pc, #576]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e1c:	2202      	movs	r2, #2
 8007e1e:	4013      	ands	r3, r2
 8007e20:	d1f1      	bne.n	8007e06 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2204      	movs	r2, #4
 8007e28:	4013      	ands	r3, r2
 8007e2a:	d100      	bne.n	8007e2e <HAL_RCC_OscConfig+0x442>
 8007e2c:	e0af      	b.n	8007f8e <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e2e:	2323      	movs	r3, #35	; 0x23
 8007e30:	18fb      	adds	r3, r7, r3
 8007e32:	2200      	movs	r2, #0
 8007e34:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e36:	4b89      	ldr	r3, [pc, #548]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007e38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e3a:	2380      	movs	r3, #128	; 0x80
 8007e3c:	055b      	lsls	r3, r3, #21
 8007e3e:	4013      	ands	r3, r2
 8007e40:	d10a      	bne.n	8007e58 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e42:	4b86      	ldr	r3, [pc, #536]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007e44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e46:	4b85      	ldr	r3, [pc, #532]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007e48:	2180      	movs	r1, #128	; 0x80
 8007e4a:	0549      	lsls	r1, r1, #21
 8007e4c:	430a      	orrs	r2, r1
 8007e4e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8007e50:	2323      	movs	r3, #35	; 0x23
 8007e52:	18fb      	adds	r3, r7, r3
 8007e54:	2201      	movs	r2, #1
 8007e56:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e58:	4b83      	ldr	r3, [pc, #524]	; (8008068 <HAL_RCC_OscConfig+0x67c>)
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	2380      	movs	r3, #128	; 0x80
 8007e5e:	005b      	lsls	r3, r3, #1
 8007e60:	4013      	ands	r3, r2
 8007e62:	d11a      	bne.n	8007e9a <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e64:	4b80      	ldr	r3, [pc, #512]	; (8008068 <HAL_RCC_OscConfig+0x67c>)
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	4b7f      	ldr	r3, [pc, #508]	; (8008068 <HAL_RCC_OscConfig+0x67c>)
 8007e6a:	2180      	movs	r1, #128	; 0x80
 8007e6c:	0049      	lsls	r1, r1, #1
 8007e6e:	430a      	orrs	r2, r1
 8007e70:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e72:	f7fe fb21 	bl	80064b8 <HAL_GetTick>
 8007e76:	0003      	movs	r3, r0
 8007e78:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e7a:	e008      	b.n	8007e8e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e7c:	f7fe fb1c 	bl	80064b8 <HAL_GetTick>
 8007e80:	0002      	movs	r2, r0
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	1ad3      	subs	r3, r2, r3
 8007e86:	2b64      	cmp	r3, #100	; 0x64
 8007e88:	d901      	bls.n	8007e8e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	e174      	b.n	8008178 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e8e:	4b76      	ldr	r3, [pc, #472]	; (8008068 <HAL_RCC_OscConfig+0x67c>)
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	2380      	movs	r3, #128	; 0x80
 8007e94:	005b      	lsls	r3, r3, #1
 8007e96:	4013      	ands	r3, r2
 8007e98:	d0f0      	beq.n	8007e7c <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	689a      	ldr	r2, [r3, #8]
 8007e9e:	2380      	movs	r3, #128	; 0x80
 8007ea0:	005b      	lsls	r3, r3, #1
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d107      	bne.n	8007eb6 <HAL_RCC_OscConfig+0x4ca>
 8007ea6:	4b6d      	ldr	r3, [pc, #436]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007ea8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007eaa:	4b6c      	ldr	r3, [pc, #432]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007eac:	2180      	movs	r1, #128	; 0x80
 8007eae:	0049      	lsls	r1, r1, #1
 8007eb0:	430a      	orrs	r2, r1
 8007eb2:	651a      	str	r2, [r3, #80]	; 0x50
 8007eb4:	e031      	b.n	8007f1a <HAL_RCC_OscConfig+0x52e>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10c      	bne.n	8007ed8 <HAL_RCC_OscConfig+0x4ec>
 8007ebe:	4b67      	ldr	r3, [pc, #412]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007ec0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ec2:	4b66      	ldr	r3, [pc, #408]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007ec4:	4967      	ldr	r1, [pc, #412]	; (8008064 <HAL_RCC_OscConfig+0x678>)
 8007ec6:	400a      	ands	r2, r1
 8007ec8:	651a      	str	r2, [r3, #80]	; 0x50
 8007eca:	4b64      	ldr	r3, [pc, #400]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007ecc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ece:	4b63      	ldr	r3, [pc, #396]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007ed0:	4966      	ldr	r1, [pc, #408]	; (800806c <HAL_RCC_OscConfig+0x680>)
 8007ed2:	400a      	ands	r2, r1
 8007ed4:	651a      	str	r2, [r3, #80]	; 0x50
 8007ed6:	e020      	b.n	8007f1a <HAL_RCC_OscConfig+0x52e>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	689a      	ldr	r2, [r3, #8]
 8007edc:	23a0      	movs	r3, #160	; 0xa0
 8007ede:	00db      	lsls	r3, r3, #3
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d10e      	bne.n	8007f02 <HAL_RCC_OscConfig+0x516>
 8007ee4:	4b5d      	ldr	r3, [pc, #372]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007ee6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ee8:	4b5c      	ldr	r3, [pc, #368]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007eea:	2180      	movs	r1, #128	; 0x80
 8007eec:	00c9      	lsls	r1, r1, #3
 8007eee:	430a      	orrs	r2, r1
 8007ef0:	651a      	str	r2, [r3, #80]	; 0x50
 8007ef2:	4b5a      	ldr	r3, [pc, #360]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007ef4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ef6:	4b59      	ldr	r3, [pc, #356]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007ef8:	2180      	movs	r1, #128	; 0x80
 8007efa:	0049      	lsls	r1, r1, #1
 8007efc:	430a      	orrs	r2, r1
 8007efe:	651a      	str	r2, [r3, #80]	; 0x50
 8007f00:	e00b      	b.n	8007f1a <HAL_RCC_OscConfig+0x52e>
 8007f02:	4b56      	ldr	r3, [pc, #344]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007f04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f06:	4b55      	ldr	r3, [pc, #340]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007f08:	4956      	ldr	r1, [pc, #344]	; (8008064 <HAL_RCC_OscConfig+0x678>)
 8007f0a:	400a      	ands	r2, r1
 8007f0c:	651a      	str	r2, [r3, #80]	; 0x50
 8007f0e:	4b53      	ldr	r3, [pc, #332]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007f10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f12:	4b52      	ldr	r3, [pc, #328]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007f14:	4955      	ldr	r1, [pc, #340]	; (800806c <HAL_RCC_OscConfig+0x680>)
 8007f16:	400a      	ands	r2, r1
 8007f18:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d015      	beq.n	8007f4e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f22:	f7fe fac9 	bl	80064b8 <HAL_GetTick>
 8007f26:	0003      	movs	r3, r0
 8007f28:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f2a:	e009      	b.n	8007f40 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f2c:	f7fe fac4 	bl	80064b8 <HAL_GetTick>
 8007f30:	0002      	movs	r2, r0
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	1ad3      	subs	r3, r2, r3
 8007f36:	4a4e      	ldr	r2, [pc, #312]	; (8008070 <HAL_RCC_OscConfig+0x684>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d901      	bls.n	8007f40 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	e11b      	b.n	8008178 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f40:	4b46      	ldr	r3, [pc, #280]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007f42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f44:	2380      	movs	r3, #128	; 0x80
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	4013      	ands	r3, r2
 8007f4a:	d0ef      	beq.n	8007f2c <HAL_RCC_OscConfig+0x540>
 8007f4c:	e014      	b.n	8007f78 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f4e:	f7fe fab3 	bl	80064b8 <HAL_GetTick>
 8007f52:	0003      	movs	r3, r0
 8007f54:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007f56:	e009      	b.n	8007f6c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f58:	f7fe faae 	bl	80064b8 <HAL_GetTick>
 8007f5c:	0002      	movs	r2, r0
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	4a43      	ldr	r2, [pc, #268]	; (8008070 <HAL_RCC_OscConfig+0x684>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d901      	bls.n	8007f6c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	e105      	b.n	8008178 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007f6c:	4b3b      	ldr	r3, [pc, #236]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007f6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f70:	2380      	movs	r3, #128	; 0x80
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	4013      	ands	r3, r2
 8007f76:	d1ef      	bne.n	8007f58 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007f78:	2323      	movs	r3, #35	; 0x23
 8007f7a:	18fb      	adds	r3, r7, r3
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d105      	bne.n	8007f8e <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f82:	4b36      	ldr	r3, [pc, #216]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f86:	4b35      	ldr	r3, [pc, #212]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007f88:	493a      	ldr	r1, [pc, #232]	; (8008074 <HAL_RCC_OscConfig+0x688>)
 8007f8a:	400a      	ands	r2, r1
 8007f8c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2220      	movs	r2, #32
 8007f94:	4013      	ands	r3, r2
 8007f96:	d049      	beq.n	800802c <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	699b      	ldr	r3, [r3, #24]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d026      	beq.n	8007fee <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8007fa0:	4b2e      	ldr	r3, [pc, #184]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007fa2:	689a      	ldr	r2, [r3, #8]
 8007fa4:	4b2d      	ldr	r3, [pc, #180]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007fa6:	2101      	movs	r1, #1
 8007fa8:	430a      	orrs	r2, r1
 8007faa:	609a      	str	r2, [r3, #8]
 8007fac:	4b2b      	ldr	r3, [pc, #172]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007fae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fb0:	4b2a      	ldr	r3, [pc, #168]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007fb2:	2101      	movs	r1, #1
 8007fb4:	430a      	orrs	r2, r1
 8007fb6:	635a      	str	r2, [r3, #52]	; 0x34
 8007fb8:	4b2f      	ldr	r3, [pc, #188]	; (8008078 <HAL_RCC_OscConfig+0x68c>)
 8007fba:	6a1a      	ldr	r2, [r3, #32]
 8007fbc:	4b2e      	ldr	r3, [pc, #184]	; (8008078 <HAL_RCC_OscConfig+0x68c>)
 8007fbe:	2180      	movs	r1, #128	; 0x80
 8007fc0:	0189      	lsls	r1, r1, #6
 8007fc2:	430a      	orrs	r2, r1
 8007fc4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fc6:	f7fe fa77 	bl	80064b8 <HAL_GetTick>
 8007fca:	0003      	movs	r3, r0
 8007fcc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007fce:	e008      	b.n	8007fe2 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007fd0:	f7fe fa72 	bl	80064b8 <HAL_GetTick>
 8007fd4:	0002      	movs	r2, r0
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	1ad3      	subs	r3, r2, r3
 8007fda:	2b02      	cmp	r3, #2
 8007fdc:	d901      	bls.n	8007fe2 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8007fde:	2303      	movs	r3, #3
 8007fe0:	e0ca      	b.n	8008178 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007fe2:	4b1e      	ldr	r3, [pc, #120]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	2202      	movs	r2, #2
 8007fe8:	4013      	ands	r3, r2
 8007fea:	d0f1      	beq.n	8007fd0 <HAL_RCC_OscConfig+0x5e4>
 8007fec:	e01e      	b.n	800802c <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8007fee:	4b1b      	ldr	r3, [pc, #108]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007ff0:	689a      	ldr	r2, [r3, #8]
 8007ff2:	4b1a      	ldr	r3, [pc, #104]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8007ff4:	2101      	movs	r1, #1
 8007ff6:	438a      	bics	r2, r1
 8007ff8:	609a      	str	r2, [r3, #8]
 8007ffa:	4b1f      	ldr	r3, [pc, #124]	; (8008078 <HAL_RCC_OscConfig+0x68c>)
 8007ffc:	6a1a      	ldr	r2, [r3, #32]
 8007ffe:	4b1e      	ldr	r3, [pc, #120]	; (8008078 <HAL_RCC_OscConfig+0x68c>)
 8008000:	491e      	ldr	r1, [pc, #120]	; (800807c <HAL_RCC_OscConfig+0x690>)
 8008002:	400a      	ands	r2, r1
 8008004:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008006:	f7fe fa57 	bl	80064b8 <HAL_GetTick>
 800800a:	0003      	movs	r3, r0
 800800c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800800e:	e008      	b.n	8008022 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008010:	f7fe fa52 	bl	80064b8 <HAL_GetTick>
 8008014:	0002      	movs	r2, r0
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	2b02      	cmp	r3, #2
 800801c:	d901      	bls.n	8008022 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 800801e:	2303      	movs	r3, #3
 8008020:	e0aa      	b.n	8008178 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008022:	4b0e      	ldr	r3, [pc, #56]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	2202      	movs	r2, #2
 8008028:	4013      	ands	r3, r2
 800802a:	d1f1      	bne.n	8008010 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008030:	2b00      	cmp	r3, #0
 8008032:	d100      	bne.n	8008036 <HAL_RCC_OscConfig+0x64a>
 8008034:	e09f      	b.n	8008176 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	2b0c      	cmp	r3, #12
 800803a:	d100      	bne.n	800803e <HAL_RCC_OscConfig+0x652>
 800803c:	e078      	b.n	8008130 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008042:	2b02      	cmp	r3, #2
 8008044:	d159      	bne.n	80080fa <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008046:	4b05      	ldr	r3, [pc, #20]	; (800805c <HAL_RCC_OscConfig+0x670>)
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	4b04      	ldr	r3, [pc, #16]	; (800805c <HAL_RCC_OscConfig+0x670>)
 800804c:	490c      	ldr	r1, [pc, #48]	; (8008080 <HAL_RCC_OscConfig+0x694>)
 800804e:	400a      	ands	r2, r1
 8008050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008052:	f7fe fa31 	bl	80064b8 <HAL_GetTick>
 8008056:	0003      	movs	r3, r0
 8008058:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800805a:	e01c      	b.n	8008096 <HAL_RCC_OscConfig+0x6aa>
 800805c:	40021000 	.word	0x40021000
 8008060:	ffff1fff 	.word	0xffff1fff
 8008064:	fffffeff 	.word	0xfffffeff
 8008068:	40007000 	.word	0x40007000
 800806c:	fffffbff 	.word	0xfffffbff
 8008070:	00001388 	.word	0x00001388
 8008074:	efffffff 	.word	0xefffffff
 8008078:	40010000 	.word	0x40010000
 800807c:	ffffdfff 	.word	0xffffdfff
 8008080:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008084:	f7fe fa18 	bl	80064b8 <HAL_GetTick>
 8008088:	0002      	movs	r2, r0
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	1ad3      	subs	r3, r2, r3
 800808e:	2b02      	cmp	r3, #2
 8008090:	d901      	bls.n	8008096 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e070      	b.n	8008178 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008096:	4b3a      	ldr	r3, [pc, #232]	; (8008180 <HAL_RCC_OscConfig+0x794>)
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	2380      	movs	r3, #128	; 0x80
 800809c:	049b      	lsls	r3, r3, #18
 800809e:	4013      	ands	r3, r2
 80080a0:	d1f0      	bne.n	8008084 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80080a2:	4b37      	ldr	r3, [pc, #220]	; (8008180 <HAL_RCC_OscConfig+0x794>)
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	4a37      	ldr	r2, [pc, #220]	; (8008184 <HAL_RCC_OscConfig+0x798>)
 80080a8:	4013      	ands	r3, r2
 80080aa:	0019      	movs	r1, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b4:	431a      	orrs	r2, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ba:	431a      	orrs	r2, r3
 80080bc:	4b30      	ldr	r3, [pc, #192]	; (8008180 <HAL_RCC_OscConfig+0x794>)
 80080be:	430a      	orrs	r2, r1
 80080c0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080c2:	4b2f      	ldr	r3, [pc, #188]	; (8008180 <HAL_RCC_OscConfig+0x794>)
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	4b2e      	ldr	r3, [pc, #184]	; (8008180 <HAL_RCC_OscConfig+0x794>)
 80080c8:	2180      	movs	r1, #128	; 0x80
 80080ca:	0449      	lsls	r1, r1, #17
 80080cc:	430a      	orrs	r2, r1
 80080ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080d0:	f7fe f9f2 	bl	80064b8 <HAL_GetTick>
 80080d4:	0003      	movs	r3, r0
 80080d6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80080d8:	e008      	b.n	80080ec <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080da:	f7fe f9ed 	bl	80064b8 <HAL_GetTick>
 80080de:	0002      	movs	r2, r0
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	d901      	bls.n	80080ec <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 80080e8:	2303      	movs	r3, #3
 80080ea:	e045      	b.n	8008178 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80080ec:	4b24      	ldr	r3, [pc, #144]	; (8008180 <HAL_RCC_OscConfig+0x794>)
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	2380      	movs	r3, #128	; 0x80
 80080f2:	049b      	lsls	r3, r3, #18
 80080f4:	4013      	ands	r3, r2
 80080f6:	d0f0      	beq.n	80080da <HAL_RCC_OscConfig+0x6ee>
 80080f8:	e03d      	b.n	8008176 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080fa:	4b21      	ldr	r3, [pc, #132]	; (8008180 <HAL_RCC_OscConfig+0x794>)
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	4b20      	ldr	r3, [pc, #128]	; (8008180 <HAL_RCC_OscConfig+0x794>)
 8008100:	4921      	ldr	r1, [pc, #132]	; (8008188 <HAL_RCC_OscConfig+0x79c>)
 8008102:	400a      	ands	r2, r1
 8008104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008106:	f7fe f9d7 	bl	80064b8 <HAL_GetTick>
 800810a:	0003      	movs	r3, r0
 800810c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800810e:	e008      	b.n	8008122 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008110:	f7fe f9d2 	bl	80064b8 <HAL_GetTick>
 8008114:	0002      	movs	r2, r0
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	2b02      	cmp	r3, #2
 800811c:	d901      	bls.n	8008122 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 800811e:	2303      	movs	r3, #3
 8008120:	e02a      	b.n	8008178 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008122:	4b17      	ldr	r3, [pc, #92]	; (8008180 <HAL_RCC_OscConfig+0x794>)
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	2380      	movs	r3, #128	; 0x80
 8008128:	049b      	lsls	r3, r3, #18
 800812a:	4013      	ands	r3, r2
 800812c:	d1f0      	bne.n	8008110 <HAL_RCC_OscConfig+0x724>
 800812e:	e022      	b.n	8008176 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008134:	2b01      	cmp	r3, #1
 8008136:	d101      	bne.n	800813c <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	e01d      	b.n	8008178 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800813c:	4b10      	ldr	r3, [pc, #64]	; (8008180 <HAL_RCC_OscConfig+0x794>)
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008142:	69ba      	ldr	r2, [r7, #24]
 8008144:	2380      	movs	r3, #128	; 0x80
 8008146:	025b      	lsls	r3, r3, #9
 8008148:	401a      	ands	r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814e:	429a      	cmp	r2, r3
 8008150:	d10f      	bne.n	8008172 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8008152:	69ba      	ldr	r2, [r7, #24]
 8008154:	23f0      	movs	r3, #240	; 0xf0
 8008156:	039b      	lsls	r3, r3, #14
 8008158:	401a      	ands	r2, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800815e:	429a      	cmp	r2, r3
 8008160:	d107      	bne.n	8008172 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8008162:	69ba      	ldr	r2, [r7, #24]
 8008164:	23c0      	movs	r3, #192	; 0xc0
 8008166:	041b      	lsls	r3, r3, #16
 8008168:	401a      	ands	r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800816e:	429a      	cmp	r2, r3
 8008170:	d001      	beq.n	8008176 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e000      	b.n	8008178 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	0018      	movs	r0, r3
 800817a:	46bd      	mov	sp, r7
 800817c:	b00a      	add	sp, #40	; 0x28
 800817e:	bdb0      	pop	{r4, r5, r7, pc}
 8008180:	40021000 	.word	0x40021000
 8008184:	ff02ffff 	.word	0xff02ffff
 8008188:	feffffff 	.word	0xfeffffff

0800818c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800818c:	b5b0      	push	{r4, r5, r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d101      	bne.n	80081a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	e10d      	b.n	80083bc <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80081a0:	4b88      	ldr	r3, [pc, #544]	; (80083c4 <HAL_RCC_ClockConfig+0x238>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2201      	movs	r2, #1
 80081a6:	4013      	ands	r3, r2
 80081a8:	683a      	ldr	r2, [r7, #0]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d911      	bls.n	80081d2 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081ae:	4b85      	ldr	r3, [pc, #532]	; (80083c4 <HAL_RCC_ClockConfig+0x238>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2201      	movs	r2, #1
 80081b4:	4393      	bics	r3, r2
 80081b6:	0019      	movs	r1, r3
 80081b8:	4b82      	ldr	r3, [pc, #520]	; (80083c4 <HAL_RCC_ClockConfig+0x238>)
 80081ba:	683a      	ldr	r2, [r7, #0]
 80081bc:	430a      	orrs	r2, r1
 80081be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081c0:	4b80      	ldr	r3, [pc, #512]	; (80083c4 <HAL_RCC_ClockConfig+0x238>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2201      	movs	r2, #1
 80081c6:	4013      	ands	r3, r2
 80081c8:	683a      	ldr	r2, [r7, #0]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d001      	beq.n	80081d2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	e0f4      	b.n	80083bc <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2202      	movs	r2, #2
 80081d8:	4013      	ands	r3, r2
 80081da:	d009      	beq.n	80081f0 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081dc:	4b7a      	ldr	r3, [pc, #488]	; (80083c8 <HAL_RCC_ClockConfig+0x23c>)
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	22f0      	movs	r2, #240	; 0xf0
 80081e2:	4393      	bics	r3, r2
 80081e4:	0019      	movs	r1, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	689a      	ldr	r2, [r3, #8]
 80081ea:	4b77      	ldr	r3, [pc, #476]	; (80083c8 <HAL_RCC_ClockConfig+0x23c>)
 80081ec:	430a      	orrs	r2, r1
 80081ee:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	2201      	movs	r2, #1
 80081f6:	4013      	ands	r3, r2
 80081f8:	d100      	bne.n	80081fc <HAL_RCC_ClockConfig+0x70>
 80081fa:	e089      	b.n	8008310 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	2b02      	cmp	r3, #2
 8008202:	d107      	bne.n	8008214 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008204:	4b70      	ldr	r3, [pc, #448]	; (80083c8 <HAL_RCC_ClockConfig+0x23c>)
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	2380      	movs	r3, #128	; 0x80
 800820a:	029b      	lsls	r3, r3, #10
 800820c:	4013      	ands	r3, r2
 800820e:	d120      	bne.n	8008252 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	e0d3      	b.n	80083bc <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	2b03      	cmp	r3, #3
 800821a:	d107      	bne.n	800822c <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800821c:	4b6a      	ldr	r3, [pc, #424]	; (80083c8 <HAL_RCC_ClockConfig+0x23c>)
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	2380      	movs	r3, #128	; 0x80
 8008222:	049b      	lsls	r3, r3, #18
 8008224:	4013      	ands	r3, r2
 8008226:	d114      	bne.n	8008252 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	e0c7      	b.n	80083bc <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	2b01      	cmp	r3, #1
 8008232:	d106      	bne.n	8008242 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008234:	4b64      	ldr	r3, [pc, #400]	; (80083c8 <HAL_RCC_ClockConfig+0x23c>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	2204      	movs	r2, #4
 800823a:	4013      	ands	r3, r2
 800823c:	d109      	bne.n	8008252 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	e0bc      	b.n	80083bc <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008242:	4b61      	ldr	r3, [pc, #388]	; (80083c8 <HAL_RCC_ClockConfig+0x23c>)
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	2380      	movs	r3, #128	; 0x80
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	4013      	ands	r3, r2
 800824c:	d101      	bne.n	8008252 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e0b4      	b.n	80083bc <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008252:	4b5d      	ldr	r3, [pc, #372]	; (80083c8 <HAL_RCC_ClockConfig+0x23c>)
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	2203      	movs	r2, #3
 8008258:	4393      	bics	r3, r2
 800825a:	0019      	movs	r1, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	685a      	ldr	r2, [r3, #4]
 8008260:	4b59      	ldr	r3, [pc, #356]	; (80083c8 <HAL_RCC_ClockConfig+0x23c>)
 8008262:	430a      	orrs	r2, r1
 8008264:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008266:	f7fe f927 	bl	80064b8 <HAL_GetTick>
 800826a:	0003      	movs	r3, r0
 800826c:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	2b02      	cmp	r3, #2
 8008274:	d111      	bne.n	800829a <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008276:	e009      	b.n	800828c <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008278:	f7fe f91e 	bl	80064b8 <HAL_GetTick>
 800827c:	0002      	movs	r2, r0
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	1ad3      	subs	r3, r2, r3
 8008282:	4a52      	ldr	r2, [pc, #328]	; (80083cc <HAL_RCC_ClockConfig+0x240>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d901      	bls.n	800828c <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8008288:	2303      	movs	r3, #3
 800828a:	e097      	b.n	80083bc <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800828c:	4b4e      	ldr	r3, [pc, #312]	; (80083c8 <HAL_RCC_ClockConfig+0x23c>)
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	220c      	movs	r2, #12
 8008292:	4013      	ands	r3, r2
 8008294:	2b08      	cmp	r3, #8
 8008296:	d1ef      	bne.n	8008278 <HAL_RCC_ClockConfig+0xec>
 8008298:	e03a      	b.n	8008310 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	2b03      	cmp	r3, #3
 80082a0:	d111      	bne.n	80082c6 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80082a2:	e009      	b.n	80082b8 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082a4:	f7fe f908 	bl	80064b8 <HAL_GetTick>
 80082a8:	0002      	movs	r2, r0
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	1ad3      	subs	r3, r2, r3
 80082ae:	4a47      	ldr	r2, [pc, #284]	; (80083cc <HAL_RCC_ClockConfig+0x240>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d901      	bls.n	80082b8 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 80082b4:	2303      	movs	r3, #3
 80082b6:	e081      	b.n	80083bc <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80082b8:	4b43      	ldr	r3, [pc, #268]	; (80083c8 <HAL_RCC_ClockConfig+0x23c>)
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	220c      	movs	r2, #12
 80082be:	4013      	ands	r3, r2
 80082c0:	2b0c      	cmp	r3, #12
 80082c2:	d1ef      	bne.n	80082a4 <HAL_RCC_ClockConfig+0x118>
 80082c4:	e024      	b.n	8008310 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d11b      	bne.n	8008306 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80082ce:	e009      	b.n	80082e4 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082d0:	f7fe f8f2 	bl	80064b8 <HAL_GetTick>
 80082d4:	0002      	movs	r2, r0
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	1ad3      	subs	r3, r2, r3
 80082da:	4a3c      	ldr	r2, [pc, #240]	; (80083cc <HAL_RCC_ClockConfig+0x240>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d901      	bls.n	80082e4 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80082e0:	2303      	movs	r3, #3
 80082e2:	e06b      	b.n	80083bc <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80082e4:	4b38      	ldr	r3, [pc, #224]	; (80083c8 <HAL_RCC_ClockConfig+0x23c>)
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	220c      	movs	r2, #12
 80082ea:	4013      	ands	r3, r2
 80082ec:	2b04      	cmp	r3, #4
 80082ee:	d1ef      	bne.n	80082d0 <HAL_RCC_ClockConfig+0x144>
 80082f0:	e00e      	b.n	8008310 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082f2:	f7fe f8e1 	bl	80064b8 <HAL_GetTick>
 80082f6:	0002      	movs	r2, r0
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	1ad3      	subs	r3, r2, r3
 80082fc:	4a33      	ldr	r2, [pc, #204]	; (80083cc <HAL_RCC_ClockConfig+0x240>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d901      	bls.n	8008306 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8008302:	2303      	movs	r3, #3
 8008304:	e05a      	b.n	80083bc <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8008306:	4b30      	ldr	r3, [pc, #192]	; (80083c8 <HAL_RCC_ClockConfig+0x23c>)
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	220c      	movs	r2, #12
 800830c:	4013      	ands	r3, r2
 800830e:	d1f0      	bne.n	80082f2 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008310:	4b2c      	ldr	r3, [pc, #176]	; (80083c4 <HAL_RCC_ClockConfig+0x238>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2201      	movs	r2, #1
 8008316:	4013      	ands	r3, r2
 8008318:	683a      	ldr	r2, [r7, #0]
 800831a:	429a      	cmp	r2, r3
 800831c:	d211      	bcs.n	8008342 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800831e:	4b29      	ldr	r3, [pc, #164]	; (80083c4 <HAL_RCC_ClockConfig+0x238>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2201      	movs	r2, #1
 8008324:	4393      	bics	r3, r2
 8008326:	0019      	movs	r1, r3
 8008328:	4b26      	ldr	r3, [pc, #152]	; (80083c4 <HAL_RCC_ClockConfig+0x238>)
 800832a:	683a      	ldr	r2, [r7, #0]
 800832c:	430a      	orrs	r2, r1
 800832e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008330:	4b24      	ldr	r3, [pc, #144]	; (80083c4 <HAL_RCC_ClockConfig+0x238>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2201      	movs	r2, #1
 8008336:	4013      	ands	r3, r2
 8008338:	683a      	ldr	r2, [r7, #0]
 800833a:	429a      	cmp	r2, r3
 800833c:	d001      	beq.n	8008342 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	e03c      	b.n	80083bc <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2204      	movs	r2, #4
 8008348:	4013      	ands	r3, r2
 800834a:	d009      	beq.n	8008360 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800834c:	4b1e      	ldr	r3, [pc, #120]	; (80083c8 <HAL_RCC_ClockConfig+0x23c>)
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	4a1f      	ldr	r2, [pc, #124]	; (80083d0 <HAL_RCC_ClockConfig+0x244>)
 8008352:	4013      	ands	r3, r2
 8008354:	0019      	movs	r1, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	68da      	ldr	r2, [r3, #12]
 800835a:	4b1b      	ldr	r3, [pc, #108]	; (80083c8 <HAL_RCC_ClockConfig+0x23c>)
 800835c:	430a      	orrs	r2, r1
 800835e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2208      	movs	r2, #8
 8008366:	4013      	ands	r3, r2
 8008368:	d00a      	beq.n	8008380 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800836a:	4b17      	ldr	r3, [pc, #92]	; (80083c8 <HAL_RCC_ClockConfig+0x23c>)
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	4a19      	ldr	r2, [pc, #100]	; (80083d4 <HAL_RCC_ClockConfig+0x248>)
 8008370:	4013      	ands	r3, r2
 8008372:	0019      	movs	r1, r3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	691b      	ldr	r3, [r3, #16]
 8008378:	00da      	lsls	r2, r3, #3
 800837a:	4b13      	ldr	r3, [pc, #76]	; (80083c8 <HAL_RCC_ClockConfig+0x23c>)
 800837c:	430a      	orrs	r2, r1
 800837e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008380:	f000 f82e 	bl	80083e0 <HAL_RCC_GetSysClockFreq>
 8008384:	0001      	movs	r1, r0
 8008386:	4b10      	ldr	r3, [pc, #64]	; (80083c8 <HAL_RCC_ClockConfig+0x23c>)
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	091b      	lsrs	r3, r3, #4
 800838c:	220f      	movs	r2, #15
 800838e:	4013      	ands	r3, r2
 8008390:	4a11      	ldr	r2, [pc, #68]	; (80083d8 <HAL_RCC_ClockConfig+0x24c>)
 8008392:	5cd3      	ldrb	r3, [r2, r3]
 8008394:	000a      	movs	r2, r1
 8008396:	40da      	lsrs	r2, r3
 8008398:	4b10      	ldr	r3, [pc, #64]	; (80083dc <HAL_RCC_ClockConfig+0x250>)
 800839a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 800839c:	250b      	movs	r5, #11
 800839e:	197c      	adds	r4, r7, r5
 80083a0:	2000      	movs	r0, #0
 80083a2:	f7fe f853 	bl	800644c <HAL_InitTick>
 80083a6:	0003      	movs	r3, r0
 80083a8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80083aa:	197b      	adds	r3, r7, r5
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d003      	beq.n	80083ba <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 80083b2:	230b      	movs	r3, #11
 80083b4:	18fb      	adds	r3, r7, r3
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	e000      	b.n	80083bc <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	0018      	movs	r0, r3
 80083be:	46bd      	mov	sp, r7
 80083c0:	b004      	add	sp, #16
 80083c2:	bdb0      	pop	{r4, r5, r7, pc}
 80083c4:	40022000 	.word	0x40022000
 80083c8:	40021000 	.word	0x40021000
 80083cc:	00001388 	.word	0x00001388
 80083d0:	fffff8ff 	.word	0xfffff8ff
 80083d4:	ffffc7ff 	.word	0xffffc7ff
 80083d8:	0800bf0c 	.word	0x0800bf0c
 80083dc:	20000010 	.word	0x20000010

080083e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b086      	sub	sp, #24
 80083e4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80083e6:	4b3b      	ldr	r3, [pc, #236]	; (80084d4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	220c      	movs	r2, #12
 80083f0:	4013      	ands	r3, r2
 80083f2:	2b08      	cmp	r3, #8
 80083f4:	d00e      	beq.n	8008414 <HAL_RCC_GetSysClockFreq+0x34>
 80083f6:	2b0c      	cmp	r3, #12
 80083f8:	d00f      	beq.n	800841a <HAL_RCC_GetSysClockFreq+0x3a>
 80083fa:	2b04      	cmp	r3, #4
 80083fc:	d157      	bne.n	80084ae <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80083fe:	4b35      	ldr	r3, [pc, #212]	; (80084d4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2210      	movs	r2, #16
 8008404:	4013      	ands	r3, r2
 8008406:	d002      	beq.n	800840e <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8008408:	4b33      	ldr	r3, [pc, #204]	; (80084d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800840a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800840c:	e05d      	b.n	80084ca <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 800840e:	4b33      	ldr	r3, [pc, #204]	; (80084dc <HAL_RCC_GetSysClockFreq+0xfc>)
 8008410:	613b      	str	r3, [r7, #16]
      break;
 8008412:	e05a      	b.n	80084ca <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008414:	4b32      	ldr	r3, [pc, #200]	; (80084e0 <HAL_RCC_GetSysClockFreq+0x100>)
 8008416:	613b      	str	r3, [r7, #16]
      break;
 8008418:	e057      	b.n	80084ca <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	0c9b      	lsrs	r3, r3, #18
 800841e:	220f      	movs	r2, #15
 8008420:	4013      	ands	r3, r2
 8008422:	4a30      	ldr	r2, [pc, #192]	; (80084e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8008424:	5cd3      	ldrb	r3, [r2, r3]
 8008426:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	0d9b      	lsrs	r3, r3, #22
 800842c:	2203      	movs	r2, #3
 800842e:	4013      	ands	r3, r2
 8008430:	3301      	adds	r3, #1
 8008432:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008434:	4b27      	ldr	r3, [pc, #156]	; (80084d4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8008436:	68da      	ldr	r2, [r3, #12]
 8008438:	2380      	movs	r3, #128	; 0x80
 800843a:	025b      	lsls	r3, r3, #9
 800843c:	4013      	ands	r3, r2
 800843e:	d00f      	beq.n	8008460 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8008440:	68b9      	ldr	r1, [r7, #8]
 8008442:	000a      	movs	r2, r1
 8008444:	0152      	lsls	r2, r2, #5
 8008446:	1a52      	subs	r2, r2, r1
 8008448:	0193      	lsls	r3, r2, #6
 800844a:	1a9b      	subs	r3, r3, r2
 800844c:	00db      	lsls	r3, r3, #3
 800844e:	185b      	adds	r3, r3, r1
 8008450:	025b      	lsls	r3, r3, #9
 8008452:	6879      	ldr	r1, [r7, #4]
 8008454:	0018      	movs	r0, r3
 8008456:	f7f7 fe5f 	bl	8000118 <__udivsi3>
 800845a:	0003      	movs	r3, r0
 800845c:	617b      	str	r3, [r7, #20]
 800845e:	e023      	b.n	80084a8 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8008460:	4b1c      	ldr	r3, [pc, #112]	; (80084d4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2210      	movs	r2, #16
 8008466:	4013      	ands	r3, r2
 8008468:	d00f      	beq.n	800848a <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800846a:	68b9      	ldr	r1, [r7, #8]
 800846c:	000a      	movs	r2, r1
 800846e:	0152      	lsls	r2, r2, #5
 8008470:	1a52      	subs	r2, r2, r1
 8008472:	0193      	lsls	r3, r2, #6
 8008474:	1a9b      	subs	r3, r3, r2
 8008476:	00db      	lsls	r3, r3, #3
 8008478:	185b      	adds	r3, r3, r1
 800847a:	021b      	lsls	r3, r3, #8
 800847c:	6879      	ldr	r1, [r7, #4]
 800847e:	0018      	movs	r0, r3
 8008480:	f7f7 fe4a 	bl	8000118 <__udivsi3>
 8008484:	0003      	movs	r3, r0
 8008486:	617b      	str	r3, [r7, #20]
 8008488:	e00e      	b.n	80084a8 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800848a:	68b9      	ldr	r1, [r7, #8]
 800848c:	000a      	movs	r2, r1
 800848e:	0152      	lsls	r2, r2, #5
 8008490:	1a52      	subs	r2, r2, r1
 8008492:	0193      	lsls	r3, r2, #6
 8008494:	1a9b      	subs	r3, r3, r2
 8008496:	00db      	lsls	r3, r3, #3
 8008498:	185b      	adds	r3, r3, r1
 800849a:	029b      	lsls	r3, r3, #10
 800849c:	6879      	ldr	r1, [r7, #4]
 800849e:	0018      	movs	r0, r3
 80084a0:	f7f7 fe3a 	bl	8000118 <__udivsi3>
 80084a4:	0003      	movs	r3, r0
 80084a6:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	613b      	str	r3, [r7, #16]
      break;
 80084ac:	e00d      	b.n	80084ca <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80084ae:	4b09      	ldr	r3, [pc, #36]	; (80084d4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	0b5b      	lsrs	r3, r3, #13
 80084b4:	2207      	movs	r2, #7
 80084b6:	4013      	ands	r3, r2
 80084b8:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	3301      	adds	r3, #1
 80084be:	2280      	movs	r2, #128	; 0x80
 80084c0:	0212      	lsls	r2, r2, #8
 80084c2:	409a      	lsls	r2, r3
 80084c4:	0013      	movs	r3, r2
 80084c6:	613b      	str	r3, [r7, #16]
      break;
 80084c8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80084ca:	693b      	ldr	r3, [r7, #16]
}
 80084cc:	0018      	movs	r0, r3
 80084ce:	46bd      	mov	sp, r7
 80084d0:	b006      	add	sp, #24
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	40021000 	.word	0x40021000
 80084d8:	003d0900 	.word	0x003d0900
 80084dc:	00f42400 	.word	0x00f42400
 80084e0:	007a1200 	.word	0x007a1200
 80084e4:	0800bf1c 	.word	0x0800bf1c

080084e8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b086      	sub	sp, #24
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2220      	movs	r2, #32
 80084f6:	4013      	ands	r3, r2
 80084f8:	d106      	bne.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	2380      	movs	r3, #128	; 0x80
 8008500:	011b      	lsls	r3, r3, #4
 8008502:	4013      	ands	r3, r2
 8008504:	d100      	bne.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8008506:	e0dd      	b.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8008508:	2317      	movs	r3, #23
 800850a:	18fb      	adds	r3, r7, r3
 800850c:	2200      	movs	r2, #0
 800850e:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008510:	4ba4      	ldr	r3, [pc, #656]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008514:	2380      	movs	r3, #128	; 0x80
 8008516:	055b      	lsls	r3, r3, #21
 8008518:	4013      	ands	r3, r2
 800851a:	d10a      	bne.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800851c:	4ba1      	ldr	r3, [pc, #644]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800851e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008520:	4ba0      	ldr	r3, [pc, #640]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008522:	2180      	movs	r1, #128	; 0x80
 8008524:	0549      	lsls	r1, r1, #21
 8008526:	430a      	orrs	r2, r1
 8008528:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800852a:	2317      	movs	r3, #23
 800852c:	18fb      	adds	r3, r7, r3
 800852e:	2201      	movs	r2, #1
 8008530:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008532:	4b9d      	ldr	r3, [pc, #628]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	2380      	movs	r3, #128	; 0x80
 8008538:	005b      	lsls	r3, r3, #1
 800853a:	4013      	ands	r3, r2
 800853c:	d11a      	bne.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800853e:	4b9a      	ldr	r3, [pc, #616]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	4b99      	ldr	r3, [pc, #612]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008544:	2180      	movs	r1, #128	; 0x80
 8008546:	0049      	lsls	r1, r1, #1
 8008548:	430a      	orrs	r2, r1
 800854a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800854c:	f7fd ffb4 	bl	80064b8 <HAL_GetTick>
 8008550:	0003      	movs	r3, r0
 8008552:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008554:	e008      	b.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008556:	f7fd ffaf 	bl	80064b8 <HAL_GetTick>
 800855a:	0002      	movs	r2, r0
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	2b64      	cmp	r3, #100	; 0x64
 8008562:	d901      	bls.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008564:	2303      	movs	r3, #3
 8008566:	e118      	b.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008568:	4b8f      	ldr	r3, [pc, #572]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	2380      	movs	r3, #128	; 0x80
 800856e:	005b      	lsls	r3, r3, #1
 8008570:	4013      	ands	r3, r2
 8008572:	d0f0      	beq.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8008574:	4b8b      	ldr	r3, [pc, #556]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	23c0      	movs	r3, #192	; 0xc0
 800857a:	039b      	lsls	r3, r3, #14
 800857c:	4013      	ands	r3, r2
 800857e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	685a      	ldr	r2, [r3, #4]
 8008584:	23c0      	movs	r3, #192	; 0xc0
 8008586:	039b      	lsls	r3, r3, #14
 8008588:	4013      	ands	r3, r2
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	429a      	cmp	r2, r3
 800858e:	d107      	bne.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	689a      	ldr	r2, [r3, #8]
 8008594:	23c0      	movs	r3, #192	; 0xc0
 8008596:	039b      	lsls	r3, r3, #14
 8008598:	4013      	ands	r3, r2
 800859a:	68fa      	ldr	r2, [r7, #12]
 800859c:	429a      	cmp	r2, r3
 800859e:	d013      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	685a      	ldr	r2, [r3, #4]
 80085a4:	23c0      	movs	r3, #192	; 0xc0
 80085a6:	029b      	lsls	r3, r3, #10
 80085a8:	401a      	ands	r2, r3
 80085aa:	23c0      	movs	r3, #192	; 0xc0
 80085ac:	029b      	lsls	r3, r3, #10
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d10a      	bne.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80085b2:	4b7c      	ldr	r3, [pc, #496]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	2380      	movs	r3, #128	; 0x80
 80085b8:	029b      	lsls	r3, r3, #10
 80085ba:	401a      	ands	r2, r3
 80085bc:	2380      	movs	r3, #128	; 0x80
 80085be:	029b      	lsls	r3, r3, #10
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d101      	bne.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e0e8      	b.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80085c8:	4b76      	ldr	r3, [pc, #472]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80085ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085cc:	23c0      	movs	r3, #192	; 0xc0
 80085ce:	029b      	lsls	r3, r3, #10
 80085d0:	4013      	ands	r3, r2
 80085d2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d049      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x186>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	685a      	ldr	r2, [r3, #4]
 80085de:	23c0      	movs	r3, #192	; 0xc0
 80085e0:	029b      	lsls	r3, r3, #10
 80085e2:	4013      	ands	r3, r2
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d004      	beq.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2220      	movs	r2, #32
 80085f0:	4013      	ands	r3, r2
 80085f2:	d10d      	bne.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	689a      	ldr	r2, [r3, #8]
 80085f8:	23c0      	movs	r3, #192	; 0xc0
 80085fa:	029b      	lsls	r3, r3, #10
 80085fc:	4013      	ands	r3, r2
 80085fe:	68fa      	ldr	r2, [r7, #12]
 8008600:	429a      	cmp	r2, r3
 8008602:	d034      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	2380      	movs	r3, #128	; 0x80
 800860a:	011b      	lsls	r3, r3, #4
 800860c:	4013      	ands	r3, r2
 800860e:	d02e      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8008610:	4b64      	ldr	r3, [pc, #400]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008614:	4a65      	ldr	r2, [pc, #404]	; (80087ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008616:	4013      	ands	r3, r2
 8008618:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800861a:	4b62      	ldr	r3, [pc, #392]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800861c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800861e:	4b61      	ldr	r3, [pc, #388]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008620:	2180      	movs	r1, #128	; 0x80
 8008622:	0309      	lsls	r1, r1, #12
 8008624:	430a      	orrs	r2, r1
 8008626:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008628:	4b5e      	ldr	r3, [pc, #376]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800862a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800862c:	4b5d      	ldr	r3, [pc, #372]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800862e:	4960      	ldr	r1, [pc, #384]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8008630:	400a      	ands	r2, r1
 8008632:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8008634:	4b5b      	ldr	r3, [pc, #364]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	2380      	movs	r3, #128	; 0x80
 800863e:	005b      	lsls	r3, r3, #1
 8008640:	4013      	ands	r3, r2
 8008642:	d014      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008644:	f7fd ff38 	bl	80064b8 <HAL_GetTick>
 8008648:	0003      	movs	r3, r0
 800864a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800864c:	e009      	b.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800864e:	f7fd ff33 	bl	80064b8 <HAL_GetTick>
 8008652:	0002      	movs	r2, r0
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	4a56      	ldr	r2, [pc, #344]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d901      	bls.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800865e:	2303      	movs	r3, #3
 8008660:	e09b      	b.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008662:	4b50      	ldr	r3, [pc, #320]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008664:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008666:	2380      	movs	r3, #128	; 0x80
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	4013      	ands	r3, r2
 800866c:	d0ef      	beq.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	685a      	ldr	r2, [r3, #4]
 8008672:	23c0      	movs	r3, #192	; 0xc0
 8008674:	029b      	lsls	r3, r3, #10
 8008676:	401a      	ands	r2, r3
 8008678:	23c0      	movs	r3, #192	; 0xc0
 800867a:	029b      	lsls	r3, r3, #10
 800867c:	429a      	cmp	r2, r3
 800867e:	d10c      	bne.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8008680:	4b48      	ldr	r3, [pc, #288]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a4c      	ldr	r2, [pc, #304]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8008686:	4013      	ands	r3, r2
 8008688:	0019      	movs	r1, r3
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	685a      	ldr	r2, [r3, #4]
 800868e:	23c0      	movs	r3, #192	; 0xc0
 8008690:	039b      	lsls	r3, r3, #14
 8008692:	401a      	ands	r2, r3
 8008694:	4b43      	ldr	r3, [pc, #268]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008696:	430a      	orrs	r2, r1
 8008698:	601a      	str	r2, [r3, #0]
 800869a:	4b42      	ldr	r3, [pc, #264]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800869c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	685a      	ldr	r2, [r3, #4]
 80086a2:	23c0      	movs	r3, #192	; 0xc0
 80086a4:	029b      	lsls	r3, r3, #10
 80086a6:	401a      	ands	r2, r3
 80086a8:	4b3e      	ldr	r3, [pc, #248]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80086aa:	430a      	orrs	r2, r1
 80086ac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80086ae:	2317      	movs	r3, #23
 80086b0:	18fb      	adds	r3, r7, r3
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d105      	bne.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086b8:	4b3a      	ldr	r3, [pc, #232]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80086ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086bc:	4b39      	ldr	r3, [pc, #228]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80086be:	493f      	ldr	r1, [pc, #252]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80086c0:	400a      	ands	r2, r1
 80086c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2201      	movs	r2, #1
 80086ca:	4013      	ands	r3, r2
 80086cc:	d009      	beq.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80086ce:	4b35      	ldr	r3, [pc, #212]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80086d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086d2:	2203      	movs	r2, #3
 80086d4:	4393      	bics	r3, r2
 80086d6:	0019      	movs	r1, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	68da      	ldr	r2, [r3, #12]
 80086dc:	4b31      	ldr	r3, [pc, #196]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80086de:	430a      	orrs	r2, r1
 80086e0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2202      	movs	r2, #2
 80086e8:	4013      	ands	r3, r2
 80086ea:	d009      	beq.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80086ec:	4b2d      	ldr	r3, [pc, #180]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80086ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086f0:	220c      	movs	r2, #12
 80086f2:	4393      	bics	r3, r2
 80086f4:	0019      	movs	r1, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	691a      	ldr	r2, [r3, #16]
 80086fa:	4b2a      	ldr	r3, [pc, #168]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80086fc:	430a      	orrs	r2, r1
 80086fe:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2204      	movs	r2, #4
 8008706:	4013      	ands	r3, r2
 8008708:	d009      	beq.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800870a:	4b26      	ldr	r3, [pc, #152]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800870c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800870e:	4a2c      	ldr	r2, [pc, #176]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008710:	4013      	ands	r3, r2
 8008712:	0019      	movs	r1, r3
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	695a      	ldr	r2, [r3, #20]
 8008718:	4b22      	ldr	r3, [pc, #136]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800871a:	430a      	orrs	r2, r1
 800871c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2208      	movs	r2, #8
 8008724:	4013      	ands	r3, r2
 8008726:	d009      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008728:	4b1e      	ldr	r3, [pc, #120]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800872a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800872c:	4a25      	ldr	r2, [pc, #148]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800872e:	4013      	ands	r3, r2
 8008730:	0019      	movs	r1, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	699a      	ldr	r2, [r3, #24]
 8008736:	4b1b      	ldr	r3, [pc, #108]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008738:	430a      	orrs	r2, r1
 800873a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	2380      	movs	r3, #128	; 0x80
 8008742:	005b      	lsls	r3, r3, #1
 8008744:	4013      	ands	r3, r2
 8008746:	d009      	beq.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008748:	4b16      	ldr	r3, [pc, #88]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800874a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800874c:	4a17      	ldr	r2, [pc, #92]	; (80087ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800874e:	4013      	ands	r3, r2
 8008750:	0019      	movs	r1, r3
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	69da      	ldr	r2, [r3, #28]
 8008756:	4b13      	ldr	r3, [pc, #76]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008758:	430a      	orrs	r2, r1
 800875a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2240      	movs	r2, #64	; 0x40
 8008762:	4013      	ands	r3, r2
 8008764:	d009      	beq.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008766:	4b0f      	ldr	r3, [pc, #60]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800876a:	4a17      	ldr	r2, [pc, #92]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800876c:	4013      	ands	r3, r2
 800876e:	0019      	movs	r1, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008774:	4b0b      	ldr	r3, [pc, #44]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008776:	430a      	orrs	r2, r1
 8008778:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2280      	movs	r2, #128	; 0x80
 8008780:	4013      	ands	r3, r2
 8008782:	d009      	beq.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8008784:	4b07      	ldr	r3, [pc, #28]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008788:	4a10      	ldr	r2, [pc, #64]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800878a:	4013      	ands	r3, r2
 800878c:	0019      	movs	r1, r3
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a1a      	ldr	r2, [r3, #32]
 8008792:	4b04      	ldr	r3, [pc, #16]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008794:	430a      	orrs	r2, r1
 8008796:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	0018      	movs	r0, r3
 800879c:	46bd      	mov	sp, r7
 800879e:	b006      	add	sp, #24
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	46c0      	nop			; (mov r8, r8)
 80087a4:	40021000 	.word	0x40021000
 80087a8:	40007000 	.word	0x40007000
 80087ac:	fffcffff 	.word	0xfffcffff
 80087b0:	fff7ffff 	.word	0xfff7ffff
 80087b4:	00001388 	.word	0x00001388
 80087b8:	ffcfffff 	.word	0xffcfffff
 80087bc:	efffffff 	.word	0xefffffff
 80087c0:	fffff3ff 	.word	0xfffff3ff
 80087c4:	ffffcfff 	.word	0xffffcfff
 80087c8:	fbffffff 	.word	0xfbffffff
 80087cc:	fff3ffff 	.word	0xfff3ffff

080087d0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d101      	bne.n	80087e2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	e08e      	b.n	8008900 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2221      	movs	r2, #33	; 0x21
 80087e6:	5c9b      	ldrb	r3, [r3, r2]
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d107      	bne.n	80087fe <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2220      	movs	r2, #32
 80087f2:	2100      	movs	r1, #0
 80087f4:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	0018      	movs	r0, r3
 80087fa:	f7fb fc1f 	bl	800403c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2221      	movs	r2, #33	; 0x21
 8008802:	2102      	movs	r1, #2
 8008804:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	22ca      	movs	r2, #202	; 0xca
 800880c:	625a      	str	r2, [r3, #36]	; 0x24
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2253      	movs	r2, #83	; 0x53
 8008814:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	0018      	movs	r0, r3
 800881a:	f000 fcf4 	bl	8009206 <RTC_EnterInitMode>
 800881e:	1e03      	subs	r3, r0, #0
 8008820:	d009      	beq.n	8008836 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	22ff      	movs	r2, #255	; 0xff
 8008828:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2221      	movs	r2, #33	; 0x21
 800882e:	2104      	movs	r1, #4
 8008830:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e064      	b.n	8008900 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	689a      	ldr	r2, [r3, #8]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4931      	ldr	r1, [pc, #196]	; (8008908 <HAL_RTC_Init+0x138>)
 8008842:	400a      	ands	r2, r1
 8008844:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	6899      	ldr	r1, [r3, #8]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	685a      	ldr	r2, [r3, #4]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	691b      	ldr	r3, [r3, #16]
 8008854:	431a      	orrs	r2, r3
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	699b      	ldr	r3, [r3, #24]
 800885a:	431a      	orrs	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	430a      	orrs	r2, r1
 8008862:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	68d2      	ldr	r2, [r2, #12]
 800886c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	6919      	ldr	r1, [r3, #16]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	041a      	lsls	r2, r3, #16
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	430a      	orrs	r2, r1
 8008880:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	68da      	ldr	r2, [r3, #12]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2180      	movs	r1, #128	; 0x80
 800888e:	438a      	bics	r2, r1
 8008890:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2103      	movs	r1, #3
 800889e:	438a      	bics	r2, r1
 80088a0:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	69da      	ldr	r2, [r3, #28]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	695b      	ldr	r3, [r3, #20]
 80088b0:	431a      	orrs	r2, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	430a      	orrs	r2, r1
 80088b8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	2220      	movs	r2, #32
 80088c2:	4013      	ands	r3, r2
 80088c4:	d113      	bne.n	80088ee <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	0018      	movs	r0, r3
 80088ca:	f000 fc75 	bl	80091b8 <HAL_RTC_WaitForSynchro>
 80088ce:	1e03      	subs	r3, r0, #0
 80088d0:	d00d      	beq.n	80088ee <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	22ff      	movs	r2, #255	; 0xff
 80088d8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2221      	movs	r2, #33	; 0x21
 80088de:	2104      	movs	r1, #4
 80088e0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2220      	movs	r2, #32
 80088e6:	2100      	movs	r1, #0
 80088e8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	e008      	b.n	8008900 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	22ff      	movs	r2, #255	; 0xff
 80088f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2221      	movs	r2, #33	; 0x21
 80088fa:	2101      	movs	r1, #1
 80088fc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80088fe:	2300      	movs	r3, #0
  }
}
 8008900:	0018      	movs	r0, r3
 8008902:	46bd      	mov	sp, r7
 8008904:	b002      	add	sp, #8
 8008906:	bd80      	pop	{r7, pc}
 8008908:	ff8fffbf 	.word	0xff8fffbf

0800890c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800890c:	b590      	push	{r4, r7, lr}
 800890e:	b087      	sub	sp, #28
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2220      	movs	r2, #32
 800891c:	5c9b      	ldrb	r3, [r3, r2]
 800891e:	2b01      	cmp	r3, #1
 8008920:	d101      	bne.n	8008926 <HAL_RTC_SetTime+0x1a>
 8008922:	2302      	movs	r3, #2
 8008924:	e0ad      	b.n	8008a82 <HAL_RTC_SetTime+0x176>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2220      	movs	r2, #32
 800892a:	2101      	movs	r1, #1
 800892c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2221      	movs	r2, #33	; 0x21
 8008932:	2102      	movs	r1, #2
 8008934:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d125      	bne.n	8008988 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	2240      	movs	r2, #64	; 0x40
 8008944:	4013      	ands	r3, r2
 8008946:	d102      	bne.n	800894e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	2200      	movs	r2, #0
 800894c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	0018      	movs	r0, r3
 8008954:	f000 fc81 	bl	800925a <RTC_ByteToBcd2>
 8008958:	0003      	movs	r3, r0
 800895a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	785b      	ldrb	r3, [r3, #1]
 8008960:	0018      	movs	r0, r3
 8008962:	f000 fc7a 	bl	800925a <RTC_ByteToBcd2>
 8008966:	0003      	movs	r3, r0
 8008968:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800896a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	789b      	ldrb	r3, [r3, #2]
 8008970:	0018      	movs	r0, r3
 8008972:	f000 fc72 	bl	800925a <RTC_ByteToBcd2>
 8008976:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008978:	0022      	movs	r2, r4
 800897a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	78db      	ldrb	r3, [r3, #3]
 8008980:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008982:	4313      	orrs	r3, r2
 8008984:	617b      	str	r3, [r7, #20]
 8008986:	e017      	b.n	80089b8 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	2240      	movs	r2, #64	; 0x40
 8008990:	4013      	ands	r3, r2
 8008992:	d102      	bne.n	800899a <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	2200      	movs	r2, #0
 8008998:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	785b      	ldrb	r3, [r3, #1]
 80089a4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80089a6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80089a8:	68ba      	ldr	r2, [r7, #8]
 80089aa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80089ac:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	78db      	ldrb	r3, [r3, #3]
 80089b2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80089b4:	4313      	orrs	r3, r2
 80089b6:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	22ca      	movs	r2, #202	; 0xca
 80089be:	625a      	str	r2, [r3, #36]	; 0x24
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	2253      	movs	r2, #83	; 0x53
 80089c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	0018      	movs	r0, r3
 80089cc:	f000 fc1b 	bl	8009206 <RTC_EnterInitMode>
 80089d0:	1e03      	subs	r3, r0, #0
 80089d2:	d00d      	beq.n	80089f0 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	22ff      	movs	r2, #255	; 0xff
 80089da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2221      	movs	r2, #33	; 0x21
 80089e0:	2104      	movs	r1, #4
 80089e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2220      	movs	r2, #32
 80089e8:	2100      	movs	r1, #0
 80089ea:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	e048      	b.n	8008a82 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	697a      	ldr	r2, [r7, #20]
 80089f6:	4925      	ldr	r1, [pc, #148]	; (8008a8c <HAL_RTC_SetTime+0x180>)
 80089f8:	400a      	ands	r2, r1
 80089fa:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	689a      	ldr	r2, [r3, #8]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4922      	ldr	r1, [pc, #136]	; (8008a90 <HAL_RTC_SetTime+0x184>)
 8008a08:	400a      	ands	r2, r1
 8008a0a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	6899      	ldr	r1, [r3, #8]
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	68da      	ldr	r2, [r3, #12]
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	431a      	orrs	r2, r3
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	430a      	orrs	r2, r1
 8008a22:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	68da      	ldr	r2, [r3, #12]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2180      	movs	r1, #128	; 0x80
 8008a30:	438a      	bics	r2, r1
 8008a32:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	2220      	movs	r2, #32
 8008a3c:	4013      	ands	r3, r2
 8008a3e:	d113      	bne.n	8008a68 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	0018      	movs	r0, r3
 8008a44:	f000 fbb8 	bl	80091b8 <HAL_RTC_WaitForSynchro>
 8008a48:	1e03      	subs	r3, r0, #0
 8008a4a:	d00d      	beq.n	8008a68 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	22ff      	movs	r2, #255	; 0xff
 8008a52:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2221      	movs	r2, #33	; 0x21
 8008a58:	2104      	movs	r1, #4
 8008a5a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2220      	movs	r2, #32
 8008a60:	2100      	movs	r1, #0
 8008a62:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	e00c      	b.n	8008a82 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	22ff      	movs	r2, #255	; 0xff
 8008a6e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2221      	movs	r2, #33	; 0x21
 8008a74:	2101      	movs	r1, #1
 8008a76:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2220      	movs	r2, #32
 8008a7c:	2100      	movs	r1, #0
 8008a7e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008a80:	2300      	movs	r3, #0
  }
}
 8008a82:	0018      	movs	r0, r3
 8008a84:	46bd      	mov	sp, r7
 8008a86:	b007      	add	sp, #28
 8008a88:	bd90      	pop	{r4, r7, pc}
 8008a8a:	46c0      	nop			; (mov r8, r8)
 8008a8c:	007f7f7f 	.word	0x007f7f7f
 8008a90:	fffbffff 	.word	0xfffbffff

08008a94 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b086      	sub	sp, #24
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	691b      	ldr	r3, [r3, #16]
 8008ab0:	045b      	lsls	r3, r3, #17
 8008ab2:	0c5a      	lsrs	r2, r3, #17
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a22      	ldr	r2, [pc, #136]	; (8008b48 <HAL_RTC_GetTime+0xb4>)
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	0c1b      	lsrs	r3, r3, #16
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	223f      	movs	r2, #63	; 0x3f
 8008acc:	4013      	ands	r3, r2
 8008ace:	b2da      	uxtb	r2, r3
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	0a1b      	lsrs	r3, r3, #8
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	227f      	movs	r2, #127	; 0x7f
 8008adc:	4013      	ands	r3, r2
 8008ade:	b2da      	uxtb	r2, r3
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	227f      	movs	r2, #127	; 0x7f
 8008aea:	4013      	ands	r3, r2
 8008aec:	b2da      	uxtb	r2, r3
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	0c1b      	lsrs	r3, r3, #16
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	2240      	movs	r2, #64	; 0x40
 8008afa:	4013      	ands	r3, r2
 8008afc:	b2da      	uxtb	r2, r3
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d11a      	bne.n	8008b3e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	0018      	movs	r0, r3
 8008b0e:	f000 fbcd 	bl	80092ac <RTC_Bcd2ToByte>
 8008b12:	0003      	movs	r3, r0
 8008b14:	001a      	movs	r2, r3
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	785b      	ldrb	r3, [r3, #1]
 8008b1e:	0018      	movs	r0, r3
 8008b20:	f000 fbc4 	bl	80092ac <RTC_Bcd2ToByte>
 8008b24:	0003      	movs	r3, r0
 8008b26:	001a      	movs	r2, r3
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	789b      	ldrb	r3, [r3, #2]
 8008b30:	0018      	movs	r0, r3
 8008b32:	f000 fbbb 	bl	80092ac <RTC_Bcd2ToByte>
 8008b36:	0003      	movs	r3, r0
 8008b38:	001a      	movs	r2, r3
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	0018      	movs	r0, r3
 8008b42:	46bd      	mov	sp, r7
 8008b44:	b006      	add	sp, #24
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	007f7f7f 	.word	0x007f7f7f

08008b4c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008b4c:	b590      	push	{r4, r7, lr}
 8008b4e:	b087      	sub	sp, #28
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2220      	movs	r2, #32
 8008b5c:	5c9b      	ldrb	r3, [r3, r2]
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d101      	bne.n	8008b66 <HAL_RTC_SetDate+0x1a>
 8008b62:	2302      	movs	r3, #2
 8008b64:	e099      	b.n	8008c9a <HAL_RTC_SetDate+0x14e>
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2220      	movs	r2, #32
 8008b6a:	2101      	movs	r1, #1
 8008b6c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2221      	movs	r2, #33	; 0x21
 8008b72:	2102      	movs	r1, #2
 8008b74:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d10e      	bne.n	8008b9a <HAL_RTC_SetDate+0x4e>
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	785b      	ldrb	r3, [r3, #1]
 8008b80:	001a      	movs	r2, r3
 8008b82:	2310      	movs	r3, #16
 8008b84:	4013      	ands	r3, r2
 8008b86:	d008      	beq.n	8008b9a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	785b      	ldrb	r3, [r3, #1]
 8008b8c:	2210      	movs	r2, #16
 8008b8e:	4393      	bics	r3, r2
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	330a      	adds	r3, #10
 8008b94:	b2da      	uxtb	r2, r3
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d11c      	bne.n	8008bda <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	78db      	ldrb	r3, [r3, #3]
 8008ba4:	0018      	movs	r0, r3
 8008ba6:	f000 fb58 	bl	800925a <RTC_ByteToBcd2>
 8008baa:	0003      	movs	r3, r0
 8008bac:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	785b      	ldrb	r3, [r3, #1]
 8008bb2:	0018      	movs	r0, r3
 8008bb4:	f000 fb51 	bl	800925a <RTC_ByteToBcd2>
 8008bb8:	0003      	movs	r3, r0
 8008bba:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008bbc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	789b      	ldrb	r3, [r3, #2]
 8008bc2:	0018      	movs	r0, r3
 8008bc4:	f000 fb49 	bl	800925a <RTC_ByteToBcd2>
 8008bc8:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008bca:	0022      	movs	r2, r4
 8008bcc:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	617b      	str	r3, [r7, #20]
 8008bd8:	e00e      	b.n	8008bf8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	78db      	ldrb	r3, [r3, #3]
 8008bde:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	785b      	ldrb	r3, [r3, #1]
 8008be4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008be6:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008be8:	68ba      	ldr	r2, [r7, #8]
 8008bea:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8008bec:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	22ca      	movs	r2, #202	; 0xca
 8008bfe:	625a      	str	r2, [r3, #36]	; 0x24
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2253      	movs	r2, #83	; 0x53
 8008c06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	0018      	movs	r0, r3
 8008c0c:	f000 fafb 	bl	8009206 <RTC_EnterInitMode>
 8008c10:	1e03      	subs	r3, r0, #0
 8008c12:	d00d      	beq.n	8008c30 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	22ff      	movs	r2, #255	; 0xff
 8008c1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2221      	movs	r2, #33	; 0x21
 8008c20:	2104      	movs	r1, #4
 8008c22:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2220      	movs	r2, #32
 8008c28:	2100      	movs	r1, #0
 8008c2a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e034      	b.n	8008c9a <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	697a      	ldr	r2, [r7, #20]
 8008c36:	491b      	ldr	r1, [pc, #108]	; (8008ca4 <HAL_RTC_SetDate+0x158>)
 8008c38:	400a      	ands	r2, r1
 8008c3a:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68da      	ldr	r2, [r3, #12]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2180      	movs	r1, #128	; 0x80
 8008c48:	438a      	bics	r2, r1
 8008c4a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	2220      	movs	r2, #32
 8008c54:	4013      	ands	r3, r2
 8008c56:	d113      	bne.n	8008c80 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	0018      	movs	r0, r3
 8008c5c:	f000 faac 	bl	80091b8 <HAL_RTC_WaitForSynchro>
 8008c60:	1e03      	subs	r3, r0, #0
 8008c62:	d00d      	beq.n	8008c80 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	22ff      	movs	r2, #255	; 0xff
 8008c6a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2221      	movs	r2, #33	; 0x21
 8008c70:	2104      	movs	r1, #4
 8008c72:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2220      	movs	r2, #32
 8008c78:	2100      	movs	r1, #0
 8008c7a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e00c      	b.n	8008c9a <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	22ff      	movs	r2, #255	; 0xff
 8008c86:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2221      	movs	r2, #33	; 0x21
 8008c8c:	2101      	movs	r1, #1
 8008c8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2220      	movs	r2, #32
 8008c94:	2100      	movs	r1, #0
 8008c96:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008c98:	2300      	movs	r3, #0
  }
}
 8008c9a:	0018      	movs	r0, r3
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	b007      	add	sp, #28
 8008ca0:	bd90      	pop	{r4, r7, pc}
 8008ca2:	46c0      	nop			; (mov r8, r8)
 8008ca4:	00ffff3f 	.word	0x00ffff3f

08008ca8 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b086      	sub	sp, #24
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	4a21      	ldr	r2, [pc, #132]	; (8008d40 <HAL_RTC_GetDate+0x98>)
 8008cbc:	4013      	ands	r3, r2
 8008cbe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	0c1b      	lsrs	r3, r3, #16
 8008cc4:	b2da      	uxtb	r2, r3
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	0a1b      	lsrs	r3, r3, #8
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	221f      	movs	r2, #31
 8008cd2:	4013      	ands	r3, r2
 8008cd4:	b2da      	uxtb	r2, r3
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	223f      	movs	r2, #63	; 0x3f
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	b2da      	uxtb	r2, r3
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	0b5b      	lsrs	r3, r3, #13
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	2207      	movs	r2, #7
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	b2da      	uxtb	r2, r3
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d11a      	bne.n	8008d34 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	78db      	ldrb	r3, [r3, #3]
 8008d02:	0018      	movs	r0, r3
 8008d04:	f000 fad2 	bl	80092ac <RTC_Bcd2ToByte>
 8008d08:	0003      	movs	r3, r0
 8008d0a:	001a      	movs	r2, r3
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	785b      	ldrb	r3, [r3, #1]
 8008d14:	0018      	movs	r0, r3
 8008d16:	f000 fac9 	bl	80092ac <RTC_Bcd2ToByte>
 8008d1a:	0003      	movs	r3, r0
 8008d1c:	001a      	movs	r2, r3
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	789b      	ldrb	r3, [r3, #2]
 8008d26:	0018      	movs	r0, r3
 8008d28:	f000 fac0 	bl	80092ac <RTC_Bcd2ToByte>
 8008d2c:	0003      	movs	r3, r0
 8008d2e:	001a      	movs	r2, r3
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	0018      	movs	r0, r3
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	b006      	add	sp, #24
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	46c0      	nop			; (mov r8, r8)
 8008d40:	00ffff3f 	.word	0x00ffff3f

08008d44 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008d44:	b590      	push	{r4, r7, lr}
 8008d46:	b089      	sub	sp, #36	; 0x24
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2220      	movs	r2, #32
 8008d54:	5c9b      	ldrb	r3, [r3, r2]
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d101      	bne.n	8008d5e <HAL_RTC_SetAlarm_IT+0x1a>
 8008d5a:	2302      	movs	r3, #2
 8008d5c:	e130      	b.n	8008fc0 <HAL_RTC_SetAlarm_IT+0x27c>
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2220      	movs	r2, #32
 8008d62:	2101      	movs	r1, #1
 8008d64:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2221      	movs	r2, #33	; 0x21
 8008d6a:	2102      	movs	r1, #2
 8008d6c:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d136      	bne.n	8008de2 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	2240      	movs	r2, #64	; 0x40
 8008d7c:	4013      	ands	r3, r2
 8008d7e:	d102      	bne.n	8008d86 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	2200      	movs	r2, #0
 8008d84:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	0018      	movs	r0, r3
 8008d8c:	f000 fa65 	bl	800925a <RTC_ByteToBcd2>
 8008d90:	0003      	movs	r3, r0
 8008d92:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	785b      	ldrb	r3, [r3, #1]
 8008d98:	0018      	movs	r0, r3
 8008d9a:	f000 fa5e 	bl	800925a <RTC_ByteToBcd2>
 8008d9e:	0003      	movs	r3, r0
 8008da0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008da2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	789b      	ldrb	r3, [r3, #2]
 8008da8:	0018      	movs	r0, r3
 8008daa:	f000 fa56 	bl	800925a <RTC_ByteToBcd2>
 8008dae:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008db0:	0022      	movs	r2, r4
 8008db2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	78db      	ldrb	r3, [r3, #3]
 8008db8:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008dba:	431a      	orrs	r2, r3
 8008dbc:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	2220      	movs	r2, #32
 8008dc2:	5c9b      	ldrb	r3, [r3, r2]
 8008dc4:	0018      	movs	r0, r3
 8008dc6:	f000 fa48 	bl	800925a <RTC_ByteToBcd2>
 8008dca:	0003      	movs	r3, r0
 8008dcc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008dce:	0022      	movs	r2, r4
 8008dd0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008dd6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	61fb      	str	r3, [r7, #28]
 8008de0:	e022      	b.n	8008e28 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	2240      	movs	r2, #64	; 0x40
 8008dea:	4013      	ands	r3, r2
 8008dec:	d102      	bne.n	8008df4 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	2200      	movs	r2, #0
 8008df2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	785b      	ldrb	r3, [r3, #1]
 8008dfe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008e00:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008e02:	68ba      	ldr	r2, [r7, #8]
 8008e04:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008e06:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	78db      	ldrb	r3, [r3, #3]
 8008e0c:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008e0e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	2120      	movs	r1, #32
 8008e14:	5c5b      	ldrb	r3, [r3, r1]
 8008e16:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008e18:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008e1e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008e24:	4313      	orrs	r3, r2
 8008e26:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	685a      	ldr	r2, [r3, #4]
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	699b      	ldr	r3, [r3, #24]
 8008e30:	4313      	orrs	r3, r2
 8008e32:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	22ca      	movs	r2, #202	; 0xca
 8008e3a:	625a      	str	r2, [r3, #36]	; 0x24
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2253      	movs	r2, #83	; 0x53
 8008e42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e48:	2380      	movs	r3, #128	; 0x80
 8008e4a:	005b      	lsls	r3, r3, #1
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d14e      	bne.n	8008eee <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	689a      	ldr	r2, [r3, #8]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	495b      	ldr	r1, [pc, #364]	; (8008fc8 <HAL_RTC_SetAlarm_IT+0x284>)
 8008e5c:	400a      	ands	r2, r1
 8008e5e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	68db      	ldr	r3, [r3, #12]
 8008e66:	22ff      	movs	r2, #255	; 0xff
 8008e68:	401a      	ands	r2, r3
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4957      	ldr	r1, [pc, #348]	; (8008fcc <HAL_RTC_SetAlarm_IT+0x288>)
 8008e70:	430a      	orrs	r2, r1
 8008e72:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008e74:	f7fd fb20 	bl	80064b8 <HAL_GetTick>
 8008e78:	0003      	movs	r3, r0
 8008e7a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008e7c:	e016      	b.n	8008eac <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008e7e:	f7fd fb1b 	bl	80064b8 <HAL_GetTick>
 8008e82:	0002      	movs	r2, r0
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	1ad2      	subs	r2, r2, r3
 8008e88:	23fa      	movs	r3, #250	; 0xfa
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d90d      	bls.n	8008eac <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	22ff      	movs	r2, #255	; 0xff
 8008e96:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2221      	movs	r2, #33	; 0x21
 8008e9c:	2103      	movs	r1, #3
 8008e9e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2220      	movs	r2, #32
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008ea8:	2303      	movs	r3, #3
 8008eaa:	e089      	b.n	8008fc0 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	d0e2      	beq.n	8008e7e <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	69fa      	ldr	r2, [r7, #28]
 8008ebe:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	69ba      	ldr	r2, [r7, #24]
 8008ec6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	689a      	ldr	r2, [r3, #8]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2180      	movs	r1, #128	; 0x80
 8008ed4:	0049      	lsls	r1, r1, #1
 8008ed6:	430a      	orrs	r2, r1
 8008ed8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	689a      	ldr	r2, [r3, #8]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2180      	movs	r1, #128	; 0x80
 8008ee6:	0149      	lsls	r1, r1, #5
 8008ee8:	430a      	orrs	r2, r1
 8008eea:	609a      	str	r2, [r3, #8]
 8008eec:	e04d      	b.n	8008f8a <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	689a      	ldr	r2, [r3, #8]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4935      	ldr	r1, [pc, #212]	; (8008fd0 <HAL_RTC_SetAlarm_IT+0x28c>)
 8008efa:	400a      	ands	r2, r1
 8008efc:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	22ff      	movs	r2, #255	; 0xff
 8008f06:	401a      	ands	r2, r3
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4931      	ldr	r1, [pc, #196]	; (8008fd4 <HAL_RTC_SetAlarm_IT+0x290>)
 8008f0e:	430a      	orrs	r2, r1
 8008f10:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008f12:	f7fd fad1 	bl	80064b8 <HAL_GetTick>
 8008f16:	0003      	movs	r3, r0
 8008f18:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008f1a:	e016      	b.n	8008f4a <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008f1c:	f7fd facc 	bl	80064b8 <HAL_GetTick>
 8008f20:	0002      	movs	r2, r0
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	1ad2      	subs	r2, r2, r3
 8008f26:	23fa      	movs	r3, #250	; 0xfa
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d90d      	bls.n	8008f4a <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	22ff      	movs	r2, #255	; 0xff
 8008f34:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2221      	movs	r2, #33	; 0x21
 8008f3a:	2103      	movs	r1, #3
 8008f3c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2220      	movs	r2, #32
 8008f42:	2100      	movs	r1, #0
 8008f44:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008f46:	2303      	movs	r3, #3
 8008f48:	e03a      	b.n	8008fc0 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	2202      	movs	r2, #2
 8008f52:	4013      	ands	r3, r2
 8008f54:	d0e2      	beq.n	8008f1c <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	69fa      	ldr	r2, [r7, #28]
 8008f5c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	69ba      	ldr	r2, [r7, #24]
 8008f64:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	689a      	ldr	r2, [r3, #8]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2180      	movs	r1, #128	; 0x80
 8008f72:	0089      	lsls	r1, r1, #2
 8008f74:	430a      	orrs	r2, r1
 8008f76:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	689a      	ldr	r2, [r3, #8]
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	2180      	movs	r1, #128	; 0x80
 8008f84:	0189      	lsls	r1, r1, #6
 8008f86:	430a      	orrs	r2, r1
 8008f88:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8008f8a:	4b13      	ldr	r3, [pc, #76]	; (8008fd8 <HAL_RTC_SetAlarm_IT+0x294>)
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	4b12      	ldr	r3, [pc, #72]	; (8008fd8 <HAL_RTC_SetAlarm_IT+0x294>)
 8008f90:	2180      	movs	r1, #128	; 0x80
 8008f92:	0289      	lsls	r1, r1, #10
 8008f94:	430a      	orrs	r2, r1
 8008f96:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8008f98:	4b0f      	ldr	r3, [pc, #60]	; (8008fd8 <HAL_RTC_SetAlarm_IT+0x294>)
 8008f9a:	689a      	ldr	r2, [r3, #8]
 8008f9c:	4b0e      	ldr	r3, [pc, #56]	; (8008fd8 <HAL_RTC_SetAlarm_IT+0x294>)
 8008f9e:	2180      	movs	r1, #128	; 0x80
 8008fa0:	0289      	lsls	r1, r1, #10
 8008fa2:	430a      	orrs	r2, r1
 8008fa4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	22ff      	movs	r2, #255	; 0xff
 8008fac:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2221      	movs	r2, #33	; 0x21
 8008fb2:	2101      	movs	r1, #1
 8008fb4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2220      	movs	r2, #32
 8008fba:	2100      	movs	r1, #0
 8008fbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008fbe:	2300      	movs	r3, #0
}
 8008fc0:	0018      	movs	r0, r3
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	b009      	add	sp, #36	; 0x24
 8008fc6:	bd90      	pop	{r4, r7, pc}
 8008fc8:	fffffeff 	.word	0xfffffeff
 8008fcc:	fffffe7f 	.word	0xfffffe7f
 8008fd0:	fffffdff 	.word	0xfffffdff
 8008fd4:	fffffd7f 	.word	0xfffffd7f
 8008fd8:	40010400 	.word	0x40010400

08008fdc <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2220      	movs	r2, #32
 8008fea:	5c9b      	ldrb	r3, [r3, r2]
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d101      	bne.n	8008ff4 <HAL_RTC_DeactivateAlarm+0x18>
 8008ff0:	2302      	movs	r3, #2
 8008ff2:	e086      	b.n	8009102 <HAL_RTC_DeactivateAlarm+0x126>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2220      	movs	r2, #32
 8008ff8:	2101      	movs	r1, #1
 8008ffa:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2221      	movs	r2, #33	; 0x21
 8009000:	2102      	movs	r1, #2
 8009002:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	22ca      	movs	r2, #202	; 0xca
 800900a:	625a      	str	r2, [r3, #36]	; 0x24
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2253      	movs	r2, #83	; 0x53
 8009012:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8009014:	683a      	ldr	r2, [r7, #0]
 8009016:	2380      	movs	r3, #128	; 0x80
 8009018:	005b      	lsls	r3, r3, #1
 800901a:	429a      	cmp	r2, r3
 800901c:	d132      	bne.n	8009084 <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	689a      	ldr	r2, [r3, #8]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4938      	ldr	r1, [pc, #224]	; (800910c <HAL_RTC_DeactivateAlarm+0x130>)
 800902a:	400a      	ands	r2, r1
 800902c:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	689a      	ldr	r2, [r3, #8]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4935      	ldr	r1, [pc, #212]	; (8009110 <HAL_RTC_DeactivateAlarm+0x134>)
 800903a:	400a      	ands	r2, r1
 800903c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800903e:	f7fd fa3b 	bl	80064b8 <HAL_GetTick>
 8009042:	0003      	movs	r3, r0
 8009044:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009046:	e016      	b.n	8009076 <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009048:	f7fd fa36 	bl	80064b8 <HAL_GetTick>
 800904c:	0002      	movs	r2, r0
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	1ad2      	subs	r2, r2, r3
 8009052:	23fa      	movs	r3, #250	; 0xfa
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	429a      	cmp	r2, r3
 8009058:	d90d      	bls.n	8009076 <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	22ff      	movs	r2, #255	; 0xff
 8009060:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2221      	movs	r2, #33	; 0x21
 8009066:	2103      	movs	r1, #3
 8009068:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2220      	movs	r2, #32
 800906e:	2100      	movs	r1, #0
 8009070:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009072:	2303      	movs	r3, #3
 8009074:	e045      	b.n	8009102 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	2201      	movs	r2, #1
 800907e:	4013      	ands	r3, r2
 8009080:	d0e2      	beq.n	8009048 <HAL_RTC_DeactivateAlarm+0x6c>
 8009082:	e031      	b.n	80090e8 <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	689a      	ldr	r2, [r3, #8]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4921      	ldr	r1, [pc, #132]	; (8009114 <HAL_RTC_DeactivateAlarm+0x138>)
 8009090:	400a      	ands	r2, r1
 8009092:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	689a      	ldr	r2, [r3, #8]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	491e      	ldr	r1, [pc, #120]	; (8009118 <HAL_RTC_DeactivateAlarm+0x13c>)
 80090a0:	400a      	ands	r2, r1
 80090a2:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80090a4:	f7fd fa08 	bl	80064b8 <HAL_GetTick>
 80090a8:	0003      	movs	r3, r0
 80090aa:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80090ac:	e016      	b.n	80090dc <HAL_RTC_DeactivateAlarm+0x100>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80090ae:	f7fd fa03 	bl	80064b8 <HAL_GetTick>
 80090b2:	0002      	movs	r2, r0
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	1ad2      	subs	r2, r2, r3
 80090b8:	23fa      	movs	r3, #250	; 0xfa
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	429a      	cmp	r2, r3
 80090be:	d90d      	bls.n	80090dc <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	22ff      	movs	r2, #255	; 0xff
 80090c6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2221      	movs	r2, #33	; 0x21
 80090cc:	2103      	movs	r1, #3
 80090ce:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2220      	movs	r2, #32
 80090d4:	2100      	movs	r1, #0
 80090d6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80090d8:	2303      	movs	r3, #3
 80090da:	e012      	b.n	8009102 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	2202      	movs	r2, #2
 80090e4:	4013      	ands	r3, r2
 80090e6:	d0e2      	beq.n	80090ae <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	22ff      	movs	r2, #255	; 0xff
 80090ee:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2221      	movs	r2, #33	; 0x21
 80090f4:	2101      	movs	r1, #1
 80090f6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2220      	movs	r2, #32
 80090fc:	2100      	movs	r1, #0
 80090fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009100:	2300      	movs	r3, #0
}
 8009102:	0018      	movs	r0, r3
 8009104:	46bd      	mov	sp, r7
 8009106:	b004      	add	sp, #16
 8009108:	bd80      	pop	{r7, pc}
 800910a:	46c0      	nop			; (mov r8, r8)
 800910c:	fffffeff 	.word	0xfffffeff
 8009110:	ffffefff 	.word	0xffffefff
 8009114:	fffffdff 	.word	0xfffffdff
 8009118:	ffffdfff 	.word	0xffffdfff

0800911c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	689a      	ldr	r2, [r3, #8]
 800912a:	2380      	movs	r3, #128	; 0x80
 800912c:	015b      	lsls	r3, r3, #5
 800912e:	4013      	ands	r3, r2
 8009130:	d014      	beq.n	800915c <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	68da      	ldr	r2, [r3, #12]
 8009138:	2380      	movs	r3, #128	; 0x80
 800913a:	005b      	lsls	r3, r3, #1
 800913c:	4013      	ands	r3, r2
 800913e:	d00d      	beq.n	800915c <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	0018      	movs	r0, r3
 8009144:	f7f9 ffb8 	bl	80030b8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	22ff      	movs	r2, #255	; 0xff
 8009150:	401a      	ands	r2, r3
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4915      	ldr	r1, [pc, #84]	; (80091ac <HAL_RTC_AlarmIRQHandler+0x90>)
 8009158:	430a      	orrs	r2, r1
 800915a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	689a      	ldr	r2, [r3, #8]
 8009162:	2380      	movs	r3, #128	; 0x80
 8009164:	019b      	lsls	r3, r3, #6
 8009166:	4013      	ands	r3, r2
 8009168:	d014      	beq.n	8009194 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	68da      	ldr	r2, [r3, #12]
 8009170:	2380      	movs	r3, #128	; 0x80
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	4013      	ands	r3, r2
 8009176:	d00d      	beq.n	8009194 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	0018      	movs	r0, r3
 800917c:	f7f9 ffb6 	bl	80030ec <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	22ff      	movs	r2, #255	; 0xff
 8009188:	401a      	ands	r2, r3
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4908      	ldr	r1, [pc, #32]	; (80091b0 <HAL_RTC_AlarmIRQHandler+0x94>)
 8009190:	430a      	orrs	r2, r1
 8009192:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8009194:	4b07      	ldr	r3, [pc, #28]	; (80091b4 <HAL_RTC_AlarmIRQHandler+0x98>)
 8009196:	2280      	movs	r2, #128	; 0x80
 8009198:	0292      	lsls	r2, r2, #10
 800919a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2221      	movs	r2, #33	; 0x21
 80091a0:	2101      	movs	r1, #1
 80091a2:	5499      	strb	r1, [r3, r2]
}
 80091a4:	46c0      	nop			; (mov r8, r8)
 80091a6:	46bd      	mov	sp, r7
 80091a8:	b002      	add	sp, #8
 80091aa:	bd80      	pop	{r7, pc}
 80091ac:	fffffe7f 	.word	0xfffffe7f
 80091b0:	fffffd7f 	.word	0xfffffd7f
 80091b4:	40010400 	.word	0x40010400

080091b8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	68da      	ldr	r2, [r3, #12]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	21a0      	movs	r1, #160	; 0xa0
 80091cc:	438a      	bics	r2, r1
 80091ce:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80091d0:	f7fd f972 	bl	80064b8 <HAL_GetTick>
 80091d4:	0003      	movs	r3, r0
 80091d6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80091d8:	e00a      	b.n	80091f0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80091da:	f7fd f96d 	bl	80064b8 <HAL_GetTick>
 80091de:	0002      	movs	r2, r0
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	1ad2      	subs	r2, r2, r3
 80091e4:	23fa      	movs	r3, #250	; 0xfa
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d901      	bls.n	80091f0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80091ec:	2303      	movs	r3, #3
 80091ee:	e006      	b.n	80091fe <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	2220      	movs	r2, #32
 80091f8:	4013      	ands	r3, r2
 80091fa:	d0ee      	beq.n	80091da <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	0018      	movs	r0, r3
 8009200:	46bd      	mov	sp, r7
 8009202:	b004      	add	sp, #16
 8009204:	bd80      	pop	{r7, pc}

08009206 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b084      	sub	sp, #16
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	2240      	movs	r2, #64	; 0x40
 8009216:	4013      	ands	r3, r2
 8009218:	d11a      	bne.n	8009250 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2201      	movs	r2, #1
 8009220:	4252      	negs	r2, r2
 8009222:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009224:	f7fd f948 	bl	80064b8 <HAL_GetTick>
 8009228:	0003      	movs	r3, r0
 800922a:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800922c:	e00a      	b.n	8009244 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800922e:	f7fd f943 	bl	80064b8 <HAL_GetTick>
 8009232:	0002      	movs	r2, r0
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	1ad2      	subs	r2, r2, r3
 8009238:	23fa      	movs	r3, #250	; 0xfa
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	429a      	cmp	r2, r3
 800923e:	d901      	bls.n	8009244 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8009240:	2303      	movs	r3, #3
 8009242:	e006      	b.n	8009252 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	2240      	movs	r2, #64	; 0x40
 800924c:	4013      	ands	r3, r2
 800924e:	d0ee      	beq.n	800922e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8009250:	2300      	movs	r3, #0
}
 8009252:	0018      	movs	r0, r3
 8009254:	46bd      	mov	sp, r7
 8009256:	b004      	add	sp, #16
 8009258:	bd80      	pop	{r7, pc}

0800925a <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b084      	sub	sp, #16
 800925e:	af00      	add	r7, sp, #0
 8009260:	0002      	movs	r2, r0
 8009262:	1dfb      	adds	r3, r7, #7
 8009264:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8009266:	2300      	movs	r3, #0
 8009268:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800926a:	230b      	movs	r3, #11
 800926c:	18fb      	adds	r3, r7, r3
 800926e:	1dfa      	adds	r2, r7, #7
 8009270:	7812      	ldrb	r2, [r2, #0]
 8009272:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8009274:	e008      	b.n	8009288 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	3301      	adds	r3, #1
 800927a:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800927c:	220b      	movs	r2, #11
 800927e:	18bb      	adds	r3, r7, r2
 8009280:	18ba      	adds	r2, r7, r2
 8009282:	7812      	ldrb	r2, [r2, #0]
 8009284:	3a0a      	subs	r2, #10
 8009286:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8009288:	230b      	movs	r3, #11
 800928a:	18fb      	adds	r3, r7, r3
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	2b09      	cmp	r3, #9
 8009290:	d8f1      	bhi.n	8009276 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	b2db      	uxtb	r3, r3
 8009296:	011b      	lsls	r3, r3, #4
 8009298:	b2da      	uxtb	r2, r3
 800929a:	230b      	movs	r3, #11
 800929c:	18fb      	adds	r3, r7, r3
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	4313      	orrs	r3, r2
 80092a2:	b2db      	uxtb	r3, r3
}
 80092a4:	0018      	movs	r0, r3
 80092a6:	46bd      	mov	sp, r7
 80092a8:	b004      	add	sp, #16
 80092aa:	bd80      	pop	{r7, pc}

080092ac <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	0002      	movs	r2, r0
 80092b4:	1dfb      	adds	r3, r7, #7
 80092b6:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80092b8:	1dfb      	adds	r3, r7, #7
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	091b      	lsrs	r3, r3, #4
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	001a      	movs	r2, r3
 80092c2:	0013      	movs	r3, r2
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	189b      	adds	r3, r3, r2
 80092c8:	005b      	lsls	r3, r3, #1
 80092ca:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	b2da      	uxtb	r2, r3
 80092d0:	1dfb      	adds	r3, r7, #7
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	210f      	movs	r1, #15
 80092d6:	400b      	ands	r3, r1
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	18d3      	adds	r3, r2, r3
 80092dc:	b2db      	uxtb	r3, r3
}
 80092de:	0018      	movs	r0, r3
 80092e0:	46bd      	mov	sp, r7
 80092e2:	b004      	add	sp, #16
 80092e4:	bd80      	pop	{r7, pc}

080092e6 <HAL_RTCEx_SetSmoothCalib>:
  *         must be equal to SMOOTHCALIB_PLUSPULSES_RESET and the field
  *         SmoothCalibMinusPulsesValue mut be equal to 0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef *hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b086      	sub	sp, #24
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	60f8      	str	r0, [r7, #12]
 80092ee:	60b9      	str	r1, [r7, #8]
 80092f0:	607a      	str	r2, [r7, #4]
 80092f2:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2220      	movs	r2, #32
 80092f8:	5c9b      	ldrb	r3, [r3, r2]
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d101      	bne.n	8009302 <HAL_RTCEx_SetSmoothCalib+0x1c>
 80092fe:	2302      	movs	r3, #2
 8009300:	e04f      	b.n	80093a2 <HAL_RTCEx_SetSmoothCalib+0xbc>
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2220      	movs	r2, #32
 8009306:	2101      	movs	r1, #1
 8009308:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2221      	movs	r2, #33	; 0x21
 800930e:	2102      	movs	r1, #2
 8009310:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	22ca      	movs	r2, #202	; 0xca
 8009318:	625a      	str	r2, [r3, #36]	; 0x24
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2253      	movs	r2, #83	; 0x53
 8009320:	625a      	str	r2, [r3, #36]	; 0x24

  /* check if a calibration is pending*/
  if ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	68da      	ldr	r2, [r3, #12]
 8009328:	2380      	movs	r3, #128	; 0x80
 800932a:	025b      	lsls	r3, r3, #9
 800932c:	4013      	ands	r3, r2
 800932e:	d022      	beq.n	8009376 <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 8009330:	f7fd f8c2 	bl	80064b8 <HAL_GetTick>
 8009334:	0003      	movs	r3, r0
 8009336:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 8009338:	e016      	b.n	8009368 <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800933a:	f7fd f8bd 	bl	80064b8 <HAL_GetTick>
 800933e:	0002      	movs	r2, r0
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	1ad2      	subs	r2, r2, r3
 8009344:	23fa      	movs	r3, #250	; 0xfa
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	429a      	cmp	r2, r3
 800934a:	d90d      	bls.n	8009368 <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	22ff      	movs	r2, #255	; 0xff
 8009352:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2221      	movs	r2, #33	; 0x21
 8009358:	2103      	movs	r1, #3
 800935a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2220      	movs	r2, #32
 8009360:	2100      	movs	r1, #0
 8009362:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009364:	2303      	movs	r3, #3
 8009366:	e01c      	b.n	80093a2 <HAL_RTCEx_SetSmoothCalib+0xbc>
    while ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	68da      	ldr	r2, [r3, #12]
 800936e:	2380      	movs	r3, #128	; 0x80
 8009370:	025b      	lsls	r3, r3, #9
 8009372:	4013      	ands	r3, r2
 8009374:	d1e1      	bne.n	800933a <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 8009376:	68ba      	ldr	r2, [r7, #8]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	431a      	orrs	r2, r3
 800937c:	0011      	movs	r1, r2
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	683a      	ldr	r2, [r7, #0]
 8009384:	430a      	orrs	r2, r1
 8009386:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	22ff      	movs	r2, #255	; 0xff
 800938e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2221      	movs	r2, #33	; 0x21
 8009394:	2101      	movs	r1, #1
 8009396:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2220      	movs	r2, #32
 800939c:	2100      	movs	r1, #0
 800939e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	0018      	movs	r0, r3
 80093a4:	46bd      	mov	sp, r7
 80093a6:	b006      	add	sp, #24
 80093a8:	bd80      	pop	{r7, pc}
	...

080093ac <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef *hrtc, uint32_t CalibOutput)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2220      	movs	r2, #32
 80093ba:	5c9b      	ldrb	r3, [r3, r2]
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d101      	bne.n	80093c4 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 80093c0:	2302      	movs	r3, #2
 80093c2:	e035      	b.n	8009430 <HAL_RTCEx_SetCalibrationOutPut+0x84>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2220      	movs	r2, #32
 80093c8:	2101      	movs	r1, #1
 80093ca:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2221      	movs	r2, #33	; 0x21
 80093d0:	2102      	movs	r1, #2
 80093d2:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	22ca      	movs	r2, #202	; 0xca
 80093da:	625a      	str	r2, [r3, #36]	; 0x24
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2253      	movs	r2, #83	; 0x53
 80093e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	689a      	ldr	r2, [r3, #8]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4912      	ldr	r1, [pc, #72]	; (8009438 <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 80093f0:	400a      	ands	r2, r1
 80093f2:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	6899      	ldr	r1, [r3, #8]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	683a      	ldr	r2, [r7, #0]
 8009400:	430a      	orrs	r2, r1
 8009402:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	689a      	ldr	r2, [r3, #8]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2180      	movs	r1, #128	; 0x80
 8009410:	0409      	lsls	r1, r1, #16
 8009412:	430a      	orrs	r2, r1
 8009414:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	22ff      	movs	r2, #255	; 0xff
 800941c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2221      	movs	r2, #33	; 0x21
 8009422:	2101      	movs	r1, #1
 8009424:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2220      	movs	r2, #32
 800942a:	2100      	movs	r1, #0
 800942c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800942e:	2300      	movs	r3, #0
}
 8009430:	0018      	movs	r0, r3
 8009432:	46bd      	mov	sp, r7
 8009434:	b002      	add	sp, #8
 8009436:	bd80      	pop	{r7, pc}
 8009438:	fff7ffff 	.word	0xfff7ffff

0800943c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d101      	bne.n	800944e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	e059      	b.n	8009502 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2200      	movs	r2, #0
 8009452:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2251      	movs	r2, #81	; 0x51
 8009458:	5c9b      	ldrb	r3, [r3, r2]
 800945a:	b2db      	uxtb	r3, r3
 800945c:	2b00      	cmp	r3, #0
 800945e:	d107      	bne.n	8009470 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2250      	movs	r2, #80	; 0x50
 8009464:	2100      	movs	r1, #0
 8009466:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	0018      	movs	r0, r3
 800946c:	f7fa fe24 	bl	80040b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2251      	movs	r2, #81	; 0x51
 8009474:	2102      	movs	r1, #2
 8009476:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	2140      	movs	r1, #64	; 0x40
 8009484:	438a      	bics	r2, r1
 8009486:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	685a      	ldr	r2, [r3, #4]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	431a      	orrs	r2, r3
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	431a      	orrs	r2, r3
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	691b      	ldr	r3, [r3, #16]
 800949c:	431a      	orrs	r2, r3
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	695b      	ldr	r3, [r3, #20]
 80094a2:	431a      	orrs	r2, r3
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6999      	ldr	r1, [r3, #24]
 80094a8:	2380      	movs	r3, #128	; 0x80
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	400b      	ands	r3, r1
 80094ae:	431a      	orrs	r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	69db      	ldr	r3, [r3, #28]
 80094b4:	431a      	orrs	r2, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6a1b      	ldr	r3, [r3, #32]
 80094ba:	431a      	orrs	r2, r3
 80094bc:	0011      	movs	r1, r2
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	430a      	orrs	r2, r1
 80094c8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	699b      	ldr	r3, [r3, #24]
 80094ce:	0c1b      	lsrs	r3, r3, #16
 80094d0:	2204      	movs	r2, #4
 80094d2:	4013      	ands	r3, r2
 80094d4:	0019      	movs	r1, r3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	430a      	orrs	r2, r1
 80094e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	69da      	ldr	r2, [r3, #28]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4907      	ldr	r1, [pc, #28]	; (800950c <HAL_SPI_Init+0xd0>)
 80094ee:	400a      	ands	r2, r1
 80094f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2200      	movs	r2, #0
 80094f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2251      	movs	r2, #81	; 0x51
 80094fc:	2101      	movs	r1, #1
 80094fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009500:	2300      	movs	r3, #0
}
 8009502:	0018      	movs	r0, r3
 8009504:	46bd      	mov	sp, r7
 8009506:	b002      	add	sp, #8
 8009508:	bd80      	pop	{r7, pc}
 800950a:	46c0      	nop			; (mov r8, r8)
 800950c:	fffff7ff 	.word	0xfffff7ff

08009510 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b088      	sub	sp, #32
 8009514:	af00      	add	r7, sp, #0
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	603b      	str	r3, [r7, #0]
 800951c:	1dbb      	adds	r3, r7, #6
 800951e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009520:	231f      	movs	r3, #31
 8009522:	18fb      	adds	r3, r7, r3
 8009524:	2200      	movs	r2, #0
 8009526:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2250      	movs	r2, #80	; 0x50
 800952c:	5c9b      	ldrb	r3, [r3, r2]
 800952e:	2b01      	cmp	r3, #1
 8009530:	d101      	bne.n	8009536 <HAL_SPI_Transmit+0x26>
 8009532:	2302      	movs	r3, #2
 8009534:	e136      	b.n	80097a4 <HAL_SPI_Transmit+0x294>
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2250      	movs	r2, #80	; 0x50
 800953a:	2101      	movs	r1, #1
 800953c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800953e:	f7fc ffbb 	bl	80064b8 <HAL_GetTick>
 8009542:	0003      	movs	r3, r0
 8009544:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009546:	2316      	movs	r3, #22
 8009548:	18fb      	adds	r3, r7, r3
 800954a:	1dba      	adds	r2, r7, #6
 800954c:	8812      	ldrh	r2, [r2, #0]
 800954e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2251      	movs	r2, #81	; 0x51
 8009554:	5c9b      	ldrb	r3, [r3, r2]
 8009556:	b2db      	uxtb	r3, r3
 8009558:	2b01      	cmp	r3, #1
 800955a:	d004      	beq.n	8009566 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800955c:	231f      	movs	r3, #31
 800955e:	18fb      	adds	r3, r7, r3
 8009560:	2202      	movs	r2, #2
 8009562:	701a      	strb	r2, [r3, #0]
    goto error;
 8009564:	e113      	b.n	800978e <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d003      	beq.n	8009574 <HAL_SPI_Transmit+0x64>
 800956c:	1dbb      	adds	r3, r7, #6
 800956e:	881b      	ldrh	r3, [r3, #0]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d104      	bne.n	800957e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8009574:	231f      	movs	r3, #31
 8009576:	18fb      	adds	r3, r7, r3
 8009578:	2201      	movs	r2, #1
 800957a:	701a      	strb	r2, [r3, #0]
    goto error;
 800957c:	e107      	b.n	800978e <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2251      	movs	r2, #81	; 0x51
 8009582:	2103      	movs	r1, #3
 8009584:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2200      	movs	r2, #0
 800958a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	68ba      	ldr	r2, [r7, #8]
 8009590:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	1dba      	adds	r2, r7, #6
 8009596:	8812      	ldrh	r2, [r2, #0]
 8009598:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	1dba      	adds	r2, r7, #6
 800959e:	8812      	ldrh	r2, [r2, #0]
 80095a0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2200      	movs	r2, #0
 80095a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2200      	movs	r2, #0
 80095ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2200      	movs	r2, #0
 80095b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2200      	movs	r2, #0
 80095b8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2200      	movs	r2, #0
 80095be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	689a      	ldr	r2, [r3, #8]
 80095c4:	2380      	movs	r3, #128	; 0x80
 80095c6:	021b      	lsls	r3, r3, #8
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d108      	bne.n	80095de <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	2180      	movs	r1, #128	; 0x80
 80095d8:	01c9      	lsls	r1, r1, #7
 80095da:	430a      	orrs	r2, r1
 80095dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2240      	movs	r2, #64	; 0x40
 80095e6:	4013      	ands	r3, r2
 80095e8:	2b40      	cmp	r3, #64	; 0x40
 80095ea:	d007      	beq.n	80095fc <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2140      	movs	r1, #64	; 0x40
 80095f8:	430a      	orrs	r2, r1
 80095fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	68da      	ldr	r2, [r3, #12]
 8009600:	2380      	movs	r3, #128	; 0x80
 8009602:	011b      	lsls	r3, r3, #4
 8009604:	429a      	cmp	r2, r3
 8009606:	d14e      	bne.n	80096a6 <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d004      	beq.n	800961a <HAL_SPI_Transmit+0x10a>
 8009610:	2316      	movs	r3, #22
 8009612:	18fb      	adds	r3, r7, r3
 8009614:	881b      	ldrh	r3, [r3, #0]
 8009616:	2b01      	cmp	r3, #1
 8009618:	d13f      	bne.n	800969a <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800961e:	881a      	ldrh	r2, [r3, #0]
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800962a:	1c9a      	adds	r2, r3, #2
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009634:	b29b      	uxth	r3, r3
 8009636:	3b01      	subs	r3, #1
 8009638:	b29a      	uxth	r2, r3
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800963e:	e02c      	b.n	800969a <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	689b      	ldr	r3, [r3, #8]
 8009646:	2202      	movs	r2, #2
 8009648:	4013      	ands	r3, r2
 800964a:	2b02      	cmp	r3, #2
 800964c:	d112      	bne.n	8009674 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009652:	881a      	ldrh	r2, [r3, #0]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800965e:	1c9a      	adds	r2, r3, #2
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009668:	b29b      	uxth	r3, r3
 800966a:	3b01      	subs	r3, #1
 800966c:	b29a      	uxth	r2, r3
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	86da      	strh	r2, [r3, #54]	; 0x36
 8009672:	e012      	b.n	800969a <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009674:	f7fc ff20 	bl	80064b8 <HAL_GetTick>
 8009678:	0002      	movs	r2, r0
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	1ad3      	subs	r3, r2, r3
 800967e:	683a      	ldr	r2, [r7, #0]
 8009680:	429a      	cmp	r2, r3
 8009682:	d802      	bhi.n	800968a <HAL_SPI_Transmit+0x17a>
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	3301      	adds	r3, #1
 8009688:	d102      	bne.n	8009690 <HAL_SPI_Transmit+0x180>
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d104      	bne.n	800969a <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 8009690:	231f      	movs	r3, #31
 8009692:	18fb      	adds	r3, r7, r3
 8009694:	2203      	movs	r2, #3
 8009696:	701a      	strb	r2, [r3, #0]
          goto error;
 8009698:	e079      	b.n	800978e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800969e:	b29b      	uxth	r3, r3
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d1cd      	bne.n	8009640 <HAL_SPI_Transmit+0x130>
 80096a4:	e04f      	b.n	8009746 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d004      	beq.n	80096b8 <HAL_SPI_Transmit+0x1a8>
 80096ae:	2316      	movs	r3, #22
 80096b0:	18fb      	adds	r3, r7, r3
 80096b2:	881b      	ldrh	r3, [r3, #0]
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d141      	bne.n	800973c <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	330c      	adds	r3, #12
 80096c2:	7812      	ldrb	r2, [r2, #0]
 80096c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ca:	1c5a      	adds	r2, r3, #1
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	3b01      	subs	r3, #1
 80096d8:	b29a      	uxth	r2, r3
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80096de:	e02d      	b.n	800973c <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	2202      	movs	r2, #2
 80096e8:	4013      	ands	r3, r2
 80096ea:	2b02      	cmp	r3, #2
 80096ec:	d113      	bne.n	8009716 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	330c      	adds	r3, #12
 80096f8:	7812      	ldrb	r2, [r2, #0]
 80096fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009700:	1c5a      	adds	r2, r3, #1
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800970a:	b29b      	uxth	r3, r3
 800970c:	3b01      	subs	r3, #1
 800970e:	b29a      	uxth	r2, r3
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	86da      	strh	r2, [r3, #54]	; 0x36
 8009714:	e012      	b.n	800973c <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009716:	f7fc fecf 	bl	80064b8 <HAL_GetTick>
 800971a:	0002      	movs	r2, r0
 800971c:	69bb      	ldr	r3, [r7, #24]
 800971e:	1ad3      	subs	r3, r2, r3
 8009720:	683a      	ldr	r2, [r7, #0]
 8009722:	429a      	cmp	r2, r3
 8009724:	d802      	bhi.n	800972c <HAL_SPI_Transmit+0x21c>
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	3301      	adds	r3, #1
 800972a:	d102      	bne.n	8009732 <HAL_SPI_Transmit+0x222>
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d104      	bne.n	800973c <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8009732:	231f      	movs	r3, #31
 8009734:	18fb      	adds	r3, r7, r3
 8009736:	2203      	movs	r2, #3
 8009738:	701a      	strb	r2, [r3, #0]
          goto error;
 800973a:	e028      	b.n	800978e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009740:	b29b      	uxth	r3, r3
 8009742:	2b00      	cmp	r3, #0
 8009744:	d1cc      	bne.n	80096e0 <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009746:	69ba      	ldr	r2, [r7, #24]
 8009748:	6839      	ldr	r1, [r7, #0]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	0018      	movs	r0, r3
 800974e:	f000 fa99 	bl	8009c84 <SPI_EndRxTxTransaction>
 8009752:	1e03      	subs	r3, r0, #0
 8009754:	d002      	beq.n	800975c <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2220      	movs	r2, #32
 800975a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d10a      	bne.n	800977a <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009764:	2300      	movs	r3, #0
 8009766:	613b      	str	r3, [r7, #16]
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	613b      	str	r3, [r7, #16]
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	689b      	ldr	r3, [r3, #8]
 8009776:	613b      	str	r3, [r7, #16]
 8009778:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800977e:	2b00      	cmp	r3, #0
 8009780:	d004      	beq.n	800978c <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8009782:	231f      	movs	r3, #31
 8009784:	18fb      	adds	r3, r7, r3
 8009786:	2201      	movs	r2, #1
 8009788:	701a      	strb	r2, [r3, #0]
 800978a:	e000      	b.n	800978e <HAL_SPI_Transmit+0x27e>
  }

error:
 800978c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2251      	movs	r2, #81	; 0x51
 8009792:	2101      	movs	r1, #1
 8009794:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2250      	movs	r2, #80	; 0x50
 800979a:	2100      	movs	r1, #0
 800979c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800979e:	231f      	movs	r3, #31
 80097a0:	18fb      	adds	r3, r7, r3
 80097a2:	781b      	ldrb	r3, [r3, #0]
}
 80097a4:	0018      	movs	r0, r3
 80097a6:	46bd      	mov	sp, r7
 80097a8:	b008      	add	sp, #32
 80097aa:	bd80      	pop	{r7, pc}

080097ac <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b086      	sub	sp, #24
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	1dbb      	adds	r3, r7, #6
 80097b8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80097ba:	2317      	movs	r3, #23
 80097bc:	18fb      	adds	r3, r7, r3
 80097be:	2200      	movs	r2, #0
 80097c0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2250      	movs	r2, #80	; 0x50
 80097c6:	5c9b      	ldrb	r3, [r3, r2]
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d101      	bne.n	80097d0 <HAL_SPI_Transmit_IT+0x24>
 80097cc:	2302      	movs	r3, #2
 80097ce:	e072      	b.n	80098b6 <HAL_SPI_Transmit_IT+0x10a>
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2250      	movs	r2, #80	; 0x50
 80097d4:	2101      	movs	r1, #1
 80097d6:	5499      	strb	r1, [r3, r2]

  if ((pData == NULL) || (Size == 0U))
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d003      	beq.n	80097e6 <HAL_SPI_Transmit_IT+0x3a>
 80097de:	1dbb      	adds	r3, r7, #6
 80097e0:	881b      	ldrh	r3, [r3, #0]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d104      	bne.n	80097f0 <HAL_SPI_Transmit_IT+0x44>
  {
    errorcode = HAL_ERROR;
 80097e6:	2317      	movs	r3, #23
 80097e8:	18fb      	adds	r3, r7, r3
 80097ea:	2201      	movs	r2, #1
 80097ec:	701a      	strb	r2, [r3, #0]
    goto error;
 80097ee:	e05b      	b.n	80098a8 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2251      	movs	r2, #81	; 0x51
 80097f4:	5c9b      	ldrb	r3, [r3, r2]
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d004      	beq.n	8009806 <HAL_SPI_Transmit_IT+0x5a>
  {
    errorcode = HAL_BUSY;
 80097fc:	2317      	movs	r3, #23
 80097fe:	18fb      	adds	r3, r7, r3
 8009800:	2202      	movs	r2, #2
 8009802:	701a      	strb	r2, [r3, #0]
    goto error;
 8009804:	e050      	b.n	80098a8 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2251      	movs	r2, #81	; 0x51
 800980a:	2103      	movs	r1, #3
 800980c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2200      	movs	r2, #0
 8009812:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	68ba      	ldr	r2, [r7, #8]
 8009818:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	1dba      	adds	r2, r7, #6
 800981e:	8812      	ldrh	r2, [r2, #0]
 8009820:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	1dba      	adds	r2, r7, #6
 8009826:	8812      	ldrh	r2, [r2, #0]
 8009828:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2200      	movs	r2, #0
 800982e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2200      	movs	r2, #0
 8009834:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2200      	movs	r2, #0
 800983a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2200      	movs	r2, #0
 8009840:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d003      	beq.n	8009852 <HAL_SPI_Transmit_IT+0xa6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	4a1c      	ldr	r2, [pc, #112]	; (80098c0 <HAL_SPI_Transmit_IT+0x114>)
 800984e:	645a      	str	r2, [r3, #68]	; 0x44
 8009850:	e002      	b.n	8009858 <HAL_SPI_Transmit_IT+0xac>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	4a1b      	ldr	r2, [pc, #108]	; (80098c4 <HAL_SPI_Transmit_IT+0x118>)
 8009856:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	689a      	ldr	r2, [r3, #8]
 800985c:	2380      	movs	r3, #128	; 0x80
 800985e:	021b      	lsls	r3, r3, #8
 8009860:	429a      	cmp	r2, r3
 8009862:	d108      	bne.n	8009876 <HAL_SPI_Transmit_IT+0xca>
  {
    SPI_1LINE_TX(hspi);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	2180      	movs	r1, #128	; 0x80
 8009870:	01c9      	lsls	r1, r1, #7
 8009872:	430a      	orrs	r2, r1
 8009874:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	685a      	ldr	r2, [r3, #4]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	21a0      	movs	r1, #160	; 0xa0
 8009882:	430a      	orrs	r2, r1
 8009884:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2240      	movs	r2, #64	; 0x40
 800988e:	4013      	ands	r3, r2
 8009890:	2b40      	cmp	r3, #64	; 0x40
 8009892:	d008      	beq.n	80098a6 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	2140      	movs	r1, #64	; 0x40
 80098a0:	430a      	orrs	r2, r1
 80098a2:	601a      	str	r2, [r3, #0]
 80098a4:	e000      	b.n	80098a8 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 80098a6:	46c0      	nop			; (mov r8, r8)
  __HAL_UNLOCK(hspi);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2250      	movs	r2, #80	; 0x50
 80098ac:	2100      	movs	r1, #0
 80098ae:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80098b0:	2317      	movs	r3, #23
 80098b2:	18fb      	adds	r3, r7, r3
 80098b4:	781b      	ldrb	r3, [r3, #0]
}
 80098b6:	0018      	movs	r0, r3
 80098b8:	46bd      	mov	sp, r7
 80098ba:	b006      	add	sp, #24
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	46c0      	nop			; (mov r8, r8)
 80098c0:	08009b5f 	.word	0x08009b5f
 80098c4:	08009b17 	.word	0x08009b17

080098c8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b088      	sub	sp, #32
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80098e0:	69bb      	ldr	r3, [r7, #24]
 80098e2:	099b      	lsrs	r3, r3, #6
 80098e4:	001a      	movs	r2, r3
 80098e6:	2301      	movs	r3, #1
 80098e8:	4013      	ands	r3, r2
 80098ea:	d10f      	bne.n	800990c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80098ec:	69bb      	ldr	r3, [r7, #24]
 80098ee:	2201      	movs	r2, #1
 80098f0:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80098f2:	d00b      	beq.n	800990c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80098f4:	69fb      	ldr	r3, [r7, #28]
 80098f6:	099b      	lsrs	r3, r3, #6
 80098f8:	001a      	movs	r2, r3
 80098fa:	2301      	movs	r3, #1
 80098fc:	4013      	ands	r3, r2
 80098fe:	d005      	beq.n	800990c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	0010      	movs	r0, r2
 8009908:	4798      	blx	r3
    return;
 800990a:	e0d6      	b.n	8009aba <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800990c:	69bb      	ldr	r3, [r7, #24]
 800990e:	085b      	lsrs	r3, r3, #1
 8009910:	001a      	movs	r2, r3
 8009912:	2301      	movs	r3, #1
 8009914:	4013      	ands	r3, r2
 8009916:	d00b      	beq.n	8009930 <HAL_SPI_IRQHandler+0x68>
 8009918:	69fb      	ldr	r3, [r7, #28]
 800991a:	09db      	lsrs	r3, r3, #7
 800991c:	001a      	movs	r2, r3
 800991e:	2301      	movs	r3, #1
 8009920:	4013      	ands	r3, r2
 8009922:	d005      	beq.n	8009930 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	0010      	movs	r0, r2
 800992c:	4798      	blx	r3
    return;
 800992e:	e0c4      	b.n	8009aba <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009930:	69bb      	ldr	r3, [r7, #24]
 8009932:	095b      	lsrs	r3, r3, #5
 8009934:	001a      	movs	r2, r3
 8009936:	2301      	movs	r3, #1
 8009938:	4013      	ands	r3, r2
 800993a:	d10c      	bne.n	8009956 <HAL_SPI_IRQHandler+0x8e>
 800993c:	69bb      	ldr	r3, [r7, #24]
 800993e:	099b      	lsrs	r3, r3, #6
 8009940:	001a      	movs	r2, r3
 8009942:	2301      	movs	r3, #1
 8009944:	4013      	ands	r3, r2
 8009946:	d106      	bne.n	8009956 <HAL_SPI_IRQHandler+0x8e>
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	0a1b      	lsrs	r3, r3, #8
 800994c:	001a      	movs	r2, r3
 800994e:	2301      	movs	r3, #1
 8009950:	4013      	ands	r3, r2
 8009952:	d100      	bne.n	8009956 <HAL_SPI_IRQHandler+0x8e>
 8009954:	e0b1      	b.n	8009aba <HAL_SPI_IRQHandler+0x1f2>
 8009956:	69fb      	ldr	r3, [r7, #28]
 8009958:	095b      	lsrs	r3, r3, #5
 800995a:	001a      	movs	r2, r3
 800995c:	2301      	movs	r3, #1
 800995e:	4013      	ands	r3, r2
 8009960:	d100      	bne.n	8009964 <HAL_SPI_IRQHandler+0x9c>
 8009962:	e0aa      	b.n	8009aba <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009964:	69bb      	ldr	r3, [r7, #24]
 8009966:	099b      	lsrs	r3, r3, #6
 8009968:	001a      	movs	r2, r3
 800996a:	2301      	movs	r3, #1
 800996c:	4013      	ands	r3, r2
 800996e:	d023      	beq.n	80099b8 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2251      	movs	r2, #81	; 0x51
 8009974:	5c9b      	ldrb	r3, [r3, r2]
 8009976:	b2db      	uxtb	r3, r3
 8009978:	2b03      	cmp	r3, #3
 800997a:	d011      	beq.n	80099a0 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009980:	2204      	movs	r2, #4
 8009982:	431a      	orrs	r2, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009988:	2300      	movs	r3, #0
 800998a:	617b      	str	r3, [r7, #20]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	617b      	str	r3, [r7, #20]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	617b      	str	r3, [r7, #20]
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	e00b      	b.n	80099b8 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80099a0:	2300      	movs	r3, #0
 80099a2:	613b      	str	r3, [r7, #16]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	613b      	str	r3, [r7, #16]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	613b      	str	r3, [r7, #16]
 80099b4:	693b      	ldr	r3, [r7, #16]
        return;
 80099b6:	e080      	b.n	8009aba <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80099b8:	69bb      	ldr	r3, [r7, #24]
 80099ba:	095b      	lsrs	r3, r3, #5
 80099bc:	001a      	movs	r2, r3
 80099be:	2301      	movs	r3, #1
 80099c0:	4013      	ands	r3, r2
 80099c2:	d014      	beq.n	80099ee <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099c8:	2201      	movs	r2, #1
 80099ca:	431a      	orrs	r2, r3
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80099d0:	2300      	movs	r3, #0
 80099d2:	60fb      	str	r3, [r7, #12]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	60fb      	str	r3, [r7, #12]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	2140      	movs	r1, #64	; 0x40
 80099e8:	438a      	bics	r2, r1
 80099ea:	601a      	str	r2, [r3, #0]
 80099ec:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80099ee:	69bb      	ldr	r3, [r7, #24]
 80099f0:	0a1b      	lsrs	r3, r3, #8
 80099f2:	001a      	movs	r2, r3
 80099f4:	2301      	movs	r3, #1
 80099f6:	4013      	ands	r3, r2
 80099f8:	d00c      	beq.n	8009a14 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099fe:	2208      	movs	r2, #8
 8009a00:	431a      	orrs	r2, r3
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009a06:	2300      	movs	r3, #0
 8009a08:	60bb      	str	r3, [r7, #8]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	60bb      	str	r3, [r7, #8]
 8009a12:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d04d      	beq.n	8009ab8 <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	685a      	ldr	r2, [r3, #4]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	21e0      	movs	r1, #224	; 0xe0
 8009a28:	438a      	bics	r2, r1
 8009a2a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2251      	movs	r2, #81	; 0x51
 8009a30:	2101      	movs	r1, #1
 8009a32:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	2202      	movs	r2, #2
 8009a38:	4013      	ands	r3, r2
 8009a3a:	d103      	bne.n	8009a44 <HAL_SPI_IRQHandler+0x17c>
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	2201      	movs	r2, #1
 8009a40:	4013      	ands	r3, r2
 8009a42:	d032      	beq.n	8009aaa <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	685a      	ldr	r2, [r3, #4]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2103      	movs	r1, #3
 8009a50:	438a      	bics	r2, r1
 8009a52:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d010      	beq.n	8009a7e <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a60:	4a17      	ldr	r2, [pc, #92]	; (8009ac0 <HAL_SPI_IRQHandler+0x1f8>)
 8009a62:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a68:	0018      	movs	r0, r3
 8009a6a:	f7fd fb7b 	bl	8007164 <HAL_DMA_Abort_IT>
 8009a6e:	1e03      	subs	r3, r0, #0
 8009a70:	d005      	beq.n	8009a7e <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a76:	2240      	movs	r2, #64	; 0x40
 8009a78:	431a      	orrs	r2, r3
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d016      	beq.n	8009ab4 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a8a:	4a0d      	ldr	r2, [pc, #52]	; (8009ac0 <HAL_SPI_IRQHandler+0x1f8>)
 8009a8c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a92:	0018      	movs	r0, r3
 8009a94:	f7fd fb66 	bl	8007164 <HAL_DMA_Abort_IT>
 8009a98:	1e03      	subs	r3, r0, #0
 8009a9a:	d00b      	beq.n	8009ab4 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aa0:	2240      	movs	r2, #64	; 0x40
 8009aa2:	431a      	orrs	r2, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8009aa8:	e004      	b.n	8009ab4 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	0018      	movs	r0, r3
 8009aae:	f000 f809 	bl	8009ac4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009ab2:	e000      	b.n	8009ab6 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8009ab4:	46c0      	nop			; (mov r8, r8)
    return;
 8009ab6:	46c0      	nop			; (mov r8, r8)
 8009ab8:	46c0      	nop			; (mov r8, r8)
  }
}
 8009aba:	46bd      	mov	sp, r7
 8009abc:	b008      	add	sp, #32
 8009abe:	bd80      	pop	{r7, pc}
 8009ac0:	08009aed 	.word	0x08009aed

08009ac4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009acc:	46c0      	nop			; (mov r8, r8)
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	b002      	add	sp, #8
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2251      	movs	r2, #81	; 0x51
 8009ae0:	5c9b      	ldrb	r3, [r3, r2]
 8009ae2:	b2db      	uxtb	r3, r3
}
 8009ae4:	0018      	movs	r0, r3
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	b002      	add	sp, #8
 8009aea:	bd80      	pop	{r7, pc}

08009aec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009af8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2200      	movs	r2, #0
 8009afe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2200      	movs	r2, #0
 8009b04:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	0018      	movs	r0, r3
 8009b0a:	f7ff ffdb 	bl	8009ac4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009b0e:	46c0      	nop			; (mov r8, r8)
 8009b10:	46bd      	mov	sp, r7
 8009b12:	b004      	add	sp, #16
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b082      	sub	sp, #8
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	330c      	adds	r3, #12
 8009b28:	7812      	ldrb	r2, [r2, #0]
 8009b2a:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b30:	1c5a      	adds	r2, r3, #1
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	b29a      	uxth	r2, r3
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d103      	bne.n	8009b56 <SPI_TxISR_8BIT+0x40>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	0018      	movs	r0, r3
 8009b52:	f000 f8d5 	bl	8009d00 <SPI_CloseTx_ISR>
  }
}
 8009b56:	46c0      	nop			; (mov r8, r8)
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	b002      	add	sp, #8
 8009b5c:	bd80      	pop	{r7, pc}

08009b5e <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b082      	sub	sp, #8
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b6a:	881a      	ldrh	r2, [r3, #0]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b76:	1c9a      	adds	r2, r3, #2
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	3b01      	subs	r3, #1
 8009b84:	b29a      	uxth	r2, r3
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d103      	bne.n	8009b9c <SPI_TxISR_16BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	0018      	movs	r0, r3
 8009b98:	f000 f8b2 	bl	8009d00 <SPI_CloseTx_ISR>
  }
}
 8009b9c:	46c0      	nop			; (mov r8, r8)
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	b002      	add	sp, #8
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	603b      	str	r3, [r7, #0]
 8009bb0:	1dfb      	adds	r3, r7, #7
 8009bb2:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009bb4:	e050      	b.n	8009c58 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	3301      	adds	r3, #1
 8009bba:	d04d      	beq.n	8009c58 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009bbc:	f7fc fc7c 	bl	80064b8 <HAL_GetTick>
 8009bc0:	0002      	movs	r2, r0
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	1ad3      	subs	r3, r2, r3
 8009bc6:	683a      	ldr	r2, [r7, #0]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d902      	bls.n	8009bd2 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d142      	bne.n	8009c58 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	685a      	ldr	r2, [r3, #4]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	21e0      	movs	r1, #224	; 0xe0
 8009bde:	438a      	bics	r2, r1
 8009be0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	685a      	ldr	r2, [r3, #4]
 8009be6:	2382      	movs	r3, #130	; 0x82
 8009be8:	005b      	lsls	r3, r3, #1
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d113      	bne.n	8009c16 <SPI_WaitFlagStateUntilTimeout+0x72>
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	689a      	ldr	r2, [r3, #8]
 8009bf2:	2380      	movs	r3, #128	; 0x80
 8009bf4:	021b      	lsls	r3, r3, #8
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d005      	beq.n	8009c06 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	689a      	ldr	r2, [r3, #8]
 8009bfe:	2380      	movs	r3, #128	; 0x80
 8009c00:	00db      	lsls	r3, r3, #3
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d107      	bne.n	8009c16 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2140      	movs	r1, #64	; 0x40
 8009c12:	438a      	bics	r2, r1
 8009c14:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c1a:	2380      	movs	r3, #128	; 0x80
 8009c1c:	019b      	lsls	r3, r3, #6
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d110      	bne.n	8009c44 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4914      	ldr	r1, [pc, #80]	; (8009c80 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8009c2e:	400a      	ands	r2, r1
 8009c30:	601a      	str	r2, [r3, #0]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2180      	movs	r1, #128	; 0x80
 8009c3e:	0189      	lsls	r1, r1, #6
 8009c40:	430a      	orrs	r2, r1
 8009c42:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2251      	movs	r2, #81	; 0x51
 8009c48:	2101      	movs	r1, #1
 8009c4a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2250      	movs	r2, #80	; 0x50
 8009c50:	2100      	movs	r1, #0
 8009c52:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009c54:	2303      	movs	r3, #3
 8009c56:	e00f      	b.n	8009c78 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	68ba      	ldr	r2, [r7, #8]
 8009c60:	4013      	ands	r3, r2
 8009c62:	68ba      	ldr	r2, [r7, #8]
 8009c64:	1ad3      	subs	r3, r2, r3
 8009c66:	425a      	negs	r2, r3
 8009c68:	4153      	adcs	r3, r2
 8009c6a:	b2db      	uxtb	r3, r3
 8009c6c:	001a      	movs	r2, r3
 8009c6e:	1dfb      	adds	r3, r7, #7
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d19f      	bne.n	8009bb6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009c76:	2300      	movs	r3, #0
}
 8009c78:	0018      	movs	r0, r3
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	b004      	add	sp, #16
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	ffffdfff 	.word	0xffffdfff

08009c84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b086      	sub	sp, #24
 8009c88:	af02      	add	r7, sp, #8
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	685a      	ldr	r2, [r3, #4]
 8009c94:	2382      	movs	r3, #130	; 0x82
 8009c96:	005b      	lsls	r3, r3, #1
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d112      	bne.n	8009cc2 <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c9c:	68ba      	ldr	r2, [r7, #8]
 8009c9e:	68f8      	ldr	r0, [r7, #12]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	9300      	str	r3, [sp, #0]
 8009ca4:	0013      	movs	r3, r2
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	2180      	movs	r1, #128	; 0x80
 8009caa:	f7ff ff7b 	bl	8009ba4 <SPI_WaitFlagStateUntilTimeout>
 8009cae:	1e03      	subs	r3, r0, #0
 8009cb0:	d020      	beq.n	8009cf4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cb6:	2220      	movs	r2, #32
 8009cb8:	431a      	orrs	r2, r3
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009cbe:	2303      	movs	r3, #3
 8009cc0:	e019      	b.n	8009cf6 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2251      	movs	r2, #81	; 0x51
 8009cc6:	5c9b      	ldrb	r3, [r3, r2]
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	2b05      	cmp	r3, #5
 8009ccc:	d112      	bne.n	8009cf4 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009cce:	68ba      	ldr	r2, [r7, #8]
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	9300      	str	r3, [sp, #0]
 8009cd6:	0013      	movs	r3, r2
 8009cd8:	2200      	movs	r2, #0
 8009cda:	2101      	movs	r1, #1
 8009cdc:	f7ff ff62 	bl	8009ba4 <SPI_WaitFlagStateUntilTimeout>
 8009ce0:	1e03      	subs	r3, r0, #0
 8009ce2:	d007      	beq.n	8009cf4 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ce8:	2220      	movs	r2, #32
 8009cea:	431a      	orrs	r2, r3
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009cf0:	2303      	movs	r3, #3
 8009cf2:	e000      	b.n	8009cf6 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	0018      	movs	r0, r3
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	b004      	add	sp, #16
 8009cfc:	bd80      	pop	{r7, pc}
	...

08009d00 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b086      	sub	sp, #24
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8009d08:	4b2d      	ldr	r3, [pc, #180]	; (8009dc0 <SPI_CloseTx_ISR+0xc0>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	492d      	ldr	r1, [pc, #180]	; (8009dc4 <SPI_CloseTx_ISR+0xc4>)
 8009d0e:	0018      	movs	r0, r3
 8009d10:	f7f6 fa02 	bl	8000118 <__udivsi3>
 8009d14:	0003      	movs	r3, r0
 8009d16:	001a      	movs	r2, r3
 8009d18:	2364      	movs	r3, #100	; 0x64
 8009d1a:	4353      	muls	r3, r2
 8009d1c:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d1e:	f7fc fbcb 	bl	80064b8 <HAL_GetTick>
 8009d22:	0003      	movs	r3, r0
 8009d24:	617b      	str	r3, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d106      	bne.n	8009d3a <SPI_CloseTx_ISR+0x3a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d30:	2220      	movs	r2, #32
 8009d32:	431a      	orrs	r2, r3
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009d38:	e008      	b.n	8009d4c <SPI_CloseTx_ISR+0x4c>
    }
    count--;
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	3b01      	subs	r3, #1
 8009d3e:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	689b      	ldr	r3, [r3, #8]
 8009d46:	2202      	movs	r2, #2
 8009d48:	4013      	ands	r3, r2
 8009d4a:	d0ec      	beq.n	8009d26 <SPI_CloseTx_ISR+0x26>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	685a      	ldr	r2, [r3, #4]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	21a0      	movs	r1, #160	; 0xa0
 8009d58:	438a      	bics	r2, r1
 8009d5a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009d5c:	697a      	ldr	r2, [r7, #20]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2164      	movs	r1, #100	; 0x64
 8009d62:	0018      	movs	r0, r3
 8009d64:	f7ff ff8e 	bl	8009c84 <SPI_EndRxTxTransaction>
 8009d68:	1e03      	subs	r3, r0, #0
 8009d6a:	d005      	beq.n	8009d78 <SPI_CloseTx_ISR+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d70:	2220      	movs	r2, #32
 8009d72:	431a      	orrs	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d10a      	bne.n	8009d96 <SPI_CloseTx_ISR+0x96>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d80:	2300      	movs	r3, #0
 8009d82:	60fb      	str	r3, [r7, #12]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	68db      	ldr	r3, [r3, #12]
 8009d8a:	60fb      	str	r3, [r7, #12]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	60fb      	str	r3, [r7, #12]
 8009d94:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2251      	movs	r2, #81	; 0x51
 8009d9a:	2101      	movs	r1, #1
 8009d9c:	5499      	strb	r1, [r3, r2]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d004      	beq.n	8009db0 <SPI_CloseTx_ISR+0xb0>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	0018      	movs	r0, r3
 8009daa:	f7ff fe8b 	bl	8009ac4 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8009dae:	e003      	b.n	8009db8 <SPI_CloseTx_ISR+0xb8>
    HAL_SPI_TxCpltCallback(hspi);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	0018      	movs	r0, r3
 8009db4:	f7f7 fd12 	bl	80017dc <HAL_SPI_TxCpltCallback>
}
 8009db8:	46c0      	nop			; (mov r8, r8)
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	b006      	add	sp, #24
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	20000010 	.word	0x20000010
 8009dc4:	00005dc0 	.word	0x00005dc0

08009dc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d101      	bne.n	8009dda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e01e      	b.n	8009e18 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2239      	movs	r2, #57	; 0x39
 8009dde:	5c9b      	ldrb	r3, [r3, r2]
 8009de0:	b2db      	uxtb	r3, r3
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d107      	bne.n	8009df6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2238      	movs	r2, #56	; 0x38
 8009dea:	2100      	movs	r1, #0
 8009dec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	0018      	movs	r0, r3
 8009df2:	f7fa f9d9 	bl	80041a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2239      	movs	r2, #57	; 0x39
 8009dfa:	2102      	movs	r1, #2
 8009dfc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	3304      	adds	r3, #4
 8009e06:	0019      	movs	r1, r3
 8009e08:	0010      	movs	r0, r2
 8009e0a:	f000 fc3f 	bl	800a68c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2239      	movs	r2, #57	; 0x39
 8009e12:	2101      	movs	r1, #1
 8009e14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009e16:	2300      	movs	r3, #0
}
 8009e18:	0018      	movs	r0, r3
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	b002      	add	sp, #8
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2239      	movs	r2, #57	; 0x39
 8009e2c:	2102      	movs	r1, #2
 8009e2e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	2207      	movs	r2, #7
 8009e38:	4013      	ands	r3, r2
 8009e3a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2b06      	cmp	r3, #6
 8009e40:	d007      	beq.n	8009e52 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	2101      	movs	r1, #1
 8009e4e:	430a      	orrs	r2, r1
 8009e50:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2239      	movs	r2, #57	; 0x39
 8009e56:	2101      	movs	r1, #1
 8009e58:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8009e5a:	2300      	movs	r3, #0
}
 8009e5c:	0018      	movs	r0, r3
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	b004      	add	sp, #16
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	68da      	ldr	r2, [r3, #12]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2101      	movs	r1, #1
 8009e78:	430a      	orrs	r2, r1
 8009e7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	2207      	movs	r2, #7
 8009e84:	4013      	ands	r3, r2
 8009e86:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2b06      	cmp	r3, #6
 8009e8c:	d007      	beq.n	8009e9e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	2101      	movs	r1, #1
 8009e9a:	430a      	orrs	r2, r1
 8009e9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009e9e:	2300      	movs	r3, #0
}
 8009ea0:	0018      	movs	r0, r3
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	b004      	add	sp, #16
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	68da      	ldr	r2, [r3, #12]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2101      	movs	r1, #1
 8009ebc:	438a      	bics	r2, r1
 8009ebe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	6a1b      	ldr	r3, [r3, #32]
 8009ec6:	4a08      	ldr	r2, [pc, #32]	; (8009ee8 <HAL_TIM_Base_Stop_IT+0x40>)
 8009ec8:	4013      	ands	r3, r2
 8009eca:	d107      	bne.n	8009edc <HAL_TIM_Base_Stop_IT+0x34>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	2101      	movs	r1, #1
 8009ed8:	438a      	bics	r2, r1
 8009eda:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009edc:	2300      	movs	r3, #0
}
 8009ede:	0018      	movs	r0, r3
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	b002      	add	sp, #8
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	46c0      	nop			; (mov r8, r8)
 8009ee8:	00001111 	.word	0x00001111

08009eec <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d101      	bne.n	8009efe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009efa:	2301      	movs	r3, #1
 8009efc:	e01e      	b.n	8009f3c <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2239      	movs	r2, #57	; 0x39
 8009f02:	5c9b      	ldrb	r3, [r3, r2]
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d107      	bne.n	8009f1a <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2238      	movs	r2, #56	; 0x38
 8009f0e:	2100      	movs	r1, #0
 8009f10:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	0018      	movs	r0, r3
 8009f16:	f000 f815 	bl	8009f44 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2239      	movs	r2, #57	; 0x39
 8009f1e:	2102      	movs	r1, #2
 8009f20:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681a      	ldr	r2, [r3, #0]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	3304      	adds	r3, #4
 8009f2a:	0019      	movs	r1, r3
 8009f2c:	0010      	movs	r0, r2
 8009f2e:	f000 fbad 	bl	800a68c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2239      	movs	r2, #57	; 0x39
 8009f36:	2101      	movs	r1, #1
 8009f38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009f3a:	2300      	movs	r3, #0
}
 8009f3c:	0018      	movs	r0, r3
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	b002      	add	sp, #8
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009f4c:	46c0      	nop			; (mov r8, r8)
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	b002      	add	sp, #8
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	2b04      	cmp	r3, #4
 8009f62:	d011      	beq.n	8009f88 <HAL_TIM_OC_Start_IT+0x34>
 8009f64:	d802      	bhi.n	8009f6c <HAL_TIM_OC_Start_IT+0x18>
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d005      	beq.n	8009f76 <HAL_TIM_OC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 8009f6a:	e028      	b.n	8009fbe <HAL_TIM_OC_Start_IT+0x6a>
  switch (Channel)
 8009f6c:	2b08      	cmp	r3, #8
 8009f6e:	d014      	beq.n	8009f9a <HAL_TIM_OC_Start_IT+0x46>
 8009f70:	2b0c      	cmp	r3, #12
 8009f72:	d01b      	beq.n	8009fac <HAL_TIM_OC_Start_IT+0x58>
      break;
 8009f74:	e023      	b.n	8009fbe <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	68da      	ldr	r2, [r3, #12]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	2102      	movs	r1, #2
 8009f82:	430a      	orrs	r2, r1
 8009f84:	60da      	str	r2, [r3, #12]
      break;
 8009f86:	e01a      	b.n	8009fbe <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	68da      	ldr	r2, [r3, #12]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	2104      	movs	r1, #4
 8009f94:	430a      	orrs	r2, r1
 8009f96:	60da      	str	r2, [r3, #12]
      break;
 8009f98:	e011      	b.n	8009fbe <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	68da      	ldr	r2, [r3, #12]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	2108      	movs	r1, #8
 8009fa6:	430a      	orrs	r2, r1
 8009fa8:	60da      	str	r2, [r3, #12]
      break;
 8009faa:	e008      	b.n	8009fbe <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	68da      	ldr	r2, [r3, #12]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	2110      	movs	r1, #16
 8009fb8:	430a      	orrs	r2, r1
 8009fba:	60da      	str	r2, [r3, #12]
      break;
 8009fbc:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	6839      	ldr	r1, [r7, #0]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	0018      	movs	r0, r3
 8009fc8:	f000 fd5c 	bl	800aa84 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	689b      	ldr	r3, [r3, #8]
 8009fd2:	2207      	movs	r2, #7
 8009fd4:	4013      	ands	r3, r2
 8009fd6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2b06      	cmp	r3, #6
 8009fdc:	d007      	beq.n	8009fee <HAL_TIM_OC_Start_IT+0x9a>
  {
    __HAL_TIM_ENABLE(htim);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2101      	movs	r1, #1
 8009fea:	430a      	orrs	r2, r1
 8009fec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009fee:	2300      	movs	r3, #0
}
 8009ff0:	0018      	movs	r0, r3
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	b004      	add	sp, #16
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	2b04      	cmp	r3, #4
 800a006:	d011      	beq.n	800a02c <HAL_TIM_OC_Stop_IT+0x34>
 800a008:	d802      	bhi.n	800a010 <HAL_TIM_OC_Stop_IT+0x18>
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d005      	beq.n	800a01a <HAL_TIM_OC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 800a00e:	e028      	b.n	800a062 <HAL_TIM_OC_Stop_IT+0x6a>
  switch (Channel)
 800a010:	2b08      	cmp	r3, #8
 800a012:	d014      	beq.n	800a03e <HAL_TIM_OC_Stop_IT+0x46>
 800a014:	2b0c      	cmp	r3, #12
 800a016:	d01b      	beq.n	800a050 <HAL_TIM_OC_Stop_IT+0x58>
      break;
 800a018:	e023      	b.n	800a062 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	68da      	ldr	r2, [r3, #12]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	2102      	movs	r1, #2
 800a026:	438a      	bics	r2, r1
 800a028:	60da      	str	r2, [r3, #12]
      break;
 800a02a:	e01a      	b.n	800a062 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	68da      	ldr	r2, [r3, #12]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	2104      	movs	r1, #4
 800a038:	438a      	bics	r2, r1
 800a03a:	60da      	str	r2, [r3, #12]
      break;
 800a03c:	e011      	b.n	800a062 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	68da      	ldr	r2, [r3, #12]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	2108      	movs	r1, #8
 800a04a:	438a      	bics	r2, r1
 800a04c:	60da      	str	r2, [r3, #12]
      break;
 800a04e:	e008      	b.n	800a062 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	68da      	ldr	r2, [r3, #12]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	2110      	movs	r1, #16
 800a05c:	438a      	bics	r2, r1
 800a05e:	60da      	str	r2, [r3, #12]
      break;
 800a060:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	6839      	ldr	r1, [r7, #0]
 800a068:	2200      	movs	r2, #0
 800a06a:	0018      	movs	r0, r3
 800a06c:	f000 fd0a 	bl	800aa84 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	6a1b      	ldr	r3, [r3, #32]
 800a076:	4a08      	ldr	r2, [pc, #32]	; (800a098 <HAL_TIM_OC_Stop_IT+0xa0>)
 800a078:	4013      	ands	r3, r2
 800a07a:	d107      	bne.n	800a08c <HAL_TIM_OC_Stop_IT+0x94>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	681a      	ldr	r2, [r3, #0]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	2101      	movs	r1, #1
 800a088:	438a      	bics	r2, r1
 800a08a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a08c:	2300      	movs	r3, #0
}
 800a08e:	0018      	movs	r0, r3
 800a090:	46bd      	mov	sp, r7
 800a092:	b002      	add	sp, #8
 800a094:	bd80      	pop	{r7, pc}
 800a096:	46c0      	nop			; (mov r8, r8)
 800a098:	00001111 	.word	0x00001111

0800a09c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d101      	bne.n	800a0ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e01e      	b.n	800a0ec <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2239      	movs	r2, #57	; 0x39
 800a0b2:	5c9b      	ldrb	r3, [r3, r2]
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d107      	bne.n	800a0ca <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2238      	movs	r2, #56	; 0x38
 800a0be:	2100      	movs	r1, #0
 800a0c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	0018      	movs	r0, r3
 800a0c6:	f000 f815 	bl	800a0f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2239      	movs	r2, #57	; 0x39
 800a0ce:	2102      	movs	r1, #2
 800a0d0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	3304      	adds	r3, #4
 800a0da:	0019      	movs	r1, r3
 800a0dc:	0010      	movs	r0, r2
 800a0de:	f000 fad5 	bl	800a68c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2239      	movs	r2, #57	; 0x39
 800a0e6:	2101      	movs	r1, #1
 800a0e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a0ea:	2300      	movs	r3, #0
}
 800a0ec:	0018      	movs	r0, r3
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	b002      	add	sp, #8
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a0fc:	46c0      	nop			; (mov r8, r8)
 800a0fe:	46bd      	mov	sp, r7
 800a100:	b002      	add	sp, #8
 800a102:	bd80      	pop	{r7, pc}

0800a104 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	691b      	ldr	r3, [r3, #16]
 800a112:	2202      	movs	r2, #2
 800a114:	4013      	ands	r3, r2
 800a116:	2b02      	cmp	r3, #2
 800a118:	d124      	bne.n	800a164 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	68db      	ldr	r3, [r3, #12]
 800a120:	2202      	movs	r2, #2
 800a122:	4013      	ands	r3, r2
 800a124:	2b02      	cmp	r3, #2
 800a126:	d11d      	bne.n	800a164 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2203      	movs	r2, #3
 800a12e:	4252      	negs	r2, r2
 800a130:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2201      	movs	r2, #1
 800a136:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	699b      	ldr	r3, [r3, #24]
 800a13e:	2203      	movs	r2, #3
 800a140:	4013      	ands	r3, r2
 800a142:	d004      	beq.n	800a14e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	0018      	movs	r0, r3
 800a148:	f000 fa88 	bl	800a65c <HAL_TIM_IC_CaptureCallback>
 800a14c:	e007      	b.n	800a15e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	0018      	movs	r0, r3
 800a152:	f7fa fa03 	bl	800455c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	0018      	movs	r0, r3
 800a15a:	f000 fa87 	bl	800a66c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2200      	movs	r2, #0
 800a162:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	691b      	ldr	r3, [r3, #16]
 800a16a:	2204      	movs	r2, #4
 800a16c:	4013      	ands	r3, r2
 800a16e:	2b04      	cmp	r3, #4
 800a170:	d125      	bne.n	800a1be <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	2204      	movs	r2, #4
 800a17a:	4013      	ands	r3, r2
 800a17c:	2b04      	cmp	r3, #4
 800a17e:	d11e      	bne.n	800a1be <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2205      	movs	r2, #5
 800a186:	4252      	negs	r2, r2
 800a188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2202      	movs	r2, #2
 800a18e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	699a      	ldr	r2, [r3, #24]
 800a196:	23c0      	movs	r3, #192	; 0xc0
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	4013      	ands	r3, r2
 800a19c:	d004      	beq.n	800a1a8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	0018      	movs	r0, r3
 800a1a2:	f000 fa5b 	bl	800a65c <HAL_TIM_IC_CaptureCallback>
 800a1a6:	e007      	b.n	800a1b8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	0018      	movs	r0, r3
 800a1ac:	f7fa f9d6 	bl	800455c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	0018      	movs	r0, r3
 800a1b4:	f000 fa5a 	bl	800a66c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	691b      	ldr	r3, [r3, #16]
 800a1c4:	2208      	movs	r2, #8
 800a1c6:	4013      	ands	r3, r2
 800a1c8:	2b08      	cmp	r3, #8
 800a1ca:	d124      	bne.n	800a216 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	2208      	movs	r2, #8
 800a1d4:	4013      	ands	r3, r2
 800a1d6:	2b08      	cmp	r3, #8
 800a1d8:	d11d      	bne.n	800a216 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	2209      	movs	r2, #9
 800a1e0:	4252      	negs	r2, r2
 800a1e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2204      	movs	r2, #4
 800a1e8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	69db      	ldr	r3, [r3, #28]
 800a1f0:	2203      	movs	r2, #3
 800a1f2:	4013      	ands	r3, r2
 800a1f4:	d004      	beq.n	800a200 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	0018      	movs	r0, r3
 800a1fa:	f000 fa2f 	bl	800a65c <HAL_TIM_IC_CaptureCallback>
 800a1fe:	e007      	b.n	800a210 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	0018      	movs	r0, r3
 800a204:	f7fa f9aa 	bl	800455c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	0018      	movs	r0, r3
 800a20c:	f000 fa2e 	bl	800a66c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2200      	movs	r2, #0
 800a214:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	691b      	ldr	r3, [r3, #16]
 800a21c:	2210      	movs	r2, #16
 800a21e:	4013      	ands	r3, r2
 800a220:	2b10      	cmp	r3, #16
 800a222:	d125      	bne.n	800a270 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	68db      	ldr	r3, [r3, #12]
 800a22a:	2210      	movs	r2, #16
 800a22c:	4013      	ands	r3, r2
 800a22e:	2b10      	cmp	r3, #16
 800a230:	d11e      	bne.n	800a270 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	2211      	movs	r2, #17
 800a238:	4252      	negs	r2, r2
 800a23a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2208      	movs	r2, #8
 800a240:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	69da      	ldr	r2, [r3, #28]
 800a248:	23c0      	movs	r3, #192	; 0xc0
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	4013      	ands	r3, r2
 800a24e:	d004      	beq.n	800a25a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	0018      	movs	r0, r3
 800a254:	f000 fa02 	bl	800a65c <HAL_TIM_IC_CaptureCallback>
 800a258:	e007      	b.n	800a26a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	0018      	movs	r0, r3
 800a25e:	f7fa f97d 	bl	800455c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	0018      	movs	r0, r3
 800a266:	f000 fa01 	bl	800a66c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2200      	movs	r2, #0
 800a26e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	691b      	ldr	r3, [r3, #16]
 800a276:	2201      	movs	r2, #1
 800a278:	4013      	ands	r3, r2
 800a27a:	2b01      	cmp	r3, #1
 800a27c:	d10f      	bne.n	800a29e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	68db      	ldr	r3, [r3, #12]
 800a284:	2201      	movs	r2, #1
 800a286:	4013      	ands	r3, r2
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d108      	bne.n	800a29e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	2202      	movs	r2, #2
 800a292:	4252      	negs	r2, r2
 800a294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	0018      	movs	r0, r3
 800a29a:	f7fa f921 	bl	80044e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	691b      	ldr	r3, [r3, #16]
 800a2a4:	2240      	movs	r2, #64	; 0x40
 800a2a6:	4013      	ands	r3, r2
 800a2a8:	2b40      	cmp	r3, #64	; 0x40
 800a2aa:	d10f      	bne.n	800a2cc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	2240      	movs	r2, #64	; 0x40
 800a2b4:	4013      	ands	r3, r2
 800a2b6:	2b40      	cmp	r3, #64	; 0x40
 800a2b8:	d108      	bne.n	800a2cc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	2241      	movs	r2, #65	; 0x41
 800a2c0:	4252      	negs	r2, r2
 800a2c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	0018      	movs	r0, r3
 800a2c8:	f000 f9d8 	bl	800a67c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a2cc:	46c0      	nop			; (mov r8, r8)
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	b002      	add	sp, #8
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b084      	sub	sp, #16
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	60f8      	str	r0, [r7, #12]
 800a2dc:	60b9      	str	r1, [r7, #8]
 800a2de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2238      	movs	r2, #56	; 0x38
 800a2e4:	5c9b      	ldrb	r3, [r3, r2]
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d101      	bne.n	800a2ee <HAL_TIM_OC_ConfigChannel+0x1a>
 800a2ea:	2302      	movs	r3, #2
 800a2ec:	e03c      	b.n	800a368 <HAL_TIM_OC_ConfigChannel+0x94>
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2238      	movs	r2, #56	; 0x38
 800a2f2:	2101      	movs	r1, #1
 800a2f4:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2239      	movs	r2, #57	; 0x39
 800a2fa:	2102      	movs	r1, #2
 800a2fc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2b04      	cmp	r3, #4
 800a302:	d010      	beq.n	800a326 <HAL_TIM_OC_ConfigChannel+0x52>
 800a304:	d802      	bhi.n	800a30c <HAL_TIM_OC_ConfigChannel+0x38>
 800a306:	2b00      	cmp	r3, #0
 800a308:	d005      	beq.n	800a316 <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 800a30a:	e024      	b.n	800a356 <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 800a30c:	2b08      	cmp	r3, #8
 800a30e:	d012      	beq.n	800a336 <HAL_TIM_OC_ConfigChannel+0x62>
 800a310:	2b0c      	cmp	r3, #12
 800a312:	d018      	beq.n	800a346 <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 800a314:	e01f      	b.n	800a356 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	68ba      	ldr	r2, [r7, #8]
 800a31c:	0011      	movs	r1, r2
 800a31e:	0018      	movs	r0, r3
 800a320:	f000 fa12 	bl	800a748 <TIM_OC1_SetConfig>
      break;
 800a324:	e017      	b.n	800a356 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	68ba      	ldr	r2, [r7, #8]
 800a32c:	0011      	movs	r1, r2
 800a32e:	0018      	movs	r0, r3
 800a330:	f000 fa46 	bl	800a7c0 <TIM_OC2_SetConfig>
      break;
 800a334:	e00f      	b.n	800a356 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	68ba      	ldr	r2, [r7, #8]
 800a33c:	0011      	movs	r1, r2
 800a33e:	0018      	movs	r0, r3
 800a340:	f000 fa80 	bl	800a844 <TIM_OC3_SetConfig>
      break;
 800a344:	e007      	b.n	800a356 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	68ba      	ldr	r2, [r7, #8]
 800a34c:	0011      	movs	r1, r2
 800a34e:	0018      	movs	r0, r3
 800a350:	f000 fab8 	bl	800a8c4 <TIM_OC4_SetConfig>
      break;
 800a354:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2239      	movs	r2, #57	; 0x39
 800a35a:	2101      	movs	r1, #1
 800a35c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2238      	movs	r2, #56	; 0x38
 800a362:	2100      	movs	r1, #0
 800a364:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a366:	2300      	movs	r3, #0
}
 800a368:	0018      	movs	r0, r3
 800a36a:	46bd      	mov	sp, r7
 800a36c:	b004      	add	sp, #16
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2238      	movs	r2, #56	; 0x38
 800a380:	5c9b      	ldrb	r3, [r3, r2]
 800a382:	2b01      	cmp	r3, #1
 800a384:	d101      	bne.n	800a38a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a386:	2302      	movs	r3, #2
 800a388:	e0a4      	b.n	800a4d4 <HAL_TIM_PWM_ConfigChannel+0x164>
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2238      	movs	r2, #56	; 0x38
 800a38e:	2101      	movs	r1, #1
 800a390:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	2239      	movs	r2, #57	; 0x39
 800a396:	2102      	movs	r1, #2
 800a398:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2b04      	cmp	r3, #4
 800a39e:	d029      	beq.n	800a3f4 <HAL_TIM_PWM_ConfigChannel+0x84>
 800a3a0:	d802      	bhi.n	800a3a8 <HAL_TIM_PWM_ConfigChannel+0x38>
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d005      	beq.n	800a3b2 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 800a3a6:	e08c      	b.n	800a4c2 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 800a3a8:	2b08      	cmp	r3, #8
 800a3aa:	d046      	beq.n	800a43a <HAL_TIM_PWM_ConfigChannel+0xca>
 800a3ac:	2b0c      	cmp	r3, #12
 800a3ae:	d065      	beq.n	800a47c <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 800a3b0:	e087      	b.n	800a4c2 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	68ba      	ldr	r2, [r7, #8]
 800a3b8:	0011      	movs	r1, r2
 800a3ba:	0018      	movs	r0, r3
 800a3bc:	f000 f9c4 	bl	800a748 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	699a      	ldr	r2, [r3, #24]
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	2108      	movs	r1, #8
 800a3cc:	430a      	orrs	r2, r1
 800a3ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	699a      	ldr	r2, [r3, #24]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2104      	movs	r1, #4
 800a3dc:	438a      	bics	r2, r1
 800a3de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	6999      	ldr	r1, [r3, #24]
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	68da      	ldr	r2, [r3, #12]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	430a      	orrs	r2, r1
 800a3f0:	619a      	str	r2, [r3, #24]
      break;
 800a3f2:	e066      	b.n	800a4c2 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	68ba      	ldr	r2, [r7, #8]
 800a3fa:	0011      	movs	r1, r2
 800a3fc:	0018      	movs	r0, r3
 800a3fe:	f000 f9df 	bl	800a7c0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	699a      	ldr	r2, [r3, #24]
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	2180      	movs	r1, #128	; 0x80
 800a40e:	0109      	lsls	r1, r1, #4
 800a410:	430a      	orrs	r2, r1
 800a412:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	699a      	ldr	r2, [r3, #24]
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	492f      	ldr	r1, [pc, #188]	; (800a4dc <HAL_TIM_PWM_ConfigChannel+0x16c>)
 800a420:	400a      	ands	r2, r1
 800a422:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	6999      	ldr	r1, [r3, #24]
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	68db      	ldr	r3, [r3, #12]
 800a42e:	021a      	lsls	r2, r3, #8
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	430a      	orrs	r2, r1
 800a436:	619a      	str	r2, [r3, #24]
      break;
 800a438:	e043      	b.n	800a4c2 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	68ba      	ldr	r2, [r7, #8]
 800a440:	0011      	movs	r1, r2
 800a442:	0018      	movs	r0, r3
 800a444:	f000 f9fe 	bl	800a844 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	69da      	ldr	r2, [r3, #28]
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2108      	movs	r1, #8
 800a454:	430a      	orrs	r2, r1
 800a456:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	69da      	ldr	r2, [r3, #28]
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	2104      	movs	r1, #4
 800a464:	438a      	bics	r2, r1
 800a466:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	69d9      	ldr	r1, [r3, #28]
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	68da      	ldr	r2, [r3, #12]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	430a      	orrs	r2, r1
 800a478:	61da      	str	r2, [r3, #28]
      break;
 800a47a:	e022      	b.n	800a4c2 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	68ba      	ldr	r2, [r7, #8]
 800a482:	0011      	movs	r1, r2
 800a484:	0018      	movs	r0, r3
 800a486:	f000 fa1d 	bl	800a8c4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	69da      	ldr	r2, [r3, #28]
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2180      	movs	r1, #128	; 0x80
 800a496:	0109      	lsls	r1, r1, #4
 800a498:	430a      	orrs	r2, r1
 800a49a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	69da      	ldr	r2, [r3, #28]
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	490d      	ldr	r1, [pc, #52]	; (800a4dc <HAL_TIM_PWM_ConfigChannel+0x16c>)
 800a4a8:	400a      	ands	r2, r1
 800a4aa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	69d9      	ldr	r1, [r3, #28]
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	68db      	ldr	r3, [r3, #12]
 800a4b6:	021a      	lsls	r2, r3, #8
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	430a      	orrs	r2, r1
 800a4be:	61da      	str	r2, [r3, #28]
      break;
 800a4c0:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2239      	movs	r2, #57	; 0x39
 800a4c6:	2101      	movs	r1, #1
 800a4c8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2238      	movs	r2, #56	; 0x38
 800a4ce:	2100      	movs	r1, #0
 800a4d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a4d2:	2300      	movs	r3, #0
}
 800a4d4:	0018      	movs	r0, r3
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	b004      	add	sp, #16
 800a4da:	bd80      	pop	{r7, pc}
 800a4dc:	fffffbff 	.word	0xfffffbff

0800a4e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2238      	movs	r2, #56	; 0x38
 800a4ee:	5c9b      	ldrb	r3, [r3, r2]
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	d101      	bne.n	800a4f8 <HAL_TIM_ConfigClockSource+0x18>
 800a4f4:	2302      	movs	r3, #2
 800a4f6:	e0ab      	b.n	800a650 <HAL_TIM_ConfigClockSource+0x170>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2238      	movs	r2, #56	; 0x38
 800a4fc:	2101      	movs	r1, #1
 800a4fe:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2239      	movs	r2, #57	; 0x39
 800a504:	2102      	movs	r1, #2
 800a506:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	689b      	ldr	r3, [r3, #8]
 800a50e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2277      	movs	r2, #119	; 0x77
 800a514:	4393      	bics	r3, r2
 800a516:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	4a4f      	ldr	r2, [pc, #316]	; (800a658 <HAL_TIM_ConfigClockSource+0x178>)
 800a51c:	4013      	ands	r3, r2
 800a51e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	68fa      	ldr	r2, [r7, #12]
 800a526:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	2b40      	cmp	r3, #64	; 0x40
 800a52e:	d100      	bne.n	800a532 <HAL_TIM_ConfigClockSource+0x52>
 800a530:	e06b      	b.n	800a60a <HAL_TIM_ConfigClockSource+0x12a>
 800a532:	d80e      	bhi.n	800a552 <HAL_TIM_ConfigClockSource+0x72>
 800a534:	2b10      	cmp	r3, #16
 800a536:	d100      	bne.n	800a53a <HAL_TIM_ConfigClockSource+0x5a>
 800a538:	e077      	b.n	800a62a <HAL_TIM_ConfigClockSource+0x14a>
 800a53a:	d803      	bhi.n	800a544 <HAL_TIM_ConfigClockSource+0x64>
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d100      	bne.n	800a542 <HAL_TIM_ConfigClockSource+0x62>
 800a540:	e073      	b.n	800a62a <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a542:	e07c      	b.n	800a63e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800a544:	2b20      	cmp	r3, #32
 800a546:	d100      	bne.n	800a54a <HAL_TIM_ConfigClockSource+0x6a>
 800a548:	e06f      	b.n	800a62a <HAL_TIM_ConfigClockSource+0x14a>
 800a54a:	2b30      	cmp	r3, #48	; 0x30
 800a54c:	d100      	bne.n	800a550 <HAL_TIM_ConfigClockSource+0x70>
 800a54e:	e06c      	b.n	800a62a <HAL_TIM_ConfigClockSource+0x14a>
      break;
 800a550:	e075      	b.n	800a63e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800a552:	2b70      	cmp	r3, #112	; 0x70
 800a554:	d00e      	beq.n	800a574 <HAL_TIM_ConfigClockSource+0x94>
 800a556:	d804      	bhi.n	800a562 <HAL_TIM_ConfigClockSource+0x82>
 800a558:	2b50      	cmp	r3, #80	; 0x50
 800a55a:	d036      	beq.n	800a5ca <HAL_TIM_ConfigClockSource+0xea>
 800a55c:	2b60      	cmp	r3, #96	; 0x60
 800a55e:	d044      	beq.n	800a5ea <HAL_TIM_ConfigClockSource+0x10a>
      break;
 800a560:	e06d      	b.n	800a63e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800a562:	2280      	movs	r2, #128	; 0x80
 800a564:	0152      	lsls	r2, r2, #5
 800a566:	4293      	cmp	r3, r2
 800a568:	d068      	beq.n	800a63c <HAL_TIM_ConfigClockSource+0x15c>
 800a56a:	2280      	movs	r2, #128	; 0x80
 800a56c:	0192      	lsls	r2, r2, #6
 800a56e:	4293      	cmp	r3, r2
 800a570:	d017      	beq.n	800a5a2 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800a572:	e064      	b.n	800a63e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6818      	ldr	r0, [r3, #0]
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	6899      	ldr	r1, [r3, #8]
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	685a      	ldr	r2, [r3, #4]
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	68db      	ldr	r3, [r3, #12]
 800a584:	f000 fa5e 	bl	800aa44 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	689b      	ldr	r3, [r3, #8]
 800a58e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2277      	movs	r2, #119	; 0x77
 800a594:	4313      	orrs	r3, r2
 800a596:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	68fa      	ldr	r2, [r7, #12]
 800a59e:	609a      	str	r2, [r3, #8]
      break;
 800a5a0:	e04d      	b.n	800a63e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6818      	ldr	r0, [r3, #0]
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	6899      	ldr	r1, [r3, #8]
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	685a      	ldr	r2, [r3, #4]
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	68db      	ldr	r3, [r3, #12]
 800a5b2:	f000 fa47 	bl	800aa44 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	689a      	ldr	r2, [r3, #8]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	2180      	movs	r1, #128	; 0x80
 800a5c2:	01c9      	lsls	r1, r1, #7
 800a5c4:	430a      	orrs	r2, r1
 800a5c6:	609a      	str	r2, [r3, #8]
      break;
 800a5c8:	e039      	b.n	800a63e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6818      	ldr	r0, [r3, #0]
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	6859      	ldr	r1, [r3, #4]
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	001a      	movs	r2, r3
 800a5d8:	f000 f9ba 	bl	800a950 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2150      	movs	r1, #80	; 0x50
 800a5e2:	0018      	movs	r0, r3
 800a5e4:	f000 fa14 	bl	800aa10 <TIM_ITRx_SetConfig>
      break;
 800a5e8:	e029      	b.n	800a63e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6818      	ldr	r0, [r3, #0]
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	6859      	ldr	r1, [r3, #4]
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	68db      	ldr	r3, [r3, #12]
 800a5f6:	001a      	movs	r2, r3
 800a5f8:	f000 f9d8 	bl	800a9ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	2160      	movs	r1, #96	; 0x60
 800a602:	0018      	movs	r0, r3
 800a604:	f000 fa04 	bl	800aa10 <TIM_ITRx_SetConfig>
      break;
 800a608:	e019      	b.n	800a63e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6818      	ldr	r0, [r3, #0]
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	6859      	ldr	r1, [r3, #4]
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	68db      	ldr	r3, [r3, #12]
 800a616:	001a      	movs	r2, r3
 800a618:	f000 f99a 	bl	800a950 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	2140      	movs	r1, #64	; 0x40
 800a622:	0018      	movs	r0, r3
 800a624:	f000 f9f4 	bl	800aa10 <TIM_ITRx_SetConfig>
      break;
 800a628:	e009      	b.n	800a63e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	0019      	movs	r1, r3
 800a634:	0010      	movs	r0, r2
 800a636:	f000 f9eb 	bl	800aa10 <TIM_ITRx_SetConfig>
      break;
 800a63a:	e000      	b.n	800a63e <HAL_TIM_ConfigClockSource+0x15e>
      break;
 800a63c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2239      	movs	r2, #57	; 0x39
 800a642:	2101      	movs	r1, #1
 800a644:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2238      	movs	r2, #56	; 0x38
 800a64a:	2100      	movs	r1, #0
 800a64c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a64e:	2300      	movs	r3, #0
}
 800a650:	0018      	movs	r0, r3
 800a652:	46bd      	mov	sp, r7
 800a654:	b004      	add	sp, #16
 800a656:	bd80      	pop	{r7, pc}
 800a658:	ffff00ff 	.word	0xffff00ff

0800a65c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a664:	46c0      	nop			; (mov r8, r8)
 800a666:	46bd      	mov	sp, r7
 800a668:	b002      	add	sp, #8
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b082      	sub	sp, #8
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a674:	46c0      	nop			; (mov r8, r8)
 800a676:	46bd      	mov	sp, r7
 800a678:	b002      	add	sp, #8
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a684:	46c0      	nop			; (mov r8, r8)
 800a686:	46bd      	mov	sp, r7
 800a688:	b002      	add	sp, #8
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	2380      	movs	r3, #128	; 0x80
 800a6a0:	05db      	lsls	r3, r3, #23
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d00b      	beq.n	800a6be <TIM_Base_SetConfig+0x32>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	4a23      	ldr	r2, [pc, #140]	; (800a738 <TIM_Base_SetConfig+0xac>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d007      	beq.n	800a6be <TIM_Base_SetConfig+0x32>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	4a22      	ldr	r2, [pc, #136]	; (800a73c <TIM_Base_SetConfig+0xb0>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d003      	beq.n	800a6be <TIM_Base_SetConfig+0x32>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	4a21      	ldr	r2, [pc, #132]	; (800a740 <TIM_Base_SetConfig+0xb4>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d108      	bne.n	800a6d0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2270      	movs	r2, #112	; 0x70
 800a6c2:	4393      	bics	r3, r2
 800a6c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	68fa      	ldr	r2, [r7, #12]
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	2380      	movs	r3, #128	; 0x80
 800a6d4:	05db      	lsls	r3, r3, #23
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d00b      	beq.n	800a6f2 <TIM_Base_SetConfig+0x66>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	4a16      	ldr	r2, [pc, #88]	; (800a738 <TIM_Base_SetConfig+0xac>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d007      	beq.n	800a6f2 <TIM_Base_SetConfig+0x66>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	4a15      	ldr	r2, [pc, #84]	; (800a73c <TIM_Base_SetConfig+0xb0>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d003      	beq.n	800a6f2 <TIM_Base_SetConfig+0x66>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	4a14      	ldr	r2, [pc, #80]	; (800a740 <TIM_Base_SetConfig+0xb4>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d108      	bne.n	800a704 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	4a13      	ldr	r2, [pc, #76]	; (800a744 <TIM_Base_SetConfig+0xb8>)
 800a6f6:	4013      	ands	r3, r2
 800a6f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	68db      	ldr	r3, [r3, #12]
 800a6fe:	68fa      	ldr	r2, [r7, #12]
 800a700:	4313      	orrs	r3, r2
 800a702:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2280      	movs	r2, #128	; 0x80
 800a708:	4393      	bics	r3, r2
 800a70a:	001a      	movs	r2, r3
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	691b      	ldr	r3, [r3, #16]
 800a710:	4313      	orrs	r3, r2
 800a712:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	68fa      	ldr	r2, [r7, #12]
 800a718:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	689a      	ldr	r2, [r3, #8]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	681a      	ldr	r2, [r3, #0]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2201      	movs	r2, #1
 800a72e:	615a      	str	r2, [r3, #20]
}
 800a730:	46c0      	nop			; (mov r8, r8)
 800a732:	46bd      	mov	sp, r7
 800a734:	b004      	add	sp, #16
 800a736:	bd80      	pop	{r7, pc}
 800a738:	40000400 	.word	0x40000400
 800a73c:	40010800 	.word	0x40010800
 800a740:	40011400 	.word	0x40011400
 800a744:	fffffcff 	.word	0xfffffcff

0800a748 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a1b      	ldr	r3, [r3, #32]
 800a756:	2201      	movs	r2, #1
 800a758:	4393      	bics	r3, r2
 800a75a:	001a      	movs	r2, r3
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6a1b      	ldr	r3, [r3, #32]
 800a764:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	699b      	ldr	r3, [r3, #24]
 800a770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2270      	movs	r2, #112	; 0x70
 800a776:	4393      	bics	r3, r2
 800a778:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2203      	movs	r2, #3
 800a77e:	4393      	bics	r3, r2
 800a780:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	68fa      	ldr	r2, [r7, #12]
 800a788:	4313      	orrs	r3, r2
 800a78a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	2202      	movs	r2, #2
 800a790:	4393      	bics	r3, r2
 800a792:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	689b      	ldr	r3, [r3, #8]
 800a798:	697a      	ldr	r2, [r7, #20]
 800a79a:	4313      	orrs	r3, r2
 800a79c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	693a      	ldr	r2, [r7, #16]
 800a7a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	68fa      	ldr	r2, [r7, #12]
 800a7a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	685a      	ldr	r2, [r3, #4]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	697a      	ldr	r2, [r7, #20]
 800a7b6:	621a      	str	r2, [r3, #32]
}
 800a7b8:	46c0      	nop			; (mov r8, r8)
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	b006      	add	sp, #24
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b086      	sub	sp, #24
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6a1b      	ldr	r3, [r3, #32]
 800a7ce:	2210      	movs	r2, #16
 800a7d0:	4393      	bics	r3, r2
 800a7d2:	001a      	movs	r2, r3
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6a1b      	ldr	r3, [r3, #32]
 800a7dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	699b      	ldr	r3, [r3, #24]
 800a7e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	4a13      	ldr	r2, [pc, #76]	; (800a83c <TIM_OC2_SetConfig+0x7c>)
 800a7ee:	4013      	ands	r3, r2
 800a7f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	4a12      	ldr	r2, [pc, #72]	; (800a840 <TIM_OC2_SetConfig+0x80>)
 800a7f6:	4013      	ands	r3, r2
 800a7f8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	021b      	lsls	r3, r3, #8
 800a800:	68fa      	ldr	r2, [r7, #12]
 800a802:	4313      	orrs	r3, r2
 800a804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	2220      	movs	r2, #32
 800a80a:	4393      	bics	r3, r2
 800a80c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	689b      	ldr	r3, [r3, #8]
 800a812:	011b      	lsls	r3, r3, #4
 800a814:	697a      	ldr	r2, [r7, #20]
 800a816:	4313      	orrs	r3, r2
 800a818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	693a      	ldr	r2, [r7, #16]
 800a81e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	68fa      	ldr	r2, [r7, #12]
 800a824:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	685a      	ldr	r2, [r3, #4]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	697a      	ldr	r2, [r7, #20]
 800a832:	621a      	str	r2, [r3, #32]
}
 800a834:	46c0      	nop			; (mov r8, r8)
 800a836:	46bd      	mov	sp, r7
 800a838:	b006      	add	sp, #24
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	ffff8fff 	.word	0xffff8fff
 800a840:	fffffcff 	.word	0xfffffcff

0800a844 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b086      	sub	sp, #24
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6a1b      	ldr	r3, [r3, #32]
 800a852:	4a1a      	ldr	r2, [pc, #104]	; (800a8bc <TIM_OC3_SetConfig+0x78>)
 800a854:	401a      	ands	r2, r3
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6a1b      	ldr	r3, [r3, #32]
 800a85e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	69db      	ldr	r3, [r3, #28]
 800a86a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2270      	movs	r2, #112	; 0x70
 800a870:	4393      	bics	r3, r2
 800a872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2203      	movs	r2, #3
 800a878:	4393      	bics	r3, r2
 800a87a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	68fa      	ldr	r2, [r7, #12]
 800a882:	4313      	orrs	r3, r2
 800a884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	4a0d      	ldr	r2, [pc, #52]	; (800a8c0 <TIM_OC3_SetConfig+0x7c>)
 800a88a:	4013      	ands	r3, r2
 800a88c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	689b      	ldr	r3, [r3, #8]
 800a892:	021b      	lsls	r3, r3, #8
 800a894:	697a      	ldr	r2, [r7, #20]
 800a896:	4313      	orrs	r3, r2
 800a898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	693a      	ldr	r2, [r7, #16]
 800a89e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	68fa      	ldr	r2, [r7, #12]
 800a8a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	685a      	ldr	r2, [r3, #4]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	697a      	ldr	r2, [r7, #20]
 800a8b2:	621a      	str	r2, [r3, #32]
}
 800a8b4:	46c0      	nop			; (mov r8, r8)
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	b006      	add	sp, #24
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	fffffeff 	.word	0xfffffeff
 800a8c0:	fffffdff 	.word	0xfffffdff

0800a8c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b086      	sub	sp, #24
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6a1b      	ldr	r3, [r3, #32]
 800a8d2:	4a1b      	ldr	r2, [pc, #108]	; (800a940 <TIM_OC4_SetConfig+0x7c>)
 800a8d4:	401a      	ands	r2, r3
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6a1b      	ldr	r3, [r3, #32]
 800a8de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	69db      	ldr	r3, [r3, #28]
 800a8ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	4a15      	ldr	r2, [pc, #84]	; (800a944 <TIM_OC4_SetConfig+0x80>)
 800a8f0:	4013      	ands	r3, r2
 800a8f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	4a14      	ldr	r2, [pc, #80]	; (800a948 <TIM_OC4_SetConfig+0x84>)
 800a8f8:	4013      	ands	r3, r2
 800a8fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	021b      	lsls	r3, r3, #8
 800a902:	68fa      	ldr	r2, [r7, #12]
 800a904:	4313      	orrs	r3, r2
 800a906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	4a10      	ldr	r2, [pc, #64]	; (800a94c <TIM_OC4_SetConfig+0x88>)
 800a90c:	4013      	ands	r3, r2
 800a90e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	689b      	ldr	r3, [r3, #8]
 800a914:	031b      	lsls	r3, r3, #12
 800a916:	697a      	ldr	r2, [r7, #20]
 800a918:	4313      	orrs	r3, r2
 800a91a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	693a      	ldr	r2, [r7, #16]
 800a920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	68fa      	ldr	r2, [r7, #12]
 800a926:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	685a      	ldr	r2, [r3, #4]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	697a      	ldr	r2, [r7, #20]
 800a934:	621a      	str	r2, [r3, #32]
}
 800a936:	46c0      	nop			; (mov r8, r8)
 800a938:	46bd      	mov	sp, r7
 800a93a:	b006      	add	sp, #24
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	46c0      	nop			; (mov r8, r8)
 800a940:	ffffefff 	.word	0xffffefff
 800a944:	ffff8fff 	.word	0xffff8fff
 800a948:	fffffcff 	.word	0xfffffcff
 800a94c:	ffffdfff 	.word	0xffffdfff

0800a950 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b086      	sub	sp, #24
 800a954:	af00      	add	r7, sp, #0
 800a956:	60f8      	str	r0, [r7, #12]
 800a958:	60b9      	str	r1, [r7, #8]
 800a95a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	6a1b      	ldr	r3, [r3, #32]
 800a960:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	6a1b      	ldr	r3, [r3, #32]
 800a966:	2201      	movs	r2, #1
 800a968:	4393      	bics	r3, r2
 800a96a:	001a      	movs	r2, r3
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	699b      	ldr	r3, [r3, #24]
 800a974:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	22f0      	movs	r2, #240	; 0xf0
 800a97a:	4393      	bics	r3, r2
 800a97c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	011b      	lsls	r3, r3, #4
 800a982:	693a      	ldr	r2, [r7, #16]
 800a984:	4313      	orrs	r3, r2
 800a986:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	220a      	movs	r2, #10
 800a98c:	4393      	bics	r3, r2
 800a98e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a990:	697a      	ldr	r2, [r7, #20]
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	4313      	orrs	r3, r2
 800a996:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	693a      	ldr	r2, [r7, #16]
 800a99c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	697a      	ldr	r2, [r7, #20]
 800a9a2:	621a      	str	r2, [r3, #32]
}
 800a9a4:	46c0      	nop			; (mov r8, r8)
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	b006      	add	sp, #24
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b086      	sub	sp, #24
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	6a1b      	ldr	r3, [r3, #32]
 800a9bc:	2210      	movs	r2, #16
 800a9be:	4393      	bics	r3, r2
 800a9c0:	001a      	movs	r2, r3
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	699b      	ldr	r3, [r3, #24]
 800a9ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	6a1b      	ldr	r3, [r3, #32]
 800a9d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	4a0d      	ldr	r2, [pc, #52]	; (800aa0c <TIM_TI2_ConfigInputStage+0x60>)
 800a9d6:	4013      	ands	r3, r2
 800a9d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	031b      	lsls	r3, r3, #12
 800a9de:	697a      	ldr	r2, [r7, #20]
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	22a0      	movs	r2, #160	; 0xa0
 800a9e8:	4393      	bics	r3, r2
 800a9ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	011b      	lsls	r3, r3, #4
 800a9f0:	693a      	ldr	r2, [r7, #16]
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	697a      	ldr	r2, [r7, #20]
 800a9fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	693a      	ldr	r2, [r7, #16]
 800aa00:	621a      	str	r2, [r3, #32]
}
 800aa02:	46c0      	nop			; (mov r8, r8)
 800aa04:	46bd      	mov	sp, r7
 800aa06:	b006      	add	sp, #24
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	46c0      	nop			; (mov r8, r8)
 800aa0c:	ffff0fff 	.word	0xffff0fff

0800aa10 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	689b      	ldr	r3, [r3, #8]
 800aa1e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2270      	movs	r2, #112	; 0x70
 800aa24:	4393      	bics	r3, r2
 800aa26:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aa28:	683a      	ldr	r2, [r7, #0]
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	2207      	movs	r2, #7
 800aa30:	4313      	orrs	r3, r2
 800aa32:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	68fa      	ldr	r2, [r7, #12]
 800aa38:	609a      	str	r2, [r3, #8]
}
 800aa3a:	46c0      	nop			; (mov r8, r8)
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	b004      	add	sp, #16
 800aa40:	bd80      	pop	{r7, pc}
	...

0800aa44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b086      	sub	sp, #24
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	60f8      	str	r0, [r7, #12]
 800aa4c:	60b9      	str	r1, [r7, #8]
 800aa4e:	607a      	str	r2, [r7, #4]
 800aa50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	4a09      	ldr	r2, [pc, #36]	; (800aa80 <TIM_ETR_SetConfig+0x3c>)
 800aa5c:	4013      	ands	r3, r2
 800aa5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	021a      	lsls	r2, r3, #8
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	431a      	orrs	r2, r3
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	697a      	ldr	r2, [r7, #20]
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	697a      	ldr	r2, [r7, #20]
 800aa76:	609a      	str	r2, [r3, #8]
}
 800aa78:	46c0      	nop			; (mov r8, r8)
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	b006      	add	sp, #24
 800aa7e:	bd80      	pop	{r7, pc}
 800aa80:	ffff00ff 	.word	0xffff00ff

0800aa84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b086      	sub	sp, #24
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	60f8      	str	r0, [r7, #12]
 800aa8c:	60b9      	str	r1, [r7, #8]
 800aa8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	221f      	movs	r2, #31
 800aa94:	4013      	ands	r3, r2
 800aa96:	2201      	movs	r2, #1
 800aa98:	409a      	lsls	r2, r3
 800aa9a:	0013      	movs	r3, r2
 800aa9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	6a1b      	ldr	r3, [r3, #32]
 800aaa2:	697a      	ldr	r2, [r7, #20]
 800aaa4:	43d2      	mvns	r2, r2
 800aaa6:	401a      	ands	r2, r3
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	6a1a      	ldr	r2, [r3, #32]
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	211f      	movs	r1, #31
 800aab4:	400b      	ands	r3, r1
 800aab6:	6879      	ldr	r1, [r7, #4]
 800aab8:	4099      	lsls	r1, r3
 800aaba:	000b      	movs	r3, r1
 800aabc:	431a      	orrs	r2, r3
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	621a      	str	r2, [r3, #32]
}
 800aac2:	46c0      	nop			; (mov r8, r8)
 800aac4:	46bd      	mov	sp, r7
 800aac6:	b006      	add	sp, #24
 800aac8:	bd80      	pop	{r7, pc}

0800aaca <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aaca:	b580      	push	{r7, lr}
 800aacc:	b084      	sub	sp, #16
 800aace:	af00      	add	r7, sp, #0
 800aad0:	6078      	str	r0, [r7, #4]
 800aad2:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2238      	movs	r2, #56	; 0x38
 800aad8:	5c9b      	ldrb	r3, [r3, r2]
 800aada:	2b01      	cmp	r3, #1
 800aadc:	d101      	bne.n	800aae2 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aade:	2302      	movs	r3, #2
 800aae0:	e032      	b.n	800ab48 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2238      	movs	r2, #56	; 0x38
 800aae6:	2101      	movs	r1, #1
 800aae8:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2239      	movs	r2, #57	; 0x39
 800aaee:	2102      	movs	r1, #2
 800aaf0:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	685b      	ldr	r3, [r3, #4]
 800aaf8:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	689b      	ldr	r3, [r3, #8]
 800ab00:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	2270      	movs	r2, #112	; 0x70
 800ab06:	4393      	bics	r3, r2
 800ab08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	68fa      	ldr	r2, [r7, #12]
 800ab10:	4313      	orrs	r3, r2
 800ab12:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	2280      	movs	r2, #128	; 0x80
 800ab18:	4393      	bics	r3, r2
 800ab1a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	685b      	ldr	r3, [r3, #4]
 800ab20:	68ba      	ldr	r2, [r7, #8]
 800ab22:	4313      	orrs	r3, r2
 800ab24:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	68fa      	ldr	r2, [r7, #12]
 800ab2c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	68ba      	ldr	r2, [r7, #8]
 800ab34:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2239      	movs	r2, #57	; 0x39
 800ab3a:	2101      	movs	r1, #1
 800ab3c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2238      	movs	r2, #56	; 0x38
 800ab42:	2100      	movs	r1, #0
 800ab44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ab46:	2300      	movs	r3, #0
}
 800ab48:	0018      	movs	r0, r3
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	b004      	add	sp, #16
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b082      	sub	sp, #8
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2238      	movs	r2, #56	; 0x38
 800ab5e:	5c9b      	ldrb	r3, [r3, r2]
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d101      	bne.n	800ab68 <HAL_TIMEx_RemapConfig+0x18>
 800ab64:	2302      	movs	r3, #2
 800ab66:	e00c      	b.n	800ab82 <HAL_TIMEx_RemapConfig+0x32>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2238      	movs	r2, #56	; 0x38
 800ab6c:	2101      	movs	r1, #1
 800ab6e:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	683a      	ldr	r2, [r7, #0]
 800ab76:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2238      	movs	r2, #56	; 0x38
 800ab7c:	2100      	movs	r1, #0
 800ab7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ab80:	2300      	movs	r3, #0
}
 800ab82:	0018      	movs	r0, r3
 800ab84:	46bd      	mov	sp, r7
 800ab86:	b002      	add	sp, #8
 800ab88:	bd80      	pop	{r7, pc}
	...

0800ab8c <calloc>:
 800ab8c:	b510      	push	{r4, lr}
 800ab8e:	4b03      	ldr	r3, [pc, #12]	; (800ab9c <calloc+0x10>)
 800ab90:	000a      	movs	r2, r1
 800ab92:	0001      	movs	r1, r0
 800ab94:	6818      	ldr	r0, [r3, #0]
 800ab96:	f000 f83e 	bl	800ac16 <_calloc_r>
 800ab9a:	bd10      	pop	{r4, pc}
 800ab9c:	2000006c 	.word	0x2000006c

0800aba0 <__errno>:
 800aba0:	4b01      	ldr	r3, [pc, #4]	; (800aba8 <__errno+0x8>)
 800aba2:	6818      	ldr	r0, [r3, #0]
 800aba4:	4770      	bx	lr
 800aba6:	46c0      	nop			; (mov r8, r8)
 800aba8:	2000006c 	.word	0x2000006c

0800abac <__libc_init_array>:
 800abac:	b570      	push	{r4, r5, r6, lr}
 800abae:	2600      	movs	r6, #0
 800abb0:	4d0c      	ldr	r5, [pc, #48]	; (800abe4 <__libc_init_array+0x38>)
 800abb2:	4c0d      	ldr	r4, [pc, #52]	; (800abe8 <__libc_init_array+0x3c>)
 800abb4:	1b64      	subs	r4, r4, r5
 800abb6:	10a4      	asrs	r4, r4, #2
 800abb8:	42a6      	cmp	r6, r4
 800abba:	d109      	bne.n	800abd0 <__libc_init_array+0x24>
 800abbc:	2600      	movs	r6, #0
 800abbe:	f000 fc37 	bl	800b430 <_init>
 800abc2:	4d0a      	ldr	r5, [pc, #40]	; (800abec <__libc_init_array+0x40>)
 800abc4:	4c0a      	ldr	r4, [pc, #40]	; (800abf0 <__libc_init_array+0x44>)
 800abc6:	1b64      	subs	r4, r4, r5
 800abc8:	10a4      	asrs	r4, r4, #2
 800abca:	42a6      	cmp	r6, r4
 800abcc:	d105      	bne.n	800abda <__libc_init_array+0x2e>
 800abce:	bd70      	pop	{r4, r5, r6, pc}
 800abd0:	00b3      	lsls	r3, r6, #2
 800abd2:	58eb      	ldr	r3, [r5, r3]
 800abd4:	4798      	blx	r3
 800abd6:	3601      	adds	r6, #1
 800abd8:	e7ee      	b.n	800abb8 <__libc_init_array+0xc>
 800abda:	00b3      	lsls	r3, r6, #2
 800abdc:	58eb      	ldr	r3, [r5, r3]
 800abde:	4798      	blx	r3
 800abe0:	3601      	adds	r6, #1
 800abe2:	e7f2      	b.n	800abca <__libc_init_array+0x1e>
 800abe4:	0800bfe8 	.word	0x0800bfe8
 800abe8:	0800bfe8 	.word	0x0800bfe8
 800abec:	0800bfe8 	.word	0x0800bfe8
 800abf0:	0800bfec 	.word	0x0800bfec

0800abf4 <memcpy>:
 800abf4:	2300      	movs	r3, #0
 800abf6:	b510      	push	{r4, lr}
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d100      	bne.n	800abfe <memcpy+0xa>
 800abfc:	bd10      	pop	{r4, pc}
 800abfe:	5ccc      	ldrb	r4, [r1, r3]
 800ac00:	54c4      	strb	r4, [r0, r3]
 800ac02:	3301      	adds	r3, #1
 800ac04:	e7f8      	b.n	800abf8 <memcpy+0x4>

0800ac06 <memset>:
 800ac06:	0003      	movs	r3, r0
 800ac08:	1812      	adds	r2, r2, r0
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d100      	bne.n	800ac10 <memset+0xa>
 800ac0e:	4770      	bx	lr
 800ac10:	7019      	strb	r1, [r3, #0]
 800ac12:	3301      	adds	r3, #1
 800ac14:	e7f9      	b.n	800ac0a <memset+0x4>

0800ac16 <_calloc_r>:
 800ac16:	434a      	muls	r2, r1
 800ac18:	b570      	push	{r4, r5, r6, lr}
 800ac1a:	0011      	movs	r1, r2
 800ac1c:	0014      	movs	r4, r2
 800ac1e:	f000 f809 	bl	800ac34 <_malloc_r>
 800ac22:	1e05      	subs	r5, r0, #0
 800ac24:	d003      	beq.n	800ac2e <_calloc_r+0x18>
 800ac26:	0022      	movs	r2, r4
 800ac28:	2100      	movs	r1, #0
 800ac2a:	f7ff ffec 	bl	800ac06 <memset>
 800ac2e:	0028      	movs	r0, r5
 800ac30:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ac34 <_malloc_r>:
 800ac34:	2303      	movs	r3, #3
 800ac36:	b570      	push	{r4, r5, r6, lr}
 800ac38:	1ccd      	adds	r5, r1, #3
 800ac3a:	439d      	bics	r5, r3
 800ac3c:	3508      	adds	r5, #8
 800ac3e:	0006      	movs	r6, r0
 800ac40:	2d0c      	cmp	r5, #12
 800ac42:	d21e      	bcs.n	800ac82 <_malloc_r+0x4e>
 800ac44:	250c      	movs	r5, #12
 800ac46:	42a9      	cmp	r1, r5
 800ac48:	d81d      	bhi.n	800ac86 <_malloc_r+0x52>
 800ac4a:	0030      	movs	r0, r6
 800ac4c:	f000 f882 	bl	800ad54 <__malloc_lock>
 800ac50:	4a25      	ldr	r2, [pc, #148]	; (800ace8 <_malloc_r+0xb4>)
 800ac52:	6814      	ldr	r4, [r2, #0]
 800ac54:	0021      	movs	r1, r4
 800ac56:	2900      	cmp	r1, #0
 800ac58:	d119      	bne.n	800ac8e <_malloc_r+0x5a>
 800ac5a:	4c24      	ldr	r4, [pc, #144]	; (800acec <_malloc_r+0xb8>)
 800ac5c:	6823      	ldr	r3, [r4, #0]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d103      	bne.n	800ac6a <_malloc_r+0x36>
 800ac62:	0030      	movs	r0, r6
 800ac64:	f000 f844 	bl	800acf0 <_sbrk_r>
 800ac68:	6020      	str	r0, [r4, #0]
 800ac6a:	0029      	movs	r1, r5
 800ac6c:	0030      	movs	r0, r6
 800ac6e:	f000 f83f 	bl	800acf0 <_sbrk_r>
 800ac72:	1c43      	adds	r3, r0, #1
 800ac74:	d12b      	bne.n	800acce <_malloc_r+0x9a>
 800ac76:	230c      	movs	r3, #12
 800ac78:	0030      	movs	r0, r6
 800ac7a:	6033      	str	r3, [r6, #0]
 800ac7c:	f000 f86b 	bl	800ad56 <__malloc_unlock>
 800ac80:	e003      	b.n	800ac8a <_malloc_r+0x56>
 800ac82:	2d00      	cmp	r5, #0
 800ac84:	dadf      	bge.n	800ac46 <_malloc_r+0x12>
 800ac86:	230c      	movs	r3, #12
 800ac88:	6033      	str	r3, [r6, #0]
 800ac8a:	2000      	movs	r0, #0
 800ac8c:	bd70      	pop	{r4, r5, r6, pc}
 800ac8e:	680b      	ldr	r3, [r1, #0]
 800ac90:	1b5b      	subs	r3, r3, r5
 800ac92:	d419      	bmi.n	800acc8 <_malloc_r+0x94>
 800ac94:	2b0b      	cmp	r3, #11
 800ac96:	d903      	bls.n	800aca0 <_malloc_r+0x6c>
 800ac98:	600b      	str	r3, [r1, #0]
 800ac9a:	18cc      	adds	r4, r1, r3
 800ac9c:	6025      	str	r5, [r4, #0]
 800ac9e:	e003      	b.n	800aca8 <_malloc_r+0x74>
 800aca0:	684b      	ldr	r3, [r1, #4]
 800aca2:	428c      	cmp	r4, r1
 800aca4:	d10d      	bne.n	800acc2 <_malloc_r+0x8e>
 800aca6:	6013      	str	r3, [r2, #0]
 800aca8:	0030      	movs	r0, r6
 800acaa:	f000 f854 	bl	800ad56 <__malloc_unlock>
 800acae:	0020      	movs	r0, r4
 800acb0:	2207      	movs	r2, #7
 800acb2:	300b      	adds	r0, #11
 800acb4:	1d23      	adds	r3, r4, #4
 800acb6:	4390      	bics	r0, r2
 800acb8:	1ac3      	subs	r3, r0, r3
 800acba:	d0e7      	beq.n	800ac8c <_malloc_r+0x58>
 800acbc:	425a      	negs	r2, r3
 800acbe:	50e2      	str	r2, [r4, r3]
 800acc0:	e7e4      	b.n	800ac8c <_malloc_r+0x58>
 800acc2:	6063      	str	r3, [r4, #4]
 800acc4:	000c      	movs	r4, r1
 800acc6:	e7ef      	b.n	800aca8 <_malloc_r+0x74>
 800acc8:	000c      	movs	r4, r1
 800acca:	6849      	ldr	r1, [r1, #4]
 800accc:	e7c3      	b.n	800ac56 <_malloc_r+0x22>
 800acce:	2303      	movs	r3, #3
 800acd0:	1cc4      	adds	r4, r0, #3
 800acd2:	439c      	bics	r4, r3
 800acd4:	42a0      	cmp	r0, r4
 800acd6:	d0e1      	beq.n	800ac9c <_malloc_r+0x68>
 800acd8:	1a21      	subs	r1, r4, r0
 800acda:	0030      	movs	r0, r6
 800acdc:	f000 f808 	bl	800acf0 <_sbrk_r>
 800ace0:	1c43      	adds	r3, r0, #1
 800ace2:	d1db      	bne.n	800ac9c <_malloc_r+0x68>
 800ace4:	e7c7      	b.n	800ac76 <_malloc_r+0x42>
 800ace6:	46c0      	nop			; (mov r8, r8)
 800ace8:	20000138 	.word	0x20000138
 800acec:	2000013c 	.word	0x2000013c

0800acf0 <_sbrk_r>:
 800acf0:	2300      	movs	r3, #0
 800acf2:	b570      	push	{r4, r5, r6, lr}
 800acf4:	4c06      	ldr	r4, [pc, #24]	; (800ad10 <_sbrk_r+0x20>)
 800acf6:	0005      	movs	r5, r0
 800acf8:	0008      	movs	r0, r1
 800acfa:	6023      	str	r3, [r4, #0]
 800acfc:	f7f9 fb86 	bl	800440c <_sbrk>
 800ad00:	1c43      	adds	r3, r0, #1
 800ad02:	d103      	bne.n	800ad0c <_sbrk_r+0x1c>
 800ad04:	6823      	ldr	r3, [r4, #0]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d000      	beq.n	800ad0c <_sbrk_r+0x1c>
 800ad0a:	602b      	str	r3, [r5, #0]
 800ad0c:	bd70      	pop	{r4, r5, r6, pc}
 800ad0e:	46c0      	nop			; (mov r8, r8)
 800ad10:	200003a4 	.word	0x200003a4

0800ad14 <siprintf>:
 800ad14:	b40e      	push	{r1, r2, r3}
 800ad16:	b500      	push	{lr}
 800ad18:	490b      	ldr	r1, [pc, #44]	; (800ad48 <siprintf+0x34>)
 800ad1a:	b09c      	sub	sp, #112	; 0x70
 800ad1c:	ab1d      	add	r3, sp, #116	; 0x74
 800ad1e:	9002      	str	r0, [sp, #8]
 800ad20:	9006      	str	r0, [sp, #24]
 800ad22:	9107      	str	r1, [sp, #28]
 800ad24:	9104      	str	r1, [sp, #16]
 800ad26:	4809      	ldr	r0, [pc, #36]	; (800ad4c <siprintf+0x38>)
 800ad28:	4909      	ldr	r1, [pc, #36]	; (800ad50 <siprintf+0x3c>)
 800ad2a:	cb04      	ldmia	r3!, {r2}
 800ad2c:	9105      	str	r1, [sp, #20]
 800ad2e:	6800      	ldr	r0, [r0, #0]
 800ad30:	a902      	add	r1, sp, #8
 800ad32:	9301      	str	r3, [sp, #4]
 800ad34:	f000 f872 	bl	800ae1c <_svfiprintf_r>
 800ad38:	2300      	movs	r3, #0
 800ad3a:	9a02      	ldr	r2, [sp, #8]
 800ad3c:	7013      	strb	r3, [r2, #0]
 800ad3e:	b01c      	add	sp, #112	; 0x70
 800ad40:	bc08      	pop	{r3}
 800ad42:	b003      	add	sp, #12
 800ad44:	4718      	bx	r3
 800ad46:	46c0      	nop			; (mov r8, r8)
 800ad48:	7fffffff 	.word	0x7fffffff
 800ad4c:	2000006c 	.word	0x2000006c
 800ad50:	ffff0208 	.word	0xffff0208

0800ad54 <__malloc_lock>:
 800ad54:	4770      	bx	lr

0800ad56 <__malloc_unlock>:
 800ad56:	4770      	bx	lr

0800ad58 <__ssputs_r>:
 800ad58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad5a:	688e      	ldr	r6, [r1, #8]
 800ad5c:	b085      	sub	sp, #20
 800ad5e:	0007      	movs	r7, r0
 800ad60:	000c      	movs	r4, r1
 800ad62:	9203      	str	r2, [sp, #12]
 800ad64:	9301      	str	r3, [sp, #4]
 800ad66:	429e      	cmp	r6, r3
 800ad68:	d83c      	bhi.n	800ade4 <__ssputs_r+0x8c>
 800ad6a:	2390      	movs	r3, #144	; 0x90
 800ad6c:	898a      	ldrh	r2, [r1, #12]
 800ad6e:	00db      	lsls	r3, r3, #3
 800ad70:	421a      	tst	r2, r3
 800ad72:	d034      	beq.n	800adde <__ssputs_r+0x86>
 800ad74:	2503      	movs	r5, #3
 800ad76:	6909      	ldr	r1, [r1, #16]
 800ad78:	6823      	ldr	r3, [r4, #0]
 800ad7a:	1a5b      	subs	r3, r3, r1
 800ad7c:	9302      	str	r3, [sp, #8]
 800ad7e:	6963      	ldr	r3, [r4, #20]
 800ad80:	9802      	ldr	r0, [sp, #8]
 800ad82:	435d      	muls	r5, r3
 800ad84:	0feb      	lsrs	r3, r5, #31
 800ad86:	195d      	adds	r5, r3, r5
 800ad88:	9b01      	ldr	r3, [sp, #4]
 800ad8a:	106d      	asrs	r5, r5, #1
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	181b      	adds	r3, r3, r0
 800ad90:	42ab      	cmp	r3, r5
 800ad92:	d900      	bls.n	800ad96 <__ssputs_r+0x3e>
 800ad94:	001d      	movs	r5, r3
 800ad96:	0553      	lsls	r3, r2, #21
 800ad98:	d532      	bpl.n	800ae00 <__ssputs_r+0xa8>
 800ad9a:	0029      	movs	r1, r5
 800ad9c:	0038      	movs	r0, r7
 800ad9e:	f7ff ff49 	bl	800ac34 <_malloc_r>
 800ada2:	1e06      	subs	r6, r0, #0
 800ada4:	d109      	bne.n	800adba <__ssputs_r+0x62>
 800ada6:	230c      	movs	r3, #12
 800ada8:	603b      	str	r3, [r7, #0]
 800adaa:	2340      	movs	r3, #64	; 0x40
 800adac:	2001      	movs	r0, #1
 800adae:	89a2      	ldrh	r2, [r4, #12]
 800adb0:	4240      	negs	r0, r0
 800adb2:	4313      	orrs	r3, r2
 800adb4:	81a3      	strh	r3, [r4, #12]
 800adb6:	b005      	add	sp, #20
 800adb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adba:	9a02      	ldr	r2, [sp, #8]
 800adbc:	6921      	ldr	r1, [r4, #16]
 800adbe:	f7ff ff19 	bl	800abf4 <memcpy>
 800adc2:	89a3      	ldrh	r3, [r4, #12]
 800adc4:	4a14      	ldr	r2, [pc, #80]	; (800ae18 <__ssputs_r+0xc0>)
 800adc6:	401a      	ands	r2, r3
 800adc8:	2380      	movs	r3, #128	; 0x80
 800adca:	4313      	orrs	r3, r2
 800adcc:	81a3      	strh	r3, [r4, #12]
 800adce:	9b02      	ldr	r3, [sp, #8]
 800add0:	6126      	str	r6, [r4, #16]
 800add2:	18f6      	adds	r6, r6, r3
 800add4:	6026      	str	r6, [r4, #0]
 800add6:	6165      	str	r5, [r4, #20]
 800add8:	9e01      	ldr	r6, [sp, #4]
 800adda:	1aed      	subs	r5, r5, r3
 800addc:	60a5      	str	r5, [r4, #8]
 800adde:	9b01      	ldr	r3, [sp, #4]
 800ade0:	429e      	cmp	r6, r3
 800ade2:	d900      	bls.n	800ade6 <__ssputs_r+0x8e>
 800ade4:	9e01      	ldr	r6, [sp, #4]
 800ade6:	0032      	movs	r2, r6
 800ade8:	9903      	ldr	r1, [sp, #12]
 800adea:	6820      	ldr	r0, [r4, #0]
 800adec:	f000 fa95 	bl	800b31a <memmove>
 800adf0:	68a3      	ldr	r3, [r4, #8]
 800adf2:	2000      	movs	r0, #0
 800adf4:	1b9b      	subs	r3, r3, r6
 800adf6:	60a3      	str	r3, [r4, #8]
 800adf8:	6823      	ldr	r3, [r4, #0]
 800adfa:	199e      	adds	r6, r3, r6
 800adfc:	6026      	str	r6, [r4, #0]
 800adfe:	e7da      	b.n	800adb6 <__ssputs_r+0x5e>
 800ae00:	002a      	movs	r2, r5
 800ae02:	0038      	movs	r0, r7
 800ae04:	f000 fae6 	bl	800b3d4 <_realloc_r>
 800ae08:	1e06      	subs	r6, r0, #0
 800ae0a:	d1e0      	bne.n	800adce <__ssputs_r+0x76>
 800ae0c:	6921      	ldr	r1, [r4, #16]
 800ae0e:	0038      	movs	r0, r7
 800ae10:	f000 fa96 	bl	800b340 <_free_r>
 800ae14:	e7c7      	b.n	800ada6 <__ssputs_r+0x4e>
 800ae16:	46c0      	nop			; (mov r8, r8)
 800ae18:	fffffb7f 	.word	0xfffffb7f

0800ae1c <_svfiprintf_r>:
 800ae1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae1e:	b0a1      	sub	sp, #132	; 0x84
 800ae20:	9003      	str	r0, [sp, #12]
 800ae22:	001d      	movs	r5, r3
 800ae24:	898b      	ldrh	r3, [r1, #12]
 800ae26:	000f      	movs	r7, r1
 800ae28:	0016      	movs	r6, r2
 800ae2a:	061b      	lsls	r3, r3, #24
 800ae2c:	d511      	bpl.n	800ae52 <_svfiprintf_r+0x36>
 800ae2e:	690b      	ldr	r3, [r1, #16]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d10e      	bne.n	800ae52 <_svfiprintf_r+0x36>
 800ae34:	2140      	movs	r1, #64	; 0x40
 800ae36:	f7ff fefd 	bl	800ac34 <_malloc_r>
 800ae3a:	6038      	str	r0, [r7, #0]
 800ae3c:	6138      	str	r0, [r7, #16]
 800ae3e:	2800      	cmp	r0, #0
 800ae40:	d105      	bne.n	800ae4e <_svfiprintf_r+0x32>
 800ae42:	230c      	movs	r3, #12
 800ae44:	9a03      	ldr	r2, [sp, #12]
 800ae46:	3801      	subs	r0, #1
 800ae48:	6013      	str	r3, [r2, #0]
 800ae4a:	b021      	add	sp, #132	; 0x84
 800ae4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae4e:	2340      	movs	r3, #64	; 0x40
 800ae50:	617b      	str	r3, [r7, #20]
 800ae52:	2300      	movs	r3, #0
 800ae54:	ac08      	add	r4, sp, #32
 800ae56:	6163      	str	r3, [r4, #20]
 800ae58:	3320      	adds	r3, #32
 800ae5a:	7663      	strb	r3, [r4, #25]
 800ae5c:	3310      	adds	r3, #16
 800ae5e:	76a3      	strb	r3, [r4, #26]
 800ae60:	9507      	str	r5, [sp, #28]
 800ae62:	0035      	movs	r5, r6
 800ae64:	782b      	ldrb	r3, [r5, #0]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d001      	beq.n	800ae6e <_svfiprintf_r+0x52>
 800ae6a:	2b25      	cmp	r3, #37	; 0x25
 800ae6c:	d146      	bne.n	800aefc <_svfiprintf_r+0xe0>
 800ae6e:	1bab      	subs	r3, r5, r6
 800ae70:	9305      	str	r3, [sp, #20]
 800ae72:	d00c      	beq.n	800ae8e <_svfiprintf_r+0x72>
 800ae74:	0032      	movs	r2, r6
 800ae76:	0039      	movs	r1, r7
 800ae78:	9803      	ldr	r0, [sp, #12]
 800ae7a:	f7ff ff6d 	bl	800ad58 <__ssputs_r>
 800ae7e:	1c43      	adds	r3, r0, #1
 800ae80:	d100      	bne.n	800ae84 <_svfiprintf_r+0x68>
 800ae82:	e0ae      	b.n	800afe2 <_svfiprintf_r+0x1c6>
 800ae84:	6962      	ldr	r2, [r4, #20]
 800ae86:	9b05      	ldr	r3, [sp, #20]
 800ae88:	4694      	mov	ip, r2
 800ae8a:	4463      	add	r3, ip
 800ae8c:	6163      	str	r3, [r4, #20]
 800ae8e:	782b      	ldrb	r3, [r5, #0]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d100      	bne.n	800ae96 <_svfiprintf_r+0x7a>
 800ae94:	e0a5      	b.n	800afe2 <_svfiprintf_r+0x1c6>
 800ae96:	2201      	movs	r2, #1
 800ae98:	2300      	movs	r3, #0
 800ae9a:	4252      	negs	r2, r2
 800ae9c:	6062      	str	r2, [r4, #4]
 800ae9e:	a904      	add	r1, sp, #16
 800aea0:	3254      	adds	r2, #84	; 0x54
 800aea2:	1852      	adds	r2, r2, r1
 800aea4:	1c6e      	adds	r6, r5, #1
 800aea6:	6023      	str	r3, [r4, #0]
 800aea8:	60e3      	str	r3, [r4, #12]
 800aeaa:	60a3      	str	r3, [r4, #8]
 800aeac:	7013      	strb	r3, [r2, #0]
 800aeae:	65a3      	str	r3, [r4, #88]	; 0x58
 800aeb0:	7831      	ldrb	r1, [r6, #0]
 800aeb2:	2205      	movs	r2, #5
 800aeb4:	4853      	ldr	r0, [pc, #332]	; (800b004 <_svfiprintf_r+0x1e8>)
 800aeb6:	f000 fa25 	bl	800b304 <memchr>
 800aeba:	1c75      	adds	r5, r6, #1
 800aebc:	2800      	cmp	r0, #0
 800aebe:	d11f      	bne.n	800af00 <_svfiprintf_r+0xe4>
 800aec0:	6822      	ldr	r2, [r4, #0]
 800aec2:	06d3      	lsls	r3, r2, #27
 800aec4:	d504      	bpl.n	800aed0 <_svfiprintf_r+0xb4>
 800aec6:	2353      	movs	r3, #83	; 0x53
 800aec8:	a904      	add	r1, sp, #16
 800aeca:	185b      	adds	r3, r3, r1
 800aecc:	2120      	movs	r1, #32
 800aece:	7019      	strb	r1, [r3, #0]
 800aed0:	0713      	lsls	r3, r2, #28
 800aed2:	d504      	bpl.n	800aede <_svfiprintf_r+0xc2>
 800aed4:	2353      	movs	r3, #83	; 0x53
 800aed6:	a904      	add	r1, sp, #16
 800aed8:	185b      	adds	r3, r3, r1
 800aeda:	212b      	movs	r1, #43	; 0x2b
 800aedc:	7019      	strb	r1, [r3, #0]
 800aede:	7833      	ldrb	r3, [r6, #0]
 800aee0:	2b2a      	cmp	r3, #42	; 0x2a
 800aee2:	d016      	beq.n	800af12 <_svfiprintf_r+0xf6>
 800aee4:	0035      	movs	r5, r6
 800aee6:	2100      	movs	r1, #0
 800aee8:	200a      	movs	r0, #10
 800aeea:	68e3      	ldr	r3, [r4, #12]
 800aeec:	782a      	ldrb	r2, [r5, #0]
 800aeee:	1c6e      	adds	r6, r5, #1
 800aef0:	3a30      	subs	r2, #48	; 0x30
 800aef2:	2a09      	cmp	r2, #9
 800aef4:	d94e      	bls.n	800af94 <_svfiprintf_r+0x178>
 800aef6:	2900      	cmp	r1, #0
 800aef8:	d018      	beq.n	800af2c <_svfiprintf_r+0x110>
 800aefa:	e010      	b.n	800af1e <_svfiprintf_r+0x102>
 800aefc:	3501      	adds	r5, #1
 800aefe:	e7b1      	b.n	800ae64 <_svfiprintf_r+0x48>
 800af00:	4b40      	ldr	r3, [pc, #256]	; (800b004 <_svfiprintf_r+0x1e8>)
 800af02:	6822      	ldr	r2, [r4, #0]
 800af04:	1ac0      	subs	r0, r0, r3
 800af06:	2301      	movs	r3, #1
 800af08:	4083      	lsls	r3, r0
 800af0a:	4313      	orrs	r3, r2
 800af0c:	6023      	str	r3, [r4, #0]
 800af0e:	002e      	movs	r6, r5
 800af10:	e7ce      	b.n	800aeb0 <_svfiprintf_r+0x94>
 800af12:	9b07      	ldr	r3, [sp, #28]
 800af14:	1d19      	adds	r1, r3, #4
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	9107      	str	r1, [sp, #28]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	db01      	blt.n	800af22 <_svfiprintf_r+0x106>
 800af1e:	930b      	str	r3, [sp, #44]	; 0x2c
 800af20:	e004      	b.n	800af2c <_svfiprintf_r+0x110>
 800af22:	425b      	negs	r3, r3
 800af24:	60e3      	str	r3, [r4, #12]
 800af26:	2302      	movs	r3, #2
 800af28:	4313      	orrs	r3, r2
 800af2a:	6023      	str	r3, [r4, #0]
 800af2c:	782b      	ldrb	r3, [r5, #0]
 800af2e:	2b2e      	cmp	r3, #46	; 0x2e
 800af30:	d10a      	bne.n	800af48 <_svfiprintf_r+0x12c>
 800af32:	786b      	ldrb	r3, [r5, #1]
 800af34:	2b2a      	cmp	r3, #42	; 0x2a
 800af36:	d135      	bne.n	800afa4 <_svfiprintf_r+0x188>
 800af38:	9b07      	ldr	r3, [sp, #28]
 800af3a:	3502      	adds	r5, #2
 800af3c:	1d1a      	adds	r2, r3, #4
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	9207      	str	r2, [sp, #28]
 800af42:	2b00      	cmp	r3, #0
 800af44:	db2b      	blt.n	800af9e <_svfiprintf_r+0x182>
 800af46:	9309      	str	r3, [sp, #36]	; 0x24
 800af48:	4e2f      	ldr	r6, [pc, #188]	; (800b008 <_svfiprintf_r+0x1ec>)
 800af4a:	7829      	ldrb	r1, [r5, #0]
 800af4c:	2203      	movs	r2, #3
 800af4e:	0030      	movs	r0, r6
 800af50:	f000 f9d8 	bl	800b304 <memchr>
 800af54:	2800      	cmp	r0, #0
 800af56:	d006      	beq.n	800af66 <_svfiprintf_r+0x14a>
 800af58:	2340      	movs	r3, #64	; 0x40
 800af5a:	1b80      	subs	r0, r0, r6
 800af5c:	4083      	lsls	r3, r0
 800af5e:	6822      	ldr	r2, [r4, #0]
 800af60:	3501      	adds	r5, #1
 800af62:	4313      	orrs	r3, r2
 800af64:	6023      	str	r3, [r4, #0]
 800af66:	7829      	ldrb	r1, [r5, #0]
 800af68:	2206      	movs	r2, #6
 800af6a:	4828      	ldr	r0, [pc, #160]	; (800b00c <_svfiprintf_r+0x1f0>)
 800af6c:	1c6e      	adds	r6, r5, #1
 800af6e:	7621      	strb	r1, [r4, #24]
 800af70:	f000 f9c8 	bl	800b304 <memchr>
 800af74:	2800      	cmp	r0, #0
 800af76:	d03c      	beq.n	800aff2 <_svfiprintf_r+0x1d6>
 800af78:	4b25      	ldr	r3, [pc, #148]	; (800b010 <_svfiprintf_r+0x1f4>)
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d125      	bne.n	800afca <_svfiprintf_r+0x1ae>
 800af7e:	2207      	movs	r2, #7
 800af80:	9b07      	ldr	r3, [sp, #28]
 800af82:	3307      	adds	r3, #7
 800af84:	4393      	bics	r3, r2
 800af86:	3308      	adds	r3, #8
 800af88:	9307      	str	r3, [sp, #28]
 800af8a:	6963      	ldr	r3, [r4, #20]
 800af8c:	9a04      	ldr	r2, [sp, #16]
 800af8e:	189b      	adds	r3, r3, r2
 800af90:	6163      	str	r3, [r4, #20]
 800af92:	e766      	b.n	800ae62 <_svfiprintf_r+0x46>
 800af94:	4343      	muls	r3, r0
 800af96:	2101      	movs	r1, #1
 800af98:	189b      	adds	r3, r3, r2
 800af9a:	0035      	movs	r5, r6
 800af9c:	e7a6      	b.n	800aeec <_svfiprintf_r+0xd0>
 800af9e:	2301      	movs	r3, #1
 800afa0:	425b      	negs	r3, r3
 800afa2:	e7d0      	b.n	800af46 <_svfiprintf_r+0x12a>
 800afa4:	2300      	movs	r3, #0
 800afa6:	200a      	movs	r0, #10
 800afa8:	001a      	movs	r2, r3
 800afaa:	3501      	adds	r5, #1
 800afac:	6063      	str	r3, [r4, #4]
 800afae:	7829      	ldrb	r1, [r5, #0]
 800afb0:	1c6e      	adds	r6, r5, #1
 800afb2:	3930      	subs	r1, #48	; 0x30
 800afb4:	2909      	cmp	r1, #9
 800afb6:	d903      	bls.n	800afc0 <_svfiprintf_r+0x1a4>
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d0c5      	beq.n	800af48 <_svfiprintf_r+0x12c>
 800afbc:	9209      	str	r2, [sp, #36]	; 0x24
 800afbe:	e7c3      	b.n	800af48 <_svfiprintf_r+0x12c>
 800afc0:	4342      	muls	r2, r0
 800afc2:	2301      	movs	r3, #1
 800afc4:	1852      	adds	r2, r2, r1
 800afc6:	0035      	movs	r5, r6
 800afc8:	e7f1      	b.n	800afae <_svfiprintf_r+0x192>
 800afca:	ab07      	add	r3, sp, #28
 800afcc:	9300      	str	r3, [sp, #0]
 800afce:	003a      	movs	r2, r7
 800afd0:	4b10      	ldr	r3, [pc, #64]	; (800b014 <_svfiprintf_r+0x1f8>)
 800afd2:	0021      	movs	r1, r4
 800afd4:	9803      	ldr	r0, [sp, #12]
 800afd6:	e000      	b.n	800afda <_svfiprintf_r+0x1be>
 800afd8:	bf00      	nop
 800afda:	9004      	str	r0, [sp, #16]
 800afdc:	9b04      	ldr	r3, [sp, #16]
 800afde:	3301      	adds	r3, #1
 800afe0:	d1d3      	bne.n	800af8a <_svfiprintf_r+0x16e>
 800afe2:	89bb      	ldrh	r3, [r7, #12]
 800afe4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800afe6:	065b      	lsls	r3, r3, #25
 800afe8:	d400      	bmi.n	800afec <_svfiprintf_r+0x1d0>
 800afea:	e72e      	b.n	800ae4a <_svfiprintf_r+0x2e>
 800afec:	2001      	movs	r0, #1
 800afee:	4240      	negs	r0, r0
 800aff0:	e72b      	b.n	800ae4a <_svfiprintf_r+0x2e>
 800aff2:	ab07      	add	r3, sp, #28
 800aff4:	9300      	str	r3, [sp, #0]
 800aff6:	003a      	movs	r2, r7
 800aff8:	4b06      	ldr	r3, [pc, #24]	; (800b014 <_svfiprintf_r+0x1f8>)
 800affa:	0021      	movs	r1, r4
 800affc:	9803      	ldr	r0, [sp, #12]
 800affe:	f000 f879 	bl	800b0f4 <_printf_i>
 800b002:	e7ea      	b.n	800afda <_svfiprintf_r+0x1be>
 800b004:	0800bfb4 	.word	0x0800bfb4
 800b008:	0800bfba 	.word	0x0800bfba
 800b00c:	0800bfbe 	.word	0x0800bfbe
 800b010:	00000000 	.word	0x00000000
 800b014:	0800ad59 	.word	0x0800ad59

0800b018 <_printf_common>:
 800b018:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b01a:	0015      	movs	r5, r2
 800b01c:	9301      	str	r3, [sp, #4]
 800b01e:	688a      	ldr	r2, [r1, #8]
 800b020:	690b      	ldr	r3, [r1, #16]
 800b022:	9000      	str	r0, [sp, #0]
 800b024:	000c      	movs	r4, r1
 800b026:	4293      	cmp	r3, r2
 800b028:	da00      	bge.n	800b02c <_printf_common+0x14>
 800b02a:	0013      	movs	r3, r2
 800b02c:	0022      	movs	r2, r4
 800b02e:	602b      	str	r3, [r5, #0]
 800b030:	3243      	adds	r2, #67	; 0x43
 800b032:	7812      	ldrb	r2, [r2, #0]
 800b034:	2a00      	cmp	r2, #0
 800b036:	d001      	beq.n	800b03c <_printf_common+0x24>
 800b038:	3301      	adds	r3, #1
 800b03a:	602b      	str	r3, [r5, #0]
 800b03c:	6823      	ldr	r3, [r4, #0]
 800b03e:	069b      	lsls	r3, r3, #26
 800b040:	d502      	bpl.n	800b048 <_printf_common+0x30>
 800b042:	682b      	ldr	r3, [r5, #0]
 800b044:	3302      	adds	r3, #2
 800b046:	602b      	str	r3, [r5, #0]
 800b048:	2706      	movs	r7, #6
 800b04a:	6823      	ldr	r3, [r4, #0]
 800b04c:	401f      	ands	r7, r3
 800b04e:	d027      	beq.n	800b0a0 <_printf_common+0x88>
 800b050:	0023      	movs	r3, r4
 800b052:	3343      	adds	r3, #67	; 0x43
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	1e5a      	subs	r2, r3, #1
 800b058:	4193      	sbcs	r3, r2
 800b05a:	6822      	ldr	r2, [r4, #0]
 800b05c:	0692      	lsls	r2, r2, #26
 800b05e:	d430      	bmi.n	800b0c2 <_printf_common+0xaa>
 800b060:	0022      	movs	r2, r4
 800b062:	9901      	ldr	r1, [sp, #4]
 800b064:	3243      	adds	r2, #67	; 0x43
 800b066:	9800      	ldr	r0, [sp, #0]
 800b068:	9e08      	ldr	r6, [sp, #32]
 800b06a:	47b0      	blx	r6
 800b06c:	1c43      	adds	r3, r0, #1
 800b06e:	d025      	beq.n	800b0bc <_printf_common+0xa4>
 800b070:	2306      	movs	r3, #6
 800b072:	6820      	ldr	r0, [r4, #0]
 800b074:	682a      	ldr	r2, [r5, #0]
 800b076:	68e1      	ldr	r1, [r4, #12]
 800b078:	4003      	ands	r3, r0
 800b07a:	2500      	movs	r5, #0
 800b07c:	2b04      	cmp	r3, #4
 800b07e:	d103      	bne.n	800b088 <_printf_common+0x70>
 800b080:	1a8d      	subs	r5, r1, r2
 800b082:	43eb      	mvns	r3, r5
 800b084:	17db      	asrs	r3, r3, #31
 800b086:	401d      	ands	r5, r3
 800b088:	68a3      	ldr	r3, [r4, #8]
 800b08a:	6922      	ldr	r2, [r4, #16]
 800b08c:	4293      	cmp	r3, r2
 800b08e:	dd01      	ble.n	800b094 <_printf_common+0x7c>
 800b090:	1a9b      	subs	r3, r3, r2
 800b092:	18ed      	adds	r5, r5, r3
 800b094:	2700      	movs	r7, #0
 800b096:	42bd      	cmp	r5, r7
 800b098:	d120      	bne.n	800b0dc <_printf_common+0xc4>
 800b09a:	2000      	movs	r0, #0
 800b09c:	e010      	b.n	800b0c0 <_printf_common+0xa8>
 800b09e:	3701      	adds	r7, #1
 800b0a0:	68e3      	ldr	r3, [r4, #12]
 800b0a2:	682a      	ldr	r2, [r5, #0]
 800b0a4:	1a9b      	subs	r3, r3, r2
 800b0a6:	42bb      	cmp	r3, r7
 800b0a8:	ddd2      	ble.n	800b050 <_printf_common+0x38>
 800b0aa:	0022      	movs	r2, r4
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	3219      	adds	r2, #25
 800b0b0:	9901      	ldr	r1, [sp, #4]
 800b0b2:	9800      	ldr	r0, [sp, #0]
 800b0b4:	9e08      	ldr	r6, [sp, #32]
 800b0b6:	47b0      	blx	r6
 800b0b8:	1c43      	adds	r3, r0, #1
 800b0ba:	d1f0      	bne.n	800b09e <_printf_common+0x86>
 800b0bc:	2001      	movs	r0, #1
 800b0be:	4240      	negs	r0, r0
 800b0c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b0c2:	2030      	movs	r0, #48	; 0x30
 800b0c4:	18e1      	adds	r1, r4, r3
 800b0c6:	3143      	adds	r1, #67	; 0x43
 800b0c8:	7008      	strb	r0, [r1, #0]
 800b0ca:	0021      	movs	r1, r4
 800b0cc:	1c5a      	adds	r2, r3, #1
 800b0ce:	3145      	adds	r1, #69	; 0x45
 800b0d0:	7809      	ldrb	r1, [r1, #0]
 800b0d2:	18a2      	adds	r2, r4, r2
 800b0d4:	3243      	adds	r2, #67	; 0x43
 800b0d6:	3302      	adds	r3, #2
 800b0d8:	7011      	strb	r1, [r2, #0]
 800b0da:	e7c1      	b.n	800b060 <_printf_common+0x48>
 800b0dc:	0022      	movs	r2, r4
 800b0de:	2301      	movs	r3, #1
 800b0e0:	321a      	adds	r2, #26
 800b0e2:	9901      	ldr	r1, [sp, #4]
 800b0e4:	9800      	ldr	r0, [sp, #0]
 800b0e6:	9e08      	ldr	r6, [sp, #32]
 800b0e8:	47b0      	blx	r6
 800b0ea:	1c43      	adds	r3, r0, #1
 800b0ec:	d0e6      	beq.n	800b0bc <_printf_common+0xa4>
 800b0ee:	3701      	adds	r7, #1
 800b0f0:	e7d1      	b.n	800b096 <_printf_common+0x7e>
	...

0800b0f4 <_printf_i>:
 800b0f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0f6:	b089      	sub	sp, #36	; 0x24
 800b0f8:	9204      	str	r2, [sp, #16]
 800b0fa:	000a      	movs	r2, r1
 800b0fc:	3243      	adds	r2, #67	; 0x43
 800b0fe:	9305      	str	r3, [sp, #20]
 800b100:	9003      	str	r0, [sp, #12]
 800b102:	9202      	str	r2, [sp, #8]
 800b104:	7e0a      	ldrb	r2, [r1, #24]
 800b106:	000c      	movs	r4, r1
 800b108:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b10a:	2a6e      	cmp	r2, #110	; 0x6e
 800b10c:	d100      	bne.n	800b110 <_printf_i+0x1c>
 800b10e:	e086      	b.n	800b21e <_printf_i+0x12a>
 800b110:	d81f      	bhi.n	800b152 <_printf_i+0x5e>
 800b112:	2a63      	cmp	r2, #99	; 0x63
 800b114:	d033      	beq.n	800b17e <_printf_i+0x8a>
 800b116:	d808      	bhi.n	800b12a <_printf_i+0x36>
 800b118:	2a00      	cmp	r2, #0
 800b11a:	d100      	bne.n	800b11e <_printf_i+0x2a>
 800b11c:	e08c      	b.n	800b238 <_printf_i+0x144>
 800b11e:	2a58      	cmp	r2, #88	; 0x58
 800b120:	d04d      	beq.n	800b1be <_printf_i+0xca>
 800b122:	0025      	movs	r5, r4
 800b124:	3542      	adds	r5, #66	; 0x42
 800b126:	702a      	strb	r2, [r5, #0]
 800b128:	e030      	b.n	800b18c <_printf_i+0x98>
 800b12a:	2a64      	cmp	r2, #100	; 0x64
 800b12c:	d001      	beq.n	800b132 <_printf_i+0x3e>
 800b12e:	2a69      	cmp	r2, #105	; 0x69
 800b130:	d1f7      	bne.n	800b122 <_printf_i+0x2e>
 800b132:	6819      	ldr	r1, [r3, #0]
 800b134:	6825      	ldr	r5, [r4, #0]
 800b136:	1d0a      	adds	r2, r1, #4
 800b138:	0628      	lsls	r0, r5, #24
 800b13a:	d529      	bpl.n	800b190 <_printf_i+0x9c>
 800b13c:	6808      	ldr	r0, [r1, #0]
 800b13e:	601a      	str	r2, [r3, #0]
 800b140:	2800      	cmp	r0, #0
 800b142:	da03      	bge.n	800b14c <_printf_i+0x58>
 800b144:	232d      	movs	r3, #45	; 0x2d
 800b146:	9a02      	ldr	r2, [sp, #8]
 800b148:	4240      	negs	r0, r0
 800b14a:	7013      	strb	r3, [r2, #0]
 800b14c:	4e6b      	ldr	r6, [pc, #428]	; (800b2fc <_printf_i+0x208>)
 800b14e:	270a      	movs	r7, #10
 800b150:	e04f      	b.n	800b1f2 <_printf_i+0xfe>
 800b152:	2a73      	cmp	r2, #115	; 0x73
 800b154:	d074      	beq.n	800b240 <_printf_i+0x14c>
 800b156:	d808      	bhi.n	800b16a <_printf_i+0x76>
 800b158:	2a6f      	cmp	r2, #111	; 0x6f
 800b15a:	d01f      	beq.n	800b19c <_printf_i+0xa8>
 800b15c:	2a70      	cmp	r2, #112	; 0x70
 800b15e:	d1e0      	bne.n	800b122 <_printf_i+0x2e>
 800b160:	2220      	movs	r2, #32
 800b162:	6809      	ldr	r1, [r1, #0]
 800b164:	430a      	orrs	r2, r1
 800b166:	6022      	str	r2, [r4, #0]
 800b168:	e003      	b.n	800b172 <_printf_i+0x7e>
 800b16a:	2a75      	cmp	r2, #117	; 0x75
 800b16c:	d016      	beq.n	800b19c <_printf_i+0xa8>
 800b16e:	2a78      	cmp	r2, #120	; 0x78
 800b170:	d1d7      	bne.n	800b122 <_printf_i+0x2e>
 800b172:	0022      	movs	r2, r4
 800b174:	2178      	movs	r1, #120	; 0x78
 800b176:	3245      	adds	r2, #69	; 0x45
 800b178:	7011      	strb	r1, [r2, #0]
 800b17a:	4e61      	ldr	r6, [pc, #388]	; (800b300 <_printf_i+0x20c>)
 800b17c:	e022      	b.n	800b1c4 <_printf_i+0xd0>
 800b17e:	0025      	movs	r5, r4
 800b180:	681a      	ldr	r2, [r3, #0]
 800b182:	3542      	adds	r5, #66	; 0x42
 800b184:	1d11      	adds	r1, r2, #4
 800b186:	6019      	str	r1, [r3, #0]
 800b188:	6813      	ldr	r3, [r2, #0]
 800b18a:	702b      	strb	r3, [r5, #0]
 800b18c:	2301      	movs	r3, #1
 800b18e:	e065      	b.n	800b25c <_printf_i+0x168>
 800b190:	6808      	ldr	r0, [r1, #0]
 800b192:	601a      	str	r2, [r3, #0]
 800b194:	0669      	lsls	r1, r5, #25
 800b196:	d5d3      	bpl.n	800b140 <_printf_i+0x4c>
 800b198:	b200      	sxth	r0, r0
 800b19a:	e7d1      	b.n	800b140 <_printf_i+0x4c>
 800b19c:	6819      	ldr	r1, [r3, #0]
 800b19e:	6825      	ldr	r5, [r4, #0]
 800b1a0:	1d08      	adds	r0, r1, #4
 800b1a2:	6018      	str	r0, [r3, #0]
 800b1a4:	6808      	ldr	r0, [r1, #0]
 800b1a6:	062e      	lsls	r6, r5, #24
 800b1a8:	d505      	bpl.n	800b1b6 <_printf_i+0xc2>
 800b1aa:	4e54      	ldr	r6, [pc, #336]	; (800b2fc <_printf_i+0x208>)
 800b1ac:	2708      	movs	r7, #8
 800b1ae:	2a6f      	cmp	r2, #111	; 0x6f
 800b1b0:	d01b      	beq.n	800b1ea <_printf_i+0xf6>
 800b1b2:	270a      	movs	r7, #10
 800b1b4:	e019      	b.n	800b1ea <_printf_i+0xf6>
 800b1b6:	066d      	lsls	r5, r5, #25
 800b1b8:	d5f7      	bpl.n	800b1aa <_printf_i+0xb6>
 800b1ba:	b280      	uxth	r0, r0
 800b1bc:	e7f5      	b.n	800b1aa <_printf_i+0xb6>
 800b1be:	3145      	adds	r1, #69	; 0x45
 800b1c0:	4e4e      	ldr	r6, [pc, #312]	; (800b2fc <_printf_i+0x208>)
 800b1c2:	700a      	strb	r2, [r1, #0]
 800b1c4:	6818      	ldr	r0, [r3, #0]
 800b1c6:	6822      	ldr	r2, [r4, #0]
 800b1c8:	1d01      	adds	r1, r0, #4
 800b1ca:	6800      	ldr	r0, [r0, #0]
 800b1cc:	6019      	str	r1, [r3, #0]
 800b1ce:	0615      	lsls	r5, r2, #24
 800b1d0:	d521      	bpl.n	800b216 <_printf_i+0x122>
 800b1d2:	07d3      	lsls	r3, r2, #31
 800b1d4:	d502      	bpl.n	800b1dc <_printf_i+0xe8>
 800b1d6:	2320      	movs	r3, #32
 800b1d8:	431a      	orrs	r2, r3
 800b1da:	6022      	str	r2, [r4, #0]
 800b1dc:	2710      	movs	r7, #16
 800b1de:	2800      	cmp	r0, #0
 800b1e0:	d103      	bne.n	800b1ea <_printf_i+0xf6>
 800b1e2:	2320      	movs	r3, #32
 800b1e4:	6822      	ldr	r2, [r4, #0]
 800b1e6:	439a      	bics	r2, r3
 800b1e8:	6022      	str	r2, [r4, #0]
 800b1ea:	0023      	movs	r3, r4
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	3343      	adds	r3, #67	; 0x43
 800b1f0:	701a      	strb	r2, [r3, #0]
 800b1f2:	6863      	ldr	r3, [r4, #4]
 800b1f4:	60a3      	str	r3, [r4, #8]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	db58      	blt.n	800b2ac <_printf_i+0x1b8>
 800b1fa:	2204      	movs	r2, #4
 800b1fc:	6821      	ldr	r1, [r4, #0]
 800b1fe:	4391      	bics	r1, r2
 800b200:	6021      	str	r1, [r4, #0]
 800b202:	2800      	cmp	r0, #0
 800b204:	d154      	bne.n	800b2b0 <_printf_i+0x1bc>
 800b206:	9d02      	ldr	r5, [sp, #8]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d05a      	beq.n	800b2c2 <_printf_i+0x1ce>
 800b20c:	0025      	movs	r5, r4
 800b20e:	7833      	ldrb	r3, [r6, #0]
 800b210:	3542      	adds	r5, #66	; 0x42
 800b212:	702b      	strb	r3, [r5, #0]
 800b214:	e055      	b.n	800b2c2 <_printf_i+0x1ce>
 800b216:	0655      	lsls	r5, r2, #25
 800b218:	d5db      	bpl.n	800b1d2 <_printf_i+0xde>
 800b21a:	b280      	uxth	r0, r0
 800b21c:	e7d9      	b.n	800b1d2 <_printf_i+0xde>
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	680d      	ldr	r5, [r1, #0]
 800b222:	1d10      	adds	r0, r2, #4
 800b224:	6949      	ldr	r1, [r1, #20]
 800b226:	6018      	str	r0, [r3, #0]
 800b228:	6813      	ldr	r3, [r2, #0]
 800b22a:	062e      	lsls	r6, r5, #24
 800b22c:	d501      	bpl.n	800b232 <_printf_i+0x13e>
 800b22e:	6019      	str	r1, [r3, #0]
 800b230:	e002      	b.n	800b238 <_printf_i+0x144>
 800b232:	066d      	lsls	r5, r5, #25
 800b234:	d5fb      	bpl.n	800b22e <_printf_i+0x13a>
 800b236:	8019      	strh	r1, [r3, #0]
 800b238:	2300      	movs	r3, #0
 800b23a:	9d02      	ldr	r5, [sp, #8]
 800b23c:	6123      	str	r3, [r4, #16]
 800b23e:	e04f      	b.n	800b2e0 <_printf_i+0x1ec>
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	1d11      	adds	r1, r2, #4
 800b244:	6019      	str	r1, [r3, #0]
 800b246:	6815      	ldr	r5, [r2, #0]
 800b248:	2100      	movs	r1, #0
 800b24a:	6862      	ldr	r2, [r4, #4]
 800b24c:	0028      	movs	r0, r5
 800b24e:	f000 f859 	bl	800b304 <memchr>
 800b252:	2800      	cmp	r0, #0
 800b254:	d001      	beq.n	800b25a <_printf_i+0x166>
 800b256:	1b40      	subs	r0, r0, r5
 800b258:	6060      	str	r0, [r4, #4]
 800b25a:	6863      	ldr	r3, [r4, #4]
 800b25c:	6123      	str	r3, [r4, #16]
 800b25e:	2300      	movs	r3, #0
 800b260:	9a02      	ldr	r2, [sp, #8]
 800b262:	7013      	strb	r3, [r2, #0]
 800b264:	e03c      	b.n	800b2e0 <_printf_i+0x1ec>
 800b266:	6923      	ldr	r3, [r4, #16]
 800b268:	002a      	movs	r2, r5
 800b26a:	9904      	ldr	r1, [sp, #16]
 800b26c:	9803      	ldr	r0, [sp, #12]
 800b26e:	9d05      	ldr	r5, [sp, #20]
 800b270:	47a8      	blx	r5
 800b272:	1c43      	adds	r3, r0, #1
 800b274:	d03e      	beq.n	800b2f4 <_printf_i+0x200>
 800b276:	6823      	ldr	r3, [r4, #0]
 800b278:	079b      	lsls	r3, r3, #30
 800b27a:	d415      	bmi.n	800b2a8 <_printf_i+0x1b4>
 800b27c:	9b07      	ldr	r3, [sp, #28]
 800b27e:	68e0      	ldr	r0, [r4, #12]
 800b280:	4298      	cmp	r0, r3
 800b282:	da39      	bge.n	800b2f8 <_printf_i+0x204>
 800b284:	0018      	movs	r0, r3
 800b286:	e037      	b.n	800b2f8 <_printf_i+0x204>
 800b288:	0022      	movs	r2, r4
 800b28a:	2301      	movs	r3, #1
 800b28c:	3219      	adds	r2, #25
 800b28e:	9904      	ldr	r1, [sp, #16]
 800b290:	9803      	ldr	r0, [sp, #12]
 800b292:	9e05      	ldr	r6, [sp, #20]
 800b294:	47b0      	blx	r6
 800b296:	1c43      	adds	r3, r0, #1
 800b298:	d02c      	beq.n	800b2f4 <_printf_i+0x200>
 800b29a:	3501      	adds	r5, #1
 800b29c:	68e3      	ldr	r3, [r4, #12]
 800b29e:	9a07      	ldr	r2, [sp, #28]
 800b2a0:	1a9b      	subs	r3, r3, r2
 800b2a2:	42ab      	cmp	r3, r5
 800b2a4:	dcf0      	bgt.n	800b288 <_printf_i+0x194>
 800b2a6:	e7e9      	b.n	800b27c <_printf_i+0x188>
 800b2a8:	2500      	movs	r5, #0
 800b2aa:	e7f7      	b.n	800b29c <_printf_i+0x1a8>
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	d0ad      	beq.n	800b20c <_printf_i+0x118>
 800b2b0:	9d02      	ldr	r5, [sp, #8]
 800b2b2:	0039      	movs	r1, r7
 800b2b4:	f7f4 ffb6 	bl	8000224 <__aeabi_uidivmod>
 800b2b8:	5c73      	ldrb	r3, [r6, r1]
 800b2ba:	3d01      	subs	r5, #1
 800b2bc:	702b      	strb	r3, [r5, #0]
 800b2be:	2800      	cmp	r0, #0
 800b2c0:	d1f7      	bne.n	800b2b2 <_printf_i+0x1be>
 800b2c2:	2f08      	cmp	r7, #8
 800b2c4:	d109      	bne.n	800b2da <_printf_i+0x1e6>
 800b2c6:	6823      	ldr	r3, [r4, #0]
 800b2c8:	07db      	lsls	r3, r3, #31
 800b2ca:	d506      	bpl.n	800b2da <_printf_i+0x1e6>
 800b2cc:	6863      	ldr	r3, [r4, #4]
 800b2ce:	6922      	ldr	r2, [r4, #16]
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	dc02      	bgt.n	800b2da <_printf_i+0x1e6>
 800b2d4:	2330      	movs	r3, #48	; 0x30
 800b2d6:	3d01      	subs	r5, #1
 800b2d8:	702b      	strb	r3, [r5, #0]
 800b2da:	9b02      	ldr	r3, [sp, #8]
 800b2dc:	1b5b      	subs	r3, r3, r5
 800b2de:	6123      	str	r3, [r4, #16]
 800b2e0:	9b05      	ldr	r3, [sp, #20]
 800b2e2:	aa07      	add	r2, sp, #28
 800b2e4:	9300      	str	r3, [sp, #0]
 800b2e6:	0021      	movs	r1, r4
 800b2e8:	9b04      	ldr	r3, [sp, #16]
 800b2ea:	9803      	ldr	r0, [sp, #12]
 800b2ec:	f7ff fe94 	bl	800b018 <_printf_common>
 800b2f0:	1c43      	adds	r3, r0, #1
 800b2f2:	d1b8      	bne.n	800b266 <_printf_i+0x172>
 800b2f4:	2001      	movs	r0, #1
 800b2f6:	4240      	negs	r0, r0
 800b2f8:	b009      	add	sp, #36	; 0x24
 800b2fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2fc:	0800bfc5 	.word	0x0800bfc5
 800b300:	0800bfd6 	.word	0x0800bfd6

0800b304 <memchr>:
 800b304:	b2c9      	uxtb	r1, r1
 800b306:	1882      	adds	r2, r0, r2
 800b308:	4290      	cmp	r0, r2
 800b30a:	d101      	bne.n	800b310 <memchr+0xc>
 800b30c:	2000      	movs	r0, #0
 800b30e:	4770      	bx	lr
 800b310:	7803      	ldrb	r3, [r0, #0]
 800b312:	428b      	cmp	r3, r1
 800b314:	d0fb      	beq.n	800b30e <memchr+0xa>
 800b316:	3001      	adds	r0, #1
 800b318:	e7f6      	b.n	800b308 <memchr+0x4>

0800b31a <memmove>:
 800b31a:	b510      	push	{r4, lr}
 800b31c:	4288      	cmp	r0, r1
 800b31e:	d902      	bls.n	800b326 <memmove+0xc>
 800b320:	188b      	adds	r3, r1, r2
 800b322:	4298      	cmp	r0, r3
 800b324:	d303      	bcc.n	800b32e <memmove+0x14>
 800b326:	2300      	movs	r3, #0
 800b328:	e007      	b.n	800b33a <memmove+0x20>
 800b32a:	5c8b      	ldrb	r3, [r1, r2]
 800b32c:	5483      	strb	r3, [r0, r2]
 800b32e:	3a01      	subs	r2, #1
 800b330:	d2fb      	bcs.n	800b32a <memmove+0x10>
 800b332:	bd10      	pop	{r4, pc}
 800b334:	5ccc      	ldrb	r4, [r1, r3]
 800b336:	54c4      	strb	r4, [r0, r3]
 800b338:	3301      	adds	r3, #1
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d1fa      	bne.n	800b334 <memmove+0x1a>
 800b33e:	e7f8      	b.n	800b332 <memmove+0x18>

0800b340 <_free_r>:
 800b340:	b570      	push	{r4, r5, r6, lr}
 800b342:	0005      	movs	r5, r0
 800b344:	2900      	cmp	r1, #0
 800b346:	d010      	beq.n	800b36a <_free_r+0x2a>
 800b348:	1f0c      	subs	r4, r1, #4
 800b34a:	6823      	ldr	r3, [r4, #0]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	da00      	bge.n	800b352 <_free_r+0x12>
 800b350:	18e4      	adds	r4, r4, r3
 800b352:	0028      	movs	r0, r5
 800b354:	f7ff fcfe 	bl	800ad54 <__malloc_lock>
 800b358:	4a1d      	ldr	r2, [pc, #116]	; (800b3d0 <_free_r+0x90>)
 800b35a:	6813      	ldr	r3, [r2, #0]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d105      	bne.n	800b36c <_free_r+0x2c>
 800b360:	6063      	str	r3, [r4, #4]
 800b362:	6014      	str	r4, [r2, #0]
 800b364:	0028      	movs	r0, r5
 800b366:	f7ff fcf6 	bl	800ad56 <__malloc_unlock>
 800b36a:	bd70      	pop	{r4, r5, r6, pc}
 800b36c:	42a3      	cmp	r3, r4
 800b36e:	d909      	bls.n	800b384 <_free_r+0x44>
 800b370:	6821      	ldr	r1, [r4, #0]
 800b372:	1860      	adds	r0, r4, r1
 800b374:	4283      	cmp	r3, r0
 800b376:	d1f3      	bne.n	800b360 <_free_r+0x20>
 800b378:	6818      	ldr	r0, [r3, #0]
 800b37a:	685b      	ldr	r3, [r3, #4]
 800b37c:	1841      	adds	r1, r0, r1
 800b37e:	6021      	str	r1, [r4, #0]
 800b380:	e7ee      	b.n	800b360 <_free_r+0x20>
 800b382:	0013      	movs	r3, r2
 800b384:	685a      	ldr	r2, [r3, #4]
 800b386:	2a00      	cmp	r2, #0
 800b388:	d001      	beq.n	800b38e <_free_r+0x4e>
 800b38a:	42a2      	cmp	r2, r4
 800b38c:	d9f9      	bls.n	800b382 <_free_r+0x42>
 800b38e:	6819      	ldr	r1, [r3, #0]
 800b390:	1858      	adds	r0, r3, r1
 800b392:	42a0      	cmp	r0, r4
 800b394:	d10b      	bne.n	800b3ae <_free_r+0x6e>
 800b396:	6820      	ldr	r0, [r4, #0]
 800b398:	1809      	adds	r1, r1, r0
 800b39a:	1858      	adds	r0, r3, r1
 800b39c:	6019      	str	r1, [r3, #0]
 800b39e:	4282      	cmp	r2, r0
 800b3a0:	d1e0      	bne.n	800b364 <_free_r+0x24>
 800b3a2:	6810      	ldr	r0, [r2, #0]
 800b3a4:	6852      	ldr	r2, [r2, #4]
 800b3a6:	1841      	adds	r1, r0, r1
 800b3a8:	6019      	str	r1, [r3, #0]
 800b3aa:	605a      	str	r2, [r3, #4]
 800b3ac:	e7da      	b.n	800b364 <_free_r+0x24>
 800b3ae:	42a0      	cmp	r0, r4
 800b3b0:	d902      	bls.n	800b3b8 <_free_r+0x78>
 800b3b2:	230c      	movs	r3, #12
 800b3b4:	602b      	str	r3, [r5, #0]
 800b3b6:	e7d5      	b.n	800b364 <_free_r+0x24>
 800b3b8:	6821      	ldr	r1, [r4, #0]
 800b3ba:	1860      	adds	r0, r4, r1
 800b3bc:	4282      	cmp	r2, r0
 800b3be:	d103      	bne.n	800b3c8 <_free_r+0x88>
 800b3c0:	6810      	ldr	r0, [r2, #0]
 800b3c2:	6852      	ldr	r2, [r2, #4]
 800b3c4:	1841      	adds	r1, r0, r1
 800b3c6:	6021      	str	r1, [r4, #0]
 800b3c8:	6062      	str	r2, [r4, #4]
 800b3ca:	605c      	str	r4, [r3, #4]
 800b3cc:	e7ca      	b.n	800b364 <_free_r+0x24>
 800b3ce:	46c0      	nop			; (mov r8, r8)
 800b3d0:	20000138 	.word	0x20000138

0800b3d4 <_realloc_r>:
 800b3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3d6:	0007      	movs	r7, r0
 800b3d8:	000d      	movs	r5, r1
 800b3da:	0016      	movs	r6, r2
 800b3dc:	2900      	cmp	r1, #0
 800b3de:	d105      	bne.n	800b3ec <_realloc_r+0x18>
 800b3e0:	0011      	movs	r1, r2
 800b3e2:	f7ff fc27 	bl	800ac34 <_malloc_r>
 800b3e6:	0004      	movs	r4, r0
 800b3e8:	0020      	movs	r0, r4
 800b3ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3ec:	2a00      	cmp	r2, #0
 800b3ee:	d103      	bne.n	800b3f8 <_realloc_r+0x24>
 800b3f0:	f7ff ffa6 	bl	800b340 <_free_r>
 800b3f4:	0034      	movs	r4, r6
 800b3f6:	e7f7      	b.n	800b3e8 <_realloc_r+0x14>
 800b3f8:	f000 f812 	bl	800b420 <_malloc_usable_size_r>
 800b3fc:	002c      	movs	r4, r5
 800b3fe:	42b0      	cmp	r0, r6
 800b400:	d2f2      	bcs.n	800b3e8 <_realloc_r+0x14>
 800b402:	0031      	movs	r1, r6
 800b404:	0038      	movs	r0, r7
 800b406:	f7ff fc15 	bl	800ac34 <_malloc_r>
 800b40a:	1e04      	subs	r4, r0, #0
 800b40c:	d0ec      	beq.n	800b3e8 <_realloc_r+0x14>
 800b40e:	0029      	movs	r1, r5
 800b410:	0032      	movs	r2, r6
 800b412:	f7ff fbef 	bl	800abf4 <memcpy>
 800b416:	0029      	movs	r1, r5
 800b418:	0038      	movs	r0, r7
 800b41a:	f7ff ff91 	bl	800b340 <_free_r>
 800b41e:	e7e3      	b.n	800b3e8 <_realloc_r+0x14>

0800b420 <_malloc_usable_size_r>:
 800b420:	1f0b      	subs	r3, r1, #4
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	1f18      	subs	r0, r3, #4
 800b426:	2b00      	cmp	r3, #0
 800b428:	da01      	bge.n	800b42e <_malloc_usable_size_r+0xe>
 800b42a:	580b      	ldr	r3, [r1, r0]
 800b42c:	18c0      	adds	r0, r0, r3
 800b42e:	4770      	bx	lr

0800b430 <_init>:
 800b430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b432:	46c0      	nop			; (mov r8, r8)
 800b434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b436:	bc08      	pop	{r3}
 800b438:	469e      	mov	lr, r3
 800b43a:	4770      	bx	lr

0800b43c <_fini>:
 800b43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b43e:	46c0      	nop			; (mov r8, r8)
 800b440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b442:	bc08      	pop	{r3}
 800b444:	469e      	mov	lr, r3
 800b446:	4770      	bx	lr
