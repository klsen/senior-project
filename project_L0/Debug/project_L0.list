
project_L0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cc8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000938  08009d88  08009d88  00019d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6c0  0800a6c0  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  0800a6c0  0800a6c0  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a6c0  0800a6c0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6c0  0800a6c0  0001a6c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6c4  0800a6c4  0001a6c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800a6c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ec  20000084  0800a74c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000670  0800a74c  00020670  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d397  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000381b  00000000  00000000  0003d443  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001588  00000000  00000000  00040c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013b8  00000000  00000000  000421e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018c3e  00000000  00000000  000435a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000137be  00000000  00000000  0005c1de  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f759  00000000  00000000  0006f99c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ff0f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052f8  00000000  00000000  000ff170  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000084 	.word	0x20000084
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009d70 	.word	0x08009d70

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000088 	.word	0x20000088
 8000104:	08009d70 	.word	0x08009d70

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cfrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	1c08      	adds	r0, r1, #0
 8000408:	4661      	mov	r1, ip
 800040a:	e7ff      	b.n	800040c <__aeabi_cfcmpeq>

0800040c <__aeabi_cfcmpeq>:
 800040c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800040e:	f000 f9f1 	bl	80007f4 <__lesf2>
 8000412:	2800      	cmp	r0, #0
 8000414:	d401      	bmi.n	800041a <__aeabi_cfcmpeq+0xe>
 8000416:	2100      	movs	r1, #0
 8000418:	42c8      	cmn	r0, r1
 800041a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800041c <__aeabi_fcmpeq>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f000 f973 	bl	8000708 <__eqsf2>
 8000422:	4240      	negs	r0, r0
 8000424:	3001      	adds	r0, #1
 8000426:	bd10      	pop	{r4, pc}

08000428 <__aeabi_fcmplt>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 f9e3 	bl	80007f4 <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	db01      	blt.n	8000436 <__aeabi_fcmplt+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_fcmple>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 f9d9 	bl	80007f4 <__lesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dd01      	ble.n	800044a <__aeabi_fcmple+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_fcmpgt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 f981 	bl	8000758 <__gesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	dc01      	bgt.n	800045e <__aeabi_fcmpgt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_fcmpge>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 f977 	bl	8000758 <__gesf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	da01      	bge.n	8000472 <__aeabi_fcmpge+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_f2uiz>:
 8000478:	219e      	movs	r1, #158	; 0x9e
 800047a:	b510      	push	{r4, lr}
 800047c:	05c9      	lsls	r1, r1, #23
 800047e:	1c04      	adds	r4, r0, #0
 8000480:	f7ff fff0 	bl	8000464 <__aeabi_fcmpge>
 8000484:	2800      	cmp	r0, #0
 8000486:	d103      	bne.n	8000490 <__aeabi_f2uiz+0x18>
 8000488:	1c20      	adds	r0, r4, #0
 800048a:	f000 fcf9 	bl	8000e80 <__aeabi_f2iz>
 800048e:	bd10      	pop	{r4, pc}
 8000490:	219e      	movs	r1, #158	; 0x9e
 8000492:	1c20      	adds	r0, r4, #0
 8000494:	05c9      	lsls	r1, r1, #23
 8000496:	f000 fb2f 	bl	8000af8 <__aeabi_fsub>
 800049a:	f000 fcf1 	bl	8000e80 <__aeabi_f2iz>
 800049e:	2380      	movs	r3, #128	; 0x80
 80004a0:	061b      	lsls	r3, r3, #24
 80004a2:	469c      	mov	ip, r3
 80004a4:	4460      	add	r0, ip
 80004a6:	e7f2      	b.n	800048e <__aeabi_f2uiz+0x16>

080004a8 <__aeabi_d2uiz>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2200      	movs	r2, #0
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004ae:	0004      	movs	r4, r0
 80004b0:	000d      	movs	r5, r1
 80004b2:	f001 fc33 	bl	8001d1c <__aeabi_dcmpge>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d104      	bne.n	80004c4 <__aeabi_d2uiz+0x1c>
 80004ba:	0020      	movs	r0, r4
 80004bc:	0029      	movs	r1, r5
 80004be:	f001 fb89 	bl	8001bd4 <__aeabi_d2iz>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0020      	movs	r0, r4
 80004ca:	0029      	movs	r1, r5
 80004cc:	f001 f83a 	bl	8001544 <__aeabi_dsub>
 80004d0:	f001 fb80 	bl	8001bd4 <__aeabi_d2iz>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	469c      	mov	ip, r3
 80004da:	4460      	add	r0, ip
 80004dc:	e7f1      	b.n	80004c2 <__aeabi_d2uiz+0x1a>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	41e00000 	.word	0x41e00000

080004e4 <__aeabi_fdiv>:
 80004e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004e6:	4657      	mov	r7, sl
 80004e8:	464e      	mov	r6, r9
 80004ea:	4645      	mov	r5, r8
 80004ec:	46de      	mov	lr, fp
 80004ee:	0244      	lsls	r4, r0, #9
 80004f0:	b5e0      	push	{r5, r6, r7, lr}
 80004f2:	0046      	lsls	r6, r0, #1
 80004f4:	4688      	mov	r8, r1
 80004f6:	0a64      	lsrs	r4, r4, #9
 80004f8:	0e36      	lsrs	r6, r6, #24
 80004fa:	0fc7      	lsrs	r7, r0, #31
 80004fc:	2e00      	cmp	r6, #0
 80004fe:	d063      	beq.n	80005c8 <__aeabi_fdiv+0xe4>
 8000500:	2eff      	cmp	r6, #255	; 0xff
 8000502:	d024      	beq.n	800054e <__aeabi_fdiv+0x6a>
 8000504:	2380      	movs	r3, #128	; 0x80
 8000506:	00e4      	lsls	r4, r4, #3
 8000508:	04db      	lsls	r3, r3, #19
 800050a:	431c      	orrs	r4, r3
 800050c:	2300      	movs	r3, #0
 800050e:	4699      	mov	r9, r3
 8000510:	469b      	mov	fp, r3
 8000512:	3e7f      	subs	r6, #127	; 0x7f
 8000514:	4643      	mov	r3, r8
 8000516:	4642      	mov	r2, r8
 8000518:	025d      	lsls	r5, r3, #9
 800051a:	0fd2      	lsrs	r2, r2, #31
 800051c:	005b      	lsls	r3, r3, #1
 800051e:	0a6d      	lsrs	r5, r5, #9
 8000520:	0e1b      	lsrs	r3, r3, #24
 8000522:	4690      	mov	r8, r2
 8000524:	4692      	mov	sl, r2
 8000526:	d065      	beq.n	80005f4 <__aeabi_fdiv+0x110>
 8000528:	2bff      	cmp	r3, #255	; 0xff
 800052a:	d055      	beq.n	80005d8 <__aeabi_fdiv+0xf4>
 800052c:	2280      	movs	r2, #128	; 0x80
 800052e:	2100      	movs	r1, #0
 8000530:	00ed      	lsls	r5, r5, #3
 8000532:	04d2      	lsls	r2, r2, #19
 8000534:	3b7f      	subs	r3, #127	; 0x7f
 8000536:	4315      	orrs	r5, r2
 8000538:	1af6      	subs	r6, r6, r3
 800053a:	4643      	mov	r3, r8
 800053c:	464a      	mov	r2, r9
 800053e:	407b      	eors	r3, r7
 8000540:	2a0f      	cmp	r2, #15
 8000542:	d900      	bls.n	8000546 <__aeabi_fdiv+0x62>
 8000544:	e08d      	b.n	8000662 <__aeabi_fdiv+0x17e>
 8000546:	486d      	ldr	r0, [pc, #436]	; (80006fc <__aeabi_fdiv+0x218>)
 8000548:	0092      	lsls	r2, r2, #2
 800054a:	5882      	ldr	r2, [r0, r2]
 800054c:	4697      	mov	pc, r2
 800054e:	2c00      	cmp	r4, #0
 8000550:	d154      	bne.n	80005fc <__aeabi_fdiv+0x118>
 8000552:	2308      	movs	r3, #8
 8000554:	4699      	mov	r9, r3
 8000556:	3b06      	subs	r3, #6
 8000558:	26ff      	movs	r6, #255	; 0xff
 800055a:	469b      	mov	fp, r3
 800055c:	e7da      	b.n	8000514 <__aeabi_fdiv+0x30>
 800055e:	2500      	movs	r5, #0
 8000560:	4653      	mov	r3, sl
 8000562:	2902      	cmp	r1, #2
 8000564:	d01b      	beq.n	800059e <__aeabi_fdiv+0xba>
 8000566:	2903      	cmp	r1, #3
 8000568:	d100      	bne.n	800056c <__aeabi_fdiv+0x88>
 800056a:	e0bf      	b.n	80006ec <__aeabi_fdiv+0x208>
 800056c:	2901      	cmp	r1, #1
 800056e:	d028      	beq.n	80005c2 <__aeabi_fdiv+0xde>
 8000570:	0030      	movs	r0, r6
 8000572:	307f      	adds	r0, #127	; 0x7f
 8000574:	2800      	cmp	r0, #0
 8000576:	dd20      	ble.n	80005ba <__aeabi_fdiv+0xd6>
 8000578:	076a      	lsls	r2, r5, #29
 800057a:	d004      	beq.n	8000586 <__aeabi_fdiv+0xa2>
 800057c:	220f      	movs	r2, #15
 800057e:	402a      	ands	r2, r5
 8000580:	2a04      	cmp	r2, #4
 8000582:	d000      	beq.n	8000586 <__aeabi_fdiv+0xa2>
 8000584:	3504      	adds	r5, #4
 8000586:	012a      	lsls	r2, r5, #4
 8000588:	d503      	bpl.n	8000592 <__aeabi_fdiv+0xae>
 800058a:	0030      	movs	r0, r6
 800058c:	4a5c      	ldr	r2, [pc, #368]	; (8000700 <__aeabi_fdiv+0x21c>)
 800058e:	3080      	adds	r0, #128	; 0x80
 8000590:	4015      	ands	r5, r2
 8000592:	28fe      	cmp	r0, #254	; 0xfe
 8000594:	dc03      	bgt.n	800059e <__aeabi_fdiv+0xba>
 8000596:	01ac      	lsls	r4, r5, #6
 8000598:	0a64      	lsrs	r4, r4, #9
 800059a:	b2c2      	uxtb	r2, r0
 800059c:	e001      	b.n	80005a2 <__aeabi_fdiv+0xbe>
 800059e:	22ff      	movs	r2, #255	; 0xff
 80005a0:	2400      	movs	r4, #0
 80005a2:	0264      	lsls	r4, r4, #9
 80005a4:	05d2      	lsls	r2, r2, #23
 80005a6:	0a60      	lsrs	r0, r4, #9
 80005a8:	07db      	lsls	r3, r3, #31
 80005aa:	4310      	orrs	r0, r2
 80005ac:	4318      	orrs	r0, r3
 80005ae:	bc3c      	pop	{r2, r3, r4, r5}
 80005b0:	4690      	mov	r8, r2
 80005b2:	4699      	mov	r9, r3
 80005b4:	46a2      	mov	sl, r4
 80005b6:	46ab      	mov	fp, r5
 80005b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005ba:	2201      	movs	r2, #1
 80005bc:	1a10      	subs	r0, r2, r0
 80005be:	281b      	cmp	r0, #27
 80005c0:	dd7c      	ble.n	80006bc <__aeabi_fdiv+0x1d8>
 80005c2:	2200      	movs	r2, #0
 80005c4:	2400      	movs	r4, #0
 80005c6:	e7ec      	b.n	80005a2 <__aeabi_fdiv+0xbe>
 80005c8:	2c00      	cmp	r4, #0
 80005ca:	d11d      	bne.n	8000608 <__aeabi_fdiv+0x124>
 80005cc:	2304      	movs	r3, #4
 80005ce:	4699      	mov	r9, r3
 80005d0:	3b03      	subs	r3, #3
 80005d2:	2600      	movs	r6, #0
 80005d4:	469b      	mov	fp, r3
 80005d6:	e79d      	b.n	8000514 <__aeabi_fdiv+0x30>
 80005d8:	3eff      	subs	r6, #255	; 0xff
 80005da:	2d00      	cmp	r5, #0
 80005dc:	d120      	bne.n	8000620 <__aeabi_fdiv+0x13c>
 80005de:	2102      	movs	r1, #2
 80005e0:	4643      	mov	r3, r8
 80005e2:	464a      	mov	r2, r9
 80005e4:	407b      	eors	r3, r7
 80005e6:	430a      	orrs	r2, r1
 80005e8:	2a0f      	cmp	r2, #15
 80005ea:	d8d8      	bhi.n	800059e <__aeabi_fdiv+0xba>
 80005ec:	4845      	ldr	r0, [pc, #276]	; (8000704 <__aeabi_fdiv+0x220>)
 80005ee:	0092      	lsls	r2, r2, #2
 80005f0:	5882      	ldr	r2, [r0, r2]
 80005f2:	4697      	mov	pc, r2
 80005f4:	2d00      	cmp	r5, #0
 80005f6:	d119      	bne.n	800062c <__aeabi_fdiv+0x148>
 80005f8:	2101      	movs	r1, #1
 80005fa:	e7f1      	b.n	80005e0 <__aeabi_fdiv+0xfc>
 80005fc:	230c      	movs	r3, #12
 80005fe:	4699      	mov	r9, r3
 8000600:	3b09      	subs	r3, #9
 8000602:	26ff      	movs	r6, #255	; 0xff
 8000604:	469b      	mov	fp, r3
 8000606:	e785      	b.n	8000514 <__aeabi_fdiv+0x30>
 8000608:	0020      	movs	r0, r4
 800060a:	f001 fb91 	bl	8001d30 <__clzsi2>
 800060e:	2676      	movs	r6, #118	; 0x76
 8000610:	1f43      	subs	r3, r0, #5
 8000612:	409c      	lsls	r4, r3
 8000614:	2300      	movs	r3, #0
 8000616:	4276      	negs	r6, r6
 8000618:	1a36      	subs	r6, r6, r0
 800061a:	4699      	mov	r9, r3
 800061c:	469b      	mov	fp, r3
 800061e:	e779      	b.n	8000514 <__aeabi_fdiv+0x30>
 8000620:	464a      	mov	r2, r9
 8000622:	2303      	movs	r3, #3
 8000624:	431a      	orrs	r2, r3
 8000626:	4691      	mov	r9, r2
 8000628:	2103      	movs	r1, #3
 800062a:	e786      	b.n	800053a <__aeabi_fdiv+0x56>
 800062c:	0028      	movs	r0, r5
 800062e:	f001 fb7f 	bl	8001d30 <__clzsi2>
 8000632:	1f43      	subs	r3, r0, #5
 8000634:	1836      	adds	r6, r6, r0
 8000636:	409d      	lsls	r5, r3
 8000638:	3676      	adds	r6, #118	; 0x76
 800063a:	2100      	movs	r1, #0
 800063c:	e77d      	b.n	800053a <__aeabi_fdiv+0x56>
 800063e:	2480      	movs	r4, #128	; 0x80
 8000640:	2300      	movs	r3, #0
 8000642:	03e4      	lsls	r4, r4, #15
 8000644:	22ff      	movs	r2, #255	; 0xff
 8000646:	e7ac      	b.n	80005a2 <__aeabi_fdiv+0xbe>
 8000648:	2500      	movs	r5, #0
 800064a:	2380      	movs	r3, #128	; 0x80
 800064c:	03db      	lsls	r3, r3, #15
 800064e:	421c      	tst	r4, r3
 8000650:	d028      	beq.n	80006a4 <__aeabi_fdiv+0x1c0>
 8000652:	421d      	tst	r5, r3
 8000654:	d126      	bne.n	80006a4 <__aeabi_fdiv+0x1c0>
 8000656:	432b      	orrs	r3, r5
 8000658:	025c      	lsls	r4, r3, #9
 800065a:	0a64      	lsrs	r4, r4, #9
 800065c:	4643      	mov	r3, r8
 800065e:	22ff      	movs	r2, #255	; 0xff
 8000660:	e79f      	b.n	80005a2 <__aeabi_fdiv+0xbe>
 8000662:	0162      	lsls	r2, r4, #5
 8000664:	016c      	lsls	r4, r5, #5
 8000666:	42a2      	cmp	r2, r4
 8000668:	d224      	bcs.n	80006b4 <__aeabi_fdiv+0x1d0>
 800066a:	211b      	movs	r1, #27
 800066c:	2500      	movs	r5, #0
 800066e:	3e01      	subs	r6, #1
 8000670:	2701      	movs	r7, #1
 8000672:	0010      	movs	r0, r2
 8000674:	006d      	lsls	r5, r5, #1
 8000676:	0052      	lsls	r2, r2, #1
 8000678:	2800      	cmp	r0, #0
 800067a:	db01      	blt.n	8000680 <__aeabi_fdiv+0x19c>
 800067c:	4294      	cmp	r4, r2
 800067e:	d801      	bhi.n	8000684 <__aeabi_fdiv+0x1a0>
 8000680:	1b12      	subs	r2, r2, r4
 8000682:	433d      	orrs	r5, r7
 8000684:	3901      	subs	r1, #1
 8000686:	2900      	cmp	r1, #0
 8000688:	d1f3      	bne.n	8000672 <__aeabi_fdiv+0x18e>
 800068a:	0014      	movs	r4, r2
 800068c:	1e62      	subs	r2, r4, #1
 800068e:	4194      	sbcs	r4, r2
 8000690:	4325      	orrs	r5, r4
 8000692:	e76d      	b.n	8000570 <__aeabi_fdiv+0x8c>
 8000694:	46ba      	mov	sl, r7
 8000696:	4659      	mov	r1, fp
 8000698:	0025      	movs	r5, r4
 800069a:	4653      	mov	r3, sl
 800069c:	2902      	cmp	r1, #2
 800069e:	d000      	beq.n	80006a2 <__aeabi_fdiv+0x1be>
 80006a0:	e761      	b.n	8000566 <__aeabi_fdiv+0x82>
 80006a2:	e77c      	b.n	800059e <__aeabi_fdiv+0xba>
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	03db      	lsls	r3, r3, #15
 80006a8:	431c      	orrs	r4, r3
 80006aa:	0264      	lsls	r4, r4, #9
 80006ac:	0a64      	lsrs	r4, r4, #9
 80006ae:	003b      	movs	r3, r7
 80006b0:	22ff      	movs	r2, #255	; 0xff
 80006b2:	e776      	b.n	80005a2 <__aeabi_fdiv+0xbe>
 80006b4:	1b12      	subs	r2, r2, r4
 80006b6:	211a      	movs	r1, #26
 80006b8:	2501      	movs	r5, #1
 80006ba:	e7d9      	b.n	8000670 <__aeabi_fdiv+0x18c>
 80006bc:	369e      	adds	r6, #158	; 0x9e
 80006be:	002a      	movs	r2, r5
 80006c0:	40b5      	lsls	r5, r6
 80006c2:	002c      	movs	r4, r5
 80006c4:	40c2      	lsrs	r2, r0
 80006c6:	1e65      	subs	r5, r4, #1
 80006c8:	41ac      	sbcs	r4, r5
 80006ca:	4314      	orrs	r4, r2
 80006cc:	0762      	lsls	r2, r4, #29
 80006ce:	d004      	beq.n	80006da <__aeabi_fdiv+0x1f6>
 80006d0:	220f      	movs	r2, #15
 80006d2:	4022      	ands	r2, r4
 80006d4:	2a04      	cmp	r2, #4
 80006d6:	d000      	beq.n	80006da <__aeabi_fdiv+0x1f6>
 80006d8:	3404      	adds	r4, #4
 80006da:	0162      	lsls	r2, r4, #5
 80006dc:	d403      	bmi.n	80006e6 <__aeabi_fdiv+0x202>
 80006de:	01a4      	lsls	r4, r4, #6
 80006e0:	0a64      	lsrs	r4, r4, #9
 80006e2:	2200      	movs	r2, #0
 80006e4:	e75d      	b.n	80005a2 <__aeabi_fdiv+0xbe>
 80006e6:	2201      	movs	r2, #1
 80006e8:	2400      	movs	r4, #0
 80006ea:	e75a      	b.n	80005a2 <__aeabi_fdiv+0xbe>
 80006ec:	2480      	movs	r4, #128	; 0x80
 80006ee:	03e4      	lsls	r4, r4, #15
 80006f0:	432c      	orrs	r4, r5
 80006f2:	0264      	lsls	r4, r4, #9
 80006f4:	0a64      	lsrs	r4, r4, #9
 80006f6:	22ff      	movs	r2, #255	; 0xff
 80006f8:	e753      	b.n	80005a2 <__aeabi_fdiv+0xbe>
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	0800a054 	.word	0x0800a054
 8000700:	f7ffffff 	.word	0xf7ffffff
 8000704:	0800a094 	.word	0x0800a094

08000708 <__eqsf2>:
 8000708:	b570      	push	{r4, r5, r6, lr}
 800070a:	0042      	lsls	r2, r0, #1
 800070c:	024e      	lsls	r6, r1, #9
 800070e:	004c      	lsls	r4, r1, #1
 8000710:	0245      	lsls	r5, r0, #9
 8000712:	0a6d      	lsrs	r5, r5, #9
 8000714:	0e12      	lsrs	r2, r2, #24
 8000716:	0fc3      	lsrs	r3, r0, #31
 8000718:	0a76      	lsrs	r6, r6, #9
 800071a:	0e24      	lsrs	r4, r4, #24
 800071c:	0fc9      	lsrs	r1, r1, #31
 800071e:	2aff      	cmp	r2, #255	; 0xff
 8000720:	d00f      	beq.n	8000742 <__eqsf2+0x3a>
 8000722:	2cff      	cmp	r4, #255	; 0xff
 8000724:	d011      	beq.n	800074a <__eqsf2+0x42>
 8000726:	2001      	movs	r0, #1
 8000728:	42a2      	cmp	r2, r4
 800072a:	d000      	beq.n	800072e <__eqsf2+0x26>
 800072c:	bd70      	pop	{r4, r5, r6, pc}
 800072e:	42b5      	cmp	r5, r6
 8000730:	d1fc      	bne.n	800072c <__eqsf2+0x24>
 8000732:	428b      	cmp	r3, r1
 8000734:	d00d      	beq.n	8000752 <__eqsf2+0x4a>
 8000736:	2a00      	cmp	r2, #0
 8000738:	d1f8      	bne.n	800072c <__eqsf2+0x24>
 800073a:	0028      	movs	r0, r5
 800073c:	1e45      	subs	r5, r0, #1
 800073e:	41a8      	sbcs	r0, r5
 8000740:	e7f4      	b.n	800072c <__eqsf2+0x24>
 8000742:	2001      	movs	r0, #1
 8000744:	2d00      	cmp	r5, #0
 8000746:	d1f1      	bne.n	800072c <__eqsf2+0x24>
 8000748:	e7eb      	b.n	8000722 <__eqsf2+0x1a>
 800074a:	2001      	movs	r0, #1
 800074c:	2e00      	cmp	r6, #0
 800074e:	d1ed      	bne.n	800072c <__eqsf2+0x24>
 8000750:	e7e9      	b.n	8000726 <__eqsf2+0x1e>
 8000752:	2000      	movs	r0, #0
 8000754:	e7ea      	b.n	800072c <__eqsf2+0x24>
 8000756:	46c0      	nop			; (mov r8, r8)

08000758 <__gesf2>:
 8000758:	b570      	push	{r4, r5, r6, lr}
 800075a:	004a      	lsls	r2, r1, #1
 800075c:	024e      	lsls	r6, r1, #9
 800075e:	0245      	lsls	r5, r0, #9
 8000760:	0044      	lsls	r4, r0, #1
 8000762:	0a6d      	lsrs	r5, r5, #9
 8000764:	0e24      	lsrs	r4, r4, #24
 8000766:	0fc3      	lsrs	r3, r0, #31
 8000768:	0a76      	lsrs	r6, r6, #9
 800076a:	0e12      	lsrs	r2, r2, #24
 800076c:	0fc9      	lsrs	r1, r1, #31
 800076e:	2cff      	cmp	r4, #255	; 0xff
 8000770:	d015      	beq.n	800079e <__gesf2+0x46>
 8000772:	2aff      	cmp	r2, #255	; 0xff
 8000774:	d00e      	beq.n	8000794 <__gesf2+0x3c>
 8000776:	2c00      	cmp	r4, #0
 8000778:	d115      	bne.n	80007a6 <__gesf2+0x4e>
 800077a:	2a00      	cmp	r2, #0
 800077c:	d101      	bne.n	8000782 <__gesf2+0x2a>
 800077e:	2e00      	cmp	r6, #0
 8000780:	d01c      	beq.n	80007bc <__gesf2+0x64>
 8000782:	2d00      	cmp	r5, #0
 8000784:	d014      	beq.n	80007b0 <__gesf2+0x58>
 8000786:	428b      	cmp	r3, r1
 8000788:	d027      	beq.n	80007da <__gesf2+0x82>
 800078a:	2002      	movs	r0, #2
 800078c:	3b01      	subs	r3, #1
 800078e:	4018      	ands	r0, r3
 8000790:	3801      	subs	r0, #1
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	2e00      	cmp	r6, #0
 8000796:	d0ee      	beq.n	8000776 <__gesf2+0x1e>
 8000798:	2002      	movs	r0, #2
 800079a:	4240      	negs	r0, r0
 800079c:	e7f9      	b.n	8000792 <__gesf2+0x3a>
 800079e:	2d00      	cmp	r5, #0
 80007a0:	d1fa      	bne.n	8000798 <__gesf2+0x40>
 80007a2:	2aff      	cmp	r2, #255	; 0xff
 80007a4:	d00e      	beq.n	80007c4 <__gesf2+0x6c>
 80007a6:	2a00      	cmp	r2, #0
 80007a8:	d10e      	bne.n	80007c8 <__gesf2+0x70>
 80007aa:	2e00      	cmp	r6, #0
 80007ac:	d0ed      	beq.n	800078a <__gesf2+0x32>
 80007ae:	e00b      	b.n	80007c8 <__gesf2+0x70>
 80007b0:	2301      	movs	r3, #1
 80007b2:	3901      	subs	r1, #1
 80007b4:	4399      	bics	r1, r3
 80007b6:	0008      	movs	r0, r1
 80007b8:	3001      	adds	r0, #1
 80007ba:	e7ea      	b.n	8000792 <__gesf2+0x3a>
 80007bc:	2000      	movs	r0, #0
 80007be:	2d00      	cmp	r5, #0
 80007c0:	d0e7      	beq.n	8000792 <__gesf2+0x3a>
 80007c2:	e7e2      	b.n	800078a <__gesf2+0x32>
 80007c4:	2e00      	cmp	r6, #0
 80007c6:	d1e7      	bne.n	8000798 <__gesf2+0x40>
 80007c8:	428b      	cmp	r3, r1
 80007ca:	d1de      	bne.n	800078a <__gesf2+0x32>
 80007cc:	4294      	cmp	r4, r2
 80007ce:	dd05      	ble.n	80007dc <__gesf2+0x84>
 80007d0:	2102      	movs	r1, #2
 80007d2:	1e58      	subs	r0, r3, #1
 80007d4:	4008      	ands	r0, r1
 80007d6:	3801      	subs	r0, #1
 80007d8:	e7db      	b.n	8000792 <__gesf2+0x3a>
 80007da:	2400      	movs	r4, #0
 80007dc:	42a2      	cmp	r2, r4
 80007de:	dc04      	bgt.n	80007ea <__gesf2+0x92>
 80007e0:	42b5      	cmp	r5, r6
 80007e2:	d8d2      	bhi.n	800078a <__gesf2+0x32>
 80007e4:	2000      	movs	r0, #0
 80007e6:	42b5      	cmp	r5, r6
 80007e8:	d2d3      	bcs.n	8000792 <__gesf2+0x3a>
 80007ea:	1e58      	subs	r0, r3, #1
 80007ec:	2301      	movs	r3, #1
 80007ee:	4398      	bics	r0, r3
 80007f0:	3001      	adds	r0, #1
 80007f2:	e7ce      	b.n	8000792 <__gesf2+0x3a>

080007f4 <__lesf2>:
 80007f4:	b530      	push	{r4, r5, lr}
 80007f6:	0042      	lsls	r2, r0, #1
 80007f8:	0244      	lsls	r4, r0, #9
 80007fa:	024d      	lsls	r5, r1, #9
 80007fc:	0fc3      	lsrs	r3, r0, #31
 80007fe:	0048      	lsls	r0, r1, #1
 8000800:	0a64      	lsrs	r4, r4, #9
 8000802:	0e12      	lsrs	r2, r2, #24
 8000804:	0a6d      	lsrs	r5, r5, #9
 8000806:	0e00      	lsrs	r0, r0, #24
 8000808:	0fc9      	lsrs	r1, r1, #31
 800080a:	2aff      	cmp	r2, #255	; 0xff
 800080c:	d012      	beq.n	8000834 <__lesf2+0x40>
 800080e:	28ff      	cmp	r0, #255	; 0xff
 8000810:	d00c      	beq.n	800082c <__lesf2+0x38>
 8000812:	2a00      	cmp	r2, #0
 8000814:	d112      	bne.n	800083c <__lesf2+0x48>
 8000816:	2800      	cmp	r0, #0
 8000818:	d119      	bne.n	800084e <__lesf2+0x5a>
 800081a:	2d00      	cmp	r5, #0
 800081c:	d117      	bne.n	800084e <__lesf2+0x5a>
 800081e:	2c00      	cmp	r4, #0
 8000820:	d02b      	beq.n	800087a <__lesf2+0x86>
 8000822:	2002      	movs	r0, #2
 8000824:	3b01      	subs	r3, #1
 8000826:	4018      	ands	r0, r3
 8000828:	3801      	subs	r0, #1
 800082a:	e026      	b.n	800087a <__lesf2+0x86>
 800082c:	2d00      	cmp	r5, #0
 800082e:	d0f0      	beq.n	8000812 <__lesf2+0x1e>
 8000830:	2002      	movs	r0, #2
 8000832:	e022      	b.n	800087a <__lesf2+0x86>
 8000834:	2c00      	cmp	r4, #0
 8000836:	d1fb      	bne.n	8000830 <__lesf2+0x3c>
 8000838:	28ff      	cmp	r0, #255	; 0xff
 800083a:	d01f      	beq.n	800087c <__lesf2+0x88>
 800083c:	2800      	cmp	r0, #0
 800083e:	d11f      	bne.n	8000880 <__lesf2+0x8c>
 8000840:	2d00      	cmp	r5, #0
 8000842:	d11d      	bne.n	8000880 <__lesf2+0x8c>
 8000844:	2002      	movs	r0, #2
 8000846:	3b01      	subs	r3, #1
 8000848:	4018      	ands	r0, r3
 800084a:	3801      	subs	r0, #1
 800084c:	e015      	b.n	800087a <__lesf2+0x86>
 800084e:	2c00      	cmp	r4, #0
 8000850:	d00e      	beq.n	8000870 <__lesf2+0x7c>
 8000852:	428b      	cmp	r3, r1
 8000854:	d1e5      	bne.n	8000822 <__lesf2+0x2e>
 8000856:	2200      	movs	r2, #0
 8000858:	4290      	cmp	r0, r2
 800085a:	dc04      	bgt.n	8000866 <__lesf2+0x72>
 800085c:	42ac      	cmp	r4, r5
 800085e:	d8e0      	bhi.n	8000822 <__lesf2+0x2e>
 8000860:	2000      	movs	r0, #0
 8000862:	42ac      	cmp	r4, r5
 8000864:	d209      	bcs.n	800087a <__lesf2+0x86>
 8000866:	1e58      	subs	r0, r3, #1
 8000868:	2301      	movs	r3, #1
 800086a:	4398      	bics	r0, r3
 800086c:	3001      	adds	r0, #1
 800086e:	e004      	b.n	800087a <__lesf2+0x86>
 8000870:	2301      	movs	r3, #1
 8000872:	3901      	subs	r1, #1
 8000874:	4399      	bics	r1, r3
 8000876:	0008      	movs	r0, r1
 8000878:	3001      	adds	r0, #1
 800087a:	bd30      	pop	{r4, r5, pc}
 800087c:	2d00      	cmp	r5, #0
 800087e:	d1d7      	bne.n	8000830 <__lesf2+0x3c>
 8000880:	428b      	cmp	r3, r1
 8000882:	d1ce      	bne.n	8000822 <__lesf2+0x2e>
 8000884:	4282      	cmp	r2, r0
 8000886:	dde7      	ble.n	8000858 <__lesf2+0x64>
 8000888:	2102      	movs	r1, #2
 800088a:	1e58      	subs	r0, r3, #1
 800088c:	4008      	ands	r0, r1
 800088e:	3801      	subs	r0, #1
 8000890:	e7f3      	b.n	800087a <__lesf2+0x86>
 8000892:	46c0      	nop			; (mov r8, r8)

08000894 <__aeabi_fmul>:
 8000894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000896:	464e      	mov	r6, r9
 8000898:	4657      	mov	r7, sl
 800089a:	4645      	mov	r5, r8
 800089c:	46de      	mov	lr, fp
 800089e:	b5e0      	push	{r5, r6, r7, lr}
 80008a0:	0243      	lsls	r3, r0, #9
 80008a2:	0a5b      	lsrs	r3, r3, #9
 80008a4:	0045      	lsls	r5, r0, #1
 80008a6:	b083      	sub	sp, #12
 80008a8:	1c0f      	adds	r7, r1, #0
 80008aa:	4699      	mov	r9, r3
 80008ac:	0e2d      	lsrs	r5, r5, #24
 80008ae:	0fc6      	lsrs	r6, r0, #31
 80008b0:	2d00      	cmp	r5, #0
 80008b2:	d057      	beq.n	8000964 <__aeabi_fmul+0xd0>
 80008b4:	2dff      	cmp	r5, #255	; 0xff
 80008b6:	d024      	beq.n	8000902 <__aeabi_fmul+0x6e>
 80008b8:	2080      	movs	r0, #128	; 0x80
 80008ba:	00db      	lsls	r3, r3, #3
 80008bc:	04c0      	lsls	r0, r0, #19
 80008be:	4318      	orrs	r0, r3
 80008c0:	2300      	movs	r3, #0
 80008c2:	4681      	mov	r9, r0
 80008c4:	469a      	mov	sl, r3
 80008c6:	469b      	mov	fp, r3
 80008c8:	3d7f      	subs	r5, #127	; 0x7f
 80008ca:	027c      	lsls	r4, r7, #9
 80008cc:	007a      	lsls	r2, r7, #1
 80008ce:	0ffb      	lsrs	r3, r7, #31
 80008d0:	0a64      	lsrs	r4, r4, #9
 80008d2:	0e12      	lsrs	r2, r2, #24
 80008d4:	4698      	mov	r8, r3
 80008d6:	d023      	beq.n	8000920 <__aeabi_fmul+0x8c>
 80008d8:	2aff      	cmp	r2, #255	; 0xff
 80008da:	d04b      	beq.n	8000974 <__aeabi_fmul+0xe0>
 80008dc:	00e3      	lsls	r3, r4, #3
 80008de:	2480      	movs	r4, #128	; 0x80
 80008e0:	2000      	movs	r0, #0
 80008e2:	04e4      	lsls	r4, r4, #19
 80008e4:	3a7f      	subs	r2, #127	; 0x7f
 80008e6:	431c      	orrs	r4, r3
 80008e8:	18ad      	adds	r5, r5, r2
 80008ea:	1c6b      	adds	r3, r5, #1
 80008ec:	4647      	mov	r7, r8
 80008ee:	9301      	str	r3, [sp, #4]
 80008f0:	4653      	mov	r3, sl
 80008f2:	4077      	eors	r7, r6
 80008f4:	003a      	movs	r2, r7
 80008f6:	2b0f      	cmp	r3, #15
 80008f8:	d848      	bhi.n	800098c <__aeabi_fmul+0xf8>
 80008fa:	497d      	ldr	r1, [pc, #500]	; (8000af0 <__aeabi_fmul+0x25c>)
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	58cb      	ldr	r3, [r1, r3]
 8000900:	469f      	mov	pc, r3
 8000902:	2b00      	cmp	r3, #0
 8000904:	d000      	beq.n	8000908 <__aeabi_fmul+0x74>
 8000906:	e085      	b.n	8000a14 <__aeabi_fmul+0x180>
 8000908:	3308      	adds	r3, #8
 800090a:	469a      	mov	sl, r3
 800090c:	3b06      	subs	r3, #6
 800090e:	469b      	mov	fp, r3
 8000910:	027c      	lsls	r4, r7, #9
 8000912:	007a      	lsls	r2, r7, #1
 8000914:	0ffb      	lsrs	r3, r7, #31
 8000916:	25ff      	movs	r5, #255	; 0xff
 8000918:	0a64      	lsrs	r4, r4, #9
 800091a:	0e12      	lsrs	r2, r2, #24
 800091c:	4698      	mov	r8, r3
 800091e:	d1db      	bne.n	80008d8 <__aeabi_fmul+0x44>
 8000920:	2c00      	cmp	r4, #0
 8000922:	d000      	beq.n	8000926 <__aeabi_fmul+0x92>
 8000924:	e090      	b.n	8000a48 <__aeabi_fmul+0x1b4>
 8000926:	4652      	mov	r2, sl
 8000928:	2301      	movs	r3, #1
 800092a:	431a      	orrs	r2, r3
 800092c:	4692      	mov	sl, r2
 800092e:	2001      	movs	r0, #1
 8000930:	e7db      	b.n	80008ea <__aeabi_fmul+0x56>
 8000932:	464c      	mov	r4, r9
 8000934:	4658      	mov	r0, fp
 8000936:	0017      	movs	r7, r2
 8000938:	2802      	cmp	r0, #2
 800093a:	d024      	beq.n	8000986 <__aeabi_fmul+0xf2>
 800093c:	2803      	cmp	r0, #3
 800093e:	d100      	bne.n	8000942 <__aeabi_fmul+0xae>
 8000940:	e0cf      	b.n	8000ae2 <__aeabi_fmul+0x24e>
 8000942:	2200      	movs	r2, #0
 8000944:	2300      	movs	r3, #0
 8000946:	2801      	cmp	r0, #1
 8000948:	d14d      	bne.n	80009e6 <__aeabi_fmul+0x152>
 800094a:	0258      	lsls	r0, r3, #9
 800094c:	05d2      	lsls	r2, r2, #23
 800094e:	0a40      	lsrs	r0, r0, #9
 8000950:	07ff      	lsls	r7, r7, #31
 8000952:	4310      	orrs	r0, r2
 8000954:	4338      	orrs	r0, r7
 8000956:	b003      	add	sp, #12
 8000958:	bc3c      	pop	{r2, r3, r4, r5}
 800095a:	4690      	mov	r8, r2
 800095c:	4699      	mov	r9, r3
 800095e:	46a2      	mov	sl, r4
 8000960:	46ab      	mov	fp, r5
 8000962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000964:	2b00      	cmp	r3, #0
 8000966:	d15b      	bne.n	8000a20 <__aeabi_fmul+0x18c>
 8000968:	2304      	movs	r3, #4
 800096a:	469a      	mov	sl, r3
 800096c:	3b03      	subs	r3, #3
 800096e:	2500      	movs	r5, #0
 8000970:	469b      	mov	fp, r3
 8000972:	e7aa      	b.n	80008ca <__aeabi_fmul+0x36>
 8000974:	35ff      	adds	r5, #255	; 0xff
 8000976:	2c00      	cmp	r4, #0
 8000978:	d160      	bne.n	8000a3c <__aeabi_fmul+0x1a8>
 800097a:	4652      	mov	r2, sl
 800097c:	2302      	movs	r3, #2
 800097e:	431a      	orrs	r2, r3
 8000980:	4692      	mov	sl, r2
 8000982:	2002      	movs	r0, #2
 8000984:	e7b1      	b.n	80008ea <__aeabi_fmul+0x56>
 8000986:	22ff      	movs	r2, #255	; 0xff
 8000988:	2300      	movs	r3, #0
 800098a:	e7de      	b.n	800094a <__aeabi_fmul+0xb6>
 800098c:	464b      	mov	r3, r9
 800098e:	0c1b      	lsrs	r3, r3, #16
 8000990:	469c      	mov	ip, r3
 8000992:	464b      	mov	r3, r9
 8000994:	0426      	lsls	r6, r4, #16
 8000996:	0c36      	lsrs	r6, r6, #16
 8000998:	0418      	lsls	r0, r3, #16
 800099a:	4661      	mov	r1, ip
 800099c:	0033      	movs	r3, r6
 800099e:	0c22      	lsrs	r2, r4, #16
 80009a0:	4664      	mov	r4, ip
 80009a2:	0c00      	lsrs	r0, r0, #16
 80009a4:	4343      	muls	r3, r0
 80009a6:	434e      	muls	r6, r1
 80009a8:	4350      	muls	r0, r2
 80009aa:	4354      	muls	r4, r2
 80009ac:	1980      	adds	r0, r0, r6
 80009ae:	0c1a      	lsrs	r2, r3, #16
 80009b0:	1812      	adds	r2, r2, r0
 80009b2:	4296      	cmp	r6, r2
 80009b4:	d903      	bls.n	80009be <__aeabi_fmul+0x12a>
 80009b6:	2180      	movs	r1, #128	; 0x80
 80009b8:	0249      	lsls	r1, r1, #9
 80009ba:	468c      	mov	ip, r1
 80009bc:	4464      	add	r4, ip
 80009be:	041b      	lsls	r3, r3, #16
 80009c0:	0c1b      	lsrs	r3, r3, #16
 80009c2:	0410      	lsls	r0, r2, #16
 80009c4:	18c0      	adds	r0, r0, r3
 80009c6:	0183      	lsls	r3, r0, #6
 80009c8:	1e5e      	subs	r6, r3, #1
 80009ca:	41b3      	sbcs	r3, r6
 80009cc:	0e80      	lsrs	r0, r0, #26
 80009ce:	4318      	orrs	r0, r3
 80009d0:	0c13      	lsrs	r3, r2, #16
 80009d2:	191b      	adds	r3, r3, r4
 80009d4:	019b      	lsls	r3, r3, #6
 80009d6:	4303      	orrs	r3, r0
 80009d8:	001c      	movs	r4, r3
 80009da:	0123      	lsls	r3, r4, #4
 80009dc:	d579      	bpl.n	8000ad2 <__aeabi_fmul+0x23e>
 80009de:	2301      	movs	r3, #1
 80009e0:	0862      	lsrs	r2, r4, #1
 80009e2:	401c      	ands	r4, r3
 80009e4:	4314      	orrs	r4, r2
 80009e6:	9a01      	ldr	r2, [sp, #4]
 80009e8:	327f      	adds	r2, #127	; 0x7f
 80009ea:	2a00      	cmp	r2, #0
 80009ec:	dd4d      	ble.n	8000a8a <__aeabi_fmul+0x1f6>
 80009ee:	0763      	lsls	r3, r4, #29
 80009f0:	d004      	beq.n	80009fc <__aeabi_fmul+0x168>
 80009f2:	230f      	movs	r3, #15
 80009f4:	4023      	ands	r3, r4
 80009f6:	2b04      	cmp	r3, #4
 80009f8:	d000      	beq.n	80009fc <__aeabi_fmul+0x168>
 80009fa:	3404      	adds	r4, #4
 80009fc:	0123      	lsls	r3, r4, #4
 80009fe:	d503      	bpl.n	8000a08 <__aeabi_fmul+0x174>
 8000a00:	4b3c      	ldr	r3, [pc, #240]	; (8000af4 <__aeabi_fmul+0x260>)
 8000a02:	9a01      	ldr	r2, [sp, #4]
 8000a04:	401c      	ands	r4, r3
 8000a06:	3280      	adds	r2, #128	; 0x80
 8000a08:	2afe      	cmp	r2, #254	; 0xfe
 8000a0a:	dcbc      	bgt.n	8000986 <__aeabi_fmul+0xf2>
 8000a0c:	01a3      	lsls	r3, r4, #6
 8000a0e:	0a5b      	lsrs	r3, r3, #9
 8000a10:	b2d2      	uxtb	r2, r2
 8000a12:	e79a      	b.n	800094a <__aeabi_fmul+0xb6>
 8000a14:	230c      	movs	r3, #12
 8000a16:	469a      	mov	sl, r3
 8000a18:	3b09      	subs	r3, #9
 8000a1a:	25ff      	movs	r5, #255	; 0xff
 8000a1c:	469b      	mov	fp, r3
 8000a1e:	e754      	b.n	80008ca <__aeabi_fmul+0x36>
 8000a20:	0018      	movs	r0, r3
 8000a22:	f001 f985 	bl	8001d30 <__clzsi2>
 8000a26:	464a      	mov	r2, r9
 8000a28:	1f43      	subs	r3, r0, #5
 8000a2a:	2576      	movs	r5, #118	; 0x76
 8000a2c:	409a      	lsls	r2, r3
 8000a2e:	2300      	movs	r3, #0
 8000a30:	426d      	negs	r5, r5
 8000a32:	4691      	mov	r9, r2
 8000a34:	1a2d      	subs	r5, r5, r0
 8000a36:	469a      	mov	sl, r3
 8000a38:	469b      	mov	fp, r3
 8000a3a:	e746      	b.n	80008ca <__aeabi_fmul+0x36>
 8000a3c:	4652      	mov	r2, sl
 8000a3e:	2303      	movs	r3, #3
 8000a40:	431a      	orrs	r2, r3
 8000a42:	4692      	mov	sl, r2
 8000a44:	2003      	movs	r0, #3
 8000a46:	e750      	b.n	80008ea <__aeabi_fmul+0x56>
 8000a48:	0020      	movs	r0, r4
 8000a4a:	f001 f971 	bl	8001d30 <__clzsi2>
 8000a4e:	1f43      	subs	r3, r0, #5
 8000a50:	1a2d      	subs	r5, r5, r0
 8000a52:	409c      	lsls	r4, r3
 8000a54:	3d76      	subs	r5, #118	; 0x76
 8000a56:	2000      	movs	r0, #0
 8000a58:	e747      	b.n	80008ea <__aeabi_fmul+0x56>
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	2700      	movs	r7, #0
 8000a5e:	03db      	lsls	r3, r3, #15
 8000a60:	22ff      	movs	r2, #255	; 0xff
 8000a62:	e772      	b.n	800094a <__aeabi_fmul+0xb6>
 8000a64:	4642      	mov	r2, r8
 8000a66:	e766      	b.n	8000936 <__aeabi_fmul+0xa2>
 8000a68:	464c      	mov	r4, r9
 8000a6a:	0032      	movs	r2, r6
 8000a6c:	4658      	mov	r0, fp
 8000a6e:	e762      	b.n	8000936 <__aeabi_fmul+0xa2>
 8000a70:	2380      	movs	r3, #128	; 0x80
 8000a72:	464a      	mov	r2, r9
 8000a74:	03db      	lsls	r3, r3, #15
 8000a76:	421a      	tst	r2, r3
 8000a78:	d022      	beq.n	8000ac0 <__aeabi_fmul+0x22c>
 8000a7a:	421c      	tst	r4, r3
 8000a7c:	d120      	bne.n	8000ac0 <__aeabi_fmul+0x22c>
 8000a7e:	4323      	orrs	r3, r4
 8000a80:	025b      	lsls	r3, r3, #9
 8000a82:	0a5b      	lsrs	r3, r3, #9
 8000a84:	4647      	mov	r7, r8
 8000a86:	22ff      	movs	r2, #255	; 0xff
 8000a88:	e75f      	b.n	800094a <__aeabi_fmul+0xb6>
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	1a9a      	subs	r2, r3, r2
 8000a8e:	2a1b      	cmp	r2, #27
 8000a90:	dc21      	bgt.n	8000ad6 <__aeabi_fmul+0x242>
 8000a92:	0023      	movs	r3, r4
 8000a94:	9901      	ldr	r1, [sp, #4]
 8000a96:	40d3      	lsrs	r3, r2
 8000a98:	319e      	adds	r1, #158	; 0x9e
 8000a9a:	408c      	lsls	r4, r1
 8000a9c:	001a      	movs	r2, r3
 8000a9e:	0023      	movs	r3, r4
 8000aa0:	1e5c      	subs	r4, r3, #1
 8000aa2:	41a3      	sbcs	r3, r4
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	075a      	lsls	r2, r3, #29
 8000aa8:	d004      	beq.n	8000ab4 <__aeabi_fmul+0x220>
 8000aaa:	220f      	movs	r2, #15
 8000aac:	401a      	ands	r2, r3
 8000aae:	2a04      	cmp	r2, #4
 8000ab0:	d000      	beq.n	8000ab4 <__aeabi_fmul+0x220>
 8000ab2:	3304      	adds	r3, #4
 8000ab4:	015a      	lsls	r2, r3, #5
 8000ab6:	d411      	bmi.n	8000adc <__aeabi_fmul+0x248>
 8000ab8:	019b      	lsls	r3, r3, #6
 8000aba:	0a5b      	lsrs	r3, r3, #9
 8000abc:	2200      	movs	r2, #0
 8000abe:	e744      	b.n	800094a <__aeabi_fmul+0xb6>
 8000ac0:	2380      	movs	r3, #128	; 0x80
 8000ac2:	464a      	mov	r2, r9
 8000ac4:	03db      	lsls	r3, r3, #15
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	025b      	lsls	r3, r3, #9
 8000aca:	0a5b      	lsrs	r3, r3, #9
 8000acc:	0037      	movs	r7, r6
 8000ace:	22ff      	movs	r2, #255	; 0xff
 8000ad0:	e73b      	b.n	800094a <__aeabi_fmul+0xb6>
 8000ad2:	9501      	str	r5, [sp, #4]
 8000ad4:	e787      	b.n	80009e6 <__aeabi_fmul+0x152>
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2300      	movs	r3, #0
 8000ada:	e736      	b.n	800094a <__aeabi_fmul+0xb6>
 8000adc:	2201      	movs	r2, #1
 8000ade:	2300      	movs	r3, #0
 8000ae0:	e733      	b.n	800094a <__aeabi_fmul+0xb6>
 8000ae2:	2380      	movs	r3, #128	; 0x80
 8000ae4:	03db      	lsls	r3, r3, #15
 8000ae6:	4323      	orrs	r3, r4
 8000ae8:	025b      	lsls	r3, r3, #9
 8000aea:	0a5b      	lsrs	r3, r3, #9
 8000aec:	22ff      	movs	r2, #255	; 0xff
 8000aee:	e72c      	b.n	800094a <__aeabi_fmul+0xb6>
 8000af0:	0800a0d4 	.word	0x0800a0d4
 8000af4:	f7ffffff 	.word	0xf7ffffff

08000af8 <__aeabi_fsub>:
 8000af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000afa:	4647      	mov	r7, r8
 8000afc:	46ce      	mov	lr, r9
 8000afe:	0044      	lsls	r4, r0, #1
 8000b00:	0fc2      	lsrs	r2, r0, #31
 8000b02:	b580      	push	{r7, lr}
 8000b04:	0247      	lsls	r7, r0, #9
 8000b06:	0248      	lsls	r0, r1, #9
 8000b08:	0a40      	lsrs	r0, r0, #9
 8000b0a:	4684      	mov	ip, r0
 8000b0c:	4666      	mov	r6, ip
 8000b0e:	0048      	lsls	r0, r1, #1
 8000b10:	0a7f      	lsrs	r7, r7, #9
 8000b12:	0e24      	lsrs	r4, r4, #24
 8000b14:	00f6      	lsls	r6, r6, #3
 8000b16:	0025      	movs	r5, r4
 8000b18:	4690      	mov	r8, r2
 8000b1a:	00fb      	lsls	r3, r7, #3
 8000b1c:	0e00      	lsrs	r0, r0, #24
 8000b1e:	0fc9      	lsrs	r1, r1, #31
 8000b20:	46b1      	mov	r9, r6
 8000b22:	28ff      	cmp	r0, #255	; 0xff
 8000b24:	d100      	bne.n	8000b28 <__aeabi_fsub+0x30>
 8000b26:	e085      	b.n	8000c34 <__aeabi_fsub+0x13c>
 8000b28:	2601      	movs	r6, #1
 8000b2a:	4071      	eors	r1, r6
 8000b2c:	1a26      	subs	r6, r4, r0
 8000b2e:	4291      	cmp	r1, r2
 8000b30:	d057      	beq.n	8000be2 <__aeabi_fsub+0xea>
 8000b32:	2e00      	cmp	r6, #0
 8000b34:	dd43      	ble.n	8000bbe <__aeabi_fsub+0xc6>
 8000b36:	2800      	cmp	r0, #0
 8000b38:	d000      	beq.n	8000b3c <__aeabi_fsub+0x44>
 8000b3a:	e07f      	b.n	8000c3c <__aeabi_fsub+0x144>
 8000b3c:	4649      	mov	r1, r9
 8000b3e:	2900      	cmp	r1, #0
 8000b40:	d100      	bne.n	8000b44 <__aeabi_fsub+0x4c>
 8000b42:	e0aa      	b.n	8000c9a <__aeabi_fsub+0x1a2>
 8000b44:	3e01      	subs	r6, #1
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	d000      	beq.n	8000b4c <__aeabi_fsub+0x54>
 8000b4a:	e0f7      	b.n	8000d3c <__aeabi_fsub+0x244>
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	015a      	lsls	r2, r3, #5
 8000b50:	d400      	bmi.n	8000b54 <__aeabi_fsub+0x5c>
 8000b52:	e08b      	b.n	8000c6c <__aeabi_fsub+0x174>
 8000b54:	019b      	lsls	r3, r3, #6
 8000b56:	099c      	lsrs	r4, r3, #6
 8000b58:	0020      	movs	r0, r4
 8000b5a:	f001 f8e9 	bl	8001d30 <__clzsi2>
 8000b5e:	3805      	subs	r0, #5
 8000b60:	4084      	lsls	r4, r0
 8000b62:	4285      	cmp	r5, r0
 8000b64:	dd00      	ble.n	8000b68 <__aeabi_fsub+0x70>
 8000b66:	e0d3      	b.n	8000d10 <__aeabi_fsub+0x218>
 8000b68:	1b45      	subs	r5, r0, r5
 8000b6a:	0023      	movs	r3, r4
 8000b6c:	2020      	movs	r0, #32
 8000b6e:	3501      	adds	r5, #1
 8000b70:	40eb      	lsrs	r3, r5
 8000b72:	1b45      	subs	r5, r0, r5
 8000b74:	40ac      	lsls	r4, r5
 8000b76:	1e62      	subs	r2, r4, #1
 8000b78:	4194      	sbcs	r4, r2
 8000b7a:	4323      	orrs	r3, r4
 8000b7c:	2407      	movs	r4, #7
 8000b7e:	2500      	movs	r5, #0
 8000b80:	401c      	ands	r4, r3
 8000b82:	2201      	movs	r2, #1
 8000b84:	4641      	mov	r1, r8
 8000b86:	400a      	ands	r2, r1
 8000b88:	2c00      	cmp	r4, #0
 8000b8a:	d004      	beq.n	8000b96 <__aeabi_fsub+0x9e>
 8000b8c:	210f      	movs	r1, #15
 8000b8e:	4019      	ands	r1, r3
 8000b90:	2904      	cmp	r1, #4
 8000b92:	d000      	beq.n	8000b96 <__aeabi_fsub+0x9e>
 8000b94:	3304      	adds	r3, #4
 8000b96:	0159      	lsls	r1, r3, #5
 8000b98:	d400      	bmi.n	8000b9c <__aeabi_fsub+0xa4>
 8000b9a:	e080      	b.n	8000c9e <__aeabi_fsub+0x1a6>
 8000b9c:	3501      	adds	r5, #1
 8000b9e:	b2ec      	uxtb	r4, r5
 8000ba0:	2dff      	cmp	r5, #255	; 0xff
 8000ba2:	d000      	beq.n	8000ba6 <__aeabi_fsub+0xae>
 8000ba4:	e0a3      	b.n	8000cee <__aeabi_fsub+0x1f6>
 8000ba6:	24ff      	movs	r4, #255	; 0xff
 8000ba8:	2300      	movs	r3, #0
 8000baa:	025b      	lsls	r3, r3, #9
 8000bac:	05e4      	lsls	r4, r4, #23
 8000bae:	0a58      	lsrs	r0, r3, #9
 8000bb0:	07d2      	lsls	r2, r2, #31
 8000bb2:	4320      	orrs	r0, r4
 8000bb4:	4310      	orrs	r0, r2
 8000bb6:	bc0c      	pop	{r2, r3}
 8000bb8:	4690      	mov	r8, r2
 8000bba:	4699      	mov	r9, r3
 8000bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d174      	bne.n	8000cac <__aeabi_fsub+0x1b4>
 8000bc2:	1c60      	adds	r0, r4, #1
 8000bc4:	b2c0      	uxtb	r0, r0
 8000bc6:	2801      	cmp	r0, #1
 8000bc8:	dc00      	bgt.n	8000bcc <__aeabi_fsub+0xd4>
 8000bca:	e0a7      	b.n	8000d1c <__aeabi_fsub+0x224>
 8000bcc:	464a      	mov	r2, r9
 8000bce:	1a9c      	subs	r4, r3, r2
 8000bd0:	0162      	lsls	r2, r4, #5
 8000bd2:	d500      	bpl.n	8000bd6 <__aeabi_fsub+0xde>
 8000bd4:	e0b6      	b.n	8000d44 <__aeabi_fsub+0x24c>
 8000bd6:	2c00      	cmp	r4, #0
 8000bd8:	d1be      	bne.n	8000b58 <__aeabi_fsub+0x60>
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2400      	movs	r4, #0
 8000bde:	2300      	movs	r3, #0
 8000be0:	e7e3      	b.n	8000baa <__aeabi_fsub+0xb2>
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	dc00      	bgt.n	8000be8 <__aeabi_fsub+0xf0>
 8000be6:	e085      	b.n	8000cf4 <__aeabi_fsub+0x1fc>
 8000be8:	2800      	cmp	r0, #0
 8000bea:	d046      	beq.n	8000c7a <__aeabi_fsub+0x182>
 8000bec:	2cff      	cmp	r4, #255	; 0xff
 8000bee:	d049      	beq.n	8000c84 <__aeabi_fsub+0x18c>
 8000bf0:	2280      	movs	r2, #128	; 0x80
 8000bf2:	4648      	mov	r0, r9
 8000bf4:	04d2      	lsls	r2, r2, #19
 8000bf6:	4310      	orrs	r0, r2
 8000bf8:	4681      	mov	r9, r0
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	2e1b      	cmp	r6, #27
 8000bfe:	dc09      	bgt.n	8000c14 <__aeabi_fsub+0x11c>
 8000c00:	2020      	movs	r0, #32
 8000c02:	464c      	mov	r4, r9
 8000c04:	1b80      	subs	r0, r0, r6
 8000c06:	4084      	lsls	r4, r0
 8000c08:	464a      	mov	r2, r9
 8000c0a:	0020      	movs	r0, r4
 8000c0c:	40f2      	lsrs	r2, r6
 8000c0e:	1e44      	subs	r4, r0, #1
 8000c10:	41a0      	sbcs	r0, r4
 8000c12:	4302      	orrs	r2, r0
 8000c14:	189b      	adds	r3, r3, r2
 8000c16:	015a      	lsls	r2, r3, #5
 8000c18:	d528      	bpl.n	8000c6c <__aeabi_fsub+0x174>
 8000c1a:	3501      	adds	r5, #1
 8000c1c:	2dff      	cmp	r5, #255	; 0xff
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_fsub+0x12a>
 8000c20:	e0a8      	b.n	8000d74 <__aeabi_fsub+0x27c>
 8000c22:	2201      	movs	r2, #1
 8000c24:	2407      	movs	r4, #7
 8000c26:	4994      	ldr	r1, [pc, #592]	; (8000e78 <__aeabi_fsub+0x380>)
 8000c28:	401a      	ands	r2, r3
 8000c2a:	085b      	lsrs	r3, r3, #1
 8000c2c:	400b      	ands	r3, r1
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	401c      	ands	r4, r3
 8000c32:	e7a6      	b.n	8000b82 <__aeabi_fsub+0x8a>
 8000c34:	2e00      	cmp	r6, #0
 8000c36:	d000      	beq.n	8000c3a <__aeabi_fsub+0x142>
 8000c38:	e778      	b.n	8000b2c <__aeabi_fsub+0x34>
 8000c3a:	e775      	b.n	8000b28 <__aeabi_fsub+0x30>
 8000c3c:	2cff      	cmp	r4, #255	; 0xff
 8000c3e:	d054      	beq.n	8000cea <__aeabi_fsub+0x1f2>
 8000c40:	2280      	movs	r2, #128	; 0x80
 8000c42:	4649      	mov	r1, r9
 8000c44:	04d2      	lsls	r2, r2, #19
 8000c46:	4311      	orrs	r1, r2
 8000c48:	4689      	mov	r9, r1
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	2e1b      	cmp	r6, #27
 8000c4e:	dc09      	bgt.n	8000c64 <__aeabi_fsub+0x16c>
 8000c50:	2120      	movs	r1, #32
 8000c52:	4648      	mov	r0, r9
 8000c54:	1b89      	subs	r1, r1, r6
 8000c56:	4088      	lsls	r0, r1
 8000c58:	464a      	mov	r2, r9
 8000c5a:	0001      	movs	r1, r0
 8000c5c:	40f2      	lsrs	r2, r6
 8000c5e:	1e48      	subs	r0, r1, #1
 8000c60:	4181      	sbcs	r1, r0
 8000c62:	430a      	orrs	r2, r1
 8000c64:	1a9b      	subs	r3, r3, r2
 8000c66:	015a      	lsls	r2, r3, #5
 8000c68:	d500      	bpl.n	8000c6c <__aeabi_fsub+0x174>
 8000c6a:	e773      	b.n	8000b54 <__aeabi_fsub+0x5c>
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	4641      	mov	r1, r8
 8000c70:	400a      	ands	r2, r1
 8000c72:	0759      	lsls	r1, r3, #29
 8000c74:	d000      	beq.n	8000c78 <__aeabi_fsub+0x180>
 8000c76:	e789      	b.n	8000b8c <__aeabi_fsub+0x94>
 8000c78:	e011      	b.n	8000c9e <__aeabi_fsub+0x1a6>
 8000c7a:	4648      	mov	r0, r9
 8000c7c:	2800      	cmp	r0, #0
 8000c7e:	d158      	bne.n	8000d32 <__aeabi_fsub+0x23a>
 8000c80:	2cff      	cmp	r4, #255	; 0xff
 8000c82:	d10c      	bne.n	8000c9e <__aeabi_fsub+0x1a6>
 8000c84:	08db      	lsrs	r3, r3, #3
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d100      	bne.n	8000c8c <__aeabi_fsub+0x194>
 8000c8a:	e78c      	b.n	8000ba6 <__aeabi_fsub+0xae>
 8000c8c:	2080      	movs	r0, #128	; 0x80
 8000c8e:	03c0      	lsls	r0, r0, #15
 8000c90:	4303      	orrs	r3, r0
 8000c92:	025b      	lsls	r3, r3, #9
 8000c94:	0a5b      	lsrs	r3, r3, #9
 8000c96:	24ff      	movs	r4, #255	; 0xff
 8000c98:	e787      	b.n	8000baa <__aeabi_fsub+0xb2>
 8000c9a:	2cff      	cmp	r4, #255	; 0xff
 8000c9c:	d025      	beq.n	8000cea <__aeabi_fsub+0x1f2>
 8000c9e:	08db      	lsrs	r3, r3, #3
 8000ca0:	2dff      	cmp	r5, #255	; 0xff
 8000ca2:	d0f0      	beq.n	8000c86 <__aeabi_fsub+0x18e>
 8000ca4:	025b      	lsls	r3, r3, #9
 8000ca6:	0a5b      	lsrs	r3, r3, #9
 8000ca8:	b2ec      	uxtb	r4, r5
 8000caa:	e77e      	b.n	8000baa <__aeabi_fsub+0xb2>
 8000cac:	2c00      	cmp	r4, #0
 8000cae:	d04d      	beq.n	8000d4c <__aeabi_fsub+0x254>
 8000cb0:	28ff      	cmp	r0, #255	; 0xff
 8000cb2:	d018      	beq.n	8000ce6 <__aeabi_fsub+0x1ee>
 8000cb4:	2480      	movs	r4, #128	; 0x80
 8000cb6:	04e4      	lsls	r4, r4, #19
 8000cb8:	4272      	negs	r2, r6
 8000cba:	4323      	orrs	r3, r4
 8000cbc:	2a1b      	cmp	r2, #27
 8000cbe:	dd00      	ble.n	8000cc2 <__aeabi_fsub+0x1ca>
 8000cc0:	e0c4      	b.n	8000e4c <__aeabi_fsub+0x354>
 8000cc2:	001c      	movs	r4, r3
 8000cc4:	2520      	movs	r5, #32
 8000cc6:	40d4      	lsrs	r4, r2
 8000cc8:	1aaa      	subs	r2, r5, r2
 8000cca:	4093      	lsls	r3, r2
 8000ccc:	1e5a      	subs	r2, r3, #1
 8000cce:	4193      	sbcs	r3, r2
 8000cd0:	4323      	orrs	r3, r4
 8000cd2:	464a      	mov	r2, r9
 8000cd4:	0005      	movs	r5, r0
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	4688      	mov	r8, r1
 8000cda:	e738      	b.n	8000b4e <__aeabi_fsub+0x56>
 8000cdc:	1c72      	adds	r2, r6, #1
 8000cde:	d0f8      	beq.n	8000cd2 <__aeabi_fsub+0x1da>
 8000ce0:	43f2      	mvns	r2, r6
 8000ce2:	28ff      	cmp	r0, #255	; 0xff
 8000ce4:	d1ea      	bne.n	8000cbc <__aeabi_fsub+0x1c4>
 8000ce6:	000a      	movs	r2, r1
 8000ce8:	464b      	mov	r3, r9
 8000cea:	25ff      	movs	r5, #255	; 0xff
 8000cec:	e7d7      	b.n	8000c9e <__aeabi_fsub+0x1a6>
 8000cee:	019b      	lsls	r3, r3, #6
 8000cf0:	0a5b      	lsrs	r3, r3, #9
 8000cf2:	e75a      	b.n	8000baa <__aeabi_fsub+0xb2>
 8000cf4:	2e00      	cmp	r6, #0
 8000cf6:	d141      	bne.n	8000d7c <__aeabi_fsub+0x284>
 8000cf8:	1c65      	adds	r5, r4, #1
 8000cfa:	b2e9      	uxtb	r1, r5
 8000cfc:	2901      	cmp	r1, #1
 8000cfe:	dd45      	ble.n	8000d8c <__aeabi_fsub+0x294>
 8000d00:	2dff      	cmp	r5, #255	; 0xff
 8000d02:	d100      	bne.n	8000d06 <__aeabi_fsub+0x20e>
 8000d04:	e74f      	b.n	8000ba6 <__aeabi_fsub+0xae>
 8000d06:	2407      	movs	r4, #7
 8000d08:	444b      	add	r3, r9
 8000d0a:	085b      	lsrs	r3, r3, #1
 8000d0c:	401c      	ands	r4, r3
 8000d0e:	e738      	b.n	8000b82 <__aeabi_fsub+0x8a>
 8000d10:	2207      	movs	r2, #7
 8000d12:	4b5a      	ldr	r3, [pc, #360]	; (8000e7c <__aeabi_fsub+0x384>)
 8000d14:	1a2d      	subs	r5, r5, r0
 8000d16:	4023      	ands	r3, r4
 8000d18:	4014      	ands	r4, r2
 8000d1a:	e732      	b.n	8000b82 <__aeabi_fsub+0x8a>
 8000d1c:	2c00      	cmp	r4, #0
 8000d1e:	d11d      	bne.n	8000d5c <__aeabi_fsub+0x264>
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d17a      	bne.n	8000e1a <__aeabi_fsub+0x322>
 8000d24:	464b      	mov	r3, r9
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d100      	bne.n	8000d2c <__aeabi_fsub+0x234>
 8000d2a:	e091      	b.n	8000e50 <__aeabi_fsub+0x358>
 8000d2c:	000a      	movs	r2, r1
 8000d2e:	2500      	movs	r5, #0
 8000d30:	e7b5      	b.n	8000c9e <__aeabi_fsub+0x1a6>
 8000d32:	3e01      	subs	r6, #1
 8000d34:	2e00      	cmp	r6, #0
 8000d36:	d119      	bne.n	8000d6c <__aeabi_fsub+0x274>
 8000d38:	444b      	add	r3, r9
 8000d3a:	e76c      	b.n	8000c16 <__aeabi_fsub+0x11e>
 8000d3c:	2cff      	cmp	r4, #255	; 0xff
 8000d3e:	d184      	bne.n	8000c4a <__aeabi_fsub+0x152>
 8000d40:	25ff      	movs	r5, #255	; 0xff
 8000d42:	e7ac      	b.n	8000c9e <__aeabi_fsub+0x1a6>
 8000d44:	464a      	mov	r2, r9
 8000d46:	4688      	mov	r8, r1
 8000d48:	1ad4      	subs	r4, r2, r3
 8000d4a:	e705      	b.n	8000b58 <__aeabi_fsub+0x60>
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d1c5      	bne.n	8000cdc <__aeabi_fsub+0x1e4>
 8000d50:	000a      	movs	r2, r1
 8000d52:	28ff      	cmp	r0, #255	; 0xff
 8000d54:	d0c8      	beq.n	8000ce8 <__aeabi_fsub+0x1f0>
 8000d56:	0005      	movs	r5, r0
 8000d58:	464b      	mov	r3, r9
 8000d5a:	e7a0      	b.n	8000c9e <__aeabi_fsub+0x1a6>
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d149      	bne.n	8000df4 <__aeabi_fsub+0x2fc>
 8000d60:	464b      	mov	r3, r9
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d077      	beq.n	8000e56 <__aeabi_fsub+0x35e>
 8000d66:	000a      	movs	r2, r1
 8000d68:	25ff      	movs	r5, #255	; 0xff
 8000d6a:	e798      	b.n	8000c9e <__aeabi_fsub+0x1a6>
 8000d6c:	2cff      	cmp	r4, #255	; 0xff
 8000d6e:	d000      	beq.n	8000d72 <__aeabi_fsub+0x27a>
 8000d70:	e743      	b.n	8000bfa <__aeabi_fsub+0x102>
 8000d72:	e787      	b.n	8000c84 <__aeabi_fsub+0x18c>
 8000d74:	000a      	movs	r2, r1
 8000d76:	24ff      	movs	r4, #255	; 0xff
 8000d78:	2300      	movs	r3, #0
 8000d7a:	e716      	b.n	8000baa <__aeabi_fsub+0xb2>
 8000d7c:	2c00      	cmp	r4, #0
 8000d7e:	d115      	bne.n	8000dac <__aeabi_fsub+0x2b4>
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d157      	bne.n	8000e34 <__aeabi_fsub+0x33c>
 8000d84:	28ff      	cmp	r0, #255	; 0xff
 8000d86:	d1e6      	bne.n	8000d56 <__aeabi_fsub+0x25e>
 8000d88:	464b      	mov	r3, r9
 8000d8a:	e77b      	b.n	8000c84 <__aeabi_fsub+0x18c>
 8000d8c:	2c00      	cmp	r4, #0
 8000d8e:	d120      	bne.n	8000dd2 <__aeabi_fsub+0x2da>
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d057      	beq.n	8000e44 <__aeabi_fsub+0x34c>
 8000d94:	4649      	mov	r1, r9
 8000d96:	2900      	cmp	r1, #0
 8000d98:	d053      	beq.n	8000e42 <__aeabi_fsub+0x34a>
 8000d9a:	444b      	add	r3, r9
 8000d9c:	015a      	lsls	r2, r3, #5
 8000d9e:	d568      	bpl.n	8000e72 <__aeabi_fsub+0x37a>
 8000da0:	2407      	movs	r4, #7
 8000da2:	4a36      	ldr	r2, [pc, #216]	; (8000e7c <__aeabi_fsub+0x384>)
 8000da4:	401c      	ands	r4, r3
 8000da6:	2501      	movs	r5, #1
 8000da8:	4013      	ands	r3, r2
 8000daa:	e6ea      	b.n	8000b82 <__aeabi_fsub+0x8a>
 8000dac:	28ff      	cmp	r0, #255	; 0xff
 8000dae:	d0eb      	beq.n	8000d88 <__aeabi_fsub+0x290>
 8000db0:	2280      	movs	r2, #128	; 0x80
 8000db2:	04d2      	lsls	r2, r2, #19
 8000db4:	4276      	negs	r6, r6
 8000db6:	4313      	orrs	r3, r2
 8000db8:	2e1b      	cmp	r6, #27
 8000dba:	dc53      	bgt.n	8000e64 <__aeabi_fsub+0x36c>
 8000dbc:	2520      	movs	r5, #32
 8000dbe:	1bad      	subs	r5, r5, r6
 8000dc0:	001a      	movs	r2, r3
 8000dc2:	40ab      	lsls	r3, r5
 8000dc4:	40f2      	lsrs	r2, r6
 8000dc6:	1e5c      	subs	r4, r3, #1
 8000dc8:	41a3      	sbcs	r3, r4
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	444b      	add	r3, r9
 8000dce:	0005      	movs	r5, r0
 8000dd0:	e721      	b.n	8000c16 <__aeabi_fsub+0x11e>
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d0d8      	beq.n	8000d88 <__aeabi_fsub+0x290>
 8000dd6:	4649      	mov	r1, r9
 8000dd8:	2900      	cmp	r1, #0
 8000dda:	d100      	bne.n	8000dde <__aeabi_fsub+0x2e6>
 8000ddc:	e752      	b.n	8000c84 <__aeabi_fsub+0x18c>
 8000dde:	2180      	movs	r1, #128	; 0x80
 8000de0:	03c9      	lsls	r1, r1, #15
 8000de2:	420f      	tst	r7, r1
 8000de4:	d100      	bne.n	8000de8 <__aeabi_fsub+0x2f0>
 8000de6:	e74d      	b.n	8000c84 <__aeabi_fsub+0x18c>
 8000de8:	4660      	mov	r0, ip
 8000dea:	4208      	tst	r0, r1
 8000dec:	d000      	beq.n	8000df0 <__aeabi_fsub+0x2f8>
 8000dee:	e749      	b.n	8000c84 <__aeabi_fsub+0x18c>
 8000df0:	464b      	mov	r3, r9
 8000df2:	e747      	b.n	8000c84 <__aeabi_fsub+0x18c>
 8000df4:	4648      	mov	r0, r9
 8000df6:	25ff      	movs	r5, #255	; 0xff
 8000df8:	2800      	cmp	r0, #0
 8000dfa:	d100      	bne.n	8000dfe <__aeabi_fsub+0x306>
 8000dfc:	e74f      	b.n	8000c9e <__aeabi_fsub+0x1a6>
 8000dfe:	2280      	movs	r2, #128	; 0x80
 8000e00:	03d2      	lsls	r2, r2, #15
 8000e02:	4217      	tst	r7, r2
 8000e04:	d004      	beq.n	8000e10 <__aeabi_fsub+0x318>
 8000e06:	4660      	mov	r0, ip
 8000e08:	4210      	tst	r0, r2
 8000e0a:	d101      	bne.n	8000e10 <__aeabi_fsub+0x318>
 8000e0c:	464b      	mov	r3, r9
 8000e0e:	4688      	mov	r8, r1
 8000e10:	2201      	movs	r2, #1
 8000e12:	4641      	mov	r1, r8
 8000e14:	25ff      	movs	r5, #255	; 0xff
 8000e16:	400a      	ands	r2, r1
 8000e18:	e741      	b.n	8000c9e <__aeabi_fsub+0x1a6>
 8000e1a:	4648      	mov	r0, r9
 8000e1c:	2800      	cmp	r0, #0
 8000e1e:	d01f      	beq.n	8000e60 <__aeabi_fsub+0x368>
 8000e20:	1a1a      	subs	r2, r3, r0
 8000e22:	0150      	lsls	r0, r2, #5
 8000e24:	d520      	bpl.n	8000e68 <__aeabi_fsub+0x370>
 8000e26:	464a      	mov	r2, r9
 8000e28:	2407      	movs	r4, #7
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	401c      	ands	r4, r3
 8000e2e:	4688      	mov	r8, r1
 8000e30:	2500      	movs	r5, #0
 8000e32:	e6a6      	b.n	8000b82 <__aeabi_fsub+0x8a>
 8000e34:	1c74      	adds	r4, r6, #1
 8000e36:	d0c9      	beq.n	8000dcc <__aeabi_fsub+0x2d4>
 8000e38:	43f6      	mvns	r6, r6
 8000e3a:	28ff      	cmp	r0, #255	; 0xff
 8000e3c:	d1bc      	bne.n	8000db8 <__aeabi_fsub+0x2c0>
 8000e3e:	464b      	mov	r3, r9
 8000e40:	e720      	b.n	8000c84 <__aeabi_fsub+0x18c>
 8000e42:	4699      	mov	r9, r3
 8000e44:	464b      	mov	r3, r9
 8000e46:	2500      	movs	r5, #0
 8000e48:	08db      	lsrs	r3, r3, #3
 8000e4a:	e72b      	b.n	8000ca4 <__aeabi_fsub+0x1ac>
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e740      	b.n	8000cd2 <__aeabi_fsub+0x1da>
 8000e50:	2200      	movs	r2, #0
 8000e52:	2300      	movs	r3, #0
 8000e54:	e6a9      	b.n	8000baa <__aeabi_fsub+0xb2>
 8000e56:	2380      	movs	r3, #128	; 0x80
 8000e58:	2200      	movs	r2, #0
 8000e5a:	03db      	lsls	r3, r3, #15
 8000e5c:	24ff      	movs	r4, #255	; 0xff
 8000e5e:	e6a4      	b.n	8000baa <__aeabi_fsub+0xb2>
 8000e60:	2500      	movs	r5, #0
 8000e62:	e71c      	b.n	8000c9e <__aeabi_fsub+0x1a6>
 8000e64:	2301      	movs	r3, #1
 8000e66:	e7b1      	b.n	8000dcc <__aeabi_fsub+0x2d4>
 8000e68:	2a00      	cmp	r2, #0
 8000e6a:	d0f1      	beq.n	8000e50 <__aeabi_fsub+0x358>
 8000e6c:	0013      	movs	r3, r2
 8000e6e:	2500      	movs	r5, #0
 8000e70:	e6fc      	b.n	8000c6c <__aeabi_fsub+0x174>
 8000e72:	2500      	movs	r5, #0
 8000e74:	e6fa      	b.n	8000c6c <__aeabi_fsub+0x174>
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	7dffffff 	.word	0x7dffffff
 8000e7c:	fbffffff 	.word	0xfbffffff

08000e80 <__aeabi_f2iz>:
 8000e80:	0241      	lsls	r1, r0, #9
 8000e82:	0042      	lsls	r2, r0, #1
 8000e84:	0fc3      	lsrs	r3, r0, #31
 8000e86:	0a49      	lsrs	r1, r1, #9
 8000e88:	0e12      	lsrs	r2, r2, #24
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	2a7e      	cmp	r2, #126	; 0x7e
 8000e8e:	d90d      	bls.n	8000eac <__aeabi_f2iz+0x2c>
 8000e90:	2a9d      	cmp	r2, #157	; 0x9d
 8000e92:	d80c      	bhi.n	8000eae <__aeabi_f2iz+0x2e>
 8000e94:	2080      	movs	r0, #128	; 0x80
 8000e96:	0400      	lsls	r0, r0, #16
 8000e98:	4301      	orrs	r1, r0
 8000e9a:	2a95      	cmp	r2, #149	; 0x95
 8000e9c:	dc0a      	bgt.n	8000eb4 <__aeabi_f2iz+0x34>
 8000e9e:	2096      	movs	r0, #150	; 0x96
 8000ea0:	1a82      	subs	r2, r0, r2
 8000ea2:	40d1      	lsrs	r1, r2
 8000ea4:	4248      	negs	r0, r1
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d100      	bne.n	8000eac <__aeabi_f2iz+0x2c>
 8000eaa:	0008      	movs	r0, r1
 8000eac:	4770      	bx	lr
 8000eae:	4a03      	ldr	r2, [pc, #12]	; (8000ebc <__aeabi_f2iz+0x3c>)
 8000eb0:	1898      	adds	r0, r3, r2
 8000eb2:	e7fb      	b.n	8000eac <__aeabi_f2iz+0x2c>
 8000eb4:	3a96      	subs	r2, #150	; 0x96
 8000eb6:	4091      	lsls	r1, r2
 8000eb8:	e7f4      	b.n	8000ea4 <__aeabi_f2iz+0x24>
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	7fffffff 	.word	0x7fffffff

08000ec0 <__aeabi_ui2f>:
 8000ec0:	b570      	push	{r4, r5, r6, lr}
 8000ec2:	1e04      	subs	r4, r0, #0
 8000ec4:	d034      	beq.n	8000f30 <__aeabi_ui2f+0x70>
 8000ec6:	f000 ff33 	bl	8001d30 <__clzsi2>
 8000eca:	229e      	movs	r2, #158	; 0x9e
 8000ecc:	1a12      	subs	r2, r2, r0
 8000ece:	2a96      	cmp	r2, #150	; 0x96
 8000ed0:	dc07      	bgt.n	8000ee2 <__aeabi_ui2f+0x22>
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	2808      	cmp	r0, #8
 8000ed6:	dd2e      	ble.n	8000f36 <__aeabi_ui2f+0x76>
 8000ed8:	3808      	subs	r0, #8
 8000eda:	4084      	lsls	r4, r0
 8000edc:	0260      	lsls	r0, r4, #9
 8000ede:	0a40      	lsrs	r0, r0, #9
 8000ee0:	e021      	b.n	8000f26 <__aeabi_ui2f+0x66>
 8000ee2:	2a99      	cmp	r2, #153	; 0x99
 8000ee4:	dd09      	ble.n	8000efa <__aeabi_ui2f+0x3a>
 8000ee6:	0003      	movs	r3, r0
 8000ee8:	0021      	movs	r1, r4
 8000eea:	331b      	adds	r3, #27
 8000eec:	4099      	lsls	r1, r3
 8000eee:	1e4b      	subs	r3, r1, #1
 8000ef0:	4199      	sbcs	r1, r3
 8000ef2:	2305      	movs	r3, #5
 8000ef4:	1a1b      	subs	r3, r3, r0
 8000ef6:	40dc      	lsrs	r4, r3
 8000ef8:	430c      	orrs	r4, r1
 8000efa:	2805      	cmp	r0, #5
 8000efc:	dd01      	ble.n	8000f02 <__aeabi_ui2f+0x42>
 8000efe:	1f43      	subs	r3, r0, #5
 8000f00:	409c      	lsls	r4, r3
 8000f02:	0023      	movs	r3, r4
 8000f04:	490d      	ldr	r1, [pc, #52]	; (8000f3c <__aeabi_ui2f+0x7c>)
 8000f06:	400b      	ands	r3, r1
 8000f08:	0765      	lsls	r5, r4, #29
 8000f0a:	d009      	beq.n	8000f20 <__aeabi_ui2f+0x60>
 8000f0c:	250f      	movs	r5, #15
 8000f0e:	402c      	ands	r4, r5
 8000f10:	2c04      	cmp	r4, #4
 8000f12:	d005      	beq.n	8000f20 <__aeabi_ui2f+0x60>
 8000f14:	3304      	adds	r3, #4
 8000f16:	015c      	lsls	r4, r3, #5
 8000f18:	d502      	bpl.n	8000f20 <__aeabi_ui2f+0x60>
 8000f1a:	229f      	movs	r2, #159	; 0x9f
 8000f1c:	400b      	ands	r3, r1
 8000f1e:	1a12      	subs	r2, r2, r0
 8000f20:	019b      	lsls	r3, r3, #6
 8000f22:	0a58      	lsrs	r0, r3, #9
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	0240      	lsls	r0, r0, #9
 8000f28:	05d2      	lsls	r2, r2, #23
 8000f2a:	0a40      	lsrs	r0, r0, #9
 8000f2c:	4310      	orrs	r0, r2
 8000f2e:	bd70      	pop	{r4, r5, r6, pc}
 8000f30:	2200      	movs	r2, #0
 8000f32:	2000      	movs	r0, #0
 8000f34:	e7f7      	b.n	8000f26 <__aeabi_ui2f+0x66>
 8000f36:	0260      	lsls	r0, r4, #9
 8000f38:	0a40      	lsrs	r0, r0, #9
 8000f3a:	e7f4      	b.n	8000f26 <__aeabi_ui2f+0x66>
 8000f3c:	fbffffff 	.word	0xfbffffff

08000f40 <__aeabi_ddiv>:
 8000f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f42:	4657      	mov	r7, sl
 8000f44:	46de      	mov	lr, fp
 8000f46:	464e      	mov	r6, r9
 8000f48:	4645      	mov	r5, r8
 8000f4a:	b5e0      	push	{r5, r6, r7, lr}
 8000f4c:	4683      	mov	fp, r0
 8000f4e:	0007      	movs	r7, r0
 8000f50:	030e      	lsls	r6, r1, #12
 8000f52:	0048      	lsls	r0, r1, #1
 8000f54:	b085      	sub	sp, #20
 8000f56:	4692      	mov	sl, r2
 8000f58:	001c      	movs	r4, r3
 8000f5a:	0b36      	lsrs	r6, r6, #12
 8000f5c:	0d40      	lsrs	r0, r0, #21
 8000f5e:	0fcd      	lsrs	r5, r1, #31
 8000f60:	2800      	cmp	r0, #0
 8000f62:	d100      	bne.n	8000f66 <__aeabi_ddiv+0x26>
 8000f64:	e09d      	b.n	80010a2 <__aeabi_ddiv+0x162>
 8000f66:	4b95      	ldr	r3, [pc, #596]	; (80011bc <__aeabi_ddiv+0x27c>)
 8000f68:	4298      	cmp	r0, r3
 8000f6a:	d039      	beq.n	8000fe0 <__aeabi_ddiv+0xa0>
 8000f6c:	2380      	movs	r3, #128	; 0x80
 8000f6e:	00f6      	lsls	r6, r6, #3
 8000f70:	041b      	lsls	r3, r3, #16
 8000f72:	431e      	orrs	r6, r3
 8000f74:	4a92      	ldr	r2, [pc, #584]	; (80011c0 <__aeabi_ddiv+0x280>)
 8000f76:	0f7b      	lsrs	r3, r7, #29
 8000f78:	4333      	orrs	r3, r6
 8000f7a:	4699      	mov	r9, r3
 8000f7c:	4694      	mov	ip, r2
 8000f7e:	0003      	movs	r3, r0
 8000f80:	4463      	add	r3, ip
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	2300      	movs	r3, #0
 8000f86:	2600      	movs	r6, #0
 8000f88:	00ff      	lsls	r7, r7, #3
 8000f8a:	9302      	str	r3, [sp, #8]
 8000f8c:	0323      	lsls	r3, r4, #12
 8000f8e:	0b1b      	lsrs	r3, r3, #12
 8000f90:	4698      	mov	r8, r3
 8000f92:	0063      	lsls	r3, r4, #1
 8000f94:	0fe4      	lsrs	r4, r4, #31
 8000f96:	4652      	mov	r2, sl
 8000f98:	0d5b      	lsrs	r3, r3, #21
 8000f9a:	9401      	str	r4, [sp, #4]
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_ddiv+0x60>
 8000f9e:	e0b3      	b.n	8001108 <__aeabi_ddiv+0x1c8>
 8000fa0:	4986      	ldr	r1, [pc, #536]	; (80011bc <__aeabi_ddiv+0x27c>)
 8000fa2:	428b      	cmp	r3, r1
 8000fa4:	d100      	bne.n	8000fa8 <__aeabi_ddiv+0x68>
 8000fa6:	e09e      	b.n	80010e6 <__aeabi_ddiv+0x1a6>
 8000fa8:	4642      	mov	r2, r8
 8000faa:	00d1      	lsls	r1, r2, #3
 8000fac:	2280      	movs	r2, #128	; 0x80
 8000fae:	0412      	lsls	r2, r2, #16
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	4651      	mov	r1, sl
 8000fb4:	0f49      	lsrs	r1, r1, #29
 8000fb6:	4311      	orrs	r1, r2
 8000fb8:	468b      	mov	fp, r1
 8000fba:	4981      	ldr	r1, [pc, #516]	; (80011c0 <__aeabi_ddiv+0x280>)
 8000fbc:	4652      	mov	r2, sl
 8000fbe:	468c      	mov	ip, r1
 8000fc0:	9900      	ldr	r1, [sp, #0]
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1acb      	subs	r3, r1, r3
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	00d2      	lsls	r2, r2, #3
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	002b      	movs	r3, r5
 8000fce:	4063      	eors	r3, r4
 8000fd0:	469a      	mov	sl, r3
 8000fd2:	2e0f      	cmp	r6, #15
 8000fd4:	d900      	bls.n	8000fd8 <__aeabi_ddiv+0x98>
 8000fd6:	e105      	b.n	80011e4 <__aeabi_ddiv+0x2a4>
 8000fd8:	4b7a      	ldr	r3, [pc, #488]	; (80011c4 <__aeabi_ddiv+0x284>)
 8000fda:	00b6      	lsls	r6, r6, #2
 8000fdc:	599b      	ldr	r3, [r3, r6]
 8000fde:	469f      	mov	pc, r3
 8000fe0:	465b      	mov	r3, fp
 8000fe2:	4333      	orrs	r3, r6
 8000fe4:	4699      	mov	r9, r3
 8000fe6:	d000      	beq.n	8000fea <__aeabi_ddiv+0xaa>
 8000fe8:	e0b8      	b.n	800115c <__aeabi_ddiv+0x21c>
 8000fea:	2302      	movs	r3, #2
 8000fec:	2608      	movs	r6, #8
 8000fee:	2700      	movs	r7, #0
 8000ff0:	9000      	str	r0, [sp, #0]
 8000ff2:	9302      	str	r3, [sp, #8]
 8000ff4:	e7ca      	b.n	8000f8c <__aeabi_ddiv+0x4c>
 8000ff6:	46cb      	mov	fp, r9
 8000ff8:	003a      	movs	r2, r7
 8000ffa:	9902      	ldr	r1, [sp, #8]
 8000ffc:	9501      	str	r5, [sp, #4]
 8000ffe:	9b01      	ldr	r3, [sp, #4]
 8001000:	469a      	mov	sl, r3
 8001002:	2902      	cmp	r1, #2
 8001004:	d027      	beq.n	8001056 <__aeabi_ddiv+0x116>
 8001006:	2903      	cmp	r1, #3
 8001008:	d100      	bne.n	800100c <__aeabi_ddiv+0xcc>
 800100a:	e280      	b.n	800150e <__aeabi_ddiv+0x5ce>
 800100c:	2901      	cmp	r1, #1
 800100e:	d044      	beq.n	800109a <__aeabi_ddiv+0x15a>
 8001010:	496d      	ldr	r1, [pc, #436]	; (80011c8 <__aeabi_ddiv+0x288>)
 8001012:	9b00      	ldr	r3, [sp, #0]
 8001014:	468c      	mov	ip, r1
 8001016:	4463      	add	r3, ip
 8001018:	001c      	movs	r4, r3
 800101a:	2c00      	cmp	r4, #0
 800101c:	dd38      	ble.n	8001090 <__aeabi_ddiv+0x150>
 800101e:	0753      	lsls	r3, r2, #29
 8001020:	d000      	beq.n	8001024 <__aeabi_ddiv+0xe4>
 8001022:	e213      	b.n	800144c <__aeabi_ddiv+0x50c>
 8001024:	08d2      	lsrs	r2, r2, #3
 8001026:	465b      	mov	r3, fp
 8001028:	01db      	lsls	r3, r3, #7
 800102a:	d509      	bpl.n	8001040 <__aeabi_ddiv+0x100>
 800102c:	4659      	mov	r1, fp
 800102e:	4b67      	ldr	r3, [pc, #412]	; (80011cc <__aeabi_ddiv+0x28c>)
 8001030:	4019      	ands	r1, r3
 8001032:	468b      	mov	fp, r1
 8001034:	2180      	movs	r1, #128	; 0x80
 8001036:	00c9      	lsls	r1, r1, #3
 8001038:	468c      	mov	ip, r1
 800103a:	9b00      	ldr	r3, [sp, #0]
 800103c:	4463      	add	r3, ip
 800103e:	001c      	movs	r4, r3
 8001040:	4b63      	ldr	r3, [pc, #396]	; (80011d0 <__aeabi_ddiv+0x290>)
 8001042:	429c      	cmp	r4, r3
 8001044:	dc07      	bgt.n	8001056 <__aeabi_ddiv+0x116>
 8001046:	465b      	mov	r3, fp
 8001048:	0564      	lsls	r4, r4, #21
 800104a:	075f      	lsls	r7, r3, #29
 800104c:	025b      	lsls	r3, r3, #9
 800104e:	4317      	orrs	r7, r2
 8001050:	0b1b      	lsrs	r3, r3, #12
 8001052:	0d62      	lsrs	r2, r4, #21
 8001054:	e002      	b.n	800105c <__aeabi_ddiv+0x11c>
 8001056:	2300      	movs	r3, #0
 8001058:	2700      	movs	r7, #0
 800105a:	4a58      	ldr	r2, [pc, #352]	; (80011bc <__aeabi_ddiv+0x27c>)
 800105c:	2100      	movs	r1, #0
 800105e:	031b      	lsls	r3, r3, #12
 8001060:	0b1c      	lsrs	r4, r3, #12
 8001062:	0d0b      	lsrs	r3, r1, #20
 8001064:	051b      	lsls	r3, r3, #20
 8001066:	4323      	orrs	r3, r4
 8001068:	0514      	lsls	r4, r2, #20
 800106a:	4a5a      	ldr	r2, [pc, #360]	; (80011d4 <__aeabi_ddiv+0x294>)
 800106c:	0038      	movs	r0, r7
 800106e:	4013      	ands	r3, r2
 8001070:	431c      	orrs	r4, r3
 8001072:	4653      	mov	r3, sl
 8001074:	0064      	lsls	r4, r4, #1
 8001076:	07db      	lsls	r3, r3, #31
 8001078:	0864      	lsrs	r4, r4, #1
 800107a:	431c      	orrs	r4, r3
 800107c:	0021      	movs	r1, r4
 800107e:	b005      	add	sp, #20
 8001080:	bc3c      	pop	{r2, r3, r4, r5}
 8001082:	4690      	mov	r8, r2
 8001084:	4699      	mov	r9, r3
 8001086:	46a2      	mov	sl, r4
 8001088:	46ab      	mov	fp, r5
 800108a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800108c:	2201      	movs	r2, #1
 800108e:	4252      	negs	r2, r2
 8001090:	2301      	movs	r3, #1
 8001092:	1b1b      	subs	r3, r3, r4
 8001094:	2b38      	cmp	r3, #56	; 0x38
 8001096:	dc00      	bgt.n	800109a <__aeabi_ddiv+0x15a>
 8001098:	e1ad      	b.n	80013f6 <__aeabi_ddiv+0x4b6>
 800109a:	2200      	movs	r2, #0
 800109c:	2300      	movs	r3, #0
 800109e:	2700      	movs	r7, #0
 80010a0:	e7dc      	b.n	800105c <__aeabi_ddiv+0x11c>
 80010a2:	465b      	mov	r3, fp
 80010a4:	4333      	orrs	r3, r6
 80010a6:	4699      	mov	r9, r3
 80010a8:	d05e      	beq.n	8001168 <__aeabi_ddiv+0x228>
 80010aa:	2e00      	cmp	r6, #0
 80010ac:	d100      	bne.n	80010b0 <__aeabi_ddiv+0x170>
 80010ae:	e18a      	b.n	80013c6 <__aeabi_ddiv+0x486>
 80010b0:	0030      	movs	r0, r6
 80010b2:	f000 fe3d 	bl	8001d30 <__clzsi2>
 80010b6:	0003      	movs	r3, r0
 80010b8:	3b0b      	subs	r3, #11
 80010ba:	2b1c      	cmp	r3, #28
 80010bc:	dd00      	ble.n	80010c0 <__aeabi_ddiv+0x180>
 80010be:	e17b      	b.n	80013b8 <__aeabi_ddiv+0x478>
 80010c0:	221d      	movs	r2, #29
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	465a      	mov	r2, fp
 80010c6:	0001      	movs	r1, r0
 80010c8:	40da      	lsrs	r2, r3
 80010ca:	3908      	subs	r1, #8
 80010cc:	408e      	lsls	r6, r1
 80010ce:	0013      	movs	r3, r2
 80010d0:	465f      	mov	r7, fp
 80010d2:	4333      	orrs	r3, r6
 80010d4:	4699      	mov	r9, r3
 80010d6:	408f      	lsls	r7, r1
 80010d8:	4b3f      	ldr	r3, [pc, #252]	; (80011d8 <__aeabi_ddiv+0x298>)
 80010da:	2600      	movs	r6, #0
 80010dc:	1a1b      	subs	r3, r3, r0
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2300      	movs	r3, #0
 80010e2:	9302      	str	r3, [sp, #8]
 80010e4:	e752      	b.n	8000f8c <__aeabi_ddiv+0x4c>
 80010e6:	4641      	mov	r1, r8
 80010e8:	4653      	mov	r3, sl
 80010ea:	430b      	orrs	r3, r1
 80010ec:	493b      	ldr	r1, [pc, #236]	; (80011dc <__aeabi_ddiv+0x29c>)
 80010ee:	469b      	mov	fp, r3
 80010f0:	468c      	mov	ip, r1
 80010f2:	9b00      	ldr	r3, [sp, #0]
 80010f4:	4463      	add	r3, ip
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	465b      	mov	r3, fp
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d13b      	bne.n	8001176 <__aeabi_ddiv+0x236>
 80010fe:	2302      	movs	r3, #2
 8001100:	2200      	movs	r2, #0
 8001102:	431e      	orrs	r6, r3
 8001104:	2102      	movs	r1, #2
 8001106:	e761      	b.n	8000fcc <__aeabi_ddiv+0x8c>
 8001108:	4643      	mov	r3, r8
 800110a:	4313      	orrs	r3, r2
 800110c:	469b      	mov	fp, r3
 800110e:	d037      	beq.n	8001180 <__aeabi_ddiv+0x240>
 8001110:	4643      	mov	r3, r8
 8001112:	2b00      	cmp	r3, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x1d8>
 8001116:	e162      	b.n	80013de <__aeabi_ddiv+0x49e>
 8001118:	4640      	mov	r0, r8
 800111a:	f000 fe09 	bl	8001d30 <__clzsi2>
 800111e:	0003      	movs	r3, r0
 8001120:	3b0b      	subs	r3, #11
 8001122:	2b1c      	cmp	r3, #28
 8001124:	dd00      	ble.n	8001128 <__aeabi_ddiv+0x1e8>
 8001126:	e153      	b.n	80013d0 <__aeabi_ddiv+0x490>
 8001128:	0002      	movs	r2, r0
 800112a:	4641      	mov	r1, r8
 800112c:	3a08      	subs	r2, #8
 800112e:	4091      	lsls	r1, r2
 8001130:	4688      	mov	r8, r1
 8001132:	211d      	movs	r1, #29
 8001134:	1acb      	subs	r3, r1, r3
 8001136:	4651      	mov	r1, sl
 8001138:	40d9      	lsrs	r1, r3
 800113a:	000b      	movs	r3, r1
 800113c:	4641      	mov	r1, r8
 800113e:	430b      	orrs	r3, r1
 8001140:	469b      	mov	fp, r3
 8001142:	4653      	mov	r3, sl
 8001144:	4093      	lsls	r3, r2
 8001146:	001a      	movs	r2, r3
 8001148:	9b00      	ldr	r3, [sp, #0]
 800114a:	4925      	ldr	r1, [pc, #148]	; (80011e0 <__aeabi_ddiv+0x2a0>)
 800114c:	469c      	mov	ip, r3
 800114e:	4460      	add	r0, ip
 8001150:	0003      	movs	r3, r0
 8001152:	468c      	mov	ip, r1
 8001154:	4463      	add	r3, ip
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2100      	movs	r1, #0
 800115a:	e737      	b.n	8000fcc <__aeabi_ddiv+0x8c>
 800115c:	2303      	movs	r3, #3
 800115e:	46b1      	mov	r9, r6
 8001160:	9000      	str	r0, [sp, #0]
 8001162:	260c      	movs	r6, #12
 8001164:	9302      	str	r3, [sp, #8]
 8001166:	e711      	b.n	8000f8c <__aeabi_ddiv+0x4c>
 8001168:	2300      	movs	r3, #0
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	3301      	adds	r3, #1
 800116e:	2604      	movs	r6, #4
 8001170:	2700      	movs	r7, #0
 8001172:	9302      	str	r3, [sp, #8]
 8001174:	e70a      	b.n	8000f8c <__aeabi_ddiv+0x4c>
 8001176:	2303      	movs	r3, #3
 8001178:	46c3      	mov	fp, r8
 800117a:	431e      	orrs	r6, r3
 800117c:	2103      	movs	r1, #3
 800117e:	e725      	b.n	8000fcc <__aeabi_ddiv+0x8c>
 8001180:	3301      	adds	r3, #1
 8001182:	431e      	orrs	r6, r3
 8001184:	2200      	movs	r2, #0
 8001186:	2101      	movs	r1, #1
 8001188:	e720      	b.n	8000fcc <__aeabi_ddiv+0x8c>
 800118a:	2300      	movs	r3, #0
 800118c:	469a      	mov	sl, r3
 800118e:	2380      	movs	r3, #128	; 0x80
 8001190:	2700      	movs	r7, #0
 8001192:	031b      	lsls	r3, r3, #12
 8001194:	4a09      	ldr	r2, [pc, #36]	; (80011bc <__aeabi_ddiv+0x27c>)
 8001196:	e761      	b.n	800105c <__aeabi_ddiv+0x11c>
 8001198:	2380      	movs	r3, #128	; 0x80
 800119a:	4649      	mov	r1, r9
 800119c:	031b      	lsls	r3, r3, #12
 800119e:	4219      	tst	r1, r3
 80011a0:	d100      	bne.n	80011a4 <__aeabi_ddiv+0x264>
 80011a2:	e0e2      	b.n	800136a <__aeabi_ddiv+0x42a>
 80011a4:	4659      	mov	r1, fp
 80011a6:	4219      	tst	r1, r3
 80011a8:	d000      	beq.n	80011ac <__aeabi_ddiv+0x26c>
 80011aa:	e0de      	b.n	800136a <__aeabi_ddiv+0x42a>
 80011ac:	430b      	orrs	r3, r1
 80011ae:	031b      	lsls	r3, r3, #12
 80011b0:	0017      	movs	r7, r2
 80011b2:	0b1b      	lsrs	r3, r3, #12
 80011b4:	46a2      	mov	sl, r4
 80011b6:	4a01      	ldr	r2, [pc, #4]	; (80011bc <__aeabi_ddiv+0x27c>)
 80011b8:	e750      	b.n	800105c <__aeabi_ddiv+0x11c>
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	000007ff 	.word	0x000007ff
 80011c0:	fffffc01 	.word	0xfffffc01
 80011c4:	0800a114 	.word	0x0800a114
 80011c8:	000003ff 	.word	0x000003ff
 80011cc:	feffffff 	.word	0xfeffffff
 80011d0:	000007fe 	.word	0x000007fe
 80011d4:	800fffff 	.word	0x800fffff
 80011d8:	fffffc0d 	.word	0xfffffc0d
 80011dc:	fffff801 	.word	0xfffff801
 80011e0:	000003f3 	.word	0x000003f3
 80011e4:	45d9      	cmp	r9, fp
 80011e6:	d900      	bls.n	80011ea <__aeabi_ddiv+0x2aa>
 80011e8:	e0cb      	b.n	8001382 <__aeabi_ddiv+0x442>
 80011ea:	d100      	bne.n	80011ee <__aeabi_ddiv+0x2ae>
 80011ec:	e0c6      	b.n	800137c <__aeabi_ddiv+0x43c>
 80011ee:	003c      	movs	r4, r7
 80011f0:	4648      	mov	r0, r9
 80011f2:	2700      	movs	r7, #0
 80011f4:	9b00      	ldr	r3, [sp, #0]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	465b      	mov	r3, fp
 80011fc:	0e16      	lsrs	r6, r2, #24
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	431e      	orrs	r6, r3
 8001202:	0213      	lsls	r3, r2, #8
 8001204:	4698      	mov	r8, r3
 8001206:	0433      	lsls	r3, r6, #16
 8001208:	0c1b      	lsrs	r3, r3, #16
 800120a:	4699      	mov	r9, r3
 800120c:	0c31      	lsrs	r1, r6, #16
 800120e:	9101      	str	r1, [sp, #4]
 8001210:	f7ff f808 	bl	8000224 <__aeabi_uidivmod>
 8001214:	464a      	mov	r2, r9
 8001216:	4342      	muls	r2, r0
 8001218:	040b      	lsls	r3, r1, #16
 800121a:	0c21      	lsrs	r1, r4, #16
 800121c:	0005      	movs	r5, r0
 800121e:	4319      	orrs	r1, r3
 8001220:	428a      	cmp	r2, r1
 8001222:	d907      	bls.n	8001234 <__aeabi_ddiv+0x2f4>
 8001224:	1989      	adds	r1, r1, r6
 8001226:	3d01      	subs	r5, #1
 8001228:	428e      	cmp	r6, r1
 800122a:	d803      	bhi.n	8001234 <__aeabi_ddiv+0x2f4>
 800122c:	428a      	cmp	r2, r1
 800122e:	d901      	bls.n	8001234 <__aeabi_ddiv+0x2f4>
 8001230:	1e85      	subs	r5, r0, #2
 8001232:	1989      	adds	r1, r1, r6
 8001234:	1a88      	subs	r0, r1, r2
 8001236:	9901      	ldr	r1, [sp, #4]
 8001238:	f7fe fff4 	bl	8000224 <__aeabi_uidivmod>
 800123c:	0409      	lsls	r1, r1, #16
 800123e:	468c      	mov	ip, r1
 8001240:	464a      	mov	r2, r9
 8001242:	0421      	lsls	r1, r4, #16
 8001244:	4664      	mov	r4, ip
 8001246:	4342      	muls	r2, r0
 8001248:	0c09      	lsrs	r1, r1, #16
 800124a:	0003      	movs	r3, r0
 800124c:	4321      	orrs	r1, r4
 800124e:	428a      	cmp	r2, r1
 8001250:	d904      	bls.n	800125c <__aeabi_ddiv+0x31c>
 8001252:	1989      	adds	r1, r1, r6
 8001254:	3b01      	subs	r3, #1
 8001256:	428e      	cmp	r6, r1
 8001258:	d800      	bhi.n	800125c <__aeabi_ddiv+0x31c>
 800125a:	e0f1      	b.n	8001440 <__aeabi_ddiv+0x500>
 800125c:	042d      	lsls	r5, r5, #16
 800125e:	431d      	orrs	r5, r3
 8001260:	46ab      	mov	fp, r5
 8001262:	4643      	mov	r3, r8
 8001264:	1a89      	subs	r1, r1, r2
 8001266:	4642      	mov	r2, r8
 8001268:	0c28      	lsrs	r0, r5, #16
 800126a:	0412      	lsls	r2, r2, #16
 800126c:	0c1d      	lsrs	r5, r3, #16
 800126e:	465b      	mov	r3, fp
 8001270:	0c14      	lsrs	r4, r2, #16
 8001272:	0022      	movs	r2, r4
 8001274:	041b      	lsls	r3, r3, #16
 8001276:	0c1b      	lsrs	r3, r3, #16
 8001278:	435a      	muls	r2, r3
 800127a:	9403      	str	r4, [sp, #12]
 800127c:	436b      	muls	r3, r5
 800127e:	4344      	muls	r4, r0
 8001280:	9502      	str	r5, [sp, #8]
 8001282:	4368      	muls	r0, r5
 8001284:	191b      	adds	r3, r3, r4
 8001286:	0c15      	lsrs	r5, r2, #16
 8001288:	18eb      	adds	r3, r5, r3
 800128a:	429c      	cmp	r4, r3
 800128c:	d903      	bls.n	8001296 <__aeabi_ddiv+0x356>
 800128e:	2480      	movs	r4, #128	; 0x80
 8001290:	0264      	lsls	r4, r4, #9
 8001292:	46a4      	mov	ip, r4
 8001294:	4460      	add	r0, ip
 8001296:	0c1c      	lsrs	r4, r3, #16
 8001298:	0415      	lsls	r5, r2, #16
 800129a:	041b      	lsls	r3, r3, #16
 800129c:	0c2d      	lsrs	r5, r5, #16
 800129e:	1820      	adds	r0, r4, r0
 80012a0:	195d      	adds	r5, r3, r5
 80012a2:	4281      	cmp	r1, r0
 80012a4:	d377      	bcc.n	8001396 <__aeabi_ddiv+0x456>
 80012a6:	d073      	beq.n	8001390 <__aeabi_ddiv+0x450>
 80012a8:	1a0c      	subs	r4, r1, r0
 80012aa:	4aa2      	ldr	r2, [pc, #648]	; (8001534 <__aeabi_ddiv+0x5f4>)
 80012ac:	1b7d      	subs	r5, r7, r5
 80012ae:	42af      	cmp	r7, r5
 80012b0:	41bf      	sbcs	r7, r7
 80012b2:	4694      	mov	ip, r2
 80012b4:	9b00      	ldr	r3, [sp, #0]
 80012b6:	427f      	negs	r7, r7
 80012b8:	4463      	add	r3, ip
 80012ba:	1be0      	subs	r0, r4, r7
 80012bc:	001c      	movs	r4, r3
 80012be:	4286      	cmp	r6, r0
 80012c0:	d100      	bne.n	80012c4 <__aeabi_ddiv+0x384>
 80012c2:	e0db      	b.n	800147c <__aeabi_ddiv+0x53c>
 80012c4:	9901      	ldr	r1, [sp, #4]
 80012c6:	f7fe ffad 	bl	8000224 <__aeabi_uidivmod>
 80012ca:	464a      	mov	r2, r9
 80012cc:	4342      	muls	r2, r0
 80012ce:	040b      	lsls	r3, r1, #16
 80012d0:	0c29      	lsrs	r1, r5, #16
 80012d2:	0007      	movs	r7, r0
 80012d4:	4319      	orrs	r1, r3
 80012d6:	428a      	cmp	r2, r1
 80012d8:	d907      	bls.n	80012ea <__aeabi_ddiv+0x3aa>
 80012da:	1989      	adds	r1, r1, r6
 80012dc:	3f01      	subs	r7, #1
 80012de:	428e      	cmp	r6, r1
 80012e0:	d803      	bhi.n	80012ea <__aeabi_ddiv+0x3aa>
 80012e2:	428a      	cmp	r2, r1
 80012e4:	d901      	bls.n	80012ea <__aeabi_ddiv+0x3aa>
 80012e6:	1e87      	subs	r7, r0, #2
 80012e8:	1989      	adds	r1, r1, r6
 80012ea:	1a88      	subs	r0, r1, r2
 80012ec:	9901      	ldr	r1, [sp, #4]
 80012ee:	f7fe ff99 	bl	8000224 <__aeabi_uidivmod>
 80012f2:	0409      	lsls	r1, r1, #16
 80012f4:	464a      	mov	r2, r9
 80012f6:	4689      	mov	r9, r1
 80012f8:	0429      	lsls	r1, r5, #16
 80012fa:	464d      	mov	r5, r9
 80012fc:	4342      	muls	r2, r0
 80012fe:	0c09      	lsrs	r1, r1, #16
 8001300:	0003      	movs	r3, r0
 8001302:	4329      	orrs	r1, r5
 8001304:	428a      	cmp	r2, r1
 8001306:	d907      	bls.n	8001318 <__aeabi_ddiv+0x3d8>
 8001308:	1989      	adds	r1, r1, r6
 800130a:	3b01      	subs	r3, #1
 800130c:	428e      	cmp	r6, r1
 800130e:	d803      	bhi.n	8001318 <__aeabi_ddiv+0x3d8>
 8001310:	428a      	cmp	r2, r1
 8001312:	d901      	bls.n	8001318 <__aeabi_ddiv+0x3d8>
 8001314:	1e83      	subs	r3, r0, #2
 8001316:	1989      	adds	r1, r1, r6
 8001318:	043f      	lsls	r7, r7, #16
 800131a:	1a89      	subs	r1, r1, r2
 800131c:	003a      	movs	r2, r7
 800131e:	9f03      	ldr	r7, [sp, #12]
 8001320:	431a      	orrs	r2, r3
 8001322:	0038      	movs	r0, r7
 8001324:	0413      	lsls	r3, r2, #16
 8001326:	0c1b      	lsrs	r3, r3, #16
 8001328:	4358      	muls	r0, r3
 800132a:	4681      	mov	r9, r0
 800132c:	9802      	ldr	r0, [sp, #8]
 800132e:	0c15      	lsrs	r5, r2, #16
 8001330:	436f      	muls	r7, r5
 8001332:	4343      	muls	r3, r0
 8001334:	4345      	muls	r5, r0
 8001336:	4648      	mov	r0, r9
 8001338:	0c00      	lsrs	r0, r0, #16
 800133a:	4684      	mov	ip, r0
 800133c:	19db      	adds	r3, r3, r7
 800133e:	4463      	add	r3, ip
 8001340:	429f      	cmp	r7, r3
 8001342:	d903      	bls.n	800134c <__aeabi_ddiv+0x40c>
 8001344:	2080      	movs	r0, #128	; 0x80
 8001346:	0240      	lsls	r0, r0, #9
 8001348:	4684      	mov	ip, r0
 800134a:	4465      	add	r5, ip
 800134c:	4648      	mov	r0, r9
 800134e:	0c1f      	lsrs	r7, r3, #16
 8001350:	0400      	lsls	r0, r0, #16
 8001352:	041b      	lsls	r3, r3, #16
 8001354:	0c00      	lsrs	r0, r0, #16
 8001356:	197d      	adds	r5, r7, r5
 8001358:	1818      	adds	r0, r3, r0
 800135a:	42a9      	cmp	r1, r5
 800135c:	d200      	bcs.n	8001360 <__aeabi_ddiv+0x420>
 800135e:	e084      	b.n	800146a <__aeabi_ddiv+0x52a>
 8001360:	d100      	bne.n	8001364 <__aeabi_ddiv+0x424>
 8001362:	e07f      	b.n	8001464 <__aeabi_ddiv+0x524>
 8001364:	2301      	movs	r3, #1
 8001366:	431a      	orrs	r2, r3
 8001368:	e657      	b.n	800101a <__aeabi_ddiv+0xda>
 800136a:	2380      	movs	r3, #128	; 0x80
 800136c:	464a      	mov	r2, r9
 800136e:	031b      	lsls	r3, r3, #12
 8001370:	4313      	orrs	r3, r2
 8001372:	031b      	lsls	r3, r3, #12
 8001374:	0b1b      	lsrs	r3, r3, #12
 8001376:	46aa      	mov	sl, r5
 8001378:	4a6f      	ldr	r2, [pc, #444]	; (8001538 <__aeabi_ddiv+0x5f8>)
 800137a:	e66f      	b.n	800105c <__aeabi_ddiv+0x11c>
 800137c:	42ba      	cmp	r2, r7
 800137e:	d900      	bls.n	8001382 <__aeabi_ddiv+0x442>
 8001380:	e735      	b.n	80011ee <__aeabi_ddiv+0x2ae>
 8001382:	464b      	mov	r3, r9
 8001384:	07dc      	lsls	r4, r3, #31
 8001386:	0858      	lsrs	r0, r3, #1
 8001388:	087b      	lsrs	r3, r7, #1
 800138a:	431c      	orrs	r4, r3
 800138c:	07ff      	lsls	r7, r7, #31
 800138e:	e734      	b.n	80011fa <__aeabi_ddiv+0x2ba>
 8001390:	2400      	movs	r4, #0
 8001392:	42af      	cmp	r7, r5
 8001394:	d289      	bcs.n	80012aa <__aeabi_ddiv+0x36a>
 8001396:	4447      	add	r7, r8
 8001398:	4547      	cmp	r7, r8
 800139a:	41a4      	sbcs	r4, r4
 800139c:	465b      	mov	r3, fp
 800139e:	4264      	negs	r4, r4
 80013a0:	19a4      	adds	r4, r4, r6
 80013a2:	1864      	adds	r4, r4, r1
 80013a4:	3b01      	subs	r3, #1
 80013a6:	42a6      	cmp	r6, r4
 80013a8:	d21e      	bcs.n	80013e8 <__aeabi_ddiv+0x4a8>
 80013aa:	42a0      	cmp	r0, r4
 80013ac:	d86d      	bhi.n	800148a <__aeabi_ddiv+0x54a>
 80013ae:	d100      	bne.n	80013b2 <__aeabi_ddiv+0x472>
 80013b0:	e0b6      	b.n	8001520 <__aeabi_ddiv+0x5e0>
 80013b2:	1a24      	subs	r4, r4, r0
 80013b4:	469b      	mov	fp, r3
 80013b6:	e778      	b.n	80012aa <__aeabi_ddiv+0x36a>
 80013b8:	0003      	movs	r3, r0
 80013ba:	465a      	mov	r2, fp
 80013bc:	3b28      	subs	r3, #40	; 0x28
 80013be:	409a      	lsls	r2, r3
 80013c0:	2700      	movs	r7, #0
 80013c2:	4691      	mov	r9, r2
 80013c4:	e688      	b.n	80010d8 <__aeabi_ddiv+0x198>
 80013c6:	4658      	mov	r0, fp
 80013c8:	f000 fcb2 	bl	8001d30 <__clzsi2>
 80013cc:	3020      	adds	r0, #32
 80013ce:	e672      	b.n	80010b6 <__aeabi_ddiv+0x176>
 80013d0:	0003      	movs	r3, r0
 80013d2:	4652      	mov	r2, sl
 80013d4:	3b28      	subs	r3, #40	; 0x28
 80013d6:	409a      	lsls	r2, r3
 80013d8:	4693      	mov	fp, r2
 80013da:	2200      	movs	r2, #0
 80013dc:	e6b4      	b.n	8001148 <__aeabi_ddiv+0x208>
 80013de:	4650      	mov	r0, sl
 80013e0:	f000 fca6 	bl	8001d30 <__clzsi2>
 80013e4:	3020      	adds	r0, #32
 80013e6:	e69a      	b.n	800111e <__aeabi_ddiv+0x1de>
 80013e8:	42a6      	cmp	r6, r4
 80013ea:	d1e2      	bne.n	80013b2 <__aeabi_ddiv+0x472>
 80013ec:	45b8      	cmp	r8, r7
 80013ee:	d9dc      	bls.n	80013aa <__aeabi_ddiv+0x46a>
 80013f0:	1a34      	subs	r4, r6, r0
 80013f2:	469b      	mov	fp, r3
 80013f4:	e759      	b.n	80012aa <__aeabi_ddiv+0x36a>
 80013f6:	2b1f      	cmp	r3, #31
 80013f8:	dc65      	bgt.n	80014c6 <__aeabi_ddiv+0x586>
 80013fa:	4c50      	ldr	r4, [pc, #320]	; (800153c <__aeabi_ddiv+0x5fc>)
 80013fc:	9900      	ldr	r1, [sp, #0]
 80013fe:	46a4      	mov	ip, r4
 8001400:	465c      	mov	r4, fp
 8001402:	4461      	add	r1, ip
 8001404:	0008      	movs	r0, r1
 8001406:	408c      	lsls	r4, r1
 8001408:	0011      	movs	r1, r2
 800140a:	4082      	lsls	r2, r0
 800140c:	40d9      	lsrs	r1, r3
 800140e:	1e50      	subs	r0, r2, #1
 8001410:	4182      	sbcs	r2, r0
 8001412:	430c      	orrs	r4, r1
 8001414:	4314      	orrs	r4, r2
 8001416:	465a      	mov	r2, fp
 8001418:	40da      	lsrs	r2, r3
 800141a:	0013      	movs	r3, r2
 800141c:	0762      	lsls	r2, r4, #29
 800141e:	d009      	beq.n	8001434 <__aeabi_ddiv+0x4f4>
 8001420:	220f      	movs	r2, #15
 8001422:	4022      	ands	r2, r4
 8001424:	2a04      	cmp	r2, #4
 8001426:	d005      	beq.n	8001434 <__aeabi_ddiv+0x4f4>
 8001428:	0022      	movs	r2, r4
 800142a:	1d14      	adds	r4, r2, #4
 800142c:	4294      	cmp	r4, r2
 800142e:	4189      	sbcs	r1, r1
 8001430:	4249      	negs	r1, r1
 8001432:	185b      	adds	r3, r3, r1
 8001434:	021a      	lsls	r2, r3, #8
 8001436:	d562      	bpl.n	80014fe <__aeabi_ddiv+0x5be>
 8001438:	2201      	movs	r2, #1
 800143a:	2300      	movs	r3, #0
 800143c:	2700      	movs	r7, #0
 800143e:	e60d      	b.n	800105c <__aeabi_ddiv+0x11c>
 8001440:	428a      	cmp	r2, r1
 8001442:	d800      	bhi.n	8001446 <__aeabi_ddiv+0x506>
 8001444:	e70a      	b.n	800125c <__aeabi_ddiv+0x31c>
 8001446:	1e83      	subs	r3, r0, #2
 8001448:	1989      	adds	r1, r1, r6
 800144a:	e707      	b.n	800125c <__aeabi_ddiv+0x31c>
 800144c:	230f      	movs	r3, #15
 800144e:	4013      	ands	r3, r2
 8001450:	2b04      	cmp	r3, #4
 8001452:	d100      	bne.n	8001456 <__aeabi_ddiv+0x516>
 8001454:	e5e6      	b.n	8001024 <__aeabi_ddiv+0xe4>
 8001456:	1d17      	adds	r7, r2, #4
 8001458:	4297      	cmp	r7, r2
 800145a:	4192      	sbcs	r2, r2
 800145c:	4253      	negs	r3, r2
 800145e:	449b      	add	fp, r3
 8001460:	08fa      	lsrs	r2, r7, #3
 8001462:	e5e0      	b.n	8001026 <__aeabi_ddiv+0xe6>
 8001464:	2800      	cmp	r0, #0
 8001466:	d100      	bne.n	800146a <__aeabi_ddiv+0x52a>
 8001468:	e5d7      	b.n	800101a <__aeabi_ddiv+0xda>
 800146a:	1871      	adds	r1, r6, r1
 800146c:	1e53      	subs	r3, r2, #1
 800146e:	42b1      	cmp	r1, r6
 8001470:	d327      	bcc.n	80014c2 <__aeabi_ddiv+0x582>
 8001472:	42a9      	cmp	r1, r5
 8001474:	d315      	bcc.n	80014a2 <__aeabi_ddiv+0x562>
 8001476:	d058      	beq.n	800152a <__aeabi_ddiv+0x5ea>
 8001478:	001a      	movs	r2, r3
 800147a:	e773      	b.n	8001364 <__aeabi_ddiv+0x424>
 800147c:	2b00      	cmp	r3, #0
 800147e:	dc00      	bgt.n	8001482 <__aeabi_ddiv+0x542>
 8001480:	e604      	b.n	800108c <__aeabi_ddiv+0x14c>
 8001482:	2301      	movs	r3, #1
 8001484:	2200      	movs	r2, #0
 8001486:	449b      	add	fp, r3
 8001488:	e5cd      	b.n	8001026 <__aeabi_ddiv+0xe6>
 800148a:	2302      	movs	r3, #2
 800148c:	4447      	add	r7, r8
 800148e:	4547      	cmp	r7, r8
 8001490:	4189      	sbcs	r1, r1
 8001492:	425b      	negs	r3, r3
 8001494:	469c      	mov	ip, r3
 8001496:	4249      	negs	r1, r1
 8001498:	1989      	adds	r1, r1, r6
 800149a:	190c      	adds	r4, r1, r4
 800149c:	44e3      	add	fp, ip
 800149e:	1a24      	subs	r4, r4, r0
 80014a0:	e703      	b.n	80012aa <__aeabi_ddiv+0x36a>
 80014a2:	4643      	mov	r3, r8
 80014a4:	005f      	lsls	r7, r3, #1
 80014a6:	4547      	cmp	r7, r8
 80014a8:	419b      	sbcs	r3, r3
 80014aa:	46b8      	mov	r8, r7
 80014ac:	425b      	negs	r3, r3
 80014ae:	199e      	adds	r6, r3, r6
 80014b0:	3a02      	subs	r2, #2
 80014b2:	1989      	adds	r1, r1, r6
 80014b4:	42a9      	cmp	r1, r5
 80014b6:	d000      	beq.n	80014ba <__aeabi_ddiv+0x57a>
 80014b8:	e754      	b.n	8001364 <__aeabi_ddiv+0x424>
 80014ba:	4540      	cmp	r0, r8
 80014bc:	d000      	beq.n	80014c0 <__aeabi_ddiv+0x580>
 80014be:	e751      	b.n	8001364 <__aeabi_ddiv+0x424>
 80014c0:	e5ab      	b.n	800101a <__aeabi_ddiv+0xda>
 80014c2:	001a      	movs	r2, r3
 80014c4:	e7f6      	b.n	80014b4 <__aeabi_ddiv+0x574>
 80014c6:	211f      	movs	r1, #31
 80014c8:	465f      	mov	r7, fp
 80014ca:	4249      	negs	r1, r1
 80014cc:	1b0c      	subs	r4, r1, r4
 80014ce:	40e7      	lsrs	r7, r4
 80014d0:	2b20      	cmp	r3, #32
 80014d2:	d007      	beq.n	80014e4 <__aeabi_ddiv+0x5a4>
 80014d4:	491a      	ldr	r1, [pc, #104]	; (8001540 <__aeabi_ddiv+0x600>)
 80014d6:	9b00      	ldr	r3, [sp, #0]
 80014d8:	468c      	mov	ip, r1
 80014da:	4463      	add	r3, ip
 80014dc:	0018      	movs	r0, r3
 80014de:	465b      	mov	r3, fp
 80014e0:	4083      	lsls	r3, r0
 80014e2:	431a      	orrs	r2, r3
 80014e4:	1e50      	subs	r0, r2, #1
 80014e6:	4182      	sbcs	r2, r0
 80014e8:	433a      	orrs	r2, r7
 80014ea:	2707      	movs	r7, #7
 80014ec:	2300      	movs	r3, #0
 80014ee:	4017      	ands	r7, r2
 80014f0:	d009      	beq.n	8001506 <__aeabi_ddiv+0x5c6>
 80014f2:	210f      	movs	r1, #15
 80014f4:	2300      	movs	r3, #0
 80014f6:	4011      	ands	r1, r2
 80014f8:	0014      	movs	r4, r2
 80014fa:	2904      	cmp	r1, #4
 80014fc:	d195      	bne.n	800142a <__aeabi_ddiv+0x4ea>
 80014fe:	0022      	movs	r2, r4
 8001500:	075f      	lsls	r7, r3, #29
 8001502:	025b      	lsls	r3, r3, #9
 8001504:	0b1b      	lsrs	r3, r3, #12
 8001506:	08d2      	lsrs	r2, r2, #3
 8001508:	4317      	orrs	r7, r2
 800150a:	2200      	movs	r2, #0
 800150c:	e5a6      	b.n	800105c <__aeabi_ddiv+0x11c>
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	4659      	mov	r1, fp
 8001512:	031b      	lsls	r3, r3, #12
 8001514:	430b      	orrs	r3, r1
 8001516:	031b      	lsls	r3, r3, #12
 8001518:	0017      	movs	r7, r2
 800151a:	0b1b      	lsrs	r3, r3, #12
 800151c:	4a06      	ldr	r2, [pc, #24]	; (8001538 <__aeabi_ddiv+0x5f8>)
 800151e:	e59d      	b.n	800105c <__aeabi_ddiv+0x11c>
 8001520:	42bd      	cmp	r5, r7
 8001522:	d8b2      	bhi.n	800148a <__aeabi_ddiv+0x54a>
 8001524:	469b      	mov	fp, r3
 8001526:	2400      	movs	r4, #0
 8001528:	e6bf      	b.n	80012aa <__aeabi_ddiv+0x36a>
 800152a:	4580      	cmp	r8, r0
 800152c:	d3b9      	bcc.n	80014a2 <__aeabi_ddiv+0x562>
 800152e:	001a      	movs	r2, r3
 8001530:	e7c3      	b.n	80014ba <__aeabi_ddiv+0x57a>
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	000003ff 	.word	0x000003ff
 8001538:	000007ff 	.word	0x000007ff
 800153c:	0000041e 	.word	0x0000041e
 8001540:	0000043e 	.word	0x0000043e

08001544 <__aeabi_dsub>:
 8001544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001546:	4657      	mov	r7, sl
 8001548:	464e      	mov	r6, r9
 800154a:	4645      	mov	r5, r8
 800154c:	46de      	mov	lr, fp
 800154e:	000c      	movs	r4, r1
 8001550:	0309      	lsls	r1, r1, #12
 8001552:	b5e0      	push	{r5, r6, r7, lr}
 8001554:	0a49      	lsrs	r1, r1, #9
 8001556:	0f46      	lsrs	r6, r0, #29
 8001558:	005f      	lsls	r7, r3, #1
 800155a:	4331      	orrs	r1, r6
 800155c:	031e      	lsls	r6, r3, #12
 800155e:	0fdb      	lsrs	r3, r3, #31
 8001560:	0a76      	lsrs	r6, r6, #9
 8001562:	469b      	mov	fp, r3
 8001564:	0f53      	lsrs	r3, r2, #29
 8001566:	4333      	orrs	r3, r6
 8001568:	4ec8      	ldr	r6, [pc, #800]	; (800188c <__aeabi_dsub+0x348>)
 800156a:	0065      	lsls	r5, r4, #1
 800156c:	00c0      	lsls	r0, r0, #3
 800156e:	0fe4      	lsrs	r4, r4, #31
 8001570:	00d2      	lsls	r2, r2, #3
 8001572:	0d6d      	lsrs	r5, r5, #21
 8001574:	46a2      	mov	sl, r4
 8001576:	4681      	mov	r9, r0
 8001578:	0d7f      	lsrs	r7, r7, #21
 800157a:	469c      	mov	ip, r3
 800157c:	4690      	mov	r8, r2
 800157e:	42b7      	cmp	r7, r6
 8001580:	d100      	bne.n	8001584 <__aeabi_dsub+0x40>
 8001582:	e0b9      	b.n	80016f8 <__aeabi_dsub+0x1b4>
 8001584:	465b      	mov	r3, fp
 8001586:	2601      	movs	r6, #1
 8001588:	4073      	eors	r3, r6
 800158a:	469b      	mov	fp, r3
 800158c:	1bee      	subs	r6, r5, r7
 800158e:	45a3      	cmp	fp, r4
 8001590:	d100      	bne.n	8001594 <__aeabi_dsub+0x50>
 8001592:	e083      	b.n	800169c <__aeabi_dsub+0x158>
 8001594:	2e00      	cmp	r6, #0
 8001596:	dd63      	ble.n	8001660 <__aeabi_dsub+0x11c>
 8001598:	2f00      	cmp	r7, #0
 800159a:	d000      	beq.n	800159e <__aeabi_dsub+0x5a>
 800159c:	e0b1      	b.n	8001702 <__aeabi_dsub+0x1be>
 800159e:	4663      	mov	r3, ip
 80015a0:	4313      	orrs	r3, r2
 80015a2:	d100      	bne.n	80015a6 <__aeabi_dsub+0x62>
 80015a4:	e123      	b.n	80017ee <__aeabi_dsub+0x2aa>
 80015a6:	1e73      	subs	r3, r6, #1
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d000      	beq.n	80015ae <__aeabi_dsub+0x6a>
 80015ac:	e1ba      	b.n	8001924 <__aeabi_dsub+0x3e0>
 80015ae:	1a86      	subs	r6, r0, r2
 80015b0:	4663      	mov	r3, ip
 80015b2:	42b0      	cmp	r0, r6
 80015b4:	4180      	sbcs	r0, r0
 80015b6:	2501      	movs	r5, #1
 80015b8:	1ac9      	subs	r1, r1, r3
 80015ba:	4240      	negs	r0, r0
 80015bc:	1a09      	subs	r1, r1, r0
 80015be:	020b      	lsls	r3, r1, #8
 80015c0:	d400      	bmi.n	80015c4 <__aeabi_dsub+0x80>
 80015c2:	e147      	b.n	8001854 <__aeabi_dsub+0x310>
 80015c4:	0249      	lsls	r1, r1, #9
 80015c6:	0a4b      	lsrs	r3, r1, #9
 80015c8:	4698      	mov	r8, r3
 80015ca:	4643      	mov	r3, r8
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dsub+0x8e>
 80015d0:	e189      	b.n	80018e6 <__aeabi_dsub+0x3a2>
 80015d2:	4640      	mov	r0, r8
 80015d4:	f000 fbac 	bl	8001d30 <__clzsi2>
 80015d8:	0003      	movs	r3, r0
 80015da:	3b08      	subs	r3, #8
 80015dc:	2b1f      	cmp	r3, #31
 80015de:	dd00      	ble.n	80015e2 <__aeabi_dsub+0x9e>
 80015e0:	e17c      	b.n	80018dc <__aeabi_dsub+0x398>
 80015e2:	2220      	movs	r2, #32
 80015e4:	0030      	movs	r0, r6
 80015e6:	1ad2      	subs	r2, r2, r3
 80015e8:	4641      	mov	r1, r8
 80015ea:	40d0      	lsrs	r0, r2
 80015ec:	4099      	lsls	r1, r3
 80015ee:	0002      	movs	r2, r0
 80015f0:	409e      	lsls	r6, r3
 80015f2:	430a      	orrs	r2, r1
 80015f4:	429d      	cmp	r5, r3
 80015f6:	dd00      	ble.n	80015fa <__aeabi_dsub+0xb6>
 80015f8:	e16a      	b.n	80018d0 <__aeabi_dsub+0x38c>
 80015fa:	1b5d      	subs	r5, r3, r5
 80015fc:	1c6b      	adds	r3, r5, #1
 80015fe:	2b1f      	cmp	r3, #31
 8001600:	dd00      	ble.n	8001604 <__aeabi_dsub+0xc0>
 8001602:	e194      	b.n	800192e <__aeabi_dsub+0x3ea>
 8001604:	2120      	movs	r1, #32
 8001606:	0010      	movs	r0, r2
 8001608:	0035      	movs	r5, r6
 800160a:	1ac9      	subs	r1, r1, r3
 800160c:	408e      	lsls	r6, r1
 800160e:	40da      	lsrs	r2, r3
 8001610:	4088      	lsls	r0, r1
 8001612:	40dd      	lsrs	r5, r3
 8001614:	1e71      	subs	r1, r6, #1
 8001616:	418e      	sbcs	r6, r1
 8001618:	0011      	movs	r1, r2
 800161a:	2207      	movs	r2, #7
 800161c:	4328      	orrs	r0, r5
 800161e:	2500      	movs	r5, #0
 8001620:	4306      	orrs	r6, r0
 8001622:	4032      	ands	r2, r6
 8001624:	2a00      	cmp	r2, #0
 8001626:	d009      	beq.n	800163c <__aeabi_dsub+0xf8>
 8001628:	230f      	movs	r3, #15
 800162a:	4033      	ands	r3, r6
 800162c:	2b04      	cmp	r3, #4
 800162e:	d005      	beq.n	800163c <__aeabi_dsub+0xf8>
 8001630:	1d33      	adds	r3, r6, #4
 8001632:	42b3      	cmp	r3, r6
 8001634:	41b6      	sbcs	r6, r6
 8001636:	4276      	negs	r6, r6
 8001638:	1989      	adds	r1, r1, r6
 800163a:	001e      	movs	r6, r3
 800163c:	020b      	lsls	r3, r1, #8
 800163e:	d400      	bmi.n	8001642 <__aeabi_dsub+0xfe>
 8001640:	e23d      	b.n	8001abe <__aeabi_dsub+0x57a>
 8001642:	1c6a      	adds	r2, r5, #1
 8001644:	4b91      	ldr	r3, [pc, #580]	; (800188c <__aeabi_dsub+0x348>)
 8001646:	0555      	lsls	r5, r2, #21
 8001648:	0d6d      	lsrs	r5, r5, #21
 800164a:	429a      	cmp	r2, r3
 800164c:	d100      	bne.n	8001650 <__aeabi_dsub+0x10c>
 800164e:	e119      	b.n	8001884 <__aeabi_dsub+0x340>
 8001650:	4a8f      	ldr	r2, [pc, #572]	; (8001890 <__aeabi_dsub+0x34c>)
 8001652:	08f6      	lsrs	r6, r6, #3
 8001654:	400a      	ands	r2, r1
 8001656:	0757      	lsls	r7, r2, #29
 8001658:	0252      	lsls	r2, r2, #9
 800165a:	4337      	orrs	r7, r6
 800165c:	0b12      	lsrs	r2, r2, #12
 800165e:	e09b      	b.n	8001798 <__aeabi_dsub+0x254>
 8001660:	2e00      	cmp	r6, #0
 8001662:	d000      	beq.n	8001666 <__aeabi_dsub+0x122>
 8001664:	e0c5      	b.n	80017f2 <__aeabi_dsub+0x2ae>
 8001666:	1c6e      	adds	r6, r5, #1
 8001668:	0576      	lsls	r6, r6, #21
 800166a:	0d76      	lsrs	r6, r6, #21
 800166c:	2e01      	cmp	r6, #1
 800166e:	dc00      	bgt.n	8001672 <__aeabi_dsub+0x12e>
 8001670:	e148      	b.n	8001904 <__aeabi_dsub+0x3c0>
 8001672:	4667      	mov	r7, ip
 8001674:	1a86      	subs	r6, r0, r2
 8001676:	1bcb      	subs	r3, r1, r7
 8001678:	42b0      	cmp	r0, r6
 800167a:	41bf      	sbcs	r7, r7
 800167c:	427f      	negs	r7, r7
 800167e:	46b8      	mov	r8, r7
 8001680:	001f      	movs	r7, r3
 8001682:	4643      	mov	r3, r8
 8001684:	1aff      	subs	r7, r7, r3
 8001686:	003b      	movs	r3, r7
 8001688:	46b8      	mov	r8, r7
 800168a:	021b      	lsls	r3, r3, #8
 800168c:	d500      	bpl.n	8001690 <__aeabi_dsub+0x14c>
 800168e:	e15f      	b.n	8001950 <__aeabi_dsub+0x40c>
 8001690:	4337      	orrs	r7, r6
 8001692:	d19a      	bne.n	80015ca <__aeabi_dsub+0x86>
 8001694:	2200      	movs	r2, #0
 8001696:	2400      	movs	r4, #0
 8001698:	2500      	movs	r5, #0
 800169a:	e079      	b.n	8001790 <__aeabi_dsub+0x24c>
 800169c:	2e00      	cmp	r6, #0
 800169e:	dc00      	bgt.n	80016a2 <__aeabi_dsub+0x15e>
 80016a0:	e0fa      	b.n	8001898 <__aeabi_dsub+0x354>
 80016a2:	2f00      	cmp	r7, #0
 80016a4:	d100      	bne.n	80016a8 <__aeabi_dsub+0x164>
 80016a6:	e08d      	b.n	80017c4 <__aeabi_dsub+0x280>
 80016a8:	4b78      	ldr	r3, [pc, #480]	; (800188c <__aeabi_dsub+0x348>)
 80016aa:	429d      	cmp	r5, r3
 80016ac:	d067      	beq.n	800177e <__aeabi_dsub+0x23a>
 80016ae:	2380      	movs	r3, #128	; 0x80
 80016b0:	4667      	mov	r7, ip
 80016b2:	041b      	lsls	r3, r3, #16
 80016b4:	431f      	orrs	r7, r3
 80016b6:	46bc      	mov	ip, r7
 80016b8:	2e38      	cmp	r6, #56	; 0x38
 80016ba:	dc00      	bgt.n	80016be <__aeabi_dsub+0x17a>
 80016bc:	e152      	b.n	8001964 <__aeabi_dsub+0x420>
 80016be:	4663      	mov	r3, ip
 80016c0:	4313      	orrs	r3, r2
 80016c2:	1e5a      	subs	r2, r3, #1
 80016c4:	4193      	sbcs	r3, r2
 80016c6:	181e      	adds	r6, r3, r0
 80016c8:	4286      	cmp	r6, r0
 80016ca:	4180      	sbcs	r0, r0
 80016cc:	4240      	negs	r0, r0
 80016ce:	1809      	adds	r1, r1, r0
 80016d0:	020b      	lsls	r3, r1, #8
 80016d2:	d400      	bmi.n	80016d6 <__aeabi_dsub+0x192>
 80016d4:	e0be      	b.n	8001854 <__aeabi_dsub+0x310>
 80016d6:	4b6d      	ldr	r3, [pc, #436]	; (800188c <__aeabi_dsub+0x348>)
 80016d8:	3501      	adds	r5, #1
 80016da:	429d      	cmp	r5, r3
 80016dc:	d100      	bne.n	80016e0 <__aeabi_dsub+0x19c>
 80016de:	e0d2      	b.n	8001886 <__aeabi_dsub+0x342>
 80016e0:	4a6b      	ldr	r2, [pc, #428]	; (8001890 <__aeabi_dsub+0x34c>)
 80016e2:	0873      	lsrs	r3, r6, #1
 80016e4:	400a      	ands	r2, r1
 80016e6:	2101      	movs	r1, #1
 80016e8:	400e      	ands	r6, r1
 80016ea:	431e      	orrs	r6, r3
 80016ec:	0851      	lsrs	r1, r2, #1
 80016ee:	07d3      	lsls	r3, r2, #31
 80016f0:	2207      	movs	r2, #7
 80016f2:	431e      	orrs	r6, r3
 80016f4:	4032      	ands	r2, r6
 80016f6:	e795      	b.n	8001624 <__aeabi_dsub+0xe0>
 80016f8:	001e      	movs	r6, r3
 80016fa:	4316      	orrs	r6, r2
 80016fc:	d000      	beq.n	8001700 <__aeabi_dsub+0x1bc>
 80016fe:	e745      	b.n	800158c <__aeabi_dsub+0x48>
 8001700:	e740      	b.n	8001584 <__aeabi_dsub+0x40>
 8001702:	4b62      	ldr	r3, [pc, #392]	; (800188c <__aeabi_dsub+0x348>)
 8001704:	429d      	cmp	r5, r3
 8001706:	d03a      	beq.n	800177e <__aeabi_dsub+0x23a>
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	4667      	mov	r7, ip
 800170c:	041b      	lsls	r3, r3, #16
 800170e:	431f      	orrs	r7, r3
 8001710:	46bc      	mov	ip, r7
 8001712:	2e38      	cmp	r6, #56	; 0x38
 8001714:	dd00      	ble.n	8001718 <__aeabi_dsub+0x1d4>
 8001716:	e0eb      	b.n	80018f0 <__aeabi_dsub+0x3ac>
 8001718:	2e1f      	cmp	r6, #31
 800171a:	dc00      	bgt.n	800171e <__aeabi_dsub+0x1da>
 800171c:	e13a      	b.n	8001994 <__aeabi_dsub+0x450>
 800171e:	0033      	movs	r3, r6
 8001720:	4667      	mov	r7, ip
 8001722:	3b20      	subs	r3, #32
 8001724:	40df      	lsrs	r7, r3
 8001726:	003b      	movs	r3, r7
 8001728:	2e20      	cmp	r6, #32
 800172a:	d005      	beq.n	8001738 <__aeabi_dsub+0x1f4>
 800172c:	2740      	movs	r7, #64	; 0x40
 800172e:	1bbf      	subs	r7, r7, r6
 8001730:	4666      	mov	r6, ip
 8001732:	40be      	lsls	r6, r7
 8001734:	4332      	orrs	r2, r6
 8001736:	4690      	mov	r8, r2
 8001738:	4646      	mov	r6, r8
 800173a:	1e72      	subs	r2, r6, #1
 800173c:	4196      	sbcs	r6, r2
 800173e:	4333      	orrs	r3, r6
 8001740:	e0da      	b.n	80018f8 <__aeabi_dsub+0x3b4>
 8001742:	2b00      	cmp	r3, #0
 8001744:	d100      	bne.n	8001748 <__aeabi_dsub+0x204>
 8001746:	e214      	b.n	8001b72 <__aeabi_dsub+0x62e>
 8001748:	4663      	mov	r3, ip
 800174a:	4313      	orrs	r3, r2
 800174c:	d100      	bne.n	8001750 <__aeabi_dsub+0x20c>
 800174e:	e168      	b.n	8001a22 <__aeabi_dsub+0x4de>
 8001750:	2380      	movs	r3, #128	; 0x80
 8001752:	074e      	lsls	r6, r1, #29
 8001754:	08c0      	lsrs	r0, r0, #3
 8001756:	08c9      	lsrs	r1, r1, #3
 8001758:	031b      	lsls	r3, r3, #12
 800175a:	4306      	orrs	r6, r0
 800175c:	4219      	tst	r1, r3
 800175e:	d008      	beq.n	8001772 <__aeabi_dsub+0x22e>
 8001760:	4660      	mov	r0, ip
 8001762:	08c0      	lsrs	r0, r0, #3
 8001764:	4218      	tst	r0, r3
 8001766:	d104      	bne.n	8001772 <__aeabi_dsub+0x22e>
 8001768:	4663      	mov	r3, ip
 800176a:	0001      	movs	r1, r0
 800176c:	08d2      	lsrs	r2, r2, #3
 800176e:	075e      	lsls	r6, r3, #29
 8001770:	4316      	orrs	r6, r2
 8001772:	00f3      	lsls	r3, r6, #3
 8001774:	4699      	mov	r9, r3
 8001776:	00c9      	lsls	r1, r1, #3
 8001778:	0f72      	lsrs	r2, r6, #29
 800177a:	4d44      	ldr	r5, [pc, #272]	; (800188c <__aeabi_dsub+0x348>)
 800177c:	4311      	orrs	r1, r2
 800177e:	464b      	mov	r3, r9
 8001780:	08de      	lsrs	r6, r3, #3
 8001782:	4b42      	ldr	r3, [pc, #264]	; (800188c <__aeabi_dsub+0x348>)
 8001784:	074f      	lsls	r7, r1, #29
 8001786:	4337      	orrs	r7, r6
 8001788:	08ca      	lsrs	r2, r1, #3
 800178a:	429d      	cmp	r5, r3
 800178c:	d100      	bne.n	8001790 <__aeabi_dsub+0x24c>
 800178e:	e06e      	b.n	800186e <__aeabi_dsub+0x32a>
 8001790:	0312      	lsls	r2, r2, #12
 8001792:	056d      	lsls	r5, r5, #21
 8001794:	0b12      	lsrs	r2, r2, #12
 8001796:	0d6d      	lsrs	r5, r5, #21
 8001798:	2100      	movs	r1, #0
 800179a:	0312      	lsls	r2, r2, #12
 800179c:	0b13      	lsrs	r3, r2, #12
 800179e:	0d0a      	lsrs	r2, r1, #20
 80017a0:	0512      	lsls	r2, r2, #20
 80017a2:	431a      	orrs	r2, r3
 80017a4:	4b3b      	ldr	r3, [pc, #236]	; (8001894 <__aeabi_dsub+0x350>)
 80017a6:	052d      	lsls	r5, r5, #20
 80017a8:	4013      	ands	r3, r2
 80017aa:	432b      	orrs	r3, r5
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	07e4      	lsls	r4, r4, #31
 80017b0:	085b      	lsrs	r3, r3, #1
 80017b2:	4323      	orrs	r3, r4
 80017b4:	0038      	movs	r0, r7
 80017b6:	0019      	movs	r1, r3
 80017b8:	bc3c      	pop	{r2, r3, r4, r5}
 80017ba:	4690      	mov	r8, r2
 80017bc:	4699      	mov	r9, r3
 80017be:	46a2      	mov	sl, r4
 80017c0:	46ab      	mov	fp, r5
 80017c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017c4:	4663      	mov	r3, ip
 80017c6:	4313      	orrs	r3, r2
 80017c8:	d011      	beq.n	80017ee <__aeabi_dsub+0x2aa>
 80017ca:	1e73      	subs	r3, r6, #1
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d000      	beq.n	80017d2 <__aeabi_dsub+0x28e>
 80017d0:	e107      	b.n	80019e2 <__aeabi_dsub+0x49e>
 80017d2:	1886      	adds	r6, r0, r2
 80017d4:	4286      	cmp	r6, r0
 80017d6:	4180      	sbcs	r0, r0
 80017d8:	4461      	add	r1, ip
 80017da:	4240      	negs	r0, r0
 80017dc:	1809      	adds	r1, r1, r0
 80017de:	2501      	movs	r5, #1
 80017e0:	020b      	lsls	r3, r1, #8
 80017e2:	d537      	bpl.n	8001854 <__aeabi_dsub+0x310>
 80017e4:	2502      	movs	r5, #2
 80017e6:	e77b      	b.n	80016e0 <__aeabi_dsub+0x19c>
 80017e8:	003e      	movs	r6, r7
 80017ea:	4661      	mov	r1, ip
 80017ec:	4691      	mov	r9, r2
 80017ee:	0035      	movs	r5, r6
 80017f0:	e7c5      	b.n	800177e <__aeabi_dsub+0x23a>
 80017f2:	465c      	mov	r4, fp
 80017f4:	2d00      	cmp	r5, #0
 80017f6:	d000      	beq.n	80017fa <__aeabi_dsub+0x2b6>
 80017f8:	e0e1      	b.n	80019be <__aeabi_dsub+0x47a>
 80017fa:	000b      	movs	r3, r1
 80017fc:	4303      	orrs	r3, r0
 80017fe:	d0f3      	beq.n	80017e8 <__aeabi_dsub+0x2a4>
 8001800:	1c73      	adds	r3, r6, #1
 8001802:	d100      	bne.n	8001806 <__aeabi_dsub+0x2c2>
 8001804:	e1ac      	b.n	8001b60 <__aeabi_dsub+0x61c>
 8001806:	4b21      	ldr	r3, [pc, #132]	; (800188c <__aeabi_dsub+0x348>)
 8001808:	429f      	cmp	r7, r3
 800180a:	d100      	bne.n	800180e <__aeabi_dsub+0x2ca>
 800180c:	e13a      	b.n	8001a84 <__aeabi_dsub+0x540>
 800180e:	43f3      	mvns	r3, r6
 8001810:	2b38      	cmp	r3, #56	; 0x38
 8001812:	dd00      	ble.n	8001816 <__aeabi_dsub+0x2d2>
 8001814:	e16f      	b.n	8001af6 <__aeabi_dsub+0x5b2>
 8001816:	2b1f      	cmp	r3, #31
 8001818:	dd00      	ble.n	800181c <__aeabi_dsub+0x2d8>
 800181a:	e18c      	b.n	8001b36 <__aeabi_dsub+0x5f2>
 800181c:	2520      	movs	r5, #32
 800181e:	000e      	movs	r6, r1
 8001820:	1aed      	subs	r5, r5, r3
 8001822:	40ae      	lsls	r6, r5
 8001824:	46b0      	mov	r8, r6
 8001826:	0006      	movs	r6, r0
 8001828:	46aa      	mov	sl, r5
 800182a:	40de      	lsrs	r6, r3
 800182c:	4645      	mov	r5, r8
 800182e:	4335      	orrs	r5, r6
 8001830:	002e      	movs	r6, r5
 8001832:	4655      	mov	r5, sl
 8001834:	40d9      	lsrs	r1, r3
 8001836:	40a8      	lsls	r0, r5
 8001838:	4663      	mov	r3, ip
 800183a:	1e45      	subs	r5, r0, #1
 800183c:	41a8      	sbcs	r0, r5
 800183e:	1a5b      	subs	r3, r3, r1
 8001840:	469c      	mov	ip, r3
 8001842:	4330      	orrs	r0, r6
 8001844:	1a16      	subs	r6, r2, r0
 8001846:	42b2      	cmp	r2, r6
 8001848:	4192      	sbcs	r2, r2
 800184a:	4663      	mov	r3, ip
 800184c:	4252      	negs	r2, r2
 800184e:	1a99      	subs	r1, r3, r2
 8001850:	003d      	movs	r5, r7
 8001852:	e6b4      	b.n	80015be <__aeabi_dsub+0x7a>
 8001854:	2207      	movs	r2, #7
 8001856:	4032      	ands	r2, r6
 8001858:	2a00      	cmp	r2, #0
 800185a:	d000      	beq.n	800185e <__aeabi_dsub+0x31a>
 800185c:	e6e4      	b.n	8001628 <__aeabi_dsub+0xe4>
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <__aeabi_dsub+0x348>)
 8001860:	08f6      	lsrs	r6, r6, #3
 8001862:	074f      	lsls	r7, r1, #29
 8001864:	4337      	orrs	r7, r6
 8001866:	08ca      	lsrs	r2, r1, #3
 8001868:	429d      	cmp	r5, r3
 800186a:	d000      	beq.n	800186e <__aeabi_dsub+0x32a>
 800186c:	e790      	b.n	8001790 <__aeabi_dsub+0x24c>
 800186e:	003b      	movs	r3, r7
 8001870:	4313      	orrs	r3, r2
 8001872:	d100      	bne.n	8001876 <__aeabi_dsub+0x332>
 8001874:	e1a6      	b.n	8001bc4 <__aeabi_dsub+0x680>
 8001876:	2380      	movs	r3, #128	; 0x80
 8001878:	031b      	lsls	r3, r3, #12
 800187a:	431a      	orrs	r2, r3
 800187c:	0312      	lsls	r2, r2, #12
 800187e:	0b12      	lsrs	r2, r2, #12
 8001880:	4d02      	ldr	r5, [pc, #8]	; (800188c <__aeabi_dsub+0x348>)
 8001882:	e789      	b.n	8001798 <__aeabi_dsub+0x254>
 8001884:	0015      	movs	r5, r2
 8001886:	2200      	movs	r2, #0
 8001888:	2700      	movs	r7, #0
 800188a:	e785      	b.n	8001798 <__aeabi_dsub+0x254>
 800188c:	000007ff 	.word	0x000007ff
 8001890:	ff7fffff 	.word	0xff7fffff
 8001894:	800fffff 	.word	0x800fffff
 8001898:	2e00      	cmp	r6, #0
 800189a:	d000      	beq.n	800189e <__aeabi_dsub+0x35a>
 800189c:	e0c7      	b.n	8001a2e <__aeabi_dsub+0x4ea>
 800189e:	1c6b      	adds	r3, r5, #1
 80018a0:	055e      	lsls	r6, r3, #21
 80018a2:	0d76      	lsrs	r6, r6, #21
 80018a4:	2e01      	cmp	r6, #1
 80018a6:	dc00      	bgt.n	80018aa <__aeabi_dsub+0x366>
 80018a8:	e0f0      	b.n	8001a8c <__aeabi_dsub+0x548>
 80018aa:	4dc8      	ldr	r5, [pc, #800]	; (8001bcc <__aeabi_dsub+0x688>)
 80018ac:	42ab      	cmp	r3, r5
 80018ae:	d100      	bne.n	80018b2 <__aeabi_dsub+0x36e>
 80018b0:	e0b9      	b.n	8001a26 <__aeabi_dsub+0x4e2>
 80018b2:	1885      	adds	r5, r0, r2
 80018b4:	000a      	movs	r2, r1
 80018b6:	4285      	cmp	r5, r0
 80018b8:	4189      	sbcs	r1, r1
 80018ba:	4462      	add	r2, ip
 80018bc:	4249      	negs	r1, r1
 80018be:	1851      	adds	r1, r2, r1
 80018c0:	2207      	movs	r2, #7
 80018c2:	07ce      	lsls	r6, r1, #31
 80018c4:	086d      	lsrs	r5, r5, #1
 80018c6:	432e      	orrs	r6, r5
 80018c8:	0849      	lsrs	r1, r1, #1
 80018ca:	4032      	ands	r2, r6
 80018cc:	001d      	movs	r5, r3
 80018ce:	e6a9      	b.n	8001624 <__aeabi_dsub+0xe0>
 80018d0:	49bf      	ldr	r1, [pc, #764]	; (8001bd0 <__aeabi_dsub+0x68c>)
 80018d2:	1aed      	subs	r5, r5, r3
 80018d4:	4011      	ands	r1, r2
 80018d6:	2207      	movs	r2, #7
 80018d8:	4032      	ands	r2, r6
 80018da:	e6a3      	b.n	8001624 <__aeabi_dsub+0xe0>
 80018dc:	0032      	movs	r2, r6
 80018de:	3828      	subs	r0, #40	; 0x28
 80018e0:	4082      	lsls	r2, r0
 80018e2:	2600      	movs	r6, #0
 80018e4:	e686      	b.n	80015f4 <__aeabi_dsub+0xb0>
 80018e6:	0030      	movs	r0, r6
 80018e8:	f000 fa22 	bl	8001d30 <__clzsi2>
 80018ec:	3020      	adds	r0, #32
 80018ee:	e673      	b.n	80015d8 <__aeabi_dsub+0x94>
 80018f0:	4663      	mov	r3, ip
 80018f2:	4313      	orrs	r3, r2
 80018f4:	1e5a      	subs	r2, r3, #1
 80018f6:	4193      	sbcs	r3, r2
 80018f8:	1ac6      	subs	r6, r0, r3
 80018fa:	42b0      	cmp	r0, r6
 80018fc:	4180      	sbcs	r0, r0
 80018fe:	4240      	negs	r0, r0
 8001900:	1a09      	subs	r1, r1, r0
 8001902:	e65c      	b.n	80015be <__aeabi_dsub+0x7a>
 8001904:	000e      	movs	r6, r1
 8001906:	4667      	mov	r7, ip
 8001908:	4306      	orrs	r6, r0
 800190a:	4317      	orrs	r7, r2
 800190c:	2d00      	cmp	r5, #0
 800190e:	d15e      	bne.n	80019ce <__aeabi_dsub+0x48a>
 8001910:	2e00      	cmp	r6, #0
 8001912:	d000      	beq.n	8001916 <__aeabi_dsub+0x3d2>
 8001914:	e0f3      	b.n	8001afe <__aeabi_dsub+0x5ba>
 8001916:	2f00      	cmp	r7, #0
 8001918:	d100      	bne.n	800191c <__aeabi_dsub+0x3d8>
 800191a:	e11e      	b.n	8001b5a <__aeabi_dsub+0x616>
 800191c:	465c      	mov	r4, fp
 800191e:	4661      	mov	r1, ip
 8001920:	4691      	mov	r9, r2
 8001922:	e72c      	b.n	800177e <__aeabi_dsub+0x23a>
 8001924:	4fa9      	ldr	r7, [pc, #676]	; (8001bcc <__aeabi_dsub+0x688>)
 8001926:	42be      	cmp	r6, r7
 8001928:	d07b      	beq.n	8001a22 <__aeabi_dsub+0x4de>
 800192a:	001e      	movs	r6, r3
 800192c:	e6f1      	b.n	8001712 <__aeabi_dsub+0x1ce>
 800192e:	0010      	movs	r0, r2
 8001930:	3d1f      	subs	r5, #31
 8001932:	40e8      	lsrs	r0, r5
 8001934:	2b20      	cmp	r3, #32
 8001936:	d003      	beq.n	8001940 <__aeabi_dsub+0x3fc>
 8001938:	2140      	movs	r1, #64	; 0x40
 800193a:	1acb      	subs	r3, r1, r3
 800193c:	409a      	lsls	r2, r3
 800193e:	4316      	orrs	r6, r2
 8001940:	1e73      	subs	r3, r6, #1
 8001942:	419e      	sbcs	r6, r3
 8001944:	2207      	movs	r2, #7
 8001946:	4306      	orrs	r6, r0
 8001948:	4032      	ands	r2, r6
 800194a:	2100      	movs	r1, #0
 800194c:	2500      	movs	r5, #0
 800194e:	e783      	b.n	8001858 <__aeabi_dsub+0x314>
 8001950:	1a16      	subs	r6, r2, r0
 8001952:	4663      	mov	r3, ip
 8001954:	42b2      	cmp	r2, r6
 8001956:	4180      	sbcs	r0, r0
 8001958:	1a59      	subs	r1, r3, r1
 800195a:	4240      	negs	r0, r0
 800195c:	1a0b      	subs	r3, r1, r0
 800195e:	4698      	mov	r8, r3
 8001960:	465c      	mov	r4, fp
 8001962:	e632      	b.n	80015ca <__aeabi_dsub+0x86>
 8001964:	2e1f      	cmp	r6, #31
 8001966:	dd00      	ble.n	800196a <__aeabi_dsub+0x426>
 8001968:	e0ab      	b.n	8001ac2 <__aeabi_dsub+0x57e>
 800196a:	2720      	movs	r7, #32
 800196c:	1bbb      	subs	r3, r7, r6
 800196e:	469a      	mov	sl, r3
 8001970:	4663      	mov	r3, ip
 8001972:	4657      	mov	r7, sl
 8001974:	40bb      	lsls	r3, r7
 8001976:	4699      	mov	r9, r3
 8001978:	0013      	movs	r3, r2
 800197a:	464f      	mov	r7, r9
 800197c:	40f3      	lsrs	r3, r6
 800197e:	431f      	orrs	r7, r3
 8001980:	003b      	movs	r3, r7
 8001982:	4657      	mov	r7, sl
 8001984:	40ba      	lsls	r2, r7
 8001986:	1e57      	subs	r7, r2, #1
 8001988:	41ba      	sbcs	r2, r7
 800198a:	4313      	orrs	r3, r2
 800198c:	4662      	mov	r2, ip
 800198e:	40f2      	lsrs	r2, r6
 8001990:	1889      	adds	r1, r1, r2
 8001992:	e698      	b.n	80016c6 <__aeabi_dsub+0x182>
 8001994:	2720      	movs	r7, #32
 8001996:	1bbb      	subs	r3, r7, r6
 8001998:	469a      	mov	sl, r3
 800199a:	4663      	mov	r3, ip
 800199c:	4657      	mov	r7, sl
 800199e:	40bb      	lsls	r3, r7
 80019a0:	4699      	mov	r9, r3
 80019a2:	0013      	movs	r3, r2
 80019a4:	464f      	mov	r7, r9
 80019a6:	40f3      	lsrs	r3, r6
 80019a8:	431f      	orrs	r7, r3
 80019aa:	003b      	movs	r3, r7
 80019ac:	4657      	mov	r7, sl
 80019ae:	40ba      	lsls	r2, r7
 80019b0:	1e57      	subs	r7, r2, #1
 80019b2:	41ba      	sbcs	r2, r7
 80019b4:	4313      	orrs	r3, r2
 80019b6:	4662      	mov	r2, ip
 80019b8:	40f2      	lsrs	r2, r6
 80019ba:	1a89      	subs	r1, r1, r2
 80019bc:	e79c      	b.n	80018f8 <__aeabi_dsub+0x3b4>
 80019be:	4b83      	ldr	r3, [pc, #524]	; (8001bcc <__aeabi_dsub+0x688>)
 80019c0:	429f      	cmp	r7, r3
 80019c2:	d05f      	beq.n	8001a84 <__aeabi_dsub+0x540>
 80019c4:	2580      	movs	r5, #128	; 0x80
 80019c6:	042d      	lsls	r5, r5, #16
 80019c8:	4273      	negs	r3, r6
 80019ca:	4329      	orrs	r1, r5
 80019cc:	e720      	b.n	8001810 <__aeabi_dsub+0x2cc>
 80019ce:	2e00      	cmp	r6, #0
 80019d0:	d10c      	bne.n	80019ec <__aeabi_dsub+0x4a8>
 80019d2:	2f00      	cmp	r7, #0
 80019d4:	d100      	bne.n	80019d8 <__aeabi_dsub+0x494>
 80019d6:	e0d0      	b.n	8001b7a <__aeabi_dsub+0x636>
 80019d8:	465c      	mov	r4, fp
 80019da:	4661      	mov	r1, ip
 80019dc:	4691      	mov	r9, r2
 80019de:	4d7b      	ldr	r5, [pc, #492]	; (8001bcc <__aeabi_dsub+0x688>)
 80019e0:	e6cd      	b.n	800177e <__aeabi_dsub+0x23a>
 80019e2:	4f7a      	ldr	r7, [pc, #488]	; (8001bcc <__aeabi_dsub+0x688>)
 80019e4:	42be      	cmp	r6, r7
 80019e6:	d01c      	beq.n	8001a22 <__aeabi_dsub+0x4de>
 80019e8:	001e      	movs	r6, r3
 80019ea:	e665      	b.n	80016b8 <__aeabi_dsub+0x174>
 80019ec:	2f00      	cmp	r7, #0
 80019ee:	d018      	beq.n	8001a22 <__aeabi_dsub+0x4de>
 80019f0:	08c0      	lsrs	r0, r0, #3
 80019f2:	074e      	lsls	r6, r1, #29
 80019f4:	4306      	orrs	r6, r0
 80019f6:	2080      	movs	r0, #128	; 0x80
 80019f8:	08c9      	lsrs	r1, r1, #3
 80019fa:	0300      	lsls	r0, r0, #12
 80019fc:	4201      	tst	r1, r0
 80019fe:	d008      	beq.n	8001a12 <__aeabi_dsub+0x4ce>
 8001a00:	4663      	mov	r3, ip
 8001a02:	08dc      	lsrs	r4, r3, #3
 8001a04:	4204      	tst	r4, r0
 8001a06:	d104      	bne.n	8001a12 <__aeabi_dsub+0x4ce>
 8001a08:	0021      	movs	r1, r4
 8001a0a:	46da      	mov	sl, fp
 8001a0c:	08d2      	lsrs	r2, r2, #3
 8001a0e:	075e      	lsls	r6, r3, #29
 8001a10:	4316      	orrs	r6, r2
 8001a12:	00f3      	lsls	r3, r6, #3
 8001a14:	4699      	mov	r9, r3
 8001a16:	2401      	movs	r4, #1
 8001a18:	4653      	mov	r3, sl
 8001a1a:	00c9      	lsls	r1, r1, #3
 8001a1c:	0f72      	lsrs	r2, r6, #29
 8001a1e:	4311      	orrs	r1, r2
 8001a20:	401c      	ands	r4, r3
 8001a22:	4d6a      	ldr	r5, [pc, #424]	; (8001bcc <__aeabi_dsub+0x688>)
 8001a24:	e6ab      	b.n	800177e <__aeabi_dsub+0x23a>
 8001a26:	001d      	movs	r5, r3
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2700      	movs	r7, #0
 8001a2c:	e6b4      	b.n	8001798 <__aeabi_dsub+0x254>
 8001a2e:	2d00      	cmp	r5, #0
 8001a30:	d159      	bne.n	8001ae6 <__aeabi_dsub+0x5a2>
 8001a32:	000b      	movs	r3, r1
 8001a34:	4303      	orrs	r3, r0
 8001a36:	d100      	bne.n	8001a3a <__aeabi_dsub+0x4f6>
 8001a38:	e6d6      	b.n	80017e8 <__aeabi_dsub+0x2a4>
 8001a3a:	1c73      	adds	r3, r6, #1
 8001a3c:	d100      	bne.n	8001a40 <__aeabi_dsub+0x4fc>
 8001a3e:	e0b2      	b.n	8001ba6 <__aeabi_dsub+0x662>
 8001a40:	4b62      	ldr	r3, [pc, #392]	; (8001bcc <__aeabi_dsub+0x688>)
 8001a42:	429f      	cmp	r7, r3
 8001a44:	d01e      	beq.n	8001a84 <__aeabi_dsub+0x540>
 8001a46:	43f3      	mvns	r3, r6
 8001a48:	2b38      	cmp	r3, #56	; 0x38
 8001a4a:	dc6f      	bgt.n	8001b2c <__aeabi_dsub+0x5e8>
 8001a4c:	2b1f      	cmp	r3, #31
 8001a4e:	dd00      	ble.n	8001a52 <__aeabi_dsub+0x50e>
 8001a50:	e097      	b.n	8001b82 <__aeabi_dsub+0x63e>
 8001a52:	2520      	movs	r5, #32
 8001a54:	000e      	movs	r6, r1
 8001a56:	1aed      	subs	r5, r5, r3
 8001a58:	40ae      	lsls	r6, r5
 8001a5a:	46b0      	mov	r8, r6
 8001a5c:	0006      	movs	r6, r0
 8001a5e:	46aa      	mov	sl, r5
 8001a60:	40de      	lsrs	r6, r3
 8001a62:	4645      	mov	r5, r8
 8001a64:	4335      	orrs	r5, r6
 8001a66:	002e      	movs	r6, r5
 8001a68:	4655      	mov	r5, sl
 8001a6a:	40a8      	lsls	r0, r5
 8001a6c:	40d9      	lsrs	r1, r3
 8001a6e:	1e45      	subs	r5, r0, #1
 8001a70:	41a8      	sbcs	r0, r5
 8001a72:	448c      	add	ip, r1
 8001a74:	4306      	orrs	r6, r0
 8001a76:	18b6      	adds	r6, r6, r2
 8001a78:	4296      	cmp	r6, r2
 8001a7a:	4192      	sbcs	r2, r2
 8001a7c:	4251      	negs	r1, r2
 8001a7e:	4461      	add	r1, ip
 8001a80:	003d      	movs	r5, r7
 8001a82:	e625      	b.n	80016d0 <__aeabi_dsub+0x18c>
 8001a84:	003d      	movs	r5, r7
 8001a86:	4661      	mov	r1, ip
 8001a88:	4691      	mov	r9, r2
 8001a8a:	e678      	b.n	800177e <__aeabi_dsub+0x23a>
 8001a8c:	000b      	movs	r3, r1
 8001a8e:	4303      	orrs	r3, r0
 8001a90:	2d00      	cmp	r5, #0
 8001a92:	d000      	beq.n	8001a96 <__aeabi_dsub+0x552>
 8001a94:	e655      	b.n	8001742 <__aeabi_dsub+0x1fe>
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f5      	beq.n	8001a86 <__aeabi_dsub+0x542>
 8001a9a:	4663      	mov	r3, ip
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	d100      	bne.n	8001aa2 <__aeabi_dsub+0x55e>
 8001aa0:	e66d      	b.n	800177e <__aeabi_dsub+0x23a>
 8001aa2:	1886      	adds	r6, r0, r2
 8001aa4:	4286      	cmp	r6, r0
 8001aa6:	4180      	sbcs	r0, r0
 8001aa8:	4461      	add	r1, ip
 8001aaa:	4240      	negs	r0, r0
 8001aac:	1809      	adds	r1, r1, r0
 8001aae:	2200      	movs	r2, #0
 8001ab0:	020b      	lsls	r3, r1, #8
 8001ab2:	d400      	bmi.n	8001ab6 <__aeabi_dsub+0x572>
 8001ab4:	e6d0      	b.n	8001858 <__aeabi_dsub+0x314>
 8001ab6:	4b46      	ldr	r3, [pc, #280]	; (8001bd0 <__aeabi_dsub+0x68c>)
 8001ab8:	3501      	adds	r5, #1
 8001aba:	4019      	ands	r1, r3
 8001abc:	e5b2      	b.n	8001624 <__aeabi_dsub+0xe0>
 8001abe:	46b1      	mov	r9, r6
 8001ac0:	e65d      	b.n	800177e <__aeabi_dsub+0x23a>
 8001ac2:	0033      	movs	r3, r6
 8001ac4:	4667      	mov	r7, ip
 8001ac6:	3b20      	subs	r3, #32
 8001ac8:	40df      	lsrs	r7, r3
 8001aca:	003b      	movs	r3, r7
 8001acc:	2e20      	cmp	r6, #32
 8001ace:	d005      	beq.n	8001adc <__aeabi_dsub+0x598>
 8001ad0:	2740      	movs	r7, #64	; 0x40
 8001ad2:	1bbf      	subs	r7, r7, r6
 8001ad4:	4666      	mov	r6, ip
 8001ad6:	40be      	lsls	r6, r7
 8001ad8:	4332      	orrs	r2, r6
 8001ada:	4690      	mov	r8, r2
 8001adc:	4646      	mov	r6, r8
 8001ade:	1e72      	subs	r2, r6, #1
 8001ae0:	4196      	sbcs	r6, r2
 8001ae2:	4333      	orrs	r3, r6
 8001ae4:	e5ef      	b.n	80016c6 <__aeabi_dsub+0x182>
 8001ae6:	4b39      	ldr	r3, [pc, #228]	; (8001bcc <__aeabi_dsub+0x688>)
 8001ae8:	429f      	cmp	r7, r3
 8001aea:	d0cb      	beq.n	8001a84 <__aeabi_dsub+0x540>
 8001aec:	2580      	movs	r5, #128	; 0x80
 8001aee:	042d      	lsls	r5, r5, #16
 8001af0:	4273      	negs	r3, r6
 8001af2:	4329      	orrs	r1, r5
 8001af4:	e7a8      	b.n	8001a48 <__aeabi_dsub+0x504>
 8001af6:	4308      	orrs	r0, r1
 8001af8:	1e41      	subs	r1, r0, #1
 8001afa:	4188      	sbcs	r0, r1
 8001afc:	e6a2      	b.n	8001844 <__aeabi_dsub+0x300>
 8001afe:	2f00      	cmp	r7, #0
 8001b00:	d100      	bne.n	8001b04 <__aeabi_dsub+0x5c0>
 8001b02:	e63c      	b.n	800177e <__aeabi_dsub+0x23a>
 8001b04:	4663      	mov	r3, ip
 8001b06:	1a86      	subs	r6, r0, r2
 8001b08:	1acf      	subs	r7, r1, r3
 8001b0a:	42b0      	cmp	r0, r6
 8001b0c:	419b      	sbcs	r3, r3
 8001b0e:	425b      	negs	r3, r3
 8001b10:	1afb      	subs	r3, r7, r3
 8001b12:	4698      	mov	r8, r3
 8001b14:	021b      	lsls	r3, r3, #8
 8001b16:	d54e      	bpl.n	8001bb6 <__aeabi_dsub+0x672>
 8001b18:	1a16      	subs	r6, r2, r0
 8001b1a:	4663      	mov	r3, ip
 8001b1c:	42b2      	cmp	r2, r6
 8001b1e:	4192      	sbcs	r2, r2
 8001b20:	1a59      	subs	r1, r3, r1
 8001b22:	4252      	negs	r2, r2
 8001b24:	1a89      	subs	r1, r1, r2
 8001b26:	465c      	mov	r4, fp
 8001b28:	2200      	movs	r2, #0
 8001b2a:	e57b      	b.n	8001624 <__aeabi_dsub+0xe0>
 8001b2c:	4301      	orrs	r1, r0
 8001b2e:	000e      	movs	r6, r1
 8001b30:	1e71      	subs	r1, r6, #1
 8001b32:	418e      	sbcs	r6, r1
 8001b34:	e79f      	b.n	8001a76 <__aeabi_dsub+0x532>
 8001b36:	001d      	movs	r5, r3
 8001b38:	000e      	movs	r6, r1
 8001b3a:	3d20      	subs	r5, #32
 8001b3c:	40ee      	lsrs	r6, r5
 8001b3e:	46b0      	mov	r8, r6
 8001b40:	2b20      	cmp	r3, #32
 8001b42:	d004      	beq.n	8001b4e <__aeabi_dsub+0x60a>
 8001b44:	2540      	movs	r5, #64	; 0x40
 8001b46:	1aeb      	subs	r3, r5, r3
 8001b48:	4099      	lsls	r1, r3
 8001b4a:	4308      	orrs	r0, r1
 8001b4c:	4681      	mov	r9, r0
 8001b4e:	4648      	mov	r0, r9
 8001b50:	4643      	mov	r3, r8
 8001b52:	1e41      	subs	r1, r0, #1
 8001b54:	4188      	sbcs	r0, r1
 8001b56:	4318      	orrs	r0, r3
 8001b58:	e674      	b.n	8001844 <__aeabi_dsub+0x300>
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2400      	movs	r4, #0
 8001b5e:	e617      	b.n	8001790 <__aeabi_dsub+0x24c>
 8001b60:	1a16      	subs	r6, r2, r0
 8001b62:	4663      	mov	r3, ip
 8001b64:	42b2      	cmp	r2, r6
 8001b66:	4192      	sbcs	r2, r2
 8001b68:	1a59      	subs	r1, r3, r1
 8001b6a:	4252      	negs	r2, r2
 8001b6c:	1a89      	subs	r1, r1, r2
 8001b6e:	003d      	movs	r5, r7
 8001b70:	e525      	b.n	80015be <__aeabi_dsub+0x7a>
 8001b72:	4661      	mov	r1, ip
 8001b74:	4691      	mov	r9, r2
 8001b76:	4d15      	ldr	r5, [pc, #84]	; (8001bcc <__aeabi_dsub+0x688>)
 8001b78:	e601      	b.n	800177e <__aeabi_dsub+0x23a>
 8001b7a:	2280      	movs	r2, #128	; 0x80
 8001b7c:	2400      	movs	r4, #0
 8001b7e:	0312      	lsls	r2, r2, #12
 8001b80:	e679      	b.n	8001876 <__aeabi_dsub+0x332>
 8001b82:	001d      	movs	r5, r3
 8001b84:	000e      	movs	r6, r1
 8001b86:	3d20      	subs	r5, #32
 8001b88:	40ee      	lsrs	r6, r5
 8001b8a:	46b0      	mov	r8, r6
 8001b8c:	2b20      	cmp	r3, #32
 8001b8e:	d004      	beq.n	8001b9a <__aeabi_dsub+0x656>
 8001b90:	2540      	movs	r5, #64	; 0x40
 8001b92:	1aeb      	subs	r3, r5, r3
 8001b94:	4099      	lsls	r1, r3
 8001b96:	4308      	orrs	r0, r1
 8001b98:	4681      	mov	r9, r0
 8001b9a:	464e      	mov	r6, r9
 8001b9c:	4643      	mov	r3, r8
 8001b9e:	1e71      	subs	r1, r6, #1
 8001ba0:	418e      	sbcs	r6, r1
 8001ba2:	431e      	orrs	r6, r3
 8001ba4:	e767      	b.n	8001a76 <__aeabi_dsub+0x532>
 8001ba6:	1886      	adds	r6, r0, r2
 8001ba8:	4296      	cmp	r6, r2
 8001baa:	419b      	sbcs	r3, r3
 8001bac:	4461      	add	r1, ip
 8001bae:	425b      	negs	r3, r3
 8001bb0:	18c9      	adds	r1, r1, r3
 8001bb2:	003d      	movs	r5, r7
 8001bb4:	e58c      	b.n	80016d0 <__aeabi_dsub+0x18c>
 8001bb6:	4647      	mov	r7, r8
 8001bb8:	4337      	orrs	r7, r6
 8001bba:	d0ce      	beq.n	8001b5a <__aeabi_dsub+0x616>
 8001bbc:	2207      	movs	r2, #7
 8001bbe:	4641      	mov	r1, r8
 8001bc0:	4032      	ands	r2, r6
 8001bc2:	e649      	b.n	8001858 <__aeabi_dsub+0x314>
 8001bc4:	2700      	movs	r7, #0
 8001bc6:	003a      	movs	r2, r7
 8001bc8:	e5e6      	b.n	8001798 <__aeabi_dsub+0x254>
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	000007ff 	.word	0x000007ff
 8001bd0:	ff7fffff 	.word	0xff7fffff

08001bd4 <__aeabi_d2iz>:
 8001bd4:	b530      	push	{r4, r5, lr}
 8001bd6:	4d14      	ldr	r5, [pc, #80]	; (8001c28 <__aeabi_d2iz+0x54>)
 8001bd8:	030a      	lsls	r2, r1, #12
 8001bda:	004b      	lsls	r3, r1, #1
 8001bdc:	0b12      	lsrs	r2, r2, #12
 8001bde:	0d5b      	lsrs	r3, r3, #21
 8001be0:	0fc9      	lsrs	r1, r1, #31
 8001be2:	2400      	movs	r4, #0
 8001be4:	42ab      	cmp	r3, r5
 8001be6:	dd11      	ble.n	8001c0c <__aeabi_d2iz+0x38>
 8001be8:	4c10      	ldr	r4, [pc, #64]	; (8001c2c <__aeabi_d2iz+0x58>)
 8001bea:	42a3      	cmp	r3, r4
 8001bec:	dc10      	bgt.n	8001c10 <__aeabi_d2iz+0x3c>
 8001bee:	2480      	movs	r4, #128	; 0x80
 8001bf0:	0364      	lsls	r4, r4, #13
 8001bf2:	4322      	orrs	r2, r4
 8001bf4:	4c0e      	ldr	r4, [pc, #56]	; (8001c30 <__aeabi_d2iz+0x5c>)
 8001bf6:	1ae4      	subs	r4, r4, r3
 8001bf8:	2c1f      	cmp	r4, #31
 8001bfa:	dd0c      	ble.n	8001c16 <__aeabi_d2iz+0x42>
 8001bfc:	480d      	ldr	r0, [pc, #52]	; (8001c34 <__aeabi_d2iz+0x60>)
 8001bfe:	1ac3      	subs	r3, r0, r3
 8001c00:	40da      	lsrs	r2, r3
 8001c02:	0013      	movs	r3, r2
 8001c04:	425c      	negs	r4, r3
 8001c06:	2900      	cmp	r1, #0
 8001c08:	d100      	bne.n	8001c0c <__aeabi_d2iz+0x38>
 8001c0a:	001c      	movs	r4, r3
 8001c0c:	0020      	movs	r0, r4
 8001c0e:	bd30      	pop	{r4, r5, pc}
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <__aeabi_d2iz+0x64>)
 8001c12:	18cc      	adds	r4, r1, r3
 8001c14:	e7fa      	b.n	8001c0c <__aeabi_d2iz+0x38>
 8001c16:	4d09      	ldr	r5, [pc, #36]	; (8001c3c <__aeabi_d2iz+0x68>)
 8001c18:	40e0      	lsrs	r0, r4
 8001c1a:	46ac      	mov	ip, r5
 8001c1c:	4463      	add	r3, ip
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	0013      	movs	r3, r2
 8001c22:	4303      	orrs	r3, r0
 8001c24:	e7ee      	b.n	8001c04 <__aeabi_d2iz+0x30>
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	000003fe 	.word	0x000003fe
 8001c2c:	0000041d 	.word	0x0000041d
 8001c30:	00000433 	.word	0x00000433
 8001c34:	00000413 	.word	0x00000413
 8001c38:	7fffffff 	.word	0x7fffffff
 8001c3c:	fffffbed 	.word	0xfffffbed

08001c40 <__aeabi_i2d>:
 8001c40:	b570      	push	{r4, r5, r6, lr}
 8001c42:	2800      	cmp	r0, #0
 8001c44:	d02d      	beq.n	8001ca2 <__aeabi_i2d+0x62>
 8001c46:	17c3      	asrs	r3, r0, #31
 8001c48:	18c5      	adds	r5, r0, r3
 8001c4a:	405d      	eors	r5, r3
 8001c4c:	0fc4      	lsrs	r4, r0, #31
 8001c4e:	0028      	movs	r0, r5
 8001c50:	f000 f86e 	bl	8001d30 <__clzsi2>
 8001c54:	4b15      	ldr	r3, [pc, #84]	; (8001cac <__aeabi_i2d+0x6c>)
 8001c56:	1a1b      	subs	r3, r3, r0
 8001c58:	055b      	lsls	r3, r3, #21
 8001c5a:	0d5b      	lsrs	r3, r3, #21
 8001c5c:	280a      	cmp	r0, #10
 8001c5e:	dd15      	ble.n	8001c8c <__aeabi_i2d+0x4c>
 8001c60:	380b      	subs	r0, #11
 8001c62:	4085      	lsls	r5, r0
 8001c64:	2200      	movs	r2, #0
 8001c66:	032d      	lsls	r5, r5, #12
 8001c68:	0b2d      	lsrs	r5, r5, #12
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	0010      	movs	r0, r2
 8001c6e:	032d      	lsls	r5, r5, #12
 8001c70:	0d0a      	lsrs	r2, r1, #20
 8001c72:	0b2d      	lsrs	r5, r5, #12
 8001c74:	0512      	lsls	r2, r2, #20
 8001c76:	432a      	orrs	r2, r5
 8001c78:	4d0d      	ldr	r5, [pc, #52]	; (8001cb0 <__aeabi_i2d+0x70>)
 8001c7a:	051b      	lsls	r3, r3, #20
 8001c7c:	402a      	ands	r2, r5
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	07e4      	lsls	r4, r4, #31
 8001c84:	085b      	lsrs	r3, r3, #1
 8001c86:	4323      	orrs	r3, r4
 8001c88:	0019      	movs	r1, r3
 8001c8a:	bd70      	pop	{r4, r5, r6, pc}
 8001c8c:	0002      	movs	r2, r0
 8001c8e:	0029      	movs	r1, r5
 8001c90:	3215      	adds	r2, #21
 8001c92:	4091      	lsls	r1, r2
 8001c94:	000a      	movs	r2, r1
 8001c96:	210b      	movs	r1, #11
 8001c98:	1a08      	subs	r0, r1, r0
 8001c9a:	40c5      	lsrs	r5, r0
 8001c9c:	032d      	lsls	r5, r5, #12
 8001c9e:	0b2d      	lsrs	r5, r5, #12
 8001ca0:	e7e3      	b.n	8001c6a <__aeabi_i2d+0x2a>
 8001ca2:	2400      	movs	r4, #0
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	2500      	movs	r5, #0
 8001ca8:	2200      	movs	r2, #0
 8001caa:	e7de      	b.n	8001c6a <__aeabi_i2d+0x2a>
 8001cac:	0000041e 	.word	0x0000041e
 8001cb0:	800fffff 	.word	0x800fffff

08001cb4 <__aeabi_cdrcmple>:
 8001cb4:	4684      	mov	ip, r0
 8001cb6:	1c10      	adds	r0, r2, #0
 8001cb8:	4662      	mov	r2, ip
 8001cba:	468c      	mov	ip, r1
 8001cbc:	1c19      	adds	r1, r3, #0
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	e000      	b.n	8001cc4 <__aeabi_cdcmpeq>
 8001cc2:	46c0      	nop			; (mov r8, r8)

08001cc4 <__aeabi_cdcmpeq>:
 8001cc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001cc6:	f000 f8f1 	bl	8001eac <__ledf2>
 8001cca:	2800      	cmp	r0, #0
 8001ccc:	d401      	bmi.n	8001cd2 <__aeabi_cdcmpeq+0xe>
 8001cce:	2100      	movs	r1, #0
 8001cd0:	42c8      	cmn	r0, r1
 8001cd2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001cd4 <__aeabi_dcmpeq>:
 8001cd4:	b510      	push	{r4, lr}
 8001cd6:	f000 f849 	bl	8001d6c <__eqdf2>
 8001cda:	4240      	negs	r0, r0
 8001cdc:	3001      	adds	r0, #1
 8001cde:	bd10      	pop	{r4, pc}

08001ce0 <__aeabi_dcmplt>:
 8001ce0:	b510      	push	{r4, lr}
 8001ce2:	f000 f8e3 	bl	8001eac <__ledf2>
 8001ce6:	2800      	cmp	r0, #0
 8001ce8:	db01      	blt.n	8001cee <__aeabi_dcmplt+0xe>
 8001cea:	2000      	movs	r0, #0
 8001cec:	bd10      	pop	{r4, pc}
 8001cee:	2001      	movs	r0, #1
 8001cf0:	bd10      	pop	{r4, pc}
 8001cf2:	46c0      	nop			; (mov r8, r8)

08001cf4 <__aeabi_dcmple>:
 8001cf4:	b510      	push	{r4, lr}
 8001cf6:	f000 f8d9 	bl	8001eac <__ledf2>
 8001cfa:	2800      	cmp	r0, #0
 8001cfc:	dd01      	ble.n	8001d02 <__aeabi_dcmple+0xe>
 8001cfe:	2000      	movs	r0, #0
 8001d00:	bd10      	pop	{r4, pc}
 8001d02:	2001      	movs	r0, #1
 8001d04:	bd10      	pop	{r4, pc}
 8001d06:	46c0      	nop			; (mov r8, r8)

08001d08 <__aeabi_dcmpgt>:
 8001d08:	b510      	push	{r4, lr}
 8001d0a:	f000 f86b 	bl	8001de4 <__gedf2>
 8001d0e:	2800      	cmp	r0, #0
 8001d10:	dc01      	bgt.n	8001d16 <__aeabi_dcmpgt+0xe>
 8001d12:	2000      	movs	r0, #0
 8001d14:	bd10      	pop	{r4, pc}
 8001d16:	2001      	movs	r0, #1
 8001d18:	bd10      	pop	{r4, pc}
 8001d1a:	46c0      	nop			; (mov r8, r8)

08001d1c <__aeabi_dcmpge>:
 8001d1c:	b510      	push	{r4, lr}
 8001d1e:	f000 f861 	bl	8001de4 <__gedf2>
 8001d22:	2800      	cmp	r0, #0
 8001d24:	da01      	bge.n	8001d2a <__aeabi_dcmpge+0xe>
 8001d26:	2000      	movs	r0, #0
 8001d28:	bd10      	pop	{r4, pc}
 8001d2a:	2001      	movs	r0, #1
 8001d2c:	bd10      	pop	{r4, pc}
 8001d2e:	46c0      	nop			; (mov r8, r8)

08001d30 <__clzsi2>:
 8001d30:	211c      	movs	r1, #28
 8001d32:	2301      	movs	r3, #1
 8001d34:	041b      	lsls	r3, r3, #16
 8001d36:	4298      	cmp	r0, r3
 8001d38:	d301      	bcc.n	8001d3e <__clzsi2+0xe>
 8001d3a:	0c00      	lsrs	r0, r0, #16
 8001d3c:	3910      	subs	r1, #16
 8001d3e:	0a1b      	lsrs	r3, r3, #8
 8001d40:	4298      	cmp	r0, r3
 8001d42:	d301      	bcc.n	8001d48 <__clzsi2+0x18>
 8001d44:	0a00      	lsrs	r0, r0, #8
 8001d46:	3908      	subs	r1, #8
 8001d48:	091b      	lsrs	r3, r3, #4
 8001d4a:	4298      	cmp	r0, r3
 8001d4c:	d301      	bcc.n	8001d52 <__clzsi2+0x22>
 8001d4e:	0900      	lsrs	r0, r0, #4
 8001d50:	3904      	subs	r1, #4
 8001d52:	a202      	add	r2, pc, #8	; (adr r2, 8001d5c <__clzsi2+0x2c>)
 8001d54:	5c10      	ldrb	r0, [r2, r0]
 8001d56:	1840      	adds	r0, r0, r1
 8001d58:	4770      	bx	lr
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	02020304 	.word	0x02020304
 8001d60:	01010101 	.word	0x01010101
	...

08001d6c <__eqdf2>:
 8001d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d6e:	464f      	mov	r7, r9
 8001d70:	4646      	mov	r6, r8
 8001d72:	46d6      	mov	lr, sl
 8001d74:	4684      	mov	ip, r0
 8001d76:	b5c0      	push	{r6, r7, lr}
 8001d78:	4680      	mov	r8, r0
 8001d7a:	4e19      	ldr	r6, [pc, #100]	; (8001de0 <__eqdf2+0x74>)
 8001d7c:	0318      	lsls	r0, r3, #12
 8001d7e:	030f      	lsls	r7, r1, #12
 8001d80:	004d      	lsls	r5, r1, #1
 8001d82:	0b00      	lsrs	r0, r0, #12
 8001d84:	005c      	lsls	r4, r3, #1
 8001d86:	4682      	mov	sl, r0
 8001d88:	0b3f      	lsrs	r7, r7, #12
 8001d8a:	0d6d      	lsrs	r5, r5, #21
 8001d8c:	0fc9      	lsrs	r1, r1, #31
 8001d8e:	4691      	mov	r9, r2
 8001d90:	0d64      	lsrs	r4, r4, #21
 8001d92:	0fdb      	lsrs	r3, r3, #31
 8001d94:	2001      	movs	r0, #1
 8001d96:	42b5      	cmp	r5, r6
 8001d98:	d00a      	beq.n	8001db0 <__eqdf2+0x44>
 8001d9a:	42b4      	cmp	r4, r6
 8001d9c:	d003      	beq.n	8001da6 <__eqdf2+0x3a>
 8001d9e:	42a5      	cmp	r5, r4
 8001da0:	d101      	bne.n	8001da6 <__eqdf2+0x3a>
 8001da2:	4557      	cmp	r7, sl
 8001da4:	d00c      	beq.n	8001dc0 <__eqdf2+0x54>
 8001da6:	bc1c      	pop	{r2, r3, r4}
 8001da8:	4690      	mov	r8, r2
 8001daa:	4699      	mov	r9, r3
 8001dac:	46a2      	mov	sl, r4
 8001dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001db0:	4666      	mov	r6, ip
 8001db2:	433e      	orrs	r6, r7
 8001db4:	d1f7      	bne.n	8001da6 <__eqdf2+0x3a>
 8001db6:	42ac      	cmp	r4, r5
 8001db8:	d1f5      	bne.n	8001da6 <__eqdf2+0x3a>
 8001dba:	4654      	mov	r4, sl
 8001dbc:	4314      	orrs	r4, r2
 8001dbe:	d1f2      	bne.n	8001da6 <__eqdf2+0x3a>
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	45c8      	cmp	r8, r9
 8001dc4:	d1ef      	bne.n	8001da6 <__eqdf2+0x3a>
 8001dc6:	4299      	cmp	r1, r3
 8001dc8:	d007      	beq.n	8001dda <__eqdf2+0x6e>
 8001dca:	2d00      	cmp	r5, #0
 8001dcc:	d1eb      	bne.n	8001da6 <__eqdf2+0x3a>
 8001dce:	4663      	mov	r3, ip
 8001dd0:	431f      	orrs	r7, r3
 8001dd2:	0038      	movs	r0, r7
 8001dd4:	1e47      	subs	r7, r0, #1
 8001dd6:	41b8      	sbcs	r0, r7
 8001dd8:	e7e5      	b.n	8001da6 <__eqdf2+0x3a>
 8001dda:	2000      	movs	r0, #0
 8001ddc:	e7e3      	b.n	8001da6 <__eqdf2+0x3a>
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	000007ff 	.word	0x000007ff

08001de4 <__gedf2>:
 8001de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001de6:	464f      	mov	r7, r9
 8001de8:	4646      	mov	r6, r8
 8001dea:	46d6      	mov	lr, sl
 8001dec:	004d      	lsls	r5, r1, #1
 8001dee:	b5c0      	push	{r6, r7, lr}
 8001df0:	030e      	lsls	r6, r1, #12
 8001df2:	0fc9      	lsrs	r1, r1, #31
 8001df4:	468a      	mov	sl, r1
 8001df6:	492c      	ldr	r1, [pc, #176]	; (8001ea8 <__gedf2+0xc4>)
 8001df8:	031f      	lsls	r7, r3, #12
 8001dfa:	005c      	lsls	r4, r3, #1
 8001dfc:	4680      	mov	r8, r0
 8001dfe:	0b36      	lsrs	r6, r6, #12
 8001e00:	0d6d      	lsrs	r5, r5, #21
 8001e02:	4691      	mov	r9, r2
 8001e04:	0b3f      	lsrs	r7, r7, #12
 8001e06:	0d64      	lsrs	r4, r4, #21
 8001e08:	0fdb      	lsrs	r3, r3, #31
 8001e0a:	428d      	cmp	r5, r1
 8001e0c:	d01e      	beq.n	8001e4c <__gedf2+0x68>
 8001e0e:	428c      	cmp	r4, r1
 8001e10:	d016      	beq.n	8001e40 <__gedf2+0x5c>
 8001e12:	2d00      	cmp	r5, #0
 8001e14:	d11e      	bne.n	8001e54 <__gedf2+0x70>
 8001e16:	4330      	orrs	r0, r6
 8001e18:	4684      	mov	ip, r0
 8001e1a:	2c00      	cmp	r4, #0
 8001e1c:	d101      	bne.n	8001e22 <__gedf2+0x3e>
 8001e1e:	433a      	orrs	r2, r7
 8001e20:	d023      	beq.n	8001e6a <__gedf2+0x86>
 8001e22:	4662      	mov	r2, ip
 8001e24:	2a00      	cmp	r2, #0
 8001e26:	d01a      	beq.n	8001e5e <__gedf2+0x7a>
 8001e28:	459a      	cmp	sl, r3
 8001e2a:	d029      	beq.n	8001e80 <__gedf2+0x9c>
 8001e2c:	4651      	mov	r1, sl
 8001e2e:	2002      	movs	r0, #2
 8001e30:	3901      	subs	r1, #1
 8001e32:	4008      	ands	r0, r1
 8001e34:	3801      	subs	r0, #1
 8001e36:	bc1c      	pop	{r2, r3, r4}
 8001e38:	4690      	mov	r8, r2
 8001e3a:	4699      	mov	r9, r3
 8001e3c:	46a2      	mov	sl, r4
 8001e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e40:	0039      	movs	r1, r7
 8001e42:	4311      	orrs	r1, r2
 8001e44:	d0e5      	beq.n	8001e12 <__gedf2+0x2e>
 8001e46:	2002      	movs	r0, #2
 8001e48:	4240      	negs	r0, r0
 8001e4a:	e7f4      	b.n	8001e36 <__gedf2+0x52>
 8001e4c:	4330      	orrs	r0, r6
 8001e4e:	d1fa      	bne.n	8001e46 <__gedf2+0x62>
 8001e50:	42ac      	cmp	r4, r5
 8001e52:	d00f      	beq.n	8001e74 <__gedf2+0x90>
 8001e54:	2c00      	cmp	r4, #0
 8001e56:	d10f      	bne.n	8001e78 <__gedf2+0x94>
 8001e58:	433a      	orrs	r2, r7
 8001e5a:	d0e7      	beq.n	8001e2c <__gedf2+0x48>
 8001e5c:	e00c      	b.n	8001e78 <__gedf2+0x94>
 8001e5e:	2201      	movs	r2, #1
 8001e60:	3b01      	subs	r3, #1
 8001e62:	4393      	bics	r3, r2
 8001e64:	0018      	movs	r0, r3
 8001e66:	3001      	adds	r0, #1
 8001e68:	e7e5      	b.n	8001e36 <__gedf2+0x52>
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0e1      	beq.n	8001e36 <__gedf2+0x52>
 8001e72:	e7db      	b.n	8001e2c <__gedf2+0x48>
 8001e74:	433a      	orrs	r2, r7
 8001e76:	d1e6      	bne.n	8001e46 <__gedf2+0x62>
 8001e78:	459a      	cmp	sl, r3
 8001e7a:	d1d7      	bne.n	8001e2c <__gedf2+0x48>
 8001e7c:	42a5      	cmp	r5, r4
 8001e7e:	dcd5      	bgt.n	8001e2c <__gedf2+0x48>
 8001e80:	42a5      	cmp	r5, r4
 8001e82:	db05      	blt.n	8001e90 <__gedf2+0xac>
 8001e84:	42be      	cmp	r6, r7
 8001e86:	d8d1      	bhi.n	8001e2c <__gedf2+0x48>
 8001e88:	d008      	beq.n	8001e9c <__gedf2+0xb8>
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	42be      	cmp	r6, r7
 8001e8e:	d2d2      	bcs.n	8001e36 <__gedf2+0x52>
 8001e90:	4650      	mov	r0, sl
 8001e92:	2301      	movs	r3, #1
 8001e94:	3801      	subs	r0, #1
 8001e96:	4398      	bics	r0, r3
 8001e98:	3001      	adds	r0, #1
 8001e9a:	e7cc      	b.n	8001e36 <__gedf2+0x52>
 8001e9c:	45c8      	cmp	r8, r9
 8001e9e:	d8c5      	bhi.n	8001e2c <__gedf2+0x48>
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	45c8      	cmp	r8, r9
 8001ea4:	d3f4      	bcc.n	8001e90 <__gedf2+0xac>
 8001ea6:	e7c6      	b.n	8001e36 <__gedf2+0x52>
 8001ea8:	000007ff 	.word	0x000007ff

08001eac <__ledf2>:
 8001eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eae:	464f      	mov	r7, r9
 8001eb0:	4646      	mov	r6, r8
 8001eb2:	46d6      	mov	lr, sl
 8001eb4:	004d      	lsls	r5, r1, #1
 8001eb6:	b5c0      	push	{r6, r7, lr}
 8001eb8:	030e      	lsls	r6, r1, #12
 8001eba:	0fc9      	lsrs	r1, r1, #31
 8001ebc:	468a      	mov	sl, r1
 8001ebe:	492e      	ldr	r1, [pc, #184]	; (8001f78 <__ledf2+0xcc>)
 8001ec0:	031f      	lsls	r7, r3, #12
 8001ec2:	005c      	lsls	r4, r3, #1
 8001ec4:	4680      	mov	r8, r0
 8001ec6:	0b36      	lsrs	r6, r6, #12
 8001ec8:	0d6d      	lsrs	r5, r5, #21
 8001eca:	4691      	mov	r9, r2
 8001ecc:	0b3f      	lsrs	r7, r7, #12
 8001ece:	0d64      	lsrs	r4, r4, #21
 8001ed0:	0fdb      	lsrs	r3, r3, #31
 8001ed2:	428d      	cmp	r5, r1
 8001ed4:	d018      	beq.n	8001f08 <__ledf2+0x5c>
 8001ed6:	428c      	cmp	r4, r1
 8001ed8:	d011      	beq.n	8001efe <__ledf2+0x52>
 8001eda:	2d00      	cmp	r5, #0
 8001edc:	d118      	bne.n	8001f10 <__ledf2+0x64>
 8001ede:	4330      	orrs	r0, r6
 8001ee0:	4684      	mov	ip, r0
 8001ee2:	2c00      	cmp	r4, #0
 8001ee4:	d11e      	bne.n	8001f24 <__ledf2+0x78>
 8001ee6:	433a      	orrs	r2, r7
 8001ee8:	d11c      	bne.n	8001f24 <__ledf2+0x78>
 8001eea:	4663      	mov	r3, ip
 8001eec:	2000      	movs	r0, #0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d030      	beq.n	8001f54 <__ledf2+0xa8>
 8001ef2:	4651      	mov	r1, sl
 8001ef4:	2002      	movs	r0, #2
 8001ef6:	3901      	subs	r1, #1
 8001ef8:	4008      	ands	r0, r1
 8001efa:	3801      	subs	r0, #1
 8001efc:	e02a      	b.n	8001f54 <__ledf2+0xa8>
 8001efe:	0039      	movs	r1, r7
 8001f00:	4311      	orrs	r1, r2
 8001f02:	d0ea      	beq.n	8001eda <__ledf2+0x2e>
 8001f04:	2002      	movs	r0, #2
 8001f06:	e025      	b.n	8001f54 <__ledf2+0xa8>
 8001f08:	4330      	orrs	r0, r6
 8001f0a:	d1fb      	bne.n	8001f04 <__ledf2+0x58>
 8001f0c:	42ac      	cmp	r4, r5
 8001f0e:	d026      	beq.n	8001f5e <__ledf2+0xb2>
 8001f10:	2c00      	cmp	r4, #0
 8001f12:	d126      	bne.n	8001f62 <__ledf2+0xb6>
 8001f14:	433a      	orrs	r2, r7
 8001f16:	d124      	bne.n	8001f62 <__ledf2+0xb6>
 8001f18:	4651      	mov	r1, sl
 8001f1a:	2002      	movs	r0, #2
 8001f1c:	3901      	subs	r1, #1
 8001f1e:	4008      	ands	r0, r1
 8001f20:	3801      	subs	r0, #1
 8001f22:	e017      	b.n	8001f54 <__ledf2+0xa8>
 8001f24:	4662      	mov	r2, ip
 8001f26:	2a00      	cmp	r2, #0
 8001f28:	d00f      	beq.n	8001f4a <__ledf2+0x9e>
 8001f2a:	459a      	cmp	sl, r3
 8001f2c:	d1e1      	bne.n	8001ef2 <__ledf2+0x46>
 8001f2e:	42a5      	cmp	r5, r4
 8001f30:	db05      	blt.n	8001f3e <__ledf2+0x92>
 8001f32:	42be      	cmp	r6, r7
 8001f34:	d8dd      	bhi.n	8001ef2 <__ledf2+0x46>
 8001f36:	d019      	beq.n	8001f6c <__ledf2+0xc0>
 8001f38:	2000      	movs	r0, #0
 8001f3a:	42be      	cmp	r6, r7
 8001f3c:	d20a      	bcs.n	8001f54 <__ledf2+0xa8>
 8001f3e:	4650      	mov	r0, sl
 8001f40:	2301      	movs	r3, #1
 8001f42:	3801      	subs	r0, #1
 8001f44:	4398      	bics	r0, r3
 8001f46:	3001      	adds	r0, #1
 8001f48:	e004      	b.n	8001f54 <__ledf2+0xa8>
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	4393      	bics	r3, r2
 8001f50:	0018      	movs	r0, r3
 8001f52:	3001      	adds	r0, #1
 8001f54:	bc1c      	pop	{r2, r3, r4}
 8001f56:	4690      	mov	r8, r2
 8001f58:	4699      	mov	r9, r3
 8001f5a:	46a2      	mov	sl, r4
 8001f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f5e:	433a      	orrs	r2, r7
 8001f60:	d1d0      	bne.n	8001f04 <__ledf2+0x58>
 8001f62:	459a      	cmp	sl, r3
 8001f64:	d1c5      	bne.n	8001ef2 <__ledf2+0x46>
 8001f66:	42a5      	cmp	r5, r4
 8001f68:	dcc3      	bgt.n	8001ef2 <__ledf2+0x46>
 8001f6a:	e7e0      	b.n	8001f2e <__ledf2+0x82>
 8001f6c:	45c8      	cmp	r8, r9
 8001f6e:	d8c0      	bhi.n	8001ef2 <__ledf2+0x46>
 8001f70:	2000      	movs	r0, #0
 8001f72:	45c8      	cmp	r8, r9
 8001f74:	d3e3      	bcc.n	8001f3e <__ledf2+0x92>
 8001f76:	e7ed      	b.n	8001f54 <__ledf2+0xa8>
 8001f78:	000007ff 	.word	0x000007ff

08001f7c <SPI_DC_LOW>:
static uint8_t displayHeight = 160;				// display height in pixels

// ---- lower level functions ----
void SPI_CS_LOW() {HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);}
void SPI_CS_HIGH() {HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);}
void SPI_DC_LOW() {HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);}
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	01db      	lsls	r3, r3, #7
 8001f84:	4803      	ldr	r0, [pc, #12]	; (8001f94 <SPI_DC_LOW+0x18>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	0019      	movs	r1, r3
 8001f8a:	f003 ffdd 	bl	8005f48 <HAL_GPIO_WritePin>
 8001f8e:	46c0      	nop			; (mov r8, r8)
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	50000400 	.word	0x50000400

08001f98 <SPI_DC_HIGH>:
void SPI_DC_HIGH() {HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);}
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	2380      	movs	r3, #128	; 0x80
 8001f9e:	01db      	lsls	r3, r3, #7
 8001fa0:	4803      	ldr	r0, [pc, #12]	; (8001fb0 <SPI_DC_HIGH+0x18>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	0019      	movs	r1, r3
 8001fa6:	f003 ffcf 	bl	8005f48 <HAL_GPIO_WritePin>
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	50000400 	.word	0x50000400

08001fb4 <sendCommand>:

void sendCommand(uint8_t cmd, uint8_t *args, uint16_t numArgs, SPI_HandleTypeDef *hspi) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60b9      	str	r1, [r7, #8]
 8001fbc:	0011      	movs	r1, r2
 8001fbe:	607b      	str	r3, [r7, #4]
 8001fc0:	230f      	movs	r3, #15
 8001fc2:	18fb      	adds	r3, r7, r3
 8001fc4:	1c02      	adds	r2, r0, #0
 8001fc6:	701a      	strb	r2, [r3, #0]
 8001fc8:	230c      	movs	r3, #12
 8001fca:	18fb      	adds	r3, r7, r3
 8001fcc:	1c0a      	adds	r2, r1, #0
 8001fce:	801a      	strh	r2, [r3, #0]
	while (HAL_SPI_GetState(hspi) == HAL_SPI_STATE_BUSY_TX);		// block next transfer request while DMA transfer is ongoing
 8001fd0:	46c0      	nop			; (mov r8, r8)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	f006 f9a3 	bl	8008320 <HAL_SPI_GetState>
 8001fda:	0003      	movs	r3, r0
 8001fdc:	2b03      	cmp	r3, #3
 8001fde:	d0f8      	beq.n	8001fd2 <sendCommand+0x1e>

	SPI_DC_LOW();	// command mode
 8001fe0:	f7ff ffcc 	bl	8001f7c <SPI_DC_LOW>
	HAL_SPI_Transmit(hspi, &cmd, 1, 1000);	// not using DMA bc it's only 1 byte
 8001fe4:	23fa      	movs	r3, #250	; 0xfa
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	220f      	movs	r2, #15
 8001fea:	18b9      	adds	r1, r7, r2
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f005 fdf0 	bl	8007bd4 <HAL_SPI_Transmit>

	SPI_DC_HIGH();	// data mode
 8001ff4:	f7ff ffd0 	bl	8001f98 <SPI_DC_HIGH>
	if (numArgs) {
 8001ff8:	230c      	movs	r3, #12
 8001ffa:	18fb      	adds	r3, r7, r3
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d007      	beq.n	8002012 <sendCommand+0x5e>
		HAL_SPI_Transmit_IT(hspi, args, numArgs);
 8002002:	230c      	movs	r3, #12
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	881a      	ldrh	r2, [r3, #0]
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	0018      	movs	r0, r3
 800200e:	f005 ff2f 	bl	8007e70 <HAL_SPI_Transmit_IT>
	}
}
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	46bd      	mov	sp, r7
 8002016:	b004      	add	sp, #16
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <sendColor>:

// no need to double pixel count since we're going into 16-bit mode
void sendColor(uint16_t color, uint16_t numPixels, SPI_HandleTypeDef *hspi) {
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	603a      	str	r2, [r7, #0]
 8002024:	1dbb      	adds	r3, r7, #6
 8002026:	1c02      	adds	r2, r0, #0
 8002028:	801a      	strh	r2, [r3, #0]
 800202a:	1d3b      	adds	r3, r7, #4
 800202c:	1c0a      	adds	r2, r1, #0
 800202e:	801a      	strh	r2, [r3, #0]
	if (numPixels == 0) return;
 8002030:	1d3b      	adds	r3, r7, #4
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d041      	beq.n	80020bc <sendColor+0xa0>

	SPI_DC_LOW();
 8002038:	f7ff ffa0 	bl	8001f7c <SPI_DC_LOW>
	uint8_t cmd = ST77XX_RAMWR;
 800203c:	210f      	movs	r1, #15
 800203e:	187b      	adds	r3, r7, r1
 8002040:	222c      	movs	r2, #44	; 0x2c
 8002042:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(hspi, &cmd, 1, 1000);
 8002044:	23fa      	movs	r3, #250	; 0xfa
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	1879      	adds	r1, r7, r1
 800204a:	6838      	ldr	r0, [r7, #0]
 800204c:	2201      	movs	r2, #1
 800204e:	f005 fdc1 	bl	8007bd4 <HAL_SPI_Transmit>
	SPI_DC_HIGH();
 8002052:	f7ff ffa1 	bl	8001f98 <SPI_DC_HIGH>

	__HAL_SPI_DISABLE(hspi);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2140      	movs	r1, #64	; 0x40
 8002062:	438a      	bics	r2, r1
 8002064:	601a      	str	r2, [r3, #0]
	SET_BIT(hspi->Instance->CR1, SPI_CR1_DFF);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2180      	movs	r1, #128	; 0x80
 8002072:	0109      	lsls	r1, r1, #4
 8002074:	430a      	orrs	r2, r1
 8002076:	601a      	str	r2, [r3, #0]
	hspi->Init.DataSize = SPI_DATASIZE_16BIT;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2280      	movs	r2, #128	; 0x80
 800207c:	0112      	lsls	r2, r2, #4
 800207e:	60da      	str	r2, [r3, #12]
	__HAL_SPI_ENABLE(hspi);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2140      	movs	r1, #64	; 0x40
 800208c:	430a      	orrs	r2, r1
 800208e:	601a      	str	r2, [r3, #0]

	pixelColor = color;
 8002090:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <sendColor+0xa8>)
 8002092:	1dba      	adds	r2, r7, #6
 8002094:	8812      	ldrh	r2, [r2, #0]
 8002096:	801a      	strh	r2, [r3, #0]
	CLEAR_BIT(hspi->hdmatx->Instance->CCR, DMA_CCR_MINC);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2180      	movs	r1, #128	; 0x80
 80020a8:	438a      	bics	r2, r1
 80020aa:	601a      	str	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(hspi, (uint8_t *)&pixelColor, numPixels);
 80020ac:	1d3b      	adds	r3, r7, #4
 80020ae:	881a      	ldrh	r2, [r3, #0]
 80020b0:	4904      	ldr	r1, [pc, #16]	; (80020c4 <sendColor+0xa8>)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	0018      	movs	r0, r3
 80020b6:	f005 ff69 	bl	8007f8c <HAL_SPI_Transmit_DMA>
 80020ba:	e000      	b.n	80020be <sendColor+0xa2>
	if (numPixels == 0) return;
 80020bc:	46c0      	nop			; (mov r8, r8)
}
 80020be:	46bd      	mov	sp, r7
 80020c0:	b004      	add	sp, #16
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	200000a4 	.word	0x200000a4

080020c8 <sendColorBuffer>:

void sendColorBuffer(uint16_t *pixels, uint16_t numPixels, SPI_HandleTypeDef *hspi) {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	607a      	str	r2, [r7, #4]
 80020d2:	200a      	movs	r0, #10
 80020d4:	183b      	adds	r3, r7, r0
 80020d6:	1c0a      	adds	r2, r1, #0
 80020d8:	801a      	strh	r2, [r3, #0]
	if (numPixels == 0) return;
 80020da:	183b      	adds	r3, r7, r0
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d034      	beq.n	800214c <sendColorBuffer+0x84>
	SPI_DC_LOW();
 80020e2:	f7ff ff4b 	bl	8001f7c <SPI_DC_LOW>
	uint8_t cmd = ST77XX_RAMWR;
 80020e6:	2117      	movs	r1, #23
 80020e8:	187b      	adds	r3, r7, r1
 80020ea:	222c      	movs	r2, #44	; 0x2c
 80020ec:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(hspi, &cmd, 1, 1000);
 80020ee:	23fa      	movs	r3, #250	; 0xfa
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	1879      	adds	r1, r7, r1
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f005 fd6c 	bl	8007bd4 <HAL_SPI_Transmit>
	SPI_DC_HIGH();
 80020fc:	f7ff ff4c 	bl	8001f98 <SPI_DC_HIGH>

	__HAL_SPI_DISABLE(hspi);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2140      	movs	r1, #64	; 0x40
 800210c:	438a      	bics	r2, r1
 800210e:	601a      	str	r2, [r3, #0]
	SET_BIT(hspi->Instance->CR1, SPI_CR1_DFF);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2180      	movs	r1, #128	; 0x80
 800211c:	0109      	lsls	r1, r1, #4
 800211e:	430a      	orrs	r2, r1
 8002120:	601a      	str	r2, [r3, #0]
	hspi->Init.DataSize = SPI_DATASIZE_16BIT;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2280      	movs	r2, #128	; 0x80
 8002126:	0112      	lsls	r2, r2, #4
 8002128:	60da      	str	r2, [r3, #12]
	__HAL_SPI_ENABLE(hspi);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2140      	movs	r1, #64	; 0x40
 8002136:	430a      	orrs	r2, r1
 8002138:	601a      	str	r2, [r3, #0]
	HAL_SPI_Transmit_IT(hspi, (uint8_t *)pixels, numPixels);
 800213a:	230a      	movs	r3, #10
 800213c:	18fb      	adds	r3, r7, r3
 800213e:	881a      	ldrh	r2, [r3, #0]
 8002140:	68f9      	ldr	r1, [r7, #12]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	0018      	movs	r0, r3
 8002146:	f005 fe93 	bl	8007e70 <HAL_SPI_Transmit_IT>
 800214a:	e000      	b.n	800214e <sendColorBuffer+0x86>
	if (numPixels == 0) return;
 800214c:	46c0      	nop			; (mov r8, r8)
}
 800214e:	46bd      	mov	sp, r7
 8002150:	b006      	add	sp, #24
 8002152:	bd80      	pop	{r7, pc}

08002154 <HAL_SPI_TxCpltCallback>:

// using only for sending data, but not commands
// dont send request when transfer is ongoing
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
	__HAL_SPI_DISABLE(hspi);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2140      	movs	r1, #64	; 0x40
 8002168:	438a      	bics	r2, r1
 800216a:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_DFF);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4909      	ldr	r1, [pc, #36]	; (800219c <HAL_SPI_TxCpltCallback+0x48>)
 8002178:	400a      	ands	r2, r1
 800217a:	601a      	str	r2, [r3, #0]
	hspi->Init.DataSize = SPI_DATASIZE_8BIT;		// HAL_SPI_Transmit_IT() does a check on this when sending
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	60da      	str	r2, [r3, #12]
	__HAL_SPI_ENABLE(hspi);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2140      	movs	r1, #64	; 0x40
 800218e:	430a      	orrs	r2, r1
 8002190:	601a      	str	r2, [r3, #0]
}
 8002192:	46c0      	nop			; (mov r8, r8)
 8002194:	46bd      	mov	sp, r7
 8002196:	b002      	add	sp, #8
 8002198:	bd80      	pop	{r7, pc}
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	fffff7ff 	.word	0xfffff7ff

080021a0 <displayInit>:

// array parser heavily based on Adafruit library code
void displayInit(uint8_t *args, SPI_HandleTypeDef *hspi) {
 80021a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
	uint8_t  numCommands, cmd, numArgs;
	uint16_t ms;
	uint8_t index = 0;
 80021aa:	220b      	movs	r2, #11
 80021ac:	0011      	movs	r1, r2
 80021ae:	18bb      	adds	r3, r7, r2
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]

	numCommands = args[index++];			// Number of commands to follow
 80021b4:	000a      	movs	r2, r1
 80021b6:	18bb      	adds	r3, r7, r2
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	18ba      	adds	r2, r7, r2
 80021bc:	1c59      	adds	r1, r3, #1
 80021be:	7011      	strb	r1, [r2, #0]
 80021c0:	001a      	movs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	189a      	adds	r2, r3, r2
 80021c6:	230f      	movs	r3, #15
 80021c8:	18fb      	adds	r3, r7, r3
 80021ca:	7812      	ldrb	r2, [r2, #0]
 80021cc:	701a      	strb	r2, [r3, #0]
	while(numCommands--) {					// For each command...
 80021ce:	e05e      	b.n	800228e <displayInit+0xee>
		cmd = args[index++];				// Read command
 80021d0:	200b      	movs	r0, #11
 80021d2:	183b      	adds	r3, r7, r0
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	183a      	adds	r2, r7, r0
 80021d8:	1c59      	adds	r1, r3, #1
 80021da:	7011      	strb	r1, [r2, #0]
 80021dc:	001a      	movs	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	189a      	adds	r2, r3, r2
 80021e2:	230a      	movs	r3, #10
 80021e4:	18fb      	adds	r3, r7, r3
 80021e6:	7812      	ldrb	r2, [r2, #0]
 80021e8:	701a      	strb	r2, [r3, #0]
		numArgs  = args[index++];			// Number of args to follow
 80021ea:	183b      	adds	r3, r7, r0
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	183a      	adds	r2, r7, r0
 80021f0:	1c59      	adds	r1, r3, #1
 80021f2:	7011      	strb	r1, [r2, #0]
 80021f4:	001a      	movs	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	189a      	adds	r2, r3, r2
 80021fa:	2609      	movs	r6, #9
 80021fc:	19bb      	adds	r3, r7, r6
 80021fe:	7812      	ldrb	r2, [r2, #0]
 8002200:	701a      	strb	r2, [r3, #0]
		ms       = numArgs & ST_CMD_DELAY;	// If hibit set, delay follows args
 8002202:	19bb      	adds	r3, r7, r6
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	b29a      	uxth	r2, r3
 8002208:	210c      	movs	r1, #12
 800220a:	187b      	adds	r3, r7, r1
 800220c:	2180      	movs	r1, #128	; 0x80
 800220e:	400a      	ands	r2, r1
 8002210:	801a      	strh	r2, [r3, #0]
		numArgs &= ~ST_CMD_DELAY;			// Mask out delay bit
 8002212:	19bb      	adds	r3, r7, r6
 8002214:	19ba      	adds	r2, r7, r6
 8002216:	7812      	ldrb	r2, [r2, #0]
 8002218:	217f      	movs	r1, #127	; 0x7f
 800221a:	400a      	ands	r2, r1
 800221c:	701a      	strb	r2, [r3, #0]
		sendCommand(cmd, &args[index], numArgs, hspi);
 800221e:	0005      	movs	r5, r0
 8002220:	183b      	adds	r3, r7, r0
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	18d1      	adds	r1, r2, r3
 8002228:	19bb      	adds	r3, r7, r6
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	b29a      	uxth	r2, r3
 800222e:	683c      	ldr	r4, [r7, #0]
 8002230:	230a      	movs	r3, #10
 8002232:	18fb      	adds	r3, r7, r3
 8002234:	7818      	ldrb	r0, [r3, #0]
 8002236:	0023      	movs	r3, r4
 8002238:	f7ff febc 	bl	8001fb4 <sendCommand>
		index += numArgs;
 800223c:	0028      	movs	r0, r5
 800223e:	183b      	adds	r3, r7, r0
 8002240:	1839      	adds	r1, r7, r0
 8002242:	19ba      	adds	r2, r7, r6
 8002244:	7809      	ldrb	r1, [r1, #0]
 8002246:	7812      	ldrb	r2, [r2, #0]
 8002248:	188a      	adds	r2, r1, r2
 800224a:	701a      	strb	r2, [r3, #0]

		if(ms) {
 800224c:	210c      	movs	r1, #12
 800224e:	187b      	adds	r3, r7, r1
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d01b      	beq.n	800228e <displayInit+0xee>
			ms = args[index++];			// Read post-command delay time (ms)
 8002256:	220b      	movs	r2, #11
 8002258:	18bb      	adds	r3, r7, r2
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	18ba      	adds	r2, r7, r2
 800225e:	1c59      	adds	r1, r3, #1
 8002260:	7011      	strb	r1, [r2, #0]
 8002262:	001a      	movs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	189b      	adds	r3, r3, r2
 8002268:	781a      	ldrb	r2, [r3, #0]
 800226a:	210c      	movs	r1, #12
 800226c:	187b      	adds	r3, r7, r1
 800226e:	801a      	strh	r2, [r3, #0]
			if(ms == 255) ms = 500;		// If 255, delay for 500 ms
 8002270:	187b      	adds	r3, r7, r1
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	2bff      	cmp	r3, #255	; 0xff
 8002276:	d104      	bne.n	8002282 <displayInit+0xe2>
 8002278:	230c      	movs	r3, #12
 800227a:	18fb      	adds	r3, r7, r3
 800227c:	22fa      	movs	r2, #250	; 0xfa
 800227e:	0052      	lsls	r2, r2, #1
 8002280:	801a      	strh	r2, [r3, #0]
			HAL_Delay(ms);
 8002282:	230c      	movs	r3, #12
 8002284:	18fb      	adds	r3, r7, r3
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	0018      	movs	r0, r3
 800228a:	f002 fedb 	bl	8005044 <HAL_Delay>
	while(numCommands--) {					// For each command...
 800228e:	220f      	movs	r2, #15
 8002290:	18bb      	adds	r3, r7, r2
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	18ba      	adds	r2, r7, r2
 8002296:	1e59      	subs	r1, r3, #1
 8002298:	7011      	strb	r1, [r2, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d198      	bne.n	80021d0 <displayInit+0x30>
		}
	}

	setDisplayOrientation(3, hspi);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	0019      	movs	r1, r3
 80022a2:	2003      	movs	r0, #3
 80022a4:	f000 fe4e 	bl	8002f44 <setDisplayOrientation>
}
 80022a8:	46c0      	nop			; (mov r8, r8)
 80022aa:	46bd      	mov	sp, r7
 80022ac:	b005      	add	sp, #20
 80022ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022b0 <TFT_startup>:

void TFT_startup(SPI_HandleTypeDef *hspi) {
 80022b0:	b590      	push	{r4, r7, lr}
 80022b2:	b0a3      	sub	sp, #140	; 0x8c
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	6078      	str	r0, [r7, #4]
	// array pulled from Adafruit's library for ST7735R driver
	uint8_t initCommands[] = {
 80022b8:	240c      	movs	r4, #12
 80022ba:	193a      	adds	r2, r7, r4
 80022bc:	4b16      	ldr	r3, [pc, #88]	; (8002318 <TFT_startup+0x68>)
 80022be:	0010      	movs	r0, r2
 80022c0:	0019      	movs	r1, r3
 80022c2:	2371      	movs	r3, #113	; 0x71
 80022c4:	001a      	movs	r2, r3
 80022c6:	f007 f935 	bl	8009534 <memcpy>
			10,                         //     10 ms delay
		ST77XX_DISPON,    ST_CMD_DELAY, //  4: Main screen turn on, no args w/delay
			100	                        //     100 ms delay
	};

	displayInit(initCommands, hspi);
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	193b      	adds	r3, r7, r4
 80022ce:	0011      	movs	r1, r2
 80022d0:	0018      	movs	r0, r3
 80022d2:	f7ff ff65 	bl	80021a0 <displayInit>
	setAddrWindow(0, 0, displayWidth, displayHeight, hspi);
 80022d6:	4b11      	ldr	r3, [pc, #68]	; (800231c <TFT_startup+0x6c>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	b29a      	uxth	r2, r3
 80022dc:	4b10      	ldr	r3, [pc, #64]	; (8002320 <TFT_startup+0x70>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	b299      	uxth	r1, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	000b      	movs	r3, r1
 80022e8:	2100      	movs	r1, #0
 80022ea:	2000      	movs	r0, #0
 80022ec:	f000 f824 	bl	8002338 <setAddrWindow>

	// set the global variables
	cursorX = 0;
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <TFT_startup+0x74>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	701a      	strb	r2, [r3, #0]
	cursorY = 0;
 80022f6:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <TFT_startup+0x78>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	701a      	strb	r2, [r3, #0]
	textSize = 1;
 80022fc:	4b0b      	ldr	r3, [pc, #44]	; (800232c <TFT_startup+0x7c>)
 80022fe:	2201      	movs	r2, #1
 8002300:	701a      	strb	r2, [r3, #0]
	textColor = ST77XX_BLACK;
 8002302:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <TFT_startup+0x80>)
 8002304:	2200      	movs	r2, #0
 8002306:	801a      	strh	r2, [r3, #0]
	bg = ST77XX_WHITE;
 8002308:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <TFT_startup+0x84>)
 800230a:	2201      	movs	r2, #1
 800230c:	4252      	negs	r2, r2
 800230e:	801a      	strh	r2, [r3, #0]
}
 8002310:	46c0      	nop			; (mov r8, r8)
 8002312:	46bd      	mov	sp, r7
 8002314:	b021      	add	sp, #132	; 0x84
 8002316:	bd90      	pop	{r4, r7, pc}
 8002318:	08009d88 	.word	0x08009d88
 800231c:	20000005 	.word	0x20000005
 8002320:	20000006 	.word	0x20000006
 8002324:	200000a0 	.word	0x200000a0
 8002328:	200000a1 	.word	0x200000a1
 800232c:	20000000 	.word	0x20000000
 8002330:	200000a2 	.word	0x200000a2
 8002334:	20000002 	.word	0x20000002

08002338 <setAddrWindow>:

// draw something: set addr window -> write to ram memory
// sets specific area on display to write pixels to
// x and y for upper left corner, w for width, h for height
void setAddrWindow(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SPI_HandleTypeDef *hspi) {
 8002338:	b5b0      	push	{r4, r5, r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	0005      	movs	r5, r0
 8002340:	000c      	movs	r4, r1
 8002342:	0010      	movs	r0, r2
 8002344:	0019      	movs	r1, r3
 8002346:	1dbb      	adds	r3, r7, #6
 8002348:	1c2a      	adds	r2, r5, #0
 800234a:	801a      	strh	r2, [r3, #0]
 800234c:	1d3b      	adds	r3, r7, #4
 800234e:	1c22      	adds	r2, r4, #0
 8002350:	801a      	strh	r2, [r3, #0]
 8002352:	1cbb      	adds	r3, r7, #2
 8002354:	1c02      	adds	r2, r0, #0
 8002356:	801a      	strh	r2, [r3, #0]
 8002358:	003b      	movs	r3, r7
 800235a:	1c0a      	adds	r2, r1, #0
 800235c:	801a      	strh	r2, [r3, #0]
	// building 32-bit window args
	uint8_t temp[4];
	temp[0] = (x & (0xFF00)) >> 8;
 800235e:	1dbb      	adds	r3, r7, #6
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	0a1b      	lsrs	r3, r3, #8
 8002364:	b29b      	uxth	r3, r3
 8002366:	b2da      	uxtb	r2, r3
 8002368:	210c      	movs	r1, #12
 800236a:	187b      	adds	r3, r7, r1
 800236c:	701a      	strb	r2, [r3, #0]
	temp[1] = x & (0xFF);
 800236e:	1dbb      	adds	r3, r7, #6
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	b2da      	uxtb	r2, r3
 8002374:	187b      	adds	r3, r7, r1
 8002376:	705a      	strb	r2, [r3, #1]
	temp[2] = ((x+w-1) & (0xFF00)) >> 8;
 8002378:	1dbb      	adds	r3, r7, #6
 800237a:	881a      	ldrh	r2, [r3, #0]
 800237c:	1cbb      	adds	r3, r7, #2
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	18d3      	adds	r3, r2, r3
 8002382:	3b01      	subs	r3, #1
 8002384:	121b      	asrs	r3, r3, #8
 8002386:	b2da      	uxtb	r2, r3
 8002388:	187b      	adds	r3, r7, r1
 800238a:	709a      	strb	r2, [r3, #2]
	temp[3] = (x+w-1) & (0xFF);
 800238c:	1dbb      	adds	r3, r7, #6
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	b2da      	uxtb	r2, r3
 8002392:	1cbb      	adds	r3, r7, #2
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	b2db      	uxtb	r3, r3
 8002398:	18d3      	adds	r3, r2, r3
 800239a:	b2db      	uxtb	r3, r3
 800239c:	3b01      	subs	r3, #1
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	187b      	adds	r3, r7, r1
 80023a2:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_CASET, temp, 4, hspi);
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	000c      	movs	r4, r1
 80023a8:	1879      	adds	r1, r7, r1
 80023aa:	2204      	movs	r2, #4
 80023ac:	202a      	movs	r0, #42	; 0x2a
 80023ae:	f7ff fe01 	bl	8001fb4 <sendCommand>

	temp[0] = (y & (0xFF00)) >> 8;
 80023b2:	1d3b      	adds	r3, r7, #4
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	0a1b      	lsrs	r3, r3, #8
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	0021      	movs	r1, r4
 80023be:	187b      	adds	r3, r7, r1
 80023c0:	701a      	strb	r2, [r3, #0]
	temp[1] = y & (0xFF);
 80023c2:	1d3b      	adds	r3, r7, #4
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	187b      	adds	r3, r7, r1
 80023ca:	705a      	strb	r2, [r3, #1]
	temp[2] = ((y+h-1) & (0xFF00)) >> 8;
 80023cc:	1d3b      	adds	r3, r7, #4
 80023ce:	881a      	ldrh	r2, [r3, #0]
 80023d0:	003b      	movs	r3, r7
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	18d3      	adds	r3, r2, r3
 80023d6:	3b01      	subs	r3, #1
 80023d8:	121b      	asrs	r3, r3, #8
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	187b      	adds	r3, r7, r1
 80023de:	709a      	strb	r2, [r3, #2]
	temp[3] = (y+h-1) & (0x00FF);
 80023e0:	1d3b      	adds	r3, r7, #4
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	003b      	movs	r3, r7
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	18d3      	adds	r3, r2, r3
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	3b01      	subs	r3, #1
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	187b      	adds	r3, r7, r1
 80023f6:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_RASET, temp, 4, hspi);
 80023f8:	6a3b      	ldr	r3, [r7, #32]
 80023fa:	1879      	adds	r1, r7, r1
 80023fc:	2204      	movs	r2, #4
 80023fe:	202b      	movs	r0, #43	; 0x2b
 8002400:	f7ff fdd8 	bl	8001fb4 <sendCommand>
}
 8002404:	46c0      	nop			; (mov r8, r8)
 8002406:	46bd      	mov	sp, r7
 8002408:	b004      	add	sp, #16
 800240a:	bdb0      	pop	{r4, r5, r7, pc}

0800240c <drawHLine>:
	setAddrWindow(x, y, 1, 1, hspi);
	sendColor(color, 1, hspi);
}

// draw a horizontal line. coordinates are for left point
void drawHLine(int x, int y, int size, uint16_t color, SPI_HandleTypeDef *hspi) {
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af02      	add	r7, sp, #8
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
 8002418:	001a      	movs	r2, r3
 800241a:	1cbb      	adds	r3, r7, #2
 800241c:	801a      	strh	r2, [r3, #0]
	if (size < 0) abs(size);		// no x adjustments for intended size

	// bounds checking. draw as much of the line as you can
	// constrain x so it's not out of bounds
	if (x < 0) x = 0;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2b00      	cmp	r3, #0
 8002422:	da01      	bge.n	8002428 <drawHLine+0x1c>
 8002424:	2300      	movs	r3, #0
 8002426:	60fb      	str	r3, [r7, #12]
	if (x > displayWidth) x = displayWidth;
 8002428:	4b1f      	ldr	r3, [pc, #124]	; (80024a8 <drawHLine+0x9c>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	001a      	movs	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4293      	cmp	r3, r2
 8002432:	dd02      	ble.n	800243a <drawHLine+0x2e>
 8002434:	4b1c      	ldr	r3, [pc, #112]	; (80024a8 <drawHLine+0x9c>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	60fb      	str	r3, [r7, #12]
	// constrain size so it doesn't go out of bounds
	if (x+size > displayWidth) size = displayWidth-x;
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	18d3      	adds	r3, r2, r3
 8002440:	4a19      	ldr	r2, [pc, #100]	; (80024a8 <drawHLine+0x9c>)
 8002442:	7812      	ldrb	r2, [r2, #0]
 8002444:	4293      	cmp	r3, r2
 8002446:	dd05      	ble.n	8002454 <drawHLine+0x48>
 8002448:	4b17      	ldr	r3, [pc, #92]	; (80024a8 <drawHLine+0x9c>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	001a      	movs	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	607b      	str	r3, [r7, #4]
	if (x+size < 0) size = 0-x;
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	18d3      	adds	r3, r2, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	da02      	bge.n	8002464 <drawHLine+0x58>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	425b      	negs	r3, r3
 8002462:	607b      	str	r3, [r7, #4]
	if ((y > displayHeight) || (y < 0)) return;		// don't draw if y is out of bounds
 8002464:	4b11      	ldr	r3, [pc, #68]	; (80024ac <drawHLine+0xa0>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	001a      	movs	r2, r3
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	4293      	cmp	r3, r2
 800246e:	dc16      	bgt.n	800249e <drawHLine+0x92>
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	db13      	blt.n	800249e <drawHLine+0x92>

	setAddrWindow(x, y, size, 1, hspi);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	b298      	uxth	r0, r3
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	b299      	uxth	r1, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	b29a      	uxth	r2, r3
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	2301      	movs	r3, #1
 8002488:	f7ff ff56 	bl	8002338 <setAddrWindow>
	sendColor(color, size, hspi);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	b299      	uxth	r1, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	1cbb      	adds	r3, r7, #2
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	0018      	movs	r0, r3
 8002498:	f7ff fdc0 	bl	800201c <sendColor>
 800249c:	e000      	b.n	80024a0 <drawHLine+0x94>
	if ((y > displayHeight) || (y < 0)) return;		// don't draw if y is out of bounds
 800249e:	46c0      	nop			; (mov r8, r8)
}
 80024a0:	46bd      	mov	sp, r7
 80024a2:	b004      	add	sp, #16
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	20000005 	.word	0x20000005
 80024ac:	20000006 	.word	0x20000006

080024b0 <drawVLine>:

// draws a vertical line. coordinates are for top point
void drawVLine(int x, int y, int size, uint16_t color, SPI_HandleTypeDef *hspi) {
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af02      	add	r7, sp, #8
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
 80024bc:	001a      	movs	r2, r3
 80024be:	1cbb      	adds	r3, r7, #2
 80024c0:	801a      	strh	r2, [r3, #0]
	if (size < 0) abs(size);		// no y adjustments for intended size

	// bounds checking
	// constrain y so it's not out of bounds
	if (y < 0) y = 0;
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	da01      	bge.n	80024cc <drawVLine+0x1c>
 80024c8:	2300      	movs	r3, #0
 80024ca:	60bb      	str	r3, [r7, #8]
	if (y > displayHeight) y = displayHeight;
 80024cc:	4b1f      	ldr	r3, [pc, #124]	; (800254c <drawVLine+0x9c>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	001a      	movs	r2, r3
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	4293      	cmp	r3, r2
 80024d6:	dd02      	ble.n	80024de <drawVLine+0x2e>
 80024d8:	4b1c      	ldr	r3, [pc, #112]	; (800254c <drawVLine+0x9c>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	60bb      	str	r3, [r7, #8]
	// constrain size so it doesn't go out of bounds
	if (y+size > displayHeight) size = displayHeight-y;
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	18d3      	adds	r3, r2, r3
 80024e4:	4a19      	ldr	r2, [pc, #100]	; (800254c <drawVLine+0x9c>)
 80024e6:	7812      	ldrb	r2, [r2, #0]
 80024e8:	4293      	cmp	r3, r2
 80024ea:	dd05      	ble.n	80024f8 <drawVLine+0x48>
 80024ec:	4b17      	ldr	r3, [pc, #92]	; (800254c <drawVLine+0x9c>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	001a      	movs	r2, r3
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	607b      	str	r3, [r7, #4]
	if (y+size < 0) size = 0-y;
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	18d3      	adds	r3, r2, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	da02      	bge.n	8002508 <drawVLine+0x58>
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	425b      	negs	r3, r3
 8002506:	607b      	str	r3, [r7, #4]
	if ((x > displayWidth) || (x < 0)) return;		// don't draw if x is out of bounds
 8002508:	4b11      	ldr	r3, [pc, #68]	; (8002550 <drawVLine+0xa0>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	001a      	movs	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4293      	cmp	r3, r2
 8002512:	dc17      	bgt.n	8002544 <drawVLine+0x94>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	db14      	blt.n	8002544 <drawVLine+0x94>

	setAddrWindow(x, y, 1, size, hspi);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	b298      	uxth	r0, r3
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	b299      	uxth	r1, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	b29a      	uxth	r2, r3
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	0013      	movs	r3, r2
 800252c:	2201      	movs	r2, #1
 800252e:	f7ff ff03 	bl	8002338 <setAddrWindow>
	sendColor(color, size, hspi);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	b299      	uxth	r1, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	1cbb      	adds	r3, r7, #2
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	0018      	movs	r0, r3
 800253e:	f7ff fd6d 	bl	800201c <sendColor>
 8002542:	e000      	b.n	8002546 <drawVLine+0x96>
	if ((x > displayWidth) || (x < 0)) return;		// don't draw if x is out of bounds
 8002544:	46c0      	nop			; (mov r8, r8)
}
 8002546:	46bd      	mov	sp, r7
 8002548:	b004      	add	sp, #16
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20000006 	.word	0x20000006
 8002550:	20000005 	.word	0x20000005

08002554 <drawBuffer>:

// draws on a specific region with input 16-bit buffer
void drawBuffer(int x, int y, int w, int h, uint16_t *buffer, uint16_t bufferSize, SPI_HandleTypeDef *hspi) {
 8002554:	b590      	push	{r4, r7, lr}
 8002556:	b087      	sub	sp, #28
 8002558:	af02      	add	r7, sp, #8
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
 8002560:	603b      	str	r3, [r7, #0]
	// also don't call this with buffer size too big bc there's not enough ram for all pixels of display
	// no checking just don't do it pls thx. i don't know the number so i'm not doing it. you can just watch it crash
	if (x < 0 || y < 0 || w < 0 || h < 0) return;				// not dealing with negative numbers
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	db31      	blt.n	80025cc <drawBuffer+0x78>
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	db2e      	blt.n	80025cc <drawBuffer+0x78>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	db2b      	blt.n	80025cc <drawBuffer+0x78>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	db28      	blt.n	80025cc <drawBuffer+0x78>
	if (x+w > displayWidth || y+h > displayHeight) return;		// not dealing with out of bounds
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	18d3      	adds	r3, r2, r3
 8002580:	4a16      	ldr	r2, [pc, #88]	; (80025dc <drawBuffer+0x88>)
 8002582:	7812      	ldrb	r2, [r2, #0]
 8002584:	4293      	cmp	r3, r2
 8002586:	dc23      	bgt.n	80025d0 <drawBuffer+0x7c>
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	18d3      	adds	r3, r2, r3
 800258e:	4a14      	ldr	r2, [pc, #80]	; (80025e0 <drawBuffer+0x8c>)
 8002590:	7812      	ldrb	r2, [r2, #0]
 8002592:	4293      	cmp	r3, r2
 8002594:	dc1c      	bgt.n	80025d0 <drawBuffer+0x7c>
	if (bufferSize == 0) return;
 8002596:	2324      	movs	r3, #36	; 0x24
 8002598:	18fb      	adds	r3, r7, r3
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d019      	beq.n	80025d4 <drawBuffer+0x80>

	setAddrWindow(x, y, w, h, hspi);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	b298      	uxth	r0, r3
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	b299      	uxth	r1, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	b29c      	uxth	r4, r3
 80025b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	0023      	movs	r3, r4
 80025b6:	f7ff febf 	bl	8002338 <setAddrWindow>
	sendColorBuffer(buffer, bufferSize, hspi);
 80025ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025bc:	2324      	movs	r3, #36	; 0x24
 80025be:	18fb      	adds	r3, r7, r3
 80025c0:	8819      	ldrh	r1, [r3, #0]
 80025c2:	6a3b      	ldr	r3, [r7, #32]
 80025c4:	0018      	movs	r0, r3
 80025c6:	f7ff fd7f 	bl	80020c8 <sendColorBuffer>
 80025ca:	e004      	b.n	80025d6 <drawBuffer+0x82>
	if (x < 0 || y < 0 || w < 0 || h < 0) return;				// not dealing with negative numbers
 80025cc:	46c0      	nop			; (mov r8, r8)
 80025ce:	e002      	b.n	80025d6 <drawBuffer+0x82>
	if (x+w > displayWidth || y+h > displayHeight) return;		// not dealing with out of bounds
 80025d0:	46c0      	nop			; (mov r8, r8)
 80025d2:	e000      	b.n	80025d6 <drawBuffer+0x82>
	if (bufferSize == 0) return;
 80025d4:	46c0      	nop			; (mov r8, r8)
}
 80025d6:	46bd      	mov	sp, r7
 80025d8:	b005      	add	sp, #20
 80025da:	bd90      	pop	{r4, r7, pc}
 80025dc:	20000005 	.word	0x20000005
 80025e0:	20000006 	.word	0x20000006

080025e4 <drawRect>:
		}
	}
}

// draw an empty rectangle
void drawRect(int x, int y, int w, int h, uint16_t color, SPI_HandleTypeDef *hspi) {
 80025e4:	b5b0      	push	{r4, r5, r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
 80025f0:	603b      	str	r3, [r7, #0]
	drawHLine(x, y, w, color, hspi);
 80025f2:	2520      	movs	r5, #32
 80025f4:	197b      	adds	r3, r7, r5
 80025f6:	881c      	ldrh	r4, [r3, #0]
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	68b9      	ldr	r1, [r7, #8]
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	0023      	movs	r3, r4
 8002604:	f7ff ff02 	bl	800240c <drawHLine>
	drawHLine(x, y+h-1, w, color, hspi);
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	18d3      	adds	r3, r2, r3
 800260e:	1e59      	subs	r1, r3, #1
 8002610:	197b      	adds	r3, r7, r5
 8002612:	881c      	ldrh	r4, [r3, #0]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	0023      	movs	r3, r4
 800261e:	f7ff fef5 	bl	800240c <drawHLine>
	drawVLine(x, y, h, color, hspi);
 8002622:	197b      	adds	r3, r7, r5
 8002624:	881c      	ldrh	r4, [r3, #0]
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	68b9      	ldr	r1, [r7, #8]
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	0023      	movs	r3, r4
 8002632:	f7ff ff3d 	bl	80024b0 <drawVLine>
	drawVLine(x+w-1, y, h, color, hspi);
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	18d3      	adds	r3, r2, r3
 800263c:	1e58      	subs	r0, r3, #1
 800263e:	197b      	adds	r3, r7, r5
 8002640:	881c      	ldrh	r4, [r3, #0]
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	68b9      	ldr	r1, [r7, #8]
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	0023      	movs	r3, r4
 800264c:	f7ff ff30 	bl	80024b0 <drawVLine>
}
 8002650:	46c0      	nop			; (mov r8, r8)
 8002652:	46bd      	mov	sp, r7
 8002654:	b004      	add	sp, #16
 8002656:	bdb0      	pop	{r4, r5, r7, pc}

08002658 <fillRect>:

// draw a filled rectangle
void fillRect(int x, int y, int w, int h, uint16_t color, SPI_HandleTypeDef *hspi) {
 8002658:	b590      	push	{r4, r7, lr}
 800265a:	b087      	sub	sp, #28
 800265c:	af02      	add	r7, sp, #8
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	603b      	str	r3, [r7, #0]
//	if (x > displayWidth) x = displayWidth;
//	if (y > displayHeight) y = displayHeight;
//	if (x+w > displayWidth) w = displayWidth-x;
//	if (y+h > displayHeight) h = displayHeight-y;

	setAddrWindow(x, y, w, h, hspi);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	b298      	uxth	r0, r3
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	b299      	uxth	r1, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	b29a      	uxth	r2, r3
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	b29c      	uxth	r4, r3
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	0023      	movs	r3, r4
 800267c:	f7ff fe5c 	bl	8002338 <setAddrWindow>
	sendColor(color, w*h, hspi);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	b29b      	uxth	r3, r3
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	b292      	uxth	r2, r2
 8002688:	4353      	muls	r3, r2
 800268a:	b299      	uxth	r1, r3
 800268c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800268e:	2320      	movs	r3, #32
 8002690:	18fb      	adds	r3, r7, r3
 8002692:	881b      	ldrh	r3, [r3, #0]
 8002694:	0018      	movs	r0, r3
 8002696:	f7ff fcc1 	bl	800201c <sendColor>
}
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	46bd      	mov	sp, r7
 800269e:	b005      	add	sp, #20
 80026a0:	bd90      	pop	{r4, r7, pc}
	...

080026a4 <fillScreen>:

// a big rectangle, but for the whole screen
void fillScreen(uint16_t color, SPI_HandleTypeDef *hspi) {
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af02      	add	r7, sp, #8
 80026aa:	0002      	movs	r2, r0
 80026ac:	6039      	str	r1, [r7, #0]
 80026ae:	1dbb      	adds	r3, r7, #6
 80026b0:	801a      	strh	r2, [r3, #0]
	setAddrWindow(0, 0, displayWidth, displayHeight, hspi);
 80026b2:	4b0f      	ldr	r3, [pc, #60]	; (80026f0 <fillScreen+0x4c>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <fillScreen+0x50>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	b299      	uxth	r1, r3
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	000b      	movs	r3, r1
 80026c4:	2100      	movs	r1, #0
 80026c6:	2000      	movs	r0, #0
 80026c8:	f7ff fe36 	bl	8002338 <setAddrWindow>
	sendColor(color, displayWidth*displayHeight, hspi);
 80026cc:	4b08      	ldr	r3, [pc, #32]	; (80026f0 <fillScreen+0x4c>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	4a08      	ldr	r2, [pc, #32]	; (80026f4 <fillScreen+0x50>)
 80026d4:	7812      	ldrb	r2, [r2, #0]
 80026d6:	b292      	uxth	r2, r2
 80026d8:	4353      	muls	r3, r2
 80026da:	b299      	uxth	r1, r3
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	1dbb      	adds	r3, r7, #6
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	0018      	movs	r0, r3
 80026e4:	f7ff fc9a 	bl	800201c <sendColor>
}
 80026e8:	46c0      	nop			; (mov r8, r8)
 80026ea:	46bd      	mov	sp, r7
 80026ec:	b002      	add	sp, #8
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	20000005 	.word	0x20000005
 80026f4:	20000006 	.word	0x20000006

080026f8 <clearScreen>:

void clearScreen(uint16_t backgroundColor, SPI_HandleTypeDef *hspi) {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	0002      	movs	r2, r0
 8002700:	6039      	str	r1, [r7, #0]
 8002702:	1dbb      	adds	r3, r7, #6
 8002704:	801a      	strh	r2, [r3, #0]
	bg = backgroundColor;
 8002706:	4b07      	ldr	r3, [pc, #28]	; (8002724 <clearScreen+0x2c>)
 8002708:	1dba      	adds	r2, r7, #6
 800270a:	8812      	ldrh	r2, [r2, #0]
 800270c:	801a      	strh	r2, [r3, #0]
	fillScreen(backgroundColor, hspi);
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	1dbb      	adds	r3, r7, #6
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	0011      	movs	r1, r2
 8002716:	0018      	movs	r0, r3
 8002718:	f7ff ffc4 	bl	80026a4 <fillScreen>
}
 800271c:	46c0      	nop			; (mov r8, r8)
 800271e:	46bd      	mov	sp, r7
 8002720:	b002      	add	sp, #8
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20000002 	.word	0x20000002

08002728 <drawChar>:
// ---- end of basic shapes and lines ----

// ---- text functions ----
// draw a character. based on 6x8 font, but scalable
// instead of drawing pixel by pixel, function builds a buffer first and then sends
void drawChar(uint8_t ch, SPI_HandleTypeDef *hspi) {
 8002728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800272a:	b095      	sub	sp, #84	; 0x54
 800272c:	af04      	add	r7, sp, #16
 800272e:	61b9      	str	r1, [r7, #24]
 8002730:	221f      	movs	r2, #31
 8002732:	18ba      	adds	r2, r7, r2
 8002734:	1c01      	adds	r1, r0, #0
 8002736:	7011      	strb	r1, [r2, #0]
 8002738:	466a      	mov	r2, sp
 800273a:	607a      	str	r2, [r7, #4]
	uint16_t bufferSize = 6*8*textSize*textSize;
 800273c:	4ab7      	ldr	r2, [pc, #732]	; (8002a1c <drawChar+0x2f4>)
 800273e:	7812      	ldrb	r2, [r2, #0]
 8002740:	b292      	uxth	r2, r2
 8002742:	49b6      	ldr	r1, [pc, #728]	; (8002a1c <drawChar+0x2f4>)
 8002744:	7809      	ldrb	r1, [r1, #0]
 8002746:	b289      	uxth	r1, r1
 8002748:	434a      	muls	r2, r1
 800274a:	b291      	uxth	r1, r2
 800274c:	221a      	movs	r2, #26
 800274e:	2018      	movs	r0, #24
 8002750:	4684      	mov	ip, r0
 8002752:	44bc      	add	ip, r7
 8002754:	4462      	add	r2, ip
 8002756:	2030      	movs	r0, #48	; 0x30
 8002758:	4341      	muls	r1, r0
 800275a:	8011      	strh	r1, [r2, #0]
	uint16_t buffer[bufferSize];
 800275c:	221a      	movs	r2, #26
 800275e:	2118      	movs	r1, #24
 8002760:	468c      	mov	ip, r1
 8002762:	44bc      	add	ip, r7
 8002764:	4462      	add	r2, ip
 8002766:	8812      	ldrh	r2, [r2, #0]
 8002768:	0011      	movs	r1, r2
 800276a:	3901      	subs	r1, #1
 800276c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800276e:	613a      	str	r2, [r7, #16]
 8002770:	2100      	movs	r1, #0
 8002772:	6179      	str	r1, [r7, #20]
 8002774:	6939      	ldr	r1, [r7, #16]
 8002776:	0f09      	lsrs	r1, r1, #28
 8002778:	6978      	ldr	r0, [r7, #20]
 800277a:	0106      	lsls	r6, r0, #4
 800277c:	430e      	orrs	r6, r1
 800277e:	6939      	ldr	r1, [r7, #16]
 8002780:	010d      	lsls	r5, r1, #4
 8002782:	60ba      	str	r2, [r7, #8]
 8002784:	2100      	movs	r1, #0
 8002786:	60f9      	str	r1, [r7, #12]
 8002788:	68bd      	ldr	r5, [r7, #8]
 800278a:	68fe      	ldr	r6, [r7, #12]
 800278c:	0029      	movs	r1, r5
 800278e:	0f09      	lsrs	r1, r1, #28
 8002790:	0030      	movs	r0, r6
 8002792:	0104      	lsls	r4, r0, #4
 8002794:	430c      	orrs	r4, r1
 8002796:	0029      	movs	r1, r5
 8002798:	010b      	lsls	r3, r1, #4
 800279a:	0013      	movs	r3, r2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	3301      	adds	r3, #1
 80027a0:	3307      	adds	r3, #7
 80027a2:	08db      	lsrs	r3, r3, #3
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	466a      	mov	r2, sp
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	469d      	mov	sp, r3
 80027ac:	ab04      	add	r3, sp, #16
 80027ae:	3301      	adds	r3, #1
 80027b0:	085b      	lsrs	r3, r3, #1
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	62bb      	str	r3, [r7, #40]	; 0x28
	int16_t rowOffset, address;

	// Char bitmap = 5 columns
	for (int8_t i=0; i<5; i++) {
 80027b6:	2325      	movs	r3, #37	; 0x25
 80027b8:	2218      	movs	r2, #24
 80027ba:	4694      	mov	ip, r2
 80027bc:	44bc      	add	ip, r7
 80027be:	4463      	add	r3, ip
 80027c0:	2200      	movs	r2, #0
 80027c2:	701a      	strb	r2, [r3, #0]
 80027c4:	e1e0      	b.n	8002b88 <drawChar+0x460>
		uint8_t line = font[ch*5+i];
 80027c6:	231f      	movs	r3, #31
 80027c8:	18fb      	adds	r3, r7, r3
 80027ca:	781a      	ldrb	r2, [r3, #0]
 80027cc:	0013      	movs	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	189a      	adds	r2, r3, r2
 80027d2:	2325      	movs	r3, #37	; 0x25
 80027d4:	2118      	movs	r1, #24
 80027d6:	468c      	mov	ip, r1
 80027d8:	44bc      	add	ip, r7
 80027da:	4463      	add	r3, ip
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	b25b      	sxtb	r3, r3
 80027e0:	18d2      	adds	r2, r2, r3
 80027e2:	2324      	movs	r3, #36	; 0x24
 80027e4:	2118      	movs	r1, #24
 80027e6:	468c      	mov	ip, r1
 80027e8:	44bc      	add	ip, r7
 80027ea:	4463      	add	r3, ip
 80027ec:	498c      	ldr	r1, [pc, #560]	; (8002a20 <drawChar+0x2f8>)
 80027ee:	5c8a      	ldrb	r2, [r1, r2]
 80027f0:	701a      	strb	r2, [r3, #0]
		for (int8_t j=0; j<8; j++, line >>= 1) {
 80027f2:	2323      	movs	r3, #35	; 0x23
 80027f4:	2218      	movs	r2, #24
 80027f6:	4694      	mov	ip, r2
 80027f8:	44bc      	add	ip, r7
 80027fa:	4463      	add	r3, ip
 80027fc:	2200      	movs	r2, #0
 80027fe:	701a      	strb	r2, [r3, #0]
 8002800:	e1ac      	b.n	8002b5c <drawChar+0x434>
			// draw character pixel
			if (line & 1) {
 8002802:	2324      	movs	r3, #36	; 0x24
 8002804:	2218      	movs	r2, #24
 8002806:	4694      	mov	ip, r2
 8002808:	44bc      	add	ip, r7
 800280a:	4463      	add	r3, ip
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2201      	movs	r2, #1
 8002810:	4013      	ands	r3, r2
 8002812:	d100      	bne.n	8002816 <drawChar+0xee>
 8002814:	e0be      	b.n	8002994 <drawChar+0x26c>
				if (textSize == 1) {
 8002816:	4b81      	ldr	r3, [pc, #516]	; (8002a1c <drawChar+0x2f4>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d118      	bne.n	8002850 <drawChar+0x128>
					buffer[i+j*6] = textColor;
 800281e:	2325      	movs	r3, #37	; 0x25
 8002820:	2218      	movs	r2, #24
 8002822:	4694      	mov	ip, r2
 8002824:	44bc      	add	ip, r7
 8002826:	4463      	add	r3, ip
 8002828:	2100      	movs	r1, #0
 800282a:	5659      	ldrsb	r1, [r3, r1]
 800282c:	2323      	movs	r3, #35	; 0x23
 800282e:	2218      	movs	r2, #24
 8002830:	4694      	mov	ip, r2
 8002832:	44bc      	add	ip, r7
 8002834:	4463      	add	r3, ip
 8002836:	2200      	movs	r2, #0
 8002838:	569a      	ldrsb	r2, [r3, r2]
 800283a:	0013      	movs	r3, r2
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	189b      	adds	r3, r3, r2
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	18ca      	adds	r2, r1, r3
 8002844:	4b77      	ldr	r3, [pc, #476]	; (8002a24 <drawChar+0x2fc>)
 8002846:	8819      	ldrh	r1, [r3, #0]
 8002848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284a:	0052      	lsls	r2, r2, #1
 800284c:	52d1      	strh	r1, [r2, r3]
 800284e:	e16f      	b.n	8002b30 <drawChar+0x408>
				}
				else {
					// indexing scheme for textSize > 1
					for (int8_t k = 0; k < textSize; k++) {
 8002850:	2322      	movs	r3, #34	; 0x22
 8002852:	2218      	movs	r2, #24
 8002854:	4694      	mov	ip, r2
 8002856:	44bc      	add	ip, r7
 8002858:	4463      	add	r3, ip
 800285a:	2200      	movs	r2, #0
 800285c:	701a      	strb	r2, [r3, #0]
 800285e:	e08c      	b.n	800297a <drawChar+0x252>
						rowOffset = textSize*6;
 8002860:	4b6e      	ldr	r3, [pc, #440]	; (8002a1c <drawChar+0x2f4>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	b29b      	uxth	r3, r3
 8002866:	1c1a      	adds	r2, r3, #0
 8002868:	1c13      	adds	r3, r2, #0
 800286a:	18db      	adds	r3, r3, r3
 800286c:	189b      	adds	r3, r3, r2
 800286e:	18db      	adds	r3, r3, r3
 8002870:	b29a      	uxth	r2, r3
 8002872:	2326      	movs	r3, #38	; 0x26
 8002874:	2118      	movs	r1, #24
 8002876:	468c      	mov	ip, r1
 8002878:	44bc      	add	ip, r7
 800287a:	4463      	add	r3, ip
 800287c:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 800287e:	2321      	movs	r3, #33	; 0x21
 8002880:	2218      	movs	r2, #24
 8002882:	4694      	mov	ip, r2
 8002884:	44bc      	add	ip, r7
 8002886:	4463      	add	r3, ip
 8002888:	2200      	movs	r2, #0
 800288a:	701a      	strb	r2, [r3, #0]
 800288c:	e05e      	b.n	800294c <drawChar+0x224>
							address = (textSize*textSize*j*6)+(i*textSize);
 800288e:	4b63      	ldr	r3, [pc, #396]	; (8002a1c <drawChar+0x2f4>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	b29b      	uxth	r3, r3
 8002894:	4a61      	ldr	r2, [pc, #388]	; (8002a1c <drawChar+0x2f4>)
 8002896:	7812      	ldrb	r2, [r2, #0]
 8002898:	b292      	uxth	r2, r2
 800289a:	4353      	muls	r3, r2
 800289c:	b29b      	uxth	r3, r3
 800289e:	2223      	movs	r2, #35	; 0x23
 80028a0:	2118      	movs	r1, #24
 80028a2:	468c      	mov	ip, r1
 80028a4:	44bc      	add	ip, r7
 80028a6:	4462      	add	r2, ip
 80028a8:	7812      	ldrb	r2, [r2, #0]
 80028aa:	b252      	sxtb	r2, r2
 80028ac:	b292      	uxth	r2, r2
 80028ae:	4353      	muls	r3, r2
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	1c1a      	adds	r2, r3, #0
 80028b4:	1c13      	adds	r3, r2, #0
 80028b6:	18db      	adds	r3, r3, r3
 80028b8:	189b      	adds	r3, r3, r2
 80028ba:	18db      	adds	r3, r3, r3
 80028bc:	b29a      	uxth	r2, r3
 80028be:	2325      	movs	r3, #37	; 0x25
 80028c0:	2118      	movs	r1, #24
 80028c2:	468c      	mov	ip, r1
 80028c4:	44bc      	add	ip, r7
 80028c6:	4463      	add	r3, ip
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	b25b      	sxtb	r3, r3
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	4953      	ldr	r1, [pc, #332]	; (8002a1c <drawChar+0x2f4>)
 80028d0:	7809      	ldrb	r1, [r1, #0]
 80028d2:	b289      	uxth	r1, r1
 80028d4:	434b      	muls	r3, r1
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	18d3      	adds	r3, r2, r3
 80028da:	b29a      	uxth	r2, r3
 80028dc:	210e      	movs	r1, #14
 80028de:	2418      	movs	r4, #24
 80028e0:	193b      	adds	r3, r7, r4
 80028e2:	185b      	adds	r3, r3, r1
 80028e4:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 80028e6:	2322      	movs	r3, #34	; 0x22
 80028e8:	2218      	movs	r2, #24
 80028ea:	4694      	mov	ip, r2
 80028ec:	44bc      	add	ip, r7
 80028ee:	4463      	add	r3, ip
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	b25b      	sxtb	r3, r3
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	2226      	movs	r2, #38	; 0x26
 80028f8:	2018      	movs	r0, #24
 80028fa:	4684      	mov	ip, r0
 80028fc:	44bc      	add	ip, r7
 80028fe:	4462      	add	r2, ip
 8002900:	8812      	ldrh	r2, [r2, #0]
 8002902:	4353      	muls	r3, r2
 8002904:	b29a      	uxth	r2, r3
 8002906:	2021      	movs	r0, #33	; 0x21
 8002908:	193b      	adds	r3, r7, r4
 800290a:	181b      	adds	r3, r3, r0
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	b25b      	sxtb	r3, r3
 8002910:	b29b      	uxth	r3, r3
 8002912:	18d3      	adds	r3, r2, r3
 8002914:	b29a      	uxth	r2, r3
 8002916:	193b      	adds	r3, r7, r4
 8002918:	185b      	adds	r3, r3, r1
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	18d3      	adds	r3, r2, r3
 800291e:	b29a      	uxth	r2, r3
 8002920:	193b      	adds	r3, r7, r4
 8002922:	185b      	adds	r3, r3, r1
 8002924:	801a      	strh	r2, [r3, #0]
							buffer[address] = textColor;
 8002926:	193b      	adds	r3, r7, r4
 8002928:	185b      	adds	r3, r3, r1
 800292a:	2200      	movs	r2, #0
 800292c:	5e9a      	ldrsh	r2, [r3, r2]
 800292e:	4b3d      	ldr	r3, [pc, #244]	; (8002a24 <drawChar+0x2fc>)
 8002930:	8819      	ldrh	r1, [r3, #0]
 8002932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002934:	0052      	lsls	r2, r2, #1
 8002936:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 8002938:	193b      	adds	r3, r7, r4
 800293a:	181b      	adds	r3, r3, r0
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	b25b      	sxtb	r3, r3
 8002940:	b2db      	uxtb	r3, r3
 8002942:	3301      	adds	r3, #1
 8002944:	b2da      	uxtb	r2, r3
 8002946:	193b      	adds	r3, r7, r4
 8002948:	181b      	adds	r3, r3, r0
 800294a:	701a      	strb	r2, [r3, #0]
 800294c:	2321      	movs	r3, #33	; 0x21
 800294e:	2218      	movs	r2, #24
 8002950:	4694      	mov	ip, r2
 8002952:	44bc      	add	ip, r7
 8002954:	4463      	add	r3, ip
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	b25b      	sxtb	r3, r3
 800295a:	4a30      	ldr	r2, [pc, #192]	; (8002a1c <drawChar+0x2f4>)
 800295c:	7812      	ldrb	r2, [r2, #0]
 800295e:	4293      	cmp	r3, r2
 8002960:	db95      	blt.n	800288e <drawChar+0x166>
					for (int8_t k = 0; k < textSize; k++) {
 8002962:	2122      	movs	r1, #34	; 0x22
 8002964:	2018      	movs	r0, #24
 8002966:	183b      	adds	r3, r7, r0
 8002968:	185b      	adds	r3, r3, r1
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	b25b      	sxtb	r3, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	3301      	adds	r3, #1
 8002972:	b2da      	uxtb	r2, r3
 8002974:	183b      	adds	r3, r7, r0
 8002976:	185b      	adds	r3, r3, r1
 8002978:	701a      	strb	r2, [r3, #0]
 800297a:	2322      	movs	r3, #34	; 0x22
 800297c:	2218      	movs	r2, #24
 800297e:	4694      	mov	ip, r2
 8002980:	44bc      	add	ip, r7
 8002982:	4463      	add	r3, ip
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	b25b      	sxtb	r3, r3
 8002988:	4a24      	ldr	r2, [pc, #144]	; (8002a1c <drawChar+0x2f4>)
 800298a:	7812      	ldrb	r2, [r2, #0]
 800298c:	4293      	cmp	r3, r2
 800298e:	da00      	bge.n	8002992 <drawChar+0x26a>
 8002990:	e766      	b.n	8002860 <drawChar+0x138>
 8002992:	e0cd      	b.n	8002b30 <drawChar+0x408>
						}
					}
				}
			}
			// draw text background
			else if (bg != textColor) {
 8002994:	4b24      	ldr	r3, [pc, #144]	; (8002a28 <drawChar+0x300>)
 8002996:	881a      	ldrh	r2, [r3, #0]
 8002998:	4b22      	ldr	r3, [pc, #136]	; (8002a24 <drawChar+0x2fc>)
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	429a      	cmp	r2, r3
 800299e:	d100      	bne.n	80029a2 <drawChar+0x27a>
 80029a0:	e0c6      	b.n	8002b30 <drawChar+0x408>
				if (textSize == 1) {
 80029a2:	4b1e      	ldr	r3, [pc, #120]	; (8002a1c <drawChar+0x2f4>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d118      	bne.n	80029dc <drawChar+0x2b4>
					buffer[i+j*6] = bg;
 80029aa:	2325      	movs	r3, #37	; 0x25
 80029ac:	2218      	movs	r2, #24
 80029ae:	4694      	mov	ip, r2
 80029b0:	44bc      	add	ip, r7
 80029b2:	4463      	add	r3, ip
 80029b4:	2100      	movs	r1, #0
 80029b6:	5659      	ldrsb	r1, [r3, r1]
 80029b8:	2323      	movs	r3, #35	; 0x23
 80029ba:	2218      	movs	r2, #24
 80029bc:	4694      	mov	ip, r2
 80029be:	44bc      	add	ip, r7
 80029c0:	4463      	add	r3, ip
 80029c2:	2200      	movs	r2, #0
 80029c4:	569a      	ldrsb	r2, [r3, r2]
 80029c6:	0013      	movs	r3, r2
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	189b      	adds	r3, r3, r2
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	18ca      	adds	r2, r1, r3
 80029d0:	4b15      	ldr	r3, [pc, #84]	; (8002a28 <drawChar+0x300>)
 80029d2:	8819      	ldrh	r1, [r3, #0]
 80029d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d6:	0052      	lsls	r2, r2, #1
 80029d8:	52d1      	strh	r1, [r2, r3]
 80029da:	e0a9      	b.n	8002b30 <drawChar+0x408>
				}
				else {
					for (int8_t k = 0; k < textSize; k++) {
 80029dc:	2320      	movs	r3, #32
 80029de:	2218      	movs	r2, #24
 80029e0:	4694      	mov	ip, r2
 80029e2:	44bc      	add	ip, r7
 80029e4:	4463      	add	r3, ip
 80029e6:	2200      	movs	r2, #0
 80029e8:	701a      	strb	r2, [r3, #0]
 80029ea:	e095      	b.n	8002b18 <drawChar+0x3f0>
						rowOffset = textSize*6;
 80029ec:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <drawChar+0x2f4>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	1c1a      	adds	r2, r3, #0
 80029f4:	1c13      	adds	r3, r2, #0
 80029f6:	18db      	adds	r3, r3, r3
 80029f8:	189b      	adds	r3, r3, r2
 80029fa:	18db      	adds	r3, r3, r3
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	2326      	movs	r3, #38	; 0x26
 8002a00:	2118      	movs	r1, #24
 8002a02:	468c      	mov	ip, r1
 8002a04:	44bc      	add	ip, r7
 8002a06:	4463      	add	r3, ip
 8002a08:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 8002a0a:	231f      	movs	r3, #31
 8002a0c:	2218      	movs	r2, #24
 8002a0e:	4694      	mov	ip, r2
 8002a10:	44bc      	add	ip, r7
 8002a12:	4463      	add	r3, ip
 8002a14:	2200      	movs	r2, #0
 8002a16:	701a      	strb	r2, [r3, #0]
 8002a18:	e067      	b.n	8002aea <drawChar+0x3c2>
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	20000000 	.word	0x20000000
 8002a20:	0800a154 	.word	0x0800a154
 8002a24:	200000a2 	.word	0x200000a2
 8002a28:	20000002 	.word	0x20000002
							address = (textSize*textSize*j*6)+(i*textSize);
 8002a2c:	4bd2      	ldr	r3, [pc, #840]	; (8002d78 <drawChar+0x650>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	4ad1      	ldr	r2, [pc, #836]	; (8002d78 <drawChar+0x650>)
 8002a34:	7812      	ldrb	r2, [r2, #0]
 8002a36:	b292      	uxth	r2, r2
 8002a38:	4353      	muls	r3, r2
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	2223      	movs	r2, #35	; 0x23
 8002a3e:	2118      	movs	r1, #24
 8002a40:	468c      	mov	ip, r1
 8002a42:	44bc      	add	ip, r7
 8002a44:	4462      	add	r2, ip
 8002a46:	7812      	ldrb	r2, [r2, #0]
 8002a48:	b252      	sxtb	r2, r2
 8002a4a:	b292      	uxth	r2, r2
 8002a4c:	4353      	muls	r3, r2
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	1c1a      	adds	r2, r3, #0
 8002a52:	1c13      	adds	r3, r2, #0
 8002a54:	18db      	adds	r3, r3, r3
 8002a56:	189b      	adds	r3, r3, r2
 8002a58:	18db      	adds	r3, r3, r3
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	2325      	movs	r3, #37	; 0x25
 8002a5e:	2118      	movs	r1, #24
 8002a60:	468c      	mov	ip, r1
 8002a62:	44bc      	add	ip, r7
 8002a64:	4463      	add	r3, ip
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	b25b      	sxtb	r3, r3
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	49c2      	ldr	r1, [pc, #776]	; (8002d78 <drawChar+0x650>)
 8002a6e:	7809      	ldrb	r1, [r1, #0]
 8002a70:	b289      	uxth	r1, r1
 8002a72:	434b      	muls	r3, r1
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	18d3      	adds	r3, r2, r3
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	210e      	movs	r1, #14
 8002a7c:	2418      	movs	r4, #24
 8002a7e:	193b      	adds	r3, r7, r4
 8002a80:	185b      	adds	r3, r3, r1
 8002a82:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 8002a84:	2320      	movs	r3, #32
 8002a86:	2218      	movs	r2, #24
 8002a88:	4694      	mov	ip, r2
 8002a8a:	44bc      	add	ip, r7
 8002a8c:	4463      	add	r3, ip
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	b25b      	sxtb	r3, r3
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	2226      	movs	r2, #38	; 0x26
 8002a96:	2018      	movs	r0, #24
 8002a98:	4684      	mov	ip, r0
 8002a9a:	44bc      	add	ip, r7
 8002a9c:	4462      	add	r2, ip
 8002a9e:	8812      	ldrh	r2, [r2, #0]
 8002aa0:	4353      	muls	r3, r2
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	201f      	movs	r0, #31
 8002aa6:	193b      	adds	r3, r7, r4
 8002aa8:	181b      	adds	r3, r3, r0
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	b25b      	sxtb	r3, r3
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	18d3      	adds	r3, r2, r3
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	193b      	adds	r3, r7, r4
 8002ab6:	185b      	adds	r3, r3, r1
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	18d3      	adds	r3, r2, r3
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	193b      	adds	r3, r7, r4
 8002ac0:	185b      	adds	r3, r3, r1
 8002ac2:	801a      	strh	r2, [r3, #0]
							buffer[address] = bg;
 8002ac4:	193b      	adds	r3, r7, r4
 8002ac6:	185b      	adds	r3, r3, r1
 8002ac8:	2200      	movs	r2, #0
 8002aca:	5e9a      	ldrsh	r2, [r3, r2]
 8002acc:	4bab      	ldr	r3, [pc, #684]	; (8002d7c <drawChar+0x654>)
 8002ace:	8819      	ldrh	r1, [r3, #0]
 8002ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad2:	0052      	lsls	r2, r2, #1
 8002ad4:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 8002ad6:	193b      	adds	r3, r7, r4
 8002ad8:	181b      	adds	r3, r3, r0
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	b25b      	sxtb	r3, r3
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	193b      	adds	r3, r7, r4
 8002ae6:	181b      	adds	r3, r3, r0
 8002ae8:	701a      	strb	r2, [r3, #0]
 8002aea:	231f      	movs	r3, #31
 8002aec:	2218      	movs	r2, #24
 8002aee:	4694      	mov	ip, r2
 8002af0:	44bc      	add	ip, r7
 8002af2:	4463      	add	r3, ip
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	b25b      	sxtb	r3, r3
 8002af8:	4a9f      	ldr	r2, [pc, #636]	; (8002d78 <drawChar+0x650>)
 8002afa:	7812      	ldrb	r2, [r2, #0]
 8002afc:	4293      	cmp	r3, r2
 8002afe:	db95      	blt.n	8002a2c <drawChar+0x304>
					for (int8_t k = 0; k < textSize; k++) {
 8002b00:	2120      	movs	r1, #32
 8002b02:	2018      	movs	r0, #24
 8002b04:	183b      	adds	r3, r7, r0
 8002b06:	185b      	adds	r3, r3, r1
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	b25b      	sxtb	r3, r3
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	3301      	adds	r3, #1
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	183b      	adds	r3, r7, r0
 8002b14:	185b      	adds	r3, r3, r1
 8002b16:	701a      	strb	r2, [r3, #0]
 8002b18:	2320      	movs	r3, #32
 8002b1a:	2218      	movs	r2, #24
 8002b1c:	4694      	mov	ip, r2
 8002b1e:	44bc      	add	ip, r7
 8002b20:	4463      	add	r3, ip
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	b25b      	sxtb	r3, r3
 8002b26:	4a94      	ldr	r2, [pc, #592]	; (8002d78 <drawChar+0x650>)
 8002b28:	7812      	ldrb	r2, [r2, #0]
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	da00      	bge.n	8002b30 <drawChar+0x408>
 8002b2e:	e75d      	b.n	80029ec <drawChar+0x2c4>
		for (int8_t j=0; j<8; j++, line >>= 1) {
 8002b30:	2123      	movs	r1, #35	; 0x23
 8002b32:	2018      	movs	r0, #24
 8002b34:	183b      	adds	r3, r7, r0
 8002b36:	185b      	adds	r3, r3, r1
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	b25b      	sxtb	r3, r3
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	3301      	adds	r3, #1
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	183b      	adds	r3, r7, r0
 8002b44:	185b      	adds	r3, r3, r1
 8002b46:	701a      	strb	r2, [r3, #0]
 8002b48:	2224      	movs	r2, #36	; 0x24
 8002b4a:	183b      	adds	r3, r7, r0
 8002b4c:	189b      	adds	r3, r3, r2
 8002b4e:	2118      	movs	r1, #24
 8002b50:	468c      	mov	ip, r1
 8002b52:	44bc      	add	ip, r7
 8002b54:	4462      	add	r2, ip
 8002b56:	7812      	ldrb	r2, [r2, #0]
 8002b58:	0852      	lsrs	r2, r2, #1
 8002b5a:	701a      	strb	r2, [r3, #0]
 8002b5c:	2323      	movs	r3, #35	; 0x23
 8002b5e:	2218      	movs	r2, #24
 8002b60:	4694      	mov	ip, r2
 8002b62:	44bc      	add	ip, r7
 8002b64:	4463      	add	r3, ip
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	b25b      	sxtb	r3, r3
 8002b6a:	2b07      	cmp	r3, #7
 8002b6c:	dc00      	bgt.n	8002b70 <drawChar+0x448>
 8002b6e:	e648      	b.n	8002802 <drawChar+0xda>
	for (int8_t i=0; i<5; i++) {
 8002b70:	2125      	movs	r1, #37	; 0x25
 8002b72:	2018      	movs	r0, #24
 8002b74:	183b      	adds	r3, r7, r0
 8002b76:	185b      	adds	r3, r3, r1
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	b25b      	sxtb	r3, r3
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	3301      	adds	r3, #1
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	183b      	adds	r3, r7, r0
 8002b84:	185b      	adds	r3, r3, r1
 8002b86:	701a      	strb	r2, [r3, #0]
 8002b88:	2325      	movs	r3, #37	; 0x25
 8002b8a:	2218      	movs	r2, #24
 8002b8c:	4694      	mov	ip, r2
 8002b8e:	44bc      	add	ip, r7
 8002b90:	4463      	add	r3, ip
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	b25b      	sxtb	r3, r3
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	dc00      	bgt.n	8002b9c <drawChar+0x474>
 8002b9a:	e614      	b.n	80027c6 <drawChar+0x9e>
		}
	}

	// If opaque, draw vertical line for last column
	// for character 1px kerning
	if (bg != textColor) {
 8002b9c:	4b77      	ldr	r3, [pc, #476]	; (8002d7c <drawChar+0x654>)
 8002b9e:	881a      	ldrh	r2, [r3, #0]
 8002ba0:	4b77      	ldr	r3, [pc, #476]	; (8002d80 <drawChar+0x658>)
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d100      	bne.n	8002baa <drawChar+0x482>
 8002ba8:	e0bf      	b.n	8002d2a <drawChar+0x602>
		for (int8_t j = 0; j < 8; j++) {
 8002baa:	231e      	movs	r3, #30
 8002bac:	2218      	movs	r2, #24
 8002bae:	4694      	mov	ip, r2
 8002bb0:	44bc      	add	ip, r7
 8002bb2:	4463      	add	r3, ip
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	701a      	strb	r2, [r3, #0]
 8002bb8:	e0ad      	b.n	8002d16 <drawChar+0x5ee>
			if (textSize == 1) {
 8002bba:	4b6f      	ldr	r3, [pc, #444]	; (8002d78 <drawChar+0x650>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d111      	bne.n	8002be6 <drawChar+0x4be>
				buffer[5+j*6] = bg;
 8002bc2:	231e      	movs	r3, #30
 8002bc4:	2218      	movs	r2, #24
 8002bc6:	4694      	mov	ip, r2
 8002bc8:	44bc      	add	ip, r7
 8002bca:	4463      	add	r3, ip
 8002bcc:	2200      	movs	r2, #0
 8002bce:	569a      	ldrsb	r2, [r3, r2]
 8002bd0:	0013      	movs	r3, r2
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	189b      	adds	r3, r3, r2
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	1d5a      	adds	r2, r3, #5
 8002bda:	4b68      	ldr	r3, [pc, #416]	; (8002d7c <drawChar+0x654>)
 8002bdc:	8819      	ldrh	r1, [r3, #0]
 8002bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be0:	0052      	lsls	r2, r2, #1
 8002be2:	52d1      	strh	r1, [r2, r3]
 8002be4:	e08b      	b.n	8002cfe <drawChar+0x5d6>
			}
			else {
				for (int8_t k = 0; k < textSize; k++) {
 8002be6:	231d      	movs	r3, #29
 8002be8:	2218      	movs	r2, #24
 8002bea:	4694      	mov	ip, r2
 8002bec:	44bc      	add	ip, r7
 8002bee:	4463      	add	r3, ip
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	701a      	strb	r2, [r3, #0]
 8002bf4:	e077      	b.n	8002ce6 <drawChar+0x5be>
					for (int8_t l = 0; l < textSize; l++) {
 8002bf6:	231c      	movs	r3, #28
 8002bf8:	2218      	movs	r2, #24
 8002bfa:	4694      	mov	ip, r2
 8002bfc:	44bc      	add	ip, r7
 8002bfe:	4463      	add	r3, ip
 8002c00:	2200      	movs	r2, #0
 8002c02:	701a      	strb	r2, [r3, #0]
 8002c04:	e058      	b.n	8002cb8 <drawChar+0x590>
						address = (textSize*textSize*j*6)+(5*textSize);
 8002c06:	4b5c      	ldr	r3, [pc, #368]	; (8002d78 <drawChar+0x650>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	4a5a      	ldr	r2, [pc, #360]	; (8002d78 <drawChar+0x650>)
 8002c0e:	7812      	ldrb	r2, [r2, #0]
 8002c10:	b292      	uxth	r2, r2
 8002c12:	4353      	muls	r3, r2
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	221e      	movs	r2, #30
 8002c18:	2118      	movs	r1, #24
 8002c1a:	468c      	mov	ip, r1
 8002c1c:	44bc      	add	ip, r7
 8002c1e:	4462      	add	r2, ip
 8002c20:	7812      	ldrb	r2, [r2, #0]
 8002c22:	b252      	sxtb	r2, r2
 8002c24:	b292      	uxth	r2, r2
 8002c26:	4353      	muls	r3, r2
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	1c1a      	adds	r2, r3, #0
 8002c2c:	1c13      	adds	r3, r2, #0
 8002c2e:	18db      	adds	r3, r3, r3
 8002c30:	189b      	adds	r3, r3, r2
 8002c32:	18db      	adds	r3, r3, r3
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	4b50      	ldr	r3, [pc, #320]	; (8002d78 <drawChar+0x650>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	1c19      	adds	r1, r3, #0
 8002c3e:	0089      	lsls	r1, r1, #2
 8002c40:	18cb      	adds	r3, r1, r3
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	18d3      	adds	r3, r2, r3
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	210e      	movs	r1, #14
 8002c4a:	2418      	movs	r4, #24
 8002c4c:	193b      	adds	r3, r7, r4
 8002c4e:	185b      	adds	r3, r3, r1
 8002c50:	801a      	strh	r2, [r3, #0]
						address += rowOffset*k+l;
 8002c52:	231d      	movs	r3, #29
 8002c54:	2218      	movs	r2, #24
 8002c56:	4694      	mov	ip, r2
 8002c58:	44bc      	add	ip, r7
 8002c5a:	4463      	add	r3, ip
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	b25b      	sxtb	r3, r3
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	2226      	movs	r2, #38	; 0x26
 8002c64:	2018      	movs	r0, #24
 8002c66:	4684      	mov	ip, r0
 8002c68:	44bc      	add	ip, r7
 8002c6a:	4462      	add	r2, ip
 8002c6c:	8812      	ldrh	r2, [r2, #0]
 8002c6e:	4353      	muls	r3, r2
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	201c      	movs	r0, #28
 8002c74:	193b      	adds	r3, r7, r4
 8002c76:	181b      	adds	r3, r3, r0
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	b25b      	sxtb	r3, r3
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	18d3      	adds	r3, r2, r3
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	193b      	adds	r3, r7, r4
 8002c84:	185b      	adds	r3, r3, r1
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	18d3      	adds	r3, r2, r3
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	193b      	adds	r3, r7, r4
 8002c8e:	185b      	adds	r3, r3, r1
 8002c90:	801a      	strh	r2, [r3, #0]
						buffer[address] = bg;
 8002c92:	193b      	adds	r3, r7, r4
 8002c94:	185b      	adds	r3, r3, r1
 8002c96:	2200      	movs	r2, #0
 8002c98:	5e9a      	ldrsh	r2, [r3, r2]
 8002c9a:	4b38      	ldr	r3, [pc, #224]	; (8002d7c <drawChar+0x654>)
 8002c9c:	8819      	ldrh	r1, [r3, #0]
 8002c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca0:	0052      	lsls	r2, r2, #1
 8002ca2:	52d1      	strh	r1, [r2, r3]
					for (int8_t l = 0; l < textSize; l++) {
 8002ca4:	193b      	adds	r3, r7, r4
 8002ca6:	181b      	adds	r3, r3, r0
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	b25b      	sxtb	r3, r3
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	3301      	adds	r3, #1
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	193b      	adds	r3, r7, r4
 8002cb4:	181b      	adds	r3, r3, r0
 8002cb6:	701a      	strb	r2, [r3, #0]
 8002cb8:	231c      	movs	r3, #28
 8002cba:	2218      	movs	r2, #24
 8002cbc:	4694      	mov	ip, r2
 8002cbe:	44bc      	add	ip, r7
 8002cc0:	4463      	add	r3, ip
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	b25b      	sxtb	r3, r3
 8002cc6:	4a2c      	ldr	r2, [pc, #176]	; (8002d78 <drawChar+0x650>)
 8002cc8:	7812      	ldrb	r2, [r2, #0]
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	db9b      	blt.n	8002c06 <drawChar+0x4de>
				for (int8_t k = 0; k < textSize; k++) {
 8002cce:	211d      	movs	r1, #29
 8002cd0:	2018      	movs	r0, #24
 8002cd2:	183b      	adds	r3, r7, r0
 8002cd4:	185b      	adds	r3, r3, r1
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	b25b      	sxtb	r3, r3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	3301      	adds	r3, #1
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	183b      	adds	r3, r7, r0
 8002ce2:	185b      	adds	r3, r3, r1
 8002ce4:	701a      	strb	r2, [r3, #0]
 8002ce6:	231d      	movs	r3, #29
 8002ce8:	2218      	movs	r2, #24
 8002cea:	4694      	mov	ip, r2
 8002cec:	44bc      	add	ip, r7
 8002cee:	4463      	add	r3, ip
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	b25b      	sxtb	r3, r3
 8002cf4:	4a20      	ldr	r2, [pc, #128]	; (8002d78 <drawChar+0x650>)
 8002cf6:	7812      	ldrb	r2, [r2, #0]
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	da00      	bge.n	8002cfe <drawChar+0x5d6>
 8002cfc:	e77b      	b.n	8002bf6 <drawChar+0x4ce>
		for (int8_t j = 0; j < 8; j++) {
 8002cfe:	211e      	movs	r1, #30
 8002d00:	2018      	movs	r0, #24
 8002d02:	183b      	adds	r3, r7, r0
 8002d04:	185b      	adds	r3, r3, r1
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	b25b      	sxtb	r3, r3
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	183b      	adds	r3, r7, r0
 8002d12:	185b      	adds	r3, r3, r1
 8002d14:	701a      	strb	r2, [r3, #0]
 8002d16:	231e      	movs	r3, #30
 8002d18:	2218      	movs	r2, #24
 8002d1a:	4694      	mov	ip, r2
 8002d1c:	44bc      	add	ip, r7
 8002d1e:	4463      	add	r3, ip
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	b25b      	sxtb	r3, r3
 8002d24:	2b07      	cmp	r3, #7
 8002d26:	dc00      	bgt.n	8002d2a <drawChar+0x602>
 8002d28:	e747      	b.n	8002bba <drawChar+0x492>
				}
			}
		}
	}

	drawBuffer(cursorX, cursorY, 6*textSize, 8*textSize, buffer, bufferSize, hspi);
 8002d2a:	4b16      	ldr	r3, [pc, #88]	; (8002d84 <drawChar+0x65c>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	0018      	movs	r0, r3
 8002d30:	4b15      	ldr	r3, [pc, #84]	; (8002d88 <drawChar+0x660>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	001c      	movs	r4, r3
 8002d36:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <drawChar+0x650>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	001a      	movs	r2, r3
 8002d3c:	0013      	movs	r3, r2
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	189b      	adds	r3, r3, r2
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	001d      	movs	r5, r3
 8002d46:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <drawChar+0x650>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	00d9      	lsls	r1, r3, #3
 8002d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	9202      	str	r2, [sp, #8]
 8002d52:	221a      	movs	r2, #26
 8002d54:	2618      	movs	r6, #24
 8002d56:	46b4      	mov	ip, r6
 8002d58:	44bc      	add	ip, r7
 8002d5a:	4462      	add	r2, ip
 8002d5c:	8812      	ldrh	r2, [r2, #0]
 8002d5e:	9201      	str	r2, [sp, #4]
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	000b      	movs	r3, r1
 8002d64:	002a      	movs	r2, r5
 8002d66:	0021      	movs	r1, r4
 8002d68:	f7ff fbf4 	bl	8002554 <drawBuffer>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	469d      	mov	sp, r3
}
 8002d70:	46c0      	nop			; (mov r8, r8)
 8002d72:	46bd      	mov	sp, r7
 8002d74:	b011      	add	sp, #68	; 0x44
 8002d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d78:	20000000 	.word	0x20000000
 8002d7c:	20000002 	.word	0x20000002
 8002d80:	200000a2 	.word	0x200000a2
 8002d84:	200000a0 	.word	0x200000a0
 8002d88:	200000a1 	.word	0x200000a1

08002d8c <drawText>:

// draws character strings
void drawText(const char *str, SPI_HandleTypeDef *hspi) {
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
	for (int i = 0; str[i] != '\0'; i++) {
 8002d96:	2300      	movs	r3, #0
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	e01d      	b.n	8002dd8 <drawText+0x4c>
		drawChar(str[i], hspi);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	18d3      	adds	r3, r2, r3
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	0011      	movs	r1, r2
 8002da8:	0018      	movs	r0, r3
 8002daa:	f7ff fcbd 	bl	8002728 <drawChar>

		// moves cursor on every character print so it's not printed to the same place
		setCursor(cursorX+textSize*6, cursorY);
 8002dae:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <drawText+0x60>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	1c1a      	adds	r2, r3, #0
 8002db4:	1c13      	adds	r3, r2, #0
 8002db6:	18db      	adds	r3, r3, r3
 8002db8:	189b      	adds	r3, r3, r2
 8002dba:	18db      	adds	r3, r3, r3
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	4b0c      	ldr	r3, [pc, #48]	; (8002df0 <drawText+0x64>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	18d3      	adds	r3, r2, r3
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <drawText+0x68>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	0019      	movs	r1, r3
 8002dcc:	0010      	movs	r0, r2
 8002dce:	f000 f87f 	bl	8002ed0 <setCursor>
	for (int i = 0; str[i] != '\0'; i++) {
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	18d3      	adds	r3, r2, r3
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1db      	bne.n	8002d9c <drawText+0x10>
	}
}
 8002de4:	46c0      	nop			; (mov r8, r8)
 8002de6:	46bd      	mov	sp, r7
 8002de8:	b004      	add	sp, #16
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	20000000 	.word	0x20000000
 8002df0:	200000a0 	.word	0x200000a0
 8002df4:	200000a1 	.word	0x200000a1

08002df8 <drawCenteredText>:
	fillRect(x, y, boxW, boxH, bg, hspi);
	drawTextAt(x, y, str, hspi);
}

// draws text centered on an x coordinate. y is upper bound of box
void drawCenteredText(uint8_t x_center, uint8_t y, const char *str, SPI_HandleTypeDef *hspi) {
 8002df8:	b590      	push	{r4, r7, lr}
 8002dfa:	b089      	sub	sp, #36	; 0x24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60ba      	str	r2, [r7, #8]
 8002e00:	607b      	str	r3, [r7, #4]
 8002e02:	230f      	movs	r3, #15
 8002e04:	18fb      	adds	r3, r7, r3
 8002e06:	1c02      	adds	r2, r0, #0
 8002e08:	701a      	strb	r2, [r3, #0]
 8002e0a:	240e      	movs	r4, #14
 8002e0c:	193b      	adds	r3, r7, r4
 8002e0e:	1c0a      	adds	r2, r1, #0
 8002e10:	701a      	strb	r2, [r3, #0]
	uint8_t strSize = strlen(str);
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	0018      	movs	r0, r3
 8002e16:	f7fd f977 	bl	8000108 <strlen>
 8002e1a:	0002      	movs	r2, r0
 8002e1c:	231f      	movs	r3, #31
 8002e1e:	18fb      	adds	r3, r7, r3
 8002e20:	701a      	strb	r2, [r3, #0]
	// bounds checking. text box needed to print text should not end up out of bounds
	// also calculating what bounds of text box should be
	if (y+textSize*8 > displayHeight) return;
 8002e22:	193b      	adds	r3, r7, r4
 8002e24:	781a      	ldrb	r2, [r3, #0]
 8002e26:	4b27      	ldr	r3, [pc, #156]	; (8002ec4 <drawCenteredText+0xcc>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	18d3      	adds	r3, r2, r3
 8002e2e:	4a26      	ldr	r2, [pc, #152]	; (8002ec8 <drawCenteredText+0xd0>)
 8002e30:	7812      	ldrb	r2, [r2, #0]
 8002e32:	4293      	cmp	r3, r2
 8002e34:	dc3d      	bgt.n	8002eb2 <drawCenteredText+0xba>
	int leftBound = x_center-(strSize*textSize*6)/2;
 8002e36:	230f      	movs	r3, #15
 8002e38:	18fb      	adds	r3, r7, r3
 8002e3a:	7819      	ldrb	r1, [r3, #0]
 8002e3c:	231f      	movs	r3, #31
 8002e3e:	18fb      	adds	r3, r7, r3
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	4a20      	ldr	r2, [pc, #128]	; (8002ec4 <drawCenteredText+0xcc>)
 8002e44:	7812      	ldrb	r2, [r2, #0]
 8002e46:	435a      	muls	r2, r3
 8002e48:	0013      	movs	r3, r2
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	189b      	adds	r3, r3, r2
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	d500      	bpl.n	8002e54 <drawCenteredText+0x5c>
 8002e52:	3301      	adds	r3, #1
 8002e54:	105b      	asrs	r3, r3, #1
 8002e56:	425b      	negs	r3, r3
 8002e58:	18cb      	adds	r3, r1, r3
 8002e5a:	61bb      	str	r3, [r7, #24]
	int rightBound = x_center+(strSize*textSize*6)/2;
 8002e5c:	230f      	movs	r3, #15
 8002e5e:	18fb      	adds	r3, r7, r3
 8002e60:	7819      	ldrb	r1, [r3, #0]
 8002e62:	231f      	movs	r3, #31
 8002e64:	18fb      	adds	r3, r7, r3
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	4a16      	ldr	r2, [pc, #88]	; (8002ec4 <drawCenteredText+0xcc>)
 8002e6a:	7812      	ldrb	r2, [r2, #0]
 8002e6c:	435a      	muls	r2, r3
 8002e6e:	0013      	movs	r3, r2
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	189b      	adds	r3, r3, r2
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	d500      	bpl.n	8002e7a <drawCenteredText+0x82>
 8002e78:	3301      	adds	r3, #1
 8002e7a:	105b      	asrs	r3, r3, #1
 8002e7c:	18cb      	adds	r3, r1, r3
 8002e7e:	617b      	str	r3, [r7, #20]
	if (leftBound < 0) return;
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	db17      	blt.n	8002eb6 <drawCenteredText+0xbe>
	if (rightBound > displayWidth) return;
 8002e86:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <drawCenteredText+0xd4>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	001a      	movs	r2, r3
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	dc13      	bgt.n	8002eba <drawCenteredText+0xc2>

	setCursor(leftBound, y);
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	230e      	movs	r3, #14
 8002e98:	18fb      	adds	r3, r7, r3
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	0019      	movs	r1, r3
 8002e9e:	0010      	movs	r0, r2
 8002ea0:	f000 f816 	bl	8002ed0 <setCursor>
	drawText(str, hspi);
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	0011      	movs	r1, r2
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f7ff ff6e 	bl	8002d8c <drawText>
 8002eb0:	e004      	b.n	8002ebc <drawCenteredText+0xc4>
	if (y+textSize*8 > displayHeight) return;
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	e002      	b.n	8002ebc <drawCenteredText+0xc4>
	if (leftBound < 0) return;
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	e000      	b.n	8002ebc <drawCenteredText+0xc4>
	if (rightBound > displayWidth) return;
 8002eba:	46c0      	nop			; (mov r8, r8)
}
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	b009      	add	sp, #36	; 0x24
 8002ec0:	bd90      	pop	{r4, r7, pc}
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	20000000 	.word	0x20000000
 8002ec8:	20000006 	.word	0x20000006
 8002ecc:	20000005 	.word	0x20000005

08002ed0 <setCursor>:
}

// ---- getters and setters ----
// sets static variables
void setBackgroundColor(uint16_t color) {bg = color;}
void setCursor(uint8_t x, uint8_t y) {cursorX = x; cursorY = y;}
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	0002      	movs	r2, r0
 8002ed8:	1dfb      	adds	r3, r7, #7
 8002eda:	701a      	strb	r2, [r3, #0]
 8002edc:	1dbb      	adds	r3, r7, #6
 8002ede:	1c0a      	adds	r2, r1, #0
 8002ee0:	701a      	strb	r2, [r3, #0]
 8002ee2:	4b06      	ldr	r3, [pc, #24]	; (8002efc <setCursor+0x2c>)
 8002ee4:	1dfa      	adds	r2, r7, #7
 8002ee6:	7812      	ldrb	r2, [r2, #0]
 8002ee8:	701a      	strb	r2, [r3, #0]
 8002eea:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <setCursor+0x30>)
 8002eec:	1dba      	adds	r2, r7, #6
 8002eee:	7812      	ldrb	r2, [r2, #0]
 8002ef0:	701a      	strb	r2, [r3, #0]
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	b002      	add	sp, #8
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	200000a0 	.word	0x200000a0
 8002f00:	200000a1 	.word	0x200000a1

08002f04 <setTextSize>:
void setTextSize(uint8_t size) {textSize = size;}
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	0002      	movs	r2, r0
 8002f0c:	1dfb      	adds	r3, r7, #7
 8002f0e:	701a      	strb	r2, [r3, #0]
 8002f10:	4b03      	ldr	r3, [pc, #12]	; (8002f20 <setTextSize+0x1c>)
 8002f12:	1dfa      	adds	r2, r7, #7
 8002f14:	7812      	ldrb	r2, [r2, #0]
 8002f16:	701a      	strb	r2, [r3, #0]
 8002f18:	46c0      	nop			; (mov r8, r8)
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	b002      	add	sp, #8
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	20000000 	.word	0x20000000

08002f24 <setTextColor>:
void setTextColor(uint16_t color) {textColor = color;}
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	0002      	movs	r2, r0
 8002f2c:	1dbb      	adds	r3, r7, #6
 8002f2e:	801a      	strh	r2, [r3, #0]
 8002f30:	4b03      	ldr	r3, [pc, #12]	; (8002f40 <setTextColor+0x1c>)
 8002f32:	1dba      	adds	r2, r7, #6
 8002f34:	8812      	ldrh	r2, [r2, #0]
 8002f36:	801a      	strh	r2, [r3, #0]
 8002f38:	46c0      	nop			; (mov r8, r8)
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	b002      	add	sp, #8
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	200000a2 	.word	0x200000a2

08002f44 <setDisplayOrientation>:
// sets display MADCTL (0x00, 0x60, 0xC0, 0xA0)
// 0: default portrait
// 1: landscape (90 deg clockwise)
// 2: portrait flipped
// 3: landscape flipped
void setDisplayOrientation(uint8_t o, SPI_HandleTypeDef *hspi) {
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	0002      	movs	r2, r0
 8002f4c:	6039      	str	r1, [r7, #0]
 8002f4e:	1dfb      	adds	r3, r7, #7
 8002f50:	701a      	strb	r2, [r3, #0]
	uint8_t data = 0;
 8002f52:	230f      	movs	r3, #15
 8002f54:	18fb      	adds	r3, r7, r3
 8002f56:	2200      	movs	r2, #0
 8002f58:	701a      	strb	r2, [r3, #0]

	o %= 4;
 8002f5a:	1dfb      	adds	r3, r7, #7
 8002f5c:	1dfa      	adds	r2, r7, #7
 8002f5e:	7812      	ldrb	r2, [r2, #0]
 8002f60:	2103      	movs	r1, #3
 8002f62:	400a      	ands	r2, r1
 8002f64:	701a      	strb	r2, [r3, #0]
	orientation = o;
 8002f66:	4b24      	ldr	r3, [pc, #144]	; (8002ff8 <setDisplayOrientation+0xb4>)
 8002f68:	1dfa      	adds	r2, r7, #7
 8002f6a:	7812      	ldrb	r2, [r2, #0]
 8002f6c:	701a      	strb	r2, [r3, #0]
	switch (o) {
 8002f6e:	1dfb      	adds	r3, r7, #7
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d013      	beq.n	8002f9e <setDisplayOrientation+0x5a>
 8002f76:	dc02      	bgt.n	8002f7e <setDisplayOrientation+0x3a>
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <setDisplayOrientation+0x44>
		case 3:
			displayHeight = 128;
			displayWidth = 160;
			data = 0xA0;
			break;
		default: break;
 8002f7c:	e030      	b.n	8002fe0 <setDisplayOrientation+0x9c>
	switch (o) {
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d018      	beq.n	8002fb4 <setDisplayOrientation+0x70>
 8002f82:	2b03      	cmp	r3, #3
 8002f84:	d021      	beq.n	8002fca <setDisplayOrientation+0x86>
		default: break;
 8002f86:	e02b      	b.n	8002fe0 <setDisplayOrientation+0x9c>
			displayHeight = 160;		// TODO: use header constants
 8002f88:	4b1c      	ldr	r3, [pc, #112]	; (8002ffc <setDisplayOrientation+0xb8>)
 8002f8a:	22a0      	movs	r2, #160	; 0xa0
 8002f8c:	701a      	strb	r2, [r3, #0]
			displayWidth = 128;
 8002f8e:	4b1c      	ldr	r3, [pc, #112]	; (8003000 <setDisplayOrientation+0xbc>)
 8002f90:	2280      	movs	r2, #128	; 0x80
 8002f92:	701a      	strb	r2, [r3, #0]
			data = 0x00;
 8002f94:	230f      	movs	r3, #15
 8002f96:	18fb      	adds	r3, r7, r3
 8002f98:	2200      	movs	r2, #0
 8002f9a:	701a      	strb	r2, [r3, #0]
			break;
 8002f9c:	e020      	b.n	8002fe0 <setDisplayOrientation+0x9c>
			displayHeight = 128;
 8002f9e:	4b17      	ldr	r3, [pc, #92]	; (8002ffc <setDisplayOrientation+0xb8>)
 8002fa0:	2280      	movs	r2, #128	; 0x80
 8002fa2:	701a      	strb	r2, [r3, #0]
			displayWidth = 160;
 8002fa4:	4b16      	ldr	r3, [pc, #88]	; (8003000 <setDisplayOrientation+0xbc>)
 8002fa6:	22a0      	movs	r2, #160	; 0xa0
 8002fa8:	701a      	strb	r2, [r3, #0]
			data = 0x60;
 8002faa:	230f      	movs	r3, #15
 8002fac:	18fb      	adds	r3, r7, r3
 8002fae:	2260      	movs	r2, #96	; 0x60
 8002fb0:	701a      	strb	r2, [r3, #0]
			break;
 8002fb2:	e015      	b.n	8002fe0 <setDisplayOrientation+0x9c>
			displayHeight = 160;
 8002fb4:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <setDisplayOrientation+0xb8>)
 8002fb6:	22a0      	movs	r2, #160	; 0xa0
 8002fb8:	701a      	strb	r2, [r3, #0]
			displayWidth = 128;
 8002fba:	4b11      	ldr	r3, [pc, #68]	; (8003000 <setDisplayOrientation+0xbc>)
 8002fbc:	2280      	movs	r2, #128	; 0x80
 8002fbe:	701a      	strb	r2, [r3, #0]
			data = 0xC0;
 8002fc0:	230f      	movs	r3, #15
 8002fc2:	18fb      	adds	r3, r7, r3
 8002fc4:	22c0      	movs	r2, #192	; 0xc0
 8002fc6:	701a      	strb	r2, [r3, #0]
			break;
 8002fc8:	e00a      	b.n	8002fe0 <setDisplayOrientation+0x9c>
			displayHeight = 128;
 8002fca:	4b0c      	ldr	r3, [pc, #48]	; (8002ffc <setDisplayOrientation+0xb8>)
 8002fcc:	2280      	movs	r2, #128	; 0x80
 8002fce:	701a      	strb	r2, [r3, #0]
			displayWidth = 160;
 8002fd0:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <setDisplayOrientation+0xbc>)
 8002fd2:	22a0      	movs	r2, #160	; 0xa0
 8002fd4:	701a      	strb	r2, [r3, #0]
			data = 0xA0;
 8002fd6:	230f      	movs	r3, #15
 8002fd8:	18fb      	adds	r3, r7, r3
 8002fda:	22a0      	movs	r2, #160	; 0xa0
 8002fdc:	701a      	strb	r2, [r3, #0]
			break;
 8002fde:	46c0      	nop			; (mov r8, r8)
	}
	sendCommand(ST77XX_MADCTL, &data, 1, hspi);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	220f      	movs	r2, #15
 8002fe4:	18b9      	adds	r1, r7, r2
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	2036      	movs	r0, #54	; 0x36
 8002fea:	f7fe ffe3 	bl	8001fb4 <sendCommand>
}
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	b004      	add	sp, #16
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	46c0      	nop			; (mov r8, r8)
 8002ff8:	20000004 	.word	0x20000004
 8002ffc:	20000006 	.word	0x20000006
 8003000:	20000005 	.word	0x20000005

08003004 <getDisplayOrientation>:

uint8_t getDisplayOrientation() {return orientation;}
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
 8003008:	4b02      	ldr	r3, [pc, #8]	; (8003014 <getDisplayOrientation+0x10>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	0018      	movs	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	20000004 	.word	0x20000004

08003018 <getDisplayHeight>:
uint16_t getDisplayHeight() {return displayHeight;}
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
 800301c:	4b02      	ldr	r3, [pc, #8]	; (8003028 <getDisplayHeight+0x10>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	b29b      	uxth	r3, r3
 8003022:	0018      	movs	r0, r3
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	20000006 	.word	0x20000006

0800302c <getDisplayWidth>:
uint16_t getDisplayWidth() {return displayWidth;}
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
 8003030:	4b02      	ldr	r3, [pc, #8]	; (800303c <getDisplayWidth+0x10>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	b29b      	uxth	r3, r3
 8003036:	0018      	movs	r0, r3
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	20000005 	.word	0x20000005

08003040 <leftToCentered>:
	// TODO: use displayWidth variable
	if (xLeft > 0 && xLeft < displayWidth) return xLeft;
	else return 0;
}

uint16_t leftToCentered(uint16_t x, uint16_t boxW) {
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	0002      	movs	r2, r0
 8003048:	1dbb      	adds	r3, r7, #6
 800304a:	801a      	strh	r2, [r3, #0]
 800304c:	1d3b      	adds	r3, r7, #4
 800304e:	1c0a      	adds	r2, r1, #0
 8003050:	801a      	strh	r2, [r3, #0]
	int xCentered = x+(boxW/2);
 8003052:	1dbb      	adds	r3, r7, #6
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	1d3a      	adds	r2, r7, #4
 8003058:	8812      	ldrh	r2, [r2, #0]
 800305a:	0852      	lsrs	r2, r2, #1
 800305c:	b292      	uxth	r2, r2
 800305e:	189b      	adds	r3, r3, r2
 8003060:	60fb      	str	r3, [r7, #12]

	if (xCentered > 0 && xCentered < displayWidth) return xCentered;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2b00      	cmp	r3, #0
 8003066:	dd08      	ble.n	800307a <leftToCentered+0x3a>
 8003068:	4b06      	ldr	r3, [pc, #24]	; (8003084 <leftToCentered+0x44>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	001a      	movs	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	4293      	cmp	r3, r2
 8003072:	da02      	bge.n	800307a <leftToCentered+0x3a>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	b29b      	uxth	r3, r3
 8003078:	e000      	b.n	800307c <leftToCentered+0x3c>
	else return 0;
 800307a:	2300      	movs	r3, #0
}
 800307c:	0018      	movs	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	b004      	add	sp, #16
 8003082:	bd80      	pop	{r7, pc}
 8003084:	20000005 	.word	0x20000005

08003088 <setClockAlarm>:

	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
}

// set an alarm for the next second for triggering display updates
void setClockAlarm(RTC_HandleTypeDef *hrtc) {
 8003088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800308a:	b097      	sub	sp, #92	; 0x5c
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef salarm = {0};
 8003090:	232c      	movs	r3, #44	; 0x2c
 8003092:	18fb      	adds	r3, r7, r3
 8003094:	0018      	movs	r0, r3
 8003096:	2328      	movs	r3, #40	; 0x28
 8003098:	001a      	movs	r2, r3
 800309a:	2100      	movs	r1, #0
 800309c:	f006 fa53 	bl	8009546 <memset>
	RTC_TimeTypeDef salarmtime = {0};
 80030a0:	2318      	movs	r3, #24
 80030a2:	18fb      	adds	r3, r7, r3
 80030a4:	0018      	movs	r0, r3
 80030a6:	2314      	movs	r3, #20
 80030a8:	001a      	movs	r2, r3
 80030aa:	2100      	movs	r1, #0
 80030ac:	f006 fa4b 	bl	8009546 <memset>

	// pull current time
	struct dates currentDate = {0};
 80030b0:	2410      	movs	r4, #16
 80030b2:	193b      	adds	r3, r7, r4
 80030b4:	0018      	movs	r0, r3
 80030b6:	2306      	movs	r3, #6
 80030b8:	001a      	movs	r2, r3
 80030ba:	2100      	movs	r1, #0
 80030bc:	f006 fa43 	bl	8009546 <memset>
	struct times currentTime = {0};
 80030c0:	250c      	movs	r5, #12
 80030c2:	197b      	adds	r3, r7, r5
 80030c4:	0018      	movs	r0, r3
 80030c6:	2303      	movs	r3, #3
 80030c8:	001a      	movs	r2, r3
 80030ca:	2100      	movs	r1, #0
 80030cc:	f006 fa3b 	bl	8009546 <memset>
	getDateTime(&currentDate, &currentTime, hrtc);
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	1979      	adds	r1, r7, r5
 80030d4:	193b      	adds	r3, r7, r4
 80030d6:	0018      	movs	r0, r3
 80030d8:	f000 f976 	bl	80033c8 <getDateTime>

	// start setting alarm
	struct alarmTimes a = {0};
 80030dc:	2308      	movs	r3, #8
 80030de:	18fb      	adds	r3, r7, r3
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
	uint8_t s,m,h,w;
	// set for only 1/min on low battery mode
//	bState = batteryLow;
	if (bState == batteryLow || bState == batteryReallyLow) {
 80030e4:	4ba1      	ldr	r3, [pc, #644]	; (800336c <setClockAlarm+0x2e4>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d003      	beq.n	80030f4 <setClockAlarm+0x6c>
 80030ec:	4b9f      	ldr	r3, [pc, #636]	; (800336c <setClockAlarm+0x2e4>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d164      	bne.n	80031be <setClockAlarm+0x136>
		s = currentTime.sec;
 80030f4:	2157      	movs	r1, #87	; 0x57
 80030f6:	187b      	adds	r3, r7, r1
 80030f8:	250c      	movs	r5, #12
 80030fa:	197a      	adds	r2, r7, r5
 80030fc:	7892      	ldrb	r2, [r2, #2]
 80030fe:	701a      	strb	r2, [r3, #0]
		m = currentTime.min + s/60 + 1;
 8003100:	197b      	adds	r3, r7, r5
 8003102:	785c      	ldrb	r4, [r3, #1]
 8003104:	187b      	adds	r3, r7, r1
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	213c      	movs	r1, #60	; 0x3c
 800310a:	0018      	movs	r0, r3
 800310c:	f7fd f804 	bl	8000118 <__udivsi3>
 8003110:	0003      	movs	r3, r0
 8003112:	b2db      	uxtb	r3, r3
 8003114:	18e3      	adds	r3, r4, r3
 8003116:	b2da      	uxtb	r2, r3
 8003118:	2156      	movs	r1, #86	; 0x56
 800311a:	187b      	adds	r3, r7, r1
 800311c:	3201      	adds	r2, #1
 800311e:	701a      	strb	r2, [r3, #0]
		h = currentTime.hr + m/60;
 8003120:	197b      	adds	r3, r7, r5
 8003122:	781c      	ldrb	r4, [r3, #0]
 8003124:	187b      	adds	r3, r7, r1
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	213c      	movs	r1, #60	; 0x3c
 800312a:	0018      	movs	r0, r3
 800312c:	f7fc fff4 	bl	8000118 <__udivsi3>
 8003130:	0003      	movs	r3, r0
 8003132:	b2da      	uxtb	r2, r3
 8003134:	2155      	movs	r1, #85	; 0x55
 8003136:	187b      	adds	r3, r7, r1
 8003138:	18a2      	adds	r2, r4, r2
 800313a:	701a      	strb	r2, [r3, #0]
		w = currentDate.weekday + h/24;
 800313c:	2310      	movs	r3, #16
 800313e:	18fb      	adds	r3, r7, r3
 8003140:	791c      	ldrb	r4, [r3, #4]
 8003142:	187b      	adds	r3, r7, r1
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2118      	movs	r1, #24
 8003148:	0018      	movs	r0, r3
 800314a:	f7fc ffe5 	bl	8000118 <__udivsi3>
 800314e:	0003      	movs	r3, r0
 8003150:	b2da      	uxtb	r2, r3
 8003152:	2354      	movs	r3, #84	; 0x54
 8003154:	18fb      	adds	r3, r7, r3
 8003156:	18a2      	adds	r2, r4, r2
 8003158:	701a      	strb	r2, [r3, #0]

		// for transitioning between centuries
		if (currentTime.min == 59 &&
 800315a:	197b      	adds	r3, r7, r5
 800315c:	785b      	ldrb	r3, [r3, #1]
 800315e:	2b3b      	cmp	r3, #59	; 0x3b
 8003160:	d000      	beq.n	8003164 <setClockAlarm+0xdc>
 8003162:	e091      	b.n	8003288 <setClockAlarm+0x200>
			currentTime.hr == 23 &&
 8003164:	230c      	movs	r3, #12
 8003166:	18fb      	adds	r3, r7, r3
 8003168:	781b      	ldrb	r3, [r3, #0]
		if (currentTime.min == 59 &&
 800316a:	2b17      	cmp	r3, #23
 800316c:	d000      	beq.n	8003170 <setClockAlarm+0xe8>
 800316e:	e08b      	b.n	8003288 <setClockAlarm+0x200>
			currentDate.yr % 100 == 99 &&
 8003170:	2310      	movs	r3, #16
 8003172:	18fb      	adds	r3, r7, r3
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	2164      	movs	r1, #100	; 0x64
 8003178:	0018      	movs	r0, r3
 800317a:	f7fd f853 	bl	8000224 <__aeabi_uidivmod>
 800317e:	000b      	movs	r3, r1
 8003180:	b29b      	uxth	r3, r3
			currentTime.hr == 23 &&
 8003182:	2b63      	cmp	r3, #99	; 0x63
 8003184:	d000      	beq.n	8003188 <setClockAlarm+0x100>
 8003186:	e07f      	b.n	8003288 <setClockAlarm+0x200>
			currentDate.month == 12 &&
 8003188:	2310      	movs	r3, #16
 800318a:	18fb      	adds	r3, r7, r3
 800318c:	789b      	ldrb	r3, [r3, #2]
			currentDate.yr % 100 == 99 &&
 800318e:	2b0c      	cmp	r3, #12
 8003190:	d000      	beq.n	8003194 <setClockAlarm+0x10c>
 8003192:	e079      	b.n	8003288 <setClockAlarm+0x200>
			currentDate.date == maxDaysInMonth(currentDate.month, currentDate.yr)) {
 8003194:	2110      	movs	r1, #16
 8003196:	187b      	adds	r3, r7, r1
 8003198:	78dc      	ldrb	r4, [r3, #3]
 800319a:	187b      	adds	r3, r7, r1
 800319c:	789a      	ldrb	r2, [r3, #2]
 800319e:	187b      	adds	r3, r7, r1
 80031a0:	881b      	ldrh	r3, [r3, #0]
 80031a2:	0019      	movs	r1, r3
 80031a4:	0010      	movs	r0, r2
 80031a6:	f000 f9af 	bl	8003508 <maxDaysInMonth>
 80031aa:	0003      	movs	r3, r0
			currentDate.month == 12 &&
 80031ac:	429c      	cmp	r4, r3
 80031ae:	d16b      	bne.n	8003288 <setClockAlarm+0x200>
			century++;
 80031b0:	4b6f      	ldr	r3, [pc, #444]	; (8003370 <setClockAlarm+0x2e8>)
 80031b2:	881b      	ldrh	r3, [r3, #0]
 80031b4:	3301      	adds	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	4b6d      	ldr	r3, [pc, #436]	; (8003370 <setClockAlarm+0x2e8>)
 80031ba:	801a      	strh	r2, [r3, #0]
		if (currentTime.min == 59 &&
 80031bc:	e064      	b.n	8003288 <setClockAlarm+0x200>
		}
	}
	// else set 1/s
	else {
		s = currentTime.sec + 1;
 80031be:	250c      	movs	r5, #12
 80031c0:	197b      	adds	r3, r7, r5
 80031c2:	789a      	ldrb	r2, [r3, #2]
 80031c4:	2157      	movs	r1, #87	; 0x57
 80031c6:	187b      	adds	r3, r7, r1
 80031c8:	3201      	adds	r2, #1
 80031ca:	701a      	strb	r2, [r3, #0]
		m = currentTime.min + s/60;
 80031cc:	197b      	adds	r3, r7, r5
 80031ce:	785c      	ldrb	r4, [r3, #1]
 80031d0:	187b      	adds	r3, r7, r1
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	213c      	movs	r1, #60	; 0x3c
 80031d6:	0018      	movs	r0, r3
 80031d8:	f7fc ff9e 	bl	8000118 <__udivsi3>
 80031dc:	0003      	movs	r3, r0
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	2156      	movs	r1, #86	; 0x56
 80031e2:	187b      	adds	r3, r7, r1
 80031e4:	18a2      	adds	r2, r4, r2
 80031e6:	701a      	strb	r2, [r3, #0]
		h = currentTime.hr + m/60;
 80031e8:	197b      	adds	r3, r7, r5
 80031ea:	781c      	ldrb	r4, [r3, #0]
 80031ec:	187b      	adds	r3, r7, r1
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	213c      	movs	r1, #60	; 0x3c
 80031f2:	0018      	movs	r0, r3
 80031f4:	f7fc ff90 	bl	8000118 <__udivsi3>
 80031f8:	0003      	movs	r3, r0
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	2155      	movs	r1, #85	; 0x55
 80031fe:	187b      	adds	r3, r7, r1
 8003200:	18a2      	adds	r2, r4, r2
 8003202:	701a      	strb	r2, [r3, #0]
		w = currentDate.weekday + h/24;
 8003204:	2310      	movs	r3, #16
 8003206:	18fb      	adds	r3, r7, r3
 8003208:	791c      	ldrb	r4, [r3, #4]
 800320a:	187b      	adds	r3, r7, r1
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2118      	movs	r1, #24
 8003210:	0018      	movs	r0, r3
 8003212:	f7fc ff81 	bl	8000118 <__udivsi3>
 8003216:	0003      	movs	r3, r0
 8003218:	b2da      	uxtb	r2, r3
 800321a:	2354      	movs	r3, #84	; 0x54
 800321c:	18fb      	adds	r3, r7, r3
 800321e:	18a2      	adds	r2, r4, r2
 8003220:	701a      	strb	r2, [r3, #0]

		// for transitioning between centuries
		if (currentTime.sec == 59 &&			// need to check for second
 8003222:	197b      	adds	r3, r7, r5
 8003224:	789b      	ldrb	r3, [r3, #2]
 8003226:	2b3b      	cmp	r3, #59	; 0x3b
 8003228:	d12f      	bne.n	800328a <setClockAlarm+0x202>
			currentTime.min == 59 &&
 800322a:	230c      	movs	r3, #12
 800322c:	18fb      	adds	r3, r7, r3
 800322e:	785b      	ldrb	r3, [r3, #1]
		if (currentTime.sec == 59 &&			// need to check for second
 8003230:	2b3b      	cmp	r3, #59	; 0x3b
 8003232:	d12a      	bne.n	800328a <setClockAlarm+0x202>
			currentTime.hr == 23 &&
 8003234:	230c      	movs	r3, #12
 8003236:	18fb      	adds	r3, r7, r3
 8003238:	781b      	ldrb	r3, [r3, #0]
			currentTime.min == 59 &&
 800323a:	2b17      	cmp	r3, #23
 800323c:	d125      	bne.n	800328a <setClockAlarm+0x202>
			currentDate.yr % 100 == 99 &&
 800323e:	2310      	movs	r3, #16
 8003240:	18fb      	adds	r3, r7, r3
 8003242:	881b      	ldrh	r3, [r3, #0]
 8003244:	2164      	movs	r1, #100	; 0x64
 8003246:	0018      	movs	r0, r3
 8003248:	f7fc ffec 	bl	8000224 <__aeabi_uidivmod>
 800324c:	000b      	movs	r3, r1
 800324e:	b29b      	uxth	r3, r3
			currentTime.hr == 23 &&
 8003250:	2b63      	cmp	r3, #99	; 0x63
 8003252:	d11a      	bne.n	800328a <setClockAlarm+0x202>
			currentDate.month == 12 &&
 8003254:	2310      	movs	r3, #16
 8003256:	18fb      	adds	r3, r7, r3
 8003258:	789b      	ldrb	r3, [r3, #2]
			currentDate.yr % 100 == 99 &&
 800325a:	2b0c      	cmp	r3, #12
 800325c:	d115      	bne.n	800328a <setClockAlarm+0x202>
			currentDate.date == maxDaysInMonth(currentDate.month, currentDate.yr)) {
 800325e:	2110      	movs	r1, #16
 8003260:	187b      	adds	r3, r7, r1
 8003262:	78dc      	ldrb	r4, [r3, #3]
 8003264:	187b      	adds	r3, r7, r1
 8003266:	789a      	ldrb	r2, [r3, #2]
 8003268:	187b      	adds	r3, r7, r1
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	0019      	movs	r1, r3
 800326e:	0010      	movs	r0, r2
 8003270:	f000 f94a 	bl	8003508 <maxDaysInMonth>
 8003274:	0003      	movs	r3, r0
			currentDate.month == 12 &&
 8003276:	429c      	cmp	r4, r3
 8003278:	d107      	bne.n	800328a <setClockAlarm+0x202>
			century++;
 800327a:	4b3d      	ldr	r3, [pc, #244]	; (8003370 <setClockAlarm+0x2e8>)
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	3301      	adds	r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	4b3b      	ldr	r3, [pc, #236]	; (8003370 <setClockAlarm+0x2e8>)
 8003284:	801a      	strh	r2, [r3, #0]
 8003286:	e000      	b.n	800328a <setClockAlarm+0x202>
		if (currentTime.min == 59 &&
 8003288:	46c0      	nop			; (mov r8, r8)
		}
	}
	a.sec = s % 60;
 800328a:	2357      	movs	r3, #87	; 0x57
 800328c:	18fb      	adds	r3, r7, r3
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	213c      	movs	r1, #60	; 0x3c
 8003292:	0018      	movs	r0, r3
 8003294:	f7fc ffc6 	bl	8000224 <__aeabi_uidivmod>
 8003298:	000b      	movs	r3, r1
 800329a:	b2da      	uxtb	r2, r3
 800329c:	2408      	movs	r4, #8
 800329e:	193b      	adds	r3, r7, r4
 80032a0:	709a      	strb	r2, [r3, #2]
	a.min = m % 60;
 80032a2:	2356      	movs	r3, #86	; 0x56
 80032a4:	18fb      	adds	r3, r7, r3
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	213c      	movs	r1, #60	; 0x3c
 80032aa:	0018      	movs	r0, r3
 80032ac:	f7fc ffba 	bl	8000224 <__aeabi_uidivmod>
 80032b0:	000b      	movs	r3, r1
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	193b      	adds	r3, r7, r4
 80032b6:	705a      	strb	r2, [r3, #1]
	a.hr = h % 24;
 80032b8:	2355      	movs	r3, #85	; 0x55
 80032ba:	18fb      	adds	r3, r7, r3
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2118      	movs	r1, #24
 80032c0:	0018      	movs	r0, r3
 80032c2:	f7fc ffaf 	bl	8000224 <__aeabi_uidivmod>
 80032c6:	000b      	movs	r3, r1
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	193b      	adds	r3, r7, r4
 80032cc:	701a      	strb	r2, [r3, #0]
	a.weekday = (w-1) % 7 + 1;
 80032ce:	2354      	movs	r3, #84	; 0x54
 80032d0:	18fb      	adds	r3, r7, r3
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	3b01      	subs	r3, #1
 80032d6:	2107      	movs	r1, #7
 80032d8:	0018      	movs	r0, r3
 80032da:	f7fd f88d 	bl	80003f8 <__aeabi_idivmod>
 80032de:	000b      	movs	r3, r1
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	3301      	adds	r3, #1
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	0020      	movs	r0, r4
 80032e8:	183b      	adds	r3, r7, r0
 80032ea:	70da      	strb	r2, [r3, #3]

	salarmtime.Hours = a.hr;
 80032ec:	183b      	adds	r3, r7, r0
 80032ee:	781a      	ldrb	r2, [r3, #0]
 80032f0:	2118      	movs	r1, #24
 80032f2:	187b      	adds	r3, r7, r1
 80032f4:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a.min;
 80032f6:	183b      	adds	r3, r7, r0
 80032f8:	785a      	ldrb	r2, [r3, #1]
 80032fa:	187b      	adds	r3, r7, r1
 80032fc:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a.sec;
 80032fe:	183b      	adds	r3, r7, r0
 8003300:	789a      	ldrb	r2, [r3, #2]
 8003302:	187b      	adds	r3, r7, r1
 8003304:	709a      	strb	r2, [r3, #2]
	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 8003306:	187b      	adds	r3, r7, r1
 8003308:	2200      	movs	r2, #0
 800330a:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 800330c:	187b      	adds	r3, r7, r1
 800330e:	2200      	movs	r2, #0
 8003310:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 8003312:	187b      	adds	r3, r7, r1
 8003314:	2200      	movs	r2, #0
 8003316:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003318:	187b      	adds	r3, r7, r1
 800331a:	2200      	movs	r2, #0
 800331c:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 800331e:	187b      	adds	r3, r7, r1
 8003320:	2200      	movs	r2, #0
 8003322:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 8003324:	242c      	movs	r4, #44	; 0x2c
 8003326:	193b      	adds	r3, r7, r4
 8003328:	187a      	adds	r2, r7, r1
 800332a:	ca62      	ldmia	r2!, {r1, r5, r6}
 800332c:	c362      	stmia	r3!, {r1, r5, r6}
 800332e:	ca22      	ldmia	r2!, {r1, r5}
 8003330:	c322      	stmia	r3!, {r1, r5}
	salarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003332:	193b      	adds	r3, r7, r4
 8003334:	2200      	movs	r2, #0
 8003336:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003338:	193b      	adds	r3, r7, r4
 800333a:	2200      	movs	r2, #0
 800333c:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 800333e:	193b      	adds	r3, r7, r4
 8003340:	2280      	movs	r2, #128	; 0x80
 8003342:	05d2      	lsls	r2, r2, #23
 8003344:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a.weekday;
 8003346:	183b      	adds	r3, r7, r0
 8003348:	78d9      	ldrb	r1, [r3, #3]
 800334a:	193b      	adds	r3, r7, r4
 800334c:	2220      	movs	r2, #32
 800334e:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_B;
 8003350:	193b      	adds	r3, r7, r4
 8003352:	2280      	movs	r2, #128	; 0x80
 8003354:	0092      	lsls	r2, r2, #2
 8003356:	625a      	str	r2, [r3, #36]	; 0x24

	// do nothing until done
	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
 8003358:	1939      	adds	r1, r7, r4
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	0018      	movs	r0, r3
 8003360:	f004 f93a 	bl	80075d8 <HAL_RTC_SetAlarm_IT>
}
 8003364:	46c0      	nop			; (mov r8, r8)
 8003366:	46bd      	mov	sp, r7
 8003368:	b017      	add	sp, #92	; 0x5c
 800336a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800336c:	20000119 	.word	0x20000119
 8003370:	20000008 	.word	0x20000008

08003374 <HAL_RTC_AlarmAEventCallback>:
// ---- end of RTC setters ----

// ---- callbacks for interrupts ----
// used for alarm function in project
// meant to send signal to use motor
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED1_PORT, LED1_PIN);
 800337c:	23a0      	movs	r3, #160	; 0xa0
 800337e:	05db      	lsls	r3, r3, #23
 8003380:	2120      	movs	r1, #32
 8003382:	0018      	movs	r0, r3
 8003384:	f002 fdfd 	bl	8005f82 <HAL_GPIO_TogglePin>
	isAlarmDone = 1;
 8003388:	4b04      	ldr	r3, [pc, #16]	; (800339c <HAL_RTC_AlarmAEventCallback+0x28>)
 800338a:	2201      	movs	r2, #1
 800338c:	701a      	strb	r2, [r3, #0]
	updateFace.alarm = 1;
 800338e:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <HAL_RTC_AlarmAEventCallback+0x2c>)
 8003390:	2201      	movs	r2, #1
 8003392:	709a      	strb	r2, [r3, #2]
}
 8003394:	46c0      	nop			; (mov r8, r8)
 8003396:	46bd      	mov	sp, r7
 8003398:	b002      	add	sp, #8
 800339a:	bd80      	pop	{r7, pc}
 800339c:	2000010b 	.word	0x2000010b
 80033a0:	2000010c 	.word	0x2000010c

080033a4 <HAL_RTCEx_AlarmBEventCallback>:

// used to trigger display refresh every second. used because then it's synchronous with RTC updates
void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc) {
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
	updateFace.clock = 1;
 80033ac:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <HAL_RTCEx_AlarmBEventCallback+0x20>)
 80033ae:	2201      	movs	r2, #1
 80033b0:	701a      	strb	r2, [r3, #0]
	setClockAlarm(hrtc);		// set something for next second
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	0018      	movs	r0, r3
 80033b6:	f7ff fe67 	bl	8003088 <setClockAlarm>
}
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	46bd      	mov	sp, r7
 80033be:	b002      	add	sp, #8
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	46c0      	nop			; (mov r8, r8)
 80033c4:	2000010c 	.word	0x2000010c

080033c8 <getDateTime>:
	d->date = sdate.Date;
	d->weekday = sdate.WeekDay;
}

// not using getDate and getTime for possible efficiency
void getDateTime(struct dates *d, struct times *t, RTC_HandleTypeDef *hrtc) {
 80033c8:	b5b0      	push	{r4, r5, r7, lr}
 80033ca:	b08a      	sub	sp, #40	; 0x28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
	RTC_DateTypeDef sdate;
	RTC_TimeTypeDef stime;

	// programming manual says to read time after date. something shadow registers.
	// not done automatically in HAL
	HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN);
 80033d4:	2510      	movs	r5, #16
 80033d6:	1979      	adds	r1, r7, r5
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	0018      	movs	r0, r3
 80033de:	f003 ffa3 	bl	8007328 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 80033e2:	2124      	movs	r1, #36	; 0x24
 80033e4:	000c      	movs	r4, r1
 80033e6:	1879      	adds	r1, r7, r1
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	0018      	movs	r0, r3
 80033ee:	f004 f8a5 	bl	800753c <HAL_RTC_GetDate>

	// pulls last 2 digits from RTC and upper 2 digits from static variable
	d->yr = century*100 + sdate.Year;
 80033f2:	4b14      	ldr	r3, [pc, #80]	; (8003444 <getDateTime+0x7c>)
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	2264      	movs	r2, #100	; 0x64
 80033f8:	4353      	muls	r3, r2
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	0021      	movs	r1, r4
 80033fe:	187b      	adds	r3, r7, r1
 8003400:	78db      	ldrb	r3, [r3, #3]
 8003402:	b29b      	uxth	r3, r3
 8003404:	18d3      	adds	r3, r2, r3
 8003406:	b29a      	uxth	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	801a      	strh	r2, [r3, #0]
	d->month = sdate.Month;
 800340c:	187b      	adds	r3, r7, r1
 800340e:	785a      	ldrb	r2, [r3, #1]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	709a      	strb	r2, [r3, #2]
	d->date = sdate.Date;
 8003414:	187b      	adds	r3, r7, r1
 8003416:	789a      	ldrb	r2, [r3, #2]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	70da      	strb	r2, [r3, #3]
	d->weekday = sdate.WeekDay;
 800341c:	187b      	adds	r3, r7, r1
 800341e:	781a      	ldrb	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	711a      	strb	r2, [r3, #4]

	t->hr = stime.Hours;
 8003424:	197b      	adds	r3, r7, r5
 8003426:	781a      	ldrb	r2, [r3, #0]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	701a      	strb	r2, [r3, #0]
	t->min = stime.Minutes;
 800342c:	197b      	adds	r3, r7, r5
 800342e:	785a      	ldrb	r2, [r3, #1]
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	705a      	strb	r2, [r3, #1]
	t->sec = stime.Seconds;
 8003434:	197b      	adds	r3, r7, r5
 8003436:	789a      	ldrb	r2, [r3, #2]
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	709a      	strb	r2, [r3, #2]
}
 800343c:	46c0      	nop			; (mov r8, r8)
 800343e:	46bd      	mov	sp, r7
 8003440:	b00a      	add	sp, #40	; 0x28
 8003442:	bdb0      	pop	{r4, r5, r7, pc}
 8003444:	20000008 	.word	0x20000008

08003448 <setRTCCalibration>:
// ---- end of RTC getters ----

// ---- RTC calibration function ----
// calibVal should be given in drift/day in seconds
// calibration output on PC13
void setRTCCalibration(int calibVal, RTC_HandleTypeDef *hrtc) {
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
	uint16_t calm = 0;
 8003452:	230e      	movs	r3, #14
 8003454:	18fb      	adds	r3, r7, r3
 8003456:	2200      	movs	r2, #0
 8003458:	801a      	strh	r2, [r3, #0]
	uint32_t temp;

	if (calibVal == 0) return;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d048      	beq.n	80034f2 <setRTCCalibration+0xaa>
	else if (calibVal < 0) {		// drift offset is negative. need to slow rtc down
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	da20      	bge.n	80034a8 <setRTCCalibration+0x60>
		if (calibVal <= -42) {		// bounds checking. just set to max
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	3329      	adds	r3, #41	; 0x29
 800346a:	da06      	bge.n	800347a <setRTCCalibration+0x32>
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_RESET, 0x1FF);
 800346c:	4b23      	ldr	r3, [pc, #140]	; (80034fc <setRTCCalibration+0xb4>)
 800346e:	6838      	ldr	r0, [r7, #0]
 8003470:	2200      	movs	r2, #0
 8003472:	2100      	movs	r1, #0
 8003474:	f004 fae1 	bl	8007a3a <HAL_RTCEx_SetSmoothCalib>
 8003478:	e03c      	b.n	80034f4 <setRTCCalibration+0xac>
		}
		else {
			// math for setting CALM 9-bit register in RTC. formula in notes and in L0 programming reference manual
			temp = -calibVal*32768*32/86400;		// possible overflow when doing math, so reordering
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	0013      	movs	r3, r2
 800347e:	031b      	lsls	r3, r3, #12
 8003480:	1a9b      	subs	r3, r3, r2
 8003482:	051b      	lsls	r3, r3, #20
 8003484:	491e      	ldr	r1, [pc, #120]	; (8003500 <setRTCCalibration+0xb8>)
 8003486:	0018      	movs	r0, r3
 8003488:	f7fc fed0 	bl	800022c <__divsi3>
 800348c:	0003      	movs	r3, r0
 800348e:	60bb      	str	r3, [r7, #8]
			calm = temp;
 8003490:	210e      	movs	r1, #14
 8003492:	187b      	adds	r3, r7, r1
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	801a      	strh	r2, [r3, #0]
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_RESET, calm);
 8003498:	187b      	adds	r3, r7, r1
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	6838      	ldr	r0, [r7, #0]
 800349e:	2200      	movs	r2, #0
 80034a0:	2100      	movs	r1, #0
 80034a2:	f004 faca 	bl	8007a3a <HAL_RTCEx_SetSmoothCalib>
 80034a6:	e025      	b.n	80034f4 <setRTCCalibration+0xac>
		}
	}
	else {
		if (calibVal >= 42) { 		// drift offset is positive. need to speed rtc up
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b29      	cmp	r3, #41	; 0x29
 80034ac:	dd07      	ble.n	80034be <setRTCCalibration+0x76>
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_SET, 0);
 80034ae:	2380      	movs	r3, #128	; 0x80
 80034b0:	021a      	lsls	r2, r3, #8
 80034b2:	6838      	ldr	r0, [r7, #0]
 80034b4:	2300      	movs	r3, #0
 80034b6:	2100      	movs	r1, #0
 80034b8:	f004 fabf 	bl	8007a3a <HAL_RTCEx_SetSmoothCalib>
 80034bc:	e01a      	b.n	80034f4 <setRTCCalibration+0xac>
		}
		else {
			// math
			temp = 512-(calibVal*32768*32/86400);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	051b      	lsls	r3, r3, #20
 80034c2:	4910      	ldr	r1, [pc, #64]	; (8003504 <setRTCCalibration+0xbc>)
 80034c4:	0018      	movs	r0, r3
 80034c6:	f7fc feb1 	bl	800022c <__divsi3>
 80034ca:	0003      	movs	r3, r0
 80034cc:	2280      	movs	r2, #128	; 0x80
 80034ce:	0092      	lsls	r2, r2, #2
 80034d0:	4694      	mov	ip, r2
 80034d2:	4463      	add	r3, ip
 80034d4:	60bb      	str	r3, [r7, #8]
			calm = temp;
 80034d6:	210e      	movs	r1, #14
 80034d8:	187b      	adds	r3, r7, r1
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	801a      	strh	r2, [r3, #0]
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_SET, calm);
 80034de:	187b      	adds	r3, r7, r1
 80034e0:	8819      	ldrh	r1, [r3, #0]
 80034e2:	2380      	movs	r3, #128	; 0x80
 80034e4:	021a      	lsls	r2, r3, #8
 80034e6:	6838      	ldr	r0, [r7, #0]
 80034e8:	000b      	movs	r3, r1
 80034ea:	2100      	movs	r1, #0
 80034ec:	f004 faa5 	bl	8007a3a <HAL_RTCEx_SetSmoothCalib>
 80034f0:	e000      	b.n	80034f4 <setRTCCalibration+0xac>
	if (calibVal == 0) return;
 80034f2:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 80034f4:	46bd      	mov	sp, r7
 80034f6:	b004      	add	sp, #16
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	000001ff 	.word	0x000001ff
 8003500:	00015180 	.word	0x00015180
 8003504:	fffeae80 	.word	0xfffeae80

08003508 <maxDaysInMonth>:
	else return temp;
}

// calculator for number of days in a month given a month and accounting for leap years
// assumes month is 1-12, 1=january, 12=december
uint8_t maxDaysInMonth(uint8_t month, uint16_t year) {
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	0002      	movs	r2, r0
 8003510:	1dfb      	adds	r3, r7, #7
 8003512:	701a      	strb	r2, [r3, #0]
 8003514:	1d3b      	adds	r3, r7, #4
 8003516:	1c0a      	adds	r2, r1, #0
 8003518:	801a      	strh	r2, [r3, #0]
	if (month == 0 || month > 12) return 0;		// bounds checking
 800351a:	1dfb      	adds	r3, r7, #7
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <maxDaysInMonth+0x22>
 8003522:	1dfb      	adds	r3, r7, #7
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	2b0c      	cmp	r3, #12
 8003528:	d901      	bls.n	800352e <maxDaysInMonth+0x26>
 800352a:	2300      	movs	r3, #0
 800352c:	e052      	b.n	80035d4 <maxDaysInMonth+0xcc>

	// not using built-in defines, because they're in BCD
	if (month == 1  ||		// january
 800352e:	1dfb      	adds	r3, r7, #7
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d017      	beq.n	8003566 <maxDaysInMonth+0x5e>
 8003536:	1dfb      	adds	r3, r7, #7
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b03      	cmp	r3, #3
 800353c:	d013      	beq.n	8003566 <maxDaysInMonth+0x5e>
		month == 3  ||		// march
 800353e:	1dfb      	adds	r3, r7, #7
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b05      	cmp	r3, #5
 8003544:	d00f      	beq.n	8003566 <maxDaysInMonth+0x5e>
		month == 5  ||		// may
 8003546:	1dfb      	adds	r3, r7, #7
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	2b07      	cmp	r3, #7
 800354c:	d00b      	beq.n	8003566 <maxDaysInMonth+0x5e>
		month == 7  ||		// july
 800354e:	1dfb      	adds	r3, r7, #7
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2b08      	cmp	r3, #8
 8003554:	d007      	beq.n	8003566 <maxDaysInMonth+0x5e>
		month == 8  ||		// august
 8003556:	1dfb      	adds	r3, r7, #7
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	2b0a      	cmp	r3, #10
 800355c:	d003      	beq.n	8003566 <maxDaysInMonth+0x5e>
		month == 10 ||		// october
 800355e:	1dfb      	adds	r3, r7, #7
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b0c      	cmp	r3, #12
 8003564:	d101      	bne.n	800356a <maxDaysInMonth+0x62>
		month == 12) {		// december
		return 31;
 8003566:	231f      	movs	r3, #31
 8003568:	e034      	b.n	80035d4 <maxDaysInMonth+0xcc>
	}
	else if (month == 4 ||	// april
 800356a:	1dfb      	adds	r3, r7, #7
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	2b04      	cmp	r3, #4
 8003570:	d00b      	beq.n	800358a <maxDaysInMonth+0x82>
 8003572:	1dfb      	adds	r3, r7, #7
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	2b06      	cmp	r3, #6
 8003578:	d007      	beq.n	800358a <maxDaysInMonth+0x82>
			 month == 6 ||	// june
 800357a:	1dfb      	adds	r3, r7, #7
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b09      	cmp	r3, #9
 8003580:	d003      	beq.n	800358a <maxDaysInMonth+0x82>
			 month == 9 ||	// september
 8003582:	1dfb      	adds	r3, r7, #7
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b0b      	cmp	r3, #11
 8003588:	d101      	bne.n	800358e <maxDaysInMonth+0x86>
			 month == 11) {	// november
		return 30;
 800358a:	231e      	movs	r3, #30
 800358c:	e022      	b.n	80035d4 <maxDaysInMonth+0xcc>
	}

	// february/leap year calculator
	// leap year for every 4th year, but every 100th year is not a leap year except on every 400th year
	// ex. 2020 is a leap year, 2100 is not a leap year, 2000 is a leap year.
	else if (year % 400 == 0) return 29;
 800358e:	1d3b      	adds	r3, r7, #4
 8003590:	881a      	ldrh	r2, [r3, #0]
 8003592:	23c8      	movs	r3, #200	; 0xc8
 8003594:	0059      	lsls	r1, r3, #1
 8003596:	0010      	movs	r0, r2
 8003598:	f7fc fe44 	bl	8000224 <__aeabi_uidivmod>
 800359c:	000b      	movs	r3, r1
 800359e:	b29b      	uxth	r3, r3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <maxDaysInMonth+0xa0>
 80035a4:	231d      	movs	r3, #29
 80035a6:	e015      	b.n	80035d4 <maxDaysInMonth+0xcc>
	else if (year % 100 == 0) return 28;
 80035a8:	1d3b      	adds	r3, r7, #4
 80035aa:	881b      	ldrh	r3, [r3, #0]
 80035ac:	2164      	movs	r1, #100	; 0x64
 80035ae:	0018      	movs	r0, r3
 80035b0:	f7fc fe38 	bl	8000224 <__aeabi_uidivmod>
 80035b4:	000b      	movs	r3, r1
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <maxDaysInMonth+0xb8>
 80035bc:	231c      	movs	r3, #28
 80035be:	e009      	b.n	80035d4 <maxDaysInMonth+0xcc>
	else if (year % 4 == 0) return 29;
 80035c0:	1d3b      	adds	r3, r7, #4
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	2203      	movs	r2, #3
 80035c6:	4013      	ands	r3, r2
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <maxDaysInMonth+0xca>
 80035ce:	231d      	movs	r3, #29
 80035d0:	e000      	b.n	80035d4 <maxDaysInMonth+0xcc>
	else return 28;
 80035d2:	231c      	movs	r3, #28
}
 80035d4:	0018      	movs	r0, r3
 80035d6:	46bd      	mov	sp, r7
 80035d8:	b002      	add	sp, #8
 80035da:	bd80      	pop	{r7, pc}

080035dc <input_test>:
static struct coords b2Box;
static struct coords b3Box;
static struct coords b4Box;
static uint8_t b1TapS, b1HoldS, b2TapS, b2HoldS, b3TapS, b3HoldS, b4TapS, b4HoldS;

void input_test(SPI_HandleTypeDef *hspi) {
 80035dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035de:	b08f      	sub	sp, #60	; 0x3c
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	6078      	str	r0, [r7, #4]
	// this really fucking hurts my eyes
	hSpacing = getDisplayWidth()/2.5;
 80035e4:	f7ff fd22 	bl	800302c <getDisplayWidth>
 80035e8:	0003      	movs	r3, r0
 80035ea:	0018      	movs	r0, r3
 80035ec:	f7fe fb28 	bl	8001c40 <__aeabi_i2d>
 80035f0:	2200      	movs	r2, #0
 80035f2:	4b77      	ldr	r3, [pc, #476]	; (80037d0 <input_test+0x1f4>)
 80035f4:	f7fd fca4 	bl	8000f40 <__aeabi_ddiv>
 80035f8:	0003      	movs	r3, r0
 80035fa:	000c      	movs	r4, r1
 80035fc:	0018      	movs	r0, r3
 80035fe:	0021      	movs	r1, r4
 8003600:	f7fc ff52 	bl	80004a8 <__aeabi_d2uiz>
 8003604:	0003      	movs	r3, r0
 8003606:	b29a      	uxth	r2, r3
 8003608:	4b72      	ldr	r3, [pc, #456]	; (80037d4 <input_test+0x1f8>)
 800360a:	801a      	strh	r2, [r3, #0]
	vSpacing = getDisplayHeight()/4;
 800360c:	f7ff fd04 	bl	8003018 <getDisplayHeight>
 8003610:	0003      	movs	r3, r0
 8003612:	089b      	lsrs	r3, r3, #2
 8003614:	b29a      	uxth	r2, r3
 8003616:	4b70      	ldr	r3, [pc, #448]	; (80037d8 <input_test+0x1fc>)
 8003618:	801a      	strh	r2, [r3, #0]
	b2Box.x = getDisplayWidth()/2;
 800361a:	f7ff fd07 	bl	800302c <getDisplayWidth>
 800361e:	0003      	movs	r3, r0
 8003620:	085b      	lsrs	r3, r3, #1
 8003622:	b29b      	uxth	r3, r3
 8003624:	001a      	movs	r2, r3
 8003626:	4b6d      	ldr	r3, [pc, #436]	; (80037dc <input_test+0x200>)
 8003628:	601a      	str	r2, [r3, #0]
	b2Box.y = getDisplayHeight()/4;
 800362a:	f7ff fcf5 	bl	8003018 <getDisplayHeight>
 800362e:	0003      	movs	r3, r0
 8003630:	089b      	lsrs	r3, r3, #2
 8003632:	b29b      	uxth	r3, r3
 8003634:	001a      	movs	r2, r3
 8003636:	4b69      	ldr	r3, [pc, #420]	; (80037dc <input_test+0x200>)
 8003638:	605a      	str	r2, [r3, #4]
	b1Box.x = b2Box.x-hSpacing;
 800363a:	4b68      	ldr	r3, [pc, #416]	; (80037dc <input_test+0x200>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a65      	ldr	r2, [pc, #404]	; (80037d4 <input_test+0x1f8>)
 8003640:	8812      	ldrh	r2, [r2, #0]
 8003642:	1a9a      	subs	r2, r3, r2
 8003644:	4b66      	ldr	r3, [pc, #408]	; (80037e0 <input_test+0x204>)
 8003646:	601a      	str	r2, [r3, #0]
	b1Box.y = b2Box.y;
 8003648:	4b64      	ldr	r3, [pc, #400]	; (80037dc <input_test+0x200>)
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	4b64      	ldr	r3, [pc, #400]	; (80037e0 <input_test+0x204>)
 800364e:	605a      	str	r2, [r3, #4]
	b3Box.x = b1Box.x;
 8003650:	4b63      	ldr	r3, [pc, #396]	; (80037e0 <input_test+0x204>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	4b63      	ldr	r3, [pc, #396]	; (80037e4 <input_test+0x208>)
 8003656:	601a      	str	r2, [r3, #0]
	b3Box.y = b1Box.y+vSpacing;
 8003658:	4b61      	ldr	r3, [pc, #388]	; (80037e0 <input_test+0x204>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	4a5e      	ldr	r2, [pc, #376]	; (80037d8 <input_test+0x1fc>)
 800365e:	8812      	ldrh	r2, [r2, #0]
 8003660:	189a      	adds	r2, r3, r2
 8003662:	4b60      	ldr	r3, [pc, #384]	; (80037e4 <input_test+0x208>)
 8003664:	605a      	str	r2, [r3, #4]
	b4Box.x = b1Box.x+hSpacing;
 8003666:	4b5e      	ldr	r3, [pc, #376]	; (80037e0 <input_test+0x204>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a5a      	ldr	r2, [pc, #360]	; (80037d4 <input_test+0x1f8>)
 800366c:	8812      	ldrh	r2, [r2, #0]
 800366e:	189a      	adds	r2, r3, r2
 8003670:	4b5d      	ldr	r3, [pc, #372]	; (80037e8 <input_test+0x20c>)
 8003672:	601a      	str	r2, [r3, #0]
	b4Box.y = b1Box.y+vSpacing;
 8003674:	4b5a      	ldr	r3, [pc, #360]	; (80037e0 <input_test+0x204>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	4a57      	ldr	r2, [pc, #348]	; (80037d8 <input_test+0x1fc>)
 800367a:	8812      	ldrh	r2, [r2, #0]
 800367c:	189a      	adds	r2, r3, r2
 800367e:	4b5a      	ldr	r3, [pc, #360]	; (80037e8 <input_test+0x20c>)
 8003680:	605a      	str	r2, [r3, #4]
//	static uint8_t b1TapS, b1HoldS, b2TapS, b2HoldS, b3TapS, b3HoldS, b4TapS, b4HoldS;

	layout(hspi);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	0018      	movs	r0, r3
 8003686:	f000 f8bd 	bl	8003804 <layout>
//				buttonHeldVisual(b2Box.x, b2Box.y, 0, hspi);
//				buttonHeldVisual(b3Box.x, b3Box.y, 0, hspi);
//				buttonHeldVisual(b4Box.x, b4Box.y, 0, hspi);
//				break;
//		}
		if (buttons.is1Pressed || buttons.is2Pressed || buttons.is3Pressed || buttons.is4Pressed) {
 800368a:	4b58      	ldr	r3, [pc, #352]	; (80037ec <input_test+0x210>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10e      	bne.n	80036b2 <input_test+0xd6>
 8003694:	4b55      	ldr	r3, [pc, #340]	; (80037ec <input_test+0x210>)
 8003696:	785b      	ldrb	r3, [r3, #1]
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d109      	bne.n	80036b2 <input_test+0xd6>
 800369e:	4b53      	ldr	r3, [pc, #332]	; (80037ec <input_test+0x210>)
 80036a0:	789b      	ldrb	r3, [r3, #2]
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d104      	bne.n	80036b2 <input_test+0xd6>
 80036a8:	4b50      	ldr	r3, [pc, #320]	; (80037ec <input_test+0x210>)
 80036aa:	78db      	ldrb	r3, [r3, #3]
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d067      	beq.n	8003782 <input_test+0x1a6>
			if (buttons.is1Pressed) buttonTappedVisual(b1Box.x, b1Box.y, b1TapS=1-b1TapS, hspi);
 80036b2:	4b4e      	ldr	r3, [pc, #312]	; (80037ec <input_test+0x210>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d011      	beq.n	80036e0 <input_test+0x104>
 80036bc:	4b48      	ldr	r3, [pc, #288]	; (80037e0 <input_test+0x204>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	b298      	uxth	r0, r3
 80036c2:	4b47      	ldr	r3, [pc, #284]	; (80037e0 <input_test+0x204>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	b299      	uxth	r1, r3
 80036c8:	4b49      	ldr	r3, [pc, #292]	; (80037f0 <input_test+0x214>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2201      	movs	r2, #1
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	4b47      	ldr	r3, [pc, #284]	; (80037f0 <input_test+0x214>)
 80036d4:	701a      	strb	r2, [r3, #0]
 80036d6:	4b46      	ldr	r3, [pc, #280]	; (80037f0 <input_test+0x214>)
 80036d8:	781a      	ldrb	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f000 f976 	bl	80039cc <buttonTappedVisual>
			if (buttons.is2Pressed) buttonTappedVisual(b2Box.x, b2Box.y, b2TapS=1-b2TapS, hspi);
 80036e0:	4b42      	ldr	r3, [pc, #264]	; (80037ec <input_test+0x210>)
 80036e2:	785b      	ldrb	r3, [r3, #1]
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d011      	beq.n	800370e <input_test+0x132>
 80036ea:	4b3c      	ldr	r3, [pc, #240]	; (80037dc <input_test+0x200>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	b298      	uxth	r0, r3
 80036f0:	4b3a      	ldr	r3, [pc, #232]	; (80037dc <input_test+0x200>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	b299      	uxth	r1, r3
 80036f6:	4b3f      	ldr	r3, [pc, #252]	; (80037f4 <input_test+0x218>)
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	2201      	movs	r2, #1
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	4b3c      	ldr	r3, [pc, #240]	; (80037f4 <input_test+0x218>)
 8003702:	701a      	strb	r2, [r3, #0]
 8003704:	4b3b      	ldr	r3, [pc, #236]	; (80037f4 <input_test+0x218>)
 8003706:	781a      	ldrb	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f000 f95f 	bl	80039cc <buttonTappedVisual>
			if (buttons.is3Pressed) buttonTappedVisual(b3Box.x, b3Box.y, b3TapS=1-b3TapS, hspi);
 800370e:	4b37      	ldr	r3, [pc, #220]	; (80037ec <input_test+0x210>)
 8003710:	789b      	ldrb	r3, [r3, #2]
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d011      	beq.n	800373c <input_test+0x160>
 8003718:	4b32      	ldr	r3, [pc, #200]	; (80037e4 <input_test+0x208>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	b298      	uxth	r0, r3
 800371e:	4b31      	ldr	r3, [pc, #196]	; (80037e4 <input_test+0x208>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	b299      	uxth	r1, r3
 8003724:	4b34      	ldr	r3, [pc, #208]	; (80037f8 <input_test+0x21c>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2201      	movs	r2, #1
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	b2da      	uxtb	r2, r3
 800372e:	4b32      	ldr	r3, [pc, #200]	; (80037f8 <input_test+0x21c>)
 8003730:	701a      	strb	r2, [r3, #0]
 8003732:	4b31      	ldr	r3, [pc, #196]	; (80037f8 <input_test+0x21c>)
 8003734:	781a      	ldrb	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f000 f948 	bl	80039cc <buttonTappedVisual>
			if (buttons.is4Pressed) buttonTappedVisual(b4Box.x, b4Box.y, b4TapS=1-b4TapS, hspi);
 800373c:	4b2b      	ldr	r3, [pc, #172]	; (80037ec <input_test+0x210>)
 800373e:	78db      	ldrb	r3, [r3, #3]
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d011      	beq.n	800376a <input_test+0x18e>
 8003746:	4b28      	ldr	r3, [pc, #160]	; (80037e8 <input_test+0x20c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	b298      	uxth	r0, r3
 800374c:	4b26      	ldr	r3, [pc, #152]	; (80037e8 <input_test+0x20c>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	b299      	uxth	r1, r3
 8003752:	4b2a      	ldr	r3, [pc, #168]	; (80037fc <input_test+0x220>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2201      	movs	r2, #1
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	b2da      	uxtb	r2, r3
 800375c:	4b27      	ldr	r3, [pc, #156]	; (80037fc <input_test+0x220>)
 800375e:	701a      	strb	r2, [r3, #0]
 8003760:	4b26      	ldr	r3, [pc, #152]	; (80037fc <input_test+0x220>)
 8003762:	781a      	ldrb	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f000 f931 	bl	80039cc <buttonTappedVisual>
//			HAL_Delay(500);
			buttons.is1Pressed = buttons.is2Pressed = buttons.is3Pressed = buttons.is4Pressed = 0;
 800376a:	2200      	movs	r2, #0
 800376c:	4b1f      	ldr	r3, [pc, #124]	; (80037ec <input_test+0x210>)
 800376e:	1c11      	adds	r1, r2, #0
 8003770:	70d9      	strb	r1, [r3, #3]
 8003772:	4b1e      	ldr	r3, [pc, #120]	; (80037ec <input_test+0x210>)
 8003774:	1c11      	adds	r1, r2, #0
 8003776:	7099      	strb	r1, [r3, #2]
 8003778:	4b1c      	ldr	r3, [pc, #112]	; (80037ec <input_test+0x210>)
 800377a:	1c11      	adds	r1, r2, #0
 800377c:	7059      	strb	r1, [r3, #1]
 800377e:	4b1b      	ldr	r3, [pc, #108]	; (80037ec <input_test+0x210>)
 8003780:	701a      	strb	r2, [r3, #0]
//			buttonTappedVisual(b3Box.x, b3Box.y, 0, hspi);
//			buttonTappedVisual(b4Box.x, b4Box.y, 0, hspi);
//		}

		char str[40];
		sprintf(str, "%d, %d, %d, %d", b1TapS, b2TapS, b3TapS, b4TapS);
 8003782:	4b1b      	ldr	r3, [pc, #108]	; (80037f0 <input_test+0x214>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	001c      	movs	r4, r3
 8003788:	4b1a      	ldr	r3, [pc, #104]	; (80037f4 <input_test+0x218>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	001d      	movs	r5, r3
 800378e:	4b1a      	ldr	r3, [pc, #104]	; (80037f8 <input_test+0x21c>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	001a      	movs	r2, r3
 8003794:	4b19      	ldr	r3, [pc, #100]	; (80037fc <input_test+0x220>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	4919      	ldr	r1, [pc, #100]	; (8003800 <input_test+0x224>)
 800379a:	2608      	movs	r6, #8
 800379c:	19b8      	adds	r0, r7, r6
 800379e:	9301      	str	r3, [sp, #4]
 80037a0:	9200      	str	r2, [sp, #0]
 80037a2:	002b      	movs	r3, r5
 80037a4:	0022      	movs	r2, r4
 80037a6:	f005 ff55 	bl	8009654 <siprintf>
		drawCenteredText(getDisplayWidth()/2, getDisplayHeight()-15, str, hspi);
 80037aa:	f7ff fc3f 	bl	800302c <getDisplayWidth>
 80037ae:	0003      	movs	r3, r0
 80037b0:	085b      	lsrs	r3, r3, #1
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	b2dc      	uxtb	r4, r3
 80037b6:	f7ff fc2f 	bl	8003018 <getDisplayHeight>
 80037ba:	0003      	movs	r3, r0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	3b0f      	subs	r3, #15
 80037c0:	b2d9      	uxtb	r1, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	19ba      	adds	r2, r7, r6
 80037c6:	0020      	movs	r0, r4
 80037c8:	f7ff fb16 	bl	8002df8 <drawCenteredText>
	while (1) {
 80037cc:	e75d      	b.n	800368a <input_test+0xae>
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	40040000 	.word	0x40040000
 80037d4:	200000a6 	.word	0x200000a6
 80037d8:	200000a8 	.word	0x200000a8
 80037dc:	200000b4 	.word	0x200000b4
 80037e0:	200000ac 	.word	0x200000ac
 80037e4:	200000bc 	.word	0x200000bc
 80037e8:	200000c4 	.word	0x200000c4
 80037ec:	20000158 	.word	0x20000158
 80037f0:	200000cc 	.word	0x200000cc
 80037f4:	200000cd 	.word	0x200000cd
 80037f8:	200000ce 	.word	0x200000ce
 80037fc:	200000cf 	.word	0x200000cf
 8003800:	08009dfc 	.word	0x08009dfc

08003804 <layout>:
	}
}

void layout(SPI_HandleTypeDef *hspi) {
 8003804:	b590      	push	{r4, r7, lr}
 8003806:	b085      	sub	sp, #20
 8003808:	af02      	add	r7, sp, #8
 800380a:	6078      	str	r0, [r7, #4]
	setDisplayOrientation(3, hspi);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	0019      	movs	r1, r3
 8003810:	2003      	movs	r0, #3
 8003812:	f7ff fb97 	bl	8002f44 <setDisplayOrientation>
	clearScreen(bgColor, hspi);
 8003816:	4b61      	ldr	r3, [pc, #388]	; (800399c <layout+0x198>)
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	0011      	movs	r1, r2
 800381e:	0018      	movs	r0, r3
 8003820:	f7fe ff6a 	bl	80026f8 <clearScreen>

	drawTitle("Input Test", hspi);
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	4b5e      	ldr	r3, [pc, #376]	; (80039a0 <layout+0x19c>)
 8003828:	0011      	movs	r1, r2
 800382a:	0018      	movs	r0, r3
 800382c:	f001 fad2 	bl	8004dd4 <drawTitle>
	drawHLine(0, b1Box.y-5, getDisplayWidth(), ST77XX_BLACK, hspi);
 8003830:	4b5c      	ldr	r3, [pc, #368]	; (80039a4 <layout+0x1a0>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	1f5c      	subs	r4, r3, #5
 8003836:	f7ff fbf9 	bl	800302c <getDisplayWidth>
 800383a:	0003      	movs	r3, r0
 800383c:	001a      	movs	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	2300      	movs	r3, #0
 8003844:	0021      	movs	r1, r4
 8003846:	2000      	movs	r0, #0
 8003848:	f7fe fde0 	bl	800240c <drawHLine>
	drawHLine(0, b4Box.y+vSpacing+5, getDisplayWidth(), ST77XX_BLACK, hspi);
 800384c:	4b56      	ldr	r3, [pc, #344]	; (80039a8 <layout+0x1a4>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	4a56      	ldr	r2, [pc, #344]	; (80039ac <layout+0x1a8>)
 8003852:	8812      	ldrh	r2, [r2, #0]
 8003854:	189b      	adds	r3, r3, r2
 8003856:	1d5c      	adds	r4, r3, #5
 8003858:	f7ff fbe8 	bl	800302c <getDisplayWidth>
 800385c:	0003      	movs	r3, r0
 800385e:	001a      	movs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	2300      	movs	r3, #0
 8003866:	0021      	movs	r1, r4
 8003868:	2000      	movs	r0, #0
 800386a:	f7fe fdcf 	bl	800240c <drawHLine>
	drawRect(b1Box.x, b1Box.y-1, hSpacing, vSpacing, ST77XX_BLACK, hspi);
 800386e:	4b4d      	ldr	r3, [pc, #308]	; (80039a4 <layout+0x1a0>)
 8003870:	6818      	ldr	r0, [r3, #0]
 8003872:	4b4c      	ldr	r3, [pc, #304]	; (80039a4 <layout+0x1a0>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	1e59      	subs	r1, r3, #1
 8003878:	4b4d      	ldr	r3, [pc, #308]	; (80039b0 <layout+0x1ac>)
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	001a      	movs	r2, r3
 800387e:	4b4b      	ldr	r3, [pc, #300]	; (80039ac <layout+0x1a8>)
 8003880:	881b      	ldrh	r3, [r3, #0]
 8003882:	001c      	movs	r4, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	9301      	str	r3, [sp, #4]
 8003888:	2300      	movs	r3, #0
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	0023      	movs	r3, r4
 800388e:	f7fe fea9 	bl	80025e4 <drawRect>
	drawRect(b2Box.x, b2Box.y-1, hSpacing, vSpacing, ST77XX_BLACK, hspi);
 8003892:	4b48      	ldr	r3, [pc, #288]	; (80039b4 <layout+0x1b0>)
 8003894:	6818      	ldr	r0, [r3, #0]
 8003896:	4b47      	ldr	r3, [pc, #284]	; (80039b4 <layout+0x1b0>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	1e59      	subs	r1, r3, #1
 800389c:	4b44      	ldr	r3, [pc, #272]	; (80039b0 <layout+0x1ac>)
 800389e:	881b      	ldrh	r3, [r3, #0]
 80038a0:	001a      	movs	r2, r3
 80038a2:	4b42      	ldr	r3, [pc, #264]	; (80039ac <layout+0x1a8>)
 80038a4:	881b      	ldrh	r3, [r3, #0]
 80038a6:	001c      	movs	r4, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	9301      	str	r3, [sp, #4]
 80038ac:	2300      	movs	r3, #0
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	0023      	movs	r3, r4
 80038b2:	f7fe fe97 	bl	80025e4 <drawRect>
	drawRect(b3Box.x, b3Box.y-1, hSpacing, vSpacing, ST77XX_BLACK, hspi);
 80038b6:	4b40      	ldr	r3, [pc, #256]	; (80039b8 <layout+0x1b4>)
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	4b3f      	ldr	r3, [pc, #252]	; (80039b8 <layout+0x1b4>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	1e59      	subs	r1, r3, #1
 80038c0:	4b3b      	ldr	r3, [pc, #236]	; (80039b0 <layout+0x1ac>)
 80038c2:	881b      	ldrh	r3, [r3, #0]
 80038c4:	001a      	movs	r2, r3
 80038c6:	4b39      	ldr	r3, [pc, #228]	; (80039ac <layout+0x1a8>)
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	001c      	movs	r4, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	9301      	str	r3, [sp, #4]
 80038d0:	2300      	movs	r3, #0
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	0023      	movs	r3, r4
 80038d6:	f7fe fe85 	bl	80025e4 <drawRect>
	drawRect(b4Box.x, b4Box.y-1, hSpacing, vSpacing, ST77XX_BLACK, hspi);
 80038da:	4b33      	ldr	r3, [pc, #204]	; (80039a8 <layout+0x1a4>)
 80038dc:	6818      	ldr	r0, [r3, #0]
 80038de:	4b32      	ldr	r3, [pc, #200]	; (80039a8 <layout+0x1a4>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	1e59      	subs	r1, r3, #1
 80038e4:	4b32      	ldr	r3, [pc, #200]	; (80039b0 <layout+0x1ac>)
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	001a      	movs	r2, r3
 80038ea:	4b30      	ldr	r3, [pc, #192]	; (80039ac <layout+0x1a8>)
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	001c      	movs	r4, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	9301      	str	r3, [sp, #4]
 80038f4:	2300      	movs	r3, #0
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	0023      	movs	r3, r4
 80038fa:	f7fe fe73 	bl	80025e4 <drawRect>
	setTextSize(1);
 80038fe:	2001      	movs	r0, #1
 8003900:	f7ff fb00 	bl	8002f04 <setTextSize>
	drawCenteredText(leftToCentered(b1Box.x, hSpacing), b1Box.y, "Button 1", hspi);
 8003904:	4b27      	ldr	r3, [pc, #156]	; (80039a4 <layout+0x1a0>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	b29a      	uxth	r2, r3
 800390a:	4b29      	ldr	r3, [pc, #164]	; (80039b0 <layout+0x1ac>)
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	0019      	movs	r1, r3
 8003910:	0010      	movs	r0, r2
 8003912:	f7ff fb95 	bl	8003040 <leftToCentered>
 8003916:	0003      	movs	r3, r0
 8003918:	b2d8      	uxtb	r0, r3
 800391a:	4b22      	ldr	r3, [pc, #136]	; (80039a4 <layout+0x1a0>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	b2d9      	uxtb	r1, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a26      	ldr	r2, [pc, #152]	; (80039bc <layout+0x1b8>)
 8003924:	f7ff fa68 	bl	8002df8 <drawCenteredText>
	drawCenteredText(leftToCentered(b2Box.x, hSpacing), b2Box.y, "Button 2", hspi);
 8003928:	4b22      	ldr	r3, [pc, #136]	; (80039b4 <layout+0x1b0>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	b29a      	uxth	r2, r3
 800392e:	4b20      	ldr	r3, [pc, #128]	; (80039b0 <layout+0x1ac>)
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	0019      	movs	r1, r3
 8003934:	0010      	movs	r0, r2
 8003936:	f7ff fb83 	bl	8003040 <leftToCentered>
 800393a:	0003      	movs	r3, r0
 800393c:	b2d8      	uxtb	r0, r3
 800393e:	4b1d      	ldr	r3, [pc, #116]	; (80039b4 <layout+0x1b0>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	b2d9      	uxtb	r1, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a1e      	ldr	r2, [pc, #120]	; (80039c0 <layout+0x1bc>)
 8003948:	f7ff fa56 	bl	8002df8 <drawCenteredText>
	drawCenteredText(leftToCentered(b3Box.x, hSpacing), b3Box.y, "Button 3", hspi);
 800394c:	4b1a      	ldr	r3, [pc, #104]	; (80039b8 <layout+0x1b4>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	b29a      	uxth	r2, r3
 8003952:	4b17      	ldr	r3, [pc, #92]	; (80039b0 <layout+0x1ac>)
 8003954:	881b      	ldrh	r3, [r3, #0]
 8003956:	0019      	movs	r1, r3
 8003958:	0010      	movs	r0, r2
 800395a:	f7ff fb71 	bl	8003040 <leftToCentered>
 800395e:	0003      	movs	r3, r0
 8003960:	b2d8      	uxtb	r0, r3
 8003962:	4b15      	ldr	r3, [pc, #84]	; (80039b8 <layout+0x1b4>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	b2d9      	uxtb	r1, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a16      	ldr	r2, [pc, #88]	; (80039c4 <layout+0x1c0>)
 800396c:	f7ff fa44 	bl	8002df8 <drawCenteredText>
	drawCenteredText(leftToCentered(b4Box.x, hSpacing), b4Box.y, "Button 4", hspi);
 8003970:	4b0d      	ldr	r3, [pc, #52]	; (80039a8 <layout+0x1a4>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	b29a      	uxth	r2, r3
 8003976:	4b0e      	ldr	r3, [pc, #56]	; (80039b0 <layout+0x1ac>)
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	0019      	movs	r1, r3
 800397c:	0010      	movs	r0, r2
 800397e:	f7ff fb5f 	bl	8003040 <leftToCentered>
 8003982:	0003      	movs	r3, r0
 8003984:	b2d8      	uxtb	r0, r3
 8003986:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <layout+0x1a4>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	b2d9      	uxtb	r1, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a0e      	ldr	r2, [pc, #56]	; (80039c8 <layout+0x1c4>)
 8003990:	f7ff fa32 	bl	8002df8 <drawCenteredText>
}
 8003994:	46c0      	nop			; (mov r8, r8)
 8003996:	46bd      	mov	sp, r7
 8003998:	b003      	add	sp, #12
 800399a:	bd90      	pop	{r4, r7, pc}
 800399c:	20000010 	.word	0x20000010
 80039a0:	08009e0c 	.word	0x08009e0c
 80039a4:	200000ac 	.word	0x200000ac
 80039a8:	200000c4 	.word	0x200000c4
 80039ac:	200000a8 	.word	0x200000a8
 80039b0:	200000a6 	.word	0x200000a6
 80039b4:	200000b4 	.word	0x200000b4
 80039b8:	200000bc 	.word	0x200000bc
 80039bc:	08009e18 	.word	0x08009e18
 80039c0:	08009e24 	.word	0x08009e24
 80039c4:	08009e30 	.word	0x08009e30
 80039c8:	08009e3c 	.word	0x08009e3c

080039cc <buttonTappedVisual>:

void buttonTappedVisual(uint16_t boxX, uint16_t boxY, uint8_t isVisible, SPI_HandleTypeDef *hspi) {
 80039cc:	b5b0      	push	{r4, r5, r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af02      	add	r7, sp, #8
 80039d2:	0004      	movs	r4, r0
 80039d4:	0008      	movs	r0, r1
 80039d6:	0011      	movs	r1, r2
 80039d8:	607b      	str	r3, [r7, #4]
 80039da:	250e      	movs	r5, #14
 80039dc:	197b      	adds	r3, r7, r5
 80039de:	1c22      	adds	r2, r4, #0
 80039e0:	801a      	strh	r2, [r3, #0]
 80039e2:	240c      	movs	r4, #12
 80039e4:	193b      	adds	r3, r7, r4
 80039e6:	1c02      	adds	r2, r0, #0
 80039e8:	801a      	strh	r2, [r3, #0]
 80039ea:	200b      	movs	r0, #11
 80039ec:	183b      	adds	r3, r7, r0
 80039ee:	1c0a      	adds	r2, r1, #0
 80039f0:	701a      	strb	r2, [r3, #0]
	uint16_t x = boxX+hSpacing/2-15;
 80039f2:	4b1e      	ldr	r3, [pc, #120]	; (8003a6c <buttonTappedVisual+0xa0>)
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	085b      	lsrs	r3, r3, #1
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	197b      	adds	r3, r7, r5
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	18d3      	adds	r3, r2, r3
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	2316      	movs	r3, #22
 8003a04:	18fb      	adds	r3, r7, r3
 8003a06:	3a0f      	subs	r2, #15
 8003a08:	801a      	strh	r2, [r3, #0]
	uint16_t y = boxY+fontH+10;
 8003a0a:	4b19      	ldr	r3, [pc, #100]	; (8003a70 <buttonTappedVisual+0xa4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	193b      	adds	r3, r7, r4
 8003a12:	881b      	ldrh	r3, [r3, #0]
 8003a14:	18d3      	adds	r3, r2, r3
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	2314      	movs	r3, #20
 8003a1a:	18fb      	adds	r3, r7, r3
 8003a1c:	320a      	adds	r2, #10
 8003a1e:	801a      	strh	r2, [r3, #0]

	if (isVisible) fillRect(x, y, 10, 10, 0xDCC9, hspi);		// pale orange
 8003a20:	183b      	adds	r3, r7, r0
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00e      	beq.n	8003a46 <buttonTappedVisual+0x7a>
 8003a28:	2316      	movs	r3, #22
 8003a2a:	18fb      	adds	r3, r7, r3
 8003a2c:	8818      	ldrh	r0, [r3, #0]
 8003a2e:	2314      	movs	r3, #20
 8003a30:	18fb      	adds	r3, r7, r3
 8003a32:	8819      	ldrh	r1, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	9301      	str	r3, [sp, #4]
 8003a38:	4b0e      	ldr	r3, [pc, #56]	; (8003a74 <buttonTappedVisual+0xa8>)
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	230a      	movs	r3, #10
 8003a3e:	220a      	movs	r2, #10
 8003a40:	f7fe fe0a 	bl	8002658 <fillRect>
	else fillRect(x, y, 10, 10, bgColor, hspi);
}
 8003a44:	e00e      	b.n	8003a64 <buttonTappedVisual+0x98>
	else fillRect(x, y, 10, 10, bgColor, hspi);
 8003a46:	2316      	movs	r3, #22
 8003a48:	18fb      	adds	r3, r7, r3
 8003a4a:	8818      	ldrh	r0, [r3, #0]
 8003a4c:	2314      	movs	r3, #20
 8003a4e:	18fb      	adds	r3, r7, r3
 8003a50:	8819      	ldrh	r1, [r3, #0]
 8003a52:	4b09      	ldr	r3, [pc, #36]	; (8003a78 <buttonTappedVisual+0xac>)
 8003a54:	881b      	ldrh	r3, [r3, #0]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	9201      	str	r2, [sp, #4]
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	230a      	movs	r3, #10
 8003a5e:	220a      	movs	r2, #10
 8003a60:	f7fe fdfa 	bl	8002658 <fillRect>
}
 8003a64:	46c0      	nop			; (mov r8, r8)
 8003a66:	46bd      	mov	sp, r7
 8003a68:	b006      	add	sp, #24
 8003a6a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a6c:	200000a6 	.word	0x200000a6
 8003a70:	2000000c 	.word	0x2000000c
 8003a74:	0000dcc9 	.word	0x0000dcc9
 8003a78:	20000010 	.word	0x20000010

08003a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a80:	f001 fa70 	bl	8004f64 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a84:	f000 f840 	bl	8003b08 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a88:	f000 fcbe 	bl	8004408 <MX_GPIO_Init>
  MX_DMA_Init();
 8003a8c:	f000 fc9e 	bl	80043cc <MX_DMA_Init>
  MX_ADC_Init();
 8003a90:	f000 f8c2 	bl	8003c18 <MX_ADC_Init>
  MX_RTC_Init();
 8003a94:	f000 f924 	bl	8003ce0 <MX_RTC_Init>
  MX_TIM21_Init();
 8003a98:	f000 fb4a 	bl	8004130 <MX_TIM21_Init>
  MX_TIM22_Init();
 8003a9c:	f000 fbe0 	bl	8004260 <MX_TIM22_Init>
  MX_TIM2_Init();
 8003aa0:	f000 f9f2 	bl	8003e88 <MX_TIM2_Init>
  MX_TIM6_Init();
 8003aa4:	f000 fb08 	bl	80040b8 <MX_TIM6_Init>
  MX_TIM3_Init();
 8003aa8:	f000 fa7c 	bl	8003fa4 <MX_TIM3_Init>
  MX_SPI2_Init();
 8003aac:	f000 f9b4 	bl	8003e18 <MX_SPI2_Init>
  MX_USB_PCD_Init();
 8003ab0:	f000 fc66 	bl	8004380 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
	// rtc software calibration
	setRTCCalibration(-8, &hrtc);
 8003ab4:	4a10      	ldr	r2, [pc, #64]	; (8003af8 <main+0x7c>)
 8003ab6:	2308      	movs	r3, #8
 8003ab8:	425b      	negs	r3, r3
 8003aba:	0011      	movs	r1, r2
 8003abc:	0018      	movs	r0, r3
 8003abe:	f7ff fcc3 	bl	8003448 <setRTCCalibration>
//	HAL_SuspendTick();					// disable systick. unused anyway (bad practice?)

  	// initialization for display
	TFT_startup(&hspi2);
 8003ac2:	4b0e      	ldr	r3, [pc, #56]	; (8003afc <main+0x80>)
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	f7fe fbf3 	bl	80022b0 <TFT_startup>

	// initialization for ui and hardware
	initFace();
 8003aca:	f001 f9eb 	bl	8004ea4 <initFace>
	setClockAlarm(&hrtc);
 8003ace:	4b0a      	ldr	r3, [pc, #40]	; (8003af8 <main+0x7c>)
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	f7ff fad9 	bl	8003088 <setClockAlarm>
	runADCSampler(&htim22);
 8003ad6:	4b0a      	ldr	r3, [pc, #40]	; (8003b00 <main+0x84>)
 8003ad8:	0018      	movs	r0, r3
 8003ada:	f001 f8df 	bl	8004c9c <runADCSampler>
	setDisplayBacklight(50, &htim3);
 8003ade:	4b09      	ldr	r3, [pc, #36]	; (8003b04 <main+0x88>)
 8003ae0:	0019      	movs	r1, r3
 8003ae2:	2032      	movs	r0, #50	; 0x32
 8003ae4:	f001 f8fe 	bl	8004ce4 <setDisplayBacklight>
//			runMotor(&htim6);		// pls fix
//			updateDisplay(&hrtc, &hspi2);
//			isTimerDone = isAlarmDone = 0;
//		}
//	}
	input_test(&hspi2);
 8003ae8:	4b04      	ldr	r3, [pc, #16]	; (8003afc <main+0x80>)
 8003aea:	0018      	movs	r0, r3
 8003aec:	f7ff fd76 	bl	80035dc <input_test>
 8003af0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8003af2:	0018      	movs	r0, r3
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	20000234 	.word	0x20000234
 8003afc:	20000164 	.word	0x20000164
 8003b00:	200001f8 	.word	0x200001f8
 8003b04:	200001bc 	.word	0x200001bc

08003b08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b08:	b590      	push	{r4, r7, lr}
 8003b0a:	b09f      	sub	sp, #124	; 0x7c
 8003b0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b0e:	2440      	movs	r4, #64	; 0x40
 8003b10:	193b      	adds	r3, r7, r4
 8003b12:	0018      	movs	r0, r3
 8003b14:	2338      	movs	r3, #56	; 0x38
 8003b16:	001a      	movs	r2, r3
 8003b18:	2100      	movs	r1, #0
 8003b1a:	f005 fd14 	bl	8009546 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b1e:	232c      	movs	r3, #44	; 0x2c
 8003b20:	18fb      	adds	r3, r7, r3
 8003b22:	0018      	movs	r0, r3
 8003b24:	2314      	movs	r3, #20
 8003b26:	001a      	movs	r2, r3
 8003b28:	2100      	movs	r1, #0
 8003b2a:	f005 fd0c 	bl	8009546 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b2e:	1d3b      	adds	r3, r7, #4
 8003b30:	0018      	movs	r0, r3
 8003b32:	2328      	movs	r3, #40	; 0x28
 8003b34:	001a      	movs	r2, r3
 8003b36:	2100      	movs	r1, #0
 8003b38:	f005 fd05 	bl	8009546 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b3c:	4b33      	ldr	r3, [pc, #204]	; (8003c0c <SystemClock_Config+0x104>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a33      	ldr	r2, [pc, #204]	; (8003c10 <SystemClock_Config+0x108>)
 8003b42:	401a      	ands	r2, r3
 8003b44:	4b31      	ldr	r3, [pc, #196]	; (8003c0c <SystemClock_Config+0x104>)
 8003b46:	2180      	movs	r1, #128	; 0x80
 8003b48:	0109      	lsls	r1, r1, #4
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003b4e:	f002 fb89 	bl	8006264 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003b52:	4b30      	ldr	r3, [pc, #192]	; (8003c14 <SystemClock_Config+0x10c>)
 8003b54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b56:	4b2f      	ldr	r3, [pc, #188]	; (8003c14 <SystemClock_Config+0x10c>)
 8003b58:	492d      	ldr	r1, [pc, #180]	; (8003c10 <SystemClock_Config+0x108>)
 8003b5a:	400a      	ands	r2, r1
 8003b5c:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8003b5e:	193b      	adds	r3, r7, r4
 8003b60:	2226      	movs	r2, #38	; 0x26
 8003b62:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003b64:	193b      	adds	r3, r7, r4
 8003b66:	2280      	movs	r2, #128	; 0x80
 8003b68:	0052      	lsls	r2, r2, #1
 8003b6a:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b6c:	0021      	movs	r1, r4
 8003b6e:	187b      	adds	r3, r7, r1
 8003b70:	2201      	movs	r2, #1
 8003b72:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b74:	187b      	adds	r3, r7, r1
 8003b76:	2210      	movs	r2, #16
 8003b78:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003b7a:	187b      	adds	r3, r7, r1
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b80:	187b      	adds	r3, r7, r1
 8003b82:	2202      	movs	r2, #2
 8003b84:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003b86:	187b      	adds	r3, r7, r1
 8003b88:	2200      	movs	r2, #0
 8003b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8003b8c:	187b      	adds	r3, r7, r1
 8003b8e:	2280      	movs	r2, #128	; 0x80
 8003b90:	02d2      	lsls	r2, r2, #11
 8003b92:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8003b94:	187b      	adds	r3, r7, r1
 8003b96:	2280      	movs	r2, #128	; 0x80
 8003b98:	03d2      	lsls	r2, r2, #15
 8003b9a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b9c:	187b      	adds	r3, r7, r1
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f002 fb6e 	bl	8006280 <HAL_RCC_OscConfig>
 8003ba4:	1e03      	subs	r3, r0, #0
 8003ba6:	d001      	beq.n	8003bac <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8003ba8:	f000 fce8 	bl	800457c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bac:	212c      	movs	r1, #44	; 0x2c
 8003bae:	187b      	adds	r3, r7, r1
 8003bb0:	220f      	movs	r2, #15
 8003bb2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bb4:	187b      	adds	r3, r7, r1
 8003bb6:	2203      	movs	r2, #3
 8003bb8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bba:	187b      	adds	r3, r7, r1
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003bc0:	187b      	adds	r3, r7, r1
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003bc6:	187b      	adds	r3, r7, r1
 8003bc8:	2200      	movs	r2, #0
 8003bca:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003bcc:	187b      	adds	r3, r7, r1
 8003bce:	2101      	movs	r1, #1
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f002 ff25 	bl	8006a20 <HAL_RCC_ClockConfig>
 8003bd6:	1e03      	subs	r3, r0, #0
 8003bd8:	d001      	beq.n	8003bde <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8003bda:	f000 fccf 	bl	800457c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 8003bde:	1d3b      	adds	r3, r7, #4
 8003be0:	2260      	movs	r2, #96	; 0x60
 8003be2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003be4:	1d3b      	adds	r3, r7, #4
 8003be6:	2280      	movs	r2, #128	; 0x80
 8003be8:	0252      	lsls	r2, r2, #9
 8003bea:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003bec:	1d3b      	adds	r3, r7, #4
 8003bee:	2280      	movs	r2, #128	; 0x80
 8003bf0:	04d2      	lsls	r2, r2, #19
 8003bf2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bf4:	1d3b      	adds	r3, r7, #4
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f003 f8c0 	bl	8006d7c <HAL_RCCEx_PeriphCLKConfig>
 8003bfc:	1e03      	subs	r3, r0, #0
 8003bfe:	d001      	beq.n	8003c04 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8003c00:	f000 fcbc 	bl	800457c <Error_Handler>
  }
}
 8003c04:	46c0      	nop			; (mov r8, r8)
 8003c06:	46bd      	mov	sp, r7
 8003c08:	b01f      	add	sp, #124	; 0x7c
 8003c0a:	bd90      	pop	{r4, r7, pc}
 8003c0c:	40007000 	.word	0x40007000
 8003c10:	ffffe7ff 	.word	0xffffe7ff
 8003c14:	40021000 	.word	0x40021000

08003c18 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003c1e:	003b      	movs	r3, r7
 8003c20:	0018      	movs	r0, r3
 8003c22:	2308      	movs	r3, #8
 8003c24:	001a      	movs	r2, r3
 8003c26:	2100      	movs	r1, #0
 8003c28:	f005 fc8d 	bl	8009546 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003c2c:	4b2a      	ldr	r3, [pc, #168]	; (8003cd8 <MX_ADC_Init+0xc0>)
 8003c2e:	4a2b      	ldr	r2, [pc, #172]	; (8003cdc <MX_ADC_Init+0xc4>)
 8003c30:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8003c32:	4b29      	ldr	r3, [pc, #164]	; (8003cd8 <MX_ADC_Init+0xc0>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003c38:	4b27      	ldr	r3, [pc, #156]	; (8003cd8 <MX_ADC_Init+0xc0>)
 8003c3a:	2280      	movs	r2, #128	; 0x80
 8003c3c:	05d2      	lsls	r2, r2, #23
 8003c3e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003c40:	4b25      	ldr	r3, [pc, #148]	; (8003cd8 <MX_ADC_Init+0xc0>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_79CYCLES_5;
 8003c46:	4b24      	ldr	r3, [pc, #144]	; (8003cd8 <MX_ADC_Init+0xc0>)
 8003c48:	2206      	movs	r2, #6
 8003c4a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003c4c:	4b22      	ldr	r3, [pc, #136]	; (8003cd8 <MX_ADC_Init+0xc0>)
 8003c4e:	2201      	movs	r2, #1
 8003c50:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003c52:	4b21      	ldr	r3, [pc, #132]	; (8003cd8 <MX_ADC_Init+0xc0>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8003c58:	4b1f      	ldr	r3, [pc, #124]	; (8003cd8 <MX_ADC_Init+0xc0>)
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003c60:	4b1d      	ldr	r3, [pc, #116]	; (8003cd8 <MX_ADC_Init+0xc0>)
 8003c62:	2221      	movs	r2, #33	; 0x21
 8003c64:	2100      	movs	r1, #0
 8003c66:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003c68:	4b1b      	ldr	r3, [pc, #108]	; (8003cd8 <MX_ADC_Init+0xc0>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c6e:	4b1a      	ldr	r3, [pc, #104]	; (8003cd8 <MX_ADC_Init+0xc0>)
 8003c70:	22c2      	movs	r2, #194	; 0xc2
 8003c72:	32ff      	adds	r2, #255	; 0xff
 8003c74:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003c76:	4b18      	ldr	r3, [pc, #96]	; (8003cd8 <MX_ADC_Init+0xc0>)
 8003c78:	222c      	movs	r2, #44	; 0x2c
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003c7e:	4b16      	ldr	r3, [pc, #88]	; (8003cd8 <MX_ADC_Init+0xc0>)
 8003c80:	2204      	movs	r2, #4
 8003c82:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003c84:	4b14      	ldr	r3, [pc, #80]	; (8003cd8 <MX_ADC_Init+0xc0>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003c8a:	4b13      	ldr	r3, [pc, #76]	; (8003cd8 <MX_ADC_Init+0xc0>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8003c90:	4b11      	ldr	r3, [pc, #68]	; (8003cd8 <MX_ADC_Init+0xc0>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003c96:	4b10      	ldr	r3, [pc, #64]	; (8003cd8 <MX_ADC_Init+0xc0>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003c9c:	4b0e      	ldr	r3, [pc, #56]	; (8003cd8 <MX_ADC_Init+0xc0>)
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f001 f9f2 	bl	8005088 <HAL_ADC_Init>
 8003ca4:	1e03      	subs	r3, r0, #0
 8003ca6:	d001      	beq.n	8003cac <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8003ca8:	f000 fc68 	bl	800457c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003cac:	003b      	movs	r3, r7
 8003cae:	2201      	movs	r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003cb2:	003b      	movs	r3, r7
 8003cb4:	2280      	movs	r2, #128	; 0x80
 8003cb6:	0152      	lsls	r2, r2, #5
 8003cb8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003cba:	003a      	movs	r2, r7
 8003cbc:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <MX_ADC_Init+0xc0>)
 8003cbe:	0011      	movs	r1, r2
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	f001 fc29 	bl	8005518 <HAL_ADC_ConfigChannel>
 8003cc6:	1e03      	subs	r3, r0, #0
 8003cc8:	d001      	beq.n	8003cce <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8003cca:	f000 fc57 	bl	800457c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003cce:	46c0      	nop			; (mov r8, r8)
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	b002      	add	sp, #8
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	200005d0 	.word	0x200005d0
 8003cdc:	40012400 	.word	0x40012400

08003ce0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b090      	sub	sp, #64	; 0x40
 8003ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003ce6:	232c      	movs	r3, #44	; 0x2c
 8003ce8:	18fb      	adds	r3, r7, r3
 8003cea:	0018      	movs	r0, r3
 8003cec:	2314      	movs	r3, #20
 8003cee:	001a      	movs	r2, r3
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	f005 fc28 	bl	8009546 <memset>
  RTC_DateTypeDef sDate = {0};
 8003cf6:	2328      	movs	r3, #40	; 0x28
 8003cf8:	18fb      	adds	r3, r7, r3
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8003cfe:	003b      	movs	r3, r7
 8003d00:	0018      	movs	r0, r3
 8003d02:	2328      	movs	r3, #40	; 0x28
 8003d04:	001a      	movs	r2, r3
 8003d06:	2100      	movs	r1, #0
 8003d08:	f005 fc1d 	bl	8009546 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003d0c:	4b40      	ldr	r3, [pc, #256]	; (8003e10 <MX_RTC_Init+0x130>)
 8003d0e:	4a41      	ldr	r2, [pc, #260]	; (8003e14 <MX_RTC_Init+0x134>)
 8003d10:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003d12:	4b3f      	ldr	r3, [pc, #252]	; (8003e10 <MX_RTC_Init+0x130>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003d18:	4b3d      	ldr	r3, [pc, #244]	; (8003e10 <MX_RTC_Init+0x130>)
 8003d1a:	227f      	movs	r2, #127	; 0x7f
 8003d1c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003d1e:	4b3c      	ldr	r3, [pc, #240]	; (8003e10 <MX_RTC_Init+0x130>)
 8003d20:	22ff      	movs	r2, #255	; 0xff
 8003d22:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003d24:	4b3a      	ldr	r3, [pc, #232]	; (8003e10 <MX_RTC_Init+0x130>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003d2a:	4b39      	ldr	r3, [pc, #228]	; (8003e10 <MX_RTC_Init+0x130>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003d30:	4b37      	ldr	r3, [pc, #220]	; (8003e10 <MX_RTC_Init+0x130>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003d36:	4b36      	ldr	r3, [pc, #216]	; (8003e10 <MX_RTC_Init+0x130>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003d3c:	4b34      	ldr	r3, [pc, #208]	; (8003e10 <MX_RTC_Init+0x130>)
 8003d3e:	0018      	movs	r0, r3
 8003d40:	f003 f990 	bl	8007064 <HAL_RTC_Init>
 8003d44:	1e03      	subs	r3, r0, #0
 8003d46:	d001      	beq.n	8003d4c <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8003d48:	f000 fc18 	bl	800457c <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8003d4c:	212c      	movs	r1, #44	; 0x2c
 8003d4e:	187b      	adds	r3, r7, r1
 8003d50:	2200      	movs	r2, #0
 8003d52:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8003d54:	187b      	adds	r3, r7, r1
 8003d56:	2200      	movs	r2, #0
 8003d58:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8003d5a:	187b      	adds	r3, r7, r1
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003d60:	187b      	adds	r3, r7, r1
 8003d62:	2200      	movs	r2, #0
 8003d64:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003d66:	187b      	adds	r3, r7, r1
 8003d68:	2200      	movs	r2, #0
 8003d6a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003d6c:	1879      	adds	r1, r7, r1
 8003d6e:	4b28      	ldr	r3, [pc, #160]	; (8003e10 <MX_RTC_Init+0x130>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	0018      	movs	r0, r3
 8003d74:	f003 fa14 	bl	80071a0 <HAL_RTC_SetTime>
 8003d78:	1e03      	subs	r3, r0, #0
 8003d7a:	d001      	beq.n	8003d80 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8003d7c:	f000 fbfe 	bl	800457c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8003d80:	2128      	movs	r1, #40	; 0x28
 8003d82:	187b      	adds	r3, r7, r1
 8003d84:	2207      	movs	r2, #7
 8003d86:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 8003d88:	187b      	adds	r3, r7, r1
 8003d8a:	2212      	movs	r2, #18
 8003d8c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8003d8e:	187b      	adds	r3, r7, r1
 8003d90:	2201      	movs	r2, #1
 8003d92:	709a      	strb	r2, [r3, #2]
  sDate.Year = 19;
 8003d94:	187b      	adds	r3, r7, r1
 8003d96:	2213      	movs	r2, #19
 8003d98:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003d9a:	1879      	adds	r1, r7, r1
 8003d9c:	4b1c      	ldr	r3, [pc, #112]	; (8003e10 <MX_RTC_Init+0x130>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	0018      	movs	r0, r3
 8003da2:	f003 fb1d 	bl	80073e0 <HAL_RTC_SetDate>
 8003da6:	1e03      	subs	r3, r0, #0
 8003da8:	d001      	beq.n	8003dae <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8003daa:	f000 fbe7 	bl	800457c <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.AlarmTime.Hours = 0;
 8003dae:	003b      	movs	r3, r7
 8003db0:	2200      	movs	r2, #0
 8003db2:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8003db4:	003b      	movs	r3, r7
 8003db6:	2200      	movs	r2, #0
 8003db8:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8003dba:	003b      	movs	r3, r7
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8003dc0:	003b      	movs	r3, r7
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003dc6:	003b      	movs	r3, r7
 8003dc8:	2200      	movs	r2, #0
 8003dca:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003dcc:	003b      	movs	r3, r7
 8003dce:	2200      	movs	r2, #0
 8003dd0:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003dd2:	003b      	movs	r3, r7
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003dd8:	003b      	movs	r3, r7
 8003dda:	2200      	movs	r2, #0
 8003ddc:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003dde:	003b      	movs	r3, r7
 8003de0:	2200      	movs	r2, #0
 8003de2:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8003de4:	003b      	movs	r3, r7
 8003de6:	2220      	movs	r2, #32
 8003de8:	2101      	movs	r1, #1
 8003dea:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_B;
 8003dec:	003b      	movs	r3, r7
 8003dee:	2280      	movs	r2, #128	; 0x80
 8003df0:	0092      	lsls	r2, r2, #2
 8003df2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003df4:	0039      	movs	r1, r7
 8003df6:	4b06      	ldr	r3, [pc, #24]	; (8003e10 <MX_RTC_Init+0x130>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	f003 fbec 	bl	80075d8 <HAL_RTC_SetAlarm_IT>
 8003e00:	1e03      	subs	r3, r0, #0
 8003e02:	d001      	beq.n	8003e08 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 8003e04:	f000 fbba 	bl	800457c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003e08:	46c0      	nop			; (mov r8, r8)
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	b010      	add	sp, #64	; 0x40
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	20000234 	.word	0x20000234
 8003e14:	40002800 	.word	0x40002800

08003e18 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003e1c:	4b18      	ldr	r3, [pc, #96]	; (8003e80 <MX_SPI2_Init+0x68>)
 8003e1e:	4a19      	ldr	r2, [pc, #100]	; (8003e84 <MX_SPI2_Init+0x6c>)
 8003e20:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003e22:	4b17      	ldr	r3, [pc, #92]	; (8003e80 <MX_SPI2_Init+0x68>)
 8003e24:	2282      	movs	r2, #130	; 0x82
 8003e26:	0052      	lsls	r2, r2, #1
 8003e28:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003e2a:	4b15      	ldr	r3, [pc, #84]	; (8003e80 <MX_SPI2_Init+0x68>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e30:	4b13      	ldr	r3, [pc, #76]	; (8003e80 <MX_SPI2_Init+0x68>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e36:	4b12      	ldr	r3, [pc, #72]	; (8003e80 <MX_SPI2_Init+0x68>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003e3c:	4b10      	ldr	r3, [pc, #64]	; (8003e80 <MX_SPI2_Init+0x68>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003e42:	4b0f      	ldr	r3, [pc, #60]	; (8003e80 <MX_SPI2_Init+0x68>)
 8003e44:	2280      	movs	r2, #128	; 0x80
 8003e46:	02d2      	lsls	r2, r2, #11
 8003e48:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e4a:	4b0d      	ldr	r3, [pc, #52]	; (8003e80 <MX_SPI2_Init+0x68>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e50:	4b0b      	ldr	r3, [pc, #44]	; (8003e80 <MX_SPI2_Init+0x68>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e56:	4b0a      	ldr	r3, [pc, #40]	; (8003e80 <MX_SPI2_Init+0x68>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e5c:	4b08      	ldr	r3, [pc, #32]	; (8003e80 <MX_SPI2_Init+0x68>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003e62:	4b07      	ldr	r3, [pc, #28]	; (8003e80 <MX_SPI2_Init+0x68>)
 8003e64:	2207      	movs	r2, #7
 8003e66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003e68:	4b05      	ldr	r3, [pc, #20]	; (8003e80 <MX_SPI2_Init+0x68>)
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	f003 fe48 	bl	8007b00 <HAL_SPI_Init>
 8003e70:	1e03      	subs	r3, r0, #0
 8003e72:	d001      	beq.n	8003e78 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003e74:	f000 fb82 	bl	800457c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003e78:	46c0      	nop			; (mov r8, r8)
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	20000164 	.word	0x20000164
 8003e84:	40003800 	.word	0x40003800

08003e88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08a      	sub	sp, #40	; 0x28
 8003e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e8e:	2318      	movs	r3, #24
 8003e90:	18fb      	adds	r3, r7, r3
 8003e92:	0018      	movs	r0, r3
 8003e94:	2310      	movs	r3, #16
 8003e96:	001a      	movs	r2, r3
 8003e98:	2100      	movs	r1, #0
 8003e9a:	f005 fb54 	bl	8009546 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e9e:	2310      	movs	r3, #16
 8003ea0:	18fb      	adds	r3, r7, r3
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	2308      	movs	r3, #8
 8003ea6:	001a      	movs	r2, r3
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	f005 fb4c 	bl	8009546 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003eae:	003b      	movs	r3, r7
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	2310      	movs	r3, #16
 8003eb4:	001a      	movs	r2, r3
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	f005 fb45 	bl	8009546 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003ebc:	4b37      	ldr	r3, [pc, #220]	; (8003f9c <MX_TIM2_Init+0x114>)
 8003ebe:	2280      	movs	r2, #128	; 0x80
 8003ec0:	05d2      	lsls	r2, r2, #23
 8003ec2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003ec4:	4b35      	ldr	r3, [pc, #212]	; (8003f9c <MX_TIM2_Init+0x114>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003eca:	4b34      	ldr	r3, [pc, #208]	; (8003f9c <MX_TIM2_Init+0x114>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0x3FFF;
 8003ed0:	4b32      	ldr	r3, [pc, #200]	; (8003f9c <MX_TIM2_Init+0x114>)
 8003ed2:	4a33      	ldr	r2, [pc, #204]	; (8003fa0 <MX_TIM2_Init+0x118>)
 8003ed4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ed6:	4b31      	ldr	r3, [pc, #196]	; (8003f9c <MX_TIM2_Init+0x114>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003edc:	4b2f      	ldr	r3, [pc, #188]	; (8003f9c <MX_TIM2_Init+0x114>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003ee2:	4b2e      	ldr	r3, [pc, #184]	; (8003f9c <MX_TIM2_Init+0x114>)
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f004 fc1b 	bl	8008720 <HAL_TIM_Base_Init>
 8003eea:	1e03      	subs	r3, r0, #0
 8003eec:	d001      	beq.n	8003ef2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003eee:	f000 fb45 	bl	800457c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8003ef2:	2118      	movs	r1, #24
 8003ef4:	187b      	adds	r3, r7, r1
 8003ef6:	2280      	movs	r2, #128	; 0x80
 8003ef8:	0192      	lsls	r2, r2, #6
 8003efa:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8003efc:	187b      	adds	r3, r7, r1
 8003efe:	2200      	movs	r2, #0
 8003f00:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8003f02:	187b      	adds	r3, r7, r1
 8003f04:	2200      	movs	r2, #0
 8003f06:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8003f08:	187b      	adds	r3, r7, r1
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003f0e:	187a      	adds	r2, r7, r1
 8003f10:	4b22      	ldr	r3, [pc, #136]	; (8003f9c <MX_TIM2_Init+0x114>)
 8003f12:	0011      	movs	r1, r2
 8003f14:	0018      	movs	r0, r3
 8003f16:	f004 ff3d 	bl	8008d94 <HAL_TIM_ConfigClockSource>
 8003f1a:	1e03      	subs	r3, r0, #0
 8003f1c:	d001      	beq.n	8003f22 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003f1e:	f000 fb2d 	bl	800457c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8003f22:	4b1e      	ldr	r3, [pc, #120]	; (8003f9c <MX_TIM2_Init+0x114>)
 8003f24:	0018      	movs	r0, r3
 8003f26:	f004 fc6b 	bl	8008800 <HAL_TIM_OC_Init>
 8003f2a:	1e03      	subs	r3, r0, #0
 8003f2c:	d001      	beq.n	8003f32 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8003f2e:	f000 fb25 	bl	800457c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f32:	2110      	movs	r1, #16
 8003f34:	187b      	adds	r3, r7, r1
 8003f36:	2200      	movs	r2, #0
 8003f38:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f3a:	187b      	adds	r3, r7, r1
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003f40:	187a      	adds	r2, r7, r1
 8003f42:	4b16      	ldr	r3, [pc, #88]	; (8003f9c <MX_TIM2_Init+0x114>)
 8003f44:	0011      	movs	r1, r2
 8003f46:	0018      	movs	r0, r3
 8003f48:	f005 fa19 	bl	800937e <HAL_TIMEx_MasterConfigSynchronization>
 8003f4c:	1e03      	subs	r3, r0, #0
 8003f4e:	d001      	beq.n	8003f54 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8003f50:	f000 fb14 	bl	800457c <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim2, TIM2_ETR_LSE) != HAL_OK)
 8003f54:	4b11      	ldr	r3, [pc, #68]	; (8003f9c <MX_TIM2_Init+0x114>)
 8003f56:	2105      	movs	r1, #5
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f005 fa53 	bl	8009404 <HAL_TIMEx_RemapConfig>
 8003f5e:	1e03      	subs	r3, r0, #0
 8003f60:	d001      	beq.n	8003f66 <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 8003f62:	f000 fb0b 	bl	800457c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003f66:	003b      	movs	r3, r7
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003f6c:	003b      	movs	r3, r7
 8003f6e:	2200      	movs	r2, #0
 8003f70:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f72:	003b      	movs	r3, r7
 8003f74:	2200      	movs	r2, #0
 8003f76:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f78:	003b      	movs	r3, r7
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f7e:	0039      	movs	r1, r7
 8003f80:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <MX_TIM2_Init+0x114>)
 8003f82:	2204      	movs	r2, #4
 8003f84:	0018      	movs	r0, r3
 8003f86:	f004 fdff 	bl	8008b88 <HAL_TIM_OC_ConfigChannel>
 8003f8a:	1e03      	subs	r3, r0, #0
 8003f8c:	d001      	beq.n	8003f92 <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 8003f8e:	f000 faf5 	bl	800457c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003f92:	46c0      	nop			; (mov r8, r8)
 8003f94:	46bd      	mov	sp, r7
 8003f96:	b00a      	add	sp, #40	; 0x28
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	46c0      	nop			; (mov r8, r8)
 8003f9c:	20000258 	.word	0x20000258
 8003fa0:	00003fff 	.word	0x00003fff

08003fa4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08a      	sub	sp, #40	; 0x28
 8003fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003faa:	2318      	movs	r3, #24
 8003fac:	18fb      	adds	r3, r7, r3
 8003fae:	0018      	movs	r0, r3
 8003fb0:	2310      	movs	r3, #16
 8003fb2:	001a      	movs	r2, r3
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	f005 fac6 	bl	8009546 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fba:	2310      	movs	r3, #16
 8003fbc:	18fb      	adds	r3, r7, r3
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	2308      	movs	r3, #8
 8003fc2:	001a      	movs	r2, r3
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	f005 fabe 	bl	8009546 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003fca:	003b      	movs	r3, r7
 8003fcc:	0018      	movs	r0, r3
 8003fce:	2310      	movs	r3, #16
 8003fd0:	001a      	movs	r2, r3
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	f005 fab7 	bl	8009546 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003fd8:	4b34      	ldr	r3, [pc, #208]	; (80040ac <MX_TIM3_Init+0x108>)
 8003fda:	4a35      	ldr	r2, [pc, #212]	; (80040b0 <MX_TIM3_Init+0x10c>)
 8003fdc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003fde:	4b33      	ldr	r3, [pc, #204]	; (80040ac <MX_TIM3_Init+0x108>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fe4:	4b31      	ldr	r3, [pc, #196]	; (80040ac <MX_TIM3_Init+0x108>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 8003fea:	4b30      	ldr	r3, [pc, #192]	; (80040ac <MX_TIM3_Init+0x108>)
 8003fec:	4a31      	ldr	r2, [pc, #196]	; (80040b4 <MX_TIM3_Init+0x110>)
 8003fee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ff0:	4b2e      	ldr	r3, [pc, #184]	; (80040ac <MX_TIM3_Init+0x108>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ff6:	4b2d      	ldr	r3, [pc, #180]	; (80040ac <MX_TIM3_Init+0x108>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003ffc:	4b2b      	ldr	r3, [pc, #172]	; (80040ac <MX_TIM3_Init+0x108>)
 8003ffe:	0018      	movs	r0, r3
 8004000:	f004 fb8e 	bl	8008720 <HAL_TIM_Base_Init>
 8004004:	1e03      	subs	r3, r0, #0
 8004006:	d001      	beq.n	800400c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004008:	f000 fab8 	bl	800457c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800400c:	2118      	movs	r1, #24
 800400e:	187b      	adds	r3, r7, r1
 8004010:	2280      	movs	r2, #128	; 0x80
 8004012:	0152      	lsls	r2, r2, #5
 8004014:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004016:	187a      	adds	r2, r7, r1
 8004018:	4b24      	ldr	r3, [pc, #144]	; (80040ac <MX_TIM3_Init+0x108>)
 800401a:	0011      	movs	r1, r2
 800401c:	0018      	movs	r0, r3
 800401e:	f004 feb9 	bl	8008d94 <HAL_TIM_ConfigClockSource>
 8004022:	1e03      	subs	r3, r0, #0
 8004024:	d001      	beq.n	800402a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8004026:	f000 faa9 	bl	800457c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800402a:	4b20      	ldr	r3, [pc, #128]	; (80040ac <MX_TIM3_Init+0x108>)
 800402c:	0018      	movs	r0, r3
 800402e:	f004 fc6d 	bl	800890c <HAL_TIM_PWM_Init>
 8004032:	1e03      	subs	r3, r0, #0
 8004034:	d001      	beq.n	800403a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8004036:	f000 faa1 	bl	800457c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800403a:	2110      	movs	r1, #16
 800403c:	187b      	adds	r3, r7, r1
 800403e:	2200      	movs	r2, #0
 8004040:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004042:	187b      	adds	r3, r7, r1
 8004044:	2200      	movs	r2, #0
 8004046:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004048:	187a      	adds	r2, r7, r1
 800404a:	4b18      	ldr	r3, [pc, #96]	; (80040ac <MX_TIM3_Init+0x108>)
 800404c:	0011      	movs	r1, r2
 800404e:	0018      	movs	r0, r3
 8004050:	f005 f995 	bl	800937e <HAL_TIMEx_MasterConfigSynchronization>
 8004054:	1e03      	subs	r3, r0, #0
 8004056:	d001      	beq.n	800405c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8004058:	f000 fa90 	bl	800457c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800405c:	003b      	movs	r3, r7
 800405e:	2260      	movs	r2, #96	; 0x60
 8004060:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8004062:	003b      	movs	r3, r7
 8004064:	2200      	movs	r2, #0
 8004066:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004068:	003b      	movs	r3, r7
 800406a:	2200      	movs	r2, #0
 800406c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800406e:	003b      	movs	r3, r7
 8004070:	2200      	movs	r2, #0
 8004072:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004074:	0039      	movs	r1, r7
 8004076:	4b0d      	ldr	r3, [pc, #52]	; (80040ac <MX_TIM3_Init+0x108>)
 8004078:	2200      	movs	r2, #0
 800407a:	0018      	movs	r0, r3
 800407c:	f004 fdd2 	bl	8008c24 <HAL_TIM_PWM_ConfigChannel>
 8004080:	1e03      	subs	r3, r0, #0
 8004082:	d001      	beq.n	8004088 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8004084:	f000 fa7a 	bl	800457c <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8004088:	4b08      	ldr	r3, [pc, #32]	; (80040ac <MX_TIM3_Init+0x108>)
 800408a:	2104      	movs	r1, #4
 800408c:	0018      	movs	r0, r3
 800408e:	f005 f9b9 	bl	8009404 <HAL_TIMEx_RemapConfig>
 8004092:	1e03      	subs	r3, r0, #0
 8004094:	d001      	beq.n	800409a <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 8004096:	f000 fa71 	bl	800457c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800409a:	4b04      	ldr	r3, [pc, #16]	; (80040ac <MX_TIM3_Init+0x108>)
 800409c:	0018      	movs	r0, r3
 800409e:	f000 fbd7 	bl	8004850 <HAL_TIM_MspPostInit>

}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	46bd      	mov	sp, r7
 80040a6:	b00a      	add	sp, #40	; 0x28
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	46c0      	nop			; (mov r8, r8)
 80040ac:	200001bc 	.word	0x200001bc
 80040b0:	40000400 	.word	0x40000400
 80040b4:	0000ffff 	.word	0x0000ffff

080040b8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040be:	003b      	movs	r3, r7
 80040c0:	0018      	movs	r0, r3
 80040c2:	2308      	movs	r3, #8
 80040c4:	001a      	movs	r2, r3
 80040c6:	2100      	movs	r1, #0
 80040c8:	f005 fa3d 	bl	8009546 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80040cc:	4b15      	ldr	r3, [pc, #84]	; (8004124 <MX_TIM6_Init+0x6c>)
 80040ce:	4a16      	ldr	r2, [pc, #88]	; (8004128 <MX_TIM6_Init+0x70>)
 80040d0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 320;
 80040d2:	4b14      	ldr	r3, [pc, #80]	; (8004124 <MX_TIM6_Init+0x6c>)
 80040d4:	22a0      	movs	r2, #160	; 0xa0
 80040d6:	0052      	lsls	r2, r2, #1
 80040d8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040da:	4b12      	ldr	r3, [pc, #72]	; (8004124 <MX_TIM6_Init+0x6c>)
 80040dc:	2200      	movs	r2, #0
 80040de:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50000;
 80040e0:	4b10      	ldr	r3, [pc, #64]	; (8004124 <MX_TIM6_Init+0x6c>)
 80040e2:	4a12      	ldr	r2, [pc, #72]	; (800412c <MX_TIM6_Init+0x74>)
 80040e4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80040e6:	4b0f      	ldr	r3, [pc, #60]	; (8004124 <MX_TIM6_Init+0x6c>)
 80040e8:	2280      	movs	r2, #128	; 0x80
 80040ea:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80040ec:	4b0d      	ldr	r3, [pc, #52]	; (8004124 <MX_TIM6_Init+0x6c>)
 80040ee:	0018      	movs	r0, r3
 80040f0:	f004 fb16 	bl	8008720 <HAL_TIM_Base_Init>
 80040f4:	1e03      	subs	r3, r0, #0
 80040f6:	d001      	beq.n	80040fc <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 80040f8:	f000 fa40 	bl	800457c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040fc:	003b      	movs	r3, r7
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004102:	003b      	movs	r3, r7
 8004104:	2200      	movs	r2, #0
 8004106:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004108:	003a      	movs	r2, r7
 800410a:	4b06      	ldr	r3, [pc, #24]	; (8004124 <MX_TIM6_Init+0x6c>)
 800410c:	0011      	movs	r1, r2
 800410e:	0018      	movs	r0, r3
 8004110:	f005 f935 	bl	800937e <HAL_TIMEx_MasterConfigSynchronization>
 8004114:	1e03      	subs	r3, r0, #0
 8004116:	d001      	beq.n	800411c <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8004118:	f000 fa30 	bl	800457c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800411c:	46c0      	nop			; (mov r8, r8)
 800411e:	46bd      	mov	sp, r7
 8004120:	b002      	add	sp, #8
 8004122:	bd80      	pop	{r7, pc}
 8004124:	2000011c 	.word	0x2000011c
 8004128:	40001000 	.word	0x40001000
 800412c:	0000c350 	.word	0x0000c350

08004130 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b08a      	sub	sp, #40	; 0x28
 8004134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004136:	2318      	movs	r3, #24
 8004138:	18fb      	adds	r3, r7, r3
 800413a:	0018      	movs	r0, r3
 800413c:	2310      	movs	r3, #16
 800413e:	001a      	movs	r2, r3
 8004140:	2100      	movs	r1, #0
 8004142:	f005 fa00 	bl	8009546 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004146:	2310      	movs	r3, #16
 8004148:	18fb      	adds	r3, r7, r3
 800414a:	0018      	movs	r0, r3
 800414c:	2308      	movs	r3, #8
 800414e:	001a      	movs	r2, r3
 8004150:	2100      	movs	r1, #0
 8004152:	f005 f9f8 	bl	8009546 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004156:	003b      	movs	r3, r7
 8004158:	0018      	movs	r0, r3
 800415a:	2310      	movs	r3, #16
 800415c:	001a      	movs	r2, r3
 800415e:	2100      	movs	r1, #0
 8004160:	f005 f9f1 	bl	8009546 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8004164:	4b3b      	ldr	r3, [pc, #236]	; (8004254 <MX_TIM21_Init+0x124>)
 8004166:	4a3c      	ldr	r2, [pc, #240]	; (8004258 <MX_TIM21_Init+0x128>)
 8004168:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 800416a:	4b3a      	ldr	r3, [pc, #232]	; (8004254 <MX_TIM21_Init+0x124>)
 800416c:	2200      	movs	r2, #0
 800416e:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004170:	4b38      	ldr	r3, [pc, #224]	; (8004254 <MX_TIM21_Init+0x124>)
 8004172:	2200      	movs	r2, #0
 8004174:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 0x7FFF;
 8004176:	4b37      	ldr	r3, [pc, #220]	; (8004254 <MX_TIM21_Init+0x124>)
 8004178:	4a38      	ldr	r2, [pc, #224]	; (800425c <MX_TIM21_Init+0x12c>)
 800417a:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800417c:	4b35      	ldr	r3, [pc, #212]	; (8004254 <MX_TIM21_Init+0x124>)
 800417e:	2200      	movs	r2, #0
 8004180:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004182:	4b34      	ldr	r3, [pc, #208]	; (8004254 <MX_TIM21_Init+0x124>)
 8004184:	2200      	movs	r2, #0
 8004186:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8004188:	4b32      	ldr	r3, [pc, #200]	; (8004254 <MX_TIM21_Init+0x124>)
 800418a:	0018      	movs	r0, r3
 800418c:	f004 fac8 	bl	8008720 <HAL_TIM_Base_Init>
 8004190:	1e03      	subs	r3, r0, #0
 8004192:	d001      	beq.n	8004198 <MX_TIM21_Init+0x68>
  {
    Error_Handler();
 8004194:	f000 f9f2 	bl	800457c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8004198:	2118      	movs	r1, #24
 800419a:	187b      	adds	r3, r7, r1
 800419c:	2280      	movs	r2, #128	; 0x80
 800419e:	0192      	lsls	r2, r2, #6
 80041a0:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80041a2:	187b      	adds	r3, r7, r1
 80041a4:	2200      	movs	r2, #0
 80041a6:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80041a8:	187b      	adds	r3, r7, r1
 80041aa:	2200      	movs	r2, #0
 80041ac:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 80041ae:	187b      	adds	r3, r7, r1
 80041b0:	2200      	movs	r2, #0
 80041b2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80041b4:	187a      	adds	r2, r7, r1
 80041b6:	4b27      	ldr	r3, [pc, #156]	; (8004254 <MX_TIM21_Init+0x124>)
 80041b8:	0011      	movs	r1, r2
 80041ba:	0018      	movs	r0, r3
 80041bc:	f004 fdea 	bl	8008d94 <HAL_TIM_ConfigClockSource>
 80041c0:	1e03      	subs	r3, r0, #0
 80041c2:	d001      	beq.n	80041c8 <MX_TIM21_Init+0x98>
  {
    Error_Handler();
 80041c4:	f000 f9da 	bl	800457c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 80041c8:	4b22      	ldr	r3, [pc, #136]	; (8004254 <MX_TIM21_Init+0x124>)
 80041ca:	0018      	movs	r0, r3
 80041cc:	f004 fb18 	bl	8008800 <HAL_TIM_OC_Init>
 80041d0:	1e03      	subs	r3, r0, #0
 80041d2:	d001      	beq.n	80041d8 <MX_TIM21_Init+0xa8>
  {
    Error_Handler();
 80041d4:	f000 f9d2 	bl	800457c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041d8:	2110      	movs	r1, #16
 80041da:	187b      	adds	r3, r7, r1
 80041dc:	2200      	movs	r2, #0
 80041de:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041e0:	187b      	adds	r3, r7, r1
 80041e2:	2200      	movs	r2, #0
 80041e4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80041e6:	187a      	adds	r2, r7, r1
 80041e8:	4b1a      	ldr	r3, [pc, #104]	; (8004254 <MX_TIM21_Init+0x124>)
 80041ea:	0011      	movs	r1, r2
 80041ec:	0018      	movs	r0, r3
 80041ee:	f005 f8c6 	bl	800937e <HAL_TIMEx_MasterConfigSynchronization>
 80041f2:	1e03      	subs	r3, r0, #0
 80041f4:	d001      	beq.n	80041fa <MX_TIM21_Init+0xca>
  {
    Error_Handler();
 80041f6:	f000 f9c1 	bl	800457c <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim21, TIM21_ETR_LSE) != HAL_OK)
 80041fa:	4b16      	ldr	r3, [pc, #88]	; (8004254 <MX_TIM21_Init+0x124>)
 80041fc:	2103      	movs	r1, #3
 80041fe:	0018      	movs	r0, r3
 8004200:	f005 f900 	bl	8009404 <HAL_TIMEx_RemapConfig>
 8004204:	1e03      	subs	r3, r0, #0
 8004206:	d001      	beq.n	800420c <MX_TIM21_Init+0xdc>
  {
    Error_Handler();
 8004208:	f000 f9b8 	bl	800457c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800420c:	003b      	movs	r3, r7
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8004212:	003b      	movs	r3, r7
 8004214:	2200      	movs	r2, #0
 8004216:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004218:	003b      	movs	r3, r7
 800421a:	2200      	movs	r2, #0
 800421c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800421e:	003b      	movs	r3, r7
 8004220:	2200      	movs	r2, #0
 8004222:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004224:	0039      	movs	r1, r7
 8004226:	4b0b      	ldr	r3, [pc, #44]	; (8004254 <MX_TIM21_Init+0x124>)
 8004228:	2200      	movs	r2, #0
 800422a:	0018      	movs	r0, r3
 800422c:	f004 fcac 	bl	8008b88 <HAL_TIM_OC_ConfigChannel>
 8004230:	1e03      	subs	r3, r0, #0
 8004232:	d001      	beq.n	8004238 <MX_TIM21_Init+0x108>
  {
    Error_Handler();
 8004234:	f000 f9a2 	bl	800457c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004238:	0039      	movs	r1, r7
 800423a:	4b06      	ldr	r3, [pc, #24]	; (8004254 <MX_TIM21_Init+0x124>)
 800423c:	2204      	movs	r2, #4
 800423e:	0018      	movs	r0, r3
 8004240:	f004 fca2 	bl	8008b88 <HAL_TIM_OC_ConfigChannel>
 8004244:	1e03      	subs	r3, r0, #0
 8004246:	d001      	beq.n	800424c <MX_TIM21_Init+0x11c>
  {
    Error_Handler();
 8004248:	f000 f998 	bl	800457c <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 800424c:	46c0      	nop			; (mov r8, r8)
 800424e:	46bd      	mov	sp, r7
 8004250:	b00a      	add	sp, #40	; 0x28
 8004252:	bd80      	pop	{r7, pc}
 8004254:	2000062c 	.word	0x2000062c
 8004258:	40010800 	.word	0x40010800
 800425c:	00007fff 	.word	0x00007fff

08004260 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b08a      	sub	sp, #40	; 0x28
 8004264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004266:	2318      	movs	r3, #24
 8004268:	18fb      	adds	r3, r7, r3
 800426a:	0018      	movs	r0, r3
 800426c:	2310      	movs	r3, #16
 800426e:	001a      	movs	r2, r3
 8004270:	2100      	movs	r1, #0
 8004272:	f005 f968 	bl	8009546 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004276:	2310      	movs	r3, #16
 8004278:	18fb      	adds	r3, r7, r3
 800427a:	0018      	movs	r0, r3
 800427c:	2308      	movs	r3, #8
 800427e:	001a      	movs	r2, r3
 8004280:	2100      	movs	r1, #0
 8004282:	f005 f960 	bl	8009546 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004286:	003b      	movs	r3, r7
 8004288:	0018      	movs	r0, r3
 800428a:	2310      	movs	r3, #16
 800428c:	001a      	movs	r2, r3
 800428e:	2100      	movs	r1, #0
 8004290:	f005 f959 	bl	8009546 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8004294:	4b37      	ldr	r3, [pc, #220]	; (8004374 <MX_TIM22_Init+0x114>)
 8004296:	4a38      	ldr	r2, [pc, #224]	; (8004378 <MX_TIM22_Init+0x118>)
 8004298:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0x400;
 800429a:	4b36      	ldr	r3, [pc, #216]	; (8004374 <MX_TIM22_Init+0x114>)
 800429c:	2280      	movs	r2, #128	; 0x80
 800429e:	00d2      	lsls	r2, r2, #3
 80042a0:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042a2:	4b34      	ldr	r3, [pc, #208]	; (8004374 <MX_TIM22_Init+0x114>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 1919;
 80042a8:	4b32      	ldr	r3, [pc, #200]	; (8004374 <MX_TIM22_Init+0x114>)
 80042aa:	4a34      	ldr	r2, [pc, #208]	; (800437c <MX_TIM22_Init+0x11c>)
 80042ac:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042ae:	4b31      	ldr	r3, [pc, #196]	; (8004374 <MX_TIM22_Init+0x114>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042b4:	4b2f      	ldr	r3, [pc, #188]	; (8004374 <MX_TIM22_Init+0x114>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 80042ba:	4b2e      	ldr	r3, [pc, #184]	; (8004374 <MX_TIM22_Init+0x114>)
 80042bc:	0018      	movs	r0, r3
 80042be:	f004 fa2f 	bl	8008720 <HAL_TIM_Base_Init>
 80042c2:	1e03      	subs	r3, r0, #0
 80042c4:	d001      	beq.n	80042ca <MX_TIM22_Init+0x6a>
  {
    Error_Handler();
 80042c6:	f000 f959 	bl	800457c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80042ca:	2118      	movs	r1, #24
 80042cc:	187b      	adds	r3, r7, r1
 80042ce:	2280      	movs	r2, #128	; 0x80
 80042d0:	0192      	lsls	r2, r2, #6
 80042d2:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80042d4:	187b      	adds	r3, r7, r1
 80042d6:	2200      	movs	r2, #0
 80042d8:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80042da:	187b      	adds	r3, r7, r1
 80042dc:	2200      	movs	r2, #0
 80042de:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 80042e0:	187b      	adds	r3, r7, r1
 80042e2:	2200      	movs	r2, #0
 80042e4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 80042e6:	187a      	adds	r2, r7, r1
 80042e8:	4b22      	ldr	r3, [pc, #136]	; (8004374 <MX_TIM22_Init+0x114>)
 80042ea:	0011      	movs	r1, r2
 80042ec:	0018      	movs	r0, r3
 80042ee:	f004 fd51 	bl	8008d94 <HAL_TIM_ConfigClockSource>
 80042f2:	1e03      	subs	r3, r0, #0
 80042f4:	d001      	beq.n	80042fa <MX_TIM22_Init+0x9a>
  {
    Error_Handler();
 80042f6:	f000 f941 	bl	800457c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim22) != HAL_OK)
 80042fa:	4b1e      	ldr	r3, [pc, #120]	; (8004374 <MX_TIM22_Init+0x114>)
 80042fc:	0018      	movs	r0, r3
 80042fe:	f004 fa7f 	bl	8008800 <HAL_TIM_OC_Init>
 8004302:	1e03      	subs	r3, r0, #0
 8004304:	d001      	beq.n	800430a <MX_TIM22_Init+0xaa>
  {
    Error_Handler();
 8004306:	f000 f939 	bl	800457c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800430a:	2110      	movs	r1, #16
 800430c:	187b      	adds	r3, r7, r1
 800430e:	2200      	movs	r2, #0
 8004310:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004312:	187b      	adds	r3, r7, r1
 8004314:	2200      	movs	r2, #0
 8004316:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8004318:	187a      	adds	r2, r7, r1
 800431a:	4b16      	ldr	r3, [pc, #88]	; (8004374 <MX_TIM22_Init+0x114>)
 800431c:	0011      	movs	r1, r2
 800431e:	0018      	movs	r0, r3
 8004320:	f005 f82d 	bl	800937e <HAL_TIMEx_MasterConfigSynchronization>
 8004324:	1e03      	subs	r3, r0, #0
 8004326:	d001      	beq.n	800432c <MX_TIM22_Init+0xcc>
  {
    Error_Handler();
 8004328:	f000 f928 	bl	800457c <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim22, TIM22_ETR_LSE) != HAL_OK)
 800432c:	4b11      	ldr	r3, [pc, #68]	; (8004374 <MX_TIM22_Init+0x114>)
 800432e:	2103      	movs	r1, #3
 8004330:	0018      	movs	r0, r3
 8004332:	f005 f867 	bl	8009404 <HAL_TIMEx_RemapConfig>
 8004336:	1e03      	subs	r3, r0, #0
 8004338:	d001      	beq.n	800433e <MX_TIM22_Init+0xde>
  {
    Error_Handler();
 800433a:	f000 f91f 	bl	800457c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800433e:	003b      	movs	r3, r7
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8004344:	003b      	movs	r3, r7
 8004346:	2200      	movs	r2, #0
 8004348:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800434a:	003b      	movs	r3, r7
 800434c:	2200      	movs	r2, #0
 800434e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004350:	003b      	movs	r3, r7
 8004352:	2200      	movs	r2, #0
 8004354:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004356:	0039      	movs	r1, r7
 8004358:	4b06      	ldr	r3, [pc, #24]	; (8004374 <MX_TIM22_Init+0x114>)
 800435a:	2200      	movs	r2, #0
 800435c:	0018      	movs	r0, r3
 800435e:	f004 fc13 	bl	8008b88 <HAL_TIM_OC_ConfigChannel>
 8004362:	1e03      	subs	r3, r0, #0
 8004364:	d001      	beq.n	800436a <MX_TIM22_Init+0x10a>
  {
    Error_Handler();
 8004366:	f000 f909 	bl	800457c <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */

}
 800436a:	46c0      	nop			; (mov r8, r8)
 800436c:	46bd      	mov	sp, r7
 800436e:	b00a      	add	sp, #40	; 0x28
 8004370:	bd80      	pop	{r7, pc}
 8004372:	46c0      	nop			; (mov r8, r8)
 8004374:	200001f8 	.word	0x200001f8
 8004378:	40011400 	.word	0x40011400
 800437c:	0000077f 	.word	0x0000077f

08004380 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8004384:	4b0f      	ldr	r3, [pc, #60]	; (80043c4 <MX_USB_PCD_Init+0x44>)
 8004386:	4a10      	ldr	r2, [pc, #64]	; (80043c8 <MX_USB_PCD_Init+0x48>)
 8004388:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800438a:	4b0e      	ldr	r3, [pc, #56]	; (80043c4 <MX_USB_PCD_Init+0x44>)
 800438c:	2208      	movs	r2, #8
 800438e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004390:	4b0c      	ldr	r3, [pc, #48]	; (80043c4 <MX_USB_PCD_Init+0x44>)
 8004392:	2202      	movs	r2, #2
 8004394:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004396:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <MX_USB_PCD_Init+0x44>)
 8004398:	2202      	movs	r2, #2
 800439a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800439c:	4b09      	ldr	r3, [pc, #36]	; (80043c4 <MX_USB_PCD_Init+0x44>)
 800439e:	2200      	movs	r2, #0
 80043a0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80043a2:	4b08      	ldr	r3, [pc, #32]	; (80043c4 <MX_USB_PCD_Init+0x44>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80043a8:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <MX_USB_PCD_Init+0x44>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80043ae:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <MX_USB_PCD_Init+0x44>)
 80043b0:	0018      	movs	r0, r3
 80043b2:	f001 fe1d 	bl	8005ff0 <HAL_PCD_Init>
 80043b6:	1e03      	subs	r3, r0, #0
 80043b8:	d001      	beq.n	80043be <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 80043ba:	f000 f8df 	bl	800457c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80043be:	46c0      	nop			; (mov r8, r8)
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	200002dc 	.word	0x200002dc
 80043c8:	40005c00 	.word	0x40005c00

080043cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80043d2:	4b0c      	ldr	r3, [pc, #48]	; (8004404 <MX_DMA_Init+0x38>)
 80043d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043d6:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <MX_DMA_Init+0x38>)
 80043d8:	2101      	movs	r1, #1
 80043da:	430a      	orrs	r2, r1
 80043dc:	631a      	str	r2, [r3, #48]	; 0x30
 80043de:	4b09      	ldr	r3, [pc, #36]	; (8004404 <MX_DMA_Init+0x38>)
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e2:	2201      	movs	r2, #1
 80043e4:	4013      	ands	r3, r2
 80043e6:	607b      	str	r3, [r7, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80043ea:	2200      	movs	r2, #0
 80043ec:	2100      	movs	r1, #0
 80043ee:	200b      	movs	r0, #11
 80043f0:	f001 f9f8 	bl	80057e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80043f4:	200b      	movs	r0, #11
 80043f6:	f001 fa0a 	bl	800580e <HAL_NVIC_EnableIRQ>

}
 80043fa:	46c0      	nop			; (mov r8, r8)
 80043fc:	46bd      	mov	sp, r7
 80043fe:	b002      	add	sp, #8
 8004400:	bd80      	pop	{r7, pc}
 8004402:	46c0      	nop			; (mov r8, r8)
 8004404:	40021000 	.word	0x40021000

08004408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004408:	b590      	push	{r4, r7, lr}
 800440a:	b089      	sub	sp, #36	; 0x24
 800440c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800440e:	240c      	movs	r4, #12
 8004410:	193b      	adds	r3, r7, r4
 8004412:	0018      	movs	r0, r3
 8004414:	2314      	movs	r3, #20
 8004416:	001a      	movs	r2, r3
 8004418:	2100      	movs	r1, #0
 800441a:	f005 f894 	bl	8009546 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800441e:	4b52      	ldr	r3, [pc, #328]	; (8004568 <MX_GPIO_Init+0x160>)
 8004420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004422:	4b51      	ldr	r3, [pc, #324]	; (8004568 <MX_GPIO_Init+0x160>)
 8004424:	2104      	movs	r1, #4
 8004426:	430a      	orrs	r2, r1
 8004428:	62da      	str	r2, [r3, #44]	; 0x2c
 800442a:	4b4f      	ldr	r3, [pc, #316]	; (8004568 <MX_GPIO_Init+0x160>)
 800442c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442e:	2204      	movs	r2, #4
 8004430:	4013      	ands	r3, r2
 8004432:	60bb      	str	r3, [r7, #8]
 8004434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004436:	4b4c      	ldr	r3, [pc, #304]	; (8004568 <MX_GPIO_Init+0x160>)
 8004438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443a:	4b4b      	ldr	r3, [pc, #300]	; (8004568 <MX_GPIO_Init+0x160>)
 800443c:	2101      	movs	r1, #1
 800443e:	430a      	orrs	r2, r1
 8004440:	62da      	str	r2, [r3, #44]	; 0x2c
 8004442:	4b49      	ldr	r3, [pc, #292]	; (8004568 <MX_GPIO_Init+0x160>)
 8004444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004446:	2201      	movs	r2, #1
 8004448:	4013      	ands	r3, r2
 800444a:	607b      	str	r3, [r7, #4]
 800444c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800444e:	4b46      	ldr	r3, [pc, #280]	; (8004568 <MX_GPIO_Init+0x160>)
 8004450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004452:	4b45      	ldr	r3, [pc, #276]	; (8004568 <MX_GPIO_Init+0x160>)
 8004454:	2102      	movs	r1, #2
 8004456:	430a      	orrs	r2, r1
 8004458:	62da      	str	r2, [r3, #44]	; 0x2c
 800445a:	4b43      	ldr	r3, [pc, #268]	; (8004568 <MX_GPIO_Init+0x160>)
 800445c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445e:	2202      	movs	r2, #2
 8004460:	4013      	ands	r3, r2
 8004462:	603b      	str	r3, [r7, #0]
 8004464:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADC_DIV_EN_Pin|MOTOR_EN_Pin|LED1_Pin|LED2_Pin
 8004466:	23a0      	movs	r3, #160	; 0xa0
 8004468:	05db      	lsls	r3, r3, #23
 800446a:	2200      	movs	r2, #0
 800446c:	21f2      	movs	r1, #242	; 0xf2
 800446e:	0018      	movs	r0, r3
 8004470:	f001 fd6a 	bl	8005f48 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PS_EN_GPIO_Port, PS_EN_Pin, GPIO_PIN_SET);
 8004474:	23a0      	movs	r3, #160	; 0xa0
 8004476:	05db      	lsls	r3, r3, #23
 8004478:	2201      	movs	r2, #1
 800447a:	2104      	movs	r1, #4
 800447c:	0018      	movs	r0, r3
 800447e:	f001 fd63 	bl	8005f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8004482:	2380      	movs	r3, #128	; 0x80
 8004484:	01db      	lsls	r3, r3, #7
 8004486:	4839      	ldr	r0, [pc, #228]	; (800456c <MX_GPIO_Init+0x164>)
 8004488:	2200      	movs	r2, #0
 800448a:	0019      	movs	r1, r3
 800448c:	f001 fd5c 	bl	8005f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8004490:	4b37      	ldr	r3, [pc, #220]	; (8004570 <MX_GPIO_Init+0x168>)
 8004492:	2201      	movs	r2, #1
 8004494:	2180      	movs	r1, #128	; 0x80
 8004496:	0018      	movs	r0, r3
 8004498:	f001 fd56 	bl	8005f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_DIV_EN_Pin PS_EN_Pin MOTOR_EN_Pin LED1_Pin
                           LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = ADC_DIV_EN_Pin|PS_EN_Pin|MOTOR_EN_Pin|LED1_Pin
 800449c:	193b      	adds	r3, r7, r4
 800449e:	22f6      	movs	r2, #246	; 0xf6
 80044a0:	601a      	str	r2, [r3, #0]
                          |LED2_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044a2:	193b      	adds	r3, r7, r4
 80044a4:	2201      	movs	r2, #1
 80044a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a8:	193b      	adds	r3, r7, r4
 80044aa:	2200      	movs	r2, #0
 80044ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ae:	193b      	adds	r3, r7, r4
 80044b0:	2200      	movs	r2, #0
 80044b2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044b4:	193a      	adds	r2, r7, r4
 80044b6:	23a0      	movs	r3, #160	; 0xa0
 80044b8:	05db      	lsls	r3, r3, #23
 80044ba:	0011      	movs	r1, r2
 80044bc:	0018      	movs	r0, r3
 80044be:	f001 fbc5 	bl	8005c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11;
 80044c2:	193b      	adds	r3, r7, r4
 80044c4:	4a2b      	ldr	r2, [pc, #172]	; (8004574 <MX_GPIO_Init+0x16c>)
 80044c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80044c8:	193b      	adds	r3, r7, r4
 80044ca:	4a2b      	ldr	r2, [pc, #172]	; (8004578 <MX_GPIO_Init+0x170>)
 80044cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ce:	193b      	adds	r3, r7, r4
 80044d0:	2200      	movs	r2, #0
 80044d2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044d4:	193b      	adds	r3, r7, r4
 80044d6:	4a25      	ldr	r2, [pc, #148]	; (800456c <MX_GPIO_Init+0x164>)
 80044d8:	0019      	movs	r1, r3
 80044da:	0010      	movs	r0, r2
 80044dc:	f001 fbb6 	bl	8005c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 80044e0:	0021      	movs	r1, r4
 80044e2:	187b      	adds	r3, r7, r1
 80044e4:	2280      	movs	r2, #128	; 0x80
 80044e6:	01d2      	lsls	r2, r2, #7
 80044e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044ea:	187b      	adds	r3, r7, r1
 80044ec:	2201      	movs	r2, #1
 80044ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f0:	187b      	adds	r3, r7, r1
 80044f2:	2200      	movs	r2, #0
 80044f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044f6:	187b      	adds	r3, r7, r1
 80044f8:	2203      	movs	r2, #3
 80044fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 80044fc:	000c      	movs	r4, r1
 80044fe:	187b      	adds	r3, r7, r1
 8004500:	4a1a      	ldr	r2, [pc, #104]	; (800456c <MX_GPIO_Init+0x164>)
 8004502:	0019      	movs	r1, r3
 8004504:	0010      	movs	r0, r2
 8004506:	f001 fba1 	bl	8005c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 800450a:	0021      	movs	r1, r4
 800450c:	187b      	adds	r3, r7, r1
 800450e:	2280      	movs	r2, #128	; 0x80
 8004510:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004512:	187b      	adds	r3, r7, r1
 8004514:	2201      	movs	r2, #1
 8004516:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004518:	187b      	adds	r3, r7, r1
 800451a:	2200      	movs	r2, #0
 800451c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800451e:	187b      	adds	r3, r7, r1
 8004520:	2200      	movs	r2, #0
 8004522:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8004524:	187b      	adds	r3, r7, r1
 8004526:	4a12      	ldr	r2, [pc, #72]	; (8004570 <MX_GPIO_Init+0x168>)
 8004528:	0019      	movs	r1, r3
 800452a:	0010      	movs	r0, r2
 800452c:	f001 fb8e 	bl	8005c4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8004530:	2200      	movs	r2, #0
 8004532:	2100      	movs	r1, #0
 8004534:	2005      	movs	r0, #5
 8004536:	f001 f955 	bl	80057e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800453a:	2005      	movs	r0, #5
 800453c:	f001 f967 	bl	800580e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8004540:	2200      	movs	r2, #0
 8004542:	2100      	movs	r1, #0
 8004544:	2006      	movs	r0, #6
 8004546:	f001 f94d 	bl	80057e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800454a:	2006      	movs	r0, #6
 800454c:	f001 f95f 	bl	800580e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8004550:	2200      	movs	r2, #0
 8004552:	2100      	movs	r1, #0
 8004554:	2007      	movs	r0, #7
 8004556:	f001 f945 	bl	80057e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800455a:	2007      	movs	r0, #7
 800455c:	f001 f957 	bl	800580e <HAL_NVIC_EnableIRQ>

}
 8004560:	46c0      	nop			; (mov r8, r8)
 8004562:	46bd      	mov	sp, r7
 8004564:	b009      	add	sp, #36	; 0x24
 8004566:	bd90      	pop	{r4, r7, pc}
 8004568:	40021000 	.word	0x40021000
 800456c:	50000400 	.word	0x50000400
 8004570:	50000800 	.word	0x50000800
 8004574:	00000c06 	.word	0x00000c06
 8004578:	10110000 	.word	0x10110000

0800457c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004580:	46c0      	nop			; (mov r8, r8)
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
	...

08004588 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800458c:	4b07      	ldr	r3, [pc, #28]	; (80045ac <HAL_MspInit+0x24>)
 800458e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004590:	4b06      	ldr	r3, [pc, #24]	; (80045ac <HAL_MspInit+0x24>)
 8004592:	2101      	movs	r1, #1
 8004594:	430a      	orrs	r2, r1
 8004596:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004598:	4b04      	ldr	r3, [pc, #16]	; (80045ac <HAL_MspInit+0x24>)
 800459a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800459c:	4b03      	ldr	r3, [pc, #12]	; (80045ac <HAL_MspInit+0x24>)
 800459e:	2180      	movs	r1, #128	; 0x80
 80045a0:	0549      	lsls	r1, r1, #21
 80045a2:	430a      	orrs	r2, r1
 80045a4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045a6:	46c0      	nop			; (mov r8, r8)
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	40021000 	.word	0x40021000

080045b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b088      	sub	sp, #32
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045b8:	230c      	movs	r3, #12
 80045ba:	18fb      	adds	r3, r7, r3
 80045bc:	0018      	movs	r0, r3
 80045be:	2314      	movs	r3, #20
 80045c0:	001a      	movs	r2, r3
 80045c2:	2100      	movs	r1, #0
 80045c4:	f004 ffbf 	bl	8009546 <memset>
  if(hadc->Instance==ADC1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a19      	ldr	r2, [pc, #100]	; (8004634 <HAL_ADC_MspInit+0x84>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d12b      	bne.n	800462a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80045d2:	4b19      	ldr	r3, [pc, #100]	; (8004638 <HAL_ADC_MspInit+0x88>)
 80045d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045d6:	4b18      	ldr	r3, [pc, #96]	; (8004638 <HAL_ADC_MspInit+0x88>)
 80045d8:	2180      	movs	r1, #128	; 0x80
 80045da:	0089      	lsls	r1, r1, #2
 80045dc:	430a      	orrs	r2, r1
 80045de:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045e0:	4b15      	ldr	r3, [pc, #84]	; (8004638 <HAL_ADC_MspInit+0x88>)
 80045e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e4:	4b14      	ldr	r3, [pc, #80]	; (8004638 <HAL_ADC_MspInit+0x88>)
 80045e6:	2101      	movs	r1, #1
 80045e8:	430a      	orrs	r2, r1
 80045ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80045ec:	4b12      	ldr	r3, [pc, #72]	; (8004638 <HAL_ADC_MspInit+0x88>)
 80045ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f0:	2201      	movs	r2, #1
 80045f2:	4013      	ands	r3, r2
 80045f4:	60bb      	str	r3, [r7, #8]
 80045f6:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80045f8:	210c      	movs	r1, #12
 80045fa:	187b      	adds	r3, r7, r1
 80045fc:	2201      	movs	r2, #1
 80045fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004600:	187b      	adds	r3, r7, r1
 8004602:	2203      	movs	r2, #3
 8004604:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004606:	187b      	adds	r3, r7, r1
 8004608:	2200      	movs	r2, #0
 800460a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800460c:	187a      	adds	r2, r7, r1
 800460e:	23a0      	movs	r3, #160	; 0xa0
 8004610:	05db      	lsls	r3, r3, #23
 8004612:	0011      	movs	r1, r2
 8004614:	0018      	movs	r0, r3
 8004616:	f001 fb19 	bl	8005c4c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 800461a:	2200      	movs	r2, #0
 800461c:	2100      	movs	r1, #0
 800461e:	200c      	movs	r0, #12
 8004620:	f001 f8e0 	bl	80057e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8004624:	200c      	movs	r0, #12
 8004626:	f001 f8f2 	bl	800580e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800462a:	46c0      	nop			; (mov r8, r8)
 800462c:	46bd      	mov	sp, r7
 800462e:	b008      	add	sp, #32
 8004630:	bd80      	pop	{r7, pc}
 8004632:	46c0      	nop			; (mov r8, r8)
 8004634:	40012400 	.word	0x40012400
 8004638:	40021000 	.word	0x40021000

0800463c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a0a      	ldr	r2, [pc, #40]	; (8004674 <HAL_RTC_MspInit+0x38>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d10e      	bne.n	800466c <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800464e:	4b0a      	ldr	r3, [pc, #40]	; (8004678 <HAL_RTC_MspInit+0x3c>)
 8004650:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004652:	4b09      	ldr	r3, [pc, #36]	; (8004678 <HAL_RTC_MspInit+0x3c>)
 8004654:	2180      	movs	r1, #128	; 0x80
 8004656:	02c9      	lsls	r1, r1, #11
 8004658:	430a      	orrs	r2, r1
 800465a:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800465c:	2200      	movs	r2, #0
 800465e:	2100      	movs	r1, #0
 8004660:	2002      	movs	r0, #2
 8004662:	f001 f8bf 	bl	80057e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8004666:	2002      	movs	r0, #2
 8004668:	f001 f8d1 	bl	800580e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800466c:	46c0      	nop			; (mov r8, r8)
 800466e:	46bd      	mov	sp, r7
 8004670:	b002      	add	sp, #8
 8004672:	bd80      	pop	{r7, pc}
 8004674:	40002800 	.word	0x40002800
 8004678:	40021000 	.word	0x40021000

0800467c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b088      	sub	sp, #32
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004684:	230c      	movs	r3, #12
 8004686:	18fb      	adds	r3, r7, r3
 8004688:	0018      	movs	r0, r3
 800468a:	2314      	movs	r3, #20
 800468c:	001a      	movs	r2, r3
 800468e:	2100      	movs	r1, #0
 8004690:	f004 ff59 	bl	8009546 <memset>
  if(hspi->Instance==SPI2)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a31      	ldr	r2, [pc, #196]	; (8004760 <HAL_SPI_MspInit+0xe4>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d15c      	bne.n	8004758 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800469e:	4b31      	ldr	r3, [pc, #196]	; (8004764 <HAL_SPI_MspInit+0xe8>)
 80046a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046a2:	4b30      	ldr	r3, [pc, #192]	; (8004764 <HAL_SPI_MspInit+0xe8>)
 80046a4:	2180      	movs	r1, #128	; 0x80
 80046a6:	01c9      	lsls	r1, r1, #7
 80046a8:	430a      	orrs	r2, r1
 80046aa:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046ac:	4b2d      	ldr	r3, [pc, #180]	; (8004764 <HAL_SPI_MspInit+0xe8>)
 80046ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b0:	4b2c      	ldr	r3, [pc, #176]	; (8004764 <HAL_SPI_MspInit+0xe8>)
 80046b2:	2102      	movs	r1, #2
 80046b4:	430a      	orrs	r2, r1
 80046b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80046b8:	4b2a      	ldr	r3, [pc, #168]	; (8004764 <HAL_SPI_MspInit+0xe8>)
 80046ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046bc:	2202      	movs	r2, #2
 80046be:	4013      	ands	r3, r2
 80046c0:	60bb      	str	r3, [r7, #8]
 80046c2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80046c4:	210c      	movs	r1, #12
 80046c6:	187b      	adds	r3, r7, r1
 80046c8:	22b0      	movs	r2, #176	; 0xb0
 80046ca:	0212      	lsls	r2, r2, #8
 80046cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ce:	187b      	adds	r3, r7, r1
 80046d0:	2202      	movs	r2, #2
 80046d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d4:	187b      	adds	r3, r7, r1
 80046d6:	2200      	movs	r2, #0
 80046d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046da:	187b      	adds	r3, r7, r1
 80046dc:	2203      	movs	r2, #3
 80046de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80046e0:	187b      	adds	r3, r7, r1
 80046e2:	2200      	movs	r2, #0
 80046e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046e6:	187b      	adds	r3, r7, r1
 80046e8:	4a1f      	ldr	r2, [pc, #124]	; (8004768 <HAL_SPI_MspInit+0xec>)
 80046ea:	0019      	movs	r1, r3
 80046ec:	0010      	movs	r0, r2
 80046ee:	f001 faad 	bl	8005c4c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80046f2:	4b1e      	ldr	r3, [pc, #120]	; (800476c <HAL_SPI_MspInit+0xf0>)
 80046f4:	4a1e      	ldr	r2, [pc, #120]	; (8004770 <HAL_SPI_MspInit+0xf4>)
 80046f6:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_2;
 80046f8:	4b1c      	ldr	r3, [pc, #112]	; (800476c <HAL_SPI_MspInit+0xf0>)
 80046fa:	2202      	movs	r2, #2
 80046fc:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80046fe:	4b1b      	ldr	r3, [pc, #108]	; (800476c <HAL_SPI_MspInit+0xf0>)
 8004700:	2210      	movs	r2, #16
 8004702:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004704:	4b19      	ldr	r3, [pc, #100]	; (800476c <HAL_SPI_MspInit+0xf0>)
 8004706:	2200      	movs	r2, #0
 8004708:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_DISABLE;
 800470a:	4b18      	ldr	r3, [pc, #96]	; (800476c <HAL_SPI_MspInit+0xf0>)
 800470c:	2200      	movs	r2, #0
 800470e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004710:	4b16      	ldr	r3, [pc, #88]	; (800476c <HAL_SPI_MspInit+0xf0>)
 8004712:	2280      	movs	r2, #128	; 0x80
 8004714:	0052      	lsls	r2, r2, #1
 8004716:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004718:	4b14      	ldr	r3, [pc, #80]	; (800476c <HAL_SPI_MspInit+0xf0>)
 800471a:	2280      	movs	r2, #128	; 0x80
 800471c:	00d2      	lsls	r2, r2, #3
 800471e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004720:	4b12      	ldr	r3, [pc, #72]	; (800476c <HAL_SPI_MspInit+0xf0>)
 8004722:	2200      	movs	r2, #0
 8004724:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004726:	4b11      	ldr	r3, [pc, #68]	; (800476c <HAL_SPI_MspInit+0xf0>)
 8004728:	2200      	movs	r2, #0
 800472a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800472c:	4b0f      	ldr	r3, [pc, #60]	; (800476c <HAL_SPI_MspInit+0xf0>)
 800472e:	0018      	movs	r0, r3
 8004730:	f001 f88a 	bl	8005848 <HAL_DMA_Init>
 8004734:	1e03      	subs	r3, r0, #0
 8004736:	d001      	beq.n	800473c <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 8004738:	f7ff ff20 	bl	800457c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a0b      	ldr	r2, [pc, #44]	; (800476c <HAL_SPI_MspInit+0xf0>)
 8004740:	649a      	str	r2, [r3, #72]	; 0x48
 8004742:	4b0a      	ldr	r3, [pc, #40]	; (800476c <HAL_SPI_MspInit+0xf0>)
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004748:	2200      	movs	r2, #0
 800474a:	2100      	movs	r1, #0
 800474c:	201a      	movs	r0, #26
 800474e:	f001 f849 	bl	80057e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004752:	201a      	movs	r0, #26
 8004754:	f001 f85b 	bl	800580e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004758:	46c0      	nop			; (mov r8, r8)
 800475a:	46bd      	mov	sp, r7
 800475c:	b008      	add	sp, #32
 800475e:	bd80      	pop	{r7, pc}
 8004760:	40003800 	.word	0x40003800
 8004764:	40021000 	.word	0x40021000
 8004768:	50000400 	.word	0x50000400
 800476c:	20000294 	.word	0x20000294
 8004770:	40020058 	.word	0x40020058

08004774 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	2380      	movs	r3, #128	; 0x80
 8004782:	05db      	lsls	r3, r3, #23
 8004784:	429a      	cmp	r2, r3
 8004786:	d10e      	bne.n	80047a6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004788:	4b2c      	ldr	r3, [pc, #176]	; (800483c <HAL_TIM_Base_MspInit+0xc8>)
 800478a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800478c:	4b2b      	ldr	r3, [pc, #172]	; (800483c <HAL_TIM_Base_MspInit+0xc8>)
 800478e:	2101      	movs	r1, #1
 8004790:	430a      	orrs	r2, r1
 8004792:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004794:	2200      	movs	r2, #0
 8004796:	2100      	movs	r1, #0
 8004798:	200f      	movs	r0, #15
 800479a:	f001 f823 	bl	80057e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800479e:	200f      	movs	r0, #15
 80047a0:	f001 f835 	bl	800580e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 80047a4:	e046      	b.n	8004834 <HAL_TIM_Base_MspInit+0xc0>
  else if(htim_base->Instance==TIM3)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a25      	ldr	r2, [pc, #148]	; (8004840 <HAL_TIM_Base_MspInit+0xcc>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d106      	bne.n	80047be <HAL_TIM_Base_MspInit+0x4a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80047b0:	4b22      	ldr	r3, [pc, #136]	; (800483c <HAL_TIM_Base_MspInit+0xc8>)
 80047b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047b4:	4b21      	ldr	r3, [pc, #132]	; (800483c <HAL_TIM_Base_MspInit+0xc8>)
 80047b6:	2102      	movs	r1, #2
 80047b8:	430a      	orrs	r2, r1
 80047ba:	639a      	str	r2, [r3, #56]	; 0x38
}
 80047bc:	e03a      	b.n	8004834 <HAL_TIM_Base_MspInit+0xc0>
  else if(htim_base->Instance==TIM6)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a20      	ldr	r2, [pc, #128]	; (8004844 <HAL_TIM_Base_MspInit+0xd0>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d10e      	bne.n	80047e6 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80047c8:	4b1c      	ldr	r3, [pc, #112]	; (800483c <HAL_TIM_Base_MspInit+0xc8>)
 80047ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047cc:	4b1b      	ldr	r3, [pc, #108]	; (800483c <HAL_TIM_Base_MspInit+0xc8>)
 80047ce:	2110      	movs	r1, #16
 80047d0:	430a      	orrs	r2, r1
 80047d2:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80047d4:	2200      	movs	r2, #0
 80047d6:	2100      	movs	r1, #0
 80047d8:	2011      	movs	r0, #17
 80047da:	f001 f803 	bl	80057e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80047de:	2011      	movs	r0, #17
 80047e0:	f001 f815 	bl	800580e <HAL_NVIC_EnableIRQ>
}
 80047e4:	e026      	b.n	8004834 <HAL_TIM_Base_MspInit+0xc0>
  else if(htim_base->Instance==TIM21)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a17      	ldr	r2, [pc, #92]	; (8004848 <HAL_TIM_Base_MspInit+0xd4>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d10e      	bne.n	800480e <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM21_CLK_ENABLE();
 80047f0:	4b12      	ldr	r3, [pc, #72]	; (800483c <HAL_TIM_Base_MspInit+0xc8>)
 80047f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047f4:	4b11      	ldr	r3, [pc, #68]	; (800483c <HAL_TIM_Base_MspInit+0xc8>)
 80047f6:	2104      	movs	r1, #4
 80047f8:	430a      	orrs	r2, r1
 80047fa:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 80047fc:	2200      	movs	r2, #0
 80047fe:	2100      	movs	r1, #0
 8004800:	2014      	movs	r0, #20
 8004802:	f000 ffef 	bl	80057e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8004806:	2014      	movs	r0, #20
 8004808:	f001 f801 	bl	800580e <HAL_NVIC_EnableIRQ>
}
 800480c:	e012      	b.n	8004834 <HAL_TIM_Base_MspInit+0xc0>
  else if(htim_base->Instance==TIM22)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a0e      	ldr	r2, [pc, #56]	; (800484c <HAL_TIM_Base_MspInit+0xd8>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d10d      	bne.n	8004834 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8004818:	4b08      	ldr	r3, [pc, #32]	; (800483c <HAL_TIM_Base_MspInit+0xc8>)
 800481a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800481c:	4b07      	ldr	r3, [pc, #28]	; (800483c <HAL_TIM_Base_MspInit+0xc8>)
 800481e:	2120      	movs	r1, #32
 8004820:	430a      	orrs	r2, r1
 8004822:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM22_IRQn, 0, 0);
 8004824:	2200      	movs	r2, #0
 8004826:	2100      	movs	r1, #0
 8004828:	2016      	movs	r0, #22
 800482a:	f000 ffdb 	bl	80057e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
 800482e:	2016      	movs	r0, #22
 8004830:	f000 ffed 	bl	800580e <HAL_NVIC_EnableIRQ>
}
 8004834:	46c0      	nop			; (mov r8, r8)
 8004836:	46bd      	mov	sp, r7
 8004838:	b002      	add	sp, #8
 800483a:	bd80      	pop	{r7, pc}
 800483c:	40021000 	.word	0x40021000
 8004840:	40000400 	.word	0x40000400
 8004844:	40001000 	.word	0x40001000
 8004848:	40010800 	.word	0x40010800
 800484c:	40011400 	.word	0x40011400

08004850 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b088      	sub	sp, #32
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004858:	230c      	movs	r3, #12
 800485a:	18fb      	adds	r3, r7, r3
 800485c:	0018      	movs	r0, r3
 800485e:	2314      	movs	r3, #20
 8004860:	001a      	movs	r2, r3
 8004862:	2100      	movs	r1, #0
 8004864:	f004 fe6f 	bl	8009546 <memset>
  if(htim->Instance==TIM3)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a14      	ldr	r2, [pc, #80]	; (80048c0 <HAL_TIM_MspPostInit+0x70>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d121      	bne.n	80048b6 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004872:	4b14      	ldr	r3, [pc, #80]	; (80048c4 <HAL_TIM_MspPostInit+0x74>)
 8004874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004876:	4b13      	ldr	r3, [pc, #76]	; (80048c4 <HAL_TIM_MspPostInit+0x74>)
 8004878:	2104      	movs	r1, #4
 800487a:	430a      	orrs	r2, r1
 800487c:	62da      	str	r2, [r3, #44]	; 0x2c
 800487e:	4b11      	ldr	r3, [pc, #68]	; (80048c4 <HAL_TIM_MspPostInit+0x74>)
 8004880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004882:	2204      	movs	r2, #4
 8004884:	4013      	ands	r3, r2
 8004886:	60bb      	str	r3, [r7, #8]
 8004888:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800488a:	210c      	movs	r1, #12
 800488c:	187b      	adds	r3, r7, r1
 800488e:	2240      	movs	r2, #64	; 0x40
 8004890:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004892:	187b      	adds	r3, r7, r1
 8004894:	2202      	movs	r2, #2
 8004896:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004898:	187b      	adds	r3, r7, r1
 800489a:	2200      	movs	r2, #0
 800489c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800489e:	187b      	adds	r3, r7, r1
 80048a0:	2200      	movs	r2, #0
 80048a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80048a4:	187b      	adds	r3, r7, r1
 80048a6:	2202      	movs	r2, #2
 80048a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048aa:	187b      	adds	r3, r7, r1
 80048ac:	4a06      	ldr	r2, [pc, #24]	; (80048c8 <HAL_TIM_MspPostInit+0x78>)
 80048ae:	0019      	movs	r1, r3
 80048b0:	0010      	movs	r0, r2
 80048b2:	f001 f9cb 	bl	8005c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	46bd      	mov	sp, r7
 80048ba:	b008      	add	sp, #32
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	46c0      	nop			; (mov r8, r8)
 80048c0:	40000400 	.word	0x40000400
 80048c4:	40021000 	.word	0x40021000
 80048c8:	50000800 	.word	0x50000800

080048cc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a06      	ldr	r2, [pc, #24]	; (80048f4 <HAL_PCD_MspInit+0x28>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d106      	bne.n	80048ec <HAL_PCD_MspInit+0x20>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80048de:	4b06      	ldr	r3, [pc, #24]	; (80048f8 <HAL_PCD_MspInit+0x2c>)
 80048e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048e2:	4b05      	ldr	r3, [pc, #20]	; (80048f8 <HAL_PCD_MspInit+0x2c>)
 80048e4:	2180      	movs	r1, #128	; 0x80
 80048e6:	0409      	lsls	r1, r1, #16
 80048e8:	430a      	orrs	r2, r1
 80048ea:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80048ec:	46c0      	nop			; (mov r8, r8)
 80048ee:	46bd      	mov	sp, r7
 80048f0:	b002      	add	sp, #8
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	40005c00 	.word	0x40005c00
 80048f8:	40021000 	.word	0x40021000

080048fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004900:	46c0      	nop			; (mov r8, r8)
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800490a:	e7fe      	b.n	800490a <HardFault_Handler+0x4>

0800490c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004910:	46c0      	nop			; (mov r8, r8)
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800491a:	46c0      	nop			; (mov r8, r8)
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004924:	f000 fb72 	bl	800500c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004928:	46c0      	nop			; (mov r8, r8)
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
	...

08004930 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8004934:	4b03      	ldr	r3, [pc, #12]	; (8004944 <RTC_IRQHandler+0x14>)
 8004936:	0018      	movs	r0, r3
 8004938:	f002 ff9a 	bl	8007870 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800493c:	46c0      	nop			; (mov r8, r8)
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	46c0      	nop			; (mov r8, r8)
 8004944:	20000234 	.word	0x20000234

08004948 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800494c:	2002      	movs	r0, #2
 800494e:	f001 fb33 	bl	8005fb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8004952:	46c0      	nop			; (mov r8, r8)
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800495c:	2004      	movs	r0, #4
 800495e:	f001 fb2b 	bl	8005fb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8004962:	46c0      	nop			; (mov r8, r8)
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800496c:	2380      	movs	r3, #128	; 0x80
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	0018      	movs	r0, r3
 8004972:	f001 fb21 	bl	8005fb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004976:	2380      	movs	r3, #128	; 0x80
 8004978:	011b      	lsls	r3, r3, #4
 800497a:	0018      	movs	r0, r3
 800497c:	f001 fb1c 	bl	8005fb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004980:	46c0      	nop			; (mov r8, r8)
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800498c:	4b03      	ldr	r3, [pc, #12]	; (800499c <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 800498e:	0018      	movs	r0, r3
 8004990:	f001 f880 	bl	8005a94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8004994:	46c0      	nop			; (mov r8, r8)
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	46c0      	nop			; (mov r8, r8)
 800499c:	20000294 	.word	0x20000294

080049a0 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80049a4:	4b03      	ldr	r3, [pc, #12]	; (80049b4 <ADC1_COMP_IRQHandler+0x14>)
 80049a6:	0018      	movs	r0, r3
 80049a8:	f000 fce2 	bl	8005370 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 80049ac:	46c0      	nop			; (mov r8, r8)
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	46c0      	nop			; (mov r8, r8)
 80049b4:	200005d0 	.word	0x200005d0

080049b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80049bc:	4b03      	ldr	r3, [pc, #12]	; (80049cc <TIM2_IRQHandler+0x14>)
 80049be:	0018      	movs	r0, r3
 80049c0:	f003 fffa 	bl	80089b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80049c4:	46c0      	nop			; (mov r8, r8)
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	46c0      	nop			; (mov r8, r8)
 80049cc:	20000258 	.word	0x20000258

080049d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80049d4:	4b03      	ldr	r3, [pc, #12]	; (80049e4 <TIM6_DAC_IRQHandler+0x14>)
 80049d6:	0018      	movs	r0, r3
 80049d8:	f003 ffee 	bl	80089b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80049dc:	46c0      	nop			; (mov r8, r8)
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	46c0      	nop			; (mov r8, r8)
 80049e4:	2000011c 	.word	0x2000011c

080049e8 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 80049ec:	4b03      	ldr	r3, [pc, #12]	; (80049fc <TIM21_IRQHandler+0x14>)
 80049ee:	0018      	movs	r0, r3
 80049f0:	f003 ffe2 	bl	80089b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 80049f4:	46c0      	nop			; (mov r8, r8)
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	46c0      	nop			; (mov r8, r8)
 80049fc:	2000062c 	.word	0x2000062c

08004a00 <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM22_IRQn 0 */

  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 8004a04:	4b03      	ldr	r3, [pc, #12]	; (8004a14 <TIM22_IRQHandler+0x14>)
 8004a06:	0018      	movs	r0, r3
 8004a08:	f003 ffd6 	bl	80089b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 8004a0c:	46c0      	nop			; (mov r8, r8)
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	46c0      	nop			; (mov r8, r8)
 8004a14:	200001f8 	.word	0x200001f8

08004a18 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004a1c:	4b03      	ldr	r3, [pc, #12]	; (8004a2c <SPI2_IRQHandler+0x14>)
 8004a1e:	0018      	movs	r0, r3
 8004a20:	f003 fb70 	bl	8008104 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004a24:	46c0      	nop			; (mov r8, r8)
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	46c0      	nop			; (mov r8, r8)
 8004a2c:	20000164 	.word	0x20000164

08004a30 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004a38:	4b11      	ldr	r3, [pc, #68]	; (8004a80 <_sbrk+0x50>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d102      	bne.n	8004a46 <_sbrk+0x16>
		heap_end = &end;
 8004a40:	4b0f      	ldr	r3, [pc, #60]	; (8004a80 <_sbrk+0x50>)
 8004a42:	4a10      	ldr	r2, [pc, #64]	; (8004a84 <_sbrk+0x54>)
 8004a44:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004a46:	4b0e      	ldr	r3, [pc, #56]	; (8004a80 <_sbrk+0x50>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004a4c:	4b0c      	ldr	r3, [pc, #48]	; (8004a80 <_sbrk+0x50>)
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	18d3      	adds	r3, r2, r3
 8004a54:	466a      	mov	r2, sp
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d907      	bls.n	8004a6a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004a5a:	f004 fd41 	bl	80094e0 <__errno>
 8004a5e:	0003      	movs	r3, r0
 8004a60:	220c      	movs	r2, #12
 8004a62:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004a64:	2301      	movs	r3, #1
 8004a66:	425b      	negs	r3, r3
 8004a68:	e006      	b.n	8004a78 <_sbrk+0x48>
	}

	heap_end += incr;
 8004a6a:	4b05      	ldr	r3, [pc, #20]	; (8004a80 <_sbrk+0x50>)
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	18d2      	adds	r2, r2, r3
 8004a72:	4b03      	ldr	r3, [pc, #12]	; (8004a80 <_sbrk+0x50>)
 8004a74:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8004a76:	68fb      	ldr	r3, [r7, #12]
}
 8004a78:	0018      	movs	r0, r3
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	b004      	add	sp, #16
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	200000d0 	.word	0x200000d0
 8004a84:	20000670 	.word	0x20000670

08004a88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8004a8c:	4b17      	ldr	r3, [pc, #92]	; (8004aec <SystemInit+0x64>)
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	4b16      	ldr	r3, [pc, #88]	; (8004aec <SystemInit+0x64>)
 8004a92:	2180      	movs	r1, #128	; 0x80
 8004a94:	0049      	lsls	r1, r1, #1
 8004a96:	430a      	orrs	r2, r1
 8004a98:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8004a9a:	4b14      	ldr	r3, [pc, #80]	; (8004aec <SystemInit+0x64>)
 8004a9c:	68da      	ldr	r2, [r3, #12]
 8004a9e:	4b13      	ldr	r3, [pc, #76]	; (8004aec <SystemInit+0x64>)
 8004aa0:	4913      	ldr	r1, [pc, #76]	; (8004af0 <SystemInit+0x68>)
 8004aa2:	400a      	ands	r2, r1
 8004aa4:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8004aa6:	4b11      	ldr	r3, [pc, #68]	; (8004aec <SystemInit+0x64>)
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	4b10      	ldr	r3, [pc, #64]	; (8004aec <SystemInit+0x64>)
 8004aac:	4911      	ldr	r1, [pc, #68]	; (8004af4 <SystemInit+0x6c>)
 8004aae:	400a      	ands	r2, r1
 8004ab0:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004ab2:	4b0e      	ldr	r3, [pc, #56]	; (8004aec <SystemInit+0x64>)
 8004ab4:	689a      	ldr	r2, [r3, #8]
 8004ab6:	4b0d      	ldr	r3, [pc, #52]	; (8004aec <SystemInit+0x64>)
 8004ab8:	2101      	movs	r1, #1
 8004aba:	438a      	bics	r2, r1
 8004abc:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004abe:	4b0b      	ldr	r3, [pc, #44]	; (8004aec <SystemInit+0x64>)
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	4b0a      	ldr	r3, [pc, #40]	; (8004aec <SystemInit+0x64>)
 8004ac4:	490c      	ldr	r1, [pc, #48]	; (8004af8 <SystemInit+0x70>)
 8004ac6:	400a      	ands	r2, r1
 8004ac8:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8004aca:	4b08      	ldr	r3, [pc, #32]	; (8004aec <SystemInit+0x64>)
 8004acc:	68da      	ldr	r2, [r3, #12]
 8004ace:	4b07      	ldr	r3, [pc, #28]	; (8004aec <SystemInit+0x64>)
 8004ad0:	490a      	ldr	r1, [pc, #40]	; (8004afc <SystemInit+0x74>)
 8004ad2:	400a      	ands	r2, r1
 8004ad4:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004ad6:	4b05      	ldr	r3, [pc, #20]	; (8004aec <SystemInit+0x64>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004adc:	4b08      	ldr	r3, [pc, #32]	; (8004b00 <SystemInit+0x78>)
 8004ade:	2280      	movs	r2, #128	; 0x80
 8004ae0:	0512      	lsls	r2, r2, #20
 8004ae2:	609a      	str	r2, [r3, #8]
#endif
}
 8004ae4:	46c0      	nop			; (mov r8, r8)
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	46c0      	nop			; (mov r8, r8)
 8004aec:	40021000 	.word	0x40021000
 8004af0:	88ff400c 	.word	0x88ff400c
 8004af4:	fef6fff6 	.word	0xfef6fff6
 8004af8:	fffbffff 	.word	0xfffbffff
 8004afc:	ff02ffff 	.word	0xff02ffff
 8004b00:	e000ed00 	.word	0xe000ed00

08004b04 <HAL_TIM_PeriodElapsedCallback>:
static uint32_t stopwatchStartMarker = 0;
static uint32_t stopwatchPauseMarker = 0;
static uint8_t motorStateCounter = 0;

// called for a bunch of timers when timer has to circle back (arr->0, 0->arr)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
//		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON4);
//
//		HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
//		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
//	}
	if (htim->Instance == TIM6) {
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a29      	ldr	r2, [pc, #164]	; (8004bb8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d142      	bne.n	8004b9c <HAL_TIM_PeriodElapsedCallback+0x98>
		// just pulsing 3x
		++motorStateCounter;
 8004b16:	4b29      	ldr	r3, [pc, #164]	; (8004bbc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	4b27      	ldr	r3, [pc, #156]	; (8004bbc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8004b20:	701a      	strb	r2, [r3, #0]
		switch(motorStateCounter) {
 8004b22:	4b26      	ldr	r3, [pc, #152]	; (8004bbc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	2b06      	cmp	r3, #6
 8004b28:	d841      	bhi.n	8004bae <HAL_TIM_PeriodElapsedCallback+0xaa>
 8004b2a:	009a      	lsls	r2, r3, #2
 8004b2c:	4b24      	ldr	r3, [pc, #144]	; (8004bc0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8004b2e:	18d3      	adds	r3, r2, r3
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	469f      	mov	pc, r3
			case 1: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8004b34:	23a0      	movs	r3, #160	; 0xa0
 8004b36:	05db      	lsls	r3, r3, #23
 8004b38:	2201      	movs	r2, #1
 8004b3a:	2110      	movs	r1, #16
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	f001 fa03 	bl	8005f48 <HAL_GPIO_WritePin>
 8004b42:	e035      	b.n	8004bb0 <HAL_TIM_PeriodElapsedCallback+0xac>
			case 2: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET); break;
 8004b44:	23a0      	movs	r3, #160	; 0xa0
 8004b46:	05db      	lsls	r3, r3, #23
 8004b48:	2200      	movs	r2, #0
 8004b4a:	2110      	movs	r1, #16
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	f001 f9fb 	bl	8005f48 <HAL_GPIO_WritePin>
 8004b52:	e02d      	b.n	8004bb0 <HAL_TIM_PeriodElapsedCallback+0xac>
			case 3: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8004b54:	23a0      	movs	r3, #160	; 0xa0
 8004b56:	05db      	lsls	r3, r3, #23
 8004b58:	2201      	movs	r2, #1
 8004b5a:	2110      	movs	r1, #16
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	f001 f9f3 	bl	8005f48 <HAL_GPIO_WritePin>
 8004b62:	e025      	b.n	8004bb0 <HAL_TIM_PeriodElapsedCallback+0xac>
			case 4: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET); break;
 8004b64:	23a0      	movs	r3, #160	; 0xa0
 8004b66:	05db      	lsls	r3, r3, #23
 8004b68:	2200      	movs	r2, #0
 8004b6a:	2110      	movs	r1, #16
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	f001 f9eb 	bl	8005f48 <HAL_GPIO_WritePin>
 8004b72:	e01d      	b.n	8004bb0 <HAL_TIM_PeriodElapsedCallback+0xac>
			case 5: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8004b74:	23a0      	movs	r3, #160	; 0xa0
 8004b76:	05db      	lsls	r3, r3, #23
 8004b78:	2201      	movs	r2, #1
 8004b7a:	2110      	movs	r1, #16
 8004b7c:	0018      	movs	r0, r3
 8004b7e:	f001 f9e3 	bl	8005f48 <HAL_GPIO_WritePin>
 8004b82:	e015      	b.n	8004bb0 <HAL_TIM_PeriodElapsedCallback+0xac>
			case 6:
				HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET);
 8004b84:	23a0      	movs	r3, #160	; 0xa0
 8004b86:	05db      	lsls	r3, r3, #23
 8004b88:	2200      	movs	r2, #0
 8004b8a:	2110      	movs	r1, #16
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	f001 f9db 	bl	8005f48 <HAL_GPIO_WritePin>
				stopMotor(htim);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	0018      	movs	r0, r3
 8004b96:	f000 f893 	bl	8004cc0 <stopMotor>
				break;
 8004b9a:	e009      	b.n	8004bb0 <HAL_TIM_PeriodElapsedCallback+0xac>
			default: break;
		}
	}
	// sampler's timer
	else if (htim->Instance == TIM22) {
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a08      	ldr	r2, [pc, #32]	; (8004bc4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d104      	bne.n	8004bb0 <HAL_TIM_PeriodElapsedCallback+0xac>
		// set flag to start ADC sample
		canSampleBattery = 1;
 8004ba6:	4b08      	ldr	r3, [pc, #32]	; (8004bc8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8004ba8:	2201      	movs	r2, #1
 8004baa:	701a      	strb	r2, [r3, #0]
	}
}
 8004bac:	e000      	b.n	8004bb0 <HAL_TIM_PeriodElapsedCallback+0xac>
			default: break;
 8004bae:	46c0      	nop			; (mov r8, r8)
}
 8004bb0:	46c0      	nop			; (mov r8, r8)
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	b002      	add	sp, #8
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	40001000 	.word	0x40001000
 8004bbc:	200000dc 	.word	0x200000dc
 8004bc0:	0800a670 	.word	0x0800a670
 8004bc4:	40011400 	.word	0x40011400
 8004bc8:	2000010a 	.word	0x2000010a

08004bcc <HAL_TIM_OC_DelayElapsedCallback>:

// called for a bunch of timers when channel value = counter value
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM21) {
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a1f      	ldr	r2, [pc, #124]	; (8004c58 <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d138      	bne.n	8004c50 <HAL_TIM_OC_DelayElapsedCallback+0x84>
		// timer's channel
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	7e1b      	ldrb	r3, [r3, #24]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d122      	bne.n	8004c2c <HAL_TIM_OC_DelayElapsedCallback+0x60>
			updateFace.timer = 1;		// set update screen flag
 8004be6:	4b1d      	ldr	r3, [pc, #116]	; (8004c5c <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8004be8:	2201      	movs	r2, #1
 8004bea:	705a      	strb	r2, [r3, #1]

			// decrement value if non-zero, else set done flag
			if (timerCounter != 1) --timerCounter;
 8004bec:	4b1c      	ldr	r3, [pc, #112]	; (8004c60 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d005      	beq.n	8004c00 <HAL_TIM_OC_DelayElapsedCallback+0x34>
 8004bf4:	4b1a      	ldr	r3, [pc, #104]	; (8004c60 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	1e5a      	subs	r2, r3, #1
 8004bfa:	4b19      	ldr	r3, [pc, #100]	; (8004c60 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8004bfc:	601a      	str	r2, [r3, #0]
//				stopMotor(htim);
//				break;
//			default: break;
//		}
//	}
}
 8004bfe:	e027      	b.n	8004c50 <HAL_TIM_OC_DelayElapsedCallback+0x84>
				--timerCounter;
 8004c00:	4b17      	ldr	r3, [pc, #92]	; (8004c60 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	1e5a      	subs	r2, r3, #1
 8004c06:	4b16      	ldr	r3, [pc, #88]	; (8004c60 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8004c08:	601a      	str	r2, [r3, #0]
				isTimerDone = 1;
 8004c0a:	4b16      	ldr	r3, [pc, #88]	; (8004c64 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	701a      	strb	r2, [r3, #0]
				stopTimer(htim);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	0018      	movs	r0, r3
 8004c14:	f000 f82a 	bl	8004c6c <stopTimer>
				updateFace.timer = 1;
 8004c18:	4b10      	ldr	r3, [pc, #64]	; (8004c5c <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_TogglePin(LED2_PORT, LED2_PIN);
 8004c1e:	23a0      	movs	r3, #160	; 0xa0
 8004c20:	05db      	lsls	r3, r3, #23
 8004c22:	2140      	movs	r1, #64	; 0x40
 8004c24:	0018      	movs	r0, r3
 8004c26:	f001 f9ac 	bl	8005f82 <HAL_GPIO_TogglePin>
}
 8004c2a:	e011      	b.n	8004c50 <HAL_TIM_OC_DelayElapsedCallback+0x84>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	7e1b      	ldrb	r3, [r3, #24]
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d10d      	bne.n	8004c50 <HAL_TIM_OC_DelayElapsedCallback+0x84>
			updateFace.stopwatch = 1;
 8004c34:	4b09      	ldr	r3, [pc, #36]	; (8004c5c <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8004c36:	2201      	movs	r2, #1
 8004c38:	70da      	strb	r2, [r3, #3]
			++stopwatchCounter;
 8004c3a:	4b0b      	ldr	r3, [pc, #44]	; (8004c68 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	4b09      	ldr	r3, [pc, #36]	; (8004c68 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8004c42:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED2_PORT, LED2_PIN);
 8004c44:	23a0      	movs	r3, #160	; 0xa0
 8004c46:	05db      	lsls	r3, r3, #23
 8004c48:	2140      	movs	r1, #64	; 0x40
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	f001 f999 	bl	8005f82 <HAL_GPIO_TogglePin>
}
 8004c50:	46c0      	nop			; (mov r8, r8)
 8004c52:	46bd      	mov	sp, r7
 8004c54:	b002      	add	sp, #8
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	40010800 	.word	0x40010800
 8004c5c:	2000010c 	.word	0x2000010c
 8004c60:	20000114 	.word	0x20000114
 8004c64:	20000118 	.word	0x20000118
 8004c68:	20000160 	.word	0x20000160

08004c6c <stopTimer>:
	// stop timer, but hold marker so you can track milliseconds to next second
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_1);
	timerPauseMarker = htim->Instance->CNT-1;
}

void stopTimer(TIM_HandleTypeDef *htim) {
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
	// clear everything
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_1);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2100      	movs	r1, #0
 8004c78:	0018      	movs	r0, r3
 8004c7a:	f003 fdf5 	bl	8008868 <HAL_TIM_OC_Stop_IT>
	timerStartMarker = 0;
 8004c7e:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <stopTimer+0x28>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	601a      	str	r2, [r3, #0]
	timerPauseMarker = 0;
 8004c84:	4b04      	ldr	r3, [pc, #16]	; (8004c98 <stopTimer+0x2c>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]
}
 8004c8a:	46c0      	nop			; (mov r8, r8)
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	b002      	add	sp, #8
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	46c0      	nop			; (mov r8, r8)
 8004c94:	200000d4 	.word	0x200000d4
 8004c98:	200000d8 	.word	0x200000d8

08004c9c <runADCSampler>:
void stopTimerStopwatchBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Stop(htim);}
// ---- end of important timer functions ----

// ---- motor and other things that use timer ----
// uses LSE timer TIM22
void runADCSampler(TIM_HandleTypeDef *htim) {
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(htim);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	f003 fd66 	bl	8008778 <HAL_TIM_Base_Start_IT>
	canSampleBattery = 1;			// set flag to let ADC run at the start
 8004cac:	4b03      	ldr	r3, [pc, #12]	; (8004cbc <runADCSampler+0x20>)
 8004cae:	2201      	movs	r2, #1
 8004cb0:	701a      	strb	r2, [r3, #0]
}
 8004cb2:	46c0      	nop			; (mov r8, r8)
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	b002      	add	sp, #8
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	46c0      	nop			; (mov r8, r8)
 8004cbc:	2000010a 	.word	0x2000010a

08004cc0 <stopMotor>:
	HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET);
	HAL_TIM_Base_Start_IT(htim);
	motorStateCounter = 0;
}

void stopMotor(TIM_HandleTypeDef *htim) {
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
//	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_1);
	HAL_TIM_Base_Stop_IT(htim);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	0018      	movs	r0, r3
 8004ccc:	f003 fd76 	bl	80087bc <HAL_TIM_Base_Stop_IT>
	motorStateCounter = 0;
 8004cd0:	4b03      	ldr	r3, [pc, #12]	; (8004ce0 <stopMotor+0x20>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	701a      	strb	r2, [r3, #0]
}
 8004cd6:	46c0      	nop			; (mov r8, r8)
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	b002      	add	sp, #8
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	46c0      	nop			; (mov r8, r8)
 8004ce0:	200000dc 	.word	0x200000dc

08004ce4 <setDisplayBacklight>:
//void runMotorBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Start(htim);}
//void stopMotorBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Stop(htim);}

// should change display brightness by changing PWM pulse width. input should be from 0-100
// uses 32MHz timer TIM3 CH1
void setDisplayBacklight(uint8_t intensity, TIM_HandleTypeDef *htim) {
 8004ce4:	b5b0      	push	{r4, r5, r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	0002      	movs	r2, r0
 8004cec:	6039      	str	r1, [r7, #0]
 8004cee:	1dfb      	adds	r3, r7, #7
 8004cf0:	701a      	strb	r2, [r3, #0]
	if (intensity > 100) return;		// bounds checking
 8004cf2:	1dfb      	adds	r3, r7, #7
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	2b64      	cmp	r3, #100	; 0x64
 8004cf8:	d83a      	bhi.n	8004d70 <setDisplayBacklight+0x8c>

	TIM_OC_InitTypeDef sConfig = {0};
 8004cfa:	2508      	movs	r5, #8
 8004cfc:	197b      	adds	r3, r7, r5
 8004cfe:	0018      	movs	r0, r3
 8004d00:	2310      	movs	r3, #16
 8004d02:	001a      	movs	r2, r3
 8004d04:	2100      	movs	r1, #0
 8004d06:	f004 fc1e 	bl	8009546 <memset>
	sConfig.OCMode = TIM_OCMODE_PWM1;
 8004d0a:	197b      	adds	r3, r7, r5
 8004d0c:	2260      	movs	r2, #96	; 0x60
 8004d0e:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d10:	197b      	adds	r3, r7, r5
 8004d12:	2200      	movs	r2, #0
 8004d14:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 8004d16:	197b      	adds	r3, r7, r5
 8004d18:	2200      	movs	r2, #0
 8004d1a:	60da      	str	r2, [r3, #12]
	sConfig.Pulse = (htim->Instance->ARR-1)*((float)intensity/100);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d22:	3b01      	subs	r3, #1
 8004d24:	0018      	movs	r0, r3
 8004d26:	f7fc f8cb 	bl	8000ec0 <__aeabi_ui2f>
 8004d2a:	1c04      	adds	r4, r0, #0
 8004d2c:	1dfb      	adds	r3, r7, #7
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	0018      	movs	r0, r3
 8004d32:	f7fc f8c5 	bl	8000ec0 <__aeabi_ui2f>
 8004d36:	1c03      	adds	r3, r0, #0
 8004d38:	490f      	ldr	r1, [pc, #60]	; (8004d78 <setDisplayBacklight+0x94>)
 8004d3a:	1c18      	adds	r0, r3, #0
 8004d3c:	f7fb fbd2 	bl	80004e4 <__aeabi_fdiv>
 8004d40:	1c03      	adds	r3, r0, #0
 8004d42:	1c19      	adds	r1, r3, #0
 8004d44:	1c20      	adds	r0, r4, #0
 8004d46:	f7fb fda5 	bl	8000894 <__aeabi_fmul>
 8004d4a:	1c03      	adds	r3, r0, #0
 8004d4c:	1c18      	adds	r0, r3, #0
 8004d4e:	f7fb fb93 	bl	8000478 <__aeabi_f2uiz>
 8004d52:	0002      	movs	r2, r0
 8004d54:	197b      	adds	r3, r7, r5
 8004d56:	605a      	str	r2, [r3, #4]

	HAL_TIM_PWM_ConfigChannel(htim, &sConfig, TIM_CHANNEL_1);
 8004d58:	1979      	adds	r1, r7, r5
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	0018      	movs	r0, r3
 8004d60:	f003 ff60 	bl	8008c24 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	2100      	movs	r1, #0
 8004d68:	0018      	movs	r0, r3
 8004d6a:	f003 fe03 	bl	8008974 <HAL_TIM_PWM_Start>
 8004d6e:	e000      	b.n	8004d72 <setDisplayBacklight+0x8e>
	if (intensity > 100) return;		// bounds checking
 8004d70:	46c0      	nop			; (mov r8, r8)
}
 8004d72:	46bd      	mov	sp, r7
 8004d74:	b006      	add	sp, #24
 8004d76:	bdb0      	pop	{r4, r5, r7, pc}
 8004d78:	42c80000 	.word	0x42c80000

08004d7c <HAL_GPIO_EXTI_Callback>:
	"Nov",
	"Dec"
};

// callback for button interrupts.
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	0002      	movs	r2, r0
 8004d84:	1dbb      	adds	r3, r7, #6
 8004d86:	801a      	strh	r2, [r3, #0]
//	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
//	HAL_NVIC_ClearPendingIRQ(EXTI2_3_IRQn);
//	HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);

	// updates flags
	if (GPIO_Pin == BUTTON1) buttons.is1Pressed = 1;
 8004d88:	1dbb      	adds	r3, r7, #6
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d102      	bne.n	8004d96 <HAL_GPIO_EXTI_Callback+0x1a>
 8004d90:	4b0f      	ldr	r3, [pc, #60]	; (8004dd0 <HAL_GPIO_EXTI_Callback+0x54>)
 8004d92:	2201      	movs	r2, #1
 8004d94:	701a      	strb	r2, [r3, #0]
	if (GPIO_Pin == BUTTON2) buttons.is2Pressed = 1;
 8004d96:	1dbb      	adds	r3, r7, #6
 8004d98:	881b      	ldrh	r3, [r3, #0]
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d102      	bne.n	8004da4 <HAL_GPIO_EXTI_Callback+0x28>
 8004d9e:	4b0c      	ldr	r3, [pc, #48]	; (8004dd0 <HAL_GPIO_EXTI_Callback+0x54>)
 8004da0:	2201      	movs	r2, #1
 8004da2:	705a      	strb	r2, [r3, #1]
	if (GPIO_Pin == BUTTON3) buttons.is3Pressed = 1;
 8004da4:	1dbb      	adds	r3, r7, #6
 8004da6:	881a      	ldrh	r2, [r3, #0]
 8004da8:	2380      	movs	r3, #128	; 0x80
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d102      	bne.n	8004db6 <HAL_GPIO_EXTI_Callback+0x3a>
 8004db0:	4b07      	ldr	r3, [pc, #28]	; (8004dd0 <HAL_GPIO_EXTI_Callback+0x54>)
 8004db2:	2201      	movs	r2, #1
 8004db4:	709a      	strb	r2, [r3, #2]
	if (GPIO_Pin == BUTTON4) buttons.is4Pressed = 1;
 8004db6:	1dbb      	adds	r3, r7, #6
 8004db8:	881a      	ldrh	r2, [r3, #0]
 8004dba:	2380      	movs	r3, #128	; 0x80
 8004dbc:	011b      	lsls	r3, r3, #4
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d102      	bne.n	8004dc8 <HAL_GPIO_EXTI_Callback+0x4c>
 8004dc2:	4b03      	ldr	r3, [pc, #12]	; (8004dd0 <HAL_GPIO_EXTI_Callback+0x54>)
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	70da      	strb	r2, [r3, #3]

	// runs timer for software debouncing delay
//	HAL_TIM_Base_Start_IT(&htim6);
}
 8004dc8:	46c0      	nop			; (mov r8, r8)
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	b002      	add	sp, #8
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	20000158 	.word	0x20000158

08004dd4 <drawTitle>:
	drawCenteredTextWithPadding(b3.x, b3.y, maxTextLength, str3, hspi);
	drawCenteredTextWithPadding(b4.x, b4.y, maxTextLength, str4, hspi);
}

// draws big text on top of the display
void drawTitle(char *str, SPI_HandleTypeDef *hspi) {
 8004dd4:	b590      	push	{r4, r7, lr}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
	uint8_t strSize = strlen(str);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	0018      	movs	r0, r3
 8004de2:	f7fb f991 	bl	8000108 <strlen>
 8004de6:	0002      	movs	r2, r0
 8004de8:	230d      	movs	r3, #13
 8004dea:	18fb      	adds	r3, r7, r3
 8004dec:	701a      	strb	r2, [r3, #0]
	uint16_t titleY = 20;
 8004dee:	230e      	movs	r3, #14
 8004df0:	18fb      	adds	r3, r7, r3
 8004df2:	2214      	movs	r2, #20
 8004df4:	801a      	strh	r2, [r3, #0]

	if (getDisplayOrientation() % 2 == 0) titleY = 20;
 8004df6:	f7fe f905 	bl	8003004 <getDisplayOrientation>
 8004dfa:	0003      	movs	r3, r0
 8004dfc:	001a      	movs	r2, r3
 8004dfe:	2301      	movs	r3, #1
 8004e00:	4013      	ands	r3, r2
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d104      	bne.n	8004e12 <drawTitle+0x3e>
 8004e08:	230e      	movs	r3, #14
 8004e0a:	18fb      	adds	r3, r7, r3
 8004e0c:	2214      	movs	r2, #20
 8004e0e:	801a      	strh	r2, [r3, #0]
 8004e10:	e003      	b.n	8004e1a <drawTitle+0x46>
	else titleY = 5;
 8004e12:	230e      	movs	r3, #14
 8004e14:	18fb      	adds	r3, r7, r3
 8004e16:	2205      	movs	r2, #5
 8004e18:	801a      	strh	r2, [r3, #0]

	// drawing title
	// bounds checking
	// TODO: use fontsize variable
	if (12*strSize < getDisplayWidth()) {			// about string size = 10 for width = 128
 8004e1a:	230d      	movs	r3, #13
 8004e1c:	18fb      	adds	r3, r7, r3
 8004e1e:	781a      	ldrb	r2, [r3, #0]
 8004e20:	0013      	movs	r3, r2
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	189b      	adds	r3, r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	001c      	movs	r4, r3
 8004e2a:	f7fe f8ff 	bl	800302c <getDisplayWidth>
 8004e2e:	0003      	movs	r3, r0
 8004e30:	429c      	cmp	r4, r3
 8004e32:	da03      	bge.n	8004e3c <drawTitle+0x68>
		setTextSize(2);
 8004e34:	2002      	movs	r0, #2
 8004e36:	f7fe f865 	bl	8002f04 <setTextSize>
 8004e3a:	e01b      	b.n	8004e74 <drawTitle+0xa0>
	}
	else if (6*strSize < getDisplayWidth()) {		// about string size = 21 for getDisplayWidth() = 128
 8004e3c:	230d      	movs	r3, #13
 8004e3e:	18fb      	adds	r3, r7, r3
 8004e40:	781a      	ldrb	r2, [r3, #0]
 8004e42:	0013      	movs	r3, r2
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	189b      	adds	r3, r3, r2
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	001c      	movs	r4, r3
 8004e4c:	f7fe f8ee 	bl	800302c <getDisplayWidth>
 8004e50:	0003      	movs	r3, r0
 8004e52:	429c      	cmp	r4, r3
 8004e54:	da03      	bge.n	8004e5e <drawTitle+0x8a>
		setTextSize(1);
 8004e56:	2001      	movs	r0, #1
 8004e58:	f7fe f854 	bl	8002f04 <setTextSize>
 8004e5c:	e00a      	b.n	8004e74 <drawTitle+0xa0>
	}
	else {
		setTextSize(1);
 8004e5e:	2001      	movs	r0, #1
 8004e60:	f7fe f850 	bl	8002f04 <setTextSize>
		sprintf(str, "it's too long");		// should not need to worry about null access, since this string is shorter than case above
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	4b0e      	ldr	r3, [pc, #56]	; (8004ea0 <drawTitle+0xcc>)
 8004e68:	0010      	movs	r0, r2
 8004e6a:	0019      	movs	r1, r3
 8004e6c:	230e      	movs	r3, #14
 8004e6e:	001a      	movs	r2, r3
 8004e70:	f004 fb60 	bl	8009534 <memcpy>
	}

	setTextColor(ST77XX_BLACK);
 8004e74:	2000      	movs	r0, #0
 8004e76:	f7fe f855 	bl	8002f24 <setTextColor>
	drawCenteredText(getDisplayWidth()/2, titleY, str, hspi);
 8004e7a:	f7fe f8d7 	bl	800302c <getDisplayWidth>
 8004e7e:	0003      	movs	r3, r0
 8004e80:	085b      	lsrs	r3, r3, #1
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	b2d8      	uxtb	r0, r3
 8004e86:	230e      	movs	r3, #14
 8004e88:	18fb      	adds	r3, r7, r3
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	b2d9      	uxtb	r1, r3
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	f7fd ffb1 	bl	8002df8 <drawCenteredText>
}
 8004e96:	46c0      	nop			; (mov r8, r8)
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	b005      	add	sp, #20
 8004e9c:	bd90      	pop	{r4, r7, pc}
 8004e9e:	46c0      	nop			; (mov r8, r8)
 8004ea0:	0800a008 	.word	0x0800a008

08004ea4 <initFace>:
	drawTextAt(x, y, str, hspi);
}
// ---- end of drawing functions ----

// initializes variables. should be called at the start of program
void initFace() {
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
	faceOnDisplay = faceClock;
 8004ea8:	4b14      	ldr	r3, [pc, #80]	; (8004efc <initFace+0x58>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	701a      	strb	r2, [r3, #0]
	updateFace.clock = 1;
 8004eae:	4b14      	ldr	r3, [pc, #80]	; (8004f00 <initFace+0x5c>)
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	701a      	strb	r2, [r3, #0]

	// initializing pointers
	clockVars.dateToSet = (struct dates *)calloc(1, sizeof(struct dates *));
 8004eb4:	2104      	movs	r1, #4
 8004eb6:	2001      	movs	r0, #1
 8004eb8:	f004 fb08 	bl	80094cc <calloc>
 8004ebc:	0003      	movs	r3, r0
 8004ebe:	001a      	movs	r2, r3
 8004ec0:	4b10      	ldr	r3, [pc, #64]	; (8004f04 <initFace+0x60>)
 8004ec2:	605a      	str	r2, [r3, #4]
	clockVars.timeToSet = (struct times *)calloc(1, sizeof(struct times *));
 8004ec4:	2104      	movs	r1, #4
 8004ec6:	2001      	movs	r0, #1
 8004ec8:	f004 fb00 	bl	80094cc <calloc>
 8004ecc:	0003      	movs	r3, r0
 8004ece:	001a      	movs	r2, r3
 8004ed0:	4b0c      	ldr	r3, [pc, #48]	; (8004f04 <initFace+0x60>)
 8004ed2:	609a      	str	r2, [r3, #8]
	timerVars.timeToSet = (struct times *)calloc(1, sizeof(struct times *));
 8004ed4:	2104      	movs	r1, #4
 8004ed6:	2001      	movs	r0, #1
 8004ed8:	f004 faf8 	bl	80094cc <calloc>
 8004edc:	0003      	movs	r3, r0
 8004ede:	001a      	movs	r2, r3
 8004ee0:	4b09      	ldr	r3, [pc, #36]	; (8004f08 <initFace+0x64>)
 8004ee2:	605a      	str	r2, [r3, #4]
	alarmVars.alarmToSet = (struct alarmTimes *)calloc(1, sizeof(struct alarmTimes *));
 8004ee4:	2104      	movs	r1, #4
 8004ee6:	2001      	movs	r0, #1
 8004ee8:	f004 faf0 	bl	80094cc <calloc>
 8004eec:	0003      	movs	r3, r0
 8004eee:	001a      	movs	r2, r3
 8004ef0:	4b06      	ldr	r3, [pc, #24]	; (8004f0c <initFace+0x68>)
 8004ef2:	605a      	str	r2, [r3, #4]
}
 8004ef4:	46c0      	nop			; (mov r8, r8)
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	46c0      	nop			; (mov r8, r8)
 8004efc:	200000fc 	.word	0x200000fc
 8004f00:	2000010c 	.word	0x2000010c
 8004f04:	200000e0 	.word	0x200000e0
 8004f08:	200000ec 	.word	0x200000ec
 8004f0c:	200000f4 	.word	0x200000f4

08004f10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004f10:	480d      	ldr	r0, [pc, #52]	; (8004f48 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004f12:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8004f14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004f16:	e003      	b.n	8004f20 <LoopCopyDataInit>

08004f18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004f18:	4b0c      	ldr	r3, [pc, #48]	; (8004f4c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8004f1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004f1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004f1e:	3104      	adds	r1, #4

08004f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8004f20:	480b      	ldr	r0, [pc, #44]	; (8004f50 <LoopForever+0xa>)
  ldr  r3, =_edata
 8004f22:	4b0c      	ldr	r3, [pc, #48]	; (8004f54 <LoopForever+0xe>)
  adds  r2, r0, r1
 8004f24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004f26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004f28:	d3f6      	bcc.n	8004f18 <CopyDataInit>
  ldr  r2, =_sbss
 8004f2a:	4a0b      	ldr	r2, [pc, #44]	; (8004f58 <LoopForever+0x12>)
  b  LoopFillZerobss
 8004f2c:	e002      	b.n	8004f34 <LoopFillZerobss>

08004f2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8004f2e:	2300      	movs	r3, #0
  str  r3, [r2]
 8004f30:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f32:	3204      	adds	r2, #4

08004f34 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8004f34:	4b09      	ldr	r3, [pc, #36]	; (8004f5c <LoopForever+0x16>)
  cmp  r2, r3
 8004f36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004f38:	d3f9      	bcc.n	8004f2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004f3a:	f7ff fda5 	bl	8004a88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f3e:	f004 fad5 	bl	80094ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f42:	f7fe fd9b 	bl	8003a7c <main>

08004f46 <LoopForever>:

LoopForever:
    b LoopForever
 8004f46:	e7fe      	b.n	8004f46 <LoopForever>
   ldr   r0, =_estack
 8004f48:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8004f4c:	0800a6c8 	.word	0x0800a6c8
  ldr  r0, =_sdata
 8004f50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004f54:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8004f58:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8004f5c:	20000670 	.word	0x20000670

08004f60 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004f60:	e7fe      	b.n	8004f60 <DMA1_Channel1_IRQHandler>
	...

08004f64 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004f6a:	1dfb      	adds	r3, r7, #7
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004f70:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <HAL_Init+0x3c>)
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	4b0a      	ldr	r3, [pc, #40]	; (8004fa0 <HAL_Init+0x3c>)
 8004f76:	2140      	movs	r1, #64	; 0x40
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004f7c:	2000      	movs	r0, #0
 8004f7e:	f000 f811 	bl	8004fa4 <HAL_InitTick>
 8004f82:	1e03      	subs	r3, r0, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8004f86:	1dfb      	adds	r3, r7, #7
 8004f88:	2201      	movs	r2, #1
 8004f8a:	701a      	strb	r2, [r3, #0]
 8004f8c:	e001      	b.n	8004f92 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004f8e:	f7ff fafb 	bl	8004588 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004f92:	1dfb      	adds	r3, r7, #7
 8004f94:	781b      	ldrb	r3, [r3, #0]
}
 8004f96:	0018      	movs	r0, r3
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	b002      	add	sp, #8
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	46c0      	nop			; (mov r8, r8)
 8004fa0:	40022000 	.word	0x40022000

08004fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004fa4:	b590      	push	{r4, r7, lr}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004fac:	4b14      	ldr	r3, [pc, #80]	; (8005000 <HAL_InitTick+0x5c>)
 8004fae:	681c      	ldr	r4, [r3, #0]
 8004fb0:	4b14      	ldr	r3, [pc, #80]	; (8005004 <HAL_InitTick+0x60>)
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	0019      	movs	r1, r3
 8004fb6:	23fa      	movs	r3, #250	; 0xfa
 8004fb8:	0098      	lsls	r0, r3, #2
 8004fba:	f7fb f8ad 	bl	8000118 <__udivsi3>
 8004fbe:	0003      	movs	r3, r0
 8004fc0:	0019      	movs	r1, r3
 8004fc2:	0020      	movs	r0, r4
 8004fc4:	f7fb f8a8 	bl	8000118 <__udivsi3>
 8004fc8:	0003      	movs	r3, r0
 8004fca:	0018      	movs	r0, r3
 8004fcc:	f000 fc2f 	bl	800582e <HAL_SYSTICK_Config>
 8004fd0:	1e03      	subs	r3, r0, #0
 8004fd2:	d001      	beq.n	8004fd8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e00f      	b.n	8004ff8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b03      	cmp	r3, #3
 8004fdc:	d80b      	bhi.n	8004ff6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004fde:	6879      	ldr	r1, [r7, #4]
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	425b      	negs	r3, r3
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	0018      	movs	r0, r3
 8004fe8:	f000 fbfc 	bl	80057e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004fec:	4b06      	ldr	r3, [pc, #24]	; (8005008 <HAL_InitTick+0x64>)
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	e000      	b.n	8004ff8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
}
 8004ff8:	0018      	movs	r0, r3
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	b003      	add	sp, #12
 8004ffe:	bd90      	pop	{r4, r7, pc}
 8005000:	20000014 	.word	0x20000014
 8005004:	2000001c 	.word	0x2000001c
 8005008:	20000018 	.word	0x20000018

0800500c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005010:	4b05      	ldr	r3, [pc, #20]	; (8005028 <HAL_IncTick+0x1c>)
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	001a      	movs	r2, r3
 8005016:	4b05      	ldr	r3, [pc, #20]	; (800502c <HAL_IncTick+0x20>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	18d2      	adds	r2, r2, r3
 800501c:	4b03      	ldr	r3, [pc, #12]	; (800502c <HAL_IncTick+0x20>)
 800501e:	601a      	str	r2, [r3, #0]
}
 8005020:	46c0      	nop			; (mov r8, r8)
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	46c0      	nop			; (mov r8, r8)
 8005028:	2000001c 	.word	0x2000001c
 800502c:	20000668 	.word	0x20000668

08005030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	af00      	add	r7, sp, #0
  return uwTick;
 8005034:	4b02      	ldr	r3, [pc, #8]	; (8005040 <HAL_GetTick+0x10>)
 8005036:	681b      	ldr	r3, [r3, #0]
}
 8005038:	0018      	movs	r0, r3
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	46c0      	nop			; (mov r8, r8)
 8005040:	20000668 	.word	0x20000668

08005044 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800504c:	f7ff fff0 	bl	8005030 <HAL_GetTick>
 8005050:	0003      	movs	r3, r0
 8005052:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	3301      	adds	r3, #1
 800505c:	d005      	beq.n	800506a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800505e:	4b09      	ldr	r3, [pc, #36]	; (8005084 <HAL_Delay+0x40>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	001a      	movs	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	189b      	adds	r3, r3, r2
 8005068:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800506a:	46c0      	nop			; (mov r8, r8)
 800506c:	f7ff ffe0 	bl	8005030 <HAL_GetTick>
 8005070:	0002      	movs	r2, r0
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	429a      	cmp	r2, r3
 800507a:	d8f7      	bhi.n	800506c <HAL_Delay+0x28>
  {
  }
}
 800507c:	46c0      	nop			; (mov r8, r8)
 800507e:	46bd      	mov	sp, r7
 8005080:	b004      	add	sp, #16
 8005082:	bd80      	pop	{r7, pc}
 8005084:	2000001c 	.word	0x2000001c

08005088 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e159      	b.n	800534e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10a      	bne.n	80050b8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2250      	movs	r2, #80	; 0x50
 80050ac:	2100      	movs	r1, #0
 80050ae:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	0018      	movs	r0, r3
 80050b4:	f7ff fa7c 	bl	80045b0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050bc:	2210      	movs	r2, #16
 80050be:	4013      	ands	r3, r2
 80050c0:	2b10      	cmp	r3, #16
 80050c2:	d005      	beq.n	80050d0 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	2204      	movs	r2, #4
 80050cc:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80050ce:	d00b      	beq.n	80050e8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d4:	2210      	movs	r2, #16
 80050d6:	431a      	orrs	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2250      	movs	r2, #80	; 0x50
 80050e0:	2100      	movs	r1, #0
 80050e2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e132      	b.n	800534e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ec:	4a9a      	ldr	r2, [pc, #616]	; (8005358 <HAL_ADC_Init+0x2d0>)
 80050ee:	4013      	ands	r3, r2
 80050f0:	2202      	movs	r2, #2
 80050f2:	431a      	orrs	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	2203      	movs	r2, #3
 8005100:	4013      	ands	r3, r2
 8005102:	2b01      	cmp	r3, #1
 8005104:	d108      	bne.n	8005118 <HAL_ADC_Init+0x90>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2201      	movs	r2, #1
 800510e:	4013      	ands	r3, r2
 8005110:	2b01      	cmp	r3, #1
 8005112:	d101      	bne.n	8005118 <HAL_ADC_Init+0x90>
 8005114:	2301      	movs	r3, #1
 8005116:	e000      	b.n	800511a <HAL_ADC_Init+0x92>
 8005118:	2300      	movs	r3, #0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d149      	bne.n	80051b2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685a      	ldr	r2, [r3, #4]
 8005122:	23c0      	movs	r3, #192	; 0xc0
 8005124:	061b      	lsls	r3, r3, #24
 8005126:	429a      	cmp	r2, r3
 8005128:	d00b      	beq.n	8005142 <HAL_ADC_Init+0xba>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	2380      	movs	r3, #128	; 0x80
 8005130:	05db      	lsls	r3, r3, #23
 8005132:	429a      	cmp	r2, r3
 8005134:	d005      	beq.n	8005142 <HAL_ADC_Init+0xba>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	2380      	movs	r3, #128	; 0x80
 800513c:	061b      	lsls	r3, r3, #24
 800513e:	429a      	cmp	r2, r3
 8005140:	d111      	bne.n	8005166 <HAL_ADC_Init+0xde>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	691a      	ldr	r2, [r3, #16]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	0092      	lsls	r2, r2, #2
 800514e:	0892      	lsrs	r2, r2, #2
 8005150:	611a      	str	r2, [r3, #16]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6919      	ldr	r1, [r3, #16]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	611a      	str	r2, [r3, #16]
 8005164:	e014      	b.n	8005190 <HAL_ADC_Init+0x108>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	691a      	ldr	r2, [r3, #16]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	0092      	lsls	r2, r2, #2
 8005172:	0892      	lsrs	r2, r2, #2
 8005174:	611a      	str	r2, [r3, #16]
 8005176:	4b79      	ldr	r3, [pc, #484]	; (800535c <HAL_ADC_Init+0x2d4>)
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	4b78      	ldr	r3, [pc, #480]	; (800535c <HAL_ADC_Init+0x2d4>)
 800517c:	4978      	ldr	r1, [pc, #480]	; (8005360 <HAL_ADC_Init+0x2d8>)
 800517e:	400a      	ands	r2, r1
 8005180:	601a      	str	r2, [r3, #0]
 8005182:	4b76      	ldr	r3, [pc, #472]	; (800535c <HAL_ADC_Init+0x2d4>)
 8005184:	6819      	ldr	r1, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	4b74      	ldr	r3, [pc, #464]	; (800535c <HAL_ADC_Init+0x2d4>)
 800518c:	430a      	orrs	r2, r1
 800518e:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68da      	ldr	r2, [r3, #12]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2118      	movs	r1, #24
 800519c:	438a      	bics	r2, r1
 800519e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68d9      	ldr	r1, [r3, #12]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	689a      	ldr	r2, [r3, #8]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80051b2:	4b6a      	ldr	r3, [pc, #424]	; (800535c <HAL_ADC_Init+0x2d4>)
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	4b69      	ldr	r3, [pc, #420]	; (800535c <HAL_ADC_Init+0x2d4>)
 80051b8:	496a      	ldr	r1, [pc, #424]	; (8005364 <HAL_ADC_Init+0x2dc>)
 80051ba:	400a      	ands	r2, r1
 80051bc:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80051be:	4b67      	ldr	r3, [pc, #412]	; (800535c <HAL_ADC_Init+0x2d4>)
 80051c0:	6819      	ldr	r1, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c6:	065a      	lsls	r2, r3, #25
 80051c8:	4b64      	ldr	r3, [pc, #400]	; (800535c <HAL_ADC_Init+0x2d4>)
 80051ca:	430a      	orrs	r2, r1
 80051cc:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	2380      	movs	r3, #128	; 0x80
 80051d6:	055b      	lsls	r3, r3, #21
 80051d8:	4013      	ands	r3, r2
 80051da:	d108      	bne.n	80051ee <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689a      	ldr	r2, [r3, #8]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2180      	movs	r1, #128	; 0x80
 80051e8:	0549      	lsls	r1, r1, #21
 80051ea:	430a      	orrs	r2, r1
 80051ec:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68da      	ldr	r2, [r3, #12]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	495b      	ldr	r1, [pc, #364]	; (8005368 <HAL_ADC_Init+0x2e0>)
 80051fa:	400a      	ands	r2, r1
 80051fc:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68d9      	ldr	r1, [r3, #12]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	2b02      	cmp	r3, #2
 800520e:	d101      	bne.n	8005214 <HAL_ADC_Init+0x18c>
 8005210:	2304      	movs	r3, #4
 8005212:	e000      	b.n	8005216 <HAL_ADC_Init+0x18e>
 8005214:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005216:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2020      	movs	r0, #32
 800521c:	5c1b      	ldrb	r3, [r3, r0]
 800521e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8005220:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	202c      	movs	r0, #44	; 0x2c
 8005226:	5c1b      	ldrb	r3, [r3, r0]
 8005228:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800522a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005230:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8005238:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8005240:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800524e:	23c2      	movs	r3, #194	; 0xc2
 8005250:	33ff      	adds	r3, #255	; 0xff
 8005252:	429a      	cmp	r2, r3
 8005254:	d00b      	beq.n	800526e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68d9      	ldr	r1, [r3, #12]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8005264:	431a      	orrs	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2221      	movs	r2, #33	; 0x21
 8005272:	5c9b      	ldrb	r3, [r3, r2]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d11a      	bne.n	80052ae <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2220      	movs	r2, #32
 800527c:	5c9b      	ldrb	r3, [r3, r2]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d109      	bne.n	8005296 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68da      	ldr	r2, [r3, #12]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2180      	movs	r1, #128	; 0x80
 800528e:	0249      	lsls	r1, r1, #9
 8005290:	430a      	orrs	r2, r1
 8005292:	60da      	str	r2, [r3, #12]
 8005294:	e00b      	b.n	80052ae <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800529a:	2220      	movs	r2, #32
 800529c:	431a      	orrs	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a6:	2201      	movs	r2, #1
 80052a8:	431a      	orrs	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d11f      	bne.n	80052f6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	691a      	ldr	r2, [r3, #16]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	492a      	ldr	r1, [pc, #168]	; (800536c <HAL_ADC_Init+0x2e4>)
 80052c2:	400a      	ands	r2, r1
 80052c4:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	6919      	ldr	r1, [r3, #16]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80052d4:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80052da:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691a      	ldr	r2, [r3, #16]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2101      	movs	r1, #1
 80052f0:	430a      	orrs	r2, r1
 80052f2:	611a      	str	r2, [r3, #16]
 80052f4:	e00e      	b.n	8005314 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	2201      	movs	r2, #1
 80052fe:	4013      	ands	r3, r2
 8005300:	2b01      	cmp	r3, #1
 8005302:	d107      	bne.n	8005314 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	691a      	ldr	r2, [r3, #16]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2101      	movs	r1, #1
 8005310:	438a      	bics	r2, r1
 8005312:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	695a      	ldr	r2, [r3, #20]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2107      	movs	r1, #7
 8005320:	438a      	bics	r2, r1
 8005322:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6959      	ldr	r1, [r3, #20]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005340:	2203      	movs	r2, #3
 8005342:	4393      	bics	r3, r2
 8005344:	2201      	movs	r2, #1
 8005346:	431a      	orrs	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	0018      	movs	r0, r3
 8005350:	46bd      	mov	sp, r7
 8005352:	b002      	add	sp, #8
 8005354:	bd80      	pop	{r7, pc}
 8005356:	46c0      	nop			; (mov r8, r8)
 8005358:	fffffefd 	.word	0xfffffefd
 800535c:	40012708 	.word	0x40012708
 8005360:	ffc3ffff 	.word	0xffc3ffff
 8005364:	fdffffff 	.word	0xfdffffff
 8005368:	fffe0219 	.word	0xfffe0219
 800536c:	fffffc03 	.word	0xfffffc03

08005370 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2204      	movs	r2, #4
 8005380:	4013      	ands	r3, r2
 8005382:	2b04      	cmp	r3, #4
 8005384:	d106      	bne.n	8005394 <HAL_ADC_IRQHandler+0x24>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	2204      	movs	r2, #4
 800538e:	4013      	ands	r3, r2
 8005390:	2b04      	cmp	r3, #4
 8005392:	d00d      	beq.n	80053b0 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2208      	movs	r2, #8
 800539c:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800539e:	2b08      	cmp	r3, #8
 80053a0:	d154      	bne.n	800544c <HAL_ADC_IRQHandler+0xdc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	2208      	movs	r2, #8
 80053aa:	4013      	ands	r3, r2
 80053ac:	2b08      	cmp	r3, #8
 80053ae:	d14d      	bne.n	800544c <HAL_ADC_IRQHandler+0xdc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b4:	2210      	movs	r2, #16
 80053b6:	4013      	ands	r3, r2
 80053b8:	d106      	bne.n	80053c8 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053be:	2280      	movs	r2, #128	; 0x80
 80053c0:	0092      	lsls	r2, r2, #2
 80053c2:	431a      	orrs	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68da      	ldr	r2, [r3, #12]
 80053ce:	23c0      	movs	r3, #192	; 0xc0
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	4013      	ands	r3, r2
 80053d4:	d12e      	bne.n	8005434 <HAL_ADC_IRQHandler+0xc4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2220      	movs	r2, #32
 80053da:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d129      	bne.n	8005434 <HAL_ADC_IRQHandler+0xc4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2208      	movs	r2, #8
 80053e8:	4013      	ands	r3, r2
 80053ea:	2b08      	cmp	r3, #8
 80053ec:	d122      	bne.n	8005434 <HAL_ADC_IRQHandler+0xc4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	2204      	movs	r2, #4
 80053f6:	4013      	ands	r3, r2
 80053f8:	d110      	bne.n	800541c <HAL_ADC_IRQHandler+0xac>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	210c      	movs	r1, #12
 8005406:	438a      	bics	r2, r1
 8005408:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540e:	4a35      	ldr	r2, [pc, #212]	; (80054e4 <HAL_ADC_IRQHandler+0x174>)
 8005410:	4013      	ands	r3, r2
 8005412:	2201      	movs	r2, #1
 8005414:	431a      	orrs	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	655a      	str	r2, [r3, #84]	; 0x54
 800541a:	e00b      	b.n	8005434 <HAL_ADC_IRQHandler+0xc4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005420:	2220      	movs	r2, #32
 8005422:	431a      	orrs	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800542c:	2201      	movs	r2, #1
 800542e:	431a      	orrs	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	0018      	movs	r0, r3
 8005438:	f000 f856 	bl	80054e8 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d003      	beq.n	800544c <HAL_ADC_IRQHandler+0xdc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	220c      	movs	r2, #12
 800544a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2280      	movs	r2, #128	; 0x80
 8005454:	4013      	ands	r3, r2
 8005456:	2b80      	cmp	r3, #128	; 0x80
 8005458:	d115      	bne.n	8005486 <HAL_ADC_IRQHandler+0x116>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	2280      	movs	r2, #128	; 0x80
 8005462:	4013      	ands	r3, r2
 8005464:	2b80      	cmp	r3, #128	; 0x80
 8005466:	d10e      	bne.n	8005486 <HAL_ADC_IRQHandler+0x116>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546c:	2280      	movs	r2, #128	; 0x80
 800546e:	0252      	lsls	r2, r2, #9
 8005470:	431a      	orrs	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	655a      	str	r2, [r3, #84]	; 0x54
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	0018      	movs	r0, r3
 800547a:	f000 f83d 	bl	80054f8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2280      	movs	r2, #128	; 0x80
 8005484:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2210      	movs	r2, #16
 800548e:	4013      	ands	r3, r2
 8005490:	2b10      	cmp	r3, #16
 8005492:	d123      	bne.n	80054dc <HAL_ADC_IRQHandler+0x16c>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	2210      	movs	r2, #16
 800549c:	4013      	ands	r3, r2
 800549e:	2b10      	cmp	r3, #16
 80054a0:	d11c      	bne.n	80054dc <HAL_ADC_IRQHandler+0x16c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d006      	beq.n	80054b8 <HAL_ADC_IRQHandler+0x148>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	2201      	movs	r2, #1
 80054b2:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d10d      	bne.n	80054d4 <HAL_ADC_IRQHandler+0x164>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054bc:	2202      	movs	r2, #2
 80054be:	431a      	orrs	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2210      	movs	r2, #16
 80054ca:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	0018      	movs	r0, r3
 80054d0:	f000 f81a 	bl	8005508 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2210      	movs	r2, #16
 80054da:	601a      	str	r2, [r3, #0]
  }
  
}
 80054dc:	46c0      	nop			; (mov r8, r8)
 80054de:	46bd      	mov	sp, r7
 80054e0:	b002      	add	sp, #8
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	fffffefe 	.word	0xfffffefe

080054e8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80054f0:	46c0      	nop			; (mov r8, r8)
 80054f2:	46bd      	mov	sp, r7
 80054f4:	b002      	add	sp, #8
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005500:	46c0      	nop			; (mov r8, r8)
 8005502:	46bd      	mov	sp, r7
 8005504:	b002      	add	sp, #8
 8005506:	bd80      	pop	{r7, pc}

08005508 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005510:	46c0      	nop			; (mov r8, r8)
 8005512:	46bd      	mov	sp, r7
 8005514:	b002      	add	sp, #8
 8005516:	bd80      	pop	{r7, pc}

08005518 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2250      	movs	r2, #80	; 0x50
 8005526:	5c9b      	ldrb	r3, [r3, r2]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d101      	bne.n	8005530 <HAL_ADC_ConfigChannel+0x18>
 800552c:	2302      	movs	r3, #2
 800552e:	e085      	b.n	800563c <HAL_ADC_ConfigChannel+0x124>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2250      	movs	r2, #80	; 0x50
 8005534:	2101      	movs	r1, #1
 8005536:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	2204      	movs	r2, #4
 8005540:	4013      	ands	r3, r2
 8005542:	d00b      	beq.n	800555c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005548:	2220      	movs	r2, #32
 800554a:	431a      	orrs	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2250      	movs	r2, #80	; 0x50
 8005554:	2100      	movs	r1, #0
 8005556:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e06f      	b.n	800563c <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	4a38      	ldr	r2, [pc, #224]	; (8005644 <HAL_ADC_ConfigChannel+0x12c>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d035      	beq.n	80055d2 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	035b      	lsls	r3, r3, #13
 8005572:	0b5a      	lsrs	r2, r3, #13
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	2380      	movs	r3, #128	; 0x80
 8005582:	02db      	lsls	r3, r3, #11
 8005584:	4013      	ands	r3, r2
 8005586:	d009      	beq.n	800559c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8005588:	4b2f      	ldr	r3, [pc, #188]	; (8005648 <HAL_ADC_ConfigChannel+0x130>)
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	4b2e      	ldr	r3, [pc, #184]	; (8005648 <HAL_ADC_ConfigChannel+0x130>)
 800558e:	2180      	movs	r1, #128	; 0x80
 8005590:	0409      	lsls	r1, r1, #16
 8005592:	430a      	orrs	r2, r1
 8005594:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8005596:	200a      	movs	r0, #10
 8005598:	f000 f85e 	bl	8005658 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	2380      	movs	r3, #128	; 0x80
 80055a2:	029b      	lsls	r3, r3, #10
 80055a4:	4013      	ands	r3, r2
 80055a6:	d006      	beq.n	80055b6 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80055a8:	4b27      	ldr	r3, [pc, #156]	; (8005648 <HAL_ADC_ConfigChannel+0x130>)
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	4b26      	ldr	r3, [pc, #152]	; (8005648 <HAL_ADC_ConfigChannel+0x130>)
 80055ae:	2180      	movs	r1, #128	; 0x80
 80055b0:	03c9      	lsls	r1, r1, #15
 80055b2:	430a      	orrs	r2, r1
 80055b4:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	2380      	movs	r3, #128	; 0x80
 80055bc:	025b      	lsls	r3, r3, #9
 80055be:	4013      	ands	r3, r2
 80055c0:	d037      	beq.n	8005632 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 80055c2:	4b21      	ldr	r3, [pc, #132]	; (8005648 <HAL_ADC_ConfigChannel+0x130>)
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	4b20      	ldr	r3, [pc, #128]	; (8005648 <HAL_ADC_ConfigChannel+0x130>)
 80055c8:	2180      	movs	r1, #128	; 0x80
 80055ca:	0449      	lsls	r1, r1, #17
 80055cc:	430a      	orrs	r2, r1
 80055ce:	601a      	str	r2, [r3, #0]
 80055d0:	e02f      	b.n	8005632 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	035b      	lsls	r3, r3, #13
 80055de:	0b5b      	lsrs	r3, r3, #13
 80055e0:	43d9      	mvns	r1, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	400a      	ands	r2, r1
 80055e8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	2380      	movs	r3, #128	; 0x80
 80055f0:	02db      	lsls	r3, r3, #11
 80055f2:	4013      	ands	r3, r2
 80055f4:	d005      	beq.n	8005602 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80055f6:	4b14      	ldr	r3, [pc, #80]	; (8005648 <HAL_ADC_ConfigChannel+0x130>)
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	4b13      	ldr	r3, [pc, #76]	; (8005648 <HAL_ADC_ConfigChannel+0x130>)
 80055fc:	4913      	ldr	r1, [pc, #76]	; (800564c <HAL_ADC_ConfigChannel+0x134>)
 80055fe:	400a      	ands	r2, r1
 8005600:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	2380      	movs	r3, #128	; 0x80
 8005608:	029b      	lsls	r3, r3, #10
 800560a:	4013      	ands	r3, r2
 800560c:	d005      	beq.n	800561a <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800560e:	4b0e      	ldr	r3, [pc, #56]	; (8005648 <HAL_ADC_ConfigChannel+0x130>)
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	4b0d      	ldr	r3, [pc, #52]	; (8005648 <HAL_ADC_ConfigChannel+0x130>)
 8005614:	490e      	ldr	r1, [pc, #56]	; (8005650 <HAL_ADC_ConfigChannel+0x138>)
 8005616:	400a      	ands	r2, r1
 8005618:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	2380      	movs	r3, #128	; 0x80
 8005620:	025b      	lsls	r3, r3, #9
 8005622:	4013      	ands	r3, r2
 8005624:	d005      	beq.n	8005632 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8005626:	4b08      	ldr	r3, [pc, #32]	; (8005648 <HAL_ADC_ConfigChannel+0x130>)
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	4b07      	ldr	r3, [pc, #28]	; (8005648 <HAL_ADC_ConfigChannel+0x130>)
 800562c:	4909      	ldr	r1, [pc, #36]	; (8005654 <HAL_ADC_ConfigChannel+0x13c>)
 800562e:	400a      	ands	r2, r1
 8005630:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2250      	movs	r2, #80	; 0x50
 8005636:	2100      	movs	r1, #0
 8005638:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	0018      	movs	r0, r3
 800563e:	46bd      	mov	sp, r7
 8005640:	b002      	add	sp, #8
 8005642:	bd80      	pop	{r7, pc}
 8005644:	00001001 	.word	0x00001001
 8005648:	40012708 	.word	0x40012708
 800564c:	ff7fffff 	.word	0xff7fffff
 8005650:	ffbfffff 	.word	0xffbfffff
 8005654:	feffffff 	.word	0xfeffffff

08005658 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8005660:	4b0a      	ldr	r3, [pc, #40]	; (800568c <ADC_DelayMicroSecond+0x34>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	490a      	ldr	r1, [pc, #40]	; (8005690 <ADC_DelayMicroSecond+0x38>)
 8005666:	0018      	movs	r0, r3
 8005668:	f7fa fd56 	bl	8000118 <__udivsi3>
 800566c:	0003      	movs	r3, r0
 800566e:	001a      	movs	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4353      	muls	r3, r2
 8005674:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8005676:	e002      	b.n	800567e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	3b01      	subs	r3, #1
 800567c:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1f9      	bne.n	8005678 <ADC_DelayMicroSecond+0x20>
  } 
}
 8005684:	46c0      	nop			; (mov r8, r8)
 8005686:	46bd      	mov	sp, r7
 8005688:	b004      	add	sp, #16
 800568a:	bd80      	pop	{r7, pc}
 800568c:	20000014 	.word	0x20000014
 8005690:	000f4240 	.word	0x000f4240

08005694 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	0002      	movs	r2, r0
 800569c:	1dfb      	adds	r3, r7, #7
 800569e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80056a0:	1dfb      	adds	r3, r7, #7
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	001a      	movs	r2, r3
 80056a6:	231f      	movs	r3, #31
 80056a8:	401a      	ands	r2, r3
 80056aa:	4b04      	ldr	r3, [pc, #16]	; (80056bc <NVIC_EnableIRQ+0x28>)
 80056ac:	2101      	movs	r1, #1
 80056ae:	4091      	lsls	r1, r2
 80056b0:	000a      	movs	r2, r1
 80056b2:	601a      	str	r2, [r3, #0]
}
 80056b4:	46c0      	nop			; (mov r8, r8)
 80056b6:	46bd      	mov	sp, r7
 80056b8:	b002      	add	sp, #8
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	e000e100 	.word	0xe000e100

080056c0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056c0:	b590      	push	{r4, r7, lr}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	0002      	movs	r2, r0
 80056c8:	6039      	str	r1, [r7, #0]
 80056ca:	1dfb      	adds	r3, r7, #7
 80056cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80056ce:	1dfb      	adds	r3, r7, #7
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	2b7f      	cmp	r3, #127	; 0x7f
 80056d4:	d932      	bls.n	800573c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80056d6:	4a2f      	ldr	r2, [pc, #188]	; (8005794 <NVIC_SetPriority+0xd4>)
 80056d8:	1dfb      	adds	r3, r7, #7
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	0019      	movs	r1, r3
 80056de:	230f      	movs	r3, #15
 80056e0:	400b      	ands	r3, r1
 80056e2:	3b08      	subs	r3, #8
 80056e4:	089b      	lsrs	r3, r3, #2
 80056e6:	3306      	adds	r3, #6
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	18d3      	adds	r3, r2, r3
 80056ec:	3304      	adds	r3, #4
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	1dfa      	adds	r2, r7, #7
 80056f2:	7812      	ldrb	r2, [r2, #0]
 80056f4:	0011      	movs	r1, r2
 80056f6:	2203      	movs	r2, #3
 80056f8:	400a      	ands	r2, r1
 80056fa:	00d2      	lsls	r2, r2, #3
 80056fc:	21ff      	movs	r1, #255	; 0xff
 80056fe:	4091      	lsls	r1, r2
 8005700:	000a      	movs	r2, r1
 8005702:	43d2      	mvns	r2, r2
 8005704:	401a      	ands	r2, r3
 8005706:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	019b      	lsls	r3, r3, #6
 800570c:	22ff      	movs	r2, #255	; 0xff
 800570e:	401a      	ands	r2, r3
 8005710:	1dfb      	adds	r3, r7, #7
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	0018      	movs	r0, r3
 8005716:	2303      	movs	r3, #3
 8005718:	4003      	ands	r3, r0
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800571e:	481d      	ldr	r0, [pc, #116]	; (8005794 <NVIC_SetPriority+0xd4>)
 8005720:	1dfb      	adds	r3, r7, #7
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	001c      	movs	r4, r3
 8005726:	230f      	movs	r3, #15
 8005728:	4023      	ands	r3, r4
 800572a:	3b08      	subs	r3, #8
 800572c:	089b      	lsrs	r3, r3, #2
 800572e:	430a      	orrs	r2, r1
 8005730:	3306      	adds	r3, #6
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	18c3      	adds	r3, r0, r3
 8005736:	3304      	adds	r3, #4
 8005738:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800573a:	e027      	b.n	800578c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800573c:	4a16      	ldr	r2, [pc, #88]	; (8005798 <NVIC_SetPriority+0xd8>)
 800573e:	1dfb      	adds	r3, r7, #7
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	b25b      	sxtb	r3, r3
 8005744:	089b      	lsrs	r3, r3, #2
 8005746:	33c0      	adds	r3, #192	; 0xc0
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	589b      	ldr	r3, [r3, r2]
 800574c:	1dfa      	adds	r2, r7, #7
 800574e:	7812      	ldrb	r2, [r2, #0]
 8005750:	0011      	movs	r1, r2
 8005752:	2203      	movs	r2, #3
 8005754:	400a      	ands	r2, r1
 8005756:	00d2      	lsls	r2, r2, #3
 8005758:	21ff      	movs	r1, #255	; 0xff
 800575a:	4091      	lsls	r1, r2
 800575c:	000a      	movs	r2, r1
 800575e:	43d2      	mvns	r2, r2
 8005760:	401a      	ands	r2, r3
 8005762:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	019b      	lsls	r3, r3, #6
 8005768:	22ff      	movs	r2, #255	; 0xff
 800576a:	401a      	ands	r2, r3
 800576c:	1dfb      	adds	r3, r7, #7
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	0018      	movs	r0, r3
 8005772:	2303      	movs	r3, #3
 8005774:	4003      	ands	r3, r0
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800577a:	4807      	ldr	r0, [pc, #28]	; (8005798 <NVIC_SetPriority+0xd8>)
 800577c:	1dfb      	adds	r3, r7, #7
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	b25b      	sxtb	r3, r3
 8005782:	089b      	lsrs	r3, r3, #2
 8005784:	430a      	orrs	r2, r1
 8005786:	33c0      	adds	r3, #192	; 0xc0
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	501a      	str	r2, [r3, r0]
}
 800578c:	46c0      	nop			; (mov r8, r8)
 800578e:	46bd      	mov	sp, r7
 8005790:	b003      	add	sp, #12
 8005792:	bd90      	pop	{r4, r7, pc}
 8005794:	e000ed00 	.word	0xe000ed00
 8005798:	e000e100 	.word	0xe000e100

0800579c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	4a0c      	ldr	r2, [pc, #48]	; (80057dc <SysTick_Config+0x40>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d901      	bls.n	80057b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057ae:	2301      	movs	r3, #1
 80057b0:	e010      	b.n	80057d4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057b2:	4b0b      	ldr	r3, [pc, #44]	; (80057e0 <SysTick_Config+0x44>)
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	3a01      	subs	r2, #1
 80057b8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057ba:	2301      	movs	r3, #1
 80057bc:	425b      	negs	r3, r3
 80057be:	2103      	movs	r1, #3
 80057c0:	0018      	movs	r0, r3
 80057c2:	f7ff ff7d 	bl	80056c0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057c6:	4b06      	ldr	r3, [pc, #24]	; (80057e0 <SysTick_Config+0x44>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057cc:	4b04      	ldr	r3, [pc, #16]	; (80057e0 <SysTick_Config+0x44>)
 80057ce:	2207      	movs	r2, #7
 80057d0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	0018      	movs	r0, r3
 80057d6:	46bd      	mov	sp, r7
 80057d8:	b002      	add	sp, #8
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	00ffffff 	.word	0x00ffffff
 80057e0:	e000e010 	.word	0xe000e010

080057e4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60b9      	str	r1, [r7, #8]
 80057ec:	607a      	str	r2, [r7, #4]
 80057ee:	210f      	movs	r1, #15
 80057f0:	187b      	adds	r3, r7, r1
 80057f2:	1c02      	adds	r2, r0, #0
 80057f4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	187b      	adds	r3, r7, r1
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	b25b      	sxtb	r3, r3
 80057fe:	0011      	movs	r1, r2
 8005800:	0018      	movs	r0, r3
 8005802:	f7ff ff5d 	bl	80056c0 <NVIC_SetPriority>
}
 8005806:	46c0      	nop			; (mov r8, r8)
 8005808:	46bd      	mov	sp, r7
 800580a:	b004      	add	sp, #16
 800580c:	bd80      	pop	{r7, pc}

0800580e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b082      	sub	sp, #8
 8005812:	af00      	add	r7, sp, #0
 8005814:	0002      	movs	r2, r0
 8005816:	1dfb      	adds	r3, r7, #7
 8005818:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800581a:	1dfb      	adds	r3, r7, #7
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	b25b      	sxtb	r3, r3
 8005820:	0018      	movs	r0, r3
 8005822:	f7ff ff37 	bl	8005694 <NVIC_EnableIRQ>
}
 8005826:	46c0      	nop			; (mov r8, r8)
 8005828:	46bd      	mov	sp, r7
 800582a:	b002      	add	sp, #8
 800582c:	bd80      	pop	{r7, pc}

0800582e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800582e:	b580      	push	{r7, lr}
 8005830:	b082      	sub	sp, #8
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	0018      	movs	r0, r3
 800583a:	f7ff ffaf 	bl	800579c <SysTick_Config>
 800583e:	0003      	movs	r3, r0
}
 8005840:	0018      	movs	r0, r3
 8005842:	46bd      	mov	sp, r7
 8005844:	b002      	add	sp, #8
 8005846:	bd80      	pop	{r7, pc}

08005848 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e061      	b.n	800591e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a32      	ldr	r2, [pc, #200]	; (8005928 <HAL_DMA_Init+0xe0>)
 8005860:	4694      	mov	ip, r2
 8005862:	4463      	add	r3, ip
 8005864:	2114      	movs	r1, #20
 8005866:	0018      	movs	r0, r3
 8005868:	f7fa fc56 	bl	8000118 <__udivsi3>
 800586c:	0003      	movs	r3, r0
 800586e:	009a      	lsls	r2, r3, #2
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a2d      	ldr	r2, [pc, #180]	; (800592c <HAL_DMA_Init+0xe4>)
 8005878:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2225      	movs	r2, #37	; 0x25
 800587e:	2102      	movs	r1, #2
 8005880:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	4a28      	ldr	r2, [pc, #160]	; (8005930 <HAL_DMA_Init+0xe8>)
 800588e:	4013      	ands	r3, r2
 8005890:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800589a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	4313      	orrs	r3, r2
 80058be:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689a      	ldr	r2, [r3, #8]
 80058cc:	2380      	movs	r3, #128	; 0x80
 80058ce:	01db      	lsls	r3, r3, #7
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d018      	beq.n	8005906 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80058d4:	4b17      	ldr	r3, [pc, #92]	; (8005934 <HAL_DMA_Init+0xec>)
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058dc:	211c      	movs	r1, #28
 80058de:	400b      	ands	r3, r1
 80058e0:	210f      	movs	r1, #15
 80058e2:	4099      	lsls	r1, r3
 80058e4:	000b      	movs	r3, r1
 80058e6:	43d9      	mvns	r1, r3
 80058e8:	4b12      	ldr	r3, [pc, #72]	; (8005934 <HAL_DMA_Init+0xec>)
 80058ea:	400a      	ands	r2, r1
 80058ec:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80058ee:	4b11      	ldr	r3, [pc, #68]	; (8005934 <HAL_DMA_Init+0xec>)
 80058f0:	6819      	ldr	r1, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058fa:	201c      	movs	r0, #28
 80058fc:	4003      	ands	r3, r0
 80058fe:	409a      	lsls	r2, r3
 8005900:	4b0c      	ldr	r3, [pc, #48]	; (8005934 <HAL_DMA_Init+0xec>)
 8005902:	430a      	orrs	r2, r1
 8005904:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2225      	movs	r2, #37	; 0x25
 8005910:	2101      	movs	r1, #1
 8005912:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2224      	movs	r2, #36	; 0x24
 8005918:	2100      	movs	r1, #0
 800591a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	0018      	movs	r0, r3
 8005920:	46bd      	mov	sp, r7
 8005922:	b004      	add	sp, #16
 8005924:	bd80      	pop	{r7, pc}
 8005926:	46c0      	nop			; (mov r8, r8)
 8005928:	bffdfff8 	.word	0xbffdfff8
 800592c:	40020000 	.word	0x40020000
 8005930:	ffff800f 	.word	0xffff800f
 8005934:	400200a8 	.word	0x400200a8

08005938 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
 8005944:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005946:	2317      	movs	r3, #23
 8005948:	18fb      	adds	r3, r7, r3
 800594a:	2200      	movs	r2, #0
 800594c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2224      	movs	r2, #36	; 0x24
 8005952:	5c9b      	ldrb	r3, [r3, r2]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d101      	bne.n	800595c <HAL_DMA_Start_IT+0x24>
 8005958:	2302      	movs	r3, #2
 800595a:	e04f      	b.n	80059fc <HAL_DMA_Start_IT+0xc4>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2224      	movs	r2, #36	; 0x24
 8005960:	2101      	movs	r1, #1
 8005962:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2225      	movs	r2, #37	; 0x25
 8005968:	5c9b      	ldrb	r3, [r3, r2]
 800596a:	b2db      	uxtb	r3, r3
 800596c:	2b01      	cmp	r3, #1
 800596e:	d13a      	bne.n	80059e6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2225      	movs	r2, #37	; 0x25
 8005974:	2102      	movs	r1, #2
 8005976:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2101      	movs	r1, #1
 800598a:	438a      	bics	r2, r1
 800598c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	68b9      	ldr	r1, [r7, #8]
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f000 f92b 	bl	8005bf0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d008      	beq.n	80059b4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	210e      	movs	r1, #14
 80059ae:	430a      	orrs	r2, r1
 80059b0:	601a      	str	r2, [r3, #0]
 80059b2:	e00f      	b.n	80059d4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2104      	movs	r1, #4
 80059c0:	438a      	bics	r2, r1
 80059c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	210a      	movs	r1, #10
 80059d0:	430a      	orrs	r2, r1
 80059d2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2101      	movs	r1, #1
 80059e0:	430a      	orrs	r2, r1
 80059e2:	601a      	str	r2, [r3, #0]
 80059e4:	e007      	b.n	80059f6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2224      	movs	r2, #36	; 0x24
 80059ea:	2100      	movs	r1, #0
 80059ec:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80059ee:	2317      	movs	r3, #23
 80059f0:	18fb      	adds	r3, r7, r3
 80059f2:	2202      	movs	r2, #2
 80059f4:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80059f6:	2317      	movs	r3, #23
 80059f8:	18fb      	adds	r3, r7, r3
 80059fa:	781b      	ldrb	r3, [r3, #0]
}
 80059fc:	0018      	movs	r0, r3
 80059fe:	46bd      	mov	sp, r7
 8005a00:	b006      	add	sp, #24
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a0c:	230f      	movs	r3, #15
 8005a0e:	18fb      	adds	r3, r7, r3
 8005a10:	2200      	movs	r2, #0
 8005a12:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2225      	movs	r2, #37	; 0x25
 8005a18:	5c9b      	ldrb	r3, [r3, r2]
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d007      	beq.n	8005a30 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2204      	movs	r2, #4
 8005a24:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005a26:	230f      	movs	r3, #15
 8005a28:	18fb      	adds	r3, r7, r3
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	701a      	strb	r2, [r3, #0]
 8005a2e:	e02a      	b.n	8005a86 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	210e      	movs	r1, #14
 8005a3c:	438a      	bics	r2, r1
 8005a3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2101      	movs	r1, #1
 8005a4c:	438a      	bics	r2, r1
 8005a4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a54:	221c      	movs	r2, #28
 8005a56:	401a      	ands	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5c:	2101      	movs	r1, #1
 8005a5e:	4091      	lsls	r1, r2
 8005a60:	000a      	movs	r2, r1
 8005a62:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2225      	movs	r2, #37	; 0x25
 8005a68:	2101      	movs	r1, #1
 8005a6a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2224      	movs	r2, #36	; 0x24
 8005a70:	2100      	movs	r1, #0
 8005a72:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d004      	beq.n	8005a86 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	0010      	movs	r0, r2
 8005a84:	4798      	blx	r3
    }
  }
  return status;
 8005a86:	230f      	movs	r3, #15
 8005a88:	18fb      	adds	r3, r7, r3
 8005a8a:	781b      	ldrb	r3, [r3, #0]
}
 8005a8c:	0018      	movs	r0, r3
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	b004      	add	sp, #16
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab0:	221c      	movs	r2, #28
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	2204      	movs	r2, #4
 8005ab6:	409a      	lsls	r2, r3
 8005ab8:	0013      	movs	r3, r2
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	4013      	ands	r3, r2
 8005abe:	d026      	beq.n	8005b0e <HAL_DMA_IRQHandler+0x7a>
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	2204      	movs	r2, #4
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	d022      	beq.n	8005b0e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	d107      	bne.n	8005ae4 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2104      	movs	r1, #4
 8005ae0:	438a      	bics	r2, r1
 8005ae2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae8:	221c      	movs	r2, #28
 8005aea:	401a      	ands	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af0:	2104      	movs	r1, #4
 8005af2:	4091      	lsls	r1, r2
 8005af4:	000a      	movs	r2, r1
 8005af6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d100      	bne.n	8005b02 <HAL_DMA_IRQHandler+0x6e>
 8005b00:	e071      	b.n	8005be6 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	0010      	movs	r0, r2
 8005b0a:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8005b0c:	e06b      	b.n	8005be6 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b12:	221c      	movs	r2, #28
 8005b14:	4013      	ands	r3, r2
 8005b16:	2202      	movs	r2, #2
 8005b18:	409a      	lsls	r2, r3
 8005b1a:	0013      	movs	r3, r2
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	d02d      	beq.n	8005b7e <HAL_DMA_IRQHandler+0xea>
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	2202      	movs	r2, #2
 8005b26:	4013      	ands	r3, r2
 8005b28:	d029      	beq.n	8005b7e <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2220      	movs	r2, #32
 8005b32:	4013      	ands	r3, r2
 8005b34:	d10b      	bne.n	8005b4e <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	210a      	movs	r1, #10
 8005b42:	438a      	bics	r2, r1
 8005b44:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2225      	movs	r2, #37	; 0x25
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b52:	221c      	movs	r2, #28
 8005b54:	401a      	ands	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5a:	2102      	movs	r1, #2
 8005b5c:	4091      	lsls	r1, r2
 8005b5e:	000a      	movs	r2, r1
 8005b60:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2224      	movs	r2, #36	; 0x24
 8005b66:	2100      	movs	r1, #0
 8005b68:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d039      	beq.n	8005be6 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	0010      	movs	r0, r2
 8005b7a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005b7c:	e033      	b.n	8005be6 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b82:	221c      	movs	r2, #28
 8005b84:	4013      	ands	r3, r2
 8005b86:	2208      	movs	r2, #8
 8005b88:	409a      	lsls	r2, r3
 8005b8a:	0013      	movs	r3, r2
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	4013      	ands	r3, r2
 8005b90:	d02a      	beq.n	8005be8 <HAL_DMA_IRQHandler+0x154>
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	2208      	movs	r2, #8
 8005b96:	4013      	ands	r3, r2
 8005b98:	d026      	beq.n	8005be8 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	210e      	movs	r1, #14
 8005ba6:	438a      	bics	r2, r1
 8005ba8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bae:	221c      	movs	r2, #28
 8005bb0:	401a      	ands	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	2101      	movs	r1, #1
 8005bb8:	4091      	lsls	r1, r2
 8005bba:	000a      	movs	r2, r1
 8005bbc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2225      	movs	r2, #37	; 0x25
 8005bc8:	2101      	movs	r1, #1
 8005bca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2224      	movs	r2, #36	; 0x24
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d005      	beq.n	8005be8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	0010      	movs	r0, r2
 8005be4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005be6:	46c0      	nop			; (mov r8, r8)
 8005be8:	46c0      	nop			; (mov r8, r8)
}
 8005bea:	46bd      	mov	sp, r7
 8005bec:	b004      	add	sp, #16
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
 8005bfc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c02:	221c      	movs	r2, #28
 8005c04:	401a      	ands	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0a:	2101      	movs	r1, #1
 8005c0c:	4091      	lsls	r1, r2
 8005c0e:	000a      	movs	r2, r1
 8005c10:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	2b10      	cmp	r3, #16
 8005c20:	d108      	bne.n	8005c34 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005c32:	e007      	b.n	8005c44 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	60da      	str	r2, [r3, #12]
}
 8005c44:	46c0      	nop			; (mov r8, r8)
 8005c46:	46bd      	mov	sp, r7
 8005c48:	b004      	add	sp, #16
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005c56:	2300      	movs	r3, #0
 8005c58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8005c62:	e155      	b.n	8005f10 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2101      	movs	r1, #1
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	4091      	lsls	r1, r2
 8005c6e:	000a      	movs	r2, r1
 8005c70:	4013      	ands	r3, r2
 8005c72:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d100      	bne.n	8005c7c <HAL_GPIO_Init+0x30>
 8005c7a:	e146      	b.n	8005f0a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d00b      	beq.n	8005c9c <HAL_GPIO_Init+0x50>
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d007      	beq.n	8005c9c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c90:	2b11      	cmp	r3, #17
 8005c92:	d003      	beq.n	8005c9c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	2b12      	cmp	r3, #18
 8005c9a:	d130      	bne.n	8005cfe <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	2203      	movs	r2, #3
 8005ca8:	409a      	lsls	r2, r3
 8005caa:	0013      	movs	r3, r2
 8005cac:	43da      	mvns	r2, r3
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	68da      	ldr	r2, [r3, #12]
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	409a      	lsls	r2, r3
 8005cbe:	0013      	movs	r3, r2
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	409a      	lsls	r2, r3
 8005cd8:	0013      	movs	r3, r2
 8005cda:	43da      	mvns	r2, r3
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	4013      	ands	r3, r2
 8005ce0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	091b      	lsrs	r3, r3, #4
 8005ce8:	2201      	movs	r2, #1
 8005cea:	401a      	ands	r2, r3
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	409a      	lsls	r2, r3
 8005cf0:	0013      	movs	r3, r2
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	2203      	movs	r2, #3
 8005d0a:	409a      	lsls	r2, r3
 8005d0c:	0013      	movs	r3, r2
 8005d0e:	43da      	mvns	r2, r3
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	4013      	ands	r3, r2
 8005d14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	689a      	ldr	r2, [r3, #8]
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	409a      	lsls	r2, r3
 8005d20:	0013      	movs	r3, r2
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d003      	beq.n	8005d3e <HAL_GPIO_Init+0xf2>
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	2b12      	cmp	r3, #18
 8005d3c:	d123      	bne.n	8005d86 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	08da      	lsrs	r2, r3, #3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	3208      	adds	r2, #8
 8005d46:	0092      	lsls	r2, r2, #2
 8005d48:	58d3      	ldr	r3, [r2, r3]
 8005d4a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	2207      	movs	r2, #7
 8005d50:	4013      	ands	r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	220f      	movs	r2, #15
 8005d56:	409a      	lsls	r2, r3
 8005d58:	0013      	movs	r3, r2
 8005d5a:	43da      	mvns	r2, r3
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	4013      	ands	r3, r2
 8005d60:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	691a      	ldr	r2, [r3, #16]
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2107      	movs	r1, #7
 8005d6a:	400b      	ands	r3, r1
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	409a      	lsls	r2, r3
 8005d70:	0013      	movs	r3, r2
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	08da      	lsrs	r2, r3, #3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	3208      	adds	r2, #8
 8005d80:	0092      	lsls	r2, r2, #2
 8005d82:	6939      	ldr	r1, [r7, #16]
 8005d84:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	005b      	lsls	r3, r3, #1
 8005d90:	2203      	movs	r2, #3
 8005d92:	409a      	lsls	r2, r3
 8005d94:	0013      	movs	r3, r2
 8005d96:	43da      	mvns	r2, r3
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	2203      	movs	r2, #3
 8005da4:	401a      	ands	r2, r3
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	005b      	lsls	r3, r3, #1
 8005daa:	409a      	lsls	r2, r3
 8005dac:	0013      	movs	r3, r2
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	2380      	movs	r3, #128	; 0x80
 8005dc0:	055b      	lsls	r3, r3, #21
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	d100      	bne.n	8005dc8 <HAL_GPIO_Init+0x17c>
 8005dc6:	e0a0      	b.n	8005f0a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dc8:	4b57      	ldr	r3, [pc, #348]	; (8005f28 <HAL_GPIO_Init+0x2dc>)
 8005dca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dcc:	4b56      	ldr	r3, [pc, #344]	; (8005f28 <HAL_GPIO_Init+0x2dc>)
 8005dce:	2101      	movs	r1, #1
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8005dd4:	4a55      	ldr	r2, [pc, #340]	; (8005f2c <HAL_GPIO_Init+0x2e0>)
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	089b      	lsrs	r3, r3, #2
 8005dda:	3302      	adds	r3, #2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	589b      	ldr	r3, [r3, r2]
 8005de0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2203      	movs	r2, #3
 8005de6:	4013      	ands	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	220f      	movs	r2, #15
 8005dec:	409a      	lsls	r2, r3
 8005dee:	0013      	movs	r3, r2
 8005df0:	43da      	mvns	r2, r3
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	4013      	ands	r3, r2
 8005df6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	23a0      	movs	r3, #160	; 0xa0
 8005dfc:	05db      	lsls	r3, r3, #23
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d01f      	beq.n	8005e42 <HAL_GPIO_Init+0x1f6>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a4a      	ldr	r2, [pc, #296]	; (8005f30 <HAL_GPIO_Init+0x2e4>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d019      	beq.n	8005e3e <HAL_GPIO_Init+0x1f2>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a49      	ldr	r2, [pc, #292]	; (8005f34 <HAL_GPIO_Init+0x2e8>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d013      	beq.n	8005e3a <HAL_GPIO_Init+0x1ee>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a48      	ldr	r2, [pc, #288]	; (8005f38 <HAL_GPIO_Init+0x2ec>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d00d      	beq.n	8005e36 <HAL_GPIO_Init+0x1ea>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a47      	ldr	r2, [pc, #284]	; (8005f3c <HAL_GPIO_Init+0x2f0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d007      	beq.n	8005e32 <HAL_GPIO_Init+0x1e6>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a46      	ldr	r2, [pc, #280]	; (8005f40 <HAL_GPIO_Init+0x2f4>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d101      	bne.n	8005e2e <HAL_GPIO_Init+0x1e2>
 8005e2a:	2305      	movs	r3, #5
 8005e2c:	e00a      	b.n	8005e44 <HAL_GPIO_Init+0x1f8>
 8005e2e:	2306      	movs	r3, #6
 8005e30:	e008      	b.n	8005e44 <HAL_GPIO_Init+0x1f8>
 8005e32:	2304      	movs	r3, #4
 8005e34:	e006      	b.n	8005e44 <HAL_GPIO_Init+0x1f8>
 8005e36:	2303      	movs	r3, #3
 8005e38:	e004      	b.n	8005e44 <HAL_GPIO_Init+0x1f8>
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	e002      	b.n	8005e44 <HAL_GPIO_Init+0x1f8>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e000      	b.n	8005e44 <HAL_GPIO_Init+0x1f8>
 8005e42:	2300      	movs	r3, #0
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	2103      	movs	r1, #3
 8005e48:	400a      	ands	r2, r1
 8005e4a:	0092      	lsls	r2, r2, #2
 8005e4c:	4093      	lsls	r3, r2
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e54:	4935      	ldr	r1, [pc, #212]	; (8005f2c <HAL_GPIO_Init+0x2e0>)
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	089b      	lsrs	r3, r3, #2
 8005e5a:	3302      	adds	r3, #2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e62:	4b38      	ldr	r3, [pc, #224]	; (8005f44 <HAL_GPIO_Init+0x2f8>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	43da      	mvns	r2, r3
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	4013      	ands	r3, r2
 8005e70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	2380      	movs	r3, #128	; 0x80
 8005e78:	025b      	lsls	r3, r3, #9
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	d003      	beq.n	8005e86 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005e86:	4b2f      	ldr	r3, [pc, #188]	; (8005f44 <HAL_GPIO_Init+0x2f8>)
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8005e8c:	4b2d      	ldr	r3, [pc, #180]	; (8005f44 <HAL_GPIO_Init+0x2f8>)
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	43da      	mvns	r2, r3
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	4013      	ands	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	685a      	ldr	r2, [r3, #4]
 8005ea0:	2380      	movs	r3, #128	; 0x80
 8005ea2:	029b      	lsls	r3, r3, #10
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	d003      	beq.n	8005eb0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005eb0:	4b24      	ldr	r3, [pc, #144]	; (8005f44 <HAL_GPIO_Init+0x2f8>)
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005eb6:	4b23      	ldr	r3, [pc, #140]	; (8005f44 <HAL_GPIO_Init+0x2f8>)
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	43da      	mvns	r2, r3
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	685a      	ldr	r2, [r3, #4]
 8005eca:	2380      	movs	r3, #128	; 0x80
 8005ecc:	035b      	lsls	r3, r3, #13
 8005ece:	4013      	ands	r3, r2
 8005ed0:	d003      	beq.n	8005eda <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005eda:	4b1a      	ldr	r3, [pc, #104]	; (8005f44 <HAL_GPIO_Init+0x2f8>)
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005ee0:	4b18      	ldr	r3, [pc, #96]	; (8005f44 <HAL_GPIO_Init+0x2f8>)
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	43da      	mvns	r2, r3
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	4013      	ands	r3, r2
 8005eee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685a      	ldr	r2, [r3, #4]
 8005ef4:	2380      	movs	r3, #128	; 0x80
 8005ef6:	039b      	lsls	r3, r3, #14
 8005ef8:	4013      	ands	r3, r2
 8005efa:	d003      	beq.n	8005f04 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005f04:	4b0f      	ldr	r3, [pc, #60]	; (8005f44 <HAL_GPIO_Init+0x2f8>)
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	40da      	lsrs	r2, r3
 8005f18:	1e13      	subs	r3, r2, #0
 8005f1a:	d000      	beq.n	8005f1e <HAL_GPIO_Init+0x2d2>
 8005f1c:	e6a2      	b.n	8005c64 <HAL_GPIO_Init+0x18>
  }
}
 8005f1e:	46c0      	nop			; (mov r8, r8)
 8005f20:	46bd      	mov	sp, r7
 8005f22:	b006      	add	sp, #24
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	46c0      	nop			; (mov r8, r8)
 8005f28:	40021000 	.word	0x40021000
 8005f2c:	40010000 	.word	0x40010000
 8005f30:	50000400 	.word	0x50000400
 8005f34:	50000800 	.word	0x50000800
 8005f38:	50000c00 	.word	0x50000c00
 8005f3c:	50001000 	.word	0x50001000
 8005f40:	50001c00 	.word	0x50001c00
 8005f44:	40010400 	.word	0x40010400

08005f48 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	0008      	movs	r0, r1
 8005f52:	0011      	movs	r1, r2
 8005f54:	1cbb      	adds	r3, r7, #2
 8005f56:	1c02      	adds	r2, r0, #0
 8005f58:	801a      	strh	r2, [r3, #0]
 8005f5a:	1c7b      	adds	r3, r7, #1
 8005f5c:	1c0a      	adds	r2, r1, #0
 8005f5e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f60:	1c7b      	adds	r3, r7, #1
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d004      	beq.n	8005f72 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f68:	1cbb      	adds	r3, r7, #2
 8005f6a:	881a      	ldrh	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8005f70:	e003      	b.n	8005f7a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8005f72:	1cbb      	adds	r3, r7, #2
 8005f74:	881a      	ldrh	r2, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005f7a:	46c0      	nop			; (mov r8, r8)
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	b002      	add	sp, #8
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b084      	sub	sp, #16
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	000a      	movs	r2, r1
 8005f8c:	1cbb      	adds	r3, r7, #2
 8005f8e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	695b      	ldr	r3, [r3, #20]
 8005f94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005f96:	1cbb      	adds	r3, r7, #2
 8005f98:	881b      	ldrh	r3, [r3, #0]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	041a      	lsls	r2, r3, #16
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	43db      	mvns	r3, r3
 8005fa4:	1cb9      	adds	r1, r7, #2
 8005fa6:	8809      	ldrh	r1, [r1, #0]
 8005fa8:	400b      	ands	r3, r1
 8005faa:	431a      	orrs	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	619a      	str	r2, [r3, #24]
}
 8005fb0:	46c0      	nop			; (mov r8, r8)
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	b004      	add	sp, #16
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	0002      	movs	r2, r0
 8005fc0:	1dbb      	adds	r3, r7, #6
 8005fc2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005fc4:	4b09      	ldr	r3, [pc, #36]	; (8005fec <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	1dba      	adds	r2, r7, #6
 8005fca:	8812      	ldrh	r2, [r2, #0]
 8005fcc:	4013      	ands	r3, r2
 8005fce:	d008      	beq.n	8005fe2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005fd0:	4b06      	ldr	r3, [pc, #24]	; (8005fec <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8005fd2:	1dba      	adds	r2, r7, #6
 8005fd4:	8812      	ldrh	r2, [r2, #0]
 8005fd6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005fd8:	1dbb      	adds	r3, r7, #6
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	0018      	movs	r0, r3
 8005fde:	f7fe fecd 	bl	8004d7c <HAL_GPIO_EXTI_Callback>
  }
}
 8005fe2:	46c0      	nop			; (mov r8, r8)
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	b002      	add	sp, #8
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	46c0      	nop			; (mov r8, r8)
 8005fec:	40010400 	.word	0x40010400

08005ff0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ff2:	b08b      	sub	sp, #44	; 0x2c
 8005ff4:	af06      	add	r7, sp, #24
 8005ff6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d101      	bne.n	8006002 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e100      	b.n	8006204 <HAL_PCD_Init+0x214>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a81      	ldr	r2, [pc, #516]	; (800620c <HAL_PCD_Init+0x21c>)
 8006006:	5c9b      	ldrb	r3, [r3, r2]
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d108      	bne.n	8006020 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	23aa      	movs	r3, #170	; 0xaa
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	2100      	movs	r1, #0
 8006016:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	0018      	movs	r0, r3
 800601c:	f7fe fc56 	bl	80048cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a7a      	ldr	r2, [pc, #488]	; (800620c <HAL_PCD_Init+0x21c>)
 8006024:	2103      	movs	r1, #3
 8006026:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	0018      	movs	r0, r3
 800602e:	f003 fa07 	bl	8009440 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006032:	230f      	movs	r3, #15
 8006034:	18fb      	adds	r3, r7, r3
 8006036:	2200      	movs	r2, #0
 8006038:	701a      	strb	r2, [r3, #0]
 800603a:	e058      	b.n	80060ee <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800603c:	200f      	movs	r0, #15
 800603e:	183b      	adds	r3, r7, r0
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	6879      	ldr	r1, [r7, #4]
 8006044:	1c5a      	adds	r2, r3, #1
 8006046:	0013      	movs	r3, r2
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	189b      	adds	r3, r3, r2
 800604c:	00db      	lsls	r3, r3, #3
 800604e:	18cb      	adds	r3, r1, r3
 8006050:	3301      	adds	r3, #1
 8006052:	2201      	movs	r2, #1
 8006054:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006056:	183b      	adds	r3, r7, r0
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	6879      	ldr	r1, [r7, #4]
 800605c:	1c5a      	adds	r2, r3, #1
 800605e:	0013      	movs	r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	189b      	adds	r3, r3, r2
 8006064:	00db      	lsls	r3, r3, #3
 8006066:	183a      	adds	r2, r7, r0
 8006068:	7812      	ldrb	r2, [r2, #0]
 800606a:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800606c:	183b      	adds	r3, r7, r0
 800606e:	781a      	ldrb	r2, [r3, #0]
 8006070:	0004      	movs	r4, r0
 8006072:	183b      	adds	r3, r7, r0
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	b298      	uxth	r0, r3
 8006078:	6879      	ldr	r1, [r7, #4]
 800607a:	0013      	movs	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	189b      	adds	r3, r3, r2
 8006080:	00db      	lsls	r3, r3, #3
 8006082:	18cb      	adds	r3, r1, r3
 8006084:	3336      	adds	r3, #54	; 0x36
 8006086:	1c02      	adds	r2, r0, #0
 8006088:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800608a:	193b      	adds	r3, r7, r4
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	6879      	ldr	r1, [r7, #4]
 8006090:	1c5a      	adds	r2, r3, #1
 8006092:	0013      	movs	r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	189b      	adds	r3, r3, r2
 8006098:	00db      	lsls	r3, r3, #3
 800609a:	18cb      	adds	r3, r1, r3
 800609c:	3303      	adds	r3, #3
 800609e:	2200      	movs	r2, #0
 80060a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80060a2:	193b      	adds	r3, r7, r4
 80060a4:	781a      	ldrb	r2, [r3, #0]
 80060a6:	6879      	ldr	r1, [r7, #4]
 80060a8:	0013      	movs	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	189b      	adds	r3, r3, r2
 80060ae:	00db      	lsls	r3, r3, #3
 80060b0:	18cb      	adds	r3, r1, r3
 80060b2:	3338      	adds	r3, #56	; 0x38
 80060b4:	2200      	movs	r2, #0
 80060b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80060b8:	193b      	adds	r3, r7, r4
 80060ba:	781a      	ldrb	r2, [r3, #0]
 80060bc:	6879      	ldr	r1, [r7, #4]
 80060be:	0013      	movs	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	189b      	adds	r3, r3, r2
 80060c4:	00db      	lsls	r3, r3, #3
 80060c6:	18cb      	adds	r3, r1, r3
 80060c8:	333c      	adds	r3, #60	; 0x3c
 80060ca:	2200      	movs	r2, #0
 80060cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80060ce:	193b      	adds	r3, r7, r4
 80060d0:	781a      	ldrb	r2, [r3, #0]
 80060d2:	6879      	ldr	r1, [r7, #4]
 80060d4:	0013      	movs	r3, r2
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	189b      	adds	r3, r3, r2
 80060da:	00db      	lsls	r3, r3, #3
 80060dc:	18cb      	adds	r3, r1, r3
 80060de:	3340      	adds	r3, #64	; 0x40
 80060e0:	2200      	movs	r2, #0
 80060e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060e4:	193b      	adds	r3, r7, r4
 80060e6:	781a      	ldrb	r2, [r3, #0]
 80060e8:	193b      	adds	r3, r7, r4
 80060ea:	3201      	adds	r2, #1
 80060ec:	701a      	strb	r2, [r3, #0]
 80060ee:	230f      	movs	r3, #15
 80060f0:	18fb      	adds	r3, r7, r3
 80060f2:	781a      	ldrb	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d39f      	bcc.n	800603c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060fc:	230f      	movs	r3, #15
 80060fe:	18fb      	adds	r3, r7, r3
 8006100:	2200      	movs	r2, #0
 8006102:	701a      	strb	r2, [r3, #0]
 8006104:	e056      	b.n	80061b4 <HAL_PCD_Init+0x1c4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006106:	240f      	movs	r4, #15
 8006108:	193b      	adds	r3, r7, r4
 800610a:	781a      	ldrb	r2, [r3, #0]
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	236a      	movs	r3, #106	; 0x6a
 8006110:	33ff      	adds	r3, #255	; 0xff
 8006112:	0019      	movs	r1, r3
 8006114:	0013      	movs	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	189b      	adds	r3, r3, r2
 800611a:	00db      	lsls	r3, r3, #3
 800611c:	18c3      	adds	r3, r0, r3
 800611e:	185b      	adds	r3, r3, r1
 8006120:	2200      	movs	r2, #0
 8006122:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006124:	193b      	adds	r3, r7, r4
 8006126:	781a      	ldrb	r2, [r3, #0]
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	23b4      	movs	r3, #180	; 0xb4
 800612c:	0059      	lsls	r1, r3, #1
 800612e:	0013      	movs	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	189b      	adds	r3, r3, r2
 8006134:	00db      	lsls	r3, r3, #3
 8006136:	18c3      	adds	r3, r0, r3
 8006138:	185b      	adds	r3, r3, r1
 800613a:	193a      	adds	r2, r7, r4
 800613c:	7812      	ldrb	r2, [r2, #0]
 800613e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006140:	193b      	adds	r3, r7, r4
 8006142:	781a      	ldrb	r2, [r3, #0]
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	236c      	movs	r3, #108	; 0x6c
 8006148:	33ff      	adds	r3, #255	; 0xff
 800614a:	0019      	movs	r1, r3
 800614c:	0013      	movs	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	189b      	adds	r3, r3, r2
 8006152:	00db      	lsls	r3, r3, #3
 8006154:	18c3      	adds	r3, r0, r3
 8006156:	185b      	adds	r3, r3, r1
 8006158:	2200      	movs	r2, #0
 800615a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800615c:	193b      	adds	r3, r7, r4
 800615e:	781a      	ldrb	r2, [r3, #0]
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	23bc      	movs	r3, #188	; 0xbc
 8006164:	0059      	lsls	r1, r3, #1
 8006166:	0013      	movs	r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	189b      	adds	r3, r3, r2
 800616c:	00db      	lsls	r3, r3, #3
 800616e:	18c3      	adds	r3, r0, r3
 8006170:	185b      	adds	r3, r3, r1
 8006172:	2200      	movs	r2, #0
 8006174:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006176:	193b      	adds	r3, r7, r4
 8006178:	781a      	ldrb	r2, [r3, #0]
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	23be      	movs	r3, #190	; 0xbe
 800617e:	0059      	lsls	r1, r3, #1
 8006180:	0013      	movs	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	189b      	adds	r3, r3, r2
 8006186:	00db      	lsls	r3, r3, #3
 8006188:	18c3      	adds	r3, r0, r3
 800618a:	185b      	adds	r3, r3, r1
 800618c:	2200      	movs	r2, #0
 800618e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006190:	193b      	adds	r3, r7, r4
 8006192:	781a      	ldrb	r2, [r3, #0]
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	23c0      	movs	r3, #192	; 0xc0
 8006198:	0059      	lsls	r1, r3, #1
 800619a:	0013      	movs	r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	189b      	adds	r3, r3, r2
 80061a0:	00db      	lsls	r3, r3, #3
 80061a2:	18c3      	adds	r3, r0, r3
 80061a4:	185b      	adds	r3, r3, r1
 80061a6:	2200      	movs	r2, #0
 80061a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061aa:	193b      	adds	r3, r7, r4
 80061ac:	781a      	ldrb	r2, [r3, #0]
 80061ae:	193b      	adds	r3, r7, r4
 80061b0:	3201      	adds	r2, #1
 80061b2:	701a      	strb	r2, [r3, #0]
 80061b4:	230f      	movs	r3, #15
 80061b6:	18fb      	adds	r3, r7, r3
 80061b8:	781a      	ldrb	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d3a1      	bcc.n	8006106 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6818      	ldr	r0, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	466a      	mov	r2, sp
 80061ca:	0011      	movs	r1, r2
 80061cc:	001a      	movs	r2, r3
 80061ce:	3210      	adds	r2, #16
 80061d0:	ca70      	ldmia	r2!, {r4, r5, r6}
 80061d2:	c170      	stmia	r1!, {r4, r5, r6}
 80061d4:	ca30      	ldmia	r2!, {r4, r5}
 80061d6:	c130      	stmia	r1!, {r4, r5}
 80061d8:	6859      	ldr	r1, [r3, #4]
 80061da:	689a      	ldr	r2, [r3, #8]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	f003 f949 	bl	8009474 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2224      	movs	r2, #36	; 0x24
 80061e6:	2100      	movs	r1, #0
 80061e8:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a07      	ldr	r2, [pc, #28]	; (800620c <HAL_PCD_Init+0x21c>)
 80061ee:	2101      	movs	r1, #1
 80061f0:	5499      	strb	r1, [r3, r2]
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	69db      	ldr	r3, [r3, #28]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d103      	bne.n	8006202 <HAL_PCD_Init+0x212>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	0018      	movs	r0, r3
 80061fe:	f000 f807 	bl	8006210 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	0018      	movs	r0, r3
 8006206:	46bd      	mov	sp, r7
 8006208:	b005      	add	sp, #20
 800620a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800620c:	000002a9 	.word	0x000002a9

08006210 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	23ba      	movs	r3, #186	; 0xba
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	2101      	movs	r1, #1
 8006226:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	23b8      	movs	r3, #184	; 0xb8
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	2100      	movs	r1, #0
 8006230:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2254      	movs	r2, #84	; 0x54
 8006236:	5a9b      	ldrh	r3, [r3, r2]
 8006238:	b29b      	uxth	r3, r3
 800623a:	2201      	movs	r2, #1
 800623c:	4313      	orrs	r3, r2
 800623e:	b299      	uxth	r1, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2254      	movs	r2, #84	; 0x54
 8006244:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2254      	movs	r2, #84	; 0x54
 800624a:	5a9b      	ldrh	r3, [r3, r2]
 800624c:	b29b      	uxth	r3, r3
 800624e:	2202      	movs	r2, #2
 8006250:	4313      	orrs	r3, r2
 8006252:	b299      	uxth	r1, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2254      	movs	r2, #84	; 0x54
 8006258:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	0018      	movs	r0, r3
 800625e:	46bd      	mov	sp, r7
 8006260:	b004      	add	sp, #16
 8006262:	bd80      	pop	{r7, pc}

08006264 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8006268:	4b04      	ldr	r3, [pc, #16]	; (800627c <HAL_PWR_EnableBkUpAccess+0x18>)
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	4b03      	ldr	r3, [pc, #12]	; (800627c <HAL_PWR_EnableBkUpAccess+0x18>)
 800626e:	2180      	movs	r1, #128	; 0x80
 8006270:	0049      	lsls	r1, r1, #1
 8006272:	430a      	orrs	r2, r1
 8006274:	601a      	str	r2, [r3, #0]
}
 8006276:	46c0      	nop			; (mov r8, r8)
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	40007000 	.word	0x40007000

08006280 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006280:	b5b0      	push	{r4, r5, r7, lr}
 8006282:	b08a      	sub	sp, #40	; 0x28
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d102      	bne.n	8006294 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	f000 fbbc 	bl	8006a0c <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006294:	4bc8      	ldr	r3, [pc, #800]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	220c      	movs	r2, #12
 800629a:	4013      	ands	r3, r2
 800629c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800629e:	4bc6      	ldr	r3, [pc, #792]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 80062a0:	68da      	ldr	r2, [r3, #12]
 80062a2:	2380      	movs	r3, #128	; 0x80
 80062a4:	025b      	lsls	r3, r3, #9
 80062a6:	4013      	ands	r3, r2
 80062a8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2201      	movs	r2, #1
 80062b0:	4013      	ands	r3, r2
 80062b2:	d100      	bne.n	80062b6 <HAL_RCC_OscConfig+0x36>
 80062b4:	e07e      	b.n	80063b4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	d007      	beq.n	80062cc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	2b0c      	cmp	r3, #12
 80062c0:	d112      	bne.n	80062e8 <HAL_RCC_OscConfig+0x68>
 80062c2:	69ba      	ldr	r2, [r7, #24]
 80062c4:	2380      	movs	r3, #128	; 0x80
 80062c6:	025b      	lsls	r3, r3, #9
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d10d      	bne.n	80062e8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062cc:	4bba      	ldr	r3, [pc, #744]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	2380      	movs	r3, #128	; 0x80
 80062d2:	029b      	lsls	r3, r3, #10
 80062d4:	4013      	ands	r3, r2
 80062d6:	d100      	bne.n	80062da <HAL_RCC_OscConfig+0x5a>
 80062d8:	e06b      	b.n	80063b2 <HAL_RCC_OscConfig+0x132>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d167      	bne.n	80063b2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	f000 fb92 	bl	8006a0c <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685a      	ldr	r2, [r3, #4]
 80062ec:	2380      	movs	r3, #128	; 0x80
 80062ee:	025b      	lsls	r3, r3, #9
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d107      	bne.n	8006304 <HAL_RCC_OscConfig+0x84>
 80062f4:	4bb0      	ldr	r3, [pc, #704]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	4baf      	ldr	r3, [pc, #700]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 80062fa:	2180      	movs	r1, #128	; 0x80
 80062fc:	0249      	lsls	r1, r1, #9
 80062fe:	430a      	orrs	r2, r1
 8006300:	601a      	str	r2, [r3, #0]
 8006302:	e027      	b.n	8006354 <HAL_RCC_OscConfig+0xd4>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	23a0      	movs	r3, #160	; 0xa0
 800630a:	02db      	lsls	r3, r3, #11
 800630c:	429a      	cmp	r2, r3
 800630e:	d10e      	bne.n	800632e <HAL_RCC_OscConfig+0xae>
 8006310:	4ba9      	ldr	r3, [pc, #676]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	4ba8      	ldr	r3, [pc, #672]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 8006316:	2180      	movs	r1, #128	; 0x80
 8006318:	02c9      	lsls	r1, r1, #11
 800631a:	430a      	orrs	r2, r1
 800631c:	601a      	str	r2, [r3, #0]
 800631e:	4ba6      	ldr	r3, [pc, #664]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	4ba5      	ldr	r3, [pc, #660]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 8006324:	2180      	movs	r1, #128	; 0x80
 8006326:	0249      	lsls	r1, r1, #9
 8006328:	430a      	orrs	r2, r1
 800632a:	601a      	str	r2, [r3, #0]
 800632c:	e012      	b.n	8006354 <HAL_RCC_OscConfig+0xd4>
 800632e:	4ba2      	ldr	r3, [pc, #648]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	4ba1      	ldr	r3, [pc, #644]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 8006334:	49a1      	ldr	r1, [pc, #644]	; (80065bc <HAL_RCC_OscConfig+0x33c>)
 8006336:	400a      	ands	r2, r1
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	4b9f      	ldr	r3, [pc, #636]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	2380      	movs	r3, #128	; 0x80
 8006340:	025b      	lsls	r3, r3, #9
 8006342:	4013      	ands	r3, r2
 8006344:	60fb      	str	r3, [r7, #12]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	4b9b      	ldr	r3, [pc, #620]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	4b9a      	ldr	r3, [pc, #616]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 800634e:	499c      	ldr	r1, [pc, #624]	; (80065c0 <HAL_RCC_OscConfig+0x340>)
 8006350:	400a      	ands	r2, r1
 8006352:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d015      	beq.n	8006388 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800635c:	f7fe fe68 	bl	8005030 <HAL_GetTick>
 8006360:	0003      	movs	r3, r0
 8006362:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006364:	e009      	b.n	800637a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006366:	f7fe fe63 	bl	8005030 <HAL_GetTick>
 800636a:	0002      	movs	r2, r0
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	2b64      	cmp	r3, #100	; 0x64
 8006372:	d902      	bls.n	800637a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	f000 fb49 	bl	8006a0c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800637a:	4b8f      	ldr	r3, [pc, #572]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	2380      	movs	r3, #128	; 0x80
 8006380:	029b      	lsls	r3, r3, #10
 8006382:	4013      	ands	r3, r2
 8006384:	d0ef      	beq.n	8006366 <HAL_RCC_OscConfig+0xe6>
 8006386:	e015      	b.n	80063b4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006388:	f7fe fe52 	bl	8005030 <HAL_GetTick>
 800638c:	0003      	movs	r3, r0
 800638e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006390:	e008      	b.n	80063a4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006392:	f7fe fe4d 	bl	8005030 <HAL_GetTick>
 8006396:	0002      	movs	r2, r0
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	2b64      	cmp	r3, #100	; 0x64
 800639e:	d901      	bls.n	80063a4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e333      	b.n	8006a0c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80063a4:	4b84      	ldr	r3, [pc, #528]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	2380      	movs	r3, #128	; 0x80
 80063aa:	029b      	lsls	r3, r3, #10
 80063ac:	4013      	ands	r3, r2
 80063ae:	d1f0      	bne.n	8006392 <HAL_RCC_OscConfig+0x112>
 80063b0:	e000      	b.n	80063b4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063b2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2202      	movs	r2, #2
 80063ba:	4013      	ands	r3, r2
 80063bc:	d100      	bne.n	80063c0 <HAL_RCC_OscConfig+0x140>
 80063be:	e098      	b.n	80064f2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	2220      	movs	r2, #32
 80063ca:	4013      	ands	r3, r2
 80063cc:	d009      	beq.n	80063e2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80063ce:	4b7a      	ldr	r3, [pc, #488]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	4b79      	ldr	r3, [pc, #484]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 80063d4:	2120      	movs	r1, #32
 80063d6:	430a      	orrs	r2, r1
 80063d8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80063da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063dc:	2220      	movs	r2, #32
 80063de:	4393      	bics	r3, r2
 80063e0:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	2b04      	cmp	r3, #4
 80063e6:	d005      	beq.n	80063f4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	2b0c      	cmp	r3, #12
 80063ec:	d13d      	bne.n	800646a <HAL_RCC_OscConfig+0x1ea>
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d13a      	bne.n	800646a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80063f4:	4b70      	ldr	r3, [pc, #448]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2204      	movs	r2, #4
 80063fa:	4013      	ands	r3, r2
 80063fc:	d004      	beq.n	8006408 <HAL_RCC_OscConfig+0x188>
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	2b00      	cmp	r3, #0
 8006402:	d101      	bne.n	8006408 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e301      	b.n	8006a0c <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006408:	4b6b      	ldr	r3, [pc, #428]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	4a6d      	ldr	r2, [pc, #436]	; (80065c4 <HAL_RCC_OscConfig+0x344>)
 800640e:	4013      	ands	r3, r2
 8006410:	0019      	movs	r1, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	021a      	lsls	r2, r3, #8
 8006418:	4b67      	ldr	r3, [pc, #412]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 800641a:	430a      	orrs	r2, r1
 800641c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800641e:	4b66      	ldr	r3, [pc, #408]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2209      	movs	r2, #9
 8006424:	4393      	bics	r3, r2
 8006426:	0019      	movs	r1, r3
 8006428:	4b63      	ldr	r3, [pc, #396]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 800642a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800642c:	430a      	orrs	r2, r1
 800642e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006430:	f000 fc20 	bl	8006c74 <HAL_RCC_GetSysClockFreq>
 8006434:	0001      	movs	r1, r0
 8006436:	4b60      	ldr	r3, [pc, #384]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	091b      	lsrs	r3, r3, #4
 800643c:	220f      	movs	r2, #15
 800643e:	4013      	ands	r3, r2
 8006440:	4a61      	ldr	r2, [pc, #388]	; (80065c8 <HAL_RCC_OscConfig+0x348>)
 8006442:	5cd3      	ldrb	r3, [r2, r3]
 8006444:	000a      	movs	r2, r1
 8006446:	40da      	lsrs	r2, r3
 8006448:	4b60      	ldr	r3, [pc, #384]	; (80065cc <HAL_RCC_OscConfig+0x34c>)
 800644a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 800644c:	2513      	movs	r5, #19
 800644e:	197c      	adds	r4, r7, r5
 8006450:	2000      	movs	r0, #0
 8006452:	f7fe fda7 	bl	8004fa4 <HAL_InitTick>
 8006456:	0003      	movs	r3, r0
 8006458:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800645a:	197b      	adds	r3, r7, r5
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d047      	beq.n	80064f2 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8006462:	2313      	movs	r3, #19
 8006464:	18fb      	adds	r3, r7, r3
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	e2d0      	b.n	8006a0c <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	2b00      	cmp	r3, #0
 800646e:	d027      	beq.n	80064c0 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006470:	4b51      	ldr	r3, [pc, #324]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2209      	movs	r2, #9
 8006476:	4393      	bics	r3, r2
 8006478:	0019      	movs	r1, r3
 800647a:	4b4f      	ldr	r3, [pc, #316]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 800647c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800647e:	430a      	orrs	r2, r1
 8006480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006482:	f7fe fdd5 	bl	8005030 <HAL_GetTick>
 8006486:	0003      	movs	r3, r0
 8006488:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800648a:	e008      	b.n	800649e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800648c:	f7fe fdd0 	bl	8005030 <HAL_GetTick>
 8006490:	0002      	movs	r2, r0
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	2b02      	cmp	r3, #2
 8006498:	d901      	bls.n	800649e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e2b6      	b.n	8006a0c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800649e:	4b46      	ldr	r3, [pc, #280]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2204      	movs	r2, #4
 80064a4:	4013      	ands	r3, r2
 80064a6:	d0f1      	beq.n	800648c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064a8:	4b43      	ldr	r3, [pc, #268]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	4a45      	ldr	r2, [pc, #276]	; (80065c4 <HAL_RCC_OscConfig+0x344>)
 80064ae:	4013      	ands	r3, r2
 80064b0:	0019      	movs	r1, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	021a      	lsls	r2, r3, #8
 80064b8:	4b3f      	ldr	r3, [pc, #252]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 80064ba:	430a      	orrs	r2, r1
 80064bc:	605a      	str	r2, [r3, #4]
 80064be:	e018      	b.n	80064f2 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064c0:	4b3d      	ldr	r3, [pc, #244]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	4b3c      	ldr	r3, [pc, #240]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 80064c6:	2101      	movs	r1, #1
 80064c8:	438a      	bics	r2, r1
 80064ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064cc:	f7fe fdb0 	bl	8005030 <HAL_GetTick>
 80064d0:	0003      	movs	r3, r0
 80064d2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80064d4:	e008      	b.n	80064e8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064d6:	f7fe fdab 	bl	8005030 <HAL_GetTick>
 80064da:	0002      	movs	r2, r0
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d901      	bls.n	80064e8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e291      	b.n	8006a0c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80064e8:	4b33      	ldr	r3, [pc, #204]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2204      	movs	r2, #4
 80064ee:	4013      	ands	r3, r2
 80064f0:	d1f1      	bne.n	80064d6 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2210      	movs	r2, #16
 80064f8:	4013      	ands	r3, r2
 80064fa:	d100      	bne.n	80064fe <HAL_RCC_OscConfig+0x27e>
 80064fc:	e09f      	b.n	800663e <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d13f      	bne.n	8006584 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006504:	4b2c      	ldr	r3, [pc, #176]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	2380      	movs	r3, #128	; 0x80
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4013      	ands	r3, r2
 800650e:	d005      	beq.n	800651c <HAL_RCC_OscConfig+0x29c>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	69db      	ldr	r3, [r3, #28]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d101      	bne.n	800651c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e277      	b.n	8006a0c <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800651c:	4b26      	ldr	r3, [pc, #152]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	4a2b      	ldr	r2, [pc, #172]	; (80065d0 <HAL_RCC_OscConfig+0x350>)
 8006522:	4013      	ands	r3, r2
 8006524:	0019      	movs	r1, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800652a:	4b23      	ldr	r3, [pc, #140]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 800652c:	430a      	orrs	r2, r1
 800652e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006530:	4b21      	ldr	r3, [pc, #132]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	021b      	lsls	r3, r3, #8
 8006536:	0a19      	lsrs	r1, r3, #8
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a1b      	ldr	r3, [r3, #32]
 800653c:	061a      	lsls	r2, r3, #24
 800653e:	4b1e      	ldr	r3, [pc, #120]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 8006540:	430a      	orrs	r2, r1
 8006542:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006548:	0b5b      	lsrs	r3, r3, #13
 800654a:	3301      	adds	r3, #1
 800654c:	2280      	movs	r2, #128	; 0x80
 800654e:	0212      	lsls	r2, r2, #8
 8006550:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006552:	4b19      	ldr	r3, [pc, #100]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	091b      	lsrs	r3, r3, #4
 8006558:	210f      	movs	r1, #15
 800655a:	400b      	ands	r3, r1
 800655c:	491a      	ldr	r1, [pc, #104]	; (80065c8 <HAL_RCC_OscConfig+0x348>)
 800655e:	5ccb      	ldrb	r3, [r1, r3]
 8006560:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006562:	4b1a      	ldr	r3, [pc, #104]	; (80065cc <HAL_RCC_OscConfig+0x34c>)
 8006564:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8006566:	2513      	movs	r5, #19
 8006568:	197c      	adds	r4, r7, r5
 800656a:	2000      	movs	r0, #0
 800656c:	f7fe fd1a 	bl	8004fa4 <HAL_InitTick>
 8006570:	0003      	movs	r3, r0
 8006572:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8006574:	197b      	adds	r3, r7, r5
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d060      	beq.n	800663e <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 800657c:	2313      	movs	r3, #19
 800657e:	18fb      	adds	r3, r7, r3
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	e243      	b.n	8006a0c <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	69db      	ldr	r3, [r3, #28]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d03e      	beq.n	800660a <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800658c:	4b0a      	ldr	r3, [pc, #40]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	4b09      	ldr	r3, [pc, #36]	; (80065b8 <HAL_RCC_OscConfig+0x338>)
 8006592:	2180      	movs	r1, #128	; 0x80
 8006594:	0049      	lsls	r1, r1, #1
 8006596:	430a      	orrs	r2, r1
 8006598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800659a:	f7fe fd49 	bl	8005030 <HAL_GetTick>
 800659e:	0003      	movs	r3, r0
 80065a0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80065a2:	e017      	b.n	80065d4 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80065a4:	f7fe fd44 	bl	8005030 <HAL_GetTick>
 80065a8:	0002      	movs	r2, r0
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d910      	bls.n	80065d4 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e22a      	b.n	8006a0c <HAL_RCC_OscConfig+0x78c>
 80065b6:	46c0      	nop			; (mov r8, r8)
 80065b8:	40021000 	.word	0x40021000
 80065bc:	fffeffff 	.word	0xfffeffff
 80065c0:	fffbffff 	.word	0xfffbffff
 80065c4:	ffffe0ff 	.word	0xffffe0ff
 80065c8:	0800a654 	.word	0x0800a654
 80065cc:	20000014 	.word	0x20000014
 80065d0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80065d4:	4bc6      	ldr	r3, [pc, #792]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	2380      	movs	r3, #128	; 0x80
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4013      	ands	r3, r2
 80065de:	d0e1      	beq.n	80065a4 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80065e0:	4bc3      	ldr	r3, [pc, #780]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	4ac3      	ldr	r2, [pc, #780]	; (80068f4 <HAL_RCC_OscConfig+0x674>)
 80065e6:	4013      	ands	r3, r2
 80065e8:	0019      	movs	r1, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065ee:	4bc0      	ldr	r3, [pc, #768]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 80065f0:	430a      	orrs	r2, r1
 80065f2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80065f4:	4bbe      	ldr	r3, [pc, #760]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	021b      	lsls	r3, r3, #8
 80065fa:	0a19      	lsrs	r1, r3, #8
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a1b      	ldr	r3, [r3, #32]
 8006600:	061a      	lsls	r2, r3, #24
 8006602:	4bbb      	ldr	r3, [pc, #748]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 8006604:	430a      	orrs	r2, r1
 8006606:	605a      	str	r2, [r3, #4]
 8006608:	e019      	b.n	800663e <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800660a:	4bb9      	ldr	r3, [pc, #740]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	4bb8      	ldr	r3, [pc, #736]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 8006610:	49b9      	ldr	r1, [pc, #740]	; (80068f8 <HAL_RCC_OscConfig+0x678>)
 8006612:	400a      	ands	r2, r1
 8006614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006616:	f7fe fd0b 	bl	8005030 <HAL_GetTick>
 800661a:	0003      	movs	r3, r0
 800661c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800661e:	e008      	b.n	8006632 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006620:	f7fe fd06 	bl	8005030 <HAL_GetTick>
 8006624:	0002      	movs	r2, r0
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	2b02      	cmp	r3, #2
 800662c:	d901      	bls.n	8006632 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e1ec      	b.n	8006a0c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006632:	4baf      	ldr	r3, [pc, #700]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	2380      	movs	r3, #128	; 0x80
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	4013      	ands	r3, r2
 800663c:	d1f0      	bne.n	8006620 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2208      	movs	r2, #8
 8006644:	4013      	ands	r3, r2
 8006646:	d036      	beq.n	80066b6 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	695b      	ldr	r3, [r3, #20]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d019      	beq.n	8006684 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006650:	4ba7      	ldr	r3, [pc, #668]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 8006652:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006654:	4ba6      	ldr	r3, [pc, #664]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 8006656:	2101      	movs	r1, #1
 8006658:	430a      	orrs	r2, r1
 800665a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800665c:	f7fe fce8 	bl	8005030 <HAL_GetTick>
 8006660:	0003      	movs	r3, r0
 8006662:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006664:	e008      	b.n	8006678 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006666:	f7fe fce3 	bl	8005030 <HAL_GetTick>
 800666a:	0002      	movs	r2, r0
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	2b02      	cmp	r3, #2
 8006672:	d901      	bls.n	8006678 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	e1c9      	b.n	8006a0c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006678:	4b9d      	ldr	r3, [pc, #628]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 800667a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800667c:	2202      	movs	r2, #2
 800667e:	4013      	ands	r3, r2
 8006680:	d0f1      	beq.n	8006666 <HAL_RCC_OscConfig+0x3e6>
 8006682:	e018      	b.n	80066b6 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006684:	4b9a      	ldr	r3, [pc, #616]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 8006686:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006688:	4b99      	ldr	r3, [pc, #612]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 800668a:	2101      	movs	r1, #1
 800668c:	438a      	bics	r2, r1
 800668e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006690:	f7fe fcce 	bl	8005030 <HAL_GetTick>
 8006694:	0003      	movs	r3, r0
 8006696:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006698:	e008      	b.n	80066ac <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800669a:	f7fe fcc9 	bl	8005030 <HAL_GetTick>
 800669e:	0002      	movs	r2, r0
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d901      	bls.n	80066ac <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e1af      	b.n	8006a0c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80066ac:	4b90      	ldr	r3, [pc, #576]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 80066ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066b0:	2202      	movs	r2, #2
 80066b2:	4013      	ands	r3, r2
 80066b4:	d1f1      	bne.n	800669a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2204      	movs	r2, #4
 80066bc:	4013      	ands	r3, r2
 80066be:	d100      	bne.n	80066c2 <HAL_RCC_OscConfig+0x442>
 80066c0:	e0af      	b.n	8006822 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066c2:	2323      	movs	r3, #35	; 0x23
 80066c4:	18fb      	adds	r3, r7, r3
 80066c6:	2200      	movs	r2, #0
 80066c8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066ca:	4b89      	ldr	r3, [pc, #548]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 80066cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066ce:	2380      	movs	r3, #128	; 0x80
 80066d0:	055b      	lsls	r3, r3, #21
 80066d2:	4013      	ands	r3, r2
 80066d4:	d10a      	bne.n	80066ec <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066d6:	4b86      	ldr	r3, [pc, #536]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 80066d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066da:	4b85      	ldr	r3, [pc, #532]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 80066dc:	2180      	movs	r1, #128	; 0x80
 80066de:	0549      	lsls	r1, r1, #21
 80066e0:	430a      	orrs	r2, r1
 80066e2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80066e4:	2323      	movs	r3, #35	; 0x23
 80066e6:	18fb      	adds	r3, r7, r3
 80066e8:	2201      	movs	r2, #1
 80066ea:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066ec:	4b83      	ldr	r3, [pc, #524]	; (80068fc <HAL_RCC_OscConfig+0x67c>)
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	2380      	movs	r3, #128	; 0x80
 80066f2:	005b      	lsls	r3, r3, #1
 80066f4:	4013      	ands	r3, r2
 80066f6:	d11a      	bne.n	800672e <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066f8:	4b80      	ldr	r3, [pc, #512]	; (80068fc <HAL_RCC_OscConfig+0x67c>)
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	4b7f      	ldr	r3, [pc, #508]	; (80068fc <HAL_RCC_OscConfig+0x67c>)
 80066fe:	2180      	movs	r1, #128	; 0x80
 8006700:	0049      	lsls	r1, r1, #1
 8006702:	430a      	orrs	r2, r1
 8006704:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006706:	f7fe fc93 	bl	8005030 <HAL_GetTick>
 800670a:	0003      	movs	r3, r0
 800670c:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800670e:	e008      	b.n	8006722 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006710:	f7fe fc8e 	bl	8005030 <HAL_GetTick>
 8006714:	0002      	movs	r2, r0
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b64      	cmp	r3, #100	; 0x64
 800671c:	d901      	bls.n	8006722 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e174      	b.n	8006a0c <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006722:	4b76      	ldr	r3, [pc, #472]	; (80068fc <HAL_RCC_OscConfig+0x67c>)
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	2380      	movs	r3, #128	; 0x80
 8006728:	005b      	lsls	r3, r3, #1
 800672a:	4013      	ands	r3, r2
 800672c:	d0f0      	beq.n	8006710 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	689a      	ldr	r2, [r3, #8]
 8006732:	2380      	movs	r3, #128	; 0x80
 8006734:	005b      	lsls	r3, r3, #1
 8006736:	429a      	cmp	r2, r3
 8006738:	d107      	bne.n	800674a <HAL_RCC_OscConfig+0x4ca>
 800673a:	4b6d      	ldr	r3, [pc, #436]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 800673c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800673e:	4b6c      	ldr	r3, [pc, #432]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 8006740:	2180      	movs	r1, #128	; 0x80
 8006742:	0049      	lsls	r1, r1, #1
 8006744:	430a      	orrs	r2, r1
 8006746:	651a      	str	r2, [r3, #80]	; 0x50
 8006748:	e031      	b.n	80067ae <HAL_RCC_OscConfig+0x52e>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10c      	bne.n	800676c <HAL_RCC_OscConfig+0x4ec>
 8006752:	4b67      	ldr	r3, [pc, #412]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 8006754:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006756:	4b66      	ldr	r3, [pc, #408]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 8006758:	4967      	ldr	r1, [pc, #412]	; (80068f8 <HAL_RCC_OscConfig+0x678>)
 800675a:	400a      	ands	r2, r1
 800675c:	651a      	str	r2, [r3, #80]	; 0x50
 800675e:	4b64      	ldr	r3, [pc, #400]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 8006760:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006762:	4b63      	ldr	r3, [pc, #396]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 8006764:	4966      	ldr	r1, [pc, #408]	; (8006900 <HAL_RCC_OscConfig+0x680>)
 8006766:	400a      	ands	r2, r1
 8006768:	651a      	str	r2, [r3, #80]	; 0x50
 800676a:	e020      	b.n	80067ae <HAL_RCC_OscConfig+0x52e>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689a      	ldr	r2, [r3, #8]
 8006770:	23a0      	movs	r3, #160	; 0xa0
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	429a      	cmp	r2, r3
 8006776:	d10e      	bne.n	8006796 <HAL_RCC_OscConfig+0x516>
 8006778:	4b5d      	ldr	r3, [pc, #372]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 800677a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800677c:	4b5c      	ldr	r3, [pc, #368]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 800677e:	2180      	movs	r1, #128	; 0x80
 8006780:	00c9      	lsls	r1, r1, #3
 8006782:	430a      	orrs	r2, r1
 8006784:	651a      	str	r2, [r3, #80]	; 0x50
 8006786:	4b5a      	ldr	r3, [pc, #360]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 8006788:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800678a:	4b59      	ldr	r3, [pc, #356]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 800678c:	2180      	movs	r1, #128	; 0x80
 800678e:	0049      	lsls	r1, r1, #1
 8006790:	430a      	orrs	r2, r1
 8006792:	651a      	str	r2, [r3, #80]	; 0x50
 8006794:	e00b      	b.n	80067ae <HAL_RCC_OscConfig+0x52e>
 8006796:	4b56      	ldr	r3, [pc, #344]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 8006798:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800679a:	4b55      	ldr	r3, [pc, #340]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 800679c:	4956      	ldr	r1, [pc, #344]	; (80068f8 <HAL_RCC_OscConfig+0x678>)
 800679e:	400a      	ands	r2, r1
 80067a0:	651a      	str	r2, [r3, #80]	; 0x50
 80067a2:	4b53      	ldr	r3, [pc, #332]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 80067a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067a6:	4b52      	ldr	r3, [pc, #328]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 80067a8:	4955      	ldr	r1, [pc, #340]	; (8006900 <HAL_RCC_OscConfig+0x680>)
 80067aa:	400a      	ands	r2, r1
 80067ac:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d015      	beq.n	80067e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067b6:	f7fe fc3b 	bl	8005030 <HAL_GetTick>
 80067ba:	0003      	movs	r3, r0
 80067bc:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067be:	e009      	b.n	80067d4 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067c0:	f7fe fc36 	bl	8005030 <HAL_GetTick>
 80067c4:	0002      	movs	r2, r0
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	4a4e      	ldr	r2, [pc, #312]	; (8006904 <HAL_RCC_OscConfig+0x684>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d901      	bls.n	80067d4 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e11b      	b.n	8006a0c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067d4:	4b46      	ldr	r3, [pc, #280]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 80067d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067d8:	2380      	movs	r3, #128	; 0x80
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4013      	ands	r3, r2
 80067de:	d0ef      	beq.n	80067c0 <HAL_RCC_OscConfig+0x540>
 80067e0:	e014      	b.n	800680c <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067e2:	f7fe fc25 	bl	8005030 <HAL_GetTick>
 80067e6:	0003      	movs	r3, r0
 80067e8:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80067ea:	e009      	b.n	8006800 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067ec:	f7fe fc20 	bl	8005030 <HAL_GetTick>
 80067f0:	0002      	movs	r2, r0
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	4a43      	ldr	r2, [pc, #268]	; (8006904 <HAL_RCC_OscConfig+0x684>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d901      	bls.n	8006800 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e105      	b.n	8006a0c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006800:	4b3b      	ldr	r3, [pc, #236]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 8006802:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006804:	2380      	movs	r3, #128	; 0x80
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4013      	ands	r3, r2
 800680a:	d1ef      	bne.n	80067ec <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800680c:	2323      	movs	r3, #35	; 0x23
 800680e:	18fb      	adds	r3, r7, r3
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d105      	bne.n	8006822 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006816:	4b36      	ldr	r3, [pc, #216]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 8006818:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800681a:	4b35      	ldr	r3, [pc, #212]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 800681c:	493a      	ldr	r1, [pc, #232]	; (8006908 <HAL_RCC_OscConfig+0x688>)
 800681e:	400a      	ands	r2, r1
 8006820:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2220      	movs	r2, #32
 8006828:	4013      	ands	r3, r2
 800682a:	d049      	beq.n	80068c0 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d026      	beq.n	8006882 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8006834:	4b2e      	ldr	r3, [pc, #184]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 8006836:	689a      	ldr	r2, [r3, #8]
 8006838:	4b2d      	ldr	r3, [pc, #180]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 800683a:	2101      	movs	r1, #1
 800683c:	430a      	orrs	r2, r1
 800683e:	609a      	str	r2, [r3, #8]
 8006840:	4b2b      	ldr	r3, [pc, #172]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 8006842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006844:	4b2a      	ldr	r3, [pc, #168]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 8006846:	2101      	movs	r1, #1
 8006848:	430a      	orrs	r2, r1
 800684a:	635a      	str	r2, [r3, #52]	; 0x34
 800684c:	4b2f      	ldr	r3, [pc, #188]	; (800690c <HAL_RCC_OscConfig+0x68c>)
 800684e:	6a1a      	ldr	r2, [r3, #32]
 8006850:	4b2e      	ldr	r3, [pc, #184]	; (800690c <HAL_RCC_OscConfig+0x68c>)
 8006852:	2180      	movs	r1, #128	; 0x80
 8006854:	0189      	lsls	r1, r1, #6
 8006856:	430a      	orrs	r2, r1
 8006858:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800685a:	f7fe fbe9 	bl	8005030 <HAL_GetTick>
 800685e:	0003      	movs	r3, r0
 8006860:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006862:	e008      	b.n	8006876 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006864:	f7fe fbe4 	bl	8005030 <HAL_GetTick>
 8006868:	0002      	movs	r2, r0
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	2b02      	cmp	r3, #2
 8006870:	d901      	bls.n	8006876 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e0ca      	b.n	8006a0c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006876:	4b1e      	ldr	r3, [pc, #120]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	2202      	movs	r2, #2
 800687c:	4013      	ands	r3, r2
 800687e:	d0f1      	beq.n	8006864 <HAL_RCC_OscConfig+0x5e4>
 8006880:	e01e      	b.n	80068c0 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8006882:	4b1b      	ldr	r3, [pc, #108]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 8006884:	689a      	ldr	r2, [r3, #8]
 8006886:	4b1a      	ldr	r3, [pc, #104]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 8006888:	2101      	movs	r1, #1
 800688a:	438a      	bics	r2, r1
 800688c:	609a      	str	r2, [r3, #8]
 800688e:	4b1f      	ldr	r3, [pc, #124]	; (800690c <HAL_RCC_OscConfig+0x68c>)
 8006890:	6a1a      	ldr	r2, [r3, #32]
 8006892:	4b1e      	ldr	r3, [pc, #120]	; (800690c <HAL_RCC_OscConfig+0x68c>)
 8006894:	491e      	ldr	r1, [pc, #120]	; (8006910 <HAL_RCC_OscConfig+0x690>)
 8006896:	400a      	ands	r2, r1
 8006898:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800689a:	f7fe fbc9 	bl	8005030 <HAL_GetTick>
 800689e:	0003      	movs	r3, r0
 80068a0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80068a2:	e008      	b.n	80068b6 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068a4:	f7fe fbc4 	bl	8005030 <HAL_GetTick>
 80068a8:	0002      	movs	r2, r0
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d901      	bls.n	80068b6 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e0aa      	b.n	8006a0c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80068b6:	4b0e      	ldr	r3, [pc, #56]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	2202      	movs	r2, #2
 80068bc:	4013      	ands	r3, r2
 80068be:	d1f1      	bne.n	80068a4 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d100      	bne.n	80068ca <HAL_RCC_OscConfig+0x64a>
 80068c8:	e09f      	b.n	8006a0a <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	2b0c      	cmp	r3, #12
 80068ce:	d100      	bne.n	80068d2 <HAL_RCC_OscConfig+0x652>
 80068d0:	e078      	b.n	80069c4 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d159      	bne.n	800698e <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068da:	4b05      	ldr	r3, [pc, #20]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	4b04      	ldr	r3, [pc, #16]	; (80068f0 <HAL_RCC_OscConfig+0x670>)
 80068e0:	490c      	ldr	r1, [pc, #48]	; (8006914 <HAL_RCC_OscConfig+0x694>)
 80068e2:	400a      	ands	r2, r1
 80068e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068e6:	f7fe fba3 	bl	8005030 <HAL_GetTick>
 80068ea:	0003      	movs	r3, r0
 80068ec:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80068ee:	e01c      	b.n	800692a <HAL_RCC_OscConfig+0x6aa>
 80068f0:	40021000 	.word	0x40021000
 80068f4:	ffff1fff 	.word	0xffff1fff
 80068f8:	fffffeff 	.word	0xfffffeff
 80068fc:	40007000 	.word	0x40007000
 8006900:	fffffbff 	.word	0xfffffbff
 8006904:	00001388 	.word	0x00001388
 8006908:	efffffff 	.word	0xefffffff
 800690c:	40010000 	.word	0x40010000
 8006910:	ffffdfff 	.word	0xffffdfff
 8006914:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006918:	f7fe fb8a 	bl	8005030 <HAL_GetTick>
 800691c:	0002      	movs	r2, r0
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	2b02      	cmp	r3, #2
 8006924:	d901      	bls.n	800692a <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e070      	b.n	8006a0c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800692a:	4b3a      	ldr	r3, [pc, #232]	; (8006a14 <HAL_RCC_OscConfig+0x794>)
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	2380      	movs	r3, #128	; 0x80
 8006930:	049b      	lsls	r3, r3, #18
 8006932:	4013      	ands	r3, r2
 8006934:	d1f0      	bne.n	8006918 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006936:	4b37      	ldr	r3, [pc, #220]	; (8006a14 <HAL_RCC_OscConfig+0x794>)
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	4a37      	ldr	r2, [pc, #220]	; (8006a18 <HAL_RCC_OscConfig+0x798>)
 800693c:	4013      	ands	r3, r2
 800693e:	0019      	movs	r1, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006948:	431a      	orrs	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800694e:	431a      	orrs	r2, r3
 8006950:	4b30      	ldr	r3, [pc, #192]	; (8006a14 <HAL_RCC_OscConfig+0x794>)
 8006952:	430a      	orrs	r2, r1
 8006954:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006956:	4b2f      	ldr	r3, [pc, #188]	; (8006a14 <HAL_RCC_OscConfig+0x794>)
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	4b2e      	ldr	r3, [pc, #184]	; (8006a14 <HAL_RCC_OscConfig+0x794>)
 800695c:	2180      	movs	r1, #128	; 0x80
 800695e:	0449      	lsls	r1, r1, #17
 8006960:	430a      	orrs	r2, r1
 8006962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006964:	f7fe fb64 	bl	8005030 <HAL_GetTick>
 8006968:	0003      	movs	r3, r0
 800696a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800696c:	e008      	b.n	8006980 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800696e:	f7fe fb5f 	bl	8005030 <HAL_GetTick>
 8006972:	0002      	movs	r2, r0
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	2b02      	cmp	r3, #2
 800697a:	d901      	bls.n	8006980 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e045      	b.n	8006a0c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006980:	4b24      	ldr	r3, [pc, #144]	; (8006a14 <HAL_RCC_OscConfig+0x794>)
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	2380      	movs	r3, #128	; 0x80
 8006986:	049b      	lsls	r3, r3, #18
 8006988:	4013      	ands	r3, r2
 800698a:	d0f0      	beq.n	800696e <HAL_RCC_OscConfig+0x6ee>
 800698c:	e03d      	b.n	8006a0a <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800698e:	4b21      	ldr	r3, [pc, #132]	; (8006a14 <HAL_RCC_OscConfig+0x794>)
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	4b20      	ldr	r3, [pc, #128]	; (8006a14 <HAL_RCC_OscConfig+0x794>)
 8006994:	4921      	ldr	r1, [pc, #132]	; (8006a1c <HAL_RCC_OscConfig+0x79c>)
 8006996:	400a      	ands	r2, r1
 8006998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800699a:	f7fe fb49 	bl	8005030 <HAL_GetTick>
 800699e:	0003      	movs	r3, r0
 80069a0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80069a2:	e008      	b.n	80069b6 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069a4:	f7fe fb44 	bl	8005030 <HAL_GetTick>
 80069a8:	0002      	movs	r2, r0
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e02a      	b.n	8006a0c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80069b6:	4b17      	ldr	r3, [pc, #92]	; (8006a14 <HAL_RCC_OscConfig+0x794>)
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	2380      	movs	r3, #128	; 0x80
 80069bc:	049b      	lsls	r3, r3, #18
 80069be:	4013      	ands	r3, r2
 80069c0:	d1f0      	bne.n	80069a4 <HAL_RCC_OscConfig+0x724>
 80069c2:	e022      	b.n	8006a0a <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d101      	bne.n	80069d0 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e01d      	b.n	8006a0c <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80069d0:	4b10      	ldr	r3, [pc, #64]	; (8006a14 <HAL_RCC_OscConfig+0x794>)
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069d6:	69ba      	ldr	r2, [r7, #24]
 80069d8:	2380      	movs	r3, #128	; 0x80
 80069da:	025b      	lsls	r3, r3, #9
 80069dc:	401a      	ands	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d10f      	bne.n	8006a06 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80069e6:	69ba      	ldr	r2, [r7, #24]
 80069e8:	23f0      	movs	r3, #240	; 0xf0
 80069ea:	039b      	lsls	r3, r3, #14
 80069ec:	401a      	ands	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d107      	bne.n	8006a06 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80069f6:	69ba      	ldr	r2, [r7, #24]
 80069f8:	23c0      	movs	r3, #192	; 0xc0
 80069fa:	041b      	lsls	r3, r3, #16
 80069fc:	401a      	ands	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d001      	beq.n	8006a0a <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e000      	b.n	8006a0c <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	0018      	movs	r0, r3
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	b00a      	add	sp, #40	; 0x28
 8006a12:	bdb0      	pop	{r4, r5, r7, pc}
 8006a14:	40021000 	.word	0x40021000
 8006a18:	ff02ffff 	.word	0xff02ffff
 8006a1c:	feffffff 	.word	0xfeffffff

08006a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a20:	b5b0      	push	{r4, r5, r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d101      	bne.n	8006a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e10d      	b.n	8006c50 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a34:	4b88      	ldr	r3, [pc, #544]	; (8006c58 <HAL_RCC_ClockConfig+0x238>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d911      	bls.n	8006a66 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a42:	4b85      	ldr	r3, [pc, #532]	; (8006c58 <HAL_RCC_ClockConfig+0x238>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2201      	movs	r2, #1
 8006a48:	4393      	bics	r3, r2
 8006a4a:	0019      	movs	r1, r3
 8006a4c:	4b82      	ldr	r3, [pc, #520]	; (8006c58 <HAL_RCC_ClockConfig+0x238>)
 8006a4e:	683a      	ldr	r2, [r7, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a54:	4b80      	ldr	r3, [pc, #512]	; (8006c58 <HAL_RCC_ClockConfig+0x238>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	683a      	ldr	r2, [r7, #0]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d001      	beq.n	8006a66 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e0f4      	b.n	8006c50 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	d009      	beq.n	8006a84 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a70:	4b7a      	ldr	r3, [pc, #488]	; (8006c5c <HAL_RCC_ClockConfig+0x23c>)
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	22f0      	movs	r2, #240	; 0xf0
 8006a76:	4393      	bics	r3, r2
 8006a78:	0019      	movs	r1, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	689a      	ldr	r2, [r3, #8]
 8006a7e:	4b77      	ldr	r3, [pc, #476]	; (8006c5c <HAL_RCC_ClockConfig+0x23c>)
 8006a80:	430a      	orrs	r2, r1
 8006a82:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	d100      	bne.n	8006a90 <HAL_RCC_ClockConfig+0x70>
 8006a8e:	e089      	b.n	8006ba4 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d107      	bne.n	8006aa8 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a98:	4b70      	ldr	r3, [pc, #448]	; (8006c5c <HAL_RCC_ClockConfig+0x23c>)
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	2380      	movs	r3, #128	; 0x80
 8006a9e:	029b      	lsls	r3, r3, #10
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	d120      	bne.n	8006ae6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e0d3      	b.n	8006c50 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	2b03      	cmp	r3, #3
 8006aae:	d107      	bne.n	8006ac0 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ab0:	4b6a      	ldr	r3, [pc, #424]	; (8006c5c <HAL_RCC_ClockConfig+0x23c>)
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	2380      	movs	r3, #128	; 0x80
 8006ab6:	049b      	lsls	r3, r3, #18
 8006ab8:	4013      	ands	r3, r2
 8006aba:	d114      	bne.n	8006ae6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e0c7      	b.n	8006c50 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d106      	bne.n	8006ad6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ac8:	4b64      	ldr	r3, [pc, #400]	; (8006c5c <HAL_RCC_ClockConfig+0x23c>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2204      	movs	r2, #4
 8006ace:	4013      	ands	r3, r2
 8006ad0:	d109      	bne.n	8006ae6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e0bc      	b.n	8006c50 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006ad6:	4b61      	ldr	r3, [pc, #388]	; (8006c5c <HAL_RCC_ClockConfig+0x23c>)
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	2380      	movs	r3, #128	; 0x80
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4013      	ands	r3, r2
 8006ae0:	d101      	bne.n	8006ae6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e0b4      	b.n	8006c50 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ae6:	4b5d      	ldr	r3, [pc, #372]	; (8006c5c <HAL_RCC_ClockConfig+0x23c>)
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	2203      	movs	r2, #3
 8006aec:	4393      	bics	r3, r2
 8006aee:	0019      	movs	r1, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685a      	ldr	r2, [r3, #4]
 8006af4:	4b59      	ldr	r3, [pc, #356]	; (8006c5c <HAL_RCC_ClockConfig+0x23c>)
 8006af6:	430a      	orrs	r2, r1
 8006af8:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006afa:	f7fe fa99 	bl	8005030 <HAL_GetTick>
 8006afe:	0003      	movs	r3, r0
 8006b00:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d111      	bne.n	8006b2e <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006b0a:	e009      	b.n	8006b20 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b0c:	f7fe fa90 	bl	8005030 <HAL_GetTick>
 8006b10:	0002      	movs	r2, r0
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	4a52      	ldr	r2, [pc, #328]	; (8006c60 <HAL_RCC_ClockConfig+0x240>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d901      	bls.n	8006b20 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e097      	b.n	8006c50 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006b20:	4b4e      	ldr	r3, [pc, #312]	; (8006c5c <HAL_RCC_ClockConfig+0x23c>)
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	220c      	movs	r2, #12
 8006b26:	4013      	ands	r3, r2
 8006b28:	2b08      	cmp	r3, #8
 8006b2a:	d1ef      	bne.n	8006b0c <HAL_RCC_ClockConfig+0xec>
 8006b2c:	e03a      	b.n	8006ba4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	2b03      	cmp	r3, #3
 8006b34:	d111      	bne.n	8006b5a <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b36:	e009      	b.n	8006b4c <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b38:	f7fe fa7a 	bl	8005030 <HAL_GetTick>
 8006b3c:	0002      	movs	r2, r0
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	4a47      	ldr	r2, [pc, #284]	; (8006c60 <HAL_RCC_ClockConfig+0x240>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d901      	bls.n	8006b4c <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e081      	b.n	8006c50 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b4c:	4b43      	ldr	r3, [pc, #268]	; (8006c5c <HAL_RCC_ClockConfig+0x23c>)
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	220c      	movs	r2, #12
 8006b52:	4013      	ands	r3, r2
 8006b54:	2b0c      	cmp	r3, #12
 8006b56:	d1ef      	bne.n	8006b38 <HAL_RCC_ClockConfig+0x118>
 8006b58:	e024      	b.n	8006ba4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d11b      	bne.n	8006b9a <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006b62:	e009      	b.n	8006b78 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b64:	f7fe fa64 	bl	8005030 <HAL_GetTick>
 8006b68:	0002      	movs	r2, r0
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	4a3c      	ldr	r2, [pc, #240]	; (8006c60 <HAL_RCC_ClockConfig+0x240>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d901      	bls.n	8006b78 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e06b      	b.n	8006c50 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006b78:	4b38      	ldr	r3, [pc, #224]	; (8006c5c <HAL_RCC_ClockConfig+0x23c>)
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	220c      	movs	r2, #12
 8006b7e:	4013      	ands	r3, r2
 8006b80:	2b04      	cmp	r3, #4
 8006b82:	d1ef      	bne.n	8006b64 <HAL_RCC_ClockConfig+0x144>
 8006b84:	e00e      	b.n	8006ba4 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b86:	f7fe fa53 	bl	8005030 <HAL_GetTick>
 8006b8a:	0002      	movs	r2, r0
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	4a33      	ldr	r2, [pc, #204]	; (8006c60 <HAL_RCC_ClockConfig+0x240>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d901      	bls.n	8006b9a <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e05a      	b.n	8006c50 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006b9a:	4b30      	ldr	r3, [pc, #192]	; (8006c5c <HAL_RCC_ClockConfig+0x23c>)
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	220c      	movs	r2, #12
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	d1f0      	bne.n	8006b86 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ba4:	4b2c      	ldr	r3, [pc, #176]	; (8006c58 <HAL_RCC_ClockConfig+0x238>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	4013      	ands	r3, r2
 8006bac:	683a      	ldr	r2, [r7, #0]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d211      	bcs.n	8006bd6 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bb2:	4b29      	ldr	r3, [pc, #164]	; (8006c58 <HAL_RCC_ClockConfig+0x238>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	4393      	bics	r3, r2
 8006bba:	0019      	movs	r1, r3
 8006bbc:	4b26      	ldr	r3, [pc, #152]	; (8006c58 <HAL_RCC_ClockConfig+0x238>)
 8006bbe:	683a      	ldr	r2, [r7, #0]
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bc4:	4b24      	ldr	r3, [pc, #144]	; (8006c58 <HAL_RCC_ClockConfig+0x238>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	4013      	ands	r3, r2
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d001      	beq.n	8006bd6 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e03c      	b.n	8006c50 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2204      	movs	r2, #4
 8006bdc:	4013      	ands	r3, r2
 8006bde:	d009      	beq.n	8006bf4 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006be0:	4b1e      	ldr	r3, [pc, #120]	; (8006c5c <HAL_RCC_ClockConfig+0x23c>)
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	4a1f      	ldr	r2, [pc, #124]	; (8006c64 <HAL_RCC_ClockConfig+0x244>)
 8006be6:	4013      	ands	r3, r2
 8006be8:	0019      	movs	r1, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68da      	ldr	r2, [r3, #12]
 8006bee:	4b1b      	ldr	r3, [pc, #108]	; (8006c5c <HAL_RCC_ClockConfig+0x23c>)
 8006bf0:	430a      	orrs	r2, r1
 8006bf2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2208      	movs	r2, #8
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	d00a      	beq.n	8006c14 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006bfe:	4b17      	ldr	r3, [pc, #92]	; (8006c5c <HAL_RCC_ClockConfig+0x23c>)
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	4a19      	ldr	r2, [pc, #100]	; (8006c68 <HAL_RCC_ClockConfig+0x248>)
 8006c04:	4013      	ands	r3, r2
 8006c06:	0019      	movs	r1, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	00da      	lsls	r2, r3, #3
 8006c0e:	4b13      	ldr	r3, [pc, #76]	; (8006c5c <HAL_RCC_ClockConfig+0x23c>)
 8006c10:	430a      	orrs	r2, r1
 8006c12:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c14:	f000 f82e 	bl	8006c74 <HAL_RCC_GetSysClockFreq>
 8006c18:	0001      	movs	r1, r0
 8006c1a:	4b10      	ldr	r3, [pc, #64]	; (8006c5c <HAL_RCC_ClockConfig+0x23c>)
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	091b      	lsrs	r3, r3, #4
 8006c20:	220f      	movs	r2, #15
 8006c22:	4013      	ands	r3, r2
 8006c24:	4a11      	ldr	r2, [pc, #68]	; (8006c6c <HAL_RCC_ClockConfig+0x24c>)
 8006c26:	5cd3      	ldrb	r3, [r2, r3]
 8006c28:	000a      	movs	r2, r1
 8006c2a:	40da      	lsrs	r2, r3
 8006c2c:	4b10      	ldr	r3, [pc, #64]	; (8006c70 <HAL_RCC_ClockConfig+0x250>)
 8006c2e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8006c30:	250b      	movs	r5, #11
 8006c32:	197c      	adds	r4, r7, r5
 8006c34:	2000      	movs	r0, #0
 8006c36:	f7fe f9b5 	bl	8004fa4 <HAL_InitTick>
 8006c3a:	0003      	movs	r3, r0
 8006c3c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8006c3e:	197b      	adds	r3, r7, r5
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d003      	beq.n	8006c4e <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8006c46:	230b      	movs	r3, #11
 8006c48:	18fb      	adds	r3, r7, r3
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	e000      	b.n	8006c50 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	0018      	movs	r0, r3
 8006c52:	46bd      	mov	sp, r7
 8006c54:	b004      	add	sp, #16
 8006c56:	bdb0      	pop	{r4, r5, r7, pc}
 8006c58:	40022000 	.word	0x40022000
 8006c5c:	40021000 	.word	0x40021000
 8006c60:	00001388 	.word	0x00001388
 8006c64:	fffff8ff 	.word	0xfffff8ff
 8006c68:	ffffc7ff 	.word	0xffffc7ff
 8006c6c:	0800a654 	.word	0x0800a654
 8006c70:	20000014 	.word	0x20000014

08006c74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b086      	sub	sp, #24
 8006c78:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8006c7a:	4b3b      	ldr	r3, [pc, #236]	; (8006d68 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	220c      	movs	r2, #12
 8006c84:	4013      	ands	r3, r2
 8006c86:	2b08      	cmp	r3, #8
 8006c88:	d00e      	beq.n	8006ca8 <HAL_RCC_GetSysClockFreq+0x34>
 8006c8a:	2b0c      	cmp	r3, #12
 8006c8c:	d00f      	beq.n	8006cae <HAL_RCC_GetSysClockFreq+0x3a>
 8006c8e:	2b04      	cmp	r3, #4
 8006c90:	d157      	bne.n	8006d42 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006c92:	4b35      	ldr	r3, [pc, #212]	; (8006d68 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2210      	movs	r2, #16
 8006c98:	4013      	ands	r3, r2
 8006c9a:	d002      	beq.n	8006ca2 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8006c9c:	4b33      	ldr	r3, [pc, #204]	; (8006d6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006c9e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8006ca0:	e05d      	b.n	8006d5e <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8006ca2:	4b33      	ldr	r3, [pc, #204]	; (8006d70 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006ca4:	613b      	str	r3, [r7, #16]
      break;
 8006ca6:	e05a      	b.n	8006d5e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006ca8:	4b32      	ldr	r3, [pc, #200]	; (8006d74 <HAL_RCC_GetSysClockFreq+0x100>)
 8006caa:	613b      	str	r3, [r7, #16]
      break;
 8006cac:	e057      	b.n	8006d5e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	0c9b      	lsrs	r3, r3, #18
 8006cb2:	220f      	movs	r2, #15
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	4a30      	ldr	r2, [pc, #192]	; (8006d78 <HAL_RCC_GetSysClockFreq+0x104>)
 8006cb8:	5cd3      	ldrb	r3, [r2, r3]
 8006cba:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	0d9b      	lsrs	r3, r3, #22
 8006cc0:	2203      	movs	r2, #3
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006cc8:	4b27      	ldr	r3, [pc, #156]	; (8006d68 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006cca:	68da      	ldr	r2, [r3, #12]
 8006ccc:	2380      	movs	r3, #128	; 0x80
 8006cce:	025b      	lsls	r3, r3, #9
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	d00f      	beq.n	8006cf4 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8006cd4:	68b9      	ldr	r1, [r7, #8]
 8006cd6:	000a      	movs	r2, r1
 8006cd8:	0152      	lsls	r2, r2, #5
 8006cda:	1a52      	subs	r2, r2, r1
 8006cdc:	0193      	lsls	r3, r2, #6
 8006cde:	1a9b      	subs	r3, r3, r2
 8006ce0:	00db      	lsls	r3, r3, #3
 8006ce2:	185b      	adds	r3, r3, r1
 8006ce4:	025b      	lsls	r3, r3, #9
 8006ce6:	6879      	ldr	r1, [r7, #4]
 8006ce8:	0018      	movs	r0, r3
 8006cea:	f7f9 fa15 	bl	8000118 <__udivsi3>
 8006cee:	0003      	movs	r3, r0
 8006cf0:	617b      	str	r3, [r7, #20]
 8006cf2:	e023      	b.n	8006d3c <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006cf4:	4b1c      	ldr	r3, [pc, #112]	; (8006d68 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2210      	movs	r2, #16
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	d00f      	beq.n	8006d1e <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8006cfe:	68b9      	ldr	r1, [r7, #8]
 8006d00:	000a      	movs	r2, r1
 8006d02:	0152      	lsls	r2, r2, #5
 8006d04:	1a52      	subs	r2, r2, r1
 8006d06:	0193      	lsls	r3, r2, #6
 8006d08:	1a9b      	subs	r3, r3, r2
 8006d0a:	00db      	lsls	r3, r3, #3
 8006d0c:	185b      	adds	r3, r3, r1
 8006d0e:	021b      	lsls	r3, r3, #8
 8006d10:	6879      	ldr	r1, [r7, #4]
 8006d12:	0018      	movs	r0, r3
 8006d14:	f7f9 fa00 	bl	8000118 <__udivsi3>
 8006d18:	0003      	movs	r3, r0
 8006d1a:	617b      	str	r3, [r7, #20]
 8006d1c:	e00e      	b.n	8006d3c <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8006d1e:	68b9      	ldr	r1, [r7, #8]
 8006d20:	000a      	movs	r2, r1
 8006d22:	0152      	lsls	r2, r2, #5
 8006d24:	1a52      	subs	r2, r2, r1
 8006d26:	0193      	lsls	r3, r2, #6
 8006d28:	1a9b      	subs	r3, r3, r2
 8006d2a:	00db      	lsls	r3, r3, #3
 8006d2c:	185b      	adds	r3, r3, r1
 8006d2e:	029b      	lsls	r3, r3, #10
 8006d30:	6879      	ldr	r1, [r7, #4]
 8006d32:	0018      	movs	r0, r3
 8006d34:	f7f9 f9f0 	bl	8000118 <__udivsi3>
 8006d38:	0003      	movs	r3, r0
 8006d3a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	613b      	str	r3, [r7, #16]
      break;
 8006d40:	e00d      	b.n	8006d5e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006d42:	4b09      	ldr	r3, [pc, #36]	; (8006d68 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	0b5b      	lsrs	r3, r3, #13
 8006d48:	2207      	movs	r2, #7
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	3301      	adds	r3, #1
 8006d52:	2280      	movs	r2, #128	; 0x80
 8006d54:	0212      	lsls	r2, r2, #8
 8006d56:	409a      	lsls	r2, r3
 8006d58:	0013      	movs	r3, r2
 8006d5a:	613b      	str	r3, [r7, #16]
      break;
 8006d5c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006d5e:	693b      	ldr	r3, [r7, #16]
}
 8006d60:	0018      	movs	r0, r3
 8006d62:	46bd      	mov	sp, r7
 8006d64:	b006      	add	sp, #24
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	40021000 	.word	0x40021000
 8006d6c:	003d0900 	.word	0x003d0900
 8006d70:	00f42400 	.word	0x00f42400
 8006d74:	007a1200 	.word	0x007a1200
 8006d78:	0800a664 	.word	0x0800a664

08006d7c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b086      	sub	sp, #24
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2220      	movs	r2, #32
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	d106      	bne.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	2380      	movs	r3, #128	; 0x80
 8006d94:	011b      	lsls	r3, r3, #4
 8006d96:	4013      	ands	r3, r2
 8006d98:	d100      	bne.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x20>
 8006d9a:	e0dd      	b.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8006d9c:	2317      	movs	r3, #23
 8006d9e:	18fb      	adds	r3, r7, r3
 8006da0:	2200      	movs	r2, #0
 8006da2:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006da4:	4ba4      	ldr	r3, [pc, #656]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006da6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006da8:	2380      	movs	r3, #128	; 0x80
 8006daa:	055b      	lsls	r3, r3, #21
 8006dac:	4013      	ands	r3, r2
 8006dae:	d10a      	bne.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006db0:	4ba1      	ldr	r3, [pc, #644]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006db2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006db4:	4ba0      	ldr	r3, [pc, #640]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006db6:	2180      	movs	r1, #128	; 0x80
 8006db8:	0549      	lsls	r1, r1, #21
 8006dba:	430a      	orrs	r2, r1
 8006dbc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006dbe:	2317      	movs	r3, #23
 8006dc0:	18fb      	adds	r3, r7, r3
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dc6:	4b9d      	ldr	r3, [pc, #628]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	2380      	movs	r3, #128	; 0x80
 8006dcc:	005b      	lsls	r3, r3, #1
 8006dce:	4013      	ands	r3, r2
 8006dd0:	d11a      	bne.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006dd2:	4b9a      	ldr	r3, [pc, #616]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	4b99      	ldr	r3, [pc, #612]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006dd8:	2180      	movs	r1, #128	; 0x80
 8006dda:	0049      	lsls	r1, r1, #1
 8006ddc:	430a      	orrs	r2, r1
 8006dde:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006de0:	f7fe f926 	bl	8005030 <HAL_GetTick>
 8006de4:	0003      	movs	r3, r0
 8006de6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006de8:	e008      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dea:	f7fe f921 	bl	8005030 <HAL_GetTick>
 8006dee:	0002      	movs	r2, r0
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	2b64      	cmp	r3, #100	; 0x64
 8006df6:	d901      	bls.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e118      	b.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dfc:	4b8f      	ldr	r3, [pc, #572]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	2380      	movs	r3, #128	; 0x80
 8006e02:	005b      	lsls	r3, r3, #1
 8006e04:	4013      	ands	r3, r2
 8006e06:	d0f0      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006e08:	4b8b      	ldr	r3, [pc, #556]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	23c0      	movs	r3, #192	; 0xc0
 8006e0e:	039b      	lsls	r3, r3, #14
 8006e10:	4013      	ands	r3, r2
 8006e12:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685a      	ldr	r2, [r3, #4]
 8006e18:	23c0      	movs	r3, #192	; 0xc0
 8006e1a:	039b      	lsls	r3, r3, #14
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d107      	bne.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	689a      	ldr	r2, [r3, #8]
 8006e28:	23c0      	movs	r3, #192	; 0xc0
 8006e2a:	039b      	lsls	r3, r3, #14
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d013      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685a      	ldr	r2, [r3, #4]
 8006e38:	23c0      	movs	r3, #192	; 0xc0
 8006e3a:	029b      	lsls	r3, r3, #10
 8006e3c:	401a      	ands	r2, r3
 8006e3e:	23c0      	movs	r3, #192	; 0xc0
 8006e40:	029b      	lsls	r3, r3, #10
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d10a      	bne.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006e46:	4b7c      	ldr	r3, [pc, #496]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	2380      	movs	r3, #128	; 0x80
 8006e4c:	029b      	lsls	r3, r3, #10
 8006e4e:	401a      	ands	r2, r3
 8006e50:	2380      	movs	r3, #128	; 0x80
 8006e52:	029b      	lsls	r3, r3, #10
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d101      	bne.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e0e8      	b.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006e5c:	4b76      	ldr	r3, [pc, #472]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006e5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e60:	23c0      	movs	r3, #192	; 0xc0
 8006e62:	029b      	lsls	r3, r3, #10
 8006e64:	4013      	ands	r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d049      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	685a      	ldr	r2, [r3, #4]
 8006e72:	23c0      	movs	r3, #192	; 0xc0
 8006e74:	029b      	lsls	r3, r3, #10
 8006e76:	4013      	ands	r3, r2
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d004      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2220      	movs	r2, #32
 8006e84:	4013      	ands	r3, r2
 8006e86:	d10d      	bne.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	689a      	ldr	r2, [r3, #8]
 8006e8c:	23c0      	movs	r3, #192	; 0xc0
 8006e8e:	029b      	lsls	r3, r3, #10
 8006e90:	4013      	ands	r3, r2
 8006e92:	68fa      	ldr	r2, [r7, #12]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d034      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	2380      	movs	r3, #128	; 0x80
 8006e9e:	011b      	lsls	r3, r3, #4
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	d02e      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006ea4:	4b64      	ldr	r3, [pc, #400]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ea8:	4a65      	ldr	r2, [pc, #404]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006eaa:	4013      	ands	r3, r2
 8006eac:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006eae:	4b62      	ldr	r3, [pc, #392]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006eb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006eb2:	4b61      	ldr	r3, [pc, #388]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006eb4:	2180      	movs	r1, #128	; 0x80
 8006eb6:	0309      	lsls	r1, r1, #12
 8006eb8:	430a      	orrs	r2, r1
 8006eba:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ebc:	4b5e      	ldr	r3, [pc, #376]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006ebe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ec0:	4b5d      	ldr	r3, [pc, #372]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006ec2:	4960      	ldr	r1, [pc, #384]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8006ec4:	400a      	ands	r2, r1
 8006ec6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8006ec8:	4b5b      	ldr	r3, [pc, #364]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	2380      	movs	r3, #128	; 0x80
 8006ed2:	005b      	lsls	r3, r3, #1
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	d014      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ed8:	f7fe f8aa 	bl	8005030 <HAL_GetTick>
 8006edc:	0003      	movs	r3, r0
 8006ede:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ee0:	e009      	b.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ee2:	f7fe f8a5 	bl	8005030 <HAL_GetTick>
 8006ee6:	0002      	movs	r2, r0
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	4a56      	ldr	r2, [pc, #344]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d901      	bls.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e09b      	b.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ef6:	4b50      	ldr	r3, [pc, #320]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006ef8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006efa:	2380      	movs	r3, #128	; 0x80
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4013      	ands	r3, r2
 8006f00:	d0ef      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	685a      	ldr	r2, [r3, #4]
 8006f06:	23c0      	movs	r3, #192	; 0xc0
 8006f08:	029b      	lsls	r3, r3, #10
 8006f0a:	401a      	ands	r2, r3
 8006f0c:	23c0      	movs	r3, #192	; 0xc0
 8006f0e:	029b      	lsls	r3, r3, #10
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d10c      	bne.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8006f14:	4b48      	ldr	r3, [pc, #288]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a4c      	ldr	r2, [pc, #304]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	0019      	movs	r1, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685a      	ldr	r2, [r3, #4]
 8006f22:	23c0      	movs	r3, #192	; 0xc0
 8006f24:	039b      	lsls	r3, r3, #14
 8006f26:	401a      	ands	r2, r3
 8006f28:	4b43      	ldr	r3, [pc, #268]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006f2a:	430a      	orrs	r2, r1
 8006f2c:	601a      	str	r2, [r3, #0]
 8006f2e:	4b42      	ldr	r3, [pc, #264]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006f30:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	685a      	ldr	r2, [r3, #4]
 8006f36:	23c0      	movs	r3, #192	; 0xc0
 8006f38:	029b      	lsls	r3, r3, #10
 8006f3a:	401a      	ands	r2, r3
 8006f3c:	4b3e      	ldr	r3, [pc, #248]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006f3e:	430a      	orrs	r2, r1
 8006f40:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006f42:	2317      	movs	r3, #23
 8006f44:	18fb      	adds	r3, r7, r3
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d105      	bne.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f4c:	4b3a      	ldr	r3, [pc, #232]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006f4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f50:	4b39      	ldr	r3, [pc, #228]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006f52:	493f      	ldr	r1, [pc, #252]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006f54:	400a      	ands	r2, r1
 8006f56:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	4013      	ands	r3, r2
 8006f60:	d009      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f62:	4b35      	ldr	r3, [pc, #212]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f66:	2203      	movs	r2, #3
 8006f68:	4393      	bics	r3, r2
 8006f6a:	0019      	movs	r1, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	68da      	ldr	r2, [r3, #12]
 8006f70:	4b31      	ldr	r3, [pc, #196]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006f72:	430a      	orrs	r2, r1
 8006f74:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	d009      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f80:	4b2d      	ldr	r3, [pc, #180]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f84:	220c      	movs	r2, #12
 8006f86:	4393      	bics	r3, r2
 8006f88:	0019      	movs	r1, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	691a      	ldr	r2, [r3, #16]
 8006f8e:	4b2a      	ldr	r3, [pc, #168]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006f90:	430a      	orrs	r2, r1
 8006f92:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2204      	movs	r2, #4
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	d009      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f9e:	4b26      	ldr	r3, [pc, #152]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fa2:	4a2c      	ldr	r2, [pc, #176]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	0019      	movs	r1, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	695a      	ldr	r2, [r3, #20]
 8006fac:	4b22      	ldr	r3, [pc, #136]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006fae:	430a      	orrs	r2, r1
 8006fb0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2208      	movs	r2, #8
 8006fb8:	4013      	ands	r3, r2
 8006fba:	d009      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006fbc:	4b1e      	ldr	r3, [pc, #120]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fc0:	4a25      	ldr	r2, [pc, #148]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	0019      	movs	r1, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	699a      	ldr	r2, [r3, #24]
 8006fca:	4b1b      	ldr	r3, [pc, #108]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006fcc:	430a      	orrs	r2, r1
 8006fce:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	2380      	movs	r3, #128	; 0x80
 8006fd6:	005b      	lsls	r3, r3, #1
 8006fd8:	4013      	ands	r3, r2
 8006fda:	d009      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006fdc:	4b16      	ldr	r3, [pc, #88]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fe0:	4a17      	ldr	r2, [pc, #92]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	0019      	movs	r1, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	69da      	ldr	r2, [r3, #28]
 8006fea:	4b13      	ldr	r3, [pc, #76]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006fec:	430a      	orrs	r2, r1
 8006fee:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2240      	movs	r2, #64	; 0x40
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	d009      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ffa:	4b0f      	ldr	r3, [pc, #60]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ffe:	4a17      	ldr	r2, [pc, #92]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8007000:	4013      	ands	r3, r2
 8007002:	0019      	movs	r1, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007008:	4b0b      	ldr	r3, [pc, #44]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800700a:	430a      	orrs	r2, r1
 800700c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2280      	movs	r2, #128	; 0x80
 8007014:	4013      	ands	r3, r2
 8007016:	d009      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8007018:	4b07      	ldr	r3, [pc, #28]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800701a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800701c:	4a10      	ldr	r2, [pc, #64]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800701e:	4013      	ands	r3, r2
 8007020:	0019      	movs	r1, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a1a      	ldr	r2, [r3, #32]
 8007026:	4b04      	ldr	r3, [pc, #16]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007028:	430a      	orrs	r2, r1
 800702a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	0018      	movs	r0, r3
 8007030:	46bd      	mov	sp, r7
 8007032:	b006      	add	sp, #24
 8007034:	bd80      	pop	{r7, pc}
 8007036:	46c0      	nop			; (mov r8, r8)
 8007038:	40021000 	.word	0x40021000
 800703c:	40007000 	.word	0x40007000
 8007040:	fffcffff 	.word	0xfffcffff
 8007044:	fff7ffff 	.word	0xfff7ffff
 8007048:	00001388 	.word	0x00001388
 800704c:	ffcfffff 	.word	0xffcfffff
 8007050:	efffffff 	.word	0xefffffff
 8007054:	fffff3ff 	.word	0xfffff3ff
 8007058:	ffffcfff 	.word	0xffffcfff
 800705c:	fbffffff 	.word	0xfbffffff
 8007060:	fff3ffff 	.word	0xfff3ffff

08007064 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e08e      	b.n	8007194 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2221      	movs	r2, #33	; 0x21
 800707a:	5c9b      	ldrb	r3, [r3, r2]
 800707c:	b2db      	uxtb	r3, r3
 800707e:	2b00      	cmp	r3, #0
 8007080:	d107      	bne.n	8007092 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2220      	movs	r2, #32
 8007086:	2100      	movs	r1, #0
 8007088:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	0018      	movs	r0, r3
 800708e:	f7fd fad5 	bl	800463c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2221      	movs	r2, #33	; 0x21
 8007096:	2102      	movs	r1, #2
 8007098:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	22ca      	movs	r2, #202	; 0xca
 80070a0:	625a      	str	r2, [r3, #36]	; 0x24
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2253      	movs	r2, #83	; 0x53
 80070a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	0018      	movs	r0, r3
 80070ae:	f000 fc54 	bl	800795a <RTC_EnterInitMode>
 80070b2:	1e03      	subs	r3, r0, #0
 80070b4:	d009      	beq.n	80070ca <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	22ff      	movs	r2, #255	; 0xff
 80070bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2221      	movs	r2, #33	; 0x21
 80070c2:	2104      	movs	r1, #4
 80070c4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e064      	b.n	8007194 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	689a      	ldr	r2, [r3, #8]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4931      	ldr	r1, [pc, #196]	; (800719c <HAL_RTC_Init+0x138>)
 80070d6:	400a      	ands	r2, r1
 80070d8:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	6899      	ldr	r1, [r3, #8]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685a      	ldr	r2, [r3, #4]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	431a      	orrs	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	431a      	orrs	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	430a      	orrs	r2, r1
 80070f6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	68d2      	ldr	r2, [r2, #12]
 8007100:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	6919      	ldr	r1, [r3, #16]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	041a      	lsls	r2, r3, #16
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	430a      	orrs	r2, r1
 8007114:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68da      	ldr	r2, [r3, #12]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2180      	movs	r1, #128	; 0x80
 8007122:	438a      	bics	r2, r1
 8007124:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2103      	movs	r1, #3
 8007132:	438a      	bics	r2, r1
 8007134:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	69da      	ldr	r2, [r3, #28]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	431a      	orrs	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	430a      	orrs	r2, r1
 800714c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	2220      	movs	r2, #32
 8007156:	4013      	ands	r3, r2
 8007158:	d113      	bne.n	8007182 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	0018      	movs	r0, r3
 800715e:	f000 fbd5 	bl	800790c <HAL_RTC_WaitForSynchro>
 8007162:	1e03      	subs	r3, r0, #0
 8007164:	d00d      	beq.n	8007182 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	22ff      	movs	r2, #255	; 0xff
 800716c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2221      	movs	r2, #33	; 0x21
 8007172:	2104      	movs	r1, #4
 8007174:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2220      	movs	r2, #32
 800717a:	2100      	movs	r1, #0
 800717c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e008      	b.n	8007194 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	22ff      	movs	r2, #255	; 0xff
 8007188:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2221      	movs	r2, #33	; 0x21
 800718e:	2101      	movs	r1, #1
 8007190:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007192:	2300      	movs	r3, #0
  }
}
 8007194:	0018      	movs	r0, r3
 8007196:	46bd      	mov	sp, r7
 8007198:	b002      	add	sp, #8
 800719a:	bd80      	pop	{r7, pc}
 800719c:	ff8fffbf 	.word	0xff8fffbf

080071a0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80071a0:	b590      	push	{r4, r7, lr}
 80071a2:	b087      	sub	sp, #28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2220      	movs	r2, #32
 80071b0:	5c9b      	ldrb	r3, [r3, r2]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d101      	bne.n	80071ba <HAL_RTC_SetTime+0x1a>
 80071b6:	2302      	movs	r3, #2
 80071b8:	e0ad      	b.n	8007316 <HAL_RTC_SetTime+0x176>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2220      	movs	r2, #32
 80071be:	2101      	movs	r1, #1
 80071c0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2221      	movs	r2, #33	; 0x21
 80071c6:	2102      	movs	r1, #2
 80071c8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d125      	bne.n	800721c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	2240      	movs	r2, #64	; 0x40
 80071d8:	4013      	ands	r3, r2
 80071da:	d102      	bne.n	80071e2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	2200      	movs	r2, #0
 80071e0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	0018      	movs	r0, r3
 80071e8:	f000 fbe1 	bl	80079ae <RTC_ByteToBcd2>
 80071ec:	0003      	movs	r3, r0
 80071ee:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	785b      	ldrb	r3, [r3, #1]
 80071f4:	0018      	movs	r0, r3
 80071f6:	f000 fbda 	bl	80079ae <RTC_ByteToBcd2>
 80071fa:	0003      	movs	r3, r0
 80071fc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80071fe:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	789b      	ldrb	r3, [r3, #2]
 8007204:	0018      	movs	r0, r3
 8007206:	f000 fbd2 	bl	80079ae <RTC_ByteToBcd2>
 800720a:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800720c:	0022      	movs	r2, r4
 800720e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	78db      	ldrb	r3, [r3, #3]
 8007214:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007216:	4313      	orrs	r3, r2
 8007218:	617b      	str	r3, [r7, #20]
 800721a:	e017      	b.n	800724c <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	2240      	movs	r2, #64	; 0x40
 8007224:	4013      	ands	r3, r2
 8007226:	d102      	bne.n	800722e <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	2200      	movs	r2, #0
 800722c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	785b      	ldrb	r3, [r3, #1]
 8007238:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800723a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800723c:	68ba      	ldr	r2, [r7, #8]
 800723e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007240:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	78db      	ldrb	r3, [r3, #3]
 8007246:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007248:	4313      	orrs	r3, r2
 800724a:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	22ca      	movs	r2, #202	; 0xca
 8007252:	625a      	str	r2, [r3, #36]	; 0x24
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2253      	movs	r2, #83	; 0x53
 800725a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	0018      	movs	r0, r3
 8007260:	f000 fb7b 	bl	800795a <RTC_EnterInitMode>
 8007264:	1e03      	subs	r3, r0, #0
 8007266:	d00d      	beq.n	8007284 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	22ff      	movs	r2, #255	; 0xff
 800726e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2221      	movs	r2, #33	; 0x21
 8007274:	2104      	movs	r1, #4
 8007276:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2220      	movs	r2, #32
 800727c:	2100      	movs	r1, #0
 800727e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e048      	b.n	8007316 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	4925      	ldr	r1, [pc, #148]	; (8007320 <HAL_RTC_SetTime+0x180>)
 800728c:	400a      	ands	r2, r1
 800728e:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	689a      	ldr	r2, [r3, #8]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4922      	ldr	r1, [pc, #136]	; (8007324 <HAL_RTC_SetTime+0x184>)
 800729c:	400a      	ands	r2, r1
 800729e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6899      	ldr	r1, [r3, #8]
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	68da      	ldr	r2, [r3, #12]
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	431a      	orrs	r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	430a      	orrs	r2, r1
 80072b6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68da      	ldr	r2, [r3, #12]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2180      	movs	r1, #128	; 0x80
 80072c4:	438a      	bics	r2, r1
 80072c6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	2220      	movs	r2, #32
 80072d0:	4013      	ands	r3, r2
 80072d2:	d113      	bne.n	80072fc <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	0018      	movs	r0, r3
 80072d8:	f000 fb18 	bl	800790c <HAL_RTC_WaitForSynchro>
 80072dc:	1e03      	subs	r3, r0, #0
 80072de:	d00d      	beq.n	80072fc <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	22ff      	movs	r2, #255	; 0xff
 80072e6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2221      	movs	r2, #33	; 0x21
 80072ec:	2104      	movs	r1, #4
 80072ee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2220      	movs	r2, #32
 80072f4:	2100      	movs	r1, #0
 80072f6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e00c      	b.n	8007316 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	22ff      	movs	r2, #255	; 0xff
 8007302:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2221      	movs	r2, #33	; 0x21
 8007308:	2101      	movs	r1, #1
 800730a:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2220      	movs	r2, #32
 8007310:	2100      	movs	r1, #0
 8007312:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007314:	2300      	movs	r3, #0
  }
}
 8007316:	0018      	movs	r0, r3
 8007318:	46bd      	mov	sp, r7
 800731a:	b007      	add	sp, #28
 800731c:	bd90      	pop	{r4, r7, pc}
 800731e:	46c0      	nop			; (mov r8, r8)
 8007320:	007f7f7f 	.word	0x007f7f7f
 8007324:	fffbffff 	.word	0xfffbffff

08007328 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b086      	sub	sp, #24
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	045b      	lsls	r3, r3, #17
 8007346:	0c5a      	lsrs	r2, r3, #17
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a22      	ldr	r2, [pc, #136]	; (80073dc <HAL_RTC_GetTime+0xb4>)
 8007354:	4013      	ands	r3, r2
 8007356:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	0c1b      	lsrs	r3, r3, #16
 800735c:	b2db      	uxtb	r3, r3
 800735e:	223f      	movs	r2, #63	; 0x3f
 8007360:	4013      	ands	r3, r2
 8007362:	b2da      	uxtb	r2, r3
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	0a1b      	lsrs	r3, r3, #8
 800736c:	b2db      	uxtb	r3, r3
 800736e:	227f      	movs	r2, #127	; 0x7f
 8007370:	4013      	ands	r3, r2
 8007372:	b2da      	uxtb	r2, r3
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	b2db      	uxtb	r3, r3
 800737c:	227f      	movs	r2, #127	; 0x7f
 800737e:	4013      	ands	r3, r2
 8007380:	b2da      	uxtb	r2, r3
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	0c1b      	lsrs	r3, r3, #16
 800738a:	b2db      	uxtb	r3, r3
 800738c:	2240      	movs	r2, #64	; 0x40
 800738e:	4013      	ands	r3, r2
 8007390:	b2da      	uxtb	r2, r3
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d11a      	bne.n	80073d2 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	0018      	movs	r0, r3
 80073a2:	f000 fb2d 	bl	8007a00 <RTC_Bcd2ToByte>
 80073a6:	0003      	movs	r3, r0
 80073a8:	001a      	movs	r2, r3
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	785b      	ldrb	r3, [r3, #1]
 80073b2:	0018      	movs	r0, r3
 80073b4:	f000 fb24 	bl	8007a00 <RTC_Bcd2ToByte>
 80073b8:	0003      	movs	r3, r0
 80073ba:	001a      	movs	r2, r3
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	789b      	ldrb	r3, [r3, #2]
 80073c4:	0018      	movs	r0, r3
 80073c6:	f000 fb1b 	bl	8007a00 <RTC_Bcd2ToByte>
 80073ca:	0003      	movs	r3, r0
 80073cc:	001a      	movs	r2, r3
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	0018      	movs	r0, r3
 80073d6:	46bd      	mov	sp, r7
 80073d8:	b006      	add	sp, #24
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	007f7f7f 	.word	0x007f7f7f

080073e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80073e0:	b590      	push	{r4, r7, lr}
 80073e2:	b087      	sub	sp, #28
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2220      	movs	r2, #32
 80073f0:	5c9b      	ldrb	r3, [r3, r2]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d101      	bne.n	80073fa <HAL_RTC_SetDate+0x1a>
 80073f6:	2302      	movs	r3, #2
 80073f8:	e099      	b.n	800752e <HAL_RTC_SetDate+0x14e>
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2220      	movs	r2, #32
 80073fe:	2101      	movs	r1, #1
 8007400:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2221      	movs	r2, #33	; 0x21
 8007406:	2102      	movs	r1, #2
 8007408:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10e      	bne.n	800742e <HAL_RTC_SetDate+0x4e>
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	785b      	ldrb	r3, [r3, #1]
 8007414:	001a      	movs	r2, r3
 8007416:	2310      	movs	r3, #16
 8007418:	4013      	ands	r3, r2
 800741a:	d008      	beq.n	800742e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	785b      	ldrb	r3, [r3, #1]
 8007420:	2210      	movs	r2, #16
 8007422:	4393      	bics	r3, r2
 8007424:	b2db      	uxtb	r3, r3
 8007426:	330a      	adds	r3, #10
 8007428:	b2da      	uxtb	r2, r3
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d11c      	bne.n	800746e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	78db      	ldrb	r3, [r3, #3]
 8007438:	0018      	movs	r0, r3
 800743a:	f000 fab8 	bl	80079ae <RTC_ByteToBcd2>
 800743e:	0003      	movs	r3, r0
 8007440:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	785b      	ldrb	r3, [r3, #1]
 8007446:	0018      	movs	r0, r3
 8007448:	f000 fab1 	bl	80079ae <RTC_ByteToBcd2>
 800744c:	0003      	movs	r3, r0
 800744e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007450:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	789b      	ldrb	r3, [r3, #2]
 8007456:	0018      	movs	r0, r3
 8007458:	f000 faa9 	bl	80079ae <RTC_ByteToBcd2>
 800745c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800745e:	0022      	movs	r2, r4
 8007460:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007468:	4313      	orrs	r3, r2
 800746a:	617b      	str	r3, [r7, #20]
 800746c:	e00e      	b.n	800748c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	78db      	ldrb	r3, [r3, #3]
 8007472:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	785b      	ldrb	r3, [r3, #1]
 8007478:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800747a:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8007480:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007488:	4313      	orrs	r3, r2
 800748a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	22ca      	movs	r2, #202	; 0xca
 8007492:	625a      	str	r2, [r3, #36]	; 0x24
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2253      	movs	r2, #83	; 0x53
 800749a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	0018      	movs	r0, r3
 80074a0:	f000 fa5b 	bl	800795a <RTC_EnterInitMode>
 80074a4:	1e03      	subs	r3, r0, #0
 80074a6:	d00d      	beq.n	80074c4 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	22ff      	movs	r2, #255	; 0xff
 80074ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2221      	movs	r2, #33	; 0x21
 80074b4:	2104      	movs	r1, #4
 80074b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2220      	movs	r2, #32
 80074bc:	2100      	movs	r1, #0
 80074be:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e034      	b.n	800752e <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	697a      	ldr	r2, [r7, #20]
 80074ca:	491b      	ldr	r1, [pc, #108]	; (8007538 <HAL_RTC_SetDate+0x158>)
 80074cc:	400a      	ands	r2, r1
 80074ce:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68da      	ldr	r2, [r3, #12]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2180      	movs	r1, #128	; 0x80
 80074dc:	438a      	bics	r2, r1
 80074de:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	2220      	movs	r2, #32
 80074e8:	4013      	ands	r3, r2
 80074ea:	d113      	bne.n	8007514 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	0018      	movs	r0, r3
 80074f0:	f000 fa0c 	bl	800790c <HAL_RTC_WaitForSynchro>
 80074f4:	1e03      	subs	r3, r0, #0
 80074f6:	d00d      	beq.n	8007514 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	22ff      	movs	r2, #255	; 0xff
 80074fe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2221      	movs	r2, #33	; 0x21
 8007504:	2104      	movs	r1, #4
 8007506:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2220      	movs	r2, #32
 800750c:	2100      	movs	r1, #0
 800750e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e00c      	b.n	800752e <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	22ff      	movs	r2, #255	; 0xff
 800751a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2221      	movs	r2, #33	; 0x21
 8007520:	2101      	movs	r1, #1
 8007522:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2220      	movs	r2, #32
 8007528:	2100      	movs	r1, #0
 800752a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800752c:	2300      	movs	r3, #0
  }
}
 800752e:	0018      	movs	r0, r3
 8007530:	46bd      	mov	sp, r7
 8007532:	b007      	add	sp, #28
 8007534:	bd90      	pop	{r4, r7, pc}
 8007536:	46c0      	nop			; (mov r8, r8)
 8007538:	00ffff3f 	.word	0x00ffff3f

0800753c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b086      	sub	sp, #24
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	4a21      	ldr	r2, [pc, #132]	; (80075d4 <HAL_RTC_GetDate+0x98>)
 8007550:	4013      	ands	r3, r2
 8007552:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	0c1b      	lsrs	r3, r3, #16
 8007558:	b2da      	uxtb	r2, r3
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	0a1b      	lsrs	r3, r3, #8
 8007562:	b2db      	uxtb	r3, r3
 8007564:	221f      	movs	r2, #31
 8007566:	4013      	ands	r3, r2
 8007568:	b2da      	uxtb	r2, r3
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	b2db      	uxtb	r3, r3
 8007572:	223f      	movs	r2, #63	; 0x3f
 8007574:	4013      	ands	r3, r2
 8007576:	b2da      	uxtb	r2, r3
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	0b5b      	lsrs	r3, r3, #13
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2207      	movs	r2, #7
 8007584:	4013      	ands	r3, r2
 8007586:	b2da      	uxtb	r2, r3
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d11a      	bne.n	80075c8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	78db      	ldrb	r3, [r3, #3]
 8007596:	0018      	movs	r0, r3
 8007598:	f000 fa32 	bl	8007a00 <RTC_Bcd2ToByte>
 800759c:	0003      	movs	r3, r0
 800759e:	001a      	movs	r2, r3
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	785b      	ldrb	r3, [r3, #1]
 80075a8:	0018      	movs	r0, r3
 80075aa:	f000 fa29 	bl	8007a00 <RTC_Bcd2ToByte>
 80075ae:	0003      	movs	r3, r0
 80075b0:	001a      	movs	r2, r3
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	789b      	ldrb	r3, [r3, #2]
 80075ba:	0018      	movs	r0, r3
 80075bc:	f000 fa20 	bl	8007a00 <RTC_Bcd2ToByte>
 80075c0:	0003      	movs	r3, r0
 80075c2:	001a      	movs	r2, r3
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	0018      	movs	r0, r3
 80075cc:	46bd      	mov	sp, r7
 80075ce:	b006      	add	sp, #24
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	46c0      	nop			; (mov r8, r8)
 80075d4:	00ffff3f 	.word	0x00ffff3f

080075d8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80075d8:	b590      	push	{r4, r7, lr}
 80075da:	b089      	sub	sp, #36	; 0x24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2220      	movs	r2, #32
 80075e8:	5c9b      	ldrb	r3, [r3, r2]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d101      	bne.n	80075f2 <HAL_RTC_SetAlarm_IT+0x1a>
 80075ee:	2302      	movs	r3, #2
 80075f0:	e130      	b.n	8007854 <HAL_RTC_SetAlarm_IT+0x27c>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2220      	movs	r2, #32
 80075f6:	2101      	movs	r1, #1
 80075f8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2221      	movs	r2, #33	; 0x21
 80075fe:	2102      	movs	r1, #2
 8007600:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d136      	bne.n	8007676 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	2240      	movs	r2, #64	; 0x40
 8007610:	4013      	ands	r3, r2
 8007612:	d102      	bne.n	800761a <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	2200      	movs	r2, #0
 8007618:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	0018      	movs	r0, r3
 8007620:	f000 f9c5 	bl	80079ae <RTC_ByteToBcd2>
 8007624:	0003      	movs	r3, r0
 8007626:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	785b      	ldrb	r3, [r3, #1]
 800762c:	0018      	movs	r0, r3
 800762e:	f000 f9be 	bl	80079ae <RTC_ByteToBcd2>
 8007632:	0003      	movs	r3, r0
 8007634:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007636:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	789b      	ldrb	r3, [r3, #2]
 800763c:	0018      	movs	r0, r3
 800763e:	f000 f9b6 	bl	80079ae <RTC_ByteToBcd2>
 8007642:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007644:	0022      	movs	r2, r4
 8007646:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	78db      	ldrb	r3, [r3, #3]
 800764c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800764e:	431a      	orrs	r2, r3
 8007650:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	2220      	movs	r2, #32
 8007656:	5c9b      	ldrb	r3, [r3, r2]
 8007658:	0018      	movs	r0, r3
 800765a:	f000 f9a8 	bl	80079ae <RTC_ByteToBcd2>
 800765e:	0003      	movs	r3, r0
 8007660:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007662:	0022      	movs	r2, r4
 8007664:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800766a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007670:	4313      	orrs	r3, r2
 8007672:	61fb      	str	r3, [r7, #28]
 8007674:	e022      	b.n	80076bc <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	2240      	movs	r2, #64	; 0x40
 800767e:	4013      	ands	r3, r2
 8007680:	d102      	bne.n	8007688 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	2200      	movs	r2, #0
 8007686:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	785b      	ldrb	r3, [r3, #1]
 8007692:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007694:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800769a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	78db      	ldrb	r3, [r3, #3]
 80076a0:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80076a2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	2120      	movs	r1, #32
 80076a8:	5c5b      	ldrb	r3, [r3, r1]
 80076aa:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80076ac:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80076b2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80076b8:	4313      	orrs	r3, r2
 80076ba:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	685a      	ldr	r2, [r3, #4]
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	699b      	ldr	r3, [r3, #24]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	22ca      	movs	r2, #202	; 0xca
 80076ce:	625a      	str	r2, [r3, #36]	; 0x24
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2253      	movs	r2, #83	; 0x53
 80076d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076dc:	2380      	movs	r3, #128	; 0x80
 80076de:	005b      	lsls	r3, r3, #1
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d14e      	bne.n	8007782 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	689a      	ldr	r2, [r3, #8]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	495b      	ldr	r1, [pc, #364]	; (800785c <HAL_RTC_SetAlarm_IT+0x284>)
 80076f0:	400a      	ands	r2, r1
 80076f2:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	22ff      	movs	r2, #255	; 0xff
 80076fc:	401a      	ands	r2, r3
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4957      	ldr	r1, [pc, #348]	; (8007860 <HAL_RTC_SetAlarm_IT+0x288>)
 8007704:	430a      	orrs	r2, r1
 8007706:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007708:	f7fd fc92 	bl	8005030 <HAL_GetTick>
 800770c:	0003      	movs	r3, r0
 800770e:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007710:	e016      	b.n	8007740 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007712:	f7fd fc8d 	bl	8005030 <HAL_GetTick>
 8007716:	0002      	movs	r2, r0
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	1ad2      	subs	r2, r2, r3
 800771c:	23fa      	movs	r3, #250	; 0xfa
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	429a      	cmp	r2, r3
 8007722:	d90d      	bls.n	8007740 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	22ff      	movs	r2, #255	; 0xff
 800772a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2221      	movs	r2, #33	; 0x21
 8007730:	2103      	movs	r1, #3
 8007732:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2220      	movs	r2, #32
 8007738:	2100      	movs	r1, #0
 800773a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800773c:	2303      	movs	r3, #3
 800773e:	e089      	b.n	8007854 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	2201      	movs	r2, #1
 8007748:	4013      	ands	r3, r2
 800774a:	d0e2      	beq.n	8007712 <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	69fa      	ldr	r2, [r7, #28]
 8007752:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	69ba      	ldr	r2, [r7, #24]
 800775a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	689a      	ldr	r2, [r3, #8]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2180      	movs	r1, #128	; 0x80
 8007768:	0049      	lsls	r1, r1, #1
 800776a:	430a      	orrs	r2, r1
 800776c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	689a      	ldr	r2, [r3, #8]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2180      	movs	r1, #128	; 0x80
 800777a:	0149      	lsls	r1, r1, #5
 800777c:	430a      	orrs	r2, r1
 800777e:	609a      	str	r2, [r3, #8]
 8007780:	e04d      	b.n	800781e <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	689a      	ldr	r2, [r3, #8]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4935      	ldr	r1, [pc, #212]	; (8007864 <HAL_RTC_SetAlarm_IT+0x28c>)
 800778e:	400a      	ands	r2, r1
 8007790:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	22ff      	movs	r2, #255	; 0xff
 800779a:	401a      	ands	r2, r3
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4931      	ldr	r1, [pc, #196]	; (8007868 <HAL_RTC_SetAlarm_IT+0x290>)
 80077a2:	430a      	orrs	r2, r1
 80077a4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80077a6:	f7fd fc43 	bl	8005030 <HAL_GetTick>
 80077aa:	0003      	movs	r3, r0
 80077ac:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80077ae:	e016      	b.n	80077de <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80077b0:	f7fd fc3e 	bl	8005030 <HAL_GetTick>
 80077b4:	0002      	movs	r2, r0
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	1ad2      	subs	r2, r2, r3
 80077ba:	23fa      	movs	r3, #250	; 0xfa
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	429a      	cmp	r2, r3
 80077c0:	d90d      	bls.n	80077de <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	22ff      	movs	r2, #255	; 0xff
 80077c8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2221      	movs	r2, #33	; 0x21
 80077ce:	2103      	movs	r1, #3
 80077d0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2220      	movs	r2, #32
 80077d6:	2100      	movs	r1, #0
 80077d8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e03a      	b.n	8007854 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	2202      	movs	r2, #2
 80077e6:	4013      	ands	r3, r2
 80077e8:	d0e2      	beq.n	80077b0 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	69fa      	ldr	r2, [r7, #28]
 80077f0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	69ba      	ldr	r2, [r7, #24]
 80077f8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	689a      	ldr	r2, [r3, #8]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2180      	movs	r1, #128	; 0x80
 8007806:	0089      	lsls	r1, r1, #2
 8007808:	430a      	orrs	r2, r1
 800780a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	689a      	ldr	r2, [r3, #8]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2180      	movs	r1, #128	; 0x80
 8007818:	0189      	lsls	r1, r1, #6
 800781a:	430a      	orrs	r2, r1
 800781c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800781e:	4b13      	ldr	r3, [pc, #76]	; (800786c <HAL_RTC_SetAlarm_IT+0x294>)
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	4b12      	ldr	r3, [pc, #72]	; (800786c <HAL_RTC_SetAlarm_IT+0x294>)
 8007824:	2180      	movs	r1, #128	; 0x80
 8007826:	0289      	lsls	r1, r1, #10
 8007828:	430a      	orrs	r2, r1
 800782a:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800782c:	4b0f      	ldr	r3, [pc, #60]	; (800786c <HAL_RTC_SetAlarm_IT+0x294>)
 800782e:	689a      	ldr	r2, [r3, #8]
 8007830:	4b0e      	ldr	r3, [pc, #56]	; (800786c <HAL_RTC_SetAlarm_IT+0x294>)
 8007832:	2180      	movs	r1, #128	; 0x80
 8007834:	0289      	lsls	r1, r1, #10
 8007836:	430a      	orrs	r2, r1
 8007838:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	22ff      	movs	r2, #255	; 0xff
 8007840:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2221      	movs	r2, #33	; 0x21
 8007846:	2101      	movs	r1, #1
 8007848:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2220      	movs	r2, #32
 800784e:	2100      	movs	r1, #0
 8007850:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	0018      	movs	r0, r3
 8007856:	46bd      	mov	sp, r7
 8007858:	b009      	add	sp, #36	; 0x24
 800785a:	bd90      	pop	{r4, r7, pc}
 800785c:	fffffeff 	.word	0xfffffeff
 8007860:	fffffe7f 	.word	0xfffffe7f
 8007864:	fffffdff 	.word	0xfffffdff
 8007868:	fffffd7f 	.word	0xfffffd7f
 800786c:	40010400 	.word	0x40010400

08007870 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	689a      	ldr	r2, [r3, #8]
 800787e:	2380      	movs	r3, #128	; 0x80
 8007880:	015b      	lsls	r3, r3, #5
 8007882:	4013      	ands	r3, r2
 8007884:	d014      	beq.n	80078b0 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68da      	ldr	r2, [r3, #12]
 800788c:	2380      	movs	r3, #128	; 0x80
 800788e:	005b      	lsls	r3, r3, #1
 8007890:	4013      	ands	r3, r2
 8007892:	d00d      	beq.n	80078b0 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	0018      	movs	r0, r3
 8007898:	f7fb fd6c 	bl	8003374 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	22ff      	movs	r2, #255	; 0xff
 80078a4:	401a      	ands	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4915      	ldr	r1, [pc, #84]	; (8007900 <HAL_RTC_AlarmIRQHandler+0x90>)
 80078ac:	430a      	orrs	r2, r1
 80078ae:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	689a      	ldr	r2, [r3, #8]
 80078b6:	2380      	movs	r3, #128	; 0x80
 80078b8:	019b      	lsls	r3, r3, #6
 80078ba:	4013      	ands	r3, r2
 80078bc:	d014      	beq.n	80078e8 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68da      	ldr	r2, [r3, #12]
 80078c4:	2380      	movs	r3, #128	; 0x80
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	4013      	ands	r3, r2
 80078ca:	d00d      	beq.n	80078e8 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	0018      	movs	r0, r3
 80078d0:	f7fb fd68 	bl	80033a4 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	22ff      	movs	r2, #255	; 0xff
 80078dc:	401a      	ands	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4908      	ldr	r1, [pc, #32]	; (8007904 <HAL_RTC_AlarmIRQHandler+0x94>)
 80078e4:	430a      	orrs	r2, r1
 80078e6:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80078e8:	4b07      	ldr	r3, [pc, #28]	; (8007908 <HAL_RTC_AlarmIRQHandler+0x98>)
 80078ea:	2280      	movs	r2, #128	; 0x80
 80078ec:	0292      	lsls	r2, r2, #10
 80078ee:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2221      	movs	r2, #33	; 0x21
 80078f4:	2101      	movs	r1, #1
 80078f6:	5499      	strb	r1, [r3, r2]
}
 80078f8:	46c0      	nop			; (mov r8, r8)
 80078fa:	46bd      	mov	sp, r7
 80078fc:	b002      	add	sp, #8
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	fffffe7f 	.word	0xfffffe7f
 8007904:	fffffd7f 	.word	0xfffffd7f
 8007908:	40010400 	.word	0x40010400

0800790c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68da      	ldr	r2, [r3, #12]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	21a0      	movs	r1, #160	; 0xa0
 8007920:	438a      	bics	r2, r1
 8007922:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007924:	f7fd fb84 	bl	8005030 <HAL_GetTick>
 8007928:	0003      	movs	r3, r0
 800792a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800792c:	e00a      	b.n	8007944 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800792e:	f7fd fb7f 	bl	8005030 <HAL_GetTick>
 8007932:	0002      	movs	r2, r0
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	1ad2      	subs	r2, r2, r3
 8007938:	23fa      	movs	r3, #250	; 0xfa
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	429a      	cmp	r2, r3
 800793e:	d901      	bls.n	8007944 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007940:	2303      	movs	r3, #3
 8007942:	e006      	b.n	8007952 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	2220      	movs	r2, #32
 800794c:	4013      	ands	r3, r2
 800794e:	d0ee      	beq.n	800792e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	0018      	movs	r0, r3
 8007954:	46bd      	mov	sp, r7
 8007956:	b004      	add	sp, #16
 8007958:	bd80      	pop	{r7, pc}

0800795a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b084      	sub	sp, #16
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	2240      	movs	r2, #64	; 0x40
 800796a:	4013      	ands	r3, r2
 800796c:	d11a      	bne.n	80079a4 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2201      	movs	r2, #1
 8007974:	4252      	negs	r2, r2
 8007976:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007978:	f7fd fb5a 	bl	8005030 <HAL_GetTick>
 800797c:	0003      	movs	r3, r0
 800797e:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007980:	e00a      	b.n	8007998 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007982:	f7fd fb55 	bl	8005030 <HAL_GetTick>
 8007986:	0002      	movs	r2, r0
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	1ad2      	subs	r2, r2, r3
 800798c:	23fa      	movs	r3, #250	; 0xfa
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	429a      	cmp	r2, r3
 8007992:	d901      	bls.n	8007998 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8007994:	2303      	movs	r3, #3
 8007996:	e006      	b.n	80079a6 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	2240      	movs	r2, #64	; 0x40
 80079a0:	4013      	ands	r3, r2
 80079a2:	d0ee      	beq.n	8007982 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	0018      	movs	r0, r3
 80079a8:	46bd      	mov	sp, r7
 80079aa:	b004      	add	sp, #16
 80079ac:	bd80      	pop	{r7, pc}

080079ae <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b084      	sub	sp, #16
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	0002      	movs	r2, r0
 80079b6:	1dfb      	adds	r3, r7, #7
 80079b8:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80079ba:	2300      	movs	r3, #0
 80079bc:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80079be:	230b      	movs	r3, #11
 80079c0:	18fb      	adds	r3, r7, r3
 80079c2:	1dfa      	adds	r2, r7, #7
 80079c4:	7812      	ldrb	r2, [r2, #0]
 80079c6:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 80079c8:	e008      	b.n	80079dc <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	3301      	adds	r3, #1
 80079ce:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80079d0:	220b      	movs	r2, #11
 80079d2:	18bb      	adds	r3, r7, r2
 80079d4:	18ba      	adds	r2, r7, r2
 80079d6:	7812      	ldrb	r2, [r2, #0]
 80079d8:	3a0a      	subs	r2, #10
 80079da:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 80079dc:	230b      	movs	r3, #11
 80079de:	18fb      	adds	r3, r7, r3
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	2b09      	cmp	r3, #9
 80079e4:	d8f1      	bhi.n	80079ca <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	011b      	lsls	r3, r3, #4
 80079ec:	b2da      	uxtb	r2, r3
 80079ee:	230b      	movs	r3, #11
 80079f0:	18fb      	adds	r3, r7, r3
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	b2db      	uxtb	r3, r3
}
 80079f8:	0018      	movs	r0, r3
 80079fa:	46bd      	mov	sp, r7
 80079fc:	b004      	add	sp, #16
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	0002      	movs	r2, r0
 8007a08:	1dfb      	adds	r3, r7, #7
 8007a0a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8007a0c:	1dfb      	adds	r3, r7, #7
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	091b      	lsrs	r3, r3, #4
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	001a      	movs	r2, r3
 8007a16:	0013      	movs	r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	189b      	adds	r3, r3, r2
 8007a1c:	005b      	lsls	r3, r3, #1
 8007a1e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	b2da      	uxtb	r2, r3
 8007a24:	1dfb      	adds	r3, r7, #7
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	210f      	movs	r1, #15
 8007a2a:	400b      	ands	r3, r1
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	18d3      	adds	r3, r2, r3
 8007a30:	b2db      	uxtb	r3, r3
}
 8007a32:	0018      	movs	r0, r3
 8007a34:	46bd      	mov	sp, r7
 8007a36:	b004      	add	sp, #16
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <HAL_RTCEx_SetSmoothCalib>:
  *         must be equal to SMOOTHCALIB_PLUSPULSES_RESET and the field
  *         SmoothCalibMinusPulsesValue mut be equal to 0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef *hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b086      	sub	sp, #24
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	60f8      	str	r0, [r7, #12]
 8007a42:	60b9      	str	r1, [r7, #8]
 8007a44:	607a      	str	r2, [r7, #4]
 8007a46:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2220      	movs	r2, #32
 8007a4c:	5c9b      	ldrb	r3, [r3, r2]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d101      	bne.n	8007a56 <HAL_RTCEx_SetSmoothCalib+0x1c>
 8007a52:	2302      	movs	r3, #2
 8007a54:	e04f      	b.n	8007af6 <HAL_RTCEx_SetSmoothCalib+0xbc>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2220      	movs	r2, #32
 8007a5a:	2101      	movs	r1, #1
 8007a5c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2221      	movs	r2, #33	; 0x21
 8007a62:	2102      	movs	r1, #2
 8007a64:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	22ca      	movs	r2, #202	; 0xca
 8007a6c:	625a      	str	r2, [r3, #36]	; 0x24
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2253      	movs	r2, #83	; 0x53
 8007a74:	625a      	str	r2, [r3, #36]	; 0x24

  /* check if a calibration is pending*/
  if ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68da      	ldr	r2, [r3, #12]
 8007a7c:	2380      	movs	r3, #128	; 0x80
 8007a7e:	025b      	lsls	r3, r3, #9
 8007a80:	4013      	ands	r3, r2
 8007a82:	d022      	beq.n	8007aca <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 8007a84:	f7fd fad4 	bl	8005030 <HAL_GetTick>
 8007a88:	0003      	movs	r3, r0
 8007a8a:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 8007a8c:	e016      	b.n	8007abc <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007a8e:	f7fd facf 	bl	8005030 <HAL_GetTick>
 8007a92:	0002      	movs	r2, r0
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	1ad2      	subs	r2, r2, r3
 8007a98:	23fa      	movs	r3, #250	; 0xfa
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d90d      	bls.n	8007abc <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	22ff      	movs	r2, #255	; 0xff
 8007aa6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2221      	movs	r2, #33	; 0x21
 8007aac:	2103      	movs	r1, #3
 8007aae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2220      	movs	r2, #32
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	e01c      	b.n	8007af6 <HAL_RTCEx_SetSmoothCalib+0xbc>
    while ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	68da      	ldr	r2, [r3, #12]
 8007ac2:	2380      	movs	r3, #128	; 0x80
 8007ac4:	025b      	lsls	r3, r3, #9
 8007ac6:	4013      	ands	r3, r2
 8007ac8:	d1e1      	bne.n	8007a8e <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	431a      	orrs	r2, r3
 8007ad0:	0011      	movs	r1, r2
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	683a      	ldr	r2, [r7, #0]
 8007ad8:	430a      	orrs	r2, r1
 8007ada:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	22ff      	movs	r2, #255	; 0xff
 8007ae2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2221      	movs	r2, #33	; 0x21
 8007ae8:	2101      	movs	r1, #1
 8007aea:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2220      	movs	r2, #32
 8007af0:	2100      	movs	r1, #0
 8007af2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	0018      	movs	r0, r3
 8007af8:	46bd      	mov	sp, r7
 8007afa:	b006      	add	sp, #24
 8007afc:	bd80      	pop	{r7, pc}
	...

08007b00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d101      	bne.n	8007b12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e059      	b.n	8007bc6 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2251      	movs	r2, #81	; 0x51
 8007b1c:	5c9b      	ldrb	r3, [r3, r2]
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d107      	bne.n	8007b34 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2250      	movs	r2, #80	; 0x50
 8007b28:	2100      	movs	r1, #0
 8007b2a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	0018      	movs	r0, r3
 8007b30:	f7fc fda4 	bl	800467c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2251      	movs	r2, #81	; 0x51
 8007b38:	2102      	movs	r1, #2
 8007b3a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2140      	movs	r1, #64	; 0x40
 8007b48:	438a      	bics	r2, r1
 8007b4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	685a      	ldr	r2, [r3, #4]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	431a      	orrs	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	431a      	orrs	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	431a      	orrs	r2, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	695b      	ldr	r3, [r3, #20]
 8007b66:	431a      	orrs	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6999      	ldr	r1, [r3, #24]
 8007b6c:	2380      	movs	r3, #128	; 0x80
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	400b      	ands	r3, r1
 8007b72:	431a      	orrs	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	69db      	ldr	r3, [r3, #28]
 8007b78:	431a      	orrs	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a1b      	ldr	r3, [r3, #32]
 8007b7e:	431a      	orrs	r2, r3
 8007b80:	0011      	movs	r1, r2
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	430a      	orrs	r2, r1
 8007b8c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	699b      	ldr	r3, [r3, #24]
 8007b92:	0c1b      	lsrs	r3, r3, #16
 8007b94:	2204      	movs	r2, #4
 8007b96:	4013      	ands	r3, r2
 8007b98:	0019      	movs	r1, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	430a      	orrs	r2, r1
 8007ba4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	69da      	ldr	r2, [r3, #28]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4907      	ldr	r1, [pc, #28]	; (8007bd0 <HAL_SPI_Init+0xd0>)
 8007bb2:	400a      	ands	r2, r1
 8007bb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2251      	movs	r2, #81	; 0x51
 8007bc0:	2101      	movs	r1, #1
 8007bc2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	0018      	movs	r0, r3
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	b002      	add	sp, #8
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	46c0      	nop			; (mov r8, r8)
 8007bd0:	fffff7ff 	.word	0xfffff7ff

08007bd4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b088      	sub	sp, #32
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	603b      	str	r3, [r7, #0]
 8007be0:	1dbb      	adds	r3, r7, #6
 8007be2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007be4:	231f      	movs	r3, #31
 8007be6:	18fb      	adds	r3, r7, r3
 8007be8:	2200      	movs	r2, #0
 8007bea:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2250      	movs	r2, #80	; 0x50
 8007bf0:	5c9b      	ldrb	r3, [r3, r2]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d101      	bne.n	8007bfa <HAL_SPI_Transmit+0x26>
 8007bf6:	2302      	movs	r3, #2
 8007bf8:	e136      	b.n	8007e68 <HAL_SPI_Transmit+0x294>
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2250      	movs	r2, #80	; 0x50
 8007bfe:	2101      	movs	r1, #1
 8007c00:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c02:	f7fd fa15 	bl	8005030 <HAL_GetTick>
 8007c06:	0003      	movs	r3, r0
 8007c08:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007c0a:	2316      	movs	r3, #22
 8007c0c:	18fb      	adds	r3, r7, r3
 8007c0e:	1dba      	adds	r2, r7, #6
 8007c10:	8812      	ldrh	r2, [r2, #0]
 8007c12:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2251      	movs	r2, #81	; 0x51
 8007c18:	5c9b      	ldrb	r3, [r3, r2]
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d004      	beq.n	8007c2a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8007c20:	231f      	movs	r3, #31
 8007c22:	18fb      	adds	r3, r7, r3
 8007c24:	2202      	movs	r2, #2
 8007c26:	701a      	strb	r2, [r3, #0]
    goto error;
 8007c28:	e113      	b.n	8007e52 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d003      	beq.n	8007c38 <HAL_SPI_Transmit+0x64>
 8007c30:	1dbb      	adds	r3, r7, #6
 8007c32:	881b      	ldrh	r3, [r3, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d104      	bne.n	8007c42 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8007c38:	231f      	movs	r3, #31
 8007c3a:	18fb      	adds	r3, r7, r3
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	701a      	strb	r2, [r3, #0]
    goto error;
 8007c40:	e107      	b.n	8007e52 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2251      	movs	r2, #81	; 0x51
 8007c46:	2103      	movs	r1, #3
 8007c48:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	68ba      	ldr	r2, [r7, #8]
 8007c54:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	1dba      	adds	r2, r7, #6
 8007c5a:	8812      	ldrh	r2, [r2, #0]
 8007c5c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	1dba      	adds	r2, r7, #6
 8007c62:	8812      	ldrh	r2, [r2, #0]
 8007c64:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2200      	movs	r2, #0
 8007c82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	689a      	ldr	r2, [r3, #8]
 8007c88:	2380      	movs	r3, #128	; 0x80
 8007c8a:	021b      	lsls	r3, r3, #8
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d108      	bne.n	8007ca2 <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2180      	movs	r1, #128	; 0x80
 8007c9c:	01c9      	lsls	r1, r1, #7
 8007c9e:	430a      	orrs	r2, r1
 8007ca0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2240      	movs	r2, #64	; 0x40
 8007caa:	4013      	ands	r3, r2
 8007cac:	2b40      	cmp	r3, #64	; 0x40
 8007cae:	d007      	beq.n	8007cc0 <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2140      	movs	r1, #64	; 0x40
 8007cbc:	430a      	orrs	r2, r1
 8007cbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	68da      	ldr	r2, [r3, #12]
 8007cc4:	2380      	movs	r3, #128	; 0x80
 8007cc6:	011b      	lsls	r3, r3, #4
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d14e      	bne.n	8007d6a <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d004      	beq.n	8007cde <HAL_SPI_Transmit+0x10a>
 8007cd4:	2316      	movs	r3, #22
 8007cd6:	18fb      	adds	r3, r7, r3
 8007cd8:	881b      	ldrh	r3, [r3, #0]
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d13f      	bne.n	8007d5e <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce2:	881a      	ldrh	r2, [r3, #0]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cee:	1c9a      	adds	r2, r3, #2
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007d02:	e02c      	b.n	8007d5e <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	2202      	movs	r2, #2
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	d112      	bne.n	8007d38 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d16:	881a      	ldrh	r2, [r3, #0]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d22:	1c9a      	adds	r2, r3, #2
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	86da      	strh	r2, [r3, #54]	; 0x36
 8007d36:	e012      	b.n	8007d5e <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d38:	f7fd f97a 	bl	8005030 <HAL_GetTick>
 8007d3c:	0002      	movs	r2, r0
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	683a      	ldr	r2, [r7, #0]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d802      	bhi.n	8007d4e <HAL_SPI_Transmit+0x17a>
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	d102      	bne.n	8007d54 <HAL_SPI_Transmit+0x180>
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d104      	bne.n	8007d5e <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 8007d54:	231f      	movs	r3, #31
 8007d56:	18fb      	adds	r3, r7, r3
 8007d58:	2203      	movs	r2, #3
 8007d5a:	701a      	strb	r2, [r3, #0]
          goto error;
 8007d5c:	e079      	b.n	8007e52 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1cd      	bne.n	8007d04 <HAL_SPI_Transmit+0x130>
 8007d68:	e04f      	b.n	8007e0a <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d004      	beq.n	8007d7c <HAL_SPI_Transmit+0x1a8>
 8007d72:	2316      	movs	r3, #22
 8007d74:	18fb      	adds	r3, r7, r3
 8007d76:	881b      	ldrh	r3, [r3, #0]
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d141      	bne.n	8007e00 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	330c      	adds	r3, #12
 8007d86:	7812      	ldrb	r2, [r2, #0]
 8007d88:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d8e:	1c5a      	adds	r2, r3, #1
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007da2:	e02d      	b.n	8007e00 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	2202      	movs	r2, #2
 8007dac:	4013      	ands	r3, r2
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d113      	bne.n	8007dda <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	330c      	adds	r3, #12
 8007dbc:	7812      	ldrb	r2, [r2, #0]
 8007dbe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc4:	1c5a      	adds	r2, r3, #1
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	86da      	strh	r2, [r3, #54]	; 0x36
 8007dd8:	e012      	b.n	8007e00 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007dda:	f7fd f929 	bl	8005030 <HAL_GetTick>
 8007dde:	0002      	movs	r2, r0
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	1ad3      	subs	r3, r2, r3
 8007de4:	683a      	ldr	r2, [r7, #0]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d802      	bhi.n	8007df0 <HAL_SPI_Transmit+0x21c>
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	3301      	adds	r3, #1
 8007dee:	d102      	bne.n	8007df6 <HAL_SPI_Transmit+0x222>
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d104      	bne.n	8007e00 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8007df6:	231f      	movs	r3, #31
 8007df8:	18fb      	adds	r3, r7, r3
 8007dfa:	2203      	movs	r2, #3
 8007dfc:	701a      	strb	r2, [r3, #0]
          goto error;
 8007dfe:	e028      	b.n	8007e52 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1cc      	bne.n	8007da4 <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e0a:	69ba      	ldr	r2, [r7, #24]
 8007e0c:	6839      	ldr	r1, [r7, #0]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	0018      	movs	r0, r3
 8007e12:	f000 fbe3 	bl	80085dc <SPI_EndRxTxTransaction>
 8007e16:	1e03      	subs	r3, r0, #0
 8007e18:	d002      	beq.n	8007e20 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2220      	movs	r2, #32
 8007e1e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d10a      	bne.n	8007e3e <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e28:	2300      	movs	r3, #0
 8007e2a:	613b      	str	r3, [r7, #16]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	613b      	str	r3, [r7, #16]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	613b      	str	r3, [r7, #16]
 8007e3c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d004      	beq.n	8007e50 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8007e46:	231f      	movs	r3, #31
 8007e48:	18fb      	adds	r3, r7, r3
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	701a      	strb	r2, [r3, #0]
 8007e4e:	e000      	b.n	8007e52 <HAL_SPI_Transmit+0x27e>
  }

error:
 8007e50:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2251      	movs	r2, #81	; 0x51
 8007e56:	2101      	movs	r1, #1
 8007e58:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2250      	movs	r2, #80	; 0x50
 8007e5e:	2100      	movs	r1, #0
 8007e60:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007e62:	231f      	movs	r3, #31
 8007e64:	18fb      	adds	r3, r7, r3
 8007e66:	781b      	ldrb	r3, [r3, #0]
}
 8007e68:	0018      	movs	r0, r3
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	b008      	add	sp, #32
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b086      	sub	sp, #24
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	1dbb      	adds	r3, r7, #6
 8007e7c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007e7e:	2317      	movs	r3, #23
 8007e80:	18fb      	adds	r3, r7, r3
 8007e82:	2200      	movs	r2, #0
 8007e84:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2250      	movs	r2, #80	; 0x50
 8007e8a:	5c9b      	ldrb	r3, [r3, r2]
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d101      	bne.n	8007e94 <HAL_SPI_Transmit_IT+0x24>
 8007e90:	2302      	movs	r3, #2
 8007e92:	e072      	b.n	8007f7a <HAL_SPI_Transmit_IT+0x10a>
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2250      	movs	r2, #80	; 0x50
 8007e98:	2101      	movs	r1, #1
 8007e9a:	5499      	strb	r1, [r3, r2]

  if ((pData == NULL) || (Size == 0U))
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d003      	beq.n	8007eaa <HAL_SPI_Transmit_IT+0x3a>
 8007ea2:	1dbb      	adds	r3, r7, #6
 8007ea4:	881b      	ldrh	r3, [r3, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d104      	bne.n	8007eb4 <HAL_SPI_Transmit_IT+0x44>
  {
    errorcode = HAL_ERROR;
 8007eaa:	2317      	movs	r3, #23
 8007eac:	18fb      	adds	r3, r7, r3
 8007eae:	2201      	movs	r2, #1
 8007eb0:	701a      	strb	r2, [r3, #0]
    goto error;
 8007eb2:	e05b      	b.n	8007f6c <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2251      	movs	r2, #81	; 0x51
 8007eb8:	5c9b      	ldrb	r3, [r3, r2]
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d004      	beq.n	8007eca <HAL_SPI_Transmit_IT+0x5a>
  {
    errorcode = HAL_BUSY;
 8007ec0:	2317      	movs	r3, #23
 8007ec2:	18fb      	adds	r3, r7, r3
 8007ec4:	2202      	movs	r2, #2
 8007ec6:	701a      	strb	r2, [r3, #0]
    goto error;
 8007ec8:	e050      	b.n	8007f6c <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2251      	movs	r2, #81	; 0x51
 8007ece:	2103      	movs	r1, #3
 8007ed0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	1dba      	adds	r2, r7, #6
 8007ee2:	8812      	ldrh	r2, [r2, #0]
 8007ee4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	1dba      	adds	r2, r7, #6
 8007eea:	8812      	ldrh	r2, [r2, #0]
 8007eec:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2200      	movs	r2, #0
 8007f04:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d003      	beq.n	8007f16 <HAL_SPI_Transmit_IT+0xa6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	4a1c      	ldr	r2, [pc, #112]	; (8007f84 <HAL_SPI_Transmit_IT+0x114>)
 8007f12:	645a      	str	r2, [r3, #68]	; 0x44
 8007f14:	e002      	b.n	8007f1c <HAL_SPI_Transmit_IT+0xac>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	4a1b      	ldr	r2, [pc, #108]	; (8007f88 <HAL_SPI_Transmit_IT+0x118>)
 8007f1a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	689a      	ldr	r2, [r3, #8]
 8007f20:	2380      	movs	r3, #128	; 0x80
 8007f22:	021b      	lsls	r3, r3, #8
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d108      	bne.n	8007f3a <HAL_SPI_Transmit_IT+0xca>
  {
    SPI_1LINE_TX(hspi);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2180      	movs	r1, #128	; 0x80
 8007f34:	01c9      	lsls	r1, r1, #7
 8007f36:	430a      	orrs	r2, r1
 8007f38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	685a      	ldr	r2, [r3, #4]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	21a0      	movs	r1, #160	; 0xa0
 8007f46:	430a      	orrs	r2, r1
 8007f48:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2240      	movs	r2, #64	; 0x40
 8007f52:	4013      	ands	r3, r2
 8007f54:	2b40      	cmp	r3, #64	; 0x40
 8007f56:	d008      	beq.n	8007f6a <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2140      	movs	r1, #64	; 0x40
 8007f64:	430a      	orrs	r2, r1
 8007f66:	601a      	str	r2, [r3, #0]
 8007f68:	e000      	b.n	8007f6c <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8007f6a:	46c0      	nop			; (mov r8, r8)
  __HAL_UNLOCK(hspi);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2250      	movs	r2, #80	; 0x50
 8007f70:	2100      	movs	r1, #0
 8007f72:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007f74:	2317      	movs	r3, #23
 8007f76:	18fb      	adds	r3, r7, r3
 8007f78:	781b      	ldrb	r3, [r3, #0]
}
 8007f7a:	0018      	movs	r0, r3
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	b006      	add	sp, #24
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	46c0      	nop			; (mov r8, r8)
 8007f84:	080084b7 	.word	0x080084b7
 8007f88:	0800846f 	.word	0x0800846f

08007f8c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	1dbb      	adds	r3, r7, #6
 8007f98:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f9a:	2317      	movs	r3, #23
 8007f9c:	18fb      	adds	r3, r7, r3
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2250      	movs	r2, #80	; 0x50
 8007fa6:	5c9b      	ldrb	r3, [r3, r2]
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d101      	bne.n	8007fb0 <HAL_SPI_Transmit_DMA+0x24>
 8007fac:	2302      	movs	r3, #2
 8007fae:	e09f      	b.n	80080f0 <HAL_SPI_Transmit_DMA+0x164>
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2250      	movs	r2, #80	; 0x50
 8007fb4:	2101      	movs	r1, #1
 8007fb6:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2251      	movs	r2, #81	; 0x51
 8007fbc:	5c9b      	ldrb	r3, [r3, r2]
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d004      	beq.n	8007fce <HAL_SPI_Transmit_DMA+0x42>
  {
    errorcode = HAL_BUSY;
 8007fc4:	2317      	movs	r3, #23
 8007fc6:	18fb      	adds	r3, r7, r3
 8007fc8:	2202      	movs	r2, #2
 8007fca:	701a      	strb	r2, [r3, #0]
    goto error;
 8007fcc:	e089      	b.n	80080e2 <HAL_SPI_Transmit_DMA+0x156>
  }

  if ((pData == NULL) || (Size == 0U))
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d003      	beq.n	8007fdc <HAL_SPI_Transmit_DMA+0x50>
 8007fd4:	1dbb      	adds	r3, r7, #6
 8007fd6:	881b      	ldrh	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d104      	bne.n	8007fe6 <HAL_SPI_Transmit_DMA+0x5a>
  {
    errorcode = HAL_ERROR;
 8007fdc:	2317      	movs	r3, #23
 8007fde:	18fb      	adds	r3, r7, r3
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	701a      	strb	r2, [r3, #0]
    goto error;
 8007fe4:	e07d      	b.n	80080e2 <HAL_SPI_Transmit_DMA+0x156>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2251      	movs	r2, #81	; 0x51
 8007fea:	2103      	movs	r1, #3
 8007fec:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	1dba      	adds	r2, r7, #6
 8007ffe:	8812      	ldrh	r2, [r2, #0]
 8008000:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	1dba      	adds	r2, r7, #6
 8008006:	8812      	ldrh	r2, [r2, #0]
 8008008:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2200      	movs	r2, #0
 8008014:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2200      	movs	r2, #0
 800801a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2200      	movs	r2, #0
 8008020:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2200      	movs	r2, #0
 8008026:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	689a      	ldr	r2, [r3, #8]
 800802c:	2380      	movs	r3, #128	; 0x80
 800802e:	021b      	lsls	r3, r3, #8
 8008030:	429a      	cmp	r2, r3
 8008032:	d108      	bne.n	8008046 <HAL_SPI_Transmit_DMA+0xba>
  {
    SPI_1LINE_TX(hspi);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2180      	movs	r1, #128	; 0x80
 8008040:	01c9      	lsls	r1, r1, #7
 8008042:	430a      	orrs	r2, r1
 8008044:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800804a:	4a2b      	ldr	r2, [pc, #172]	; (80080f8 <HAL_SPI_Transmit_DMA+0x16c>)
 800804c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008052:	4a2a      	ldr	r2, [pc, #168]	; (80080fc <HAL_SPI_Transmit_DMA+0x170>)
 8008054:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800805a:	4a29      	ldr	r2, [pc, #164]	; (8008100 <HAL_SPI_Transmit_DMA+0x174>)
 800805c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008062:	2200      	movs	r2, #0
 8008064:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800806e:	0019      	movs	r1, r3
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	330c      	adds	r3, #12
 8008076:	001a      	movs	r2, r3
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800807c:	b29b      	uxth	r3, r3
 800807e:	f7fd fc5b 	bl	8005938 <HAL_DMA_Start_IT>
 8008082:	1e03      	subs	r3, r0, #0
 8008084:	d00e      	beq.n	80080a4 <HAL_SPI_Transmit_DMA+0x118>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800808a:	2210      	movs	r2, #16
 800808c:	431a      	orrs	r2, r3
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8008092:	2317      	movs	r3, #23
 8008094:	18fb      	adds	r3, r7, r3
 8008096:	2201      	movs	r2, #1
 8008098:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2251      	movs	r2, #81	; 0x51
 800809e:	2101      	movs	r1, #1
 80080a0:	5499      	strb	r1, [r3, r2]
    goto error;
 80080a2:	e01e      	b.n	80080e2 <HAL_SPI_Transmit_DMA+0x156>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2240      	movs	r2, #64	; 0x40
 80080ac:	4013      	ands	r3, r2
 80080ae:	2b40      	cmp	r3, #64	; 0x40
 80080b0:	d007      	beq.n	80080c2 <HAL_SPI_Transmit_DMA+0x136>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2140      	movs	r1, #64	; 0x40
 80080be:	430a      	orrs	r2, r1
 80080c0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	685a      	ldr	r2, [r3, #4]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2120      	movs	r1, #32
 80080ce:	430a      	orrs	r2, r1
 80080d0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	685a      	ldr	r2, [r3, #4]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2102      	movs	r1, #2
 80080de:	430a      	orrs	r2, r1
 80080e0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2250      	movs	r2, #80	; 0x50
 80080e6:	2100      	movs	r1, #0
 80080e8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80080ea:	2317      	movs	r3, #23
 80080ec:	18fb      	adds	r3, r7, r3
 80080ee:	781b      	ldrb	r3, [r3, #0]
}
 80080f0:	0018      	movs	r0, r3
 80080f2:	46bd      	mov	sp, r7
 80080f4:	b006      	add	sp, #24
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	080083e5 	.word	0x080083e5
 80080fc:	08008339 	.word	0x08008339
 8008100:	08008403 	.word	0x08008403

08008104 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b088      	sub	sp, #32
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	099b      	lsrs	r3, r3, #6
 8008120:	001a      	movs	r2, r3
 8008122:	2301      	movs	r3, #1
 8008124:	4013      	ands	r3, r2
 8008126:	d10f      	bne.n	8008148 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008128:	69bb      	ldr	r3, [r7, #24]
 800812a:	2201      	movs	r2, #1
 800812c:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800812e:	d00b      	beq.n	8008148 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	099b      	lsrs	r3, r3, #6
 8008134:	001a      	movs	r2, r3
 8008136:	2301      	movs	r3, #1
 8008138:	4013      	ands	r3, r2
 800813a:	d005      	beq.n	8008148 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	0010      	movs	r0, r2
 8008144:	4798      	blx	r3
    return;
 8008146:	e0d6      	b.n	80082f6 <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	085b      	lsrs	r3, r3, #1
 800814c:	001a      	movs	r2, r3
 800814e:	2301      	movs	r3, #1
 8008150:	4013      	ands	r3, r2
 8008152:	d00b      	beq.n	800816c <HAL_SPI_IRQHandler+0x68>
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	09db      	lsrs	r3, r3, #7
 8008158:	001a      	movs	r2, r3
 800815a:	2301      	movs	r3, #1
 800815c:	4013      	ands	r3, r2
 800815e:	d005      	beq.n	800816c <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	0010      	movs	r0, r2
 8008168:	4798      	blx	r3
    return;
 800816a:	e0c4      	b.n	80082f6 <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	095b      	lsrs	r3, r3, #5
 8008170:	001a      	movs	r2, r3
 8008172:	2301      	movs	r3, #1
 8008174:	4013      	ands	r3, r2
 8008176:	d10c      	bne.n	8008192 <HAL_SPI_IRQHandler+0x8e>
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	099b      	lsrs	r3, r3, #6
 800817c:	001a      	movs	r2, r3
 800817e:	2301      	movs	r3, #1
 8008180:	4013      	ands	r3, r2
 8008182:	d106      	bne.n	8008192 <HAL_SPI_IRQHandler+0x8e>
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	0a1b      	lsrs	r3, r3, #8
 8008188:	001a      	movs	r2, r3
 800818a:	2301      	movs	r3, #1
 800818c:	4013      	ands	r3, r2
 800818e:	d100      	bne.n	8008192 <HAL_SPI_IRQHandler+0x8e>
 8008190:	e0b1      	b.n	80082f6 <HAL_SPI_IRQHandler+0x1f2>
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	095b      	lsrs	r3, r3, #5
 8008196:	001a      	movs	r2, r3
 8008198:	2301      	movs	r3, #1
 800819a:	4013      	ands	r3, r2
 800819c:	d100      	bne.n	80081a0 <HAL_SPI_IRQHandler+0x9c>
 800819e:	e0aa      	b.n	80082f6 <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	099b      	lsrs	r3, r3, #6
 80081a4:	001a      	movs	r2, r3
 80081a6:	2301      	movs	r3, #1
 80081a8:	4013      	ands	r3, r2
 80081aa:	d023      	beq.n	80081f4 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2251      	movs	r2, #81	; 0x51
 80081b0:	5c9b      	ldrb	r3, [r3, r2]
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	2b03      	cmp	r3, #3
 80081b6:	d011      	beq.n	80081dc <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081bc:	2204      	movs	r2, #4
 80081be:	431a      	orrs	r2, r3
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80081c4:	2300      	movs	r3, #0
 80081c6:	617b      	str	r3, [r7, #20]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	617b      	str	r3, [r7, #20]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	617b      	str	r3, [r7, #20]
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	e00b      	b.n	80081f4 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80081dc:	2300      	movs	r3, #0
 80081de:	613b      	str	r3, [r7, #16]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	613b      	str	r3, [r7, #16]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	613b      	str	r3, [r7, #16]
 80081f0:	693b      	ldr	r3, [r7, #16]
        return;
 80081f2:	e080      	b.n	80082f6 <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	095b      	lsrs	r3, r3, #5
 80081f8:	001a      	movs	r2, r3
 80081fa:	2301      	movs	r3, #1
 80081fc:	4013      	ands	r3, r2
 80081fe:	d014      	beq.n	800822a <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008204:	2201      	movs	r2, #1
 8008206:	431a      	orrs	r2, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800820c:	2300      	movs	r3, #0
 800820e:	60fb      	str	r3, [r7, #12]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	60fb      	str	r3, [r7, #12]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2140      	movs	r1, #64	; 0x40
 8008224:	438a      	bics	r2, r1
 8008226:	601a      	str	r2, [r3, #0]
 8008228:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	0a1b      	lsrs	r3, r3, #8
 800822e:	001a      	movs	r2, r3
 8008230:	2301      	movs	r3, #1
 8008232:	4013      	ands	r3, r2
 8008234:	d00c      	beq.n	8008250 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800823a:	2208      	movs	r2, #8
 800823c:	431a      	orrs	r2, r3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008242:	2300      	movs	r3, #0
 8008244:	60bb      	str	r3, [r7, #8]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	60bb      	str	r3, [r7, #8]
 800824e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008254:	2b00      	cmp	r3, #0
 8008256:	d04d      	beq.n	80082f4 <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	685a      	ldr	r2, [r3, #4]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	21e0      	movs	r1, #224	; 0xe0
 8008264:	438a      	bics	r2, r1
 8008266:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2251      	movs	r2, #81	; 0x51
 800826c:	2101      	movs	r1, #1
 800826e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	2202      	movs	r2, #2
 8008274:	4013      	ands	r3, r2
 8008276:	d103      	bne.n	8008280 <HAL_SPI_IRQHandler+0x17c>
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	2201      	movs	r2, #1
 800827c:	4013      	ands	r3, r2
 800827e:	d032      	beq.n	80082e6 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	685a      	ldr	r2, [r3, #4]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2103      	movs	r1, #3
 800828c:	438a      	bics	r2, r1
 800828e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008294:	2b00      	cmp	r3, #0
 8008296:	d010      	beq.n	80082ba <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800829c:	4a17      	ldr	r2, [pc, #92]	; (80082fc <HAL_SPI_IRQHandler+0x1f8>)
 800829e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082a4:	0018      	movs	r0, r3
 80082a6:	f7fd fbad 	bl	8005a04 <HAL_DMA_Abort_IT>
 80082aa:	1e03      	subs	r3, r0, #0
 80082ac:	d005      	beq.n	80082ba <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082b2:	2240      	movs	r2, #64	; 0x40
 80082b4:	431a      	orrs	r2, r3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d016      	beq.n	80082f0 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082c6:	4a0d      	ldr	r2, [pc, #52]	; (80082fc <HAL_SPI_IRQHandler+0x1f8>)
 80082c8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082ce:	0018      	movs	r0, r3
 80082d0:	f7fd fb98 	bl	8005a04 <HAL_DMA_Abort_IT>
 80082d4:	1e03      	subs	r3, r0, #0
 80082d6:	d00b      	beq.n	80082f0 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082dc:	2240      	movs	r2, #64	; 0x40
 80082de:	431a      	orrs	r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80082e4:	e004      	b.n	80082f0 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	0018      	movs	r0, r3
 80082ea:	f000 f811 	bl	8008310 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80082ee:	e000      	b.n	80082f2 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 80082f0:	46c0      	nop			; (mov r8, r8)
    return;
 80082f2:	46c0      	nop			; (mov r8, r8)
 80082f4:	46c0      	nop			; (mov r8, r8)
  }
}
 80082f6:	46bd      	mov	sp, r7
 80082f8:	b008      	add	sp, #32
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	08008445 	.word	0x08008445

08008300 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008308:	46c0      	nop			; (mov r8, r8)
 800830a:	46bd      	mov	sp, r7
 800830c:	b002      	add	sp, #8
 800830e:	bd80      	pop	{r7, pc}

08008310 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008318:	46c0      	nop			; (mov r8, r8)
 800831a:	46bd      	mov	sp, r7
 800831c:	b002      	add	sp, #8
 800831e:	bd80      	pop	{r7, pc}

08008320 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2251      	movs	r2, #81	; 0x51
 800832c:	5c9b      	ldrb	r3, [r3, r2]
 800832e:	b2db      	uxtb	r3, r3
}
 8008330:	0018      	movs	r0, r3
 8008332:	46bd      	mov	sp, r7
 8008334:	b002      	add	sp, #8
 8008336:	bd80      	pop	{r7, pc}

08008338 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b086      	sub	sp, #24
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008344:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008346:	f7fc fe73 	bl	8005030 <HAL_GetTick>
 800834a:	0003      	movs	r3, r0
 800834c:	613b      	str	r3, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2220      	movs	r2, #32
 8008356:	4013      	ands	r3, r2
 8008358:	2b20      	cmp	r3, #32
 800835a:	d03c      	beq.n	80083d6 <SPI_DMATransmitCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	685a      	ldr	r2, [r3, #4]
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2120      	movs	r1, #32
 8008368:	438a      	bics	r2, r1
 800836a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	685a      	ldr	r2, [r3, #4]
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2102      	movs	r1, #2
 8008378:	438a      	bics	r2, r1
 800837a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800837c:	693a      	ldr	r2, [r7, #16]
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	2164      	movs	r1, #100	; 0x64
 8008382:	0018      	movs	r0, r3
 8008384:	f000 f92a 	bl	80085dc <SPI_EndRxTxTransaction>
 8008388:	1e03      	subs	r3, r0, #0
 800838a:	d005      	beq.n	8008398 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008390:	2220      	movs	r2, #32
 8008392:	431a      	orrs	r2, r3
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d10a      	bne.n	80083b6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80083a0:	2300      	movs	r3, #0
 80083a2:	60fb      	str	r3, [r7, #12]
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	60fb      	str	r3, [r7, #12]
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	60fb      	str	r3, [r7, #12]
 80083b4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	2200      	movs	r2, #0
 80083ba:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	2251      	movs	r2, #81	; 0x51
 80083c0:	2101      	movs	r1, #1
 80083c2:	5499      	strb	r1, [r3, r2]

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d004      	beq.n	80083d6 <SPI_DMATransmitCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	0018      	movs	r0, r3
 80083d0:	f7ff ff9e 	bl	8008310 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80083d4:	e003      	b.n	80083de <SPI_DMATransmitCplt+0xa6>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	0018      	movs	r0, r3
 80083da:	f7f9 febb 	bl	8002154 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80083de:	46bd      	mov	sp, r7
 80083e0:	b006      	add	sp, #24
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	0018      	movs	r0, r3
 80083f6:	f7ff ff83 	bl	8008300 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80083fa:	46c0      	nop			; (mov r8, r8)
 80083fc:	46bd      	mov	sp, r7
 80083fe:	b004      	add	sp, #16
 8008400:	bd80      	pop	{r7, pc}

08008402 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b084      	sub	sp, #16
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800840e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	685a      	ldr	r2, [r3, #4]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2103      	movs	r1, #3
 800841c:	438a      	bics	r2, r1
 800841e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008424:	2210      	movs	r2, #16
 8008426:	431a      	orrs	r2, r3
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2251      	movs	r2, #81	; 0x51
 8008430:	2101      	movs	r1, #1
 8008432:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	0018      	movs	r0, r3
 8008438:	f7ff ff6a 	bl	8008310 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800843c:	46c0      	nop			; (mov r8, r8)
 800843e:	46bd      	mov	sp, r7
 8008440:	b004      	add	sp, #16
 8008442:	bd80      	pop	{r7, pc}

08008444 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008450:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2200      	movs	r2, #0
 800845c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	0018      	movs	r0, r3
 8008462:	f7ff ff55 	bl	8008310 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008466:	46c0      	nop			; (mov r8, r8)
 8008468:	46bd      	mov	sp, r7
 800846a:	b004      	add	sp, #16
 800846c:	bd80      	pop	{r7, pc}

0800846e <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b082      	sub	sp, #8
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	330c      	adds	r3, #12
 8008480:	7812      	ldrb	r2, [r2, #0]
 8008482:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008488:	1c5a      	adds	r2, r3, #1
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008492:	b29b      	uxth	r3, r3
 8008494:	3b01      	subs	r3, #1
 8008496:	b29a      	uxth	r2, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d103      	bne.n	80084ae <SPI_TxISR_8BIT+0x40>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	0018      	movs	r0, r3
 80084aa:	f000 f8d5 	bl	8008658 <SPI_CloseTx_ISR>
  }
}
 80084ae:	46c0      	nop			; (mov r8, r8)
 80084b0:	46bd      	mov	sp, r7
 80084b2:	b002      	add	sp, #8
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b082      	sub	sp, #8
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c2:	881a      	ldrh	r2, [r3, #0]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ce:	1c9a      	adds	r2, r3, #2
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084d8:	b29b      	uxth	r3, r3
 80084da:	3b01      	subs	r3, #1
 80084dc:	b29a      	uxth	r2, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d103      	bne.n	80084f4 <SPI_TxISR_16BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	0018      	movs	r0, r3
 80084f0:	f000 f8b2 	bl	8008658 <SPI_CloseTx_ISR>
  }
}
 80084f4:	46c0      	nop			; (mov r8, r8)
 80084f6:	46bd      	mov	sp, r7
 80084f8:	b002      	add	sp, #8
 80084fa:	bd80      	pop	{r7, pc}

080084fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	603b      	str	r3, [r7, #0]
 8008508:	1dfb      	adds	r3, r7, #7
 800850a:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800850c:	e050      	b.n	80085b0 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	3301      	adds	r3, #1
 8008512:	d04d      	beq.n	80085b0 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008514:	f7fc fd8c 	bl	8005030 <HAL_GetTick>
 8008518:	0002      	movs	r2, r0
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	1ad3      	subs	r3, r2, r3
 800851e:	683a      	ldr	r2, [r7, #0]
 8008520:	429a      	cmp	r2, r3
 8008522:	d902      	bls.n	800852a <SPI_WaitFlagStateUntilTimeout+0x2e>
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d142      	bne.n	80085b0 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	685a      	ldr	r2, [r3, #4]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	21e0      	movs	r1, #224	; 0xe0
 8008536:	438a      	bics	r2, r1
 8008538:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	685a      	ldr	r2, [r3, #4]
 800853e:	2382      	movs	r3, #130	; 0x82
 8008540:	005b      	lsls	r3, r3, #1
 8008542:	429a      	cmp	r2, r3
 8008544:	d113      	bne.n	800856e <SPI_WaitFlagStateUntilTimeout+0x72>
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	689a      	ldr	r2, [r3, #8]
 800854a:	2380      	movs	r3, #128	; 0x80
 800854c:	021b      	lsls	r3, r3, #8
 800854e:	429a      	cmp	r2, r3
 8008550:	d005      	beq.n	800855e <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	689a      	ldr	r2, [r3, #8]
 8008556:	2380      	movs	r3, #128	; 0x80
 8008558:	00db      	lsls	r3, r3, #3
 800855a:	429a      	cmp	r2, r3
 800855c:	d107      	bne.n	800856e <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2140      	movs	r1, #64	; 0x40
 800856a:	438a      	bics	r2, r1
 800856c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008572:	2380      	movs	r3, #128	; 0x80
 8008574:	019b      	lsls	r3, r3, #6
 8008576:	429a      	cmp	r2, r3
 8008578:	d110      	bne.n	800859c <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4914      	ldr	r1, [pc, #80]	; (80085d8 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8008586:	400a      	ands	r2, r1
 8008588:	601a      	str	r2, [r3, #0]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2180      	movs	r1, #128	; 0x80
 8008596:	0189      	lsls	r1, r1, #6
 8008598:	430a      	orrs	r2, r1
 800859a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2251      	movs	r2, #81	; 0x51
 80085a0:	2101      	movs	r1, #1
 80085a2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2250      	movs	r2, #80	; 0x50
 80085a8:	2100      	movs	r1, #0
 80085aa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e00f      	b.n	80085d0 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	4013      	ands	r3, r2
 80085ba:	68ba      	ldr	r2, [r7, #8]
 80085bc:	1ad3      	subs	r3, r2, r3
 80085be:	425a      	negs	r2, r3
 80085c0:	4153      	adcs	r3, r2
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	001a      	movs	r2, r3
 80085c6:	1dfb      	adds	r3, r7, #7
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d19f      	bne.n	800850e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	0018      	movs	r0, r3
 80085d2:	46bd      	mov	sp, r7
 80085d4:	b004      	add	sp, #16
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	ffffdfff 	.word	0xffffdfff

080085dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b086      	sub	sp, #24
 80085e0:	af02      	add	r7, sp, #8
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	685a      	ldr	r2, [r3, #4]
 80085ec:	2382      	movs	r3, #130	; 0x82
 80085ee:	005b      	lsls	r3, r3, #1
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d112      	bne.n	800861a <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80085f4:	68ba      	ldr	r2, [r7, #8]
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	9300      	str	r3, [sp, #0]
 80085fc:	0013      	movs	r3, r2
 80085fe:	2200      	movs	r2, #0
 8008600:	2180      	movs	r1, #128	; 0x80
 8008602:	f7ff ff7b 	bl	80084fc <SPI_WaitFlagStateUntilTimeout>
 8008606:	1e03      	subs	r3, r0, #0
 8008608:	d020      	beq.n	800864c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800860e:	2220      	movs	r2, #32
 8008610:	431a      	orrs	r2, r3
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008616:	2303      	movs	r3, #3
 8008618:	e019      	b.n	800864e <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2251      	movs	r2, #81	; 0x51
 800861e:	5c9b      	ldrb	r3, [r3, r2]
 8008620:	b2db      	uxtb	r3, r3
 8008622:	2b05      	cmp	r3, #5
 8008624:	d112      	bne.n	800864c <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008626:	68ba      	ldr	r2, [r7, #8]
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	9300      	str	r3, [sp, #0]
 800862e:	0013      	movs	r3, r2
 8008630:	2200      	movs	r2, #0
 8008632:	2101      	movs	r1, #1
 8008634:	f7ff ff62 	bl	80084fc <SPI_WaitFlagStateUntilTimeout>
 8008638:	1e03      	subs	r3, r0, #0
 800863a:	d007      	beq.n	800864c <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008640:	2220      	movs	r2, #32
 8008642:	431a      	orrs	r2, r3
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008648:	2303      	movs	r3, #3
 800864a:	e000      	b.n	800864e <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 800864c:	2300      	movs	r3, #0
}
 800864e:	0018      	movs	r0, r3
 8008650:	46bd      	mov	sp, r7
 8008652:	b004      	add	sp, #16
 8008654:	bd80      	pop	{r7, pc}
	...

08008658 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b086      	sub	sp, #24
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8008660:	4b2d      	ldr	r3, [pc, #180]	; (8008718 <SPI_CloseTx_ISR+0xc0>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	492d      	ldr	r1, [pc, #180]	; (800871c <SPI_CloseTx_ISR+0xc4>)
 8008666:	0018      	movs	r0, r3
 8008668:	f7f7 fd56 	bl	8000118 <__udivsi3>
 800866c:	0003      	movs	r3, r0
 800866e:	001a      	movs	r2, r3
 8008670:	2364      	movs	r3, #100	; 0x64
 8008672:	4353      	muls	r3, r2
 8008674:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008676:	f7fc fcdb 	bl	8005030 <HAL_GetTick>
 800867a:	0003      	movs	r3, r0
 800867c:	617b      	str	r3, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d106      	bne.n	8008692 <SPI_CloseTx_ISR+0x3a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008688:	2220      	movs	r2, #32
 800868a:	431a      	orrs	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008690:	e008      	b.n	80086a4 <SPI_CloseTx_ISR+0x4c>
    }
    count--;
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	3b01      	subs	r3, #1
 8008696:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	2202      	movs	r2, #2
 80086a0:	4013      	ands	r3, r2
 80086a2:	d0ec      	beq.n	800867e <SPI_CloseTx_ISR+0x26>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	685a      	ldr	r2, [r3, #4]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	21a0      	movs	r1, #160	; 0xa0
 80086b0:	438a      	bics	r2, r1
 80086b2:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80086b4:	697a      	ldr	r2, [r7, #20]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2164      	movs	r1, #100	; 0x64
 80086ba:	0018      	movs	r0, r3
 80086bc:	f7ff ff8e 	bl	80085dc <SPI_EndRxTxTransaction>
 80086c0:	1e03      	subs	r3, r0, #0
 80086c2:	d005      	beq.n	80086d0 <SPI_CloseTx_ISR+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086c8:	2220      	movs	r2, #32
 80086ca:	431a      	orrs	r2, r3
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d10a      	bne.n	80086ee <SPI_CloseTx_ISR+0x96>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80086d8:	2300      	movs	r3, #0
 80086da:	60fb      	str	r3, [r7, #12]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	60fb      	str	r3, [r7, #12]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	60fb      	str	r3, [r7, #12]
 80086ec:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2251      	movs	r2, #81	; 0x51
 80086f2:	2101      	movs	r1, #1
 80086f4:	5499      	strb	r1, [r3, r2]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d004      	beq.n	8008708 <SPI_CloseTx_ISR+0xb0>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	0018      	movs	r0, r3
 8008702:	f7ff fe05 	bl	8008310 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8008706:	e003      	b.n	8008710 <SPI_CloseTx_ISR+0xb8>
    HAL_SPI_TxCpltCallback(hspi);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	0018      	movs	r0, r3
 800870c:	f7f9 fd22 	bl	8002154 <HAL_SPI_TxCpltCallback>
}
 8008710:	46c0      	nop			; (mov r8, r8)
 8008712:	46bd      	mov	sp, r7
 8008714:	b006      	add	sp, #24
 8008716:	bd80      	pop	{r7, pc}
 8008718:	20000014 	.word	0x20000014
 800871c:	00005dc0 	.word	0x00005dc0

08008720 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d101      	bne.n	8008732 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e01e      	b.n	8008770 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2239      	movs	r2, #57	; 0x39
 8008736:	5c9b      	ldrb	r3, [r3, r2]
 8008738:	b2db      	uxtb	r3, r3
 800873a:	2b00      	cmp	r3, #0
 800873c:	d107      	bne.n	800874e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2238      	movs	r2, #56	; 0x38
 8008742:	2100      	movs	r1, #0
 8008744:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	0018      	movs	r0, r3
 800874a:	f7fc f813 	bl	8004774 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2239      	movs	r2, #57	; 0x39
 8008752:	2102      	movs	r1, #2
 8008754:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	3304      	adds	r3, #4
 800875e:	0019      	movs	r1, r3
 8008760:	0010      	movs	r0, r2
 8008762:	f000 fbed 	bl	8008f40 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2239      	movs	r2, #57	; 0x39
 800876a:	2101      	movs	r1, #1
 800876c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800876e:	2300      	movs	r3, #0
}
 8008770:	0018      	movs	r0, r3
 8008772:	46bd      	mov	sp, r7
 8008774:	b002      	add	sp, #8
 8008776:	bd80      	pop	{r7, pc}

08008778 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	68da      	ldr	r2, [r3, #12]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2101      	movs	r1, #1
 800878c:	430a      	orrs	r2, r1
 800878e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	2207      	movs	r2, #7
 8008798:	4013      	ands	r3, r2
 800879a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2b06      	cmp	r3, #6
 80087a0:	d007      	beq.n	80087b2 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2101      	movs	r1, #1
 80087ae:	430a      	orrs	r2, r1
 80087b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80087b2:	2300      	movs	r3, #0
}
 80087b4:	0018      	movs	r0, r3
 80087b6:	46bd      	mov	sp, r7
 80087b8:	b004      	add	sp, #16
 80087ba:	bd80      	pop	{r7, pc}

080087bc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	68da      	ldr	r2, [r3, #12]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2101      	movs	r1, #1
 80087d0:	438a      	bics	r2, r1
 80087d2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	6a1b      	ldr	r3, [r3, #32]
 80087da:	4a08      	ldr	r2, [pc, #32]	; (80087fc <HAL_TIM_Base_Stop_IT+0x40>)
 80087dc:	4013      	ands	r3, r2
 80087de:	d107      	bne.n	80087f0 <HAL_TIM_Base_Stop_IT+0x34>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2101      	movs	r1, #1
 80087ec:	438a      	bics	r2, r1
 80087ee:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	0018      	movs	r0, r3
 80087f4:	46bd      	mov	sp, r7
 80087f6:	b002      	add	sp, #8
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	46c0      	nop			; (mov r8, r8)
 80087fc:	00001111 	.word	0x00001111

08008800 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d101      	bne.n	8008812 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	e01e      	b.n	8008850 <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2239      	movs	r2, #57	; 0x39
 8008816:	5c9b      	ldrb	r3, [r3, r2]
 8008818:	b2db      	uxtb	r3, r3
 800881a:	2b00      	cmp	r3, #0
 800881c:	d107      	bne.n	800882e <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2238      	movs	r2, #56	; 0x38
 8008822:	2100      	movs	r1, #0
 8008824:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	0018      	movs	r0, r3
 800882a:	f000 f815 	bl	8008858 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2239      	movs	r2, #57	; 0x39
 8008832:	2102      	movs	r1, #2
 8008834:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	3304      	adds	r3, #4
 800883e:	0019      	movs	r1, r3
 8008840:	0010      	movs	r0, r2
 8008842:	f000 fb7d 	bl	8008f40 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2239      	movs	r2, #57	; 0x39
 800884a:	2101      	movs	r1, #1
 800884c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	0018      	movs	r0, r3
 8008852:	46bd      	mov	sp, r7
 8008854:	b002      	add	sp, #8
 8008856:	bd80      	pop	{r7, pc}

08008858 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008860:	46c0      	nop			; (mov r8, r8)
 8008862:	46bd      	mov	sp, r7
 8008864:	b002      	add	sp, #8
 8008866:	bd80      	pop	{r7, pc}

08008868 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	2b04      	cmp	r3, #4
 8008876:	d011      	beq.n	800889c <HAL_TIM_OC_Stop_IT+0x34>
 8008878:	d802      	bhi.n	8008880 <HAL_TIM_OC_Stop_IT+0x18>
 800887a:	2b00      	cmp	r3, #0
 800887c:	d005      	beq.n	800888a <HAL_TIM_OC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 800887e:	e028      	b.n	80088d2 <HAL_TIM_OC_Stop_IT+0x6a>
  switch (Channel)
 8008880:	2b08      	cmp	r3, #8
 8008882:	d014      	beq.n	80088ae <HAL_TIM_OC_Stop_IT+0x46>
 8008884:	2b0c      	cmp	r3, #12
 8008886:	d01b      	beq.n	80088c0 <HAL_TIM_OC_Stop_IT+0x58>
      break;
 8008888:	e023      	b.n	80088d2 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	68da      	ldr	r2, [r3, #12]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2102      	movs	r1, #2
 8008896:	438a      	bics	r2, r1
 8008898:	60da      	str	r2, [r3, #12]
      break;
 800889a:	e01a      	b.n	80088d2 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68da      	ldr	r2, [r3, #12]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	2104      	movs	r1, #4
 80088a8:	438a      	bics	r2, r1
 80088aa:	60da      	str	r2, [r3, #12]
      break;
 80088ac:	e011      	b.n	80088d2 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	68da      	ldr	r2, [r3, #12]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2108      	movs	r1, #8
 80088ba:	438a      	bics	r2, r1
 80088bc:	60da      	str	r2, [r3, #12]
      break;
 80088be:	e008      	b.n	80088d2 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	68da      	ldr	r2, [r3, #12]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2110      	movs	r1, #16
 80088cc:	438a      	bics	r2, r1
 80088ce:	60da      	str	r2, [r3, #12]
      break;
 80088d0:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	6839      	ldr	r1, [r7, #0]
 80088d8:	2200      	movs	r2, #0
 80088da:	0018      	movs	r0, r3
 80088dc:	f000 fd2c 	bl	8009338 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	6a1b      	ldr	r3, [r3, #32]
 80088e6:	4a08      	ldr	r2, [pc, #32]	; (8008908 <HAL_TIM_OC_Stop_IT+0xa0>)
 80088e8:	4013      	ands	r3, r2
 80088ea:	d107      	bne.n	80088fc <HAL_TIM_OC_Stop_IT+0x94>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2101      	movs	r1, #1
 80088f8:	438a      	bics	r2, r1
 80088fa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	0018      	movs	r0, r3
 8008900:	46bd      	mov	sp, r7
 8008902:	b002      	add	sp, #8
 8008904:	bd80      	pop	{r7, pc}
 8008906:	46c0      	nop			; (mov r8, r8)
 8008908:	00001111 	.word	0x00001111

0800890c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d101      	bne.n	800891e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e01e      	b.n	800895c <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2239      	movs	r2, #57	; 0x39
 8008922:	5c9b      	ldrb	r3, [r3, r2]
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b00      	cmp	r3, #0
 8008928:	d107      	bne.n	800893a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2238      	movs	r2, #56	; 0x38
 800892e:	2100      	movs	r1, #0
 8008930:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	0018      	movs	r0, r3
 8008936:	f000 f815 	bl	8008964 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2239      	movs	r2, #57	; 0x39
 800893e:	2102      	movs	r1, #2
 8008940:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	3304      	adds	r3, #4
 800894a:	0019      	movs	r1, r3
 800894c:	0010      	movs	r0, r2
 800894e:	f000 faf7 	bl	8008f40 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2239      	movs	r2, #57	; 0x39
 8008956:	2101      	movs	r1, #1
 8008958:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	0018      	movs	r0, r3
 800895e:	46bd      	mov	sp, r7
 8008960:	b002      	add	sp, #8
 8008962:	bd80      	pop	{r7, pc}

08008964 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800896c:	46c0      	nop			; (mov r8, r8)
 800896e:	46bd      	mov	sp, r7
 8008970:	b002      	add	sp, #8
 8008972:	bd80      	pop	{r7, pc}

08008974 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	6839      	ldr	r1, [r7, #0]
 8008984:	2201      	movs	r2, #1
 8008986:	0018      	movs	r0, r3
 8008988:	f000 fcd6 	bl	8009338 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	2207      	movs	r2, #7
 8008994:	4013      	ands	r3, r2
 8008996:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2b06      	cmp	r3, #6
 800899c:	d007      	beq.n	80089ae <HAL_TIM_PWM_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2101      	movs	r1, #1
 80089aa:	430a      	orrs	r2, r1
 80089ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	0018      	movs	r0, r3
 80089b2:	46bd      	mov	sp, r7
 80089b4:	b004      	add	sp, #16
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	2202      	movs	r2, #2
 80089c8:	4013      	ands	r3, r2
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d124      	bne.n	8008a18 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	2202      	movs	r2, #2
 80089d6:	4013      	ands	r3, r2
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d11d      	bne.n	8008a18 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	2203      	movs	r2, #3
 80089e2:	4252      	negs	r2, r2
 80089e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2201      	movs	r2, #1
 80089ea:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	699b      	ldr	r3, [r3, #24]
 80089f2:	2203      	movs	r2, #3
 80089f4:	4013      	ands	r3, r2
 80089f6:	d004      	beq.n	8008a02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	0018      	movs	r0, r3
 80089fc:	f000 fa88 	bl	8008f10 <HAL_TIM_IC_CaptureCallback>
 8008a00:	e007      	b.n	8008a12 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	0018      	movs	r0, r3
 8008a06:	f7fc f8e1 	bl	8004bcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	0018      	movs	r0, r3
 8008a0e:	f000 fa87 	bl	8008f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	2204      	movs	r2, #4
 8008a20:	4013      	ands	r3, r2
 8008a22:	2b04      	cmp	r3, #4
 8008a24:	d125      	bne.n	8008a72 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	2204      	movs	r2, #4
 8008a2e:	4013      	ands	r3, r2
 8008a30:	2b04      	cmp	r3, #4
 8008a32:	d11e      	bne.n	8008a72 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2205      	movs	r2, #5
 8008a3a:	4252      	negs	r2, r2
 8008a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2202      	movs	r2, #2
 8008a42:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	699a      	ldr	r2, [r3, #24]
 8008a4a:	23c0      	movs	r3, #192	; 0xc0
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	4013      	ands	r3, r2
 8008a50:	d004      	beq.n	8008a5c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	0018      	movs	r0, r3
 8008a56:	f000 fa5b 	bl	8008f10 <HAL_TIM_IC_CaptureCallback>
 8008a5a:	e007      	b.n	8008a6c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	0018      	movs	r0, r3
 8008a60:	f7fc f8b4 	bl	8004bcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	0018      	movs	r0, r3
 8008a68:	f000 fa5a 	bl	8008f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	2208      	movs	r2, #8
 8008a7a:	4013      	ands	r3, r2
 8008a7c:	2b08      	cmp	r3, #8
 8008a7e:	d124      	bne.n	8008aca <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	2208      	movs	r2, #8
 8008a88:	4013      	ands	r3, r2
 8008a8a:	2b08      	cmp	r3, #8
 8008a8c:	d11d      	bne.n	8008aca <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2209      	movs	r2, #9
 8008a94:	4252      	negs	r2, r2
 8008a96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2204      	movs	r2, #4
 8008a9c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	69db      	ldr	r3, [r3, #28]
 8008aa4:	2203      	movs	r2, #3
 8008aa6:	4013      	ands	r3, r2
 8008aa8:	d004      	beq.n	8008ab4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	0018      	movs	r0, r3
 8008aae:	f000 fa2f 	bl	8008f10 <HAL_TIM_IC_CaptureCallback>
 8008ab2:	e007      	b.n	8008ac4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	0018      	movs	r0, r3
 8008ab8:	f7fc f888 	bl	8004bcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	0018      	movs	r0, r3
 8008ac0:	f000 fa2e 	bl	8008f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	2210      	movs	r2, #16
 8008ad2:	4013      	ands	r3, r2
 8008ad4:	2b10      	cmp	r3, #16
 8008ad6:	d125      	bne.n	8008b24 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	2210      	movs	r2, #16
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	2b10      	cmp	r3, #16
 8008ae4:	d11e      	bne.n	8008b24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2211      	movs	r2, #17
 8008aec:	4252      	negs	r2, r2
 8008aee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2208      	movs	r2, #8
 8008af4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	69da      	ldr	r2, [r3, #28]
 8008afc:	23c0      	movs	r3, #192	; 0xc0
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	4013      	ands	r3, r2
 8008b02:	d004      	beq.n	8008b0e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	0018      	movs	r0, r3
 8008b08:	f000 fa02 	bl	8008f10 <HAL_TIM_IC_CaptureCallback>
 8008b0c:	e007      	b.n	8008b1e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	0018      	movs	r0, r3
 8008b12:	f7fc f85b 	bl	8004bcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	0018      	movs	r0, r3
 8008b1a:	f000 fa01 	bl	8008f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2200      	movs	r2, #0
 8008b22:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	4013      	ands	r3, r2
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d10f      	bne.n	8008b52 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	2201      	movs	r2, #1
 8008b3a:	4013      	ands	r3, r2
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d108      	bne.n	8008b52 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2202      	movs	r2, #2
 8008b46:	4252      	negs	r2, r2
 8008b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	0018      	movs	r0, r3
 8008b4e:	f7fb ffd9 	bl	8004b04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	691b      	ldr	r3, [r3, #16]
 8008b58:	2240      	movs	r2, #64	; 0x40
 8008b5a:	4013      	ands	r3, r2
 8008b5c:	2b40      	cmp	r3, #64	; 0x40
 8008b5e:	d10f      	bne.n	8008b80 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	2240      	movs	r2, #64	; 0x40
 8008b68:	4013      	ands	r3, r2
 8008b6a:	2b40      	cmp	r3, #64	; 0x40
 8008b6c:	d108      	bne.n	8008b80 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2241      	movs	r2, #65	; 0x41
 8008b74:	4252      	negs	r2, r2
 8008b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	0018      	movs	r0, r3
 8008b7c:	f000 f9d8 	bl	8008f30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b80:	46c0      	nop			; (mov r8, r8)
 8008b82:	46bd      	mov	sp, r7
 8008b84:	b002      	add	sp, #8
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2238      	movs	r2, #56	; 0x38
 8008b98:	5c9b      	ldrb	r3, [r3, r2]
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d101      	bne.n	8008ba2 <HAL_TIM_OC_ConfigChannel+0x1a>
 8008b9e:	2302      	movs	r3, #2
 8008ba0:	e03c      	b.n	8008c1c <HAL_TIM_OC_ConfigChannel+0x94>
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2238      	movs	r2, #56	; 0x38
 8008ba6:	2101      	movs	r1, #1
 8008ba8:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2239      	movs	r2, #57	; 0x39
 8008bae:	2102      	movs	r1, #2
 8008bb0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2b04      	cmp	r3, #4
 8008bb6:	d010      	beq.n	8008bda <HAL_TIM_OC_ConfigChannel+0x52>
 8008bb8:	d802      	bhi.n	8008bc0 <HAL_TIM_OC_ConfigChannel+0x38>
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d005      	beq.n	8008bca <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 8008bbe:	e024      	b.n	8008c0a <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 8008bc0:	2b08      	cmp	r3, #8
 8008bc2:	d012      	beq.n	8008bea <HAL_TIM_OC_ConfigChannel+0x62>
 8008bc4:	2b0c      	cmp	r3, #12
 8008bc6:	d018      	beq.n	8008bfa <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 8008bc8:	e01f      	b.n	8008c0a <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	68ba      	ldr	r2, [r7, #8]
 8008bd0:	0011      	movs	r1, r2
 8008bd2:	0018      	movs	r0, r3
 8008bd4:	f000 fa12 	bl	8008ffc <TIM_OC1_SetConfig>
      break;
 8008bd8:	e017      	b.n	8008c0a <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	0011      	movs	r1, r2
 8008be2:	0018      	movs	r0, r3
 8008be4:	f000 fa46 	bl	8009074 <TIM_OC2_SetConfig>
      break;
 8008be8:	e00f      	b.n	8008c0a <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	0011      	movs	r1, r2
 8008bf2:	0018      	movs	r0, r3
 8008bf4:	f000 fa80 	bl	80090f8 <TIM_OC3_SetConfig>
      break;
 8008bf8:	e007      	b.n	8008c0a <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	68ba      	ldr	r2, [r7, #8]
 8008c00:	0011      	movs	r1, r2
 8008c02:	0018      	movs	r0, r3
 8008c04:	f000 fab8 	bl	8009178 <TIM_OC4_SetConfig>
      break;
 8008c08:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2239      	movs	r2, #57	; 0x39
 8008c0e:	2101      	movs	r1, #1
 8008c10:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2238      	movs	r2, #56	; 0x38
 8008c16:	2100      	movs	r1, #0
 8008c18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	0018      	movs	r0, r3
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	b004      	add	sp, #16
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	60b9      	str	r1, [r7, #8]
 8008c2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2238      	movs	r2, #56	; 0x38
 8008c34:	5c9b      	ldrb	r3, [r3, r2]
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d101      	bne.n	8008c3e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008c3a:	2302      	movs	r3, #2
 8008c3c:	e0a4      	b.n	8008d88 <HAL_TIM_PWM_ConfigChannel+0x164>
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2238      	movs	r2, #56	; 0x38
 8008c42:	2101      	movs	r1, #1
 8008c44:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2239      	movs	r2, #57	; 0x39
 8008c4a:	2102      	movs	r1, #2
 8008c4c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2b04      	cmp	r3, #4
 8008c52:	d029      	beq.n	8008ca8 <HAL_TIM_PWM_ConfigChannel+0x84>
 8008c54:	d802      	bhi.n	8008c5c <HAL_TIM_PWM_ConfigChannel+0x38>
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d005      	beq.n	8008c66 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8008c5a:	e08c      	b.n	8008d76 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8008c5c:	2b08      	cmp	r3, #8
 8008c5e:	d046      	beq.n	8008cee <HAL_TIM_PWM_ConfigChannel+0xca>
 8008c60:	2b0c      	cmp	r3, #12
 8008c62:	d065      	beq.n	8008d30 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8008c64:	e087      	b.n	8008d76 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	68ba      	ldr	r2, [r7, #8]
 8008c6c:	0011      	movs	r1, r2
 8008c6e:	0018      	movs	r0, r3
 8008c70:	f000 f9c4 	bl	8008ffc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	699a      	ldr	r2, [r3, #24]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	2108      	movs	r1, #8
 8008c80:	430a      	orrs	r2, r1
 8008c82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	699a      	ldr	r2, [r3, #24]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2104      	movs	r1, #4
 8008c90:	438a      	bics	r2, r1
 8008c92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	6999      	ldr	r1, [r3, #24]
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	68da      	ldr	r2, [r3, #12]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	430a      	orrs	r2, r1
 8008ca4:	619a      	str	r2, [r3, #24]
      break;
 8008ca6:	e066      	b.n	8008d76 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	68ba      	ldr	r2, [r7, #8]
 8008cae:	0011      	movs	r1, r2
 8008cb0:	0018      	movs	r0, r3
 8008cb2:	f000 f9df 	bl	8009074 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	699a      	ldr	r2, [r3, #24]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2180      	movs	r1, #128	; 0x80
 8008cc2:	0109      	lsls	r1, r1, #4
 8008cc4:	430a      	orrs	r2, r1
 8008cc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	699a      	ldr	r2, [r3, #24]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	492f      	ldr	r1, [pc, #188]	; (8008d90 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8008cd4:	400a      	ands	r2, r1
 8008cd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	6999      	ldr	r1, [r3, #24]
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	68db      	ldr	r3, [r3, #12]
 8008ce2:	021a      	lsls	r2, r3, #8
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	430a      	orrs	r2, r1
 8008cea:	619a      	str	r2, [r3, #24]
      break;
 8008cec:	e043      	b.n	8008d76 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	68ba      	ldr	r2, [r7, #8]
 8008cf4:	0011      	movs	r1, r2
 8008cf6:	0018      	movs	r0, r3
 8008cf8:	f000 f9fe 	bl	80090f8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	69da      	ldr	r2, [r3, #28]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	2108      	movs	r1, #8
 8008d08:	430a      	orrs	r2, r1
 8008d0a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	69da      	ldr	r2, [r3, #28]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2104      	movs	r1, #4
 8008d18:	438a      	bics	r2, r1
 8008d1a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	69d9      	ldr	r1, [r3, #28]
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	68da      	ldr	r2, [r3, #12]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	430a      	orrs	r2, r1
 8008d2c:	61da      	str	r2, [r3, #28]
      break;
 8008d2e:	e022      	b.n	8008d76 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	68ba      	ldr	r2, [r7, #8]
 8008d36:	0011      	movs	r1, r2
 8008d38:	0018      	movs	r0, r3
 8008d3a:	f000 fa1d 	bl	8009178 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	69da      	ldr	r2, [r3, #28]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2180      	movs	r1, #128	; 0x80
 8008d4a:	0109      	lsls	r1, r1, #4
 8008d4c:	430a      	orrs	r2, r1
 8008d4e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	69da      	ldr	r2, [r3, #28]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	490d      	ldr	r1, [pc, #52]	; (8008d90 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8008d5c:	400a      	ands	r2, r1
 8008d5e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	69d9      	ldr	r1, [r3, #28]
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	021a      	lsls	r2, r3, #8
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	430a      	orrs	r2, r1
 8008d72:	61da      	str	r2, [r3, #28]
      break;
 8008d74:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2239      	movs	r2, #57	; 0x39
 8008d7a:	2101      	movs	r1, #1
 8008d7c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2238      	movs	r2, #56	; 0x38
 8008d82:	2100      	movs	r1, #0
 8008d84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008d86:	2300      	movs	r3, #0
}
 8008d88:	0018      	movs	r0, r3
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	b004      	add	sp, #16
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	fffffbff 	.word	0xfffffbff

08008d94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2238      	movs	r2, #56	; 0x38
 8008da2:	5c9b      	ldrb	r3, [r3, r2]
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d101      	bne.n	8008dac <HAL_TIM_ConfigClockSource+0x18>
 8008da8:	2302      	movs	r3, #2
 8008daa:	e0ab      	b.n	8008f04 <HAL_TIM_ConfigClockSource+0x170>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2238      	movs	r2, #56	; 0x38
 8008db0:	2101      	movs	r1, #1
 8008db2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2239      	movs	r2, #57	; 0x39
 8008db8:	2102      	movs	r1, #2
 8008dba:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2277      	movs	r2, #119	; 0x77
 8008dc8:	4393      	bics	r3, r2
 8008dca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	4a4f      	ldr	r2, [pc, #316]	; (8008f0c <HAL_TIM_ConfigClockSource+0x178>)
 8008dd0:	4013      	ands	r3, r2
 8008dd2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b40      	cmp	r3, #64	; 0x40
 8008de2:	d100      	bne.n	8008de6 <HAL_TIM_ConfigClockSource+0x52>
 8008de4:	e06b      	b.n	8008ebe <HAL_TIM_ConfigClockSource+0x12a>
 8008de6:	d80e      	bhi.n	8008e06 <HAL_TIM_ConfigClockSource+0x72>
 8008de8:	2b10      	cmp	r3, #16
 8008dea:	d100      	bne.n	8008dee <HAL_TIM_ConfigClockSource+0x5a>
 8008dec:	e077      	b.n	8008ede <HAL_TIM_ConfigClockSource+0x14a>
 8008dee:	d803      	bhi.n	8008df8 <HAL_TIM_ConfigClockSource+0x64>
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d100      	bne.n	8008df6 <HAL_TIM_ConfigClockSource+0x62>
 8008df4:	e073      	b.n	8008ede <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008df6:	e07c      	b.n	8008ef2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8008df8:	2b20      	cmp	r3, #32
 8008dfa:	d100      	bne.n	8008dfe <HAL_TIM_ConfigClockSource+0x6a>
 8008dfc:	e06f      	b.n	8008ede <HAL_TIM_ConfigClockSource+0x14a>
 8008dfe:	2b30      	cmp	r3, #48	; 0x30
 8008e00:	d100      	bne.n	8008e04 <HAL_TIM_ConfigClockSource+0x70>
 8008e02:	e06c      	b.n	8008ede <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8008e04:	e075      	b.n	8008ef2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8008e06:	2b70      	cmp	r3, #112	; 0x70
 8008e08:	d00e      	beq.n	8008e28 <HAL_TIM_ConfigClockSource+0x94>
 8008e0a:	d804      	bhi.n	8008e16 <HAL_TIM_ConfigClockSource+0x82>
 8008e0c:	2b50      	cmp	r3, #80	; 0x50
 8008e0e:	d036      	beq.n	8008e7e <HAL_TIM_ConfigClockSource+0xea>
 8008e10:	2b60      	cmp	r3, #96	; 0x60
 8008e12:	d044      	beq.n	8008e9e <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8008e14:	e06d      	b.n	8008ef2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8008e16:	2280      	movs	r2, #128	; 0x80
 8008e18:	0152      	lsls	r2, r2, #5
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d068      	beq.n	8008ef0 <HAL_TIM_ConfigClockSource+0x15c>
 8008e1e:	2280      	movs	r2, #128	; 0x80
 8008e20:	0192      	lsls	r2, r2, #6
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d017      	beq.n	8008e56 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8008e26:	e064      	b.n	8008ef2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6818      	ldr	r0, [r3, #0]
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	6899      	ldr	r1, [r3, #8]
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	685a      	ldr	r2, [r3, #4]
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	f000 fa5e 	bl	80092f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2277      	movs	r2, #119	; 0x77
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	68fa      	ldr	r2, [r7, #12]
 8008e52:	609a      	str	r2, [r3, #8]
      break;
 8008e54:	e04d      	b.n	8008ef2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6818      	ldr	r0, [r3, #0]
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	6899      	ldr	r1, [r3, #8]
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	685a      	ldr	r2, [r3, #4]
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	68db      	ldr	r3, [r3, #12]
 8008e66:	f000 fa47 	bl	80092f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	689a      	ldr	r2, [r3, #8]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2180      	movs	r1, #128	; 0x80
 8008e76:	01c9      	lsls	r1, r1, #7
 8008e78:	430a      	orrs	r2, r1
 8008e7a:	609a      	str	r2, [r3, #8]
      break;
 8008e7c:	e039      	b.n	8008ef2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6818      	ldr	r0, [r3, #0]
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	6859      	ldr	r1, [r3, #4]
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	001a      	movs	r2, r3
 8008e8c:	f000 f9ba 	bl	8009204 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	2150      	movs	r1, #80	; 0x50
 8008e96:	0018      	movs	r0, r3
 8008e98:	f000 fa14 	bl	80092c4 <TIM_ITRx_SetConfig>
      break;
 8008e9c:	e029      	b.n	8008ef2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6818      	ldr	r0, [r3, #0]
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	6859      	ldr	r1, [r3, #4]
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	001a      	movs	r2, r3
 8008eac:	f000 f9d8 	bl	8009260 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	2160      	movs	r1, #96	; 0x60
 8008eb6:	0018      	movs	r0, r3
 8008eb8:	f000 fa04 	bl	80092c4 <TIM_ITRx_SetConfig>
      break;
 8008ebc:	e019      	b.n	8008ef2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6818      	ldr	r0, [r3, #0]
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	6859      	ldr	r1, [r3, #4]
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	001a      	movs	r2, r3
 8008ecc:	f000 f99a 	bl	8009204 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2140      	movs	r1, #64	; 0x40
 8008ed6:	0018      	movs	r0, r3
 8008ed8:	f000 f9f4 	bl	80092c4 <TIM_ITRx_SetConfig>
      break;
 8008edc:	e009      	b.n	8008ef2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	0019      	movs	r1, r3
 8008ee8:	0010      	movs	r0, r2
 8008eea:	f000 f9eb 	bl	80092c4 <TIM_ITRx_SetConfig>
      break;
 8008eee:	e000      	b.n	8008ef2 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8008ef0:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2239      	movs	r2, #57	; 0x39
 8008ef6:	2101      	movs	r1, #1
 8008ef8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2238      	movs	r2, #56	; 0x38
 8008efe:	2100      	movs	r1, #0
 8008f00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	0018      	movs	r0, r3
 8008f06:	46bd      	mov	sp, r7
 8008f08:	b004      	add	sp, #16
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	ffff00ff 	.word	0xffff00ff

08008f10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f18:	46c0      	nop			; (mov r8, r8)
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	b002      	add	sp, #8
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f28:	46c0      	nop			; (mov r8, r8)
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	b002      	add	sp, #8
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f38:	46c0      	nop			; (mov r8, r8)
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	b002      	add	sp, #8
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	2380      	movs	r3, #128	; 0x80
 8008f54:	05db      	lsls	r3, r3, #23
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d00b      	beq.n	8008f72 <TIM_Base_SetConfig+0x32>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4a23      	ldr	r2, [pc, #140]	; (8008fec <TIM_Base_SetConfig+0xac>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d007      	beq.n	8008f72 <TIM_Base_SetConfig+0x32>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4a22      	ldr	r2, [pc, #136]	; (8008ff0 <TIM_Base_SetConfig+0xb0>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d003      	beq.n	8008f72 <TIM_Base_SetConfig+0x32>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a21      	ldr	r2, [pc, #132]	; (8008ff4 <TIM_Base_SetConfig+0xb4>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d108      	bne.n	8008f84 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2270      	movs	r2, #112	; 0x70
 8008f76:	4393      	bics	r3, r2
 8008f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	68fa      	ldr	r2, [r7, #12]
 8008f80:	4313      	orrs	r3, r2
 8008f82:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	2380      	movs	r3, #128	; 0x80
 8008f88:	05db      	lsls	r3, r3, #23
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d00b      	beq.n	8008fa6 <TIM_Base_SetConfig+0x66>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4a16      	ldr	r2, [pc, #88]	; (8008fec <TIM_Base_SetConfig+0xac>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d007      	beq.n	8008fa6 <TIM_Base_SetConfig+0x66>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	4a15      	ldr	r2, [pc, #84]	; (8008ff0 <TIM_Base_SetConfig+0xb0>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d003      	beq.n	8008fa6 <TIM_Base_SetConfig+0x66>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	4a14      	ldr	r2, [pc, #80]	; (8008ff4 <TIM_Base_SetConfig+0xb4>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d108      	bne.n	8008fb8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	4a13      	ldr	r2, [pc, #76]	; (8008ff8 <TIM_Base_SetConfig+0xb8>)
 8008faa:	4013      	ands	r3, r2
 8008fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	68fa      	ldr	r2, [r7, #12]
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2280      	movs	r2, #128	; 0x80
 8008fbc:	4393      	bics	r3, r2
 8008fbe:	001a      	movs	r2, r3
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	68fa      	ldr	r2, [r7, #12]
 8008fcc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	689a      	ldr	r2, [r3, #8]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	615a      	str	r2, [r3, #20]
}
 8008fe4:	46c0      	nop			; (mov r8, r8)
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	b004      	add	sp, #16
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	40000400 	.word	0x40000400
 8008ff0:	40010800 	.word	0x40010800
 8008ff4:	40011400 	.word	0x40011400
 8008ff8:	fffffcff 	.word	0xfffffcff

08008ffc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b086      	sub	sp, #24
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a1b      	ldr	r3, [r3, #32]
 800900a:	2201      	movs	r2, #1
 800900c:	4393      	bics	r3, r2
 800900e:	001a      	movs	r2, r3
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6a1b      	ldr	r3, [r3, #32]
 8009018:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	699b      	ldr	r3, [r3, #24]
 8009024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2270      	movs	r2, #112	; 0x70
 800902a:	4393      	bics	r3, r2
 800902c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2203      	movs	r2, #3
 8009032:	4393      	bics	r3, r2
 8009034:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	4313      	orrs	r3, r2
 800903e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	2202      	movs	r2, #2
 8009044:	4393      	bics	r3, r2
 8009046:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	697a      	ldr	r2, [r7, #20]
 800904e:	4313      	orrs	r3, r2
 8009050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	693a      	ldr	r2, [r7, #16]
 8009056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	685a      	ldr	r2, [r3, #4]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	697a      	ldr	r2, [r7, #20]
 800906a:	621a      	str	r2, [r3, #32]
}
 800906c:	46c0      	nop			; (mov r8, r8)
 800906e:	46bd      	mov	sp, r7
 8009070:	b006      	add	sp, #24
 8009072:	bd80      	pop	{r7, pc}

08009074 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b086      	sub	sp, #24
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6a1b      	ldr	r3, [r3, #32]
 8009082:	2210      	movs	r2, #16
 8009084:	4393      	bics	r3, r2
 8009086:	001a      	movs	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6a1b      	ldr	r3, [r3, #32]
 8009090:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	699b      	ldr	r3, [r3, #24]
 800909c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	4a13      	ldr	r2, [pc, #76]	; (80090f0 <TIM_OC2_SetConfig+0x7c>)
 80090a2:	4013      	ands	r3, r2
 80090a4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	4a12      	ldr	r2, [pc, #72]	; (80090f4 <TIM_OC2_SetConfig+0x80>)
 80090aa:	4013      	ands	r3, r2
 80090ac:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	021b      	lsls	r3, r3, #8
 80090b4:	68fa      	ldr	r2, [r7, #12]
 80090b6:	4313      	orrs	r3, r2
 80090b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	2220      	movs	r2, #32
 80090be:	4393      	bics	r3, r2
 80090c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	011b      	lsls	r3, r3, #4
 80090c8:	697a      	ldr	r2, [r7, #20]
 80090ca:	4313      	orrs	r3, r2
 80090cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	693a      	ldr	r2, [r7, #16]
 80090d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	685a      	ldr	r2, [r3, #4]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	697a      	ldr	r2, [r7, #20]
 80090e6:	621a      	str	r2, [r3, #32]
}
 80090e8:	46c0      	nop			; (mov r8, r8)
 80090ea:	46bd      	mov	sp, r7
 80090ec:	b006      	add	sp, #24
 80090ee:	bd80      	pop	{r7, pc}
 80090f0:	ffff8fff 	.word	0xffff8fff
 80090f4:	fffffcff 	.word	0xfffffcff

080090f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b086      	sub	sp, #24
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6a1b      	ldr	r3, [r3, #32]
 8009106:	4a1a      	ldr	r2, [pc, #104]	; (8009170 <TIM_OC3_SetConfig+0x78>)
 8009108:	401a      	ands	r2, r3
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a1b      	ldr	r3, [r3, #32]
 8009112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	69db      	ldr	r3, [r3, #28]
 800911e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2270      	movs	r2, #112	; 0x70
 8009124:	4393      	bics	r3, r2
 8009126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2203      	movs	r2, #3
 800912c:	4393      	bics	r3, r2
 800912e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	68fa      	ldr	r2, [r7, #12]
 8009136:	4313      	orrs	r3, r2
 8009138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	4a0d      	ldr	r2, [pc, #52]	; (8009174 <TIM_OC3_SetConfig+0x7c>)
 800913e:	4013      	ands	r3, r2
 8009140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	021b      	lsls	r3, r3, #8
 8009148:	697a      	ldr	r2, [r7, #20]
 800914a:	4313      	orrs	r3, r2
 800914c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	693a      	ldr	r2, [r7, #16]
 8009152:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	68fa      	ldr	r2, [r7, #12]
 8009158:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	685a      	ldr	r2, [r3, #4]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	697a      	ldr	r2, [r7, #20]
 8009166:	621a      	str	r2, [r3, #32]
}
 8009168:	46c0      	nop			; (mov r8, r8)
 800916a:	46bd      	mov	sp, r7
 800916c:	b006      	add	sp, #24
 800916e:	bd80      	pop	{r7, pc}
 8009170:	fffffeff 	.word	0xfffffeff
 8009174:	fffffdff 	.word	0xfffffdff

08009178 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b086      	sub	sp, #24
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a1b      	ldr	r3, [r3, #32]
 8009186:	4a1b      	ldr	r2, [pc, #108]	; (80091f4 <TIM_OC4_SetConfig+0x7c>)
 8009188:	401a      	ands	r2, r3
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a1b      	ldr	r3, [r3, #32]
 8009192:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	69db      	ldr	r3, [r3, #28]
 800919e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	4a15      	ldr	r2, [pc, #84]	; (80091f8 <TIM_OC4_SetConfig+0x80>)
 80091a4:	4013      	ands	r3, r2
 80091a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	4a14      	ldr	r2, [pc, #80]	; (80091fc <TIM_OC4_SetConfig+0x84>)
 80091ac:	4013      	ands	r3, r2
 80091ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	021b      	lsls	r3, r3, #8
 80091b6:	68fa      	ldr	r2, [r7, #12]
 80091b8:	4313      	orrs	r3, r2
 80091ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	4a10      	ldr	r2, [pc, #64]	; (8009200 <TIM_OC4_SetConfig+0x88>)
 80091c0:	4013      	ands	r3, r2
 80091c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	031b      	lsls	r3, r3, #12
 80091ca:	697a      	ldr	r2, [r7, #20]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	693a      	ldr	r2, [r7, #16]
 80091d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	685a      	ldr	r2, [r3, #4]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	697a      	ldr	r2, [r7, #20]
 80091e8:	621a      	str	r2, [r3, #32]
}
 80091ea:	46c0      	nop			; (mov r8, r8)
 80091ec:	46bd      	mov	sp, r7
 80091ee:	b006      	add	sp, #24
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	46c0      	nop			; (mov r8, r8)
 80091f4:	ffffefff 	.word	0xffffefff
 80091f8:	ffff8fff 	.word	0xffff8fff
 80091fc:	fffffcff 	.word	0xfffffcff
 8009200:	ffffdfff 	.word	0xffffdfff

08009204 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b086      	sub	sp, #24
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	6a1b      	ldr	r3, [r3, #32]
 8009214:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6a1b      	ldr	r3, [r3, #32]
 800921a:	2201      	movs	r2, #1
 800921c:	4393      	bics	r3, r2
 800921e:	001a      	movs	r2, r3
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	699b      	ldr	r3, [r3, #24]
 8009228:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	22f0      	movs	r2, #240	; 0xf0
 800922e:	4393      	bics	r3, r2
 8009230:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	011b      	lsls	r3, r3, #4
 8009236:	693a      	ldr	r2, [r7, #16]
 8009238:	4313      	orrs	r3, r2
 800923a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	220a      	movs	r2, #10
 8009240:	4393      	bics	r3, r2
 8009242:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009244:	697a      	ldr	r2, [r7, #20]
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	4313      	orrs	r3, r2
 800924a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	693a      	ldr	r2, [r7, #16]
 8009250:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	697a      	ldr	r2, [r7, #20]
 8009256:	621a      	str	r2, [r3, #32]
}
 8009258:	46c0      	nop			; (mov r8, r8)
 800925a:	46bd      	mov	sp, r7
 800925c:	b006      	add	sp, #24
 800925e:	bd80      	pop	{r7, pc}

08009260 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b086      	sub	sp, #24
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6a1b      	ldr	r3, [r3, #32]
 8009270:	2210      	movs	r2, #16
 8009272:	4393      	bics	r3, r2
 8009274:	001a      	movs	r2, r3
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	699b      	ldr	r3, [r3, #24]
 800927e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	6a1b      	ldr	r3, [r3, #32]
 8009284:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	4a0d      	ldr	r2, [pc, #52]	; (80092c0 <TIM_TI2_ConfigInputStage+0x60>)
 800928a:	4013      	ands	r3, r2
 800928c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	031b      	lsls	r3, r3, #12
 8009292:	697a      	ldr	r2, [r7, #20]
 8009294:	4313      	orrs	r3, r2
 8009296:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	22a0      	movs	r2, #160	; 0xa0
 800929c:	4393      	bics	r3, r2
 800929e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	011b      	lsls	r3, r3, #4
 80092a4:	693a      	ldr	r2, [r7, #16]
 80092a6:	4313      	orrs	r3, r2
 80092a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	697a      	ldr	r2, [r7, #20]
 80092ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	693a      	ldr	r2, [r7, #16]
 80092b4:	621a      	str	r2, [r3, #32]
}
 80092b6:	46c0      	nop			; (mov r8, r8)
 80092b8:	46bd      	mov	sp, r7
 80092ba:	b006      	add	sp, #24
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	46c0      	nop			; (mov r8, r8)
 80092c0:	ffff0fff 	.word	0xffff0fff

080092c4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2270      	movs	r2, #112	; 0x70
 80092d8:	4393      	bics	r3, r2
 80092da:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80092dc:	683a      	ldr	r2, [r7, #0]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	4313      	orrs	r3, r2
 80092e2:	2207      	movs	r2, #7
 80092e4:	4313      	orrs	r3, r2
 80092e6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	68fa      	ldr	r2, [r7, #12]
 80092ec:	609a      	str	r2, [r3, #8]
}
 80092ee:	46c0      	nop			; (mov r8, r8)
 80092f0:	46bd      	mov	sp, r7
 80092f2:	b004      	add	sp, #16
 80092f4:	bd80      	pop	{r7, pc}
	...

080092f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b086      	sub	sp, #24
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	607a      	str	r2, [r7, #4]
 8009304:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	4a09      	ldr	r2, [pc, #36]	; (8009334 <TIM_ETR_SetConfig+0x3c>)
 8009310:	4013      	ands	r3, r2
 8009312:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	021a      	lsls	r2, r3, #8
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	431a      	orrs	r2, r3
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	4313      	orrs	r3, r2
 8009320:	697a      	ldr	r2, [r7, #20]
 8009322:	4313      	orrs	r3, r2
 8009324:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	697a      	ldr	r2, [r7, #20]
 800932a:	609a      	str	r2, [r3, #8]
}
 800932c:	46c0      	nop			; (mov r8, r8)
 800932e:	46bd      	mov	sp, r7
 8009330:	b006      	add	sp, #24
 8009332:	bd80      	pop	{r7, pc}
 8009334:	ffff00ff 	.word	0xffff00ff

08009338 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b086      	sub	sp, #24
 800933c:	af00      	add	r7, sp, #0
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	60b9      	str	r1, [r7, #8]
 8009342:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	221f      	movs	r2, #31
 8009348:	4013      	ands	r3, r2
 800934a:	2201      	movs	r2, #1
 800934c:	409a      	lsls	r2, r3
 800934e:	0013      	movs	r3, r2
 8009350:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6a1b      	ldr	r3, [r3, #32]
 8009356:	697a      	ldr	r2, [r7, #20]
 8009358:	43d2      	mvns	r2, r2
 800935a:	401a      	ands	r2, r3
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	6a1a      	ldr	r2, [r3, #32]
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	211f      	movs	r1, #31
 8009368:	400b      	ands	r3, r1
 800936a:	6879      	ldr	r1, [r7, #4]
 800936c:	4099      	lsls	r1, r3
 800936e:	000b      	movs	r3, r1
 8009370:	431a      	orrs	r2, r3
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	621a      	str	r2, [r3, #32]
}
 8009376:	46c0      	nop			; (mov r8, r8)
 8009378:	46bd      	mov	sp, r7
 800937a:	b006      	add	sp, #24
 800937c:	bd80      	pop	{r7, pc}

0800937e <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b084      	sub	sp, #16
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
 8009386:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2238      	movs	r2, #56	; 0x38
 800938c:	5c9b      	ldrb	r3, [r3, r2]
 800938e:	2b01      	cmp	r3, #1
 8009390:	d101      	bne.n	8009396 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009392:	2302      	movs	r3, #2
 8009394:	e032      	b.n	80093fc <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2238      	movs	r2, #56	; 0x38
 800939a:	2101      	movs	r1, #1
 800939c:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2239      	movs	r2, #57	; 0x39
 80093a2:	2102      	movs	r1, #2
 80093a4:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2270      	movs	r2, #112	; 0x70
 80093ba:	4393      	bics	r3, r2
 80093bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68fa      	ldr	r2, [r7, #12]
 80093c4:	4313      	orrs	r3, r2
 80093c6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	2280      	movs	r2, #128	; 0x80
 80093cc:	4393      	bics	r3, r2
 80093ce:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	68ba      	ldr	r2, [r7, #8]
 80093d6:	4313      	orrs	r3, r2
 80093d8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	68fa      	ldr	r2, [r7, #12]
 80093e0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	68ba      	ldr	r2, [r7, #8]
 80093e8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2239      	movs	r2, #57	; 0x39
 80093ee:	2101      	movs	r1, #1
 80093f0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2238      	movs	r2, #56	; 0x38
 80093f6:	2100      	movs	r1, #0
 80093f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80093fa:	2300      	movs	r3, #0
}
 80093fc:	0018      	movs	r0, r3
 80093fe:	46bd      	mov	sp, r7
 8009400:	b004      	add	sp, #16
 8009402:	bd80      	pop	{r7, pc}

08009404 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2238      	movs	r2, #56	; 0x38
 8009412:	5c9b      	ldrb	r3, [r3, r2]
 8009414:	2b01      	cmp	r3, #1
 8009416:	d101      	bne.n	800941c <HAL_TIMEx_RemapConfig+0x18>
 8009418:	2302      	movs	r3, #2
 800941a:	e00c      	b.n	8009436 <HAL_TIMEx_RemapConfig+0x32>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2238      	movs	r2, #56	; 0x38
 8009420:	2101      	movs	r1, #1
 8009422:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	683a      	ldr	r2, [r7, #0]
 800942a:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2238      	movs	r2, #56	; 0x38
 8009430:	2100      	movs	r1, #0
 8009432:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009434:	2300      	movs	r3, #0
}
 8009436:	0018      	movs	r0, r3
 8009438:	46bd      	mov	sp, r7
 800943a:	b002      	add	sp, #8
 800943c:	bd80      	pop	{r7, pc}
	...

08009440 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009448:	4b09      	ldr	r3, [pc, #36]	; (8009470 <USB_DisableGlobalInt+0x30>)
 800944a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2240      	movs	r2, #64	; 0x40
 8009450:	5a9b      	ldrh	r3, [r3, r2]
 8009452:	b29b      	uxth	r3, r3
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	b292      	uxth	r2, r2
 8009458:	43d2      	mvns	r2, r2
 800945a:	b292      	uxth	r2, r2
 800945c:	4013      	ands	r3, r2
 800945e:	b299      	uxth	r1, r3
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2240      	movs	r2, #64	; 0x40
 8009464:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8009466:	2300      	movs	r3, #0
}
 8009468:	0018      	movs	r0, r3
 800946a:	46bd      	mov	sp, r7
 800946c:	b004      	add	sp, #16
 800946e:	bd80      	pop	{r7, pc}
 8009470:	0000bf80 	.word	0x0000bf80

08009474 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009474:	b084      	sub	sp, #16
 8009476:	b590      	push	{r4, r7, lr}
 8009478:	46c6      	mov	lr, r8
 800947a:	b500      	push	{lr}
 800947c:	b082      	sub	sp, #8
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
 8009482:	2004      	movs	r0, #4
 8009484:	2410      	movs	r4, #16
 8009486:	46a4      	mov	ip, r4
 8009488:	2408      	movs	r4, #8
 800948a:	46a0      	mov	r8, r4
 800948c:	44b8      	add	r8, r7
 800948e:	44c4      	add	ip, r8
 8009490:	4460      	add	r0, ip
 8009492:	6001      	str	r1, [r0, #0]
 8009494:	6042      	str	r2, [r0, #4]
 8009496:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2240      	movs	r2, #64	; 0x40
 800949c:	2101      	movs	r1, #1
 800949e:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2240      	movs	r2, #64	; 0x40
 80094a4:	2100      	movs	r1, #0
 80094a6:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2244      	movs	r2, #68	; 0x44
 80094ac:	2100      	movs	r1, #0
 80094ae:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2250      	movs	r2, #80	; 0x50
 80094b4:	2100      	movs	r1, #0
 80094b6:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80094b8:	2300      	movs	r3, #0
}
 80094ba:	0018      	movs	r0, r3
 80094bc:	46bd      	mov	sp, r7
 80094be:	b002      	add	sp, #8
 80094c0:	bc04      	pop	{r2}
 80094c2:	4690      	mov	r8, r2
 80094c4:	bc90      	pop	{r4, r7}
 80094c6:	bc08      	pop	{r3}
 80094c8:	b004      	add	sp, #16
 80094ca:	4718      	bx	r3

080094cc <calloc>:
 80094cc:	b510      	push	{r4, lr}
 80094ce:	4b03      	ldr	r3, [pc, #12]	; (80094dc <calloc+0x10>)
 80094d0:	000a      	movs	r2, r1
 80094d2:	0001      	movs	r1, r0
 80094d4:	6818      	ldr	r0, [r3, #0]
 80094d6:	f000 f83e 	bl	8009556 <_calloc_r>
 80094da:	bd10      	pop	{r4, pc}
 80094dc:	20000020 	.word	0x20000020

080094e0 <__errno>:
 80094e0:	4b01      	ldr	r3, [pc, #4]	; (80094e8 <__errno+0x8>)
 80094e2:	6818      	ldr	r0, [r3, #0]
 80094e4:	4770      	bx	lr
 80094e6:	46c0      	nop			; (mov r8, r8)
 80094e8:	20000020 	.word	0x20000020

080094ec <__libc_init_array>:
 80094ec:	b570      	push	{r4, r5, r6, lr}
 80094ee:	2600      	movs	r6, #0
 80094f0:	4d0c      	ldr	r5, [pc, #48]	; (8009524 <__libc_init_array+0x38>)
 80094f2:	4c0d      	ldr	r4, [pc, #52]	; (8009528 <__libc_init_array+0x3c>)
 80094f4:	1b64      	subs	r4, r4, r5
 80094f6:	10a4      	asrs	r4, r4, #2
 80094f8:	42a6      	cmp	r6, r4
 80094fa:	d109      	bne.n	8009510 <__libc_init_array+0x24>
 80094fc:	2600      	movs	r6, #0
 80094fe:	f000 fc37 	bl	8009d70 <_init>
 8009502:	4d0a      	ldr	r5, [pc, #40]	; (800952c <__libc_init_array+0x40>)
 8009504:	4c0a      	ldr	r4, [pc, #40]	; (8009530 <__libc_init_array+0x44>)
 8009506:	1b64      	subs	r4, r4, r5
 8009508:	10a4      	asrs	r4, r4, #2
 800950a:	42a6      	cmp	r6, r4
 800950c:	d105      	bne.n	800951a <__libc_init_array+0x2e>
 800950e:	bd70      	pop	{r4, r5, r6, pc}
 8009510:	00b3      	lsls	r3, r6, #2
 8009512:	58eb      	ldr	r3, [r5, r3]
 8009514:	4798      	blx	r3
 8009516:	3601      	adds	r6, #1
 8009518:	e7ee      	b.n	80094f8 <__libc_init_array+0xc>
 800951a:	00b3      	lsls	r3, r6, #2
 800951c:	58eb      	ldr	r3, [r5, r3]
 800951e:	4798      	blx	r3
 8009520:	3601      	adds	r6, #1
 8009522:	e7f2      	b.n	800950a <__libc_init_array+0x1e>
 8009524:	0800a6c0 	.word	0x0800a6c0
 8009528:	0800a6c0 	.word	0x0800a6c0
 800952c:	0800a6c0 	.word	0x0800a6c0
 8009530:	0800a6c4 	.word	0x0800a6c4

08009534 <memcpy>:
 8009534:	2300      	movs	r3, #0
 8009536:	b510      	push	{r4, lr}
 8009538:	429a      	cmp	r2, r3
 800953a:	d100      	bne.n	800953e <memcpy+0xa>
 800953c:	bd10      	pop	{r4, pc}
 800953e:	5ccc      	ldrb	r4, [r1, r3]
 8009540:	54c4      	strb	r4, [r0, r3]
 8009542:	3301      	adds	r3, #1
 8009544:	e7f8      	b.n	8009538 <memcpy+0x4>

08009546 <memset>:
 8009546:	0003      	movs	r3, r0
 8009548:	1812      	adds	r2, r2, r0
 800954a:	4293      	cmp	r3, r2
 800954c:	d100      	bne.n	8009550 <memset+0xa>
 800954e:	4770      	bx	lr
 8009550:	7019      	strb	r1, [r3, #0]
 8009552:	3301      	adds	r3, #1
 8009554:	e7f9      	b.n	800954a <memset+0x4>

08009556 <_calloc_r>:
 8009556:	434a      	muls	r2, r1
 8009558:	b570      	push	{r4, r5, r6, lr}
 800955a:	0011      	movs	r1, r2
 800955c:	0014      	movs	r4, r2
 800955e:	f000 f809 	bl	8009574 <_malloc_r>
 8009562:	1e05      	subs	r5, r0, #0
 8009564:	d003      	beq.n	800956e <_calloc_r+0x18>
 8009566:	0022      	movs	r2, r4
 8009568:	2100      	movs	r1, #0
 800956a:	f7ff ffec 	bl	8009546 <memset>
 800956e:	0028      	movs	r0, r5
 8009570:	bd70      	pop	{r4, r5, r6, pc}
	...

08009574 <_malloc_r>:
 8009574:	2303      	movs	r3, #3
 8009576:	b570      	push	{r4, r5, r6, lr}
 8009578:	1ccd      	adds	r5, r1, #3
 800957a:	439d      	bics	r5, r3
 800957c:	3508      	adds	r5, #8
 800957e:	0006      	movs	r6, r0
 8009580:	2d0c      	cmp	r5, #12
 8009582:	d21e      	bcs.n	80095c2 <_malloc_r+0x4e>
 8009584:	250c      	movs	r5, #12
 8009586:	42a9      	cmp	r1, r5
 8009588:	d81d      	bhi.n	80095c6 <_malloc_r+0x52>
 800958a:	0030      	movs	r0, r6
 800958c:	f000 f882 	bl	8009694 <__malloc_lock>
 8009590:	4a25      	ldr	r2, [pc, #148]	; (8009628 <_malloc_r+0xb4>)
 8009592:	6814      	ldr	r4, [r2, #0]
 8009594:	0021      	movs	r1, r4
 8009596:	2900      	cmp	r1, #0
 8009598:	d119      	bne.n	80095ce <_malloc_r+0x5a>
 800959a:	4c24      	ldr	r4, [pc, #144]	; (800962c <_malloc_r+0xb8>)
 800959c:	6823      	ldr	r3, [r4, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d103      	bne.n	80095aa <_malloc_r+0x36>
 80095a2:	0030      	movs	r0, r6
 80095a4:	f000 f844 	bl	8009630 <_sbrk_r>
 80095a8:	6020      	str	r0, [r4, #0]
 80095aa:	0029      	movs	r1, r5
 80095ac:	0030      	movs	r0, r6
 80095ae:	f000 f83f 	bl	8009630 <_sbrk_r>
 80095b2:	1c43      	adds	r3, r0, #1
 80095b4:	d12b      	bne.n	800960e <_malloc_r+0x9a>
 80095b6:	230c      	movs	r3, #12
 80095b8:	0030      	movs	r0, r6
 80095ba:	6033      	str	r3, [r6, #0]
 80095bc:	f000 f86b 	bl	8009696 <__malloc_unlock>
 80095c0:	e003      	b.n	80095ca <_malloc_r+0x56>
 80095c2:	2d00      	cmp	r5, #0
 80095c4:	dadf      	bge.n	8009586 <_malloc_r+0x12>
 80095c6:	230c      	movs	r3, #12
 80095c8:	6033      	str	r3, [r6, #0]
 80095ca:	2000      	movs	r0, #0
 80095cc:	bd70      	pop	{r4, r5, r6, pc}
 80095ce:	680b      	ldr	r3, [r1, #0]
 80095d0:	1b5b      	subs	r3, r3, r5
 80095d2:	d419      	bmi.n	8009608 <_malloc_r+0x94>
 80095d4:	2b0b      	cmp	r3, #11
 80095d6:	d903      	bls.n	80095e0 <_malloc_r+0x6c>
 80095d8:	600b      	str	r3, [r1, #0]
 80095da:	18cc      	adds	r4, r1, r3
 80095dc:	6025      	str	r5, [r4, #0]
 80095de:	e003      	b.n	80095e8 <_malloc_r+0x74>
 80095e0:	684b      	ldr	r3, [r1, #4]
 80095e2:	428c      	cmp	r4, r1
 80095e4:	d10d      	bne.n	8009602 <_malloc_r+0x8e>
 80095e6:	6013      	str	r3, [r2, #0]
 80095e8:	0030      	movs	r0, r6
 80095ea:	f000 f854 	bl	8009696 <__malloc_unlock>
 80095ee:	0020      	movs	r0, r4
 80095f0:	2207      	movs	r2, #7
 80095f2:	300b      	adds	r0, #11
 80095f4:	1d23      	adds	r3, r4, #4
 80095f6:	4390      	bics	r0, r2
 80095f8:	1ac3      	subs	r3, r0, r3
 80095fa:	d0e7      	beq.n	80095cc <_malloc_r+0x58>
 80095fc:	425a      	negs	r2, r3
 80095fe:	50e2      	str	r2, [r4, r3]
 8009600:	e7e4      	b.n	80095cc <_malloc_r+0x58>
 8009602:	6063      	str	r3, [r4, #4]
 8009604:	000c      	movs	r4, r1
 8009606:	e7ef      	b.n	80095e8 <_malloc_r+0x74>
 8009608:	000c      	movs	r4, r1
 800960a:	6849      	ldr	r1, [r1, #4]
 800960c:	e7c3      	b.n	8009596 <_malloc_r+0x22>
 800960e:	2303      	movs	r3, #3
 8009610:	1cc4      	adds	r4, r0, #3
 8009612:	439c      	bics	r4, r3
 8009614:	42a0      	cmp	r0, r4
 8009616:	d0e1      	beq.n	80095dc <_malloc_r+0x68>
 8009618:	1a21      	subs	r1, r4, r0
 800961a:	0030      	movs	r0, r6
 800961c:	f000 f808 	bl	8009630 <_sbrk_r>
 8009620:	1c43      	adds	r3, r0, #1
 8009622:	d1db      	bne.n	80095dc <_malloc_r+0x68>
 8009624:	e7c7      	b.n	80095b6 <_malloc_r+0x42>
 8009626:	46c0      	nop			; (mov r8, r8)
 8009628:	20000100 	.word	0x20000100
 800962c:	20000104 	.word	0x20000104

08009630 <_sbrk_r>:
 8009630:	2300      	movs	r3, #0
 8009632:	b570      	push	{r4, r5, r6, lr}
 8009634:	4c06      	ldr	r4, [pc, #24]	; (8009650 <_sbrk_r+0x20>)
 8009636:	0005      	movs	r5, r0
 8009638:	0008      	movs	r0, r1
 800963a:	6023      	str	r3, [r4, #0]
 800963c:	f7fb f9f8 	bl	8004a30 <_sbrk>
 8009640:	1c43      	adds	r3, r0, #1
 8009642:	d103      	bne.n	800964c <_sbrk_r+0x1c>
 8009644:	6823      	ldr	r3, [r4, #0]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d000      	beq.n	800964c <_sbrk_r+0x1c>
 800964a:	602b      	str	r3, [r5, #0]
 800964c:	bd70      	pop	{r4, r5, r6, pc}
 800964e:	46c0      	nop			; (mov r8, r8)
 8009650:	2000066c 	.word	0x2000066c

08009654 <siprintf>:
 8009654:	b40e      	push	{r1, r2, r3}
 8009656:	b500      	push	{lr}
 8009658:	490b      	ldr	r1, [pc, #44]	; (8009688 <siprintf+0x34>)
 800965a:	b09c      	sub	sp, #112	; 0x70
 800965c:	ab1d      	add	r3, sp, #116	; 0x74
 800965e:	9002      	str	r0, [sp, #8]
 8009660:	9006      	str	r0, [sp, #24]
 8009662:	9107      	str	r1, [sp, #28]
 8009664:	9104      	str	r1, [sp, #16]
 8009666:	4809      	ldr	r0, [pc, #36]	; (800968c <siprintf+0x38>)
 8009668:	4909      	ldr	r1, [pc, #36]	; (8009690 <siprintf+0x3c>)
 800966a:	cb04      	ldmia	r3!, {r2}
 800966c:	9105      	str	r1, [sp, #20]
 800966e:	6800      	ldr	r0, [r0, #0]
 8009670:	a902      	add	r1, sp, #8
 8009672:	9301      	str	r3, [sp, #4]
 8009674:	f000 f872 	bl	800975c <_svfiprintf_r>
 8009678:	2300      	movs	r3, #0
 800967a:	9a02      	ldr	r2, [sp, #8]
 800967c:	7013      	strb	r3, [r2, #0]
 800967e:	b01c      	add	sp, #112	; 0x70
 8009680:	bc08      	pop	{r3}
 8009682:	b003      	add	sp, #12
 8009684:	4718      	bx	r3
 8009686:	46c0      	nop			; (mov r8, r8)
 8009688:	7fffffff 	.word	0x7fffffff
 800968c:	20000020 	.word	0x20000020
 8009690:	ffff0208 	.word	0xffff0208

08009694 <__malloc_lock>:
 8009694:	4770      	bx	lr

08009696 <__malloc_unlock>:
 8009696:	4770      	bx	lr

08009698 <__ssputs_r>:
 8009698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800969a:	688e      	ldr	r6, [r1, #8]
 800969c:	b085      	sub	sp, #20
 800969e:	0007      	movs	r7, r0
 80096a0:	000c      	movs	r4, r1
 80096a2:	9203      	str	r2, [sp, #12]
 80096a4:	9301      	str	r3, [sp, #4]
 80096a6:	429e      	cmp	r6, r3
 80096a8:	d83c      	bhi.n	8009724 <__ssputs_r+0x8c>
 80096aa:	2390      	movs	r3, #144	; 0x90
 80096ac:	898a      	ldrh	r2, [r1, #12]
 80096ae:	00db      	lsls	r3, r3, #3
 80096b0:	421a      	tst	r2, r3
 80096b2:	d034      	beq.n	800971e <__ssputs_r+0x86>
 80096b4:	2503      	movs	r5, #3
 80096b6:	6909      	ldr	r1, [r1, #16]
 80096b8:	6823      	ldr	r3, [r4, #0]
 80096ba:	1a5b      	subs	r3, r3, r1
 80096bc:	9302      	str	r3, [sp, #8]
 80096be:	6963      	ldr	r3, [r4, #20]
 80096c0:	9802      	ldr	r0, [sp, #8]
 80096c2:	435d      	muls	r5, r3
 80096c4:	0feb      	lsrs	r3, r5, #31
 80096c6:	195d      	adds	r5, r3, r5
 80096c8:	9b01      	ldr	r3, [sp, #4]
 80096ca:	106d      	asrs	r5, r5, #1
 80096cc:	3301      	adds	r3, #1
 80096ce:	181b      	adds	r3, r3, r0
 80096d0:	42ab      	cmp	r3, r5
 80096d2:	d900      	bls.n	80096d6 <__ssputs_r+0x3e>
 80096d4:	001d      	movs	r5, r3
 80096d6:	0553      	lsls	r3, r2, #21
 80096d8:	d532      	bpl.n	8009740 <__ssputs_r+0xa8>
 80096da:	0029      	movs	r1, r5
 80096dc:	0038      	movs	r0, r7
 80096de:	f7ff ff49 	bl	8009574 <_malloc_r>
 80096e2:	1e06      	subs	r6, r0, #0
 80096e4:	d109      	bne.n	80096fa <__ssputs_r+0x62>
 80096e6:	230c      	movs	r3, #12
 80096e8:	603b      	str	r3, [r7, #0]
 80096ea:	2340      	movs	r3, #64	; 0x40
 80096ec:	2001      	movs	r0, #1
 80096ee:	89a2      	ldrh	r2, [r4, #12]
 80096f0:	4240      	negs	r0, r0
 80096f2:	4313      	orrs	r3, r2
 80096f4:	81a3      	strh	r3, [r4, #12]
 80096f6:	b005      	add	sp, #20
 80096f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096fa:	9a02      	ldr	r2, [sp, #8]
 80096fc:	6921      	ldr	r1, [r4, #16]
 80096fe:	f7ff ff19 	bl	8009534 <memcpy>
 8009702:	89a3      	ldrh	r3, [r4, #12]
 8009704:	4a14      	ldr	r2, [pc, #80]	; (8009758 <__ssputs_r+0xc0>)
 8009706:	401a      	ands	r2, r3
 8009708:	2380      	movs	r3, #128	; 0x80
 800970a:	4313      	orrs	r3, r2
 800970c:	81a3      	strh	r3, [r4, #12]
 800970e:	9b02      	ldr	r3, [sp, #8]
 8009710:	6126      	str	r6, [r4, #16]
 8009712:	18f6      	adds	r6, r6, r3
 8009714:	6026      	str	r6, [r4, #0]
 8009716:	6165      	str	r5, [r4, #20]
 8009718:	9e01      	ldr	r6, [sp, #4]
 800971a:	1aed      	subs	r5, r5, r3
 800971c:	60a5      	str	r5, [r4, #8]
 800971e:	9b01      	ldr	r3, [sp, #4]
 8009720:	429e      	cmp	r6, r3
 8009722:	d900      	bls.n	8009726 <__ssputs_r+0x8e>
 8009724:	9e01      	ldr	r6, [sp, #4]
 8009726:	0032      	movs	r2, r6
 8009728:	9903      	ldr	r1, [sp, #12]
 800972a:	6820      	ldr	r0, [r4, #0]
 800972c:	f000 fa95 	bl	8009c5a <memmove>
 8009730:	68a3      	ldr	r3, [r4, #8]
 8009732:	2000      	movs	r0, #0
 8009734:	1b9b      	subs	r3, r3, r6
 8009736:	60a3      	str	r3, [r4, #8]
 8009738:	6823      	ldr	r3, [r4, #0]
 800973a:	199e      	adds	r6, r3, r6
 800973c:	6026      	str	r6, [r4, #0]
 800973e:	e7da      	b.n	80096f6 <__ssputs_r+0x5e>
 8009740:	002a      	movs	r2, r5
 8009742:	0038      	movs	r0, r7
 8009744:	f000 fae6 	bl	8009d14 <_realloc_r>
 8009748:	1e06      	subs	r6, r0, #0
 800974a:	d1e0      	bne.n	800970e <__ssputs_r+0x76>
 800974c:	6921      	ldr	r1, [r4, #16]
 800974e:	0038      	movs	r0, r7
 8009750:	f000 fa96 	bl	8009c80 <_free_r>
 8009754:	e7c7      	b.n	80096e6 <__ssputs_r+0x4e>
 8009756:	46c0      	nop			; (mov r8, r8)
 8009758:	fffffb7f 	.word	0xfffffb7f

0800975c <_svfiprintf_r>:
 800975c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800975e:	b0a1      	sub	sp, #132	; 0x84
 8009760:	9003      	str	r0, [sp, #12]
 8009762:	001d      	movs	r5, r3
 8009764:	898b      	ldrh	r3, [r1, #12]
 8009766:	000f      	movs	r7, r1
 8009768:	0016      	movs	r6, r2
 800976a:	061b      	lsls	r3, r3, #24
 800976c:	d511      	bpl.n	8009792 <_svfiprintf_r+0x36>
 800976e:	690b      	ldr	r3, [r1, #16]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d10e      	bne.n	8009792 <_svfiprintf_r+0x36>
 8009774:	2140      	movs	r1, #64	; 0x40
 8009776:	f7ff fefd 	bl	8009574 <_malloc_r>
 800977a:	6038      	str	r0, [r7, #0]
 800977c:	6138      	str	r0, [r7, #16]
 800977e:	2800      	cmp	r0, #0
 8009780:	d105      	bne.n	800978e <_svfiprintf_r+0x32>
 8009782:	230c      	movs	r3, #12
 8009784:	9a03      	ldr	r2, [sp, #12]
 8009786:	3801      	subs	r0, #1
 8009788:	6013      	str	r3, [r2, #0]
 800978a:	b021      	add	sp, #132	; 0x84
 800978c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800978e:	2340      	movs	r3, #64	; 0x40
 8009790:	617b      	str	r3, [r7, #20]
 8009792:	2300      	movs	r3, #0
 8009794:	ac08      	add	r4, sp, #32
 8009796:	6163      	str	r3, [r4, #20]
 8009798:	3320      	adds	r3, #32
 800979a:	7663      	strb	r3, [r4, #25]
 800979c:	3310      	adds	r3, #16
 800979e:	76a3      	strb	r3, [r4, #26]
 80097a0:	9507      	str	r5, [sp, #28]
 80097a2:	0035      	movs	r5, r6
 80097a4:	782b      	ldrb	r3, [r5, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d001      	beq.n	80097ae <_svfiprintf_r+0x52>
 80097aa:	2b25      	cmp	r3, #37	; 0x25
 80097ac:	d146      	bne.n	800983c <_svfiprintf_r+0xe0>
 80097ae:	1bab      	subs	r3, r5, r6
 80097b0:	9305      	str	r3, [sp, #20]
 80097b2:	d00c      	beq.n	80097ce <_svfiprintf_r+0x72>
 80097b4:	0032      	movs	r2, r6
 80097b6:	0039      	movs	r1, r7
 80097b8:	9803      	ldr	r0, [sp, #12]
 80097ba:	f7ff ff6d 	bl	8009698 <__ssputs_r>
 80097be:	1c43      	adds	r3, r0, #1
 80097c0:	d100      	bne.n	80097c4 <_svfiprintf_r+0x68>
 80097c2:	e0ae      	b.n	8009922 <_svfiprintf_r+0x1c6>
 80097c4:	6962      	ldr	r2, [r4, #20]
 80097c6:	9b05      	ldr	r3, [sp, #20]
 80097c8:	4694      	mov	ip, r2
 80097ca:	4463      	add	r3, ip
 80097cc:	6163      	str	r3, [r4, #20]
 80097ce:	782b      	ldrb	r3, [r5, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d100      	bne.n	80097d6 <_svfiprintf_r+0x7a>
 80097d4:	e0a5      	b.n	8009922 <_svfiprintf_r+0x1c6>
 80097d6:	2201      	movs	r2, #1
 80097d8:	2300      	movs	r3, #0
 80097da:	4252      	negs	r2, r2
 80097dc:	6062      	str	r2, [r4, #4]
 80097de:	a904      	add	r1, sp, #16
 80097e0:	3254      	adds	r2, #84	; 0x54
 80097e2:	1852      	adds	r2, r2, r1
 80097e4:	1c6e      	adds	r6, r5, #1
 80097e6:	6023      	str	r3, [r4, #0]
 80097e8:	60e3      	str	r3, [r4, #12]
 80097ea:	60a3      	str	r3, [r4, #8]
 80097ec:	7013      	strb	r3, [r2, #0]
 80097ee:	65a3      	str	r3, [r4, #88]	; 0x58
 80097f0:	7831      	ldrb	r1, [r6, #0]
 80097f2:	2205      	movs	r2, #5
 80097f4:	4853      	ldr	r0, [pc, #332]	; (8009944 <_svfiprintf_r+0x1e8>)
 80097f6:	f000 fa25 	bl	8009c44 <memchr>
 80097fa:	1c75      	adds	r5, r6, #1
 80097fc:	2800      	cmp	r0, #0
 80097fe:	d11f      	bne.n	8009840 <_svfiprintf_r+0xe4>
 8009800:	6822      	ldr	r2, [r4, #0]
 8009802:	06d3      	lsls	r3, r2, #27
 8009804:	d504      	bpl.n	8009810 <_svfiprintf_r+0xb4>
 8009806:	2353      	movs	r3, #83	; 0x53
 8009808:	a904      	add	r1, sp, #16
 800980a:	185b      	adds	r3, r3, r1
 800980c:	2120      	movs	r1, #32
 800980e:	7019      	strb	r1, [r3, #0]
 8009810:	0713      	lsls	r3, r2, #28
 8009812:	d504      	bpl.n	800981e <_svfiprintf_r+0xc2>
 8009814:	2353      	movs	r3, #83	; 0x53
 8009816:	a904      	add	r1, sp, #16
 8009818:	185b      	adds	r3, r3, r1
 800981a:	212b      	movs	r1, #43	; 0x2b
 800981c:	7019      	strb	r1, [r3, #0]
 800981e:	7833      	ldrb	r3, [r6, #0]
 8009820:	2b2a      	cmp	r3, #42	; 0x2a
 8009822:	d016      	beq.n	8009852 <_svfiprintf_r+0xf6>
 8009824:	0035      	movs	r5, r6
 8009826:	2100      	movs	r1, #0
 8009828:	200a      	movs	r0, #10
 800982a:	68e3      	ldr	r3, [r4, #12]
 800982c:	782a      	ldrb	r2, [r5, #0]
 800982e:	1c6e      	adds	r6, r5, #1
 8009830:	3a30      	subs	r2, #48	; 0x30
 8009832:	2a09      	cmp	r2, #9
 8009834:	d94e      	bls.n	80098d4 <_svfiprintf_r+0x178>
 8009836:	2900      	cmp	r1, #0
 8009838:	d018      	beq.n	800986c <_svfiprintf_r+0x110>
 800983a:	e010      	b.n	800985e <_svfiprintf_r+0x102>
 800983c:	3501      	adds	r5, #1
 800983e:	e7b1      	b.n	80097a4 <_svfiprintf_r+0x48>
 8009840:	4b40      	ldr	r3, [pc, #256]	; (8009944 <_svfiprintf_r+0x1e8>)
 8009842:	6822      	ldr	r2, [r4, #0]
 8009844:	1ac0      	subs	r0, r0, r3
 8009846:	2301      	movs	r3, #1
 8009848:	4083      	lsls	r3, r0
 800984a:	4313      	orrs	r3, r2
 800984c:	6023      	str	r3, [r4, #0]
 800984e:	002e      	movs	r6, r5
 8009850:	e7ce      	b.n	80097f0 <_svfiprintf_r+0x94>
 8009852:	9b07      	ldr	r3, [sp, #28]
 8009854:	1d19      	adds	r1, r3, #4
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	9107      	str	r1, [sp, #28]
 800985a:	2b00      	cmp	r3, #0
 800985c:	db01      	blt.n	8009862 <_svfiprintf_r+0x106>
 800985e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009860:	e004      	b.n	800986c <_svfiprintf_r+0x110>
 8009862:	425b      	negs	r3, r3
 8009864:	60e3      	str	r3, [r4, #12]
 8009866:	2302      	movs	r3, #2
 8009868:	4313      	orrs	r3, r2
 800986a:	6023      	str	r3, [r4, #0]
 800986c:	782b      	ldrb	r3, [r5, #0]
 800986e:	2b2e      	cmp	r3, #46	; 0x2e
 8009870:	d10a      	bne.n	8009888 <_svfiprintf_r+0x12c>
 8009872:	786b      	ldrb	r3, [r5, #1]
 8009874:	2b2a      	cmp	r3, #42	; 0x2a
 8009876:	d135      	bne.n	80098e4 <_svfiprintf_r+0x188>
 8009878:	9b07      	ldr	r3, [sp, #28]
 800987a:	3502      	adds	r5, #2
 800987c:	1d1a      	adds	r2, r3, #4
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	9207      	str	r2, [sp, #28]
 8009882:	2b00      	cmp	r3, #0
 8009884:	db2b      	blt.n	80098de <_svfiprintf_r+0x182>
 8009886:	9309      	str	r3, [sp, #36]	; 0x24
 8009888:	4e2f      	ldr	r6, [pc, #188]	; (8009948 <_svfiprintf_r+0x1ec>)
 800988a:	7829      	ldrb	r1, [r5, #0]
 800988c:	2203      	movs	r2, #3
 800988e:	0030      	movs	r0, r6
 8009890:	f000 f9d8 	bl	8009c44 <memchr>
 8009894:	2800      	cmp	r0, #0
 8009896:	d006      	beq.n	80098a6 <_svfiprintf_r+0x14a>
 8009898:	2340      	movs	r3, #64	; 0x40
 800989a:	1b80      	subs	r0, r0, r6
 800989c:	4083      	lsls	r3, r0
 800989e:	6822      	ldr	r2, [r4, #0]
 80098a0:	3501      	adds	r5, #1
 80098a2:	4313      	orrs	r3, r2
 80098a4:	6023      	str	r3, [r4, #0]
 80098a6:	7829      	ldrb	r1, [r5, #0]
 80098a8:	2206      	movs	r2, #6
 80098aa:	4828      	ldr	r0, [pc, #160]	; (800994c <_svfiprintf_r+0x1f0>)
 80098ac:	1c6e      	adds	r6, r5, #1
 80098ae:	7621      	strb	r1, [r4, #24]
 80098b0:	f000 f9c8 	bl	8009c44 <memchr>
 80098b4:	2800      	cmp	r0, #0
 80098b6:	d03c      	beq.n	8009932 <_svfiprintf_r+0x1d6>
 80098b8:	4b25      	ldr	r3, [pc, #148]	; (8009950 <_svfiprintf_r+0x1f4>)
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d125      	bne.n	800990a <_svfiprintf_r+0x1ae>
 80098be:	2207      	movs	r2, #7
 80098c0:	9b07      	ldr	r3, [sp, #28]
 80098c2:	3307      	adds	r3, #7
 80098c4:	4393      	bics	r3, r2
 80098c6:	3308      	adds	r3, #8
 80098c8:	9307      	str	r3, [sp, #28]
 80098ca:	6963      	ldr	r3, [r4, #20]
 80098cc:	9a04      	ldr	r2, [sp, #16]
 80098ce:	189b      	adds	r3, r3, r2
 80098d0:	6163      	str	r3, [r4, #20]
 80098d2:	e766      	b.n	80097a2 <_svfiprintf_r+0x46>
 80098d4:	4343      	muls	r3, r0
 80098d6:	2101      	movs	r1, #1
 80098d8:	189b      	adds	r3, r3, r2
 80098da:	0035      	movs	r5, r6
 80098dc:	e7a6      	b.n	800982c <_svfiprintf_r+0xd0>
 80098de:	2301      	movs	r3, #1
 80098e0:	425b      	negs	r3, r3
 80098e2:	e7d0      	b.n	8009886 <_svfiprintf_r+0x12a>
 80098e4:	2300      	movs	r3, #0
 80098e6:	200a      	movs	r0, #10
 80098e8:	001a      	movs	r2, r3
 80098ea:	3501      	adds	r5, #1
 80098ec:	6063      	str	r3, [r4, #4]
 80098ee:	7829      	ldrb	r1, [r5, #0]
 80098f0:	1c6e      	adds	r6, r5, #1
 80098f2:	3930      	subs	r1, #48	; 0x30
 80098f4:	2909      	cmp	r1, #9
 80098f6:	d903      	bls.n	8009900 <_svfiprintf_r+0x1a4>
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d0c5      	beq.n	8009888 <_svfiprintf_r+0x12c>
 80098fc:	9209      	str	r2, [sp, #36]	; 0x24
 80098fe:	e7c3      	b.n	8009888 <_svfiprintf_r+0x12c>
 8009900:	4342      	muls	r2, r0
 8009902:	2301      	movs	r3, #1
 8009904:	1852      	adds	r2, r2, r1
 8009906:	0035      	movs	r5, r6
 8009908:	e7f1      	b.n	80098ee <_svfiprintf_r+0x192>
 800990a:	ab07      	add	r3, sp, #28
 800990c:	9300      	str	r3, [sp, #0]
 800990e:	003a      	movs	r2, r7
 8009910:	4b10      	ldr	r3, [pc, #64]	; (8009954 <_svfiprintf_r+0x1f8>)
 8009912:	0021      	movs	r1, r4
 8009914:	9803      	ldr	r0, [sp, #12]
 8009916:	e000      	b.n	800991a <_svfiprintf_r+0x1be>
 8009918:	bf00      	nop
 800991a:	9004      	str	r0, [sp, #16]
 800991c:	9b04      	ldr	r3, [sp, #16]
 800991e:	3301      	adds	r3, #1
 8009920:	d1d3      	bne.n	80098ca <_svfiprintf_r+0x16e>
 8009922:	89bb      	ldrh	r3, [r7, #12]
 8009924:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009926:	065b      	lsls	r3, r3, #25
 8009928:	d400      	bmi.n	800992c <_svfiprintf_r+0x1d0>
 800992a:	e72e      	b.n	800978a <_svfiprintf_r+0x2e>
 800992c:	2001      	movs	r0, #1
 800992e:	4240      	negs	r0, r0
 8009930:	e72b      	b.n	800978a <_svfiprintf_r+0x2e>
 8009932:	ab07      	add	r3, sp, #28
 8009934:	9300      	str	r3, [sp, #0]
 8009936:	003a      	movs	r2, r7
 8009938:	4b06      	ldr	r3, [pc, #24]	; (8009954 <_svfiprintf_r+0x1f8>)
 800993a:	0021      	movs	r1, r4
 800993c:	9803      	ldr	r0, [sp, #12]
 800993e:	f000 f879 	bl	8009a34 <_printf_i>
 8009942:	e7ea      	b.n	800991a <_svfiprintf_r+0x1be>
 8009944:	0800a68c 	.word	0x0800a68c
 8009948:	0800a692 	.word	0x0800a692
 800994c:	0800a696 	.word	0x0800a696
 8009950:	00000000 	.word	0x00000000
 8009954:	08009699 	.word	0x08009699

08009958 <_printf_common>:
 8009958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800995a:	0015      	movs	r5, r2
 800995c:	9301      	str	r3, [sp, #4]
 800995e:	688a      	ldr	r2, [r1, #8]
 8009960:	690b      	ldr	r3, [r1, #16]
 8009962:	9000      	str	r0, [sp, #0]
 8009964:	000c      	movs	r4, r1
 8009966:	4293      	cmp	r3, r2
 8009968:	da00      	bge.n	800996c <_printf_common+0x14>
 800996a:	0013      	movs	r3, r2
 800996c:	0022      	movs	r2, r4
 800996e:	602b      	str	r3, [r5, #0]
 8009970:	3243      	adds	r2, #67	; 0x43
 8009972:	7812      	ldrb	r2, [r2, #0]
 8009974:	2a00      	cmp	r2, #0
 8009976:	d001      	beq.n	800997c <_printf_common+0x24>
 8009978:	3301      	adds	r3, #1
 800997a:	602b      	str	r3, [r5, #0]
 800997c:	6823      	ldr	r3, [r4, #0]
 800997e:	069b      	lsls	r3, r3, #26
 8009980:	d502      	bpl.n	8009988 <_printf_common+0x30>
 8009982:	682b      	ldr	r3, [r5, #0]
 8009984:	3302      	adds	r3, #2
 8009986:	602b      	str	r3, [r5, #0]
 8009988:	2706      	movs	r7, #6
 800998a:	6823      	ldr	r3, [r4, #0]
 800998c:	401f      	ands	r7, r3
 800998e:	d027      	beq.n	80099e0 <_printf_common+0x88>
 8009990:	0023      	movs	r3, r4
 8009992:	3343      	adds	r3, #67	; 0x43
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	1e5a      	subs	r2, r3, #1
 8009998:	4193      	sbcs	r3, r2
 800999a:	6822      	ldr	r2, [r4, #0]
 800999c:	0692      	lsls	r2, r2, #26
 800999e:	d430      	bmi.n	8009a02 <_printf_common+0xaa>
 80099a0:	0022      	movs	r2, r4
 80099a2:	9901      	ldr	r1, [sp, #4]
 80099a4:	3243      	adds	r2, #67	; 0x43
 80099a6:	9800      	ldr	r0, [sp, #0]
 80099a8:	9e08      	ldr	r6, [sp, #32]
 80099aa:	47b0      	blx	r6
 80099ac:	1c43      	adds	r3, r0, #1
 80099ae:	d025      	beq.n	80099fc <_printf_common+0xa4>
 80099b0:	2306      	movs	r3, #6
 80099b2:	6820      	ldr	r0, [r4, #0]
 80099b4:	682a      	ldr	r2, [r5, #0]
 80099b6:	68e1      	ldr	r1, [r4, #12]
 80099b8:	4003      	ands	r3, r0
 80099ba:	2500      	movs	r5, #0
 80099bc:	2b04      	cmp	r3, #4
 80099be:	d103      	bne.n	80099c8 <_printf_common+0x70>
 80099c0:	1a8d      	subs	r5, r1, r2
 80099c2:	43eb      	mvns	r3, r5
 80099c4:	17db      	asrs	r3, r3, #31
 80099c6:	401d      	ands	r5, r3
 80099c8:	68a3      	ldr	r3, [r4, #8]
 80099ca:	6922      	ldr	r2, [r4, #16]
 80099cc:	4293      	cmp	r3, r2
 80099ce:	dd01      	ble.n	80099d4 <_printf_common+0x7c>
 80099d0:	1a9b      	subs	r3, r3, r2
 80099d2:	18ed      	adds	r5, r5, r3
 80099d4:	2700      	movs	r7, #0
 80099d6:	42bd      	cmp	r5, r7
 80099d8:	d120      	bne.n	8009a1c <_printf_common+0xc4>
 80099da:	2000      	movs	r0, #0
 80099dc:	e010      	b.n	8009a00 <_printf_common+0xa8>
 80099de:	3701      	adds	r7, #1
 80099e0:	68e3      	ldr	r3, [r4, #12]
 80099e2:	682a      	ldr	r2, [r5, #0]
 80099e4:	1a9b      	subs	r3, r3, r2
 80099e6:	42bb      	cmp	r3, r7
 80099e8:	ddd2      	ble.n	8009990 <_printf_common+0x38>
 80099ea:	0022      	movs	r2, r4
 80099ec:	2301      	movs	r3, #1
 80099ee:	3219      	adds	r2, #25
 80099f0:	9901      	ldr	r1, [sp, #4]
 80099f2:	9800      	ldr	r0, [sp, #0]
 80099f4:	9e08      	ldr	r6, [sp, #32]
 80099f6:	47b0      	blx	r6
 80099f8:	1c43      	adds	r3, r0, #1
 80099fa:	d1f0      	bne.n	80099de <_printf_common+0x86>
 80099fc:	2001      	movs	r0, #1
 80099fe:	4240      	negs	r0, r0
 8009a00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009a02:	2030      	movs	r0, #48	; 0x30
 8009a04:	18e1      	adds	r1, r4, r3
 8009a06:	3143      	adds	r1, #67	; 0x43
 8009a08:	7008      	strb	r0, [r1, #0]
 8009a0a:	0021      	movs	r1, r4
 8009a0c:	1c5a      	adds	r2, r3, #1
 8009a0e:	3145      	adds	r1, #69	; 0x45
 8009a10:	7809      	ldrb	r1, [r1, #0]
 8009a12:	18a2      	adds	r2, r4, r2
 8009a14:	3243      	adds	r2, #67	; 0x43
 8009a16:	3302      	adds	r3, #2
 8009a18:	7011      	strb	r1, [r2, #0]
 8009a1a:	e7c1      	b.n	80099a0 <_printf_common+0x48>
 8009a1c:	0022      	movs	r2, r4
 8009a1e:	2301      	movs	r3, #1
 8009a20:	321a      	adds	r2, #26
 8009a22:	9901      	ldr	r1, [sp, #4]
 8009a24:	9800      	ldr	r0, [sp, #0]
 8009a26:	9e08      	ldr	r6, [sp, #32]
 8009a28:	47b0      	blx	r6
 8009a2a:	1c43      	adds	r3, r0, #1
 8009a2c:	d0e6      	beq.n	80099fc <_printf_common+0xa4>
 8009a2e:	3701      	adds	r7, #1
 8009a30:	e7d1      	b.n	80099d6 <_printf_common+0x7e>
	...

08009a34 <_printf_i>:
 8009a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a36:	b089      	sub	sp, #36	; 0x24
 8009a38:	9204      	str	r2, [sp, #16]
 8009a3a:	000a      	movs	r2, r1
 8009a3c:	3243      	adds	r2, #67	; 0x43
 8009a3e:	9305      	str	r3, [sp, #20]
 8009a40:	9003      	str	r0, [sp, #12]
 8009a42:	9202      	str	r2, [sp, #8]
 8009a44:	7e0a      	ldrb	r2, [r1, #24]
 8009a46:	000c      	movs	r4, r1
 8009a48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a4a:	2a6e      	cmp	r2, #110	; 0x6e
 8009a4c:	d100      	bne.n	8009a50 <_printf_i+0x1c>
 8009a4e:	e086      	b.n	8009b5e <_printf_i+0x12a>
 8009a50:	d81f      	bhi.n	8009a92 <_printf_i+0x5e>
 8009a52:	2a63      	cmp	r2, #99	; 0x63
 8009a54:	d033      	beq.n	8009abe <_printf_i+0x8a>
 8009a56:	d808      	bhi.n	8009a6a <_printf_i+0x36>
 8009a58:	2a00      	cmp	r2, #0
 8009a5a:	d100      	bne.n	8009a5e <_printf_i+0x2a>
 8009a5c:	e08c      	b.n	8009b78 <_printf_i+0x144>
 8009a5e:	2a58      	cmp	r2, #88	; 0x58
 8009a60:	d04d      	beq.n	8009afe <_printf_i+0xca>
 8009a62:	0025      	movs	r5, r4
 8009a64:	3542      	adds	r5, #66	; 0x42
 8009a66:	702a      	strb	r2, [r5, #0]
 8009a68:	e030      	b.n	8009acc <_printf_i+0x98>
 8009a6a:	2a64      	cmp	r2, #100	; 0x64
 8009a6c:	d001      	beq.n	8009a72 <_printf_i+0x3e>
 8009a6e:	2a69      	cmp	r2, #105	; 0x69
 8009a70:	d1f7      	bne.n	8009a62 <_printf_i+0x2e>
 8009a72:	6819      	ldr	r1, [r3, #0]
 8009a74:	6825      	ldr	r5, [r4, #0]
 8009a76:	1d0a      	adds	r2, r1, #4
 8009a78:	0628      	lsls	r0, r5, #24
 8009a7a:	d529      	bpl.n	8009ad0 <_printf_i+0x9c>
 8009a7c:	6808      	ldr	r0, [r1, #0]
 8009a7e:	601a      	str	r2, [r3, #0]
 8009a80:	2800      	cmp	r0, #0
 8009a82:	da03      	bge.n	8009a8c <_printf_i+0x58>
 8009a84:	232d      	movs	r3, #45	; 0x2d
 8009a86:	9a02      	ldr	r2, [sp, #8]
 8009a88:	4240      	negs	r0, r0
 8009a8a:	7013      	strb	r3, [r2, #0]
 8009a8c:	4e6b      	ldr	r6, [pc, #428]	; (8009c3c <_printf_i+0x208>)
 8009a8e:	270a      	movs	r7, #10
 8009a90:	e04f      	b.n	8009b32 <_printf_i+0xfe>
 8009a92:	2a73      	cmp	r2, #115	; 0x73
 8009a94:	d074      	beq.n	8009b80 <_printf_i+0x14c>
 8009a96:	d808      	bhi.n	8009aaa <_printf_i+0x76>
 8009a98:	2a6f      	cmp	r2, #111	; 0x6f
 8009a9a:	d01f      	beq.n	8009adc <_printf_i+0xa8>
 8009a9c:	2a70      	cmp	r2, #112	; 0x70
 8009a9e:	d1e0      	bne.n	8009a62 <_printf_i+0x2e>
 8009aa0:	2220      	movs	r2, #32
 8009aa2:	6809      	ldr	r1, [r1, #0]
 8009aa4:	430a      	orrs	r2, r1
 8009aa6:	6022      	str	r2, [r4, #0]
 8009aa8:	e003      	b.n	8009ab2 <_printf_i+0x7e>
 8009aaa:	2a75      	cmp	r2, #117	; 0x75
 8009aac:	d016      	beq.n	8009adc <_printf_i+0xa8>
 8009aae:	2a78      	cmp	r2, #120	; 0x78
 8009ab0:	d1d7      	bne.n	8009a62 <_printf_i+0x2e>
 8009ab2:	0022      	movs	r2, r4
 8009ab4:	2178      	movs	r1, #120	; 0x78
 8009ab6:	3245      	adds	r2, #69	; 0x45
 8009ab8:	7011      	strb	r1, [r2, #0]
 8009aba:	4e61      	ldr	r6, [pc, #388]	; (8009c40 <_printf_i+0x20c>)
 8009abc:	e022      	b.n	8009b04 <_printf_i+0xd0>
 8009abe:	0025      	movs	r5, r4
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	3542      	adds	r5, #66	; 0x42
 8009ac4:	1d11      	adds	r1, r2, #4
 8009ac6:	6019      	str	r1, [r3, #0]
 8009ac8:	6813      	ldr	r3, [r2, #0]
 8009aca:	702b      	strb	r3, [r5, #0]
 8009acc:	2301      	movs	r3, #1
 8009ace:	e065      	b.n	8009b9c <_printf_i+0x168>
 8009ad0:	6808      	ldr	r0, [r1, #0]
 8009ad2:	601a      	str	r2, [r3, #0]
 8009ad4:	0669      	lsls	r1, r5, #25
 8009ad6:	d5d3      	bpl.n	8009a80 <_printf_i+0x4c>
 8009ad8:	b200      	sxth	r0, r0
 8009ada:	e7d1      	b.n	8009a80 <_printf_i+0x4c>
 8009adc:	6819      	ldr	r1, [r3, #0]
 8009ade:	6825      	ldr	r5, [r4, #0]
 8009ae0:	1d08      	adds	r0, r1, #4
 8009ae2:	6018      	str	r0, [r3, #0]
 8009ae4:	6808      	ldr	r0, [r1, #0]
 8009ae6:	062e      	lsls	r6, r5, #24
 8009ae8:	d505      	bpl.n	8009af6 <_printf_i+0xc2>
 8009aea:	4e54      	ldr	r6, [pc, #336]	; (8009c3c <_printf_i+0x208>)
 8009aec:	2708      	movs	r7, #8
 8009aee:	2a6f      	cmp	r2, #111	; 0x6f
 8009af0:	d01b      	beq.n	8009b2a <_printf_i+0xf6>
 8009af2:	270a      	movs	r7, #10
 8009af4:	e019      	b.n	8009b2a <_printf_i+0xf6>
 8009af6:	066d      	lsls	r5, r5, #25
 8009af8:	d5f7      	bpl.n	8009aea <_printf_i+0xb6>
 8009afa:	b280      	uxth	r0, r0
 8009afc:	e7f5      	b.n	8009aea <_printf_i+0xb6>
 8009afe:	3145      	adds	r1, #69	; 0x45
 8009b00:	4e4e      	ldr	r6, [pc, #312]	; (8009c3c <_printf_i+0x208>)
 8009b02:	700a      	strb	r2, [r1, #0]
 8009b04:	6818      	ldr	r0, [r3, #0]
 8009b06:	6822      	ldr	r2, [r4, #0]
 8009b08:	1d01      	adds	r1, r0, #4
 8009b0a:	6800      	ldr	r0, [r0, #0]
 8009b0c:	6019      	str	r1, [r3, #0]
 8009b0e:	0615      	lsls	r5, r2, #24
 8009b10:	d521      	bpl.n	8009b56 <_printf_i+0x122>
 8009b12:	07d3      	lsls	r3, r2, #31
 8009b14:	d502      	bpl.n	8009b1c <_printf_i+0xe8>
 8009b16:	2320      	movs	r3, #32
 8009b18:	431a      	orrs	r2, r3
 8009b1a:	6022      	str	r2, [r4, #0]
 8009b1c:	2710      	movs	r7, #16
 8009b1e:	2800      	cmp	r0, #0
 8009b20:	d103      	bne.n	8009b2a <_printf_i+0xf6>
 8009b22:	2320      	movs	r3, #32
 8009b24:	6822      	ldr	r2, [r4, #0]
 8009b26:	439a      	bics	r2, r3
 8009b28:	6022      	str	r2, [r4, #0]
 8009b2a:	0023      	movs	r3, r4
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	3343      	adds	r3, #67	; 0x43
 8009b30:	701a      	strb	r2, [r3, #0]
 8009b32:	6863      	ldr	r3, [r4, #4]
 8009b34:	60a3      	str	r3, [r4, #8]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	db58      	blt.n	8009bec <_printf_i+0x1b8>
 8009b3a:	2204      	movs	r2, #4
 8009b3c:	6821      	ldr	r1, [r4, #0]
 8009b3e:	4391      	bics	r1, r2
 8009b40:	6021      	str	r1, [r4, #0]
 8009b42:	2800      	cmp	r0, #0
 8009b44:	d154      	bne.n	8009bf0 <_printf_i+0x1bc>
 8009b46:	9d02      	ldr	r5, [sp, #8]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d05a      	beq.n	8009c02 <_printf_i+0x1ce>
 8009b4c:	0025      	movs	r5, r4
 8009b4e:	7833      	ldrb	r3, [r6, #0]
 8009b50:	3542      	adds	r5, #66	; 0x42
 8009b52:	702b      	strb	r3, [r5, #0]
 8009b54:	e055      	b.n	8009c02 <_printf_i+0x1ce>
 8009b56:	0655      	lsls	r5, r2, #25
 8009b58:	d5db      	bpl.n	8009b12 <_printf_i+0xde>
 8009b5a:	b280      	uxth	r0, r0
 8009b5c:	e7d9      	b.n	8009b12 <_printf_i+0xde>
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	680d      	ldr	r5, [r1, #0]
 8009b62:	1d10      	adds	r0, r2, #4
 8009b64:	6949      	ldr	r1, [r1, #20]
 8009b66:	6018      	str	r0, [r3, #0]
 8009b68:	6813      	ldr	r3, [r2, #0]
 8009b6a:	062e      	lsls	r6, r5, #24
 8009b6c:	d501      	bpl.n	8009b72 <_printf_i+0x13e>
 8009b6e:	6019      	str	r1, [r3, #0]
 8009b70:	e002      	b.n	8009b78 <_printf_i+0x144>
 8009b72:	066d      	lsls	r5, r5, #25
 8009b74:	d5fb      	bpl.n	8009b6e <_printf_i+0x13a>
 8009b76:	8019      	strh	r1, [r3, #0]
 8009b78:	2300      	movs	r3, #0
 8009b7a:	9d02      	ldr	r5, [sp, #8]
 8009b7c:	6123      	str	r3, [r4, #16]
 8009b7e:	e04f      	b.n	8009c20 <_printf_i+0x1ec>
 8009b80:	681a      	ldr	r2, [r3, #0]
 8009b82:	1d11      	adds	r1, r2, #4
 8009b84:	6019      	str	r1, [r3, #0]
 8009b86:	6815      	ldr	r5, [r2, #0]
 8009b88:	2100      	movs	r1, #0
 8009b8a:	6862      	ldr	r2, [r4, #4]
 8009b8c:	0028      	movs	r0, r5
 8009b8e:	f000 f859 	bl	8009c44 <memchr>
 8009b92:	2800      	cmp	r0, #0
 8009b94:	d001      	beq.n	8009b9a <_printf_i+0x166>
 8009b96:	1b40      	subs	r0, r0, r5
 8009b98:	6060      	str	r0, [r4, #4]
 8009b9a:	6863      	ldr	r3, [r4, #4]
 8009b9c:	6123      	str	r3, [r4, #16]
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	9a02      	ldr	r2, [sp, #8]
 8009ba2:	7013      	strb	r3, [r2, #0]
 8009ba4:	e03c      	b.n	8009c20 <_printf_i+0x1ec>
 8009ba6:	6923      	ldr	r3, [r4, #16]
 8009ba8:	002a      	movs	r2, r5
 8009baa:	9904      	ldr	r1, [sp, #16]
 8009bac:	9803      	ldr	r0, [sp, #12]
 8009bae:	9d05      	ldr	r5, [sp, #20]
 8009bb0:	47a8      	blx	r5
 8009bb2:	1c43      	adds	r3, r0, #1
 8009bb4:	d03e      	beq.n	8009c34 <_printf_i+0x200>
 8009bb6:	6823      	ldr	r3, [r4, #0]
 8009bb8:	079b      	lsls	r3, r3, #30
 8009bba:	d415      	bmi.n	8009be8 <_printf_i+0x1b4>
 8009bbc:	9b07      	ldr	r3, [sp, #28]
 8009bbe:	68e0      	ldr	r0, [r4, #12]
 8009bc0:	4298      	cmp	r0, r3
 8009bc2:	da39      	bge.n	8009c38 <_printf_i+0x204>
 8009bc4:	0018      	movs	r0, r3
 8009bc6:	e037      	b.n	8009c38 <_printf_i+0x204>
 8009bc8:	0022      	movs	r2, r4
 8009bca:	2301      	movs	r3, #1
 8009bcc:	3219      	adds	r2, #25
 8009bce:	9904      	ldr	r1, [sp, #16]
 8009bd0:	9803      	ldr	r0, [sp, #12]
 8009bd2:	9e05      	ldr	r6, [sp, #20]
 8009bd4:	47b0      	blx	r6
 8009bd6:	1c43      	adds	r3, r0, #1
 8009bd8:	d02c      	beq.n	8009c34 <_printf_i+0x200>
 8009bda:	3501      	adds	r5, #1
 8009bdc:	68e3      	ldr	r3, [r4, #12]
 8009bde:	9a07      	ldr	r2, [sp, #28]
 8009be0:	1a9b      	subs	r3, r3, r2
 8009be2:	42ab      	cmp	r3, r5
 8009be4:	dcf0      	bgt.n	8009bc8 <_printf_i+0x194>
 8009be6:	e7e9      	b.n	8009bbc <_printf_i+0x188>
 8009be8:	2500      	movs	r5, #0
 8009bea:	e7f7      	b.n	8009bdc <_printf_i+0x1a8>
 8009bec:	2800      	cmp	r0, #0
 8009bee:	d0ad      	beq.n	8009b4c <_printf_i+0x118>
 8009bf0:	9d02      	ldr	r5, [sp, #8]
 8009bf2:	0039      	movs	r1, r7
 8009bf4:	f7f6 fb16 	bl	8000224 <__aeabi_uidivmod>
 8009bf8:	5c73      	ldrb	r3, [r6, r1]
 8009bfa:	3d01      	subs	r5, #1
 8009bfc:	702b      	strb	r3, [r5, #0]
 8009bfe:	2800      	cmp	r0, #0
 8009c00:	d1f7      	bne.n	8009bf2 <_printf_i+0x1be>
 8009c02:	2f08      	cmp	r7, #8
 8009c04:	d109      	bne.n	8009c1a <_printf_i+0x1e6>
 8009c06:	6823      	ldr	r3, [r4, #0]
 8009c08:	07db      	lsls	r3, r3, #31
 8009c0a:	d506      	bpl.n	8009c1a <_printf_i+0x1e6>
 8009c0c:	6863      	ldr	r3, [r4, #4]
 8009c0e:	6922      	ldr	r2, [r4, #16]
 8009c10:	4293      	cmp	r3, r2
 8009c12:	dc02      	bgt.n	8009c1a <_printf_i+0x1e6>
 8009c14:	2330      	movs	r3, #48	; 0x30
 8009c16:	3d01      	subs	r5, #1
 8009c18:	702b      	strb	r3, [r5, #0]
 8009c1a:	9b02      	ldr	r3, [sp, #8]
 8009c1c:	1b5b      	subs	r3, r3, r5
 8009c1e:	6123      	str	r3, [r4, #16]
 8009c20:	9b05      	ldr	r3, [sp, #20]
 8009c22:	aa07      	add	r2, sp, #28
 8009c24:	9300      	str	r3, [sp, #0]
 8009c26:	0021      	movs	r1, r4
 8009c28:	9b04      	ldr	r3, [sp, #16]
 8009c2a:	9803      	ldr	r0, [sp, #12]
 8009c2c:	f7ff fe94 	bl	8009958 <_printf_common>
 8009c30:	1c43      	adds	r3, r0, #1
 8009c32:	d1b8      	bne.n	8009ba6 <_printf_i+0x172>
 8009c34:	2001      	movs	r0, #1
 8009c36:	4240      	negs	r0, r0
 8009c38:	b009      	add	sp, #36	; 0x24
 8009c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c3c:	0800a69d 	.word	0x0800a69d
 8009c40:	0800a6ae 	.word	0x0800a6ae

08009c44 <memchr>:
 8009c44:	b2c9      	uxtb	r1, r1
 8009c46:	1882      	adds	r2, r0, r2
 8009c48:	4290      	cmp	r0, r2
 8009c4a:	d101      	bne.n	8009c50 <memchr+0xc>
 8009c4c:	2000      	movs	r0, #0
 8009c4e:	4770      	bx	lr
 8009c50:	7803      	ldrb	r3, [r0, #0]
 8009c52:	428b      	cmp	r3, r1
 8009c54:	d0fb      	beq.n	8009c4e <memchr+0xa>
 8009c56:	3001      	adds	r0, #1
 8009c58:	e7f6      	b.n	8009c48 <memchr+0x4>

08009c5a <memmove>:
 8009c5a:	b510      	push	{r4, lr}
 8009c5c:	4288      	cmp	r0, r1
 8009c5e:	d902      	bls.n	8009c66 <memmove+0xc>
 8009c60:	188b      	adds	r3, r1, r2
 8009c62:	4298      	cmp	r0, r3
 8009c64:	d303      	bcc.n	8009c6e <memmove+0x14>
 8009c66:	2300      	movs	r3, #0
 8009c68:	e007      	b.n	8009c7a <memmove+0x20>
 8009c6a:	5c8b      	ldrb	r3, [r1, r2]
 8009c6c:	5483      	strb	r3, [r0, r2]
 8009c6e:	3a01      	subs	r2, #1
 8009c70:	d2fb      	bcs.n	8009c6a <memmove+0x10>
 8009c72:	bd10      	pop	{r4, pc}
 8009c74:	5ccc      	ldrb	r4, [r1, r3]
 8009c76:	54c4      	strb	r4, [r0, r3]
 8009c78:	3301      	adds	r3, #1
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d1fa      	bne.n	8009c74 <memmove+0x1a>
 8009c7e:	e7f8      	b.n	8009c72 <memmove+0x18>

08009c80 <_free_r>:
 8009c80:	b570      	push	{r4, r5, r6, lr}
 8009c82:	0005      	movs	r5, r0
 8009c84:	2900      	cmp	r1, #0
 8009c86:	d010      	beq.n	8009caa <_free_r+0x2a>
 8009c88:	1f0c      	subs	r4, r1, #4
 8009c8a:	6823      	ldr	r3, [r4, #0]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	da00      	bge.n	8009c92 <_free_r+0x12>
 8009c90:	18e4      	adds	r4, r4, r3
 8009c92:	0028      	movs	r0, r5
 8009c94:	f7ff fcfe 	bl	8009694 <__malloc_lock>
 8009c98:	4a1d      	ldr	r2, [pc, #116]	; (8009d10 <_free_r+0x90>)
 8009c9a:	6813      	ldr	r3, [r2, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d105      	bne.n	8009cac <_free_r+0x2c>
 8009ca0:	6063      	str	r3, [r4, #4]
 8009ca2:	6014      	str	r4, [r2, #0]
 8009ca4:	0028      	movs	r0, r5
 8009ca6:	f7ff fcf6 	bl	8009696 <__malloc_unlock>
 8009caa:	bd70      	pop	{r4, r5, r6, pc}
 8009cac:	42a3      	cmp	r3, r4
 8009cae:	d909      	bls.n	8009cc4 <_free_r+0x44>
 8009cb0:	6821      	ldr	r1, [r4, #0]
 8009cb2:	1860      	adds	r0, r4, r1
 8009cb4:	4283      	cmp	r3, r0
 8009cb6:	d1f3      	bne.n	8009ca0 <_free_r+0x20>
 8009cb8:	6818      	ldr	r0, [r3, #0]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	1841      	adds	r1, r0, r1
 8009cbe:	6021      	str	r1, [r4, #0]
 8009cc0:	e7ee      	b.n	8009ca0 <_free_r+0x20>
 8009cc2:	0013      	movs	r3, r2
 8009cc4:	685a      	ldr	r2, [r3, #4]
 8009cc6:	2a00      	cmp	r2, #0
 8009cc8:	d001      	beq.n	8009cce <_free_r+0x4e>
 8009cca:	42a2      	cmp	r2, r4
 8009ccc:	d9f9      	bls.n	8009cc2 <_free_r+0x42>
 8009cce:	6819      	ldr	r1, [r3, #0]
 8009cd0:	1858      	adds	r0, r3, r1
 8009cd2:	42a0      	cmp	r0, r4
 8009cd4:	d10b      	bne.n	8009cee <_free_r+0x6e>
 8009cd6:	6820      	ldr	r0, [r4, #0]
 8009cd8:	1809      	adds	r1, r1, r0
 8009cda:	1858      	adds	r0, r3, r1
 8009cdc:	6019      	str	r1, [r3, #0]
 8009cde:	4282      	cmp	r2, r0
 8009ce0:	d1e0      	bne.n	8009ca4 <_free_r+0x24>
 8009ce2:	6810      	ldr	r0, [r2, #0]
 8009ce4:	6852      	ldr	r2, [r2, #4]
 8009ce6:	1841      	adds	r1, r0, r1
 8009ce8:	6019      	str	r1, [r3, #0]
 8009cea:	605a      	str	r2, [r3, #4]
 8009cec:	e7da      	b.n	8009ca4 <_free_r+0x24>
 8009cee:	42a0      	cmp	r0, r4
 8009cf0:	d902      	bls.n	8009cf8 <_free_r+0x78>
 8009cf2:	230c      	movs	r3, #12
 8009cf4:	602b      	str	r3, [r5, #0]
 8009cf6:	e7d5      	b.n	8009ca4 <_free_r+0x24>
 8009cf8:	6821      	ldr	r1, [r4, #0]
 8009cfa:	1860      	adds	r0, r4, r1
 8009cfc:	4282      	cmp	r2, r0
 8009cfe:	d103      	bne.n	8009d08 <_free_r+0x88>
 8009d00:	6810      	ldr	r0, [r2, #0]
 8009d02:	6852      	ldr	r2, [r2, #4]
 8009d04:	1841      	adds	r1, r0, r1
 8009d06:	6021      	str	r1, [r4, #0]
 8009d08:	6062      	str	r2, [r4, #4]
 8009d0a:	605c      	str	r4, [r3, #4]
 8009d0c:	e7ca      	b.n	8009ca4 <_free_r+0x24>
 8009d0e:	46c0      	nop			; (mov r8, r8)
 8009d10:	20000100 	.word	0x20000100

08009d14 <_realloc_r>:
 8009d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d16:	0007      	movs	r7, r0
 8009d18:	000d      	movs	r5, r1
 8009d1a:	0016      	movs	r6, r2
 8009d1c:	2900      	cmp	r1, #0
 8009d1e:	d105      	bne.n	8009d2c <_realloc_r+0x18>
 8009d20:	0011      	movs	r1, r2
 8009d22:	f7ff fc27 	bl	8009574 <_malloc_r>
 8009d26:	0004      	movs	r4, r0
 8009d28:	0020      	movs	r0, r4
 8009d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d2c:	2a00      	cmp	r2, #0
 8009d2e:	d103      	bne.n	8009d38 <_realloc_r+0x24>
 8009d30:	f7ff ffa6 	bl	8009c80 <_free_r>
 8009d34:	0034      	movs	r4, r6
 8009d36:	e7f7      	b.n	8009d28 <_realloc_r+0x14>
 8009d38:	f000 f812 	bl	8009d60 <_malloc_usable_size_r>
 8009d3c:	002c      	movs	r4, r5
 8009d3e:	42b0      	cmp	r0, r6
 8009d40:	d2f2      	bcs.n	8009d28 <_realloc_r+0x14>
 8009d42:	0031      	movs	r1, r6
 8009d44:	0038      	movs	r0, r7
 8009d46:	f7ff fc15 	bl	8009574 <_malloc_r>
 8009d4a:	1e04      	subs	r4, r0, #0
 8009d4c:	d0ec      	beq.n	8009d28 <_realloc_r+0x14>
 8009d4e:	0029      	movs	r1, r5
 8009d50:	0032      	movs	r2, r6
 8009d52:	f7ff fbef 	bl	8009534 <memcpy>
 8009d56:	0029      	movs	r1, r5
 8009d58:	0038      	movs	r0, r7
 8009d5a:	f7ff ff91 	bl	8009c80 <_free_r>
 8009d5e:	e7e3      	b.n	8009d28 <_realloc_r+0x14>

08009d60 <_malloc_usable_size_r>:
 8009d60:	1f0b      	subs	r3, r1, #4
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	1f18      	subs	r0, r3, #4
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	da01      	bge.n	8009d6e <_malloc_usable_size_r+0xe>
 8009d6a:	580b      	ldr	r3, [r1, r0]
 8009d6c:	18c0      	adds	r0, r0, r3
 8009d6e:	4770      	bx	lr

08009d70 <_init>:
 8009d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d72:	46c0      	nop			; (mov r8, r8)
 8009d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d76:	bc08      	pop	{r3}
 8009d78:	469e      	mov	lr, r3
 8009d7a:	4770      	bx	lr

08009d7c <_fini>:
 8009d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d7e:	46c0      	nop			; (mov r8, r8)
 8009d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d82:	bc08      	pop	{r3}
 8009d84:	469e      	mov	lr, r3
 8009d86:	4770      	bx	lr
