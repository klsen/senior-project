
project_L0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8dc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c60  0800b99c  0800b99c  0001b99c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5fc  0800c5fc  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c5fc  0800c5fc  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c5fc  0800c5fc  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5fc  0800c5fc  0001c5fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c600  0800c600  0001c600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0800c604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  200000d0  0800c6d4  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  0800c6d4  000203b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018dcc  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000314e  00000000  00000000  00038ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001290  00000000  00000000  0003c018  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010f0  00000000  00000000  0003d2a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017eff  00000000  00000000  0003e398  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010b16  00000000  00000000  00056297  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008bd91  00000000  00000000  00066dad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f2b3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000476c  00000000  00000000  000f2bbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000d0 	.word	0x200000d0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b984 	.word	0x0800b984

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000d4 	.word	0x200000d4
 8000104:	0800b984 	.word	0x0800b984

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cfrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	1c08      	adds	r0, r1, #0
 8000408:	4661      	mov	r1, ip
 800040a:	e7ff      	b.n	800040c <__aeabi_cfcmpeq>

0800040c <__aeabi_cfcmpeq>:
 800040c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800040e:	f000 f9d3 	bl	80007b8 <__lesf2>
 8000412:	2800      	cmp	r0, #0
 8000414:	d401      	bmi.n	800041a <__aeabi_cfcmpeq+0xe>
 8000416:	2100      	movs	r1, #0
 8000418:	42c8      	cmn	r0, r1
 800041a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800041c <__aeabi_fcmpeq>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f000 f955 	bl	80006cc <__eqsf2>
 8000422:	4240      	negs	r0, r0
 8000424:	3001      	adds	r0, #1
 8000426:	bd10      	pop	{r4, pc}

08000428 <__aeabi_fcmplt>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 f9c5 	bl	80007b8 <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	db01      	blt.n	8000436 <__aeabi_fcmplt+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_fcmple>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 f9bb 	bl	80007b8 <__lesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dd01      	ble.n	800044a <__aeabi_fcmple+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_fcmpgt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 f963 	bl	800071c <__gesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	dc01      	bgt.n	800045e <__aeabi_fcmpgt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_fcmpge>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 f959 	bl	800071c <__gesf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	da01      	bge.n	8000472 <__aeabi_fcmpge+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_f2uiz>:
 8000478:	219e      	movs	r1, #158	; 0x9e
 800047a:	b510      	push	{r4, lr}
 800047c:	05c9      	lsls	r1, r1, #23
 800047e:	1c04      	adds	r4, r0, #0
 8000480:	f7ff fff0 	bl	8000464 <__aeabi_fcmpge>
 8000484:	2800      	cmp	r0, #0
 8000486:	d103      	bne.n	8000490 <__aeabi_f2uiz+0x18>
 8000488:	1c20      	adds	r0, r4, #0
 800048a:	f000 fcdb 	bl	8000e44 <__aeabi_f2iz>
 800048e:	bd10      	pop	{r4, pc}
 8000490:	219e      	movs	r1, #158	; 0x9e
 8000492:	1c20      	adds	r0, r4, #0
 8000494:	05c9      	lsls	r1, r1, #23
 8000496:	f000 fb11 	bl	8000abc <__aeabi_fsub>
 800049a:	f000 fcd3 	bl	8000e44 <__aeabi_f2iz>
 800049e:	2380      	movs	r3, #128	; 0x80
 80004a0:	061b      	lsls	r3, r3, #24
 80004a2:	469c      	mov	ip, r3
 80004a4:	4460      	add	r0, ip
 80004a6:	e7f2      	b.n	800048e <__aeabi_f2uiz+0x16>

080004a8 <__aeabi_fdiv>:
 80004a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004aa:	4657      	mov	r7, sl
 80004ac:	464e      	mov	r6, r9
 80004ae:	4645      	mov	r5, r8
 80004b0:	46de      	mov	lr, fp
 80004b2:	0244      	lsls	r4, r0, #9
 80004b4:	b5e0      	push	{r5, r6, r7, lr}
 80004b6:	0046      	lsls	r6, r0, #1
 80004b8:	4688      	mov	r8, r1
 80004ba:	0a64      	lsrs	r4, r4, #9
 80004bc:	0e36      	lsrs	r6, r6, #24
 80004be:	0fc7      	lsrs	r7, r0, #31
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d063      	beq.n	800058c <__aeabi_fdiv+0xe4>
 80004c4:	2eff      	cmp	r6, #255	; 0xff
 80004c6:	d024      	beq.n	8000512 <__aeabi_fdiv+0x6a>
 80004c8:	2380      	movs	r3, #128	; 0x80
 80004ca:	00e4      	lsls	r4, r4, #3
 80004cc:	04db      	lsls	r3, r3, #19
 80004ce:	431c      	orrs	r4, r3
 80004d0:	2300      	movs	r3, #0
 80004d2:	4699      	mov	r9, r3
 80004d4:	469b      	mov	fp, r3
 80004d6:	3e7f      	subs	r6, #127	; 0x7f
 80004d8:	4643      	mov	r3, r8
 80004da:	4642      	mov	r2, r8
 80004dc:	025d      	lsls	r5, r3, #9
 80004de:	0fd2      	lsrs	r2, r2, #31
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	0a6d      	lsrs	r5, r5, #9
 80004e4:	0e1b      	lsrs	r3, r3, #24
 80004e6:	4690      	mov	r8, r2
 80004e8:	4692      	mov	sl, r2
 80004ea:	d065      	beq.n	80005b8 <__aeabi_fdiv+0x110>
 80004ec:	2bff      	cmp	r3, #255	; 0xff
 80004ee:	d055      	beq.n	800059c <__aeabi_fdiv+0xf4>
 80004f0:	2280      	movs	r2, #128	; 0x80
 80004f2:	2100      	movs	r1, #0
 80004f4:	00ed      	lsls	r5, r5, #3
 80004f6:	04d2      	lsls	r2, r2, #19
 80004f8:	3b7f      	subs	r3, #127	; 0x7f
 80004fa:	4315      	orrs	r5, r2
 80004fc:	1af6      	subs	r6, r6, r3
 80004fe:	4643      	mov	r3, r8
 8000500:	464a      	mov	r2, r9
 8000502:	407b      	eors	r3, r7
 8000504:	2a0f      	cmp	r2, #15
 8000506:	d900      	bls.n	800050a <__aeabi_fdiv+0x62>
 8000508:	e08d      	b.n	8000626 <__aeabi_fdiv+0x17e>
 800050a:	486d      	ldr	r0, [pc, #436]	; (80006c0 <__aeabi_fdiv+0x218>)
 800050c:	0092      	lsls	r2, r2, #2
 800050e:	5882      	ldr	r2, [r0, r2]
 8000510:	4697      	mov	pc, r2
 8000512:	2c00      	cmp	r4, #0
 8000514:	d154      	bne.n	80005c0 <__aeabi_fdiv+0x118>
 8000516:	2308      	movs	r3, #8
 8000518:	4699      	mov	r9, r3
 800051a:	3b06      	subs	r3, #6
 800051c:	26ff      	movs	r6, #255	; 0xff
 800051e:	469b      	mov	fp, r3
 8000520:	e7da      	b.n	80004d8 <__aeabi_fdiv+0x30>
 8000522:	2500      	movs	r5, #0
 8000524:	4653      	mov	r3, sl
 8000526:	2902      	cmp	r1, #2
 8000528:	d01b      	beq.n	8000562 <__aeabi_fdiv+0xba>
 800052a:	2903      	cmp	r1, #3
 800052c:	d100      	bne.n	8000530 <__aeabi_fdiv+0x88>
 800052e:	e0bf      	b.n	80006b0 <__aeabi_fdiv+0x208>
 8000530:	2901      	cmp	r1, #1
 8000532:	d028      	beq.n	8000586 <__aeabi_fdiv+0xde>
 8000534:	0030      	movs	r0, r6
 8000536:	307f      	adds	r0, #127	; 0x7f
 8000538:	2800      	cmp	r0, #0
 800053a:	dd20      	ble.n	800057e <__aeabi_fdiv+0xd6>
 800053c:	076a      	lsls	r2, r5, #29
 800053e:	d004      	beq.n	800054a <__aeabi_fdiv+0xa2>
 8000540:	220f      	movs	r2, #15
 8000542:	402a      	ands	r2, r5
 8000544:	2a04      	cmp	r2, #4
 8000546:	d000      	beq.n	800054a <__aeabi_fdiv+0xa2>
 8000548:	3504      	adds	r5, #4
 800054a:	012a      	lsls	r2, r5, #4
 800054c:	d503      	bpl.n	8000556 <__aeabi_fdiv+0xae>
 800054e:	0030      	movs	r0, r6
 8000550:	4a5c      	ldr	r2, [pc, #368]	; (80006c4 <__aeabi_fdiv+0x21c>)
 8000552:	3080      	adds	r0, #128	; 0x80
 8000554:	4015      	ands	r5, r2
 8000556:	28fe      	cmp	r0, #254	; 0xfe
 8000558:	dc03      	bgt.n	8000562 <__aeabi_fdiv+0xba>
 800055a:	01ac      	lsls	r4, r5, #6
 800055c:	0a64      	lsrs	r4, r4, #9
 800055e:	b2c2      	uxtb	r2, r0
 8000560:	e001      	b.n	8000566 <__aeabi_fdiv+0xbe>
 8000562:	22ff      	movs	r2, #255	; 0xff
 8000564:	2400      	movs	r4, #0
 8000566:	0264      	lsls	r4, r4, #9
 8000568:	05d2      	lsls	r2, r2, #23
 800056a:	0a60      	lsrs	r0, r4, #9
 800056c:	07db      	lsls	r3, r3, #31
 800056e:	4310      	orrs	r0, r2
 8000570:	4318      	orrs	r0, r3
 8000572:	bc3c      	pop	{r2, r3, r4, r5}
 8000574:	4690      	mov	r8, r2
 8000576:	4699      	mov	r9, r3
 8000578:	46a2      	mov	sl, r4
 800057a:	46ab      	mov	fp, r5
 800057c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800057e:	2201      	movs	r2, #1
 8000580:	1a10      	subs	r0, r2, r0
 8000582:	281b      	cmp	r0, #27
 8000584:	dd7c      	ble.n	8000680 <__aeabi_fdiv+0x1d8>
 8000586:	2200      	movs	r2, #0
 8000588:	2400      	movs	r4, #0
 800058a:	e7ec      	b.n	8000566 <__aeabi_fdiv+0xbe>
 800058c:	2c00      	cmp	r4, #0
 800058e:	d11d      	bne.n	80005cc <__aeabi_fdiv+0x124>
 8000590:	2304      	movs	r3, #4
 8000592:	4699      	mov	r9, r3
 8000594:	3b03      	subs	r3, #3
 8000596:	2600      	movs	r6, #0
 8000598:	469b      	mov	fp, r3
 800059a:	e79d      	b.n	80004d8 <__aeabi_fdiv+0x30>
 800059c:	3eff      	subs	r6, #255	; 0xff
 800059e:	2d00      	cmp	r5, #0
 80005a0:	d120      	bne.n	80005e4 <__aeabi_fdiv+0x13c>
 80005a2:	2102      	movs	r1, #2
 80005a4:	4643      	mov	r3, r8
 80005a6:	464a      	mov	r2, r9
 80005a8:	407b      	eors	r3, r7
 80005aa:	430a      	orrs	r2, r1
 80005ac:	2a0f      	cmp	r2, #15
 80005ae:	d8d8      	bhi.n	8000562 <__aeabi_fdiv+0xba>
 80005b0:	4845      	ldr	r0, [pc, #276]	; (80006c8 <__aeabi_fdiv+0x220>)
 80005b2:	0092      	lsls	r2, r2, #2
 80005b4:	5882      	ldr	r2, [r0, r2]
 80005b6:	4697      	mov	pc, r2
 80005b8:	2d00      	cmp	r5, #0
 80005ba:	d119      	bne.n	80005f0 <__aeabi_fdiv+0x148>
 80005bc:	2101      	movs	r1, #1
 80005be:	e7f1      	b.n	80005a4 <__aeabi_fdiv+0xfc>
 80005c0:	230c      	movs	r3, #12
 80005c2:	4699      	mov	r9, r3
 80005c4:	3b09      	subs	r3, #9
 80005c6:	26ff      	movs	r6, #255	; 0xff
 80005c8:	469b      	mov	fp, r3
 80005ca:	e785      	b.n	80004d8 <__aeabi_fdiv+0x30>
 80005cc:	0020      	movs	r0, r4
 80005ce:	f001 fafd 	bl	8001bcc <__clzsi2>
 80005d2:	2676      	movs	r6, #118	; 0x76
 80005d4:	1f43      	subs	r3, r0, #5
 80005d6:	409c      	lsls	r4, r3
 80005d8:	2300      	movs	r3, #0
 80005da:	4276      	negs	r6, r6
 80005dc:	1a36      	subs	r6, r6, r0
 80005de:	4699      	mov	r9, r3
 80005e0:	469b      	mov	fp, r3
 80005e2:	e779      	b.n	80004d8 <__aeabi_fdiv+0x30>
 80005e4:	464a      	mov	r2, r9
 80005e6:	2303      	movs	r3, #3
 80005e8:	431a      	orrs	r2, r3
 80005ea:	4691      	mov	r9, r2
 80005ec:	2103      	movs	r1, #3
 80005ee:	e786      	b.n	80004fe <__aeabi_fdiv+0x56>
 80005f0:	0028      	movs	r0, r5
 80005f2:	f001 faeb 	bl	8001bcc <__clzsi2>
 80005f6:	1f43      	subs	r3, r0, #5
 80005f8:	1836      	adds	r6, r6, r0
 80005fa:	409d      	lsls	r5, r3
 80005fc:	3676      	adds	r6, #118	; 0x76
 80005fe:	2100      	movs	r1, #0
 8000600:	e77d      	b.n	80004fe <__aeabi_fdiv+0x56>
 8000602:	2480      	movs	r4, #128	; 0x80
 8000604:	2300      	movs	r3, #0
 8000606:	03e4      	lsls	r4, r4, #15
 8000608:	22ff      	movs	r2, #255	; 0xff
 800060a:	e7ac      	b.n	8000566 <__aeabi_fdiv+0xbe>
 800060c:	2500      	movs	r5, #0
 800060e:	2380      	movs	r3, #128	; 0x80
 8000610:	03db      	lsls	r3, r3, #15
 8000612:	421c      	tst	r4, r3
 8000614:	d028      	beq.n	8000668 <__aeabi_fdiv+0x1c0>
 8000616:	421d      	tst	r5, r3
 8000618:	d126      	bne.n	8000668 <__aeabi_fdiv+0x1c0>
 800061a:	432b      	orrs	r3, r5
 800061c:	025c      	lsls	r4, r3, #9
 800061e:	0a64      	lsrs	r4, r4, #9
 8000620:	4643      	mov	r3, r8
 8000622:	22ff      	movs	r2, #255	; 0xff
 8000624:	e79f      	b.n	8000566 <__aeabi_fdiv+0xbe>
 8000626:	0162      	lsls	r2, r4, #5
 8000628:	016c      	lsls	r4, r5, #5
 800062a:	42a2      	cmp	r2, r4
 800062c:	d224      	bcs.n	8000678 <__aeabi_fdiv+0x1d0>
 800062e:	211b      	movs	r1, #27
 8000630:	2500      	movs	r5, #0
 8000632:	3e01      	subs	r6, #1
 8000634:	2701      	movs	r7, #1
 8000636:	0010      	movs	r0, r2
 8000638:	006d      	lsls	r5, r5, #1
 800063a:	0052      	lsls	r2, r2, #1
 800063c:	2800      	cmp	r0, #0
 800063e:	db01      	blt.n	8000644 <__aeabi_fdiv+0x19c>
 8000640:	4294      	cmp	r4, r2
 8000642:	d801      	bhi.n	8000648 <__aeabi_fdiv+0x1a0>
 8000644:	1b12      	subs	r2, r2, r4
 8000646:	433d      	orrs	r5, r7
 8000648:	3901      	subs	r1, #1
 800064a:	2900      	cmp	r1, #0
 800064c:	d1f3      	bne.n	8000636 <__aeabi_fdiv+0x18e>
 800064e:	0014      	movs	r4, r2
 8000650:	1e62      	subs	r2, r4, #1
 8000652:	4194      	sbcs	r4, r2
 8000654:	4325      	orrs	r5, r4
 8000656:	e76d      	b.n	8000534 <__aeabi_fdiv+0x8c>
 8000658:	46ba      	mov	sl, r7
 800065a:	4659      	mov	r1, fp
 800065c:	0025      	movs	r5, r4
 800065e:	4653      	mov	r3, sl
 8000660:	2902      	cmp	r1, #2
 8000662:	d000      	beq.n	8000666 <__aeabi_fdiv+0x1be>
 8000664:	e761      	b.n	800052a <__aeabi_fdiv+0x82>
 8000666:	e77c      	b.n	8000562 <__aeabi_fdiv+0xba>
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	03db      	lsls	r3, r3, #15
 800066c:	431c      	orrs	r4, r3
 800066e:	0264      	lsls	r4, r4, #9
 8000670:	0a64      	lsrs	r4, r4, #9
 8000672:	003b      	movs	r3, r7
 8000674:	22ff      	movs	r2, #255	; 0xff
 8000676:	e776      	b.n	8000566 <__aeabi_fdiv+0xbe>
 8000678:	1b12      	subs	r2, r2, r4
 800067a:	211a      	movs	r1, #26
 800067c:	2501      	movs	r5, #1
 800067e:	e7d9      	b.n	8000634 <__aeabi_fdiv+0x18c>
 8000680:	369e      	adds	r6, #158	; 0x9e
 8000682:	002a      	movs	r2, r5
 8000684:	40b5      	lsls	r5, r6
 8000686:	002c      	movs	r4, r5
 8000688:	40c2      	lsrs	r2, r0
 800068a:	1e65      	subs	r5, r4, #1
 800068c:	41ac      	sbcs	r4, r5
 800068e:	4314      	orrs	r4, r2
 8000690:	0762      	lsls	r2, r4, #29
 8000692:	d004      	beq.n	800069e <__aeabi_fdiv+0x1f6>
 8000694:	220f      	movs	r2, #15
 8000696:	4022      	ands	r2, r4
 8000698:	2a04      	cmp	r2, #4
 800069a:	d000      	beq.n	800069e <__aeabi_fdiv+0x1f6>
 800069c:	3404      	adds	r4, #4
 800069e:	0162      	lsls	r2, r4, #5
 80006a0:	d403      	bmi.n	80006aa <__aeabi_fdiv+0x202>
 80006a2:	01a4      	lsls	r4, r4, #6
 80006a4:	0a64      	lsrs	r4, r4, #9
 80006a6:	2200      	movs	r2, #0
 80006a8:	e75d      	b.n	8000566 <__aeabi_fdiv+0xbe>
 80006aa:	2201      	movs	r2, #1
 80006ac:	2400      	movs	r4, #0
 80006ae:	e75a      	b.n	8000566 <__aeabi_fdiv+0xbe>
 80006b0:	2480      	movs	r4, #128	; 0x80
 80006b2:	03e4      	lsls	r4, r4, #15
 80006b4:	432c      	orrs	r4, r5
 80006b6:	0264      	lsls	r4, r4, #9
 80006b8:	0a64      	lsrs	r4, r4, #9
 80006ba:	22ff      	movs	r2, #255	; 0xff
 80006bc:	e753      	b.n	8000566 <__aeabi_fdiv+0xbe>
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	0800bc14 	.word	0x0800bc14
 80006c4:	f7ffffff 	.word	0xf7ffffff
 80006c8:	0800bc54 	.word	0x0800bc54

080006cc <__eqsf2>:
 80006cc:	b570      	push	{r4, r5, r6, lr}
 80006ce:	0042      	lsls	r2, r0, #1
 80006d0:	024e      	lsls	r6, r1, #9
 80006d2:	004c      	lsls	r4, r1, #1
 80006d4:	0245      	lsls	r5, r0, #9
 80006d6:	0a6d      	lsrs	r5, r5, #9
 80006d8:	0e12      	lsrs	r2, r2, #24
 80006da:	0fc3      	lsrs	r3, r0, #31
 80006dc:	0a76      	lsrs	r6, r6, #9
 80006de:	0e24      	lsrs	r4, r4, #24
 80006e0:	0fc9      	lsrs	r1, r1, #31
 80006e2:	2aff      	cmp	r2, #255	; 0xff
 80006e4:	d00f      	beq.n	8000706 <__eqsf2+0x3a>
 80006e6:	2cff      	cmp	r4, #255	; 0xff
 80006e8:	d011      	beq.n	800070e <__eqsf2+0x42>
 80006ea:	2001      	movs	r0, #1
 80006ec:	42a2      	cmp	r2, r4
 80006ee:	d000      	beq.n	80006f2 <__eqsf2+0x26>
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	42b5      	cmp	r5, r6
 80006f4:	d1fc      	bne.n	80006f0 <__eqsf2+0x24>
 80006f6:	428b      	cmp	r3, r1
 80006f8:	d00d      	beq.n	8000716 <__eqsf2+0x4a>
 80006fa:	2a00      	cmp	r2, #0
 80006fc:	d1f8      	bne.n	80006f0 <__eqsf2+0x24>
 80006fe:	0028      	movs	r0, r5
 8000700:	1e45      	subs	r5, r0, #1
 8000702:	41a8      	sbcs	r0, r5
 8000704:	e7f4      	b.n	80006f0 <__eqsf2+0x24>
 8000706:	2001      	movs	r0, #1
 8000708:	2d00      	cmp	r5, #0
 800070a:	d1f1      	bne.n	80006f0 <__eqsf2+0x24>
 800070c:	e7eb      	b.n	80006e6 <__eqsf2+0x1a>
 800070e:	2001      	movs	r0, #1
 8000710:	2e00      	cmp	r6, #0
 8000712:	d1ed      	bne.n	80006f0 <__eqsf2+0x24>
 8000714:	e7e9      	b.n	80006ea <__eqsf2+0x1e>
 8000716:	2000      	movs	r0, #0
 8000718:	e7ea      	b.n	80006f0 <__eqsf2+0x24>
 800071a:	46c0      	nop			; (mov r8, r8)

0800071c <__gesf2>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	004a      	lsls	r2, r1, #1
 8000720:	024e      	lsls	r6, r1, #9
 8000722:	0245      	lsls	r5, r0, #9
 8000724:	0044      	lsls	r4, r0, #1
 8000726:	0a6d      	lsrs	r5, r5, #9
 8000728:	0e24      	lsrs	r4, r4, #24
 800072a:	0fc3      	lsrs	r3, r0, #31
 800072c:	0a76      	lsrs	r6, r6, #9
 800072e:	0e12      	lsrs	r2, r2, #24
 8000730:	0fc9      	lsrs	r1, r1, #31
 8000732:	2cff      	cmp	r4, #255	; 0xff
 8000734:	d015      	beq.n	8000762 <__gesf2+0x46>
 8000736:	2aff      	cmp	r2, #255	; 0xff
 8000738:	d00e      	beq.n	8000758 <__gesf2+0x3c>
 800073a:	2c00      	cmp	r4, #0
 800073c:	d115      	bne.n	800076a <__gesf2+0x4e>
 800073e:	2a00      	cmp	r2, #0
 8000740:	d101      	bne.n	8000746 <__gesf2+0x2a>
 8000742:	2e00      	cmp	r6, #0
 8000744:	d01c      	beq.n	8000780 <__gesf2+0x64>
 8000746:	2d00      	cmp	r5, #0
 8000748:	d014      	beq.n	8000774 <__gesf2+0x58>
 800074a:	428b      	cmp	r3, r1
 800074c:	d027      	beq.n	800079e <__gesf2+0x82>
 800074e:	2002      	movs	r0, #2
 8000750:	3b01      	subs	r3, #1
 8000752:	4018      	ands	r0, r3
 8000754:	3801      	subs	r0, #1
 8000756:	bd70      	pop	{r4, r5, r6, pc}
 8000758:	2e00      	cmp	r6, #0
 800075a:	d0ee      	beq.n	800073a <__gesf2+0x1e>
 800075c:	2002      	movs	r0, #2
 800075e:	4240      	negs	r0, r0
 8000760:	e7f9      	b.n	8000756 <__gesf2+0x3a>
 8000762:	2d00      	cmp	r5, #0
 8000764:	d1fa      	bne.n	800075c <__gesf2+0x40>
 8000766:	2aff      	cmp	r2, #255	; 0xff
 8000768:	d00e      	beq.n	8000788 <__gesf2+0x6c>
 800076a:	2a00      	cmp	r2, #0
 800076c:	d10e      	bne.n	800078c <__gesf2+0x70>
 800076e:	2e00      	cmp	r6, #0
 8000770:	d0ed      	beq.n	800074e <__gesf2+0x32>
 8000772:	e00b      	b.n	800078c <__gesf2+0x70>
 8000774:	2301      	movs	r3, #1
 8000776:	3901      	subs	r1, #1
 8000778:	4399      	bics	r1, r3
 800077a:	0008      	movs	r0, r1
 800077c:	3001      	adds	r0, #1
 800077e:	e7ea      	b.n	8000756 <__gesf2+0x3a>
 8000780:	2000      	movs	r0, #0
 8000782:	2d00      	cmp	r5, #0
 8000784:	d0e7      	beq.n	8000756 <__gesf2+0x3a>
 8000786:	e7e2      	b.n	800074e <__gesf2+0x32>
 8000788:	2e00      	cmp	r6, #0
 800078a:	d1e7      	bne.n	800075c <__gesf2+0x40>
 800078c:	428b      	cmp	r3, r1
 800078e:	d1de      	bne.n	800074e <__gesf2+0x32>
 8000790:	4294      	cmp	r4, r2
 8000792:	dd05      	ble.n	80007a0 <__gesf2+0x84>
 8000794:	2102      	movs	r1, #2
 8000796:	1e58      	subs	r0, r3, #1
 8000798:	4008      	ands	r0, r1
 800079a:	3801      	subs	r0, #1
 800079c:	e7db      	b.n	8000756 <__gesf2+0x3a>
 800079e:	2400      	movs	r4, #0
 80007a0:	42a2      	cmp	r2, r4
 80007a2:	dc04      	bgt.n	80007ae <__gesf2+0x92>
 80007a4:	42b5      	cmp	r5, r6
 80007a6:	d8d2      	bhi.n	800074e <__gesf2+0x32>
 80007a8:	2000      	movs	r0, #0
 80007aa:	42b5      	cmp	r5, r6
 80007ac:	d2d3      	bcs.n	8000756 <__gesf2+0x3a>
 80007ae:	1e58      	subs	r0, r3, #1
 80007b0:	2301      	movs	r3, #1
 80007b2:	4398      	bics	r0, r3
 80007b4:	3001      	adds	r0, #1
 80007b6:	e7ce      	b.n	8000756 <__gesf2+0x3a>

080007b8 <__lesf2>:
 80007b8:	b530      	push	{r4, r5, lr}
 80007ba:	0042      	lsls	r2, r0, #1
 80007bc:	0244      	lsls	r4, r0, #9
 80007be:	024d      	lsls	r5, r1, #9
 80007c0:	0fc3      	lsrs	r3, r0, #31
 80007c2:	0048      	lsls	r0, r1, #1
 80007c4:	0a64      	lsrs	r4, r4, #9
 80007c6:	0e12      	lsrs	r2, r2, #24
 80007c8:	0a6d      	lsrs	r5, r5, #9
 80007ca:	0e00      	lsrs	r0, r0, #24
 80007cc:	0fc9      	lsrs	r1, r1, #31
 80007ce:	2aff      	cmp	r2, #255	; 0xff
 80007d0:	d012      	beq.n	80007f8 <__lesf2+0x40>
 80007d2:	28ff      	cmp	r0, #255	; 0xff
 80007d4:	d00c      	beq.n	80007f0 <__lesf2+0x38>
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d112      	bne.n	8000800 <__lesf2+0x48>
 80007da:	2800      	cmp	r0, #0
 80007dc:	d119      	bne.n	8000812 <__lesf2+0x5a>
 80007de:	2d00      	cmp	r5, #0
 80007e0:	d117      	bne.n	8000812 <__lesf2+0x5a>
 80007e2:	2c00      	cmp	r4, #0
 80007e4:	d02b      	beq.n	800083e <__lesf2+0x86>
 80007e6:	2002      	movs	r0, #2
 80007e8:	3b01      	subs	r3, #1
 80007ea:	4018      	ands	r0, r3
 80007ec:	3801      	subs	r0, #1
 80007ee:	e026      	b.n	800083e <__lesf2+0x86>
 80007f0:	2d00      	cmp	r5, #0
 80007f2:	d0f0      	beq.n	80007d6 <__lesf2+0x1e>
 80007f4:	2002      	movs	r0, #2
 80007f6:	e022      	b.n	800083e <__lesf2+0x86>
 80007f8:	2c00      	cmp	r4, #0
 80007fa:	d1fb      	bne.n	80007f4 <__lesf2+0x3c>
 80007fc:	28ff      	cmp	r0, #255	; 0xff
 80007fe:	d01f      	beq.n	8000840 <__lesf2+0x88>
 8000800:	2800      	cmp	r0, #0
 8000802:	d11f      	bne.n	8000844 <__lesf2+0x8c>
 8000804:	2d00      	cmp	r5, #0
 8000806:	d11d      	bne.n	8000844 <__lesf2+0x8c>
 8000808:	2002      	movs	r0, #2
 800080a:	3b01      	subs	r3, #1
 800080c:	4018      	ands	r0, r3
 800080e:	3801      	subs	r0, #1
 8000810:	e015      	b.n	800083e <__lesf2+0x86>
 8000812:	2c00      	cmp	r4, #0
 8000814:	d00e      	beq.n	8000834 <__lesf2+0x7c>
 8000816:	428b      	cmp	r3, r1
 8000818:	d1e5      	bne.n	80007e6 <__lesf2+0x2e>
 800081a:	2200      	movs	r2, #0
 800081c:	4290      	cmp	r0, r2
 800081e:	dc04      	bgt.n	800082a <__lesf2+0x72>
 8000820:	42ac      	cmp	r4, r5
 8000822:	d8e0      	bhi.n	80007e6 <__lesf2+0x2e>
 8000824:	2000      	movs	r0, #0
 8000826:	42ac      	cmp	r4, r5
 8000828:	d209      	bcs.n	800083e <__lesf2+0x86>
 800082a:	1e58      	subs	r0, r3, #1
 800082c:	2301      	movs	r3, #1
 800082e:	4398      	bics	r0, r3
 8000830:	3001      	adds	r0, #1
 8000832:	e004      	b.n	800083e <__lesf2+0x86>
 8000834:	2301      	movs	r3, #1
 8000836:	3901      	subs	r1, #1
 8000838:	4399      	bics	r1, r3
 800083a:	0008      	movs	r0, r1
 800083c:	3001      	adds	r0, #1
 800083e:	bd30      	pop	{r4, r5, pc}
 8000840:	2d00      	cmp	r5, #0
 8000842:	d1d7      	bne.n	80007f4 <__lesf2+0x3c>
 8000844:	428b      	cmp	r3, r1
 8000846:	d1ce      	bne.n	80007e6 <__lesf2+0x2e>
 8000848:	4282      	cmp	r2, r0
 800084a:	dde7      	ble.n	800081c <__lesf2+0x64>
 800084c:	2102      	movs	r1, #2
 800084e:	1e58      	subs	r0, r3, #1
 8000850:	4008      	ands	r0, r1
 8000852:	3801      	subs	r0, #1
 8000854:	e7f3      	b.n	800083e <__lesf2+0x86>
 8000856:	46c0      	nop			; (mov r8, r8)

08000858 <__aeabi_fmul>:
 8000858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800085a:	464e      	mov	r6, r9
 800085c:	4657      	mov	r7, sl
 800085e:	4645      	mov	r5, r8
 8000860:	46de      	mov	lr, fp
 8000862:	b5e0      	push	{r5, r6, r7, lr}
 8000864:	0243      	lsls	r3, r0, #9
 8000866:	0a5b      	lsrs	r3, r3, #9
 8000868:	0045      	lsls	r5, r0, #1
 800086a:	b083      	sub	sp, #12
 800086c:	1c0f      	adds	r7, r1, #0
 800086e:	4699      	mov	r9, r3
 8000870:	0e2d      	lsrs	r5, r5, #24
 8000872:	0fc6      	lsrs	r6, r0, #31
 8000874:	2d00      	cmp	r5, #0
 8000876:	d057      	beq.n	8000928 <__aeabi_fmul+0xd0>
 8000878:	2dff      	cmp	r5, #255	; 0xff
 800087a:	d024      	beq.n	80008c6 <__aeabi_fmul+0x6e>
 800087c:	2080      	movs	r0, #128	; 0x80
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	04c0      	lsls	r0, r0, #19
 8000882:	4318      	orrs	r0, r3
 8000884:	2300      	movs	r3, #0
 8000886:	4681      	mov	r9, r0
 8000888:	469a      	mov	sl, r3
 800088a:	469b      	mov	fp, r3
 800088c:	3d7f      	subs	r5, #127	; 0x7f
 800088e:	027c      	lsls	r4, r7, #9
 8000890:	007a      	lsls	r2, r7, #1
 8000892:	0ffb      	lsrs	r3, r7, #31
 8000894:	0a64      	lsrs	r4, r4, #9
 8000896:	0e12      	lsrs	r2, r2, #24
 8000898:	4698      	mov	r8, r3
 800089a:	d023      	beq.n	80008e4 <__aeabi_fmul+0x8c>
 800089c:	2aff      	cmp	r2, #255	; 0xff
 800089e:	d04b      	beq.n	8000938 <__aeabi_fmul+0xe0>
 80008a0:	00e3      	lsls	r3, r4, #3
 80008a2:	2480      	movs	r4, #128	; 0x80
 80008a4:	2000      	movs	r0, #0
 80008a6:	04e4      	lsls	r4, r4, #19
 80008a8:	3a7f      	subs	r2, #127	; 0x7f
 80008aa:	431c      	orrs	r4, r3
 80008ac:	18ad      	adds	r5, r5, r2
 80008ae:	1c6b      	adds	r3, r5, #1
 80008b0:	4647      	mov	r7, r8
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	4653      	mov	r3, sl
 80008b6:	4077      	eors	r7, r6
 80008b8:	003a      	movs	r2, r7
 80008ba:	2b0f      	cmp	r3, #15
 80008bc:	d848      	bhi.n	8000950 <__aeabi_fmul+0xf8>
 80008be:	497d      	ldr	r1, [pc, #500]	; (8000ab4 <__aeabi_fmul+0x25c>)
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	58cb      	ldr	r3, [r1, r3]
 80008c4:	469f      	mov	pc, r3
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d000      	beq.n	80008cc <__aeabi_fmul+0x74>
 80008ca:	e085      	b.n	80009d8 <__aeabi_fmul+0x180>
 80008cc:	3308      	adds	r3, #8
 80008ce:	469a      	mov	sl, r3
 80008d0:	3b06      	subs	r3, #6
 80008d2:	469b      	mov	fp, r3
 80008d4:	027c      	lsls	r4, r7, #9
 80008d6:	007a      	lsls	r2, r7, #1
 80008d8:	0ffb      	lsrs	r3, r7, #31
 80008da:	25ff      	movs	r5, #255	; 0xff
 80008dc:	0a64      	lsrs	r4, r4, #9
 80008de:	0e12      	lsrs	r2, r2, #24
 80008e0:	4698      	mov	r8, r3
 80008e2:	d1db      	bne.n	800089c <__aeabi_fmul+0x44>
 80008e4:	2c00      	cmp	r4, #0
 80008e6:	d000      	beq.n	80008ea <__aeabi_fmul+0x92>
 80008e8:	e090      	b.n	8000a0c <__aeabi_fmul+0x1b4>
 80008ea:	4652      	mov	r2, sl
 80008ec:	2301      	movs	r3, #1
 80008ee:	431a      	orrs	r2, r3
 80008f0:	4692      	mov	sl, r2
 80008f2:	2001      	movs	r0, #1
 80008f4:	e7db      	b.n	80008ae <__aeabi_fmul+0x56>
 80008f6:	464c      	mov	r4, r9
 80008f8:	4658      	mov	r0, fp
 80008fa:	0017      	movs	r7, r2
 80008fc:	2802      	cmp	r0, #2
 80008fe:	d024      	beq.n	800094a <__aeabi_fmul+0xf2>
 8000900:	2803      	cmp	r0, #3
 8000902:	d100      	bne.n	8000906 <__aeabi_fmul+0xae>
 8000904:	e0cf      	b.n	8000aa6 <__aeabi_fmul+0x24e>
 8000906:	2200      	movs	r2, #0
 8000908:	2300      	movs	r3, #0
 800090a:	2801      	cmp	r0, #1
 800090c:	d14d      	bne.n	80009aa <__aeabi_fmul+0x152>
 800090e:	0258      	lsls	r0, r3, #9
 8000910:	05d2      	lsls	r2, r2, #23
 8000912:	0a40      	lsrs	r0, r0, #9
 8000914:	07ff      	lsls	r7, r7, #31
 8000916:	4310      	orrs	r0, r2
 8000918:	4338      	orrs	r0, r7
 800091a:	b003      	add	sp, #12
 800091c:	bc3c      	pop	{r2, r3, r4, r5}
 800091e:	4690      	mov	r8, r2
 8000920:	4699      	mov	r9, r3
 8000922:	46a2      	mov	sl, r4
 8000924:	46ab      	mov	fp, r5
 8000926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000928:	2b00      	cmp	r3, #0
 800092a:	d15b      	bne.n	80009e4 <__aeabi_fmul+0x18c>
 800092c:	2304      	movs	r3, #4
 800092e:	469a      	mov	sl, r3
 8000930:	3b03      	subs	r3, #3
 8000932:	2500      	movs	r5, #0
 8000934:	469b      	mov	fp, r3
 8000936:	e7aa      	b.n	800088e <__aeabi_fmul+0x36>
 8000938:	35ff      	adds	r5, #255	; 0xff
 800093a:	2c00      	cmp	r4, #0
 800093c:	d160      	bne.n	8000a00 <__aeabi_fmul+0x1a8>
 800093e:	4652      	mov	r2, sl
 8000940:	2302      	movs	r3, #2
 8000942:	431a      	orrs	r2, r3
 8000944:	4692      	mov	sl, r2
 8000946:	2002      	movs	r0, #2
 8000948:	e7b1      	b.n	80008ae <__aeabi_fmul+0x56>
 800094a:	22ff      	movs	r2, #255	; 0xff
 800094c:	2300      	movs	r3, #0
 800094e:	e7de      	b.n	800090e <__aeabi_fmul+0xb6>
 8000950:	464b      	mov	r3, r9
 8000952:	0c1b      	lsrs	r3, r3, #16
 8000954:	469c      	mov	ip, r3
 8000956:	464b      	mov	r3, r9
 8000958:	0426      	lsls	r6, r4, #16
 800095a:	0c36      	lsrs	r6, r6, #16
 800095c:	0418      	lsls	r0, r3, #16
 800095e:	4661      	mov	r1, ip
 8000960:	0033      	movs	r3, r6
 8000962:	0c22      	lsrs	r2, r4, #16
 8000964:	4664      	mov	r4, ip
 8000966:	0c00      	lsrs	r0, r0, #16
 8000968:	4343      	muls	r3, r0
 800096a:	434e      	muls	r6, r1
 800096c:	4350      	muls	r0, r2
 800096e:	4354      	muls	r4, r2
 8000970:	1980      	adds	r0, r0, r6
 8000972:	0c1a      	lsrs	r2, r3, #16
 8000974:	1812      	adds	r2, r2, r0
 8000976:	4296      	cmp	r6, r2
 8000978:	d903      	bls.n	8000982 <__aeabi_fmul+0x12a>
 800097a:	2180      	movs	r1, #128	; 0x80
 800097c:	0249      	lsls	r1, r1, #9
 800097e:	468c      	mov	ip, r1
 8000980:	4464      	add	r4, ip
 8000982:	041b      	lsls	r3, r3, #16
 8000984:	0c1b      	lsrs	r3, r3, #16
 8000986:	0410      	lsls	r0, r2, #16
 8000988:	18c0      	adds	r0, r0, r3
 800098a:	0183      	lsls	r3, r0, #6
 800098c:	1e5e      	subs	r6, r3, #1
 800098e:	41b3      	sbcs	r3, r6
 8000990:	0e80      	lsrs	r0, r0, #26
 8000992:	4318      	orrs	r0, r3
 8000994:	0c13      	lsrs	r3, r2, #16
 8000996:	191b      	adds	r3, r3, r4
 8000998:	019b      	lsls	r3, r3, #6
 800099a:	4303      	orrs	r3, r0
 800099c:	001c      	movs	r4, r3
 800099e:	0123      	lsls	r3, r4, #4
 80009a0:	d579      	bpl.n	8000a96 <__aeabi_fmul+0x23e>
 80009a2:	2301      	movs	r3, #1
 80009a4:	0862      	lsrs	r2, r4, #1
 80009a6:	401c      	ands	r4, r3
 80009a8:	4314      	orrs	r4, r2
 80009aa:	9a01      	ldr	r2, [sp, #4]
 80009ac:	327f      	adds	r2, #127	; 0x7f
 80009ae:	2a00      	cmp	r2, #0
 80009b0:	dd4d      	ble.n	8000a4e <__aeabi_fmul+0x1f6>
 80009b2:	0763      	lsls	r3, r4, #29
 80009b4:	d004      	beq.n	80009c0 <__aeabi_fmul+0x168>
 80009b6:	230f      	movs	r3, #15
 80009b8:	4023      	ands	r3, r4
 80009ba:	2b04      	cmp	r3, #4
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fmul+0x168>
 80009be:	3404      	adds	r4, #4
 80009c0:	0123      	lsls	r3, r4, #4
 80009c2:	d503      	bpl.n	80009cc <__aeabi_fmul+0x174>
 80009c4:	4b3c      	ldr	r3, [pc, #240]	; (8000ab8 <__aeabi_fmul+0x260>)
 80009c6:	9a01      	ldr	r2, [sp, #4]
 80009c8:	401c      	ands	r4, r3
 80009ca:	3280      	adds	r2, #128	; 0x80
 80009cc:	2afe      	cmp	r2, #254	; 0xfe
 80009ce:	dcbc      	bgt.n	800094a <__aeabi_fmul+0xf2>
 80009d0:	01a3      	lsls	r3, r4, #6
 80009d2:	0a5b      	lsrs	r3, r3, #9
 80009d4:	b2d2      	uxtb	r2, r2
 80009d6:	e79a      	b.n	800090e <__aeabi_fmul+0xb6>
 80009d8:	230c      	movs	r3, #12
 80009da:	469a      	mov	sl, r3
 80009dc:	3b09      	subs	r3, #9
 80009de:	25ff      	movs	r5, #255	; 0xff
 80009e0:	469b      	mov	fp, r3
 80009e2:	e754      	b.n	800088e <__aeabi_fmul+0x36>
 80009e4:	0018      	movs	r0, r3
 80009e6:	f001 f8f1 	bl	8001bcc <__clzsi2>
 80009ea:	464a      	mov	r2, r9
 80009ec:	1f43      	subs	r3, r0, #5
 80009ee:	2576      	movs	r5, #118	; 0x76
 80009f0:	409a      	lsls	r2, r3
 80009f2:	2300      	movs	r3, #0
 80009f4:	426d      	negs	r5, r5
 80009f6:	4691      	mov	r9, r2
 80009f8:	1a2d      	subs	r5, r5, r0
 80009fa:	469a      	mov	sl, r3
 80009fc:	469b      	mov	fp, r3
 80009fe:	e746      	b.n	800088e <__aeabi_fmul+0x36>
 8000a00:	4652      	mov	r2, sl
 8000a02:	2303      	movs	r3, #3
 8000a04:	431a      	orrs	r2, r3
 8000a06:	4692      	mov	sl, r2
 8000a08:	2003      	movs	r0, #3
 8000a0a:	e750      	b.n	80008ae <__aeabi_fmul+0x56>
 8000a0c:	0020      	movs	r0, r4
 8000a0e:	f001 f8dd 	bl	8001bcc <__clzsi2>
 8000a12:	1f43      	subs	r3, r0, #5
 8000a14:	1a2d      	subs	r5, r5, r0
 8000a16:	409c      	lsls	r4, r3
 8000a18:	3d76      	subs	r5, #118	; 0x76
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	e747      	b.n	80008ae <__aeabi_fmul+0x56>
 8000a1e:	2380      	movs	r3, #128	; 0x80
 8000a20:	2700      	movs	r7, #0
 8000a22:	03db      	lsls	r3, r3, #15
 8000a24:	22ff      	movs	r2, #255	; 0xff
 8000a26:	e772      	b.n	800090e <__aeabi_fmul+0xb6>
 8000a28:	4642      	mov	r2, r8
 8000a2a:	e766      	b.n	80008fa <__aeabi_fmul+0xa2>
 8000a2c:	464c      	mov	r4, r9
 8000a2e:	0032      	movs	r2, r6
 8000a30:	4658      	mov	r0, fp
 8000a32:	e762      	b.n	80008fa <__aeabi_fmul+0xa2>
 8000a34:	2380      	movs	r3, #128	; 0x80
 8000a36:	464a      	mov	r2, r9
 8000a38:	03db      	lsls	r3, r3, #15
 8000a3a:	421a      	tst	r2, r3
 8000a3c:	d022      	beq.n	8000a84 <__aeabi_fmul+0x22c>
 8000a3e:	421c      	tst	r4, r3
 8000a40:	d120      	bne.n	8000a84 <__aeabi_fmul+0x22c>
 8000a42:	4323      	orrs	r3, r4
 8000a44:	025b      	lsls	r3, r3, #9
 8000a46:	0a5b      	lsrs	r3, r3, #9
 8000a48:	4647      	mov	r7, r8
 8000a4a:	22ff      	movs	r2, #255	; 0xff
 8000a4c:	e75f      	b.n	800090e <__aeabi_fmul+0xb6>
 8000a4e:	2301      	movs	r3, #1
 8000a50:	1a9a      	subs	r2, r3, r2
 8000a52:	2a1b      	cmp	r2, #27
 8000a54:	dc21      	bgt.n	8000a9a <__aeabi_fmul+0x242>
 8000a56:	0023      	movs	r3, r4
 8000a58:	9901      	ldr	r1, [sp, #4]
 8000a5a:	40d3      	lsrs	r3, r2
 8000a5c:	319e      	adds	r1, #158	; 0x9e
 8000a5e:	408c      	lsls	r4, r1
 8000a60:	001a      	movs	r2, r3
 8000a62:	0023      	movs	r3, r4
 8000a64:	1e5c      	subs	r4, r3, #1
 8000a66:	41a3      	sbcs	r3, r4
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	075a      	lsls	r2, r3, #29
 8000a6c:	d004      	beq.n	8000a78 <__aeabi_fmul+0x220>
 8000a6e:	220f      	movs	r2, #15
 8000a70:	401a      	ands	r2, r3
 8000a72:	2a04      	cmp	r2, #4
 8000a74:	d000      	beq.n	8000a78 <__aeabi_fmul+0x220>
 8000a76:	3304      	adds	r3, #4
 8000a78:	015a      	lsls	r2, r3, #5
 8000a7a:	d411      	bmi.n	8000aa0 <__aeabi_fmul+0x248>
 8000a7c:	019b      	lsls	r3, r3, #6
 8000a7e:	0a5b      	lsrs	r3, r3, #9
 8000a80:	2200      	movs	r2, #0
 8000a82:	e744      	b.n	800090e <__aeabi_fmul+0xb6>
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	464a      	mov	r2, r9
 8000a88:	03db      	lsls	r3, r3, #15
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	025b      	lsls	r3, r3, #9
 8000a8e:	0a5b      	lsrs	r3, r3, #9
 8000a90:	0037      	movs	r7, r6
 8000a92:	22ff      	movs	r2, #255	; 0xff
 8000a94:	e73b      	b.n	800090e <__aeabi_fmul+0xb6>
 8000a96:	9501      	str	r5, [sp, #4]
 8000a98:	e787      	b.n	80009aa <__aeabi_fmul+0x152>
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	e736      	b.n	800090e <__aeabi_fmul+0xb6>
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	e733      	b.n	800090e <__aeabi_fmul+0xb6>
 8000aa6:	2380      	movs	r3, #128	; 0x80
 8000aa8:	03db      	lsls	r3, r3, #15
 8000aaa:	4323      	orrs	r3, r4
 8000aac:	025b      	lsls	r3, r3, #9
 8000aae:	0a5b      	lsrs	r3, r3, #9
 8000ab0:	22ff      	movs	r2, #255	; 0xff
 8000ab2:	e72c      	b.n	800090e <__aeabi_fmul+0xb6>
 8000ab4:	0800bc94 	.word	0x0800bc94
 8000ab8:	f7ffffff 	.word	0xf7ffffff

08000abc <__aeabi_fsub>:
 8000abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000abe:	4647      	mov	r7, r8
 8000ac0:	46ce      	mov	lr, r9
 8000ac2:	0044      	lsls	r4, r0, #1
 8000ac4:	0fc2      	lsrs	r2, r0, #31
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	0247      	lsls	r7, r0, #9
 8000aca:	0248      	lsls	r0, r1, #9
 8000acc:	0a40      	lsrs	r0, r0, #9
 8000ace:	4684      	mov	ip, r0
 8000ad0:	4666      	mov	r6, ip
 8000ad2:	0048      	lsls	r0, r1, #1
 8000ad4:	0a7f      	lsrs	r7, r7, #9
 8000ad6:	0e24      	lsrs	r4, r4, #24
 8000ad8:	00f6      	lsls	r6, r6, #3
 8000ada:	0025      	movs	r5, r4
 8000adc:	4690      	mov	r8, r2
 8000ade:	00fb      	lsls	r3, r7, #3
 8000ae0:	0e00      	lsrs	r0, r0, #24
 8000ae2:	0fc9      	lsrs	r1, r1, #31
 8000ae4:	46b1      	mov	r9, r6
 8000ae6:	28ff      	cmp	r0, #255	; 0xff
 8000ae8:	d100      	bne.n	8000aec <__aeabi_fsub+0x30>
 8000aea:	e085      	b.n	8000bf8 <__aeabi_fsub+0x13c>
 8000aec:	2601      	movs	r6, #1
 8000aee:	4071      	eors	r1, r6
 8000af0:	1a26      	subs	r6, r4, r0
 8000af2:	4291      	cmp	r1, r2
 8000af4:	d057      	beq.n	8000ba6 <__aeabi_fsub+0xea>
 8000af6:	2e00      	cmp	r6, #0
 8000af8:	dd43      	ble.n	8000b82 <__aeabi_fsub+0xc6>
 8000afa:	2800      	cmp	r0, #0
 8000afc:	d000      	beq.n	8000b00 <__aeabi_fsub+0x44>
 8000afe:	e07f      	b.n	8000c00 <__aeabi_fsub+0x144>
 8000b00:	4649      	mov	r1, r9
 8000b02:	2900      	cmp	r1, #0
 8000b04:	d100      	bne.n	8000b08 <__aeabi_fsub+0x4c>
 8000b06:	e0aa      	b.n	8000c5e <__aeabi_fsub+0x1a2>
 8000b08:	3e01      	subs	r6, #1
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d000      	beq.n	8000b10 <__aeabi_fsub+0x54>
 8000b0e:	e0f7      	b.n	8000d00 <__aeabi_fsub+0x244>
 8000b10:	1a5b      	subs	r3, r3, r1
 8000b12:	015a      	lsls	r2, r3, #5
 8000b14:	d400      	bmi.n	8000b18 <__aeabi_fsub+0x5c>
 8000b16:	e08b      	b.n	8000c30 <__aeabi_fsub+0x174>
 8000b18:	019b      	lsls	r3, r3, #6
 8000b1a:	099c      	lsrs	r4, r3, #6
 8000b1c:	0020      	movs	r0, r4
 8000b1e:	f001 f855 	bl	8001bcc <__clzsi2>
 8000b22:	3805      	subs	r0, #5
 8000b24:	4084      	lsls	r4, r0
 8000b26:	4285      	cmp	r5, r0
 8000b28:	dd00      	ble.n	8000b2c <__aeabi_fsub+0x70>
 8000b2a:	e0d3      	b.n	8000cd4 <__aeabi_fsub+0x218>
 8000b2c:	1b45      	subs	r5, r0, r5
 8000b2e:	0023      	movs	r3, r4
 8000b30:	2020      	movs	r0, #32
 8000b32:	3501      	adds	r5, #1
 8000b34:	40eb      	lsrs	r3, r5
 8000b36:	1b45      	subs	r5, r0, r5
 8000b38:	40ac      	lsls	r4, r5
 8000b3a:	1e62      	subs	r2, r4, #1
 8000b3c:	4194      	sbcs	r4, r2
 8000b3e:	4323      	orrs	r3, r4
 8000b40:	2407      	movs	r4, #7
 8000b42:	2500      	movs	r5, #0
 8000b44:	401c      	ands	r4, r3
 8000b46:	2201      	movs	r2, #1
 8000b48:	4641      	mov	r1, r8
 8000b4a:	400a      	ands	r2, r1
 8000b4c:	2c00      	cmp	r4, #0
 8000b4e:	d004      	beq.n	8000b5a <__aeabi_fsub+0x9e>
 8000b50:	210f      	movs	r1, #15
 8000b52:	4019      	ands	r1, r3
 8000b54:	2904      	cmp	r1, #4
 8000b56:	d000      	beq.n	8000b5a <__aeabi_fsub+0x9e>
 8000b58:	3304      	adds	r3, #4
 8000b5a:	0159      	lsls	r1, r3, #5
 8000b5c:	d400      	bmi.n	8000b60 <__aeabi_fsub+0xa4>
 8000b5e:	e080      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000b60:	3501      	adds	r5, #1
 8000b62:	b2ec      	uxtb	r4, r5
 8000b64:	2dff      	cmp	r5, #255	; 0xff
 8000b66:	d000      	beq.n	8000b6a <__aeabi_fsub+0xae>
 8000b68:	e0a3      	b.n	8000cb2 <__aeabi_fsub+0x1f6>
 8000b6a:	24ff      	movs	r4, #255	; 0xff
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	025b      	lsls	r3, r3, #9
 8000b70:	05e4      	lsls	r4, r4, #23
 8000b72:	0a58      	lsrs	r0, r3, #9
 8000b74:	07d2      	lsls	r2, r2, #31
 8000b76:	4320      	orrs	r0, r4
 8000b78:	4310      	orrs	r0, r2
 8000b7a:	bc0c      	pop	{r2, r3}
 8000b7c:	4690      	mov	r8, r2
 8000b7e:	4699      	mov	r9, r3
 8000b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	d174      	bne.n	8000c70 <__aeabi_fsub+0x1b4>
 8000b86:	1c60      	adds	r0, r4, #1
 8000b88:	b2c0      	uxtb	r0, r0
 8000b8a:	2801      	cmp	r0, #1
 8000b8c:	dc00      	bgt.n	8000b90 <__aeabi_fsub+0xd4>
 8000b8e:	e0a7      	b.n	8000ce0 <__aeabi_fsub+0x224>
 8000b90:	464a      	mov	r2, r9
 8000b92:	1a9c      	subs	r4, r3, r2
 8000b94:	0162      	lsls	r2, r4, #5
 8000b96:	d500      	bpl.n	8000b9a <__aeabi_fsub+0xde>
 8000b98:	e0b6      	b.n	8000d08 <__aeabi_fsub+0x24c>
 8000b9a:	2c00      	cmp	r4, #0
 8000b9c:	d1be      	bne.n	8000b1c <__aeabi_fsub+0x60>
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2400      	movs	r4, #0
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	e7e3      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	dc00      	bgt.n	8000bac <__aeabi_fsub+0xf0>
 8000baa:	e085      	b.n	8000cb8 <__aeabi_fsub+0x1fc>
 8000bac:	2800      	cmp	r0, #0
 8000bae:	d046      	beq.n	8000c3e <__aeabi_fsub+0x182>
 8000bb0:	2cff      	cmp	r4, #255	; 0xff
 8000bb2:	d049      	beq.n	8000c48 <__aeabi_fsub+0x18c>
 8000bb4:	2280      	movs	r2, #128	; 0x80
 8000bb6:	4648      	mov	r0, r9
 8000bb8:	04d2      	lsls	r2, r2, #19
 8000bba:	4310      	orrs	r0, r2
 8000bbc:	4681      	mov	r9, r0
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	2e1b      	cmp	r6, #27
 8000bc2:	dc09      	bgt.n	8000bd8 <__aeabi_fsub+0x11c>
 8000bc4:	2020      	movs	r0, #32
 8000bc6:	464c      	mov	r4, r9
 8000bc8:	1b80      	subs	r0, r0, r6
 8000bca:	4084      	lsls	r4, r0
 8000bcc:	464a      	mov	r2, r9
 8000bce:	0020      	movs	r0, r4
 8000bd0:	40f2      	lsrs	r2, r6
 8000bd2:	1e44      	subs	r4, r0, #1
 8000bd4:	41a0      	sbcs	r0, r4
 8000bd6:	4302      	orrs	r2, r0
 8000bd8:	189b      	adds	r3, r3, r2
 8000bda:	015a      	lsls	r2, r3, #5
 8000bdc:	d528      	bpl.n	8000c30 <__aeabi_fsub+0x174>
 8000bde:	3501      	adds	r5, #1
 8000be0:	2dff      	cmp	r5, #255	; 0xff
 8000be2:	d100      	bne.n	8000be6 <__aeabi_fsub+0x12a>
 8000be4:	e0a8      	b.n	8000d38 <__aeabi_fsub+0x27c>
 8000be6:	2201      	movs	r2, #1
 8000be8:	2407      	movs	r4, #7
 8000bea:	4994      	ldr	r1, [pc, #592]	; (8000e3c <__aeabi_fsub+0x380>)
 8000bec:	401a      	ands	r2, r3
 8000bee:	085b      	lsrs	r3, r3, #1
 8000bf0:	400b      	ands	r3, r1
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	401c      	ands	r4, r3
 8000bf6:	e7a6      	b.n	8000b46 <__aeabi_fsub+0x8a>
 8000bf8:	2e00      	cmp	r6, #0
 8000bfa:	d000      	beq.n	8000bfe <__aeabi_fsub+0x142>
 8000bfc:	e778      	b.n	8000af0 <__aeabi_fsub+0x34>
 8000bfe:	e775      	b.n	8000aec <__aeabi_fsub+0x30>
 8000c00:	2cff      	cmp	r4, #255	; 0xff
 8000c02:	d054      	beq.n	8000cae <__aeabi_fsub+0x1f2>
 8000c04:	2280      	movs	r2, #128	; 0x80
 8000c06:	4649      	mov	r1, r9
 8000c08:	04d2      	lsls	r2, r2, #19
 8000c0a:	4311      	orrs	r1, r2
 8000c0c:	4689      	mov	r9, r1
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2e1b      	cmp	r6, #27
 8000c12:	dc09      	bgt.n	8000c28 <__aeabi_fsub+0x16c>
 8000c14:	2120      	movs	r1, #32
 8000c16:	4648      	mov	r0, r9
 8000c18:	1b89      	subs	r1, r1, r6
 8000c1a:	4088      	lsls	r0, r1
 8000c1c:	464a      	mov	r2, r9
 8000c1e:	0001      	movs	r1, r0
 8000c20:	40f2      	lsrs	r2, r6
 8000c22:	1e48      	subs	r0, r1, #1
 8000c24:	4181      	sbcs	r1, r0
 8000c26:	430a      	orrs	r2, r1
 8000c28:	1a9b      	subs	r3, r3, r2
 8000c2a:	015a      	lsls	r2, r3, #5
 8000c2c:	d500      	bpl.n	8000c30 <__aeabi_fsub+0x174>
 8000c2e:	e773      	b.n	8000b18 <__aeabi_fsub+0x5c>
 8000c30:	2201      	movs	r2, #1
 8000c32:	4641      	mov	r1, r8
 8000c34:	400a      	ands	r2, r1
 8000c36:	0759      	lsls	r1, r3, #29
 8000c38:	d000      	beq.n	8000c3c <__aeabi_fsub+0x180>
 8000c3a:	e789      	b.n	8000b50 <__aeabi_fsub+0x94>
 8000c3c:	e011      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000c3e:	4648      	mov	r0, r9
 8000c40:	2800      	cmp	r0, #0
 8000c42:	d158      	bne.n	8000cf6 <__aeabi_fsub+0x23a>
 8000c44:	2cff      	cmp	r4, #255	; 0xff
 8000c46:	d10c      	bne.n	8000c62 <__aeabi_fsub+0x1a6>
 8000c48:	08db      	lsrs	r3, r3, #3
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d100      	bne.n	8000c50 <__aeabi_fsub+0x194>
 8000c4e:	e78c      	b.n	8000b6a <__aeabi_fsub+0xae>
 8000c50:	2080      	movs	r0, #128	; 0x80
 8000c52:	03c0      	lsls	r0, r0, #15
 8000c54:	4303      	orrs	r3, r0
 8000c56:	025b      	lsls	r3, r3, #9
 8000c58:	0a5b      	lsrs	r3, r3, #9
 8000c5a:	24ff      	movs	r4, #255	; 0xff
 8000c5c:	e787      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000c5e:	2cff      	cmp	r4, #255	; 0xff
 8000c60:	d025      	beq.n	8000cae <__aeabi_fsub+0x1f2>
 8000c62:	08db      	lsrs	r3, r3, #3
 8000c64:	2dff      	cmp	r5, #255	; 0xff
 8000c66:	d0f0      	beq.n	8000c4a <__aeabi_fsub+0x18e>
 8000c68:	025b      	lsls	r3, r3, #9
 8000c6a:	0a5b      	lsrs	r3, r3, #9
 8000c6c:	b2ec      	uxtb	r4, r5
 8000c6e:	e77e      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000c70:	2c00      	cmp	r4, #0
 8000c72:	d04d      	beq.n	8000d10 <__aeabi_fsub+0x254>
 8000c74:	28ff      	cmp	r0, #255	; 0xff
 8000c76:	d018      	beq.n	8000caa <__aeabi_fsub+0x1ee>
 8000c78:	2480      	movs	r4, #128	; 0x80
 8000c7a:	04e4      	lsls	r4, r4, #19
 8000c7c:	4272      	negs	r2, r6
 8000c7e:	4323      	orrs	r3, r4
 8000c80:	2a1b      	cmp	r2, #27
 8000c82:	dd00      	ble.n	8000c86 <__aeabi_fsub+0x1ca>
 8000c84:	e0c4      	b.n	8000e10 <__aeabi_fsub+0x354>
 8000c86:	001c      	movs	r4, r3
 8000c88:	2520      	movs	r5, #32
 8000c8a:	40d4      	lsrs	r4, r2
 8000c8c:	1aaa      	subs	r2, r5, r2
 8000c8e:	4093      	lsls	r3, r2
 8000c90:	1e5a      	subs	r2, r3, #1
 8000c92:	4193      	sbcs	r3, r2
 8000c94:	4323      	orrs	r3, r4
 8000c96:	464a      	mov	r2, r9
 8000c98:	0005      	movs	r5, r0
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	4688      	mov	r8, r1
 8000c9e:	e738      	b.n	8000b12 <__aeabi_fsub+0x56>
 8000ca0:	1c72      	adds	r2, r6, #1
 8000ca2:	d0f8      	beq.n	8000c96 <__aeabi_fsub+0x1da>
 8000ca4:	43f2      	mvns	r2, r6
 8000ca6:	28ff      	cmp	r0, #255	; 0xff
 8000ca8:	d1ea      	bne.n	8000c80 <__aeabi_fsub+0x1c4>
 8000caa:	000a      	movs	r2, r1
 8000cac:	464b      	mov	r3, r9
 8000cae:	25ff      	movs	r5, #255	; 0xff
 8000cb0:	e7d7      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000cb2:	019b      	lsls	r3, r3, #6
 8000cb4:	0a5b      	lsrs	r3, r3, #9
 8000cb6:	e75a      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000cb8:	2e00      	cmp	r6, #0
 8000cba:	d141      	bne.n	8000d40 <__aeabi_fsub+0x284>
 8000cbc:	1c65      	adds	r5, r4, #1
 8000cbe:	b2e9      	uxtb	r1, r5
 8000cc0:	2901      	cmp	r1, #1
 8000cc2:	dd45      	ble.n	8000d50 <__aeabi_fsub+0x294>
 8000cc4:	2dff      	cmp	r5, #255	; 0xff
 8000cc6:	d100      	bne.n	8000cca <__aeabi_fsub+0x20e>
 8000cc8:	e74f      	b.n	8000b6a <__aeabi_fsub+0xae>
 8000cca:	2407      	movs	r4, #7
 8000ccc:	444b      	add	r3, r9
 8000cce:	085b      	lsrs	r3, r3, #1
 8000cd0:	401c      	ands	r4, r3
 8000cd2:	e738      	b.n	8000b46 <__aeabi_fsub+0x8a>
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	4b5a      	ldr	r3, [pc, #360]	; (8000e40 <__aeabi_fsub+0x384>)
 8000cd8:	1a2d      	subs	r5, r5, r0
 8000cda:	4023      	ands	r3, r4
 8000cdc:	4014      	ands	r4, r2
 8000cde:	e732      	b.n	8000b46 <__aeabi_fsub+0x8a>
 8000ce0:	2c00      	cmp	r4, #0
 8000ce2:	d11d      	bne.n	8000d20 <__aeabi_fsub+0x264>
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d17a      	bne.n	8000dde <__aeabi_fsub+0x322>
 8000ce8:	464b      	mov	r3, r9
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d100      	bne.n	8000cf0 <__aeabi_fsub+0x234>
 8000cee:	e091      	b.n	8000e14 <__aeabi_fsub+0x358>
 8000cf0:	000a      	movs	r2, r1
 8000cf2:	2500      	movs	r5, #0
 8000cf4:	e7b5      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000cf6:	3e01      	subs	r6, #1
 8000cf8:	2e00      	cmp	r6, #0
 8000cfa:	d119      	bne.n	8000d30 <__aeabi_fsub+0x274>
 8000cfc:	444b      	add	r3, r9
 8000cfe:	e76c      	b.n	8000bda <__aeabi_fsub+0x11e>
 8000d00:	2cff      	cmp	r4, #255	; 0xff
 8000d02:	d184      	bne.n	8000c0e <__aeabi_fsub+0x152>
 8000d04:	25ff      	movs	r5, #255	; 0xff
 8000d06:	e7ac      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000d08:	464a      	mov	r2, r9
 8000d0a:	4688      	mov	r8, r1
 8000d0c:	1ad4      	subs	r4, r2, r3
 8000d0e:	e705      	b.n	8000b1c <__aeabi_fsub+0x60>
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d1c5      	bne.n	8000ca0 <__aeabi_fsub+0x1e4>
 8000d14:	000a      	movs	r2, r1
 8000d16:	28ff      	cmp	r0, #255	; 0xff
 8000d18:	d0c8      	beq.n	8000cac <__aeabi_fsub+0x1f0>
 8000d1a:	0005      	movs	r5, r0
 8000d1c:	464b      	mov	r3, r9
 8000d1e:	e7a0      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d149      	bne.n	8000db8 <__aeabi_fsub+0x2fc>
 8000d24:	464b      	mov	r3, r9
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d077      	beq.n	8000e1a <__aeabi_fsub+0x35e>
 8000d2a:	000a      	movs	r2, r1
 8000d2c:	25ff      	movs	r5, #255	; 0xff
 8000d2e:	e798      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000d30:	2cff      	cmp	r4, #255	; 0xff
 8000d32:	d000      	beq.n	8000d36 <__aeabi_fsub+0x27a>
 8000d34:	e743      	b.n	8000bbe <__aeabi_fsub+0x102>
 8000d36:	e787      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000d38:	000a      	movs	r2, r1
 8000d3a:	24ff      	movs	r4, #255	; 0xff
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	e716      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000d40:	2c00      	cmp	r4, #0
 8000d42:	d115      	bne.n	8000d70 <__aeabi_fsub+0x2b4>
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d157      	bne.n	8000df8 <__aeabi_fsub+0x33c>
 8000d48:	28ff      	cmp	r0, #255	; 0xff
 8000d4a:	d1e6      	bne.n	8000d1a <__aeabi_fsub+0x25e>
 8000d4c:	464b      	mov	r3, r9
 8000d4e:	e77b      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000d50:	2c00      	cmp	r4, #0
 8000d52:	d120      	bne.n	8000d96 <__aeabi_fsub+0x2da>
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d057      	beq.n	8000e08 <__aeabi_fsub+0x34c>
 8000d58:	4649      	mov	r1, r9
 8000d5a:	2900      	cmp	r1, #0
 8000d5c:	d053      	beq.n	8000e06 <__aeabi_fsub+0x34a>
 8000d5e:	444b      	add	r3, r9
 8000d60:	015a      	lsls	r2, r3, #5
 8000d62:	d568      	bpl.n	8000e36 <__aeabi_fsub+0x37a>
 8000d64:	2407      	movs	r4, #7
 8000d66:	4a36      	ldr	r2, [pc, #216]	; (8000e40 <__aeabi_fsub+0x384>)
 8000d68:	401c      	ands	r4, r3
 8000d6a:	2501      	movs	r5, #1
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	e6ea      	b.n	8000b46 <__aeabi_fsub+0x8a>
 8000d70:	28ff      	cmp	r0, #255	; 0xff
 8000d72:	d0eb      	beq.n	8000d4c <__aeabi_fsub+0x290>
 8000d74:	2280      	movs	r2, #128	; 0x80
 8000d76:	04d2      	lsls	r2, r2, #19
 8000d78:	4276      	negs	r6, r6
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	2e1b      	cmp	r6, #27
 8000d7e:	dc53      	bgt.n	8000e28 <__aeabi_fsub+0x36c>
 8000d80:	2520      	movs	r5, #32
 8000d82:	1bad      	subs	r5, r5, r6
 8000d84:	001a      	movs	r2, r3
 8000d86:	40ab      	lsls	r3, r5
 8000d88:	40f2      	lsrs	r2, r6
 8000d8a:	1e5c      	subs	r4, r3, #1
 8000d8c:	41a3      	sbcs	r3, r4
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	444b      	add	r3, r9
 8000d92:	0005      	movs	r5, r0
 8000d94:	e721      	b.n	8000bda <__aeabi_fsub+0x11e>
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d0d8      	beq.n	8000d4c <__aeabi_fsub+0x290>
 8000d9a:	4649      	mov	r1, r9
 8000d9c:	2900      	cmp	r1, #0
 8000d9e:	d100      	bne.n	8000da2 <__aeabi_fsub+0x2e6>
 8000da0:	e752      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000da2:	2180      	movs	r1, #128	; 0x80
 8000da4:	03c9      	lsls	r1, r1, #15
 8000da6:	420f      	tst	r7, r1
 8000da8:	d100      	bne.n	8000dac <__aeabi_fsub+0x2f0>
 8000daa:	e74d      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000dac:	4660      	mov	r0, ip
 8000dae:	4208      	tst	r0, r1
 8000db0:	d000      	beq.n	8000db4 <__aeabi_fsub+0x2f8>
 8000db2:	e749      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000db4:	464b      	mov	r3, r9
 8000db6:	e747      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000db8:	4648      	mov	r0, r9
 8000dba:	25ff      	movs	r5, #255	; 0xff
 8000dbc:	2800      	cmp	r0, #0
 8000dbe:	d100      	bne.n	8000dc2 <__aeabi_fsub+0x306>
 8000dc0:	e74f      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000dc2:	2280      	movs	r2, #128	; 0x80
 8000dc4:	03d2      	lsls	r2, r2, #15
 8000dc6:	4217      	tst	r7, r2
 8000dc8:	d004      	beq.n	8000dd4 <__aeabi_fsub+0x318>
 8000dca:	4660      	mov	r0, ip
 8000dcc:	4210      	tst	r0, r2
 8000dce:	d101      	bne.n	8000dd4 <__aeabi_fsub+0x318>
 8000dd0:	464b      	mov	r3, r9
 8000dd2:	4688      	mov	r8, r1
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	4641      	mov	r1, r8
 8000dd8:	25ff      	movs	r5, #255	; 0xff
 8000dda:	400a      	ands	r2, r1
 8000ddc:	e741      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000dde:	4648      	mov	r0, r9
 8000de0:	2800      	cmp	r0, #0
 8000de2:	d01f      	beq.n	8000e24 <__aeabi_fsub+0x368>
 8000de4:	1a1a      	subs	r2, r3, r0
 8000de6:	0150      	lsls	r0, r2, #5
 8000de8:	d520      	bpl.n	8000e2c <__aeabi_fsub+0x370>
 8000dea:	464a      	mov	r2, r9
 8000dec:	2407      	movs	r4, #7
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	401c      	ands	r4, r3
 8000df2:	4688      	mov	r8, r1
 8000df4:	2500      	movs	r5, #0
 8000df6:	e6a6      	b.n	8000b46 <__aeabi_fsub+0x8a>
 8000df8:	1c74      	adds	r4, r6, #1
 8000dfa:	d0c9      	beq.n	8000d90 <__aeabi_fsub+0x2d4>
 8000dfc:	43f6      	mvns	r6, r6
 8000dfe:	28ff      	cmp	r0, #255	; 0xff
 8000e00:	d1bc      	bne.n	8000d7c <__aeabi_fsub+0x2c0>
 8000e02:	464b      	mov	r3, r9
 8000e04:	e720      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000e06:	4699      	mov	r9, r3
 8000e08:	464b      	mov	r3, r9
 8000e0a:	2500      	movs	r5, #0
 8000e0c:	08db      	lsrs	r3, r3, #3
 8000e0e:	e72b      	b.n	8000c68 <__aeabi_fsub+0x1ac>
 8000e10:	2301      	movs	r3, #1
 8000e12:	e740      	b.n	8000c96 <__aeabi_fsub+0x1da>
 8000e14:	2200      	movs	r2, #0
 8000e16:	2300      	movs	r3, #0
 8000e18:	e6a9      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	03db      	lsls	r3, r3, #15
 8000e20:	24ff      	movs	r4, #255	; 0xff
 8000e22:	e6a4      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000e24:	2500      	movs	r5, #0
 8000e26:	e71c      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e7b1      	b.n	8000d90 <__aeabi_fsub+0x2d4>
 8000e2c:	2a00      	cmp	r2, #0
 8000e2e:	d0f1      	beq.n	8000e14 <__aeabi_fsub+0x358>
 8000e30:	0013      	movs	r3, r2
 8000e32:	2500      	movs	r5, #0
 8000e34:	e6fc      	b.n	8000c30 <__aeabi_fsub+0x174>
 8000e36:	2500      	movs	r5, #0
 8000e38:	e6fa      	b.n	8000c30 <__aeabi_fsub+0x174>
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	7dffffff 	.word	0x7dffffff
 8000e40:	fbffffff 	.word	0xfbffffff

08000e44 <__aeabi_f2iz>:
 8000e44:	0241      	lsls	r1, r0, #9
 8000e46:	0042      	lsls	r2, r0, #1
 8000e48:	0fc3      	lsrs	r3, r0, #31
 8000e4a:	0a49      	lsrs	r1, r1, #9
 8000e4c:	0e12      	lsrs	r2, r2, #24
 8000e4e:	2000      	movs	r0, #0
 8000e50:	2a7e      	cmp	r2, #126	; 0x7e
 8000e52:	d90d      	bls.n	8000e70 <__aeabi_f2iz+0x2c>
 8000e54:	2a9d      	cmp	r2, #157	; 0x9d
 8000e56:	d80c      	bhi.n	8000e72 <__aeabi_f2iz+0x2e>
 8000e58:	2080      	movs	r0, #128	; 0x80
 8000e5a:	0400      	lsls	r0, r0, #16
 8000e5c:	4301      	orrs	r1, r0
 8000e5e:	2a95      	cmp	r2, #149	; 0x95
 8000e60:	dc0a      	bgt.n	8000e78 <__aeabi_f2iz+0x34>
 8000e62:	2096      	movs	r0, #150	; 0x96
 8000e64:	1a82      	subs	r2, r0, r2
 8000e66:	40d1      	lsrs	r1, r2
 8000e68:	4248      	negs	r0, r1
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d100      	bne.n	8000e70 <__aeabi_f2iz+0x2c>
 8000e6e:	0008      	movs	r0, r1
 8000e70:	4770      	bx	lr
 8000e72:	4a03      	ldr	r2, [pc, #12]	; (8000e80 <__aeabi_f2iz+0x3c>)
 8000e74:	1898      	adds	r0, r3, r2
 8000e76:	e7fb      	b.n	8000e70 <__aeabi_f2iz+0x2c>
 8000e78:	3a96      	subs	r2, #150	; 0x96
 8000e7a:	4091      	lsls	r1, r2
 8000e7c:	e7f4      	b.n	8000e68 <__aeabi_f2iz+0x24>
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	7fffffff 	.word	0x7fffffff

08000e84 <__aeabi_ui2f>:
 8000e84:	b570      	push	{r4, r5, r6, lr}
 8000e86:	1e04      	subs	r4, r0, #0
 8000e88:	d034      	beq.n	8000ef4 <__aeabi_ui2f+0x70>
 8000e8a:	f000 fe9f 	bl	8001bcc <__clzsi2>
 8000e8e:	229e      	movs	r2, #158	; 0x9e
 8000e90:	1a12      	subs	r2, r2, r0
 8000e92:	2a96      	cmp	r2, #150	; 0x96
 8000e94:	dc07      	bgt.n	8000ea6 <__aeabi_ui2f+0x22>
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	2808      	cmp	r0, #8
 8000e9a:	dd2e      	ble.n	8000efa <__aeabi_ui2f+0x76>
 8000e9c:	3808      	subs	r0, #8
 8000e9e:	4084      	lsls	r4, r0
 8000ea0:	0260      	lsls	r0, r4, #9
 8000ea2:	0a40      	lsrs	r0, r0, #9
 8000ea4:	e021      	b.n	8000eea <__aeabi_ui2f+0x66>
 8000ea6:	2a99      	cmp	r2, #153	; 0x99
 8000ea8:	dd09      	ble.n	8000ebe <__aeabi_ui2f+0x3a>
 8000eaa:	0003      	movs	r3, r0
 8000eac:	0021      	movs	r1, r4
 8000eae:	331b      	adds	r3, #27
 8000eb0:	4099      	lsls	r1, r3
 8000eb2:	1e4b      	subs	r3, r1, #1
 8000eb4:	4199      	sbcs	r1, r3
 8000eb6:	2305      	movs	r3, #5
 8000eb8:	1a1b      	subs	r3, r3, r0
 8000eba:	40dc      	lsrs	r4, r3
 8000ebc:	430c      	orrs	r4, r1
 8000ebe:	2805      	cmp	r0, #5
 8000ec0:	dd01      	ble.n	8000ec6 <__aeabi_ui2f+0x42>
 8000ec2:	1f43      	subs	r3, r0, #5
 8000ec4:	409c      	lsls	r4, r3
 8000ec6:	0023      	movs	r3, r4
 8000ec8:	490d      	ldr	r1, [pc, #52]	; (8000f00 <__aeabi_ui2f+0x7c>)
 8000eca:	400b      	ands	r3, r1
 8000ecc:	0765      	lsls	r5, r4, #29
 8000ece:	d009      	beq.n	8000ee4 <__aeabi_ui2f+0x60>
 8000ed0:	250f      	movs	r5, #15
 8000ed2:	402c      	ands	r4, r5
 8000ed4:	2c04      	cmp	r4, #4
 8000ed6:	d005      	beq.n	8000ee4 <__aeabi_ui2f+0x60>
 8000ed8:	3304      	adds	r3, #4
 8000eda:	015c      	lsls	r4, r3, #5
 8000edc:	d502      	bpl.n	8000ee4 <__aeabi_ui2f+0x60>
 8000ede:	229f      	movs	r2, #159	; 0x9f
 8000ee0:	400b      	ands	r3, r1
 8000ee2:	1a12      	subs	r2, r2, r0
 8000ee4:	019b      	lsls	r3, r3, #6
 8000ee6:	0a58      	lsrs	r0, r3, #9
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	0240      	lsls	r0, r0, #9
 8000eec:	05d2      	lsls	r2, r2, #23
 8000eee:	0a40      	lsrs	r0, r0, #9
 8000ef0:	4310      	orrs	r0, r2
 8000ef2:	bd70      	pop	{r4, r5, r6, pc}
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	e7f7      	b.n	8000eea <__aeabi_ui2f+0x66>
 8000efa:	0260      	lsls	r0, r4, #9
 8000efc:	0a40      	lsrs	r0, r0, #9
 8000efe:	e7f4      	b.n	8000eea <__aeabi_ui2f+0x66>
 8000f00:	fbffffff 	.word	0xfbffffff

08000f04 <__aeabi_ddiv>:
 8000f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f06:	4657      	mov	r7, sl
 8000f08:	46de      	mov	lr, fp
 8000f0a:	464e      	mov	r6, r9
 8000f0c:	4645      	mov	r5, r8
 8000f0e:	b5e0      	push	{r5, r6, r7, lr}
 8000f10:	4683      	mov	fp, r0
 8000f12:	0007      	movs	r7, r0
 8000f14:	030e      	lsls	r6, r1, #12
 8000f16:	0048      	lsls	r0, r1, #1
 8000f18:	b085      	sub	sp, #20
 8000f1a:	4692      	mov	sl, r2
 8000f1c:	001c      	movs	r4, r3
 8000f1e:	0b36      	lsrs	r6, r6, #12
 8000f20:	0d40      	lsrs	r0, r0, #21
 8000f22:	0fcd      	lsrs	r5, r1, #31
 8000f24:	2800      	cmp	r0, #0
 8000f26:	d100      	bne.n	8000f2a <__aeabi_ddiv+0x26>
 8000f28:	e09d      	b.n	8001066 <__aeabi_ddiv+0x162>
 8000f2a:	4b95      	ldr	r3, [pc, #596]	; (8001180 <__aeabi_ddiv+0x27c>)
 8000f2c:	4298      	cmp	r0, r3
 8000f2e:	d039      	beq.n	8000fa4 <__aeabi_ddiv+0xa0>
 8000f30:	2380      	movs	r3, #128	; 0x80
 8000f32:	00f6      	lsls	r6, r6, #3
 8000f34:	041b      	lsls	r3, r3, #16
 8000f36:	431e      	orrs	r6, r3
 8000f38:	4a92      	ldr	r2, [pc, #584]	; (8001184 <__aeabi_ddiv+0x280>)
 8000f3a:	0f7b      	lsrs	r3, r7, #29
 8000f3c:	4333      	orrs	r3, r6
 8000f3e:	4699      	mov	r9, r3
 8000f40:	4694      	mov	ip, r2
 8000f42:	0003      	movs	r3, r0
 8000f44:	4463      	add	r3, ip
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	2300      	movs	r3, #0
 8000f4a:	2600      	movs	r6, #0
 8000f4c:	00ff      	lsls	r7, r7, #3
 8000f4e:	9302      	str	r3, [sp, #8]
 8000f50:	0323      	lsls	r3, r4, #12
 8000f52:	0b1b      	lsrs	r3, r3, #12
 8000f54:	4698      	mov	r8, r3
 8000f56:	0063      	lsls	r3, r4, #1
 8000f58:	0fe4      	lsrs	r4, r4, #31
 8000f5a:	4652      	mov	r2, sl
 8000f5c:	0d5b      	lsrs	r3, r3, #21
 8000f5e:	9401      	str	r4, [sp, #4]
 8000f60:	d100      	bne.n	8000f64 <__aeabi_ddiv+0x60>
 8000f62:	e0b3      	b.n	80010cc <__aeabi_ddiv+0x1c8>
 8000f64:	4986      	ldr	r1, [pc, #536]	; (8001180 <__aeabi_ddiv+0x27c>)
 8000f66:	428b      	cmp	r3, r1
 8000f68:	d100      	bne.n	8000f6c <__aeabi_ddiv+0x68>
 8000f6a:	e09e      	b.n	80010aa <__aeabi_ddiv+0x1a6>
 8000f6c:	4642      	mov	r2, r8
 8000f6e:	00d1      	lsls	r1, r2, #3
 8000f70:	2280      	movs	r2, #128	; 0x80
 8000f72:	0412      	lsls	r2, r2, #16
 8000f74:	430a      	orrs	r2, r1
 8000f76:	4651      	mov	r1, sl
 8000f78:	0f49      	lsrs	r1, r1, #29
 8000f7a:	4311      	orrs	r1, r2
 8000f7c:	468b      	mov	fp, r1
 8000f7e:	4981      	ldr	r1, [pc, #516]	; (8001184 <__aeabi_ddiv+0x280>)
 8000f80:	4652      	mov	r2, sl
 8000f82:	468c      	mov	ip, r1
 8000f84:	9900      	ldr	r1, [sp, #0]
 8000f86:	4463      	add	r3, ip
 8000f88:	1acb      	subs	r3, r1, r3
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	00d2      	lsls	r2, r2, #3
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	002b      	movs	r3, r5
 8000f92:	4063      	eors	r3, r4
 8000f94:	469a      	mov	sl, r3
 8000f96:	2e0f      	cmp	r6, #15
 8000f98:	d900      	bls.n	8000f9c <__aeabi_ddiv+0x98>
 8000f9a:	e105      	b.n	80011a8 <__aeabi_ddiv+0x2a4>
 8000f9c:	4b7a      	ldr	r3, [pc, #488]	; (8001188 <__aeabi_ddiv+0x284>)
 8000f9e:	00b6      	lsls	r6, r6, #2
 8000fa0:	599b      	ldr	r3, [r3, r6]
 8000fa2:	469f      	mov	pc, r3
 8000fa4:	465b      	mov	r3, fp
 8000fa6:	4333      	orrs	r3, r6
 8000fa8:	4699      	mov	r9, r3
 8000faa:	d000      	beq.n	8000fae <__aeabi_ddiv+0xaa>
 8000fac:	e0b8      	b.n	8001120 <__aeabi_ddiv+0x21c>
 8000fae:	2302      	movs	r3, #2
 8000fb0:	2608      	movs	r6, #8
 8000fb2:	2700      	movs	r7, #0
 8000fb4:	9000      	str	r0, [sp, #0]
 8000fb6:	9302      	str	r3, [sp, #8]
 8000fb8:	e7ca      	b.n	8000f50 <__aeabi_ddiv+0x4c>
 8000fba:	46cb      	mov	fp, r9
 8000fbc:	003a      	movs	r2, r7
 8000fbe:	9902      	ldr	r1, [sp, #8]
 8000fc0:	9501      	str	r5, [sp, #4]
 8000fc2:	9b01      	ldr	r3, [sp, #4]
 8000fc4:	469a      	mov	sl, r3
 8000fc6:	2902      	cmp	r1, #2
 8000fc8:	d027      	beq.n	800101a <__aeabi_ddiv+0x116>
 8000fca:	2903      	cmp	r1, #3
 8000fcc:	d100      	bne.n	8000fd0 <__aeabi_ddiv+0xcc>
 8000fce:	e280      	b.n	80014d2 <__aeabi_ddiv+0x5ce>
 8000fd0:	2901      	cmp	r1, #1
 8000fd2:	d044      	beq.n	800105e <__aeabi_ddiv+0x15a>
 8000fd4:	496d      	ldr	r1, [pc, #436]	; (800118c <__aeabi_ddiv+0x288>)
 8000fd6:	9b00      	ldr	r3, [sp, #0]
 8000fd8:	468c      	mov	ip, r1
 8000fda:	4463      	add	r3, ip
 8000fdc:	001c      	movs	r4, r3
 8000fde:	2c00      	cmp	r4, #0
 8000fe0:	dd38      	ble.n	8001054 <__aeabi_ddiv+0x150>
 8000fe2:	0753      	lsls	r3, r2, #29
 8000fe4:	d000      	beq.n	8000fe8 <__aeabi_ddiv+0xe4>
 8000fe6:	e213      	b.n	8001410 <__aeabi_ddiv+0x50c>
 8000fe8:	08d2      	lsrs	r2, r2, #3
 8000fea:	465b      	mov	r3, fp
 8000fec:	01db      	lsls	r3, r3, #7
 8000fee:	d509      	bpl.n	8001004 <__aeabi_ddiv+0x100>
 8000ff0:	4659      	mov	r1, fp
 8000ff2:	4b67      	ldr	r3, [pc, #412]	; (8001190 <__aeabi_ddiv+0x28c>)
 8000ff4:	4019      	ands	r1, r3
 8000ff6:	468b      	mov	fp, r1
 8000ff8:	2180      	movs	r1, #128	; 0x80
 8000ffa:	00c9      	lsls	r1, r1, #3
 8000ffc:	468c      	mov	ip, r1
 8000ffe:	9b00      	ldr	r3, [sp, #0]
 8001000:	4463      	add	r3, ip
 8001002:	001c      	movs	r4, r3
 8001004:	4b63      	ldr	r3, [pc, #396]	; (8001194 <__aeabi_ddiv+0x290>)
 8001006:	429c      	cmp	r4, r3
 8001008:	dc07      	bgt.n	800101a <__aeabi_ddiv+0x116>
 800100a:	465b      	mov	r3, fp
 800100c:	0564      	lsls	r4, r4, #21
 800100e:	075f      	lsls	r7, r3, #29
 8001010:	025b      	lsls	r3, r3, #9
 8001012:	4317      	orrs	r7, r2
 8001014:	0b1b      	lsrs	r3, r3, #12
 8001016:	0d62      	lsrs	r2, r4, #21
 8001018:	e002      	b.n	8001020 <__aeabi_ddiv+0x11c>
 800101a:	2300      	movs	r3, #0
 800101c:	2700      	movs	r7, #0
 800101e:	4a58      	ldr	r2, [pc, #352]	; (8001180 <__aeabi_ddiv+0x27c>)
 8001020:	2100      	movs	r1, #0
 8001022:	031b      	lsls	r3, r3, #12
 8001024:	0b1c      	lsrs	r4, r3, #12
 8001026:	0d0b      	lsrs	r3, r1, #20
 8001028:	051b      	lsls	r3, r3, #20
 800102a:	4323      	orrs	r3, r4
 800102c:	0514      	lsls	r4, r2, #20
 800102e:	4a5a      	ldr	r2, [pc, #360]	; (8001198 <__aeabi_ddiv+0x294>)
 8001030:	0038      	movs	r0, r7
 8001032:	4013      	ands	r3, r2
 8001034:	431c      	orrs	r4, r3
 8001036:	4653      	mov	r3, sl
 8001038:	0064      	lsls	r4, r4, #1
 800103a:	07db      	lsls	r3, r3, #31
 800103c:	0864      	lsrs	r4, r4, #1
 800103e:	431c      	orrs	r4, r3
 8001040:	0021      	movs	r1, r4
 8001042:	b005      	add	sp, #20
 8001044:	bc3c      	pop	{r2, r3, r4, r5}
 8001046:	4690      	mov	r8, r2
 8001048:	4699      	mov	r9, r3
 800104a:	46a2      	mov	sl, r4
 800104c:	46ab      	mov	fp, r5
 800104e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001050:	2201      	movs	r2, #1
 8001052:	4252      	negs	r2, r2
 8001054:	2301      	movs	r3, #1
 8001056:	1b1b      	subs	r3, r3, r4
 8001058:	2b38      	cmp	r3, #56	; 0x38
 800105a:	dc00      	bgt.n	800105e <__aeabi_ddiv+0x15a>
 800105c:	e1ad      	b.n	80013ba <__aeabi_ddiv+0x4b6>
 800105e:	2200      	movs	r2, #0
 8001060:	2300      	movs	r3, #0
 8001062:	2700      	movs	r7, #0
 8001064:	e7dc      	b.n	8001020 <__aeabi_ddiv+0x11c>
 8001066:	465b      	mov	r3, fp
 8001068:	4333      	orrs	r3, r6
 800106a:	4699      	mov	r9, r3
 800106c:	d05e      	beq.n	800112c <__aeabi_ddiv+0x228>
 800106e:	2e00      	cmp	r6, #0
 8001070:	d100      	bne.n	8001074 <__aeabi_ddiv+0x170>
 8001072:	e18a      	b.n	800138a <__aeabi_ddiv+0x486>
 8001074:	0030      	movs	r0, r6
 8001076:	f000 fda9 	bl	8001bcc <__clzsi2>
 800107a:	0003      	movs	r3, r0
 800107c:	3b0b      	subs	r3, #11
 800107e:	2b1c      	cmp	r3, #28
 8001080:	dd00      	ble.n	8001084 <__aeabi_ddiv+0x180>
 8001082:	e17b      	b.n	800137c <__aeabi_ddiv+0x478>
 8001084:	221d      	movs	r2, #29
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	465a      	mov	r2, fp
 800108a:	0001      	movs	r1, r0
 800108c:	40da      	lsrs	r2, r3
 800108e:	3908      	subs	r1, #8
 8001090:	408e      	lsls	r6, r1
 8001092:	0013      	movs	r3, r2
 8001094:	465f      	mov	r7, fp
 8001096:	4333      	orrs	r3, r6
 8001098:	4699      	mov	r9, r3
 800109a:	408f      	lsls	r7, r1
 800109c:	4b3f      	ldr	r3, [pc, #252]	; (800119c <__aeabi_ddiv+0x298>)
 800109e:	2600      	movs	r6, #0
 80010a0:	1a1b      	subs	r3, r3, r0
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2300      	movs	r3, #0
 80010a6:	9302      	str	r3, [sp, #8]
 80010a8:	e752      	b.n	8000f50 <__aeabi_ddiv+0x4c>
 80010aa:	4641      	mov	r1, r8
 80010ac:	4653      	mov	r3, sl
 80010ae:	430b      	orrs	r3, r1
 80010b0:	493b      	ldr	r1, [pc, #236]	; (80011a0 <__aeabi_ddiv+0x29c>)
 80010b2:	469b      	mov	fp, r3
 80010b4:	468c      	mov	ip, r1
 80010b6:	9b00      	ldr	r3, [sp, #0]
 80010b8:	4463      	add	r3, ip
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	465b      	mov	r3, fp
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d13b      	bne.n	800113a <__aeabi_ddiv+0x236>
 80010c2:	2302      	movs	r3, #2
 80010c4:	2200      	movs	r2, #0
 80010c6:	431e      	orrs	r6, r3
 80010c8:	2102      	movs	r1, #2
 80010ca:	e761      	b.n	8000f90 <__aeabi_ddiv+0x8c>
 80010cc:	4643      	mov	r3, r8
 80010ce:	4313      	orrs	r3, r2
 80010d0:	469b      	mov	fp, r3
 80010d2:	d037      	beq.n	8001144 <__aeabi_ddiv+0x240>
 80010d4:	4643      	mov	r3, r8
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d100      	bne.n	80010dc <__aeabi_ddiv+0x1d8>
 80010da:	e162      	b.n	80013a2 <__aeabi_ddiv+0x49e>
 80010dc:	4640      	mov	r0, r8
 80010de:	f000 fd75 	bl	8001bcc <__clzsi2>
 80010e2:	0003      	movs	r3, r0
 80010e4:	3b0b      	subs	r3, #11
 80010e6:	2b1c      	cmp	r3, #28
 80010e8:	dd00      	ble.n	80010ec <__aeabi_ddiv+0x1e8>
 80010ea:	e153      	b.n	8001394 <__aeabi_ddiv+0x490>
 80010ec:	0002      	movs	r2, r0
 80010ee:	4641      	mov	r1, r8
 80010f0:	3a08      	subs	r2, #8
 80010f2:	4091      	lsls	r1, r2
 80010f4:	4688      	mov	r8, r1
 80010f6:	211d      	movs	r1, #29
 80010f8:	1acb      	subs	r3, r1, r3
 80010fa:	4651      	mov	r1, sl
 80010fc:	40d9      	lsrs	r1, r3
 80010fe:	000b      	movs	r3, r1
 8001100:	4641      	mov	r1, r8
 8001102:	430b      	orrs	r3, r1
 8001104:	469b      	mov	fp, r3
 8001106:	4653      	mov	r3, sl
 8001108:	4093      	lsls	r3, r2
 800110a:	001a      	movs	r2, r3
 800110c:	9b00      	ldr	r3, [sp, #0]
 800110e:	4925      	ldr	r1, [pc, #148]	; (80011a4 <__aeabi_ddiv+0x2a0>)
 8001110:	469c      	mov	ip, r3
 8001112:	4460      	add	r0, ip
 8001114:	0003      	movs	r3, r0
 8001116:	468c      	mov	ip, r1
 8001118:	4463      	add	r3, ip
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	2100      	movs	r1, #0
 800111e:	e737      	b.n	8000f90 <__aeabi_ddiv+0x8c>
 8001120:	2303      	movs	r3, #3
 8001122:	46b1      	mov	r9, r6
 8001124:	9000      	str	r0, [sp, #0]
 8001126:	260c      	movs	r6, #12
 8001128:	9302      	str	r3, [sp, #8]
 800112a:	e711      	b.n	8000f50 <__aeabi_ddiv+0x4c>
 800112c:	2300      	movs	r3, #0
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	3301      	adds	r3, #1
 8001132:	2604      	movs	r6, #4
 8001134:	2700      	movs	r7, #0
 8001136:	9302      	str	r3, [sp, #8]
 8001138:	e70a      	b.n	8000f50 <__aeabi_ddiv+0x4c>
 800113a:	2303      	movs	r3, #3
 800113c:	46c3      	mov	fp, r8
 800113e:	431e      	orrs	r6, r3
 8001140:	2103      	movs	r1, #3
 8001142:	e725      	b.n	8000f90 <__aeabi_ddiv+0x8c>
 8001144:	3301      	adds	r3, #1
 8001146:	431e      	orrs	r6, r3
 8001148:	2200      	movs	r2, #0
 800114a:	2101      	movs	r1, #1
 800114c:	e720      	b.n	8000f90 <__aeabi_ddiv+0x8c>
 800114e:	2300      	movs	r3, #0
 8001150:	469a      	mov	sl, r3
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	2700      	movs	r7, #0
 8001156:	031b      	lsls	r3, r3, #12
 8001158:	4a09      	ldr	r2, [pc, #36]	; (8001180 <__aeabi_ddiv+0x27c>)
 800115a:	e761      	b.n	8001020 <__aeabi_ddiv+0x11c>
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	4649      	mov	r1, r9
 8001160:	031b      	lsls	r3, r3, #12
 8001162:	4219      	tst	r1, r3
 8001164:	d100      	bne.n	8001168 <__aeabi_ddiv+0x264>
 8001166:	e0e2      	b.n	800132e <__aeabi_ddiv+0x42a>
 8001168:	4659      	mov	r1, fp
 800116a:	4219      	tst	r1, r3
 800116c:	d000      	beq.n	8001170 <__aeabi_ddiv+0x26c>
 800116e:	e0de      	b.n	800132e <__aeabi_ddiv+0x42a>
 8001170:	430b      	orrs	r3, r1
 8001172:	031b      	lsls	r3, r3, #12
 8001174:	0017      	movs	r7, r2
 8001176:	0b1b      	lsrs	r3, r3, #12
 8001178:	46a2      	mov	sl, r4
 800117a:	4a01      	ldr	r2, [pc, #4]	; (8001180 <__aeabi_ddiv+0x27c>)
 800117c:	e750      	b.n	8001020 <__aeabi_ddiv+0x11c>
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	000007ff 	.word	0x000007ff
 8001184:	fffffc01 	.word	0xfffffc01
 8001188:	0800bcd4 	.word	0x0800bcd4
 800118c:	000003ff 	.word	0x000003ff
 8001190:	feffffff 	.word	0xfeffffff
 8001194:	000007fe 	.word	0x000007fe
 8001198:	800fffff 	.word	0x800fffff
 800119c:	fffffc0d 	.word	0xfffffc0d
 80011a0:	fffff801 	.word	0xfffff801
 80011a4:	000003f3 	.word	0x000003f3
 80011a8:	45d9      	cmp	r9, fp
 80011aa:	d900      	bls.n	80011ae <__aeabi_ddiv+0x2aa>
 80011ac:	e0cb      	b.n	8001346 <__aeabi_ddiv+0x442>
 80011ae:	d100      	bne.n	80011b2 <__aeabi_ddiv+0x2ae>
 80011b0:	e0c6      	b.n	8001340 <__aeabi_ddiv+0x43c>
 80011b2:	003c      	movs	r4, r7
 80011b4:	4648      	mov	r0, r9
 80011b6:	2700      	movs	r7, #0
 80011b8:	9b00      	ldr	r3, [sp, #0]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	465b      	mov	r3, fp
 80011c0:	0e16      	lsrs	r6, r2, #24
 80011c2:	021b      	lsls	r3, r3, #8
 80011c4:	431e      	orrs	r6, r3
 80011c6:	0213      	lsls	r3, r2, #8
 80011c8:	4698      	mov	r8, r3
 80011ca:	0433      	lsls	r3, r6, #16
 80011cc:	0c1b      	lsrs	r3, r3, #16
 80011ce:	4699      	mov	r9, r3
 80011d0:	0c31      	lsrs	r1, r6, #16
 80011d2:	9101      	str	r1, [sp, #4]
 80011d4:	f7ff f826 	bl	8000224 <__aeabi_uidivmod>
 80011d8:	464a      	mov	r2, r9
 80011da:	4342      	muls	r2, r0
 80011dc:	040b      	lsls	r3, r1, #16
 80011de:	0c21      	lsrs	r1, r4, #16
 80011e0:	0005      	movs	r5, r0
 80011e2:	4319      	orrs	r1, r3
 80011e4:	428a      	cmp	r2, r1
 80011e6:	d907      	bls.n	80011f8 <__aeabi_ddiv+0x2f4>
 80011e8:	1989      	adds	r1, r1, r6
 80011ea:	3d01      	subs	r5, #1
 80011ec:	428e      	cmp	r6, r1
 80011ee:	d803      	bhi.n	80011f8 <__aeabi_ddiv+0x2f4>
 80011f0:	428a      	cmp	r2, r1
 80011f2:	d901      	bls.n	80011f8 <__aeabi_ddiv+0x2f4>
 80011f4:	1e85      	subs	r5, r0, #2
 80011f6:	1989      	adds	r1, r1, r6
 80011f8:	1a88      	subs	r0, r1, r2
 80011fa:	9901      	ldr	r1, [sp, #4]
 80011fc:	f7ff f812 	bl	8000224 <__aeabi_uidivmod>
 8001200:	0409      	lsls	r1, r1, #16
 8001202:	468c      	mov	ip, r1
 8001204:	464a      	mov	r2, r9
 8001206:	0421      	lsls	r1, r4, #16
 8001208:	4664      	mov	r4, ip
 800120a:	4342      	muls	r2, r0
 800120c:	0c09      	lsrs	r1, r1, #16
 800120e:	0003      	movs	r3, r0
 8001210:	4321      	orrs	r1, r4
 8001212:	428a      	cmp	r2, r1
 8001214:	d904      	bls.n	8001220 <__aeabi_ddiv+0x31c>
 8001216:	1989      	adds	r1, r1, r6
 8001218:	3b01      	subs	r3, #1
 800121a:	428e      	cmp	r6, r1
 800121c:	d800      	bhi.n	8001220 <__aeabi_ddiv+0x31c>
 800121e:	e0f1      	b.n	8001404 <__aeabi_ddiv+0x500>
 8001220:	042d      	lsls	r5, r5, #16
 8001222:	431d      	orrs	r5, r3
 8001224:	46ab      	mov	fp, r5
 8001226:	4643      	mov	r3, r8
 8001228:	1a89      	subs	r1, r1, r2
 800122a:	4642      	mov	r2, r8
 800122c:	0c28      	lsrs	r0, r5, #16
 800122e:	0412      	lsls	r2, r2, #16
 8001230:	0c1d      	lsrs	r5, r3, #16
 8001232:	465b      	mov	r3, fp
 8001234:	0c14      	lsrs	r4, r2, #16
 8001236:	0022      	movs	r2, r4
 8001238:	041b      	lsls	r3, r3, #16
 800123a:	0c1b      	lsrs	r3, r3, #16
 800123c:	435a      	muls	r2, r3
 800123e:	9403      	str	r4, [sp, #12]
 8001240:	436b      	muls	r3, r5
 8001242:	4344      	muls	r4, r0
 8001244:	9502      	str	r5, [sp, #8]
 8001246:	4368      	muls	r0, r5
 8001248:	191b      	adds	r3, r3, r4
 800124a:	0c15      	lsrs	r5, r2, #16
 800124c:	18eb      	adds	r3, r5, r3
 800124e:	429c      	cmp	r4, r3
 8001250:	d903      	bls.n	800125a <__aeabi_ddiv+0x356>
 8001252:	2480      	movs	r4, #128	; 0x80
 8001254:	0264      	lsls	r4, r4, #9
 8001256:	46a4      	mov	ip, r4
 8001258:	4460      	add	r0, ip
 800125a:	0c1c      	lsrs	r4, r3, #16
 800125c:	0415      	lsls	r5, r2, #16
 800125e:	041b      	lsls	r3, r3, #16
 8001260:	0c2d      	lsrs	r5, r5, #16
 8001262:	1820      	adds	r0, r4, r0
 8001264:	195d      	adds	r5, r3, r5
 8001266:	4281      	cmp	r1, r0
 8001268:	d377      	bcc.n	800135a <__aeabi_ddiv+0x456>
 800126a:	d073      	beq.n	8001354 <__aeabi_ddiv+0x450>
 800126c:	1a0c      	subs	r4, r1, r0
 800126e:	4aa2      	ldr	r2, [pc, #648]	; (80014f8 <__aeabi_ddiv+0x5f4>)
 8001270:	1b7d      	subs	r5, r7, r5
 8001272:	42af      	cmp	r7, r5
 8001274:	41bf      	sbcs	r7, r7
 8001276:	4694      	mov	ip, r2
 8001278:	9b00      	ldr	r3, [sp, #0]
 800127a:	427f      	negs	r7, r7
 800127c:	4463      	add	r3, ip
 800127e:	1be0      	subs	r0, r4, r7
 8001280:	001c      	movs	r4, r3
 8001282:	4286      	cmp	r6, r0
 8001284:	d100      	bne.n	8001288 <__aeabi_ddiv+0x384>
 8001286:	e0db      	b.n	8001440 <__aeabi_ddiv+0x53c>
 8001288:	9901      	ldr	r1, [sp, #4]
 800128a:	f7fe ffcb 	bl	8000224 <__aeabi_uidivmod>
 800128e:	464a      	mov	r2, r9
 8001290:	4342      	muls	r2, r0
 8001292:	040b      	lsls	r3, r1, #16
 8001294:	0c29      	lsrs	r1, r5, #16
 8001296:	0007      	movs	r7, r0
 8001298:	4319      	orrs	r1, r3
 800129a:	428a      	cmp	r2, r1
 800129c:	d907      	bls.n	80012ae <__aeabi_ddiv+0x3aa>
 800129e:	1989      	adds	r1, r1, r6
 80012a0:	3f01      	subs	r7, #1
 80012a2:	428e      	cmp	r6, r1
 80012a4:	d803      	bhi.n	80012ae <__aeabi_ddiv+0x3aa>
 80012a6:	428a      	cmp	r2, r1
 80012a8:	d901      	bls.n	80012ae <__aeabi_ddiv+0x3aa>
 80012aa:	1e87      	subs	r7, r0, #2
 80012ac:	1989      	adds	r1, r1, r6
 80012ae:	1a88      	subs	r0, r1, r2
 80012b0:	9901      	ldr	r1, [sp, #4]
 80012b2:	f7fe ffb7 	bl	8000224 <__aeabi_uidivmod>
 80012b6:	0409      	lsls	r1, r1, #16
 80012b8:	464a      	mov	r2, r9
 80012ba:	4689      	mov	r9, r1
 80012bc:	0429      	lsls	r1, r5, #16
 80012be:	464d      	mov	r5, r9
 80012c0:	4342      	muls	r2, r0
 80012c2:	0c09      	lsrs	r1, r1, #16
 80012c4:	0003      	movs	r3, r0
 80012c6:	4329      	orrs	r1, r5
 80012c8:	428a      	cmp	r2, r1
 80012ca:	d907      	bls.n	80012dc <__aeabi_ddiv+0x3d8>
 80012cc:	1989      	adds	r1, r1, r6
 80012ce:	3b01      	subs	r3, #1
 80012d0:	428e      	cmp	r6, r1
 80012d2:	d803      	bhi.n	80012dc <__aeabi_ddiv+0x3d8>
 80012d4:	428a      	cmp	r2, r1
 80012d6:	d901      	bls.n	80012dc <__aeabi_ddiv+0x3d8>
 80012d8:	1e83      	subs	r3, r0, #2
 80012da:	1989      	adds	r1, r1, r6
 80012dc:	043f      	lsls	r7, r7, #16
 80012de:	1a89      	subs	r1, r1, r2
 80012e0:	003a      	movs	r2, r7
 80012e2:	9f03      	ldr	r7, [sp, #12]
 80012e4:	431a      	orrs	r2, r3
 80012e6:	0038      	movs	r0, r7
 80012e8:	0413      	lsls	r3, r2, #16
 80012ea:	0c1b      	lsrs	r3, r3, #16
 80012ec:	4358      	muls	r0, r3
 80012ee:	4681      	mov	r9, r0
 80012f0:	9802      	ldr	r0, [sp, #8]
 80012f2:	0c15      	lsrs	r5, r2, #16
 80012f4:	436f      	muls	r7, r5
 80012f6:	4343      	muls	r3, r0
 80012f8:	4345      	muls	r5, r0
 80012fa:	4648      	mov	r0, r9
 80012fc:	0c00      	lsrs	r0, r0, #16
 80012fe:	4684      	mov	ip, r0
 8001300:	19db      	adds	r3, r3, r7
 8001302:	4463      	add	r3, ip
 8001304:	429f      	cmp	r7, r3
 8001306:	d903      	bls.n	8001310 <__aeabi_ddiv+0x40c>
 8001308:	2080      	movs	r0, #128	; 0x80
 800130a:	0240      	lsls	r0, r0, #9
 800130c:	4684      	mov	ip, r0
 800130e:	4465      	add	r5, ip
 8001310:	4648      	mov	r0, r9
 8001312:	0c1f      	lsrs	r7, r3, #16
 8001314:	0400      	lsls	r0, r0, #16
 8001316:	041b      	lsls	r3, r3, #16
 8001318:	0c00      	lsrs	r0, r0, #16
 800131a:	197d      	adds	r5, r7, r5
 800131c:	1818      	adds	r0, r3, r0
 800131e:	42a9      	cmp	r1, r5
 8001320:	d200      	bcs.n	8001324 <__aeabi_ddiv+0x420>
 8001322:	e084      	b.n	800142e <__aeabi_ddiv+0x52a>
 8001324:	d100      	bne.n	8001328 <__aeabi_ddiv+0x424>
 8001326:	e07f      	b.n	8001428 <__aeabi_ddiv+0x524>
 8001328:	2301      	movs	r3, #1
 800132a:	431a      	orrs	r2, r3
 800132c:	e657      	b.n	8000fde <__aeabi_ddiv+0xda>
 800132e:	2380      	movs	r3, #128	; 0x80
 8001330:	464a      	mov	r2, r9
 8001332:	031b      	lsls	r3, r3, #12
 8001334:	4313      	orrs	r3, r2
 8001336:	031b      	lsls	r3, r3, #12
 8001338:	0b1b      	lsrs	r3, r3, #12
 800133a:	46aa      	mov	sl, r5
 800133c:	4a6f      	ldr	r2, [pc, #444]	; (80014fc <__aeabi_ddiv+0x5f8>)
 800133e:	e66f      	b.n	8001020 <__aeabi_ddiv+0x11c>
 8001340:	42ba      	cmp	r2, r7
 8001342:	d900      	bls.n	8001346 <__aeabi_ddiv+0x442>
 8001344:	e735      	b.n	80011b2 <__aeabi_ddiv+0x2ae>
 8001346:	464b      	mov	r3, r9
 8001348:	07dc      	lsls	r4, r3, #31
 800134a:	0858      	lsrs	r0, r3, #1
 800134c:	087b      	lsrs	r3, r7, #1
 800134e:	431c      	orrs	r4, r3
 8001350:	07ff      	lsls	r7, r7, #31
 8001352:	e734      	b.n	80011be <__aeabi_ddiv+0x2ba>
 8001354:	2400      	movs	r4, #0
 8001356:	42af      	cmp	r7, r5
 8001358:	d289      	bcs.n	800126e <__aeabi_ddiv+0x36a>
 800135a:	4447      	add	r7, r8
 800135c:	4547      	cmp	r7, r8
 800135e:	41a4      	sbcs	r4, r4
 8001360:	465b      	mov	r3, fp
 8001362:	4264      	negs	r4, r4
 8001364:	19a4      	adds	r4, r4, r6
 8001366:	1864      	adds	r4, r4, r1
 8001368:	3b01      	subs	r3, #1
 800136a:	42a6      	cmp	r6, r4
 800136c:	d21e      	bcs.n	80013ac <__aeabi_ddiv+0x4a8>
 800136e:	42a0      	cmp	r0, r4
 8001370:	d86d      	bhi.n	800144e <__aeabi_ddiv+0x54a>
 8001372:	d100      	bne.n	8001376 <__aeabi_ddiv+0x472>
 8001374:	e0b6      	b.n	80014e4 <__aeabi_ddiv+0x5e0>
 8001376:	1a24      	subs	r4, r4, r0
 8001378:	469b      	mov	fp, r3
 800137a:	e778      	b.n	800126e <__aeabi_ddiv+0x36a>
 800137c:	0003      	movs	r3, r0
 800137e:	465a      	mov	r2, fp
 8001380:	3b28      	subs	r3, #40	; 0x28
 8001382:	409a      	lsls	r2, r3
 8001384:	2700      	movs	r7, #0
 8001386:	4691      	mov	r9, r2
 8001388:	e688      	b.n	800109c <__aeabi_ddiv+0x198>
 800138a:	4658      	mov	r0, fp
 800138c:	f000 fc1e 	bl	8001bcc <__clzsi2>
 8001390:	3020      	adds	r0, #32
 8001392:	e672      	b.n	800107a <__aeabi_ddiv+0x176>
 8001394:	0003      	movs	r3, r0
 8001396:	4652      	mov	r2, sl
 8001398:	3b28      	subs	r3, #40	; 0x28
 800139a:	409a      	lsls	r2, r3
 800139c:	4693      	mov	fp, r2
 800139e:	2200      	movs	r2, #0
 80013a0:	e6b4      	b.n	800110c <__aeabi_ddiv+0x208>
 80013a2:	4650      	mov	r0, sl
 80013a4:	f000 fc12 	bl	8001bcc <__clzsi2>
 80013a8:	3020      	adds	r0, #32
 80013aa:	e69a      	b.n	80010e2 <__aeabi_ddiv+0x1de>
 80013ac:	42a6      	cmp	r6, r4
 80013ae:	d1e2      	bne.n	8001376 <__aeabi_ddiv+0x472>
 80013b0:	45b8      	cmp	r8, r7
 80013b2:	d9dc      	bls.n	800136e <__aeabi_ddiv+0x46a>
 80013b4:	1a34      	subs	r4, r6, r0
 80013b6:	469b      	mov	fp, r3
 80013b8:	e759      	b.n	800126e <__aeabi_ddiv+0x36a>
 80013ba:	2b1f      	cmp	r3, #31
 80013bc:	dc65      	bgt.n	800148a <__aeabi_ddiv+0x586>
 80013be:	4c50      	ldr	r4, [pc, #320]	; (8001500 <__aeabi_ddiv+0x5fc>)
 80013c0:	9900      	ldr	r1, [sp, #0]
 80013c2:	46a4      	mov	ip, r4
 80013c4:	465c      	mov	r4, fp
 80013c6:	4461      	add	r1, ip
 80013c8:	0008      	movs	r0, r1
 80013ca:	408c      	lsls	r4, r1
 80013cc:	0011      	movs	r1, r2
 80013ce:	4082      	lsls	r2, r0
 80013d0:	40d9      	lsrs	r1, r3
 80013d2:	1e50      	subs	r0, r2, #1
 80013d4:	4182      	sbcs	r2, r0
 80013d6:	430c      	orrs	r4, r1
 80013d8:	4314      	orrs	r4, r2
 80013da:	465a      	mov	r2, fp
 80013dc:	40da      	lsrs	r2, r3
 80013de:	0013      	movs	r3, r2
 80013e0:	0762      	lsls	r2, r4, #29
 80013e2:	d009      	beq.n	80013f8 <__aeabi_ddiv+0x4f4>
 80013e4:	220f      	movs	r2, #15
 80013e6:	4022      	ands	r2, r4
 80013e8:	2a04      	cmp	r2, #4
 80013ea:	d005      	beq.n	80013f8 <__aeabi_ddiv+0x4f4>
 80013ec:	0022      	movs	r2, r4
 80013ee:	1d14      	adds	r4, r2, #4
 80013f0:	4294      	cmp	r4, r2
 80013f2:	4189      	sbcs	r1, r1
 80013f4:	4249      	negs	r1, r1
 80013f6:	185b      	adds	r3, r3, r1
 80013f8:	021a      	lsls	r2, r3, #8
 80013fa:	d562      	bpl.n	80014c2 <__aeabi_ddiv+0x5be>
 80013fc:	2201      	movs	r2, #1
 80013fe:	2300      	movs	r3, #0
 8001400:	2700      	movs	r7, #0
 8001402:	e60d      	b.n	8001020 <__aeabi_ddiv+0x11c>
 8001404:	428a      	cmp	r2, r1
 8001406:	d800      	bhi.n	800140a <__aeabi_ddiv+0x506>
 8001408:	e70a      	b.n	8001220 <__aeabi_ddiv+0x31c>
 800140a:	1e83      	subs	r3, r0, #2
 800140c:	1989      	adds	r1, r1, r6
 800140e:	e707      	b.n	8001220 <__aeabi_ddiv+0x31c>
 8001410:	230f      	movs	r3, #15
 8001412:	4013      	ands	r3, r2
 8001414:	2b04      	cmp	r3, #4
 8001416:	d100      	bne.n	800141a <__aeabi_ddiv+0x516>
 8001418:	e5e6      	b.n	8000fe8 <__aeabi_ddiv+0xe4>
 800141a:	1d17      	adds	r7, r2, #4
 800141c:	4297      	cmp	r7, r2
 800141e:	4192      	sbcs	r2, r2
 8001420:	4253      	negs	r3, r2
 8001422:	449b      	add	fp, r3
 8001424:	08fa      	lsrs	r2, r7, #3
 8001426:	e5e0      	b.n	8000fea <__aeabi_ddiv+0xe6>
 8001428:	2800      	cmp	r0, #0
 800142a:	d100      	bne.n	800142e <__aeabi_ddiv+0x52a>
 800142c:	e5d7      	b.n	8000fde <__aeabi_ddiv+0xda>
 800142e:	1871      	adds	r1, r6, r1
 8001430:	1e53      	subs	r3, r2, #1
 8001432:	42b1      	cmp	r1, r6
 8001434:	d327      	bcc.n	8001486 <__aeabi_ddiv+0x582>
 8001436:	42a9      	cmp	r1, r5
 8001438:	d315      	bcc.n	8001466 <__aeabi_ddiv+0x562>
 800143a:	d058      	beq.n	80014ee <__aeabi_ddiv+0x5ea>
 800143c:	001a      	movs	r2, r3
 800143e:	e773      	b.n	8001328 <__aeabi_ddiv+0x424>
 8001440:	2b00      	cmp	r3, #0
 8001442:	dc00      	bgt.n	8001446 <__aeabi_ddiv+0x542>
 8001444:	e604      	b.n	8001050 <__aeabi_ddiv+0x14c>
 8001446:	2301      	movs	r3, #1
 8001448:	2200      	movs	r2, #0
 800144a:	449b      	add	fp, r3
 800144c:	e5cd      	b.n	8000fea <__aeabi_ddiv+0xe6>
 800144e:	2302      	movs	r3, #2
 8001450:	4447      	add	r7, r8
 8001452:	4547      	cmp	r7, r8
 8001454:	4189      	sbcs	r1, r1
 8001456:	425b      	negs	r3, r3
 8001458:	469c      	mov	ip, r3
 800145a:	4249      	negs	r1, r1
 800145c:	1989      	adds	r1, r1, r6
 800145e:	190c      	adds	r4, r1, r4
 8001460:	44e3      	add	fp, ip
 8001462:	1a24      	subs	r4, r4, r0
 8001464:	e703      	b.n	800126e <__aeabi_ddiv+0x36a>
 8001466:	4643      	mov	r3, r8
 8001468:	005f      	lsls	r7, r3, #1
 800146a:	4547      	cmp	r7, r8
 800146c:	419b      	sbcs	r3, r3
 800146e:	46b8      	mov	r8, r7
 8001470:	425b      	negs	r3, r3
 8001472:	199e      	adds	r6, r3, r6
 8001474:	3a02      	subs	r2, #2
 8001476:	1989      	adds	r1, r1, r6
 8001478:	42a9      	cmp	r1, r5
 800147a:	d000      	beq.n	800147e <__aeabi_ddiv+0x57a>
 800147c:	e754      	b.n	8001328 <__aeabi_ddiv+0x424>
 800147e:	4540      	cmp	r0, r8
 8001480:	d000      	beq.n	8001484 <__aeabi_ddiv+0x580>
 8001482:	e751      	b.n	8001328 <__aeabi_ddiv+0x424>
 8001484:	e5ab      	b.n	8000fde <__aeabi_ddiv+0xda>
 8001486:	001a      	movs	r2, r3
 8001488:	e7f6      	b.n	8001478 <__aeabi_ddiv+0x574>
 800148a:	211f      	movs	r1, #31
 800148c:	465f      	mov	r7, fp
 800148e:	4249      	negs	r1, r1
 8001490:	1b0c      	subs	r4, r1, r4
 8001492:	40e7      	lsrs	r7, r4
 8001494:	2b20      	cmp	r3, #32
 8001496:	d007      	beq.n	80014a8 <__aeabi_ddiv+0x5a4>
 8001498:	491a      	ldr	r1, [pc, #104]	; (8001504 <__aeabi_ddiv+0x600>)
 800149a:	9b00      	ldr	r3, [sp, #0]
 800149c:	468c      	mov	ip, r1
 800149e:	4463      	add	r3, ip
 80014a0:	0018      	movs	r0, r3
 80014a2:	465b      	mov	r3, fp
 80014a4:	4083      	lsls	r3, r0
 80014a6:	431a      	orrs	r2, r3
 80014a8:	1e50      	subs	r0, r2, #1
 80014aa:	4182      	sbcs	r2, r0
 80014ac:	433a      	orrs	r2, r7
 80014ae:	2707      	movs	r7, #7
 80014b0:	2300      	movs	r3, #0
 80014b2:	4017      	ands	r7, r2
 80014b4:	d009      	beq.n	80014ca <__aeabi_ddiv+0x5c6>
 80014b6:	210f      	movs	r1, #15
 80014b8:	2300      	movs	r3, #0
 80014ba:	4011      	ands	r1, r2
 80014bc:	0014      	movs	r4, r2
 80014be:	2904      	cmp	r1, #4
 80014c0:	d195      	bne.n	80013ee <__aeabi_ddiv+0x4ea>
 80014c2:	0022      	movs	r2, r4
 80014c4:	075f      	lsls	r7, r3, #29
 80014c6:	025b      	lsls	r3, r3, #9
 80014c8:	0b1b      	lsrs	r3, r3, #12
 80014ca:	08d2      	lsrs	r2, r2, #3
 80014cc:	4317      	orrs	r7, r2
 80014ce:	2200      	movs	r2, #0
 80014d0:	e5a6      	b.n	8001020 <__aeabi_ddiv+0x11c>
 80014d2:	2380      	movs	r3, #128	; 0x80
 80014d4:	4659      	mov	r1, fp
 80014d6:	031b      	lsls	r3, r3, #12
 80014d8:	430b      	orrs	r3, r1
 80014da:	031b      	lsls	r3, r3, #12
 80014dc:	0017      	movs	r7, r2
 80014de:	0b1b      	lsrs	r3, r3, #12
 80014e0:	4a06      	ldr	r2, [pc, #24]	; (80014fc <__aeabi_ddiv+0x5f8>)
 80014e2:	e59d      	b.n	8001020 <__aeabi_ddiv+0x11c>
 80014e4:	42bd      	cmp	r5, r7
 80014e6:	d8b2      	bhi.n	800144e <__aeabi_ddiv+0x54a>
 80014e8:	469b      	mov	fp, r3
 80014ea:	2400      	movs	r4, #0
 80014ec:	e6bf      	b.n	800126e <__aeabi_ddiv+0x36a>
 80014ee:	4580      	cmp	r8, r0
 80014f0:	d3b9      	bcc.n	8001466 <__aeabi_ddiv+0x562>
 80014f2:	001a      	movs	r2, r3
 80014f4:	e7c3      	b.n	800147e <__aeabi_ddiv+0x57a>
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	000003ff 	.word	0x000003ff
 80014fc:	000007ff 	.word	0x000007ff
 8001500:	0000041e 	.word	0x0000041e
 8001504:	0000043e 	.word	0x0000043e

08001508 <__aeabi_dmul>:
 8001508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800150a:	4657      	mov	r7, sl
 800150c:	46de      	mov	lr, fp
 800150e:	464e      	mov	r6, r9
 8001510:	4645      	mov	r5, r8
 8001512:	b5e0      	push	{r5, r6, r7, lr}
 8001514:	4683      	mov	fp, r0
 8001516:	0006      	movs	r6, r0
 8001518:	030f      	lsls	r7, r1, #12
 800151a:	0048      	lsls	r0, r1, #1
 800151c:	b087      	sub	sp, #28
 800151e:	4692      	mov	sl, r2
 8001520:	001d      	movs	r5, r3
 8001522:	0b3f      	lsrs	r7, r7, #12
 8001524:	0d40      	lsrs	r0, r0, #21
 8001526:	0fcc      	lsrs	r4, r1, #31
 8001528:	2800      	cmp	r0, #0
 800152a:	d100      	bne.n	800152e <__aeabi_dmul+0x26>
 800152c:	e06f      	b.n	800160e <__aeabi_dmul+0x106>
 800152e:	4bde      	ldr	r3, [pc, #888]	; (80018a8 <__aeabi_dmul+0x3a0>)
 8001530:	4298      	cmp	r0, r3
 8001532:	d038      	beq.n	80015a6 <__aeabi_dmul+0x9e>
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	00ff      	lsls	r7, r7, #3
 8001538:	041b      	lsls	r3, r3, #16
 800153a:	431f      	orrs	r7, r3
 800153c:	0f73      	lsrs	r3, r6, #29
 800153e:	433b      	orrs	r3, r7
 8001540:	9301      	str	r3, [sp, #4]
 8001542:	4bda      	ldr	r3, [pc, #872]	; (80018ac <__aeabi_dmul+0x3a4>)
 8001544:	2700      	movs	r7, #0
 8001546:	4699      	mov	r9, r3
 8001548:	2300      	movs	r3, #0
 800154a:	469b      	mov	fp, r3
 800154c:	00f6      	lsls	r6, r6, #3
 800154e:	4481      	add	r9, r0
 8001550:	032b      	lsls	r3, r5, #12
 8001552:	0069      	lsls	r1, r5, #1
 8001554:	0b1b      	lsrs	r3, r3, #12
 8001556:	4652      	mov	r2, sl
 8001558:	4698      	mov	r8, r3
 800155a:	0d49      	lsrs	r1, r1, #21
 800155c:	0fed      	lsrs	r5, r5, #31
 800155e:	2900      	cmp	r1, #0
 8001560:	d100      	bne.n	8001564 <__aeabi_dmul+0x5c>
 8001562:	e085      	b.n	8001670 <__aeabi_dmul+0x168>
 8001564:	4bd0      	ldr	r3, [pc, #832]	; (80018a8 <__aeabi_dmul+0x3a0>)
 8001566:	4299      	cmp	r1, r3
 8001568:	d100      	bne.n	800156c <__aeabi_dmul+0x64>
 800156a:	e073      	b.n	8001654 <__aeabi_dmul+0x14c>
 800156c:	4643      	mov	r3, r8
 800156e:	00da      	lsls	r2, r3, #3
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	041b      	lsls	r3, r3, #16
 8001574:	4313      	orrs	r3, r2
 8001576:	4652      	mov	r2, sl
 8001578:	48cc      	ldr	r0, [pc, #816]	; (80018ac <__aeabi_dmul+0x3a4>)
 800157a:	0f52      	lsrs	r2, r2, #29
 800157c:	4684      	mov	ip, r0
 800157e:	4313      	orrs	r3, r2
 8001580:	4652      	mov	r2, sl
 8001582:	2000      	movs	r0, #0
 8001584:	4461      	add	r1, ip
 8001586:	00d2      	lsls	r2, r2, #3
 8001588:	4489      	add	r9, r1
 800158a:	0021      	movs	r1, r4
 800158c:	4069      	eors	r1, r5
 800158e:	9100      	str	r1, [sp, #0]
 8001590:	468c      	mov	ip, r1
 8001592:	2101      	movs	r1, #1
 8001594:	4449      	add	r1, r9
 8001596:	468a      	mov	sl, r1
 8001598:	2f0f      	cmp	r7, #15
 800159a:	d900      	bls.n	800159e <__aeabi_dmul+0x96>
 800159c:	e090      	b.n	80016c0 <__aeabi_dmul+0x1b8>
 800159e:	49c4      	ldr	r1, [pc, #784]	; (80018b0 <__aeabi_dmul+0x3a8>)
 80015a0:	00bf      	lsls	r7, r7, #2
 80015a2:	59cf      	ldr	r7, [r1, r7]
 80015a4:	46bf      	mov	pc, r7
 80015a6:	465b      	mov	r3, fp
 80015a8:	433b      	orrs	r3, r7
 80015aa:	9301      	str	r3, [sp, #4]
 80015ac:	d000      	beq.n	80015b0 <__aeabi_dmul+0xa8>
 80015ae:	e16a      	b.n	8001886 <__aeabi_dmul+0x37e>
 80015b0:	2302      	movs	r3, #2
 80015b2:	2708      	movs	r7, #8
 80015b4:	2600      	movs	r6, #0
 80015b6:	4681      	mov	r9, r0
 80015b8:	469b      	mov	fp, r3
 80015ba:	e7c9      	b.n	8001550 <__aeabi_dmul+0x48>
 80015bc:	0032      	movs	r2, r6
 80015be:	4658      	mov	r0, fp
 80015c0:	9b01      	ldr	r3, [sp, #4]
 80015c2:	4661      	mov	r1, ip
 80015c4:	9100      	str	r1, [sp, #0]
 80015c6:	2802      	cmp	r0, #2
 80015c8:	d100      	bne.n	80015cc <__aeabi_dmul+0xc4>
 80015ca:	e075      	b.n	80016b8 <__aeabi_dmul+0x1b0>
 80015cc:	2803      	cmp	r0, #3
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dmul+0xca>
 80015d0:	e1fe      	b.n	80019d0 <__aeabi_dmul+0x4c8>
 80015d2:	2801      	cmp	r0, #1
 80015d4:	d000      	beq.n	80015d8 <__aeabi_dmul+0xd0>
 80015d6:	e12c      	b.n	8001832 <__aeabi_dmul+0x32a>
 80015d8:	2300      	movs	r3, #0
 80015da:	2700      	movs	r7, #0
 80015dc:	2600      	movs	r6, #0
 80015de:	2500      	movs	r5, #0
 80015e0:	033f      	lsls	r7, r7, #12
 80015e2:	0d2a      	lsrs	r2, r5, #20
 80015e4:	0b3f      	lsrs	r7, r7, #12
 80015e6:	48b3      	ldr	r0, [pc, #716]	; (80018b4 <__aeabi_dmul+0x3ac>)
 80015e8:	0512      	lsls	r2, r2, #20
 80015ea:	433a      	orrs	r2, r7
 80015ec:	4002      	ands	r2, r0
 80015ee:	051b      	lsls	r3, r3, #20
 80015f0:	4313      	orrs	r3, r2
 80015f2:	9a00      	ldr	r2, [sp, #0]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	07d1      	lsls	r1, r2, #31
 80015f8:	085b      	lsrs	r3, r3, #1
 80015fa:	430b      	orrs	r3, r1
 80015fc:	0030      	movs	r0, r6
 80015fe:	0019      	movs	r1, r3
 8001600:	b007      	add	sp, #28
 8001602:	bc3c      	pop	{r2, r3, r4, r5}
 8001604:	4690      	mov	r8, r2
 8001606:	4699      	mov	r9, r3
 8001608:	46a2      	mov	sl, r4
 800160a:	46ab      	mov	fp, r5
 800160c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800160e:	465b      	mov	r3, fp
 8001610:	433b      	orrs	r3, r7
 8001612:	9301      	str	r3, [sp, #4]
 8001614:	d100      	bne.n	8001618 <__aeabi_dmul+0x110>
 8001616:	e12f      	b.n	8001878 <__aeabi_dmul+0x370>
 8001618:	2f00      	cmp	r7, #0
 800161a:	d100      	bne.n	800161e <__aeabi_dmul+0x116>
 800161c:	e1a5      	b.n	800196a <__aeabi_dmul+0x462>
 800161e:	0038      	movs	r0, r7
 8001620:	f000 fad4 	bl	8001bcc <__clzsi2>
 8001624:	0003      	movs	r3, r0
 8001626:	3b0b      	subs	r3, #11
 8001628:	2b1c      	cmp	r3, #28
 800162a:	dd00      	ble.n	800162e <__aeabi_dmul+0x126>
 800162c:	e196      	b.n	800195c <__aeabi_dmul+0x454>
 800162e:	221d      	movs	r2, #29
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	465a      	mov	r2, fp
 8001634:	0001      	movs	r1, r0
 8001636:	40da      	lsrs	r2, r3
 8001638:	465e      	mov	r6, fp
 800163a:	3908      	subs	r1, #8
 800163c:	408f      	lsls	r7, r1
 800163e:	0013      	movs	r3, r2
 8001640:	408e      	lsls	r6, r1
 8001642:	433b      	orrs	r3, r7
 8001644:	9301      	str	r3, [sp, #4]
 8001646:	4b9c      	ldr	r3, [pc, #624]	; (80018b8 <__aeabi_dmul+0x3b0>)
 8001648:	2700      	movs	r7, #0
 800164a:	1a1b      	subs	r3, r3, r0
 800164c:	4699      	mov	r9, r3
 800164e:	2300      	movs	r3, #0
 8001650:	469b      	mov	fp, r3
 8001652:	e77d      	b.n	8001550 <__aeabi_dmul+0x48>
 8001654:	4641      	mov	r1, r8
 8001656:	4653      	mov	r3, sl
 8001658:	430b      	orrs	r3, r1
 800165a:	4993      	ldr	r1, [pc, #588]	; (80018a8 <__aeabi_dmul+0x3a0>)
 800165c:	468c      	mov	ip, r1
 800165e:	44e1      	add	r9, ip
 8001660:	2b00      	cmp	r3, #0
 8001662:	d000      	beq.n	8001666 <__aeabi_dmul+0x15e>
 8001664:	e11a      	b.n	800189c <__aeabi_dmul+0x394>
 8001666:	2202      	movs	r2, #2
 8001668:	2002      	movs	r0, #2
 800166a:	4317      	orrs	r7, r2
 800166c:	2200      	movs	r2, #0
 800166e:	e78c      	b.n	800158a <__aeabi_dmul+0x82>
 8001670:	4313      	orrs	r3, r2
 8001672:	d100      	bne.n	8001676 <__aeabi_dmul+0x16e>
 8001674:	e10d      	b.n	8001892 <__aeabi_dmul+0x38a>
 8001676:	4643      	mov	r3, r8
 8001678:	2b00      	cmp	r3, #0
 800167a:	d100      	bne.n	800167e <__aeabi_dmul+0x176>
 800167c:	e181      	b.n	8001982 <__aeabi_dmul+0x47a>
 800167e:	4640      	mov	r0, r8
 8001680:	f000 faa4 	bl	8001bcc <__clzsi2>
 8001684:	0002      	movs	r2, r0
 8001686:	3a0b      	subs	r2, #11
 8001688:	2a1c      	cmp	r2, #28
 800168a:	dd00      	ble.n	800168e <__aeabi_dmul+0x186>
 800168c:	e172      	b.n	8001974 <__aeabi_dmul+0x46c>
 800168e:	0001      	movs	r1, r0
 8001690:	4643      	mov	r3, r8
 8001692:	3908      	subs	r1, #8
 8001694:	408b      	lsls	r3, r1
 8001696:	4698      	mov	r8, r3
 8001698:	231d      	movs	r3, #29
 800169a:	1a9a      	subs	r2, r3, r2
 800169c:	4653      	mov	r3, sl
 800169e:	40d3      	lsrs	r3, r2
 80016a0:	001a      	movs	r2, r3
 80016a2:	4643      	mov	r3, r8
 80016a4:	4313      	orrs	r3, r2
 80016a6:	4652      	mov	r2, sl
 80016a8:	408a      	lsls	r2, r1
 80016aa:	4649      	mov	r1, r9
 80016ac:	1a08      	subs	r0, r1, r0
 80016ae:	4982      	ldr	r1, [pc, #520]	; (80018b8 <__aeabi_dmul+0x3b0>)
 80016b0:	4689      	mov	r9, r1
 80016b2:	4481      	add	r9, r0
 80016b4:	2000      	movs	r0, #0
 80016b6:	e768      	b.n	800158a <__aeabi_dmul+0x82>
 80016b8:	4b7b      	ldr	r3, [pc, #492]	; (80018a8 <__aeabi_dmul+0x3a0>)
 80016ba:	2700      	movs	r7, #0
 80016bc:	2600      	movs	r6, #0
 80016be:	e78e      	b.n	80015de <__aeabi_dmul+0xd6>
 80016c0:	0c14      	lsrs	r4, r2, #16
 80016c2:	0412      	lsls	r2, r2, #16
 80016c4:	0c12      	lsrs	r2, r2, #16
 80016c6:	0011      	movs	r1, r2
 80016c8:	0c37      	lsrs	r7, r6, #16
 80016ca:	0436      	lsls	r6, r6, #16
 80016cc:	0c35      	lsrs	r5, r6, #16
 80016ce:	4379      	muls	r1, r7
 80016d0:	0028      	movs	r0, r5
 80016d2:	468c      	mov	ip, r1
 80016d4:	002e      	movs	r6, r5
 80016d6:	4360      	muls	r0, r4
 80016d8:	4460      	add	r0, ip
 80016da:	4683      	mov	fp, r0
 80016dc:	4356      	muls	r6, r2
 80016de:	0021      	movs	r1, r4
 80016e0:	0c30      	lsrs	r0, r6, #16
 80016e2:	4680      	mov	r8, r0
 80016e4:	4658      	mov	r0, fp
 80016e6:	4379      	muls	r1, r7
 80016e8:	4440      	add	r0, r8
 80016ea:	9102      	str	r1, [sp, #8]
 80016ec:	4584      	cmp	ip, r0
 80016ee:	d906      	bls.n	80016fe <__aeabi_dmul+0x1f6>
 80016f0:	4688      	mov	r8, r1
 80016f2:	2180      	movs	r1, #128	; 0x80
 80016f4:	0249      	lsls	r1, r1, #9
 80016f6:	468c      	mov	ip, r1
 80016f8:	44e0      	add	r8, ip
 80016fa:	4641      	mov	r1, r8
 80016fc:	9102      	str	r1, [sp, #8]
 80016fe:	0436      	lsls	r6, r6, #16
 8001700:	0c01      	lsrs	r1, r0, #16
 8001702:	0c36      	lsrs	r6, r6, #16
 8001704:	0400      	lsls	r0, r0, #16
 8001706:	468b      	mov	fp, r1
 8001708:	1981      	adds	r1, r0, r6
 800170a:	0c1e      	lsrs	r6, r3, #16
 800170c:	041b      	lsls	r3, r3, #16
 800170e:	0c1b      	lsrs	r3, r3, #16
 8001710:	9103      	str	r1, [sp, #12]
 8001712:	0019      	movs	r1, r3
 8001714:	4379      	muls	r1, r7
 8001716:	468c      	mov	ip, r1
 8001718:	0028      	movs	r0, r5
 800171a:	4375      	muls	r5, r6
 800171c:	4465      	add	r5, ip
 800171e:	46a8      	mov	r8, r5
 8001720:	4358      	muls	r0, r3
 8001722:	0c05      	lsrs	r5, r0, #16
 8001724:	4445      	add	r5, r8
 8001726:	4377      	muls	r7, r6
 8001728:	42a9      	cmp	r1, r5
 800172a:	d903      	bls.n	8001734 <__aeabi_dmul+0x22c>
 800172c:	2180      	movs	r1, #128	; 0x80
 800172e:	0249      	lsls	r1, r1, #9
 8001730:	468c      	mov	ip, r1
 8001732:	4467      	add	r7, ip
 8001734:	0c29      	lsrs	r1, r5, #16
 8001736:	468c      	mov	ip, r1
 8001738:	0039      	movs	r1, r7
 800173a:	0400      	lsls	r0, r0, #16
 800173c:	0c00      	lsrs	r0, r0, #16
 800173e:	042d      	lsls	r5, r5, #16
 8001740:	182d      	adds	r5, r5, r0
 8001742:	4461      	add	r1, ip
 8001744:	44ab      	add	fp, r5
 8001746:	9105      	str	r1, [sp, #20]
 8001748:	4659      	mov	r1, fp
 800174a:	9104      	str	r1, [sp, #16]
 800174c:	9901      	ldr	r1, [sp, #4]
 800174e:	040f      	lsls	r7, r1, #16
 8001750:	0c3f      	lsrs	r7, r7, #16
 8001752:	0c08      	lsrs	r0, r1, #16
 8001754:	0039      	movs	r1, r7
 8001756:	4351      	muls	r1, r2
 8001758:	4342      	muls	r2, r0
 800175a:	4690      	mov	r8, r2
 800175c:	0002      	movs	r2, r0
 800175e:	468c      	mov	ip, r1
 8001760:	0c09      	lsrs	r1, r1, #16
 8001762:	468b      	mov	fp, r1
 8001764:	4362      	muls	r2, r4
 8001766:	437c      	muls	r4, r7
 8001768:	4444      	add	r4, r8
 800176a:	445c      	add	r4, fp
 800176c:	45a0      	cmp	r8, r4
 800176e:	d903      	bls.n	8001778 <__aeabi_dmul+0x270>
 8001770:	2180      	movs	r1, #128	; 0x80
 8001772:	0249      	lsls	r1, r1, #9
 8001774:	4688      	mov	r8, r1
 8001776:	4442      	add	r2, r8
 8001778:	0c21      	lsrs	r1, r4, #16
 800177a:	4688      	mov	r8, r1
 800177c:	4661      	mov	r1, ip
 800177e:	0409      	lsls	r1, r1, #16
 8001780:	0c09      	lsrs	r1, r1, #16
 8001782:	468c      	mov	ip, r1
 8001784:	0039      	movs	r1, r7
 8001786:	4359      	muls	r1, r3
 8001788:	4343      	muls	r3, r0
 800178a:	4370      	muls	r0, r6
 800178c:	437e      	muls	r6, r7
 800178e:	0c0f      	lsrs	r7, r1, #16
 8001790:	18f6      	adds	r6, r6, r3
 8001792:	0424      	lsls	r4, r4, #16
 8001794:	19be      	adds	r6, r7, r6
 8001796:	4464      	add	r4, ip
 8001798:	4442      	add	r2, r8
 800179a:	468c      	mov	ip, r1
 800179c:	42b3      	cmp	r3, r6
 800179e:	d903      	bls.n	80017a8 <__aeabi_dmul+0x2a0>
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	025b      	lsls	r3, r3, #9
 80017a4:	4698      	mov	r8, r3
 80017a6:	4440      	add	r0, r8
 80017a8:	9b02      	ldr	r3, [sp, #8]
 80017aa:	4661      	mov	r1, ip
 80017ac:	4698      	mov	r8, r3
 80017ae:	9b04      	ldr	r3, [sp, #16]
 80017b0:	0437      	lsls	r7, r6, #16
 80017b2:	4443      	add	r3, r8
 80017b4:	469b      	mov	fp, r3
 80017b6:	45ab      	cmp	fp, r5
 80017b8:	41ad      	sbcs	r5, r5
 80017ba:	426b      	negs	r3, r5
 80017bc:	040d      	lsls	r5, r1, #16
 80017be:	9905      	ldr	r1, [sp, #20]
 80017c0:	0c2d      	lsrs	r5, r5, #16
 80017c2:	468c      	mov	ip, r1
 80017c4:	197f      	adds	r7, r7, r5
 80017c6:	4467      	add	r7, ip
 80017c8:	18fd      	adds	r5, r7, r3
 80017ca:	46a8      	mov	r8, r5
 80017cc:	465d      	mov	r5, fp
 80017ce:	192d      	adds	r5, r5, r4
 80017d0:	42a5      	cmp	r5, r4
 80017d2:	41a4      	sbcs	r4, r4
 80017d4:	4693      	mov	fp, r2
 80017d6:	4264      	negs	r4, r4
 80017d8:	46a4      	mov	ip, r4
 80017da:	44c3      	add	fp, r8
 80017dc:	44dc      	add	ip, fp
 80017de:	428f      	cmp	r7, r1
 80017e0:	41bf      	sbcs	r7, r7
 80017e2:	4598      	cmp	r8, r3
 80017e4:	419b      	sbcs	r3, r3
 80017e6:	4593      	cmp	fp, r2
 80017e8:	4192      	sbcs	r2, r2
 80017ea:	45a4      	cmp	ip, r4
 80017ec:	41a4      	sbcs	r4, r4
 80017ee:	425b      	negs	r3, r3
 80017f0:	427f      	negs	r7, r7
 80017f2:	431f      	orrs	r7, r3
 80017f4:	0c36      	lsrs	r6, r6, #16
 80017f6:	4252      	negs	r2, r2
 80017f8:	4264      	negs	r4, r4
 80017fa:	19bf      	adds	r7, r7, r6
 80017fc:	4322      	orrs	r2, r4
 80017fe:	18bf      	adds	r7, r7, r2
 8001800:	4662      	mov	r2, ip
 8001802:	1838      	adds	r0, r7, r0
 8001804:	0243      	lsls	r3, r0, #9
 8001806:	0dd2      	lsrs	r2, r2, #23
 8001808:	9903      	ldr	r1, [sp, #12]
 800180a:	4313      	orrs	r3, r2
 800180c:	026a      	lsls	r2, r5, #9
 800180e:	430a      	orrs	r2, r1
 8001810:	1e50      	subs	r0, r2, #1
 8001812:	4182      	sbcs	r2, r0
 8001814:	4661      	mov	r1, ip
 8001816:	0ded      	lsrs	r5, r5, #23
 8001818:	432a      	orrs	r2, r5
 800181a:	024e      	lsls	r6, r1, #9
 800181c:	4332      	orrs	r2, r6
 800181e:	01d9      	lsls	r1, r3, #7
 8001820:	d400      	bmi.n	8001824 <__aeabi_dmul+0x31c>
 8001822:	e0b3      	b.n	800198c <__aeabi_dmul+0x484>
 8001824:	2601      	movs	r6, #1
 8001826:	0850      	lsrs	r0, r2, #1
 8001828:	4032      	ands	r2, r6
 800182a:	4302      	orrs	r2, r0
 800182c:	07de      	lsls	r6, r3, #31
 800182e:	4332      	orrs	r2, r6
 8001830:	085b      	lsrs	r3, r3, #1
 8001832:	4c22      	ldr	r4, [pc, #136]	; (80018bc <__aeabi_dmul+0x3b4>)
 8001834:	4454      	add	r4, sl
 8001836:	2c00      	cmp	r4, #0
 8001838:	dd62      	ble.n	8001900 <__aeabi_dmul+0x3f8>
 800183a:	0751      	lsls	r1, r2, #29
 800183c:	d009      	beq.n	8001852 <__aeabi_dmul+0x34a>
 800183e:	200f      	movs	r0, #15
 8001840:	4010      	ands	r0, r2
 8001842:	2804      	cmp	r0, #4
 8001844:	d005      	beq.n	8001852 <__aeabi_dmul+0x34a>
 8001846:	1d10      	adds	r0, r2, #4
 8001848:	4290      	cmp	r0, r2
 800184a:	4192      	sbcs	r2, r2
 800184c:	4252      	negs	r2, r2
 800184e:	189b      	adds	r3, r3, r2
 8001850:	0002      	movs	r2, r0
 8001852:	01d9      	lsls	r1, r3, #7
 8001854:	d504      	bpl.n	8001860 <__aeabi_dmul+0x358>
 8001856:	2480      	movs	r4, #128	; 0x80
 8001858:	4819      	ldr	r0, [pc, #100]	; (80018c0 <__aeabi_dmul+0x3b8>)
 800185a:	00e4      	lsls	r4, r4, #3
 800185c:	4003      	ands	r3, r0
 800185e:	4454      	add	r4, sl
 8001860:	4818      	ldr	r0, [pc, #96]	; (80018c4 <__aeabi_dmul+0x3bc>)
 8001862:	4284      	cmp	r4, r0
 8001864:	dd00      	ble.n	8001868 <__aeabi_dmul+0x360>
 8001866:	e727      	b.n	80016b8 <__aeabi_dmul+0x1b0>
 8001868:	075e      	lsls	r6, r3, #29
 800186a:	025b      	lsls	r3, r3, #9
 800186c:	08d2      	lsrs	r2, r2, #3
 800186e:	0b1f      	lsrs	r7, r3, #12
 8001870:	0563      	lsls	r3, r4, #21
 8001872:	4316      	orrs	r6, r2
 8001874:	0d5b      	lsrs	r3, r3, #21
 8001876:	e6b2      	b.n	80015de <__aeabi_dmul+0xd6>
 8001878:	2300      	movs	r3, #0
 800187a:	4699      	mov	r9, r3
 800187c:	3301      	adds	r3, #1
 800187e:	2704      	movs	r7, #4
 8001880:	2600      	movs	r6, #0
 8001882:	469b      	mov	fp, r3
 8001884:	e664      	b.n	8001550 <__aeabi_dmul+0x48>
 8001886:	2303      	movs	r3, #3
 8001888:	9701      	str	r7, [sp, #4]
 800188a:	4681      	mov	r9, r0
 800188c:	270c      	movs	r7, #12
 800188e:	469b      	mov	fp, r3
 8001890:	e65e      	b.n	8001550 <__aeabi_dmul+0x48>
 8001892:	2201      	movs	r2, #1
 8001894:	2001      	movs	r0, #1
 8001896:	4317      	orrs	r7, r2
 8001898:	2200      	movs	r2, #0
 800189a:	e676      	b.n	800158a <__aeabi_dmul+0x82>
 800189c:	2303      	movs	r3, #3
 800189e:	2003      	movs	r0, #3
 80018a0:	431f      	orrs	r7, r3
 80018a2:	4643      	mov	r3, r8
 80018a4:	e671      	b.n	800158a <__aeabi_dmul+0x82>
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	000007ff 	.word	0x000007ff
 80018ac:	fffffc01 	.word	0xfffffc01
 80018b0:	0800bd14 	.word	0x0800bd14
 80018b4:	800fffff 	.word	0x800fffff
 80018b8:	fffffc0d 	.word	0xfffffc0d
 80018bc:	000003ff 	.word	0x000003ff
 80018c0:	feffffff 	.word	0xfeffffff
 80018c4:	000007fe 	.word	0x000007fe
 80018c8:	2300      	movs	r3, #0
 80018ca:	2780      	movs	r7, #128	; 0x80
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	033f      	lsls	r7, r7, #12
 80018d0:	2600      	movs	r6, #0
 80018d2:	4b43      	ldr	r3, [pc, #268]	; (80019e0 <__aeabi_dmul+0x4d8>)
 80018d4:	e683      	b.n	80015de <__aeabi_dmul+0xd6>
 80018d6:	9b01      	ldr	r3, [sp, #4]
 80018d8:	0032      	movs	r2, r6
 80018da:	46a4      	mov	ip, r4
 80018dc:	4658      	mov	r0, fp
 80018de:	e670      	b.n	80015c2 <__aeabi_dmul+0xba>
 80018e0:	46ac      	mov	ip, r5
 80018e2:	e66e      	b.n	80015c2 <__aeabi_dmul+0xba>
 80018e4:	2780      	movs	r7, #128	; 0x80
 80018e6:	9901      	ldr	r1, [sp, #4]
 80018e8:	033f      	lsls	r7, r7, #12
 80018ea:	4239      	tst	r1, r7
 80018ec:	d02d      	beq.n	800194a <__aeabi_dmul+0x442>
 80018ee:	423b      	tst	r3, r7
 80018f0:	d12b      	bne.n	800194a <__aeabi_dmul+0x442>
 80018f2:	431f      	orrs	r7, r3
 80018f4:	033f      	lsls	r7, r7, #12
 80018f6:	0b3f      	lsrs	r7, r7, #12
 80018f8:	9500      	str	r5, [sp, #0]
 80018fa:	0016      	movs	r6, r2
 80018fc:	4b38      	ldr	r3, [pc, #224]	; (80019e0 <__aeabi_dmul+0x4d8>)
 80018fe:	e66e      	b.n	80015de <__aeabi_dmul+0xd6>
 8001900:	2501      	movs	r5, #1
 8001902:	1b2d      	subs	r5, r5, r4
 8001904:	2d38      	cmp	r5, #56	; 0x38
 8001906:	dd00      	ble.n	800190a <__aeabi_dmul+0x402>
 8001908:	e666      	b.n	80015d8 <__aeabi_dmul+0xd0>
 800190a:	2d1f      	cmp	r5, #31
 800190c:	dc40      	bgt.n	8001990 <__aeabi_dmul+0x488>
 800190e:	4835      	ldr	r0, [pc, #212]	; (80019e4 <__aeabi_dmul+0x4dc>)
 8001910:	001c      	movs	r4, r3
 8001912:	4450      	add	r0, sl
 8001914:	0016      	movs	r6, r2
 8001916:	4082      	lsls	r2, r0
 8001918:	4084      	lsls	r4, r0
 800191a:	40ee      	lsrs	r6, r5
 800191c:	1e50      	subs	r0, r2, #1
 800191e:	4182      	sbcs	r2, r0
 8001920:	4334      	orrs	r4, r6
 8001922:	4314      	orrs	r4, r2
 8001924:	40eb      	lsrs	r3, r5
 8001926:	0762      	lsls	r2, r4, #29
 8001928:	d009      	beq.n	800193e <__aeabi_dmul+0x436>
 800192a:	220f      	movs	r2, #15
 800192c:	4022      	ands	r2, r4
 800192e:	2a04      	cmp	r2, #4
 8001930:	d005      	beq.n	800193e <__aeabi_dmul+0x436>
 8001932:	0022      	movs	r2, r4
 8001934:	1d14      	adds	r4, r2, #4
 8001936:	4294      	cmp	r4, r2
 8001938:	4180      	sbcs	r0, r0
 800193a:	4240      	negs	r0, r0
 800193c:	181b      	adds	r3, r3, r0
 800193e:	021a      	lsls	r2, r3, #8
 8001940:	d53e      	bpl.n	80019c0 <__aeabi_dmul+0x4b8>
 8001942:	2301      	movs	r3, #1
 8001944:	2700      	movs	r7, #0
 8001946:	2600      	movs	r6, #0
 8001948:	e649      	b.n	80015de <__aeabi_dmul+0xd6>
 800194a:	2780      	movs	r7, #128	; 0x80
 800194c:	9b01      	ldr	r3, [sp, #4]
 800194e:	033f      	lsls	r7, r7, #12
 8001950:	431f      	orrs	r7, r3
 8001952:	033f      	lsls	r7, r7, #12
 8001954:	0b3f      	lsrs	r7, r7, #12
 8001956:	9400      	str	r4, [sp, #0]
 8001958:	4b21      	ldr	r3, [pc, #132]	; (80019e0 <__aeabi_dmul+0x4d8>)
 800195a:	e640      	b.n	80015de <__aeabi_dmul+0xd6>
 800195c:	0003      	movs	r3, r0
 800195e:	465a      	mov	r2, fp
 8001960:	3b28      	subs	r3, #40	; 0x28
 8001962:	409a      	lsls	r2, r3
 8001964:	2600      	movs	r6, #0
 8001966:	9201      	str	r2, [sp, #4]
 8001968:	e66d      	b.n	8001646 <__aeabi_dmul+0x13e>
 800196a:	4658      	mov	r0, fp
 800196c:	f000 f92e 	bl	8001bcc <__clzsi2>
 8001970:	3020      	adds	r0, #32
 8001972:	e657      	b.n	8001624 <__aeabi_dmul+0x11c>
 8001974:	0003      	movs	r3, r0
 8001976:	4652      	mov	r2, sl
 8001978:	3b28      	subs	r3, #40	; 0x28
 800197a:	409a      	lsls	r2, r3
 800197c:	0013      	movs	r3, r2
 800197e:	2200      	movs	r2, #0
 8001980:	e693      	b.n	80016aa <__aeabi_dmul+0x1a2>
 8001982:	4650      	mov	r0, sl
 8001984:	f000 f922 	bl	8001bcc <__clzsi2>
 8001988:	3020      	adds	r0, #32
 800198a:	e67b      	b.n	8001684 <__aeabi_dmul+0x17c>
 800198c:	46ca      	mov	sl, r9
 800198e:	e750      	b.n	8001832 <__aeabi_dmul+0x32a>
 8001990:	201f      	movs	r0, #31
 8001992:	001e      	movs	r6, r3
 8001994:	4240      	negs	r0, r0
 8001996:	1b04      	subs	r4, r0, r4
 8001998:	40e6      	lsrs	r6, r4
 800199a:	2d20      	cmp	r5, #32
 800199c:	d003      	beq.n	80019a6 <__aeabi_dmul+0x49e>
 800199e:	4c12      	ldr	r4, [pc, #72]	; (80019e8 <__aeabi_dmul+0x4e0>)
 80019a0:	4454      	add	r4, sl
 80019a2:	40a3      	lsls	r3, r4
 80019a4:	431a      	orrs	r2, r3
 80019a6:	1e50      	subs	r0, r2, #1
 80019a8:	4182      	sbcs	r2, r0
 80019aa:	4332      	orrs	r2, r6
 80019ac:	2607      	movs	r6, #7
 80019ae:	2700      	movs	r7, #0
 80019b0:	4016      	ands	r6, r2
 80019b2:	d009      	beq.n	80019c8 <__aeabi_dmul+0x4c0>
 80019b4:	200f      	movs	r0, #15
 80019b6:	2300      	movs	r3, #0
 80019b8:	4010      	ands	r0, r2
 80019ba:	0014      	movs	r4, r2
 80019bc:	2804      	cmp	r0, #4
 80019be:	d1b9      	bne.n	8001934 <__aeabi_dmul+0x42c>
 80019c0:	0022      	movs	r2, r4
 80019c2:	075e      	lsls	r6, r3, #29
 80019c4:	025b      	lsls	r3, r3, #9
 80019c6:	0b1f      	lsrs	r7, r3, #12
 80019c8:	08d2      	lsrs	r2, r2, #3
 80019ca:	4316      	orrs	r6, r2
 80019cc:	2300      	movs	r3, #0
 80019ce:	e606      	b.n	80015de <__aeabi_dmul+0xd6>
 80019d0:	2780      	movs	r7, #128	; 0x80
 80019d2:	033f      	lsls	r7, r7, #12
 80019d4:	431f      	orrs	r7, r3
 80019d6:	033f      	lsls	r7, r7, #12
 80019d8:	0b3f      	lsrs	r7, r7, #12
 80019da:	0016      	movs	r6, r2
 80019dc:	4b00      	ldr	r3, [pc, #0]	; (80019e0 <__aeabi_dmul+0x4d8>)
 80019de:	e5fe      	b.n	80015de <__aeabi_dmul+0xd6>
 80019e0:	000007ff 	.word	0x000007ff
 80019e4:	0000041e 	.word	0x0000041e
 80019e8:	0000043e 	.word	0x0000043e

080019ec <__aeabi_i2d>:
 80019ec:	b570      	push	{r4, r5, r6, lr}
 80019ee:	2800      	cmp	r0, #0
 80019f0:	d02d      	beq.n	8001a4e <__aeabi_i2d+0x62>
 80019f2:	17c3      	asrs	r3, r0, #31
 80019f4:	18c5      	adds	r5, r0, r3
 80019f6:	405d      	eors	r5, r3
 80019f8:	0fc4      	lsrs	r4, r0, #31
 80019fa:	0028      	movs	r0, r5
 80019fc:	f000 f8e6 	bl	8001bcc <__clzsi2>
 8001a00:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <__aeabi_i2d+0x6c>)
 8001a02:	1a1b      	subs	r3, r3, r0
 8001a04:	055b      	lsls	r3, r3, #21
 8001a06:	0d5b      	lsrs	r3, r3, #21
 8001a08:	280a      	cmp	r0, #10
 8001a0a:	dd15      	ble.n	8001a38 <__aeabi_i2d+0x4c>
 8001a0c:	380b      	subs	r0, #11
 8001a0e:	4085      	lsls	r5, r0
 8001a10:	2200      	movs	r2, #0
 8001a12:	032d      	lsls	r5, r5, #12
 8001a14:	0b2d      	lsrs	r5, r5, #12
 8001a16:	2100      	movs	r1, #0
 8001a18:	0010      	movs	r0, r2
 8001a1a:	032d      	lsls	r5, r5, #12
 8001a1c:	0d0a      	lsrs	r2, r1, #20
 8001a1e:	0b2d      	lsrs	r5, r5, #12
 8001a20:	0512      	lsls	r2, r2, #20
 8001a22:	432a      	orrs	r2, r5
 8001a24:	4d0d      	ldr	r5, [pc, #52]	; (8001a5c <__aeabi_i2d+0x70>)
 8001a26:	051b      	lsls	r3, r3, #20
 8001a28:	402a      	ands	r2, r5
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	07e4      	lsls	r4, r4, #31
 8001a30:	085b      	lsrs	r3, r3, #1
 8001a32:	4323      	orrs	r3, r4
 8001a34:	0019      	movs	r1, r3
 8001a36:	bd70      	pop	{r4, r5, r6, pc}
 8001a38:	0002      	movs	r2, r0
 8001a3a:	0029      	movs	r1, r5
 8001a3c:	3215      	adds	r2, #21
 8001a3e:	4091      	lsls	r1, r2
 8001a40:	000a      	movs	r2, r1
 8001a42:	210b      	movs	r1, #11
 8001a44:	1a08      	subs	r0, r1, r0
 8001a46:	40c5      	lsrs	r5, r0
 8001a48:	032d      	lsls	r5, r5, #12
 8001a4a:	0b2d      	lsrs	r5, r5, #12
 8001a4c:	e7e3      	b.n	8001a16 <__aeabi_i2d+0x2a>
 8001a4e:	2400      	movs	r4, #0
 8001a50:	2300      	movs	r3, #0
 8001a52:	2500      	movs	r5, #0
 8001a54:	2200      	movs	r2, #0
 8001a56:	e7de      	b.n	8001a16 <__aeabi_i2d+0x2a>
 8001a58:	0000041e 	.word	0x0000041e
 8001a5c:	800fffff 	.word	0x800fffff

08001a60 <__aeabi_ui2d>:
 8001a60:	b510      	push	{r4, lr}
 8001a62:	1e04      	subs	r4, r0, #0
 8001a64:	d025      	beq.n	8001ab2 <__aeabi_ui2d+0x52>
 8001a66:	f000 f8b1 	bl	8001bcc <__clzsi2>
 8001a6a:	4b14      	ldr	r3, [pc, #80]	; (8001abc <__aeabi_ui2d+0x5c>)
 8001a6c:	1a1b      	subs	r3, r3, r0
 8001a6e:	055b      	lsls	r3, r3, #21
 8001a70:	0d5b      	lsrs	r3, r3, #21
 8001a72:	280a      	cmp	r0, #10
 8001a74:	dd12      	ble.n	8001a9c <__aeabi_ui2d+0x3c>
 8001a76:	380b      	subs	r0, #11
 8001a78:	4084      	lsls	r4, r0
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	0324      	lsls	r4, r4, #12
 8001a7e:	0b24      	lsrs	r4, r4, #12
 8001a80:	2100      	movs	r1, #0
 8001a82:	0010      	movs	r0, r2
 8001a84:	0324      	lsls	r4, r4, #12
 8001a86:	0d0a      	lsrs	r2, r1, #20
 8001a88:	0b24      	lsrs	r4, r4, #12
 8001a8a:	0512      	lsls	r2, r2, #20
 8001a8c:	4322      	orrs	r2, r4
 8001a8e:	4c0c      	ldr	r4, [pc, #48]	; (8001ac0 <__aeabi_ui2d+0x60>)
 8001a90:	051b      	lsls	r3, r3, #20
 8001a92:	4022      	ands	r2, r4
 8001a94:	4313      	orrs	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	0859      	lsrs	r1, r3, #1
 8001a9a:	bd10      	pop	{r4, pc}
 8001a9c:	0002      	movs	r2, r0
 8001a9e:	0021      	movs	r1, r4
 8001aa0:	3215      	adds	r2, #21
 8001aa2:	4091      	lsls	r1, r2
 8001aa4:	000a      	movs	r2, r1
 8001aa6:	210b      	movs	r1, #11
 8001aa8:	1a08      	subs	r0, r1, r0
 8001aaa:	40c4      	lsrs	r4, r0
 8001aac:	0324      	lsls	r4, r4, #12
 8001aae:	0b24      	lsrs	r4, r4, #12
 8001ab0:	e7e6      	b.n	8001a80 <__aeabi_ui2d+0x20>
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	2400      	movs	r4, #0
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	e7e2      	b.n	8001a80 <__aeabi_ui2d+0x20>
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	0000041e 	.word	0x0000041e
 8001ac0:	800fffff 	.word	0x800fffff

08001ac4 <__aeabi_d2f>:
 8001ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ac6:	004c      	lsls	r4, r1, #1
 8001ac8:	0d64      	lsrs	r4, r4, #21
 8001aca:	030b      	lsls	r3, r1, #12
 8001acc:	1c62      	adds	r2, r4, #1
 8001ace:	0a5b      	lsrs	r3, r3, #9
 8001ad0:	0f46      	lsrs	r6, r0, #29
 8001ad2:	0552      	lsls	r2, r2, #21
 8001ad4:	0fc9      	lsrs	r1, r1, #31
 8001ad6:	431e      	orrs	r6, r3
 8001ad8:	00c5      	lsls	r5, r0, #3
 8001ada:	0d52      	lsrs	r2, r2, #21
 8001adc:	2a01      	cmp	r2, #1
 8001ade:	dd29      	ble.n	8001b34 <__aeabi_d2f+0x70>
 8001ae0:	4b37      	ldr	r3, [pc, #220]	; (8001bc0 <__aeabi_d2f+0xfc>)
 8001ae2:	18e7      	adds	r7, r4, r3
 8001ae4:	2ffe      	cmp	r7, #254	; 0xfe
 8001ae6:	dc1c      	bgt.n	8001b22 <__aeabi_d2f+0x5e>
 8001ae8:	2f00      	cmp	r7, #0
 8001aea:	dd3b      	ble.n	8001b64 <__aeabi_d2f+0xa0>
 8001aec:	0180      	lsls	r0, r0, #6
 8001aee:	1e43      	subs	r3, r0, #1
 8001af0:	4198      	sbcs	r0, r3
 8001af2:	2207      	movs	r2, #7
 8001af4:	00f3      	lsls	r3, r6, #3
 8001af6:	0f6d      	lsrs	r5, r5, #29
 8001af8:	4303      	orrs	r3, r0
 8001afa:	432b      	orrs	r3, r5
 8001afc:	401a      	ands	r2, r3
 8001afe:	2a00      	cmp	r2, #0
 8001b00:	d004      	beq.n	8001b0c <__aeabi_d2f+0x48>
 8001b02:	220f      	movs	r2, #15
 8001b04:	401a      	ands	r2, r3
 8001b06:	2a04      	cmp	r2, #4
 8001b08:	d000      	beq.n	8001b0c <__aeabi_d2f+0x48>
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	2280      	movs	r2, #128	; 0x80
 8001b0e:	04d2      	lsls	r2, r2, #19
 8001b10:	401a      	ands	r2, r3
 8001b12:	d024      	beq.n	8001b5e <__aeabi_d2f+0x9a>
 8001b14:	3701      	adds	r7, #1
 8001b16:	b2fa      	uxtb	r2, r7
 8001b18:	2fff      	cmp	r7, #255	; 0xff
 8001b1a:	d002      	beq.n	8001b22 <__aeabi_d2f+0x5e>
 8001b1c:	019b      	lsls	r3, r3, #6
 8001b1e:	0a58      	lsrs	r0, r3, #9
 8001b20:	e001      	b.n	8001b26 <__aeabi_d2f+0x62>
 8001b22:	22ff      	movs	r2, #255	; 0xff
 8001b24:	2000      	movs	r0, #0
 8001b26:	0240      	lsls	r0, r0, #9
 8001b28:	05d2      	lsls	r2, r2, #23
 8001b2a:	0a40      	lsrs	r0, r0, #9
 8001b2c:	07c9      	lsls	r1, r1, #31
 8001b2e:	4310      	orrs	r0, r2
 8001b30:	4308      	orrs	r0, r1
 8001b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b34:	4335      	orrs	r5, r6
 8001b36:	2c00      	cmp	r4, #0
 8001b38:	d104      	bne.n	8001b44 <__aeabi_d2f+0x80>
 8001b3a:	2d00      	cmp	r5, #0
 8001b3c:	d10a      	bne.n	8001b54 <__aeabi_d2f+0x90>
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2000      	movs	r0, #0
 8001b42:	e7f0      	b.n	8001b26 <__aeabi_d2f+0x62>
 8001b44:	2d00      	cmp	r5, #0
 8001b46:	d0ec      	beq.n	8001b22 <__aeabi_d2f+0x5e>
 8001b48:	2080      	movs	r0, #128	; 0x80
 8001b4a:	03c0      	lsls	r0, r0, #15
 8001b4c:	4330      	orrs	r0, r6
 8001b4e:	22ff      	movs	r2, #255	; 0xff
 8001b50:	e7e9      	b.n	8001b26 <__aeabi_d2f+0x62>
 8001b52:	2400      	movs	r4, #0
 8001b54:	2300      	movs	r3, #0
 8001b56:	025b      	lsls	r3, r3, #9
 8001b58:	0a58      	lsrs	r0, r3, #9
 8001b5a:	b2e2      	uxtb	r2, r4
 8001b5c:	e7e3      	b.n	8001b26 <__aeabi_d2f+0x62>
 8001b5e:	08db      	lsrs	r3, r3, #3
 8001b60:	003c      	movs	r4, r7
 8001b62:	e7f8      	b.n	8001b56 <__aeabi_d2f+0x92>
 8001b64:	003b      	movs	r3, r7
 8001b66:	3317      	adds	r3, #23
 8001b68:	dbf3      	blt.n	8001b52 <__aeabi_d2f+0x8e>
 8001b6a:	2380      	movs	r3, #128	; 0x80
 8001b6c:	041b      	lsls	r3, r3, #16
 8001b6e:	4333      	orrs	r3, r6
 8001b70:	261e      	movs	r6, #30
 8001b72:	1bf6      	subs	r6, r6, r7
 8001b74:	2e1f      	cmp	r6, #31
 8001b76:	dd14      	ble.n	8001ba2 <__aeabi_d2f+0xde>
 8001b78:	2202      	movs	r2, #2
 8001b7a:	4252      	negs	r2, r2
 8001b7c:	1bd7      	subs	r7, r2, r7
 8001b7e:	001a      	movs	r2, r3
 8001b80:	40fa      	lsrs	r2, r7
 8001b82:	0017      	movs	r7, r2
 8001b84:	2e20      	cmp	r6, #32
 8001b86:	d004      	beq.n	8001b92 <__aeabi_d2f+0xce>
 8001b88:	4a0e      	ldr	r2, [pc, #56]	; (8001bc4 <__aeabi_d2f+0x100>)
 8001b8a:	4694      	mov	ip, r2
 8001b8c:	4464      	add	r4, ip
 8001b8e:	40a3      	lsls	r3, r4
 8001b90:	431d      	orrs	r5, r3
 8001b92:	002b      	movs	r3, r5
 8001b94:	1e5d      	subs	r5, r3, #1
 8001b96:	41ab      	sbcs	r3, r5
 8001b98:	2207      	movs	r2, #7
 8001b9a:	433b      	orrs	r3, r7
 8001b9c:	401a      	ands	r2, r3
 8001b9e:	2700      	movs	r7, #0
 8001ba0:	e7ad      	b.n	8001afe <__aeabi_d2f+0x3a>
 8001ba2:	4a09      	ldr	r2, [pc, #36]	; (8001bc8 <__aeabi_d2f+0x104>)
 8001ba4:	0028      	movs	r0, r5
 8001ba6:	18a2      	adds	r2, r4, r2
 8001ba8:	4095      	lsls	r5, r2
 8001baa:	4093      	lsls	r3, r2
 8001bac:	1e6c      	subs	r4, r5, #1
 8001bae:	41a5      	sbcs	r5, r4
 8001bb0:	40f0      	lsrs	r0, r6
 8001bb2:	2207      	movs	r2, #7
 8001bb4:	432b      	orrs	r3, r5
 8001bb6:	4303      	orrs	r3, r0
 8001bb8:	401a      	ands	r2, r3
 8001bba:	2700      	movs	r7, #0
 8001bbc:	e79f      	b.n	8001afe <__aeabi_d2f+0x3a>
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	fffffc80 	.word	0xfffffc80
 8001bc4:	fffffca2 	.word	0xfffffca2
 8001bc8:	fffffc82 	.word	0xfffffc82

08001bcc <__clzsi2>:
 8001bcc:	211c      	movs	r1, #28
 8001bce:	2301      	movs	r3, #1
 8001bd0:	041b      	lsls	r3, r3, #16
 8001bd2:	4298      	cmp	r0, r3
 8001bd4:	d301      	bcc.n	8001bda <__clzsi2+0xe>
 8001bd6:	0c00      	lsrs	r0, r0, #16
 8001bd8:	3910      	subs	r1, #16
 8001bda:	0a1b      	lsrs	r3, r3, #8
 8001bdc:	4298      	cmp	r0, r3
 8001bde:	d301      	bcc.n	8001be4 <__clzsi2+0x18>
 8001be0:	0a00      	lsrs	r0, r0, #8
 8001be2:	3908      	subs	r1, #8
 8001be4:	091b      	lsrs	r3, r3, #4
 8001be6:	4298      	cmp	r0, r3
 8001be8:	d301      	bcc.n	8001bee <__clzsi2+0x22>
 8001bea:	0900      	lsrs	r0, r0, #4
 8001bec:	3904      	subs	r1, #4
 8001bee:	a202      	add	r2, pc, #8	; (adr r2, 8001bf8 <__clzsi2+0x2c>)
 8001bf0:	5c10      	ldrb	r0, [r2, r0]
 8001bf2:	1840      	adds	r0, r0, r1
 8001bf4:	4770      	bx	lr
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	02020304 	.word	0x02020304
 8001bfc:	01010101 	.word	0x01010101
	...

08001c08 <SPI_CS_LOW>:
static uint8_t textSize;		// size of characters
static uint16_t textColor;		// color of characters
static uint16_t bg;				// background color

// ---- lower level functions ----
void SPI_CS_LOW() {HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);}
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <SPI_CS_LOW+0x18>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2180      	movs	r1, #128	; 0x80
 8001c12:	0018      	movs	r0, r3
 8001c14:	f006 f8c7 	bl	8007da6 <HAL_GPIO_WritePin>
 8001c18:	46c0      	nop			; (mov r8, r8)
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	50000800 	.word	0x50000800

08001c24 <SPI_CS_HIGH>:
void SPI_CS_HIGH() {HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);}
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <SPI_CS_HIGH+0x18>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	2180      	movs	r1, #128	; 0x80
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f006 f8b9 	bl	8007da6 <HAL_GPIO_WritePin>
 8001c34:	46c0      	nop			; (mov r8, r8)
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	50000800 	.word	0x50000800

08001c40 <SPI_DC_LOW>:
void SPI_DC_LOW() {HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);}
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <SPI_DC_LOW+0x18>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	2140      	movs	r1, #64	; 0x40
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	f006 f8ab 	bl	8007da6 <HAL_GPIO_WritePin>
 8001c50:	46c0      	nop			; (mov r8, r8)
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	50000400 	.word	0x50000400

08001c5c <SPI_DC_HIGH>:
void SPI_DC_HIGH() {HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);}
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <SPI_DC_HIGH+0x18>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	2140      	movs	r1, #64	; 0x40
 8001c66:	0018      	movs	r0, r3
 8001c68:	f006 f89d 	bl	8007da6 <HAL_GPIO_WritePin>
 8001c6c:	46c0      	nop			; (mov r8, r8)
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	50000400 	.word	0x50000400

08001c78 <sendCommand>:

void sendCommand(uint8_t cmd, uint8_t *args, uint16_t numArgs, SPI_HandleTypeDef *hspi) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	0011      	movs	r1, r2
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	230f      	movs	r3, #15
 8001c86:	18fb      	adds	r3, r7, r3
 8001c88:	1c02      	adds	r2, r0, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
 8001c8c:	230c      	movs	r3, #12
 8001c8e:	18fb      	adds	r3, r7, r3
 8001c90:	1c0a      	adds	r2, r1, #0
 8001c92:	801a      	strh	r2, [r3, #0]
	while (HAL_SPI_GetState(hspi) == HAL_SPI_STATE_BUSY_TX);		// block next transfer request while DMA transfer is ongoing
 8001c94:	46c0      	nop			; (mov r8, r8)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f008 f951 	bl	8009f40 <HAL_SPI_GetState>
 8001c9e:	0003      	movs	r3, r0
 8001ca0:	2b03      	cmp	r3, #3
 8001ca2:	d0f8      	beq.n	8001c96 <sendCommand+0x1e>
	SPI_CS_LOW();	// chip select
 8001ca4:	f7ff ffb0 	bl	8001c08 <SPI_CS_LOW>

	SPI_DC_LOW();	// command mode
 8001ca8:	f7ff ffca 	bl	8001c40 <SPI_DC_LOW>
	HAL_SPI_Transmit(hspi, &cmd, 1, 1000);	// not using DMA bc it's only 1 byte
 8001cac:	23fa      	movs	r3, #250	; 0xfa
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	220f      	movs	r2, #15
 8001cb2:	18b9      	adds	r1, r7, r2
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f007 fe60 	bl	800997c <HAL_SPI_Transmit>

	SPI_DC_HIGH();	// data mode
 8001cbc:	f7ff ffce 	bl	8001c5c <SPI_DC_HIGH>
	if (numArgs) {
 8001cc0:	230c      	movs	r3, #12
 8001cc2:	18fb      	adds	r3, r7, r3
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d007      	beq.n	8001cda <sendCommand+0x62>
		HAL_SPI_Transmit_IT(hspi, args, numArgs);
 8001cca:	230c      	movs	r3, #12
 8001ccc:	18fb      	adds	r3, r7, r3
 8001cce:	881a      	ldrh	r2, [r3, #0]
 8001cd0:	68b9      	ldr	r1, [r7, #8]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f007 ff9f 	bl	8009c18 <HAL_SPI_Transmit_IT>
	}
}
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	b004      	add	sp, #16
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <HAL_SPI_TxCpltCallback>:

// using only for sending data, but not commands
// dont send request when transfer is ongoing
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(CS_PORT, CS_PIN) == GPIO_PIN_RESET) SPI_CS_HIGH();	// chip select disable
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_SPI_TxCpltCallback+0x24>)
 8001cee:	2180      	movs	r1, #128	; 0x80
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	f006 f83b 	bl	8007d6c <HAL_GPIO_ReadPin>
 8001cf6:	1e03      	subs	r3, r0, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_SPI_TxCpltCallback+0x1a>
 8001cfa:	f7ff ff93 	bl	8001c24 <SPI_CS_HIGH>
}
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	46bd      	mov	sp, r7
 8001d02:	b002      	add	sp, #8
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	50000800 	.word	0x50000800

08001d0c <displayInit>:

// array parser heavily based on Adafruit library code
void displayInit(uint8_t *args, SPI_HandleTypeDef *hspi) {
 8001d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
	uint8_t  numCommands, cmd, numArgs;
	uint16_t ms;
	uint8_t index = 0;
 8001d16:	220b      	movs	r2, #11
 8001d18:	0011      	movs	r1, r2
 8001d1a:	18bb      	adds	r3, r7, r2
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	numCommands = args[index++];			// Number of commands to follow
 8001d20:	000a      	movs	r2, r1
 8001d22:	18bb      	adds	r3, r7, r2
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	18ba      	adds	r2, r7, r2
 8001d28:	1c59      	adds	r1, r3, #1
 8001d2a:	7011      	strb	r1, [r2, #0]
 8001d2c:	001a      	movs	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	189a      	adds	r2, r3, r2
 8001d32:	230f      	movs	r3, #15
 8001d34:	18fb      	adds	r3, r7, r3
 8001d36:	7812      	ldrb	r2, [r2, #0]
 8001d38:	701a      	strb	r2, [r3, #0]
	while(numCommands--) {					// For each command...
 8001d3a:	e05e      	b.n	8001dfa <displayInit+0xee>
		cmd = args[index++];				// Read command
 8001d3c:	200b      	movs	r0, #11
 8001d3e:	183b      	adds	r3, r7, r0
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	183a      	adds	r2, r7, r0
 8001d44:	1c59      	adds	r1, r3, #1
 8001d46:	7011      	strb	r1, [r2, #0]
 8001d48:	001a      	movs	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	189a      	adds	r2, r3, r2
 8001d4e:	230a      	movs	r3, #10
 8001d50:	18fb      	adds	r3, r7, r3
 8001d52:	7812      	ldrb	r2, [r2, #0]
 8001d54:	701a      	strb	r2, [r3, #0]
		numArgs  = args[index++];			// Number of args to follow
 8001d56:	183b      	adds	r3, r7, r0
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	183a      	adds	r2, r7, r0
 8001d5c:	1c59      	adds	r1, r3, #1
 8001d5e:	7011      	strb	r1, [r2, #0]
 8001d60:	001a      	movs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	189a      	adds	r2, r3, r2
 8001d66:	2609      	movs	r6, #9
 8001d68:	19bb      	adds	r3, r7, r6
 8001d6a:	7812      	ldrb	r2, [r2, #0]
 8001d6c:	701a      	strb	r2, [r3, #0]
		ms       = numArgs & ST_CMD_DELAY;	// If hibit set, delay follows args
 8001d6e:	19bb      	adds	r3, r7, r6
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	210c      	movs	r1, #12
 8001d76:	187b      	adds	r3, r7, r1
 8001d78:	2180      	movs	r1, #128	; 0x80
 8001d7a:	400a      	ands	r2, r1
 8001d7c:	801a      	strh	r2, [r3, #0]
		numArgs &= ~ST_CMD_DELAY;			// Mask out delay bit
 8001d7e:	19bb      	adds	r3, r7, r6
 8001d80:	19ba      	adds	r2, r7, r6
 8001d82:	7812      	ldrb	r2, [r2, #0]
 8001d84:	217f      	movs	r1, #127	; 0x7f
 8001d86:	400a      	ands	r2, r1
 8001d88:	701a      	strb	r2, [r3, #0]
		sendCommand(cmd, &args[index], numArgs, hspi);
 8001d8a:	0005      	movs	r5, r0
 8001d8c:	183b      	adds	r3, r7, r0
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	18d1      	adds	r1, r2, r3
 8001d94:	19bb      	adds	r3, r7, r6
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	683c      	ldr	r4, [r7, #0]
 8001d9c:	230a      	movs	r3, #10
 8001d9e:	18fb      	adds	r3, r7, r3
 8001da0:	7818      	ldrb	r0, [r3, #0]
 8001da2:	0023      	movs	r3, r4
 8001da4:	f7ff ff68 	bl	8001c78 <sendCommand>
		index += numArgs;
 8001da8:	0028      	movs	r0, r5
 8001daa:	183b      	adds	r3, r7, r0
 8001dac:	1839      	adds	r1, r7, r0
 8001dae:	19ba      	adds	r2, r7, r6
 8001db0:	7809      	ldrb	r1, [r1, #0]
 8001db2:	7812      	ldrb	r2, [r2, #0]
 8001db4:	188a      	adds	r2, r1, r2
 8001db6:	701a      	strb	r2, [r3, #0]

		if(ms) {
 8001db8:	210c      	movs	r1, #12
 8001dba:	187b      	adds	r3, r7, r1
 8001dbc:	881b      	ldrh	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d01b      	beq.n	8001dfa <displayInit+0xee>
			ms = args[index++];			// Read post-command delay time (ms)
 8001dc2:	220b      	movs	r2, #11
 8001dc4:	18bb      	adds	r3, r7, r2
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	18ba      	adds	r2, r7, r2
 8001dca:	1c59      	adds	r1, r3, #1
 8001dcc:	7011      	strb	r1, [r2, #0]
 8001dce:	001a      	movs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	189b      	adds	r3, r3, r2
 8001dd4:	781a      	ldrb	r2, [r3, #0]
 8001dd6:	210c      	movs	r1, #12
 8001dd8:	187b      	adds	r3, r7, r1
 8001dda:	801a      	strh	r2, [r3, #0]
			if(ms == 255) ms = 500;		// If 255, delay for 500 ms
 8001ddc:	187b      	adds	r3, r7, r1
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	2bff      	cmp	r3, #255	; 0xff
 8001de2:	d104      	bne.n	8001dee <displayInit+0xe2>
 8001de4:	230c      	movs	r3, #12
 8001de6:	18fb      	adds	r3, r7, r3
 8001de8:	22fa      	movs	r2, #250	; 0xfa
 8001dea:	0052      	lsls	r2, r2, #1
 8001dec:	801a      	strh	r2, [r3, #0]
			HAL_Delay(ms);
 8001dee:	230c      	movs	r3, #12
 8001df0:	18fb      	adds	r3, r7, r3
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	0018      	movs	r0, r3
 8001df6:	f004 fef9 	bl	8006bec <HAL_Delay>
	while(numCommands--) {					// For each command...
 8001dfa:	220f      	movs	r2, #15
 8001dfc:	18bb      	adds	r3, r7, r2
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	18ba      	adds	r2, r7, r2
 8001e02:	1e59      	subs	r1, r3, #1
 8001e04:	7011      	strb	r1, [r2, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d198      	bne.n	8001d3c <displayInit+0x30>
		}
	}

	data = 0xC0;
 8001e0a:	2108      	movs	r1, #8
 8001e0c:	187b      	adds	r3, r7, r1
 8001e0e:	22c0      	movs	r2, #192	; 0xc0
 8001e10:	701a      	strb	r2, [r3, #0]
	sendCommand(ST77XX_MADCTL, &data, 1, hspi);
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	1879      	adds	r1, r7, r1
 8001e16:	2201      	movs	r2, #1
 8001e18:	2036      	movs	r0, #54	; 0x36
 8001e1a:	f7ff ff2d 	bl	8001c78 <sendCommand>
}
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	46bd      	mov	sp, r7
 8001e22:	b005      	add	sp, #20
 8001e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001e28 <TFT_startup>:

void TFT_startup(SPI_HandleTypeDef *hspi) {
 8001e28:	b590      	push	{r4, r7, lr}
 8001e2a:	b0a3      	sub	sp, #140	; 0x8c
 8001e2c:	af02      	add	r7, sp, #8
 8001e2e:	6078      	str	r0, [r7, #4]
	// array pulled from Adafruit's library for ST7735R driver
	uint8_t initCommands[] = {
 8001e30:	240c      	movs	r4, #12
 8001e32:	193a      	adds	r2, r7, r4
 8001e34:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <TFT_startup+0x60>)
 8001e36:	0010      	movs	r0, r2
 8001e38:	0019      	movs	r1, r3
 8001e3a:	2371      	movs	r3, #113	; 0x71
 8001e3c:	001a      	movs	r2, r3
 8001e3e:	f009 f983 	bl	800b148 <memcpy>
			10,                         //     10 ms delay
		ST77XX_DISPON,    ST_CMD_DELAY, //  4: Main screen turn on, no args w/delay
			100	                        //     100 ms delay
	};

	displayInit(initCommands, hspi);
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	193b      	adds	r3, r7, r4
 8001e46:	0011      	movs	r1, r2
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f7ff ff5f 	bl	8001d0c <displayInit>
	setAddrWindow(0, 0, WIDTH, HEIGHT, hspi);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	23a0      	movs	r3, #160	; 0xa0
 8001e54:	2280      	movs	r2, #128	; 0x80
 8001e56:	2100      	movs	r1, #0
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f000 f821 	bl	8001ea0 <setAddrWindow>

	// set the global variables
	cursorX = 0;
 8001e5e:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <TFT_startup+0x64>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
	cursorY = 0;
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <TFT_startup+0x68>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	701a      	strb	r2, [r3, #0]
	textSize = 1;
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <TFT_startup+0x6c>)
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	701a      	strb	r2, [r3, #0]
	textColor = ST77XX_BLACK;
 8001e70:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <TFT_startup+0x70>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	801a      	strh	r2, [r3, #0]
	bg = ST77XX_WHITE;
 8001e76:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <TFT_startup+0x74>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	4252      	negs	r2, r2
 8001e7c:	801a      	strh	r2, [r3, #0]
}
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	46bd      	mov	sp, r7
 8001e82:	b021      	add	sp, #132	; 0x84
 8001e84:	bd90      	pop	{r4, r7, pc}
 8001e86:	46c0      	nop			; (mov r8, r8)
 8001e88:	0800b99c 	.word	0x0800b99c
 8001e8c:	200000ec 	.word	0x200000ec
 8001e90:	200000ed 	.word	0x200000ed
 8001e94:	200000ee 	.word	0x200000ee
 8001e98:	200000f0 	.word	0x200000f0
 8001e9c:	200000f2 	.word	0x200000f2

08001ea0 <setAddrWindow>:

// draw something: set addr window -> write to ram memory
// sets specific area on display to write pixels to
// x and y for upper left corner, w for width, h for height
void setAddrWindow(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SPI_HandleTypeDef *hspi) {
 8001ea0:	b5b0      	push	{r4, r5, r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	0005      	movs	r5, r0
 8001ea8:	000c      	movs	r4, r1
 8001eaa:	0010      	movs	r0, r2
 8001eac:	0019      	movs	r1, r3
 8001eae:	1dbb      	adds	r3, r7, #6
 8001eb0:	1c2a      	adds	r2, r5, #0
 8001eb2:	801a      	strh	r2, [r3, #0]
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	1c22      	adds	r2, r4, #0
 8001eb8:	801a      	strh	r2, [r3, #0]
 8001eba:	1cbb      	adds	r3, r7, #2
 8001ebc:	1c02      	adds	r2, r0, #0
 8001ebe:	801a      	strh	r2, [r3, #0]
 8001ec0:	003b      	movs	r3, r7
 8001ec2:	1c0a      	adds	r2, r1, #0
 8001ec4:	801a      	strh	r2, [r3, #0]
	// building 32-bit window args
	uint8_t temp[4];
	temp[0] = (x & (0xFF00)) >> 8;
 8001ec6:	1dbb      	adds	r3, r7, #6
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	0a1b      	lsrs	r3, r3, #8
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	210c      	movs	r1, #12
 8001ed2:	187b      	adds	r3, r7, r1
 8001ed4:	701a      	strb	r2, [r3, #0]
	temp[1] = x & (0xFF);
 8001ed6:	1dbb      	adds	r3, r7, #6
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	187b      	adds	r3, r7, r1
 8001ede:	705a      	strb	r2, [r3, #1]
	temp[2] = ((x+w-1) & (0xFF00)) >> 8;
 8001ee0:	1dbb      	adds	r3, r7, #6
 8001ee2:	881a      	ldrh	r2, [r3, #0]
 8001ee4:	1cbb      	adds	r3, r7, #2
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	18d3      	adds	r3, r2, r3
 8001eea:	3b01      	subs	r3, #1
 8001eec:	121b      	asrs	r3, r3, #8
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	187b      	adds	r3, r7, r1
 8001ef2:	709a      	strb	r2, [r3, #2]
	temp[3] = (x+w-1) & (0xFF);
 8001ef4:	1dbb      	adds	r3, r7, #6
 8001ef6:	881b      	ldrh	r3, [r3, #0]
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	1cbb      	adds	r3, r7, #2
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	18d3      	adds	r3, r2, r3
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	3b01      	subs	r3, #1
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	187b      	adds	r3, r7, r1
 8001f0a:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_CASET, temp, 4, hspi);
 8001f0c:	6a3b      	ldr	r3, [r7, #32]
 8001f0e:	000c      	movs	r4, r1
 8001f10:	1879      	adds	r1, r7, r1
 8001f12:	2204      	movs	r2, #4
 8001f14:	202a      	movs	r0, #42	; 0x2a
 8001f16:	f7ff feaf 	bl	8001c78 <sendCommand>

	temp[0] = (y & (0xFF00)) >> 8;
 8001f1a:	1d3b      	adds	r3, r7, #4
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	0a1b      	lsrs	r3, r3, #8
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	0021      	movs	r1, r4
 8001f26:	187b      	adds	r3, r7, r1
 8001f28:	701a      	strb	r2, [r3, #0]
	temp[1] = y & (0xFF);
 8001f2a:	1d3b      	adds	r3, r7, #4
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	187b      	adds	r3, r7, r1
 8001f32:	705a      	strb	r2, [r3, #1]
	temp[2] = ((y+h-1) & (0xFF00)) >> 8;
 8001f34:	1d3b      	adds	r3, r7, #4
 8001f36:	881a      	ldrh	r2, [r3, #0]
 8001f38:	003b      	movs	r3, r7
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	18d3      	adds	r3, r2, r3
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	121b      	asrs	r3, r3, #8
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	187b      	adds	r3, r7, r1
 8001f46:	709a      	strb	r2, [r3, #2]
	temp[3] = (y+h-1) & (0x00FF);
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	003b      	movs	r3, r7
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	18d3      	adds	r3, r2, r3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	187b      	adds	r3, r7, r1
 8001f5e:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_RASET, temp, 4, hspi);
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	1879      	adds	r1, r7, r1
 8001f64:	2204      	movs	r2, #4
 8001f66:	202b      	movs	r0, #43	; 0x2b
 8001f68:	f7ff fe86 	bl	8001c78 <sendCommand>
}
 8001f6c:	46c0      	nop			; (mov r8, r8)
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	b004      	add	sp, #16
 8001f72:	bdb0      	pop	{r4, r5, r7, pc}

08001f74 <turnDisplayOn>:

// sends turn on/off command
void turnDisplayOn(SPI_HandleTypeDef *hspi) {sendCommand(ST77XX_DISPON, NULL, 0, hspi);}
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2100      	movs	r1, #0
 8001f82:	2029      	movs	r0, #41	; 0x29
 8001f84:	f7ff fe78 	bl	8001c78 <sendCommand>
 8001f88:	46c0      	nop			; (mov r8, r8)
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b002      	add	sp, #8
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <colorFixer>:
// 8-bit spi bus wants msb first; in array, lowest index is sent first
// because ARM is little-endian
//   for 16-bit value, it sends lower byte before upper byte
//   resulting in device thinking lower byte is upper byte
// this switches byte order around
uint16_t colorFixer(uint16_t color) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	0002      	movs	r2, r0
 8001f98:	1dbb      	adds	r3, r7, #6
 8001f9a:	801a      	strh	r2, [r3, #0]
	uint8_t a = color & 0xFF;
 8001f9c:	210f      	movs	r1, #15
 8001f9e:	187b      	adds	r3, r7, r1
 8001fa0:	1dba      	adds	r2, r7, #6
 8001fa2:	8812      	ldrh	r2, [r2, #0]
 8001fa4:	701a      	strb	r2, [r3, #0]
	uint8_t b = (color & 0xFF00) >> 8;
 8001fa6:	1dbb      	adds	r3, r7, #6
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	0a1b      	lsrs	r3, r3, #8
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	200e      	movs	r0, #14
 8001fb0:	183b      	adds	r3, r7, r0
 8001fb2:	701a      	strb	r2, [r3, #0]
	uint16_t ret = (a << 8) | b;
 8001fb4:	187b      	adds	r3, r7, r1
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	021b      	lsls	r3, r3, #8
 8001fba:	b21a      	sxth	r2, r3
 8001fbc:	183b      	adds	r3, r7, r0
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	b21b      	sxth	r3, r3
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	b21a      	sxth	r2, r3
 8001fc6:	210c      	movs	r1, #12
 8001fc8:	187b      	adds	r3, r7, r1
 8001fca:	801a      	strh	r2, [r3, #0]

	return ret;
 8001fcc:	187b      	adds	r3, r7, r1
 8001fce:	881b      	ldrh	r3, [r3, #0]
}
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	b004      	add	sp, #16
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <drawHLine>:
	uint16_t tempColor = colorFixer(color);		// else we're using address of something passed by value
	sendCommand(ST77XX_RAMWR, &tempColor, 2, hspi);
}

// draw a horizontal line. coordinates are for left point
void drawHLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 8001fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fda:	b091      	sub	sp, #68	; 0x44
 8001fdc:	af02      	add	r7, sp, #8
 8001fde:	000c      	movs	r4, r1
 8001fe0:	0016      	movs	r6, r2
 8001fe2:	0019      	movs	r1, r3
 8001fe4:	2327      	movs	r3, #39	; 0x27
 8001fe6:	18fa      	adds	r2, r7, r3
 8001fe8:	1c03      	adds	r3, r0, #0
 8001fea:	7013      	strb	r3, [r2, #0]
 8001fec:	2326      	movs	r3, #38	; 0x26
 8001fee:	18fb      	adds	r3, r7, r3
 8001ff0:	1c22      	adds	r2, r4, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
 8001ff4:	2325      	movs	r3, #37	; 0x25
 8001ff6:	18fb      	adds	r3, r7, r3
 8001ff8:	1c32      	adds	r2, r6, #0
 8001ffa:	701a      	strb	r2, [r3, #0]
 8001ffc:	2322      	movs	r3, #34	; 0x22
 8001ffe:	18fb      	adds	r3, r7, r3
 8002000:	1c0a      	adds	r2, r1, #0
 8002002:	801a      	strh	r2, [r3, #0]
 8002004:	466b      	mov	r3, sp
 8002006:	001e      	movs	r6, r3
	// bounds checking
	if (x < 0) x = 0;						// don't set x out of bounds
	if (x > WIDTH) x = WIDTH;
 8002008:	2327      	movs	r3, #39	; 0x27
 800200a:	18fb      	adds	r3, r7, r3
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b80      	cmp	r3, #128	; 0x80
 8002010:	d903      	bls.n	800201a <drawHLine+0x42>
 8002012:	2327      	movs	r3, #39	; 0x27
 8002014:	18fb      	adds	r3, r7, r3
 8002016:	2280      	movs	r2, #128	; 0x80
 8002018:	701a      	strb	r2, [r3, #0]
	if (x+size > WIDTH) size = WIDTH-x;		// don't set size so line draws out of bounds
 800201a:	2327      	movs	r3, #39	; 0x27
 800201c:	18fb      	adds	r3, r7, r3
 800201e:	781a      	ldrb	r2, [r3, #0]
 8002020:	2325      	movs	r3, #37	; 0x25
 8002022:	18fb      	adds	r3, r7, r3
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	18d3      	adds	r3, r2, r3
 8002028:	2b80      	cmp	r3, #128	; 0x80
 800202a:	dd08      	ble.n	800203e <drawHLine+0x66>
 800202c:	2325      	movs	r3, #37	; 0x25
 800202e:	18fb      	adds	r3, r7, r3
 8002030:	2227      	movs	r2, #39	; 0x27
 8002032:	18ba      	adds	r2, r7, r2
 8002034:	7812      	ldrb	r2, [r2, #0]
 8002036:	2180      	movs	r1, #128	; 0x80
 8002038:	4249      	negs	r1, r1
 800203a:	1a8a      	subs	r2, r1, r2
 800203c:	701a      	strb	r2, [r3, #0]
	if (x+size < 0) size = 0-x;
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 800203e:	2326      	movs	r3, #38	; 0x26
 8002040:	18fb      	adds	r3, r7, r3
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2ba0      	cmp	r3, #160	; 0xa0
 8002046:	d868      	bhi.n	800211a <drawHLine+0x142>

	setAddrWindow(x, y, size, 1, hspi);
 8002048:	2327      	movs	r3, #39	; 0x27
 800204a:	18fb      	adds	r3, r7, r3
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	b298      	uxth	r0, r3
 8002050:	2326      	movs	r3, #38	; 0x26
 8002052:	18fb      	adds	r3, r7, r3
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	b299      	uxth	r1, r3
 8002058:	2325      	movs	r3, #37	; 0x25
 800205a:	18fb      	adds	r3, r7, r3
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	b29a      	uxth	r2, r3
 8002060:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	2301      	movs	r3, #1
 8002066:	f7ff ff1b 	bl	8001ea0 <setAddrWindow>
	uint16_t colors[size];
 800206a:	2325      	movs	r3, #37	; 0x25
 800206c:	18fb      	adds	r3, r7, r3
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	001a      	movs	r2, r3
 8002072:	3a01      	subs	r2, #1
 8002074:	633a      	str	r2, [r7, #48]	; 0x30
 8002076:	60bb      	str	r3, [r7, #8]
 8002078:	2200      	movs	r2, #0
 800207a:	60fa      	str	r2, [r7, #12]
 800207c:	68b8      	ldr	r0, [r7, #8]
 800207e:	68f9      	ldr	r1, [r7, #12]
 8002080:	0002      	movs	r2, r0
 8002082:	0f12      	lsrs	r2, r2, #28
 8002084:	000c      	movs	r4, r1
 8002086:	0124      	lsls	r4, r4, #4
 8002088:	61fc      	str	r4, [r7, #28]
 800208a:	69fc      	ldr	r4, [r7, #28]
 800208c:	4314      	orrs	r4, r2
 800208e:	61fc      	str	r4, [r7, #28]
 8002090:	0002      	movs	r2, r0
 8002092:	0112      	lsls	r2, r2, #4
 8002094:	61ba      	str	r2, [r7, #24]
 8002096:	603b      	str	r3, [r7, #0]
 8002098:	2200      	movs	r2, #0
 800209a:	607a      	str	r2, [r7, #4]
 800209c:	6838      	ldr	r0, [r7, #0]
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	0002      	movs	r2, r0
 80020a2:	0f12      	lsrs	r2, r2, #28
 80020a4:	000c      	movs	r4, r1
 80020a6:	0124      	lsls	r4, r4, #4
 80020a8:	617c      	str	r4, [r7, #20]
 80020aa:	697c      	ldr	r4, [r7, #20]
 80020ac:	4314      	orrs	r4, r2
 80020ae:	617c      	str	r4, [r7, #20]
 80020b0:	0002      	movs	r2, r0
 80020b2:	0112      	lsls	r2, r2, #4
 80020b4:	613a      	str	r2, [r7, #16]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	3301      	adds	r3, #1
 80020ba:	3307      	adds	r3, #7
 80020bc:	08db      	lsrs	r3, r3, #3
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	466a      	mov	r2, sp
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	469d      	mov	sp, r3
 80020c6:	ab02      	add	r3, sp, #8
 80020c8:	3301      	adds	r3, #1
 80020ca:	085b      	lsrs	r3, r3, #1
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {
 80020d0:	2300      	movs	r3, #0
 80020d2:	637b      	str	r3, [r7, #52]	; 0x34
 80020d4:	e00e      	b.n	80020f4 <drawHLine+0x11c>
		colors[i] = colorFixer(color);
 80020d6:	2322      	movs	r3, #34	; 0x22
 80020d8:	18fb      	adds	r3, r7, r3
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	0018      	movs	r0, r3
 80020de:	f7ff ff57 	bl	8001f90 <colorFixer>
 80020e2:	0003      	movs	r3, r0
 80020e4:	0019      	movs	r1, r3
 80020e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020ea:	0052      	lsls	r2, r2, #1
 80020ec:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {
 80020ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f0:	3301      	adds	r3, #1
 80020f2:	637b      	str	r3, [r7, #52]	; 0x34
 80020f4:	2325      	movs	r3, #37	; 0x25
 80020f6:	18fb      	adds	r3, r7, r3
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020fc:	429a      	cmp	r2, r3
 80020fe:	dbea      	blt.n	80020d6 <drawHLine+0xfe>
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 8002100:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002102:	2325      	movs	r3, #37	; 0x25
 8002104:	18fb      	adds	r3, r7, r3
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	b29b      	uxth	r3, r3
 800210a:	18db      	adds	r3, r3, r3
 800210c:	b29a      	uxth	r2, r3
 800210e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002110:	202c      	movs	r0, #44	; 0x2c
 8002112:	f7ff fdb1 	bl	8001c78 <sendCommand>
 8002116:	46b5      	mov	sp, r6
 8002118:	e001      	b.n	800211e <drawHLine+0x146>
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	46b5      	mov	sp, r6
}
 800211e:	46bd      	mov	sp, r7
 8002120:	b00f      	add	sp, #60	; 0x3c
 8002122:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002124 <drawVLine>:

// draws a vertical line. coordinates are for top point
void drawVLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 8002124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002126:	b091      	sub	sp, #68	; 0x44
 8002128:	af02      	add	r7, sp, #8
 800212a:	000c      	movs	r4, r1
 800212c:	0016      	movs	r6, r2
 800212e:	0019      	movs	r1, r3
 8002130:	2327      	movs	r3, #39	; 0x27
 8002132:	18fa      	adds	r2, r7, r3
 8002134:	1c03      	adds	r3, r0, #0
 8002136:	7013      	strb	r3, [r2, #0]
 8002138:	2326      	movs	r3, #38	; 0x26
 800213a:	18fb      	adds	r3, r7, r3
 800213c:	1c22      	adds	r2, r4, #0
 800213e:	701a      	strb	r2, [r3, #0]
 8002140:	2325      	movs	r3, #37	; 0x25
 8002142:	18fb      	adds	r3, r7, r3
 8002144:	1c32      	adds	r2, r6, #0
 8002146:	701a      	strb	r2, [r3, #0]
 8002148:	2322      	movs	r3, #34	; 0x22
 800214a:	18fb      	adds	r3, r7, r3
 800214c:	1c0a      	adds	r2, r1, #0
 800214e:	801a      	strh	r2, [r3, #0]
 8002150:	466b      	mov	r3, sp
 8002152:	001e      	movs	r6, r3
	// bounds checking
	if (y < 0) y = 0;						// don't set y out of bounds
	if (y > HEIGHT) y = HEIGHT;
 8002154:	2326      	movs	r3, #38	; 0x26
 8002156:	18fb      	adds	r3, r7, r3
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2ba0      	cmp	r3, #160	; 0xa0
 800215c:	d903      	bls.n	8002166 <drawVLine+0x42>
 800215e:	2326      	movs	r3, #38	; 0x26
 8002160:	18fb      	adds	r3, r7, r3
 8002162:	22a0      	movs	r2, #160	; 0xa0
 8002164:	701a      	strb	r2, [r3, #0]
	if (y+size > HEIGHT) size = HEIGHT-y;	// don't set size so line draws out of bounds
 8002166:	2326      	movs	r3, #38	; 0x26
 8002168:	18fb      	adds	r3, r7, r3
 800216a:	781a      	ldrb	r2, [r3, #0]
 800216c:	2325      	movs	r3, #37	; 0x25
 800216e:	18fb      	adds	r3, r7, r3
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	18d3      	adds	r3, r2, r3
 8002174:	2ba0      	cmp	r3, #160	; 0xa0
 8002176:	dd08      	ble.n	800218a <drawVLine+0x66>
 8002178:	2325      	movs	r3, #37	; 0x25
 800217a:	18fb      	adds	r3, r7, r3
 800217c:	2226      	movs	r2, #38	; 0x26
 800217e:	18ba      	adds	r2, r7, r2
 8002180:	7812      	ldrb	r2, [r2, #0]
 8002182:	2160      	movs	r1, #96	; 0x60
 8002184:	4249      	negs	r1, r1
 8002186:	1a8a      	subs	r2, r1, r2
 8002188:	701a      	strb	r2, [r3, #0]
	if (y+size < 0) size = 0-y;
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if x is out of bounds
 800218a:	2327      	movs	r3, #39	; 0x27
 800218c:	18fb      	adds	r3, r7, r3
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b80      	cmp	r3, #128	; 0x80
 8002192:	d869      	bhi.n	8002268 <drawVLine+0x144>

	setAddrWindow(x, y, 1, size, hspi);
 8002194:	2327      	movs	r3, #39	; 0x27
 8002196:	18fb      	adds	r3, r7, r3
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	b298      	uxth	r0, r3
 800219c:	2326      	movs	r3, #38	; 0x26
 800219e:	18fb      	adds	r3, r7, r3
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	b299      	uxth	r1, r3
 80021a4:	2325      	movs	r3, #37	; 0x25
 80021a6:	18fb      	adds	r3, r7, r3
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	0013      	movs	r3, r2
 80021b2:	2201      	movs	r2, #1
 80021b4:	f7ff fe74 	bl	8001ea0 <setAddrWindow>
	uint16_t colors[size];
 80021b8:	2325      	movs	r3, #37	; 0x25
 80021ba:	18fb      	adds	r3, r7, r3
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	001a      	movs	r2, r3
 80021c0:	3a01      	subs	r2, #1
 80021c2:	633a      	str	r2, [r7, #48]	; 0x30
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	2200      	movs	r2, #0
 80021c8:	60fa      	str	r2, [r7, #12]
 80021ca:	68b8      	ldr	r0, [r7, #8]
 80021cc:	68f9      	ldr	r1, [r7, #12]
 80021ce:	0002      	movs	r2, r0
 80021d0:	0f12      	lsrs	r2, r2, #28
 80021d2:	000c      	movs	r4, r1
 80021d4:	0124      	lsls	r4, r4, #4
 80021d6:	61fc      	str	r4, [r7, #28]
 80021d8:	69fc      	ldr	r4, [r7, #28]
 80021da:	4314      	orrs	r4, r2
 80021dc:	61fc      	str	r4, [r7, #28]
 80021de:	0002      	movs	r2, r0
 80021e0:	0112      	lsls	r2, r2, #4
 80021e2:	61ba      	str	r2, [r7, #24]
 80021e4:	603b      	str	r3, [r7, #0]
 80021e6:	2200      	movs	r2, #0
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	6838      	ldr	r0, [r7, #0]
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	0002      	movs	r2, r0
 80021f0:	0f12      	lsrs	r2, r2, #28
 80021f2:	000c      	movs	r4, r1
 80021f4:	0124      	lsls	r4, r4, #4
 80021f6:	617c      	str	r4, [r7, #20]
 80021f8:	697c      	ldr	r4, [r7, #20]
 80021fa:	4314      	orrs	r4, r2
 80021fc:	617c      	str	r4, [r7, #20]
 80021fe:	0002      	movs	r2, r0
 8002200:	0112      	lsls	r2, r2, #4
 8002202:	613a      	str	r2, [r7, #16]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	3301      	adds	r3, #1
 8002208:	3307      	adds	r3, #7
 800220a:	08db      	lsrs	r3, r3, #3
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	466a      	mov	r2, sp
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	469d      	mov	sp, r3
 8002214:	ab02      	add	r3, sp, #8
 8002216:	3301      	adds	r3, #1
 8002218:	085b      	lsrs	r3, r3, #1
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {
 800221e:	2300      	movs	r3, #0
 8002220:	637b      	str	r3, [r7, #52]	; 0x34
 8002222:	e00e      	b.n	8002242 <drawVLine+0x11e>
		colors[i] = colorFixer(color);
 8002224:	2322      	movs	r3, #34	; 0x22
 8002226:	18fb      	adds	r3, r7, r3
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	0018      	movs	r0, r3
 800222c:	f7ff feb0 	bl	8001f90 <colorFixer>
 8002230:	0003      	movs	r3, r0
 8002232:	0019      	movs	r1, r3
 8002234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002236:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002238:	0052      	lsls	r2, r2, #1
 800223a:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {
 800223c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800223e:	3301      	adds	r3, #1
 8002240:	637b      	str	r3, [r7, #52]	; 0x34
 8002242:	2325      	movs	r3, #37	; 0x25
 8002244:	18fb      	adds	r3, r7, r3
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800224a:	429a      	cmp	r2, r3
 800224c:	dbea      	blt.n	8002224 <drawVLine+0x100>
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 800224e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002250:	2325      	movs	r3, #37	; 0x25
 8002252:	18fb      	adds	r3, r7, r3
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	b29b      	uxth	r3, r3
 8002258:	18db      	adds	r3, r3, r3
 800225a:	b29a      	uxth	r2, r3
 800225c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800225e:	202c      	movs	r0, #44	; 0x2c
 8002260:	f7ff fd0a 	bl	8001c78 <sendCommand>
 8002264:	46b5      	mov	sp, r6
 8002266:	e001      	b.n	800226c <drawVLine+0x148>
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if x is out of bounds
 8002268:	46c0      	nop			; (mov r8, r8)
 800226a:	46b5      	mov	sp, r6
}
 800226c:	46bd      	mov	sp, r7
 800226e:	b00f      	add	sp, #60	; 0x3c
 8002270:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002272 <drawBuffer>:

// draws on a specific region with input 16-bit buffer
void drawBuffer(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t *buffer, uint16_t bufferSize, SPI_HandleTypeDef *hspi) {
 8002272:	b5b0      	push	{r4, r5, r7, lr}
 8002274:	b084      	sub	sp, #16
 8002276:	af02      	add	r7, sp, #8
 8002278:	0005      	movs	r5, r0
 800227a:	000c      	movs	r4, r1
 800227c:	0010      	movs	r0, r2
 800227e:	0019      	movs	r1, r3
 8002280:	1dfb      	adds	r3, r7, #7
 8002282:	1c2a      	adds	r2, r5, #0
 8002284:	701a      	strb	r2, [r3, #0]
 8002286:	1dbb      	adds	r3, r7, #6
 8002288:	1c22      	adds	r2, r4, #0
 800228a:	701a      	strb	r2, [r3, #0]
 800228c:	1d7b      	adds	r3, r7, #5
 800228e:	1c02      	adds	r2, r0, #0
 8002290:	701a      	strb	r2, [r3, #0]
 8002292:	1d3b      	adds	r3, r7, #4
 8002294:	1c0a      	adds	r2, r1, #0
 8002296:	701a      	strb	r2, [r3, #0]
	if (x+w > WIDTH || y+h > HEIGHT) return;
 8002298:	1dfb      	adds	r3, r7, #7
 800229a:	781a      	ldrb	r2, [r3, #0]
 800229c:	1d7b      	adds	r3, r7, #5
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	18d3      	adds	r3, r2, r3
 80022a2:	2b80      	cmp	r3, #128	; 0x80
 80022a4:	dc29      	bgt.n	80022fa <drawBuffer+0x88>
 80022a6:	1dbb      	adds	r3, r7, #6
 80022a8:	781a      	ldrb	r2, [r3, #0]
 80022aa:	1d3b      	adds	r3, r7, #4
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	18d3      	adds	r3, r2, r3
 80022b0:	2ba0      	cmp	r3, #160	; 0xa0
 80022b2:	dc22      	bgt.n	80022fa <drawBuffer+0x88>

	// also don't call this with buffer size too big bc there's not enough ram for all pixels of display
	if (bufferSize > 10240) return;			// about 1/2 of total system ram
 80022b4:	231c      	movs	r3, #28
 80022b6:	18fb      	adds	r3, r7, r3
 80022b8:	881a      	ldrh	r2, [r3, #0]
 80022ba:	23a0      	movs	r3, #160	; 0xa0
 80022bc:	019b      	lsls	r3, r3, #6
 80022be:	429a      	cmp	r2, r3
 80022c0:	d81d      	bhi.n	80022fe <drawBuffer+0x8c>

	setAddrWindow(x, y, w, h, hspi);
 80022c2:	1dfb      	adds	r3, r7, #7
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	b298      	uxth	r0, r3
 80022c8:	1dbb      	adds	r3, r7, #6
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	b299      	uxth	r1, r3
 80022ce:	1d7b      	adds	r3, r7, #5
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	1d3b      	adds	r3, r7, #4
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	b29c      	uxth	r4, r3
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	0023      	movs	r3, r4
 80022e0:	f7ff fdde 	bl	8001ea0 <setAddrWindow>
	sendCommand(ST77XX_RAMWR, buffer, bufferSize*2, hspi);
 80022e4:	231c      	movs	r3, #28
 80022e6:	18fb      	adds	r3, r7, r3
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	18db      	adds	r3, r3, r3
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	6a3b      	ldr	r3, [r7, #32]
 80022f0:	69b9      	ldr	r1, [r7, #24]
 80022f2:	202c      	movs	r0, #44	; 0x2c
 80022f4:	f7ff fcc0 	bl	8001c78 <sendCommand>
 80022f8:	e002      	b.n	8002300 <drawBuffer+0x8e>
	if (x+w > WIDTH || y+h > HEIGHT) return;
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	e000      	b.n	8002300 <drawBuffer+0x8e>
	if (bufferSize > 10240) return;			// about 1/2 of total system ram
 80022fe:	46c0      	nop			; (mov r8, r8)
}
 8002300:	46bd      	mov	sp, r7
 8002302:	b002      	add	sp, #8
 8002304:	bdb0      	pop	{r4, r5, r7, pc}

08002306 <drawRect>:
		}
	}
}

// draw an empty rectangle
void drawRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color, SPI_HandleTypeDef *hspi) {
 8002306:	b5b0      	push	{r4, r5, r7, lr}
 8002308:	b084      	sub	sp, #16
 800230a:	af02      	add	r7, sp, #8
 800230c:	0005      	movs	r5, r0
 800230e:	000c      	movs	r4, r1
 8002310:	0010      	movs	r0, r2
 8002312:	0019      	movs	r1, r3
 8002314:	1dfb      	adds	r3, r7, #7
 8002316:	1c2a      	adds	r2, r5, #0
 8002318:	701a      	strb	r2, [r3, #0]
 800231a:	1dbb      	adds	r3, r7, #6
 800231c:	1c22      	adds	r2, r4, #0
 800231e:	701a      	strb	r2, [r3, #0]
 8002320:	1d7b      	adds	r3, r7, #5
 8002322:	1c02      	adds	r2, r0, #0
 8002324:	701a      	strb	r2, [r3, #0]
 8002326:	1d3b      	adds	r3, r7, #4
 8002328:	1c0a      	adds	r2, r1, #0
 800232a:	701a      	strb	r2, [r3, #0]
	drawHLine(x, y, w, color, hspi);
 800232c:	2518      	movs	r5, #24
 800232e:	197b      	adds	r3, r7, r5
 8002330:	881c      	ldrh	r4, [r3, #0]
 8002332:	1d7b      	adds	r3, r7, #5
 8002334:	781a      	ldrb	r2, [r3, #0]
 8002336:	1dbb      	adds	r3, r7, #6
 8002338:	7819      	ldrb	r1, [r3, #0]
 800233a:	1dfb      	adds	r3, r7, #7
 800233c:	7818      	ldrb	r0, [r3, #0]
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	0023      	movs	r3, r4
 8002344:	f7ff fe48 	bl	8001fd8 <drawHLine>
	drawHLine(x, y+h-1, w, color, hspi);
 8002348:	1dba      	adds	r2, r7, #6
 800234a:	1d3b      	adds	r3, r7, #4
 800234c:	7812      	ldrb	r2, [r2, #0]
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	18d3      	adds	r3, r2, r3
 8002352:	b2db      	uxtb	r3, r3
 8002354:	3b01      	subs	r3, #1
 8002356:	b2d9      	uxtb	r1, r3
 8002358:	197b      	adds	r3, r7, r5
 800235a:	881c      	ldrh	r4, [r3, #0]
 800235c:	1d7b      	adds	r3, r7, #5
 800235e:	781a      	ldrb	r2, [r3, #0]
 8002360:	1dfb      	adds	r3, r7, #7
 8002362:	7818      	ldrb	r0, [r3, #0]
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	0023      	movs	r3, r4
 800236a:	f7ff fe35 	bl	8001fd8 <drawHLine>
	drawVLine(x, y, h, color, hspi);
 800236e:	197b      	adds	r3, r7, r5
 8002370:	881c      	ldrh	r4, [r3, #0]
 8002372:	1d3b      	adds	r3, r7, #4
 8002374:	781a      	ldrb	r2, [r3, #0]
 8002376:	1dbb      	adds	r3, r7, #6
 8002378:	7819      	ldrb	r1, [r3, #0]
 800237a:	1dfb      	adds	r3, r7, #7
 800237c:	7818      	ldrb	r0, [r3, #0]
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	0023      	movs	r3, r4
 8002384:	f7ff fece 	bl	8002124 <drawVLine>
	drawVLine(x+w-1, y, h, color, hspi);
 8002388:	1dfa      	adds	r2, r7, #7
 800238a:	1d7b      	adds	r3, r7, #5
 800238c:	7812      	ldrb	r2, [r2, #0]
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	18d3      	adds	r3, r2, r3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	3b01      	subs	r3, #1
 8002396:	b2d8      	uxtb	r0, r3
 8002398:	197b      	adds	r3, r7, r5
 800239a:	881c      	ldrh	r4, [r3, #0]
 800239c:	1d3b      	adds	r3, r7, #4
 800239e:	781a      	ldrb	r2, [r3, #0]
 80023a0:	1dbb      	adds	r3, r7, #6
 80023a2:	7819      	ldrb	r1, [r3, #0]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	0023      	movs	r3, r4
 80023aa:	f7ff febb 	bl	8002124 <drawVLine>
}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	46bd      	mov	sp, r7
 80023b2:	b002      	add	sp, #8
 80023b4:	bdb0      	pop	{r4, r5, r7, pc}

080023b6 <fillRect>:

// draw a filled rectangle
void fillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color, SPI_HandleTypeDef *hspi) {
 80023b6:	b5b0      	push	{r4, r5, r7, lr}
 80023b8:	b086      	sub	sp, #24
 80023ba:	af02      	add	r7, sp, #8
 80023bc:	0005      	movs	r5, r0
 80023be:	000c      	movs	r4, r1
 80023c0:	0010      	movs	r0, r2
 80023c2:	0019      	movs	r1, r3
 80023c4:	1dfb      	adds	r3, r7, #7
 80023c6:	1c2a      	adds	r2, r5, #0
 80023c8:	701a      	strb	r2, [r3, #0]
 80023ca:	1dbb      	adds	r3, r7, #6
 80023cc:	1c22      	adds	r2, r4, #0
 80023ce:	701a      	strb	r2, [r3, #0]
 80023d0:	1d7b      	adds	r3, r7, #5
 80023d2:	1c02      	adds	r2, r0, #0
 80023d4:	701a      	strb	r2, [r3, #0]
 80023d6:	1d3b      	adds	r3, r7, #4
 80023d8:	1c0a      	adds	r2, r1, #0
 80023da:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < h; i++) {
 80023dc:	2300      	movs	r3, #0
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	e014      	b.n	800240c <fillRect+0x56>
		drawHLine(x, y+i, w, color, hspi);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	1dbb      	adds	r3, r7, #6
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	18d3      	adds	r3, r2, r3
 80023ec:	b2d9      	uxtb	r1, r3
 80023ee:	2320      	movs	r3, #32
 80023f0:	18fb      	adds	r3, r7, r3
 80023f2:	881c      	ldrh	r4, [r3, #0]
 80023f4:	1d7b      	adds	r3, r7, #5
 80023f6:	781a      	ldrb	r2, [r3, #0]
 80023f8:	1dfb      	adds	r3, r7, #7
 80023fa:	7818      	ldrb	r0, [r3, #0]
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	0023      	movs	r3, r4
 8002402:	f7ff fde9 	bl	8001fd8 <drawHLine>
	for (int i = 0; i < h; i++) {
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	3301      	adds	r3, #1
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	1d3b      	adds	r3, r7, #4
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	429a      	cmp	r2, r3
 8002414:	dbe5      	blt.n	80023e2 <fillRect+0x2c>
	}
}
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	46bd      	mov	sp, r7
 800241a:	b004      	add	sp, #16
 800241c:	bdb0      	pop	{r4, r5, r7, pc}

0800241e <fillScreen>:

// a big rectangle, but for the whole screen
void fillScreen(uint16_t color, SPI_HandleTypeDef *hspi) {
 800241e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002420:	b091      	sub	sp, #68	; 0x44
 8002422:	af04      	add	r7, sp, #16
 8002424:	61b9      	str	r1, [r7, #24]
 8002426:	221e      	movs	r2, #30
 8002428:	18ba      	adds	r2, r7, r2
 800242a:	1c01      	adds	r1, r0, #0
 800242c:	8011      	strh	r1, [r2, #0]
 800242e:	466a      	mov	r2, sp
 8002430:	607a      	str	r2, [r7, #4]
	uint16_t bufferSize = WIDTH*HEIGHT/4;
 8002432:	2012      	movs	r0, #18
 8002434:	2218      	movs	r2, #24
 8002436:	18b9      	adds	r1, r7, r2
 8002438:	180a      	adds	r2, r1, r0
 800243a:	21a0      	movs	r1, #160	; 0xa0
 800243c:	0149      	lsls	r1, r1, #5
 800243e:	8011      	strh	r1, [r2, #0]
	uint16_t buffer[bufferSize];
 8002440:	2218      	movs	r2, #24
 8002442:	18ba      	adds	r2, r7, r2
 8002444:	1812      	adds	r2, r2, r0
 8002446:	8812      	ldrh	r2, [r2, #0]
 8002448:	0011      	movs	r1, r2
 800244a:	3901      	subs	r1, #1
 800244c:	6279      	str	r1, [r7, #36]	; 0x24
 800244e:	613a      	str	r2, [r7, #16]
 8002450:	2100      	movs	r1, #0
 8002452:	6179      	str	r1, [r7, #20]
 8002454:	6939      	ldr	r1, [r7, #16]
 8002456:	0f09      	lsrs	r1, r1, #28
 8002458:	6978      	ldr	r0, [r7, #20]
 800245a:	0106      	lsls	r6, r0, #4
 800245c:	430e      	orrs	r6, r1
 800245e:	6939      	ldr	r1, [r7, #16]
 8002460:	010d      	lsls	r5, r1, #4
 8002462:	60ba      	str	r2, [r7, #8]
 8002464:	2100      	movs	r1, #0
 8002466:	60f9      	str	r1, [r7, #12]
 8002468:	68bd      	ldr	r5, [r7, #8]
 800246a:	68fe      	ldr	r6, [r7, #12]
 800246c:	0029      	movs	r1, r5
 800246e:	0f09      	lsrs	r1, r1, #28
 8002470:	0030      	movs	r0, r6
 8002472:	0104      	lsls	r4, r0, #4
 8002474:	430c      	orrs	r4, r1
 8002476:	0029      	movs	r1, r5
 8002478:	010b      	lsls	r3, r1, #4
 800247a:	0013      	movs	r3, r2
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	3301      	adds	r3, #1
 8002480:	3307      	adds	r3, #7
 8002482:	08db      	lsrs	r3, r3, #3
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	466a      	mov	r2, sp
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	469d      	mov	sp, r3
 800248c:	ab04      	add	r3, sp, #16
 800248e:	3301      	adds	r3, #1
 8002490:	085b      	lsrs	r3, r3, #1
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	623b      	str	r3, [r7, #32]
	int i;
	for (i = 0; i < bufferSize; i++) {
 8002496:	2300      	movs	r3, #0
 8002498:	62fb      	str	r3, [r7, #44]	; 0x2c
 800249a:	e00e      	b.n	80024ba <fillScreen+0x9c>
		buffer[i] = colorFixer(color);
 800249c:	231e      	movs	r3, #30
 800249e:	18fb      	adds	r3, r7, r3
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	0018      	movs	r0, r3
 80024a4:	f7ff fd74 	bl	8001f90 <colorFixer>
 80024a8:	0003      	movs	r3, r0
 80024aa:	0019      	movs	r1, r3
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024b0:	0052      	lsls	r2, r2, #1
 80024b2:	52d1      	strh	r1, [r2, r3]
	for (i = 0; i < bufferSize; i++) {
 80024b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b6:	3301      	adds	r3, #1
 80024b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024ba:	2312      	movs	r3, #18
 80024bc:	2218      	movs	r2, #24
 80024be:	4694      	mov	ip, r2
 80024c0:	44bc      	add	ip, r7
 80024c2:	4463      	add	r3, ip
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024c8:	429a      	cmp	r2, r3
 80024ca:	dbe7      	blt.n	800249c <fillScreen+0x7e>
	}

	// divided into 4 parts, since system ram is not big enough
	for (i = 0; i < 4; i++) {
 80024cc:	2300      	movs	r3, #0
 80024ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024d0:	e017      	b.n	8002502 <fillScreen+0xe4>
		drawBuffer(0, HEIGHT/4*i, WIDTH, HEIGHT/4, buffer, bufferSize, hspi);
 80024d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2228      	movs	r2, #40	; 0x28
 80024d8:	4353      	muls	r3, r2
 80024da:	b2d9      	uxtb	r1, r3
 80024dc:	6a3b      	ldr	r3, [r7, #32]
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	9202      	str	r2, [sp, #8]
 80024e2:	2212      	movs	r2, #18
 80024e4:	2018      	movs	r0, #24
 80024e6:	4684      	mov	ip, r0
 80024e8:	44bc      	add	ip, r7
 80024ea:	4462      	add	r2, ip
 80024ec:	8812      	ldrh	r2, [r2, #0]
 80024ee:	9201      	str	r2, [sp, #4]
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	2328      	movs	r3, #40	; 0x28
 80024f4:	2280      	movs	r2, #128	; 0x80
 80024f6:	2000      	movs	r0, #0
 80024f8:	f7ff febb 	bl	8002272 <drawBuffer>
	for (i = 0; i < 4; i++) {
 80024fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fe:	3301      	adds	r3, #1
 8002500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002504:	2b03      	cmp	r3, #3
 8002506:	dde4      	ble.n	80024d2 <fillScreen+0xb4>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	469d      	mov	sp, r3
	}
}
 800250c:	46c0      	nop			; (mov r8, r8)
 800250e:	46bd      	mov	sp, r7
 8002510:	b00d      	add	sp, #52	; 0x34
 8002512:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002514 <clearScreen>:

void clearScreen(uint16_t backgroundColor, SPI_HandleTypeDef *hspi) {
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	0002      	movs	r2, r0
 800251c:	6039      	str	r1, [r7, #0]
 800251e:	1dbb      	adds	r3, r7, #6
 8002520:	801a      	strh	r2, [r3, #0]
	bg = backgroundColor;
 8002522:	4b07      	ldr	r3, [pc, #28]	; (8002540 <clearScreen+0x2c>)
 8002524:	1dba      	adds	r2, r7, #6
 8002526:	8812      	ldrh	r2, [r2, #0]
 8002528:	801a      	strh	r2, [r3, #0]
	fillScreen(backgroundColor, hspi);
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	1dbb      	adds	r3, r7, #6
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	0011      	movs	r1, r2
 8002532:	0018      	movs	r0, r3
 8002534:	f7ff ff73 	bl	800241e <fillScreen>
}
 8002538:	46c0      	nop			; (mov r8, r8)
 800253a:	46bd      	mov	sp, r7
 800253c:	b002      	add	sp, #8
 800253e:	bd80      	pop	{r7, pc}
 8002540:	200000f2 	.word	0x200000f2

08002544 <drawChar>:
// ---- end of basic shapes and lines ----

// ---- text functions ----
// draw a character. based on 6x8 font, but scalable
// instead of drawing pixel by pixel, function builds a buffer first and then sends
void drawChar(uint8_t ch, SPI_HandleTypeDef *hspi) {
 8002544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002546:	b095      	sub	sp, #84	; 0x54
 8002548:	af04      	add	r7, sp, #16
 800254a:	61b9      	str	r1, [r7, #24]
 800254c:	221f      	movs	r2, #31
 800254e:	18ba      	adds	r2, r7, r2
 8002550:	1c01      	adds	r1, r0, #0
 8002552:	7011      	strb	r1, [r2, #0]
 8002554:	466a      	mov	r2, sp
 8002556:	607a      	str	r2, [r7, #4]
	uint16_t bufferSize = 6*8*textSize*textSize;
 8002558:	4abe      	ldr	r2, [pc, #760]	; (8002854 <drawChar+0x310>)
 800255a:	7812      	ldrb	r2, [r2, #0]
 800255c:	b292      	uxth	r2, r2
 800255e:	49bd      	ldr	r1, [pc, #756]	; (8002854 <drawChar+0x310>)
 8002560:	7809      	ldrb	r1, [r1, #0]
 8002562:	b289      	uxth	r1, r1
 8002564:	434a      	muls	r2, r1
 8002566:	b291      	uxth	r1, r2
 8002568:	221a      	movs	r2, #26
 800256a:	2018      	movs	r0, #24
 800256c:	4684      	mov	ip, r0
 800256e:	44bc      	add	ip, r7
 8002570:	4462      	add	r2, ip
 8002572:	2030      	movs	r0, #48	; 0x30
 8002574:	4341      	muls	r1, r0
 8002576:	8011      	strh	r1, [r2, #0]
	uint16_t buffer[bufferSize];
 8002578:	221a      	movs	r2, #26
 800257a:	2118      	movs	r1, #24
 800257c:	468c      	mov	ip, r1
 800257e:	44bc      	add	ip, r7
 8002580:	4462      	add	r2, ip
 8002582:	8812      	ldrh	r2, [r2, #0]
 8002584:	0011      	movs	r1, r2
 8002586:	3901      	subs	r1, #1
 8002588:	62f9      	str	r1, [r7, #44]	; 0x2c
 800258a:	613a      	str	r2, [r7, #16]
 800258c:	2100      	movs	r1, #0
 800258e:	6179      	str	r1, [r7, #20]
 8002590:	6939      	ldr	r1, [r7, #16]
 8002592:	0f09      	lsrs	r1, r1, #28
 8002594:	6978      	ldr	r0, [r7, #20]
 8002596:	0106      	lsls	r6, r0, #4
 8002598:	430e      	orrs	r6, r1
 800259a:	6939      	ldr	r1, [r7, #16]
 800259c:	010d      	lsls	r5, r1, #4
 800259e:	60ba      	str	r2, [r7, #8]
 80025a0:	2100      	movs	r1, #0
 80025a2:	60f9      	str	r1, [r7, #12]
 80025a4:	68bd      	ldr	r5, [r7, #8]
 80025a6:	68fe      	ldr	r6, [r7, #12]
 80025a8:	0029      	movs	r1, r5
 80025aa:	0f09      	lsrs	r1, r1, #28
 80025ac:	0030      	movs	r0, r6
 80025ae:	0104      	lsls	r4, r0, #4
 80025b0:	430c      	orrs	r4, r1
 80025b2:	0029      	movs	r1, r5
 80025b4:	010b      	lsls	r3, r1, #4
 80025b6:	0013      	movs	r3, r2
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	3301      	adds	r3, #1
 80025bc:	3307      	adds	r3, #7
 80025be:	08db      	lsrs	r3, r3, #3
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	466a      	mov	r2, sp
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	469d      	mov	sp, r3
 80025c8:	ab04      	add	r3, sp, #16
 80025ca:	3301      	adds	r3, #1
 80025cc:	085b      	lsrs	r3, r3, #1
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	62bb      	str	r3, [r7, #40]	; 0x28
	int16_t rowOffset, address;

	// Char bitmap = 5 columns
	for (int8_t i=0; i<5; i++) {
 80025d2:	2325      	movs	r3, #37	; 0x25
 80025d4:	2218      	movs	r2, #24
 80025d6:	4694      	mov	ip, r2
 80025d8:	44bc      	add	ip, r7
 80025da:	4463      	add	r3, ip
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]
 80025e0:	e1f4      	b.n	80029cc <drawChar+0x488>
		uint8_t line = font[ch*5+i];
 80025e2:	231f      	movs	r3, #31
 80025e4:	18fb      	adds	r3, r7, r3
 80025e6:	781a      	ldrb	r2, [r3, #0]
 80025e8:	0013      	movs	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	189a      	adds	r2, r3, r2
 80025ee:	2325      	movs	r3, #37	; 0x25
 80025f0:	2118      	movs	r1, #24
 80025f2:	468c      	mov	ip, r1
 80025f4:	44bc      	add	ip, r7
 80025f6:	4463      	add	r3, ip
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	b25b      	sxtb	r3, r3
 80025fc:	18d2      	adds	r2, r2, r3
 80025fe:	2324      	movs	r3, #36	; 0x24
 8002600:	2118      	movs	r1, #24
 8002602:	468c      	mov	ip, r1
 8002604:	44bc      	add	ip, r7
 8002606:	4463      	add	r3, ip
 8002608:	4993      	ldr	r1, [pc, #588]	; (8002858 <drawChar+0x314>)
 800260a:	5c8a      	ldrb	r2, [r1, r2]
 800260c:	701a      	strb	r2, [r3, #0]
		for (int8_t j=0; j<8; j++, line >>= 1) {
 800260e:	2323      	movs	r3, #35	; 0x23
 8002610:	2218      	movs	r2, #24
 8002612:	4694      	mov	ip, r2
 8002614:	44bc      	add	ip, r7
 8002616:	4463      	add	r3, ip
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]
 800261c:	e1c0      	b.n	80029a0 <drawChar+0x45c>
			// draw character pixel
			if (line & 1) {
 800261e:	2324      	movs	r3, #36	; 0x24
 8002620:	2218      	movs	r2, #24
 8002622:	4694      	mov	ip, r2
 8002624:	44bc      	add	ip, r7
 8002626:	4463      	add	r3, ip
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2201      	movs	r2, #1
 800262c:	4013      	ands	r3, r2
 800262e:	d100      	bne.n	8002632 <drawChar+0xee>
 8002630:	e0c8      	b.n	80027c4 <drawChar+0x280>
				if (textSize == 1) {
 8002632:	4b88      	ldr	r3, [pc, #544]	; (8002854 <drawChar+0x310>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d11c      	bne.n	8002674 <drawChar+0x130>
					buffer[i+j*6] = colorFixer(textColor);
 800263a:	4b88      	ldr	r3, [pc, #544]	; (800285c <drawChar+0x318>)
 800263c:	8818      	ldrh	r0, [r3, #0]
 800263e:	2325      	movs	r3, #37	; 0x25
 8002640:	2218      	movs	r2, #24
 8002642:	4694      	mov	ip, r2
 8002644:	44bc      	add	ip, r7
 8002646:	4463      	add	r3, ip
 8002648:	2100      	movs	r1, #0
 800264a:	5659      	ldrsb	r1, [r3, r1]
 800264c:	2323      	movs	r3, #35	; 0x23
 800264e:	2218      	movs	r2, #24
 8002650:	4694      	mov	ip, r2
 8002652:	44bc      	add	ip, r7
 8002654:	4463      	add	r3, ip
 8002656:	2200      	movs	r2, #0
 8002658:	569a      	ldrsb	r2, [r3, r2]
 800265a:	0013      	movs	r3, r2
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	189b      	adds	r3, r3, r2
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	18cc      	adds	r4, r1, r3
 8002664:	f7ff fc94 	bl	8001f90 <colorFixer>
 8002668:	0003      	movs	r3, r0
 800266a:	0019      	movs	r1, r3
 800266c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266e:	0062      	lsls	r2, r4, #1
 8002670:	52d1      	strh	r1, [r2, r3]
 8002672:	e17f      	b.n	8002974 <drawChar+0x430>
				}
				else {
					// indexing scheme for textSize > 1
					for (int8_t k = 0; k < textSize; k++) {
 8002674:	2322      	movs	r3, #34	; 0x22
 8002676:	2218      	movs	r2, #24
 8002678:	4694      	mov	ip, r2
 800267a:	44bc      	add	ip, r7
 800267c:	4463      	add	r3, ip
 800267e:	2200      	movs	r2, #0
 8002680:	701a      	strb	r2, [r3, #0]
 8002682:	e092      	b.n	80027aa <drawChar+0x266>
						rowOffset = textSize*6;
 8002684:	4b73      	ldr	r3, [pc, #460]	; (8002854 <drawChar+0x310>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	b29b      	uxth	r3, r3
 800268a:	1c1a      	adds	r2, r3, #0
 800268c:	1c13      	adds	r3, r2, #0
 800268e:	18db      	adds	r3, r3, r3
 8002690:	189b      	adds	r3, r3, r2
 8002692:	18db      	adds	r3, r3, r3
 8002694:	b29a      	uxth	r2, r3
 8002696:	2326      	movs	r3, #38	; 0x26
 8002698:	2118      	movs	r1, #24
 800269a:	468c      	mov	ip, r1
 800269c:	44bc      	add	ip, r7
 800269e:	4463      	add	r3, ip
 80026a0:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 80026a2:	2321      	movs	r3, #33	; 0x21
 80026a4:	2218      	movs	r2, #24
 80026a6:	4694      	mov	ip, r2
 80026a8:	44bc      	add	ip, r7
 80026aa:	4463      	add	r3, ip
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]
 80026b0:	e064      	b.n	800277c <drawChar+0x238>
							address = (textSize*textSize*j*6)+(i*textSize);
 80026b2:	4b68      	ldr	r3, [pc, #416]	; (8002854 <drawChar+0x310>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	4a66      	ldr	r2, [pc, #408]	; (8002854 <drawChar+0x310>)
 80026ba:	7812      	ldrb	r2, [r2, #0]
 80026bc:	b292      	uxth	r2, r2
 80026be:	4353      	muls	r3, r2
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	2223      	movs	r2, #35	; 0x23
 80026c4:	2118      	movs	r1, #24
 80026c6:	468c      	mov	ip, r1
 80026c8:	44bc      	add	ip, r7
 80026ca:	4462      	add	r2, ip
 80026cc:	7812      	ldrb	r2, [r2, #0]
 80026ce:	b252      	sxtb	r2, r2
 80026d0:	b292      	uxth	r2, r2
 80026d2:	4353      	muls	r3, r2
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	1c1a      	adds	r2, r3, #0
 80026d8:	1c13      	adds	r3, r2, #0
 80026da:	18db      	adds	r3, r3, r3
 80026dc:	189b      	adds	r3, r3, r2
 80026de:	18db      	adds	r3, r3, r3
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	2325      	movs	r3, #37	; 0x25
 80026e4:	2118      	movs	r1, #24
 80026e6:	468c      	mov	ip, r1
 80026e8:	44bc      	add	ip, r7
 80026ea:	4463      	add	r3, ip
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	b25b      	sxtb	r3, r3
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	4958      	ldr	r1, [pc, #352]	; (8002854 <drawChar+0x310>)
 80026f4:	7809      	ldrb	r1, [r1, #0]
 80026f6:	b289      	uxth	r1, r1
 80026f8:	434b      	muls	r3, r1
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	18d3      	adds	r3, r2, r3
 80026fe:	b29a      	uxth	r2, r3
 8002700:	210e      	movs	r1, #14
 8002702:	2018      	movs	r0, #24
 8002704:	183b      	adds	r3, r7, r0
 8002706:	185b      	adds	r3, r3, r1
 8002708:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 800270a:	2322      	movs	r3, #34	; 0x22
 800270c:	2218      	movs	r2, #24
 800270e:	4694      	mov	ip, r2
 8002710:	44bc      	add	ip, r7
 8002712:	4463      	add	r3, ip
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	b25b      	sxtb	r3, r3
 8002718:	b29b      	uxth	r3, r3
 800271a:	2226      	movs	r2, #38	; 0x26
 800271c:	2418      	movs	r4, #24
 800271e:	46a4      	mov	ip, r4
 8002720:	44bc      	add	ip, r7
 8002722:	4462      	add	r2, ip
 8002724:	8812      	ldrh	r2, [r2, #0]
 8002726:	4353      	muls	r3, r2
 8002728:	b29a      	uxth	r2, r3
 800272a:	2521      	movs	r5, #33	; 0x21
 800272c:	183b      	adds	r3, r7, r0
 800272e:	195b      	adds	r3, r3, r5
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	b25b      	sxtb	r3, r3
 8002734:	b29b      	uxth	r3, r3
 8002736:	18d3      	adds	r3, r2, r3
 8002738:	b29a      	uxth	r2, r3
 800273a:	183b      	adds	r3, r7, r0
 800273c:	185b      	adds	r3, r3, r1
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	18d3      	adds	r3, r2, r3
 8002742:	b29a      	uxth	r2, r3
 8002744:	183b      	adds	r3, r7, r0
 8002746:	185b      	adds	r3, r3, r1
 8002748:	801a      	strh	r2, [r3, #0]
							buffer[address] = colorFixer(textColor);
 800274a:	4b44      	ldr	r3, [pc, #272]	; (800285c <drawChar+0x318>)
 800274c:	881a      	ldrh	r2, [r3, #0]
 800274e:	0006      	movs	r6, r0
 8002750:	183b      	adds	r3, r7, r0
 8002752:	185b      	adds	r3, r3, r1
 8002754:	2400      	movs	r4, #0
 8002756:	5f1c      	ldrsh	r4, [r3, r4]
 8002758:	0010      	movs	r0, r2
 800275a:	f7ff fc19 	bl	8001f90 <colorFixer>
 800275e:	0003      	movs	r3, r0
 8002760:	0019      	movs	r1, r3
 8002762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002764:	0062      	lsls	r2, r4, #1
 8002766:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 8002768:	19bb      	adds	r3, r7, r6
 800276a:	195b      	adds	r3, r3, r5
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	b25b      	sxtb	r3, r3
 8002770:	b2db      	uxtb	r3, r3
 8002772:	3301      	adds	r3, #1
 8002774:	b2da      	uxtb	r2, r3
 8002776:	19bb      	adds	r3, r7, r6
 8002778:	195b      	adds	r3, r3, r5
 800277a:	701a      	strb	r2, [r3, #0]
 800277c:	2321      	movs	r3, #33	; 0x21
 800277e:	2218      	movs	r2, #24
 8002780:	4694      	mov	ip, r2
 8002782:	44bc      	add	ip, r7
 8002784:	4463      	add	r3, ip
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	b25b      	sxtb	r3, r3
 800278a:	4a32      	ldr	r2, [pc, #200]	; (8002854 <drawChar+0x310>)
 800278c:	7812      	ldrb	r2, [r2, #0]
 800278e:	4293      	cmp	r3, r2
 8002790:	db8f      	blt.n	80026b2 <drawChar+0x16e>
					for (int8_t k = 0; k < textSize; k++) {
 8002792:	2122      	movs	r1, #34	; 0x22
 8002794:	2018      	movs	r0, #24
 8002796:	183b      	adds	r3, r7, r0
 8002798:	185b      	adds	r3, r3, r1
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	b25b      	sxtb	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	3301      	adds	r3, #1
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	183b      	adds	r3, r7, r0
 80027a6:	185b      	adds	r3, r3, r1
 80027a8:	701a      	strb	r2, [r3, #0]
 80027aa:	2322      	movs	r3, #34	; 0x22
 80027ac:	2218      	movs	r2, #24
 80027ae:	4694      	mov	ip, r2
 80027b0:	44bc      	add	ip, r7
 80027b2:	4463      	add	r3, ip
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	b25b      	sxtb	r3, r3
 80027b8:	4a26      	ldr	r2, [pc, #152]	; (8002854 <drawChar+0x310>)
 80027ba:	7812      	ldrb	r2, [r2, #0]
 80027bc:	4293      	cmp	r3, r2
 80027be:	da00      	bge.n	80027c2 <drawChar+0x27e>
 80027c0:	e760      	b.n	8002684 <drawChar+0x140>
 80027c2:	e0d7      	b.n	8002974 <drawChar+0x430>
						}
					}
				}
			}
			// draw text background
			else if (bg != textColor) {
 80027c4:	4b26      	ldr	r3, [pc, #152]	; (8002860 <drawChar+0x31c>)
 80027c6:	881a      	ldrh	r2, [r3, #0]
 80027c8:	4b24      	ldr	r3, [pc, #144]	; (800285c <drawChar+0x318>)
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d100      	bne.n	80027d2 <drawChar+0x28e>
 80027d0:	e0d0      	b.n	8002974 <drawChar+0x430>
				if (textSize == 1) {
 80027d2:	4b20      	ldr	r3, [pc, #128]	; (8002854 <drawChar+0x310>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d11c      	bne.n	8002814 <drawChar+0x2d0>
					buffer[i+j*6] = colorFixer(bg);
 80027da:	4b21      	ldr	r3, [pc, #132]	; (8002860 <drawChar+0x31c>)
 80027dc:	8818      	ldrh	r0, [r3, #0]
 80027de:	2325      	movs	r3, #37	; 0x25
 80027e0:	2218      	movs	r2, #24
 80027e2:	4694      	mov	ip, r2
 80027e4:	44bc      	add	ip, r7
 80027e6:	4463      	add	r3, ip
 80027e8:	2100      	movs	r1, #0
 80027ea:	5659      	ldrsb	r1, [r3, r1]
 80027ec:	2323      	movs	r3, #35	; 0x23
 80027ee:	2218      	movs	r2, #24
 80027f0:	4694      	mov	ip, r2
 80027f2:	44bc      	add	ip, r7
 80027f4:	4463      	add	r3, ip
 80027f6:	2200      	movs	r2, #0
 80027f8:	569a      	ldrsb	r2, [r3, r2]
 80027fa:	0013      	movs	r3, r2
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	189b      	adds	r3, r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	18cc      	adds	r4, r1, r3
 8002804:	f7ff fbc4 	bl	8001f90 <colorFixer>
 8002808:	0003      	movs	r3, r0
 800280a:	0019      	movs	r1, r3
 800280c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280e:	0062      	lsls	r2, r4, #1
 8002810:	52d1      	strh	r1, [r2, r3]
 8002812:	e0af      	b.n	8002974 <drawChar+0x430>
				}
				else {
					for (int8_t k = 0; k < textSize; k++) {
 8002814:	2320      	movs	r3, #32
 8002816:	2218      	movs	r2, #24
 8002818:	4694      	mov	ip, r2
 800281a:	44bc      	add	ip, r7
 800281c:	4463      	add	r3, ip
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]
 8002822:	e09b      	b.n	800295c <drawChar+0x418>
						rowOffset = textSize*6;
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <drawChar+0x310>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	b29b      	uxth	r3, r3
 800282a:	1c1a      	adds	r2, r3, #0
 800282c:	1c13      	adds	r3, r2, #0
 800282e:	18db      	adds	r3, r3, r3
 8002830:	189b      	adds	r3, r3, r2
 8002832:	18db      	adds	r3, r3, r3
 8002834:	b29a      	uxth	r2, r3
 8002836:	2326      	movs	r3, #38	; 0x26
 8002838:	2118      	movs	r1, #24
 800283a:	468c      	mov	ip, r1
 800283c:	44bc      	add	ip, r7
 800283e:	4463      	add	r3, ip
 8002840:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 8002842:	231f      	movs	r3, #31
 8002844:	2218      	movs	r2, #24
 8002846:	4694      	mov	ip, r2
 8002848:	44bc      	add	ip, r7
 800284a:	4463      	add	r3, ip
 800284c:	2200      	movs	r2, #0
 800284e:	701a      	strb	r2, [r3, #0]
 8002850:	e06d      	b.n	800292e <drawChar+0x3ea>
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	200000ee 	.word	0x200000ee
 8002858:	0800c020 	.word	0x0800c020
 800285c:	200000f0 	.word	0x200000f0
 8002860:	200000f2 	.word	0x200000f2
							address = (textSize*textSize*j*6)+(i*textSize);
 8002864:	4bda      	ldr	r3, [pc, #872]	; (8002bd0 <drawChar+0x68c>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	b29b      	uxth	r3, r3
 800286a:	4ad9      	ldr	r2, [pc, #868]	; (8002bd0 <drawChar+0x68c>)
 800286c:	7812      	ldrb	r2, [r2, #0]
 800286e:	b292      	uxth	r2, r2
 8002870:	4353      	muls	r3, r2
 8002872:	b29b      	uxth	r3, r3
 8002874:	2223      	movs	r2, #35	; 0x23
 8002876:	2118      	movs	r1, #24
 8002878:	468c      	mov	ip, r1
 800287a:	44bc      	add	ip, r7
 800287c:	4462      	add	r2, ip
 800287e:	7812      	ldrb	r2, [r2, #0]
 8002880:	b252      	sxtb	r2, r2
 8002882:	b292      	uxth	r2, r2
 8002884:	4353      	muls	r3, r2
 8002886:	b29b      	uxth	r3, r3
 8002888:	1c1a      	adds	r2, r3, #0
 800288a:	1c13      	adds	r3, r2, #0
 800288c:	18db      	adds	r3, r3, r3
 800288e:	189b      	adds	r3, r3, r2
 8002890:	18db      	adds	r3, r3, r3
 8002892:	b29a      	uxth	r2, r3
 8002894:	2325      	movs	r3, #37	; 0x25
 8002896:	2118      	movs	r1, #24
 8002898:	468c      	mov	ip, r1
 800289a:	44bc      	add	ip, r7
 800289c:	4463      	add	r3, ip
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	b25b      	sxtb	r3, r3
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	49ca      	ldr	r1, [pc, #808]	; (8002bd0 <drawChar+0x68c>)
 80028a6:	7809      	ldrb	r1, [r1, #0]
 80028a8:	b289      	uxth	r1, r1
 80028aa:	434b      	muls	r3, r1
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	18d3      	adds	r3, r2, r3
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	210e      	movs	r1, #14
 80028b4:	2018      	movs	r0, #24
 80028b6:	183b      	adds	r3, r7, r0
 80028b8:	185b      	adds	r3, r3, r1
 80028ba:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 80028bc:	2320      	movs	r3, #32
 80028be:	2218      	movs	r2, #24
 80028c0:	4694      	mov	ip, r2
 80028c2:	44bc      	add	ip, r7
 80028c4:	4463      	add	r3, ip
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	b25b      	sxtb	r3, r3
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	2226      	movs	r2, #38	; 0x26
 80028ce:	2418      	movs	r4, #24
 80028d0:	46a4      	mov	ip, r4
 80028d2:	44bc      	add	ip, r7
 80028d4:	4462      	add	r2, ip
 80028d6:	8812      	ldrh	r2, [r2, #0]
 80028d8:	4353      	muls	r3, r2
 80028da:	b29a      	uxth	r2, r3
 80028dc:	251f      	movs	r5, #31
 80028de:	183b      	adds	r3, r7, r0
 80028e0:	195b      	adds	r3, r3, r5
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	b25b      	sxtb	r3, r3
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	18d3      	adds	r3, r2, r3
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	183b      	adds	r3, r7, r0
 80028ee:	185b      	adds	r3, r3, r1
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	18d3      	adds	r3, r2, r3
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	183b      	adds	r3, r7, r0
 80028f8:	185b      	adds	r3, r3, r1
 80028fa:	801a      	strh	r2, [r3, #0]
							buffer[address] = colorFixer(bg);
 80028fc:	4bb5      	ldr	r3, [pc, #724]	; (8002bd4 <drawChar+0x690>)
 80028fe:	881a      	ldrh	r2, [r3, #0]
 8002900:	0006      	movs	r6, r0
 8002902:	183b      	adds	r3, r7, r0
 8002904:	185b      	adds	r3, r3, r1
 8002906:	2400      	movs	r4, #0
 8002908:	5f1c      	ldrsh	r4, [r3, r4]
 800290a:	0010      	movs	r0, r2
 800290c:	f7ff fb40 	bl	8001f90 <colorFixer>
 8002910:	0003      	movs	r3, r0
 8002912:	0019      	movs	r1, r3
 8002914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002916:	0062      	lsls	r2, r4, #1
 8002918:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 800291a:	19bb      	adds	r3, r7, r6
 800291c:	195b      	adds	r3, r3, r5
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	b25b      	sxtb	r3, r3
 8002922:	b2db      	uxtb	r3, r3
 8002924:	3301      	adds	r3, #1
 8002926:	b2da      	uxtb	r2, r3
 8002928:	19bb      	adds	r3, r7, r6
 800292a:	195b      	adds	r3, r3, r5
 800292c:	701a      	strb	r2, [r3, #0]
 800292e:	231f      	movs	r3, #31
 8002930:	2218      	movs	r2, #24
 8002932:	4694      	mov	ip, r2
 8002934:	44bc      	add	ip, r7
 8002936:	4463      	add	r3, ip
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	b25b      	sxtb	r3, r3
 800293c:	4aa4      	ldr	r2, [pc, #656]	; (8002bd0 <drawChar+0x68c>)
 800293e:	7812      	ldrb	r2, [r2, #0]
 8002940:	4293      	cmp	r3, r2
 8002942:	db8f      	blt.n	8002864 <drawChar+0x320>
					for (int8_t k = 0; k < textSize; k++) {
 8002944:	2120      	movs	r1, #32
 8002946:	2018      	movs	r0, #24
 8002948:	183b      	adds	r3, r7, r0
 800294a:	185b      	adds	r3, r3, r1
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	b25b      	sxtb	r3, r3
 8002950:	b2db      	uxtb	r3, r3
 8002952:	3301      	adds	r3, #1
 8002954:	b2da      	uxtb	r2, r3
 8002956:	183b      	adds	r3, r7, r0
 8002958:	185b      	adds	r3, r3, r1
 800295a:	701a      	strb	r2, [r3, #0]
 800295c:	2320      	movs	r3, #32
 800295e:	2218      	movs	r2, #24
 8002960:	4694      	mov	ip, r2
 8002962:	44bc      	add	ip, r7
 8002964:	4463      	add	r3, ip
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	b25b      	sxtb	r3, r3
 800296a:	4a99      	ldr	r2, [pc, #612]	; (8002bd0 <drawChar+0x68c>)
 800296c:	7812      	ldrb	r2, [r2, #0]
 800296e:	4293      	cmp	r3, r2
 8002970:	da00      	bge.n	8002974 <drawChar+0x430>
 8002972:	e757      	b.n	8002824 <drawChar+0x2e0>
		for (int8_t j=0; j<8; j++, line >>= 1) {
 8002974:	2123      	movs	r1, #35	; 0x23
 8002976:	2018      	movs	r0, #24
 8002978:	183b      	adds	r3, r7, r0
 800297a:	185b      	adds	r3, r3, r1
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	b25b      	sxtb	r3, r3
 8002980:	b2db      	uxtb	r3, r3
 8002982:	3301      	adds	r3, #1
 8002984:	b2da      	uxtb	r2, r3
 8002986:	183b      	adds	r3, r7, r0
 8002988:	185b      	adds	r3, r3, r1
 800298a:	701a      	strb	r2, [r3, #0]
 800298c:	2224      	movs	r2, #36	; 0x24
 800298e:	183b      	adds	r3, r7, r0
 8002990:	189b      	adds	r3, r3, r2
 8002992:	2118      	movs	r1, #24
 8002994:	468c      	mov	ip, r1
 8002996:	44bc      	add	ip, r7
 8002998:	4462      	add	r2, ip
 800299a:	7812      	ldrb	r2, [r2, #0]
 800299c:	0852      	lsrs	r2, r2, #1
 800299e:	701a      	strb	r2, [r3, #0]
 80029a0:	2323      	movs	r3, #35	; 0x23
 80029a2:	2218      	movs	r2, #24
 80029a4:	4694      	mov	ip, r2
 80029a6:	44bc      	add	ip, r7
 80029a8:	4463      	add	r3, ip
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	b25b      	sxtb	r3, r3
 80029ae:	2b07      	cmp	r3, #7
 80029b0:	dc00      	bgt.n	80029b4 <drawChar+0x470>
 80029b2:	e634      	b.n	800261e <drawChar+0xda>
	for (int8_t i=0; i<5; i++) {
 80029b4:	2125      	movs	r1, #37	; 0x25
 80029b6:	2018      	movs	r0, #24
 80029b8:	183b      	adds	r3, r7, r0
 80029ba:	185b      	adds	r3, r3, r1
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	b25b      	sxtb	r3, r3
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	3301      	adds	r3, #1
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	183b      	adds	r3, r7, r0
 80029c8:	185b      	adds	r3, r3, r1
 80029ca:	701a      	strb	r2, [r3, #0]
 80029cc:	2325      	movs	r3, #37	; 0x25
 80029ce:	2218      	movs	r2, #24
 80029d0:	4694      	mov	ip, r2
 80029d2:	44bc      	add	ip, r7
 80029d4:	4463      	add	r3, ip
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	b25b      	sxtb	r3, r3
 80029da:	2b04      	cmp	r3, #4
 80029dc:	dc00      	bgt.n	80029e0 <drawChar+0x49c>
 80029de:	e600      	b.n	80025e2 <drawChar+0x9e>
		}
	}

	// If opaque, draw vertical line for last column
	// for character 1px kerning
	if (bg != textColor) {
 80029e0:	4b7c      	ldr	r3, [pc, #496]	; (8002bd4 <drawChar+0x690>)
 80029e2:	881a      	ldrh	r2, [r3, #0]
 80029e4:	4b7c      	ldr	r3, [pc, #496]	; (8002bd8 <drawChar+0x694>)
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d100      	bne.n	80029ee <drawChar+0x4aa>
 80029ec:	e0ca      	b.n	8002b84 <drawChar+0x640>
		for (int8_t j = 0; j < 8; j++) {
 80029ee:	231e      	movs	r3, #30
 80029f0:	2218      	movs	r2, #24
 80029f2:	4694      	mov	ip, r2
 80029f4:	44bc      	add	ip, r7
 80029f6:	4463      	add	r3, ip
 80029f8:	2200      	movs	r2, #0
 80029fa:	701a      	strb	r2, [r3, #0]
 80029fc:	e0b8      	b.n	8002b70 <drawChar+0x62c>
			if (textSize == 1) {
 80029fe:	4b74      	ldr	r3, [pc, #464]	; (8002bd0 <drawChar+0x68c>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d116      	bne.n	8002a34 <drawChar+0x4f0>
				buffer[5+j*6] = colorFixer(bg);
 8002a06:	4b73      	ldr	r3, [pc, #460]	; (8002bd4 <drawChar+0x690>)
 8002a08:	8819      	ldrh	r1, [r3, #0]
 8002a0a:	231e      	movs	r3, #30
 8002a0c:	2218      	movs	r2, #24
 8002a0e:	4694      	mov	ip, r2
 8002a10:	44bc      	add	ip, r7
 8002a12:	4463      	add	r3, ip
 8002a14:	2200      	movs	r2, #0
 8002a16:	569a      	ldrsb	r2, [r3, r2]
 8002a18:	0013      	movs	r3, r2
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	189b      	adds	r3, r3, r2
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	1d5c      	adds	r4, r3, #5
 8002a22:	0008      	movs	r0, r1
 8002a24:	f7ff fab4 	bl	8001f90 <colorFixer>
 8002a28:	0003      	movs	r3, r0
 8002a2a:	0019      	movs	r1, r3
 8002a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2e:	0062      	lsls	r2, r4, #1
 8002a30:	52d1      	strh	r1, [r2, r3]
 8002a32:	e091      	b.n	8002b58 <drawChar+0x614>
			}
			else {
				for (int8_t k = 0; k < textSize; k++) {
 8002a34:	231d      	movs	r3, #29
 8002a36:	2218      	movs	r2, #24
 8002a38:	4694      	mov	ip, r2
 8002a3a:	44bc      	add	ip, r7
 8002a3c:	4463      	add	r3, ip
 8002a3e:	2200      	movs	r2, #0
 8002a40:	701a      	strb	r2, [r3, #0]
 8002a42:	e07d      	b.n	8002b40 <drawChar+0x5fc>
					for (int8_t l = 0; l < textSize; l++) {
 8002a44:	231c      	movs	r3, #28
 8002a46:	2218      	movs	r2, #24
 8002a48:	4694      	mov	ip, r2
 8002a4a:	44bc      	add	ip, r7
 8002a4c:	4463      	add	r3, ip
 8002a4e:	2200      	movs	r2, #0
 8002a50:	701a      	strb	r2, [r3, #0]
 8002a52:	e05e      	b.n	8002b12 <drawChar+0x5ce>
						address = (textSize*textSize*j*6)+(5*textSize);
 8002a54:	4b5e      	ldr	r3, [pc, #376]	; (8002bd0 <drawChar+0x68c>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	4a5d      	ldr	r2, [pc, #372]	; (8002bd0 <drawChar+0x68c>)
 8002a5c:	7812      	ldrb	r2, [r2, #0]
 8002a5e:	b292      	uxth	r2, r2
 8002a60:	4353      	muls	r3, r2
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	221e      	movs	r2, #30
 8002a66:	2118      	movs	r1, #24
 8002a68:	468c      	mov	ip, r1
 8002a6a:	44bc      	add	ip, r7
 8002a6c:	4462      	add	r2, ip
 8002a6e:	7812      	ldrb	r2, [r2, #0]
 8002a70:	b252      	sxtb	r2, r2
 8002a72:	b292      	uxth	r2, r2
 8002a74:	4353      	muls	r3, r2
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	1c1a      	adds	r2, r3, #0
 8002a7a:	1c13      	adds	r3, r2, #0
 8002a7c:	18db      	adds	r3, r3, r3
 8002a7e:	189b      	adds	r3, r3, r2
 8002a80:	18db      	adds	r3, r3, r3
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	4b52      	ldr	r3, [pc, #328]	; (8002bd0 <drawChar+0x68c>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	1c19      	adds	r1, r3, #0
 8002a8c:	0089      	lsls	r1, r1, #2
 8002a8e:	18cb      	adds	r3, r1, r3
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	18d3      	adds	r3, r2, r3
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	210e      	movs	r1, #14
 8002a98:	2018      	movs	r0, #24
 8002a9a:	183b      	adds	r3, r7, r0
 8002a9c:	185b      	adds	r3, r3, r1
 8002a9e:	801a      	strh	r2, [r3, #0]
						address += rowOffset*k+l;
 8002aa0:	231d      	movs	r3, #29
 8002aa2:	2218      	movs	r2, #24
 8002aa4:	4694      	mov	ip, r2
 8002aa6:	44bc      	add	ip, r7
 8002aa8:	4463      	add	r3, ip
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	b25b      	sxtb	r3, r3
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	2226      	movs	r2, #38	; 0x26
 8002ab2:	2418      	movs	r4, #24
 8002ab4:	46a4      	mov	ip, r4
 8002ab6:	44bc      	add	ip, r7
 8002ab8:	4462      	add	r2, ip
 8002aba:	8812      	ldrh	r2, [r2, #0]
 8002abc:	4353      	muls	r3, r2
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	251c      	movs	r5, #28
 8002ac2:	183b      	adds	r3, r7, r0
 8002ac4:	195b      	adds	r3, r3, r5
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	b25b      	sxtb	r3, r3
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	18d3      	adds	r3, r2, r3
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	183b      	adds	r3, r7, r0
 8002ad2:	185b      	adds	r3, r3, r1
 8002ad4:	881b      	ldrh	r3, [r3, #0]
 8002ad6:	18d3      	adds	r3, r2, r3
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	183b      	adds	r3, r7, r0
 8002adc:	185b      	adds	r3, r3, r1
 8002ade:	801a      	strh	r2, [r3, #0]
						buffer[address] = colorFixer(bg);
 8002ae0:	4b3c      	ldr	r3, [pc, #240]	; (8002bd4 <drawChar+0x690>)
 8002ae2:	881a      	ldrh	r2, [r3, #0]
 8002ae4:	0006      	movs	r6, r0
 8002ae6:	183b      	adds	r3, r7, r0
 8002ae8:	185b      	adds	r3, r3, r1
 8002aea:	2400      	movs	r4, #0
 8002aec:	5f1c      	ldrsh	r4, [r3, r4]
 8002aee:	0010      	movs	r0, r2
 8002af0:	f7ff fa4e 	bl	8001f90 <colorFixer>
 8002af4:	0003      	movs	r3, r0
 8002af6:	0019      	movs	r1, r3
 8002af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afa:	0062      	lsls	r2, r4, #1
 8002afc:	52d1      	strh	r1, [r2, r3]
					for (int8_t l = 0; l < textSize; l++) {
 8002afe:	19bb      	adds	r3, r7, r6
 8002b00:	195b      	adds	r3, r3, r5
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	b25b      	sxtb	r3, r3
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	3301      	adds	r3, #1
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	19bb      	adds	r3, r7, r6
 8002b0e:	195b      	adds	r3, r3, r5
 8002b10:	701a      	strb	r2, [r3, #0]
 8002b12:	231c      	movs	r3, #28
 8002b14:	2218      	movs	r2, #24
 8002b16:	4694      	mov	ip, r2
 8002b18:	44bc      	add	ip, r7
 8002b1a:	4463      	add	r3, ip
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	b25b      	sxtb	r3, r3
 8002b20:	4a2b      	ldr	r2, [pc, #172]	; (8002bd0 <drawChar+0x68c>)
 8002b22:	7812      	ldrb	r2, [r2, #0]
 8002b24:	4293      	cmp	r3, r2
 8002b26:	db95      	blt.n	8002a54 <drawChar+0x510>
				for (int8_t k = 0; k < textSize; k++) {
 8002b28:	211d      	movs	r1, #29
 8002b2a:	2018      	movs	r0, #24
 8002b2c:	183b      	adds	r3, r7, r0
 8002b2e:	185b      	adds	r3, r3, r1
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	b25b      	sxtb	r3, r3
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	3301      	adds	r3, #1
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	183b      	adds	r3, r7, r0
 8002b3c:	185b      	adds	r3, r3, r1
 8002b3e:	701a      	strb	r2, [r3, #0]
 8002b40:	231d      	movs	r3, #29
 8002b42:	2218      	movs	r2, #24
 8002b44:	4694      	mov	ip, r2
 8002b46:	44bc      	add	ip, r7
 8002b48:	4463      	add	r3, ip
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	b25b      	sxtb	r3, r3
 8002b4e:	4a20      	ldr	r2, [pc, #128]	; (8002bd0 <drawChar+0x68c>)
 8002b50:	7812      	ldrb	r2, [r2, #0]
 8002b52:	4293      	cmp	r3, r2
 8002b54:	da00      	bge.n	8002b58 <drawChar+0x614>
 8002b56:	e775      	b.n	8002a44 <drawChar+0x500>
		for (int8_t j = 0; j < 8; j++) {
 8002b58:	211e      	movs	r1, #30
 8002b5a:	2018      	movs	r0, #24
 8002b5c:	183b      	adds	r3, r7, r0
 8002b5e:	185b      	adds	r3, r3, r1
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	b25b      	sxtb	r3, r3
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	3301      	adds	r3, #1
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	183b      	adds	r3, r7, r0
 8002b6c:	185b      	adds	r3, r3, r1
 8002b6e:	701a      	strb	r2, [r3, #0]
 8002b70:	231e      	movs	r3, #30
 8002b72:	2218      	movs	r2, #24
 8002b74:	4694      	mov	ip, r2
 8002b76:	44bc      	add	ip, r7
 8002b78:	4463      	add	r3, ip
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	b25b      	sxtb	r3, r3
 8002b7e:	2b07      	cmp	r3, #7
 8002b80:	dc00      	bgt.n	8002b84 <drawChar+0x640>
 8002b82:	e73c      	b.n	80029fe <drawChar+0x4ba>
				}
			}
		}
	}

	drawBuffer(cursorX, cursorY, 6*textSize, 8*textSize, buffer, bufferSize, hspi);
 8002b84:	4b15      	ldr	r3, [pc, #84]	; (8002bdc <drawChar+0x698>)
 8002b86:	7818      	ldrb	r0, [r3, #0]
 8002b88:	4b15      	ldr	r3, [pc, #84]	; (8002be0 <drawChar+0x69c>)
 8002b8a:	7819      	ldrb	r1, [r3, #0]
 8002b8c:	4b10      	ldr	r3, [pc, #64]	; (8002bd0 <drawChar+0x68c>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	1c1a      	adds	r2, r3, #0
 8002b92:	1c13      	adds	r3, r2, #0
 8002b94:	18db      	adds	r3, r3, r3
 8002b96:	189b      	adds	r3, r3, r2
 8002b98:	18db      	adds	r3, r3, r3
 8002b9a:	b2dc      	uxtb	r4, r3
 8002b9c:	4b0c      	ldr	r3, [pc, #48]	; (8002bd0 <drawChar+0x68c>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	b2dd      	uxtb	r5, r3
 8002ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	9202      	str	r2, [sp, #8]
 8002baa:	221a      	movs	r2, #26
 8002bac:	2618      	movs	r6, #24
 8002bae:	46b4      	mov	ip, r6
 8002bb0:	44bc      	add	ip, r7
 8002bb2:	4462      	add	r2, ip
 8002bb4:	8812      	ldrh	r2, [r2, #0]
 8002bb6:	9201      	str	r2, [sp, #4]
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	002b      	movs	r3, r5
 8002bbc:	0022      	movs	r2, r4
 8002bbe:	f7ff fb58 	bl	8002272 <drawBuffer>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	469d      	mov	sp, r3
}
 8002bc6:	46c0      	nop			; (mov r8, r8)
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	b011      	add	sp, #68	; 0x44
 8002bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	200000ee 	.word	0x200000ee
 8002bd4:	200000f2 	.word	0x200000f2
 8002bd8:	200000f0 	.word	0x200000f0
 8002bdc:	200000ec 	.word	0x200000ec
 8002be0:	200000ed 	.word	0x200000ed

08002be4 <drawText>:

// draws character strings
void drawText(const char *str, SPI_HandleTypeDef *hspi) {
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
	for (int i = 0; str[i] != '\0'; i++) {
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	e01d      	b.n	8002c30 <drawText+0x4c>
		drawChar(str[i], hspi);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	18d3      	adds	r3, r2, r3
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	0011      	movs	r1, r2
 8002c00:	0018      	movs	r0, r3
 8002c02:	f7ff fc9f 	bl	8002544 <drawChar>

		// moves cursor on every character print so it's not printed to the same place
		setCursor(cursorX+textSize*6, cursorY);
 8002c06:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <drawText+0x60>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	1c1a      	adds	r2, r3, #0
 8002c0c:	1c13      	adds	r3, r2, #0
 8002c0e:	18db      	adds	r3, r3, r3
 8002c10:	189b      	adds	r3, r3, r2
 8002c12:	18db      	adds	r3, r3, r3
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <drawText+0x64>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	18d3      	adds	r3, r2, r3
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <drawText+0x68>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	0019      	movs	r1, r3
 8002c24:	0010      	movs	r0, r2
 8002c26:	f000 f9c5 	bl	8002fb4 <setCursor>
	for (int i = 0; str[i] != '\0'; i++) {
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	18d3      	adds	r3, r2, r3
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1db      	bne.n	8002bf4 <drawText+0x10>
	}
}
 8002c3c:	46c0      	nop			; (mov r8, r8)
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	b004      	add	sp, #16
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	200000ee 	.word	0x200000ee
 8002c48:	200000ec 	.word	0x200000ec
 8002c4c:	200000ed 	.word	0x200000ed

08002c50 <drawTextAt>:

// drawText, but coordinates as arguments. coordinates are for upper left bound
void drawTextAt(uint8_t x, uint8_t y, const char *str, SPI_HandleTypeDef *hspi) {
 8002c50:	b590      	push	{r4, r7, lr}
 8002c52:	b087      	sub	sp, #28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60ba      	str	r2, [r7, #8]
 8002c58:	607b      	str	r3, [r7, #4]
 8002c5a:	240f      	movs	r4, #15
 8002c5c:	193b      	adds	r3, r7, r4
 8002c5e:	1c02      	adds	r2, r0, #0
 8002c60:	701a      	strb	r2, [r3, #0]
 8002c62:	200e      	movs	r0, #14
 8002c64:	183b      	adds	r3, r7, r0
 8002c66:	1c0a      	adds	r2, r1, #0
 8002c68:	701a      	strb	r2, [r3, #0]
	// add text wrap
	int i = 0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	617b      	str	r3, [r7, #20]
	setCursor(x,y);
 8002c6e:	183b      	adds	r3, r7, r0
 8002c70:	781a      	ldrb	r2, [r3, #0]
 8002c72:	193b      	adds	r3, r7, r4
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	0011      	movs	r1, r2
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f000 f99b 	bl	8002fb4 <setCursor>
	for (i = 0; str[i] != '\0'; i++) {
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	e01d      	b.n	8002cc0 <drawTextAt+0x70>
		drawChar(str[i], hspi);
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	18d3      	adds	r3, r2, r3
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	0011      	movs	r1, r2
 8002c90:	0018      	movs	r0, r3
 8002c92:	f7ff fc57 	bl	8002544 <drawChar>
		setCursor(cursorX+textSize*6, cursorY);
 8002c96:	4b0f      	ldr	r3, [pc, #60]	; (8002cd4 <drawTextAt+0x84>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	1c1a      	adds	r2, r3, #0
 8002c9c:	1c13      	adds	r3, r2, #0
 8002c9e:	18db      	adds	r3, r3, r3
 8002ca0:	189b      	adds	r3, r3, r2
 8002ca2:	18db      	adds	r3, r3, r3
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	4b0c      	ldr	r3, [pc, #48]	; (8002cd8 <drawTextAt+0x88>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	18d3      	adds	r3, r2, r3
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	4b0b      	ldr	r3, [pc, #44]	; (8002cdc <drawTextAt+0x8c>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	0019      	movs	r1, r3
 8002cb4:	0010      	movs	r0, r2
 8002cb6:	f000 f97d 	bl	8002fb4 <setCursor>
	for (i = 0; str[i] != '\0'; i++) {
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	18d3      	adds	r3, r2, r3
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1db      	bne.n	8002c84 <drawTextAt+0x34>
	}
}
 8002ccc:	46c0      	nop			; (mov r8, r8)
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	b007      	add	sp, #28
 8002cd2:	bd90      	pop	{r4, r7, pc}
 8002cd4:	200000ee 	.word	0x200000ee
 8002cd8:	200000ec 	.word	0x200000ec
 8002cdc:	200000ed 	.word	0x200000ed

08002ce0 <drawCenteredText>:

// draws text centered on an x coordinate. y is upper bound of box
void drawCenteredText(uint8_t x_center, uint8_t y, const char *str, SPI_HandleTypeDef *hspi) {
 8002ce0:	b590      	push	{r4, r7, lr}
 8002ce2:	b089      	sub	sp, #36	; 0x24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60ba      	str	r2, [r7, #8]
 8002ce8:	607b      	str	r3, [r7, #4]
 8002cea:	230f      	movs	r3, #15
 8002cec:	18fb      	adds	r3, r7, r3
 8002cee:	1c02      	adds	r2, r0, #0
 8002cf0:	701a      	strb	r2, [r3, #0]
 8002cf2:	240e      	movs	r4, #14
 8002cf4:	193b      	adds	r3, r7, r4
 8002cf6:	1c0a      	adds	r2, r1, #0
 8002cf8:	701a      	strb	r2, [r3, #0]
	uint8_t strSize = strlen(str);
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f7fd fa03 	bl	8000108 <strlen>
 8002d02:	0002      	movs	r2, r0
 8002d04:	231f      	movs	r3, #31
 8002d06:	18fb      	adds	r3, r7, r3
 8002d08:	701a      	strb	r2, [r3, #0]
	// bounds checking. text box needed to print text should not end up out of bounds
	// also calculating what bounds of text box should be
	if (y+textSize*8 > HEIGHT) return;
 8002d0a:	193b      	adds	r3, r7, r4
 8002d0c:	781a      	ldrb	r2, [r3, #0]
 8002d0e:	4b24      	ldr	r3, [pc, #144]	; (8002da0 <drawCenteredText+0xc0>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	18d3      	adds	r3, r2, r3
 8002d16:	2ba0      	cmp	r3, #160	; 0xa0
 8002d18:	dc3a      	bgt.n	8002d90 <drawCenteredText+0xb0>
	int leftBound = x_center-(strSize*textSize*6)/2;
 8002d1a:	230f      	movs	r3, #15
 8002d1c:	18fb      	adds	r3, r7, r3
 8002d1e:	7819      	ldrb	r1, [r3, #0]
 8002d20:	231f      	movs	r3, #31
 8002d22:	18fb      	adds	r3, r7, r3
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	4a1e      	ldr	r2, [pc, #120]	; (8002da0 <drawCenteredText+0xc0>)
 8002d28:	7812      	ldrb	r2, [r2, #0]
 8002d2a:	435a      	muls	r2, r3
 8002d2c:	0013      	movs	r3, r2
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	189b      	adds	r3, r3, r2
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	d500      	bpl.n	8002d38 <drawCenteredText+0x58>
 8002d36:	3301      	adds	r3, #1
 8002d38:	105b      	asrs	r3, r3, #1
 8002d3a:	425b      	negs	r3, r3
 8002d3c:	18cb      	adds	r3, r1, r3
 8002d3e:	61bb      	str	r3, [r7, #24]
	int rightBound = x_center+(strSize*textSize*6)/2;
 8002d40:	230f      	movs	r3, #15
 8002d42:	18fb      	adds	r3, r7, r3
 8002d44:	7819      	ldrb	r1, [r3, #0]
 8002d46:	231f      	movs	r3, #31
 8002d48:	18fb      	adds	r3, r7, r3
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	4a14      	ldr	r2, [pc, #80]	; (8002da0 <drawCenteredText+0xc0>)
 8002d4e:	7812      	ldrb	r2, [r2, #0]
 8002d50:	435a      	muls	r2, r3
 8002d52:	0013      	movs	r3, r2
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	189b      	adds	r3, r3, r2
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	d500      	bpl.n	8002d5e <drawCenteredText+0x7e>
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	105b      	asrs	r3, r3, #1
 8002d60:	18cb      	adds	r3, r1, r3
 8002d62:	617b      	str	r3, [r7, #20]
	if (leftBound < 0) return;
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	db14      	blt.n	8002d94 <drawCenteredText+0xb4>
	if (rightBound > WIDTH) return;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	2b80      	cmp	r3, #128	; 0x80
 8002d6e:	dc13      	bgt.n	8002d98 <drawCenteredText+0xb8>

	setCursor(leftBound, y);
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	230e      	movs	r3, #14
 8002d76:	18fb      	adds	r3, r7, r3
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	0019      	movs	r1, r3
 8002d7c:	0010      	movs	r0, r2
 8002d7e:	f000 f919 	bl	8002fb4 <setCursor>
	drawText(str, hspi);
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	0011      	movs	r1, r2
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f7ff ff2b 	bl	8002be4 <drawText>
 8002d8e:	e004      	b.n	8002d9a <drawCenteredText+0xba>
	if (y+textSize*8 > HEIGHT) return;
 8002d90:	46c0      	nop			; (mov r8, r8)
 8002d92:	e002      	b.n	8002d9a <drawCenteredText+0xba>
	if (leftBound < 0) return;
 8002d94:	46c0      	nop			; (mov r8, r8)
 8002d96:	e000      	b.n	8002d9a <drawCenteredText+0xba>
	if (rightBound > WIDTH) return;
 8002d98:	46c0      	nop			; (mov r8, r8)
}
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	b009      	add	sp, #36	; 0x24
 8002d9e:	bd90      	pop	{r4, r7, pc}
 8002da0:	200000ee 	.word	0x200000ee

08002da4 <drawCenteredTextWithPadding>:

// drawCenteredText, but background is filled to left and right of box
// used for cases where you're printing strings to the same place, but they have different sizes
void drawCenteredTextWithPadding(uint8_t x_center, uint8_t y, uint8_t maxLength, const char *str, SPI_HandleTypeDef *hspi) {
 8002da4:	b5b0      	push	{r4, r5, r7, lr}
 8002da6:	b088      	sub	sp, #32
 8002da8:	af02      	add	r7, sp, #8
 8002daa:	0004      	movs	r4, r0
 8002dac:	0008      	movs	r0, r1
 8002dae:	0011      	movs	r1, r2
 8002db0:	603b      	str	r3, [r7, #0]
 8002db2:	1dfb      	adds	r3, r7, #7
 8002db4:	1c22      	adds	r2, r4, #0
 8002db6:	701a      	strb	r2, [r3, #0]
 8002db8:	1dbb      	adds	r3, r7, #6
 8002dba:	1c02      	adds	r2, r0, #0
 8002dbc:	701a      	strb	r2, [r3, #0]
 8002dbe:	1d7b      	adds	r3, r7, #5
 8002dc0:	1c0a      	adds	r2, r1, #0
 8002dc2:	701a      	strb	r2, [r3, #0]
	// bounds checking. text box needed to print text should not end up out of bounds
	if (y+textSize*8 > HEIGHT) return;
 8002dc4:	1dbb      	adds	r3, r7, #6
 8002dc6:	781a      	ldrb	r2, [r3, #0]
 8002dc8:	4b60      	ldr	r3, [pc, #384]	; (8002f4c <drawCenteredTextWithPadding+0x1a8>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	18d3      	adds	r3, r2, r3
 8002dd0:	2ba0      	cmp	r3, #160	; 0xa0
 8002dd2:	dd00      	ble.n	8002dd6 <drawCenteredTextWithPadding+0x32>
 8002dd4:	e0af      	b.n	8002f36 <drawCenteredTextWithPadding+0x192>
	int leftBound = x_center-(maxLength*textSize*6)/2;
 8002dd6:	1dfb      	adds	r3, r7, #7
 8002dd8:	7819      	ldrb	r1, [r3, #0]
 8002dda:	1d7b      	adds	r3, r7, #5
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	4a5b      	ldr	r2, [pc, #364]	; (8002f4c <drawCenteredTextWithPadding+0x1a8>)
 8002de0:	7812      	ldrb	r2, [r2, #0]
 8002de2:	435a      	muls	r2, r3
 8002de4:	0013      	movs	r3, r2
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	189b      	adds	r3, r3, r2
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	d500      	bpl.n	8002df0 <drawCenteredTextWithPadding+0x4c>
 8002dee:	3301      	adds	r3, #1
 8002df0:	105b      	asrs	r3, r3, #1
 8002df2:	425b      	negs	r3, r3
 8002df4:	18cb      	adds	r3, r1, r3
 8002df6:	617b      	str	r3, [r7, #20]
	int rightBound = x_center+(maxLength*textSize*6)/2;
 8002df8:	1dfb      	adds	r3, r7, #7
 8002dfa:	7819      	ldrb	r1, [r3, #0]
 8002dfc:	1d7b      	adds	r3, r7, #5
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	4a52      	ldr	r2, [pc, #328]	; (8002f4c <drawCenteredTextWithPadding+0x1a8>)
 8002e02:	7812      	ldrb	r2, [r2, #0]
 8002e04:	435a      	muls	r2, r3
 8002e06:	0013      	movs	r3, r2
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	189b      	adds	r3, r3, r2
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	d500      	bpl.n	8002e12 <drawCenteredTextWithPadding+0x6e>
 8002e10:	3301      	adds	r3, #1
 8002e12:	105b      	asrs	r3, r3, #1
 8002e14:	18cb      	adds	r3, r1, r3
 8002e16:	613b      	str	r3, [r7, #16]
	if (leftBound < 0) return;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	da00      	bge.n	8002e20 <drawCenteredTextWithPadding+0x7c>
 8002e1e:	e08c      	b.n	8002f3a <drawCenteredTextWithPadding+0x196>
	if (rightBound > WIDTH) return;
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	2b80      	cmp	r3, #128	; 0x80
 8002e24:	dd00      	ble.n	8002e28 <drawCenteredTextWithPadding+0x84>
 8002e26:	e08a      	b.n	8002f3e <drawCenteredTextWithPadding+0x19a>

	uint8_t strSize = strlen(str);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	f7fd f96c 	bl	8000108 <strlen>
 8002e30:	0002      	movs	r2, r0
 8002e32:	210f      	movs	r1, #15
 8002e34:	187b      	adds	r3, r7, r1
 8002e36:	701a      	strb	r2, [r3, #0]
	if (maxLength < strSize) return;		// size should not be greater than max
 8002e38:	1d7a      	adds	r2, r7, #5
 8002e3a:	187b      	adds	r3, r7, r1
 8002e3c:	7812      	ldrb	r2, [r2, #0]
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d200      	bcs.n	8002e46 <drawCenteredTextWithPadding+0xa2>
 8002e44:	e07d      	b.n	8002f42 <drawCenteredTextWithPadding+0x19e>

	// draw left and right padding
	uint8_t diff = maxLength-strSize;
 8002e46:	240e      	movs	r4, #14
 8002e48:	193b      	adds	r3, r7, r4
 8002e4a:	1d79      	adds	r1, r7, #5
 8002e4c:	220f      	movs	r2, #15
 8002e4e:	18ba      	adds	r2, r7, r2
 8002e50:	7809      	ldrb	r1, [r1, #0]
 8002e52:	7812      	ldrb	r2, [r2, #0]
 8002e54:	1a8a      	subs	r2, r1, r2
 8002e56:	701a      	strb	r2, [r3, #0]
	fillRect(leftBound, y, diff*textSize*6/2, textSize*8, bg, hspi);		// math out of order to accomodate diff/2 being a non-int
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	b2d8      	uxtb	r0, r3
 8002e5c:	193b      	adds	r3, r7, r4
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	4a3a      	ldr	r2, [pc, #232]	; (8002f4c <drawCenteredTextWithPadding+0x1a8>)
 8002e62:	7812      	ldrb	r2, [r2, #0]
 8002e64:	435a      	muls	r2, r3
 8002e66:	0013      	movs	r3, r2
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	189b      	adds	r3, r3, r2
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	d500      	bpl.n	8002e72 <drawCenteredTextWithPadding+0xce>
 8002e70:	3301      	adds	r3, #1
 8002e72:	105b      	asrs	r3, r3, #1
 8002e74:	b2dc      	uxtb	r4, r3
 8002e76:	4b35      	ldr	r3, [pc, #212]	; (8002f4c <drawCenteredTextWithPadding+0x1a8>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	b2dd      	uxtb	r5, r3
 8002e7e:	4b34      	ldr	r3, [pc, #208]	; (8002f50 <drawCenteredTextWithPadding+0x1ac>)
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	1dba      	adds	r2, r7, #6
 8002e84:	7811      	ldrb	r1, [r2, #0]
 8002e86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e88:	9201      	str	r2, [sp, #4]
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	002b      	movs	r3, r5
 8002e8e:	0022      	movs	r2, r4
 8002e90:	f7ff fa91 	bl	80023b6 <fillRect>
	fillRect(rightBound-diff*textSize*6/2, y, diff*textSize*6/2, textSize*8, bg, hspi);
 8002e94:	230e      	movs	r3, #14
 8002e96:	18fb      	adds	r3, r7, r3
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	4a2c      	ldr	r2, [pc, #176]	; (8002f4c <drawCenteredTextWithPadding+0x1a8>)
 8002e9c:	7812      	ldrb	r2, [r2, #0]
 8002e9e:	435a      	muls	r2, r3
 8002ea0:	0013      	movs	r3, r2
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	189b      	adds	r3, r3, r2
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	d500      	bpl.n	8002eac <drawCenteredTextWithPadding+0x108>
 8002eaa:	3301      	adds	r3, #1
 8002eac:	105b      	asrs	r3, r3, #1
 8002eae:	425b      	negs	r3, r3
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	18d3      	adds	r3, r2, r3
 8002eb8:	b2d8      	uxtb	r0, r3
 8002eba:	230e      	movs	r3, #14
 8002ebc:	18fb      	adds	r3, r7, r3
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	4a22      	ldr	r2, [pc, #136]	; (8002f4c <drawCenteredTextWithPadding+0x1a8>)
 8002ec2:	7812      	ldrb	r2, [r2, #0]
 8002ec4:	435a      	muls	r2, r3
 8002ec6:	0013      	movs	r3, r2
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	189b      	adds	r3, r3, r2
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	d500      	bpl.n	8002ed2 <drawCenteredTextWithPadding+0x12e>
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	105b      	asrs	r3, r3, #1
 8002ed4:	b2dc      	uxtb	r4, r3
 8002ed6:	4b1d      	ldr	r3, [pc, #116]	; (8002f4c <drawCenteredTextWithPadding+0x1a8>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	b2dd      	uxtb	r5, r3
 8002ede:	4b1c      	ldr	r3, [pc, #112]	; (8002f50 <drawCenteredTextWithPadding+0x1ac>)
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	1dba      	adds	r2, r7, #6
 8002ee4:	7811      	ldrb	r1, [r2, #0]
 8002ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ee8:	9201      	str	r2, [sp, #4]
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	002b      	movs	r3, r5
 8002eee:	0022      	movs	r2, r4
 8002ef0:	f7ff fa61 	bl	80023b6 <fillRect>

	int textLeftBound = x_center-(strSize*textSize*6)/2;
 8002ef4:	1dfb      	adds	r3, r7, #7
 8002ef6:	7819      	ldrb	r1, [r3, #0]
 8002ef8:	230f      	movs	r3, #15
 8002efa:	18fb      	adds	r3, r7, r3
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	4a13      	ldr	r2, [pc, #76]	; (8002f4c <drawCenteredTextWithPadding+0x1a8>)
 8002f00:	7812      	ldrb	r2, [r2, #0]
 8002f02:	435a      	muls	r2, r3
 8002f04:	0013      	movs	r3, r2
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	189b      	adds	r3, r3, r2
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	d500      	bpl.n	8002f10 <drawCenteredTextWithPadding+0x16c>
 8002f0e:	3301      	adds	r3, #1
 8002f10:	105b      	asrs	r3, r3, #1
 8002f12:	425b      	negs	r3, r3
 8002f14:	18cb      	adds	r3, r1, r3
 8002f16:	60bb      	str	r3, [r7, #8]
	setCursor(textLeftBound, y);
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	1dbb      	adds	r3, r7, #6
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	0019      	movs	r1, r3
 8002f22:	0010      	movs	r0, r2
 8002f24:	f000 f846 	bl	8002fb4 <setCursor>
	drawText(str, hspi);
 8002f28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	0011      	movs	r1, r2
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f7ff fe58 	bl	8002be4 <drawText>
 8002f34:	e006      	b.n	8002f44 <drawCenteredTextWithPadding+0x1a0>
	if (y+textSize*8 > HEIGHT) return;
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	e004      	b.n	8002f44 <drawCenteredTextWithPadding+0x1a0>
	if (leftBound < 0) return;
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	e002      	b.n	8002f44 <drawCenteredTextWithPadding+0x1a0>
	if (rightBound > WIDTH) return;
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	e000      	b.n	8002f44 <drawCenteredTextWithPadding+0x1a0>
	if (maxLength < strSize) return;		// size should not be greater than max
 8002f42:	46c0      	nop			; (mov r8, r8)
}
 8002f44:	46bd      	mov	sp, r7
 8002f46:	b006      	add	sp, #24
 8002f48:	bdb0      	pop	{r4, r5, r7, pc}
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	200000ee 	.word	0x200000ee
 8002f50:	200000f2 	.word	0x200000f2

08002f54 <clearTextLine>:

// clear a line of text. y gives upper bound of text box
void clearTextLine(uint8_t y, SPI_HandleTypeDef *hspi) {
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af02      	add	r7, sp, #8
 8002f5a:	0002      	movs	r2, r0
 8002f5c:	6039      	str	r1, [r7, #0]
 8002f5e:	1dfb      	adds	r3, r7, #7
 8002f60:	701a      	strb	r2, [r3, #0]
	fillRect(0, y, WIDTH, textSize*8, bg, hspi);
 8002f62:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <clearTextLine+0x38>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	b2d8      	uxtb	r0, r3
 8002f6a:	4b09      	ldr	r3, [pc, #36]	; (8002f90 <clearTextLine+0x3c>)
 8002f6c:	881b      	ldrh	r3, [r3, #0]
 8002f6e:	1dfa      	adds	r2, r7, #7
 8002f70:	7811      	ldrb	r1, [r2, #0]
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	9201      	str	r2, [sp, #4]
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	0003      	movs	r3, r0
 8002f7a:	2280      	movs	r2, #128	; 0x80
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	f7ff fa1a 	bl	80023b6 <fillRect>
}
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	46bd      	mov	sp, r7
 8002f86:	b002      	add	sp, #8
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	46c0      	nop			; (mov r8, r8)
 8002f8c:	200000ee 	.word	0x200000ee
 8002f90:	200000f2 	.word	0x200000f2

08002f94 <setBackgroundColor>:

// ---- getters and setters ----
// sets static variables
void setBackgroundColor(uint16_t color) {bg = color;}
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	0002      	movs	r2, r0
 8002f9c:	1dbb      	adds	r3, r7, #6
 8002f9e:	801a      	strh	r2, [r3, #0]
 8002fa0:	4b03      	ldr	r3, [pc, #12]	; (8002fb0 <setBackgroundColor+0x1c>)
 8002fa2:	1dba      	adds	r2, r7, #6
 8002fa4:	8812      	ldrh	r2, [r2, #0]
 8002fa6:	801a      	strh	r2, [r3, #0]
 8002fa8:	46c0      	nop			; (mov r8, r8)
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b002      	add	sp, #8
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	200000f2 	.word	0x200000f2

08002fb4 <setCursor>:

void setCursor(uint8_t x, uint8_t y) {
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	0002      	movs	r2, r0
 8002fbc:	1dfb      	adds	r3, r7, #7
 8002fbe:	701a      	strb	r2, [r3, #0]
 8002fc0:	1dbb      	adds	r3, r7, #6
 8002fc2:	1c0a      	adds	r2, r1, #0
 8002fc4:	701a      	strb	r2, [r3, #0]
	cursorX = x;
 8002fc6:	4b06      	ldr	r3, [pc, #24]	; (8002fe0 <setCursor+0x2c>)
 8002fc8:	1dfa      	adds	r2, r7, #7
 8002fca:	7812      	ldrb	r2, [r2, #0]
 8002fcc:	701a      	strb	r2, [r3, #0]
	cursorY = y;
 8002fce:	4b05      	ldr	r3, [pc, #20]	; (8002fe4 <setCursor+0x30>)
 8002fd0:	1dba      	adds	r2, r7, #6
 8002fd2:	7812      	ldrb	r2, [r2, #0]
 8002fd4:	701a      	strb	r2, [r3, #0]
}
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	b002      	add	sp, #8
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	200000ec 	.word	0x200000ec
 8002fe4:	200000ed 	.word	0x200000ed

08002fe8 <setTextSize>:

void setTextSize(uint8_t size) {textSize = size;}
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	0002      	movs	r2, r0
 8002ff0:	1dfb      	adds	r3, r7, #7
 8002ff2:	701a      	strb	r2, [r3, #0]
 8002ff4:	4b03      	ldr	r3, [pc, #12]	; (8003004 <setTextSize+0x1c>)
 8002ff6:	1dfa      	adds	r2, r7, #7
 8002ff8:	7812      	ldrb	r2, [r2, #0]
 8002ffa:	701a      	strb	r2, [r3, #0]
 8002ffc:	46c0      	nop			; (mov r8, r8)
 8002ffe:	46bd      	mov	sp, r7
 8003000:	b002      	add	sp, #8
 8003002:	bd80      	pop	{r7, pc}
 8003004:	200000ee 	.word	0x200000ee

08003008 <setTextColor>:

void setTextColor(uint16_t color) {textColor = color;}
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	0002      	movs	r2, r0
 8003010:	1dbb      	adds	r3, r7, #6
 8003012:	801a      	strh	r2, [r3, #0]
 8003014:	4b03      	ldr	r3, [pc, #12]	; (8003024 <setTextColor+0x1c>)
 8003016:	1dba      	adds	r2, r7, #6
 8003018:	8812      	ldrh	r2, [r2, #0]
 800301a:	801a      	strh	r2, [r3, #0]
 800301c:	46c0      	nop			; (mov r8, r8)
 800301e:	46bd      	mov	sp, r7
 8003020:	b002      	add	sp, #8
 8003022:	bd80      	pop	{r7, pc}
 8003024:	200000f0 	.word	0x200000f0

08003028 <batteryManager>:

static const float batteryCapacity[];
static uint16_t batteryCapacityArraySize = 179;

// spi used to turn display on/off and drawing battery graphic
void batteryManager(ADC_HandleTypeDef *hadc, SPI_HandleTypeDef *hspi, TIM_HandleTypeDef *timerStopwatchTim, TIM_HandleTypeDef *backlightTim) {
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
 8003034:	603b      	str	r3, [r7, #0]
	if (canSampleBattery) {
 8003036:	4b2d      	ldr	r3, [pc, #180]	; (80030ec <batteryManager+0xc4>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	d050      	beq.n	80030e2 <batteryManager+0xba>
		canSampleBattery = 0;
 8003040:	4b2a      	ldr	r3, [pc, #168]	; (80030ec <batteryManager+0xc4>)
 8003042:	2200      	movs	r2, #0
 8003044:	701a      	strb	r2, [r3, #0]

		battPercentage = getBatteryPercentage(hadc);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	0018      	movs	r0, r3
 800304a:	f000 f87b 	bl	8003144 <getBatteryPercentage>
 800304e:	0003      	movs	r3, r0
 8003050:	001a      	movs	r2, r3
 8003052:	4b27      	ldr	r3, [pc, #156]	; (80030f0 <batteryManager+0xc8>)
 8003054:	701a      	strb	r2, [r3, #0]

		// start really shutting down & set flag
		// disable power supply (setting enable pin to 0)
		if (battPercentage == 0) {
 8003056:	4b26      	ldr	r3, [pc, #152]	; (80030f0 <batteryManager+0xc8>)
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d109      	bne.n	8003072 <batteryManager+0x4a>
			// power off supply
//			turnDisplayOff(hspi);
//			HAL_GPIO_WritePin(POWER_SUPPLY_ENABLE_PORT, POWER_SUPPLY_ENABLE_PIN, GPIO_PIN_RESET);
			startLowPowerMode(timerStopwatchTim, backlightTim);
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	0011      	movs	r1, r2
 8003064:	0018      	movs	r0, r3
 8003066:	f000 f849 	bl	80030fc <startLowPowerMode>
			bState = batteryReallyLow;
 800306a:	4b22      	ldr	r3, [pc, #136]	; (80030f4 <batteryManager+0xcc>)
 800306c:	2202      	movs	r2, #2
 800306e:	701a      	strb	r2, [r3, #0]
 8003070:	e030      	b.n	80030d4 <batteryManager+0xac>
		}
		else if (battPercentage <= 5) {
 8003072:	4b1f      	ldr	r3, [pc, #124]	; (80030f0 <batteryManager+0xc8>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	2b05      	cmp	r3, #5
 8003078:	d809      	bhi.n	800308e <batteryManager+0x66>
			// start turning off hardware
//			turnDisplayOff(hspi);
			startLowPowerMode(timerStopwatchTim, backlightTim);
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	0011      	movs	r1, r2
 8003080:	0018      	movs	r0, r3
 8003082:	f000 f83b 	bl	80030fc <startLowPowerMode>
			bState = batteryReallyLow;
 8003086:	4b1b      	ldr	r3, [pc, #108]	; (80030f4 <batteryManager+0xcc>)
 8003088:	2202      	movs	r2, #2
 800308a:	701a      	strb	r2, [r3, #0]
 800308c:	e022      	b.n	80030d4 <batteryManager+0xac>
		}
		// start low-power mode and set flag
		else if (battPercentage <= 15) {
 800308e:	4b18      	ldr	r3, [pc, #96]	; (80030f0 <batteryManager+0xc8>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b0f      	cmp	r3, #15
 8003094:	d803      	bhi.n	800309e <batteryManager+0x76>
			// start turning off hardware
			bState = batteryLow;
 8003096:	4b17      	ldr	r3, [pc, #92]	; (80030f4 <batteryManager+0xcc>)
 8003098:	2201      	movs	r2, #1
 800309a:	701a      	strb	r2, [r3, #0]
 800309c:	e01a      	b.n	80030d4 <batteryManager+0xac>
		}
		// set hardware to use power normally
		else {
			if (bState == batteryLow || bState == batteryReallyLow) {
 800309e:	4b15      	ldr	r3, [pc, #84]	; (80030f4 <batteryManager+0xcc>)
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d003      	beq.n	80030ae <batteryManager+0x86>
 80030a6:	4b13      	ldr	r3, [pc, #76]	; (80030f4 <batteryManager+0xcc>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d109      	bne.n	80030c2 <batteryManager+0x9a>
				turnDisplayOn(hspi);
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	0018      	movs	r0, r3
 80030b2:	f7fe ff5f 	bl	8001f74 <turnDisplayOn>
				stopLowPowerMode(timerStopwatchTim, backlightTim);
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	0011      	movs	r1, r2
 80030bc:	0018      	movs	r0, r3
 80030be:	f000 f82f 	bl	8003120 <stopLowPowerMode>
			}
			HAL_GPIO_WritePin(POWER_SUPPLY_ENABLE_PORT, POWER_SUPPLY_ENABLE_PIN, GPIO_PIN_SET);
 80030c2:	4b0d      	ldr	r3, [pc, #52]	; (80030f8 <batteryManager+0xd0>)
 80030c4:	2201      	movs	r2, #1
 80030c6:	2110      	movs	r1, #16
 80030c8:	0018      	movs	r0, r3
 80030ca:	f004 fe6c 	bl	8007da6 <HAL_GPIO_WritePin>
			bState = batteryNormal;
 80030ce:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <batteryManager+0xcc>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	701a      	strb	r2, [r3, #0]
		}

		drawBattery(battPercentage, hspi);
 80030d4:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <batteryManager+0xc8>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	0011      	movs	r1, r2
 80030dc:	0018      	movs	r0, r3
 80030de:	f003 fac1 	bl	8006664 <drawBattery>
	}
}
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	46bd      	mov	sp, r7
 80030e6:	b004      	add	sp, #16
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	46c0      	nop			; (mov r8, r8)
 80030ec:	2000013d 	.word	0x2000013d
 80030f0:	2000013c 	.word	0x2000013c
 80030f4:	2000014d 	.word	0x2000014d
 80030f8:	50000800 	.word	0x50000800

080030fc <startLowPowerMode>:

void startLowPowerMode(TIM_HandleTypeDef *timerStopwatchTim, TIM_HandleTypeDef *backlightTim) {
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
	setDisplayBacklight(50, backlightTim);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	0019      	movs	r1, r3
 800310a:	2032      	movs	r0, #50	; 0x32
 800310c:	f001 ff78 	bl	8005000 <setDisplayBacklight>
	stopTimerStopwatchBase(timerStopwatchTim);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	0018      	movs	r0, r3
 8003114:	f001 ff56 	bl	8004fc4 <stopTimerStopwatchBase>
}
 8003118:	46c0      	nop			; (mov r8, r8)
 800311a:	46bd      	mov	sp, r7
 800311c:	b002      	add	sp, #8
 800311e:	bd80      	pop	{r7, pc}

08003120 <stopLowPowerMode>:

void stopLowPowerMode(TIM_HandleTypeDef *timerStopwatchTim, TIM_HandleTypeDef *backlightTim) {
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
	setDisplayBacklight(100, backlightTim);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	0019      	movs	r1, r3
 800312e:	2064      	movs	r0, #100	; 0x64
 8003130:	f001 ff66 	bl	8005000 <setDisplayBacklight>
	runTimerStopwatchBase(timerStopwatchTim);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	0018      	movs	r0, r3
 8003138:	f001 ff38 	bl	8004fac <runTimerStopwatchBase>
}
 800313c:	46c0      	nop			; (mov r8, r8)
 800313e:	46bd      	mov	sp, r7
 8003140:	b002      	add	sp, #8
 8003142:	bd80      	pop	{r7, pc}

08003144 <getBatteryPercentage>:

// should return a number from 0-100
uint8_t getBatteryPercentage(ADC_HandleTypeDef *hadc) {
 8003144:	b5b0      	push	{r4, r5, r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
	float v, temp;
	uint8_t index;

	// enable adc voltage divider for measurements, disable after
	HAL_GPIO_WritePin(ADC_DIVIDER_PORT, ADC_DIVIDER_PIN, GPIO_PIN_SET);
 800314c:	4b3c      	ldr	r3, [pc, #240]	; (8003240 <getBatteryPercentage+0xfc>)
 800314e:	2201      	movs	r2, #1
 8003150:	2120      	movs	r1, #32
 8003152:	0018      	movs	r0, r3
 8003154:	f004 fe27 	bl	8007da6 <HAL_GPIO_WritePin>
	HAL_ADC_Start_IT(hadc);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	0018      	movs	r0, r3
 800315c:	f003 ffae 	bl	80070bc <HAL_ADC_Start_IT>

	HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8003160:	2301      	movs	r3, #1
 8003162:	425a      	negs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	0011      	movs	r1, r2
 8003168:	0018      	movs	r0, r3
 800316a:	f003 ff11 	bl	8006f90 <HAL_ADC_PollForConversion>
	v = 3.3*HAL_ADC_GetValue(hadc)/(0xFFF);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	0018      	movs	r0, r3
 8003172:	f004 f815 	bl	80071a0 <HAL_ADC_GetValue>
 8003176:	0003      	movs	r3, r0
 8003178:	0018      	movs	r0, r3
 800317a:	f7fe fc71 	bl	8001a60 <__aeabi_ui2d>
 800317e:	4a31      	ldr	r2, [pc, #196]	; (8003244 <getBatteryPercentage+0x100>)
 8003180:	4b31      	ldr	r3, [pc, #196]	; (8003248 <getBatteryPercentage+0x104>)
 8003182:	f7fe f9c1 	bl	8001508 <__aeabi_dmul>
 8003186:	0003      	movs	r3, r0
 8003188:	000c      	movs	r4, r1
 800318a:	0018      	movs	r0, r3
 800318c:	0021      	movs	r1, r4
 800318e:	2200      	movs	r2, #0
 8003190:	4b2e      	ldr	r3, [pc, #184]	; (800324c <getBatteryPercentage+0x108>)
 8003192:	f7fd feb7 	bl	8000f04 <__aeabi_ddiv>
 8003196:	0003      	movs	r3, r0
 8003198:	000c      	movs	r4, r1
 800319a:	0018      	movs	r0, r3
 800319c:	0021      	movs	r1, r4
 800319e:	f7fe fc91 	bl	8001ac4 <__aeabi_d2f>
 80031a2:	1c03      	adds	r3, r0, #0
 80031a4:	617b      	str	r3, [r7, #20]

	HAL_ADC_Stop(hadc);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	0018      	movs	r0, r3
 80031aa:	f003 feb1 	bl	8006f10 <HAL_ADC_Stop>
	HAL_GPIO_WritePin(ADC_DIVIDER_PORT, ADC_DIVIDER_PIN, GPIO_PIN_RESET);
 80031ae:	4b24      	ldr	r3, [pc, #144]	; (8003240 <getBatteryPercentage+0xfc>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	2120      	movs	r1, #32
 80031b4:	0018      	movs	r0, r3
 80031b6:	f004 fdf6 	bl	8007da6 <HAL_GPIO_WritePin>

	// trying to look only for 3.9-3.4. anything above 3.7 is 100%, anything below 3.4 is 0%
	// scaled voltages at 3.0642-2.6714
	// indices at 6-151. have to scale and flip to go from 100-0 since 6->100%
	index = search(v);
 80031ba:	2513      	movs	r5, #19
 80031bc:	197c      	adds	r4, r7, r5
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	1c18      	adds	r0, r3, #0
 80031c2:	f000 f84b 	bl	800325c <search>
 80031c6:	0003      	movs	r3, r0
 80031c8:	7023      	strb	r3, [r4, #0]
	if (index <= 6) return 100;
 80031ca:	197b      	adds	r3, r7, r5
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	2b06      	cmp	r3, #6
 80031d0:	d801      	bhi.n	80031d6 <getBatteryPercentage+0x92>
 80031d2:	2364      	movs	r3, #100	; 0x64
 80031d4:	e030      	b.n	8003238 <getBatteryPercentage+0xf4>
	else if (index >= 135) return 0;		// adjusting numbers because tests want to call 2.65V non-zero
 80031d6:	2313      	movs	r3, #19
 80031d8:	18fb      	adds	r3, r7, r3
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b86      	cmp	r3, #134	; 0x86
 80031de:	d901      	bls.n	80031e4 <getBatteryPercentage+0xa0>
 80031e0:	2300      	movs	r3, #0
 80031e2:	e029      	b.n	8003238 <getBatteryPercentage+0xf4>
	else {
		index -= 6;
 80031e4:	2113      	movs	r1, #19
 80031e6:	187b      	adds	r3, r7, r1
 80031e8:	187a      	adds	r2, r7, r1
 80031ea:	7812      	ldrb	r2, [r2, #0]
 80031ec:	3a06      	subs	r2, #6
 80031ee:	701a      	strb	r2, [r3, #0]
		temp = index*100.0/129;
 80031f0:	187b      	adds	r3, r7, r1
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	0018      	movs	r0, r3
 80031f6:	f7fe fbf9 	bl	80019ec <__aeabi_i2d>
 80031fa:	2200      	movs	r2, #0
 80031fc:	4b14      	ldr	r3, [pc, #80]	; (8003250 <getBatteryPercentage+0x10c>)
 80031fe:	f7fe f983 	bl	8001508 <__aeabi_dmul>
 8003202:	0003      	movs	r3, r0
 8003204:	000c      	movs	r4, r1
 8003206:	0018      	movs	r0, r3
 8003208:	0021      	movs	r1, r4
 800320a:	2200      	movs	r2, #0
 800320c:	4b11      	ldr	r3, [pc, #68]	; (8003254 <getBatteryPercentage+0x110>)
 800320e:	f7fd fe79 	bl	8000f04 <__aeabi_ddiv>
 8003212:	0003      	movs	r3, r0
 8003214:	000c      	movs	r4, r1
 8003216:	0018      	movs	r0, r3
 8003218:	0021      	movs	r1, r4
 800321a:	f7fe fc53 	bl	8001ac4 <__aeabi_d2f>
 800321e:	1c03      	adds	r3, r0, #0
 8003220:	60fb      	str	r3, [r7, #12]
		temp = 100-temp;
 8003222:	68f9      	ldr	r1, [r7, #12]
 8003224:	480c      	ldr	r0, [pc, #48]	; (8003258 <getBatteryPercentage+0x114>)
 8003226:	f7fd fc49 	bl	8000abc <__aeabi_fsub>
 800322a:	1c03      	adds	r3, r0, #0
 800322c:	60fb      	str	r3, [r7, #12]
		return temp;
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f7fd f922 	bl	8000478 <__aeabi_f2uiz>
 8003234:	0003      	movs	r3, r0
 8003236:	b2db      	uxtb	r3, r3
	}
}
 8003238:	0018      	movs	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	b006      	add	sp, #24
 800323e:	bdb0      	pop	{r4, r5, r7, pc}
 8003240:	50000800 	.word	0x50000800
 8003244:	66666666 	.word	0x66666666
 8003248:	400a6666 	.word	0x400a6666
 800324c:	40affe00 	.word	0x40affe00
 8003250:	40590000 	.word	0x40590000
 8003254:	40602000 	.word	0x40602000
 8003258:	42c80000 	.word	0x42c80000

0800325c <search>:

// should return index in array
uint8_t search(float val) {
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
	// O(n) lookup. array is only size=179.
	uint8_t i;
	for (i = 0; i < batteryCapacityArraySize; i++) {
 8003264:	230f      	movs	r3, #15
 8003266:	18fb      	adds	r3, r7, r3
 8003268:	2200      	movs	r2, #0
 800326a:	701a      	strb	r2, [r3, #0]
 800326c:	e015      	b.n	800329a <search+0x3e>
		if (val > batteryCapacity[i]) return i;
 800326e:	230f      	movs	r3, #15
 8003270:	18fb      	adds	r3, r7, r3
 8003272:	781a      	ldrb	r2, [r3, #0]
 8003274:	4b10      	ldr	r3, [pc, #64]	; (80032b8 <search+0x5c>)
 8003276:	0092      	lsls	r2, r2, #2
 8003278:	58d3      	ldr	r3, [r2, r3]
 800327a:	1c19      	adds	r1, r3, #0
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7fd f8e7 	bl	8000450 <__aeabi_fcmpgt>
 8003282:	1e03      	subs	r3, r0, #0
 8003284:	d003      	beq.n	800328e <search+0x32>
 8003286:	230f      	movs	r3, #15
 8003288:	18fb      	adds	r3, r7, r3
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	e010      	b.n	80032b0 <search+0x54>
	for (i = 0; i < batteryCapacityArraySize; i++) {
 800328e:	210f      	movs	r1, #15
 8003290:	187b      	adds	r3, r7, r1
 8003292:	781a      	ldrb	r2, [r3, #0]
 8003294:	187b      	adds	r3, r7, r1
 8003296:	3201      	adds	r2, #1
 8003298:	701a      	strb	r2, [r3, #0]
 800329a:	230f      	movs	r3, #15
 800329c:	18fb      	adds	r3, r7, r3
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	4b06      	ldr	r3, [pc, #24]	; (80032bc <search+0x60>)
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d3e1      	bcc.n	800326e <search+0x12>
	}
	return batteryCapacityArraySize;
 80032aa:	4b04      	ldr	r3, [pc, #16]	; (80032bc <search+0x60>)
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	b2db      	uxtb	r3, r3
}
 80032b0:	0018      	movs	r0, r3
 80032b2:	46bd      	mov	sp, r7
 80032b4:	b004      	add	sp, #16
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	0800bd54 	.word	0x0800bd54
 80032bc:	20000000 	.word	0x20000000

080032c0 <setTime>:

static uint16_t century = 20;		// holds upper 2 digits of year that RTC doesn't hold
// ---- RTC setters ----
// set rtc time. uses personal struct as arg
// assumes t's fields are aleady set to something or not null
void setTime(struct times *t, RTC_HandleTypeDef *hrtc) {
 80032c0:	b590      	push	{r4, r7, lr}
 80032c2:	b089      	sub	sp, #36	; 0x24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
	RTC_TimeTypeDef stime = {0};
 80032ca:	210c      	movs	r1, #12
 80032cc:	000c      	movs	r4, r1
 80032ce:	187b      	adds	r3, r7, r1
 80032d0:	0018      	movs	r0, r3
 80032d2:	2314      	movs	r3, #20
 80032d4:	001a      	movs	r2, r3
 80032d6:	2100      	movs	r1, #0
 80032d8:	f007 ff3f 	bl	800b15a <memset>

	stime.Hours = t->hr;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	781a      	ldrb	r2, [r3, #0]
 80032e0:	0021      	movs	r1, r4
 80032e2:	187b      	adds	r3, r7, r1
 80032e4:	701a      	strb	r2, [r3, #0]
	stime.Minutes = t->min;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	785a      	ldrb	r2, [r3, #1]
 80032ea:	187b      	adds	r3, r7, r1
 80032ec:	705a      	strb	r2, [r3, #1]
	stime.Seconds = t->sec;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	789a      	ldrb	r2, [r3, #2]
 80032f2:	187b      	adds	r3, r7, r1
 80032f4:	709a      	strb	r2, [r3, #2]

	stime.TimeFormat = RTC_HOURFORMAT_24;
 80032f6:	187b      	adds	r3, r7, r1
 80032f8:	2200      	movs	r2, #0
 80032fa:	70da      	strb	r2, [r3, #3]

	// not really using
	stime.SubSeconds = 0;
 80032fc:	187b      	adds	r3, r7, r1
 80032fe:	2200      	movs	r2, #0
 8003300:	605a      	str	r2, [r3, #4]
	stime.SecondFraction = 0;
 8003302:	187b      	adds	r3, r7, r1
 8003304:	2200      	movs	r2, #0
 8003306:	609a      	str	r2, [r3, #8]
	stime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003308:	187b      	adds	r3, r7, r1
 800330a:	2200      	movs	r2, #0
 800330c:	60da      	str	r2, [r3, #12]
	stime.StoreOperation = RTC_STOREOPERATION_SET;
 800330e:	187b      	adds	r3, r7, r1
 8003310:	2280      	movs	r2, #128	; 0x80
 8003312:	02d2      	lsls	r2, r2, #11
 8003314:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(hrtc, &stime, RTC_FORMAT_BIN);
 8003316:	1879      	adds	r1, r7, r1
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	2200      	movs	r2, #0
 800331c:	0018      	movs	r0, r3
 800331e:	f005 fd2b 	bl	8008d78 <HAL_RTC_SetTime>
}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	46bd      	mov	sp, r7
 8003326:	b009      	add	sp, #36	; 0x24
 8003328:	bd90      	pop	{r4, r7, pc}
	...

0800332c <setDate>:

// set rtc date. uses personal struct as arg
// assumes struct has values
void setDate(struct dates *d, RTC_HandleTypeDef *hrtc) {
 800332c:	b590      	push	{r4, r7, lr}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
	RTC_DateTypeDef sdate = {0};
 8003336:	240c      	movs	r4, #12
 8003338:	193b      	adds	r3, r7, r4
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]

	sdate.Month = d->month;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	789a      	ldrb	r2, [r3, #2]
 8003342:	193b      	adds	r3, r7, r4
 8003344:	705a      	strb	r2, [r3, #1]
	sdate.Date = d->date;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	78da      	ldrb	r2, [r3, #3]
 800334a:	193b      	adds	r3, r7, r4
 800334c:	709a      	strb	r2, [r3, #2]
	sdate.Year = d->yr % 100; 		// set only between 0-99. limitation of RTC
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	881b      	ldrh	r3, [r3, #0]
 8003352:	2164      	movs	r1, #100	; 0x64
 8003354:	0018      	movs	r0, r3
 8003356:	f7fc ff65 	bl	8000224 <__aeabi_uidivmod>
 800335a:	000b      	movs	r3, r1
 800335c:	b29b      	uxth	r3, r3
 800335e:	b2da      	uxtb	r2, r3
 8003360:	193b      	adds	r3, r7, r4
 8003362:	70da      	strb	r2, [r3, #3]
	century = d->yr / 100;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	881b      	ldrh	r3, [r3, #0]
 8003368:	2164      	movs	r1, #100	; 0x64
 800336a:	0018      	movs	r0, r3
 800336c:	f7fc fed4 	bl	8000118 <__udivsi3>
 8003370:	0003      	movs	r3, r0
 8003372:	b29a      	uxth	r2, r3
 8003374:	4b0c      	ldr	r3, [pc, #48]	; (80033a8 <setDate+0x7c>)
 8003376:	801a      	strh	r2, [r3, #0]

	sdate.WeekDay = weekdayCalculator(d->yr, d->month, d->date);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	8818      	ldrh	r0, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	7899      	ldrb	r1, [r3, #2]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	78db      	ldrb	r3, [r3, #3]
 8003384:	001a      	movs	r2, r3
 8003386:	f000 faa7 	bl	80038d8 <weekdayCalculator>
 800338a:	0003      	movs	r3, r0
 800338c:	001a      	movs	r2, r3
 800338e:	193b      	adds	r3, r7, r4
 8003390:	701a      	strb	r2, [r3, #0]

	HAL_RTC_SetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 8003392:	1939      	adds	r1, r7, r4
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	2200      	movs	r2, #0
 8003398:	0018      	movs	r0, r3
 800339a:	f005 fe0d 	bl	8008fb8 <HAL_RTC_SetDate>
}
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	46bd      	mov	sp, r7
 80033a2:	b005      	add	sp, #20
 80033a4:	bd90      	pop	{r4, r7, pc}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	20000002 	.word	0x20000002

080033ac <setDateTime>:

void setDateTime(struct dates *d, struct times *t, RTC_HandleTypeDef *hrtc) {
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
	setDate(d, hrtc);
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	0011      	movs	r1, r2
 80033be:	0018      	movs	r0, r3
 80033c0:	f7ff ffb4 	bl	800332c <setDate>
	setTime(t, hrtc);
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	0011      	movs	r1, r2
 80033ca:	0018      	movs	r0, r3
 80033cc:	f7ff ff78 	bl	80032c0 <setTime>
}
 80033d0:	46c0      	nop			; (mov r8, r8)
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b004      	add	sp, #16
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <setAlarm>:

// for time of day+week
void setAlarm(struct alarmTimes *a, RTC_HandleTypeDef *hrtc) {
 80033d8:	b5b0      	push	{r4, r5, r7, lr}
 80033da:	b092      	sub	sp, #72	; 0x48
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
	RTC_AlarmTypeDef salarm = {0};
 80033e2:	2520      	movs	r5, #32
 80033e4:	197b      	adds	r3, r7, r5
 80033e6:	0018      	movs	r0, r3
 80033e8:	2328      	movs	r3, #40	; 0x28
 80033ea:	001a      	movs	r2, r3
 80033ec:	2100      	movs	r1, #0
 80033ee:	f007 feb4 	bl	800b15a <memset>
	RTC_TimeTypeDef salarmtime = {0};
 80033f2:	210c      	movs	r1, #12
 80033f4:	000c      	movs	r4, r1
 80033f6:	187b      	adds	r3, r7, r1
 80033f8:	0018      	movs	r0, r3
 80033fa:	2314      	movs	r3, #20
 80033fc:	001a      	movs	r2, r3
 80033fe:	2100      	movs	r1, #0
 8003400:	f007 feab 	bl	800b15a <memset>

	salarmtime.Hours = a->hr;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	781a      	ldrb	r2, [r3, #0]
 8003408:	0021      	movs	r1, r4
 800340a:	187b      	adds	r3, r7, r1
 800340c:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a->min;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	785a      	ldrb	r2, [r3, #1]
 8003412:	187b      	adds	r3, r7, r1
 8003414:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a->sec;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	789a      	ldrb	r2, [r3, #2]
 800341a:	187b      	adds	r3, r7, r1
 800341c:	709a      	strb	r2, [r3, #2]

	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 800341e:	187b      	adds	r3, r7, r1
 8003420:	2200      	movs	r2, #0
 8003422:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 8003424:	187b      	adds	r3, r7, r1
 8003426:	2200      	movs	r2, #0
 8003428:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 800342a:	187b      	adds	r3, r7, r1
 800342c:	2200      	movs	r2, #0
 800342e:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003430:	187b      	adds	r3, r7, r1
 8003432:	2200      	movs	r2, #0
 8003434:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003436:	187b      	adds	r3, r7, r1
 8003438:	2200      	movs	r2, #0
 800343a:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 800343c:	197b      	adds	r3, r7, r5
 800343e:	187a      	adds	r2, r7, r1
 8003440:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003442:	c313      	stmia	r3!, {r0, r1, r4}
 8003444:	ca03      	ldmia	r2!, {r0, r1}
 8003446:	c303      	stmia	r3!, {r0, r1}
	salarm.AlarmMask = RTC_ALARMMASK_NONE;		// allows comparison for all fields (sec, min, hour, weekday)
 8003448:	197b      	adds	r3, r7, r5
 800344a:	2200      	movs	r2, #0
 800344c:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800344e:	197b      	adds	r3, r7, r5
 8003450:	2200      	movs	r2, #0
 8003452:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8003454:	197b      	adds	r3, r7, r5
 8003456:	2280      	movs	r2, #128	; 0x80
 8003458:	05d2      	lsls	r2, r2, #23
 800345a:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a->weekday;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	78d9      	ldrb	r1, [r3, #3]
 8003460:	197b      	adds	r3, r7, r5
 8003462:	2220      	movs	r2, #32
 8003464:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_A;
 8003466:	197b      	adds	r3, r7, r5
 8003468:	2280      	movs	r2, #128	; 0x80
 800346a:	0052      	lsls	r2, r2, #1
 800346c:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
 800346e:	1979      	adds	r1, r7, r5
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	2200      	movs	r2, #0
 8003474:	0018      	movs	r0, r3
 8003476:	f005 fe9b 	bl	80091b0 <HAL_RTC_SetAlarm_IT>
}
 800347a:	46c0      	nop			; (mov r8, r8)
 800347c:	46bd      	mov	sp, r7
 800347e:	b012      	add	sp, #72	; 0x48
 8003480:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003484 <setClockAlarm>:

// set an alarm for the next second for triggering display updates
void setClockAlarm(RTC_HandleTypeDef *hrtc) {
 8003484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003486:	b097      	sub	sp, #92	; 0x5c
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef salarm = {0};
 800348c:	232c      	movs	r3, #44	; 0x2c
 800348e:	18fb      	adds	r3, r7, r3
 8003490:	0018      	movs	r0, r3
 8003492:	2328      	movs	r3, #40	; 0x28
 8003494:	001a      	movs	r2, r3
 8003496:	2100      	movs	r1, #0
 8003498:	f007 fe5f 	bl	800b15a <memset>
	RTC_TimeTypeDef salarmtime = {0};
 800349c:	2318      	movs	r3, #24
 800349e:	18fb      	adds	r3, r7, r3
 80034a0:	0018      	movs	r0, r3
 80034a2:	2314      	movs	r3, #20
 80034a4:	001a      	movs	r2, r3
 80034a6:	2100      	movs	r1, #0
 80034a8:	f007 fe57 	bl	800b15a <memset>

	// pull current time
	struct dates currentDate = {0};
 80034ac:	2410      	movs	r4, #16
 80034ae:	193b      	adds	r3, r7, r4
 80034b0:	0018      	movs	r0, r3
 80034b2:	2306      	movs	r3, #6
 80034b4:	001a      	movs	r2, r3
 80034b6:	2100      	movs	r1, #0
 80034b8:	f007 fe4f 	bl	800b15a <memset>
	struct times currentTime = {0};
 80034bc:	250c      	movs	r5, #12
 80034be:	197b      	adds	r3, r7, r5
 80034c0:	0018      	movs	r0, r3
 80034c2:	2303      	movs	r3, #3
 80034c4:	001a      	movs	r2, r3
 80034c6:	2100      	movs	r1, #0
 80034c8:	f007 fe47 	bl	800b15a <memset>
	getDateTime(&currentDate, &currentTime, hrtc);
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	1979      	adds	r1, r7, r5
 80034d0:	193b      	adds	r3, r7, r4
 80034d2:	0018      	movs	r0, r3
 80034d4:	f000 f912 	bl	80036fc <getDateTime>

	// start setting alarm
	struct alarmTimes a = {0};
 80034d8:	2308      	movs	r3, #8
 80034da:	18fb      	adds	r3, r7, r3
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
	uint8_t s,m,h,w;
	if (bState == batteryLow || bState == batteryReallyLow) {
 80034e0:	4b6f      	ldr	r3, [pc, #444]	; (80036a0 <setClockAlarm+0x21c>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d003      	beq.n	80034f0 <setClockAlarm+0x6c>
 80034e8:	4b6d      	ldr	r3, [pc, #436]	; (80036a0 <setClockAlarm+0x21c>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d133      	bne.n	8003558 <setClockAlarm+0xd4>
		s = currentTime.sec;
 80034f0:	2157      	movs	r1, #87	; 0x57
 80034f2:	187b      	adds	r3, r7, r1
 80034f4:	250c      	movs	r5, #12
 80034f6:	197a      	adds	r2, r7, r5
 80034f8:	7892      	ldrb	r2, [r2, #2]
 80034fa:	701a      	strb	r2, [r3, #0]
		m = currentTime.min + s/60 + 1;
 80034fc:	197b      	adds	r3, r7, r5
 80034fe:	785c      	ldrb	r4, [r3, #1]
 8003500:	187b      	adds	r3, r7, r1
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	213c      	movs	r1, #60	; 0x3c
 8003506:	0018      	movs	r0, r3
 8003508:	f7fc fe06 	bl	8000118 <__udivsi3>
 800350c:	0003      	movs	r3, r0
 800350e:	b2db      	uxtb	r3, r3
 8003510:	18e3      	adds	r3, r4, r3
 8003512:	b2da      	uxtb	r2, r3
 8003514:	2156      	movs	r1, #86	; 0x56
 8003516:	187b      	adds	r3, r7, r1
 8003518:	3201      	adds	r2, #1
 800351a:	701a      	strb	r2, [r3, #0]
		h = currentTime.hr + m/60;
 800351c:	197b      	adds	r3, r7, r5
 800351e:	781c      	ldrb	r4, [r3, #0]
 8003520:	187b      	adds	r3, r7, r1
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	213c      	movs	r1, #60	; 0x3c
 8003526:	0018      	movs	r0, r3
 8003528:	f7fc fdf6 	bl	8000118 <__udivsi3>
 800352c:	0003      	movs	r3, r0
 800352e:	b2da      	uxtb	r2, r3
 8003530:	2155      	movs	r1, #85	; 0x55
 8003532:	187b      	adds	r3, r7, r1
 8003534:	18a2      	adds	r2, r4, r2
 8003536:	701a      	strb	r2, [r3, #0]
		w = currentDate.weekday + h/24;
 8003538:	2310      	movs	r3, #16
 800353a:	18fb      	adds	r3, r7, r3
 800353c:	791c      	ldrb	r4, [r3, #4]
 800353e:	187b      	adds	r3, r7, r1
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2118      	movs	r1, #24
 8003544:	0018      	movs	r0, r3
 8003546:	f7fc fde7 	bl	8000118 <__udivsi3>
 800354a:	0003      	movs	r3, r0
 800354c:	b2da      	uxtb	r2, r3
 800354e:	2354      	movs	r3, #84	; 0x54
 8003550:	18fb      	adds	r3, r7, r3
 8003552:	18a2      	adds	r2, r4, r2
 8003554:	701a      	strb	r2, [r3, #0]
 8003556:	e031      	b.n	80035bc <setClockAlarm+0x138>
	}
	else {
		s = currentTime.sec + 1;
 8003558:	250c      	movs	r5, #12
 800355a:	197b      	adds	r3, r7, r5
 800355c:	789a      	ldrb	r2, [r3, #2]
 800355e:	2157      	movs	r1, #87	; 0x57
 8003560:	187b      	adds	r3, r7, r1
 8003562:	3201      	adds	r2, #1
 8003564:	701a      	strb	r2, [r3, #0]
		m = currentTime.min + s/60;
 8003566:	197b      	adds	r3, r7, r5
 8003568:	785c      	ldrb	r4, [r3, #1]
 800356a:	187b      	adds	r3, r7, r1
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	213c      	movs	r1, #60	; 0x3c
 8003570:	0018      	movs	r0, r3
 8003572:	f7fc fdd1 	bl	8000118 <__udivsi3>
 8003576:	0003      	movs	r3, r0
 8003578:	b2da      	uxtb	r2, r3
 800357a:	2156      	movs	r1, #86	; 0x56
 800357c:	187b      	adds	r3, r7, r1
 800357e:	18a2      	adds	r2, r4, r2
 8003580:	701a      	strb	r2, [r3, #0]
		h = currentTime.hr + m/60;
 8003582:	197b      	adds	r3, r7, r5
 8003584:	781c      	ldrb	r4, [r3, #0]
 8003586:	187b      	adds	r3, r7, r1
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	213c      	movs	r1, #60	; 0x3c
 800358c:	0018      	movs	r0, r3
 800358e:	f7fc fdc3 	bl	8000118 <__udivsi3>
 8003592:	0003      	movs	r3, r0
 8003594:	b2da      	uxtb	r2, r3
 8003596:	2155      	movs	r1, #85	; 0x55
 8003598:	187b      	adds	r3, r7, r1
 800359a:	18a2      	adds	r2, r4, r2
 800359c:	701a      	strb	r2, [r3, #0]
		w = currentDate.weekday + h/24;
 800359e:	2310      	movs	r3, #16
 80035a0:	18fb      	adds	r3, r7, r3
 80035a2:	791c      	ldrb	r4, [r3, #4]
 80035a4:	187b      	adds	r3, r7, r1
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2118      	movs	r1, #24
 80035aa:	0018      	movs	r0, r3
 80035ac:	f7fc fdb4 	bl	8000118 <__udivsi3>
 80035b0:	0003      	movs	r3, r0
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	2354      	movs	r3, #84	; 0x54
 80035b6:	18fb      	adds	r3, r7, r3
 80035b8:	18a2      	adds	r2, r4, r2
 80035ba:	701a      	strb	r2, [r3, #0]
	}
	a.sec = s % 60;
 80035bc:	2357      	movs	r3, #87	; 0x57
 80035be:	18fb      	adds	r3, r7, r3
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	213c      	movs	r1, #60	; 0x3c
 80035c4:	0018      	movs	r0, r3
 80035c6:	f7fc fe2d 	bl	8000224 <__aeabi_uidivmod>
 80035ca:	000b      	movs	r3, r1
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	2408      	movs	r4, #8
 80035d0:	193b      	adds	r3, r7, r4
 80035d2:	709a      	strb	r2, [r3, #2]
	a.min = m % 60;
 80035d4:	2356      	movs	r3, #86	; 0x56
 80035d6:	18fb      	adds	r3, r7, r3
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	213c      	movs	r1, #60	; 0x3c
 80035dc:	0018      	movs	r0, r3
 80035de:	f7fc fe21 	bl	8000224 <__aeabi_uidivmod>
 80035e2:	000b      	movs	r3, r1
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	193b      	adds	r3, r7, r4
 80035e8:	705a      	strb	r2, [r3, #1]
	a.hr = h % 24;
 80035ea:	2355      	movs	r3, #85	; 0x55
 80035ec:	18fb      	adds	r3, r7, r3
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2118      	movs	r1, #24
 80035f2:	0018      	movs	r0, r3
 80035f4:	f7fc fe16 	bl	8000224 <__aeabi_uidivmod>
 80035f8:	000b      	movs	r3, r1
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	193b      	adds	r3, r7, r4
 80035fe:	701a      	strb	r2, [r3, #0]
	a.weekday = (w-1) % 7 + 1;
 8003600:	2354      	movs	r3, #84	; 0x54
 8003602:	18fb      	adds	r3, r7, r3
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	3b01      	subs	r3, #1
 8003608:	2107      	movs	r1, #7
 800360a:	0018      	movs	r0, r3
 800360c:	f7fc fef4 	bl	80003f8 <__aeabi_idivmod>
 8003610:	000b      	movs	r3, r1
 8003612:	b2db      	uxtb	r3, r3
 8003614:	3301      	adds	r3, #1
 8003616:	b2da      	uxtb	r2, r3
 8003618:	0020      	movs	r0, r4
 800361a:	183b      	adds	r3, r7, r0
 800361c:	70da      	strb	r2, [r3, #3]

	salarmtime.Hours = a.hr;
 800361e:	183b      	adds	r3, r7, r0
 8003620:	781a      	ldrb	r2, [r3, #0]
 8003622:	2118      	movs	r1, #24
 8003624:	187b      	adds	r3, r7, r1
 8003626:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a.min;
 8003628:	183b      	adds	r3, r7, r0
 800362a:	785a      	ldrb	r2, [r3, #1]
 800362c:	187b      	adds	r3, r7, r1
 800362e:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a.sec;
 8003630:	183b      	adds	r3, r7, r0
 8003632:	789a      	ldrb	r2, [r3, #2]
 8003634:	187b      	adds	r3, r7, r1
 8003636:	709a      	strb	r2, [r3, #2]
	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 8003638:	187b      	adds	r3, r7, r1
 800363a:	2200      	movs	r2, #0
 800363c:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 800363e:	187b      	adds	r3, r7, r1
 8003640:	2200      	movs	r2, #0
 8003642:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 8003644:	187b      	adds	r3, r7, r1
 8003646:	2200      	movs	r2, #0
 8003648:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800364a:	187b      	adds	r3, r7, r1
 800364c:	2200      	movs	r2, #0
 800364e:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003650:	187b      	adds	r3, r7, r1
 8003652:	2200      	movs	r2, #0
 8003654:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 8003656:	242c      	movs	r4, #44	; 0x2c
 8003658:	193b      	adds	r3, r7, r4
 800365a:	187a      	adds	r2, r7, r1
 800365c:	ca62      	ldmia	r2!, {r1, r5, r6}
 800365e:	c362      	stmia	r3!, {r1, r5, r6}
 8003660:	ca22      	ldmia	r2!, {r1, r5}
 8003662:	c322      	stmia	r3!, {r1, r5}
	salarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003664:	193b      	adds	r3, r7, r4
 8003666:	2200      	movs	r2, #0
 8003668:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800366a:	193b      	adds	r3, r7, r4
 800366c:	2200      	movs	r2, #0
 800366e:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8003670:	193b      	adds	r3, r7, r4
 8003672:	2280      	movs	r2, #128	; 0x80
 8003674:	05d2      	lsls	r2, r2, #23
 8003676:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a.weekday;
 8003678:	183b      	adds	r3, r7, r0
 800367a:	78d9      	ldrb	r1, [r3, #3]
 800367c:	193b      	adds	r3, r7, r4
 800367e:	2220      	movs	r2, #32
 8003680:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_B;
 8003682:	193b      	adds	r3, r7, r4
 8003684:	2280      	movs	r2, #128	; 0x80
 8003686:	0092      	lsls	r2, r2, #2
 8003688:	625a      	str	r2, [r3, #36]	; 0x24

	// do nothing until done
	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
 800368a:	1939      	adds	r1, r7, r4
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	0018      	movs	r0, r3
 8003692:	f005 fd8d 	bl	80091b0 <HAL_RTC_SetAlarm_IT>
}
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	46bd      	mov	sp, r7
 800369a:	b017      	add	sp, #92	; 0x5c
 800369c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	2000014d 	.word	0x2000014d

080036a4 <HAL_RTC_AlarmAEventCallback>:
// ---- end of RTC setters ----

// ---- callbacks for interrupts ----
// used for alarm function in project
// meant to send signal to use motor
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED1_PORT, LED1_PIN);
 80036ac:	4b07      	ldr	r3, [pc, #28]	; (80036cc <HAL_RTC_AlarmAEventCallback+0x28>)
 80036ae:	2110      	movs	r1, #16
 80036b0:	0018      	movs	r0, r3
 80036b2:	f004 fb95 	bl	8007de0 <HAL_GPIO_TogglePin>
	isAlarmDone = 1;
 80036b6:	4b06      	ldr	r3, [pc, #24]	; (80036d0 <HAL_RTC_AlarmAEventCallback+0x2c>)
 80036b8:	2201      	movs	r2, #1
 80036ba:	701a      	strb	r2, [r3, #0]
	updateFace.alarm = 1;
 80036bc:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <HAL_RTC_AlarmAEventCallback+0x30>)
 80036be:	2201      	movs	r2, #1
 80036c0:	709a      	strb	r2, [r3, #2]
}
 80036c2:	46c0      	nop			; (mov r8, r8)
 80036c4:	46bd      	mov	sp, r7
 80036c6:	b002      	add	sp, #8
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	50000400 	.word	0x50000400
 80036d0:	2000013e 	.word	0x2000013e
 80036d4:	20000140 	.word	0x20000140

080036d8 <HAL_RTCEx_AlarmBEventCallback>:

// used to trigger display refresh every second. used because then it's synchronous with RTC updates
void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc) {
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
	updateFace.clock = 1;
 80036e0:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <HAL_RTCEx_AlarmBEventCallback+0x20>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	701a      	strb	r2, [r3, #0]
	setClockAlarm(hrtc);		// set something for next second
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	0018      	movs	r0, r3
 80036ea:	f7ff fecb 	bl	8003484 <setClockAlarm>
}
 80036ee:	46c0      	nop			; (mov r8, r8)
 80036f0:	46bd      	mov	sp, r7
 80036f2:	b002      	add	sp, #8
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	46c0      	nop			; (mov r8, r8)
 80036f8:	20000140 	.word	0x20000140

080036fc <getDateTime>:
	d->date = sdate.Date;
	d->weekday = sdate.WeekDay;
}

// not using getDate and getTime for possible efficiency
void getDateTime(struct dates *d, struct times *t, RTC_HandleTypeDef *hrtc) {
 80036fc:	b5b0      	push	{r4, r5, r7, lr}
 80036fe:	b08a      	sub	sp, #40	; 0x28
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
	RTC_DateTypeDef sdate;
	RTC_TimeTypeDef stime;

	// programming manual says to read time after date. something shadow registers.
	// not done automatically in HAL
	HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN);
 8003708:	2510      	movs	r5, #16
 800370a:	1979      	adds	r1, r7, r5
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	0018      	movs	r0, r3
 8003712:	f005 fbf5 	bl	8008f00 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 8003716:	2124      	movs	r1, #36	; 0x24
 8003718:	000c      	movs	r4, r1
 800371a:	1879      	adds	r1, r7, r1
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	0018      	movs	r0, r3
 8003722:	f005 fcf7 	bl	8009114 <HAL_RTC_GetDate>

	// pulls last 2 digits from RTC and upper 2 digits from static variable
	d->yr = century*100 + sdate.Year;
 8003726:	4b14      	ldr	r3, [pc, #80]	; (8003778 <getDateTime+0x7c>)
 8003728:	881b      	ldrh	r3, [r3, #0]
 800372a:	2264      	movs	r2, #100	; 0x64
 800372c:	4353      	muls	r3, r2
 800372e:	b29a      	uxth	r2, r3
 8003730:	0021      	movs	r1, r4
 8003732:	187b      	adds	r3, r7, r1
 8003734:	78db      	ldrb	r3, [r3, #3]
 8003736:	b29b      	uxth	r3, r3
 8003738:	18d3      	adds	r3, r2, r3
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	801a      	strh	r2, [r3, #0]
	d->month = sdate.Month;
 8003740:	187b      	adds	r3, r7, r1
 8003742:	785a      	ldrb	r2, [r3, #1]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	709a      	strb	r2, [r3, #2]
	d->date = sdate.Date;
 8003748:	187b      	adds	r3, r7, r1
 800374a:	789a      	ldrb	r2, [r3, #2]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	70da      	strb	r2, [r3, #3]
	d->weekday = sdate.WeekDay;
 8003750:	187b      	adds	r3, r7, r1
 8003752:	781a      	ldrb	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	711a      	strb	r2, [r3, #4]

	t->hr = stime.Hours;
 8003758:	197b      	adds	r3, r7, r5
 800375a:	781a      	ldrb	r2, [r3, #0]
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	701a      	strb	r2, [r3, #0]
	t->min = stime.Minutes;
 8003760:	197b      	adds	r3, r7, r5
 8003762:	785a      	ldrb	r2, [r3, #1]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	705a      	strb	r2, [r3, #1]
	t->sec = stime.Seconds;
 8003768:	197b      	adds	r3, r7, r5
 800376a:	789a      	ldrb	r2, [r3, #2]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	709a      	strb	r2, [r3, #2]
}
 8003770:	46c0      	nop			; (mov r8, r8)
 8003772:	46bd      	mov	sp, r7
 8003774:	b00a      	add	sp, #40	; 0x28
 8003776:	bdb0      	pop	{r4, r5, r7, pc}
 8003778:	20000002 	.word	0x20000002

0800377c <setRTCCalibration>:
// ---- end of RTC getters ----

// ---- RTC calibration function ----
// calibVal should be given in drift/day in seconds
// calibration output on PC13
void setRTCCalibration(int calibVal, RTC_HandleTypeDef *hrtc) {
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
	uint16_t calm = 0;
 8003786:	230e      	movs	r3, #14
 8003788:	18fb      	adds	r3, r7, r3
 800378a:	2200      	movs	r2, #0
 800378c:	801a      	strh	r2, [r3, #0]
	uint32_t temp;

	if (calibVal == 0) return;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d048      	beq.n	8003826 <setRTCCalibration+0xaa>
	else if (calibVal < 0) {		// drift offset is negative. need to slow rtc down
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	da20      	bge.n	80037dc <setRTCCalibration+0x60>
		if (calibVal <= -42) {		// bounds checking. just set to max
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	3329      	adds	r3, #41	; 0x29
 800379e:	da06      	bge.n	80037ae <setRTCCalibration+0x32>
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_RESET, 0x1FF);
 80037a0:	4b23      	ldr	r3, [pc, #140]	; (8003830 <setRTCCalibration+0xb4>)
 80037a2:	6838      	ldr	r0, [r7, #0]
 80037a4:	2200      	movs	r2, #0
 80037a6:	2100      	movs	r1, #0
 80037a8:	f005 ffd3 	bl	8009752 <HAL_RTCEx_SetSmoothCalib>
 80037ac:	e03c      	b.n	8003828 <setRTCCalibration+0xac>
		}
		else {
			// math for setting CALM 9-bit register in RTC. formula in notes and in L0 programming reference manual
			temp = -calibVal*32768*32/86400;		// possible overflow when doing math, so reordering
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	0013      	movs	r3, r2
 80037b2:	031b      	lsls	r3, r3, #12
 80037b4:	1a9b      	subs	r3, r3, r2
 80037b6:	051b      	lsls	r3, r3, #20
 80037b8:	491e      	ldr	r1, [pc, #120]	; (8003834 <setRTCCalibration+0xb8>)
 80037ba:	0018      	movs	r0, r3
 80037bc:	f7fc fd36 	bl	800022c <__divsi3>
 80037c0:	0003      	movs	r3, r0
 80037c2:	60bb      	str	r3, [r7, #8]
			calm = temp;
 80037c4:	210e      	movs	r1, #14
 80037c6:	187b      	adds	r3, r7, r1
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	801a      	strh	r2, [r3, #0]
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_RESET, calm);
 80037cc:	187b      	adds	r3, r7, r1
 80037ce:	881b      	ldrh	r3, [r3, #0]
 80037d0:	6838      	ldr	r0, [r7, #0]
 80037d2:	2200      	movs	r2, #0
 80037d4:	2100      	movs	r1, #0
 80037d6:	f005 ffbc 	bl	8009752 <HAL_RTCEx_SetSmoothCalib>
 80037da:	e025      	b.n	8003828 <setRTCCalibration+0xac>
		}
	}
	else {
		if (calibVal >= 42) { 		// drift offset is positive. need to speed rtc up
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b29      	cmp	r3, #41	; 0x29
 80037e0:	dd07      	ble.n	80037f2 <setRTCCalibration+0x76>
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_SET, 0);
 80037e2:	2380      	movs	r3, #128	; 0x80
 80037e4:	021a      	lsls	r2, r3, #8
 80037e6:	6838      	ldr	r0, [r7, #0]
 80037e8:	2300      	movs	r3, #0
 80037ea:	2100      	movs	r1, #0
 80037ec:	f005 ffb1 	bl	8009752 <HAL_RTCEx_SetSmoothCalib>
 80037f0:	e01a      	b.n	8003828 <setRTCCalibration+0xac>
		}
		else {
			// math
			temp = 512-(calibVal*32768*32/86400);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	051b      	lsls	r3, r3, #20
 80037f6:	4910      	ldr	r1, [pc, #64]	; (8003838 <setRTCCalibration+0xbc>)
 80037f8:	0018      	movs	r0, r3
 80037fa:	f7fc fd17 	bl	800022c <__divsi3>
 80037fe:	0003      	movs	r3, r0
 8003800:	2280      	movs	r2, #128	; 0x80
 8003802:	0092      	lsls	r2, r2, #2
 8003804:	4694      	mov	ip, r2
 8003806:	4463      	add	r3, ip
 8003808:	60bb      	str	r3, [r7, #8]
			calm = temp;
 800380a:	210e      	movs	r1, #14
 800380c:	187b      	adds	r3, r7, r1
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	801a      	strh	r2, [r3, #0]
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_SET, calm);
 8003812:	187b      	adds	r3, r7, r1
 8003814:	8819      	ldrh	r1, [r3, #0]
 8003816:	2380      	movs	r3, #128	; 0x80
 8003818:	021a      	lsls	r2, r3, #8
 800381a:	6838      	ldr	r0, [r7, #0]
 800381c:	000b      	movs	r3, r1
 800381e:	2100      	movs	r1, #0
 8003820:	f005 ff97 	bl	8009752 <HAL_RTCEx_SetSmoothCalib>
 8003824:	e000      	b.n	8003828 <setRTCCalibration+0xac>
	if (calibVal == 0) return;
 8003826:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8003828:	46bd      	mov	sp, r7
 800382a:	b004      	add	sp, #16
 800382c:	bd80      	pop	{r7, pc}
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	000001ff 	.word	0x000001ff
 8003834:	00015180 	.word	0x00015180
 8003838:	fffeae80 	.word	0xfffeae80

0800383c <timeToSeconds>:
// ---- end of RTC calibration function ----

// ---- converters and calculators ----
uint32_t timeToSeconds(struct times *t) {
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
	return t->sec + t->min*60 + t->hr*3600;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	789b      	ldrb	r3, [r3, #2]
 8003848:	0019      	movs	r1, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	785b      	ldrb	r3, [r3, #1]
 800384e:	001a      	movs	r2, r3
 8003850:	0013      	movs	r3, r2
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	1a9b      	subs	r3, r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	18c9      	adds	r1, r1, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	001a      	movs	r2, r3
 8003860:	0013      	movs	r3, r2
 8003862:	011b      	lsls	r3, r3, #4
 8003864:	1a9b      	subs	r3, r3, r2
 8003866:	011a      	lsls	r2, r3, #4
 8003868:	1ad2      	subs	r2, r2, r3
 800386a:	0113      	lsls	r3, r2, #4
 800386c:	001a      	movs	r2, r3
 800386e:	0013      	movs	r3, r2
 8003870:	18cb      	adds	r3, r1, r3
}
 8003872:	0018      	movs	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	b002      	add	sp, #8
 8003878:	bd80      	pop	{r7, pc}

0800387a <secondsToTime>:

void secondsToTime(struct times *t, uint32_t seconds) {
 800387a:	b580      	push	{r7, lr}
 800387c:	b082      	sub	sp, #8
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
 8003882:	6039      	str	r1, [r7, #0]
	t->hr = seconds / 3600;
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	23e1      	movs	r3, #225	; 0xe1
 8003888:	0119      	lsls	r1, r3, #4
 800388a:	0010      	movs	r0, r2
 800388c:	f7fc fc44 	bl	8000118 <__udivsi3>
 8003890:	0003      	movs	r3, r0
 8003892:	b2da      	uxtb	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	701a      	strb	r2, [r3, #0]
	seconds %= 3600;
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	23e1      	movs	r3, #225	; 0xe1
 800389c:	0119      	lsls	r1, r3, #4
 800389e:	0010      	movs	r0, r2
 80038a0:	f7fc fcc0 	bl	8000224 <__aeabi_uidivmod>
 80038a4:	000b      	movs	r3, r1
 80038a6:	603b      	str	r3, [r7, #0]
	t->min = seconds / 60;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	213c      	movs	r1, #60	; 0x3c
 80038ac:	0018      	movs	r0, r3
 80038ae:	f7fc fc33 	bl	8000118 <__udivsi3>
 80038b2:	0003      	movs	r3, r0
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	705a      	strb	r2, [r3, #1]
	seconds %= 60;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	213c      	movs	r1, #60	; 0x3c
 80038be:	0018      	movs	r0, r3
 80038c0:	f7fc fcb0 	bl	8000224 <__aeabi_uidivmod>
 80038c4:	000b      	movs	r3, r1
 80038c6:	603b      	str	r3, [r7, #0]
	t->sec = seconds;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	709a      	strb	r2, [r3, #2]
}
 80038d0:	46c0      	nop			; (mov r8, r8)
 80038d2:	46bd      	mov	sp, r7
 80038d4:	b002      	add	sp, #8
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <weekdayCalculator>:
 * weekdays is 0-6, with 0 being sunday. hal uses 1=monday, 7=sunday - just call with % 7 to integrate with hal
 * months given in 1-12, with 1 being january. hal uses the same setup
 * rtc represents years with last 2 digits only. make sure year has all 4 numbers
 * should be accurate for any gregorian date
 */
uint8_t weekdayCalculator(uint16_t year, uint8_t month, uint8_t day) {
 80038d8:	b590      	push	{r4, r7, lr}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	0004      	movs	r4, r0
 80038e0:	0008      	movs	r0, r1
 80038e2:	0011      	movs	r1, r2
 80038e4:	1dbb      	adds	r3, r7, #6
 80038e6:	1c22      	adds	r2, r4, #0
 80038e8:	801a      	strh	r2, [r3, #0]
 80038ea:	1d7b      	adds	r3, r7, #5
 80038ec:	1c02      	adds	r2, r0, #0
 80038ee:	701a      	strb	r2, [r3, #0]
 80038f0:	1d3b      	adds	r3, r7, #4
 80038f2:	1c0a      	adds	r2, r1, #0
 80038f4:	701a      	strb	r2, [r3, #0]
	static uint8_t table[] = {0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4};
	if (month < 3) year--;
 80038f6:	1d7b      	adds	r3, r7, #5
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d804      	bhi.n	8003908 <weekdayCalculator+0x30>
 80038fe:	1dbb      	adds	r3, r7, #6
 8003900:	881a      	ldrh	r2, [r3, #0]
 8003902:	1dbb      	adds	r3, r7, #6
 8003904:	3a01      	subs	r2, #1
 8003906:	801a      	strh	r2, [r3, #0]
	uint16_t temp = (year + year/4 - year/100 + year/400 + table[month-1] + day) % 7;
 8003908:	1dbb      	adds	r3, r7, #6
 800390a:	881b      	ldrh	r3, [r3, #0]
 800390c:	1dba      	adds	r2, r7, #6
 800390e:	8812      	ldrh	r2, [r2, #0]
 8003910:	0892      	lsrs	r2, r2, #2
 8003912:	b292      	uxth	r2, r2
 8003914:	189c      	adds	r4, r3, r2
 8003916:	1dbb      	adds	r3, r7, #6
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	2164      	movs	r1, #100	; 0x64
 800391c:	0018      	movs	r0, r3
 800391e:	f7fc fbfb 	bl	8000118 <__udivsi3>
 8003922:	0003      	movs	r3, r0
 8003924:	b29b      	uxth	r3, r3
 8003926:	1ae4      	subs	r4, r4, r3
 8003928:	1dbb      	adds	r3, r7, #6
 800392a:	881a      	ldrh	r2, [r3, #0]
 800392c:	23c8      	movs	r3, #200	; 0xc8
 800392e:	0059      	lsls	r1, r3, #1
 8003930:	0010      	movs	r0, r2
 8003932:	f7fc fbf1 	bl	8000118 <__udivsi3>
 8003936:	0003      	movs	r3, r0
 8003938:	b29b      	uxth	r3, r3
 800393a:	18e3      	adds	r3, r4, r3
 800393c:	1d7a      	adds	r2, r7, #5
 800393e:	7812      	ldrb	r2, [r2, #0]
 8003940:	3a01      	subs	r2, #1
 8003942:	490e      	ldr	r1, [pc, #56]	; (800397c <weekdayCalculator+0xa4>)
 8003944:	5c8a      	ldrb	r2, [r1, r2]
 8003946:	189a      	adds	r2, r3, r2
 8003948:	1d3b      	adds	r3, r7, #4
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	18d3      	adds	r3, r2, r3
 800394e:	2107      	movs	r1, #7
 8003950:	0018      	movs	r0, r3
 8003952:	f7fc fd51 	bl	80003f8 <__aeabi_idivmod>
 8003956:	000b      	movs	r3, r1
 8003958:	001a      	movs	r2, r3
 800395a:	210e      	movs	r1, #14
 800395c:	187b      	adds	r3, r7, r1
 800395e:	801a      	strh	r2, [r3, #0]
	if (temp == 0) return RTC_WEEKDAY_SUNDAY;
 8003960:	187b      	adds	r3, r7, r1
 8003962:	881b      	ldrh	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <weekdayCalculator+0x94>
 8003968:	2307      	movs	r3, #7
 800396a:	e003      	b.n	8003974 <weekdayCalculator+0x9c>
	else return temp;
 800396c:	230e      	movs	r3, #14
 800396e:	18fb      	adds	r3, r7, r3
 8003970:	881b      	ldrh	r3, [r3, #0]
 8003972:	b2db      	uxtb	r3, r3
}
 8003974:	0018      	movs	r0, r3
 8003976:	46bd      	mov	sp, r7
 8003978:	b005      	add	sp, #20
 800397a:	bd90      	pop	{r4, r7, pc}
 800397c:	20000004 	.word	0x20000004

08003980 <maxDaysInMonth>:

// calculator for number of days in a month given a month and accounting for leap years
// assumes month is 1-12, 1=january, 12=december
uint8_t maxDaysInMonth(uint8_t month, uint16_t year) {
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	0002      	movs	r2, r0
 8003988:	1dfb      	adds	r3, r7, #7
 800398a:	701a      	strb	r2, [r3, #0]
 800398c:	1d3b      	adds	r3, r7, #4
 800398e:	1c0a      	adds	r2, r1, #0
 8003990:	801a      	strh	r2, [r3, #0]
	if (month == 0 || month > 12) return 0;		// bounds checking
 8003992:	1dfb      	adds	r3, r7, #7
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <maxDaysInMonth+0x22>
 800399a:	1dfb      	adds	r3, r7, #7
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	2b0c      	cmp	r3, #12
 80039a0:	d901      	bls.n	80039a6 <maxDaysInMonth+0x26>
 80039a2:	2300      	movs	r3, #0
 80039a4:	e052      	b.n	8003a4c <maxDaysInMonth+0xcc>

	// not using built-in defines, because they're in BCD
	if (month == 1  ||		// january
 80039a6:	1dfb      	adds	r3, r7, #7
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d017      	beq.n	80039de <maxDaysInMonth+0x5e>
 80039ae:	1dfb      	adds	r3, r7, #7
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	2b03      	cmp	r3, #3
 80039b4:	d013      	beq.n	80039de <maxDaysInMonth+0x5e>
		month == 3  ||		// march
 80039b6:	1dfb      	adds	r3, r7, #7
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2b05      	cmp	r3, #5
 80039bc:	d00f      	beq.n	80039de <maxDaysInMonth+0x5e>
		month == 5  ||		// may
 80039be:	1dfb      	adds	r3, r7, #7
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b07      	cmp	r3, #7
 80039c4:	d00b      	beq.n	80039de <maxDaysInMonth+0x5e>
		month == 7  ||		// july
 80039c6:	1dfb      	adds	r3, r7, #7
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d007      	beq.n	80039de <maxDaysInMonth+0x5e>
		month == 8  ||		// august
 80039ce:	1dfb      	adds	r3, r7, #7
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	2b0a      	cmp	r3, #10
 80039d4:	d003      	beq.n	80039de <maxDaysInMonth+0x5e>
		month == 10 ||		// october
 80039d6:	1dfb      	adds	r3, r7, #7
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	2b0c      	cmp	r3, #12
 80039dc:	d101      	bne.n	80039e2 <maxDaysInMonth+0x62>
		month == 12) {		// december
		return 31;
 80039de:	231f      	movs	r3, #31
 80039e0:	e034      	b.n	8003a4c <maxDaysInMonth+0xcc>
	}
	else if (month == 4 ||	// april
 80039e2:	1dfb      	adds	r3, r7, #7
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d00b      	beq.n	8003a02 <maxDaysInMonth+0x82>
 80039ea:	1dfb      	adds	r3, r7, #7
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	2b06      	cmp	r3, #6
 80039f0:	d007      	beq.n	8003a02 <maxDaysInMonth+0x82>
			 month == 6 ||	// june
 80039f2:	1dfb      	adds	r3, r7, #7
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	2b09      	cmp	r3, #9
 80039f8:	d003      	beq.n	8003a02 <maxDaysInMonth+0x82>
			 month == 9 ||	// september
 80039fa:	1dfb      	adds	r3, r7, #7
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	2b0b      	cmp	r3, #11
 8003a00:	d101      	bne.n	8003a06 <maxDaysInMonth+0x86>
			 month == 11) {	// november
		return 30;
 8003a02:	231e      	movs	r3, #30
 8003a04:	e022      	b.n	8003a4c <maxDaysInMonth+0xcc>
	}

	// february/leap year calculator
	// leap year for every 4th year, but every 100th year is not a leap year except on every 400th year
	// ex. 2020 is a leap year, 2100 is not a leap year, 2000 is a leap year.
	else if (year % 400 == 0) return 29;
 8003a06:	1d3b      	adds	r3, r7, #4
 8003a08:	881a      	ldrh	r2, [r3, #0]
 8003a0a:	23c8      	movs	r3, #200	; 0xc8
 8003a0c:	0059      	lsls	r1, r3, #1
 8003a0e:	0010      	movs	r0, r2
 8003a10:	f7fc fc08 	bl	8000224 <__aeabi_uidivmod>
 8003a14:	000b      	movs	r3, r1
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <maxDaysInMonth+0xa0>
 8003a1c:	231d      	movs	r3, #29
 8003a1e:	e015      	b.n	8003a4c <maxDaysInMonth+0xcc>
	else if (year % 100 == 0) return 28;
 8003a20:	1d3b      	adds	r3, r7, #4
 8003a22:	881b      	ldrh	r3, [r3, #0]
 8003a24:	2164      	movs	r1, #100	; 0x64
 8003a26:	0018      	movs	r0, r3
 8003a28:	f7fc fbfc 	bl	8000224 <__aeabi_uidivmod>
 8003a2c:	000b      	movs	r3, r1
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <maxDaysInMonth+0xb8>
 8003a34:	231c      	movs	r3, #28
 8003a36:	e009      	b.n	8003a4c <maxDaysInMonth+0xcc>
	else if (year % 4 == 0) return 29;
 8003a38:	1d3b      	adds	r3, r7, #4
 8003a3a:	881b      	ldrh	r3, [r3, #0]
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	4013      	ands	r3, r2
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <maxDaysInMonth+0xca>
 8003a46:	231d      	movs	r3, #29
 8003a48:	e000      	b.n	8003a4c <maxDaysInMonth+0xcc>
	else return 28;
 8003a4a:	231c      	movs	r3, #28
}
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	b002      	add	sp, #8
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a54:	b590      	push	{r4, r7, lr}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a5a:	f003 f867 	bl	8006b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a5e:	f000 f87d 	bl	8003b5c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a62:	f000 fd17 	bl	8004494 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003a66:	f000 fa1d 	bl	8003ea4 <MX_SPI1_Init>
  MX_ADC_Init();
 8003a6a:	f000 f8fb 	bl	8003c64 <MX_ADC_Init>
  MX_RTC_Init();
 8003a6e:	f000 f95f 	bl	8003d30 <MX_RTC_Init>
  MX_TIM21_Init();
 8003a72:	f000 fbc9 	bl	8004208 <MX_TIM21_Init>
  MX_DMA_Init();
 8003a76:	f000 fcef 	bl	8004458 <MX_DMA_Init>
  MX_TIM22_Init();
 8003a7a:	f000 fc5d 	bl	8004338 <MX_TIM22_Init>
  MX_TIM2_Init();
 8003a7e:	f000 fa4d 	bl	8003f1c <MX_TIM2_Init>
  MX_TIM6_Init();
 8003a82:	f000 fb85 	bl	8004190 <MX_TIM6_Init>
  MX_TIM3_Init();
 8003a86:	f000 faf9 	bl	800407c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	// rtc software calibration
	setRTCCalibration(-3, &hrtc);
 8003a8a:	4a2a      	ldr	r2, [pc, #168]	; (8003b34 <main+0xe0>)
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	425b      	negs	r3, r3
 8003a90:	0011      	movs	r1, r2
 8003a92:	0018      	movs	r0, r3
 8003a94:	f7ff fe72 	bl	800377c <setRTCCalibration>

  	// initialization for display
	TFT_startup(&hspi1);
 8003a98:	4b27      	ldr	r3, [pc, #156]	; (8003b38 <main+0xe4>)
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	f7fe f9c4 	bl	8001e28 <TFT_startup>
	clearScreen(ST77XX_BLACK, &hspi1);
 8003aa0:	4b25      	ldr	r3, [pc, #148]	; (8003b38 <main+0xe4>)
 8003aa2:	0019      	movs	r1, r3
 8003aa4:	2000      	movs	r0, #0
 8003aa6:	f7fe fd35 	bl	8002514 <clearScreen>

	// initialization for ui and hardware
	initFace();
 8003aaa:	f002 ffdf 	bl	8006a6c <initFace>
	setClockAlarm(&hrtc);
 8003aae:	4b21      	ldr	r3, [pc, #132]	; (8003b34 <main+0xe0>)
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	f7ff fce7 	bl	8003484 <setClockAlarm>
	runTimerStopwatchBase(&htim21);		// running time bases
 8003ab6:	4b21      	ldr	r3, [pc, #132]	; (8003b3c <main+0xe8>)
 8003ab8:	0018      	movs	r0, r3
 8003aba:	f001 fa77 	bl	8004fac <runTimerStopwatchBase>
//	runBacklightMotorBase(&htim2);
	runADCSampler(&htim22);
 8003abe:	4b20      	ldr	r3, [pc, #128]	; (8003b40 <main+0xec>)
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	f001 fa8b 	bl	8004fdc <runADCSampler>
	setDisplayBacklight(100, &htim3);
 8003ac6:	4b1f      	ldr	r3, [pc, #124]	; (8003b44 <main+0xf0>)
 8003ac8:	0019      	movs	r1, r3
 8003aca:	2064      	movs	r0, #100	; 0x64
 8003acc:	f001 fa98 	bl	8005000 <setDisplayBacklight>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		updateState(&hrtc, &htim21, &htim2, &htim6, &hspi1);
 8003ad0:	4c1d      	ldr	r4, [pc, #116]	; (8003b48 <main+0xf4>)
 8003ad2:	4a1e      	ldr	r2, [pc, #120]	; (8003b4c <main+0xf8>)
 8003ad4:	4919      	ldr	r1, [pc, #100]	; (8003b3c <main+0xe8>)
 8003ad6:	4817      	ldr	r0, [pc, #92]	; (8003b34 <main+0xe0>)
 8003ad8:	4b17      	ldr	r3, [pc, #92]	; (8003b38 <main+0xe4>)
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	0023      	movs	r3, r4
 8003ade:	f001 fb5d 	bl	800519c <updateState>
		updateDisplay(&hrtc, &hspi1);
 8003ae2:	4a15      	ldr	r2, [pc, #84]	; (8003b38 <main+0xe4>)
 8003ae4:	4b13      	ldr	r3, [pc, #76]	; (8003b34 <main+0xe0>)
 8003ae6:	0011      	movs	r1, r2
 8003ae8:	0018      	movs	r0, r3
 8003aea:	f002 f941 	bl	8005d70 <updateDisplay>
		batteryManager(&hadc, &hspi1, &htim21, &htim3);
 8003aee:	4b15      	ldr	r3, [pc, #84]	; (8003b44 <main+0xf0>)
 8003af0:	4a12      	ldr	r2, [pc, #72]	; (8003b3c <main+0xe8>)
 8003af2:	4911      	ldr	r1, [pc, #68]	; (8003b38 <main+0xe4>)
 8003af4:	4816      	ldr	r0, [pc, #88]	; (8003b50 <main+0xfc>)
 8003af6:	f7ff fa97 	bl	8003028 <batteryManager>

		if (isTimerDone || isAlarmDone) {
 8003afa:	4b16      	ldr	r3, [pc, #88]	; (8003b54 <main+0x100>)
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d104      	bne.n	8003b0e <main+0xba>
 8003b04:	4b14      	ldr	r3, [pc, #80]	; (8003b58 <main+0x104>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d010      	beq.n	8003b30 <main+0xdc>
			runMotor(&htim2);
 8003b0e:	4b0f      	ldr	r3, [pc, #60]	; (8003b4c <main+0xf8>)
 8003b10:	0018      	movs	r0, r3
 8003b12:	f001 fac1 	bl	8005098 <runMotor>
			updateDisplay(&hrtc, &hspi1);
 8003b16:	4a08      	ldr	r2, [pc, #32]	; (8003b38 <main+0xe4>)
 8003b18:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <main+0xe0>)
 8003b1a:	0011      	movs	r1, r2
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	f002 f927 	bl	8005d70 <updateDisplay>
			isTimerDone = isAlarmDone = 0;
 8003b22:	2100      	movs	r1, #0
 8003b24:	4b0c      	ldr	r3, [pc, #48]	; (8003b58 <main+0x104>)
 8003b26:	1c0a      	adds	r2, r1, #0
 8003b28:	701a      	strb	r2, [r3, #0]
 8003b2a:	4b0a      	ldr	r3, [pc, #40]	; (8003b54 <main+0x100>)
 8003b2c:	1c0a      	adds	r2, r1, #0
 8003b2e:	701a      	strb	r2, [r3, #0]
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8003b30:	bf30      	wfi
		updateState(&hrtc, &htim21, &htim2, &htim6, &hspi1);
 8003b32:	e7cd      	b.n	8003ad0 <main+0x7c>
 8003b34:	20000210 	.word	0x20000210
 8003b38:	20000234 	.word	0x20000234
 8003b3c:	2000036c 	.word	0x2000036c
 8003b40:	200001d4 	.word	0x200001d4
 8003b44:	20000198 	.word	0x20000198
 8003b48:	20000150 	.word	0x20000150
 8003b4c:	2000028c 	.word	0x2000028c
 8003b50:	200002c8 	.word	0x200002c8
 8003b54:	2000014c 	.word	0x2000014c
 8003b58:	2000013e 	.word	0x2000013e

08003b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b5c:	b590      	push	{r4, r7, lr}
 8003b5e:	b09f      	sub	sp, #124	; 0x7c
 8003b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b62:	2440      	movs	r4, #64	; 0x40
 8003b64:	193b      	adds	r3, r7, r4
 8003b66:	0018      	movs	r0, r3
 8003b68:	2338      	movs	r3, #56	; 0x38
 8003b6a:	001a      	movs	r2, r3
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	f007 faf4 	bl	800b15a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b72:	232c      	movs	r3, #44	; 0x2c
 8003b74:	18fb      	adds	r3, r7, r3
 8003b76:	0018      	movs	r0, r3
 8003b78:	2314      	movs	r3, #20
 8003b7a:	001a      	movs	r2, r3
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	f007 faec 	bl	800b15a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b82:	1d3b      	adds	r3, r7, #4
 8003b84:	0018      	movs	r0, r3
 8003b86:	2328      	movs	r3, #40	; 0x28
 8003b88:	001a      	movs	r2, r3
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	f007 fae5 	bl	800b15a <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b90:	4b31      	ldr	r3, [pc, #196]	; (8003c58 <SystemClock_Config+0xfc>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a31      	ldr	r2, [pc, #196]	; (8003c5c <SystemClock_Config+0x100>)
 8003b96:	401a      	ands	r2, r3
 8003b98:	4b2f      	ldr	r3, [pc, #188]	; (8003c58 <SystemClock_Config+0xfc>)
 8003b9a:	2180      	movs	r1, #128	; 0x80
 8003b9c:	0109      	lsls	r1, r1, #4
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8003ba2:	f004 f94b 	bl	8007e3c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003ba6:	4b2e      	ldr	r3, [pc, #184]	; (8003c60 <SystemClock_Config+0x104>)
 8003ba8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003baa:	4b2d      	ldr	r3, [pc, #180]	; (8003c60 <SystemClock_Config+0x104>)
 8003bac:	492b      	ldr	r1, [pc, #172]	; (8003c5c <SystemClock_Config+0x100>)
 8003bae:	400a      	ands	r2, r1
 8003bb0:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8003bb2:	193b      	adds	r3, r7, r4
 8003bb4:	2226      	movs	r2, #38	; 0x26
 8003bb6:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003bb8:	193b      	adds	r3, r7, r4
 8003bba:	2280      	movs	r2, #128	; 0x80
 8003bbc:	0052      	lsls	r2, r2, #1
 8003bbe:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003bc0:	0021      	movs	r1, r4
 8003bc2:	187b      	adds	r3, r7, r1
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003bc8:	187b      	adds	r3, r7, r1
 8003bca:	2210      	movs	r2, #16
 8003bcc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003bce:	187b      	adds	r3, r7, r1
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003bd4:	187b      	adds	r3, r7, r1
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003bda:	187b      	adds	r3, r7, r1
 8003bdc:	2200      	movs	r2, #0
 8003bde:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8003be0:	187b      	adds	r3, r7, r1
 8003be2:	2280      	movs	r2, #128	; 0x80
 8003be4:	02d2      	lsls	r2, r2, #11
 8003be6:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8003be8:	187b      	adds	r3, r7, r1
 8003bea:	2280      	movs	r2, #128	; 0x80
 8003bec:	03d2      	lsls	r2, r2, #15
 8003bee:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bf0:	187b      	adds	r3, r7, r1
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f004 f930 	bl	8007e58 <HAL_RCC_OscConfig>
 8003bf8:	1e03      	subs	r3, r0, #0
 8003bfa:	d001      	beq.n	8003c00 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8003bfc:	f000 fd00 	bl	8004600 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c00:	212c      	movs	r1, #44	; 0x2c
 8003c02:	187b      	adds	r3, r7, r1
 8003c04:	220f      	movs	r2, #15
 8003c06:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c08:	187b      	adds	r3, r7, r1
 8003c0a:	2203      	movs	r2, #3
 8003c0c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c0e:	187b      	adds	r3, r7, r1
 8003c10:	2200      	movs	r2, #0
 8003c12:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003c14:	187b      	adds	r3, r7, r1
 8003c16:	2200      	movs	r2, #0
 8003c18:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c1a:	187b      	adds	r3, r7, r1
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003c20:	187b      	adds	r3, r7, r1
 8003c22:	2101      	movs	r1, #1
 8003c24:	0018      	movs	r0, r3
 8003c26:	f004 fce7 	bl	80085f8 <HAL_RCC_ClockConfig>
 8003c2a:	1e03      	subs	r3, r0, #0
 8003c2c:	d001      	beq.n	8003c32 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8003c2e:	f000 fce7 	bl	8004600 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003c32:	1d3b      	adds	r3, r7, #4
 8003c34:	2220      	movs	r2, #32
 8003c36:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003c38:	1d3b      	adds	r3, r7, #4
 8003c3a:	2280      	movs	r2, #128	; 0x80
 8003c3c:	0252      	lsls	r2, r2, #9
 8003c3e:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c40:	1d3b      	adds	r3, r7, #4
 8003c42:	0018      	movs	r0, r3
 8003c44:	f004 fe86 	bl	8008954 <HAL_RCCEx_PeriphCLKConfig>
 8003c48:	1e03      	subs	r3, r0, #0
 8003c4a:	d001      	beq.n	8003c50 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8003c4c:	f000 fcd8 	bl	8004600 <Error_Handler>
  }
}
 8003c50:	46c0      	nop			; (mov r8, r8)
 8003c52:	46bd      	mov	sp, r7
 8003c54:	b01f      	add	sp, #124	; 0x7c
 8003c56:	bd90      	pop	{r4, r7, pc}
 8003c58:	40007000 	.word	0x40007000
 8003c5c:	ffffe7ff 	.word	0xffffe7ff
 8003c60:	40021000 	.word	0x40021000

08003c64 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003c6a:	003b      	movs	r3, r7
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	2308      	movs	r3, #8
 8003c70:	001a      	movs	r2, r3
 8003c72:	2100      	movs	r1, #0
 8003c74:	f007 fa71 	bl	800b15a <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8003c78:	4b2a      	ldr	r3, [pc, #168]	; (8003d24 <MX_ADC_Init+0xc0>)
 8003c7a:	4a2b      	ldr	r2, [pc, #172]	; (8003d28 <MX_ADC_Init+0xc4>)
 8003c7c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8003c7e:	4b29      	ldr	r3, [pc, #164]	; (8003d24 <MX_ADC_Init+0xc0>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003c84:	4b27      	ldr	r3, [pc, #156]	; (8003d24 <MX_ADC_Init+0xc0>)
 8003c86:	2280      	movs	r2, #128	; 0x80
 8003c88:	05d2      	lsls	r2, r2, #23
 8003c8a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003c8c:	4b25      	ldr	r3, [pc, #148]	; (8003d24 <MX_ADC_Init+0xc0>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_79CYCLES_5;
 8003c92:	4b24      	ldr	r3, [pc, #144]	; (8003d24 <MX_ADC_Init+0xc0>)
 8003c94:	2206      	movs	r2, #6
 8003c96:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003c98:	4b22      	ldr	r3, [pc, #136]	; (8003d24 <MX_ADC_Init+0xc0>)
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003c9e:	4b21      	ldr	r3, [pc, #132]	; (8003d24 <MX_ADC_Init+0xc0>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8003ca4:	4b1f      	ldr	r3, [pc, #124]	; (8003d24 <MX_ADC_Init+0xc0>)
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	2100      	movs	r1, #0
 8003caa:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003cac:	4b1d      	ldr	r3, [pc, #116]	; (8003d24 <MX_ADC_Init+0xc0>)
 8003cae:	2221      	movs	r2, #33	; 0x21
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003cb4:	4b1b      	ldr	r3, [pc, #108]	; (8003d24 <MX_ADC_Init+0xc0>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003cba:	4b1a      	ldr	r3, [pc, #104]	; (8003d24 <MX_ADC_Init+0xc0>)
 8003cbc:	22c2      	movs	r2, #194	; 0xc2
 8003cbe:	32ff      	adds	r2, #255	; 0xff
 8003cc0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003cc2:	4b18      	ldr	r3, [pc, #96]	; (8003d24 <MX_ADC_Init+0xc0>)
 8003cc4:	222c      	movs	r2, #44	; 0x2c
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003cca:	4b16      	ldr	r3, [pc, #88]	; (8003d24 <MX_ADC_Init+0xc0>)
 8003ccc:	2204      	movs	r2, #4
 8003cce:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003cd0:	4b14      	ldr	r3, [pc, #80]	; (8003d24 <MX_ADC_Init+0xc0>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003cd6:	4b13      	ldr	r3, [pc, #76]	; (8003d24 <MX_ADC_Init+0xc0>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8003cdc:	4b11      	ldr	r3, [pc, #68]	; (8003d24 <MX_ADC_Init+0xc0>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003ce2:	4b10      	ldr	r3, [pc, #64]	; (8003d24 <MX_ADC_Init+0xc0>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003ce8:	4b0e      	ldr	r3, [pc, #56]	; (8003d24 <MX_ADC_Init+0xc0>)
 8003cea:	0018      	movs	r0, r3
 8003cec:	f002 ff9c 	bl	8006c28 <HAL_ADC_Init>
 8003cf0:	1e03      	subs	r3, r0, #0
 8003cf2:	d001      	beq.n	8003cf8 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8003cf4:	f000 fc84 	bl	8004600 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003cf8:	003b      	movs	r3, r7
 8003cfa:	4a0c      	ldr	r2, [pc, #48]	; (8003d2c <MX_ADC_Init+0xc8>)
 8003cfc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003cfe:	003b      	movs	r3, r7
 8003d00:	2280      	movs	r2, #128	; 0x80
 8003d02:	0152      	lsls	r2, r2, #5
 8003d04:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003d06:	003a      	movs	r2, r7
 8003d08:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <MX_ADC_Init+0xc0>)
 8003d0a:	0011      	movs	r1, r2
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	f003 fa53 	bl	80071b8 <HAL_ADC_ConfigChannel>
 8003d12:	1e03      	subs	r3, r0, #0
 8003d14:	d001      	beq.n	8003d1a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8003d16:	f000 fc73 	bl	8004600 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	b002      	add	sp, #8
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	200002c8 	.word	0x200002c8
 8003d28:	40012400 	.word	0x40012400
 8003d2c:	0c000008 	.word	0x0c000008

08003d30 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b090      	sub	sp, #64	; 0x40
 8003d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003d36:	232c      	movs	r3, #44	; 0x2c
 8003d38:	18fb      	adds	r3, r7, r3
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	2314      	movs	r3, #20
 8003d3e:	001a      	movs	r2, r3
 8003d40:	2100      	movs	r1, #0
 8003d42:	f007 fa0a 	bl	800b15a <memset>
  RTC_DateTypeDef sDate = {0};
 8003d46:	2328      	movs	r3, #40	; 0x28
 8003d48:	18fb      	adds	r3, r7, r3
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8003d4e:	003b      	movs	r3, r7
 8003d50:	0018      	movs	r0, r3
 8003d52:	2328      	movs	r3, #40	; 0x28
 8003d54:	001a      	movs	r2, r3
 8003d56:	2100      	movs	r1, #0
 8003d58:	f007 f9ff 	bl	800b15a <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8003d5c:	4b4f      	ldr	r3, [pc, #316]	; (8003e9c <MX_RTC_Init+0x16c>)
 8003d5e:	4a50      	ldr	r2, [pc, #320]	; (8003ea0 <MX_RTC_Init+0x170>)
 8003d60:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003d62:	4b4e      	ldr	r3, [pc, #312]	; (8003e9c <MX_RTC_Init+0x16c>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003d68:	4b4c      	ldr	r3, [pc, #304]	; (8003e9c <MX_RTC_Init+0x16c>)
 8003d6a:	227f      	movs	r2, #127	; 0x7f
 8003d6c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003d6e:	4b4b      	ldr	r3, [pc, #300]	; (8003e9c <MX_RTC_Init+0x16c>)
 8003d70:	22ff      	movs	r2, #255	; 0xff
 8003d72:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003d74:	4b49      	ldr	r3, [pc, #292]	; (8003e9c <MX_RTC_Init+0x16c>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003d7a:	4b48      	ldr	r3, [pc, #288]	; (8003e9c <MX_RTC_Init+0x16c>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003d80:	4b46      	ldr	r3, [pc, #280]	; (8003e9c <MX_RTC_Init+0x16c>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003d86:	4b45      	ldr	r3, [pc, #276]	; (8003e9c <MX_RTC_Init+0x16c>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003d8c:	4b43      	ldr	r3, [pc, #268]	; (8003e9c <MX_RTC_Init+0x16c>)
 8003d8e:	0018      	movs	r0, r3
 8003d90:	f004 ff54 	bl	8008c3c <HAL_RTC_Init>
 8003d94:	1e03      	subs	r3, r0, #0
 8003d96:	d001      	beq.n	8003d9c <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8003d98:	f000 fc32 	bl	8004600 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 8003d9c:	212c      	movs	r1, #44	; 0x2c
 8003d9e:	187b      	adds	r3, r7, r1
 8003da0:	2200      	movs	r2, #0
 8003da2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8003da4:	187b      	adds	r3, r7, r1
 8003da6:	2200      	movs	r2, #0
 8003da8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8003daa:	187b      	adds	r3, r7, r1
 8003dac:	2200      	movs	r2, #0
 8003dae:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003db0:	187b      	adds	r3, r7, r1
 8003db2:	2200      	movs	r2, #0
 8003db4:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003db6:	187b      	adds	r3, r7, r1
 8003db8:	2200      	movs	r2, #0
 8003dba:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003dbc:	1879      	adds	r1, r7, r1
 8003dbe:	4b37      	ldr	r3, [pc, #220]	; (8003e9c <MX_RTC_Init+0x16c>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	0018      	movs	r0, r3
 8003dc4:	f004 ffd8 	bl	8008d78 <HAL_RTC_SetTime>
 8003dc8:	1e03      	subs	r3, r0, #0
 8003dca:	d001      	beq.n	8003dd0 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8003dcc:	f000 fc18 	bl	8004600 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8003dd0:	2128      	movs	r1, #40	; 0x28
 8003dd2:	187b      	adds	r3, r7, r1
 8003dd4:	2207      	movs	r2, #7
 8003dd6:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 8003dd8:	187b      	adds	r3, r7, r1
 8003dda:	2212      	movs	r2, #18
 8003ddc:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8003dde:	187b      	adds	r3, r7, r1
 8003de0:	2201      	movs	r2, #1
 8003de2:	709a      	strb	r2, [r3, #2]
  sDate.Year = 19;
 8003de4:	187b      	adds	r3, r7, r1
 8003de6:	2213      	movs	r2, #19
 8003de8:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003dea:	1879      	adds	r1, r7, r1
 8003dec:	4b2b      	ldr	r3, [pc, #172]	; (8003e9c <MX_RTC_Init+0x16c>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	0018      	movs	r0, r3
 8003df2:	f005 f8e1 	bl	8008fb8 <HAL_RTC_SetDate>
 8003df6:	1e03      	subs	r3, r0, #0
 8003df8:	d001      	beq.n	8003dfe <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8003dfa:	f000 fc01 	bl	8004600 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 8003dfe:	003b      	movs	r3, r7
 8003e00:	2200      	movs	r2, #0
 8003e02:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8003e04:	003b      	movs	r3, r7
 8003e06:	2200      	movs	r2, #0
 8003e08:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8003e0a:	003b      	movs	r3, r7
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8003e10:	003b      	movs	r3, r7
 8003e12:	2200      	movs	r2, #0
 8003e14:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003e16:	003b      	movs	r3, r7
 8003e18:	2200      	movs	r2, #0
 8003e1a:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003e1c:	003b      	movs	r3, r7
 8003e1e:	2200      	movs	r2, #0
 8003e20:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003e22:	003b      	movs	r3, r7
 8003e24:	2200      	movs	r2, #0
 8003e26:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003e28:	003b      	movs	r3, r7
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003e2e:	003b      	movs	r3, r7
 8003e30:	2200      	movs	r2, #0
 8003e32:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8003e34:	003b      	movs	r3, r7
 8003e36:	2220      	movs	r2, #32
 8003e38:	2101      	movs	r1, #1
 8003e3a:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8003e3c:	003b      	movs	r3, r7
 8003e3e:	2280      	movs	r2, #128	; 0x80
 8003e40:	0052      	lsls	r2, r2, #1
 8003e42:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003e44:	0039      	movs	r1, r7
 8003e46:	4b15      	ldr	r3, [pc, #84]	; (8003e9c <MX_RTC_Init+0x16c>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	f005 f9b0 	bl	80091b0 <HAL_RTC_SetAlarm_IT>
 8003e50:	1e03      	subs	r3, r0, #0
 8003e52:	d001      	beq.n	8003e58 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 8003e54:	f000 fbd4 	bl	8004600 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 1;
 8003e58:	003b      	movs	r3, r7
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_B;
 8003e60:	003b      	movs	r3, r7
 8003e62:	2280      	movs	r2, #128	; 0x80
 8003e64:	0092      	lsls	r2, r2, #2
 8003e66:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003e68:	0039      	movs	r1, r7
 8003e6a:	4b0c      	ldr	r3, [pc, #48]	; (8003e9c <MX_RTC_Init+0x16c>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	0018      	movs	r0, r3
 8003e70:	f005 f99e 	bl	80091b0 <HAL_RTC_SetAlarm_IT>
 8003e74:	1e03      	subs	r3, r0, #0
 8003e76:	d001      	beq.n	8003e7c <MX_RTC_Init+0x14c>
  {
    Error_Handler();
 8003e78:	f000 fbc2 	bl	8004600 <Error_Handler>
  }
  /** Enable Calibrartion 
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 8003e7c:	2380      	movs	r3, #128	; 0x80
 8003e7e:	031a      	lsls	r2, r3, #12
 8003e80:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <MX_RTC_Init+0x16c>)
 8003e82:	0011      	movs	r1, r2
 8003e84:	0018      	movs	r0, r3
 8003e86:	f005 fcc7 	bl	8009818 <HAL_RTCEx_SetCalibrationOutPut>
 8003e8a:	1e03      	subs	r3, r0, #0
 8003e8c:	d001      	beq.n	8003e92 <MX_RTC_Init+0x162>
  {
    Error_Handler();
 8003e8e:	f000 fbb7 	bl	8004600 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	46bd      	mov	sp, r7
 8003e96:	b010      	add	sp, #64	; 0x40
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	46c0      	nop			; (mov r8, r8)
 8003e9c:	20000210 	.word	0x20000210
 8003ea0:	40002800 	.word	0x40002800

08003ea4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003ea8:	4b19      	ldr	r3, [pc, #100]	; (8003f10 <MX_SPI1_Init+0x6c>)
 8003eaa:	4a1a      	ldr	r2, [pc, #104]	; (8003f14 <MX_SPI1_Init+0x70>)
 8003eac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003eae:	4b18      	ldr	r3, [pc, #96]	; (8003f10 <MX_SPI1_Init+0x6c>)
 8003eb0:	2282      	movs	r2, #130	; 0x82
 8003eb2:	0052      	lsls	r2, r2, #1
 8003eb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003eb6:	4b16      	ldr	r3, [pc, #88]	; (8003f10 <MX_SPI1_Init+0x6c>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ebc:	4b14      	ldr	r3, [pc, #80]	; (8003f10 <MX_SPI1_Init+0x6c>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ec2:	4b13      	ldr	r3, [pc, #76]	; (8003f10 <MX_SPI1_Init+0x6c>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ec8:	4b11      	ldr	r3, [pc, #68]	; (8003f10 <MX_SPI1_Init+0x6c>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003ece:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <MX_SPI1_Init+0x6c>)
 8003ed0:	2280      	movs	r2, #128	; 0x80
 8003ed2:	0092      	lsls	r2, r2, #2
 8003ed4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ed6:	4b0e      	ldr	r3, [pc, #56]	; (8003f10 <MX_SPI1_Init+0x6c>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003edc:	4b0c      	ldr	r3, [pc, #48]	; (8003f10 <MX_SPI1_Init+0x6c>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ee2:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <MX_SPI1_Init+0x6c>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ee8:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <MX_SPI1_Init+0x6c>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003eee:	4b08      	ldr	r3, [pc, #32]	; (8003f10 <MX_SPI1_Init+0x6c>)
 8003ef0:	2207      	movs	r2, #7
 8003ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003ef4:	4b06      	ldr	r3, [pc, #24]	; (8003f10 <MX_SPI1_Init+0x6c>)
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	f005 fcd6 	bl	80098a8 <HAL_SPI_Init>
 8003efc:	1e03      	subs	r3, r0, #0
 8003efe:	d001      	beq.n	8003f04 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003f00:	f000 fb7e 	bl	8004600 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  hspi1.hdmatx = &hdma_spi1_tx;
 8003f04:	4b02      	ldr	r3, [pc, #8]	; (8003f10 <MX_SPI1_Init+0x6c>)
 8003f06:	4a04      	ldr	r2, [pc, #16]	; (8003f18 <MX_SPI1_Init+0x74>)
 8003f08:	649a      	str	r2, [r3, #72]	; 0x48
  /* USER CODE END SPI1_Init 2 */

}
 8003f0a:	46c0      	nop			; (mov r8, r8)
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	20000234 	.word	0x20000234
 8003f14:	40013000 	.word	0x40013000
 8003f18:	20000324 	.word	0x20000324

08003f1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08a      	sub	sp, #40	; 0x28
 8003f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f22:	2318      	movs	r3, #24
 8003f24:	18fb      	adds	r3, r7, r3
 8003f26:	0018      	movs	r0, r3
 8003f28:	2310      	movs	r3, #16
 8003f2a:	001a      	movs	r2, r3
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	f007 f914 	bl	800b15a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f32:	2310      	movs	r3, #16
 8003f34:	18fb      	adds	r3, r7, r3
 8003f36:	0018      	movs	r0, r3
 8003f38:	2308      	movs	r3, #8
 8003f3a:	001a      	movs	r2, r3
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	f007 f90c 	bl	800b15a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f42:	003b      	movs	r3, r7
 8003f44:	0018      	movs	r0, r3
 8003f46:	2310      	movs	r3, #16
 8003f48:	001a      	movs	r2, r3
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	f007 f905 	bl	800b15a <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003f50:	4b48      	ldr	r3, [pc, #288]	; (8004074 <MX_TIM2_Init+0x158>)
 8003f52:	2280      	movs	r2, #128	; 0x80
 8003f54:	05d2      	lsls	r2, r2, #23
 8003f56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003f58:	4b46      	ldr	r3, [pc, #280]	; (8004074 <MX_TIM2_Init+0x158>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f5e:	4b45      	ldr	r3, [pc, #276]	; (8004074 <MX_TIM2_Init+0x158>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0x3FFF;
 8003f64:	4b43      	ldr	r3, [pc, #268]	; (8004074 <MX_TIM2_Init+0x158>)
 8003f66:	4a44      	ldr	r2, [pc, #272]	; (8004078 <MX_TIM2_Init+0x15c>)
 8003f68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f6a:	4b42      	ldr	r3, [pc, #264]	; (8004074 <MX_TIM2_Init+0x158>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f70:	4b40      	ldr	r3, [pc, #256]	; (8004074 <MX_TIM2_Init+0x158>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003f76:	4b3f      	ldr	r3, [pc, #252]	; (8004074 <MX_TIM2_Init+0x158>)
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f006 f95b 	bl	800a234 <HAL_TIM_Base_Init>
 8003f7e:	1e03      	subs	r3, r0, #0
 8003f80:	d001      	beq.n	8003f86 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003f82:	f000 fb3d 	bl	8004600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8003f86:	2118      	movs	r1, #24
 8003f88:	187b      	adds	r3, r7, r1
 8003f8a:	2280      	movs	r2, #128	; 0x80
 8003f8c:	0192      	lsls	r2, r2, #6
 8003f8e:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8003f90:	187b      	adds	r3, r7, r1
 8003f92:	2200      	movs	r2, #0
 8003f94:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8003f96:	187b      	adds	r3, r7, r1
 8003f98:	2200      	movs	r2, #0
 8003f9a:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8003f9c:	187b      	adds	r3, r7, r1
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003fa2:	187a      	adds	r2, r7, r1
 8003fa4:	4b33      	ldr	r3, [pc, #204]	; (8004074 <MX_TIM2_Init+0x158>)
 8003fa6:	0011      	movs	r1, r2
 8003fa8:	0018      	movs	r0, r3
 8003faa:	f006 fd43 	bl	800aa34 <HAL_TIM_ConfigClockSource>
 8003fae:	1e03      	subs	r3, r0, #0
 8003fb0:	d001      	beq.n	8003fb6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003fb2:	f000 fb25 	bl	8004600 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003fb6:	4b2f      	ldr	r3, [pc, #188]	; (8004074 <MX_TIM2_Init+0x158>)
 8003fb8:	0018      	movs	r0, r3
 8003fba:	f006 fac7 	bl	800a54c <HAL_TIM_PWM_Init>
 8003fbe:	1e03      	subs	r3, r0, #0
 8003fc0:	d001      	beq.n	8003fc6 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8003fc2:	f000 fb1d 	bl	8004600 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8003fc6:	4b2b      	ldr	r3, [pc, #172]	; (8004074 <MX_TIM2_Init+0x158>)
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f006 f9e7 	bl	800a39c <HAL_TIM_OC_Init>
 8003fce:	1e03      	subs	r3, r0, #0
 8003fd0:	d001      	beq.n	8003fd6 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8003fd2:	f000 fb15 	bl	8004600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fd6:	2110      	movs	r1, #16
 8003fd8:	187b      	adds	r3, r7, r1
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fde:	187b      	adds	r3, r7, r1
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003fe4:	187a      	adds	r2, r7, r1
 8003fe6:	4b23      	ldr	r3, [pc, #140]	; (8004074 <MX_TIM2_Init+0x158>)
 8003fe8:	0011      	movs	r1, r2
 8003fea:	0018      	movs	r0, r3
 8003fec:	f007 f817 	bl	800b01e <HAL_TIMEx_MasterConfigSynchronization>
 8003ff0:	1e03      	subs	r3, r0, #0
 8003ff2:	d001      	beq.n	8003ff8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8003ff4:	f000 fb04 	bl	8004600 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim2, TIM2_ETR_LSE) != HAL_OK)
 8003ff8:	4b1e      	ldr	r3, [pc, #120]	; (8004074 <MX_TIM2_Init+0x158>)
 8003ffa:	2105      	movs	r1, #5
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	f007 f851 	bl	800b0a4 <HAL_TIMEx_RemapConfig>
 8004002:	1e03      	subs	r3, r0, #0
 8004004:	d001      	beq.n	800400a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8004006:	f000 fafb 	bl	8004600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800400a:	003b      	movs	r3, r7
 800400c:	2260      	movs	r2, #96	; 0x60
 800400e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8004010:	003b      	movs	r3, r7
 8004012:	2200      	movs	r2, #0
 8004014:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004016:	003b      	movs	r3, r7
 8004018:	2200      	movs	r2, #0
 800401a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800401c:	003b      	movs	r3, r7
 800401e:	2200      	movs	r2, #0
 8004020:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004022:	0039      	movs	r1, r7
 8004024:	4b13      	ldr	r3, [pc, #76]	; (8004074 <MX_TIM2_Init+0x158>)
 8004026:	2200      	movs	r2, #0
 8004028:	0018      	movs	r0, r3
 800402a:	f006 fc4b 	bl	800a8c4 <HAL_TIM_PWM_ConfigChannel>
 800402e:	1e03      	subs	r3, r0, #0
 8004030:	d001      	beq.n	8004036 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8004032:	f000 fae5 	bl	8004600 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim2, TIM3_TI1_GPIO) != HAL_OK)
 8004036:	4b0f      	ldr	r3, [pc, #60]	; (8004074 <MX_TIM2_Init+0x158>)
 8004038:	2104      	movs	r1, #4
 800403a:	0018      	movs	r0, r3
 800403c:	f007 f832 	bl	800b0a4 <HAL_TIMEx_RemapConfig>
 8004040:	1e03      	subs	r3, r0, #0
 8004042:	d001      	beq.n	8004048 <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 8004044:	f000 fadc 	bl	8004600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004048:	003b      	movs	r3, r7
 800404a:	2200      	movs	r2, #0
 800404c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800404e:	0039      	movs	r1, r7
 8004050:	4b08      	ldr	r3, [pc, #32]	; (8004074 <MX_TIM2_Init+0x158>)
 8004052:	2204      	movs	r2, #4
 8004054:	0018      	movs	r0, r3
 8004056:	f006 fbe7 	bl	800a828 <HAL_TIM_OC_ConfigChannel>
 800405a:	1e03      	subs	r3, r0, #0
 800405c:	d001      	beq.n	8004062 <MX_TIM2_Init+0x146>
  {
    Error_Handler();
 800405e:	f000 facf 	bl	8004600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004062:	4b04      	ldr	r3, [pc, #16]	; (8004074 <MX_TIM2_Init+0x158>)
 8004064:	0018      	movs	r0, r3
 8004066:	f000 fc47 	bl	80048f8 <HAL_TIM_MspPostInit>

}
 800406a:	46c0      	nop			; (mov r8, r8)
 800406c:	46bd      	mov	sp, r7
 800406e:	b00a      	add	sp, #40	; 0x28
 8004070:	bd80      	pop	{r7, pc}
 8004072:	46c0      	nop			; (mov r8, r8)
 8004074:	2000028c 	.word	0x2000028c
 8004078:	00003fff 	.word	0x00003fff

0800407c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08a      	sub	sp, #40	; 0x28
 8004080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004082:	2318      	movs	r3, #24
 8004084:	18fb      	adds	r3, r7, r3
 8004086:	0018      	movs	r0, r3
 8004088:	2310      	movs	r3, #16
 800408a:	001a      	movs	r2, r3
 800408c:	2100      	movs	r1, #0
 800408e:	f007 f864 	bl	800b15a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004092:	2310      	movs	r3, #16
 8004094:	18fb      	adds	r3, r7, r3
 8004096:	0018      	movs	r0, r3
 8004098:	2308      	movs	r3, #8
 800409a:	001a      	movs	r2, r3
 800409c:	2100      	movs	r1, #0
 800409e:	f007 f85c 	bl	800b15a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040a2:	003b      	movs	r3, r7
 80040a4:	0018      	movs	r0, r3
 80040a6:	2310      	movs	r3, #16
 80040a8:	001a      	movs	r2, r3
 80040aa:	2100      	movs	r1, #0
 80040ac:	f007 f855 	bl	800b15a <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80040b0:	4b34      	ldr	r3, [pc, #208]	; (8004184 <MX_TIM3_Init+0x108>)
 80040b2:	4a35      	ldr	r2, [pc, #212]	; (8004188 <MX_TIM3_Init+0x10c>)
 80040b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80040b6:	4b33      	ldr	r3, [pc, #204]	; (8004184 <MX_TIM3_Init+0x108>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040bc:	4b31      	ldr	r3, [pc, #196]	; (8004184 <MX_TIM3_Init+0x108>)
 80040be:	2200      	movs	r2, #0
 80040c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 80040c2:	4b30      	ldr	r3, [pc, #192]	; (8004184 <MX_TIM3_Init+0x108>)
 80040c4:	4a31      	ldr	r2, [pc, #196]	; (800418c <MX_TIM3_Init+0x110>)
 80040c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040c8:	4b2e      	ldr	r3, [pc, #184]	; (8004184 <MX_TIM3_Init+0x108>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040ce:	4b2d      	ldr	r3, [pc, #180]	; (8004184 <MX_TIM3_Init+0x108>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80040d4:	4b2b      	ldr	r3, [pc, #172]	; (8004184 <MX_TIM3_Init+0x108>)
 80040d6:	0018      	movs	r0, r3
 80040d8:	f006 f8ac 	bl	800a234 <HAL_TIM_Base_Init>
 80040dc:	1e03      	subs	r3, r0, #0
 80040de:	d001      	beq.n	80040e4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80040e0:	f000 fa8e 	bl	8004600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040e4:	2118      	movs	r1, #24
 80040e6:	187b      	adds	r3, r7, r1
 80040e8:	2280      	movs	r2, #128	; 0x80
 80040ea:	0152      	lsls	r2, r2, #5
 80040ec:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80040ee:	187a      	adds	r2, r7, r1
 80040f0:	4b24      	ldr	r3, [pc, #144]	; (8004184 <MX_TIM3_Init+0x108>)
 80040f2:	0011      	movs	r1, r2
 80040f4:	0018      	movs	r0, r3
 80040f6:	f006 fc9d 	bl	800aa34 <HAL_TIM_ConfigClockSource>
 80040fa:	1e03      	subs	r3, r0, #0
 80040fc:	d001      	beq.n	8004102 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80040fe:	f000 fa7f 	bl	8004600 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8004102:	4b20      	ldr	r3, [pc, #128]	; (8004184 <MX_TIM3_Init+0x108>)
 8004104:	0018      	movs	r0, r3
 8004106:	f006 f949 	bl	800a39c <HAL_TIM_OC_Init>
 800410a:	1e03      	subs	r3, r0, #0
 800410c:	d001      	beq.n	8004112 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800410e:	f000 fa77 	bl	8004600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004112:	2110      	movs	r1, #16
 8004114:	187b      	adds	r3, r7, r1
 8004116:	2200      	movs	r2, #0
 8004118:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800411a:	187b      	adds	r3, r7, r1
 800411c:	2200      	movs	r2, #0
 800411e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004120:	187a      	adds	r2, r7, r1
 8004122:	4b18      	ldr	r3, [pc, #96]	; (8004184 <MX_TIM3_Init+0x108>)
 8004124:	0011      	movs	r1, r2
 8004126:	0018      	movs	r0, r3
 8004128:	f006 ff79 	bl	800b01e <HAL_TIMEx_MasterConfigSynchronization>
 800412c:	1e03      	subs	r3, r0, #0
 800412e:	d001      	beq.n	8004134 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8004130:	f000 fa66 	bl	8004600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004134:	003b      	movs	r3, r7
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800413a:	003b      	movs	r3, r7
 800413c:	2200      	movs	r2, #0
 800413e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004140:	003b      	movs	r3, r7
 8004142:	2200      	movs	r2, #0
 8004144:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004146:	003b      	movs	r3, r7
 8004148:	2200      	movs	r2, #0
 800414a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800414c:	0039      	movs	r1, r7
 800414e:	4b0d      	ldr	r3, [pc, #52]	; (8004184 <MX_TIM3_Init+0x108>)
 8004150:	2200      	movs	r2, #0
 8004152:	0018      	movs	r0, r3
 8004154:	f006 fb68 	bl	800a828 <HAL_TIM_OC_ConfigChannel>
 8004158:	1e03      	subs	r3, r0, #0
 800415a:	d001      	beq.n	8004160 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 800415c:	f000 fa50 	bl	8004600 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8004160:	4b08      	ldr	r3, [pc, #32]	; (8004184 <MX_TIM3_Init+0x108>)
 8004162:	2104      	movs	r1, #4
 8004164:	0018      	movs	r0, r3
 8004166:	f006 ff9d 	bl	800b0a4 <HAL_TIMEx_RemapConfig>
 800416a:	1e03      	subs	r3, r0, #0
 800416c:	d001      	beq.n	8004172 <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 800416e:	f000 fa47 	bl	8004600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004172:	4b04      	ldr	r3, [pc, #16]	; (8004184 <MX_TIM3_Init+0x108>)
 8004174:	0018      	movs	r0, r3
 8004176:	f000 fbbf 	bl	80048f8 <HAL_TIM_MspPostInit>

}
 800417a:	46c0      	nop			; (mov r8, r8)
 800417c:	46bd      	mov	sp, r7
 800417e:	b00a      	add	sp, #40	; 0x28
 8004180:	bd80      	pop	{r7, pc}
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	20000198 	.word	0x20000198
 8004188:	40000400 	.word	0x40000400
 800418c:	0000ffff 	.word	0x0000ffff

08004190 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004196:	003b      	movs	r3, r7
 8004198:	0018      	movs	r0, r3
 800419a:	2308      	movs	r3, #8
 800419c:	001a      	movs	r2, r3
 800419e:	2100      	movs	r1, #0
 80041a0:	f006 ffdb 	bl	800b15a <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80041a4:	4b15      	ldr	r3, [pc, #84]	; (80041fc <MX_TIM6_Init+0x6c>)
 80041a6:	4a16      	ldr	r2, [pc, #88]	; (8004200 <MX_TIM6_Init+0x70>)
 80041a8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0x40;
 80041aa:	4b14      	ldr	r3, [pc, #80]	; (80041fc <MX_TIM6_Init+0x6c>)
 80041ac:	2240      	movs	r2, #64	; 0x40
 80041ae:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041b0:	4b12      	ldr	r3, [pc, #72]	; (80041fc <MX_TIM6_Init+0x6c>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80041b6:	4b11      	ldr	r3, [pc, #68]	; (80041fc <MX_TIM6_Init+0x6c>)
 80041b8:	4a12      	ldr	r2, [pc, #72]	; (8004204 <MX_TIM6_Init+0x74>)
 80041ba:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041bc:	4b0f      	ldr	r3, [pc, #60]	; (80041fc <MX_TIM6_Init+0x6c>)
 80041be:	2200      	movs	r2, #0
 80041c0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80041c2:	4b0e      	ldr	r3, [pc, #56]	; (80041fc <MX_TIM6_Init+0x6c>)
 80041c4:	0018      	movs	r0, r3
 80041c6:	f006 f835 	bl	800a234 <HAL_TIM_Base_Init>
 80041ca:	1e03      	subs	r3, r0, #0
 80041cc:	d001      	beq.n	80041d2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80041ce:	f000 fa17 	bl	8004600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041d2:	003b      	movs	r3, r7
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041d8:	003b      	movs	r3, r7
 80041da:	2200      	movs	r2, #0
 80041dc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80041de:	003a      	movs	r2, r7
 80041e0:	4b06      	ldr	r3, [pc, #24]	; (80041fc <MX_TIM6_Init+0x6c>)
 80041e2:	0011      	movs	r1, r2
 80041e4:	0018      	movs	r0, r3
 80041e6:	f006 ff1a 	bl	800b01e <HAL_TIMEx_MasterConfigSynchronization>
 80041ea:	1e03      	subs	r3, r0, #0
 80041ec:	d001      	beq.n	80041f2 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80041ee:	f000 fa07 	bl	8004600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80041f2:	46c0      	nop			; (mov r8, r8)
 80041f4:	46bd      	mov	sp, r7
 80041f6:	b002      	add	sp, #8
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	46c0      	nop			; (mov r8, r8)
 80041fc:	20000150 	.word	0x20000150
 8004200:	40001000 	.word	0x40001000
 8004204:	0000ffff 	.word	0x0000ffff

08004208 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08a      	sub	sp, #40	; 0x28
 800420c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800420e:	2318      	movs	r3, #24
 8004210:	18fb      	adds	r3, r7, r3
 8004212:	0018      	movs	r0, r3
 8004214:	2310      	movs	r3, #16
 8004216:	001a      	movs	r2, r3
 8004218:	2100      	movs	r1, #0
 800421a:	f006 ff9e 	bl	800b15a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800421e:	2310      	movs	r3, #16
 8004220:	18fb      	adds	r3, r7, r3
 8004222:	0018      	movs	r0, r3
 8004224:	2308      	movs	r3, #8
 8004226:	001a      	movs	r2, r3
 8004228:	2100      	movs	r1, #0
 800422a:	f006 ff96 	bl	800b15a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800422e:	003b      	movs	r3, r7
 8004230:	0018      	movs	r0, r3
 8004232:	2310      	movs	r3, #16
 8004234:	001a      	movs	r2, r3
 8004236:	2100      	movs	r1, #0
 8004238:	f006 ff8f 	bl	800b15a <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 800423c:	4b3b      	ldr	r3, [pc, #236]	; (800432c <MX_TIM21_Init+0x124>)
 800423e:	4a3c      	ldr	r2, [pc, #240]	; (8004330 <MX_TIM21_Init+0x128>)
 8004240:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 8004242:	4b3a      	ldr	r3, [pc, #232]	; (800432c <MX_TIM21_Init+0x124>)
 8004244:	2200      	movs	r2, #0
 8004246:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004248:	4b38      	ldr	r3, [pc, #224]	; (800432c <MX_TIM21_Init+0x124>)
 800424a:	2200      	movs	r2, #0
 800424c:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 0x7FFF;
 800424e:	4b37      	ldr	r3, [pc, #220]	; (800432c <MX_TIM21_Init+0x124>)
 8004250:	4a38      	ldr	r2, [pc, #224]	; (8004334 <MX_TIM21_Init+0x12c>)
 8004252:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004254:	4b35      	ldr	r3, [pc, #212]	; (800432c <MX_TIM21_Init+0x124>)
 8004256:	2200      	movs	r2, #0
 8004258:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800425a:	4b34      	ldr	r3, [pc, #208]	; (800432c <MX_TIM21_Init+0x124>)
 800425c:	2200      	movs	r2, #0
 800425e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8004260:	4b32      	ldr	r3, [pc, #200]	; (800432c <MX_TIM21_Init+0x124>)
 8004262:	0018      	movs	r0, r3
 8004264:	f005 ffe6 	bl	800a234 <HAL_TIM_Base_Init>
 8004268:	1e03      	subs	r3, r0, #0
 800426a:	d001      	beq.n	8004270 <MX_TIM21_Init+0x68>
  {
    Error_Handler();
 800426c:	f000 f9c8 	bl	8004600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8004270:	2118      	movs	r1, #24
 8004272:	187b      	adds	r3, r7, r1
 8004274:	2280      	movs	r2, #128	; 0x80
 8004276:	0192      	lsls	r2, r2, #6
 8004278:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 800427a:	187b      	adds	r3, r7, r1
 800427c:	2200      	movs	r2, #0
 800427e:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8004280:	187b      	adds	r3, r7, r1
 8004282:	2200      	movs	r2, #0
 8004284:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8004286:	187b      	adds	r3, r7, r1
 8004288:	2200      	movs	r2, #0
 800428a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 800428c:	187a      	adds	r2, r7, r1
 800428e:	4b27      	ldr	r3, [pc, #156]	; (800432c <MX_TIM21_Init+0x124>)
 8004290:	0011      	movs	r1, r2
 8004292:	0018      	movs	r0, r3
 8004294:	f006 fbce 	bl	800aa34 <HAL_TIM_ConfigClockSource>
 8004298:	1e03      	subs	r3, r0, #0
 800429a:	d001      	beq.n	80042a0 <MX_TIM21_Init+0x98>
  {
    Error_Handler();
 800429c:	f000 f9b0 	bl	8004600 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 80042a0:	4b22      	ldr	r3, [pc, #136]	; (800432c <MX_TIM21_Init+0x124>)
 80042a2:	0018      	movs	r0, r3
 80042a4:	f006 f87a 	bl	800a39c <HAL_TIM_OC_Init>
 80042a8:	1e03      	subs	r3, r0, #0
 80042aa:	d001      	beq.n	80042b0 <MX_TIM21_Init+0xa8>
  {
    Error_Handler();
 80042ac:	f000 f9a8 	bl	8004600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042b0:	2110      	movs	r1, #16
 80042b2:	187b      	adds	r3, r7, r1
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042b8:	187b      	adds	r3, r7, r1
 80042ba:	2200      	movs	r2, #0
 80042bc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80042be:	187a      	adds	r2, r7, r1
 80042c0:	4b1a      	ldr	r3, [pc, #104]	; (800432c <MX_TIM21_Init+0x124>)
 80042c2:	0011      	movs	r1, r2
 80042c4:	0018      	movs	r0, r3
 80042c6:	f006 feaa 	bl	800b01e <HAL_TIMEx_MasterConfigSynchronization>
 80042ca:	1e03      	subs	r3, r0, #0
 80042cc:	d001      	beq.n	80042d2 <MX_TIM21_Init+0xca>
  {
    Error_Handler();
 80042ce:	f000 f997 	bl	8004600 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim21, TIM21_ETR_LSE) != HAL_OK)
 80042d2:	4b16      	ldr	r3, [pc, #88]	; (800432c <MX_TIM21_Init+0x124>)
 80042d4:	2103      	movs	r1, #3
 80042d6:	0018      	movs	r0, r3
 80042d8:	f006 fee4 	bl	800b0a4 <HAL_TIMEx_RemapConfig>
 80042dc:	1e03      	subs	r3, r0, #0
 80042de:	d001      	beq.n	80042e4 <MX_TIM21_Init+0xdc>
  {
    Error_Handler();
 80042e0:	f000 f98e 	bl	8004600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80042e4:	003b      	movs	r3, r7
 80042e6:	2200      	movs	r2, #0
 80042e8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80042ea:	003b      	movs	r3, r7
 80042ec:	2200      	movs	r2, #0
 80042ee:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042f0:	003b      	movs	r3, r7
 80042f2:	2200      	movs	r2, #0
 80042f4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042f6:	003b      	movs	r3, r7
 80042f8:	2200      	movs	r2, #0
 80042fa:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042fc:	0039      	movs	r1, r7
 80042fe:	4b0b      	ldr	r3, [pc, #44]	; (800432c <MX_TIM21_Init+0x124>)
 8004300:	2200      	movs	r2, #0
 8004302:	0018      	movs	r0, r3
 8004304:	f006 fa90 	bl	800a828 <HAL_TIM_OC_ConfigChannel>
 8004308:	1e03      	subs	r3, r0, #0
 800430a:	d001      	beq.n	8004310 <MX_TIM21_Init+0x108>
  {
    Error_Handler();
 800430c:	f000 f978 	bl	8004600 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004310:	0039      	movs	r1, r7
 8004312:	4b06      	ldr	r3, [pc, #24]	; (800432c <MX_TIM21_Init+0x124>)
 8004314:	2204      	movs	r2, #4
 8004316:	0018      	movs	r0, r3
 8004318:	f006 fa86 	bl	800a828 <HAL_TIM_OC_ConfigChannel>
 800431c:	1e03      	subs	r3, r0, #0
 800431e:	d001      	beq.n	8004324 <MX_TIM21_Init+0x11c>
  {
    Error_Handler();
 8004320:	f000 f96e 	bl	8004600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8004324:	46c0      	nop			; (mov r8, r8)
 8004326:	46bd      	mov	sp, r7
 8004328:	b00a      	add	sp, #40	; 0x28
 800432a:	bd80      	pop	{r7, pc}
 800432c:	2000036c 	.word	0x2000036c
 8004330:	40010800 	.word	0x40010800
 8004334:	00007fff 	.word	0x00007fff

08004338 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b08a      	sub	sp, #40	; 0x28
 800433c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800433e:	2318      	movs	r3, #24
 8004340:	18fb      	adds	r3, r7, r3
 8004342:	0018      	movs	r0, r3
 8004344:	2310      	movs	r3, #16
 8004346:	001a      	movs	r2, r3
 8004348:	2100      	movs	r1, #0
 800434a:	f006 ff06 	bl	800b15a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800434e:	2310      	movs	r3, #16
 8004350:	18fb      	adds	r3, r7, r3
 8004352:	0018      	movs	r0, r3
 8004354:	2308      	movs	r3, #8
 8004356:	001a      	movs	r2, r3
 8004358:	2100      	movs	r1, #0
 800435a:	f006 fefe 	bl	800b15a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800435e:	003b      	movs	r3, r7
 8004360:	0018      	movs	r0, r3
 8004362:	2310      	movs	r3, #16
 8004364:	001a      	movs	r2, r3
 8004366:	2100      	movs	r1, #0
 8004368:	f006 fef7 	bl	800b15a <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 800436c:	4b37      	ldr	r3, [pc, #220]	; (800444c <MX_TIM22_Init+0x114>)
 800436e:	4a38      	ldr	r2, [pc, #224]	; (8004450 <MX_TIM22_Init+0x118>)
 8004370:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0x400;
 8004372:	4b36      	ldr	r3, [pc, #216]	; (800444c <MX_TIM22_Init+0x114>)
 8004374:	2280      	movs	r2, #128	; 0x80
 8004376:	00d2      	lsls	r2, r2, #3
 8004378:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 800437a:	4b34      	ldr	r3, [pc, #208]	; (800444c <MX_TIM22_Init+0x114>)
 800437c:	2200      	movs	r2, #0
 800437e:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 1919;
 8004380:	4b32      	ldr	r3, [pc, #200]	; (800444c <MX_TIM22_Init+0x114>)
 8004382:	4a34      	ldr	r2, [pc, #208]	; (8004454 <MX_TIM22_Init+0x11c>)
 8004384:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004386:	4b31      	ldr	r3, [pc, #196]	; (800444c <MX_TIM22_Init+0x114>)
 8004388:	2200      	movs	r2, #0
 800438a:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800438c:	4b2f      	ldr	r3, [pc, #188]	; (800444c <MX_TIM22_Init+0x114>)
 800438e:	2200      	movs	r2, #0
 8004390:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 8004392:	4b2e      	ldr	r3, [pc, #184]	; (800444c <MX_TIM22_Init+0x114>)
 8004394:	0018      	movs	r0, r3
 8004396:	f005 ff4d 	bl	800a234 <HAL_TIM_Base_Init>
 800439a:	1e03      	subs	r3, r0, #0
 800439c:	d001      	beq.n	80043a2 <MX_TIM22_Init+0x6a>
  {
    Error_Handler();
 800439e:	f000 f92f 	bl	8004600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80043a2:	2118      	movs	r1, #24
 80043a4:	187b      	adds	r3, r7, r1
 80043a6:	2280      	movs	r2, #128	; 0x80
 80043a8:	0192      	lsls	r2, r2, #6
 80043aa:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80043ac:	187b      	adds	r3, r7, r1
 80043ae:	2200      	movs	r2, #0
 80043b0:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80043b2:	187b      	adds	r3, r7, r1
 80043b4:	2200      	movs	r2, #0
 80043b6:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 80043b8:	187b      	adds	r3, r7, r1
 80043ba:	2200      	movs	r2, #0
 80043bc:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 80043be:	187a      	adds	r2, r7, r1
 80043c0:	4b22      	ldr	r3, [pc, #136]	; (800444c <MX_TIM22_Init+0x114>)
 80043c2:	0011      	movs	r1, r2
 80043c4:	0018      	movs	r0, r3
 80043c6:	f006 fb35 	bl	800aa34 <HAL_TIM_ConfigClockSource>
 80043ca:	1e03      	subs	r3, r0, #0
 80043cc:	d001      	beq.n	80043d2 <MX_TIM22_Init+0x9a>
  {
    Error_Handler();
 80043ce:	f000 f917 	bl	8004600 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim22) != HAL_OK)
 80043d2:	4b1e      	ldr	r3, [pc, #120]	; (800444c <MX_TIM22_Init+0x114>)
 80043d4:	0018      	movs	r0, r3
 80043d6:	f005 ffe1 	bl	800a39c <HAL_TIM_OC_Init>
 80043da:	1e03      	subs	r3, r0, #0
 80043dc:	d001      	beq.n	80043e2 <MX_TIM22_Init+0xaa>
  {
    Error_Handler();
 80043de:	f000 f90f 	bl	8004600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043e2:	2110      	movs	r1, #16
 80043e4:	187b      	adds	r3, r7, r1
 80043e6:	2200      	movs	r2, #0
 80043e8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043ea:	187b      	adds	r3, r7, r1
 80043ec:	2200      	movs	r2, #0
 80043ee:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 80043f0:	187a      	adds	r2, r7, r1
 80043f2:	4b16      	ldr	r3, [pc, #88]	; (800444c <MX_TIM22_Init+0x114>)
 80043f4:	0011      	movs	r1, r2
 80043f6:	0018      	movs	r0, r3
 80043f8:	f006 fe11 	bl	800b01e <HAL_TIMEx_MasterConfigSynchronization>
 80043fc:	1e03      	subs	r3, r0, #0
 80043fe:	d001      	beq.n	8004404 <MX_TIM22_Init+0xcc>
  {
    Error_Handler();
 8004400:	f000 f8fe 	bl	8004600 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim22, TIM22_ETR_LSE) != HAL_OK)
 8004404:	4b11      	ldr	r3, [pc, #68]	; (800444c <MX_TIM22_Init+0x114>)
 8004406:	2103      	movs	r1, #3
 8004408:	0018      	movs	r0, r3
 800440a:	f006 fe4b 	bl	800b0a4 <HAL_TIMEx_RemapConfig>
 800440e:	1e03      	subs	r3, r0, #0
 8004410:	d001      	beq.n	8004416 <MX_TIM22_Init+0xde>
  {
    Error_Handler();
 8004412:	f000 f8f5 	bl	8004600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004416:	003b      	movs	r3, r7
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800441c:	003b      	movs	r3, r7
 800441e:	2200      	movs	r2, #0
 8004420:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004422:	003b      	movs	r3, r7
 8004424:	2200      	movs	r2, #0
 8004426:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004428:	003b      	movs	r3, r7
 800442a:	2200      	movs	r2, #0
 800442c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800442e:	0039      	movs	r1, r7
 8004430:	4b06      	ldr	r3, [pc, #24]	; (800444c <MX_TIM22_Init+0x114>)
 8004432:	2200      	movs	r2, #0
 8004434:	0018      	movs	r0, r3
 8004436:	f006 f9f7 	bl	800a828 <HAL_TIM_OC_ConfigChannel>
 800443a:	1e03      	subs	r3, r0, #0
 800443c:	d001      	beq.n	8004442 <MX_TIM22_Init+0x10a>
  {
    Error_Handler();
 800443e:	f000 f8df 	bl	8004600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */

}
 8004442:	46c0      	nop			; (mov r8, r8)
 8004444:	46bd      	mov	sp, r7
 8004446:	b00a      	add	sp, #40	; 0x28
 8004448:	bd80      	pop	{r7, pc}
 800444a:	46c0      	nop			; (mov r8, r8)
 800444c:	200001d4 	.word	0x200001d4
 8004450:	40011400 	.word	0x40011400
 8004454:	0000077f 	.word	0x0000077f

08004458 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800445e:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <MX_DMA_Init+0x38>)
 8004460:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004462:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <MX_DMA_Init+0x38>)
 8004464:	2101      	movs	r1, #1
 8004466:	430a      	orrs	r2, r1
 8004468:	631a      	str	r2, [r3, #48]	; 0x30
 800446a:	4b09      	ldr	r3, [pc, #36]	; (8004490 <MX_DMA_Init+0x38>)
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	2201      	movs	r2, #1
 8004470:	4013      	ands	r3, r2
 8004472:	607b      	str	r3, [r7, #4]
 8004474:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8004476:	2200      	movs	r2, #0
 8004478:	2100      	movs	r1, #0
 800447a:	200a      	movs	r0, #10
 800447c:	f003 f938 	bl	80076f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8004480:	200a      	movs	r0, #10
 8004482:	f003 f94a 	bl	800771a <HAL_NVIC_EnableIRQ>

}
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	46bd      	mov	sp, r7
 800448a:	b002      	add	sp, #8
 800448c:	bd80      	pop	{r7, pc}
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	40021000 	.word	0x40021000

08004494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004494:	b590      	push	{r4, r7, lr}
 8004496:	b089      	sub	sp, #36	; 0x24
 8004498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800449a:	240c      	movs	r4, #12
 800449c:	193b      	adds	r3, r7, r4
 800449e:	0018      	movs	r0, r3
 80044a0:	2314      	movs	r3, #20
 80044a2:	001a      	movs	r2, r3
 80044a4:	2100      	movs	r1, #0
 80044a6:	f006 fe58 	bl	800b15a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044aa:	4b50      	ldr	r3, [pc, #320]	; (80045ec <MX_GPIO_Init+0x158>)
 80044ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ae:	4b4f      	ldr	r3, [pc, #316]	; (80045ec <MX_GPIO_Init+0x158>)
 80044b0:	2104      	movs	r1, #4
 80044b2:	430a      	orrs	r2, r1
 80044b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80044b6:	4b4d      	ldr	r3, [pc, #308]	; (80045ec <MX_GPIO_Init+0x158>)
 80044b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ba:	2204      	movs	r2, #4
 80044bc:	4013      	ands	r3, r2
 80044be:	60bb      	str	r3, [r7, #8]
 80044c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044c2:	4b4a      	ldr	r3, [pc, #296]	; (80045ec <MX_GPIO_Init+0x158>)
 80044c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c6:	4b49      	ldr	r3, [pc, #292]	; (80045ec <MX_GPIO_Init+0x158>)
 80044c8:	2101      	movs	r1, #1
 80044ca:	430a      	orrs	r2, r1
 80044cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80044ce:	4b47      	ldr	r3, [pc, #284]	; (80045ec <MX_GPIO_Init+0x158>)
 80044d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d2:	2201      	movs	r2, #1
 80044d4:	4013      	ands	r3, r2
 80044d6:	607b      	str	r3, [r7, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80044da:	4b44      	ldr	r3, [pc, #272]	; (80045ec <MX_GPIO_Init+0x158>)
 80044dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044de:	4b43      	ldr	r3, [pc, #268]	; (80045ec <MX_GPIO_Init+0x158>)
 80044e0:	2102      	movs	r1, #2
 80044e2:	430a      	orrs	r2, r1
 80044e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80044e6:	4b41      	ldr	r3, [pc, #260]	; (80045ec <MX_GPIO_Init+0x158>)
 80044e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ea:	2202      	movs	r2, #2
 80044ec:	4013      	ands	r3, r2
 80044ee:	603b      	str	r3, [r7, #0]
 80044f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80044f2:	4b3f      	ldr	r3, [pc, #252]	; (80045f0 <MX_GPIO_Init+0x15c>)
 80044f4:	2201      	movs	r2, #1
 80044f6:	2110      	movs	r1, #16
 80044f8:	0018      	movs	r0, r3
 80044fa:	f003 fc54 	bl	8007da6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 80044fe:	4b3c      	ldr	r3, [pc, #240]	; (80045f0 <MX_GPIO_Init+0x15c>)
 8004500:	2200      	movs	r2, #0
 8004502:	21a0      	movs	r1, #160	; 0xa0
 8004504:	0018      	movs	r0, r3
 8004506:	f003 fc4e 	bl	8007da6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4 
 800450a:	4b3a      	ldr	r3, [pc, #232]	; (80045f4 <MX_GPIO_Init+0x160>)
 800450c:	2200      	movs	r2, #0
 800450e:	217b      	movs	r1, #123	; 0x7b
 8004510:	0018      	movs	r0, r3
 8004512:	f003 fc48 	bl	8007da6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8004516:	2380      	movs	r3, #128	; 0x80
 8004518:	00d9      	lsls	r1, r3, #3
 800451a:	23a0      	movs	r3, #160	; 0xa0
 800451c:	05db      	lsls	r3, r3, #23
 800451e:	2200      	movs	r2, #0
 8004520:	0018      	movs	r0, r3
 8004522:	f003 fc40 	bl	8007da6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC4 PC5 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8004526:	0021      	movs	r1, r4
 8004528:	187b      	adds	r3, r7, r1
 800452a:	22b0      	movs	r2, #176	; 0xb0
 800452c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800452e:	187b      	adds	r3, r7, r1
 8004530:	2201      	movs	r2, #1
 8004532:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004534:	187b      	adds	r3, r7, r1
 8004536:	2200      	movs	r2, #0
 8004538:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800453a:	187b      	adds	r3, r7, r1
 800453c:	2200      	movs	r2, #0
 800453e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004540:	000c      	movs	r4, r1
 8004542:	187b      	adds	r3, r7, r1
 8004544:	4a2a      	ldr	r2, [pc, #168]	; (80045f0 <MX_GPIO_Init+0x15c>)
 8004546:	0019      	movs	r1, r3
 8004548:	0010      	movs	r0, r2
 800454a:	f003 fa91 	bl	8007a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4 
                           PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4 
 800454e:	0021      	movs	r1, r4
 8004550:	187b      	adds	r3, r7, r1
 8004552:	227b      	movs	r2, #123	; 0x7b
 8004554:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004556:	187b      	adds	r3, r7, r1
 8004558:	2201      	movs	r2, #1
 800455a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800455c:	187b      	adds	r3, r7, r1
 800455e:	2200      	movs	r2, #0
 8004560:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004562:	187b      	adds	r3, r7, r1
 8004564:	2200      	movs	r2, #0
 8004566:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004568:	000c      	movs	r4, r1
 800456a:	187b      	adds	r3, r7, r1
 800456c:	4a21      	ldr	r2, [pc, #132]	; (80045f4 <MX_GPIO_Init+0x160>)
 800456e:	0019      	movs	r1, r3
 8004570:	0010      	movs	r0, r2
 8004572:	f003 fa7d 	bl	8007a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004576:	0021      	movs	r1, r4
 8004578:	187b      	adds	r3, r7, r1
 800457a:	4a1f      	ldr	r2, [pc, #124]	; (80045f8 <MX_GPIO_Init+0x164>)
 800457c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800457e:	187b      	adds	r3, r7, r1
 8004580:	4a1e      	ldr	r2, [pc, #120]	; (80045fc <MX_GPIO_Init+0x168>)
 8004582:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004584:	187b      	adds	r3, r7, r1
 8004586:	2202      	movs	r2, #2
 8004588:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800458a:	000c      	movs	r4, r1
 800458c:	187b      	adds	r3, r7, r1
 800458e:	4a19      	ldr	r2, [pc, #100]	; (80045f4 <MX_GPIO_Init+0x160>)
 8004590:	0019      	movs	r1, r3
 8004592:	0010      	movs	r0, r2
 8004594:	f003 fa6c 	bl	8007a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004598:	0021      	movs	r1, r4
 800459a:	187b      	adds	r3, r7, r1
 800459c:	2280      	movs	r2, #128	; 0x80
 800459e:	00d2      	lsls	r2, r2, #3
 80045a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045a2:	187b      	adds	r3, r7, r1
 80045a4:	2201      	movs	r2, #1
 80045a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a8:	187b      	adds	r3, r7, r1
 80045aa:	2200      	movs	r2, #0
 80045ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ae:	187b      	adds	r3, r7, r1
 80045b0:	2200      	movs	r2, #0
 80045b2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045b4:	187a      	adds	r2, r7, r1
 80045b6:	23a0      	movs	r3, #160	; 0xa0
 80045b8:	05db      	lsls	r3, r3, #23
 80045ba:	0011      	movs	r1, r2
 80045bc:	0018      	movs	r0, r3
 80045be:	f003 fa57 	bl	8007a70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80045c2:	2200      	movs	r2, #0
 80045c4:	2100      	movs	r1, #0
 80045c6:	2006      	movs	r0, #6
 80045c8:	f003 f892 	bl	80076f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80045cc:	2006      	movs	r0, #6
 80045ce:	f003 f8a4 	bl	800771a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80045d2:	2200      	movs	r2, #0
 80045d4:	2100      	movs	r1, #0
 80045d6:	2007      	movs	r0, #7
 80045d8:	f003 f88a 	bl	80076f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80045dc:	2007      	movs	r0, #7
 80045de:	f003 f89c 	bl	800771a <HAL_NVIC_EnableIRQ>

}
 80045e2:	46c0      	nop			; (mov r8, r8)
 80045e4:	46bd      	mov	sp, r7
 80045e6:	b009      	add	sp, #36	; 0x24
 80045e8:	bd90      	pop	{r4, r7, pc}
 80045ea:	46c0      	nop			; (mov r8, r8)
 80045ec:	40021000 	.word	0x40021000
 80045f0:	50000800 	.word	0x50000800
 80045f4:	50000400 	.word	0x50000400
 80045f8:	0000e004 	.word	0x0000e004
 80045fc:	10110000 	.word	0x10110000

08004600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004604:	46c0      	nop			; (mov r8, r8)
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
	...

0800460c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004610:	4b07      	ldr	r3, [pc, #28]	; (8004630 <HAL_MspInit+0x24>)
 8004612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004614:	4b06      	ldr	r3, [pc, #24]	; (8004630 <HAL_MspInit+0x24>)
 8004616:	2101      	movs	r1, #1
 8004618:	430a      	orrs	r2, r1
 800461a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800461c:	4b04      	ldr	r3, [pc, #16]	; (8004630 <HAL_MspInit+0x24>)
 800461e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004620:	4b03      	ldr	r3, [pc, #12]	; (8004630 <HAL_MspInit+0x24>)
 8004622:	2180      	movs	r1, #128	; 0x80
 8004624:	0549      	lsls	r1, r1, #21
 8004626:	430a      	orrs	r2, r1
 8004628:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800462a:	46c0      	nop			; (mov r8, r8)
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40021000 	.word	0x40021000

08004634 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b088      	sub	sp, #32
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800463c:	230c      	movs	r3, #12
 800463e:	18fb      	adds	r3, r7, r3
 8004640:	0018      	movs	r0, r3
 8004642:	2314      	movs	r3, #20
 8004644:	001a      	movs	r2, r3
 8004646:	2100      	movs	r1, #0
 8004648:	f006 fd87 	bl	800b15a <memset>
  if(hadc->Instance==ADC1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a15      	ldr	r2, [pc, #84]	; (80046a8 <HAL_ADC_MspInit+0x74>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d123      	bne.n	800469e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004656:	4b15      	ldr	r3, [pc, #84]	; (80046ac <HAL_ADC_MspInit+0x78>)
 8004658:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800465a:	4b14      	ldr	r3, [pc, #80]	; (80046ac <HAL_ADC_MspInit+0x78>)
 800465c:	2180      	movs	r1, #128	; 0x80
 800465e:	0089      	lsls	r1, r1, #2
 8004660:	430a      	orrs	r2, r1
 8004662:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004664:	4b11      	ldr	r3, [pc, #68]	; (80046ac <HAL_ADC_MspInit+0x78>)
 8004666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004668:	4b10      	ldr	r3, [pc, #64]	; (80046ac <HAL_ADC_MspInit+0x78>)
 800466a:	2101      	movs	r1, #1
 800466c:	430a      	orrs	r2, r1
 800466e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004670:	4b0e      	ldr	r3, [pc, #56]	; (80046ac <HAL_ADC_MspInit+0x78>)
 8004672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004674:	2201      	movs	r2, #1
 8004676:	4013      	ands	r3, r2
 8004678:	60bb      	str	r3, [r7, #8]
 800467a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA3     ------> ADC_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800467c:	210c      	movs	r1, #12
 800467e:	187b      	adds	r3, r7, r1
 8004680:	2208      	movs	r2, #8
 8004682:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004684:	187b      	adds	r3, r7, r1
 8004686:	2203      	movs	r2, #3
 8004688:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800468a:	187b      	adds	r3, r7, r1
 800468c:	2200      	movs	r2, #0
 800468e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004690:	187a      	adds	r2, r7, r1
 8004692:	23a0      	movs	r3, #160	; 0xa0
 8004694:	05db      	lsls	r3, r3, #23
 8004696:	0011      	movs	r1, r2
 8004698:	0018      	movs	r0, r3
 800469a:	f003 f9e9 	bl	8007a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	46bd      	mov	sp, r7
 80046a2:	b008      	add	sp, #32
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	46c0      	nop			; (mov r8, r8)
 80046a8:	40012400 	.word	0x40012400
 80046ac:	40021000 	.word	0x40021000

080046b0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b088      	sub	sp, #32
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b8:	230c      	movs	r3, #12
 80046ba:	18fb      	adds	r3, r7, r3
 80046bc:	0018      	movs	r0, r3
 80046be:	2314      	movs	r3, #20
 80046c0:	001a      	movs	r2, r3
 80046c2:	2100      	movs	r1, #0
 80046c4:	f006 fd49 	bl	800b15a <memset>
  if(hrtc->Instance==RTC)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a14      	ldr	r2, [pc, #80]	; (8004720 <HAL_RTC_MspInit+0x70>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d121      	bne.n	8004716 <HAL_RTC_MspInit+0x66>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80046d2:	4b14      	ldr	r3, [pc, #80]	; (8004724 <HAL_RTC_MspInit+0x74>)
 80046d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80046d6:	4b13      	ldr	r3, [pc, #76]	; (8004724 <HAL_RTC_MspInit+0x74>)
 80046d8:	2180      	movs	r1, #128	; 0x80
 80046da:	02c9      	lsls	r1, r1, #11
 80046dc:	430a      	orrs	r2, r1
 80046de:	651a      	str	r2, [r3, #80]	; 0x50
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046e0:	4b10      	ldr	r3, [pc, #64]	; (8004724 <HAL_RTC_MspInit+0x74>)
 80046e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e4:	4b0f      	ldr	r3, [pc, #60]	; (8004724 <HAL_RTC_MspInit+0x74>)
 80046e6:	2104      	movs	r1, #4
 80046e8:	430a      	orrs	r2, r1
 80046ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80046ec:	4b0d      	ldr	r3, [pc, #52]	; (8004724 <HAL_RTC_MspInit+0x74>)
 80046ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f0:	2204      	movs	r2, #4
 80046f2:	4013      	ands	r3, r2
 80046f4:	60bb      	str	r3, [r7, #8]
 80046f6:	68bb      	ldr	r3, [r7, #8]
    /**RTC GPIO Configuration    
    PC13     ------> RTC_OUT_CALIB 
    */
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046f8:	230c      	movs	r3, #12
 80046fa:	18fb      	adds	r3, r7, r3
 80046fc:	4a0a      	ldr	r2, [pc, #40]	; (8004728 <HAL_RTC_MspInit+0x78>)
 80046fe:	0019      	movs	r1, r3
 8004700:	0010      	movs	r0, r2
 8004702:	f003 f9b5 	bl	8007a70 <HAL_GPIO_Init>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8004706:	2200      	movs	r2, #0
 8004708:	2100      	movs	r1, #0
 800470a:	2002      	movs	r0, #2
 800470c:	f002 fff0 	bl	80076f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8004710:	2002      	movs	r0, #2
 8004712:	f003 f802 	bl	800771a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004716:	46c0      	nop			; (mov r8, r8)
 8004718:	46bd      	mov	sp, r7
 800471a:	b008      	add	sp, #32
 800471c:	bd80      	pop	{r7, pc}
 800471e:	46c0      	nop			; (mov r8, r8)
 8004720:	40002800 	.word	0x40002800
 8004724:	40021000 	.word	0x40021000
 8004728:	50000800 	.word	0x50000800

0800472c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b088      	sub	sp, #32
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004734:	230c      	movs	r3, #12
 8004736:	18fb      	adds	r3, r7, r3
 8004738:	0018      	movs	r0, r3
 800473a:	2314      	movs	r3, #20
 800473c:	001a      	movs	r2, r3
 800473e:	2100      	movs	r1, #0
 8004740:	f006 fd0b 	bl	800b15a <memset>
  if(hspi->Instance==SPI1)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a30      	ldr	r2, [pc, #192]	; (800480c <HAL_SPI_MspInit+0xe0>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d15a      	bne.n	8004804 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800474e:	4b30      	ldr	r3, [pc, #192]	; (8004810 <HAL_SPI_MspInit+0xe4>)
 8004750:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004752:	4b2f      	ldr	r3, [pc, #188]	; (8004810 <HAL_SPI_MspInit+0xe4>)
 8004754:	2180      	movs	r1, #128	; 0x80
 8004756:	0149      	lsls	r1, r1, #5
 8004758:	430a      	orrs	r2, r1
 800475a:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800475c:	4b2c      	ldr	r3, [pc, #176]	; (8004810 <HAL_SPI_MspInit+0xe4>)
 800475e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004760:	4b2b      	ldr	r3, [pc, #172]	; (8004810 <HAL_SPI_MspInit+0xe4>)
 8004762:	2101      	movs	r1, #1
 8004764:	430a      	orrs	r2, r1
 8004766:	62da      	str	r2, [r3, #44]	; 0x2c
 8004768:	4b29      	ldr	r3, [pc, #164]	; (8004810 <HAL_SPI_MspInit+0xe4>)
 800476a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476c:	2201      	movs	r2, #1
 800476e:	4013      	ands	r3, r2
 8004770:	60bb      	str	r3, [r7, #8]
 8004772:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004774:	210c      	movs	r1, #12
 8004776:	187b      	adds	r3, r7, r1
 8004778:	22a0      	movs	r2, #160	; 0xa0
 800477a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800477c:	187b      	adds	r3, r7, r1
 800477e:	2202      	movs	r2, #2
 8004780:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004782:	187b      	adds	r3, r7, r1
 8004784:	2200      	movs	r2, #0
 8004786:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004788:	187b      	adds	r3, r7, r1
 800478a:	2203      	movs	r2, #3
 800478c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800478e:	187b      	adds	r3, r7, r1
 8004790:	2200      	movs	r2, #0
 8004792:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004794:	187a      	adds	r2, r7, r1
 8004796:	23a0      	movs	r3, #160	; 0xa0
 8004798:	05db      	lsls	r3, r3, #23
 800479a:	0011      	movs	r1, r2
 800479c:	0018      	movs	r0, r3
 800479e:	f003 f967 	bl	8007a70 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80047a2:	4b1c      	ldr	r3, [pc, #112]	; (8004814 <HAL_SPI_MspInit+0xe8>)
 80047a4:	4a1c      	ldr	r2, [pc, #112]	; (8004818 <HAL_SPI_MspInit+0xec>)
 80047a6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 80047a8:	4b1a      	ldr	r3, [pc, #104]	; (8004814 <HAL_SPI_MspInit+0xe8>)
 80047aa:	2201      	movs	r2, #1
 80047ac:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80047ae:	4b19      	ldr	r3, [pc, #100]	; (8004814 <HAL_SPI_MspInit+0xe8>)
 80047b0:	2210      	movs	r2, #16
 80047b2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047b4:	4b17      	ldr	r3, [pc, #92]	; (8004814 <HAL_SPI_MspInit+0xe8>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80047ba:	4b16      	ldr	r3, [pc, #88]	; (8004814 <HAL_SPI_MspInit+0xe8>)
 80047bc:	2280      	movs	r2, #128	; 0x80
 80047be:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047c0:	4b14      	ldr	r3, [pc, #80]	; (8004814 <HAL_SPI_MspInit+0xe8>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047c6:	4b13      	ldr	r3, [pc, #76]	; (8004814 <HAL_SPI_MspInit+0xe8>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80047cc:	4b11      	ldr	r3, [pc, #68]	; (8004814 <HAL_SPI_MspInit+0xe8>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80047d2:	4b10      	ldr	r3, [pc, #64]	; (8004814 <HAL_SPI_MspInit+0xe8>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80047d8:	4b0e      	ldr	r3, [pc, #56]	; (8004814 <HAL_SPI_MspInit+0xe8>)
 80047da:	0018      	movs	r0, r3
 80047dc:	f002 ffda 	bl	8007794 <HAL_DMA_Init>
 80047e0:	1e03      	subs	r3, r0, #0
 80047e2:	d001      	beq.n	80047e8 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 80047e4:	f7ff ff0c 	bl	8004600 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a0a      	ldr	r2, [pc, #40]	; (8004814 <HAL_SPI_MspInit+0xe8>)
 80047ec:	649a      	str	r2, [r3, #72]	; 0x48
 80047ee:	4b09      	ldr	r3, [pc, #36]	; (8004814 <HAL_SPI_MspInit+0xe8>)
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80047f4:	2200      	movs	r2, #0
 80047f6:	2100      	movs	r1, #0
 80047f8:	2019      	movs	r0, #25
 80047fa:	f002 ff79 	bl	80076f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80047fe:	2019      	movs	r0, #25
 8004800:	f002 ff8b 	bl	800771a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004804:	46c0      	nop			; (mov r8, r8)
 8004806:	46bd      	mov	sp, r7
 8004808:	b008      	add	sp, #32
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40013000 	.word	0x40013000
 8004810:	40021000 	.word	0x40021000
 8004814:	20000324 	.word	0x20000324
 8004818:	40020030 	.word	0x40020030

0800481c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	2380      	movs	r3, #128	; 0x80
 800482a:	05db      	lsls	r3, r3, #23
 800482c:	429a      	cmp	r2, r3
 800482e:	d10e      	bne.n	800484e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004830:	4b2c      	ldr	r3, [pc, #176]	; (80048e4 <HAL_TIM_Base_MspInit+0xc8>)
 8004832:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004834:	4b2b      	ldr	r3, [pc, #172]	; (80048e4 <HAL_TIM_Base_MspInit+0xc8>)
 8004836:	2101      	movs	r1, #1
 8004838:	430a      	orrs	r2, r1
 800483a:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800483c:	2200      	movs	r2, #0
 800483e:	2100      	movs	r1, #0
 8004840:	200f      	movs	r0, #15
 8004842:	f002 ff55 	bl	80076f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004846:	200f      	movs	r0, #15
 8004848:	f002 ff67 	bl	800771a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 800484c:	e046      	b.n	80048dc <HAL_TIM_Base_MspInit+0xc0>
  else if(htim_base->Instance==TIM3)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a25      	ldr	r2, [pc, #148]	; (80048e8 <HAL_TIM_Base_MspInit+0xcc>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d106      	bne.n	8004866 <HAL_TIM_Base_MspInit+0x4a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004858:	4b22      	ldr	r3, [pc, #136]	; (80048e4 <HAL_TIM_Base_MspInit+0xc8>)
 800485a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800485c:	4b21      	ldr	r3, [pc, #132]	; (80048e4 <HAL_TIM_Base_MspInit+0xc8>)
 800485e:	2102      	movs	r1, #2
 8004860:	430a      	orrs	r2, r1
 8004862:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004864:	e03a      	b.n	80048dc <HAL_TIM_Base_MspInit+0xc0>
  else if(htim_base->Instance==TIM6)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a20      	ldr	r2, [pc, #128]	; (80048ec <HAL_TIM_Base_MspInit+0xd0>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d10e      	bne.n	800488e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004870:	4b1c      	ldr	r3, [pc, #112]	; (80048e4 <HAL_TIM_Base_MspInit+0xc8>)
 8004872:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004874:	4b1b      	ldr	r3, [pc, #108]	; (80048e4 <HAL_TIM_Base_MspInit+0xc8>)
 8004876:	2110      	movs	r1, #16
 8004878:	430a      	orrs	r2, r1
 800487a:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800487c:	2200      	movs	r2, #0
 800487e:	2100      	movs	r1, #0
 8004880:	2011      	movs	r0, #17
 8004882:	f002 ff35 	bl	80076f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004886:	2011      	movs	r0, #17
 8004888:	f002 ff47 	bl	800771a <HAL_NVIC_EnableIRQ>
}
 800488c:	e026      	b.n	80048dc <HAL_TIM_Base_MspInit+0xc0>
  else if(htim_base->Instance==TIM21)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a17      	ldr	r2, [pc, #92]	; (80048f0 <HAL_TIM_Base_MspInit+0xd4>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d10e      	bne.n	80048b6 <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8004898:	4b12      	ldr	r3, [pc, #72]	; (80048e4 <HAL_TIM_Base_MspInit+0xc8>)
 800489a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800489c:	4b11      	ldr	r3, [pc, #68]	; (80048e4 <HAL_TIM_Base_MspInit+0xc8>)
 800489e:	2104      	movs	r1, #4
 80048a0:	430a      	orrs	r2, r1
 80048a2:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 80048a4:	2200      	movs	r2, #0
 80048a6:	2100      	movs	r1, #0
 80048a8:	2014      	movs	r0, #20
 80048aa:	f002 ff21 	bl	80076f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 80048ae:	2014      	movs	r0, #20
 80048b0:	f002 ff33 	bl	800771a <HAL_NVIC_EnableIRQ>
}
 80048b4:	e012      	b.n	80048dc <HAL_TIM_Base_MspInit+0xc0>
  else if(htim_base->Instance==TIM22)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a0e      	ldr	r2, [pc, #56]	; (80048f4 <HAL_TIM_Base_MspInit+0xd8>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d10d      	bne.n	80048dc <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM22_CLK_ENABLE();
 80048c0:	4b08      	ldr	r3, [pc, #32]	; (80048e4 <HAL_TIM_Base_MspInit+0xc8>)
 80048c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048c4:	4b07      	ldr	r3, [pc, #28]	; (80048e4 <HAL_TIM_Base_MspInit+0xc8>)
 80048c6:	2120      	movs	r1, #32
 80048c8:	430a      	orrs	r2, r1
 80048ca:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM22_IRQn, 0, 0);
 80048cc:	2200      	movs	r2, #0
 80048ce:	2100      	movs	r1, #0
 80048d0:	2016      	movs	r0, #22
 80048d2:	f002 ff0d 	bl	80076f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
 80048d6:	2016      	movs	r0, #22
 80048d8:	f002 ff1f 	bl	800771a <HAL_NVIC_EnableIRQ>
}
 80048dc:	46c0      	nop			; (mov r8, r8)
 80048de:	46bd      	mov	sp, r7
 80048e0:	b002      	add	sp, #8
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40021000 	.word	0x40021000
 80048e8:	40000400 	.word	0x40000400
 80048ec:	40001000 	.word	0x40001000
 80048f0:	40010800 	.word	0x40010800
 80048f4:	40011400 	.word	0x40011400

080048f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b08a      	sub	sp, #40	; 0x28
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004900:	2314      	movs	r3, #20
 8004902:	18fb      	adds	r3, r7, r3
 8004904:	0018      	movs	r0, r3
 8004906:	2314      	movs	r3, #20
 8004908:	001a      	movs	r2, r3
 800490a:	2100      	movs	r1, #0
 800490c:	f006 fc25 	bl	800b15a <memset>
  if(htim->Instance==TIM2)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	2380      	movs	r3, #128	; 0x80
 8004916:	05db      	lsls	r3, r3, #23
 8004918:	429a      	cmp	r2, r3
 800491a:	d124      	bne.n	8004966 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800491c:	4b28      	ldr	r3, [pc, #160]	; (80049c0 <HAL_TIM_MspPostInit+0xc8>)
 800491e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004920:	4b27      	ldr	r3, [pc, #156]	; (80049c0 <HAL_TIM_MspPostInit+0xc8>)
 8004922:	2101      	movs	r1, #1
 8004924:	430a      	orrs	r2, r1
 8004926:	62da      	str	r2, [r3, #44]	; 0x2c
 8004928:	4b25      	ldr	r3, [pc, #148]	; (80049c0 <HAL_TIM_MspPostInit+0xc8>)
 800492a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492c:	2201      	movs	r2, #1
 800492e:	4013      	ands	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
 8004932:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004934:	2114      	movs	r1, #20
 8004936:	187b      	adds	r3, r7, r1
 8004938:	2280      	movs	r2, #128	; 0x80
 800493a:	0212      	lsls	r2, r2, #8
 800493c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800493e:	187b      	adds	r3, r7, r1
 8004940:	2202      	movs	r2, #2
 8004942:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004944:	187b      	adds	r3, r7, r1
 8004946:	2200      	movs	r2, #0
 8004948:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800494a:	187b      	adds	r3, r7, r1
 800494c:	2200      	movs	r2, #0
 800494e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8004950:	187b      	adds	r3, r7, r1
 8004952:	2205      	movs	r2, #5
 8004954:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004956:	187a      	adds	r2, r7, r1
 8004958:	23a0      	movs	r3, #160	; 0xa0
 800495a:	05db      	lsls	r3, r3, #23
 800495c:	0011      	movs	r1, r2
 800495e:	0018      	movs	r0, r3
 8004960:	f003 f886 	bl	8007a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004964:	e027      	b.n	80049b6 <HAL_TIM_MspPostInit+0xbe>
  else if(htim->Instance==TIM3)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a16      	ldr	r2, [pc, #88]	; (80049c4 <HAL_TIM_MspPostInit+0xcc>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d122      	bne.n	80049b6 <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004970:	4b13      	ldr	r3, [pc, #76]	; (80049c0 <HAL_TIM_MspPostInit+0xc8>)
 8004972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004974:	4b12      	ldr	r3, [pc, #72]	; (80049c0 <HAL_TIM_MspPostInit+0xc8>)
 8004976:	2101      	movs	r1, #1
 8004978:	430a      	orrs	r2, r1
 800497a:	62da      	str	r2, [r3, #44]	; 0x2c
 800497c:	4b10      	ldr	r3, [pc, #64]	; (80049c0 <HAL_TIM_MspPostInit+0xc8>)
 800497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004980:	2201      	movs	r2, #1
 8004982:	4013      	ands	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004988:	2114      	movs	r1, #20
 800498a:	187b      	adds	r3, r7, r1
 800498c:	2240      	movs	r2, #64	; 0x40
 800498e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004990:	187b      	adds	r3, r7, r1
 8004992:	2202      	movs	r2, #2
 8004994:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004996:	187b      	adds	r3, r7, r1
 8004998:	2200      	movs	r2, #0
 800499a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800499c:	187b      	adds	r3, r7, r1
 800499e:	2200      	movs	r2, #0
 80049a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80049a2:	187b      	adds	r3, r7, r1
 80049a4:	2202      	movs	r2, #2
 80049a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049a8:	187a      	adds	r2, r7, r1
 80049aa:	23a0      	movs	r3, #160	; 0xa0
 80049ac:	05db      	lsls	r3, r3, #23
 80049ae:	0011      	movs	r1, r2
 80049b0:	0018      	movs	r0, r3
 80049b2:	f003 f85d 	bl	8007a70 <HAL_GPIO_Init>
}
 80049b6:	46c0      	nop			; (mov r8, r8)
 80049b8:	46bd      	mov	sp, r7
 80049ba:	b00a      	add	sp, #40	; 0x28
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	46c0      	nop			; (mov r8, r8)
 80049c0:	40021000 	.word	0x40021000
 80049c4:	40000400 	.word	0x40000400

080049c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80049cc:	46c0      	nop			; (mov r8, r8)
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049d6:	e7fe      	b.n	80049d6 <HardFault_Handler+0x4>

080049d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80049dc:	46c0      	nop			; (mov r8, r8)
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049e6:	46c0      	nop			; (mov r8, r8)
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049f0:	f002 f8e6 	bl	8006bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049f4:	46c0      	nop			; (mov r8, r8)
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
	...

080049fc <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8004a00:	4b03      	ldr	r3, [pc, #12]	; (8004a10 <RTC_IRQHandler+0x14>)
 8004a02:	0018      	movs	r0, r3
 8004a04:	f004 fdc0 	bl	8009588 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8004a08:	46c0      	nop			; (mov r8, r8)
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	46c0      	nop			; (mov r8, r8)
 8004a10:	20000210 	.word	0x20000210

08004a14 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004a18:	2004      	movs	r0, #4
 8004a1a:	f003 f9f3 	bl	8007e04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8004a1e:	46c0      	nop			; (mov r8, r8)
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004a28:	2380      	movs	r3, #128	; 0x80
 8004a2a:	019b      	lsls	r3, r3, #6
 8004a2c:	0018      	movs	r0, r3
 8004a2e:	f003 f9e9 	bl	8007e04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004a32:	2380      	movs	r3, #128	; 0x80
 8004a34:	01db      	lsls	r3, r3, #7
 8004a36:	0018      	movs	r0, r3
 8004a38:	f003 f9e4 	bl	8007e04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004a3c:	2380      	movs	r3, #128	; 0x80
 8004a3e:	021b      	lsls	r3, r3, #8
 8004a40:	0018      	movs	r0, r3
 8004a42:	f003 f9df 	bl	8007e04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004a50:	4b03      	ldr	r3, [pc, #12]	; (8004a60 <DMA1_Channel2_3_IRQHandler+0x14>)
 8004a52:	0018      	movs	r0, r3
 8004a54:	f002 ff5e 	bl	8007914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8004a58:	46c0      	nop			; (mov r8, r8)
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	46c0      	nop			; (mov r8, r8)
 8004a60:	20000324 	.word	0x20000324

08004a64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004a68:	4b03      	ldr	r3, [pc, #12]	; (8004a78 <TIM2_IRQHandler+0x14>)
 8004a6a:	0018      	movs	r0, r3
 8004a6c:	f005 fdf4 	bl	800a658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004a70:	46c0      	nop			; (mov r8, r8)
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	46c0      	nop			; (mov r8, r8)
 8004a78:	2000028c 	.word	0x2000028c

08004a7c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004a80:	4b03      	ldr	r3, [pc, #12]	; (8004a90 <TIM6_DAC_IRQHandler+0x14>)
 8004a82:	0018      	movs	r0, r3
 8004a84:	f005 fde8 	bl	800a658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004a88:	46c0      	nop			; (mov r8, r8)
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	46c0      	nop			; (mov r8, r8)
 8004a90:	20000150 	.word	0x20000150

08004a94 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8004a98:	4b03      	ldr	r3, [pc, #12]	; (8004aa8 <TIM21_IRQHandler+0x14>)
 8004a9a:	0018      	movs	r0, r3
 8004a9c:	f005 fddc 	bl	800a658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8004aa0:	46c0      	nop			; (mov r8, r8)
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	46c0      	nop			; (mov r8, r8)
 8004aa8:	2000036c 	.word	0x2000036c

08004aac <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM22_IRQn 0 */

  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 8004ab0:	4b03      	ldr	r3, [pc, #12]	; (8004ac0 <TIM22_IRQHandler+0x14>)
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	f005 fdd0 	bl	800a658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 8004ab8:	46c0      	nop			; (mov r8, r8)
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	46c0      	nop			; (mov r8, r8)
 8004ac0:	200001d4 	.word	0x200001d4

08004ac4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004ac8:	4b03      	ldr	r3, [pc, #12]	; (8004ad8 <SPI1_IRQHandler+0x14>)
 8004aca:	0018      	movs	r0, r3
 8004acc:	f005 f932 	bl	8009d34 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004ad0:	46c0      	nop			; (mov r8, r8)
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	46c0      	nop			; (mov r8, r8)
 8004ad8:	20000234 	.word	0x20000234

08004adc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004ae4:	4b11      	ldr	r3, [pc, #68]	; (8004b2c <_sbrk+0x50>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d102      	bne.n	8004af2 <_sbrk+0x16>
		heap_end = &end;
 8004aec:	4b0f      	ldr	r3, [pc, #60]	; (8004b2c <_sbrk+0x50>)
 8004aee:	4a10      	ldr	r2, [pc, #64]	; (8004b30 <_sbrk+0x54>)
 8004af0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004af2:	4b0e      	ldr	r3, [pc, #56]	; (8004b2c <_sbrk+0x50>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004af8:	4b0c      	ldr	r3, [pc, #48]	; (8004b2c <_sbrk+0x50>)
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	18d3      	adds	r3, r2, r3
 8004b00:	466a      	mov	r2, sp
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d907      	bls.n	8004b16 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004b06:	f006 faf5 	bl	800b0f4 <__errno>
 8004b0a:	0003      	movs	r3, r0
 8004b0c:	220c      	movs	r2, #12
 8004b0e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004b10:	2301      	movs	r3, #1
 8004b12:	425b      	negs	r3, r3
 8004b14:	e006      	b.n	8004b24 <_sbrk+0x48>
	}

	heap_end += incr;
 8004b16:	4b05      	ldr	r3, [pc, #20]	; (8004b2c <_sbrk+0x50>)
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	18d2      	adds	r2, r2, r3
 8004b1e:	4b03      	ldr	r3, [pc, #12]	; (8004b2c <_sbrk+0x50>)
 8004b20:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8004b22:	68fb      	ldr	r3, [r7, #12]
}
 8004b24:	0018      	movs	r0, r3
 8004b26:	46bd      	mov	sp, r7
 8004b28:	b004      	add	sp, #16
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	200000f4 	.word	0x200000f4
 8004b30:	200003b0 	.word	0x200003b0

08004b34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8004b38:	4b17      	ldr	r3, [pc, #92]	; (8004b98 <SystemInit+0x64>)
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	4b16      	ldr	r3, [pc, #88]	; (8004b98 <SystemInit+0x64>)
 8004b3e:	2180      	movs	r1, #128	; 0x80
 8004b40:	0049      	lsls	r1, r1, #1
 8004b42:	430a      	orrs	r2, r1
 8004b44:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8004b46:	4b14      	ldr	r3, [pc, #80]	; (8004b98 <SystemInit+0x64>)
 8004b48:	68da      	ldr	r2, [r3, #12]
 8004b4a:	4b13      	ldr	r3, [pc, #76]	; (8004b98 <SystemInit+0x64>)
 8004b4c:	4913      	ldr	r1, [pc, #76]	; (8004b9c <SystemInit+0x68>)
 8004b4e:	400a      	ands	r2, r1
 8004b50:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8004b52:	4b11      	ldr	r3, [pc, #68]	; (8004b98 <SystemInit+0x64>)
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	4b10      	ldr	r3, [pc, #64]	; (8004b98 <SystemInit+0x64>)
 8004b58:	4911      	ldr	r1, [pc, #68]	; (8004ba0 <SystemInit+0x6c>)
 8004b5a:	400a      	ands	r2, r1
 8004b5c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004b5e:	4b0e      	ldr	r3, [pc, #56]	; (8004b98 <SystemInit+0x64>)
 8004b60:	689a      	ldr	r2, [r3, #8]
 8004b62:	4b0d      	ldr	r3, [pc, #52]	; (8004b98 <SystemInit+0x64>)
 8004b64:	2101      	movs	r1, #1
 8004b66:	438a      	bics	r2, r1
 8004b68:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004b6a:	4b0b      	ldr	r3, [pc, #44]	; (8004b98 <SystemInit+0x64>)
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <SystemInit+0x64>)
 8004b70:	490c      	ldr	r1, [pc, #48]	; (8004ba4 <SystemInit+0x70>)
 8004b72:	400a      	ands	r2, r1
 8004b74:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8004b76:	4b08      	ldr	r3, [pc, #32]	; (8004b98 <SystemInit+0x64>)
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	4b07      	ldr	r3, [pc, #28]	; (8004b98 <SystemInit+0x64>)
 8004b7c:	490a      	ldr	r1, [pc, #40]	; (8004ba8 <SystemInit+0x74>)
 8004b7e:	400a      	ands	r2, r1
 8004b80:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004b82:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <SystemInit+0x64>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004b88:	4b08      	ldr	r3, [pc, #32]	; (8004bac <SystemInit+0x78>)
 8004b8a:	2280      	movs	r2, #128	; 0x80
 8004b8c:	0512      	lsls	r2, r2, #20
 8004b8e:	609a      	str	r2, [r3, #8]
#endif
}
 8004b90:	46c0      	nop			; (mov r8, r8)
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	46c0      	nop			; (mov r8, r8)
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	88ff400c 	.word	0x88ff400c
 8004ba0:	fef6fff6 	.word	0xfef6fff6
 8004ba4:	fffbffff 	.word	0xfffbffff
 8004ba8:	ff02ffff 	.word	0xff02ffff
 8004bac:	e000ed00 	.word	0xe000ed00

08004bb0 <HAL_TIM_PeriodElapsedCallback>:
static uint32_t stopwatchStartMarker = 0;
static uint32_t stopwatchPauseMarker = 0;
static uint8_t motorStateCounter = 0;

// called for a bunch of timers when timer has to circle back (arr->0, 0->arr)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
	// button's timer
	if (htim->Instance == TIM6) {
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a17      	ldr	r2, [pc, #92]	; (8004c1c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d11f      	bne.n	8004c02 <HAL_TIM_PeriodElapsedCallback+0x52>
		// stop timer, renable button interrupts, and clear pending
		HAL_TIM_Base_Stop_IT(htim);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	f005 fbc7 	bl	800a358 <HAL_TIM_Base_Stop_IT>
		HAL_NVIC_ClearPendingIRQ(EXTI2_3_IRQn);
 8004bca:	2006      	movs	r0, #6
 8004bcc:	f002 fdd2 	bl	8007774 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 8004bd0:	2007      	movs	r0, #7
 8004bd2:	f002 fdcf 	bl	8007774 <HAL_NVIC_ClearPendingIRQ>
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON1);
 8004bd6:	4b12      	ldr	r3, [pc, #72]	; (8004c20 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8004bd8:	2204      	movs	r2, #4
 8004bda:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON2);
 8004bdc:	4b10      	ldr	r3, [pc, #64]	; (8004c20 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8004bde:	2280      	movs	r2, #128	; 0x80
 8004be0:	0192      	lsls	r2, r2, #6
 8004be2:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON3);
 8004be4:	4b0e      	ldr	r3, [pc, #56]	; (8004c20 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8004be6:	2280      	movs	r2, #128	; 0x80
 8004be8:	01d2      	lsls	r2, r2, #7
 8004bea:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON4);
 8004bec:	4b0c      	ldr	r3, [pc, #48]	; (8004c20 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8004bee:	2280      	movs	r2, #128	; 0x80
 8004bf0:	0212      	lsls	r2, r2, #8
 8004bf2:	615a      	str	r2, [r3, #20]

		HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8004bf4:	2006      	movs	r0, #6
 8004bf6:	f002 fd90 	bl	800771a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004bfa:	2007      	movs	r0, #7
 8004bfc:	f002 fd8d 	bl	800771a <HAL_NVIC_EnableIRQ>
	// sampler's timer
	else if (htim->Instance == TIM22) {
		// set flag to start ADC sample
		canSampleBattery = 1;
	}
}
 8004c00:	e007      	b.n	8004c12 <HAL_TIM_PeriodElapsedCallback+0x62>
	else if (htim->Instance == TIM22) {
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a07      	ldr	r2, [pc, #28]	; (8004c24 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d102      	bne.n	8004c12 <HAL_TIM_PeriodElapsedCallback+0x62>
		canSampleBattery = 1;
 8004c0c:	4b06      	ldr	r3, [pc, #24]	; (8004c28 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8004c0e:	2201      	movs	r2, #1
 8004c10:	701a      	strb	r2, [r3, #0]
}
 8004c12:	46c0      	nop			; (mov r8, r8)
 8004c14:	46bd      	mov	sp, r7
 8004c16:	b002      	add	sp, #8
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	46c0      	nop			; (mov r8, r8)
 8004c1c:	40001000 	.word	0x40001000
 8004c20:	40010400 	.word	0x40010400
 8004c24:	40011400 	.word	0x40011400
 8004c28:	2000013d 	.word	0x2000013d

08004c2c <HAL_TIM_OC_DelayElapsedCallback>:

// called for a bunch of timers when channel value = counter value
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM21) {
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a43      	ldr	r2, [pc, #268]	; (8004d48 <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d13d      	bne.n	8004cba <HAL_TIM_OC_DelayElapsedCallback+0x8e>
		// timer's channel
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	7e1b      	ldrb	r3, [r3, #24]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d124      	bne.n	8004c90 <HAL_TIM_OC_DelayElapsedCallback+0x64>
			updateFace.timer = 1;		// set update screen flag
 8004c46:	4b41      	ldr	r3, [pc, #260]	; (8004d4c <HAL_TIM_OC_DelayElapsedCallback+0x120>)
 8004c48:	2201      	movs	r2, #1
 8004c4a:	705a      	strb	r2, [r3, #1]

			// decrement value if non-zero, else set done flag
			if (timerCounter != 1) --timerCounter;
 8004c4c:	4b40      	ldr	r3, [pc, #256]	; (8004d50 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d005      	beq.n	8004c60 <HAL_TIM_OC_DelayElapsedCallback+0x34>
 8004c54:	4b3e      	ldr	r3, [pc, #248]	; (8004d50 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	1e5a      	subs	r2, r3, #1
 8004c5a:	4b3d      	ldr	r3, [pc, #244]	; (8004d50 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8004c5c:	601a      	str	r2, [r3, #0]
				stopMotor(htim);
				break;
			default: break;
		}
	}
}
 8004c5e:	e06e      	b.n	8004d3e <HAL_TIM_OC_DelayElapsedCallback+0x112>
				--timerCounter;
 8004c60:	4b3b      	ldr	r3, [pc, #236]	; (8004d50 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	1e5a      	subs	r2, r3, #1
 8004c66:	4b3a      	ldr	r3, [pc, #232]	; (8004d50 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8004c68:	601a      	str	r2, [r3, #0]
				isTimerDone = 1;
 8004c6a:	4b3a      	ldr	r3, [pc, #232]	; (8004d54 <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	701a      	strb	r2, [r3, #0]
				stopTimer(htim);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	0018      	movs	r0, r3
 8004c74:	f000 f8e8 	bl	8004e48 <stopTimer>
				updateFace.timer = 1;
 8004c78:	4b34      	ldr	r3, [pc, #208]	; (8004d4c <HAL_TIM_OC_DelayElapsedCallback+0x120>)
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_TogglePin(LED2_PORT, LED2_PIN);
 8004c7e:	2380      	movs	r3, #128	; 0x80
 8004c80:	00da      	lsls	r2, r3, #3
 8004c82:	23a0      	movs	r3, #160	; 0xa0
 8004c84:	05db      	lsls	r3, r3, #23
 8004c86:	0011      	movs	r1, r2
 8004c88:	0018      	movs	r0, r3
 8004c8a:	f003 f8a9 	bl	8007de0 <HAL_GPIO_TogglePin>
}
 8004c8e:	e056      	b.n	8004d3e <HAL_TIM_OC_DelayElapsedCallback+0x112>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	7e1b      	ldrb	r3, [r3, #24]
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d152      	bne.n	8004d3e <HAL_TIM_OC_DelayElapsedCallback+0x112>
			updateFace.stopwatch = 1;
 8004c98:	4b2c      	ldr	r3, [pc, #176]	; (8004d4c <HAL_TIM_OC_DelayElapsedCallback+0x120>)
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	70da      	strb	r2, [r3, #3]
			++stopwatchCounter;
 8004c9e:	4b2e      	ldr	r3, [pc, #184]	; (8004d58 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	1c5a      	adds	r2, r3, #1
 8004ca4:	4b2c      	ldr	r3, [pc, #176]	; (8004d58 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 8004ca6:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED2_PORT, LED2_PIN);
 8004ca8:	2380      	movs	r3, #128	; 0x80
 8004caa:	00da      	lsls	r2, r3, #3
 8004cac:	23a0      	movs	r3, #160	; 0xa0
 8004cae:	05db      	lsls	r3, r3, #23
 8004cb0:	0011      	movs	r1, r2
 8004cb2:	0018      	movs	r0, r3
 8004cb4:	f003 f894 	bl	8007de0 <HAL_GPIO_TogglePin>
}
 8004cb8:	e041      	b.n	8004d3e <HAL_TIM_OC_DelayElapsedCallback+0x112>
	else if (htim->Instance == TIM2) {
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	2380      	movs	r3, #128	; 0x80
 8004cc0:	05db      	lsls	r3, r3, #23
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d138      	bne.n	8004d38 <HAL_TIM_OC_DelayElapsedCallback+0x10c>
		++motorStateCounter;
 8004cc6:	4b25      	ldr	r3, [pc, #148]	; (8004d5c <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	4b23      	ldr	r3, [pc, #140]	; (8004d5c <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8004cd0:	701a      	strb	r2, [r3, #0]
		switch(motorStateCounter) {
 8004cd2:	4b22      	ldr	r3, [pc, #136]	; (8004d5c <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	2b06      	cmp	r3, #6
 8004cd8:	d830      	bhi.n	8004d3c <HAL_TIM_OC_DelayElapsedCallback+0x110>
 8004cda:	009a      	lsls	r2, r3, #2
 8004cdc:	4b20      	ldr	r3, [pc, #128]	; (8004d60 <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 8004cde:	18d3      	adds	r3, r2, r3
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	469f      	mov	pc, r3
			case 1: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8004ce4:	4b1f      	ldr	r3, [pc, #124]	; (8004d64 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	2120      	movs	r1, #32
 8004cea:	0018      	movs	r0, r3
 8004cec:	f003 f85b 	bl	8007da6 <HAL_GPIO_WritePin>
 8004cf0:	e025      	b.n	8004d3e <HAL_TIM_OC_DelayElapsedCallback+0x112>
			case 2: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET); break;
 8004cf2:	4b1c      	ldr	r3, [pc, #112]	; (8004d64 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	2120      	movs	r1, #32
 8004cf8:	0018      	movs	r0, r3
 8004cfa:	f003 f854 	bl	8007da6 <HAL_GPIO_WritePin>
 8004cfe:	e01e      	b.n	8004d3e <HAL_TIM_OC_DelayElapsedCallback+0x112>
			case 3: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8004d00:	4b18      	ldr	r3, [pc, #96]	; (8004d64 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8004d02:	2201      	movs	r2, #1
 8004d04:	2120      	movs	r1, #32
 8004d06:	0018      	movs	r0, r3
 8004d08:	f003 f84d 	bl	8007da6 <HAL_GPIO_WritePin>
 8004d0c:	e017      	b.n	8004d3e <HAL_TIM_OC_DelayElapsedCallback+0x112>
			case 4: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET); break;
 8004d0e:	4b15      	ldr	r3, [pc, #84]	; (8004d64 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	2120      	movs	r1, #32
 8004d14:	0018      	movs	r0, r3
 8004d16:	f003 f846 	bl	8007da6 <HAL_GPIO_WritePin>
 8004d1a:	e010      	b.n	8004d3e <HAL_TIM_OC_DelayElapsedCallback+0x112>
			case 5: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8004d1c:	4b11      	ldr	r3, [pc, #68]	; (8004d64 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8004d1e:	2201      	movs	r2, #1
 8004d20:	2120      	movs	r1, #32
 8004d22:	0018      	movs	r0, r3
 8004d24:	f003 f83f 	bl	8007da6 <HAL_GPIO_WritePin>
 8004d28:	e009      	b.n	8004d3e <HAL_TIM_OC_DelayElapsedCallback+0x112>
				HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET); break;
 8004d2a:	4b0e      	ldr	r3, [pc, #56]	; (8004d64 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	2120      	movs	r1, #32
 8004d30:	0018      	movs	r0, r3
 8004d32:	f003 f838 	bl	8007da6 <HAL_GPIO_WritePin>
 8004d36:	e002      	b.n	8004d3e <HAL_TIM_OC_DelayElapsedCallback+0x112>
	}
 8004d38:	46c0      	nop			; (mov r8, r8)
 8004d3a:	e000      	b.n	8004d3e <HAL_TIM_OC_DelayElapsedCallback+0x112>
			default: break;
 8004d3c:	46c0      	nop			; (mov r8, r8)
}
 8004d3e:	46c0      	nop			; (mov r8, r8)
 8004d40:	46bd      	mov	sp, r7
 8004d42:	b002      	add	sp, #8
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	46c0      	nop			; (mov r8, r8)
 8004d48:	40010800 	.word	0x40010800
 8004d4c:	20000140 	.word	0x20000140
 8004d50:	20000148 	.word	0x20000148
 8004d54:	2000014c 	.word	0x2000014c
 8004d58:	20000194 	.word	0x20000194
 8004d5c:	20000108 	.word	0x20000108
 8004d60:	0800c53c 	.word	0x0800c53c
 8004d64:	50000400 	.word	0x50000400

08004d68 <runTimer>:

// ---- important timer functions  ----
void runTimer(TIM_HandleTypeDef *htim) {
 8004d68:	b590      	push	{r4, r7, lr}
 8004d6a:	b089      	sub	sp, #36	; 0x24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfig = {0};
 8004d70:	2408      	movs	r4, #8
 8004d72:	193b      	adds	r3, r7, r4
 8004d74:	0018      	movs	r0, r3
 8004d76:	2310      	movs	r3, #16
 8004d78:	001a      	movs	r2, r3
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	f006 f9ed 	bl	800b15a <memset>
	sConfig.OCMode = TIM_OCMODE_TIMING;
 8004d80:	193b      	adds	r3, r7, r4
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d86:	193b      	adds	r3, r7, r4
 8004d88:	2200      	movs	r2, #0
 8004d8a:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 8004d8c:	193b      	adds	r3, r7, r4
 8004d8e:	2200      	movs	r2, #0
 8004d90:	60da      	str	r2, [r3, #12]

	// calculating pulse/OC trigger
	if (isTimerPaused == 0) {		// 1st run, hasn't been paused yet
 8004d92:	4b1e      	ldr	r3, [pc, #120]	; (8004e0c <runTimer+0xa4>)
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d106      	bne.n	8004daa <runTimer+0x42>
		sConfig.Pulse = htim->Instance->CNT;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004da2:	2308      	movs	r3, #8
 8004da4:	18fb      	adds	r3, r7, r3
 8004da6:	605a      	str	r2, [r3, #4]
 8004da8:	e020      	b.n	8004dec <runTimer+0x84>
	}
	else {		// unpausing
		uint32_t temp = htim->Instance->CNT;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	61fb      	str	r3, [r7, #28]

		// count needed to get from pause marker to start marker - basically how many steps it would've taken to get to next cycle
		// shifted to account for negative behavior
		uint32_t diff = ((int)(timerStartMarker-timerPauseMarker)+0x8000) % 0x8000;
 8004db2:	4b17      	ldr	r3, [pc, #92]	; (8004e10 <runTimer+0xa8>)
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	4b17      	ldr	r3, [pc, #92]	; (8004e14 <runTimer+0xac>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2280      	movs	r2, #128	; 0x80
 8004dbe:	0212      	lsls	r2, r2, #8
 8004dc0:	4694      	mov	ip, r2
 8004dc2:	4463      	add	r3, ip
 8004dc4:	4a14      	ldr	r2, [pc, #80]	; (8004e18 <runTimer+0xb0>)
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	d503      	bpl.n	8004dd2 <runTimer+0x6a>
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	4a13      	ldr	r2, [pc, #76]	; (8004e1c <runTimer+0xb4>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	61bb      	str	r3, [r7, #24]
		sConfig.Pulse = (temp+diff) % 0x8000;
 8004dd4:	69fa      	ldr	r2, [r7, #28]
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	18d3      	adds	r3, r2, r3
 8004dda:	045b      	lsls	r3, r3, #17
 8004ddc:	0c5a      	lsrs	r2, r3, #17
 8004dde:	2108      	movs	r1, #8
 8004de0:	187b      	adds	r3, r7, r1
 8004de2:	605a      	str	r2, [r3, #4]
		timerStartMarker = sConfig.Pulse;		// set new start marker
 8004de4:	187b      	adds	r3, r7, r1
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	4b09      	ldr	r3, [pc, #36]	; (8004e10 <runTimer+0xa8>)
 8004dea:	601a      	str	r2, [r3, #0]
	}

	HAL_TIM_OC_ConfigChannel(htim, &sConfig, TIM_CHANNEL_1);
 8004dec:	2308      	movs	r3, #8
 8004dee:	18f9      	adds	r1, r7, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	0018      	movs	r0, r3
 8004df6:	f005 fd17 	bl	800a828 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_OC_Start_IT(htim, TIM_CHANNEL_1);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	0018      	movs	r0, r3
 8004e00:	f005 fb00 	bl	800a404 <HAL_TIM_OC_Start_IT>
}
 8004e04:	46c0      	nop			; (mov r8, r8)
 8004e06:	46bd      	mov	sp, r7
 8004e08:	b009      	add	sp, #36	; 0x24
 8004e0a:	bd90      	pop	{r4, r7, pc}
 8004e0c:	20000192 	.word	0x20000192
 8004e10:	200000f8 	.word	0x200000f8
 8004e14:	200000fc 	.word	0x200000fc
 8004e18:	80007fff 	.word	0x80007fff
 8004e1c:	ffff8000 	.word	0xffff8000

08004e20 <pauseTimer>:

void pauseTimer(TIM_HandleTypeDef *htim) {
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
	// stop timer, but hold marker so you can track milliseconds to next second
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_1);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	0018      	movs	r0, r3
 8004e2e:	f005 fb3b 	bl	800a4a8 <HAL_TIM_OC_Stop_IT>
	timerPauseMarker = htim->Instance->CNT;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e38:	4b02      	ldr	r3, [pc, #8]	; (8004e44 <pauseTimer+0x24>)
 8004e3a:	601a      	str	r2, [r3, #0]
}
 8004e3c:	46c0      	nop			; (mov r8, r8)
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	b002      	add	sp, #8
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	200000fc 	.word	0x200000fc

08004e48 <stopTimer>:

void stopTimer(TIM_HandleTypeDef *htim) {
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
	// clear everything
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_1);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2100      	movs	r1, #0
 8004e54:	0018      	movs	r0, r3
 8004e56:	f005 fb27 	bl	800a4a8 <HAL_TIM_OC_Stop_IT>
	timerStartMarker = 0;
 8004e5a:	4b05      	ldr	r3, [pc, #20]	; (8004e70 <stopTimer+0x28>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]
	timerPauseMarker = 0;
 8004e60:	4b04      	ldr	r3, [pc, #16]	; (8004e74 <stopTimer+0x2c>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	601a      	str	r2, [r3, #0]
}
 8004e66:	46c0      	nop			; (mov r8, r8)
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	b002      	add	sp, #8
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	46c0      	nop			; (mov r8, r8)
 8004e70:	200000f8 	.word	0x200000f8
 8004e74:	200000fc 	.word	0x200000fc

08004e78 <runStopwatch>:

void runStopwatch(TIM_HandleTypeDef *htim) {
 8004e78:	b590      	push	{r4, r7, lr}
 8004e7a:	b089      	sub	sp, #36	; 0x24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfig = {0};
 8004e80:	2408      	movs	r4, #8
 8004e82:	193b      	adds	r3, r7, r4
 8004e84:	0018      	movs	r0, r3
 8004e86:	2310      	movs	r3, #16
 8004e88:	001a      	movs	r2, r3
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	f006 f965 	bl	800b15a <memset>
	sConfig.OCMode = TIM_OCMODE_TIMING;
 8004e90:	193b      	adds	r3, r7, r4
 8004e92:	2200      	movs	r2, #0
 8004e94:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e96:	193b      	adds	r3, r7, r4
 8004e98:	2200      	movs	r2, #0
 8004e9a:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 8004e9c:	193b      	adds	r3, r7, r4
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	60da      	str	r2, [r3, #12]

	// calculating pulse/OC trigger
	if (isStopwatchPaused == 0) {		// 1st run, hasn't been paused yet
 8004ea2:	4b22      	ldr	r3, [pc, #136]	; (8004f2c <runStopwatch+0xb4>)
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10d      	bne.n	8004ec8 <runStopwatch+0x50>
		stopwatchCounter = 0;
 8004eac:	4b20      	ldr	r3, [pc, #128]	; (8004f30 <runStopwatch+0xb8>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	601a      	str	r2, [r3, #0]
		sConfig.Pulse = htim->Instance->CNT;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004eb8:	2108      	movs	r1, #8
 8004eba:	187b      	adds	r3, r7, r1
 8004ebc:	605a      	str	r2, [r3, #4]
		stopwatchStartMarker = sConfig.Pulse;		// set new start marker
 8004ebe:	187b      	adds	r3, r7, r1
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	4b1c      	ldr	r3, [pc, #112]	; (8004f34 <runStopwatch+0xbc>)
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	e020      	b.n	8004f0a <runStopwatch+0x92>
	}
	else {		// unpausing
		uint32_t temp = htim->Instance->CNT;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	61fb      	str	r3, [r7, #28]

		// count needed to get from pause marker to start marker - basically how many steps it would've taken to get to next cycle
		// shifted to account for negative behavior
		uint32_t diff = ((int)(stopwatchStartMarker-stopwatchPauseMarker)+0x8000) % 0x8000;
 8004ed0:	4b18      	ldr	r3, [pc, #96]	; (8004f34 <runStopwatch+0xbc>)
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	4b18      	ldr	r3, [pc, #96]	; (8004f38 <runStopwatch+0xc0>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2280      	movs	r2, #128	; 0x80
 8004edc:	0212      	lsls	r2, r2, #8
 8004ede:	4694      	mov	ip, r2
 8004ee0:	4463      	add	r3, ip
 8004ee2:	4a16      	ldr	r2, [pc, #88]	; (8004f3c <runStopwatch+0xc4>)
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	d503      	bpl.n	8004ef0 <runStopwatch+0x78>
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	4a15      	ldr	r2, [pc, #84]	; (8004f40 <runStopwatch+0xc8>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	3301      	adds	r3, #1
 8004ef0:	61bb      	str	r3, [r7, #24]
		sConfig.Pulse = (temp+diff) % 0x8000;
 8004ef2:	69fa      	ldr	r2, [r7, #28]
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	18d3      	adds	r3, r2, r3
 8004ef8:	045b      	lsls	r3, r3, #17
 8004efa:	0c5a      	lsrs	r2, r3, #17
 8004efc:	2108      	movs	r1, #8
 8004efe:	187b      	adds	r3, r7, r1
 8004f00:	605a      	str	r2, [r3, #4]
		stopwatchStartMarker = sConfig.Pulse;		// set new start marker
 8004f02:	187b      	adds	r3, r7, r1
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	4b0b      	ldr	r3, [pc, #44]	; (8004f34 <runStopwatch+0xbc>)
 8004f08:	601a      	str	r2, [r3, #0]
	}

	HAL_TIM_OC_ConfigChannel(htim, &sConfig, TIM_CHANNEL_2);
 8004f0a:	2308      	movs	r3, #8
 8004f0c:	18f9      	adds	r1, r7, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2204      	movs	r2, #4
 8004f12:	0018      	movs	r0, r3
 8004f14:	f005 fc88 	bl	800a828 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_OC_Start_IT(htim, TIM_CHANNEL_2);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2104      	movs	r1, #4
 8004f1c:	0018      	movs	r0, r3
 8004f1e:	f005 fa71 	bl	800a404 <HAL_TIM_OC_Start_IT>
}
 8004f22:	46c0      	nop			; (mov r8, r8)
 8004f24:	46bd      	mov	sp, r7
 8004f26:	b009      	add	sp, #36	; 0x24
 8004f28:	bd90      	pop	{r4, r7, pc}
 8004f2a:	46c0      	nop			; (mov r8, r8)
 8004f2c:	20000191 	.word	0x20000191
 8004f30:	20000194 	.word	0x20000194
 8004f34:	20000100 	.word	0x20000100
 8004f38:	20000104 	.word	0x20000104
 8004f3c:	80007fff 	.word	0x80007fff
 8004f40:	ffff8000 	.word	0xffff8000

08004f44 <pauseStopwatch>:

void pauseStopwatch(TIM_HandleTypeDef *htim) {
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
	// save marker to hold milliseconds
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_2);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2104      	movs	r1, #4
 8004f50:	0018      	movs	r0, r3
 8004f52:	f005 faa9 	bl	800a4a8 <HAL_TIM_OC_Stop_IT>
	stopwatchPauseMarker = htim->Instance->CNT;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f5c:	4b02      	ldr	r3, [pc, #8]	; (8004f68 <pauseStopwatch+0x24>)
 8004f5e:	601a      	str	r2, [r3, #0]
}
 8004f60:	46c0      	nop			; (mov r8, r8)
 8004f62:	46bd      	mov	sp, r7
 8004f64:	b002      	add	sp, #8
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	20000104 	.word	0x20000104

08004f6c <clearStopwatch>:

void clearStopwatch(TIM_HandleTypeDef *htim) {
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
	// clear everything
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_2);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2104      	movs	r1, #4
 8004f78:	0018      	movs	r0, r3
 8004f7a:	f005 fa95 	bl	800a4a8 <HAL_TIM_OC_Stop_IT>
	stopwatchPauseMarker = htim->Instance->CNT;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f84:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <clearStopwatch+0x34>)
 8004f86:	601a      	str	r2, [r3, #0]
	stopwatchStartMarker = htim->Instance->CNT;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f8e:	4b05      	ldr	r3, [pc, #20]	; (8004fa4 <clearStopwatch+0x38>)
 8004f90:	601a      	str	r2, [r3, #0]

	stopwatchCounter = 0;
 8004f92:	4b05      	ldr	r3, [pc, #20]	; (8004fa8 <clearStopwatch+0x3c>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]
}
 8004f98:	46c0      	nop			; (mov r8, r8)
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	b002      	add	sp, #8
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	20000104 	.word	0x20000104
 8004fa4:	20000100 	.word	0x20000100
 8004fa8:	20000194 	.word	0x20000194

08004fac <runTimerStopwatchBase>:

void runTimerStopwatchBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Start(htim);}
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	0018      	movs	r0, r3
 8004fb8:	f005 f968 	bl	800a28c <HAL_TIM_Base_Start>
 8004fbc:	46c0      	nop			; (mov r8, r8)
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	b002      	add	sp, #8
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <stopTimerStopwatchBase>:
void stopTimerStopwatchBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Stop(htim);}
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	0018      	movs	r0, r3
 8004fd0:	f005 f97e 	bl	800a2d0 <HAL_TIM_Base_Stop>
 8004fd4:	46c0      	nop			; (mov r8, r8)
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	b002      	add	sp, #8
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <runADCSampler>:
// ---- end of important timer functions ----

// ---- motor and other things that use timer ----
// uses LSE timer TIM22
void runADCSampler(TIM_HandleTypeDef *htim) {
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(htim);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	0018      	movs	r0, r3
 8004fe8:	f005 f994 	bl	800a314 <HAL_TIM_Base_Start_IT>
	canSampleBattery = 1;			// set flag to let ADC run at the start
 8004fec:	4b03      	ldr	r3, [pc, #12]	; (8004ffc <runADCSampler+0x20>)
 8004fee:	2201      	movs	r2, #1
 8004ff0:	701a      	strb	r2, [r3, #0]
}
 8004ff2:	46c0      	nop			; (mov r8, r8)
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	b002      	add	sp, #8
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	46c0      	nop			; (mov r8, r8)
 8004ffc:	2000013d 	.word	0x2000013d

08005000 <setDisplayBacklight>:

// should change display brightness by changing PWM pulse width. input should be from 0-100
// uses LSE timer TIM2 CH1
void setDisplayBacklight(uint8_t intensity, TIM_HandleTypeDef *htim) {
 8005000:	b5b0      	push	{r4, r5, r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	0002      	movs	r2, r0
 8005008:	6039      	str	r1, [r7, #0]
 800500a:	1dfb      	adds	r3, r7, #7
 800500c:	701a      	strb	r2, [r3, #0]
	if (intensity > 100) return;		// bounds checking
 800500e:	1dfb      	adds	r3, r7, #7
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	2b64      	cmp	r3, #100	; 0x64
 8005014:	d83a      	bhi.n	800508c <setDisplayBacklight+0x8c>

	TIM_OC_InitTypeDef sConfig = {0};
 8005016:	2508      	movs	r5, #8
 8005018:	197b      	adds	r3, r7, r5
 800501a:	0018      	movs	r0, r3
 800501c:	2310      	movs	r3, #16
 800501e:	001a      	movs	r2, r3
 8005020:	2100      	movs	r1, #0
 8005022:	f006 f89a 	bl	800b15a <memset>
	sConfig.OCMode = TIM_OCMODE_PWM1;
 8005026:	197b      	adds	r3, r7, r5
 8005028:	2260      	movs	r2, #96	; 0x60
 800502a:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 800502c:	197b      	adds	r3, r7, r5
 800502e:	2200      	movs	r2, #0
 8005030:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 8005032:	197b      	adds	r3, r7, r5
 8005034:	2200      	movs	r2, #0
 8005036:	60da      	str	r2, [r3, #12]
	sConfig.Pulse = (htim->Instance->ARR-1)*((float)intensity/100);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503e:	3b01      	subs	r3, #1
 8005040:	0018      	movs	r0, r3
 8005042:	f7fb ff1f 	bl	8000e84 <__aeabi_ui2f>
 8005046:	1c04      	adds	r4, r0, #0
 8005048:	1dfb      	adds	r3, r7, #7
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	0018      	movs	r0, r3
 800504e:	f7fb ff19 	bl	8000e84 <__aeabi_ui2f>
 8005052:	1c03      	adds	r3, r0, #0
 8005054:	490f      	ldr	r1, [pc, #60]	; (8005094 <setDisplayBacklight+0x94>)
 8005056:	1c18      	adds	r0, r3, #0
 8005058:	f7fb fa26 	bl	80004a8 <__aeabi_fdiv>
 800505c:	1c03      	adds	r3, r0, #0
 800505e:	1c19      	adds	r1, r3, #0
 8005060:	1c20      	adds	r0, r4, #0
 8005062:	f7fb fbf9 	bl	8000858 <__aeabi_fmul>
 8005066:	1c03      	adds	r3, r0, #0
 8005068:	1c18      	adds	r0, r3, #0
 800506a:	f7fb fa05 	bl	8000478 <__aeabi_f2uiz>
 800506e:	0002      	movs	r2, r0
 8005070:	197b      	adds	r3, r7, r5
 8005072:	605a      	str	r2, [r3, #4]

	HAL_TIM_PWM_ConfigChannel(htim, &sConfig, TIM_CHANNEL_1);
 8005074:	1979      	adds	r1, r7, r5
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2200      	movs	r2, #0
 800507a:	0018      	movs	r0, r3
 800507c:	f005 fc22 	bl	800a8c4 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_1);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	2100      	movs	r1, #0
 8005084:	0018      	movs	r0, r3
 8005086:	f005 fa95 	bl	800a5b4 <HAL_TIM_PWM_Start_IT>
 800508a:	e000      	b.n	800508e <setDisplayBacklight+0x8e>
	if (intensity > 100) return;		// bounds checking
 800508c:	46c0      	nop			; (mov r8, r8)
}
 800508e:	46bd      	mov	sp, r7
 8005090:	b006      	add	sp, #24
 8005092:	bdb0      	pop	{r4, r5, r7, pc}
 8005094:	42c80000 	.word	0x42c80000

08005098 <runMotor>:
	HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_1);
}

// running motor for vibration. runs for a finite amount of time
// uses LSE timer TIM2 CH2
void runMotor(TIM_HandleTypeDef *htim) {
 8005098:	b590      	push	{r4, r7, lr}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfig = {0};
 80050a0:	2408      	movs	r4, #8
 80050a2:	193b      	adds	r3, r7, r4
 80050a4:	0018      	movs	r0, r3
 80050a6:	2310      	movs	r3, #16
 80050a8:	001a      	movs	r2, r3
 80050aa:	2100      	movs	r1, #0
 80050ac:	f006 f855 	bl	800b15a <memset>
	sConfig.OCMode = TIM_OCMODE_TIMING;
 80050b0:	0021      	movs	r1, r4
 80050b2:	187b      	adds	r3, r7, r1
 80050b4:	2200      	movs	r2, #0
 80050b6:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 80050b8:	187b      	adds	r3, r7, r1
 80050ba:	2200      	movs	r2, #0
 80050bc:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 80050be:	187b      	adds	r3, r7, r1
 80050c0:	2200      	movs	r2, #0
 80050c2:	60da      	str	r2, [r3, #12]
	sConfig.Pulse = htim->Instance->CNT;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050ca:	000c      	movs	r4, r1
 80050cc:	187b      	adds	r3, r7, r1
 80050ce:	605a      	str	r2, [r3, #4]

	HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET);
 80050d0:	4b0c      	ldr	r3, [pc, #48]	; (8005104 <runMotor+0x6c>)
 80050d2:	2201      	movs	r2, #1
 80050d4:	2120      	movs	r1, #32
 80050d6:	0018      	movs	r0, r3
 80050d8:	f002 fe65 	bl	8007da6 <HAL_GPIO_WritePin>
	HAL_TIM_OC_ConfigChannel(htim, &sConfig, TIM_CHANNEL_2);
 80050dc:	0021      	movs	r1, r4
 80050de:	1879      	adds	r1, r7, r1
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2204      	movs	r2, #4
 80050e4:	0018      	movs	r0, r3
 80050e6:	f005 fb9f 	bl	800a828 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_OC_Start_IT(htim, TIM_CHANNEL_2);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2104      	movs	r1, #4
 80050ee:	0018      	movs	r0, r3
 80050f0:	f005 f988 	bl	800a404 <HAL_TIM_OC_Start_IT>

	motorStateCounter = 0;
 80050f4:	4b04      	ldr	r3, [pc, #16]	; (8005108 <runMotor+0x70>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	701a      	strb	r2, [r3, #0]
}
 80050fa:	46c0      	nop			; (mov r8, r8)
 80050fc:	46bd      	mov	sp, r7
 80050fe:	b007      	add	sp, #28
 8005100:	bd90      	pop	{r4, r7, pc}
 8005102:	46c0      	nop			; (mov r8, r8)
 8005104:	50000400 	.word	0x50000400
 8005108:	20000108 	.word	0x20000108

0800510c <HAL_GPIO_EXTI_Callback>:
	"Nov",
	"Dec"
};

// callback for button interrupts.
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	0002      	movs	r2, r0
 8005114:	1dbb      	adds	r3, r7, #6
 8005116:	801a      	strh	r2, [r3, #0]
	// toggles LED whenever a button is pressed
	HAL_GPIO_TogglePin(LED3_PORT, LED3_PIN);
 8005118:	4b1d      	ldr	r3, [pc, #116]	; (8005190 <HAL_GPIO_EXTI_Callback+0x84>)
 800511a:	2108      	movs	r1, #8
 800511c:	0018      	movs	r0, r3
 800511e:	f002 fe5f 	bl	8007de0 <HAL_GPIO_TogglePin>

	// disables interrupts for software debouncing
	HAL_NVIC_DisableIRQ(EXTI2_3_IRQn);
 8005122:	2006      	movs	r0, #6
 8005124:	f002 fb09 	bl	800773a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 8005128:	2007      	movs	r0, #7
 800512a:	f002 fb06 	bl	800773a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_3_IRQn);
 800512e:	2006      	movs	r0, #6
 8005130:	f002 fb20 	bl	8007774 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 8005134:	2007      	movs	r0, #7
 8005136:	f002 fb1d 	bl	8007774 <HAL_NVIC_ClearPendingIRQ>

	// updates flags
	if (GPIO_Pin == BUTTON1) buttons.is1Pressed = 1;
 800513a:	1dbb      	adds	r3, r7, #6
 800513c:	881b      	ldrh	r3, [r3, #0]
 800513e:	2b04      	cmp	r3, #4
 8005140:	d102      	bne.n	8005148 <HAL_GPIO_EXTI_Callback+0x3c>
 8005142:	4b14      	ldr	r3, [pc, #80]	; (8005194 <HAL_GPIO_EXTI_Callback+0x88>)
 8005144:	2201      	movs	r2, #1
 8005146:	701a      	strb	r2, [r3, #0]
	if (GPIO_Pin == BUTTON2) buttons.is2Pressed = 1;
 8005148:	1dbb      	adds	r3, r7, #6
 800514a:	881a      	ldrh	r2, [r3, #0]
 800514c:	2380      	movs	r3, #128	; 0x80
 800514e:	019b      	lsls	r3, r3, #6
 8005150:	429a      	cmp	r2, r3
 8005152:	d102      	bne.n	800515a <HAL_GPIO_EXTI_Callback+0x4e>
 8005154:	4b0f      	ldr	r3, [pc, #60]	; (8005194 <HAL_GPIO_EXTI_Callback+0x88>)
 8005156:	2201      	movs	r2, #1
 8005158:	705a      	strb	r2, [r3, #1]
	if (GPIO_Pin == BUTTON3) buttons.is3Pressed = 1;
 800515a:	1dbb      	adds	r3, r7, #6
 800515c:	881a      	ldrh	r2, [r3, #0]
 800515e:	2380      	movs	r3, #128	; 0x80
 8005160:	01db      	lsls	r3, r3, #7
 8005162:	429a      	cmp	r2, r3
 8005164:	d102      	bne.n	800516c <HAL_GPIO_EXTI_Callback+0x60>
 8005166:	4b0b      	ldr	r3, [pc, #44]	; (8005194 <HAL_GPIO_EXTI_Callback+0x88>)
 8005168:	2201      	movs	r2, #1
 800516a:	709a      	strb	r2, [r3, #2]
	if (GPIO_Pin == BUTTON4) buttons.is4Pressed = 1;
 800516c:	1dbb      	adds	r3, r7, #6
 800516e:	881a      	ldrh	r2, [r3, #0]
 8005170:	2380      	movs	r3, #128	; 0x80
 8005172:	021b      	lsls	r3, r3, #8
 8005174:	429a      	cmp	r2, r3
 8005176:	d102      	bne.n	800517e <HAL_GPIO_EXTI_Callback+0x72>
 8005178:	4b06      	ldr	r3, [pc, #24]	; (8005194 <HAL_GPIO_EXTI_Callback+0x88>)
 800517a:	2201      	movs	r2, #1
 800517c:	70da      	strb	r2, [r3, #3]

	// runs timer for software debouncing delay
	HAL_TIM_Base_Start_IT(&htim6);
 800517e:	4b06      	ldr	r3, [pc, #24]	; (8005198 <HAL_GPIO_EXTI_Callback+0x8c>)
 8005180:	0018      	movs	r0, r3
 8005182:	f005 f8c7 	bl	800a314 <HAL_TIM_Base_Start_IT>
}
 8005186:	46c0      	nop			; (mov r8, r8)
 8005188:	46bd      	mov	sp, r7
 800518a:	b002      	add	sp, #8
 800518c:	bd80      	pop	{r7, pc}
 800518e:	46c0      	nop			; (mov r8, r8)
 8005190:	50000400 	.word	0x50000400
 8005194:	2000018c 	.word	0x2000018c
 8005198:	20000150 	.word	0x20000150

0800519c <updateState>:

//
void updateState(RTC_HandleTypeDef *hrtc, TIM_HandleTypeDef *timerStopwatchTim, TIM_HandleTypeDef *motorBacklightTim, TIM_HandleTypeDef *buttonTim, SPI_HandleTypeDef *hspi) {
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
 80051a8:	603b      	str	r3, [r7, #0]
	if (buttons.is1Pressed || buttons.is2Pressed || buttons.is3Pressed || buttons.is4Pressed) {
 80051aa:	4bbf      	ldr	r3, [pc, #764]	; (80054a8 <updateState+0x30c>)
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10f      	bne.n	80051d4 <updateState+0x38>
 80051b4:	4bbc      	ldr	r3, [pc, #752]	; (80054a8 <updateState+0x30c>)
 80051b6:	785b      	ldrb	r3, [r3, #1]
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10a      	bne.n	80051d4 <updateState+0x38>
 80051be:	4bba      	ldr	r3, [pc, #744]	; (80054a8 <updateState+0x30c>)
 80051c0:	789b      	ldrb	r3, [r3, #2]
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d105      	bne.n	80051d4 <updateState+0x38>
 80051c8:	4bb7      	ldr	r3, [pc, #732]	; (80054a8 <updateState+0x30c>)
 80051ca:	78db      	ldrb	r3, [r3, #3]
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d100      	bne.n	80051d4 <updateState+0x38>
 80051d2:	e1ab      	b.n	800552c <updateState+0x390>
		// button 1 changes the face on screen.
		if (buttons.is1Pressed) {
 80051d4:	4bb4      	ldr	r3, [pc, #720]	; (80054a8 <updateState+0x30c>)
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d02d      	beq.n	800523a <updateState+0x9e>
			isFaceBeingChanged = 1;
 80051de:	4bb3      	ldr	r3, [pc, #716]	; (80054ac <updateState+0x310>)
 80051e0:	2201      	movs	r2, #1
 80051e2:	701a      	strb	r2, [r3, #0]
			faceOnDisplay = (faceOnDisplay + 1) % NUM_FACES;
 80051e4:	4bb2      	ldr	r3, [pc, #712]	; (80054b0 <updateState+0x314>)
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	3301      	adds	r3, #1
 80051ea:	4ab2      	ldr	r2, [pc, #712]	; (80054b4 <updateState+0x318>)
 80051ec:	4013      	ands	r3, r2
 80051ee:	d504      	bpl.n	80051fa <updateState+0x5e>
 80051f0:	3b01      	subs	r3, #1
 80051f2:	2204      	movs	r2, #4
 80051f4:	4252      	negs	r2, r2
 80051f6:	4313      	orrs	r3, r2
 80051f8:	3301      	adds	r3, #1
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	4bac      	ldr	r3, [pc, #688]	; (80054b0 <updateState+0x314>)
 80051fe:	701a      	strb	r2, [r3, #0]
			switch (faceOnDisplay) {
 8005200:	4bab      	ldr	r3, [pc, #684]	; (80054b0 <updateState+0x314>)
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d00c      	beq.n	8005222 <updateState+0x86>
 8005208:	dc02      	bgt.n	8005210 <updateState+0x74>
 800520a:	2b00      	cmp	r3, #0
 800520c:	d005      	beq.n	800521a <updateState+0x7e>
				case faceClock: updateFace.clock = 1; break;
				case faceTimer: updateFace.timer = 1; break;
				case faceAlarm: updateFace.alarm = 1; break;
				case faceStopwatch: updateFace.stopwatch = 1; break;
				default: break;
 800520e:	e015      	b.n	800523c <updateState+0xa0>
			switch (faceOnDisplay) {
 8005210:	2b02      	cmp	r3, #2
 8005212:	d00a      	beq.n	800522a <updateState+0x8e>
 8005214:	2b03      	cmp	r3, #3
 8005216:	d00c      	beq.n	8005232 <updateState+0x96>
				default: break;
 8005218:	e010      	b.n	800523c <updateState+0xa0>
				case faceClock: updateFace.clock = 1; break;
 800521a:	4ba7      	ldr	r3, [pc, #668]	; (80054b8 <updateState+0x31c>)
 800521c:	2201      	movs	r2, #1
 800521e:	701a      	strb	r2, [r3, #0]
 8005220:	e00c      	b.n	800523c <updateState+0xa0>
				case faceTimer: updateFace.timer = 1; break;
 8005222:	4ba5      	ldr	r3, [pc, #660]	; (80054b8 <updateState+0x31c>)
 8005224:	2201      	movs	r2, #1
 8005226:	705a      	strb	r2, [r3, #1]
 8005228:	e008      	b.n	800523c <updateState+0xa0>
				case faceAlarm: updateFace.alarm = 1; break;
 800522a:	4ba3      	ldr	r3, [pc, #652]	; (80054b8 <updateState+0x31c>)
 800522c:	2201      	movs	r2, #1
 800522e:	709a      	strb	r2, [r3, #2]
 8005230:	e004      	b.n	800523c <updateState+0xa0>
				case faceStopwatch: updateFace.stopwatch = 1; break;
 8005232:	4ba1      	ldr	r3, [pc, #644]	; (80054b8 <updateState+0x31c>)
 8005234:	2201      	movs	r2, #1
 8005236:	70da      	strb	r2, [r3, #3]
 8005238:	e000      	b.n	800523c <updateState+0xa0>
			}
		}
 800523a:	46c0      	nop			; (mov r8, r8)

		// button combo: press 2 and 3 alternatively 5 times to reinit display.
		// needed since screen often turns white when its power supply is rustled, and there's no way to show the information
		static uint8_t s = 0;
		switch(s) {
 800523c:	4b9f      	ldr	r3, [pc, #636]	; (80054bc <updateState+0x320>)
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	2b09      	cmp	r3, #9
 8005242:	d900      	bls.n	8005246 <updateState+0xaa>
 8005244:	e11b      	b.n	800547e <updateState+0x2e2>
 8005246:	009a      	lsls	r2, r3, #2
 8005248:	4b9d      	ldr	r3, [pc, #628]	; (80054c0 <updateState+0x324>)
 800524a:	18d3      	adds	r3, r2, r3
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	469f      	mov	pc, r3
			case 0:	if (buttons.is2Pressed) s++; break;
 8005250:	4b95      	ldr	r3, [pc, #596]	; (80054a8 <updateState+0x30c>)
 8005252:	785b      	ldrb	r3, [r3, #1]
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d100      	bne.n	800525c <updateState+0xc0>
 800525a:	e112      	b.n	8005482 <updateState+0x2e6>
 800525c:	4b97      	ldr	r3, [pc, #604]	; (80054bc <updateState+0x320>)
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	3301      	adds	r3, #1
 8005262:	b2da      	uxtb	r2, r3
 8005264:	4b95      	ldr	r3, [pc, #596]	; (80054bc <updateState+0x320>)
 8005266:	701a      	strb	r2, [r3, #0]
 8005268:	e10b      	b.n	8005482 <updateState+0x2e6>
			case 1: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 800526a:	4b8f      	ldr	r3, [pc, #572]	; (80054a8 <updateState+0x30c>)
 800526c:	789b      	ldrb	r3, [r3, #2]
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	d006      	beq.n	8005282 <updateState+0xe6>
 8005274:	4b91      	ldr	r3, [pc, #580]	; (80054bc <updateState+0x320>)
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	3301      	adds	r3, #1
 800527a:	b2da      	uxtb	r2, r3
 800527c:	4b8f      	ldr	r3, [pc, #572]	; (80054bc <updateState+0x320>)
 800527e:	701a      	strb	r2, [r3, #0]
 8005280:	e101      	b.n	8005486 <updateState+0x2ea>
 8005282:	4b89      	ldr	r3, [pc, #548]	; (80054a8 <updateState+0x30c>)
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10a      	bne.n	80052a2 <updateState+0x106>
 800528c:	4b86      	ldr	r3, [pc, #536]	; (80054a8 <updateState+0x30c>)
 800528e:	785b      	ldrb	r3, [r3, #1]
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d105      	bne.n	80052a2 <updateState+0x106>
 8005296:	4b84      	ldr	r3, [pc, #528]	; (80054a8 <updateState+0x30c>)
 8005298:	78db      	ldrb	r3, [r3, #3]
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d100      	bne.n	80052a2 <updateState+0x106>
 80052a0:	e0f1      	b.n	8005486 <updateState+0x2ea>
 80052a2:	4b86      	ldr	r3, [pc, #536]	; (80054bc <updateState+0x320>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	701a      	strb	r2, [r3, #0]
 80052a8:	e0ed      	b.n	8005486 <updateState+0x2ea>
			case 2: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 80052aa:	4b7f      	ldr	r3, [pc, #508]	; (80054a8 <updateState+0x30c>)
 80052ac:	785b      	ldrb	r3, [r3, #1]
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d006      	beq.n	80052c2 <updateState+0x126>
 80052b4:	4b81      	ldr	r3, [pc, #516]	; (80054bc <updateState+0x320>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	3301      	adds	r3, #1
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	4b7f      	ldr	r3, [pc, #508]	; (80054bc <updateState+0x320>)
 80052be:	701a      	strb	r2, [r3, #0]
 80052c0:	e0e3      	b.n	800548a <updateState+0x2ee>
 80052c2:	4b79      	ldr	r3, [pc, #484]	; (80054a8 <updateState+0x30c>)
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10a      	bne.n	80052e2 <updateState+0x146>
 80052cc:	4b76      	ldr	r3, [pc, #472]	; (80054a8 <updateState+0x30c>)
 80052ce:	789b      	ldrb	r3, [r3, #2]
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d105      	bne.n	80052e2 <updateState+0x146>
 80052d6:	4b74      	ldr	r3, [pc, #464]	; (80054a8 <updateState+0x30c>)
 80052d8:	78db      	ldrb	r3, [r3, #3]
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d100      	bne.n	80052e2 <updateState+0x146>
 80052e0:	e0d3      	b.n	800548a <updateState+0x2ee>
 80052e2:	4b76      	ldr	r3, [pc, #472]	; (80054bc <updateState+0x320>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	701a      	strb	r2, [r3, #0]
 80052e8:	e0cf      	b.n	800548a <updateState+0x2ee>
			case 3: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 80052ea:	4b6f      	ldr	r3, [pc, #444]	; (80054a8 <updateState+0x30c>)
 80052ec:	789b      	ldrb	r3, [r3, #2]
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d006      	beq.n	8005302 <updateState+0x166>
 80052f4:	4b71      	ldr	r3, [pc, #452]	; (80054bc <updateState+0x320>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	3301      	adds	r3, #1
 80052fa:	b2da      	uxtb	r2, r3
 80052fc:	4b6f      	ldr	r3, [pc, #444]	; (80054bc <updateState+0x320>)
 80052fe:	701a      	strb	r2, [r3, #0]
 8005300:	e0c5      	b.n	800548e <updateState+0x2f2>
 8005302:	4b69      	ldr	r3, [pc, #420]	; (80054a8 <updateState+0x30c>)
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10a      	bne.n	8005322 <updateState+0x186>
 800530c:	4b66      	ldr	r3, [pc, #408]	; (80054a8 <updateState+0x30c>)
 800530e:	785b      	ldrb	r3, [r3, #1]
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d105      	bne.n	8005322 <updateState+0x186>
 8005316:	4b64      	ldr	r3, [pc, #400]	; (80054a8 <updateState+0x30c>)
 8005318:	78db      	ldrb	r3, [r3, #3]
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	d100      	bne.n	8005322 <updateState+0x186>
 8005320:	e0b5      	b.n	800548e <updateState+0x2f2>
 8005322:	4b66      	ldr	r3, [pc, #408]	; (80054bc <updateState+0x320>)
 8005324:	2200      	movs	r2, #0
 8005326:	701a      	strb	r2, [r3, #0]
 8005328:	e0b1      	b.n	800548e <updateState+0x2f2>
			case 4: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 800532a:	4b5f      	ldr	r3, [pc, #380]	; (80054a8 <updateState+0x30c>)
 800532c:	785b      	ldrb	r3, [r3, #1]
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	d006      	beq.n	8005342 <updateState+0x1a6>
 8005334:	4b61      	ldr	r3, [pc, #388]	; (80054bc <updateState+0x320>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	3301      	adds	r3, #1
 800533a:	b2da      	uxtb	r2, r3
 800533c:	4b5f      	ldr	r3, [pc, #380]	; (80054bc <updateState+0x320>)
 800533e:	701a      	strb	r2, [r3, #0]
 8005340:	e0a7      	b.n	8005492 <updateState+0x2f6>
 8005342:	4b59      	ldr	r3, [pc, #356]	; (80054a8 <updateState+0x30c>)
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10a      	bne.n	8005362 <updateState+0x1c6>
 800534c:	4b56      	ldr	r3, [pc, #344]	; (80054a8 <updateState+0x30c>)
 800534e:	789b      	ldrb	r3, [r3, #2]
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d105      	bne.n	8005362 <updateState+0x1c6>
 8005356:	4b54      	ldr	r3, [pc, #336]	; (80054a8 <updateState+0x30c>)
 8005358:	78db      	ldrb	r3, [r3, #3]
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	d100      	bne.n	8005362 <updateState+0x1c6>
 8005360:	e097      	b.n	8005492 <updateState+0x2f6>
 8005362:	4b56      	ldr	r3, [pc, #344]	; (80054bc <updateState+0x320>)
 8005364:	2200      	movs	r2, #0
 8005366:	701a      	strb	r2, [r3, #0]
 8005368:	e093      	b.n	8005492 <updateState+0x2f6>
			case 5: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 800536a:	4b4f      	ldr	r3, [pc, #316]	; (80054a8 <updateState+0x30c>)
 800536c:	789b      	ldrb	r3, [r3, #2]
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	d006      	beq.n	8005382 <updateState+0x1e6>
 8005374:	4b51      	ldr	r3, [pc, #324]	; (80054bc <updateState+0x320>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	3301      	adds	r3, #1
 800537a:	b2da      	uxtb	r2, r3
 800537c:	4b4f      	ldr	r3, [pc, #316]	; (80054bc <updateState+0x320>)
 800537e:	701a      	strb	r2, [r3, #0]
 8005380:	e089      	b.n	8005496 <updateState+0x2fa>
 8005382:	4b49      	ldr	r3, [pc, #292]	; (80054a8 <updateState+0x30c>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10a      	bne.n	80053a2 <updateState+0x206>
 800538c:	4b46      	ldr	r3, [pc, #280]	; (80054a8 <updateState+0x30c>)
 800538e:	785b      	ldrb	r3, [r3, #1]
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d105      	bne.n	80053a2 <updateState+0x206>
 8005396:	4b44      	ldr	r3, [pc, #272]	; (80054a8 <updateState+0x30c>)
 8005398:	78db      	ldrb	r3, [r3, #3]
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	d100      	bne.n	80053a2 <updateState+0x206>
 80053a0:	e079      	b.n	8005496 <updateState+0x2fa>
 80053a2:	4b46      	ldr	r3, [pc, #280]	; (80054bc <updateState+0x320>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	701a      	strb	r2, [r3, #0]
 80053a8:	e075      	b.n	8005496 <updateState+0x2fa>
			case 6: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 80053aa:	4b3f      	ldr	r3, [pc, #252]	; (80054a8 <updateState+0x30c>)
 80053ac:	785b      	ldrb	r3, [r3, #1]
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d006      	beq.n	80053c2 <updateState+0x226>
 80053b4:	4b41      	ldr	r3, [pc, #260]	; (80054bc <updateState+0x320>)
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	3301      	adds	r3, #1
 80053ba:	b2da      	uxtb	r2, r3
 80053bc:	4b3f      	ldr	r3, [pc, #252]	; (80054bc <updateState+0x320>)
 80053be:	701a      	strb	r2, [r3, #0]
 80053c0:	e06b      	b.n	800549a <updateState+0x2fe>
 80053c2:	4b39      	ldr	r3, [pc, #228]	; (80054a8 <updateState+0x30c>)
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d109      	bne.n	80053e0 <updateState+0x244>
 80053cc:	4b36      	ldr	r3, [pc, #216]	; (80054a8 <updateState+0x30c>)
 80053ce:	789b      	ldrb	r3, [r3, #2]
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d104      	bne.n	80053e0 <updateState+0x244>
 80053d6:	4b34      	ldr	r3, [pc, #208]	; (80054a8 <updateState+0x30c>)
 80053d8:	78db      	ldrb	r3, [r3, #3]
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d05c      	beq.n	800549a <updateState+0x2fe>
 80053e0:	4b36      	ldr	r3, [pc, #216]	; (80054bc <updateState+0x320>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	701a      	strb	r2, [r3, #0]
 80053e6:	e058      	b.n	800549a <updateState+0x2fe>
			case 7: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 80053e8:	4b2f      	ldr	r3, [pc, #188]	; (80054a8 <updateState+0x30c>)
 80053ea:	789b      	ldrb	r3, [r3, #2]
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d006      	beq.n	8005400 <updateState+0x264>
 80053f2:	4b32      	ldr	r3, [pc, #200]	; (80054bc <updateState+0x320>)
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	3301      	adds	r3, #1
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	4b30      	ldr	r3, [pc, #192]	; (80054bc <updateState+0x320>)
 80053fc:	701a      	strb	r2, [r3, #0]
 80053fe:	e04e      	b.n	800549e <updateState+0x302>
 8005400:	4b29      	ldr	r3, [pc, #164]	; (80054a8 <updateState+0x30c>)
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d109      	bne.n	800541e <updateState+0x282>
 800540a:	4b27      	ldr	r3, [pc, #156]	; (80054a8 <updateState+0x30c>)
 800540c:	785b      	ldrb	r3, [r3, #1]
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b00      	cmp	r3, #0
 8005412:	d104      	bne.n	800541e <updateState+0x282>
 8005414:	4b24      	ldr	r3, [pc, #144]	; (80054a8 <updateState+0x30c>)
 8005416:	78db      	ldrb	r3, [r3, #3]
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d03f      	beq.n	800549e <updateState+0x302>
 800541e:	4b27      	ldr	r3, [pc, #156]	; (80054bc <updateState+0x320>)
 8005420:	2200      	movs	r2, #0
 8005422:	701a      	strb	r2, [r3, #0]
 8005424:	e03b      	b.n	800549e <updateState+0x302>
			case 8: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8005426:	4b20      	ldr	r3, [pc, #128]	; (80054a8 <updateState+0x30c>)
 8005428:	785b      	ldrb	r3, [r3, #1]
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d006      	beq.n	800543e <updateState+0x2a2>
 8005430:	4b22      	ldr	r3, [pc, #136]	; (80054bc <updateState+0x320>)
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	3301      	adds	r3, #1
 8005436:	b2da      	uxtb	r2, r3
 8005438:	4b20      	ldr	r3, [pc, #128]	; (80054bc <updateState+0x320>)
 800543a:	701a      	strb	r2, [r3, #0]
 800543c:	e031      	b.n	80054a2 <updateState+0x306>
 800543e:	4b1a      	ldr	r3, [pc, #104]	; (80054a8 <updateState+0x30c>)
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b00      	cmp	r3, #0
 8005446:	d109      	bne.n	800545c <updateState+0x2c0>
 8005448:	4b17      	ldr	r3, [pc, #92]	; (80054a8 <updateState+0x30c>)
 800544a:	789b      	ldrb	r3, [r3, #2]
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d104      	bne.n	800545c <updateState+0x2c0>
 8005452:	4b15      	ldr	r3, [pc, #84]	; (80054a8 <updateState+0x30c>)
 8005454:	78db      	ldrb	r3, [r3, #3]
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	d022      	beq.n	80054a2 <updateState+0x306>
 800545c:	4b17      	ldr	r3, [pc, #92]	; (80054bc <updateState+0x320>)
 800545e:	2200      	movs	r2, #0
 8005460:	701a      	strb	r2, [r3, #0]
 8005462:	e01e      	b.n	80054a2 <updateState+0x306>
			case 9: if (buttons.is3Pressed) {TFT_startup(hspi); s = 0;} break;
 8005464:	4b10      	ldr	r3, [pc, #64]	; (80054a8 <updateState+0x30c>)
 8005466:	789b      	ldrb	r3, [r3, #2]
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d02a      	beq.n	80054c4 <updateState+0x328>
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	0018      	movs	r0, r3
 8005472:	f7fc fcd9 	bl	8001e28 <TFT_startup>
 8005476:	4b11      	ldr	r3, [pc, #68]	; (80054bc <updateState+0x320>)
 8005478:	2200      	movs	r2, #0
 800547a:	701a      	strb	r2, [r3, #0]
 800547c:	e022      	b.n	80054c4 <updateState+0x328>
			default: break;
 800547e:	46c0      	nop			; (mov r8, r8)
 8005480:	e021      	b.n	80054c6 <updateState+0x32a>
			case 0:	if (buttons.is2Pressed) s++; break;
 8005482:	46c0      	nop			; (mov r8, r8)
 8005484:	e01f      	b.n	80054c6 <updateState+0x32a>
			case 1: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8005486:	46c0      	nop			; (mov r8, r8)
 8005488:	e01d      	b.n	80054c6 <updateState+0x32a>
			case 2: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 800548a:	46c0      	nop			; (mov r8, r8)
 800548c:	e01b      	b.n	80054c6 <updateState+0x32a>
			case 3: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 800548e:	46c0      	nop			; (mov r8, r8)
 8005490:	e019      	b.n	80054c6 <updateState+0x32a>
			case 4: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8005492:	46c0      	nop			; (mov r8, r8)
 8005494:	e017      	b.n	80054c6 <updateState+0x32a>
			case 5: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8005496:	46c0      	nop			; (mov r8, r8)
 8005498:	e015      	b.n	80054c6 <updateState+0x32a>
			case 6: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 800549a:	46c0      	nop			; (mov r8, r8)
 800549c:	e013      	b.n	80054c6 <updateState+0x32a>
			case 7: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	e011      	b.n	80054c6 <updateState+0x32a>
			case 8: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 80054a2:	46c0      	nop			; (mov r8, r8)
 80054a4:	e00f      	b.n	80054c6 <updateState+0x32a>
 80054a6:	46c0      	nop			; (mov r8, r8)
 80054a8:	2000018c 	.word	0x2000018c
 80054ac:	20000068 	.word	0x20000068
 80054b0:	20000130 	.word	0x20000130
 80054b4:	80000003 	.word	0x80000003
 80054b8:	20000140 	.word	0x20000140
 80054bc:	20000131 	.word	0x20000131
 80054c0:	0800c558 	.word	0x0800c558
			case 9: if (buttons.is3Pressed) {TFT_startup(hspi); s = 0;} break;
 80054c4:	46c0      	nop			; (mov r8, r8)
		}

		// run helper functions when their face is on screen
		if (faceOnDisplay == faceClock) updateClockState(hrtc);
 80054c6:	4b1b      	ldr	r3, [pc, #108]	; (8005534 <updateState+0x398>)
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d104      	bne.n	80054d8 <updateState+0x33c>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	0018      	movs	r0, r3
 80054d2:	f000 f833 	bl	800553c <updateClockState>
 80054d6:	e01d      	b.n	8005514 <updateState+0x378>
		else if (faceOnDisplay == faceTimer) updateTimerState(timerStopwatchTim, motorBacklightTim);
 80054d8:	4b16      	ldr	r3, [pc, #88]	; (8005534 <updateState+0x398>)
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d106      	bne.n	80054ee <updateState+0x352>
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	0011      	movs	r1, r2
 80054e6:	0018      	movs	r0, r3
 80054e8:	f000 f978 	bl	80057dc <updateTimerState>
 80054ec:	e012      	b.n	8005514 <updateState+0x378>
		else if (faceOnDisplay == faceAlarm) updateAlarmState(hrtc, motorBacklightTim);
 80054ee:	4b11      	ldr	r3, [pc, #68]	; (8005534 <updateState+0x398>)
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d106      	bne.n	8005504 <updateState+0x368>
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	0011      	movs	r1, r2
 80054fc:	0018      	movs	r0, r3
 80054fe:	f000 faa9 	bl	8005a54 <updateAlarmState>
 8005502:	e007      	b.n	8005514 <updateState+0x378>
		else if (faceOnDisplay == faceStopwatch) updateStopwatchState(timerStopwatchTim);
 8005504:	4b0b      	ldr	r3, [pc, #44]	; (8005534 <updateState+0x398>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b03      	cmp	r3, #3
 800550a:	d103      	bne.n	8005514 <updateState+0x378>
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	0018      	movs	r0, r3
 8005510:	f000 fbcc 	bl	8005cac <updateStopwatchState>

		// flags cleared only when state code has finished executing once
		buttons.is1Pressed = buttons.is2Pressed = buttons.is3Pressed = buttons.is4Pressed = 0;
 8005514:	2200      	movs	r2, #0
 8005516:	4b08      	ldr	r3, [pc, #32]	; (8005538 <updateState+0x39c>)
 8005518:	1c11      	adds	r1, r2, #0
 800551a:	70d9      	strb	r1, [r3, #3]
 800551c:	4b06      	ldr	r3, [pc, #24]	; (8005538 <updateState+0x39c>)
 800551e:	1c11      	adds	r1, r2, #0
 8005520:	7099      	strb	r1, [r3, #2]
 8005522:	4b05      	ldr	r3, [pc, #20]	; (8005538 <updateState+0x39c>)
 8005524:	1c11      	adds	r1, r2, #0
 8005526:	7059      	strb	r1, [r3, #1]
 8005528:	4b03      	ldr	r3, [pc, #12]	; (8005538 <updateState+0x39c>)
 800552a:	701a      	strb	r2, [r3, #0]
	}
}
 800552c:	46c0      	nop			; (mov r8, r8)
 800552e:	46bd      	mov	sp, r7
 8005530:	b004      	add	sp, #16
 8005532:	bd80      	pop	{r7, pc}
 8005534:	20000130 	.word	0x20000130
 8005538:	2000018c 	.word	0x2000018c

0800553c <updateClockState>:
 *   button 2 changes value up
 *   button 3 changes value down
 *   button 4 changes field being set. changes between min, hr, year, month, and day. once it finishes cycling through it once,
 *     the clock is updated and we revert back to default mode.
 */
void updateClockState(RTC_HandleTypeDef *hrtc) {
 800553c:	b590      	push	{r4, r7, lr}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
	// check button pressed -> perform action
	if (buttons.is2Pressed && clockVars.isBeingSet) {
 8005544:	4b9f      	ldr	r3, [pc, #636]	; (80057c4 <updateClockState+0x288>)
 8005546:	785b      	ldrb	r3, [r3, #1]
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d065      	beq.n	800561a <updateClockState+0xde>
 800554e:	4b9e      	ldr	r3, [pc, #632]	; (80057c8 <updateClockState+0x28c>)
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d061      	beq.n	800561a <updateClockState+0xde>
		updateFace.clock = 1;
 8005556:	4b9d      	ldr	r3, [pc, #628]	; (80057cc <updateClockState+0x290>)
 8005558:	2201      	movs	r2, #1
 800555a:	701a      	strb	r2, [r3, #0]
		switch (clockVars.fieldBeingSet) {
 800555c:	4b9a      	ldr	r3, [pc, #616]	; (80057c8 <updateClockState+0x28c>)
 800555e:	785b      	ldrb	r3, [r3, #1]
 8005560:	2b05      	cmp	r3, #5
 8005562:	d85c      	bhi.n	800561e <updateClockState+0xe2>
 8005564:	009a      	lsls	r2, r3, #2
 8005566:	4b9a      	ldr	r3, [pc, #616]	; (80057d0 <updateClockState+0x294>)
 8005568:	18d3      	adds	r3, r2, r3
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	469f      	mov	pc, r3
			case 1: clockVars.timeToSet->min = (clockVars.timeToSet->min+1) % 60; break;
 800556e:	4b96      	ldr	r3, [pc, #600]	; (80057c8 <updateClockState+0x28c>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	785b      	ldrb	r3, [r3, #1]
 8005574:	3301      	adds	r3, #1
 8005576:	213c      	movs	r1, #60	; 0x3c
 8005578:	0018      	movs	r0, r3
 800557a:	f7fa ff3d 	bl	80003f8 <__aeabi_idivmod>
 800557e:	000b      	movs	r3, r1
 8005580:	001a      	movs	r2, r3
 8005582:	4b91      	ldr	r3, [pc, #580]	; (80057c8 <updateClockState+0x28c>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	b2d2      	uxtb	r2, r2
 8005588:	705a      	strb	r2, [r3, #1]
 800558a:	e049      	b.n	8005620 <updateClockState+0xe4>
			case 2: clockVars.timeToSet->hr = (clockVars.timeToSet->hr+1) % 24; break;
 800558c:	4b8e      	ldr	r3, [pc, #568]	; (80057c8 <updateClockState+0x28c>)
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	3301      	adds	r3, #1
 8005594:	2118      	movs	r1, #24
 8005596:	0018      	movs	r0, r3
 8005598:	f7fa ff2e 	bl	80003f8 <__aeabi_idivmod>
 800559c:	000b      	movs	r3, r1
 800559e:	001a      	movs	r2, r3
 80055a0:	4b89      	ldr	r3, [pc, #548]	; (80057c8 <updateClockState+0x28c>)
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	b2d2      	uxtb	r2, r2
 80055a6:	701a      	strb	r2, [r3, #0]
 80055a8:	e03a      	b.n	8005620 <updateClockState+0xe4>
			case 3: clockVars.dateToSet->yr = (clockVars.dateToSet->yr + 1) % 10000; break;		// fit in 4 characters
 80055aa:	4b87      	ldr	r3, [pc, #540]	; (80057c8 <updateClockState+0x28c>)
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	3301      	adds	r3, #1
 80055b2:	4988      	ldr	r1, [pc, #544]	; (80057d4 <updateClockState+0x298>)
 80055b4:	0018      	movs	r0, r3
 80055b6:	f7fa ff1f 	bl	80003f8 <__aeabi_idivmod>
 80055ba:	000b      	movs	r3, r1
 80055bc:	001a      	movs	r2, r3
 80055be:	4b82      	ldr	r3, [pc, #520]	; (80057c8 <updateClockState+0x28c>)
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	b292      	uxth	r2, r2
 80055c4:	801a      	strh	r2, [r3, #0]
 80055c6:	e02b      	b.n	8005620 <updateClockState+0xe4>
			case 4: clockVars.dateToSet->month = (clockVars.dateToSet->month) % 12 + 1; break;
 80055c8:	4b7f      	ldr	r3, [pc, #508]	; (80057c8 <updateClockState+0x28c>)
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	789b      	ldrb	r3, [r3, #2]
 80055ce:	210c      	movs	r1, #12
 80055d0:	0018      	movs	r0, r3
 80055d2:	f7fa fe27 	bl	8000224 <__aeabi_uidivmod>
 80055d6:	000b      	movs	r3, r1
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	4b7b      	ldr	r3, [pc, #492]	; (80057c8 <updateClockState+0x28c>)
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	3201      	adds	r2, #1
 80055e0:	b2d2      	uxtb	r2, r2
 80055e2:	709a      	strb	r2, [r3, #2]
 80055e4:	e01c      	b.n	8005620 <updateClockState+0xe4>
			case 5: clockVars.dateToSet->date = ((clockVars.dateToSet->date) % maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr)) + 1; break;
 80055e6:	4b78      	ldr	r3, [pc, #480]	; (80057c8 <updateClockState+0x28c>)
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	78dc      	ldrb	r4, [r3, #3]
 80055ec:	4b76      	ldr	r3, [pc, #472]	; (80057c8 <updateClockState+0x28c>)
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	789a      	ldrb	r2, [r3, #2]
 80055f2:	4b75      	ldr	r3, [pc, #468]	; (80057c8 <updateClockState+0x28c>)
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	0019      	movs	r1, r3
 80055fa:	0010      	movs	r0, r2
 80055fc:	f7fe f9c0 	bl	8003980 <maxDaysInMonth>
 8005600:	0003      	movs	r3, r0
 8005602:	0019      	movs	r1, r3
 8005604:	0020      	movs	r0, r4
 8005606:	f7fa fe0d 	bl	8000224 <__aeabi_uidivmod>
 800560a:	000b      	movs	r3, r1
 800560c:	b2da      	uxtb	r2, r3
 800560e:	4b6e      	ldr	r3, [pc, #440]	; (80057c8 <updateClockState+0x28c>)
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	3201      	adds	r2, #1
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	70da      	strb	r2, [r3, #3]
 8005618:	e002      	b.n	8005620 <updateClockState+0xe4>
			default: break;
		}
	}
 800561a:	46c0      	nop			; (mov r8, r8)
 800561c:	e000      	b.n	8005620 <updateClockState+0xe4>
			default: break;
 800561e:	46c0      	nop			; (mov r8, r8)
	// change fields down, do nothing if not setting clock
	if (buttons.is3Pressed && clockVars.isBeingSet) {
 8005620:	4b68      	ldr	r3, [pc, #416]	; (80057c4 <updateClockState+0x288>)
 8005622:	789b      	ldrb	r3, [r3, #2]
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d100      	bne.n	800562c <updateClockState+0xf0>
 800562a:	e068      	b.n	80056fe <updateClockState+0x1c2>
 800562c:	4b66      	ldr	r3, [pc, #408]	; (80057c8 <updateClockState+0x28c>)
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d064      	beq.n	80056fe <updateClockState+0x1c2>
		updateFace.clock = 1;
 8005634:	4b65      	ldr	r3, [pc, #404]	; (80057cc <updateClockState+0x290>)
 8005636:	2201      	movs	r2, #1
 8005638:	701a      	strb	r2, [r3, #0]
		switch (clockVars.fieldBeingSet) {
 800563a:	4b63      	ldr	r3, [pc, #396]	; (80057c8 <updateClockState+0x28c>)
 800563c:	785b      	ldrb	r3, [r3, #1]
 800563e:	2b05      	cmp	r3, #5
 8005640:	d85f      	bhi.n	8005702 <updateClockState+0x1c6>
 8005642:	009a      	lsls	r2, r3, #2
 8005644:	4b64      	ldr	r3, [pc, #400]	; (80057d8 <updateClockState+0x29c>)
 8005646:	18d3      	adds	r3, r2, r3
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	469f      	mov	pc, r3
			case 1:
				if (clockVars.timeToSet->min == 0) clockVars.timeToSet->min = 59;
 800564c:	4b5e      	ldr	r3, [pc, #376]	; (80057c8 <updateClockState+0x28c>)
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	785b      	ldrb	r3, [r3, #1]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d104      	bne.n	8005660 <updateClockState+0x124>
 8005656:	4b5c      	ldr	r3, [pc, #368]	; (80057c8 <updateClockState+0x28c>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	223b      	movs	r2, #59	; 0x3b
 800565c:	705a      	strb	r2, [r3, #1]
				else clockVars.timeToSet->min--;
				break;
 800565e:	e053      	b.n	8005708 <updateClockState+0x1cc>
				else clockVars.timeToSet->min--;
 8005660:	4b59      	ldr	r3, [pc, #356]	; (80057c8 <updateClockState+0x28c>)
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	785a      	ldrb	r2, [r3, #1]
 8005666:	3a01      	subs	r2, #1
 8005668:	b2d2      	uxtb	r2, r2
 800566a:	705a      	strb	r2, [r3, #1]
				break;
 800566c:	e04c      	b.n	8005708 <updateClockState+0x1cc>
			case 2:
				if (clockVars.timeToSet->hr == 0) clockVars.timeToSet->hr = 23;
 800566e:	4b56      	ldr	r3, [pc, #344]	; (80057c8 <updateClockState+0x28c>)
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d104      	bne.n	8005682 <updateClockState+0x146>
 8005678:	4b53      	ldr	r3, [pc, #332]	; (80057c8 <updateClockState+0x28c>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	2217      	movs	r2, #23
 800567e:	701a      	strb	r2, [r3, #0]
				else clockVars.timeToSet->hr--;
				break;
 8005680:	e042      	b.n	8005708 <updateClockState+0x1cc>
				else clockVars.timeToSet->hr--;
 8005682:	4b51      	ldr	r3, [pc, #324]	; (80057c8 <updateClockState+0x28c>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	781a      	ldrb	r2, [r3, #0]
 8005688:	3a01      	subs	r2, #1
 800568a:	b2d2      	uxtb	r2, r2
 800568c:	701a      	strb	r2, [r3, #0]
				break;
 800568e:	e03b      	b.n	8005708 <updateClockState+0x1cc>
			case 3: if (clockVars.dateToSet->yr != 0) clockVars.dateToSet->yr--; break;		// limit to positive numbers
 8005690:	4b4d      	ldr	r3, [pc, #308]	; (80057c8 <updateClockState+0x28c>)
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	881b      	ldrh	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d035      	beq.n	8005706 <updateClockState+0x1ca>
 800569a:	4b4b      	ldr	r3, [pc, #300]	; (80057c8 <updateClockState+0x28c>)
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	881a      	ldrh	r2, [r3, #0]
 80056a0:	3a01      	subs	r2, #1
 80056a2:	b292      	uxth	r2, r2
 80056a4:	801a      	strh	r2, [r3, #0]
 80056a6:	e02e      	b.n	8005706 <updateClockState+0x1ca>
			case 4: //clockVars.dateToSet->month = clockVars.dateToSet->month == 1 ? 12 : clockVars.dateToSet->month-1; break;
				if (clockVars.dateToSet->month == 1) clockVars.dateToSet->month = 12;
 80056a8:	4b47      	ldr	r3, [pc, #284]	; (80057c8 <updateClockState+0x28c>)
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	789b      	ldrb	r3, [r3, #2]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d104      	bne.n	80056bc <updateClockState+0x180>
 80056b2:	4b45      	ldr	r3, [pc, #276]	; (80057c8 <updateClockState+0x28c>)
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	220c      	movs	r2, #12
 80056b8:	709a      	strb	r2, [r3, #2]
				else clockVars.dateToSet->month--;
				break;
 80056ba:	e025      	b.n	8005708 <updateClockState+0x1cc>
				else clockVars.dateToSet->month--;
 80056bc:	4b42      	ldr	r3, [pc, #264]	; (80057c8 <updateClockState+0x28c>)
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	789a      	ldrb	r2, [r3, #2]
 80056c2:	3a01      	subs	r2, #1
 80056c4:	b2d2      	uxtb	r2, r2
 80056c6:	709a      	strb	r2, [r3, #2]
				break;
 80056c8:	e01e      	b.n	8005708 <updateClockState+0x1cc>
			case 5:
				if (clockVars.dateToSet->date == 1) clockVars.dateToSet->date = maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr);
 80056ca:	4b3f      	ldr	r3, [pc, #252]	; (80057c8 <updateClockState+0x28c>)
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	78db      	ldrb	r3, [r3, #3]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d10d      	bne.n	80056f0 <updateClockState+0x1b4>
 80056d4:	4b3c      	ldr	r3, [pc, #240]	; (80057c8 <updateClockState+0x28c>)
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	789a      	ldrb	r2, [r3, #2]
 80056da:	4b3b      	ldr	r3, [pc, #236]	; (80057c8 <updateClockState+0x28c>)
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	8819      	ldrh	r1, [r3, #0]
 80056e0:	4b39      	ldr	r3, [pc, #228]	; (80057c8 <updateClockState+0x28c>)
 80056e2:	685c      	ldr	r4, [r3, #4]
 80056e4:	0010      	movs	r0, r2
 80056e6:	f7fe f94b 	bl	8003980 <maxDaysInMonth>
 80056ea:	0003      	movs	r3, r0
 80056ec:	70e3      	strb	r3, [r4, #3]
				else clockVars.dateToSet->date--;
				break;
 80056ee:	e00b      	b.n	8005708 <updateClockState+0x1cc>
				else clockVars.dateToSet->date--;
 80056f0:	4b35      	ldr	r3, [pc, #212]	; (80057c8 <updateClockState+0x28c>)
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	78da      	ldrb	r2, [r3, #3]
 80056f6:	3a01      	subs	r2, #1
 80056f8:	b2d2      	uxtb	r2, r2
 80056fa:	70da      	strb	r2, [r3, #3]
				break;
 80056fc:	e004      	b.n	8005708 <updateClockState+0x1cc>
			default: break;
		}
	}
 80056fe:	46c0      	nop			; (mov r8, r8)
 8005700:	e002      	b.n	8005708 <updateClockState+0x1cc>
			default: break;
 8005702:	46c0      	nop			; (mov r8, r8)
 8005704:	e000      	b.n	8005708 <updateClockState+0x1cc>
			case 3: if (clockVars.dateToSet->yr != 0) clockVars.dateToSet->yr--; break;		// limit to positive numbers
 8005706:	46c0      	nop			; (mov r8, r8)
	// switches between setting mode and default mode. changes between different clock fields
	if (buttons.is4Pressed) {
 8005708:	4b2e      	ldr	r3, [pc, #184]	; (80057c4 <updateClockState+0x288>)
 800570a:	78db      	ldrb	r3, [r3, #3]
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d054      	beq.n	80057bc <updateClockState+0x280>
		updateFace.clock = 1;
 8005712:	4b2e      	ldr	r3, [pc, #184]	; (80057cc <updateClockState+0x290>)
 8005714:	2201      	movs	r2, #1
 8005716:	701a      	strb	r2, [r3, #0]
		clockVars.fieldBeingSet = (clockVars.fieldBeingSet + 1) % (NUM_CLOCKFIELDS + 1);
 8005718:	4b2b      	ldr	r3, [pc, #172]	; (80057c8 <updateClockState+0x28c>)
 800571a:	785b      	ldrb	r3, [r3, #1]
 800571c:	3301      	adds	r3, #1
 800571e:	2106      	movs	r1, #6
 8005720:	0018      	movs	r0, r3
 8005722:	f7fa fe69 	bl	80003f8 <__aeabi_idivmod>
 8005726:	000b      	movs	r3, r1
 8005728:	b2da      	uxtb	r2, r3
 800572a:	4b27      	ldr	r3, [pc, #156]	; (80057c8 <updateClockState+0x28c>)
 800572c:	705a      	strb	r2, [r3, #1]
		if (clockVars.fieldBeingSet != 0) {
 800572e:	4b26      	ldr	r3, [pc, #152]	; (80057c8 <updateClockState+0x28c>)
 8005730:	785b      	ldrb	r3, [r3, #1]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d033      	beq.n	800579e <updateClockState+0x262>
			clockVars.isBeingSet = 1;
 8005736:	4b24      	ldr	r3, [pc, #144]	; (80057c8 <updateClockState+0x28c>)
 8005738:	2201      	movs	r2, #1
 800573a:	701a      	strb	r2, [r3, #0]

			// should pull current time when first entering setting mode
			if (clockVars.fieldBeingSet == 1) {
 800573c:	4b22      	ldr	r3, [pc, #136]	; (80057c8 <updateClockState+0x28c>)
 800573e:	785b      	ldrb	r3, [r3, #1]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d10e      	bne.n	8005762 <updateClockState+0x226>
				getDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
 8005744:	4b20      	ldr	r3, [pc, #128]	; (80057c8 <updateClockState+0x28c>)
 8005746:	6858      	ldr	r0, [r3, #4]
 8005748:	4b1f      	ldr	r3, [pc, #124]	; (80057c8 <updateClockState+0x28c>)
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	0019      	movs	r1, r3
 8005750:	f7fd ffd4 	bl	80036fc <getDateTime>
				HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_B);
 8005754:	2380      	movs	r3, #128	; 0x80
 8005756:	009a      	lsls	r2, r3, #2
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	0011      	movs	r1, r2
 800575c:	0018      	movs	r0, r3
 800575e:	f003 fe73 	bl	8009448 <HAL_RTC_DeactivateAlarm>
			}

			if (clockVars.dateToSet->date > maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr)) {
 8005762:	4b19      	ldr	r3, [pc, #100]	; (80057c8 <updateClockState+0x28c>)
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	78dc      	ldrb	r4, [r3, #3]
 8005768:	4b17      	ldr	r3, [pc, #92]	; (80057c8 <updateClockState+0x28c>)
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	789a      	ldrb	r2, [r3, #2]
 800576e:	4b16      	ldr	r3, [pc, #88]	; (80057c8 <updateClockState+0x28c>)
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	881b      	ldrh	r3, [r3, #0]
 8005774:	0019      	movs	r1, r3
 8005776:	0010      	movs	r0, r2
 8005778:	f7fe f902 	bl	8003980 <maxDaysInMonth>
 800577c:	0003      	movs	r3, r0
 800577e:	429c      	cmp	r4, r3
 8005780:	d91c      	bls.n	80057bc <updateClockState+0x280>
				clockVars.dateToSet->date = maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr);
 8005782:	4b11      	ldr	r3, [pc, #68]	; (80057c8 <updateClockState+0x28c>)
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	789a      	ldrb	r2, [r3, #2]
 8005788:	4b0f      	ldr	r3, [pc, #60]	; (80057c8 <updateClockState+0x28c>)
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	8819      	ldrh	r1, [r3, #0]
 800578e:	4b0e      	ldr	r3, [pc, #56]	; (80057c8 <updateClockState+0x28c>)
 8005790:	685c      	ldr	r4, [r3, #4]
 8005792:	0010      	movs	r0, r2
 8005794:	f7fe f8f4 	bl	8003980 <maxDaysInMonth>
 8005798:	0003      	movs	r3, r0
 800579a:	70e3      	strb	r3, [r4, #3]
			// second set to 0, weekday ignored
			setDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
			setClockAlarm(hrtc);
		}
	}
}
 800579c:	e00e      	b.n	80057bc <updateClockState+0x280>
			clockVars.isBeingSet = 0;
 800579e:	4b0a      	ldr	r3, [pc, #40]	; (80057c8 <updateClockState+0x28c>)
 80057a0:	2200      	movs	r2, #0
 80057a2:	701a      	strb	r2, [r3, #0]
			setDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
 80057a4:	4b08      	ldr	r3, [pc, #32]	; (80057c8 <updateClockState+0x28c>)
 80057a6:	6858      	ldr	r0, [r3, #4]
 80057a8:	4b07      	ldr	r3, [pc, #28]	; (80057c8 <updateClockState+0x28c>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	0019      	movs	r1, r3
 80057b0:	f7fd fdfc 	bl	80033ac <setDateTime>
			setClockAlarm(hrtc);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	0018      	movs	r0, r3
 80057b8:	f7fd fe64 	bl	8003484 <setClockAlarm>
}
 80057bc:	46c0      	nop			; (mov r8, r8)
 80057be:	46bd      	mov	sp, r7
 80057c0:	b003      	add	sp, #12
 80057c2:	bd90      	pop	{r4, r7, pc}
 80057c4:	2000018c 	.word	0x2000018c
 80057c8:	2000010c 	.word	0x2000010c
 80057cc:	20000140 	.word	0x20000140
 80057d0:	0800c580 	.word	0x0800c580
 80057d4:	00002710 	.word	0x00002710
 80057d8:	0800c598 	.word	0x0800c598

080057dc <updateTimerState>:
 *   button 2 changes value up
 *   button 3 changes value down
 *   button 4 changes field being set. changes between sec, min, hr. returns to default mode after
 *     cycling through fields once.
 */
void updateTimerState(TIM_HandleTypeDef *timerStopwatchTim, TIM_HandleTypeDef *motorTim) {
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
	// check which button is pressed -> perform action
	if (buttons.is2Pressed) {
 80057e6:	4b93      	ldr	r3, [pc, #588]	; (8005a34 <updateTimerState+0x258>)
 80057e8:	785b      	ldrb	r3, [r3, #1]
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d057      	beq.n	80058a0 <updateTimerState+0xc4>
		updateFace.timer = 1;
 80057f0:	4b91      	ldr	r3, [pc, #580]	; (8005a38 <updateTimerState+0x25c>)
 80057f2:	2201      	movs	r2, #1
 80057f4:	705a      	strb	r2, [r3, #1]
		if (timerVars.isBeingSet) {
 80057f6:	4b91      	ldr	r3, [pc, #580]	; (8005a3c <updateTimerState+0x260>)
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d035      	beq.n	800586a <updateTimerState+0x8e>
			// set field up
			switch (timerVars.fieldBeingSet) {
 80057fe:	4b8f      	ldr	r3, [pc, #572]	; (8005a3c <updateTimerState+0x260>)
 8005800:	785b      	ldrb	r3, [r3, #1]
 8005802:	2b02      	cmp	r3, #2
 8005804:	d013      	beq.n	800582e <updateTimerState+0x52>
 8005806:	2b03      	cmp	r3, #3
 8005808:	d020      	beq.n	800584c <updateTimerState+0x70>
 800580a:	2b01      	cmp	r3, #1
 800580c:	d000      	beq.n	8005810 <updateTimerState+0x34>
				case 1: timerVars.timeToSet->sec = (timerVars.timeToSet->sec+1) % 60; break;
				case 2: timerVars.timeToSet->min = (timerVars.timeToSet->min+1) % 60; break;
				case 3: timerVars.timeToSet->hr = (timerVars.timeToSet->hr+1) % 100; break;
				default: break;
 800580e:	e10d      	b.n	8005a2c <updateTimerState+0x250>
				case 1: timerVars.timeToSet->sec = (timerVars.timeToSet->sec+1) % 60; break;
 8005810:	4b8a      	ldr	r3, [pc, #552]	; (8005a3c <updateTimerState+0x260>)
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	789b      	ldrb	r3, [r3, #2]
 8005816:	3301      	adds	r3, #1
 8005818:	213c      	movs	r1, #60	; 0x3c
 800581a:	0018      	movs	r0, r3
 800581c:	f7fa fdec 	bl	80003f8 <__aeabi_idivmod>
 8005820:	000b      	movs	r3, r1
 8005822:	001a      	movs	r2, r3
 8005824:	4b85      	ldr	r3, [pc, #532]	; (8005a3c <updateTimerState+0x260>)
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	b2d2      	uxtb	r2, r2
 800582a:	709a      	strb	r2, [r3, #2]
 800582c:	e0fe      	b.n	8005a2c <updateTimerState+0x250>
				case 2: timerVars.timeToSet->min = (timerVars.timeToSet->min+1) % 60; break;
 800582e:	4b83      	ldr	r3, [pc, #524]	; (8005a3c <updateTimerState+0x260>)
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	785b      	ldrb	r3, [r3, #1]
 8005834:	3301      	adds	r3, #1
 8005836:	213c      	movs	r1, #60	; 0x3c
 8005838:	0018      	movs	r0, r3
 800583a:	f7fa fddd 	bl	80003f8 <__aeabi_idivmod>
 800583e:	000b      	movs	r3, r1
 8005840:	001a      	movs	r2, r3
 8005842:	4b7e      	ldr	r3, [pc, #504]	; (8005a3c <updateTimerState+0x260>)
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	b2d2      	uxtb	r2, r2
 8005848:	705a      	strb	r2, [r3, #1]
 800584a:	e0ef      	b.n	8005a2c <updateTimerState+0x250>
				case 3: timerVars.timeToSet->hr = (timerVars.timeToSet->hr+1) % 100; break;
 800584c:	4b7b      	ldr	r3, [pc, #492]	; (8005a3c <updateTimerState+0x260>)
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	3301      	adds	r3, #1
 8005854:	2164      	movs	r1, #100	; 0x64
 8005856:	0018      	movs	r0, r3
 8005858:	f7fa fdce 	bl	80003f8 <__aeabi_idivmod>
 800585c:	000b      	movs	r3, r1
 800585e:	001a      	movs	r2, r3
 8005860:	4b76      	ldr	r3, [pc, #472]	; (8005a3c <updateTimerState+0x260>)
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	b2d2      	uxtb	r2, r2
 8005866:	701a      	strb	r2, [r3, #0]
 8005868:	e0e0      	b.n	8005a2c <updateTimerState+0x250>
			}
		}
		else if (timerVars.isSet && isTimerRunning == 0 && timerCounter != 0) {
 800586a:	4b74      	ldr	r3, [pc, #464]	; (8005a3c <updateTimerState+0x260>)
 800586c:	789b      	ldrb	r3, [r3, #2]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d100      	bne.n	8005874 <updateTimerState+0x98>
 8005872:	e0db      	b.n	8005a2c <updateTimerState+0x250>
 8005874:	4b72      	ldr	r3, [pc, #456]	; (8005a40 <updateTimerState+0x264>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d000      	beq.n	8005880 <updateTimerState+0xa4>
 800587e:	e0d5      	b.n	8005a2c <updateTimerState+0x250>
 8005880:	4b70      	ldr	r3, [pc, #448]	; (8005a44 <updateTimerState+0x268>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d100      	bne.n	800588a <updateTimerState+0xae>
 8005888:	e0d0      	b.n	8005a2c <updateTimerState+0x250>
			// start timer
			runTimer(timerStopwatchTim);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	0018      	movs	r0, r3
 800588e:	f7ff fa6b 	bl	8004d68 <runTimer>
			isTimerRunning = 1;
 8005892:	4b6b      	ldr	r3, [pc, #428]	; (8005a40 <updateTimerState+0x264>)
 8005894:	2201      	movs	r2, #1
 8005896:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 0;
 8005898:	4b6b      	ldr	r3, [pc, #428]	; (8005a48 <updateTimerState+0x26c>)
 800589a:	2200      	movs	r2, #0
 800589c:	701a      	strb	r2, [r3, #0]
				timerVars.isBeingSet = 0;
				timerVars.isSet = 0;
			}
		}
	}
}
 800589e:	e0c5      	b.n	8005a2c <updateTimerState+0x250>
	else if (buttons.is3Pressed) {
 80058a0:	4b64      	ldr	r3, [pc, #400]	; (8005a34 <updateTimerState+0x258>)
 80058a2:	789b      	ldrb	r3, [r3, #2]
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d05d      	beq.n	8005966 <updateTimerState+0x18a>
		updateFace.timer = 1;
 80058aa:	4b63      	ldr	r3, [pc, #396]	; (8005a38 <updateTimerState+0x25c>)
 80058ac:	2201      	movs	r2, #1
 80058ae:	705a      	strb	r2, [r3, #1]
		if (timerVars.isBeingSet) {
 80058b0:	4b62      	ldr	r3, [pc, #392]	; (8005a3c <updateTimerState+0x260>)
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d03b      	beq.n	8005930 <updateTimerState+0x154>
			switch (timerVars.fieldBeingSet) {
 80058b8:	4b60      	ldr	r3, [pc, #384]	; (8005a3c <updateTimerState+0x260>)
 80058ba:	785b      	ldrb	r3, [r3, #1]
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d015      	beq.n	80058ec <updateTimerState+0x110>
 80058c0:	2b03      	cmp	r3, #3
 80058c2:	d024      	beq.n	800590e <updateTimerState+0x132>
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d000      	beq.n	80058ca <updateTimerState+0xee>
				default: break;
 80058c8:	e0b0      	b.n	8005a2c <updateTimerState+0x250>
					if (timerVars.timeToSet->sec == 0) timerVars.timeToSet->sec = 59;
 80058ca:	4b5c      	ldr	r3, [pc, #368]	; (8005a3c <updateTimerState+0x260>)
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	789b      	ldrb	r3, [r3, #2]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d104      	bne.n	80058de <updateTimerState+0x102>
 80058d4:	4b59      	ldr	r3, [pc, #356]	; (8005a3c <updateTimerState+0x260>)
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	223b      	movs	r2, #59	; 0x3b
 80058da:	709a      	strb	r2, [r3, #2]
					break;
 80058dc:	e0a6      	b.n	8005a2c <updateTimerState+0x250>
					else timerVars.timeToSet->sec--;
 80058de:	4b57      	ldr	r3, [pc, #348]	; (8005a3c <updateTimerState+0x260>)
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	789a      	ldrb	r2, [r3, #2]
 80058e4:	3a01      	subs	r2, #1
 80058e6:	b2d2      	uxtb	r2, r2
 80058e8:	709a      	strb	r2, [r3, #2]
					break;
 80058ea:	e09f      	b.n	8005a2c <updateTimerState+0x250>
					if (timerVars.timeToSet->min == 0) timerVars.timeToSet->min = 59;
 80058ec:	4b53      	ldr	r3, [pc, #332]	; (8005a3c <updateTimerState+0x260>)
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	785b      	ldrb	r3, [r3, #1]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d104      	bne.n	8005900 <updateTimerState+0x124>
 80058f6:	4b51      	ldr	r3, [pc, #324]	; (8005a3c <updateTimerState+0x260>)
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	223b      	movs	r2, #59	; 0x3b
 80058fc:	705a      	strb	r2, [r3, #1]
					break;
 80058fe:	e095      	b.n	8005a2c <updateTimerState+0x250>
					else timerVars.timeToSet->min--;
 8005900:	4b4e      	ldr	r3, [pc, #312]	; (8005a3c <updateTimerState+0x260>)
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	785a      	ldrb	r2, [r3, #1]
 8005906:	3a01      	subs	r2, #1
 8005908:	b2d2      	uxtb	r2, r2
 800590a:	705a      	strb	r2, [r3, #1]
					break;
 800590c:	e08e      	b.n	8005a2c <updateTimerState+0x250>
					if (timerVars.timeToSet->hr == 0) timerVars.timeToSet->hr = 99;		// no limit on hour, since we're not using day
 800590e:	4b4b      	ldr	r3, [pc, #300]	; (8005a3c <updateTimerState+0x260>)
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d104      	bne.n	8005922 <updateTimerState+0x146>
 8005918:	4b48      	ldr	r3, [pc, #288]	; (8005a3c <updateTimerState+0x260>)
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	2263      	movs	r2, #99	; 0x63
 800591e:	701a      	strb	r2, [r3, #0]
					break;
 8005920:	e084      	b.n	8005a2c <updateTimerState+0x250>
					else timerVars.timeToSet->hr--;
 8005922:	4b46      	ldr	r3, [pc, #280]	; (8005a3c <updateTimerState+0x260>)
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	781a      	ldrb	r2, [r3, #0]
 8005928:	3a01      	subs	r2, #1
 800592a:	b2d2      	uxtb	r2, r2
 800592c:	701a      	strb	r2, [r3, #0]
					break;
 800592e:	e07d      	b.n	8005a2c <updateTimerState+0x250>
		else if (timerVars.isSet && isTimerRunning && timerCounter != 0) {
 8005930:	4b42      	ldr	r3, [pc, #264]	; (8005a3c <updateTimerState+0x260>)
 8005932:	789b      	ldrb	r3, [r3, #2]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d100      	bne.n	800593a <updateTimerState+0x15e>
 8005938:	e078      	b.n	8005a2c <updateTimerState+0x250>
 800593a:	4b41      	ldr	r3, [pc, #260]	; (8005a40 <updateTimerState+0x264>)
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b00      	cmp	r3, #0
 8005942:	d100      	bne.n	8005946 <updateTimerState+0x16a>
 8005944:	e072      	b.n	8005a2c <updateTimerState+0x250>
 8005946:	4b3f      	ldr	r3, [pc, #252]	; (8005a44 <updateTimerState+0x268>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d100      	bne.n	8005950 <updateTimerState+0x174>
 800594e:	e06d      	b.n	8005a2c <updateTimerState+0x250>
			pauseTimer(timerStopwatchTim);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	0018      	movs	r0, r3
 8005954:	f7ff fa64 	bl	8004e20 <pauseTimer>
			isTimerRunning = 0;
 8005958:	4b39      	ldr	r3, [pc, #228]	; (8005a40 <updateTimerState+0x264>)
 800595a:	2200      	movs	r2, #0
 800595c:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 1;
 800595e:	4b3a      	ldr	r3, [pc, #232]	; (8005a48 <updateTimerState+0x26c>)
 8005960:	2201      	movs	r2, #1
 8005962:	701a      	strb	r2, [r3, #0]
}
 8005964:	e062      	b.n	8005a2c <updateTimerState+0x250>
	else if (buttons.is4Pressed) {
 8005966:	4b33      	ldr	r3, [pc, #204]	; (8005a34 <updateTimerState+0x258>)
 8005968:	78db      	ldrb	r3, [r3, #3]
 800596a:	b2db      	uxtb	r3, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	d05d      	beq.n	8005a2c <updateTimerState+0x250>
		updateFace.timer = 1;
 8005970:	4b31      	ldr	r3, [pc, #196]	; (8005a38 <updateTimerState+0x25c>)
 8005972:	2201      	movs	r2, #1
 8005974:	705a      	strb	r2, [r3, #1]
		if (timerVars.isSet) {
 8005976:	4b31      	ldr	r3, [pc, #196]	; (8005a3c <updateTimerState+0x260>)
 8005978:	789b      	ldrb	r3, [r3, #2]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00d      	beq.n	800599a <updateTimerState+0x1be>
			stopTimer(timerStopwatchTim);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	0018      	movs	r0, r3
 8005982:	f7ff fa61 	bl	8004e48 <stopTimer>
			timerVars.isSet = 0;
 8005986:	4b2d      	ldr	r3, [pc, #180]	; (8005a3c <updateTimerState+0x260>)
 8005988:	2200      	movs	r2, #0
 800598a:	709a      	strb	r2, [r3, #2]
			isTimerRunning = 0;
 800598c:	4b2c      	ldr	r3, [pc, #176]	; (8005a40 <updateTimerState+0x264>)
 800598e:	2200      	movs	r2, #0
 8005990:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 0;
 8005992:	4b2d      	ldr	r3, [pc, #180]	; (8005a48 <updateTimerState+0x26c>)
 8005994:	2200      	movs	r2, #0
 8005996:	701a      	strb	r2, [r3, #0]
}
 8005998:	e048      	b.n	8005a2c <updateTimerState+0x250>
			timerVars.fieldBeingSet = (timerVars.fieldBeingSet + 1) % (NUM_TIMERFIELDS + 1);
 800599a:	4b28      	ldr	r3, [pc, #160]	; (8005a3c <updateTimerState+0x260>)
 800599c:	785b      	ldrb	r3, [r3, #1]
 800599e:	3301      	adds	r3, #1
 80059a0:	4a2a      	ldr	r2, [pc, #168]	; (8005a4c <updateTimerState+0x270>)
 80059a2:	4013      	ands	r3, r2
 80059a4:	d504      	bpl.n	80059b0 <updateTimerState+0x1d4>
 80059a6:	3b01      	subs	r3, #1
 80059a8:	2204      	movs	r2, #4
 80059aa:	4252      	negs	r2, r2
 80059ac:	4313      	orrs	r3, r2
 80059ae:	3301      	adds	r3, #1
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	4b22      	ldr	r3, [pc, #136]	; (8005a3c <updateTimerState+0x260>)
 80059b4:	705a      	strb	r2, [r3, #1]
			if (timerVars.fieldBeingSet != 0) {
 80059b6:	4b21      	ldr	r3, [pc, #132]	; (8005a3c <updateTimerState+0x260>)
 80059b8:	785b      	ldrb	r3, [r3, #1]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d016      	beq.n	80059ec <updateTimerState+0x210>
				timerVars.isBeingSet = 1;
 80059be:	4b1f      	ldr	r3, [pc, #124]	; (8005a3c <updateTimerState+0x260>)
 80059c0:	2201      	movs	r2, #1
 80059c2:	701a      	strb	r2, [r3, #0]
				timerVars.isSet = 0;
 80059c4:	4b1d      	ldr	r3, [pc, #116]	; (8005a3c <updateTimerState+0x260>)
 80059c6:	2200      	movs	r2, #0
 80059c8:	709a      	strb	r2, [r3, #2]
				if (timerVars.fieldBeingSet == 1) {
 80059ca:	4b1c      	ldr	r3, [pc, #112]	; (8005a3c <updateTimerState+0x260>)
 80059cc:	785b      	ldrb	r3, [r3, #1]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d12c      	bne.n	8005a2c <updateTimerState+0x250>
					timerVars.timeToSet->sec = 0;
 80059d2:	4b1a      	ldr	r3, [pc, #104]	; (8005a3c <updateTimerState+0x260>)
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	709a      	strb	r2, [r3, #2]
					timerVars.timeToSet->min = 0;
 80059da:	4b18      	ldr	r3, [pc, #96]	; (8005a3c <updateTimerState+0x260>)
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	705a      	strb	r2, [r3, #1]
					timerVars.timeToSet->hr = 0;
 80059e2:	4b16      	ldr	r3, [pc, #88]	; (8005a3c <updateTimerState+0x260>)
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	701a      	strb	r2, [r3, #0]
}
 80059ea:	e01f      	b.n	8005a2c <updateTimerState+0x250>
			else if (timeToSeconds(timerVars.timeToSet) != 0) {
 80059ec:	4b13      	ldr	r3, [pc, #76]	; (8005a3c <updateTimerState+0x260>)
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	0018      	movs	r0, r3
 80059f2:	f7fd ff23 	bl	800383c <timeToSeconds>
 80059f6:	1e03      	subs	r3, r0, #0
 80059f8:	d011      	beq.n	8005a1e <updateTimerState+0x242>
				timerVars.isBeingSet = 0;
 80059fa:	4b10      	ldr	r3, [pc, #64]	; (8005a3c <updateTimerState+0x260>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	701a      	strb	r2, [r3, #0]
				timerVars.isSet = 1;
 8005a00:	4b0e      	ldr	r3, [pc, #56]	; (8005a3c <updateTimerState+0x260>)
 8005a02:	2201      	movs	r2, #1
 8005a04:	709a      	strb	r2, [r3, #2]
				isTimerDone = 0;
 8005a06:	4b12      	ldr	r3, [pc, #72]	; (8005a50 <updateTimerState+0x274>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	701a      	strb	r2, [r3, #0]
				timerCounter = timeToSeconds(timerVars.timeToSet);
 8005a0c:	4b0b      	ldr	r3, [pc, #44]	; (8005a3c <updateTimerState+0x260>)
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	0018      	movs	r0, r3
 8005a12:	f7fd ff13 	bl	800383c <timeToSeconds>
 8005a16:	0002      	movs	r2, r0
 8005a18:	4b0a      	ldr	r3, [pc, #40]	; (8005a44 <updateTimerState+0x268>)
 8005a1a:	601a      	str	r2, [r3, #0]
}
 8005a1c:	e006      	b.n	8005a2c <updateTimerState+0x250>
				timerVars.isBeingSet = 0;
 8005a1e:	4b07      	ldr	r3, [pc, #28]	; (8005a3c <updateTimerState+0x260>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	701a      	strb	r2, [r3, #0]
				timerVars.isSet = 0;
 8005a24:	4b05      	ldr	r3, [pc, #20]	; (8005a3c <updateTimerState+0x260>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	709a      	strb	r2, [r3, #2]
}
 8005a2a:	e7ff      	b.n	8005a2c <updateTimerState+0x250>
 8005a2c:	46c0      	nop			; (mov r8, r8)
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	b002      	add	sp, #8
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	2000018c 	.word	0x2000018c
 8005a38:	20000140 	.word	0x20000140
 8005a3c:	20000118 	.word	0x20000118
 8005a40:	20000190 	.word	0x20000190
 8005a44:	20000148 	.word	0x20000148
 8005a48:	20000192 	.word	0x20000192
 8005a4c:	80000003 	.word	0x80000003
 8005a50:	2000014c 	.word	0x2000014c

08005a54 <updateAlarmState>:
 *   button 2 changes value up
 *   button 3 changes value down
 *   button 4 changes field being set. changes between sec, min, hr. returns to default mode after
 *     cycling through fields once.
 */
void updateAlarmState(RTC_HandleTypeDef *hrtc, TIM_HandleTypeDef *motorTim) {
 8005a54:	b5b0      	push	{r4, r5, r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
	// check button pressed -> perform action
	if (buttons.is2Pressed && alarmVars.isBeingSet) {
 8005a5e:	4b90      	ldr	r3, [pc, #576]	; (8005ca0 <updateAlarmState+0x24c>)
 8005a60:	785b      	ldrb	r3, [r3, #1]
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d04f      	beq.n	8005b08 <updateAlarmState+0xb4>
 8005a68:	4b8e      	ldr	r3, [pc, #568]	; (8005ca4 <updateAlarmState+0x250>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d04b      	beq.n	8005b08 <updateAlarmState+0xb4>
		updateFace.alarm = 1;
 8005a70:	4b8d      	ldr	r3, [pc, #564]	; (8005ca8 <updateAlarmState+0x254>)
 8005a72:	2201      	movs	r2, #1
 8005a74:	709a      	strb	r2, [r3, #2]

		// change fields up
		switch (alarmVars.fieldBeingSet) {
 8005a76:	4b8b      	ldr	r3, [pc, #556]	; (8005ca4 <updateAlarmState+0x250>)
 8005a78:	785b      	ldrb	r3, [r3, #1]
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d017      	beq.n	8005aae <updateAlarmState+0x5a>
 8005a7e:	dc02      	bgt.n	8005a86 <updateAlarmState+0x32>
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d005      	beq.n	8005a90 <updateAlarmState+0x3c>
			case 1: alarmVars.alarmToSet->sec = (alarmVars.alarmToSet->sec + 1) % 60; break;
			case 2: alarmVars.alarmToSet->min = (alarmVars.alarmToSet->min + 1) % 60; break;
			case 3: alarmVars.alarmToSet->hr = (alarmVars.alarmToSet->hr + 1) % 24; break;
			case 4: alarmVars.alarmToSet->weekday = (alarmVars.alarmToSet->weekday) % 7 + 1; break;
			default: break;
 8005a84:	e041      	b.n	8005b0a <updateAlarmState+0xb6>
		switch (alarmVars.fieldBeingSet) {
 8005a86:	2b03      	cmp	r3, #3
 8005a88:	d020      	beq.n	8005acc <updateAlarmState+0x78>
 8005a8a:	2b04      	cmp	r3, #4
 8005a8c:	d02d      	beq.n	8005aea <updateAlarmState+0x96>
			default: break;
 8005a8e:	e03c      	b.n	8005b0a <updateAlarmState+0xb6>
			case 1: alarmVars.alarmToSet->sec = (alarmVars.alarmToSet->sec + 1) % 60; break;
 8005a90:	4b84      	ldr	r3, [pc, #528]	; (8005ca4 <updateAlarmState+0x250>)
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	789b      	ldrb	r3, [r3, #2]
 8005a96:	3301      	adds	r3, #1
 8005a98:	213c      	movs	r1, #60	; 0x3c
 8005a9a:	0018      	movs	r0, r3
 8005a9c:	f7fa fcac 	bl	80003f8 <__aeabi_idivmod>
 8005aa0:	000b      	movs	r3, r1
 8005aa2:	001a      	movs	r2, r3
 8005aa4:	4b7f      	ldr	r3, [pc, #508]	; (8005ca4 <updateAlarmState+0x250>)
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	b2d2      	uxtb	r2, r2
 8005aaa:	709a      	strb	r2, [r3, #2]
 8005aac:	e02d      	b.n	8005b0a <updateAlarmState+0xb6>
			case 2: alarmVars.alarmToSet->min = (alarmVars.alarmToSet->min + 1) % 60; break;
 8005aae:	4b7d      	ldr	r3, [pc, #500]	; (8005ca4 <updateAlarmState+0x250>)
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	785b      	ldrb	r3, [r3, #1]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	213c      	movs	r1, #60	; 0x3c
 8005ab8:	0018      	movs	r0, r3
 8005aba:	f7fa fc9d 	bl	80003f8 <__aeabi_idivmod>
 8005abe:	000b      	movs	r3, r1
 8005ac0:	001a      	movs	r2, r3
 8005ac2:	4b78      	ldr	r3, [pc, #480]	; (8005ca4 <updateAlarmState+0x250>)
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	b2d2      	uxtb	r2, r2
 8005ac8:	705a      	strb	r2, [r3, #1]
 8005aca:	e01e      	b.n	8005b0a <updateAlarmState+0xb6>
			case 3: alarmVars.alarmToSet->hr = (alarmVars.alarmToSet->hr + 1) % 24; break;
 8005acc:	4b75      	ldr	r3, [pc, #468]	; (8005ca4 <updateAlarmState+0x250>)
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	2118      	movs	r1, #24
 8005ad6:	0018      	movs	r0, r3
 8005ad8:	f7fa fc8e 	bl	80003f8 <__aeabi_idivmod>
 8005adc:	000b      	movs	r3, r1
 8005ade:	001a      	movs	r2, r3
 8005ae0:	4b70      	ldr	r3, [pc, #448]	; (8005ca4 <updateAlarmState+0x250>)
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	b2d2      	uxtb	r2, r2
 8005ae6:	701a      	strb	r2, [r3, #0]
 8005ae8:	e00f      	b.n	8005b0a <updateAlarmState+0xb6>
			case 4: alarmVars.alarmToSet->weekday = (alarmVars.alarmToSet->weekday) % 7 + 1; break;
 8005aea:	4b6e      	ldr	r3, [pc, #440]	; (8005ca4 <updateAlarmState+0x250>)
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	78db      	ldrb	r3, [r3, #3]
 8005af0:	2107      	movs	r1, #7
 8005af2:	0018      	movs	r0, r3
 8005af4:	f7fa fb96 	bl	8000224 <__aeabi_uidivmod>
 8005af8:	000b      	movs	r3, r1
 8005afa:	b2da      	uxtb	r2, r3
 8005afc:	4b69      	ldr	r3, [pc, #420]	; (8005ca4 <updateAlarmState+0x250>)
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	3201      	adds	r2, #1
 8005b02:	b2d2      	uxtb	r2, r2
 8005b04:	70da      	strb	r2, [r3, #3]
 8005b06:	e000      	b.n	8005b0a <updateAlarmState+0xb6>
		}
	}
 8005b08:	46c0      	nop			; (mov r8, r8)
	if (buttons.is3Pressed && alarmVars.isBeingSet) {
 8005b0a:	4b65      	ldr	r3, [pc, #404]	; (8005ca0 <updateAlarmState+0x24c>)
 8005b0c:	789b      	ldrb	r3, [r3, #2]
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d057      	beq.n	8005bc4 <updateAlarmState+0x170>
 8005b14:	4b63      	ldr	r3, [pc, #396]	; (8005ca4 <updateAlarmState+0x250>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d053      	beq.n	8005bc4 <updateAlarmState+0x170>
		updateFace.alarm = 1;
 8005b1c:	4b62      	ldr	r3, [pc, #392]	; (8005ca8 <updateAlarmState+0x254>)
 8005b1e:	2201      	movs	r2, #1
 8005b20:	709a      	strb	r2, [r3, #2]

		// change fields down
		switch (alarmVars.fieldBeingSet) {
 8005b22:	4b60      	ldr	r3, [pc, #384]	; (8005ca4 <updateAlarmState+0x250>)
 8005b24:	785b      	ldrb	r3, [r3, #1]
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d019      	beq.n	8005b5e <updateAlarmState+0x10a>
 8005b2a:	dc02      	bgt.n	8005b32 <updateAlarmState+0xde>
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d005      	beq.n	8005b3c <updateAlarmState+0xe8>
				break;
			case 4:
				if (alarmVars.alarmToSet->weekday == RTC_WEEKDAY_MONDAY) alarmVars.alarmToSet->weekday = RTC_WEEKDAY_SUNDAY;
				else alarmVars.alarmToSet->weekday--;
				break;
			default: break;
 8005b30:	e049      	b.n	8005bc6 <updateAlarmState+0x172>
		switch (alarmVars.fieldBeingSet) {
 8005b32:	2b03      	cmp	r3, #3
 8005b34:	d024      	beq.n	8005b80 <updateAlarmState+0x12c>
 8005b36:	2b04      	cmp	r3, #4
 8005b38:	d033      	beq.n	8005ba2 <updateAlarmState+0x14e>
			default: break;
 8005b3a:	e044      	b.n	8005bc6 <updateAlarmState+0x172>
				if (alarmVars.alarmToSet->sec == 0) alarmVars.alarmToSet->sec = 59;
 8005b3c:	4b59      	ldr	r3, [pc, #356]	; (8005ca4 <updateAlarmState+0x250>)
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	789b      	ldrb	r3, [r3, #2]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d104      	bne.n	8005b50 <updateAlarmState+0xfc>
 8005b46:	4b57      	ldr	r3, [pc, #348]	; (8005ca4 <updateAlarmState+0x250>)
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	223b      	movs	r2, #59	; 0x3b
 8005b4c:	709a      	strb	r2, [r3, #2]
				break;
 8005b4e:	e03a      	b.n	8005bc6 <updateAlarmState+0x172>
				else alarmVars.alarmToSet->sec--;
 8005b50:	4b54      	ldr	r3, [pc, #336]	; (8005ca4 <updateAlarmState+0x250>)
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	789a      	ldrb	r2, [r3, #2]
 8005b56:	3a01      	subs	r2, #1
 8005b58:	b2d2      	uxtb	r2, r2
 8005b5a:	709a      	strb	r2, [r3, #2]
				break;
 8005b5c:	e033      	b.n	8005bc6 <updateAlarmState+0x172>
				if (alarmVars.alarmToSet->min == 0) alarmVars.alarmToSet->min = 59;
 8005b5e:	4b51      	ldr	r3, [pc, #324]	; (8005ca4 <updateAlarmState+0x250>)
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	785b      	ldrb	r3, [r3, #1]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d104      	bne.n	8005b72 <updateAlarmState+0x11e>
 8005b68:	4b4e      	ldr	r3, [pc, #312]	; (8005ca4 <updateAlarmState+0x250>)
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	223b      	movs	r2, #59	; 0x3b
 8005b6e:	705a      	strb	r2, [r3, #1]
				break;
 8005b70:	e029      	b.n	8005bc6 <updateAlarmState+0x172>
				else alarmVars.alarmToSet->min--;
 8005b72:	4b4c      	ldr	r3, [pc, #304]	; (8005ca4 <updateAlarmState+0x250>)
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	785a      	ldrb	r2, [r3, #1]
 8005b78:	3a01      	subs	r2, #1
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	705a      	strb	r2, [r3, #1]
				break;
 8005b7e:	e022      	b.n	8005bc6 <updateAlarmState+0x172>
				if (alarmVars.alarmToSet->hr == 0) alarmVars.alarmToSet->hr = 23;
 8005b80:	4b48      	ldr	r3, [pc, #288]	; (8005ca4 <updateAlarmState+0x250>)
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d104      	bne.n	8005b94 <updateAlarmState+0x140>
 8005b8a:	4b46      	ldr	r3, [pc, #280]	; (8005ca4 <updateAlarmState+0x250>)
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	2217      	movs	r2, #23
 8005b90:	701a      	strb	r2, [r3, #0]
				break;
 8005b92:	e018      	b.n	8005bc6 <updateAlarmState+0x172>
				else alarmVars.alarmToSet->hr--;
 8005b94:	4b43      	ldr	r3, [pc, #268]	; (8005ca4 <updateAlarmState+0x250>)
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	781a      	ldrb	r2, [r3, #0]
 8005b9a:	3a01      	subs	r2, #1
 8005b9c:	b2d2      	uxtb	r2, r2
 8005b9e:	701a      	strb	r2, [r3, #0]
				break;
 8005ba0:	e011      	b.n	8005bc6 <updateAlarmState+0x172>
				if (alarmVars.alarmToSet->weekday == RTC_WEEKDAY_MONDAY) alarmVars.alarmToSet->weekday = RTC_WEEKDAY_SUNDAY;
 8005ba2:	4b40      	ldr	r3, [pc, #256]	; (8005ca4 <updateAlarmState+0x250>)
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	78db      	ldrb	r3, [r3, #3]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d104      	bne.n	8005bb6 <updateAlarmState+0x162>
 8005bac:	4b3d      	ldr	r3, [pc, #244]	; (8005ca4 <updateAlarmState+0x250>)
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	2207      	movs	r2, #7
 8005bb2:	70da      	strb	r2, [r3, #3]
				break;
 8005bb4:	e007      	b.n	8005bc6 <updateAlarmState+0x172>
				else alarmVars.alarmToSet->weekday--;
 8005bb6:	4b3b      	ldr	r3, [pc, #236]	; (8005ca4 <updateAlarmState+0x250>)
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	78da      	ldrb	r2, [r3, #3]
 8005bbc:	3a01      	subs	r2, #1
 8005bbe:	b2d2      	uxtb	r2, r2
 8005bc0:	70da      	strb	r2, [r3, #3]
				break;
 8005bc2:	e000      	b.n	8005bc6 <updateAlarmState+0x172>
		}
	}
 8005bc4:	46c0      	nop			; (mov r8, r8)
	if (buttons.is4Pressed) {
 8005bc6:	4b36      	ldr	r3, [pc, #216]	; (8005ca0 <updateAlarmState+0x24c>)
 8005bc8:	78db      	ldrb	r3, [r3, #3]
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d062      	beq.n	8005c96 <updateAlarmState+0x242>
		updateFace.alarm = 1;
 8005bd0:	4b35      	ldr	r3, [pc, #212]	; (8005ca8 <updateAlarmState+0x254>)
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	709a      	strb	r2, [r3, #2]

		if (alarmVars.isSet == 0) {
 8005bd6:	4b33      	ldr	r3, [pc, #204]	; (8005ca4 <updateAlarmState+0x250>)
 8005bd8:	789b      	ldrb	r3, [r3, #2]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d151      	bne.n	8005c82 <updateAlarmState+0x22e>
			// toggle between fields
			alarmVars.fieldBeingSet = (alarmVars.fieldBeingSet + 1) % (NUM_ALARMFIELDS + 1);
 8005bde:	4b31      	ldr	r3, [pc, #196]	; (8005ca4 <updateAlarmState+0x250>)
 8005be0:	785b      	ldrb	r3, [r3, #1]
 8005be2:	3301      	adds	r3, #1
 8005be4:	2105      	movs	r1, #5
 8005be6:	0018      	movs	r0, r3
 8005be8:	f7fa fc06 	bl	80003f8 <__aeabi_idivmod>
 8005bec:	000b      	movs	r3, r1
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	4b2c      	ldr	r3, [pc, #176]	; (8005ca4 <updateAlarmState+0x250>)
 8005bf2:	705a      	strb	r2, [r3, #1]
			if (alarmVars.fieldBeingSet != 0) {
 8005bf4:	4b2b      	ldr	r3, [pc, #172]	; (8005ca4 <updateAlarmState+0x250>)
 8005bf6:	785b      	ldrb	r3, [r3, #1]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d034      	beq.n	8005c66 <updateAlarmState+0x212>
				alarmVars.isBeingSet = 1;
 8005bfc:	4b29      	ldr	r3, [pc, #164]	; (8005ca4 <updateAlarmState+0x250>)
 8005bfe:	2201      	movs	r2, #1
 8005c00:	701a      	strb	r2, [r3, #0]
				if (alarmVars.fieldBeingSet == 1) {
 8005c02:	4b28      	ldr	r3, [pc, #160]	; (8005ca4 <updateAlarmState+0x250>)
 8005c04:	785b      	ldrb	r3, [r3, #1]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d145      	bne.n	8005c96 <updateAlarmState+0x242>
					struct dates d = {0};
 8005c0a:	2510      	movs	r5, #16
 8005c0c:	197b      	adds	r3, r7, r5
 8005c0e:	0018      	movs	r0, r3
 8005c10:	2306      	movs	r3, #6
 8005c12:	001a      	movs	r2, r3
 8005c14:	2100      	movs	r1, #0
 8005c16:	f005 faa0 	bl	800b15a <memset>
					struct times t = {0};
 8005c1a:	240c      	movs	r4, #12
 8005c1c:	193b      	adds	r3, r7, r4
 8005c1e:	0018      	movs	r0, r3
 8005c20:	2303      	movs	r3, #3
 8005c22:	001a      	movs	r2, r3
 8005c24:	2100      	movs	r1, #0
 8005c26:	f005 fa98 	bl	800b15a <memset>
					getDateTime(&d, &t, hrtc);
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	0021      	movs	r1, r4
 8005c2e:	000c      	movs	r4, r1
 8005c30:	1879      	adds	r1, r7, r1
 8005c32:	197b      	adds	r3, r7, r5
 8005c34:	0018      	movs	r0, r3
 8005c36:	f7fd fd61 	bl	80036fc <getDateTime>
					alarmVars.alarmToSet->sec = t.sec;
 8005c3a:	4b1a      	ldr	r3, [pc, #104]	; (8005ca4 <updateAlarmState+0x250>)
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	0021      	movs	r1, r4
 8005c40:	187a      	adds	r2, r7, r1
 8005c42:	7892      	ldrb	r2, [r2, #2]
 8005c44:	709a      	strb	r2, [r3, #2]
					alarmVars.alarmToSet->min = t.min;
 8005c46:	4b17      	ldr	r3, [pc, #92]	; (8005ca4 <updateAlarmState+0x250>)
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	187a      	adds	r2, r7, r1
 8005c4c:	7852      	ldrb	r2, [r2, #1]
 8005c4e:	705a      	strb	r2, [r3, #1]
					alarmVars.alarmToSet->hr = t.hr;
 8005c50:	4b14      	ldr	r3, [pc, #80]	; (8005ca4 <updateAlarmState+0x250>)
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	187a      	adds	r2, r7, r1
 8005c56:	7812      	ldrb	r2, [r2, #0]
 8005c58:	701a      	strb	r2, [r3, #0]
					alarmVars.alarmToSet->weekday = d.weekday;
 8005c5a:	4b12      	ldr	r3, [pc, #72]	; (8005ca4 <updateAlarmState+0x250>)
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	197a      	adds	r2, r7, r5
 8005c60:	7912      	ldrb	r2, [r2, #4]
 8005c62:	70da      	strb	r2, [r3, #3]
			// stop and clear alarm hw
			alarmVars.isSet = 0;
			HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);
		}
	}
}
 8005c64:	e017      	b.n	8005c96 <updateAlarmState+0x242>
				alarmVars.isBeingSet = 0;
 8005c66:	4b0f      	ldr	r3, [pc, #60]	; (8005ca4 <updateAlarmState+0x250>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	701a      	strb	r2, [r3, #0]
				alarmVars.isSet = 1;
 8005c6c:	4b0d      	ldr	r3, [pc, #52]	; (8005ca4 <updateAlarmState+0x250>)
 8005c6e:	2201      	movs	r2, #1
 8005c70:	709a      	strb	r2, [r3, #2]
				setAlarm(alarmVars.alarmToSet, hrtc);
 8005c72:	4b0c      	ldr	r3, [pc, #48]	; (8005ca4 <updateAlarmState+0x250>)
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	0011      	movs	r1, r2
 8005c7a:	0018      	movs	r0, r3
 8005c7c:	f7fd fbac 	bl	80033d8 <setAlarm>
}
 8005c80:	e009      	b.n	8005c96 <updateAlarmState+0x242>
			alarmVars.isSet = 0;
 8005c82:	4b08      	ldr	r3, [pc, #32]	; (8005ca4 <updateAlarmState+0x250>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	709a      	strb	r2, [r3, #2]
			HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);
 8005c88:	2380      	movs	r3, #128	; 0x80
 8005c8a:	005a      	lsls	r2, r3, #1
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	0011      	movs	r1, r2
 8005c90:	0018      	movs	r0, r3
 8005c92:	f003 fbd9 	bl	8009448 <HAL_RTC_DeactivateAlarm>
}
 8005c96:	46c0      	nop			; (mov r8, r8)
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	b006      	add	sp, #24
 8005c9c:	bdb0      	pop	{r4, r5, r7, pc}
 8005c9e:	46c0      	nop			; (mov r8, r8)
 8005ca0:	2000018c 	.word	0x2000018c
 8005ca4:	20000120 	.word	0x20000120
 8005ca8:	20000140 	.word	0x20000140

08005cac <updateStopwatchState>:
 * in not running mode:
 *   button 2 starts stopwatch and moves to running mode
 *   button 3 captures stopwatch for lap
 *   button 4 clears stopwatch and returns to default mode
 */
void updateStopwatchState(TIM_HandleTypeDef *timerStopwatchTim) {
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
	// start/stop
	if (buttons.is2Pressed) {
 8005cb4:	4b28      	ldr	r3, [pc, #160]	; (8005d58 <updateStopwatchState+0xac>)
 8005cb6:	785b      	ldrb	r3, [r3, #1]
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d01c      	beq.n	8005cf8 <updateStopwatchState+0x4c>
		updateFace.stopwatch = 1;
 8005cbe:	4b27      	ldr	r3, [pc, #156]	; (8005d5c <updateStopwatchState+0xb0>)
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	70da      	strb	r2, [r3, #3]

		if (isStopwatchRunning == 0) {
 8005cc4:	4b26      	ldr	r3, [pc, #152]	; (8005d60 <updateStopwatchState+0xb4>)
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10a      	bne.n	8005ce4 <updateStopwatchState+0x38>
			runStopwatch(timerStopwatchTim);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	f7ff f8d1 	bl	8004e78 <runStopwatch>
			isStopwatchRunning = 1;
 8005cd6:	4b22      	ldr	r3, [pc, #136]	; (8005d60 <updateStopwatchState+0xb4>)
 8005cd8:	2201      	movs	r2, #1
 8005cda:	701a      	strb	r2, [r3, #0]
			isStopwatchPaused = 0;
 8005cdc:	4b21      	ldr	r3, [pc, #132]	; (8005d64 <updateStopwatchState+0xb8>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	701a      	strb	r2, [r3, #0]
 8005ce2:	e009      	b.n	8005cf8 <updateStopwatchState+0x4c>
		}
		else {
			pauseStopwatch(timerStopwatchTim);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	0018      	movs	r0, r3
 8005ce8:	f7ff f92c 	bl	8004f44 <pauseStopwatch>
			isStopwatchRunning = 0;
 8005cec:	4b1c      	ldr	r3, [pc, #112]	; (8005d60 <updateStopwatchState+0xb4>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	701a      	strb	r2, [r3, #0]
			isStopwatchPaused = 1;
 8005cf2:	4b1c      	ldr	r3, [pc, #112]	; (8005d64 <updateStopwatchState+0xb8>)
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	701a      	strb	r2, [r3, #0]
		}
	}
	if (buttons.is3Pressed && stopwatchCounter != 0) {
 8005cf8:	4b17      	ldr	r3, [pc, #92]	; (8005d58 <updateStopwatchState+0xac>)
 8005cfa:	789b      	ldrb	r3, [r3, #2]
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00e      	beq.n	8005d20 <updateStopwatchState+0x74>
 8005d02:	4b19      	ldr	r3, [pc, #100]	; (8005d68 <updateStopwatchState+0xbc>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00a      	beq.n	8005d20 <updateStopwatchState+0x74>
		updateFace.stopwatch = 1;
 8005d0a:	4b14      	ldr	r3, [pc, #80]	; (8005d5c <updateStopwatchState+0xb0>)
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	70da      	strb	r2, [r3, #3]

		// pull data and set lap
		stopwatchVars.lapPrev = stopwatchVars.lapCurrent;
 8005d10:	4b16      	ldr	r3, [pc, #88]	; (8005d6c <updateStopwatchState+0xc0>)
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	4b15      	ldr	r3, [pc, #84]	; (8005d6c <updateStopwatchState+0xc0>)
 8005d16:	601a      	str	r2, [r3, #0]
		stopwatchVars.lapCurrent = stopwatchCounter;
 8005d18:	4b13      	ldr	r3, [pc, #76]	; (8005d68 <updateStopwatchState+0xbc>)
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	4b13      	ldr	r3, [pc, #76]	; (8005d6c <updateStopwatchState+0xc0>)
 8005d1e:	605a      	str	r2, [r3, #4]
	}
	if (buttons.is4Pressed) {
 8005d20:	4b0d      	ldr	r3, [pc, #52]	; (8005d58 <updateStopwatchState+0xac>)
 8005d22:	78db      	ldrb	r3, [r3, #3]
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d012      	beq.n	8005d50 <updateStopwatchState+0xa4>
		updateFace.stopwatch = 1;
 8005d2a:	4b0c      	ldr	r3, [pc, #48]	; (8005d5c <updateStopwatchState+0xb0>)
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	70da      	strb	r2, [r3, #3]

		// clear stopwatch hw
		clearStopwatch(timerStopwatchTim);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	0018      	movs	r0, r3
 8005d34:	f7ff f91a 	bl	8004f6c <clearStopwatch>
		stopwatchVars.lapCurrent = 0;
 8005d38:	4b0c      	ldr	r3, [pc, #48]	; (8005d6c <updateStopwatchState+0xc0>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	605a      	str	r2, [r3, #4]
		stopwatchVars.lapPrev = 0;
 8005d3e:	4b0b      	ldr	r3, [pc, #44]	; (8005d6c <updateStopwatchState+0xc0>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	601a      	str	r2, [r3, #0]
		isStopwatchRunning = 0;
 8005d44:	4b06      	ldr	r3, [pc, #24]	; (8005d60 <updateStopwatchState+0xb4>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	701a      	strb	r2, [r3, #0]
		isStopwatchPaused = 0;
 8005d4a:	4b06      	ldr	r3, [pc, #24]	; (8005d64 <updateStopwatchState+0xb8>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	701a      	strb	r2, [r3, #0]
	}
}
 8005d50:	46c0      	nop			; (mov r8, r8)
 8005d52:	46bd      	mov	sp, r7
 8005d54:	b002      	add	sp, #8
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	2000018c 	.word	0x2000018c
 8005d5c:	20000140 	.word	0x20000140
 8005d60:	20000144 	.word	0x20000144
 8005d64:	20000191 	.word	0x20000191
 8005d68:	20000194 	.word	0x20000194
 8005d6c:	20000128 	.word	0x20000128

08005d70 <updateDisplay>:

// primary function for making changes to display
void updateDisplay(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
	// change faces
	if (isFaceBeingChanged == 1) {
 8005d7a:	4b56      	ldr	r3, [pc, #344]	; (8005ed4 <updateDisplay+0x164>)
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d14e      	bne.n	8005e20 <updateDisplay+0xb0>
		isFaceBeingChanged = 0;
 8005d82:	4b54      	ldr	r3, [pc, #336]	; (8005ed4 <updateDisplay+0x164>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	701a      	strb	r2, [r3, #0]

		// drawing titles and boxes that won't be rewritten during normal operation within
		// a specific face (titles and buttons)
		if (faceOnDisplay == faceClock) {
 8005d88:	4b53      	ldr	r3, [pc, #332]	; (8005ed8 <updateDisplay+0x168>)
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10b      	bne.n	8005da8 <updateDisplay+0x38>
			clearScreen(ST77XX_CYAN, hspi);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	4a52      	ldr	r2, [pc, #328]	; (8005edc <updateDisplay+0x16c>)
 8005d94:	0019      	movs	r1, r3
 8005d96:	0010      	movs	r0, r2
 8005d98:	f7fc fbbc 	bl	8002514 <clearScreen>
			drawTitle("clock", hspi);
 8005d9c:	683a      	ldr	r2, [r7, #0]
 8005d9e:	4b50      	ldr	r3, [pc, #320]	; (8005ee0 <updateDisplay+0x170>)
 8005da0:	0011      	movs	r1, r2
 8005da2:	0018      	movs	r0, r3
 8005da4:	f000 fbea 	bl	800657c <drawTitle>
		}
		if (faceOnDisplay == faceTimer) {
 8005da8:	4b4b      	ldr	r3, [pc, #300]	; (8005ed8 <updateDisplay+0x168>)
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d10c      	bne.n	8005dca <updateDisplay+0x5a>
			clearScreen(ST77XX_GREEN, hspi);
 8005db0:	683a      	ldr	r2, [r7, #0]
 8005db2:	23fc      	movs	r3, #252	; 0xfc
 8005db4:	00db      	lsls	r3, r3, #3
 8005db6:	0011      	movs	r1, r2
 8005db8:	0018      	movs	r0, r3
 8005dba:	f7fc fbab 	bl	8002514 <clearScreen>
			drawTitle("timer", hspi);
 8005dbe:	683a      	ldr	r2, [r7, #0]
 8005dc0:	4b48      	ldr	r3, [pc, #288]	; (8005ee4 <updateDisplay+0x174>)
 8005dc2:	0011      	movs	r1, r2
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	f000 fbd9 	bl	800657c <drawTitle>
		}
		if (faceOnDisplay == faceAlarm) {
 8005dca:	4b43      	ldr	r3, [pc, #268]	; (8005ed8 <updateDisplay+0x168>)
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d10b      	bne.n	8005dea <updateDisplay+0x7a>
			clearScreen(ST77XX_MAGENTA, hspi);
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	4a44      	ldr	r2, [pc, #272]	; (8005ee8 <updateDisplay+0x178>)
 8005dd6:	0019      	movs	r1, r3
 8005dd8:	0010      	movs	r0, r2
 8005dda:	f7fc fb9b 	bl	8002514 <clearScreen>
			drawTitle("alarm", hspi);
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	4b42      	ldr	r3, [pc, #264]	; (8005eec <updateDisplay+0x17c>)
 8005de2:	0011      	movs	r1, r2
 8005de4:	0018      	movs	r0, r3
 8005de6:	f000 fbc9 	bl	800657c <drawTitle>
		}
		if (faceOnDisplay == faceStopwatch) {
 8005dea:	4b3b      	ldr	r3, [pc, #236]	; (8005ed8 <updateDisplay+0x168>)
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	2b03      	cmp	r3, #3
 8005df0:	d10b      	bne.n	8005e0a <updateDisplay+0x9a>
			clearScreen(ST77XX_YELLOW, hspi);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	4a3e      	ldr	r2, [pc, #248]	; (8005ef0 <updateDisplay+0x180>)
 8005df6:	0019      	movs	r1, r3
 8005df8:	0010      	movs	r0, r2
 8005dfa:	f7fc fb8b 	bl	8002514 <clearScreen>
			drawTitle("stopwatch", hspi);
 8005dfe:	683a      	ldr	r2, [r7, #0]
 8005e00:	4b3c      	ldr	r3, [pc, #240]	; (8005ef4 <updateDisplay+0x184>)
 8005e02:	0011      	movs	r1, r2
 8005e04:	0018      	movs	r0, r3
 8005e06:	f000 fbb9 	bl	800657c <drawTitle>
		}

		drawBattery(battPercentage, hspi);
 8005e0a:	4b3b      	ldr	r3, [pc, #236]	; (8005ef8 <updateDisplay+0x188>)
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	683a      	ldr	r2, [r7, #0]
 8005e10:	0011      	movs	r1, r2
 8005e12:	0018      	movs	r0, r3
 8005e14:	f000 fc26 	bl	8006664 <drawBattery>
		drawButtons(hspi);
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	0018      	movs	r0, r3
 8005e1c:	f000 fb68 	bl	80064f0 <drawButtons>
	}

	// update clock face
	if (faceOnDisplay == faceClock) {
 8005e20:	4b2d      	ldr	r3, [pc, #180]	; (8005ed8 <updateDisplay+0x168>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d112      	bne.n	8005e4e <updateDisplay+0xde>
		if (updateFace.clock == 1) {
 8005e28:	4b34      	ldr	r3, [pc, #208]	; (8005efc <updateDisplay+0x18c>)
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d14c      	bne.n	8005ecc <updateDisplay+0x15c>
			updateFace.clock = 0;
 8005e32:	4b32      	ldr	r3, [pc, #200]	; (8005efc <updateDisplay+0x18c>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	701a      	strb	r2, [r3, #0]
			setBackgroundColor(ST77XX_CYAN);
 8005e38:	4b28      	ldr	r3, [pc, #160]	; (8005edc <updateDisplay+0x16c>)
 8005e3a:	0018      	movs	r0, r3
 8005e3c:	f7fd f8aa 	bl	8002f94 <setBackgroundColor>
			updateClockDisplay(hrtc, hspi);
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	0011      	movs	r1, r2
 8005e46:	0018      	movs	r0, r3
 8005e48:	f000 f85a 	bl	8005f00 <updateClockDisplay>
			updateFace.stopwatch = 0;
			setBackgroundColor(ST77XX_YELLOW);
			updateStopwatchDisplay(hspi);
		}
	}
}
 8005e4c:	e03e      	b.n	8005ecc <updateDisplay+0x15c>
	else if (faceOnDisplay == faceTimer) {
 8005e4e:	4b22      	ldr	r3, [pc, #136]	; (8005ed8 <updateDisplay+0x168>)
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d111      	bne.n	8005e7a <updateDisplay+0x10a>
		if (updateFace.timer == 1) {
 8005e56:	4b29      	ldr	r3, [pc, #164]	; (8005efc <updateDisplay+0x18c>)
 8005e58:	785b      	ldrb	r3, [r3, #1]
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d135      	bne.n	8005ecc <updateDisplay+0x15c>
			updateFace.timer = 0;
 8005e60:	4b26      	ldr	r3, [pc, #152]	; (8005efc <updateDisplay+0x18c>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	705a      	strb	r2, [r3, #1]
			setBackgroundColor(ST77XX_GREEN);
 8005e66:	23fc      	movs	r3, #252	; 0xfc
 8005e68:	00db      	lsls	r3, r3, #3
 8005e6a:	0018      	movs	r0, r3
 8005e6c:	f7fd f892 	bl	8002f94 <setBackgroundColor>
			updateTimerDisplay(hspi);
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	0018      	movs	r0, r3
 8005e74:	f000 f8ee 	bl	8006054 <updateTimerDisplay>
}
 8005e78:	e028      	b.n	8005ecc <updateDisplay+0x15c>
	else if (faceOnDisplay == faceAlarm) {
 8005e7a:	4b17      	ldr	r3, [pc, #92]	; (8005ed8 <updateDisplay+0x168>)
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d110      	bne.n	8005ea4 <updateDisplay+0x134>
		if (updateFace.alarm == 1) {
 8005e82:	4b1e      	ldr	r3, [pc, #120]	; (8005efc <updateDisplay+0x18c>)
 8005e84:	789b      	ldrb	r3, [r3, #2]
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d11f      	bne.n	8005ecc <updateDisplay+0x15c>
			updateFace.alarm = 0;
 8005e8c:	4b1b      	ldr	r3, [pc, #108]	; (8005efc <updateDisplay+0x18c>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	709a      	strb	r2, [r3, #2]
			setBackgroundColor(ST77XX_MAGENTA);
 8005e92:	4b15      	ldr	r3, [pc, #84]	; (8005ee8 <updateDisplay+0x178>)
 8005e94:	0018      	movs	r0, r3
 8005e96:	f7fd f87d 	bl	8002f94 <setBackgroundColor>
			updateAlarmDisplay(hspi);
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	0018      	movs	r0, r3
 8005e9e:	f000 f9d9 	bl	8006254 <updateAlarmDisplay>
}
 8005ea2:	e013      	b.n	8005ecc <updateDisplay+0x15c>
	else if (faceOnDisplay == faceStopwatch) {
 8005ea4:	4b0c      	ldr	r3, [pc, #48]	; (8005ed8 <updateDisplay+0x168>)
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	2b03      	cmp	r3, #3
 8005eaa:	d10f      	bne.n	8005ecc <updateDisplay+0x15c>
		if (updateFace.stopwatch == 1) {
 8005eac:	4b13      	ldr	r3, [pc, #76]	; (8005efc <updateDisplay+0x18c>)
 8005eae:	78db      	ldrb	r3, [r3, #3]
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d10a      	bne.n	8005ecc <updateDisplay+0x15c>
			updateFace.stopwatch = 0;
 8005eb6:	4b11      	ldr	r3, [pc, #68]	; (8005efc <updateDisplay+0x18c>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	70da      	strb	r2, [r3, #3]
			setBackgroundColor(ST77XX_YELLOW);
 8005ebc:	4b0c      	ldr	r3, [pc, #48]	; (8005ef0 <updateDisplay+0x180>)
 8005ebe:	0018      	movs	r0, r3
 8005ec0:	f7fd f868 	bl	8002f94 <setBackgroundColor>
			updateStopwatchDisplay(hspi);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	0018      	movs	r0, r3
 8005ec8:	f000 fa8a 	bl	80063e0 <updateStopwatchDisplay>
}
 8005ecc:	46c0      	nop			; (mov r8, r8)
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	b002      	add	sp, #8
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	20000068 	.word	0x20000068
 8005ed8:	20000130 	.word	0x20000130
 8005edc:	000007ff 	.word	0x000007ff
 8005ee0:	0800ba8c 	.word	0x0800ba8c
 8005ee4:	0800ba94 	.word	0x0800ba94
 8005ee8:	0000f81f 	.word	0x0000f81f
 8005eec:	0800ba9c 	.word	0x0800ba9c
 8005ef0:	0000ffe0 	.word	0x0000ffe0
 8005ef4:	0800baa4 	.word	0x0800baa4
 8005ef8:	2000013c 	.word	0x2000013c
 8005efc:	20000140 	.word	0x20000140

08005f00 <updateClockDisplay>:

// helper function for drawing all elements for clock display
void updateClockDisplay(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 8005f00:	b5b0      	push	{r4, r5, r7, lr}
 8005f02:	b088      	sub	sp, #32
 8005f04:	af02      	add	r7, sp, #8
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
	struct dates currentDate = {0};
 8005f0a:	2310      	movs	r3, #16
 8005f0c:	18fb      	adds	r3, r7, r3
 8005f0e:	0018      	movs	r0, r3
 8005f10:	2306      	movs	r3, #6
 8005f12:	001a      	movs	r2, r3
 8005f14:	2100      	movs	r1, #0
 8005f16:	f005 f920 	bl	800b15a <memset>
	struct times currentTime = {0};
 8005f1a:	230c      	movs	r3, #12
 8005f1c:	18fb      	adds	r3, r7, r3
 8005f1e:	0018      	movs	r0, r3
 8005f20:	2303      	movs	r3, #3
 8005f22:	001a      	movs	r2, r3
 8005f24:	2100      	movs	r1, #0
 8005f26:	f005 f918 	bl	800b15a <memset>

	setTextColor(ST77XX_BLACK);
 8005f2a:	2000      	movs	r0, #0
 8005f2c:	f7fd f86c 	bl	8003008 <setTextColor>
	if (clockVars.isBeingSet == 0) {
 8005f30:	4b3c      	ldr	r3, [pc, #240]	; (8006024 <updateClockDisplay+0x124>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d11c      	bne.n	8005f72 <updateClockDisplay+0x72>
		getDateTime(&currentDate, &currentTime, hrtc);
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	240c      	movs	r4, #12
 8005f3c:	1939      	adds	r1, r7, r4
 8005f3e:	2510      	movs	r5, #16
 8005f40:	197b      	adds	r3, r7, r5
 8005f42:	0018      	movs	r0, r3
 8005f44:	f7fd fbda 	bl	80036fc <getDateTime>
		drawClock(&currentDate, &currentTime, hspi);
 8005f48:	683a      	ldr	r2, [r7, #0]
 8005f4a:	1939      	adds	r1, r7, r4
 8005f4c:	197b      	adds	r3, r7, r5
 8005f4e:	0018      	movs	r0, r3
 8005f50:	f000 fc22 	bl	8006798 <drawClock>

		setTextSize(1);
 8005f54:	2001      	movs	r0, #1
 8005f56:	f7fd f847 	bl	8002fe8 <setTextSize>
		// clear line that says "setting ___"
		clearTextLine(44, hspi);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	0019      	movs	r1, r3
 8005f5e:	202c      	movs	r0, #44	; 0x2c
 8005f60:	f7fc fff8 	bl	8002f54 <clearTextLine>

		// draw button text
		drawButtonText("", "", "set", hspi);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	4a30      	ldr	r2, [pc, #192]	; (8006028 <updateClockDisplay+0x128>)
 8005f68:	4930      	ldr	r1, [pc, #192]	; (800602c <updateClockDisplay+0x12c>)
 8005f6a:	4830      	ldr	r0, [pc, #192]	; (800602c <updateClockDisplay+0x12c>)
 8005f6c:	f000 fada 	bl	8006524 <drawButtonText>
			default: break;
		}

		drawClock(clockVars.dateToSet, clockVars.timeToSet, hspi);
	}
}
 8005f70:	e054      	b.n	800601c <updateClockDisplay+0x11c>
	else if (clockVars.isBeingSet == 1) {
 8005f72:	4b2c      	ldr	r3, [pc, #176]	; (8006024 <updateClockDisplay+0x124>)
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d150      	bne.n	800601c <updateClockDisplay+0x11c>
		if (clockVars.fieldBeingSet == 1) drawButtonText("up", "down", "change", hspi);
 8005f7a:	4b2a      	ldr	r3, [pc, #168]	; (8006024 <updateClockDisplay+0x124>)
 8005f7c:	785b      	ldrb	r3, [r3, #1]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d105      	bne.n	8005f8e <updateClockDisplay+0x8e>
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	4a2a      	ldr	r2, [pc, #168]	; (8006030 <updateClockDisplay+0x130>)
 8005f86:	492b      	ldr	r1, [pc, #172]	; (8006034 <updateClockDisplay+0x134>)
 8005f88:	482b      	ldr	r0, [pc, #172]	; (8006038 <updateClockDisplay+0x138>)
 8005f8a:	f000 facb 	bl	8006524 <drawButtonText>
		setTextSize(1);
 8005f8e:	2001      	movs	r0, #1
 8005f90:	f7fd f82a 	bl	8002fe8 <setTextSize>
		switch (clockVars.fieldBeingSet) {
 8005f94:	4b23      	ldr	r3, [pc, #140]	; (8006024 <updateClockDisplay+0x124>)
 8005f96:	785b      	ldrb	r3, [r3, #1]
 8005f98:	2b05      	cmp	r3, #5
 8005f9a:	d836      	bhi.n	800600a <updateClockDisplay+0x10a>
 8005f9c:	009a      	lsls	r2, r3, #2
 8005f9e:	4b27      	ldr	r3, [pc, #156]	; (800603c <updateClockDisplay+0x13c>)
 8005fa0:	18d3      	adds	r3, r2, r3
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	469f      	mov	pc, r3
			case 1:	drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting minute...", hspi); break;
 8005fa6:	4a26      	ldr	r2, [pc, #152]	; (8006040 <updateClockDisplay+0x140>)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	0013      	movs	r3, r2
 8005fae:	2211      	movs	r2, #17
 8005fb0:	212c      	movs	r1, #44	; 0x2c
 8005fb2:	2040      	movs	r0, #64	; 0x40
 8005fb4:	f7fc fef6 	bl	8002da4 <drawCenteredTextWithPadding>
 8005fb8:	e028      	b.n	800600c <updateClockDisplay+0x10c>
			case 2:	drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting hour...", hspi);	break;
 8005fba:	4a22      	ldr	r2, [pc, #136]	; (8006044 <updateClockDisplay+0x144>)
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	0013      	movs	r3, r2
 8005fc2:	2211      	movs	r2, #17
 8005fc4:	212c      	movs	r1, #44	; 0x2c
 8005fc6:	2040      	movs	r0, #64	; 0x40
 8005fc8:	f7fc feec 	bl	8002da4 <drawCenteredTextWithPadding>
 8005fcc:	e01e      	b.n	800600c <updateClockDisplay+0x10c>
			case 3: drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting year...", hspi); break;
 8005fce:	4a1e      	ldr	r2, [pc, #120]	; (8006048 <updateClockDisplay+0x148>)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	0013      	movs	r3, r2
 8005fd6:	2211      	movs	r2, #17
 8005fd8:	212c      	movs	r1, #44	; 0x2c
 8005fda:	2040      	movs	r0, #64	; 0x40
 8005fdc:	f7fc fee2 	bl	8002da4 <drawCenteredTextWithPadding>
 8005fe0:	e014      	b.n	800600c <updateClockDisplay+0x10c>
			case 4: drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting month...", hspi); break;
 8005fe2:	4a1a      	ldr	r2, [pc, #104]	; (800604c <updateClockDisplay+0x14c>)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	0013      	movs	r3, r2
 8005fea:	2211      	movs	r2, #17
 8005fec:	212c      	movs	r1, #44	; 0x2c
 8005fee:	2040      	movs	r0, #64	; 0x40
 8005ff0:	f7fc fed8 	bl	8002da4 <drawCenteredTextWithPadding>
 8005ff4:	e00a      	b.n	800600c <updateClockDisplay+0x10c>
			case 5: drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting date...", hspi); break;
 8005ff6:	4a16      	ldr	r2, [pc, #88]	; (8006050 <updateClockDisplay+0x150>)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	0013      	movs	r3, r2
 8005ffe:	2211      	movs	r2, #17
 8006000:	212c      	movs	r1, #44	; 0x2c
 8006002:	2040      	movs	r0, #64	; 0x40
 8006004:	f7fc fece 	bl	8002da4 <drawCenteredTextWithPadding>
 8006008:	e000      	b.n	800600c <updateClockDisplay+0x10c>
			default: break;
 800600a:	46c0      	nop			; (mov r8, r8)
		drawClock(clockVars.dateToSet, clockVars.timeToSet, hspi);
 800600c:	4b05      	ldr	r3, [pc, #20]	; (8006024 <updateClockDisplay+0x124>)
 800600e:	6858      	ldr	r0, [r3, #4]
 8006010:	4b04      	ldr	r3, [pc, #16]	; (8006024 <updateClockDisplay+0x124>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	683a      	ldr	r2, [r7, #0]
 8006016:	0019      	movs	r1, r3
 8006018:	f000 fbbe 	bl	8006798 <drawClock>
}
 800601c:	46c0      	nop			; (mov r8, r8)
 800601e:	46bd      	mov	sp, r7
 8006020:	b006      	add	sp, #24
 8006022:	bdb0      	pop	{r4, r5, r7, pc}
 8006024:	2000010c 	.word	0x2000010c
 8006028:	0800bab0 	.word	0x0800bab0
 800602c:	0800ba10 	.word	0x0800ba10
 8006030:	0800bab4 	.word	0x0800bab4
 8006034:	0800babc 	.word	0x0800babc
 8006038:	0800bac4 	.word	0x0800bac4
 800603c:	0800c5b0 	.word	0x0800c5b0
 8006040:	0800bac8 	.word	0x0800bac8
 8006044:	0800badc 	.word	0x0800badc
 8006048:	0800baec 	.word	0x0800baec
 800604c:	0800bafc 	.word	0x0800bafc
 8006050:	0800bb10 	.word	0x0800bb10

08006054 <updateTimerDisplay>:

// helper function for drawing all elements for timer display
void updateTimerDisplay(SPI_HandleTypeDef *hspi) {
 8006054:	b590      	push	{r4, r7, lr}
 8006056:	b087      	sub	sp, #28
 8006058:	af02      	add	r7, sp, #8
 800605a:	6078      	str	r0, [r7, #4]
	struct times currentTimer = {0};
 800605c:	230c      	movs	r3, #12
 800605e:	18fb      	adds	r3, r7, r3
 8006060:	0018      	movs	r0, r3
 8006062:	2303      	movs	r3, #3
 8006064:	001a      	movs	r2, r3
 8006066:	2100      	movs	r1, #0
 8006068:	f005 f877 	bl	800b15a <memset>

	setTextColor(ST77XX_BLACK);
 800606c:	2000      	movs	r0, #0
 800606e:	f7fc ffcb 	bl	8003008 <setTextColor>
	if (timerVars.isBeingSet == 0) {
 8006072:	4b64      	ldr	r3, [pc, #400]	; (8006204 <updateTimerDisplay+0x1b0>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d000      	beq.n	800607c <updateTimerDisplay+0x28>
 800607a:	e087      	b.n	800618c <updateTimerDisplay+0x138>
		if (timerVars.isSet == 0) {
 800607c:	4b61      	ldr	r3, [pc, #388]	; (8006204 <updateTimerDisplay+0x1b0>)
 800607e:	789b      	ldrb	r3, [r3, #2]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d11f      	bne.n	80060c4 <updateTimerDisplay+0x70>
			setTextSize(2);
 8006084:	2002      	movs	r0, #2
 8006086:	f7fc ffaf 	bl	8002fe8 <setTextSize>
			clearTextLine(68, hspi);	// clear timer time text
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	0019      	movs	r1, r3
 800608e:	2044      	movs	r0, #68	; 0x44
 8006090:	f7fc ff60 	bl	8002f54 <clearTextLine>

			// write "timer unset"
			setTextSize(1);
 8006094:	2001      	movs	r0, #1
 8006096:	f7fc ffa7 	bl	8002fe8 <setTextSize>
			clearTextLine(52, hspi);	// clear setting ___ text
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	0019      	movs	r1, r3
 800609e:	2034      	movs	r0, #52	; 0x34
 80060a0:	f7fc ff58 	bl	8002f54 <clearTextLine>
			drawCenteredTextWithPadding(WIDTH/2, 84, 12, "timer unset", hspi);
 80060a4:	4a58      	ldr	r2, [pc, #352]	; (8006208 <updateTimerDisplay+0x1b4>)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	0013      	movs	r3, r2
 80060ac:	220c      	movs	r2, #12
 80060ae:	2154      	movs	r1, #84	; 0x54
 80060b0:	2040      	movs	r0, #64	; 0x40
 80060b2:	f7fc fe77 	bl	8002da4 <drawCenteredTextWithPadding>

			// draw button text
			drawButtonText("", "", "set", hspi);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a54      	ldr	r2, [pc, #336]	; (800620c <updateTimerDisplay+0x1b8>)
 80060ba:	4955      	ldr	r1, [pc, #340]	; (8006210 <updateTimerDisplay+0x1bc>)
 80060bc:	4854      	ldr	r0, [pc, #336]	; (8006210 <updateTimerDisplay+0x1bc>)
 80060be:	f000 fa31 	bl	8006524 <drawButtonText>
			default: break;
		}

		drawTimer(timerVars.timeToSet, hspi);
	}
}
 80060c2:	e09b      	b.n	80061fc <updateTimerDisplay+0x1a8>
		else if (isTimerDone == 0) {
 80060c4:	4b53      	ldr	r3, [pc, #332]	; (8006214 <updateTimerDisplay+0x1c0>)
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d143      	bne.n	8006156 <updateTimerDisplay+0x102>
			secondsToTime(&currentTimer, timerCounter);
 80060ce:	4b52      	ldr	r3, [pc, #328]	; (8006218 <updateTimerDisplay+0x1c4>)
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	240c      	movs	r4, #12
 80060d4:	193b      	adds	r3, r7, r4
 80060d6:	0011      	movs	r1, r2
 80060d8:	0018      	movs	r0, r3
 80060da:	f7fd fbce 	bl	800387a <secondsToTime>
			drawTimer(&currentTimer, hspi);
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	193b      	adds	r3, r7, r4
 80060e2:	0011      	movs	r1, r2
 80060e4:	0018      	movs	r0, r3
 80060e6:	f000 fbf1 	bl	80068cc <drawTimer>
			setTextSize(1);
 80060ea:	2001      	movs	r0, #1
 80060ec:	f7fc ff7c 	bl	8002fe8 <setTextSize>
			clearTextLine(52, hspi);	// clear setting ___ text
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	0019      	movs	r1, r3
 80060f4:	2034      	movs	r0, #52	; 0x34
 80060f6:	f7fc ff2d 	bl	8002f54 <clearTextLine>
			if (isTimerPaused == 1) {
 80060fa:	4b48      	ldr	r3, [pc, #288]	; (800621c <updateTimerDisplay+0x1c8>)
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b01      	cmp	r3, #1
 8006102:	d109      	bne.n	8006118 <updateTimerDisplay+0xc4>
				drawCenteredTextWithPadding(WIDTH/2, 84, 12, "timer paused", hspi);
 8006104:	4a46      	ldr	r2, [pc, #280]	; (8006220 <updateTimerDisplay+0x1cc>)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	0013      	movs	r3, r2
 800610c:	220c      	movs	r2, #12
 800610e:	2154      	movs	r1, #84	; 0x54
 8006110:	2040      	movs	r0, #64	; 0x40
 8006112:	f7fc fe47 	bl	8002da4 <drawCenteredTextWithPadding>
 8006116:	e017      	b.n	8006148 <updateTimerDisplay+0xf4>
			else if (isTimerRunning == 0 && timerCounter != 0) {
 8006118:	4b42      	ldr	r3, [pc, #264]	; (8006224 <updateTimerDisplay+0x1d0>)
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10d      	bne.n	800613e <updateTimerDisplay+0xea>
 8006122:	4b3d      	ldr	r3, [pc, #244]	; (8006218 <updateTimerDisplay+0x1c4>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d009      	beq.n	800613e <updateTimerDisplay+0xea>
				drawCenteredTextWithPadding(WIDTH/2, 84, 12, "timer set!", hspi);
 800612a:	4a3f      	ldr	r2, [pc, #252]	; (8006228 <updateTimerDisplay+0x1d4>)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	9300      	str	r3, [sp, #0]
 8006130:	0013      	movs	r3, r2
 8006132:	220c      	movs	r2, #12
 8006134:	2154      	movs	r1, #84	; 0x54
 8006136:	2040      	movs	r0, #64	; 0x40
 8006138:	f7fc fe34 	bl	8002da4 <drawCenteredTextWithPadding>
 800613c:	e004      	b.n	8006148 <updateTimerDisplay+0xf4>
				clearTextLine(84, hspi);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	0019      	movs	r1, r3
 8006142:	2054      	movs	r0, #84	; 0x54
 8006144:	f7fc ff06 	bl	8002f54 <clearTextLine>
			drawButtonText("run", "pause", "clear", hspi);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a38      	ldr	r2, [pc, #224]	; (800622c <updateTimerDisplay+0x1d8>)
 800614c:	4938      	ldr	r1, [pc, #224]	; (8006230 <updateTimerDisplay+0x1dc>)
 800614e:	4839      	ldr	r0, [pc, #228]	; (8006234 <updateTimerDisplay+0x1e0>)
 8006150:	f000 f9e8 	bl	8006524 <drawButtonText>
}
 8006154:	e052      	b.n	80061fc <updateTimerDisplay+0x1a8>
			secondsToTime(&currentTimer, timerCounter);
 8006156:	4b30      	ldr	r3, [pc, #192]	; (8006218 <updateTimerDisplay+0x1c4>)
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	240c      	movs	r4, #12
 800615c:	193b      	adds	r3, r7, r4
 800615e:	0011      	movs	r1, r2
 8006160:	0018      	movs	r0, r3
 8006162:	f7fd fb8a 	bl	800387a <secondsToTime>
			drawTimer(&currentTimer, hspi);
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	193b      	adds	r3, r7, r4
 800616a:	0011      	movs	r1, r2
 800616c:	0018      	movs	r0, r3
 800616e:	f000 fbad 	bl	80068cc <drawTimer>
			setTextSize(1);
 8006172:	2001      	movs	r0, #1
 8006174:	f7fc ff38 	bl	8002fe8 <setTextSize>
			drawCenteredTextWithPadding(WIDTH/2, 84, 12, "timer done!", hspi);
 8006178:	4a2f      	ldr	r2, [pc, #188]	; (8006238 <updateTimerDisplay+0x1e4>)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	0013      	movs	r3, r2
 8006180:	220c      	movs	r2, #12
 8006182:	2154      	movs	r1, #84	; 0x54
 8006184:	2040      	movs	r0, #64	; 0x40
 8006186:	f7fc fe0d 	bl	8002da4 <drawCenteredTextWithPadding>
}
 800618a:	e037      	b.n	80061fc <updateTimerDisplay+0x1a8>
	else if (timerVars.isBeingSet == 1) {
 800618c:	4b1d      	ldr	r3, [pc, #116]	; (8006204 <updateTimerDisplay+0x1b0>)
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d133      	bne.n	80061fc <updateTimerDisplay+0x1a8>
		drawButtonText("up", "down", "change", hspi);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a29      	ldr	r2, [pc, #164]	; (800623c <updateTimerDisplay+0x1e8>)
 8006198:	4929      	ldr	r1, [pc, #164]	; (8006240 <updateTimerDisplay+0x1ec>)
 800619a:	482a      	ldr	r0, [pc, #168]	; (8006244 <updateTimerDisplay+0x1f0>)
 800619c:	f000 f9c2 	bl	8006524 <drawButtonText>
		switch (timerVars.fieldBeingSet) {
 80061a0:	4b18      	ldr	r3, [pc, #96]	; (8006204 <updateTimerDisplay+0x1b0>)
 80061a2:	785b      	ldrb	r3, [r3, #1]
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d00e      	beq.n	80061c6 <updateTimerDisplay+0x172>
 80061a8:	2b03      	cmp	r3, #3
 80061aa:	d016      	beq.n	80061da <updateTimerDisplay+0x186>
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d000      	beq.n	80061b2 <updateTimerDisplay+0x15e>
			default: break;
 80061b0:	e01d      	b.n	80061ee <updateTimerDisplay+0x19a>
			case 1: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting second...", hspi); break;
 80061b2:	4a25      	ldr	r2, [pc, #148]	; (8006248 <updateTimerDisplay+0x1f4>)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	0013      	movs	r3, r2
 80061ba:	2211      	movs	r2, #17
 80061bc:	2134      	movs	r1, #52	; 0x34
 80061be:	2040      	movs	r0, #64	; 0x40
 80061c0:	f7fc fdf0 	bl	8002da4 <drawCenteredTextWithPadding>
 80061c4:	e013      	b.n	80061ee <updateTimerDisplay+0x19a>
			case 2: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting minute...", hspi); break;
 80061c6:	4a21      	ldr	r2, [pc, #132]	; (800624c <updateTimerDisplay+0x1f8>)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	0013      	movs	r3, r2
 80061ce:	2211      	movs	r2, #17
 80061d0:	2134      	movs	r1, #52	; 0x34
 80061d2:	2040      	movs	r0, #64	; 0x40
 80061d4:	f7fc fde6 	bl	8002da4 <drawCenteredTextWithPadding>
 80061d8:	e009      	b.n	80061ee <updateTimerDisplay+0x19a>
			case 3: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting hour...", hspi); break;
 80061da:	4a1d      	ldr	r2, [pc, #116]	; (8006250 <updateTimerDisplay+0x1fc>)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	9300      	str	r3, [sp, #0]
 80061e0:	0013      	movs	r3, r2
 80061e2:	2211      	movs	r2, #17
 80061e4:	2134      	movs	r1, #52	; 0x34
 80061e6:	2040      	movs	r0, #64	; 0x40
 80061e8:	f7fc fddc 	bl	8002da4 <drawCenteredTextWithPadding>
 80061ec:	46c0      	nop			; (mov r8, r8)
		drawTimer(timerVars.timeToSet, hspi);
 80061ee:	4b05      	ldr	r3, [pc, #20]	; (8006204 <updateTimerDisplay+0x1b0>)
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	0011      	movs	r1, r2
 80061f6:	0018      	movs	r0, r3
 80061f8:	f000 fb68 	bl	80068cc <drawTimer>
}
 80061fc:	46c0      	nop			; (mov r8, r8)
 80061fe:	46bd      	mov	sp, r7
 8006200:	b005      	add	sp, #20
 8006202:	bd90      	pop	{r4, r7, pc}
 8006204:	20000118 	.word	0x20000118
 8006208:	0800bb20 	.word	0x0800bb20
 800620c:	0800bab0 	.word	0x0800bab0
 8006210:	0800ba10 	.word	0x0800ba10
 8006214:	2000014c 	.word	0x2000014c
 8006218:	20000148 	.word	0x20000148
 800621c:	20000192 	.word	0x20000192
 8006220:	0800bb2c 	.word	0x0800bb2c
 8006224:	20000190 	.word	0x20000190
 8006228:	0800bb3c 	.word	0x0800bb3c
 800622c:	0800bb48 	.word	0x0800bb48
 8006230:	0800bb50 	.word	0x0800bb50
 8006234:	0800bb58 	.word	0x0800bb58
 8006238:	0800bb5c 	.word	0x0800bb5c
 800623c:	0800bab4 	.word	0x0800bab4
 8006240:	0800babc 	.word	0x0800babc
 8006244:	0800bac4 	.word	0x0800bac4
 8006248:	0800bb68 	.word	0x0800bb68
 800624c:	0800bac8 	.word	0x0800bac8
 8006250:	0800badc 	.word	0x0800badc

08006254 <updateAlarmDisplay>:

// helper function for drawing all elements for alarm display
void updateAlarmDisplay(SPI_HandleTypeDef *hspi) {
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af02      	add	r7, sp, #8
 800625a:	6078      	str	r0, [r7, #4]
	setTextColor(ST77XX_BLACK);
 800625c:	2000      	movs	r0, #0
 800625e:	f7fc fed3 	bl	8003008 <setTextColor>
	if (alarmVars.isBeingSet == 0) {
 8006262:	4b50      	ldr	r3, [pc, #320]	; (80063a4 <updateAlarmDisplay+0x150>)
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d14f      	bne.n	800630a <updateAlarmDisplay+0xb6>
		if (alarmVars.isSet == 0) {
 800626a:	4b4e      	ldr	r3, [pc, #312]	; (80063a4 <updateAlarmDisplay+0x150>)
 800626c:	789b      	ldrb	r3, [r3, #2]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d11f      	bne.n	80062b2 <updateAlarmDisplay+0x5e>
			setTextSize(3);
 8006272:	2003      	movs	r0, #3
 8006274:	f7fc feb8 	bl	8002fe8 <setTextSize>
			clearTextLine(68, hspi);	// clear alarm time text
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	0019      	movs	r1, r3
 800627c:	2044      	movs	r0, #68	; 0x44
 800627e:	f7fc fe69 	bl	8002f54 <clearTextLine>

			setTextSize(1);
 8006282:	2001      	movs	r0, #1
 8006284:	f7fc feb0 	bl	8002fe8 <setTextSize>
			clearTextLine(52, hspi);	// clear "setting..." text
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	0019      	movs	r1, r3
 800628c:	2034      	movs	r0, #52	; 0x34
 800628e:	f7fc fe61 	bl	8002f54 <clearTextLine>
			drawCenteredTextWithPadding(WIDTH/2, 100, 11, "alarm unset", hspi);
 8006292:	4a45      	ldr	r2, [pc, #276]	; (80063a8 <updateAlarmDisplay+0x154>)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	0013      	movs	r3, r2
 800629a:	220b      	movs	r2, #11
 800629c:	2164      	movs	r1, #100	; 0x64
 800629e:	2040      	movs	r0, #64	; 0x40
 80062a0:	f7fc fd80 	bl	8002da4 <drawCenteredTextWithPadding>

			// draw button text
			drawButtonText("", "", "set", hspi);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a41      	ldr	r2, [pc, #260]	; (80063ac <updateAlarmDisplay+0x158>)
 80062a8:	4941      	ldr	r1, [pc, #260]	; (80063b0 <updateAlarmDisplay+0x15c>)
 80062aa:	4841      	ldr	r0, [pc, #260]	; (80063b0 <updateAlarmDisplay+0x15c>)
 80062ac:	f000 f93a 	bl	8006524 <drawButtonText>
		drawButtonText("up", "down", "change", hspi);

		// draw alarm
		drawAlarm(alarmVars.alarmToSet, hspi);
	}
}
 80062b0:	e074      	b.n	800639c <updateAlarmDisplay+0x148>
		else if (isAlarmDone == 0) {
 80062b2:	4b40      	ldr	r3, [pc, #256]	; (80063b4 <updateAlarmDisplay+0x160>)
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d119      	bne.n	80062f0 <updateAlarmDisplay+0x9c>
			setTextSize(1);
 80062bc:	2001      	movs	r0, #1
 80062be:	f7fc fe93 	bl	8002fe8 <setTextSize>
			drawCenteredTextWithPadding(WIDTH/2, 100, 11, "alarm set", hspi);
 80062c2:	4a3d      	ldr	r2, [pc, #244]	; (80063b8 <updateAlarmDisplay+0x164>)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	0013      	movs	r3, r2
 80062ca:	220b      	movs	r2, #11
 80062cc:	2164      	movs	r1, #100	; 0x64
 80062ce:	2040      	movs	r0, #64	; 0x40
 80062d0:	f7fc fd68 	bl	8002da4 <drawCenteredTextWithPadding>
			drawAlarm(alarmVars.alarmToSet, hspi);
 80062d4:	4b33      	ldr	r3, [pc, #204]	; (80063a4 <updateAlarmDisplay+0x150>)
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	0011      	movs	r1, r2
 80062dc:	0018      	movs	r0, r3
 80062de:	f000 fb1b 	bl	8006918 <drawAlarm>
			drawButtonText("", "", "clear", hspi);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a35      	ldr	r2, [pc, #212]	; (80063bc <updateAlarmDisplay+0x168>)
 80062e6:	4932      	ldr	r1, [pc, #200]	; (80063b0 <updateAlarmDisplay+0x15c>)
 80062e8:	4831      	ldr	r0, [pc, #196]	; (80063b0 <updateAlarmDisplay+0x15c>)
 80062ea:	f000 f91b 	bl	8006524 <drawButtonText>
}
 80062ee:	e055      	b.n	800639c <updateAlarmDisplay+0x148>
			setTextSize(1);
 80062f0:	2001      	movs	r0, #1
 80062f2:	f7fc fe79 	bl	8002fe8 <setTextSize>
			drawCenteredTextWithPadding(WIDTH/2, 100, 11, "alarm done!", hspi);
 80062f6:	4a32      	ldr	r2, [pc, #200]	; (80063c0 <updateAlarmDisplay+0x16c>)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	0013      	movs	r3, r2
 80062fe:	220b      	movs	r2, #11
 8006300:	2164      	movs	r1, #100	; 0x64
 8006302:	2040      	movs	r0, #64	; 0x40
 8006304:	f7fc fd4e 	bl	8002da4 <drawCenteredTextWithPadding>
}
 8006308:	e048      	b.n	800639c <updateAlarmDisplay+0x148>
	else if (alarmVars.isBeingSet == 1) {
 800630a:	4b26      	ldr	r3, [pc, #152]	; (80063a4 <updateAlarmDisplay+0x150>)
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d144      	bne.n	800639c <updateAlarmDisplay+0x148>
		setTextSize(1);
 8006312:	2001      	movs	r0, #1
 8006314:	f7fc fe68 	bl	8002fe8 <setTextSize>
		switch (alarmVars.fieldBeingSet) {
 8006318:	4b22      	ldr	r3, [pc, #136]	; (80063a4 <updateAlarmDisplay+0x150>)
 800631a:	785b      	ldrb	r3, [r3, #1]
 800631c:	2b02      	cmp	r3, #2
 800631e:	d012      	beq.n	8006346 <updateAlarmDisplay+0xf2>
 8006320:	dc02      	bgt.n	8006328 <updateAlarmDisplay+0xd4>
 8006322:	2b01      	cmp	r3, #1
 8006324:	d005      	beq.n	8006332 <updateAlarmDisplay+0xde>
			default: break;
 8006326:	e02c      	b.n	8006382 <updateAlarmDisplay+0x12e>
		switch (alarmVars.fieldBeingSet) {
 8006328:	2b03      	cmp	r3, #3
 800632a:	d016      	beq.n	800635a <updateAlarmDisplay+0x106>
 800632c:	2b04      	cmp	r3, #4
 800632e:	d01e      	beq.n	800636e <updateAlarmDisplay+0x11a>
			default: break;
 8006330:	e027      	b.n	8006382 <updateAlarmDisplay+0x12e>
			case 1: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting second...", hspi); break;
 8006332:	4a24      	ldr	r2, [pc, #144]	; (80063c4 <updateAlarmDisplay+0x170>)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	0013      	movs	r3, r2
 800633a:	2211      	movs	r2, #17
 800633c:	2134      	movs	r1, #52	; 0x34
 800633e:	2040      	movs	r0, #64	; 0x40
 8006340:	f7fc fd30 	bl	8002da4 <drawCenteredTextWithPadding>
 8006344:	e01d      	b.n	8006382 <updateAlarmDisplay+0x12e>
			case 2: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting minute...", hspi); break;
 8006346:	4a20      	ldr	r2, [pc, #128]	; (80063c8 <updateAlarmDisplay+0x174>)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	0013      	movs	r3, r2
 800634e:	2211      	movs	r2, #17
 8006350:	2134      	movs	r1, #52	; 0x34
 8006352:	2040      	movs	r0, #64	; 0x40
 8006354:	f7fc fd26 	bl	8002da4 <drawCenteredTextWithPadding>
 8006358:	e013      	b.n	8006382 <updateAlarmDisplay+0x12e>
			case 3: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting hour...", hspi); break;
 800635a:	4a1c      	ldr	r2, [pc, #112]	; (80063cc <updateAlarmDisplay+0x178>)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	0013      	movs	r3, r2
 8006362:	2211      	movs	r2, #17
 8006364:	2134      	movs	r1, #52	; 0x34
 8006366:	2040      	movs	r0, #64	; 0x40
 8006368:	f7fc fd1c 	bl	8002da4 <drawCenteredTextWithPadding>
 800636c:	e009      	b.n	8006382 <updateAlarmDisplay+0x12e>
			case 4: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting day...", hspi); break;
 800636e:	4a18      	ldr	r2, [pc, #96]	; (80063d0 <updateAlarmDisplay+0x17c>)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	0013      	movs	r3, r2
 8006376:	2211      	movs	r2, #17
 8006378:	2134      	movs	r1, #52	; 0x34
 800637a:	2040      	movs	r0, #64	; 0x40
 800637c:	f7fc fd12 	bl	8002da4 <drawCenteredTextWithPadding>
 8006380:	46c0      	nop			; (mov r8, r8)
		drawButtonText("up", "down", "change", hspi);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a13      	ldr	r2, [pc, #76]	; (80063d4 <updateAlarmDisplay+0x180>)
 8006386:	4914      	ldr	r1, [pc, #80]	; (80063d8 <updateAlarmDisplay+0x184>)
 8006388:	4814      	ldr	r0, [pc, #80]	; (80063dc <updateAlarmDisplay+0x188>)
 800638a:	f000 f8cb 	bl	8006524 <drawButtonText>
		drawAlarm(alarmVars.alarmToSet, hspi);
 800638e:	4b05      	ldr	r3, [pc, #20]	; (80063a4 <updateAlarmDisplay+0x150>)
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	0011      	movs	r1, r2
 8006396:	0018      	movs	r0, r3
 8006398:	f000 fabe 	bl	8006918 <drawAlarm>
}
 800639c:	46c0      	nop			; (mov r8, r8)
 800639e:	46bd      	mov	sp, r7
 80063a0:	b002      	add	sp, #8
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	20000120 	.word	0x20000120
 80063a8:	0800bb7c 	.word	0x0800bb7c
 80063ac:	0800bab0 	.word	0x0800bab0
 80063b0:	0800ba10 	.word	0x0800ba10
 80063b4:	2000013e 	.word	0x2000013e
 80063b8:	0800bb88 	.word	0x0800bb88
 80063bc:	0800bb48 	.word	0x0800bb48
 80063c0:	0800bb94 	.word	0x0800bb94
 80063c4:	0800bb68 	.word	0x0800bb68
 80063c8:	0800bac8 	.word	0x0800bac8
 80063cc:	0800badc 	.word	0x0800badc
 80063d0:	0800bba0 	.word	0x0800bba0
 80063d4:	0800bab4 	.word	0x0800bab4
 80063d8:	0800babc 	.word	0x0800babc
 80063dc:	0800bac4 	.word	0x0800bac4

080063e0 <updateStopwatchDisplay>:

// helper function for drawing all elements for stopwatch display
void updateStopwatchDisplay(SPI_HandleTypeDef *hspi) {
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
	setTextColor(ST77XX_BLACK);
 80063e8:	2000      	movs	r0, #0
 80063ea:	f7fc fe0d 	bl	8003008 <setTextColor>
	drawStopwatch(stopwatchCounter, hspi);
 80063ee:	4b16      	ldr	r3, [pc, #88]	; (8006448 <updateStopwatchDisplay+0x68>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	0011      	movs	r1, r2
 80063f6:	0018      	movs	r0, r3
 80063f8:	f000 fac8 	bl	800698c <drawStopwatch>
	drawStopwatchLap(stopwatchVars.lapCurrent-stopwatchVars.lapPrev, hspi);
 80063fc:	4b13      	ldr	r3, [pc, #76]	; (800644c <updateStopwatchDisplay+0x6c>)
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	4b12      	ldr	r3, [pc, #72]	; (800644c <updateStopwatchDisplay+0x6c>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	0011      	movs	r1, r2
 800640a:	0018      	movs	r0, r3
 800640c:	f000 faf6 	bl	80069fc <drawStopwatchLap>

	if (isStopwatchRunning == 0) drawButtonText("run", "lap", "clear", hspi);
 8006410:	4b0f      	ldr	r3, [pc, #60]	; (8006450 <updateStopwatchDisplay+0x70>)
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d106      	bne.n	8006428 <updateStopwatchDisplay+0x48>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a0d      	ldr	r2, [pc, #52]	; (8006454 <updateStopwatchDisplay+0x74>)
 800641e:	490e      	ldr	r1, [pc, #56]	; (8006458 <updateStopwatchDisplay+0x78>)
 8006420:	480e      	ldr	r0, [pc, #56]	; (800645c <updateStopwatchDisplay+0x7c>)
 8006422:	f000 f87f 	bl	8006524 <drawButtonText>
	else if (isStopwatchRunning == 1) drawButtonText("pause", "lap", "clear", hspi);
}
 8006426:	e00a      	b.n	800643e <updateStopwatchDisplay+0x5e>
	else if (isStopwatchRunning == 1) drawButtonText("pause", "lap", "clear", hspi);
 8006428:	4b09      	ldr	r3, [pc, #36]	; (8006450 <updateStopwatchDisplay+0x70>)
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b01      	cmp	r3, #1
 8006430:	d105      	bne.n	800643e <updateStopwatchDisplay+0x5e>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a07      	ldr	r2, [pc, #28]	; (8006454 <updateStopwatchDisplay+0x74>)
 8006436:	4908      	ldr	r1, [pc, #32]	; (8006458 <updateStopwatchDisplay+0x78>)
 8006438:	4809      	ldr	r0, [pc, #36]	; (8006460 <updateStopwatchDisplay+0x80>)
 800643a:	f000 f873 	bl	8006524 <drawButtonText>
}
 800643e:	46c0      	nop			; (mov r8, r8)
 8006440:	46bd      	mov	sp, r7
 8006442:	b002      	add	sp, #8
 8006444:	bd80      	pop	{r7, pc}
 8006446:	46c0      	nop			; (mov r8, r8)
 8006448:	20000194 	.word	0x20000194
 800644c:	20000128 	.word	0x20000128
 8006450:	20000144 	.word	0x20000144
 8006454:	0800bb48 	.word	0x0800bb48
 8006458:	0800bbb0 	.word	0x0800bbb0
 800645c:	0800bb58 	.word	0x0800bb58
 8006460:	0800bb50 	.word	0x0800bb50

08006464 <drawButton>:

// ---- drawing functions related specifically to the user interface ----
// draws a 10x10 box representing a button onto the screen
void drawButton(uint8_t x_center, uint8_t y_center, SPI_HandleTypeDef *hspi) {
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af02      	add	r7, sp, #8
 800646a:	603a      	str	r2, [r7, #0]
 800646c:	1dfb      	adds	r3, r7, #7
 800646e:	1c02      	adds	r2, r0, #0
 8006470:	701a      	strb	r2, [r3, #0]
 8006472:	1dbb      	adds	r3, r7, #6
 8006474:	1c0a      	adds	r2, r1, #0
 8006476:	701a      	strb	r2, [r3, #0]
	// bounds checking. probably already done in draw/fillRect
	if (x_center-5 < 0 || x_center+5 > WIDTH || y_center-5 < 0 || y_center+5 > HEIGHT) return;
 8006478:	1dfb      	adds	r3, r7, #7
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	3b05      	subs	r3, #5
 800647e:	2b00      	cmp	r3, #0
 8006480:	db2f      	blt.n	80064e2 <drawButton+0x7e>
 8006482:	1dfb      	adds	r3, r7, #7
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	3305      	adds	r3, #5
 8006488:	2b80      	cmp	r3, #128	; 0x80
 800648a:	dc2a      	bgt.n	80064e2 <drawButton+0x7e>
 800648c:	1dbb      	adds	r3, r7, #6
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	3b05      	subs	r3, #5
 8006492:	2b00      	cmp	r3, #0
 8006494:	db25      	blt.n	80064e2 <drawButton+0x7e>
 8006496:	1dbb      	adds	r3, r7, #6
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	3305      	adds	r3, #5
 800649c:	2ba0      	cmp	r3, #160	; 0xa0
 800649e:	dc20      	bgt.n	80064e2 <drawButton+0x7e>

	// draw rect size 8 with 1 pixel border
	// parameters give center position of graphic
	drawRect(x_center-5, y_center-5, 10, 10, ST77XX_BLACK, hspi);
 80064a0:	1dfb      	adds	r3, r7, #7
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	3b05      	subs	r3, #5
 80064a6:	b2d8      	uxtb	r0, r3
 80064a8:	1dbb      	adds	r3, r7, #6
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	3b05      	subs	r3, #5
 80064ae:	b2d9      	uxtb	r1, r3
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	9301      	str	r3, [sp, #4]
 80064b4:	2300      	movs	r3, #0
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	230a      	movs	r3, #10
 80064ba:	220a      	movs	r2, #10
 80064bc:	f7fb ff23 	bl	8002306 <drawRect>
	fillRect(x_center-4, y_center-4, 8, 8, ST77XX_WHITE, hspi);
 80064c0:	1dfb      	adds	r3, r7, #7
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	3b04      	subs	r3, #4
 80064c6:	b2d8      	uxtb	r0, r3
 80064c8:	1dbb      	adds	r3, r7, #6
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	3b04      	subs	r3, #4
 80064ce:	b2d9      	uxtb	r1, r3
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	9301      	str	r3, [sp, #4]
 80064d4:	4b05      	ldr	r3, [pc, #20]	; (80064ec <drawButton+0x88>)
 80064d6:	9300      	str	r3, [sp, #0]
 80064d8:	2308      	movs	r3, #8
 80064da:	2208      	movs	r2, #8
 80064dc:	f7fb ff6b 	bl	80023b6 <fillRect>
 80064e0:	e000      	b.n	80064e4 <drawButton+0x80>
	if (x_center-5 < 0 || x_center+5 > WIDTH || y_center-5 < 0 || y_center+5 > HEIGHT) return;
 80064e2:	46c0      	nop			; (mov r8, r8)
}
 80064e4:	46bd      	mov	sp, r7
 80064e6:	b002      	add	sp, #8
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	46c0      	nop			; (mov r8, r8)
 80064ec:	0000ffff 	.word	0x0000ffff

080064f0 <drawButtons>:

// draws 3 buttons to represent important ui buttons and tell the user their action
void drawButtons(SPI_HandleTypeDef *hspi) {
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
	// 3 buttons. positioned so their text boxes, which are centered over button, can have equal spacing left and right
	drawButton(22, HEIGHT-15, hspi);		// button 1
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	001a      	movs	r2, r3
 80064fc:	2191      	movs	r1, #145	; 0x91
 80064fe:	2016      	movs	r0, #22
 8006500:	f7ff ffb0 	bl	8006464 <drawButton>
	drawButton(64, HEIGHT-15, hspi);		// button 2
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	001a      	movs	r2, r3
 8006508:	2191      	movs	r1, #145	; 0x91
 800650a:	2040      	movs	r0, #64	; 0x40
 800650c:	f7ff ffaa 	bl	8006464 <drawButton>
	drawButton(106, HEIGHT-15, hspi);		// button 3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	001a      	movs	r2, r3
 8006514:	2191      	movs	r1, #145	; 0x91
 8006516:	206a      	movs	r0, #106	; 0x6a
 8006518:	f7ff ffa4 	bl	8006464 <drawButton>
}
 800651c:	46c0      	nop			; (mov r8, r8)
 800651e:	46bd      	mov	sp, r7
 8006520:	b002      	add	sp, #8
 8006522:	bd80      	pop	{r7, pc}

08006524 <drawButtonText>:

// draws text that goes a few pixels over the button
void drawButtonText(const char *str1, const char *str2, const char *str3, SPI_HandleTypeDef *hspi) {
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af02      	add	r7, sp, #8
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
 8006530:	603b      	str	r3, [r7, #0]
	setTextSize(1);
 8006532:	2001      	movs	r0, #1
 8006534:	f7fc fd58 	bl	8002fe8 <setTextSize>
	setTextColor(ST77XX_BLACK);
 8006538:	2000      	movs	r0, #0
 800653a:	f7fc fd65 	bl	8003008 <setTextColor>
	drawCenteredTextWithPadding(22, HEIGHT-28, 7, str1, hspi);		// button 1
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	0013      	movs	r3, r2
 8006546:	2207      	movs	r2, #7
 8006548:	2184      	movs	r1, #132	; 0x84
 800654a:	2016      	movs	r0, #22
 800654c:	f7fc fc2a 	bl	8002da4 <drawCenteredTextWithPadding>
	drawCenteredTextWithPadding(64, HEIGHT-28, 7, str2, hspi);		// button 2
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	0013      	movs	r3, r2
 8006558:	2207      	movs	r2, #7
 800655a:	2184      	movs	r1, #132	; 0x84
 800655c:	2040      	movs	r0, #64	; 0x40
 800655e:	f7fc fc21 	bl	8002da4 <drawCenteredTextWithPadding>
	drawCenteredTextWithPadding(106, HEIGHT-28, 7, str3, hspi);		// button 3
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	9300      	str	r3, [sp, #0]
 8006568:	0013      	movs	r3, r2
 800656a:	2207      	movs	r2, #7
 800656c:	2184      	movs	r1, #132	; 0x84
 800656e:	206a      	movs	r0, #106	; 0x6a
 8006570:	f7fc fc18 	bl	8002da4 <drawCenteredTextWithPadding>
}
 8006574:	46c0      	nop			; (mov r8, r8)
 8006576:	46bd      	mov	sp, r7
 8006578:	b004      	add	sp, #16
 800657a:	bd80      	pop	{r7, pc}

0800657c <drawTitle>:

// draws big text on top of the display
void drawTitle(char *str, SPI_HandleTypeDef *hspi) {
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
	uint8_t strSize = strlen(str);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	0018      	movs	r0, r3
 800658a:	f7f9 fdbd 	bl	8000108 <strlen>
 800658e:	0002      	movs	r2, r0
 8006590:	210f      	movs	r1, #15
 8006592:	187b      	adds	r3, r7, r1
 8006594:	701a      	strb	r2, [r3, #0]

	// drawing title
	// bounds checking
	if (12*strSize < WIDTH) {			// about string size = 10 for width = 128
 8006596:	187b      	adds	r3, r7, r1
 8006598:	781a      	ldrb	r2, [r3, #0]
 800659a:	0013      	movs	r3, r2
 800659c:	005b      	lsls	r3, r3, #1
 800659e:	189b      	adds	r3, r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	2b7f      	cmp	r3, #127	; 0x7f
 80065a4:	dc14      	bgt.n	80065d0 <drawTitle+0x54>
		setTextSize(2);
 80065a6:	2002      	movs	r0, #2
 80065a8:	f7fc fd1e 	bl	8002fe8 <setTextSize>
		setCursor((WIDTH-12*strSize)/2, 10);
 80065ac:	230f      	movs	r3, #15
 80065ae:	18fb      	adds	r3, r7, r3
 80065b0:	781a      	ldrb	r2, [r3, #0]
 80065b2:	0013      	movs	r3, r2
 80065b4:	0092      	lsls	r2, r2, #2
 80065b6:	1a9b      	subs	r3, r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	3380      	adds	r3, #128	; 0x80
 80065bc:	2b00      	cmp	r3, #0
 80065be:	da00      	bge.n	80065c2 <drawTitle+0x46>
 80065c0:	3301      	adds	r3, #1
 80065c2:	105b      	asrs	r3, r3, #1
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	210a      	movs	r1, #10
 80065c8:	0018      	movs	r0, r3
 80065ca:	f7fc fcf3 	bl	8002fb4 <setCursor>
 80065ce:	e039      	b.n	8006644 <drawTitle+0xc8>
	}
	else if (6*strSize < WIDTH) {		// about string size = 21 for width = 128
 80065d0:	230f      	movs	r3, #15
 80065d2:	18fb      	adds	r3, r7, r3
 80065d4:	781a      	ldrb	r2, [r3, #0]
 80065d6:	0013      	movs	r3, r2
 80065d8:	005b      	lsls	r3, r3, #1
 80065da:	189b      	adds	r3, r3, r2
 80065dc:	005b      	lsls	r3, r3, #1
 80065de:	2b7f      	cmp	r3, #127	; 0x7f
 80065e0:	dc14      	bgt.n	800660c <drawTitle+0x90>
		setTextSize(1);
 80065e2:	2001      	movs	r0, #1
 80065e4:	f7fc fd00 	bl	8002fe8 <setTextSize>
		setCursor((WIDTH-6*strSize)/2, 10);
 80065e8:	230f      	movs	r3, #15
 80065ea:	18fb      	adds	r3, r7, r3
 80065ec:	781a      	ldrb	r2, [r3, #0]
 80065ee:	0013      	movs	r3, r2
 80065f0:	0092      	lsls	r2, r2, #2
 80065f2:	1a9b      	subs	r3, r3, r2
 80065f4:	005b      	lsls	r3, r3, #1
 80065f6:	3380      	adds	r3, #128	; 0x80
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	da00      	bge.n	80065fe <drawTitle+0x82>
 80065fc:	3301      	adds	r3, #1
 80065fe:	105b      	asrs	r3, r3, #1
 8006600:	b2db      	uxtb	r3, r3
 8006602:	210a      	movs	r1, #10
 8006604:	0018      	movs	r0, r3
 8006606:	f7fc fcd5 	bl	8002fb4 <setCursor>
 800660a:	e01b      	b.n	8006644 <drawTitle+0xc8>
	}
	else {
		setTextSize(1);
 800660c:	2001      	movs	r0, #1
 800660e:	f7fc fceb 	bl	8002fe8 <setTextSize>
		sprintf(str, "it's too long");		// should not need to worry about null access, since this string is shorter than case above
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	4b12      	ldr	r3, [pc, #72]	; (8006660 <drawTitle+0xe4>)
 8006616:	0010      	movs	r0, r2
 8006618:	0019      	movs	r1, r3
 800661a:	230e      	movs	r3, #14
 800661c:	001a      	movs	r2, r3
 800661e:	f004 fd93 	bl	800b148 <memcpy>
		setCursor((WIDTH-6*strSize)/2, 10);
 8006622:	230f      	movs	r3, #15
 8006624:	18fb      	adds	r3, r7, r3
 8006626:	781a      	ldrb	r2, [r3, #0]
 8006628:	0013      	movs	r3, r2
 800662a:	0092      	lsls	r2, r2, #2
 800662c:	1a9b      	subs	r3, r3, r2
 800662e:	005b      	lsls	r3, r3, #1
 8006630:	3380      	adds	r3, #128	; 0x80
 8006632:	2b00      	cmp	r3, #0
 8006634:	da00      	bge.n	8006638 <drawTitle+0xbc>
 8006636:	3301      	adds	r3, #1
 8006638:	105b      	asrs	r3, r3, #1
 800663a:	b2db      	uxtb	r3, r3
 800663c:	210a      	movs	r1, #10
 800663e:	0018      	movs	r0, r3
 8006640:	f7fc fcb8 	bl	8002fb4 <setCursor>
	}

	setTextColor(ST77XX_BLACK);
 8006644:	2000      	movs	r0, #0
 8006646:	f7fc fcdf 	bl	8003008 <setTextColor>
	drawText(str, hspi);
 800664a:	683a      	ldr	r2, [r7, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	0011      	movs	r1, r2
 8006650:	0018      	movs	r0, r3
 8006652:	f7fc fac7 	bl	8002be4 <drawText>
}
 8006656:	46c0      	nop			; (mov r8, r8)
 8006658:	46bd      	mov	sp, r7
 800665a:	b004      	add	sp, #16
 800665c:	bd80      	pop	{r7, pc}
 800665e:	46c0      	nop			; (mov r8, r8)
 8006660:	0800bbb4 	.word	0x0800bbb4

08006664 <drawBattery>:

// draws a battery graphic to represent current battery level
void drawBattery(uint8_t batteryLevel, SPI_HandleTypeDef *hspi) {
 8006664:	b590      	push	{r4, r7, lr}
 8006666:	b087      	sub	sp, #28
 8006668:	af02      	add	r7, sp, #8
 800666a:	0002      	movs	r2, r0
 800666c:	6039      	str	r1, [r7, #0]
 800666e:	1dfb      	adds	r3, r7, #7
 8006670:	701a      	strb	r2, [r3, #0]
	// doesn't move and is used on an empty screen, so shouldn't need to clear then print
	char str[5];

	// drawing battery symbol. hard coded to be 6x13, upper left corner on (49,26)
	drawVLine(49, 28, 10, ST77XX_BLACK, hspi);		// left col
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	2300      	movs	r3, #0
 8006678:	220a      	movs	r2, #10
 800667a:	211c      	movs	r1, #28
 800667c:	2031      	movs	r0, #49	; 0x31
 800667e:	f7fb fd51 	bl	8002124 <drawVLine>
	drawVLine(54, 28, 10, ST77XX_BLACK, hspi);		// right col
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	9300      	str	r3, [sp, #0]
 8006686:	2300      	movs	r3, #0
 8006688:	220a      	movs	r2, #10
 800668a:	211c      	movs	r1, #28
 800668c:	2036      	movs	r0, #54	; 0x36
 800668e:	f7fb fd49 	bl	8002124 <drawVLine>
	drawHLine(50, 38, 4, ST77XX_BLACK, hspi);		// bottom
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	2300      	movs	r3, #0
 8006698:	2204      	movs	r2, #4
 800669a:	2126      	movs	r1, #38	; 0x26
 800669c:	2032      	movs	r0, #50	; 0x32
 800669e:	f7fb fc9b 	bl	8001fd8 <drawHLine>
	drawHLine(50, 27, 4, ST77XX_BLACK, hspi);		// top bottom level
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	9300      	str	r3, [sp, #0]
 80066a6:	2300      	movs	r3, #0
 80066a8:	2204      	movs	r2, #4
 80066aa:	211b      	movs	r1, #27
 80066ac:	2032      	movs	r0, #50	; 0x32
 80066ae:	f7fb fc93 	bl	8001fd8 <drawHLine>
	drawHLine(51, 26, 2, ST77XX_BLACK, hspi);		// top upper level
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	2300      	movs	r3, #0
 80066b8:	2202      	movs	r2, #2
 80066ba:	211a      	movs	r1, #26
 80066bc:	2033      	movs	r0, #51	; 0x33
 80066be:	f7fb fc8b 	bl	8001fd8 <drawHLine>

	// start filling in green/red box depending on battery level
	uint16_t color = ST77XX_GREEN;
 80066c2:	230e      	movs	r3, #14
 80066c4:	18fb      	adds	r3, r7, r3
 80066c6:	22fc      	movs	r2, #252	; 0xfc
 80066c8:	00d2      	lsls	r2, r2, #3
 80066ca:	801a      	strh	r2, [r3, #0]
	if (batteryLevel < 20) color = ST77XX_RED;
 80066cc:	1dfb      	adds	r3, r7, #7
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	2b13      	cmp	r3, #19
 80066d2:	d803      	bhi.n	80066dc <drawBattery+0x78>
 80066d4:	230e      	movs	r3, #14
 80066d6:	18fb      	adds	r3, r7, r3
 80066d8:	4a2c      	ldr	r2, [pc, #176]	; (800678c <drawBattery+0x128>)
 80066da:	801a      	strh	r2, [r3, #0]
	fillRect(50, 28+(100-batteryLevel)/10, 4, (batteryLevel+9)/10, color, hspi);	// +9 to avoid having to use float and round()
 80066dc:	1dfb      	adds	r3, r7, #7
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	2264      	movs	r2, #100	; 0x64
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	210a      	movs	r1, #10
 80066e6:	0018      	movs	r0, r3
 80066e8:	f7f9 fda0 	bl	800022c <__divsi3>
 80066ec:	0003      	movs	r3, r0
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	331c      	adds	r3, #28
 80066f2:	b2dc      	uxtb	r4, r3
 80066f4:	1dfb      	adds	r3, r7, #7
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	3309      	adds	r3, #9
 80066fa:	210a      	movs	r1, #10
 80066fc:	0018      	movs	r0, r3
 80066fe:	f7f9 fd95 	bl	800022c <__divsi3>
 8006702:	0003      	movs	r3, r0
 8006704:	b2da      	uxtb	r2, r3
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	9301      	str	r3, [sp, #4]
 800670a:	230e      	movs	r3, #14
 800670c:	18fb      	adds	r3, r7, r3
 800670e:	881b      	ldrh	r3, [r3, #0]
 8006710:	9300      	str	r3, [sp, #0]
 8006712:	0013      	movs	r3, r2
 8006714:	2204      	movs	r2, #4
 8006716:	0021      	movs	r1, r4
 8006718:	2032      	movs	r0, #50	; 0x32
 800671a:	f7fb fe4c 	bl	80023b6 <fillRect>
	fillRect(50, 28, 4, (100-batteryLevel)/10, ST77XX_WHITE, hspi);
 800671e:	1dfb      	adds	r3, r7, #7
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	2264      	movs	r2, #100	; 0x64
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	210a      	movs	r1, #10
 8006728:	0018      	movs	r0, r3
 800672a:	f7f9 fd7f 	bl	800022c <__divsi3>
 800672e:	0003      	movs	r3, r0
 8006730:	b2da      	uxtb	r2, r3
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	9301      	str	r3, [sp, #4]
 8006736:	4b16      	ldr	r3, [pc, #88]	; (8006790 <drawBattery+0x12c>)
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	0013      	movs	r3, r2
 800673c:	2204      	movs	r2, #4
 800673e:	211c      	movs	r1, #28
 8006740:	2032      	movs	r0, #50	; 0x32
 8006742:	f7fb fe38 	bl	80023b6 <fillRect>

	// draw numerical text
	setTextSize(1);
 8006746:	2001      	movs	r0, #1
 8006748:	f7fc fc4e 	bl	8002fe8 <setTextSize>
	if (batteryLevel >= 20) color = ST77XX_BLACK;		// reusing variable for more obfuscated code.
 800674c:	1dfb      	adds	r3, r7, #7
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	2b13      	cmp	r3, #19
 8006752:	d903      	bls.n	800675c <drawBattery+0xf8>
 8006754:	230e      	movs	r3, #14
 8006756:	18fb      	adds	r3, r7, r3
 8006758:	2200      	movs	r2, #0
 800675a:	801a      	strh	r2, [r3, #0]
	setTextColor(color);
 800675c:	230e      	movs	r3, #14
 800675e:	18fb      	adds	r3, r7, r3
 8006760:	881b      	ldrh	r3, [r3, #0]
 8006762:	0018      	movs	r0, r3
 8006764:	f7fc fc50 	bl	8003008 <setTextColor>
	sprintf(str, "%3d%%", batteryLevel);
 8006768:	1dfb      	adds	r3, r7, #7
 800676a:	781a      	ldrb	r2, [r3, #0]
 800676c:	4909      	ldr	r1, [pc, #36]	; (8006794 <drawBattery+0x130>)
 800676e:	2408      	movs	r4, #8
 8006770:	193b      	adds	r3, r7, r4
 8006772:	0018      	movs	r0, r3
 8006774:	f004 fd78 	bl	800b268 <siprintf>
	drawTextAt(55, 31, str, hspi);
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	193a      	adds	r2, r7, r4
 800677c:	211f      	movs	r1, #31
 800677e:	2037      	movs	r0, #55	; 0x37
 8006780:	f7fc fa66 	bl	8002c50 <drawTextAt>
}
 8006784:	46c0      	nop			; (mov r8, r8)
 8006786:	46bd      	mov	sp, r7
 8006788:	b005      	add	sp, #20
 800678a:	bd90      	pop	{r4, r7, pc}
 800678c:	fffff800 	.word	0xfffff800
 8006790:	0000ffff 	.word	0x0000ffff
 8006794:	0800bbc4 	.word	0x0800bbc4

08006798 <drawClock>:

// draw time and date on screen
void drawClock(struct dates *d, struct times *t, SPI_HandleTypeDef *hspi) {
 8006798:	b5b0      	push	{r4, r5, r7, lr}
 800679a:	b090      	sub	sp, #64	; 0x40
 800679c:	af02      	add	r7, sp, #8
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
	// notes on paper.
	char str[40];

	// no need to draw padding for those that always have the same length
	// drawing hr and min, 12-hr format
	if (t->hr % 12 == 0) sprintf(str, "%2d:%02d", 12, t->min);
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	210c      	movs	r1, #12
 80067aa:	0018      	movs	r0, r3
 80067ac:	f7f9 fd3a 	bl	8000224 <__aeabi_uidivmod>
 80067b0:	000b      	movs	r3, r1
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d108      	bne.n	80067ca <drawClock+0x32>
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	785b      	ldrb	r3, [r3, #1]
 80067bc:	493c      	ldr	r1, [pc, #240]	; (80068b0 <drawClock+0x118>)
 80067be:	2210      	movs	r2, #16
 80067c0:	18b8      	adds	r0, r7, r2
 80067c2:	220c      	movs	r2, #12
 80067c4:	f004 fd50 	bl	800b268 <siprintf>
 80067c8:	e00f      	b.n	80067ea <drawClock+0x52>
	else sprintf(str, "%2d:%02d", t->hr%12, t->min);
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	210c      	movs	r1, #12
 80067d0:	0018      	movs	r0, r3
 80067d2:	f7f9 fd27 	bl	8000224 <__aeabi_uidivmod>
 80067d6:	000b      	movs	r3, r1
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	001a      	movs	r2, r3
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	785b      	ldrb	r3, [r3, #1]
 80067e0:	4933      	ldr	r1, [pc, #204]	; (80068b0 <drawClock+0x118>)
 80067e2:	2010      	movs	r0, #16
 80067e4:	1838      	adds	r0, r7, r0
 80067e6:	f004 fd3f 	bl	800b268 <siprintf>
	setTextSize(3);
 80067ea:	2003      	movs	r0, #3
 80067ec:	f7fc fbfc 	bl	8002fe8 <setTextSize>
	setTextColor(ST77XX_BLACK);
 80067f0:	2000      	movs	r0, #0
 80067f2:	f7fc fc09 	bl	8003008 <setTextColor>
	drawCenteredText(52, 60, str, hspi);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2410      	movs	r4, #16
 80067fa:	193a      	adds	r2, r7, r4
 80067fc:	213c      	movs	r1, #60	; 0x3c
 80067fe:	2034      	movs	r0, #52	; 0x34
 8006800:	f7fc fa6e 	bl	8002ce0 <drawCenteredText>

	// drawing sec
	sprintf(str, "%02d", t->sec);
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	789b      	ldrb	r3, [r3, #2]
 8006808:	001a      	movs	r2, r3
 800680a:	492a      	ldr	r1, [pc, #168]	; (80068b4 <drawClock+0x11c>)
 800680c:	193b      	adds	r3, r7, r4
 800680e:	0018      	movs	r0, r3
 8006810:	f004 fd2a 	bl	800b268 <siprintf>
	setTextSize(2);
 8006814:	2002      	movs	r0, #2
 8006816:	f7fc fbe7 	bl	8002fe8 <setTextSize>
	drawCenteredText(109, 68, str, hspi);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	193a      	adds	r2, r7, r4
 800681e:	2144      	movs	r1, #68	; 0x44
 8006820:	206d      	movs	r0, #109	; 0x6d
 8006822:	f7fc fa5d 	bl	8002ce0 <drawCenteredText>

	// drawing AM/PM text
	setTextSize(1);
 8006826:	2001      	movs	r0, #1
 8006828:	f7fc fbde 	bl	8002fe8 <setTextSize>
	if (t->hr < 12) drawCenteredText(103, 60, "AM", hspi);
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	2b0b      	cmp	r3, #11
 8006832:	d806      	bhi.n	8006842 <drawClock+0xaa>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a20      	ldr	r2, [pc, #128]	; (80068b8 <drawClock+0x120>)
 8006838:	213c      	movs	r1, #60	; 0x3c
 800683a:	2067      	movs	r0, #103	; 0x67
 800683c:	f7fc fa50 	bl	8002ce0 <drawCenteredText>
 8006840:	e005      	b.n	800684e <drawClock+0xb6>
	else drawCenteredText(103, 60, "PM", hspi);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a1d      	ldr	r2, [pc, #116]	; (80068bc <drawClock+0x124>)
 8006846:	213c      	movs	r1, #60	; 0x3c
 8006848:	2067      	movs	r0, #103	; 0x67
 800684a:	f7fc fa49 	bl	8002ce0 <drawCenteredText>

	// drawing date
	setTextSize(1);
 800684e:	2001      	movs	r0, #1
 8006850:	f7fc fbca 	bl	8002fe8 <setTextSize>
	sprintf(str, "%s %d %04d", monthNames[d->month], d->date, d->yr);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	789b      	ldrb	r3, [r3, #2]
 8006858:	001a      	movs	r2, r3
 800685a:	4b19      	ldr	r3, [pc, #100]	; (80068c0 <drawClock+0x128>)
 800685c:	0092      	lsls	r2, r2, #2
 800685e:	58d2      	ldr	r2, [r2, r3]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	78db      	ldrb	r3, [r3, #3]
 8006864:	001c      	movs	r4, r3
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	881b      	ldrh	r3, [r3, #0]
 800686a:	4916      	ldr	r1, [pc, #88]	; (80068c4 <drawClock+0x12c>)
 800686c:	2510      	movs	r5, #16
 800686e:	1978      	adds	r0, r7, r5
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	0023      	movs	r3, r4
 8006874:	f004 fcf8 	bl	800b268 <siprintf>
	drawCenteredTextWithPadding(WIDTH/2, 84, 11, str, hspi);
 8006878:	197a      	adds	r2, r7, r5
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	9300      	str	r3, [sp, #0]
 800687e:	0013      	movs	r3, r2
 8006880:	220b      	movs	r2, #11
 8006882:	2154      	movs	r1, #84	; 0x54
 8006884:	2040      	movs	r0, #64	; 0x40
 8006886:	f7fc fa8d 	bl	8002da4 <drawCenteredTextWithPadding>

	// drawing weekday
	drawCenteredTextWithPadding(WIDTH/2, 92, 9, weekdayNames[d->weekday], hspi);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	791b      	ldrb	r3, [r3, #4]
 800688e:	001a      	movs	r2, r3
 8006890:	4b0d      	ldr	r3, [pc, #52]	; (80068c8 <drawClock+0x130>)
 8006892:	0092      	lsls	r2, r2, #2
 8006894:	58d2      	ldr	r2, [r2, r3]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	9300      	str	r3, [sp, #0]
 800689a:	0013      	movs	r3, r2
 800689c:	2209      	movs	r2, #9
 800689e:	215c      	movs	r1, #92	; 0x5c
 80068a0:	2040      	movs	r0, #64	; 0x40
 80068a2:	f7fc fa7f 	bl	8002da4 <drawCenteredTextWithPadding>
}
 80068a6:	46c0      	nop			; (mov r8, r8)
 80068a8:	46bd      	mov	sp, r7
 80068aa:	b00e      	add	sp, #56	; 0x38
 80068ac:	bdb0      	pop	{r4, r5, r7, pc}
 80068ae:	46c0      	nop			; (mov r8, r8)
 80068b0:	0800bbcc 	.word	0x0800bbcc
 80068b4:	0800bbd8 	.word	0x0800bbd8
 80068b8:	0800bbe0 	.word	0x0800bbe0
 80068bc:	0800bbe4 	.word	0x0800bbe4
 80068c0:	20000034 	.word	0x20000034
 80068c4:	0800bbe8 	.word	0x0800bbe8
 80068c8:	20000014 	.word	0x20000014

080068cc <drawTimer>:

// drawing timer on screen
void drawTimer(struct times *t, SPI_HandleTypeDef *hspi) {
 80068cc:	b5b0      	push	{r4, r5, r7, lr}
 80068ce:	b08e      	sub	sp, #56	; 0x38
 80068d0:	af02      	add	r7, sp, #8
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
	char str[40];

	// only drawing hr:min:sec of timer
	setTextSize(2);
 80068d6:	2002      	movs	r0, #2
 80068d8:	f7fc fb86 	bl	8002fe8 <setTextSize>
	setTextColor(ST77XX_BLACK);
 80068dc:	2000      	movs	r0, #0
 80068de:	f7fc fb93 	bl	8003008 <setTextColor>
	sprintf(str, "%2d:%2d:%2d", t->hr, t->min, t->sec);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	001a      	movs	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	785b      	ldrb	r3, [r3, #1]
 80068ec:	001c      	movs	r4, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	789b      	ldrb	r3, [r3, #2]
 80068f2:	4908      	ldr	r1, [pc, #32]	; (8006914 <drawTimer+0x48>)
 80068f4:	2508      	movs	r5, #8
 80068f6:	1978      	adds	r0, r7, r5
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	0023      	movs	r3, r4
 80068fc:	f004 fcb4 	bl	800b268 <siprintf>
	drawCenteredText(WIDTH/2, HEIGHT/2-12, str, hspi);		// about y=68
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	197a      	adds	r2, r7, r5
 8006904:	2144      	movs	r1, #68	; 0x44
 8006906:	2040      	movs	r0, #64	; 0x40
 8006908:	f7fc f9ea 	bl	8002ce0 <drawCenteredText>

	// leaving room to draw "timer set!/unset" text
}
 800690c:	46c0      	nop			; (mov r8, r8)
 800690e:	46bd      	mov	sp, r7
 8006910:	b00c      	add	sp, #48	; 0x30
 8006912:	bdb0      	pop	{r4, r5, r7, pc}
 8006914:	0800bbf4 	.word	0x0800bbf4

08006918 <drawAlarm>:

// drawing alarm on screen
void drawAlarm(struct alarmTimes *a, SPI_HandleTypeDef *hspi) {
 8006918:	b5b0      	push	{r4, r5, r7, lr}
 800691a:	b08e      	sub	sp, #56	; 0x38
 800691c:	af02      	add	r7, sp, #8
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
	char str[40];

	// drawing hr:min:sec
	setTextSize(2);
 8006922:	2002      	movs	r0, #2
 8006924:	f7fc fb60 	bl	8002fe8 <setTextSize>
	setTextColor(ST77XX_BLACK);
 8006928:	2000      	movs	r0, #0
 800692a:	f7fc fb6d 	bl	8003008 <setTextColor>
	sprintf(str, "%2d:%2d:%2d", a->hr, a->min, a->sec);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	001a      	movs	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	785b      	ldrb	r3, [r3, #1]
 8006938:	001c      	movs	r4, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	789b      	ldrb	r3, [r3, #2]
 800693e:	4911      	ldr	r1, [pc, #68]	; (8006984 <drawAlarm+0x6c>)
 8006940:	2508      	movs	r5, #8
 8006942:	1978      	adds	r0, r7, r5
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	0023      	movs	r3, r4
 8006948:	f004 fc8e 	bl	800b268 <siprintf>
	drawCenteredText(WIDTH/2, 68, str, hspi);
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	197a      	adds	r2, r7, r5
 8006950:	2144      	movs	r1, #68	; 0x44
 8006952:	2040      	movs	r0, #64	; 0x40
 8006954:	f7fc f9c4 	bl	8002ce0 <drawCenteredText>

	// drawing weekday
	setTextSize(1);
 8006958:	2001      	movs	r0, #1
 800695a:	f7fc fb45 	bl	8002fe8 <setTextSize>
	drawCenteredTextWithPadding(WIDTH/2, 84, 9, weekdayNames[a->weekday], hspi);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	78db      	ldrb	r3, [r3, #3]
 8006962:	001a      	movs	r2, r3
 8006964:	4b08      	ldr	r3, [pc, #32]	; (8006988 <drawAlarm+0x70>)
 8006966:	0092      	lsls	r2, r2, #2
 8006968:	58d2      	ldr	r2, [r2, r3]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	0013      	movs	r3, r2
 8006970:	2209      	movs	r2, #9
 8006972:	2154      	movs	r1, #84	; 0x54
 8006974:	2040      	movs	r0, #64	; 0x40
 8006976:	f7fc fa15 	bl	8002da4 <drawCenteredTextWithPadding>
}
 800697a:	46c0      	nop			; (mov r8, r8)
 800697c:	46bd      	mov	sp, r7
 800697e:	b00c      	add	sp, #48	; 0x30
 8006980:	bdb0      	pop	{r4, r5, r7, pc}
 8006982:	46c0      	nop			; (mov r8, r8)
 8006984:	0800bbf4 	.word	0x0800bbf4
 8006988:	20000014 	.word	0x20000014

0800698c <drawStopwatch>:

// drawing stopwatch on screen
void drawStopwatch(uint32_t seconds, SPI_HandleTypeDef *hspi) {
 800698c:	b5b0      	push	{r4, r5, r7, lr}
 800698e:	b090      	sub	sp, #64	; 0x40
 8006990:	af02      	add	r7, sp, #8
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
	struct times t = {0};
 8006996:	2134      	movs	r1, #52	; 0x34
 8006998:	000c      	movs	r4, r1
 800699a:	187b      	adds	r3, r7, r1
 800699c:	0018      	movs	r0, r3
 800699e:	2303      	movs	r3, #3
 80069a0:	001a      	movs	r2, r3
 80069a2:	2100      	movs	r1, #0
 80069a4:	f004 fbd9 	bl	800b15a <memset>
	char str[40];

	secondsToTime(&t, seconds);
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	0021      	movs	r1, r4
 80069ac:	000c      	movs	r4, r1
 80069ae:	187b      	adds	r3, r7, r1
 80069b0:	0011      	movs	r1, r2
 80069b2:	0018      	movs	r0, r3
 80069b4:	f7fc ff61 	bl	800387a <secondsToTime>

	// drawing hr:min:sec
	setTextSize(2);
 80069b8:	2002      	movs	r0, #2
 80069ba:	f7fc fb15 	bl	8002fe8 <setTextSize>
	setTextColor(ST77XX_BLACK);
 80069be:	2000      	movs	r0, #0
 80069c0:	f7fc fb22 	bl	8003008 <setTextColor>
	sprintf(str, "%2d:%2d:%2d", t.hr, t.min, t.sec);
 80069c4:	0021      	movs	r1, r4
 80069c6:	187b      	adds	r3, r7, r1
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	001a      	movs	r2, r3
 80069cc:	187b      	adds	r3, r7, r1
 80069ce:	785b      	ldrb	r3, [r3, #1]
 80069d0:	001c      	movs	r4, r3
 80069d2:	187b      	adds	r3, r7, r1
 80069d4:	789b      	ldrb	r3, [r3, #2]
 80069d6:	4908      	ldr	r1, [pc, #32]	; (80069f8 <drawStopwatch+0x6c>)
 80069d8:	250c      	movs	r5, #12
 80069da:	1978      	adds	r0, r7, r5
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	0023      	movs	r3, r4
 80069e0:	f004 fc42 	bl	800b268 <siprintf>
	drawCenteredText(WIDTH/2, 68, str, hspi);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	197a      	adds	r2, r7, r5
 80069e8:	2144      	movs	r1, #68	; 0x44
 80069ea:	2040      	movs	r0, #64	; 0x40
 80069ec:	f7fc f978 	bl	8002ce0 <drawCenteredText>

	// leaving room for lap text
}
 80069f0:	46c0      	nop			; (mov r8, r8)
 80069f2:	46bd      	mov	sp, r7
 80069f4:	b00e      	add	sp, #56	; 0x38
 80069f6:	bdb0      	pop	{r4, r5, r7, pc}
 80069f8:	0800bbf4 	.word	0x0800bbf4

080069fc <drawStopwatchLap>:

// drawing lap text
void drawStopwatchLap(uint32_t seconds, SPI_HandleTypeDef *hspi) {
 80069fc:	b5b0      	push	{r4, r5, r7, lr}
 80069fe:	b090      	sub	sp, #64	; 0x40
 8006a00:	af02      	add	r7, sp, #8
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
	struct times t = {0};
 8006a06:	2134      	movs	r1, #52	; 0x34
 8006a08:	000c      	movs	r4, r1
 8006a0a:	187b      	adds	r3, r7, r1
 8006a0c:	0018      	movs	r0, r3
 8006a0e:	2303      	movs	r3, #3
 8006a10:	001a      	movs	r2, r3
 8006a12:	2100      	movs	r1, #0
 8006a14:	f004 fba1 	bl	800b15a <memset>
	char str[40];

	secondsToTime(&t, seconds);		// converting
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	0021      	movs	r1, r4
 8006a1c:	000c      	movs	r4, r1
 8006a1e:	187b      	adds	r3, r7, r1
 8006a20:	0011      	movs	r1, r2
 8006a22:	0018      	movs	r0, r3
 8006a24:	f7fc ff29 	bl	800387a <secondsToTime>

	// drawing hr:min:sec
	setTextSize(1);
 8006a28:	2001      	movs	r0, #1
 8006a2a:	f7fc fadd 	bl	8002fe8 <setTextSize>
	setTextColor(ST77XX_BLACK);
 8006a2e:	2000      	movs	r0, #0
 8006a30:	f7fc faea 	bl	8003008 <setTextColor>
	sprintf(str, "lap: %2d:%2d:%2d", t.hr, t.min, t.sec);
 8006a34:	0021      	movs	r1, r4
 8006a36:	187b      	adds	r3, r7, r1
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	001a      	movs	r2, r3
 8006a3c:	187b      	adds	r3, r7, r1
 8006a3e:	785b      	ldrb	r3, [r3, #1]
 8006a40:	001c      	movs	r4, r3
 8006a42:	187b      	adds	r3, r7, r1
 8006a44:	789b      	ldrb	r3, [r3, #2]
 8006a46:	4908      	ldr	r1, [pc, #32]	; (8006a68 <drawStopwatchLap+0x6c>)
 8006a48:	250c      	movs	r5, #12
 8006a4a:	1978      	adds	r0, r7, r5
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	0023      	movs	r3, r4
 8006a50:	f004 fc0a 	bl	800b268 <siprintf>
	drawCenteredText(WIDTH/2, 84, str, hspi);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	197a      	adds	r2, r7, r5
 8006a58:	2154      	movs	r1, #84	; 0x54
 8006a5a:	2040      	movs	r0, #64	; 0x40
 8006a5c:	f7fc f940 	bl	8002ce0 <drawCenteredText>
}
 8006a60:	46c0      	nop			; (mov r8, r8)
 8006a62:	46bd      	mov	sp, r7
 8006a64:	b00e      	add	sp, #56	; 0x38
 8006a66:	bdb0      	pop	{r4, r5, r7, pc}
 8006a68:	0800bc00 	.word	0x0800bc00

08006a6c <initFace>:
// ---- end of drawing functions ----

// initializes variables. should be called at the start of program
void initFace() {
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	af00      	add	r7, sp, #0
	faceOnDisplay = faceClock;
 8006a70:	4b14      	ldr	r3, [pc, #80]	; (8006ac4 <initFace+0x58>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	701a      	strb	r2, [r3, #0]
	updateFace.clock = 1;
 8006a76:	4b14      	ldr	r3, [pc, #80]	; (8006ac8 <initFace+0x5c>)
 8006a78:	2201      	movs	r2, #1
 8006a7a:	701a      	strb	r2, [r3, #0]

	// initializing pointers
	clockVars.dateToSet = (struct dates *)calloc(1, sizeof(struct dates *));
 8006a7c:	2104      	movs	r1, #4
 8006a7e:	2001      	movs	r0, #1
 8006a80:	f004 fb2e 	bl	800b0e0 <calloc>
 8006a84:	0003      	movs	r3, r0
 8006a86:	001a      	movs	r2, r3
 8006a88:	4b10      	ldr	r3, [pc, #64]	; (8006acc <initFace+0x60>)
 8006a8a:	605a      	str	r2, [r3, #4]
	clockVars.timeToSet = (struct times *)calloc(1, sizeof(struct times *));
 8006a8c:	2104      	movs	r1, #4
 8006a8e:	2001      	movs	r0, #1
 8006a90:	f004 fb26 	bl	800b0e0 <calloc>
 8006a94:	0003      	movs	r3, r0
 8006a96:	001a      	movs	r2, r3
 8006a98:	4b0c      	ldr	r3, [pc, #48]	; (8006acc <initFace+0x60>)
 8006a9a:	609a      	str	r2, [r3, #8]
	timerVars.timeToSet = (struct times *)calloc(1, sizeof(struct times *));
 8006a9c:	2104      	movs	r1, #4
 8006a9e:	2001      	movs	r0, #1
 8006aa0:	f004 fb1e 	bl	800b0e0 <calloc>
 8006aa4:	0003      	movs	r3, r0
 8006aa6:	001a      	movs	r2, r3
 8006aa8:	4b09      	ldr	r3, [pc, #36]	; (8006ad0 <initFace+0x64>)
 8006aaa:	605a      	str	r2, [r3, #4]
	alarmVars.alarmToSet = (struct alarmTimes *)calloc(1, sizeof(struct alarmTimes *));
 8006aac:	2104      	movs	r1, #4
 8006aae:	2001      	movs	r0, #1
 8006ab0:	f004 fb16 	bl	800b0e0 <calloc>
 8006ab4:	0003      	movs	r3, r0
 8006ab6:	001a      	movs	r2, r3
 8006ab8:	4b06      	ldr	r3, [pc, #24]	; (8006ad4 <initFace+0x68>)
 8006aba:	605a      	str	r2, [r3, #4]
}
 8006abc:	46c0      	nop			; (mov r8, r8)
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	46c0      	nop			; (mov r8, r8)
 8006ac4:	20000130 	.word	0x20000130
 8006ac8:	20000140 	.word	0x20000140
 8006acc:	2000010c 	.word	0x2000010c
 8006ad0:	20000118 	.word	0x20000118
 8006ad4:	20000120 	.word	0x20000120

08006ad8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8006ad8:	480d      	ldr	r0, [pc, #52]	; (8006b10 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8006ada:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8006adc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006ade:	e003      	b.n	8006ae8 <LoopCopyDataInit>

08006ae0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006ae0:	4b0c      	ldr	r3, [pc, #48]	; (8006b14 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8006ae2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006ae4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006ae6:	3104      	adds	r1, #4

08006ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8006ae8:	480b      	ldr	r0, [pc, #44]	; (8006b18 <LoopForever+0xa>)
  ldr  r3, =_edata
 8006aea:	4b0c      	ldr	r3, [pc, #48]	; (8006b1c <LoopForever+0xe>)
  adds  r2, r0, r1
 8006aec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006aee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006af0:	d3f6      	bcc.n	8006ae0 <CopyDataInit>
  ldr  r2, =_sbss
 8006af2:	4a0b      	ldr	r2, [pc, #44]	; (8006b20 <LoopForever+0x12>)
  b  LoopFillZerobss
 8006af4:	e002      	b.n	8006afc <LoopFillZerobss>

08006af6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8006af6:	2300      	movs	r3, #0
  str  r3, [r2]
 8006af8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006afa:	3204      	adds	r2, #4

08006afc <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8006afc:	4b09      	ldr	r3, [pc, #36]	; (8006b24 <LoopForever+0x16>)
  cmp  r2, r3
 8006afe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006b00:	d3f9      	bcc.n	8006af6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006b02:	f7fe f817 	bl	8004b34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006b06:	f004 fafb 	bl	800b100 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006b0a:	f7fc ffa3 	bl	8003a54 <main>

08006b0e <LoopForever>:

LoopForever:
    b LoopForever
 8006b0e:	e7fe      	b.n	8006b0e <LoopForever>
   ldr   r0, =_estack
 8006b10:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8006b14:	0800c604 	.word	0x0800c604
  ldr  r0, =_sdata
 8006b18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006b1c:	200000d0 	.word	0x200000d0
  ldr  r2, =_sbss
 8006b20:	200000d0 	.word	0x200000d0
  ldr  r3, = _ebss
 8006b24:	200003b0 	.word	0x200003b0

08006b28 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006b28:	e7fe      	b.n	8006b28 <ADC1_COMP_IRQHandler>
	...

08006b2c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006b32:	1dfb      	adds	r3, r7, #7
 8006b34:	2200      	movs	r2, #0
 8006b36:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8006b38:	4b0b      	ldr	r3, [pc, #44]	; (8006b68 <HAL_Init+0x3c>)
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	4b0a      	ldr	r3, [pc, #40]	; (8006b68 <HAL_Init+0x3c>)
 8006b3e:	2140      	movs	r1, #64	; 0x40
 8006b40:	430a      	orrs	r2, r1
 8006b42:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006b44:	2000      	movs	r0, #0
 8006b46:	f000 f811 	bl	8006b6c <HAL_InitTick>
 8006b4a:	1e03      	subs	r3, r0, #0
 8006b4c:	d003      	beq.n	8006b56 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8006b4e:	1dfb      	adds	r3, r7, #7
 8006b50:	2201      	movs	r2, #1
 8006b52:	701a      	strb	r2, [r3, #0]
 8006b54:	e001      	b.n	8006b5a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006b56:	f7fd fd59 	bl	800460c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006b5a:	1dfb      	adds	r3, r7, #7
 8006b5c:	781b      	ldrb	r3, [r3, #0]
}
 8006b5e:	0018      	movs	r0, r3
 8006b60:	46bd      	mov	sp, r7
 8006b62:	b002      	add	sp, #8
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	46c0      	nop			; (mov r8, r8)
 8006b68:	40022000 	.word	0x40022000

08006b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006b74:	230f      	movs	r3, #15
 8006b76:	18fb      	adds	r3, r7, r3
 8006b78:	2200      	movs	r2, #0
 8006b7a:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8006b7c:	4b0f      	ldr	r3, [pc, #60]	; (8006bbc <HAL_InitTick+0x50>)
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	23fa      	movs	r3, #250	; 0xfa
 8006b82:	0099      	lsls	r1, r3, #2
 8006b84:	0010      	movs	r0, r2
 8006b86:	f7f9 fac7 	bl	8000118 <__udivsi3>
 8006b8a:	0003      	movs	r3, r0
 8006b8c:	0018      	movs	r0, r3
 8006b8e:	f000 fde4 	bl	800775a <HAL_SYSTICK_Config>
 8006b92:	1e03      	subs	r3, r0, #0
 8006b94:	d004      	beq.n	8006ba0 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8006b96:	230f      	movs	r3, #15
 8006b98:	18fb      	adds	r3, r7, r3
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	701a      	strb	r2, [r3, #0]
 8006b9e:	e006      	b.n	8006bae <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8006ba0:	6879      	ldr	r1, [r7, #4]
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	425b      	negs	r3, r3
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	0018      	movs	r0, r3
 8006baa:	f000 fda1 	bl	80076f0 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8006bae:	230f      	movs	r3, #15
 8006bb0:	18fb      	adds	r3, r7, r3
 8006bb2:	781b      	ldrb	r3, [r3, #0]
}
 8006bb4:	0018      	movs	r0, r3
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	b004      	add	sp, #16
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	20000010 	.word	0x20000010

08006bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	af00      	add	r7, sp, #0
  uwTick++;
 8006bc4:	4b03      	ldr	r3, [pc, #12]	; (8006bd4 <HAL_IncTick+0x14>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	1c5a      	adds	r2, r3, #1
 8006bca:	4b02      	ldr	r3, [pc, #8]	; (8006bd4 <HAL_IncTick+0x14>)
 8006bcc:	601a      	str	r2, [r3, #0]
}
 8006bce:	46c0      	nop			; (mov r8, r8)
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	200003a8 	.word	0x200003a8

08006bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	af00      	add	r7, sp, #0
  return uwTick;
 8006bdc:	4b02      	ldr	r3, [pc, #8]	; (8006be8 <HAL_GetTick+0x10>)
 8006bde:	681b      	ldr	r3, [r3, #0]
}
 8006be0:	0018      	movs	r0, r3
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	46c0      	nop			; (mov r8, r8)
 8006be8:	200003a8 	.word	0x200003a8

08006bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006bf4:	f7ff fff0 	bl	8006bd8 <HAL_GetTick>
 8006bf8:	0003      	movs	r3, r0
 8006bfa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	3301      	adds	r3, #1
 8006c04:	d002      	beq.n	8006c0c <HAL_Delay+0x20>
  {
    wait++;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006c0c:	46c0      	nop			; (mov r8, r8)
 8006c0e:	f7ff ffe3 	bl	8006bd8 <HAL_GetTick>
 8006c12:	0002      	movs	r2, r0
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d8f7      	bhi.n	8006c0e <HAL_Delay+0x22>
  {
  }
}
 8006c1e:	46c0      	nop			; (mov r8, r8)
 8006c20:	46bd      	mov	sp, r7
 8006c22:	b004      	add	sp, #16
 8006c24:	bd80      	pop	{r7, pc}
	...

08006c28 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e159      	b.n	8006eee <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10a      	bne.n	8006c58 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2250      	movs	r2, #80	; 0x50
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	0018      	movs	r0, r3
 8006c54:	f7fd fcee 	bl	8004634 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c5c:	2210      	movs	r2, #16
 8006c5e:	4013      	ands	r3, r2
 8006c60:	2b10      	cmp	r3, #16
 8006c62:	d005      	beq.n	8006c70 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	2204      	movs	r2, #4
 8006c6c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8006c6e:	d00b      	beq.n	8006c88 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c74:	2210      	movs	r2, #16
 8006c76:	431a      	orrs	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2250      	movs	r2, #80	; 0x50
 8006c80:	2100      	movs	r1, #0
 8006c82:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e132      	b.n	8006eee <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c8c:	4a9a      	ldr	r2, [pc, #616]	; (8006ef8 <HAL_ADC_Init+0x2d0>)
 8006c8e:	4013      	ands	r3, r2
 8006c90:	2202      	movs	r2, #2
 8006c92:	431a      	orrs	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	2203      	movs	r2, #3
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d108      	bne.n	8006cb8 <HAL_ADC_Init+0x90>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2201      	movs	r2, #1
 8006cae:	4013      	ands	r3, r2
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d101      	bne.n	8006cb8 <HAL_ADC_Init+0x90>
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e000      	b.n	8006cba <HAL_ADC_Init+0x92>
 8006cb8:	2300      	movs	r3, #0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d149      	bne.n	8006d52 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	685a      	ldr	r2, [r3, #4]
 8006cc2:	23c0      	movs	r3, #192	; 0xc0
 8006cc4:	061b      	lsls	r3, r3, #24
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d00b      	beq.n	8006ce2 <HAL_ADC_Init+0xba>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685a      	ldr	r2, [r3, #4]
 8006cce:	2380      	movs	r3, #128	; 0x80
 8006cd0:	05db      	lsls	r3, r3, #23
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d005      	beq.n	8006ce2 <HAL_ADC_Init+0xba>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	685a      	ldr	r2, [r3, #4]
 8006cda:	2380      	movs	r3, #128	; 0x80
 8006cdc:	061b      	lsls	r3, r3, #24
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d111      	bne.n	8006d06 <HAL_ADC_Init+0xde>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	691a      	ldr	r2, [r3, #16]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	0092      	lsls	r2, r2, #2
 8006cee:	0892      	lsrs	r2, r2, #2
 8006cf0:	611a      	str	r2, [r3, #16]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	6919      	ldr	r1, [r3, #16]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	430a      	orrs	r2, r1
 8006d02:	611a      	str	r2, [r3, #16]
 8006d04:	e014      	b.n	8006d30 <HAL_ADC_Init+0x108>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	691a      	ldr	r2, [r3, #16]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	0092      	lsls	r2, r2, #2
 8006d12:	0892      	lsrs	r2, r2, #2
 8006d14:	611a      	str	r2, [r3, #16]
 8006d16:	4b79      	ldr	r3, [pc, #484]	; (8006efc <HAL_ADC_Init+0x2d4>)
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	4b78      	ldr	r3, [pc, #480]	; (8006efc <HAL_ADC_Init+0x2d4>)
 8006d1c:	4978      	ldr	r1, [pc, #480]	; (8006f00 <HAL_ADC_Init+0x2d8>)
 8006d1e:	400a      	ands	r2, r1
 8006d20:	601a      	str	r2, [r3, #0]
 8006d22:	4b76      	ldr	r3, [pc, #472]	; (8006efc <HAL_ADC_Init+0x2d4>)
 8006d24:	6819      	ldr	r1, [r3, #0]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685a      	ldr	r2, [r3, #4]
 8006d2a:	4b74      	ldr	r3, [pc, #464]	; (8006efc <HAL_ADC_Init+0x2d4>)
 8006d2c:	430a      	orrs	r2, r1
 8006d2e:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68da      	ldr	r2, [r3, #12]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2118      	movs	r1, #24
 8006d3c:	438a      	bics	r2, r1
 8006d3e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68d9      	ldr	r1, [r3, #12]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	689a      	ldr	r2, [r3, #8]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	430a      	orrs	r2, r1
 8006d50:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8006d52:	4b6a      	ldr	r3, [pc, #424]	; (8006efc <HAL_ADC_Init+0x2d4>)
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	4b69      	ldr	r3, [pc, #420]	; (8006efc <HAL_ADC_Init+0x2d4>)
 8006d58:	496a      	ldr	r1, [pc, #424]	; (8006f04 <HAL_ADC_Init+0x2dc>)
 8006d5a:	400a      	ands	r2, r1
 8006d5c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8006d5e:	4b67      	ldr	r3, [pc, #412]	; (8006efc <HAL_ADC_Init+0x2d4>)
 8006d60:	6819      	ldr	r1, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d66:	065a      	lsls	r2, r3, #25
 8006d68:	4b64      	ldr	r3, [pc, #400]	; (8006efc <HAL_ADC_Init+0x2d4>)
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	689a      	ldr	r2, [r3, #8]
 8006d74:	2380      	movs	r3, #128	; 0x80
 8006d76:	055b      	lsls	r3, r3, #21
 8006d78:	4013      	ands	r3, r2
 8006d7a:	d108      	bne.n	8006d8e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	689a      	ldr	r2, [r3, #8]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2180      	movs	r1, #128	; 0x80
 8006d88:	0549      	lsls	r1, r1, #21
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68da      	ldr	r2, [r3, #12]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	495b      	ldr	r1, [pc, #364]	; (8006f08 <HAL_ADC_Init+0x2e0>)
 8006d9a:	400a      	ands	r2, r1
 8006d9c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68d9      	ldr	r1, [r3, #12]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d101      	bne.n	8006db4 <HAL_ADC_Init+0x18c>
 8006db0:	2304      	movs	r3, #4
 8006db2:	e000      	b.n	8006db6 <HAL_ADC_Init+0x18e>
 8006db4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006db6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2020      	movs	r0, #32
 8006dbc:	5c1b      	ldrb	r3, [r3, r0]
 8006dbe:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8006dc0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	202c      	movs	r0, #44	; 0x2c
 8006dc6:	5c1b      	ldrb	r3, [r3, r0]
 8006dc8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006dca:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8006dd0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	699b      	ldr	r3, [r3, #24]
 8006dd6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8006dd8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8006de0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	430a      	orrs	r2, r1
 8006de8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dee:	23c2      	movs	r3, #194	; 0xc2
 8006df0:	33ff      	adds	r3, #255	; 0xff
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d00b      	beq.n	8006e0e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68d9      	ldr	r1, [r3, #12]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8006e04:	431a      	orrs	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	430a      	orrs	r2, r1
 8006e0c:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2221      	movs	r2, #33	; 0x21
 8006e12:	5c9b      	ldrb	r3, [r3, r2]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d11a      	bne.n	8006e4e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2220      	movs	r2, #32
 8006e1c:	5c9b      	ldrb	r3, [r3, r2]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d109      	bne.n	8006e36 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68da      	ldr	r2, [r3, #12]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2180      	movs	r1, #128	; 0x80
 8006e2e:	0249      	lsls	r1, r1, #9
 8006e30:	430a      	orrs	r2, r1
 8006e32:	60da      	str	r2, [r3, #12]
 8006e34:	e00b      	b.n	8006e4e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e3a:	2220      	movs	r2, #32
 8006e3c:	431a      	orrs	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e46:	2201      	movs	r2, #1
 8006e48:	431a      	orrs	r2, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d11f      	bne.n	8006e96 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	691a      	ldr	r2, [r3, #16]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	492a      	ldr	r1, [pc, #168]	; (8006f0c <HAL_ADC_Init+0x2e4>)
 8006e62:	400a      	ands	r2, r1
 8006e64:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	6919      	ldr	r1, [r3, #16]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006e74:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8006e7a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	430a      	orrs	r2, r1
 8006e82:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	691a      	ldr	r2, [r3, #16]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2101      	movs	r1, #1
 8006e90:	430a      	orrs	r2, r1
 8006e92:	611a      	str	r2, [r3, #16]
 8006e94:	e00e      	b.n	8006eb4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d107      	bne.n	8006eb4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	691a      	ldr	r2, [r3, #16]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2101      	movs	r1, #1
 8006eb0:	438a      	bics	r2, r1
 8006eb2:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	695a      	ldr	r2, [r3, #20]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2107      	movs	r1, #7
 8006ec0:	438a      	bics	r2, r1
 8006ec2:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	6959      	ldr	r1, [r3, #20]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee0:	2203      	movs	r2, #3
 8006ee2:	4393      	bics	r3, r2
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	431a      	orrs	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	0018      	movs	r0, r3
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	b002      	add	sp, #8
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	46c0      	nop			; (mov r8, r8)
 8006ef8:	fffffefd 	.word	0xfffffefd
 8006efc:	40012708 	.word	0x40012708
 8006f00:	ffc3ffff 	.word	0xffc3ffff
 8006f04:	fdffffff 	.word	0xfdffffff
 8006f08:	fffe0219 	.word	0xfffe0219
 8006f0c:	fffffc03 	.word	0xfffffc03

08006f10 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8006f10:	b5b0      	push	{r4, r5, r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f18:	230f      	movs	r3, #15
 8006f1a:	18fb      	adds	r3, r7, r3
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2250      	movs	r2, #80	; 0x50
 8006f24:	5c9b      	ldrb	r3, [r3, r2]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d101      	bne.n	8006f2e <HAL_ADC_Stop+0x1e>
 8006f2a:	2302      	movs	r3, #2
 8006f2c:	e02a      	b.n	8006f84 <HAL_ADC_Stop+0x74>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2250      	movs	r2, #80	; 0x50
 8006f32:	2101      	movs	r1, #1
 8006f34:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8006f36:	250f      	movs	r5, #15
 8006f38:	197c      	adds	r4, r7, r5
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	0018      	movs	r0, r3
 8006f3e:	f000 fa9b 	bl	8007478 <ADC_ConversionStop>
 8006f42:	0003      	movs	r3, r0
 8006f44:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006f46:	197b      	adds	r3, r7, r5
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d113      	bne.n	8006f76 <HAL_ADC_Stop+0x66>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8006f4e:	250f      	movs	r5, #15
 8006f50:	197c      	adds	r4, r7, r5
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	0018      	movs	r0, r3
 8006f56:	f000 fa2f 	bl	80073b8 <ADC_Disable>
 8006f5a:	0003      	movs	r3, r0
 8006f5c:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006f5e:	197b      	adds	r3, r7, r5
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d107      	bne.n	8006f76 <HAL_ADC_Stop+0x66>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f6a:	4a08      	ldr	r2, [pc, #32]	; (8006f8c <HAL_ADC_Stop+0x7c>)
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	2201      	movs	r2, #1
 8006f70:	431a      	orrs	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2250      	movs	r2, #80	; 0x50
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006f7e:	230f      	movs	r3, #15
 8006f80:	18fb      	adds	r3, r7, r3
 8006f82:	781b      	ldrb	r3, [r3, #0]
}
 8006f84:	0018      	movs	r0, r3
 8006f86:	46bd      	mov	sp, r7
 8006f88:	b004      	add	sp, #16
 8006f8a:	bdb0      	pop	{r4, r5, r7, pc}
 8006f8c:	fffffefe 	.word	0xfffffefe

08006f90 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	2b08      	cmp	r3, #8
 8006fa8:	d102      	bne.n	8006fb0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8006faa:	2308      	movs	r3, #8
 8006fac:	60fb      	str	r3, [r7, #12]
 8006fae:	e014      	b.n	8006fda <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	4013      	ands	r3, r2
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d10b      	bne.n	8006fd6 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc2:	2220      	movs	r2, #32
 8006fc4:	431a      	orrs	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2250      	movs	r2, #80	; 0x50
 8006fce:	2100      	movs	r1, #0
 8006fd0:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e06c      	b.n	80070b0 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8006fd6:	230c      	movs	r3, #12
 8006fd8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8006fda:	f7ff fdfd 	bl	8006bd8 <HAL_GetTick>
 8006fde:	0003      	movs	r3, r0
 8006fe0:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8006fe2:	e019      	b.n	8007018 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	d016      	beq.n	8007018 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d007      	beq.n	8007000 <HAL_ADC_PollForConversion+0x70>
 8006ff0:	f7ff fdf2 	bl	8006bd8 <HAL_GetTick>
 8006ff4:	0002      	movs	r2, r0
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	683a      	ldr	r2, [r7, #0]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d20b      	bcs.n	8007018 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007004:	2204      	movs	r2, #4
 8007006:	431a      	orrs	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2250      	movs	r2, #80	; 0x50
 8007010:	2100      	movs	r1, #0
 8007012:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	e04b      	b.n	80070b0 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	4013      	ands	r3, r2
 8007022:	d0df      	beq.n	8006fe4 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007028:	2280      	movs	r2, #128	; 0x80
 800702a:	0092      	lsls	r2, r2, #2
 800702c:	431a      	orrs	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68da      	ldr	r2, [r3, #12]
 8007038:	23c0      	movs	r3, #192	; 0xc0
 800703a:	011b      	lsls	r3, r3, #4
 800703c:	4013      	ands	r3, r2
 800703e:	d12e      	bne.n	800709e <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2220      	movs	r2, #32
 8007044:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007046:	2b00      	cmp	r3, #0
 8007048:	d129      	bne.n	800709e <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2208      	movs	r2, #8
 8007052:	4013      	ands	r3, r2
 8007054:	2b08      	cmp	r3, #8
 8007056:	d122      	bne.n	800709e <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	2204      	movs	r2, #4
 8007060:	4013      	ands	r3, r2
 8007062:	d110      	bne.n	8007086 <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	685a      	ldr	r2, [r3, #4]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	210c      	movs	r1, #12
 8007070:	438a      	bics	r2, r1
 8007072:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007078:	4a0f      	ldr	r2, [pc, #60]	; (80070b8 <HAL_ADC_PollForConversion+0x128>)
 800707a:	4013      	ands	r3, r2
 800707c:	2201      	movs	r2, #1
 800707e:	431a      	orrs	r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	655a      	str	r2, [r3, #84]	; 0x54
 8007084:	e00b      	b.n	800709e <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800708a:	2220      	movs	r2, #32
 800708c:	431a      	orrs	r2, r3
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007096:	2201      	movs	r2, #1
 8007098:	431a      	orrs	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d103      	bne.n	80070ae <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	220c      	movs	r2, #12
 80070ac:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	0018      	movs	r0, r3
 80070b2:	46bd      	mov	sp, r7
 80070b4:	b004      	add	sp, #16
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	fffffefe 	.word	0xfffffefe

080070bc <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80070bc:	b590      	push	{r4, r7, lr}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80070c4:	230f      	movs	r3, #15
 80070c6:	18fb      	adds	r3, r7, r3
 80070c8:	2200      	movs	r2, #0
 80070ca:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	2204      	movs	r2, #4
 80070d4:	4013      	ands	r3, r2
 80070d6:	d156      	bne.n	8007186 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2250      	movs	r2, #80	; 0x50
 80070dc:	5c9b      	ldrb	r3, [r3, r2]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d101      	bne.n	80070e6 <HAL_ADC_Start_IT+0x2a>
 80070e2:	2302      	movs	r3, #2
 80070e4:	e056      	b.n	8007194 <HAL_ADC_Start_IT+0xd8>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2250      	movs	r2, #80	; 0x50
 80070ea:	2101      	movs	r1, #1
 80070ec:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	69db      	ldr	r3, [r3, #28]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d007      	beq.n	8007106 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80070f6:	230f      	movs	r3, #15
 80070f8:	18fc      	adds	r4, r7, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	0018      	movs	r0, r3
 80070fe:	f000 f8fb 	bl	80072f8 <ADC_Enable>
 8007102:	0003      	movs	r3, r0
 8007104:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007106:	230f      	movs	r3, #15
 8007108:	18fb      	adds	r3, r7, r3
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d13e      	bne.n	800718e <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007114:	4a21      	ldr	r2, [pc, #132]	; (800719c <HAL_ADC_Start_IT+0xe0>)
 8007116:	4013      	ands	r3, r2
 8007118:	2280      	movs	r2, #128	; 0x80
 800711a:	0052      	lsls	r2, r2, #1
 800711c:	431a      	orrs	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2250      	movs	r2, #80	; 0x50
 800712c:	2100      	movs	r1, #0
 800712e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	221c      	movs	r2, #28
 8007136:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	695b      	ldr	r3, [r3, #20]
 800713c:	2b08      	cmp	r3, #8
 800713e:	d110      	bne.n	8007162 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	685a      	ldr	r2, [r3, #4]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2104      	movs	r1, #4
 800714c:	438a      	bics	r2, r1
 800714e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	685a      	ldr	r2, [r3, #4]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2118      	movs	r1, #24
 800715c:	430a      	orrs	r2, r1
 800715e:	605a      	str	r2, [r3, #4]
          break;
 8007160:	e008      	b.n	8007174 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	685a      	ldr	r2, [r3, #4]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	211c      	movs	r1, #28
 800716e:	430a      	orrs	r2, r1
 8007170:	605a      	str	r2, [r3, #4]
          break;
 8007172:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689a      	ldr	r2, [r3, #8]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2104      	movs	r1, #4
 8007180:	430a      	orrs	r2, r1
 8007182:	609a      	str	r2, [r3, #8]
 8007184:	e003      	b.n	800718e <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007186:	230f      	movs	r3, #15
 8007188:	18fb      	adds	r3, r7, r3
 800718a:	2202      	movs	r2, #2
 800718c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800718e:	230f      	movs	r3, #15
 8007190:	18fb      	adds	r3, r7, r3
 8007192:	781b      	ldrb	r3, [r3, #0]
}
 8007194:	0018      	movs	r0, r3
 8007196:	46bd      	mov	sp, r7
 8007198:	b005      	add	sp, #20
 800719a:	bd90      	pop	{r4, r7, pc}
 800719c:	fffff0fe 	.word	0xfffff0fe

080071a0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80071ae:	0018      	movs	r0, r3
 80071b0:	46bd      	mov	sp, r7
 80071b2:	b002      	add	sp, #8
 80071b4:	bd80      	pop	{r7, pc}
	...

080071b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2250      	movs	r2, #80	; 0x50
 80071c6:	5c9b      	ldrb	r3, [r3, r2]
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d101      	bne.n	80071d0 <HAL_ADC_ConfigChannel+0x18>
 80071cc:	2302      	movs	r3, #2
 80071ce:	e085      	b.n	80072dc <HAL_ADC_ConfigChannel+0x124>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2250      	movs	r2, #80	; 0x50
 80071d4:	2101      	movs	r1, #1
 80071d6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	2204      	movs	r2, #4
 80071e0:	4013      	ands	r3, r2
 80071e2:	d00b      	beq.n	80071fc <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071e8:	2220      	movs	r2, #32
 80071ea:	431a      	orrs	r2, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2250      	movs	r2, #80	; 0x50
 80071f4:	2100      	movs	r1, #0
 80071f6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e06f      	b.n	80072dc <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	4a38      	ldr	r2, [pc, #224]	; (80072e4 <HAL_ADC_ConfigChannel+0x12c>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d035      	beq.n	8007272 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	035b      	lsls	r3, r3, #13
 8007212:	0b5a      	lsrs	r2, r3, #13
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	430a      	orrs	r2, r1
 800721a:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	2380      	movs	r3, #128	; 0x80
 8007222:	02db      	lsls	r3, r3, #11
 8007224:	4013      	ands	r3, r2
 8007226:	d009      	beq.n	800723c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8007228:	4b2f      	ldr	r3, [pc, #188]	; (80072e8 <HAL_ADC_ConfigChannel+0x130>)
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	4b2e      	ldr	r3, [pc, #184]	; (80072e8 <HAL_ADC_ConfigChannel+0x130>)
 800722e:	2180      	movs	r1, #128	; 0x80
 8007230:	0409      	lsls	r1, r1, #16
 8007232:	430a      	orrs	r2, r1
 8007234:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8007236:	200a      	movs	r0, #10
 8007238:	f000 f964 	bl	8007504 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	2380      	movs	r3, #128	; 0x80
 8007242:	029b      	lsls	r3, r3, #10
 8007244:	4013      	ands	r3, r2
 8007246:	d006      	beq.n	8007256 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8007248:	4b27      	ldr	r3, [pc, #156]	; (80072e8 <HAL_ADC_ConfigChannel+0x130>)
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	4b26      	ldr	r3, [pc, #152]	; (80072e8 <HAL_ADC_ConfigChannel+0x130>)
 800724e:	2180      	movs	r1, #128	; 0x80
 8007250:	03c9      	lsls	r1, r1, #15
 8007252:	430a      	orrs	r2, r1
 8007254:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	2380      	movs	r3, #128	; 0x80
 800725c:	025b      	lsls	r3, r3, #9
 800725e:	4013      	ands	r3, r2
 8007260:	d037      	beq.n	80072d2 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8007262:	4b21      	ldr	r3, [pc, #132]	; (80072e8 <HAL_ADC_ConfigChannel+0x130>)
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	4b20      	ldr	r3, [pc, #128]	; (80072e8 <HAL_ADC_ConfigChannel+0x130>)
 8007268:	2180      	movs	r1, #128	; 0x80
 800726a:	0449      	lsls	r1, r1, #17
 800726c:	430a      	orrs	r2, r1
 800726e:	601a      	str	r2, [r3, #0]
 8007270:	e02f      	b.n	80072d2 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	035b      	lsls	r3, r3, #13
 800727e:	0b5b      	lsrs	r3, r3, #13
 8007280:	43d9      	mvns	r1, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	400a      	ands	r2, r1
 8007288:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	2380      	movs	r3, #128	; 0x80
 8007290:	02db      	lsls	r3, r3, #11
 8007292:	4013      	ands	r3, r2
 8007294:	d005      	beq.n	80072a2 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8007296:	4b14      	ldr	r3, [pc, #80]	; (80072e8 <HAL_ADC_ConfigChannel+0x130>)
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	4b13      	ldr	r3, [pc, #76]	; (80072e8 <HAL_ADC_ConfigChannel+0x130>)
 800729c:	4913      	ldr	r1, [pc, #76]	; (80072ec <HAL_ADC_ConfigChannel+0x134>)
 800729e:	400a      	ands	r2, r1
 80072a0:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	2380      	movs	r3, #128	; 0x80
 80072a8:	029b      	lsls	r3, r3, #10
 80072aa:	4013      	ands	r3, r2
 80072ac:	d005      	beq.n	80072ba <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80072ae:	4b0e      	ldr	r3, [pc, #56]	; (80072e8 <HAL_ADC_ConfigChannel+0x130>)
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	4b0d      	ldr	r3, [pc, #52]	; (80072e8 <HAL_ADC_ConfigChannel+0x130>)
 80072b4:	490e      	ldr	r1, [pc, #56]	; (80072f0 <HAL_ADC_ConfigChannel+0x138>)
 80072b6:	400a      	ands	r2, r1
 80072b8:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	2380      	movs	r3, #128	; 0x80
 80072c0:	025b      	lsls	r3, r3, #9
 80072c2:	4013      	ands	r3, r2
 80072c4:	d005      	beq.n	80072d2 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 80072c6:	4b08      	ldr	r3, [pc, #32]	; (80072e8 <HAL_ADC_ConfigChannel+0x130>)
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	4b07      	ldr	r3, [pc, #28]	; (80072e8 <HAL_ADC_ConfigChannel+0x130>)
 80072cc:	4909      	ldr	r1, [pc, #36]	; (80072f4 <HAL_ADC_ConfigChannel+0x13c>)
 80072ce:	400a      	ands	r2, r1
 80072d0:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2250      	movs	r2, #80	; 0x50
 80072d6:	2100      	movs	r1, #0
 80072d8:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	0018      	movs	r0, r3
 80072de:	46bd      	mov	sp, r7
 80072e0:	b002      	add	sp, #8
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	00001001 	.word	0x00001001
 80072e8:	40012708 	.word	0x40012708
 80072ec:	ff7fffff 	.word	0xff7fffff
 80072f0:	ffbfffff 	.word	0xffbfffff
 80072f4:	feffffff 	.word	0xfeffffff

080072f8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007300:	2300      	movs	r3, #0
 8007302:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	2203      	movs	r2, #3
 800730c:	4013      	ands	r3, r2
 800730e:	2b01      	cmp	r3, #1
 8007310:	d108      	bne.n	8007324 <ADC_Enable+0x2c>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2201      	movs	r2, #1
 800731a:	4013      	ands	r3, r2
 800731c:	2b01      	cmp	r3, #1
 800731e:	d101      	bne.n	8007324 <ADC_Enable+0x2c>
 8007320:	2301      	movs	r3, #1
 8007322:	e000      	b.n	8007326 <ADC_Enable+0x2e>
 8007324:	2300      	movs	r3, #0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d13f      	bne.n	80073aa <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	4a20      	ldr	r2, [pc, #128]	; (80073b4 <ADC_Enable+0xbc>)
 8007332:	4013      	ands	r3, r2
 8007334:	d00d      	beq.n	8007352 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800733a:	2210      	movs	r2, #16
 800733c:	431a      	orrs	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007346:	2201      	movs	r2, #1
 8007348:	431a      	orrs	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e02c      	b.n	80073ac <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	689a      	ldr	r2, [r3, #8]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2101      	movs	r1, #1
 800735e:	430a      	orrs	r2, r1
 8007360:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8007362:	2001      	movs	r0, #1
 8007364:	f000 f8ce 	bl	8007504 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8007368:	f7ff fc36 	bl	8006bd8 <HAL_GetTick>
 800736c:	0003      	movs	r3, r0
 800736e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8007370:	e014      	b.n	800739c <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007372:	f7ff fc31 	bl	8006bd8 <HAL_GetTick>
 8007376:	0002      	movs	r2, r0
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	2b0a      	cmp	r3, #10
 800737e:	d90d      	bls.n	800739c <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007384:	2210      	movs	r2, #16
 8007386:	431a      	orrs	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007390:	2201      	movs	r2, #1
 8007392:	431a      	orrs	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	e007      	b.n	80073ac <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2201      	movs	r2, #1
 80073a4:	4013      	ands	r3, r2
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d1e3      	bne.n	8007372 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	0018      	movs	r0, r3
 80073ae:	46bd      	mov	sp, r7
 80073b0:	b004      	add	sp, #16
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	80000017 	.word	0x80000017

080073b8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80073c0:	2300      	movs	r3, #0
 80073c2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	2203      	movs	r2, #3
 80073cc:	4013      	ands	r3, r2
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d108      	bne.n	80073e4 <ADC_Disable+0x2c>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2201      	movs	r2, #1
 80073da:	4013      	ands	r3, r2
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d101      	bne.n	80073e4 <ADC_Disable+0x2c>
 80073e0:	2301      	movs	r3, #1
 80073e2:	e000      	b.n	80073e6 <ADC_Disable+0x2e>
 80073e4:	2300      	movs	r3, #0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d041      	beq.n	800746e <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	2205      	movs	r2, #5
 80073f2:	4013      	ands	r3, r2
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d110      	bne.n	800741a <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	689a      	ldr	r2, [r3, #8]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2102      	movs	r1, #2
 8007404:	430a      	orrs	r2, r1
 8007406:	609a      	str	r2, [r3, #8]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2203      	movs	r2, #3
 800740e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007410:	f7ff fbe2 	bl	8006bd8 <HAL_GetTick>
 8007414:	0003      	movs	r3, r0
 8007416:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8007418:	e022      	b.n	8007460 <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800741e:	2210      	movs	r2, #16
 8007420:	431a      	orrs	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800742a:	2201      	movs	r2, #1
 800742c:	431a      	orrs	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e01c      	b.n	8007470 <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007436:	f7ff fbcf 	bl	8006bd8 <HAL_GetTick>
 800743a:	0002      	movs	r2, r0
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	2b0a      	cmp	r3, #10
 8007442:	d90d      	bls.n	8007460 <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007448:	2210      	movs	r2, #16
 800744a:	431a      	orrs	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007454:	2201      	movs	r2, #1
 8007456:	431a      	orrs	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	e007      	b.n	8007470 <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	2201      	movs	r2, #1
 8007468:	4013      	ands	r3, r2
 800746a:	2b01      	cmp	r3, #1
 800746c:	d0e3      	beq.n	8007436 <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	0018      	movs	r0, r3
 8007472:	46bd      	mov	sp, r7
 8007474:	b004      	add	sp, #16
 8007476:	bd80      	pop	{r7, pc}

08007478 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007480:	2300      	movs	r3, #0
 8007482:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	2204      	movs	r2, #4
 800748c:	4013      	ands	r3, r2
 800748e:	d034      	beq.n	80074fa <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	2204      	movs	r2, #4
 8007498:	4013      	ands	r3, r2
 800749a:	2b04      	cmp	r3, #4
 800749c:	d10d      	bne.n	80074ba <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	2202      	movs	r2, #2
 80074a6:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80074a8:	d107      	bne.n	80074ba <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	689a      	ldr	r2, [r3, #8]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2110      	movs	r1, #16
 80074b6:	430a      	orrs	r2, r1
 80074b8:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80074ba:	f7ff fb8d 	bl	8006bd8 <HAL_GetTick>
 80074be:	0003      	movs	r3, r0
 80074c0:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80074c2:	e014      	b.n	80074ee <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80074c4:	f7ff fb88 	bl	8006bd8 <HAL_GetTick>
 80074c8:	0002      	movs	r2, r0
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	2b0a      	cmp	r3, #10
 80074d0:	d90d      	bls.n	80074ee <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d6:	2210      	movs	r2, #16
 80074d8:	431a      	orrs	r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074e2:	2201      	movs	r2, #1
 80074e4:	431a      	orrs	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e006      	b.n	80074fc <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	2204      	movs	r2, #4
 80074f6:	4013      	ands	r3, r2
 80074f8:	d1e4      	bne.n	80074c4 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	0018      	movs	r0, r3
 80074fe:	46bd      	mov	sp, r7
 8007500:	b004      	add	sp, #16
 8007502:	bd80      	pop	{r7, pc}

08007504 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800750c:	4b0a      	ldr	r3, [pc, #40]	; (8007538 <ADC_DelayMicroSecond+0x34>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	490a      	ldr	r1, [pc, #40]	; (800753c <ADC_DelayMicroSecond+0x38>)
 8007512:	0018      	movs	r0, r3
 8007514:	f7f8 fe00 	bl	8000118 <__udivsi3>
 8007518:	0003      	movs	r3, r0
 800751a:	001a      	movs	r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4353      	muls	r3, r2
 8007520:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8007522:	e002      	b.n	800752a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	3b01      	subs	r3, #1
 8007528:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1f9      	bne.n	8007524 <ADC_DelayMicroSecond+0x20>
  } 
}
 8007530:	46c0      	nop			; (mov r8, r8)
 8007532:	46bd      	mov	sp, r7
 8007534:	b004      	add	sp, #16
 8007536:	bd80      	pop	{r7, pc}
 8007538:	20000010 	.word	0x20000010
 800753c:	000f4240 	.word	0x000f4240

08007540 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	0002      	movs	r2, r0
 8007548:	1dfb      	adds	r3, r7, #7
 800754a:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800754c:	1dfb      	adds	r3, r7, #7
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	001a      	movs	r2, r3
 8007552:	231f      	movs	r3, #31
 8007554:	401a      	ands	r2, r3
 8007556:	4b04      	ldr	r3, [pc, #16]	; (8007568 <NVIC_EnableIRQ+0x28>)
 8007558:	2101      	movs	r1, #1
 800755a:	4091      	lsls	r1, r2
 800755c:	000a      	movs	r2, r1
 800755e:	601a      	str	r2, [r3, #0]
}
 8007560:	46c0      	nop			; (mov r8, r8)
 8007562:	46bd      	mov	sp, r7
 8007564:	b002      	add	sp, #8
 8007566:	bd80      	pop	{r7, pc}
 8007568:	e000e100 	.word	0xe000e100

0800756c <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	0002      	movs	r2, r0
 8007574:	1dfb      	adds	r3, r7, #7
 8007576:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8007578:	1dfb      	adds	r3, r7, #7
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	001a      	movs	r2, r3
 800757e:	231f      	movs	r3, #31
 8007580:	4013      	ands	r3, r2
 8007582:	4905      	ldr	r1, [pc, #20]	; (8007598 <NVIC_DisableIRQ+0x2c>)
 8007584:	2201      	movs	r2, #1
 8007586:	409a      	lsls	r2, r3
 8007588:	0013      	movs	r3, r2
 800758a:	2280      	movs	r2, #128	; 0x80
 800758c:	508b      	str	r3, [r1, r2]
}
 800758e:	46c0      	nop			; (mov r8, r8)
 8007590:	46bd      	mov	sp, r7
 8007592:	b002      	add	sp, #8
 8007594:	bd80      	pop	{r7, pc}
 8007596:	46c0      	nop			; (mov r8, r8)
 8007598:	e000e100 	.word	0xe000e100

0800759c <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	0002      	movs	r2, r0
 80075a4:	1dfb      	adds	r3, r7, #7
 80075a6:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80075a8:	1dfb      	adds	r3, r7, #7
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	001a      	movs	r2, r3
 80075ae:	231f      	movs	r3, #31
 80075b0:	4013      	ands	r3, r2
 80075b2:	4905      	ldr	r1, [pc, #20]	; (80075c8 <NVIC_ClearPendingIRQ+0x2c>)
 80075b4:	2201      	movs	r2, #1
 80075b6:	409a      	lsls	r2, r3
 80075b8:	23c0      	movs	r3, #192	; 0xc0
 80075ba:	005b      	lsls	r3, r3, #1
 80075bc:	50ca      	str	r2, [r1, r3]
}
 80075be:	46c0      	nop			; (mov r8, r8)
 80075c0:	46bd      	mov	sp, r7
 80075c2:	b002      	add	sp, #8
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	46c0      	nop			; (mov r8, r8)
 80075c8:	e000e100 	.word	0xe000e100

080075cc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80075cc:	b590      	push	{r4, r7, lr}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	0002      	movs	r2, r0
 80075d4:	6039      	str	r1, [r7, #0]
 80075d6:	1dfb      	adds	r3, r7, #7
 80075d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80075da:	1dfb      	adds	r3, r7, #7
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	2b7f      	cmp	r3, #127	; 0x7f
 80075e0:	d932      	bls.n	8007648 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80075e2:	4a2f      	ldr	r2, [pc, #188]	; (80076a0 <NVIC_SetPriority+0xd4>)
 80075e4:	1dfb      	adds	r3, r7, #7
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	0019      	movs	r1, r3
 80075ea:	230f      	movs	r3, #15
 80075ec:	400b      	ands	r3, r1
 80075ee:	3b08      	subs	r3, #8
 80075f0:	089b      	lsrs	r3, r3, #2
 80075f2:	3306      	adds	r3, #6
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	18d3      	adds	r3, r2, r3
 80075f8:	3304      	adds	r3, #4
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	1dfa      	adds	r2, r7, #7
 80075fe:	7812      	ldrb	r2, [r2, #0]
 8007600:	0011      	movs	r1, r2
 8007602:	2203      	movs	r2, #3
 8007604:	400a      	ands	r2, r1
 8007606:	00d2      	lsls	r2, r2, #3
 8007608:	21ff      	movs	r1, #255	; 0xff
 800760a:	4091      	lsls	r1, r2
 800760c:	000a      	movs	r2, r1
 800760e:	43d2      	mvns	r2, r2
 8007610:	401a      	ands	r2, r3
 8007612:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	019b      	lsls	r3, r3, #6
 8007618:	22ff      	movs	r2, #255	; 0xff
 800761a:	401a      	ands	r2, r3
 800761c:	1dfb      	adds	r3, r7, #7
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	0018      	movs	r0, r3
 8007622:	2303      	movs	r3, #3
 8007624:	4003      	ands	r3, r0
 8007626:	00db      	lsls	r3, r3, #3
 8007628:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800762a:	481d      	ldr	r0, [pc, #116]	; (80076a0 <NVIC_SetPriority+0xd4>)
 800762c:	1dfb      	adds	r3, r7, #7
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	001c      	movs	r4, r3
 8007632:	230f      	movs	r3, #15
 8007634:	4023      	ands	r3, r4
 8007636:	3b08      	subs	r3, #8
 8007638:	089b      	lsrs	r3, r3, #2
 800763a:	430a      	orrs	r2, r1
 800763c:	3306      	adds	r3, #6
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	18c3      	adds	r3, r0, r3
 8007642:	3304      	adds	r3, #4
 8007644:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8007646:	e027      	b.n	8007698 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007648:	4a16      	ldr	r2, [pc, #88]	; (80076a4 <NVIC_SetPriority+0xd8>)
 800764a:	1dfb      	adds	r3, r7, #7
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	b25b      	sxtb	r3, r3
 8007650:	089b      	lsrs	r3, r3, #2
 8007652:	33c0      	adds	r3, #192	; 0xc0
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	589b      	ldr	r3, [r3, r2]
 8007658:	1dfa      	adds	r2, r7, #7
 800765a:	7812      	ldrb	r2, [r2, #0]
 800765c:	0011      	movs	r1, r2
 800765e:	2203      	movs	r2, #3
 8007660:	400a      	ands	r2, r1
 8007662:	00d2      	lsls	r2, r2, #3
 8007664:	21ff      	movs	r1, #255	; 0xff
 8007666:	4091      	lsls	r1, r2
 8007668:	000a      	movs	r2, r1
 800766a:	43d2      	mvns	r2, r2
 800766c:	401a      	ands	r2, r3
 800766e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	019b      	lsls	r3, r3, #6
 8007674:	22ff      	movs	r2, #255	; 0xff
 8007676:	401a      	ands	r2, r3
 8007678:	1dfb      	adds	r3, r7, #7
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	0018      	movs	r0, r3
 800767e:	2303      	movs	r3, #3
 8007680:	4003      	ands	r3, r0
 8007682:	00db      	lsls	r3, r3, #3
 8007684:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007686:	4807      	ldr	r0, [pc, #28]	; (80076a4 <NVIC_SetPriority+0xd8>)
 8007688:	1dfb      	adds	r3, r7, #7
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	b25b      	sxtb	r3, r3
 800768e:	089b      	lsrs	r3, r3, #2
 8007690:	430a      	orrs	r2, r1
 8007692:	33c0      	adds	r3, #192	; 0xc0
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	501a      	str	r2, [r3, r0]
}
 8007698:	46c0      	nop			; (mov r8, r8)
 800769a:	46bd      	mov	sp, r7
 800769c:	b003      	add	sp, #12
 800769e:	bd90      	pop	{r4, r7, pc}
 80076a0:	e000ed00 	.word	0xe000ed00
 80076a4:	e000e100 	.word	0xe000e100

080076a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	3b01      	subs	r3, #1
 80076b4:	4a0c      	ldr	r2, [pc, #48]	; (80076e8 <SysTick_Config+0x40>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d901      	bls.n	80076be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80076ba:	2301      	movs	r3, #1
 80076bc:	e010      	b.n	80076e0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80076be:	4b0b      	ldr	r3, [pc, #44]	; (80076ec <SysTick_Config+0x44>)
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	3a01      	subs	r2, #1
 80076c4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80076c6:	2301      	movs	r3, #1
 80076c8:	425b      	negs	r3, r3
 80076ca:	2103      	movs	r1, #3
 80076cc:	0018      	movs	r0, r3
 80076ce:	f7ff ff7d 	bl	80075cc <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80076d2:	4b06      	ldr	r3, [pc, #24]	; (80076ec <SysTick_Config+0x44>)
 80076d4:	2200      	movs	r2, #0
 80076d6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80076d8:	4b04      	ldr	r3, [pc, #16]	; (80076ec <SysTick_Config+0x44>)
 80076da:	2207      	movs	r2, #7
 80076dc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80076de:	2300      	movs	r3, #0
}
 80076e0:	0018      	movs	r0, r3
 80076e2:	46bd      	mov	sp, r7
 80076e4:	b002      	add	sp, #8
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	00ffffff 	.word	0x00ffffff
 80076ec:	e000e010 	.word	0xe000e010

080076f0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60b9      	str	r1, [r7, #8]
 80076f8:	607a      	str	r2, [r7, #4]
 80076fa:	210f      	movs	r1, #15
 80076fc:	187b      	adds	r3, r7, r1
 80076fe:	1c02      	adds	r2, r0, #0
 8007700:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8007702:	68ba      	ldr	r2, [r7, #8]
 8007704:	187b      	adds	r3, r7, r1
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	b25b      	sxtb	r3, r3
 800770a:	0011      	movs	r1, r2
 800770c:	0018      	movs	r0, r3
 800770e:	f7ff ff5d 	bl	80075cc <NVIC_SetPriority>
}
 8007712:	46c0      	nop			; (mov r8, r8)
 8007714:	46bd      	mov	sp, r7
 8007716:	b004      	add	sp, #16
 8007718:	bd80      	pop	{r7, pc}

0800771a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b082      	sub	sp, #8
 800771e:	af00      	add	r7, sp, #0
 8007720:	0002      	movs	r2, r0
 8007722:	1dfb      	adds	r3, r7, #7
 8007724:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007726:	1dfb      	adds	r3, r7, #7
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	b25b      	sxtb	r3, r3
 800772c:	0018      	movs	r0, r3
 800772e:	f7ff ff07 	bl	8007540 <NVIC_EnableIRQ>
}
 8007732:	46c0      	nop			; (mov r8, r8)
 8007734:	46bd      	mov	sp, r7
 8007736:	b002      	add	sp, #8
 8007738:	bd80      	pop	{r7, pc}

0800773a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800773a:	b580      	push	{r7, lr}
 800773c:	b082      	sub	sp, #8
 800773e:	af00      	add	r7, sp, #0
 8007740:	0002      	movs	r2, r0
 8007742:	1dfb      	adds	r3, r7, #7
 8007744:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007746:	1dfb      	adds	r3, r7, #7
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	b25b      	sxtb	r3, r3
 800774c:	0018      	movs	r0, r3
 800774e:	f7ff ff0d 	bl	800756c <NVIC_DisableIRQ>
}
 8007752:	46c0      	nop			; (mov r8, r8)
 8007754:	46bd      	mov	sp, r7
 8007756:	b002      	add	sp, #8
 8007758:	bd80      	pop	{r7, pc}

0800775a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b082      	sub	sp, #8
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	0018      	movs	r0, r3
 8007766:	f7ff ff9f 	bl	80076a8 <SysTick_Config>
 800776a:	0003      	movs	r3, r0
}
 800776c:	0018      	movs	r0, r3
 800776e:	46bd      	mov	sp, r7
 8007770:	b002      	add	sp, #8
 8007772:	bd80      	pop	{r7, pc}

08007774 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	0002      	movs	r2, r0
 800777c:	1dfb      	adds	r3, r7, #7
 800777e:	701a      	strb	r2, [r3, #0]
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8007780:	1dfb      	adds	r3, r7, #7
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	b25b      	sxtb	r3, r3
 8007786:	0018      	movs	r0, r3
 8007788:	f7ff ff08 	bl	800759c <NVIC_ClearPendingIRQ>
}
 800778c:	46c0      	nop			; (mov r8, r8)
 800778e:	46bd      	mov	sp, r7
 8007790:	b002      	add	sp, #8
 8007792:	bd80      	pop	{r7, pc}

08007794 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d101      	bne.n	80077a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e061      	b.n	800786a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a32      	ldr	r2, [pc, #200]	; (8007874 <HAL_DMA_Init+0xe0>)
 80077ac:	4694      	mov	ip, r2
 80077ae:	4463      	add	r3, ip
 80077b0:	2114      	movs	r1, #20
 80077b2:	0018      	movs	r0, r3
 80077b4:	f7f8 fcb0 	bl	8000118 <__udivsi3>
 80077b8:	0003      	movs	r3, r0
 80077ba:	009a      	lsls	r2, r3, #2
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a2d      	ldr	r2, [pc, #180]	; (8007878 <HAL_DMA_Init+0xe4>)
 80077c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2225      	movs	r2, #37	; 0x25
 80077ca:	2102      	movs	r1, #2
 80077cc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	4a28      	ldr	r2, [pc, #160]	; (800787c <HAL_DMA_Init+0xe8>)
 80077da:	4013      	ands	r3, r2
 80077dc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80077e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80077f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	699b      	ldr	r3, [r3, #24]
 80077f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80077fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6a1b      	ldr	r3, [r3, #32]
 8007804:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	4313      	orrs	r3, r2
 800780a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	689a      	ldr	r2, [r3, #8]
 8007818:	2380      	movs	r3, #128	; 0x80
 800781a:	01db      	lsls	r3, r3, #7
 800781c:	429a      	cmp	r2, r3
 800781e:	d018      	beq.n	8007852 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007820:	4b17      	ldr	r3, [pc, #92]	; (8007880 <HAL_DMA_Init+0xec>)
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007828:	211c      	movs	r1, #28
 800782a:	400b      	ands	r3, r1
 800782c:	210f      	movs	r1, #15
 800782e:	4099      	lsls	r1, r3
 8007830:	000b      	movs	r3, r1
 8007832:	43d9      	mvns	r1, r3
 8007834:	4b12      	ldr	r3, [pc, #72]	; (8007880 <HAL_DMA_Init+0xec>)
 8007836:	400a      	ands	r2, r1
 8007838:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800783a:	4b11      	ldr	r3, [pc, #68]	; (8007880 <HAL_DMA_Init+0xec>)
 800783c:	6819      	ldr	r1, [r3, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	685a      	ldr	r2, [r3, #4]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007846:	201c      	movs	r0, #28
 8007848:	4003      	ands	r3, r0
 800784a:	409a      	lsls	r2, r3
 800784c:	4b0c      	ldr	r3, [pc, #48]	; (8007880 <HAL_DMA_Init+0xec>)
 800784e:	430a      	orrs	r2, r1
 8007850:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2225      	movs	r2, #37	; 0x25
 800785c:	2101      	movs	r1, #1
 800785e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2224      	movs	r2, #36	; 0x24
 8007864:	2100      	movs	r1, #0
 8007866:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	0018      	movs	r0, r3
 800786c:	46bd      	mov	sp, r7
 800786e:	b004      	add	sp, #16
 8007870:	bd80      	pop	{r7, pc}
 8007872:	46c0      	nop			; (mov r8, r8)
 8007874:	bffdfff8 	.word	0xbffdfff8
 8007878:	40020000 	.word	0x40020000
 800787c:	ffff800f 	.word	0xffff800f
 8007880:	400200a8 	.word	0x400200a8

08007884 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800788c:	230f      	movs	r3, #15
 800788e:	18fb      	adds	r3, r7, r3
 8007890:	2200      	movs	r2, #0
 8007892:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2225      	movs	r2, #37	; 0x25
 8007898:	5c9b      	ldrb	r3, [r3, r2]
 800789a:	b2db      	uxtb	r3, r3
 800789c:	2b02      	cmp	r3, #2
 800789e:	d007      	beq.n	80078b0 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2204      	movs	r2, #4
 80078a4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80078a6:	230f      	movs	r3, #15
 80078a8:	18fb      	adds	r3, r7, r3
 80078aa:	2201      	movs	r2, #1
 80078ac:	701a      	strb	r2, [r3, #0]
 80078ae:	e02a      	b.n	8007906 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	210e      	movs	r1, #14
 80078bc:	438a      	bics	r2, r1
 80078be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2101      	movs	r1, #1
 80078cc:	438a      	bics	r2, r1
 80078ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078d4:	221c      	movs	r2, #28
 80078d6:	401a      	ands	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078dc:	2101      	movs	r1, #1
 80078de:	4091      	lsls	r1, r2
 80078e0:	000a      	movs	r2, r1
 80078e2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2225      	movs	r2, #37	; 0x25
 80078e8:	2101      	movs	r1, #1
 80078ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2224      	movs	r2, #36	; 0x24
 80078f0:	2100      	movs	r1, #0
 80078f2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d004      	beq.n	8007906 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	0010      	movs	r0, r2
 8007904:	4798      	blx	r3
    }
  }
  return status;
 8007906:	230f      	movs	r3, #15
 8007908:	18fb      	adds	r3, r7, r3
 800790a:	781b      	ldrb	r3, [r3, #0]
}
 800790c:	0018      	movs	r0, r3
 800790e:	46bd      	mov	sp, r7
 8007910:	b004      	add	sp, #16
 8007912:	bd80      	pop	{r7, pc}

08007914 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007930:	221c      	movs	r2, #28
 8007932:	4013      	ands	r3, r2
 8007934:	2204      	movs	r2, #4
 8007936:	409a      	lsls	r2, r3
 8007938:	0013      	movs	r3, r2
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	4013      	ands	r3, r2
 800793e:	d026      	beq.n	800798e <HAL_DMA_IRQHandler+0x7a>
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	2204      	movs	r2, #4
 8007944:	4013      	ands	r3, r2
 8007946:	d022      	beq.n	800798e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2220      	movs	r2, #32
 8007950:	4013      	ands	r3, r2
 8007952:	d107      	bne.n	8007964 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2104      	movs	r1, #4
 8007960:	438a      	bics	r2, r1
 8007962:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007968:	221c      	movs	r2, #28
 800796a:	401a      	ands	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007970:	2104      	movs	r1, #4
 8007972:	4091      	lsls	r1, r2
 8007974:	000a      	movs	r2, r1
 8007976:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800797c:	2b00      	cmp	r3, #0
 800797e:	d100      	bne.n	8007982 <HAL_DMA_IRQHandler+0x6e>
 8007980:	e071      	b.n	8007a66 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	0010      	movs	r0, r2
 800798a:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800798c:	e06b      	b.n	8007a66 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007992:	221c      	movs	r2, #28
 8007994:	4013      	ands	r3, r2
 8007996:	2202      	movs	r2, #2
 8007998:	409a      	lsls	r2, r3
 800799a:	0013      	movs	r3, r2
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	4013      	ands	r3, r2
 80079a0:	d02d      	beq.n	80079fe <HAL_DMA_IRQHandler+0xea>
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	2202      	movs	r2, #2
 80079a6:	4013      	ands	r3, r2
 80079a8:	d029      	beq.n	80079fe <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2220      	movs	r2, #32
 80079b2:	4013      	ands	r3, r2
 80079b4:	d10b      	bne.n	80079ce <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	210a      	movs	r1, #10
 80079c2:	438a      	bics	r2, r1
 80079c4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2225      	movs	r2, #37	; 0x25
 80079ca:	2101      	movs	r1, #1
 80079cc:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079d2:	221c      	movs	r2, #28
 80079d4:	401a      	ands	r2, r3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079da:	2102      	movs	r1, #2
 80079dc:	4091      	lsls	r1, r2
 80079de:	000a      	movs	r2, r1
 80079e0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2224      	movs	r2, #36	; 0x24
 80079e6:	2100      	movs	r1, #0
 80079e8:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d039      	beq.n	8007a66 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	0010      	movs	r0, r2
 80079fa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80079fc:	e033      	b.n	8007a66 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a02:	221c      	movs	r2, #28
 8007a04:	4013      	ands	r3, r2
 8007a06:	2208      	movs	r2, #8
 8007a08:	409a      	lsls	r2, r3
 8007a0a:	0013      	movs	r3, r2
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	4013      	ands	r3, r2
 8007a10:	d02a      	beq.n	8007a68 <HAL_DMA_IRQHandler+0x154>
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	2208      	movs	r2, #8
 8007a16:	4013      	ands	r3, r2
 8007a18:	d026      	beq.n	8007a68 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	210e      	movs	r1, #14
 8007a26:	438a      	bics	r2, r1
 8007a28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a2e:	221c      	movs	r2, #28
 8007a30:	401a      	ands	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a36:	2101      	movs	r1, #1
 8007a38:	4091      	lsls	r1, r2
 8007a3a:	000a      	movs	r2, r1
 8007a3c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2201      	movs	r2, #1
 8007a42:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2225      	movs	r2, #37	; 0x25
 8007a48:	2101      	movs	r1, #1
 8007a4a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2224      	movs	r2, #36	; 0x24
 8007a50:	2100      	movs	r1, #0
 8007a52:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d005      	beq.n	8007a68 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	0010      	movs	r0, r2
 8007a64:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007a66:	46c0      	nop			; (mov r8, r8)
 8007a68:	46c0      	nop			; (mov r8, r8)
}
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	b004      	add	sp, #16
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8007a82:	2300      	movs	r3, #0
 8007a84:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8007a86:	e155      	b.n	8007d34 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2101      	movs	r1, #1
 8007a8e:	697a      	ldr	r2, [r7, #20]
 8007a90:	4091      	lsls	r1, r2
 8007a92:	000a      	movs	r2, r1
 8007a94:	4013      	ands	r3, r2
 8007a96:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d100      	bne.n	8007aa0 <HAL_GPIO_Init+0x30>
 8007a9e:	e146      	b.n	8007d2e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d003      	beq.n	8007ab0 <HAL_GPIO_Init+0x40>
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	2b12      	cmp	r3, #18
 8007aae:	d123      	bne.n	8007af8 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	08da      	lsrs	r2, r3, #3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	3208      	adds	r2, #8
 8007ab8:	0092      	lsls	r2, r2, #2
 8007aba:	58d3      	ldr	r3, [r2, r3]
 8007abc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	2207      	movs	r2, #7
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	220f      	movs	r2, #15
 8007ac8:	409a      	lsls	r2, r3
 8007aca:	0013      	movs	r3, r2
 8007acc:	43da      	mvns	r2, r3
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	691a      	ldr	r2, [r3, #16]
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	2107      	movs	r1, #7
 8007adc:	400b      	ands	r3, r1
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	409a      	lsls	r2, r3
 8007ae2:	0013      	movs	r3, r2
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	08da      	lsrs	r2, r3, #3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	3208      	adds	r2, #8
 8007af2:	0092      	lsls	r2, r2, #2
 8007af4:	6939      	ldr	r1, [r7, #16]
 8007af6:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d00b      	beq.n	8007b18 <HAL_GPIO_Init+0xa8>
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d007      	beq.n	8007b18 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007b0c:	2b11      	cmp	r3, #17
 8007b0e:	d003      	beq.n	8007b18 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	2b12      	cmp	r3, #18
 8007b16:	d130      	bne.n	8007b7a <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	005b      	lsls	r3, r3, #1
 8007b22:	2203      	movs	r2, #3
 8007b24:	409a      	lsls	r2, r3
 8007b26:	0013      	movs	r3, r2
 8007b28:	43da      	mvns	r2, r3
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	68da      	ldr	r2, [r3, #12]
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	005b      	lsls	r3, r3, #1
 8007b38:	409a      	lsls	r2, r3
 8007b3a:	0013      	movs	r3, r2
 8007b3c:	693a      	ldr	r2, [r7, #16]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	693a      	ldr	r2, [r7, #16]
 8007b46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007b4e:	2201      	movs	r2, #1
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	409a      	lsls	r2, r3
 8007b54:	0013      	movs	r3, r2
 8007b56:	43da      	mvns	r2, r3
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	091b      	lsrs	r3, r3, #4
 8007b64:	2201      	movs	r2, #1
 8007b66:	401a      	ands	r2, r3
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	409a      	lsls	r2, r3
 8007b6c:	0013      	movs	r3, r2
 8007b6e:	693a      	ldr	r2, [r7, #16]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	005b      	lsls	r3, r3, #1
 8007b84:	2203      	movs	r2, #3
 8007b86:	409a      	lsls	r2, r3
 8007b88:	0013      	movs	r3, r2
 8007b8a:	43da      	mvns	r2, r3
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	4013      	ands	r3, r2
 8007b90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	2203      	movs	r2, #3
 8007b98:	401a      	ands	r2, r3
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	005b      	lsls	r3, r3, #1
 8007b9e:	409a      	lsls	r2, r3
 8007ba0:	0013      	movs	r3, r2
 8007ba2:	693a      	ldr	r2, [r7, #16]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	693a      	ldr	r2, [r7, #16]
 8007bac:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	005b      	lsls	r3, r3, #1
 8007bb8:	2203      	movs	r2, #3
 8007bba:	409a      	lsls	r2, r3
 8007bbc:	0013      	movs	r3, r2
 8007bbe:	43da      	mvns	r2, r3
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	689a      	ldr	r2, [r3, #8]
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	005b      	lsls	r3, r3, #1
 8007bce:	409a      	lsls	r2, r3
 8007bd0:	0013      	movs	r3, r2
 8007bd2:	693a      	ldr	r2, [r7, #16]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	693a      	ldr	r2, [r7, #16]
 8007bdc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	685a      	ldr	r2, [r3, #4]
 8007be2:	2380      	movs	r3, #128	; 0x80
 8007be4:	055b      	lsls	r3, r3, #21
 8007be6:	4013      	ands	r3, r2
 8007be8:	d100      	bne.n	8007bec <HAL_GPIO_Init+0x17c>
 8007bea:	e0a0      	b.n	8007d2e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007bec:	4b57      	ldr	r3, [pc, #348]	; (8007d4c <HAL_GPIO_Init+0x2dc>)
 8007bee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bf0:	4b56      	ldr	r3, [pc, #344]	; (8007d4c <HAL_GPIO_Init+0x2dc>)
 8007bf2:	2101      	movs	r1, #1
 8007bf4:	430a      	orrs	r2, r1
 8007bf6:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8007bf8:	4a55      	ldr	r2, [pc, #340]	; (8007d50 <HAL_GPIO_Init+0x2e0>)
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	089b      	lsrs	r3, r3, #2
 8007bfe:	3302      	adds	r3, #2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	589b      	ldr	r3, [r3, r2]
 8007c04:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	2203      	movs	r2, #3
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	220f      	movs	r2, #15
 8007c10:	409a      	lsls	r2, r3
 8007c12:	0013      	movs	r3, r2
 8007c14:	43da      	mvns	r2, r3
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	4013      	ands	r3, r2
 8007c1a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	23a0      	movs	r3, #160	; 0xa0
 8007c20:	05db      	lsls	r3, r3, #23
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d01f      	beq.n	8007c66 <HAL_GPIO_Init+0x1f6>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a4a      	ldr	r2, [pc, #296]	; (8007d54 <HAL_GPIO_Init+0x2e4>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d019      	beq.n	8007c62 <HAL_GPIO_Init+0x1f2>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a49      	ldr	r2, [pc, #292]	; (8007d58 <HAL_GPIO_Init+0x2e8>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d013      	beq.n	8007c5e <HAL_GPIO_Init+0x1ee>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a48      	ldr	r2, [pc, #288]	; (8007d5c <HAL_GPIO_Init+0x2ec>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d00d      	beq.n	8007c5a <HAL_GPIO_Init+0x1ea>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a47      	ldr	r2, [pc, #284]	; (8007d60 <HAL_GPIO_Init+0x2f0>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d007      	beq.n	8007c56 <HAL_GPIO_Init+0x1e6>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a46      	ldr	r2, [pc, #280]	; (8007d64 <HAL_GPIO_Init+0x2f4>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d101      	bne.n	8007c52 <HAL_GPIO_Init+0x1e2>
 8007c4e:	2305      	movs	r3, #5
 8007c50:	e00a      	b.n	8007c68 <HAL_GPIO_Init+0x1f8>
 8007c52:	2306      	movs	r3, #6
 8007c54:	e008      	b.n	8007c68 <HAL_GPIO_Init+0x1f8>
 8007c56:	2304      	movs	r3, #4
 8007c58:	e006      	b.n	8007c68 <HAL_GPIO_Init+0x1f8>
 8007c5a:	2303      	movs	r3, #3
 8007c5c:	e004      	b.n	8007c68 <HAL_GPIO_Init+0x1f8>
 8007c5e:	2302      	movs	r3, #2
 8007c60:	e002      	b.n	8007c68 <HAL_GPIO_Init+0x1f8>
 8007c62:	2301      	movs	r3, #1
 8007c64:	e000      	b.n	8007c68 <HAL_GPIO_Init+0x1f8>
 8007c66:	2300      	movs	r3, #0
 8007c68:	697a      	ldr	r2, [r7, #20]
 8007c6a:	2103      	movs	r1, #3
 8007c6c:	400a      	ands	r2, r1
 8007c6e:	0092      	lsls	r2, r2, #2
 8007c70:	4093      	lsls	r3, r2
 8007c72:	693a      	ldr	r2, [r7, #16]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007c78:	4935      	ldr	r1, [pc, #212]	; (8007d50 <HAL_GPIO_Init+0x2e0>)
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	089b      	lsrs	r3, r3, #2
 8007c7e:	3302      	adds	r3, #2
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	693a      	ldr	r2, [r7, #16]
 8007c84:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007c86:	4b38      	ldr	r3, [pc, #224]	; (8007d68 <HAL_GPIO_Init+0x2f8>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	43da      	mvns	r2, r3
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	4013      	ands	r3, r2
 8007c94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	685a      	ldr	r2, [r3, #4]
 8007c9a:	2380      	movs	r3, #128	; 0x80
 8007c9c:	025b      	lsls	r3, r3, #9
 8007c9e:	4013      	ands	r3, r2
 8007ca0:	d003      	beq.n	8007caa <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8007ca2:	693a      	ldr	r2, [r7, #16]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8007caa:	4b2f      	ldr	r3, [pc, #188]	; (8007d68 <HAL_GPIO_Init+0x2f8>)
 8007cac:	693a      	ldr	r2, [r7, #16]
 8007cae:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8007cb0:	4b2d      	ldr	r3, [pc, #180]	; (8007d68 <HAL_GPIO_Init+0x2f8>)
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	43da      	mvns	r2, r3
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	685a      	ldr	r2, [r3, #4]
 8007cc4:	2380      	movs	r3, #128	; 0x80
 8007cc6:	029b      	lsls	r3, r3, #10
 8007cc8:	4013      	ands	r3, r2
 8007cca:	d003      	beq.n	8007cd4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8007ccc:	693a      	ldr	r2, [r7, #16]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007cd4:	4b24      	ldr	r3, [pc, #144]	; (8007d68 <HAL_GPIO_Init+0x2f8>)
 8007cd6:	693a      	ldr	r2, [r7, #16]
 8007cd8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007cda:	4b23      	ldr	r3, [pc, #140]	; (8007d68 <HAL_GPIO_Init+0x2f8>)
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	43da      	mvns	r2, r3
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	685a      	ldr	r2, [r3, #4]
 8007cee:	2380      	movs	r3, #128	; 0x80
 8007cf0:	035b      	lsls	r3, r3, #13
 8007cf2:	4013      	ands	r3, r2
 8007cf4:	d003      	beq.n	8007cfe <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007cfe:	4b1a      	ldr	r3, [pc, #104]	; (8007d68 <HAL_GPIO_Init+0x2f8>)
 8007d00:	693a      	ldr	r2, [r7, #16]
 8007d02:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8007d04:	4b18      	ldr	r3, [pc, #96]	; (8007d68 <HAL_GPIO_Init+0x2f8>)
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	43da      	mvns	r2, r3
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	4013      	ands	r3, r2
 8007d12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	685a      	ldr	r2, [r3, #4]
 8007d18:	2380      	movs	r3, #128	; 0x80
 8007d1a:	039b      	lsls	r3, r3, #14
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	d003      	beq.n	8007d28 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8007d20:	693a      	ldr	r2, [r7, #16]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007d28:	4b0f      	ldr	r3, [pc, #60]	; (8007d68 <HAL_GPIO_Init+0x2f8>)
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	3301      	adds	r3, #1
 8007d32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	40da      	lsrs	r2, r3
 8007d3c:	1e13      	subs	r3, r2, #0
 8007d3e:	d000      	beq.n	8007d42 <HAL_GPIO_Init+0x2d2>
 8007d40:	e6a2      	b.n	8007a88 <HAL_GPIO_Init+0x18>
  }
}
 8007d42:	46c0      	nop			; (mov r8, r8)
 8007d44:	46bd      	mov	sp, r7
 8007d46:	b006      	add	sp, #24
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	46c0      	nop			; (mov r8, r8)
 8007d4c:	40021000 	.word	0x40021000
 8007d50:	40010000 	.word	0x40010000
 8007d54:	50000400 	.word	0x50000400
 8007d58:	50000800 	.word	0x50000800
 8007d5c:	50000c00 	.word	0x50000c00
 8007d60:	50001000 	.word	0x50001000
 8007d64:	50001c00 	.word	0x50001c00
 8007d68:	40010400 	.word	0x40010400

08007d6c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	000a      	movs	r2, r1
 8007d76:	1cbb      	adds	r3, r7, #2
 8007d78:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	1cba      	adds	r2, r7, #2
 8007d80:	8812      	ldrh	r2, [r2, #0]
 8007d82:	4013      	ands	r3, r2
 8007d84:	d004      	beq.n	8007d90 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8007d86:	230f      	movs	r3, #15
 8007d88:	18fb      	adds	r3, r7, r3
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	701a      	strb	r2, [r3, #0]
 8007d8e:	e003      	b.n	8007d98 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007d90:	230f      	movs	r3, #15
 8007d92:	18fb      	adds	r3, r7, r3
 8007d94:	2200      	movs	r2, #0
 8007d96:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8007d98:	230f      	movs	r3, #15
 8007d9a:	18fb      	adds	r3, r7, r3
 8007d9c:	781b      	ldrb	r3, [r3, #0]
}
 8007d9e:	0018      	movs	r0, r3
 8007da0:	46bd      	mov	sp, r7
 8007da2:	b004      	add	sp, #16
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b082      	sub	sp, #8
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
 8007dae:	0008      	movs	r0, r1
 8007db0:	0011      	movs	r1, r2
 8007db2:	1cbb      	adds	r3, r7, #2
 8007db4:	1c02      	adds	r2, r0, #0
 8007db6:	801a      	strh	r2, [r3, #0]
 8007db8:	1c7b      	adds	r3, r7, #1
 8007dba:	1c0a      	adds	r2, r1, #0
 8007dbc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8007dbe:	1c7b      	adds	r3, r7, #1
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d004      	beq.n	8007dd0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007dc6:	1cbb      	adds	r3, r7, #2
 8007dc8:	881a      	ldrh	r2, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8007dce:	e003      	b.n	8007dd8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8007dd0:	1cbb      	adds	r3, r7, #2
 8007dd2:	881a      	ldrh	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007dd8:	46c0      	nop			; (mov r8, r8)
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	b002      	add	sp, #8
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	000a      	movs	r2, r1
 8007dea:	1cbb      	adds	r3, r7, #2
 8007dec:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	695a      	ldr	r2, [r3, #20]
 8007df2:	1cbb      	adds	r3, r7, #2
 8007df4:	881b      	ldrh	r3, [r3, #0]
 8007df6:	405a      	eors	r2, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	615a      	str	r2, [r3, #20]
}
 8007dfc:	46c0      	nop			; (mov r8, r8)
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	b002      	add	sp, #8
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	0002      	movs	r2, r0
 8007e0c:	1dbb      	adds	r3, r7, #6
 8007e0e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8007e10:	4b09      	ldr	r3, [pc, #36]	; (8007e38 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8007e12:	695b      	ldr	r3, [r3, #20]
 8007e14:	1dba      	adds	r2, r7, #6
 8007e16:	8812      	ldrh	r2, [r2, #0]
 8007e18:	4013      	ands	r3, r2
 8007e1a:	d008      	beq.n	8007e2e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007e1c:	4b06      	ldr	r3, [pc, #24]	; (8007e38 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8007e1e:	1dba      	adds	r2, r7, #6
 8007e20:	8812      	ldrh	r2, [r2, #0]
 8007e22:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007e24:	1dbb      	adds	r3, r7, #6
 8007e26:	881b      	ldrh	r3, [r3, #0]
 8007e28:	0018      	movs	r0, r3
 8007e2a:	f7fd f96f 	bl	800510c <HAL_GPIO_EXTI_Callback>
  }
}
 8007e2e:	46c0      	nop			; (mov r8, r8)
 8007e30:	46bd      	mov	sp, r7
 8007e32:	b002      	add	sp, #8
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	46c0      	nop			; (mov r8, r8)
 8007e38:	40010400 	.word	0x40010400

08007e3c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e40:	4b04      	ldr	r3, [pc, #16]	; (8007e54 <HAL_PWR_EnableBkUpAccess+0x18>)
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	4b03      	ldr	r3, [pc, #12]	; (8007e54 <HAL_PWR_EnableBkUpAccess+0x18>)
 8007e46:	2180      	movs	r1, #128	; 0x80
 8007e48:	0049      	lsls	r1, r1, #1
 8007e4a:	430a      	orrs	r2, r1
 8007e4c:	601a      	str	r2, [r3, #0]
}
 8007e4e:	46c0      	nop			; (mov r8, r8)
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	40007000 	.word	0x40007000

08007e58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e58:	b5b0      	push	{r4, r5, r7, lr}
 8007e5a:	b08a      	sub	sp, #40	; 0x28
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d102      	bne.n	8007e6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	f000 fbbc 	bl	80085e4 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e6c:	4bc8      	ldr	r3, [pc, #800]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	220c      	movs	r2, #12
 8007e72:	4013      	ands	r3, r2
 8007e74:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e76:	4bc6      	ldr	r3, [pc, #792]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 8007e78:	68da      	ldr	r2, [r3, #12]
 8007e7a:	2380      	movs	r3, #128	; 0x80
 8007e7c:	025b      	lsls	r3, r3, #9
 8007e7e:	4013      	ands	r3, r2
 8007e80:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	2201      	movs	r2, #1
 8007e88:	4013      	ands	r3, r2
 8007e8a:	d100      	bne.n	8007e8e <HAL_RCC_OscConfig+0x36>
 8007e8c:	e07e      	b.n	8007f8c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	2b08      	cmp	r3, #8
 8007e92:	d007      	beq.n	8007ea4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	2b0c      	cmp	r3, #12
 8007e98:	d112      	bne.n	8007ec0 <HAL_RCC_OscConfig+0x68>
 8007e9a:	69ba      	ldr	r2, [r7, #24]
 8007e9c:	2380      	movs	r3, #128	; 0x80
 8007e9e:	025b      	lsls	r3, r3, #9
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d10d      	bne.n	8007ec0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ea4:	4bba      	ldr	r3, [pc, #744]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	2380      	movs	r3, #128	; 0x80
 8007eaa:	029b      	lsls	r3, r3, #10
 8007eac:	4013      	ands	r3, r2
 8007eae:	d100      	bne.n	8007eb2 <HAL_RCC_OscConfig+0x5a>
 8007eb0:	e06b      	b.n	8007f8a <HAL_RCC_OscConfig+0x132>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d167      	bne.n	8007f8a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	f000 fb92 	bl	80085e4 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	685a      	ldr	r2, [r3, #4]
 8007ec4:	2380      	movs	r3, #128	; 0x80
 8007ec6:	025b      	lsls	r3, r3, #9
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d107      	bne.n	8007edc <HAL_RCC_OscConfig+0x84>
 8007ecc:	4bb0      	ldr	r3, [pc, #704]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	4baf      	ldr	r3, [pc, #700]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 8007ed2:	2180      	movs	r1, #128	; 0x80
 8007ed4:	0249      	lsls	r1, r1, #9
 8007ed6:	430a      	orrs	r2, r1
 8007ed8:	601a      	str	r2, [r3, #0]
 8007eda:	e027      	b.n	8007f2c <HAL_RCC_OscConfig+0xd4>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	685a      	ldr	r2, [r3, #4]
 8007ee0:	23a0      	movs	r3, #160	; 0xa0
 8007ee2:	02db      	lsls	r3, r3, #11
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d10e      	bne.n	8007f06 <HAL_RCC_OscConfig+0xae>
 8007ee8:	4ba9      	ldr	r3, [pc, #676]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	4ba8      	ldr	r3, [pc, #672]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 8007eee:	2180      	movs	r1, #128	; 0x80
 8007ef0:	02c9      	lsls	r1, r1, #11
 8007ef2:	430a      	orrs	r2, r1
 8007ef4:	601a      	str	r2, [r3, #0]
 8007ef6:	4ba6      	ldr	r3, [pc, #664]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	4ba5      	ldr	r3, [pc, #660]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 8007efc:	2180      	movs	r1, #128	; 0x80
 8007efe:	0249      	lsls	r1, r1, #9
 8007f00:	430a      	orrs	r2, r1
 8007f02:	601a      	str	r2, [r3, #0]
 8007f04:	e012      	b.n	8007f2c <HAL_RCC_OscConfig+0xd4>
 8007f06:	4ba2      	ldr	r3, [pc, #648]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	4ba1      	ldr	r3, [pc, #644]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 8007f0c:	49a1      	ldr	r1, [pc, #644]	; (8008194 <HAL_RCC_OscConfig+0x33c>)
 8007f0e:	400a      	ands	r2, r1
 8007f10:	601a      	str	r2, [r3, #0]
 8007f12:	4b9f      	ldr	r3, [pc, #636]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	2380      	movs	r3, #128	; 0x80
 8007f18:	025b      	lsls	r3, r3, #9
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	60fb      	str	r3, [r7, #12]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	4b9b      	ldr	r3, [pc, #620]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	4b9a      	ldr	r3, [pc, #616]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 8007f26:	499c      	ldr	r1, [pc, #624]	; (8008198 <HAL_RCC_OscConfig+0x340>)
 8007f28:	400a      	ands	r2, r1
 8007f2a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d015      	beq.n	8007f60 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f34:	f7fe fe50 	bl	8006bd8 <HAL_GetTick>
 8007f38:	0003      	movs	r3, r0
 8007f3a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f3c:	e009      	b.n	8007f52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f3e:	f7fe fe4b 	bl	8006bd8 <HAL_GetTick>
 8007f42:	0002      	movs	r2, r0
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	1ad3      	subs	r3, r2, r3
 8007f48:	2b64      	cmp	r3, #100	; 0x64
 8007f4a:	d902      	bls.n	8007f52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	f000 fb49 	bl	80085e4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f52:	4b8f      	ldr	r3, [pc, #572]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	2380      	movs	r3, #128	; 0x80
 8007f58:	029b      	lsls	r3, r3, #10
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	d0ef      	beq.n	8007f3e <HAL_RCC_OscConfig+0xe6>
 8007f5e:	e015      	b.n	8007f8c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f60:	f7fe fe3a 	bl	8006bd8 <HAL_GetTick>
 8007f64:	0003      	movs	r3, r0
 8007f66:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007f68:	e008      	b.n	8007f7c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f6a:	f7fe fe35 	bl	8006bd8 <HAL_GetTick>
 8007f6e:	0002      	movs	r2, r0
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	1ad3      	subs	r3, r2, r3
 8007f74:	2b64      	cmp	r3, #100	; 0x64
 8007f76:	d901      	bls.n	8007f7c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	e333      	b.n	80085e4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007f7c:	4b84      	ldr	r3, [pc, #528]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	2380      	movs	r3, #128	; 0x80
 8007f82:	029b      	lsls	r3, r3, #10
 8007f84:	4013      	ands	r3, r2
 8007f86:	d1f0      	bne.n	8007f6a <HAL_RCC_OscConfig+0x112>
 8007f88:	e000      	b.n	8007f8c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f8a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2202      	movs	r2, #2
 8007f92:	4013      	ands	r3, r2
 8007f94:	d100      	bne.n	8007f98 <HAL_RCC_OscConfig+0x140>
 8007f96:	e098      	b.n	80080ca <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa0:	2220      	movs	r2, #32
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	d009      	beq.n	8007fba <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8007fa6:	4b7a      	ldr	r3, [pc, #488]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	4b79      	ldr	r3, [pc, #484]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 8007fac:	2120      	movs	r1, #32
 8007fae:	430a      	orrs	r2, r1
 8007fb0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8007fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb4:	2220      	movs	r2, #32
 8007fb6:	4393      	bics	r3, r2
 8007fb8:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	2b04      	cmp	r3, #4
 8007fbe:	d005      	beq.n	8007fcc <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	2b0c      	cmp	r3, #12
 8007fc4:	d13d      	bne.n	8008042 <HAL_RCC_OscConfig+0x1ea>
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d13a      	bne.n	8008042 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8007fcc:	4b70      	ldr	r3, [pc, #448]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2204      	movs	r2, #4
 8007fd2:	4013      	ands	r3, r2
 8007fd4:	d004      	beq.n	8007fe0 <HAL_RCC_OscConfig+0x188>
 8007fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d101      	bne.n	8007fe0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e301      	b.n	80085e4 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fe0:	4b6b      	ldr	r3, [pc, #428]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	4a6d      	ldr	r2, [pc, #436]	; (800819c <HAL_RCC_OscConfig+0x344>)
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	0019      	movs	r1, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	021a      	lsls	r2, r3, #8
 8007ff0:	4b67      	ldr	r3, [pc, #412]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 8007ff2:	430a      	orrs	r2, r1
 8007ff4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8007ff6:	4b66      	ldr	r3, [pc, #408]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2209      	movs	r2, #9
 8007ffc:	4393      	bics	r3, r2
 8007ffe:	0019      	movs	r1, r3
 8008000:	4b63      	ldr	r3, [pc, #396]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 8008002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008004:	430a      	orrs	r2, r1
 8008006:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008008:	f000 fc20 	bl	800884c <HAL_RCC_GetSysClockFreq>
 800800c:	0001      	movs	r1, r0
 800800e:	4b60      	ldr	r3, [pc, #384]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	091b      	lsrs	r3, r3, #4
 8008014:	220f      	movs	r2, #15
 8008016:	4013      	ands	r3, r2
 8008018:	4a61      	ldr	r2, [pc, #388]	; (80081a0 <HAL_RCC_OscConfig+0x348>)
 800801a:	5cd3      	ldrb	r3, [r2, r3]
 800801c:	000a      	movs	r2, r1
 800801e:	40da      	lsrs	r2, r3
 8008020:	4b60      	ldr	r3, [pc, #384]	; (80081a4 <HAL_RCC_OscConfig+0x34c>)
 8008022:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8008024:	2513      	movs	r5, #19
 8008026:	197c      	adds	r4, r7, r5
 8008028:	2000      	movs	r0, #0
 800802a:	f7fe fd9f 	bl	8006b6c <HAL_InitTick>
 800802e:	0003      	movs	r3, r0
 8008030:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8008032:	197b      	adds	r3, r7, r5
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d047      	beq.n	80080ca <HAL_RCC_OscConfig+0x272>
      {
        return status;
 800803a:	2313      	movs	r3, #19
 800803c:	18fb      	adds	r3, r7, r3
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	e2d0      	b.n	80085e4 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8008042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008044:	2b00      	cmp	r3, #0
 8008046:	d027      	beq.n	8008098 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8008048:	4b51      	ldr	r3, [pc, #324]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2209      	movs	r2, #9
 800804e:	4393      	bics	r3, r2
 8008050:	0019      	movs	r1, r3
 8008052:	4b4f      	ldr	r3, [pc, #316]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 8008054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008056:	430a      	orrs	r2, r1
 8008058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800805a:	f7fe fdbd 	bl	8006bd8 <HAL_GetTick>
 800805e:	0003      	movs	r3, r0
 8008060:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008062:	e008      	b.n	8008076 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008064:	f7fe fdb8 	bl	8006bd8 <HAL_GetTick>
 8008068:	0002      	movs	r2, r0
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	2b02      	cmp	r3, #2
 8008070:	d901      	bls.n	8008076 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8008072:	2303      	movs	r3, #3
 8008074:	e2b6      	b.n	80085e4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008076:	4b46      	ldr	r3, [pc, #280]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2204      	movs	r2, #4
 800807c:	4013      	ands	r3, r2
 800807e:	d0f1      	beq.n	8008064 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008080:	4b43      	ldr	r3, [pc, #268]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	4a45      	ldr	r2, [pc, #276]	; (800819c <HAL_RCC_OscConfig+0x344>)
 8008086:	4013      	ands	r3, r2
 8008088:	0019      	movs	r1, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	021a      	lsls	r2, r3, #8
 8008090:	4b3f      	ldr	r3, [pc, #252]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 8008092:	430a      	orrs	r2, r1
 8008094:	605a      	str	r2, [r3, #4]
 8008096:	e018      	b.n	80080ca <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008098:	4b3d      	ldr	r3, [pc, #244]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	4b3c      	ldr	r3, [pc, #240]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 800809e:	2101      	movs	r1, #1
 80080a0:	438a      	bics	r2, r1
 80080a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080a4:	f7fe fd98 	bl	8006bd8 <HAL_GetTick>
 80080a8:	0003      	movs	r3, r0
 80080aa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80080ac:	e008      	b.n	80080c0 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080ae:	f7fe fd93 	bl	8006bd8 <HAL_GetTick>
 80080b2:	0002      	movs	r2, r0
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	d901      	bls.n	80080c0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80080bc:	2303      	movs	r3, #3
 80080be:	e291      	b.n	80085e4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80080c0:	4b33      	ldr	r3, [pc, #204]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2204      	movs	r2, #4
 80080c6:	4013      	ands	r3, r2
 80080c8:	d1f1      	bne.n	80080ae <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2210      	movs	r2, #16
 80080d0:	4013      	ands	r3, r2
 80080d2:	d100      	bne.n	80080d6 <HAL_RCC_OscConfig+0x27e>
 80080d4:	e09f      	b.n	8008216 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d13f      	bne.n	800815c <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80080dc:	4b2c      	ldr	r3, [pc, #176]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	2380      	movs	r3, #128	; 0x80
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	4013      	ands	r3, r2
 80080e6:	d005      	beq.n	80080f4 <HAL_RCC_OscConfig+0x29c>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	69db      	ldr	r3, [r3, #28]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d101      	bne.n	80080f4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	e277      	b.n	80085e4 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80080f4:	4b26      	ldr	r3, [pc, #152]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	4a2b      	ldr	r2, [pc, #172]	; (80081a8 <HAL_RCC_OscConfig+0x350>)
 80080fa:	4013      	ands	r3, r2
 80080fc:	0019      	movs	r1, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008102:	4b23      	ldr	r3, [pc, #140]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 8008104:	430a      	orrs	r2, r1
 8008106:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008108:	4b21      	ldr	r3, [pc, #132]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	021b      	lsls	r3, r3, #8
 800810e:	0a19      	lsrs	r1, r3, #8
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a1b      	ldr	r3, [r3, #32]
 8008114:	061a      	lsls	r2, r3, #24
 8008116:	4b1e      	ldr	r3, [pc, #120]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 8008118:	430a      	orrs	r2, r1
 800811a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008120:	0b5b      	lsrs	r3, r3, #13
 8008122:	3301      	adds	r3, #1
 8008124:	2280      	movs	r2, #128	; 0x80
 8008126:	0212      	lsls	r2, r2, #8
 8008128:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800812a:	4b19      	ldr	r3, [pc, #100]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	091b      	lsrs	r3, r3, #4
 8008130:	210f      	movs	r1, #15
 8008132:	400b      	ands	r3, r1
 8008134:	491a      	ldr	r1, [pc, #104]	; (80081a0 <HAL_RCC_OscConfig+0x348>)
 8008136:	5ccb      	ldrb	r3, [r1, r3]
 8008138:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800813a:	4b1a      	ldr	r3, [pc, #104]	; (80081a4 <HAL_RCC_OscConfig+0x34c>)
 800813c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800813e:	2513      	movs	r5, #19
 8008140:	197c      	adds	r4, r7, r5
 8008142:	2000      	movs	r0, #0
 8008144:	f7fe fd12 	bl	8006b6c <HAL_InitTick>
 8008148:	0003      	movs	r3, r0
 800814a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800814c:	197b      	adds	r3, r7, r5
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d060      	beq.n	8008216 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8008154:	2313      	movs	r3, #19
 8008156:	18fb      	adds	r3, r7, r3
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	e243      	b.n	80085e4 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	69db      	ldr	r3, [r3, #28]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d03e      	beq.n	80081e2 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008164:	4b0a      	ldr	r3, [pc, #40]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	4b09      	ldr	r3, [pc, #36]	; (8008190 <HAL_RCC_OscConfig+0x338>)
 800816a:	2180      	movs	r1, #128	; 0x80
 800816c:	0049      	lsls	r1, r1, #1
 800816e:	430a      	orrs	r2, r1
 8008170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008172:	f7fe fd31 	bl	8006bd8 <HAL_GetTick>
 8008176:	0003      	movs	r3, r0
 8008178:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800817a:	e017      	b.n	80081ac <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800817c:	f7fe fd2c 	bl	8006bd8 <HAL_GetTick>
 8008180:	0002      	movs	r2, r0
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	1ad3      	subs	r3, r2, r3
 8008186:	2b02      	cmp	r3, #2
 8008188:	d910      	bls.n	80081ac <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 800818a:	2303      	movs	r3, #3
 800818c:	e22a      	b.n	80085e4 <HAL_RCC_OscConfig+0x78c>
 800818e:	46c0      	nop			; (mov r8, r8)
 8008190:	40021000 	.word	0x40021000
 8008194:	fffeffff 	.word	0xfffeffff
 8008198:	fffbffff 	.word	0xfffbffff
 800819c:	ffffe0ff 	.word	0xffffe0ff
 80081a0:	0800c520 	.word	0x0800c520
 80081a4:	20000010 	.word	0x20000010
 80081a8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80081ac:	4bc6      	ldr	r3, [pc, #792]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	2380      	movs	r3, #128	; 0x80
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	4013      	ands	r3, r2
 80081b6:	d0e1      	beq.n	800817c <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80081b8:	4bc3      	ldr	r3, [pc, #780]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	4ac3      	ldr	r2, [pc, #780]	; (80084cc <HAL_RCC_OscConfig+0x674>)
 80081be:	4013      	ands	r3, r2
 80081c0:	0019      	movs	r1, r3
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081c6:	4bc0      	ldr	r3, [pc, #768]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 80081c8:	430a      	orrs	r2, r1
 80081ca:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80081cc:	4bbe      	ldr	r3, [pc, #760]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	021b      	lsls	r3, r3, #8
 80081d2:	0a19      	lsrs	r1, r3, #8
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6a1b      	ldr	r3, [r3, #32]
 80081d8:	061a      	lsls	r2, r3, #24
 80081da:	4bbb      	ldr	r3, [pc, #748]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 80081dc:	430a      	orrs	r2, r1
 80081de:	605a      	str	r2, [r3, #4]
 80081e0:	e019      	b.n	8008216 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80081e2:	4bb9      	ldr	r3, [pc, #740]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	4bb8      	ldr	r3, [pc, #736]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 80081e8:	49b9      	ldr	r1, [pc, #740]	; (80084d0 <HAL_RCC_OscConfig+0x678>)
 80081ea:	400a      	ands	r2, r1
 80081ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081ee:	f7fe fcf3 	bl	8006bd8 <HAL_GetTick>
 80081f2:	0003      	movs	r3, r0
 80081f4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80081f6:	e008      	b.n	800820a <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80081f8:	f7fe fcee 	bl	8006bd8 <HAL_GetTick>
 80081fc:	0002      	movs	r2, r0
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	2b02      	cmp	r3, #2
 8008204:	d901      	bls.n	800820a <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8008206:	2303      	movs	r3, #3
 8008208:	e1ec      	b.n	80085e4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800820a:	4baf      	ldr	r3, [pc, #700]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	2380      	movs	r3, #128	; 0x80
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4013      	ands	r3, r2
 8008214:	d1f0      	bne.n	80081f8 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2208      	movs	r2, #8
 800821c:	4013      	ands	r3, r2
 800821e:	d036      	beq.n	800828e <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	695b      	ldr	r3, [r3, #20]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d019      	beq.n	800825c <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008228:	4ba7      	ldr	r3, [pc, #668]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 800822a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800822c:	4ba6      	ldr	r3, [pc, #664]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 800822e:	2101      	movs	r1, #1
 8008230:	430a      	orrs	r2, r1
 8008232:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008234:	f7fe fcd0 	bl	8006bd8 <HAL_GetTick>
 8008238:	0003      	movs	r3, r0
 800823a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800823c:	e008      	b.n	8008250 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800823e:	f7fe fccb 	bl	8006bd8 <HAL_GetTick>
 8008242:	0002      	movs	r2, r0
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	1ad3      	subs	r3, r2, r3
 8008248:	2b02      	cmp	r3, #2
 800824a:	d901      	bls.n	8008250 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 800824c:	2303      	movs	r3, #3
 800824e:	e1c9      	b.n	80085e4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008250:	4b9d      	ldr	r3, [pc, #628]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 8008252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008254:	2202      	movs	r2, #2
 8008256:	4013      	ands	r3, r2
 8008258:	d0f1      	beq.n	800823e <HAL_RCC_OscConfig+0x3e6>
 800825a:	e018      	b.n	800828e <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800825c:	4b9a      	ldr	r3, [pc, #616]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 800825e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008260:	4b99      	ldr	r3, [pc, #612]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 8008262:	2101      	movs	r1, #1
 8008264:	438a      	bics	r2, r1
 8008266:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008268:	f7fe fcb6 	bl	8006bd8 <HAL_GetTick>
 800826c:	0003      	movs	r3, r0
 800826e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008270:	e008      	b.n	8008284 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008272:	f7fe fcb1 	bl	8006bd8 <HAL_GetTick>
 8008276:	0002      	movs	r2, r0
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	2b02      	cmp	r3, #2
 800827e:	d901      	bls.n	8008284 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8008280:	2303      	movs	r3, #3
 8008282:	e1af      	b.n	80085e4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008284:	4b90      	ldr	r3, [pc, #576]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 8008286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008288:	2202      	movs	r2, #2
 800828a:	4013      	ands	r3, r2
 800828c:	d1f1      	bne.n	8008272 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2204      	movs	r2, #4
 8008294:	4013      	ands	r3, r2
 8008296:	d100      	bne.n	800829a <HAL_RCC_OscConfig+0x442>
 8008298:	e0af      	b.n	80083fa <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800829a:	2323      	movs	r3, #35	; 0x23
 800829c:	18fb      	adds	r3, r7, r3
 800829e:	2200      	movs	r2, #0
 80082a0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082a2:	4b89      	ldr	r3, [pc, #548]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 80082a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082a6:	2380      	movs	r3, #128	; 0x80
 80082a8:	055b      	lsls	r3, r3, #21
 80082aa:	4013      	ands	r3, r2
 80082ac:	d10a      	bne.n	80082c4 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082ae:	4b86      	ldr	r3, [pc, #536]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 80082b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082b2:	4b85      	ldr	r3, [pc, #532]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 80082b4:	2180      	movs	r1, #128	; 0x80
 80082b6:	0549      	lsls	r1, r1, #21
 80082b8:	430a      	orrs	r2, r1
 80082ba:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80082bc:	2323      	movs	r3, #35	; 0x23
 80082be:	18fb      	adds	r3, r7, r3
 80082c0:	2201      	movs	r2, #1
 80082c2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082c4:	4b83      	ldr	r3, [pc, #524]	; (80084d4 <HAL_RCC_OscConfig+0x67c>)
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	2380      	movs	r3, #128	; 0x80
 80082ca:	005b      	lsls	r3, r3, #1
 80082cc:	4013      	ands	r3, r2
 80082ce:	d11a      	bne.n	8008306 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80082d0:	4b80      	ldr	r3, [pc, #512]	; (80084d4 <HAL_RCC_OscConfig+0x67c>)
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	4b7f      	ldr	r3, [pc, #508]	; (80084d4 <HAL_RCC_OscConfig+0x67c>)
 80082d6:	2180      	movs	r1, #128	; 0x80
 80082d8:	0049      	lsls	r1, r1, #1
 80082da:	430a      	orrs	r2, r1
 80082dc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80082de:	f7fe fc7b 	bl	8006bd8 <HAL_GetTick>
 80082e2:	0003      	movs	r3, r0
 80082e4:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082e6:	e008      	b.n	80082fa <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082e8:	f7fe fc76 	bl	8006bd8 <HAL_GetTick>
 80082ec:	0002      	movs	r2, r0
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	2b64      	cmp	r3, #100	; 0x64
 80082f4:	d901      	bls.n	80082fa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80082f6:	2303      	movs	r3, #3
 80082f8:	e174      	b.n	80085e4 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082fa:	4b76      	ldr	r3, [pc, #472]	; (80084d4 <HAL_RCC_OscConfig+0x67c>)
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	2380      	movs	r3, #128	; 0x80
 8008300:	005b      	lsls	r3, r3, #1
 8008302:	4013      	ands	r3, r2
 8008304:	d0f0      	beq.n	80082e8 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	689a      	ldr	r2, [r3, #8]
 800830a:	2380      	movs	r3, #128	; 0x80
 800830c:	005b      	lsls	r3, r3, #1
 800830e:	429a      	cmp	r2, r3
 8008310:	d107      	bne.n	8008322 <HAL_RCC_OscConfig+0x4ca>
 8008312:	4b6d      	ldr	r3, [pc, #436]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 8008314:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008316:	4b6c      	ldr	r3, [pc, #432]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 8008318:	2180      	movs	r1, #128	; 0x80
 800831a:	0049      	lsls	r1, r1, #1
 800831c:	430a      	orrs	r2, r1
 800831e:	651a      	str	r2, [r3, #80]	; 0x50
 8008320:	e031      	b.n	8008386 <HAL_RCC_OscConfig+0x52e>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d10c      	bne.n	8008344 <HAL_RCC_OscConfig+0x4ec>
 800832a:	4b67      	ldr	r3, [pc, #412]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 800832c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800832e:	4b66      	ldr	r3, [pc, #408]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 8008330:	4967      	ldr	r1, [pc, #412]	; (80084d0 <HAL_RCC_OscConfig+0x678>)
 8008332:	400a      	ands	r2, r1
 8008334:	651a      	str	r2, [r3, #80]	; 0x50
 8008336:	4b64      	ldr	r3, [pc, #400]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 8008338:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800833a:	4b63      	ldr	r3, [pc, #396]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 800833c:	4966      	ldr	r1, [pc, #408]	; (80084d8 <HAL_RCC_OscConfig+0x680>)
 800833e:	400a      	ands	r2, r1
 8008340:	651a      	str	r2, [r3, #80]	; 0x50
 8008342:	e020      	b.n	8008386 <HAL_RCC_OscConfig+0x52e>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	689a      	ldr	r2, [r3, #8]
 8008348:	23a0      	movs	r3, #160	; 0xa0
 800834a:	00db      	lsls	r3, r3, #3
 800834c:	429a      	cmp	r2, r3
 800834e:	d10e      	bne.n	800836e <HAL_RCC_OscConfig+0x516>
 8008350:	4b5d      	ldr	r3, [pc, #372]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 8008352:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008354:	4b5c      	ldr	r3, [pc, #368]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 8008356:	2180      	movs	r1, #128	; 0x80
 8008358:	00c9      	lsls	r1, r1, #3
 800835a:	430a      	orrs	r2, r1
 800835c:	651a      	str	r2, [r3, #80]	; 0x50
 800835e:	4b5a      	ldr	r3, [pc, #360]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 8008360:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008362:	4b59      	ldr	r3, [pc, #356]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 8008364:	2180      	movs	r1, #128	; 0x80
 8008366:	0049      	lsls	r1, r1, #1
 8008368:	430a      	orrs	r2, r1
 800836a:	651a      	str	r2, [r3, #80]	; 0x50
 800836c:	e00b      	b.n	8008386 <HAL_RCC_OscConfig+0x52e>
 800836e:	4b56      	ldr	r3, [pc, #344]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 8008370:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008372:	4b55      	ldr	r3, [pc, #340]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 8008374:	4956      	ldr	r1, [pc, #344]	; (80084d0 <HAL_RCC_OscConfig+0x678>)
 8008376:	400a      	ands	r2, r1
 8008378:	651a      	str	r2, [r3, #80]	; 0x50
 800837a:	4b53      	ldr	r3, [pc, #332]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 800837c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800837e:	4b52      	ldr	r3, [pc, #328]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 8008380:	4955      	ldr	r1, [pc, #340]	; (80084d8 <HAL_RCC_OscConfig+0x680>)
 8008382:	400a      	ands	r2, r1
 8008384:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d015      	beq.n	80083ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800838e:	f7fe fc23 	bl	8006bd8 <HAL_GetTick>
 8008392:	0003      	movs	r3, r0
 8008394:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008396:	e009      	b.n	80083ac <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008398:	f7fe fc1e 	bl	8006bd8 <HAL_GetTick>
 800839c:	0002      	movs	r2, r0
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	4a4e      	ldr	r2, [pc, #312]	; (80084dc <HAL_RCC_OscConfig+0x684>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d901      	bls.n	80083ac <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 80083a8:	2303      	movs	r3, #3
 80083aa:	e11b      	b.n	80085e4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083ac:	4b46      	ldr	r3, [pc, #280]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 80083ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80083b0:	2380      	movs	r3, #128	; 0x80
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	4013      	ands	r3, r2
 80083b6:	d0ef      	beq.n	8008398 <HAL_RCC_OscConfig+0x540>
 80083b8:	e014      	b.n	80083e4 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083ba:	f7fe fc0d 	bl	8006bd8 <HAL_GetTick>
 80083be:	0003      	movs	r3, r0
 80083c0:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80083c2:	e009      	b.n	80083d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083c4:	f7fe fc08 	bl	8006bd8 <HAL_GetTick>
 80083c8:	0002      	movs	r2, r0
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	1ad3      	subs	r3, r2, r3
 80083ce:	4a43      	ldr	r2, [pc, #268]	; (80084dc <HAL_RCC_OscConfig+0x684>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d901      	bls.n	80083d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80083d4:	2303      	movs	r3, #3
 80083d6:	e105      	b.n	80085e4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80083d8:	4b3b      	ldr	r3, [pc, #236]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 80083da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80083dc:	2380      	movs	r3, #128	; 0x80
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	4013      	ands	r3, r2
 80083e2:	d1ef      	bne.n	80083c4 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80083e4:	2323      	movs	r3, #35	; 0x23
 80083e6:	18fb      	adds	r3, r7, r3
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d105      	bne.n	80083fa <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083ee:	4b36      	ldr	r3, [pc, #216]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 80083f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083f2:	4b35      	ldr	r3, [pc, #212]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 80083f4:	493a      	ldr	r1, [pc, #232]	; (80084e0 <HAL_RCC_OscConfig+0x688>)
 80083f6:	400a      	ands	r2, r1
 80083f8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2220      	movs	r2, #32
 8008400:	4013      	ands	r3, r2
 8008402:	d049      	beq.n	8008498 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d026      	beq.n	800845a <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800840c:	4b2e      	ldr	r3, [pc, #184]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 800840e:	689a      	ldr	r2, [r3, #8]
 8008410:	4b2d      	ldr	r3, [pc, #180]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 8008412:	2101      	movs	r1, #1
 8008414:	430a      	orrs	r2, r1
 8008416:	609a      	str	r2, [r3, #8]
 8008418:	4b2b      	ldr	r3, [pc, #172]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 800841a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800841c:	4b2a      	ldr	r3, [pc, #168]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 800841e:	2101      	movs	r1, #1
 8008420:	430a      	orrs	r2, r1
 8008422:	635a      	str	r2, [r3, #52]	; 0x34
 8008424:	4b2f      	ldr	r3, [pc, #188]	; (80084e4 <HAL_RCC_OscConfig+0x68c>)
 8008426:	6a1a      	ldr	r2, [r3, #32]
 8008428:	4b2e      	ldr	r3, [pc, #184]	; (80084e4 <HAL_RCC_OscConfig+0x68c>)
 800842a:	2180      	movs	r1, #128	; 0x80
 800842c:	0189      	lsls	r1, r1, #6
 800842e:	430a      	orrs	r2, r1
 8008430:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008432:	f7fe fbd1 	bl	8006bd8 <HAL_GetTick>
 8008436:	0003      	movs	r3, r0
 8008438:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800843a:	e008      	b.n	800844e <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800843c:	f7fe fbcc 	bl	8006bd8 <HAL_GetTick>
 8008440:	0002      	movs	r2, r0
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	1ad3      	subs	r3, r2, r3
 8008446:	2b02      	cmp	r3, #2
 8008448:	d901      	bls.n	800844e <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 800844a:	2303      	movs	r3, #3
 800844c:	e0ca      	b.n	80085e4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800844e:	4b1e      	ldr	r3, [pc, #120]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	2202      	movs	r2, #2
 8008454:	4013      	ands	r3, r2
 8008456:	d0f1      	beq.n	800843c <HAL_RCC_OscConfig+0x5e4>
 8008458:	e01e      	b.n	8008498 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800845a:	4b1b      	ldr	r3, [pc, #108]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 800845c:	689a      	ldr	r2, [r3, #8]
 800845e:	4b1a      	ldr	r3, [pc, #104]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 8008460:	2101      	movs	r1, #1
 8008462:	438a      	bics	r2, r1
 8008464:	609a      	str	r2, [r3, #8]
 8008466:	4b1f      	ldr	r3, [pc, #124]	; (80084e4 <HAL_RCC_OscConfig+0x68c>)
 8008468:	6a1a      	ldr	r2, [r3, #32]
 800846a:	4b1e      	ldr	r3, [pc, #120]	; (80084e4 <HAL_RCC_OscConfig+0x68c>)
 800846c:	491e      	ldr	r1, [pc, #120]	; (80084e8 <HAL_RCC_OscConfig+0x690>)
 800846e:	400a      	ands	r2, r1
 8008470:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008472:	f7fe fbb1 	bl	8006bd8 <HAL_GetTick>
 8008476:	0003      	movs	r3, r0
 8008478:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800847a:	e008      	b.n	800848e <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800847c:	f7fe fbac 	bl	8006bd8 <HAL_GetTick>
 8008480:	0002      	movs	r2, r0
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	1ad3      	subs	r3, r2, r3
 8008486:	2b02      	cmp	r3, #2
 8008488:	d901      	bls.n	800848e <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 800848a:	2303      	movs	r3, #3
 800848c:	e0aa      	b.n	80085e4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800848e:	4b0e      	ldr	r3, [pc, #56]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	2202      	movs	r2, #2
 8008494:	4013      	ands	r3, r2
 8008496:	d1f1      	bne.n	800847c <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800849c:	2b00      	cmp	r3, #0
 800849e:	d100      	bne.n	80084a2 <HAL_RCC_OscConfig+0x64a>
 80084a0:	e09f      	b.n	80085e2 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	2b0c      	cmp	r3, #12
 80084a6:	d100      	bne.n	80084aa <HAL_RCC_OscConfig+0x652>
 80084a8:	e078      	b.n	800859c <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ae:	2b02      	cmp	r3, #2
 80084b0:	d159      	bne.n	8008566 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084b2:	4b05      	ldr	r3, [pc, #20]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	4b04      	ldr	r3, [pc, #16]	; (80084c8 <HAL_RCC_OscConfig+0x670>)
 80084b8:	490c      	ldr	r1, [pc, #48]	; (80084ec <HAL_RCC_OscConfig+0x694>)
 80084ba:	400a      	ands	r2, r1
 80084bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084be:	f7fe fb8b 	bl	8006bd8 <HAL_GetTick>
 80084c2:	0003      	movs	r3, r0
 80084c4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80084c6:	e01c      	b.n	8008502 <HAL_RCC_OscConfig+0x6aa>
 80084c8:	40021000 	.word	0x40021000
 80084cc:	ffff1fff 	.word	0xffff1fff
 80084d0:	fffffeff 	.word	0xfffffeff
 80084d4:	40007000 	.word	0x40007000
 80084d8:	fffffbff 	.word	0xfffffbff
 80084dc:	00001388 	.word	0x00001388
 80084e0:	efffffff 	.word	0xefffffff
 80084e4:	40010000 	.word	0x40010000
 80084e8:	ffffdfff 	.word	0xffffdfff
 80084ec:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084f0:	f7fe fb72 	bl	8006bd8 <HAL_GetTick>
 80084f4:	0002      	movs	r2, r0
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d901      	bls.n	8008502 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 80084fe:	2303      	movs	r3, #3
 8008500:	e070      	b.n	80085e4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008502:	4b3a      	ldr	r3, [pc, #232]	; (80085ec <HAL_RCC_OscConfig+0x794>)
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	2380      	movs	r3, #128	; 0x80
 8008508:	049b      	lsls	r3, r3, #18
 800850a:	4013      	ands	r3, r2
 800850c:	d1f0      	bne.n	80084f0 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800850e:	4b37      	ldr	r3, [pc, #220]	; (80085ec <HAL_RCC_OscConfig+0x794>)
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	4a37      	ldr	r2, [pc, #220]	; (80085f0 <HAL_RCC_OscConfig+0x798>)
 8008514:	4013      	ands	r3, r2
 8008516:	0019      	movs	r1, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008520:	431a      	orrs	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008526:	431a      	orrs	r2, r3
 8008528:	4b30      	ldr	r3, [pc, #192]	; (80085ec <HAL_RCC_OscConfig+0x794>)
 800852a:	430a      	orrs	r2, r1
 800852c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800852e:	4b2f      	ldr	r3, [pc, #188]	; (80085ec <HAL_RCC_OscConfig+0x794>)
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	4b2e      	ldr	r3, [pc, #184]	; (80085ec <HAL_RCC_OscConfig+0x794>)
 8008534:	2180      	movs	r1, #128	; 0x80
 8008536:	0449      	lsls	r1, r1, #17
 8008538:	430a      	orrs	r2, r1
 800853a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800853c:	f7fe fb4c 	bl	8006bd8 <HAL_GetTick>
 8008540:	0003      	movs	r3, r0
 8008542:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8008544:	e008      	b.n	8008558 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008546:	f7fe fb47 	bl	8006bd8 <HAL_GetTick>
 800854a:	0002      	movs	r2, r0
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	1ad3      	subs	r3, r2, r3
 8008550:	2b02      	cmp	r3, #2
 8008552:	d901      	bls.n	8008558 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8008554:	2303      	movs	r3, #3
 8008556:	e045      	b.n	80085e4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8008558:	4b24      	ldr	r3, [pc, #144]	; (80085ec <HAL_RCC_OscConfig+0x794>)
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	2380      	movs	r3, #128	; 0x80
 800855e:	049b      	lsls	r3, r3, #18
 8008560:	4013      	ands	r3, r2
 8008562:	d0f0      	beq.n	8008546 <HAL_RCC_OscConfig+0x6ee>
 8008564:	e03d      	b.n	80085e2 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008566:	4b21      	ldr	r3, [pc, #132]	; (80085ec <HAL_RCC_OscConfig+0x794>)
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	4b20      	ldr	r3, [pc, #128]	; (80085ec <HAL_RCC_OscConfig+0x794>)
 800856c:	4921      	ldr	r1, [pc, #132]	; (80085f4 <HAL_RCC_OscConfig+0x79c>)
 800856e:	400a      	ands	r2, r1
 8008570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008572:	f7fe fb31 	bl	8006bd8 <HAL_GetTick>
 8008576:	0003      	movs	r3, r0
 8008578:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800857a:	e008      	b.n	800858e <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800857c:	f7fe fb2c 	bl	8006bd8 <HAL_GetTick>
 8008580:	0002      	movs	r2, r0
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	1ad3      	subs	r3, r2, r3
 8008586:	2b02      	cmp	r3, #2
 8008588:	d901      	bls.n	800858e <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 800858a:	2303      	movs	r3, #3
 800858c:	e02a      	b.n	80085e4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800858e:	4b17      	ldr	r3, [pc, #92]	; (80085ec <HAL_RCC_OscConfig+0x794>)
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	2380      	movs	r3, #128	; 0x80
 8008594:	049b      	lsls	r3, r3, #18
 8008596:	4013      	ands	r3, r2
 8008598:	d1f0      	bne.n	800857c <HAL_RCC_OscConfig+0x724>
 800859a:	e022      	b.n	80085e2 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d101      	bne.n	80085a8 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	e01d      	b.n	80085e4 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80085a8:	4b10      	ldr	r3, [pc, #64]	; (80085ec <HAL_RCC_OscConfig+0x794>)
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085ae:	69ba      	ldr	r2, [r7, #24]
 80085b0:	2380      	movs	r3, #128	; 0x80
 80085b2:	025b      	lsls	r3, r3, #9
 80085b4:	401a      	ands	r2, r3
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d10f      	bne.n	80085de <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80085be:	69ba      	ldr	r2, [r7, #24]
 80085c0:	23f0      	movs	r3, #240	; 0xf0
 80085c2:	039b      	lsls	r3, r3, #14
 80085c4:	401a      	ands	r2, r3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d107      	bne.n	80085de <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80085ce:	69ba      	ldr	r2, [r7, #24]
 80085d0:	23c0      	movs	r3, #192	; 0xc0
 80085d2:	041b      	lsls	r3, r3, #16
 80085d4:	401a      	ands	r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80085da:	429a      	cmp	r2, r3
 80085dc:	d001      	beq.n	80085e2 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e000      	b.n	80085e4 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	0018      	movs	r0, r3
 80085e6:	46bd      	mov	sp, r7
 80085e8:	b00a      	add	sp, #40	; 0x28
 80085ea:	bdb0      	pop	{r4, r5, r7, pc}
 80085ec:	40021000 	.word	0x40021000
 80085f0:	ff02ffff 	.word	0xff02ffff
 80085f4:	feffffff 	.word	0xfeffffff

080085f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80085f8:	b5b0      	push	{r4, r5, r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d101      	bne.n	800860c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e10d      	b.n	8008828 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800860c:	4b88      	ldr	r3, [pc, #544]	; (8008830 <HAL_RCC_ClockConfig+0x238>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2201      	movs	r2, #1
 8008612:	4013      	ands	r3, r2
 8008614:	683a      	ldr	r2, [r7, #0]
 8008616:	429a      	cmp	r2, r3
 8008618:	d911      	bls.n	800863e <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800861a:	4b85      	ldr	r3, [pc, #532]	; (8008830 <HAL_RCC_ClockConfig+0x238>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2201      	movs	r2, #1
 8008620:	4393      	bics	r3, r2
 8008622:	0019      	movs	r1, r3
 8008624:	4b82      	ldr	r3, [pc, #520]	; (8008830 <HAL_RCC_ClockConfig+0x238>)
 8008626:	683a      	ldr	r2, [r7, #0]
 8008628:	430a      	orrs	r2, r1
 800862a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800862c:	4b80      	ldr	r3, [pc, #512]	; (8008830 <HAL_RCC_ClockConfig+0x238>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2201      	movs	r2, #1
 8008632:	4013      	ands	r3, r2
 8008634:	683a      	ldr	r2, [r7, #0]
 8008636:	429a      	cmp	r2, r3
 8008638:	d001      	beq.n	800863e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	e0f4      	b.n	8008828 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2202      	movs	r2, #2
 8008644:	4013      	ands	r3, r2
 8008646:	d009      	beq.n	800865c <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008648:	4b7a      	ldr	r3, [pc, #488]	; (8008834 <HAL_RCC_ClockConfig+0x23c>)
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	22f0      	movs	r2, #240	; 0xf0
 800864e:	4393      	bics	r3, r2
 8008650:	0019      	movs	r1, r3
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	689a      	ldr	r2, [r3, #8]
 8008656:	4b77      	ldr	r3, [pc, #476]	; (8008834 <HAL_RCC_ClockConfig+0x23c>)
 8008658:	430a      	orrs	r2, r1
 800865a:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2201      	movs	r2, #1
 8008662:	4013      	ands	r3, r2
 8008664:	d100      	bne.n	8008668 <HAL_RCC_ClockConfig+0x70>
 8008666:	e089      	b.n	800877c <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	2b02      	cmp	r3, #2
 800866e:	d107      	bne.n	8008680 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008670:	4b70      	ldr	r3, [pc, #448]	; (8008834 <HAL_RCC_ClockConfig+0x23c>)
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	2380      	movs	r3, #128	; 0x80
 8008676:	029b      	lsls	r3, r3, #10
 8008678:	4013      	ands	r3, r2
 800867a:	d120      	bne.n	80086be <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	e0d3      	b.n	8008828 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	2b03      	cmp	r3, #3
 8008686:	d107      	bne.n	8008698 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008688:	4b6a      	ldr	r3, [pc, #424]	; (8008834 <HAL_RCC_ClockConfig+0x23c>)
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	2380      	movs	r3, #128	; 0x80
 800868e:	049b      	lsls	r3, r3, #18
 8008690:	4013      	ands	r3, r2
 8008692:	d114      	bne.n	80086be <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	e0c7      	b.n	8008828 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d106      	bne.n	80086ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086a0:	4b64      	ldr	r3, [pc, #400]	; (8008834 <HAL_RCC_ClockConfig+0x23c>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2204      	movs	r2, #4
 80086a6:	4013      	ands	r3, r2
 80086a8:	d109      	bne.n	80086be <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80086aa:	2301      	movs	r3, #1
 80086ac:	e0bc      	b.n	8008828 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80086ae:	4b61      	ldr	r3, [pc, #388]	; (8008834 <HAL_RCC_ClockConfig+0x23c>)
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	2380      	movs	r3, #128	; 0x80
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	4013      	ands	r3, r2
 80086b8:	d101      	bne.n	80086be <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	e0b4      	b.n	8008828 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80086be:	4b5d      	ldr	r3, [pc, #372]	; (8008834 <HAL_RCC_ClockConfig+0x23c>)
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	2203      	movs	r2, #3
 80086c4:	4393      	bics	r3, r2
 80086c6:	0019      	movs	r1, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	685a      	ldr	r2, [r3, #4]
 80086cc:	4b59      	ldr	r3, [pc, #356]	; (8008834 <HAL_RCC_ClockConfig+0x23c>)
 80086ce:	430a      	orrs	r2, r1
 80086d0:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80086d2:	f7fe fa81 	bl	8006bd8 <HAL_GetTick>
 80086d6:	0003      	movs	r3, r0
 80086d8:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	2b02      	cmp	r3, #2
 80086e0:	d111      	bne.n	8008706 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80086e2:	e009      	b.n	80086f8 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086e4:	f7fe fa78 	bl	8006bd8 <HAL_GetTick>
 80086e8:	0002      	movs	r2, r0
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	4a52      	ldr	r2, [pc, #328]	; (8008838 <HAL_RCC_ClockConfig+0x240>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d901      	bls.n	80086f8 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 80086f4:	2303      	movs	r3, #3
 80086f6:	e097      	b.n	8008828 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80086f8:	4b4e      	ldr	r3, [pc, #312]	; (8008834 <HAL_RCC_ClockConfig+0x23c>)
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	220c      	movs	r2, #12
 80086fe:	4013      	ands	r3, r2
 8008700:	2b08      	cmp	r3, #8
 8008702:	d1ef      	bne.n	80086e4 <HAL_RCC_ClockConfig+0xec>
 8008704:	e03a      	b.n	800877c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	2b03      	cmp	r3, #3
 800870c:	d111      	bne.n	8008732 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800870e:	e009      	b.n	8008724 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008710:	f7fe fa62 	bl	8006bd8 <HAL_GetTick>
 8008714:	0002      	movs	r2, r0
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	4a47      	ldr	r2, [pc, #284]	; (8008838 <HAL_RCC_ClockConfig+0x240>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d901      	bls.n	8008724 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8008720:	2303      	movs	r3, #3
 8008722:	e081      	b.n	8008828 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008724:	4b43      	ldr	r3, [pc, #268]	; (8008834 <HAL_RCC_ClockConfig+0x23c>)
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	220c      	movs	r2, #12
 800872a:	4013      	ands	r3, r2
 800872c:	2b0c      	cmp	r3, #12
 800872e:	d1ef      	bne.n	8008710 <HAL_RCC_ClockConfig+0x118>
 8008730:	e024      	b.n	800877c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	2b01      	cmp	r3, #1
 8008738:	d11b      	bne.n	8008772 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800873a:	e009      	b.n	8008750 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800873c:	f7fe fa4c 	bl	8006bd8 <HAL_GetTick>
 8008740:	0002      	movs	r2, r0
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	1ad3      	subs	r3, r2, r3
 8008746:	4a3c      	ldr	r2, [pc, #240]	; (8008838 <HAL_RCC_ClockConfig+0x240>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d901      	bls.n	8008750 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 800874c:	2303      	movs	r3, #3
 800874e:	e06b      	b.n	8008828 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008750:	4b38      	ldr	r3, [pc, #224]	; (8008834 <HAL_RCC_ClockConfig+0x23c>)
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	220c      	movs	r2, #12
 8008756:	4013      	ands	r3, r2
 8008758:	2b04      	cmp	r3, #4
 800875a:	d1ef      	bne.n	800873c <HAL_RCC_ClockConfig+0x144>
 800875c:	e00e      	b.n	800877c <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800875e:	f7fe fa3b 	bl	8006bd8 <HAL_GetTick>
 8008762:	0002      	movs	r2, r0
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	1ad3      	subs	r3, r2, r3
 8008768:	4a33      	ldr	r2, [pc, #204]	; (8008838 <HAL_RCC_ClockConfig+0x240>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d901      	bls.n	8008772 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800876e:	2303      	movs	r3, #3
 8008770:	e05a      	b.n	8008828 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8008772:	4b30      	ldr	r3, [pc, #192]	; (8008834 <HAL_RCC_ClockConfig+0x23c>)
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	220c      	movs	r2, #12
 8008778:	4013      	ands	r3, r2
 800877a:	d1f0      	bne.n	800875e <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800877c:	4b2c      	ldr	r3, [pc, #176]	; (8008830 <HAL_RCC_ClockConfig+0x238>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2201      	movs	r2, #1
 8008782:	4013      	ands	r3, r2
 8008784:	683a      	ldr	r2, [r7, #0]
 8008786:	429a      	cmp	r2, r3
 8008788:	d211      	bcs.n	80087ae <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800878a:	4b29      	ldr	r3, [pc, #164]	; (8008830 <HAL_RCC_ClockConfig+0x238>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2201      	movs	r2, #1
 8008790:	4393      	bics	r3, r2
 8008792:	0019      	movs	r1, r3
 8008794:	4b26      	ldr	r3, [pc, #152]	; (8008830 <HAL_RCC_ClockConfig+0x238>)
 8008796:	683a      	ldr	r2, [r7, #0]
 8008798:	430a      	orrs	r2, r1
 800879a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800879c:	4b24      	ldr	r3, [pc, #144]	; (8008830 <HAL_RCC_ClockConfig+0x238>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	2201      	movs	r2, #1
 80087a2:	4013      	ands	r3, r2
 80087a4:	683a      	ldr	r2, [r7, #0]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d001      	beq.n	80087ae <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e03c      	b.n	8008828 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2204      	movs	r2, #4
 80087b4:	4013      	ands	r3, r2
 80087b6:	d009      	beq.n	80087cc <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80087b8:	4b1e      	ldr	r3, [pc, #120]	; (8008834 <HAL_RCC_ClockConfig+0x23c>)
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	4a1f      	ldr	r2, [pc, #124]	; (800883c <HAL_RCC_ClockConfig+0x244>)
 80087be:	4013      	ands	r3, r2
 80087c0:	0019      	movs	r1, r3
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	68da      	ldr	r2, [r3, #12]
 80087c6:	4b1b      	ldr	r3, [pc, #108]	; (8008834 <HAL_RCC_ClockConfig+0x23c>)
 80087c8:	430a      	orrs	r2, r1
 80087ca:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	2208      	movs	r2, #8
 80087d2:	4013      	ands	r3, r2
 80087d4:	d00a      	beq.n	80087ec <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80087d6:	4b17      	ldr	r3, [pc, #92]	; (8008834 <HAL_RCC_ClockConfig+0x23c>)
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	4a19      	ldr	r2, [pc, #100]	; (8008840 <HAL_RCC_ClockConfig+0x248>)
 80087dc:	4013      	ands	r3, r2
 80087de:	0019      	movs	r1, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	691b      	ldr	r3, [r3, #16]
 80087e4:	00da      	lsls	r2, r3, #3
 80087e6:	4b13      	ldr	r3, [pc, #76]	; (8008834 <HAL_RCC_ClockConfig+0x23c>)
 80087e8:	430a      	orrs	r2, r1
 80087ea:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80087ec:	f000 f82e 	bl	800884c <HAL_RCC_GetSysClockFreq>
 80087f0:	0001      	movs	r1, r0
 80087f2:	4b10      	ldr	r3, [pc, #64]	; (8008834 <HAL_RCC_ClockConfig+0x23c>)
 80087f4:	68db      	ldr	r3, [r3, #12]
 80087f6:	091b      	lsrs	r3, r3, #4
 80087f8:	220f      	movs	r2, #15
 80087fa:	4013      	ands	r3, r2
 80087fc:	4a11      	ldr	r2, [pc, #68]	; (8008844 <HAL_RCC_ClockConfig+0x24c>)
 80087fe:	5cd3      	ldrb	r3, [r2, r3]
 8008800:	000a      	movs	r2, r1
 8008802:	40da      	lsrs	r2, r3
 8008804:	4b10      	ldr	r3, [pc, #64]	; (8008848 <HAL_RCC_ClockConfig+0x250>)
 8008806:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8008808:	250b      	movs	r5, #11
 800880a:	197c      	adds	r4, r7, r5
 800880c:	2000      	movs	r0, #0
 800880e:	f7fe f9ad 	bl	8006b6c <HAL_InitTick>
 8008812:	0003      	movs	r3, r0
 8008814:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8008816:	197b      	adds	r3, r7, r5
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d003      	beq.n	8008826 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 800881e:	230b      	movs	r3, #11
 8008820:	18fb      	adds	r3, r7, r3
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	e000      	b.n	8008828 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8008826:	2300      	movs	r3, #0
}
 8008828:	0018      	movs	r0, r3
 800882a:	46bd      	mov	sp, r7
 800882c:	b004      	add	sp, #16
 800882e:	bdb0      	pop	{r4, r5, r7, pc}
 8008830:	40022000 	.word	0x40022000
 8008834:	40021000 	.word	0x40021000
 8008838:	00001388 	.word	0x00001388
 800883c:	fffff8ff 	.word	0xfffff8ff
 8008840:	ffffc7ff 	.word	0xffffc7ff
 8008844:	0800c520 	.word	0x0800c520
 8008848:	20000010 	.word	0x20000010

0800884c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b086      	sub	sp, #24
 8008850:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8008852:	4b3b      	ldr	r3, [pc, #236]	; (8008940 <HAL_RCC_GetSysClockFreq+0xf4>)
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	220c      	movs	r2, #12
 800885c:	4013      	ands	r3, r2
 800885e:	2b08      	cmp	r3, #8
 8008860:	d00e      	beq.n	8008880 <HAL_RCC_GetSysClockFreq+0x34>
 8008862:	2b0c      	cmp	r3, #12
 8008864:	d00f      	beq.n	8008886 <HAL_RCC_GetSysClockFreq+0x3a>
 8008866:	2b04      	cmp	r3, #4
 8008868:	d157      	bne.n	800891a <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800886a:	4b35      	ldr	r3, [pc, #212]	; (8008940 <HAL_RCC_GetSysClockFreq+0xf4>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2210      	movs	r2, #16
 8008870:	4013      	ands	r3, r2
 8008872:	d002      	beq.n	800887a <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8008874:	4b33      	ldr	r3, [pc, #204]	; (8008944 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008876:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8008878:	e05d      	b.n	8008936 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 800887a:	4b33      	ldr	r3, [pc, #204]	; (8008948 <HAL_RCC_GetSysClockFreq+0xfc>)
 800887c:	613b      	str	r3, [r7, #16]
      break;
 800887e:	e05a      	b.n	8008936 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008880:	4b32      	ldr	r3, [pc, #200]	; (800894c <HAL_RCC_GetSysClockFreq+0x100>)
 8008882:	613b      	str	r3, [r7, #16]
      break;
 8008884:	e057      	b.n	8008936 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	0c9b      	lsrs	r3, r3, #18
 800888a:	220f      	movs	r2, #15
 800888c:	4013      	ands	r3, r2
 800888e:	4a30      	ldr	r2, [pc, #192]	; (8008950 <HAL_RCC_GetSysClockFreq+0x104>)
 8008890:	5cd3      	ldrb	r3, [r2, r3]
 8008892:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	0d9b      	lsrs	r3, r3, #22
 8008898:	2203      	movs	r2, #3
 800889a:	4013      	ands	r3, r2
 800889c:	3301      	adds	r3, #1
 800889e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80088a0:	4b27      	ldr	r3, [pc, #156]	; (8008940 <HAL_RCC_GetSysClockFreq+0xf4>)
 80088a2:	68da      	ldr	r2, [r3, #12]
 80088a4:	2380      	movs	r3, #128	; 0x80
 80088a6:	025b      	lsls	r3, r3, #9
 80088a8:	4013      	ands	r3, r2
 80088aa:	d00f      	beq.n	80088cc <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80088ac:	68b9      	ldr	r1, [r7, #8]
 80088ae:	000a      	movs	r2, r1
 80088b0:	0152      	lsls	r2, r2, #5
 80088b2:	1a52      	subs	r2, r2, r1
 80088b4:	0193      	lsls	r3, r2, #6
 80088b6:	1a9b      	subs	r3, r3, r2
 80088b8:	00db      	lsls	r3, r3, #3
 80088ba:	185b      	adds	r3, r3, r1
 80088bc:	025b      	lsls	r3, r3, #9
 80088be:	6879      	ldr	r1, [r7, #4]
 80088c0:	0018      	movs	r0, r3
 80088c2:	f7f7 fc29 	bl	8000118 <__udivsi3>
 80088c6:	0003      	movs	r3, r0
 80088c8:	617b      	str	r3, [r7, #20]
 80088ca:	e023      	b.n	8008914 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80088cc:	4b1c      	ldr	r3, [pc, #112]	; (8008940 <HAL_RCC_GetSysClockFreq+0xf4>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2210      	movs	r2, #16
 80088d2:	4013      	ands	r3, r2
 80088d4:	d00f      	beq.n	80088f6 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80088d6:	68b9      	ldr	r1, [r7, #8]
 80088d8:	000a      	movs	r2, r1
 80088da:	0152      	lsls	r2, r2, #5
 80088dc:	1a52      	subs	r2, r2, r1
 80088de:	0193      	lsls	r3, r2, #6
 80088e0:	1a9b      	subs	r3, r3, r2
 80088e2:	00db      	lsls	r3, r3, #3
 80088e4:	185b      	adds	r3, r3, r1
 80088e6:	021b      	lsls	r3, r3, #8
 80088e8:	6879      	ldr	r1, [r7, #4]
 80088ea:	0018      	movs	r0, r3
 80088ec:	f7f7 fc14 	bl	8000118 <__udivsi3>
 80088f0:	0003      	movs	r3, r0
 80088f2:	617b      	str	r3, [r7, #20]
 80088f4:	e00e      	b.n	8008914 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 80088f6:	68b9      	ldr	r1, [r7, #8]
 80088f8:	000a      	movs	r2, r1
 80088fa:	0152      	lsls	r2, r2, #5
 80088fc:	1a52      	subs	r2, r2, r1
 80088fe:	0193      	lsls	r3, r2, #6
 8008900:	1a9b      	subs	r3, r3, r2
 8008902:	00db      	lsls	r3, r3, #3
 8008904:	185b      	adds	r3, r3, r1
 8008906:	029b      	lsls	r3, r3, #10
 8008908:	6879      	ldr	r1, [r7, #4]
 800890a:	0018      	movs	r0, r3
 800890c:	f7f7 fc04 	bl	8000118 <__udivsi3>
 8008910:	0003      	movs	r3, r0
 8008912:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	613b      	str	r3, [r7, #16]
      break;
 8008918:	e00d      	b.n	8008936 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800891a:	4b09      	ldr	r3, [pc, #36]	; (8008940 <HAL_RCC_GetSysClockFreq+0xf4>)
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	0b5b      	lsrs	r3, r3, #13
 8008920:	2207      	movs	r2, #7
 8008922:	4013      	ands	r3, r2
 8008924:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	3301      	adds	r3, #1
 800892a:	2280      	movs	r2, #128	; 0x80
 800892c:	0212      	lsls	r2, r2, #8
 800892e:	409a      	lsls	r2, r3
 8008930:	0013      	movs	r3, r2
 8008932:	613b      	str	r3, [r7, #16]
      break;
 8008934:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8008936:	693b      	ldr	r3, [r7, #16]
}
 8008938:	0018      	movs	r0, r3
 800893a:	46bd      	mov	sp, r7
 800893c:	b006      	add	sp, #24
 800893e:	bd80      	pop	{r7, pc}
 8008940:	40021000 	.word	0x40021000
 8008944:	003d0900 	.word	0x003d0900
 8008948:	00f42400 	.word	0x00f42400
 800894c:	007a1200 	.word	0x007a1200
 8008950:	0800c530 	.word	0x0800c530

08008954 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b086      	sub	sp, #24
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2220      	movs	r2, #32
 8008962:	4013      	ands	r3, r2
 8008964:	d106      	bne.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	2380      	movs	r3, #128	; 0x80
 800896c:	011b      	lsls	r3, r3, #4
 800896e:	4013      	ands	r3, r2
 8008970:	d100      	bne.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8008972:	e0dd      	b.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8008974:	2317      	movs	r3, #23
 8008976:	18fb      	adds	r3, r7, r3
 8008978:	2200      	movs	r2, #0
 800897a:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800897c:	4ba4      	ldr	r3, [pc, #656]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800897e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008980:	2380      	movs	r3, #128	; 0x80
 8008982:	055b      	lsls	r3, r3, #21
 8008984:	4013      	ands	r3, r2
 8008986:	d10a      	bne.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008988:	4ba1      	ldr	r3, [pc, #644]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800898a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800898c:	4ba0      	ldr	r3, [pc, #640]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800898e:	2180      	movs	r1, #128	; 0x80
 8008990:	0549      	lsls	r1, r1, #21
 8008992:	430a      	orrs	r2, r1
 8008994:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8008996:	2317      	movs	r3, #23
 8008998:	18fb      	adds	r3, r7, r3
 800899a:	2201      	movs	r2, #1
 800899c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800899e:	4b9d      	ldr	r3, [pc, #628]	; (8008c14 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	2380      	movs	r3, #128	; 0x80
 80089a4:	005b      	lsls	r3, r3, #1
 80089a6:	4013      	ands	r3, r2
 80089a8:	d11a      	bne.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80089aa:	4b9a      	ldr	r3, [pc, #616]	; (8008c14 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	4b99      	ldr	r3, [pc, #612]	; (8008c14 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80089b0:	2180      	movs	r1, #128	; 0x80
 80089b2:	0049      	lsls	r1, r1, #1
 80089b4:	430a      	orrs	r2, r1
 80089b6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089b8:	f7fe f90e 	bl	8006bd8 <HAL_GetTick>
 80089bc:	0003      	movs	r3, r0
 80089be:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089c0:	e008      	b.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089c2:	f7fe f909 	bl	8006bd8 <HAL_GetTick>
 80089c6:	0002      	movs	r2, r0
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	2b64      	cmp	r3, #100	; 0x64
 80089ce:	d901      	bls.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80089d0:	2303      	movs	r3, #3
 80089d2:	e118      	b.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089d4:	4b8f      	ldr	r3, [pc, #572]	; (8008c14 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	2380      	movs	r3, #128	; 0x80
 80089da:	005b      	lsls	r3, r3, #1
 80089dc:	4013      	ands	r3, r2
 80089de:	d0f0      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80089e0:	4b8b      	ldr	r3, [pc, #556]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	23c0      	movs	r3, #192	; 0xc0
 80089e6:	039b      	lsls	r3, r3, #14
 80089e8:	4013      	ands	r3, r2
 80089ea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	685a      	ldr	r2, [r3, #4]
 80089f0:	23c0      	movs	r3, #192	; 0xc0
 80089f2:	039b      	lsls	r3, r3, #14
 80089f4:	4013      	ands	r3, r2
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d107      	bne.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	689a      	ldr	r2, [r3, #8]
 8008a00:	23c0      	movs	r3, #192	; 0xc0
 8008a02:	039b      	lsls	r3, r3, #14
 8008a04:	4013      	ands	r3, r2
 8008a06:	68fa      	ldr	r2, [r7, #12]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d013      	beq.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	685a      	ldr	r2, [r3, #4]
 8008a10:	23c0      	movs	r3, #192	; 0xc0
 8008a12:	029b      	lsls	r3, r3, #10
 8008a14:	401a      	ands	r2, r3
 8008a16:	23c0      	movs	r3, #192	; 0xc0
 8008a18:	029b      	lsls	r3, r3, #10
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d10a      	bne.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008a1e:	4b7c      	ldr	r3, [pc, #496]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	2380      	movs	r3, #128	; 0x80
 8008a24:	029b      	lsls	r3, r3, #10
 8008a26:	401a      	ands	r2, r3
 8008a28:	2380      	movs	r3, #128	; 0x80
 8008a2a:	029b      	lsls	r3, r3, #10
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d101      	bne.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	e0e8      	b.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8008a34:	4b76      	ldr	r3, [pc, #472]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008a36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a38:	23c0      	movs	r3, #192	; 0xc0
 8008a3a:	029b      	lsls	r3, r3, #10
 8008a3c:	4013      	ands	r3, r2
 8008a3e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d049      	beq.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x186>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	685a      	ldr	r2, [r3, #4]
 8008a4a:	23c0      	movs	r3, #192	; 0xc0
 8008a4c:	029b      	lsls	r3, r3, #10
 8008a4e:	4013      	ands	r3, r2
 8008a50:	68fa      	ldr	r2, [r7, #12]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d004      	beq.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2220      	movs	r2, #32
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	d10d      	bne.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	689a      	ldr	r2, [r3, #8]
 8008a64:	23c0      	movs	r3, #192	; 0xc0
 8008a66:	029b      	lsls	r3, r3, #10
 8008a68:	4013      	ands	r3, r2
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d034      	beq.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	2380      	movs	r3, #128	; 0x80
 8008a76:	011b      	lsls	r3, r3, #4
 8008a78:	4013      	ands	r3, r2
 8008a7a:	d02e      	beq.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8008a7c:	4b64      	ldr	r3, [pc, #400]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a80:	4a65      	ldr	r2, [pc, #404]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008a82:	4013      	ands	r3, r2
 8008a84:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008a86:	4b62      	ldr	r3, [pc, #392]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008a88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a8a:	4b61      	ldr	r3, [pc, #388]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008a8c:	2180      	movs	r1, #128	; 0x80
 8008a8e:	0309      	lsls	r1, r1, #12
 8008a90:	430a      	orrs	r2, r1
 8008a92:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008a94:	4b5e      	ldr	r3, [pc, #376]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008a96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a98:	4b5d      	ldr	r3, [pc, #372]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008a9a:	4960      	ldr	r1, [pc, #384]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8008a9c:	400a      	ands	r2, r1
 8008a9e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8008aa0:	4b5b      	ldr	r3, [pc, #364]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8008aa6:	68fa      	ldr	r2, [r7, #12]
 8008aa8:	2380      	movs	r3, #128	; 0x80
 8008aaa:	005b      	lsls	r3, r3, #1
 8008aac:	4013      	ands	r3, r2
 8008aae:	d014      	beq.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ab0:	f7fe f892 	bl	8006bd8 <HAL_GetTick>
 8008ab4:	0003      	movs	r3, r0
 8008ab6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008ab8:	e009      	b.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008aba:	f7fe f88d 	bl	8006bd8 <HAL_GetTick>
 8008abe:	0002      	movs	r2, r0
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	1ad3      	subs	r3, r2, r3
 8008ac4:	4a56      	ldr	r2, [pc, #344]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d901      	bls.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8008aca:	2303      	movs	r3, #3
 8008acc:	e09b      	b.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008ace:	4b50      	ldr	r3, [pc, #320]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008ad0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ad2:	2380      	movs	r3, #128	; 0x80
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4013      	ands	r3, r2
 8008ad8:	d0ef      	beq.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	685a      	ldr	r2, [r3, #4]
 8008ade:	23c0      	movs	r3, #192	; 0xc0
 8008ae0:	029b      	lsls	r3, r3, #10
 8008ae2:	401a      	ands	r2, r3
 8008ae4:	23c0      	movs	r3, #192	; 0xc0
 8008ae6:	029b      	lsls	r3, r3, #10
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d10c      	bne.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8008aec:	4b48      	ldr	r3, [pc, #288]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a4c      	ldr	r2, [pc, #304]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8008af2:	4013      	ands	r3, r2
 8008af4:	0019      	movs	r1, r3
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	685a      	ldr	r2, [r3, #4]
 8008afa:	23c0      	movs	r3, #192	; 0xc0
 8008afc:	039b      	lsls	r3, r3, #14
 8008afe:	401a      	ands	r2, r3
 8008b00:	4b43      	ldr	r3, [pc, #268]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008b02:	430a      	orrs	r2, r1
 8008b04:	601a      	str	r2, [r3, #0]
 8008b06:	4b42      	ldr	r3, [pc, #264]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008b08:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	685a      	ldr	r2, [r3, #4]
 8008b0e:	23c0      	movs	r3, #192	; 0xc0
 8008b10:	029b      	lsls	r3, r3, #10
 8008b12:	401a      	ands	r2, r3
 8008b14:	4b3e      	ldr	r3, [pc, #248]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008b16:	430a      	orrs	r2, r1
 8008b18:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008b1a:	2317      	movs	r3, #23
 8008b1c:	18fb      	adds	r3, r7, r3
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d105      	bne.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b24:	4b3a      	ldr	r3, [pc, #232]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008b26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b28:	4b39      	ldr	r3, [pc, #228]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008b2a:	493f      	ldr	r1, [pc, #252]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b2c:	400a      	ands	r2, r1
 8008b2e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2201      	movs	r2, #1
 8008b36:	4013      	ands	r3, r2
 8008b38:	d009      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008b3a:	4b35      	ldr	r3, [pc, #212]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b3e:	2203      	movs	r2, #3
 8008b40:	4393      	bics	r3, r2
 8008b42:	0019      	movs	r1, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	68da      	ldr	r2, [r3, #12]
 8008b48:	4b31      	ldr	r3, [pc, #196]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008b4a:	430a      	orrs	r2, r1
 8008b4c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2202      	movs	r2, #2
 8008b54:	4013      	ands	r3, r2
 8008b56:	d009      	beq.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008b58:	4b2d      	ldr	r3, [pc, #180]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b5c:	220c      	movs	r2, #12
 8008b5e:	4393      	bics	r3, r2
 8008b60:	0019      	movs	r1, r3
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	691a      	ldr	r2, [r3, #16]
 8008b66:	4b2a      	ldr	r3, [pc, #168]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008b68:	430a      	orrs	r2, r1
 8008b6a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2204      	movs	r2, #4
 8008b72:	4013      	ands	r3, r2
 8008b74:	d009      	beq.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008b76:	4b26      	ldr	r3, [pc, #152]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b7a:	4a2c      	ldr	r2, [pc, #176]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	0019      	movs	r1, r3
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	695a      	ldr	r2, [r3, #20]
 8008b84:	4b22      	ldr	r3, [pc, #136]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008b86:	430a      	orrs	r2, r1
 8008b88:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2208      	movs	r2, #8
 8008b90:	4013      	ands	r3, r2
 8008b92:	d009      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008b94:	4b1e      	ldr	r3, [pc, #120]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b98:	4a25      	ldr	r2, [pc, #148]	; (8008c30 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8008b9a:	4013      	ands	r3, r2
 8008b9c:	0019      	movs	r1, r3
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	699a      	ldr	r2, [r3, #24]
 8008ba2:	4b1b      	ldr	r3, [pc, #108]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008ba4:	430a      	orrs	r2, r1
 8008ba6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	2380      	movs	r3, #128	; 0x80
 8008bae:	005b      	lsls	r3, r3, #1
 8008bb0:	4013      	ands	r3, r2
 8008bb2:	d009      	beq.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008bb4:	4b16      	ldr	r3, [pc, #88]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bb8:	4a17      	ldr	r2, [pc, #92]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008bba:	4013      	ands	r3, r2
 8008bbc:	0019      	movs	r1, r3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	69da      	ldr	r2, [r3, #28]
 8008bc2:	4b13      	ldr	r3, [pc, #76]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008bc4:	430a      	orrs	r2, r1
 8008bc6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2240      	movs	r2, #64	; 0x40
 8008bce:	4013      	ands	r3, r2
 8008bd0:	d009      	beq.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008bd2:	4b0f      	ldr	r3, [pc, #60]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bd6:	4a17      	ldr	r2, [pc, #92]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8008bd8:	4013      	ands	r3, r2
 8008bda:	0019      	movs	r1, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008be0:	4b0b      	ldr	r3, [pc, #44]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008be2:	430a      	orrs	r2, r1
 8008be4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2280      	movs	r2, #128	; 0x80
 8008bec:	4013      	ands	r3, r2
 8008bee:	d009      	beq.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8008bf0:	4b07      	ldr	r3, [pc, #28]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bf4:	4a10      	ldr	r2, [pc, #64]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	0019      	movs	r1, r3
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a1a      	ldr	r2, [r3, #32]
 8008bfe:	4b04      	ldr	r3, [pc, #16]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008c00:	430a      	orrs	r2, r1
 8008c02:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	0018      	movs	r0, r3
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	b006      	add	sp, #24
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	46c0      	nop			; (mov r8, r8)
 8008c10:	40021000 	.word	0x40021000
 8008c14:	40007000 	.word	0x40007000
 8008c18:	fffcffff 	.word	0xfffcffff
 8008c1c:	fff7ffff 	.word	0xfff7ffff
 8008c20:	00001388 	.word	0x00001388
 8008c24:	ffcfffff 	.word	0xffcfffff
 8008c28:	efffffff 	.word	0xefffffff
 8008c2c:	fffff3ff 	.word	0xfffff3ff
 8008c30:	ffffcfff 	.word	0xffffcfff
 8008c34:	fbffffff 	.word	0xfbffffff
 8008c38:	fff3ffff 	.word	0xfff3ffff

08008c3c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d101      	bne.n	8008c4e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e08e      	b.n	8008d6c <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2221      	movs	r2, #33	; 0x21
 8008c52:	5c9b      	ldrb	r3, [r3, r2]
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d107      	bne.n	8008c6a <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2220      	movs	r2, #32
 8008c5e:	2100      	movs	r1, #0
 8008c60:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	0018      	movs	r0, r3
 8008c66:	f7fb fd23 	bl	80046b0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2221      	movs	r2, #33	; 0x21
 8008c6e:	2102      	movs	r1, #2
 8008c70:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	22ca      	movs	r2, #202	; 0xca
 8008c78:	625a      	str	r2, [r3, #36]	; 0x24
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	2253      	movs	r2, #83	; 0x53
 8008c80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	0018      	movs	r0, r3
 8008c86:	f000 fcf4 	bl	8009672 <RTC_EnterInitMode>
 8008c8a:	1e03      	subs	r3, r0, #0
 8008c8c:	d009      	beq.n	8008ca2 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	22ff      	movs	r2, #255	; 0xff
 8008c94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2221      	movs	r2, #33	; 0x21
 8008c9a:	2104      	movs	r1, #4
 8008c9c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e064      	b.n	8008d6c <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	689a      	ldr	r2, [r3, #8]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4931      	ldr	r1, [pc, #196]	; (8008d74 <HAL_RTC_Init+0x138>)
 8008cae:	400a      	ands	r2, r1
 8008cb0:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	6899      	ldr	r1, [r3, #8]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	685a      	ldr	r2, [r3, #4]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	431a      	orrs	r2, r3
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	699b      	ldr	r3, [r3, #24]
 8008cc6:	431a      	orrs	r2, r3
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	430a      	orrs	r2, r1
 8008cce:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	68d2      	ldr	r2, [r2, #12]
 8008cd8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	6919      	ldr	r1, [r3, #16]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	041a      	lsls	r2, r3, #16
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	430a      	orrs	r2, r1
 8008cec:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	68da      	ldr	r2, [r3, #12]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	2180      	movs	r1, #128	; 0x80
 8008cfa:	438a      	bics	r2, r1
 8008cfc:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2103      	movs	r1, #3
 8008d0a:	438a      	bics	r2, r1
 8008d0c:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	69da      	ldr	r2, [r3, #28]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	695b      	ldr	r3, [r3, #20]
 8008d1c:	431a      	orrs	r2, r3
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	430a      	orrs	r2, r1
 8008d24:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	2220      	movs	r2, #32
 8008d2e:	4013      	ands	r3, r2
 8008d30:	d113      	bne.n	8008d5a <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	0018      	movs	r0, r3
 8008d36:	f000 fc75 	bl	8009624 <HAL_RTC_WaitForSynchro>
 8008d3a:	1e03      	subs	r3, r0, #0
 8008d3c:	d00d      	beq.n	8008d5a <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	22ff      	movs	r2, #255	; 0xff
 8008d44:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2221      	movs	r2, #33	; 0x21
 8008d4a:	2104      	movs	r1, #4
 8008d4c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2220      	movs	r2, #32
 8008d52:	2100      	movs	r1, #0
 8008d54:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8008d56:	2301      	movs	r3, #1
 8008d58:	e008      	b.n	8008d6c <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	22ff      	movs	r2, #255	; 0xff
 8008d60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2221      	movs	r2, #33	; 0x21
 8008d66:	2101      	movs	r1, #1
 8008d68:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008d6a:	2300      	movs	r3, #0
  }
}
 8008d6c:	0018      	movs	r0, r3
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	b002      	add	sp, #8
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	ff8fffbf 	.word	0xff8fffbf

08008d78 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008d78:	b590      	push	{r4, r7, lr}
 8008d7a:	b087      	sub	sp, #28
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2220      	movs	r2, #32
 8008d88:	5c9b      	ldrb	r3, [r3, r2]
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d101      	bne.n	8008d92 <HAL_RTC_SetTime+0x1a>
 8008d8e:	2302      	movs	r3, #2
 8008d90:	e0ad      	b.n	8008eee <HAL_RTC_SetTime+0x176>
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2220      	movs	r2, #32
 8008d96:	2101      	movs	r1, #1
 8008d98:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2221      	movs	r2, #33	; 0x21
 8008d9e:	2102      	movs	r1, #2
 8008da0:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d125      	bne.n	8008df4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	2240      	movs	r2, #64	; 0x40
 8008db0:	4013      	ands	r3, r2
 8008db2:	d102      	bne.n	8008dba <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	2200      	movs	r2, #0
 8008db8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	0018      	movs	r0, r3
 8008dc0:	f000 fc81 	bl	80096c6 <RTC_ByteToBcd2>
 8008dc4:	0003      	movs	r3, r0
 8008dc6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	785b      	ldrb	r3, [r3, #1]
 8008dcc:	0018      	movs	r0, r3
 8008dce:	f000 fc7a 	bl	80096c6 <RTC_ByteToBcd2>
 8008dd2:	0003      	movs	r3, r0
 8008dd4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008dd6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	789b      	ldrb	r3, [r3, #2]
 8008ddc:	0018      	movs	r0, r3
 8008dde:	f000 fc72 	bl	80096c6 <RTC_ByteToBcd2>
 8008de2:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008de4:	0022      	movs	r2, r4
 8008de6:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	78db      	ldrb	r3, [r3, #3]
 8008dec:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008dee:	4313      	orrs	r3, r2
 8008df0:	617b      	str	r3, [r7, #20]
 8008df2:	e017      	b.n	8008e24 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	2240      	movs	r2, #64	; 0x40
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	d102      	bne.n	8008e06 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	2200      	movs	r2, #0
 8008e04:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	785b      	ldrb	r3, [r3, #1]
 8008e10:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008e12:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008e14:	68ba      	ldr	r2, [r7, #8]
 8008e16:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008e18:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	78db      	ldrb	r3, [r3, #3]
 8008e1e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008e20:	4313      	orrs	r3, r2
 8008e22:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	22ca      	movs	r2, #202	; 0xca
 8008e2a:	625a      	str	r2, [r3, #36]	; 0x24
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2253      	movs	r2, #83	; 0x53
 8008e32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	0018      	movs	r0, r3
 8008e38:	f000 fc1b 	bl	8009672 <RTC_EnterInitMode>
 8008e3c:	1e03      	subs	r3, r0, #0
 8008e3e:	d00d      	beq.n	8008e5c <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	22ff      	movs	r2, #255	; 0xff
 8008e46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2221      	movs	r2, #33	; 0x21
 8008e4c:	2104      	movs	r1, #4
 8008e4e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2220      	movs	r2, #32
 8008e54:	2100      	movs	r1, #0
 8008e56:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	e048      	b.n	8008eee <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	697a      	ldr	r2, [r7, #20]
 8008e62:	4925      	ldr	r1, [pc, #148]	; (8008ef8 <HAL_RTC_SetTime+0x180>)
 8008e64:	400a      	ands	r2, r1
 8008e66:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	689a      	ldr	r2, [r3, #8]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4922      	ldr	r1, [pc, #136]	; (8008efc <HAL_RTC_SetTime+0x184>)
 8008e74:	400a      	ands	r2, r1
 8008e76:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	6899      	ldr	r1, [r3, #8]
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	68da      	ldr	r2, [r3, #12]
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	691b      	ldr	r3, [r3, #16]
 8008e86:	431a      	orrs	r2, r3
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	430a      	orrs	r2, r1
 8008e8e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	68da      	ldr	r2, [r3, #12]
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	2180      	movs	r1, #128	; 0x80
 8008e9c:	438a      	bics	r2, r1
 8008e9e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	2220      	movs	r2, #32
 8008ea8:	4013      	ands	r3, r2
 8008eaa:	d113      	bne.n	8008ed4 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	0018      	movs	r0, r3
 8008eb0:	f000 fbb8 	bl	8009624 <HAL_RTC_WaitForSynchro>
 8008eb4:	1e03      	subs	r3, r0, #0
 8008eb6:	d00d      	beq.n	8008ed4 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	22ff      	movs	r2, #255	; 0xff
 8008ebe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2221      	movs	r2, #33	; 0x21
 8008ec4:	2104      	movs	r1, #4
 8008ec6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2220      	movs	r2, #32
 8008ecc:	2100      	movs	r1, #0
 8008ece:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e00c      	b.n	8008eee <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	22ff      	movs	r2, #255	; 0xff
 8008eda:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2221      	movs	r2, #33	; 0x21
 8008ee0:	2101      	movs	r1, #1
 8008ee2:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2220      	movs	r2, #32
 8008ee8:	2100      	movs	r1, #0
 8008eea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008eec:	2300      	movs	r3, #0
  }
}
 8008eee:	0018      	movs	r0, r3
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	b007      	add	sp, #28
 8008ef4:	bd90      	pop	{r4, r7, pc}
 8008ef6:	46c0      	nop			; (mov r8, r8)
 8008ef8:	007f7f7f 	.word	0x007f7f7f
 8008efc:	fffbffff 	.word	0xfffbffff

08008f00 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b086      	sub	sp, #24
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	691b      	ldr	r3, [r3, #16]
 8008f1c:	045b      	lsls	r3, r3, #17
 8008f1e:	0c5a      	lsrs	r2, r3, #17
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a22      	ldr	r2, [pc, #136]	; (8008fb4 <HAL_RTC_GetTime+0xb4>)
 8008f2c:	4013      	ands	r3, r2
 8008f2e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	0c1b      	lsrs	r3, r3, #16
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	223f      	movs	r2, #63	; 0x3f
 8008f38:	4013      	ands	r3, r2
 8008f3a:	b2da      	uxtb	r2, r3
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	0a1b      	lsrs	r3, r3, #8
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	227f      	movs	r2, #127	; 0x7f
 8008f48:	4013      	ands	r3, r2
 8008f4a:	b2da      	uxtb	r2, r3
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	227f      	movs	r2, #127	; 0x7f
 8008f56:	4013      	ands	r3, r2
 8008f58:	b2da      	uxtb	r2, r3
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	0c1b      	lsrs	r3, r3, #16
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	2240      	movs	r2, #64	; 0x40
 8008f66:	4013      	ands	r3, r2
 8008f68:	b2da      	uxtb	r2, r3
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d11a      	bne.n	8008faa <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	0018      	movs	r0, r3
 8008f7a:	f000 fbcd 	bl	8009718 <RTC_Bcd2ToByte>
 8008f7e:	0003      	movs	r3, r0
 8008f80:	001a      	movs	r2, r3
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	785b      	ldrb	r3, [r3, #1]
 8008f8a:	0018      	movs	r0, r3
 8008f8c:	f000 fbc4 	bl	8009718 <RTC_Bcd2ToByte>
 8008f90:	0003      	movs	r3, r0
 8008f92:	001a      	movs	r2, r3
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	789b      	ldrb	r3, [r3, #2]
 8008f9c:	0018      	movs	r0, r3
 8008f9e:	f000 fbbb 	bl	8009718 <RTC_Bcd2ToByte>
 8008fa2:	0003      	movs	r3, r0
 8008fa4:	001a      	movs	r2, r3
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008faa:	2300      	movs	r3, #0
}
 8008fac:	0018      	movs	r0, r3
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	b006      	add	sp, #24
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	007f7f7f 	.word	0x007f7f7f

08008fb8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008fb8:	b590      	push	{r4, r7, lr}
 8008fba:	b087      	sub	sp, #28
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2220      	movs	r2, #32
 8008fc8:	5c9b      	ldrb	r3, [r3, r2]
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d101      	bne.n	8008fd2 <HAL_RTC_SetDate+0x1a>
 8008fce:	2302      	movs	r3, #2
 8008fd0:	e099      	b.n	8009106 <HAL_RTC_SetDate+0x14e>
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2220      	movs	r2, #32
 8008fd6:	2101      	movs	r1, #1
 8008fd8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2221      	movs	r2, #33	; 0x21
 8008fde:	2102      	movs	r1, #2
 8008fe0:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d10e      	bne.n	8009006 <HAL_RTC_SetDate+0x4e>
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	785b      	ldrb	r3, [r3, #1]
 8008fec:	001a      	movs	r2, r3
 8008fee:	2310      	movs	r3, #16
 8008ff0:	4013      	ands	r3, r2
 8008ff2:	d008      	beq.n	8009006 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	785b      	ldrb	r3, [r3, #1]
 8008ff8:	2210      	movs	r2, #16
 8008ffa:	4393      	bics	r3, r2
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	330a      	adds	r3, #10
 8009000:	b2da      	uxtb	r2, r3
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d11c      	bne.n	8009046 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	78db      	ldrb	r3, [r3, #3]
 8009010:	0018      	movs	r0, r3
 8009012:	f000 fb58 	bl	80096c6 <RTC_ByteToBcd2>
 8009016:	0003      	movs	r3, r0
 8009018:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	785b      	ldrb	r3, [r3, #1]
 800901e:	0018      	movs	r0, r3
 8009020:	f000 fb51 	bl	80096c6 <RTC_ByteToBcd2>
 8009024:	0003      	movs	r3, r0
 8009026:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009028:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	789b      	ldrb	r3, [r3, #2]
 800902e:	0018      	movs	r0, r3
 8009030:	f000 fb49 	bl	80096c6 <RTC_ByteToBcd2>
 8009034:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009036:	0022      	movs	r2, r4
 8009038:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009040:	4313      	orrs	r3, r2
 8009042:	617b      	str	r3, [r7, #20]
 8009044:	e00e      	b.n	8009064 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	78db      	ldrb	r3, [r3, #3]
 800904a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	785b      	ldrb	r3, [r3, #1]
 8009050:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009052:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8009054:	68ba      	ldr	r2, [r7, #8]
 8009056:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8009058:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009060:	4313      	orrs	r3, r2
 8009062:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	22ca      	movs	r2, #202	; 0xca
 800906a:	625a      	str	r2, [r3, #36]	; 0x24
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2253      	movs	r2, #83	; 0x53
 8009072:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	0018      	movs	r0, r3
 8009078:	f000 fafb 	bl	8009672 <RTC_EnterInitMode>
 800907c:	1e03      	subs	r3, r0, #0
 800907e:	d00d      	beq.n	800909c <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	22ff      	movs	r2, #255	; 0xff
 8009086:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2221      	movs	r2, #33	; 0x21
 800908c:	2104      	movs	r1, #4
 800908e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2220      	movs	r2, #32
 8009094:	2100      	movs	r1, #0
 8009096:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009098:	2301      	movs	r3, #1
 800909a:	e034      	b.n	8009106 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	697a      	ldr	r2, [r7, #20]
 80090a2:	491b      	ldr	r1, [pc, #108]	; (8009110 <HAL_RTC_SetDate+0x158>)
 80090a4:	400a      	ands	r2, r1
 80090a6:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	68da      	ldr	r2, [r3, #12]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	2180      	movs	r1, #128	; 0x80
 80090b4:	438a      	bics	r2, r1
 80090b6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	2220      	movs	r2, #32
 80090c0:	4013      	ands	r3, r2
 80090c2:	d113      	bne.n	80090ec <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	0018      	movs	r0, r3
 80090c8:	f000 faac 	bl	8009624 <HAL_RTC_WaitForSynchro>
 80090cc:	1e03      	subs	r3, r0, #0
 80090ce:	d00d      	beq.n	80090ec <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	22ff      	movs	r2, #255	; 0xff
 80090d6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2221      	movs	r2, #33	; 0x21
 80090dc:	2104      	movs	r1, #4
 80090de:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2220      	movs	r2, #32
 80090e4:	2100      	movs	r1, #0
 80090e6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	e00c      	b.n	8009106 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	22ff      	movs	r2, #255	; 0xff
 80090f2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2221      	movs	r2, #33	; 0x21
 80090f8:	2101      	movs	r1, #1
 80090fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2220      	movs	r2, #32
 8009100:	2100      	movs	r1, #0
 8009102:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009104:	2300      	movs	r3, #0
  }
}
 8009106:	0018      	movs	r0, r3
 8009108:	46bd      	mov	sp, r7
 800910a:	b007      	add	sp, #28
 800910c:	bd90      	pop	{r4, r7, pc}
 800910e:	46c0      	nop			; (mov r8, r8)
 8009110:	00ffff3f 	.word	0x00ffff3f

08009114 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b086      	sub	sp, #24
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	4a21      	ldr	r2, [pc, #132]	; (80091ac <HAL_RTC_GetDate+0x98>)
 8009128:	4013      	ands	r3, r2
 800912a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	0c1b      	lsrs	r3, r3, #16
 8009130:	b2da      	uxtb	r2, r3
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	0a1b      	lsrs	r3, r3, #8
 800913a:	b2db      	uxtb	r3, r3
 800913c:	221f      	movs	r2, #31
 800913e:	4013      	ands	r3, r2
 8009140:	b2da      	uxtb	r2, r3
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	b2db      	uxtb	r3, r3
 800914a:	223f      	movs	r2, #63	; 0x3f
 800914c:	4013      	ands	r3, r2
 800914e:	b2da      	uxtb	r2, r3
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	0b5b      	lsrs	r3, r3, #13
 8009158:	b2db      	uxtb	r3, r3
 800915a:	2207      	movs	r2, #7
 800915c:	4013      	ands	r3, r2
 800915e:	b2da      	uxtb	r2, r3
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d11a      	bne.n	80091a0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	78db      	ldrb	r3, [r3, #3]
 800916e:	0018      	movs	r0, r3
 8009170:	f000 fad2 	bl	8009718 <RTC_Bcd2ToByte>
 8009174:	0003      	movs	r3, r0
 8009176:	001a      	movs	r2, r3
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	785b      	ldrb	r3, [r3, #1]
 8009180:	0018      	movs	r0, r3
 8009182:	f000 fac9 	bl	8009718 <RTC_Bcd2ToByte>
 8009186:	0003      	movs	r3, r0
 8009188:	001a      	movs	r2, r3
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	789b      	ldrb	r3, [r3, #2]
 8009192:	0018      	movs	r0, r3
 8009194:	f000 fac0 	bl	8009718 <RTC_Bcd2ToByte>
 8009198:	0003      	movs	r3, r0
 800919a:	001a      	movs	r2, r3
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	0018      	movs	r0, r3
 80091a4:	46bd      	mov	sp, r7
 80091a6:	b006      	add	sp, #24
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	46c0      	nop			; (mov r8, r8)
 80091ac:	00ffff3f 	.word	0x00ffff3f

080091b0 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80091b0:	b590      	push	{r4, r7, lr}
 80091b2:	b089      	sub	sp, #36	; 0x24
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	60b9      	str	r1, [r7, #8]
 80091ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2220      	movs	r2, #32
 80091c0:	5c9b      	ldrb	r3, [r3, r2]
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d101      	bne.n	80091ca <HAL_RTC_SetAlarm_IT+0x1a>
 80091c6:	2302      	movs	r3, #2
 80091c8:	e130      	b.n	800942c <HAL_RTC_SetAlarm_IT+0x27c>
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2220      	movs	r2, #32
 80091ce:	2101      	movs	r1, #1
 80091d0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2221      	movs	r2, #33	; 0x21
 80091d6:	2102      	movs	r1, #2
 80091d8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d136      	bne.n	800924e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	2240      	movs	r2, #64	; 0x40
 80091e8:	4013      	ands	r3, r2
 80091ea:	d102      	bne.n	80091f2 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	2200      	movs	r2, #0
 80091f0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	0018      	movs	r0, r3
 80091f8:	f000 fa65 	bl	80096c6 <RTC_ByteToBcd2>
 80091fc:	0003      	movs	r3, r0
 80091fe:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	785b      	ldrb	r3, [r3, #1]
 8009204:	0018      	movs	r0, r3
 8009206:	f000 fa5e 	bl	80096c6 <RTC_ByteToBcd2>
 800920a:	0003      	movs	r3, r0
 800920c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800920e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	789b      	ldrb	r3, [r3, #2]
 8009214:	0018      	movs	r0, r3
 8009216:	f000 fa56 	bl	80096c6 <RTC_ByteToBcd2>
 800921a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800921c:	0022      	movs	r2, r4
 800921e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	78db      	ldrb	r3, [r3, #3]
 8009224:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009226:	431a      	orrs	r2, r3
 8009228:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	2220      	movs	r2, #32
 800922e:	5c9b      	ldrb	r3, [r3, r2]
 8009230:	0018      	movs	r0, r3
 8009232:	f000 fa48 	bl	80096c6 <RTC_ByteToBcd2>
 8009236:	0003      	movs	r3, r0
 8009238:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800923a:	0022      	movs	r2, r4
 800923c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8009242:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8009248:	4313      	orrs	r3, r2
 800924a:	61fb      	str	r3, [r7, #28]
 800924c:	e022      	b.n	8009294 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	2240      	movs	r2, #64	; 0x40
 8009256:	4013      	ands	r3, r2
 8009258:	d102      	bne.n	8009260 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	2200      	movs	r2, #0
 800925e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	785b      	ldrb	r3, [r3, #1]
 800926a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800926c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8009272:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	78db      	ldrb	r3, [r3, #3]
 8009278:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800927a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	2120      	movs	r1, #32
 8009280:	5c5b      	ldrb	r3, [r3, r1]
 8009282:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8009284:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800928a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8009290:	4313      	orrs	r3, r2
 8009292:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	685a      	ldr	r2, [r3, #4]
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	699b      	ldr	r3, [r3, #24]
 800929c:	4313      	orrs	r3, r2
 800929e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	22ca      	movs	r2, #202	; 0xca
 80092a6:	625a      	str	r2, [r3, #36]	; 0x24
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2253      	movs	r2, #83	; 0x53
 80092ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092b4:	2380      	movs	r3, #128	; 0x80
 80092b6:	005b      	lsls	r3, r3, #1
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d14e      	bne.n	800935a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	689a      	ldr	r2, [r3, #8]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	495b      	ldr	r1, [pc, #364]	; (8009434 <HAL_RTC_SetAlarm_IT+0x284>)
 80092c8:	400a      	ands	r2, r1
 80092ca:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	22ff      	movs	r2, #255	; 0xff
 80092d4:	401a      	ands	r2, r3
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4957      	ldr	r1, [pc, #348]	; (8009438 <HAL_RTC_SetAlarm_IT+0x288>)
 80092dc:	430a      	orrs	r2, r1
 80092de:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80092e0:	f7fd fc7a 	bl	8006bd8 <HAL_GetTick>
 80092e4:	0003      	movs	r3, r0
 80092e6:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80092e8:	e016      	b.n	8009318 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80092ea:	f7fd fc75 	bl	8006bd8 <HAL_GetTick>
 80092ee:	0002      	movs	r2, r0
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	1ad2      	subs	r2, r2, r3
 80092f4:	23fa      	movs	r3, #250	; 0xfa
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d90d      	bls.n	8009318 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	22ff      	movs	r2, #255	; 0xff
 8009302:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2221      	movs	r2, #33	; 0x21
 8009308:	2103      	movs	r1, #3
 800930a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2220      	movs	r2, #32
 8009310:	2100      	movs	r1, #0
 8009312:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009314:	2303      	movs	r3, #3
 8009316:	e089      	b.n	800942c <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	2201      	movs	r2, #1
 8009320:	4013      	ands	r3, r2
 8009322:	d0e2      	beq.n	80092ea <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	69fa      	ldr	r2, [r7, #28]
 800932a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	69ba      	ldr	r2, [r7, #24]
 8009332:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	689a      	ldr	r2, [r3, #8]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2180      	movs	r1, #128	; 0x80
 8009340:	0049      	lsls	r1, r1, #1
 8009342:	430a      	orrs	r2, r1
 8009344:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	689a      	ldr	r2, [r3, #8]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2180      	movs	r1, #128	; 0x80
 8009352:	0149      	lsls	r1, r1, #5
 8009354:	430a      	orrs	r2, r1
 8009356:	609a      	str	r2, [r3, #8]
 8009358:	e04d      	b.n	80093f6 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	689a      	ldr	r2, [r3, #8]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4935      	ldr	r1, [pc, #212]	; (800943c <HAL_RTC_SetAlarm_IT+0x28c>)
 8009366:	400a      	ands	r2, r1
 8009368:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	22ff      	movs	r2, #255	; 0xff
 8009372:	401a      	ands	r2, r3
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4931      	ldr	r1, [pc, #196]	; (8009440 <HAL_RTC_SetAlarm_IT+0x290>)
 800937a:	430a      	orrs	r2, r1
 800937c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800937e:	f7fd fc2b 	bl	8006bd8 <HAL_GetTick>
 8009382:	0003      	movs	r3, r0
 8009384:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009386:	e016      	b.n	80093b6 <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009388:	f7fd fc26 	bl	8006bd8 <HAL_GetTick>
 800938c:	0002      	movs	r2, r0
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	1ad2      	subs	r2, r2, r3
 8009392:	23fa      	movs	r3, #250	; 0xfa
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	429a      	cmp	r2, r3
 8009398:	d90d      	bls.n	80093b6 <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	22ff      	movs	r2, #255	; 0xff
 80093a0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2221      	movs	r2, #33	; 0x21
 80093a6:	2103      	movs	r1, #3
 80093a8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2220      	movs	r2, #32
 80093ae:	2100      	movs	r1, #0
 80093b0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80093b2:	2303      	movs	r3, #3
 80093b4:	e03a      	b.n	800942c <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	2202      	movs	r2, #2
 80093be:	4013      	ands	r3, r2
 80093c0:	d0e2      	beq.n	8009388 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	69fa      	ldr	r2, [r7, #28]
 80093c8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	69ba      	ldr	r2, [r7, #24]
 80093d0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	689a      	ldr	r2, [r3, #8]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2180      	movs	r1, #128	; 0x80
 80093de:	0089      	lsls	r1, r1, #2
 80093e0:	430a      	orrs	r2, r1
 80093e2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	689a      	ldr	r2, [r3, #8]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2180      	movs	r1, #128	; 0x80
 80093f0:	0189      	lsls	r1, r1, #6
 80093f2:	430a      	orrs	r2, r1
 80093f4:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80093f6:	4b13      	ldr	r3, [pc, #76]	; (8009444 <HAL_RTC_SetAlarm_IT+0x294>)
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	4b12      	ldr	r3, [pc, #72]	; (8009444 <HAL_RTC_SetAlarm_IT+0x294>)
 80093fc:	2180      	movs	r1, #128	; 0x80
 80093fe:	0289      	lsls	r1, r1, #10
 8009400:	430a      	orrs	r2, r1
 8009402:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8009404:	4b0f      	ldr	r3, [pc, #60]	; (8009444 <HAL_RTC_SetAlarm_IT+0x294>)
 8009406:	689a      	ldr	r2, [r3, #8]
 8009408:	4b0e      	ldr	r3, [pc, #56]	; (8009444 <HAL_RTC_SetAlarm_IT+0x294>)
 800940a:	2180      	movs	r1, #128	; 0x80
 800940c:	0289      	lsls	r1, r1, #10
 800940e:	430a      	orrs	r2, r1
 8009410:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	22ff      	movs	r2, #255	; 0xff
 8009418:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2221      	movs	r2, #33	; 0x21
 800941e:	2101      	movs	r1, #1
 8009420:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2220      	movs	r2, #32
 8009426:	2100      	movs	r1, #0
 8009428:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800942a:	2300      	movs	r3, #0
}
 800942c:	0018      	movs	r0, r3
 800942e:	46bd      	mov	sp, r7
 8009430:	b009      	add	sp, #36	; 0x24
 8009432:	bd90      	pop	{r4, r7, pc}
 8009434:	fffffeff 	.word	0xfffffeff
 8009438:	fffffe7f 	.word	0xfffffe7f
 800943c:	fffffdff 	.word	0xfffffdff
 8009440:	fffffd7f 	.word	0xfffffd7f
 8009444:	40010400 	.word	0x40010400

08009448 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2220      	movs	r2, #32
 8009456:	5c9b      	ldrb	r3, [r3, r2]
 8009458:	2b01      	cmp	r3, #1
 800945a:	d101      	bne.n	8009460 <HAL_RTC_DeactivateAlarm+0x18>
 800945c:	2302      	movs	r3, #2
 800945e:	e086      	b.n	800956e <HAL_RTC_DeactivateAlarm+0x126>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2220      	movs	r2, #32
 8009464:	2101      	movs	r1, #1
 8009466:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2221      	movs	r2, #33	; 0x21
 800946c:	2102      	movs	r1, #2
 800946e:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	22ca      	movs	r2, #202	; 0xca
 8009476:	625a      	str	r2, [r3, #36]	; 0x24
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	2253      	movs	r2, #83	; 0x53
 800947e:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8009480:	683a      	ldr	r2, [r7, #0]
 8009482:	2380      	movs	r3, #128	; 0x80
 8009484:	005b      	lsls	r3, r3, #1
 8009486:	429a      	cmp	r2, r3
 8009488:	d132      	bne.n	80094f0 <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	689a      	ldr	r2, [r3, #8]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4938      	ldr	r1, [pc, #224]	; (8009578 <HAL_RTC_DeactivateAlarm+0x130>)
 8009496:	400a      	ands	r2, r1
 8009498:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	689a      	ldr	r2, [r3, #8]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4935      	ldr	r1, [pc, #212]	; (800957c <HAL_RTC_DeactivateAlarm+0x134>)
 80094a6:	400a      	ands	r2, r1
 80094a8:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80094aa:	f7fd fb95 	bl	8006bd8 <HAL_GetTick>
 80094ae:	0003      	movs	r3, r0
 80094b0:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80094b2:	e016      	b.n	80094e2 <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80094b4:	f7fd fb90 	bl	8006bd8 <HAL_GetTick>
 80094b8:	0002      	movs	r2, r0
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	1ad2      	subs	r2, r2, r3
 80094be:	23fa      	movs	r3, #250	; 0xfa
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d90d      	bls.n	80094e2 <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	22ff      	movs	r2, #255	; 0xff
 80094cc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2221      	movs	r2, #33	; 0x21
 80094d2:	2103      	movs	r1, #3
 80094d4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2220      	movs	r2, #32
 80094da:	2100      	movs	r1, #0
 80094dc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80094de:	2303      	movs	r3, #3
 80094e0:	e045      	b.n	800956e <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	2201      	movs	r2, #1
 80094ea:	4013      	ands	r3, r2
 80094ec:	d0e2      	beq.n	80094b4 <HAL_RTC_DeactivateAlarm+0x6c>
 80094ee:	e031      	b.n	8009554 <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	689a      	ldr	r2, [r3, #8]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4921      	ldr	r1, [pc, #132]	; (8009580 <HAL_RTC_DeactivateAlarm+0x138>)
 80094fc:	400a      	ands	r2, r1
 80094fe:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	689a      	ldr	r2, [r3, #8]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	491e      	ldr	r1, [pc, #120]	; (8009584 <HAL_RTC_DeactivateAlarm+0x13c>)
 800950c:	400a      	ands	r2, r1
 800950e:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8009510:	f7fd fb62 	bl	8006bd8 <HAL_GetTick>
 8009514:	0003      	movs	r3, r0
 8009516:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009518:	e016      	b.n	8009548 <HAL_RTC_DeactivateAlarm+0x100>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800951a:	f7fd fb5d 	bl	8006bd8 <HAL_GetTick>
 800951e:	0002      	movs	r2, r0
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	1ad2      	subs	r2, r2, r3
 8009524:	23fa      	movs	r3, #250	; 0xfa
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	429a      	cmp	r2, r3
 800952a:	d90d      	bls.n	8009548 <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	22ff      	movs	r2, #255	; 0xff
 8009532:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2221      	movs	r2, #33	; 0x21
 8009538:	2103      	movs	r1, #3
 800953a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2220      	movs	r2, #32
 8009540:	2100      	movs	r1, #0
 8009542:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009544:	2303      	movs	r3, #3
 8009546:	e012      	b.n	800956e <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	68db      	ldr	r3, [r3, #12]
 800954e:	2202      	movs	r2, #2
 8009550:	4013      	ands	r3, r2
 8009552:	d0e2      	beq.n	800951a <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	22ff      	movs	r2, #255	; 0xff
 800955a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2221      	movs	r2, #33	; 0x21
 8009560:	2101      	movs	r1, #1
 8009562:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2220      	movs	r2, #32
 8009568:	2100      	movs	r1, #0
 800956a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800956c:	2300      	movs	r3, #0
}
 800956e:	0018      	movs	r0, r3
 8009570:	46bd      	mov	sp, r7
 8009572:	b004      	add	sp, #16
 8009574:	bd80      	pop	{r7, pc}
 8009576:	46c0      	nop			; (mov r8, r8)
 8009578:	fffffeff 	.word	0xfffffeff
 800957c:	ffffefff 	.word	0xffffefff
 8009580:	fffffdff 	.word	0xfffffdff
 8009584:	ffffdfff 	.word	0xffffdfff

08009588 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	689a      	ldr	r2, [r3, #8]
 8009596:	2380      	movs	r3, #128	; 0x80
 8009598:	015b      	lsls	r3, r3, #5
 800959a:	4013      	ands	r3, r2
 800959c:	d014      	beq.n	80095c8 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	68da      	ldr	r2, [r3, #12]
 80095a4:	2380      	movs	r3, #128	; 0x80
 80095a6:	005b      	lsls	r3, r3, #1
 80095a8:	4013      	ands	r3, r2
 80095aa:	d00d      	beq.n	80095c8 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	0018      	movs	r0, r3
 80095b0:	f7fa f878 	bl	80036a4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	68db      	ldr	r3, [r3, #12]
 80095ba:	22ff      	movs	r2, #255	; 0xff
 80095bc:	401a      	ands	r2, r3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4915      	ldr	r1, [pc, #84]	; (8009618 <HAL_RTC_AlarmIRQHandler+0x90>)
 80095c4:	430a      	orrs	r2, r1
 80095c6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	689a      	ldr	r2, [r3, #8]
 80095ce:	2380      	movs	r3, #128	; 0x80
 80095d0:	019b      	lsls	r3, r3, #6
 80095d2:	4013      	ands	r3, r2
 80095d4:	d014      	beq.n	8009600 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	68da      	ldr	r2, [r3, #12]
 80095dc:	2380      	movs	r3, #128	; 0x80
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	4013      	ands	r3, r2
 80095e2:	d00d      	beq.n	8009600 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	0018      	movs	r0, r3
 80095e8:	f7fa f876 	bl	80036d8 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	22ff      	movs	r2, #255	; 0xff
 80095f4:	401a      	ands	r2, r3
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4908      	ldr	r1, [pc, #32]	; (800961c <HAL_RTC_AlarmIRQHandler+0x94>)
 80095fc:	430a      	orrs	r2, r1
 80095fe:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8009600:	4b07      	ldr	r3, [pc, #28]	; (8009620 <HAL_RTC_AlarmIRQHandler+0x98>)
 8009602:	2280      	movs	r2, #128	; 0x80
 8009604:	0292      	lsls	r2, r2, #10
 8009606:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2221      	movs	r2, #33	; 0x21
 800960c:	2101      	movs	r1, #1
 800960e:	5499      	strb	r1, [r3, r2]
}
 8009610:	46c0      	nop			; (mov r8, r8)
 8009612:	46bd      	mov	sp, r7
 8009614:	b002      	add	sp, #8
 8009616:	bd80      	pop	{r7, pc}
 8009618:	fffffe7f 	.word	0xfffffe7f
 800961c:	fffffd7f 	.word	0xfffffd7f
 8009620:	40010400 	.word	0x40010400

08009624 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	68da      	ldr	r2, [r3, #12]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	21a0      	movs	r1, #160	; 0xa0
 8009638:	438a      	bics	r2, r1
 800963a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800963c:	f7fd facc 	bl	8006bd8 <HAL_GetTick>
 8009640:	0003      	movs	r3, r0
 8009642:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009644:	e00a      	b.n	800965c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009646:	f7fd fac7 	bl	8006bd8 <HAL_GetTick>
 800964a:	0002      	movs	r2, r0
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	1ad2      	subs	r2, r2, r3
 8009650:	23fa      	movs	r3, #250	; 0xfa
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	429a      	cmp	r2, r3
 8009656:	d901      	bls.n	800965c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009658:	2303      	movs	r3, #3
 800965a:	e006      	b.n	800966a <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	68db      	ldr	r3, [r3, #12]
 8009662:	2220      	movs	r2, #32
 8009664:	4013      	ands	r3, r2
 8009666:	d0ee      	beq.n	8009646 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8009668:	2300      	movs	r3, #0
}
 800966a:	0018      	movs	r0, r3
 800966c:	46bd      	mov	sp, r7
 800966e:	b004      	add	sp, #16
 8009670:	bd80      	pop	{r7, pc}

08009672 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009672:	b580      	push	{r7, lr}
 8009674:	b084      	sub	sp, #16
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	2240      	movs	r2, #64	; 0x40
 8009682:	4013      	ands	r3, r2
 8009684:	d11a      	bne.n	80096bc <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	2201      	movs	r2, #1
 800968c:	4252      	negs	r2, r2
 800968e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009690:	f7fd faa2 	bl	8006bd8 <HAL_GetTick>
 8009694:	0003      	movs	r3, r0
 8009696:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009698:	e00a      	b.n	80096b0 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800969a:	f7fd fa9d 	bl	8006bd8 <HAL_GetTick>
 800969e:	0002      	movs	r2, r0
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	1ad2      	subs	r2, r2, r3
 80096a4:	23fa      	movs	r3, #250	; 0xfa
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d901      	bls.n	80096b0 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 80096ac:	2303      	movs	r3, #3
 80096ae:	e006      	b.n	80096be <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	68db      	ldr	r3, [r3, #12]
 80096b6:	2240      	movs	r2, #64	; 0x40
 80096b8:	4013      	ands	r3, r2
 80096ba:	d0ee      	beq.n	800969a <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80096bc:	2300      	movs	r3, #0
}
 80096be:	0018      	movs	r0, r3
 80096c0:	46bd      	mov	sp, r7
 80096c2:	b004      	add	sp, #16
 80096c4:	bd80      	pop	{r7, pc}

080096c6 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80096c6:	b580      	push	{r7, lr}
 80096c8:	b084      	sub	sp, #16
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	0002      	movs	r2, r0
 80096ce:	1dfb      	adds	r3, r7, #7
 80096d0:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80096d2:	2300      	movs	r3, #0
 80096d4:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80096d6:	230b      	movs	r3, #11
 80096d8:	18fb      	adds	r3, r7, r3
 80096da:	1dfa      	adds	r2, r7, #7
 80096dc:	7812      	ldrb	r2, [r2, #0]
 80096de:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 80096e0:	e008      	b.n	80096f4 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	3301      	adds	r3, #1
 80096e6:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80096e8:	220b      	movs	r2, #11
 80096ea:	18bb      	adds	r3, r7, r2
 80096ec:	18ba      	adds	r2, r7, r2
 80096ee:	7812      	ldrb	r2, [r2, #0]
 80096f0:	3a0a      	subs	r2, #10
 80096f2:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 80096f4:	230b      	movs	r3, #11
 80096f6:	18fb      	adds	r3, r7, r3
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	2b09      	cmp	r3, #9
 80096fc:	d8f1      	bhi.n	80096e2 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	b2db      	uxtb	r3, r3
 8009702:	011b      	lsls	r3, r3, #4
 8009704:	b2da      	uxtb	r2, r3
 8009706:	230b      	movs	r3, #11
 8009708:	18fb      	adds	r3, r7, r3
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	4313      	orrs	r3, r2
 800970e:	b2db      	uxtb	r3, r3
}
 8009710:	0018      	movs	r0, r3
 8009712:	46bd      	mov	sp, r7
 8009714:	b004      	add	sp, #16
 8009716:	bd80      	pop	{r7, pc}

08009718 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	0002      	movs	r2, r0
 8009720:	1dfb      	adds	r3, r7, #7
 8009722:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8009724:	1dfb      	adds	r3, r7, #7
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	091b      	lsrs	r3, r3, #4
 800972a:	b2db      	uxtb	r3, r3
 800972c:	001a      	movs	r2, r3
 800972e:	0013      	movs	r3, r2
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	189b      	adds	r3, r3, r2
 8009734:	005b      	lsls	r3, r3, #1
 8009736:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	b2da      	uxtb	r2, r3
 800973c:	1dfb      	adds	r3, r7, #7
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	210f      	movs	r1, #15
 8009742:	400b      	ands	r3, r1
 8009744:	b2db      	uxtb	r3, r3
 8009746:	18d3      	adds	r3, r2, r3
 8009748:	b2db      	uxtb	r3, r3
}
 800974a:	0018      	movs	r0, r3
 800974c:	46bd      	mov	sp, r7
 800974e:	b004      	add	sp, #16
 8009750:	bd80      	pop	{r7, pc}

08009752 <HAL_RTCEx_SetSmoothCalib>:
  *         must be equal to SMOOTHCALIB_PLUSPULSES_RESET and the field
  *         SmoothCalibMinusPulsesValue mut be equal to 0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef *hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 8009752:	b580      	push	{r7, lr}
 8009754:	b086      	sub	sp, #24
 8009756:	af00      	add	r7, sp, #0
 8009758:	60f8      	str	r0, [r7, #12]
 800975a:	60b9      	str	r1, [r7, #8]
 800975c:	607a      	str	r2, [r7, #4]
 800975e:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2220      	movs	r2, #32
 8009764:	5c9b      	ldrb	r3, [r3, r2]
 8009766:	2b01      	cmp	r3, #1
 8009768:	d101      	bne.n	800976e <HAL_RTCEx_SetSmoothCalib+0x1c>
 800976a:	2302      	movs	r3, #2
 800976c:	e04f      	b.n	800980e <HAL_RTCEx_SetSmoothCalib+0xbc>
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2220      	movs	r2, #32
 8009772:	2101      	movs	r1, #1
 8009774:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2221      	movs	r2, #33	; 0x21
 800977a:	2102      	movs	r1, #2
 800977c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	22ca      	movs	r2, #202	; 0xca
 8009784:	625a      	str	r2, [r3, #36]	; 0x24
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2253      	movs	r2, #83	; 0x53
 800978c:	625a      	str	r2, [r3, #36]	; 0x24

  /* check if a calibration is pending*/
  if ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	68da      	ldr	r2, [r3, #12]
 8009794:	2380      	movs	r3, #128	; 0x80
 8009796:	025b      	lsls	r3, r3, #9
 8009798:	4013      	ands	r3, r2
 800979a:	d022      	beq.n	80097e2 <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 800979c:	f7fd fa1c 	bl	8006bd8 <HAL_GetTick>
 80097a0:	0003      	movs	r3, r0
 80097a2:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 80097a4:	e016      	b.n	80097d4 <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80097a6:	f7fd fa17 	bl	8006bd8 <HAL_GetTick>
 80097aa:	0002      	movs	r2, r0
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	1ad2      	subs	r2, r2, r3
 80097b0:	23fa      	movs	r3, #250	; 0xfa
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d90d      	bls.n	80097d4 <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	22ff      	movs	r2, #255	; 0xff
 80097be:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2221      	movs	r2, #33	; 0x21
 80097c4:	2103      	movs	r1, #3
 80097c6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2220      	movs	r2, #32
 80097cc:	2100      	movs	r1, #0
 80097ce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80097d0:	2303      	movs	r3, #3
 80097d2:	e01c      	b.n	800980e <HAL_RTCEx_SetSmoothCalib+0xbc>
    while ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	68da      	ldr	r2, [r3, #12]
 80097da:	2380      	movs	r3, #128	; 0x80
 80097dc:	025b      	lsls	r3, r3, #9
 80097de:	4013      	ands	r3, r2
 80097e0:	d1e1      	bne.n	80097a6 <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 80097e2:	68ba      	ldr	r2, [r7, #8]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	431a      	orrs	r2, r3
 80097e8:	0011      	movs	r1, r2
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	683a      	ldr	r2, [r7, #0]
 80097f0:	430a      	orrs	r2, r1
 80097f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	22ff      	movs	r2, #255	; 0xff
 80097fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2221      	movs	r2, #33	; 0x21
 8009800:	2101      	movs	r1, #1
 8009802:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2220      	movs	r2, #32
 8009808:	2100      	movs	r1, #0
 800980a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800980c:	2300      	movs	r3, #0
}
 800980e:	0018      	movs	r0, r3
 8009810:	46bd      	mov	sp, r7
 8009812:	b006      	add	sp, #24
 8009814:	bd80      	pop	{r7, pc}
	...

08009818 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef *hrtc, uint32_t CalibOutput)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2220      	movs	r2, #32
 8009826:	5c9b      	ldrb	r3, [r3, r2]
 8009828:	2b01      	cmp	r3, #1
 800982a:	d101      	bne.n	8009830 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 800982c:	2302      	movs	r3, #2
 800982e:	e035      	b.n	800989c <HAL_RTCEx_SetCalibrationOutPut+0x84>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2220      	movs	r2, #32
 8009834:	2101      	movs	r1, #1
 8009836:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2221      	movs	r2, #33	; 0x21
 800983c:	2102      	movs	r1, #2
 800983e:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	22ca      	movs	r2, #202	; 0xca
 8009846:	625a      	str	r2, [r3, #36]	; 0x24
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2253      	movs	r2, #83	; 0x53
 800984e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	689a      	ldr	r2, [r3, #8]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4912      	ldr	r1, [pc, #72]	; (80098a4 <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 800985c:	400a      	ands	r2, r1
 800985e:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	6899      	ldr	r1, [r3, #8]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	683a      	ldr	r2, [r7, #0]
 800986c:	430a      	orrs	r2, r1
 800986e:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	689a      	ldr	r2, [r3, #8]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	2180      	movs	r1, #128	; 0x80
 800987c:	0409      	lsls	r1, r1, #16
 800987e:	430a      	orrs	r2, r1
 8009880:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	22ff      	movs	r2, #255	; 0xff
 8009888:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2221      	movs	r2, #33	; 0x21
 800988e:	2101      	movs	r1, #1
 8009890:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2220      	movs	r2, #32
 8009896:	2100      	movs	r1, #0
 8009898:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800989a:	2300      	movs	r3, #0
}
 800989c:	0018      	movs	r0, r3
 800989e:	46bd      	mov	sp, r7
 80098a0:	b002      	add	sp, #8
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	fff7ffff 	.word	0xfff7ffff

080098a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d101      	bne.n	80098ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80098b6:	2301      	movs	r3, #1
 80098b8:	e059      	b.n	800996e <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2200      	movs	r2, #0
 80098be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2251      	movs	r2, #81	; 0x51
 80098c4:	5c9b      	ldrb	r3, [r3, r2]
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d107      	bne.n	80098dc <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2250      	movs	r2, #80	; 0x50
 80098d0:	2100      	movs	r1, #0
 80098d2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	0018      	movs	r0, r3
 80098d8:	f7fa ff28 	bl	800472c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2251      	movs	r2, #81	; 0x51
 80098e0:	2102      	movs	r1, #2
 80098e2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2140      	movs	r1, #64	; 0x40
 80098f0:	438a      	bics	r2, r1
 80098f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	685a      	ldr	r2, [r3, #4]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	431a      	orrs	r2, r3
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	68db      	ldr	r3, [r3, #12]
 8009902:	431a      	orrs	r2, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	691b      	ldr	r3, [r3, #16]
 8009908:	431a      	orrs	r2, r3
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	695b      	ldr	r3, [r3, #20]
 800990e:	431a      	orrs	r2, r3
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6999      	ldr	r1, [r3, #24]
 8009914:	2380      	movs	r3, #128	; 0x80
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	400b      	ands	r3, r1
 800991a:	431a      	orrs	r2, r3
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	69db      	ldr	r3, [r3, #28]
 8009920:	431a      	orrs	r2, r3
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6a1b      	ldr	r3, [r3, #32]
 8009926:	431a      	orrs	r2, r3
 8009928:	0011      	movs	r1, r2
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	430a      	orrs	r2, r1
 8009934:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	699b      	ldr	r3, [r3, #24]
 800993a:	0c1b      	lsrs	r3, r3, #16
 800993c:	2204      	movs	r2, #4
 800993e:	4013      	ands	r3, r2
 8009940:	0019      	movs	r1, r3
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	430a      	orrs	r2, r1
 800994c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	69da      	ldr	r2, [r3, #28]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4907      	ldr	r1, [pc, #28]	; (8009978 <HAL_SPI_Init+0xd0>)
 800995a:	400a      	ands	r2, r1
 800995c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2251      	movs	r2, #81	; 0x51
 8009968:	2101      	movs	r1, #1
 800996a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	0018      	movs	r0, r3
 8009970:	46bd      	mov	sp, r7
 8009972:	b002      	add	sp, #8
 8009974:	bd80      	pop	{r7, pc}
 8009976:	46c0      	nop			; (mov r8, r8)
 8009978:	fffff7ff 	.word	0xfffff7ff

0800997c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b088      	sub	sp, #32
 8009980:	af00      	add	r7, sp, #0
 8009982:	60f8      	str	r0, [r7, #12]
 8009984:	60b9      	str	r1, [r7, #8]
 8009986:	603b      	str	r3, [r7, #0]
 8009988:	1dbb      	adds	r3, r7, #6
 800998a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800998c:	231f      	movs	r3, #31
 800998e:	18fb      	adds	r3, r7, r3
 8009990:	2200      	movs	r2, #0
 8009992:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2250      	movs	r2, #80	; 0x50
 8009998:	5c9b      	ldrb	r3, [r3, r2]
 800999a:	2b01      	cmp	r3, #1
 800999c:	d101      	bne.n	80099a2 <HAL_SPI_Transmit+0x26>
 800999e:	2302      	movs	r3, #2
 80099a0:	e136      	b.n	8009c10 <HAL_SPI_Transmit+0x294>
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2250      	movs	r2, #80	; 0x50
 80099a6:	2101      	movs	r1, #1
 80099a8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80099aa:	f7fd f915 	bl	8006bd8 <HAL_GetTick>
 80099ae:	0003      	movs	r3, r0
 80099b0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80099b2:	2316      	movs	r3, #22
 80099b4:	18fb      	adds	r3, r7, r3
 80099b6:	1dba      	adds	r2, r7, #6
 80099b8:	8812      	ldrh	r2, [r2, #0]
 80099ba:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2251      	movs	r2, #81	; 0x51
 80099c0:	5c9b      	ldrb	r3, [r3, r2]
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d004      	beq.n	80099d2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80099c8:	231f      	movs	r3, #31
 80099ca:	18fb      	adds	r3, r7, r3
 80099cc:	2202      	movs	r2, #2
 80099ce:	701a      	strb	r2, [r3, #0]
    goto error;
 80099d0:	e113      	b.n	8009bfa <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d003      	beq.n	80099e0 <HAL_SPI_Transmit+0x64>
 80099d8:	1dbb      	adds	r3, r7, #6
 80099da:	881b      	ldrh	r3, [r3, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d104      	bne.n	80099ea <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80099e0:	231f      	movs	r3, #31
 80099e2:	18fb      	adds	r3, r7, r3
 80099e4:	2201      	movs	r2, #1
 80099e6:	701a      	strb	r2, [r3, #0]
    goto error;
 80099e8:	e107      	b.n	8009bfa <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2251      	movs	r2, #81	; 0x51
 80099ee:	2103      	movs	r1, #3
 80099f0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2200      	movs	r2, #0
 80099f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	68ba      	ldr	r2, [r7, #8]
 80099fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	1dba      	adds	r2, r7, #6
 8009a02:	8812      	ldrh	r2, [r2, #0]
 8009a04:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	1dba      	adds	r2, r7, #6
 8009a0a:	8812      	ldrh	r2, [r2, #0]
 8009a0c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2200      	movs	r2, #0
 8009a12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2200      	movs	r2, #0
 8009a18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2200      	movs	r2, #0
 8009a24:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	689a      	ldr	r2, [r3, #8]
 8009a30:	2380      	movs	r3, #128	; 0x80
 8009a32:	021b      	lsls	r3, r3, #8
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d108      	bne.n	8009a4a <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	2180      	movs	r1, #128	; 0x80
 8009a44:	01c9      	lsls	r1, r1, #7
 8009a46:	430a      	orrs	r2, r1
 8009a48:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2240      	movs	r2, #64	; 0x40
 8009a52:	4013      	ands	r3, r2
 8009a54:	2b40      	cmp	r3, #64	; 0x40
 8009a56:	d007      	beq.n	8009a68 <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2140      	movs	r1, #64	; 0x40
 8009a64:	430a      	orrs	r2, r1
 8009a66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	68da      	ldr	r2, [r3, #12]
 8009a6c:	2380      	movs	r3, #128	; 0x80
 8009a6e:	011b      	lsls	r3, r3, #4
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d14e      	bne.n	8009b12 <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d004      	beq.n	8009a86 <HAL_SPI_Transmit+0x10a>
 8009a7c:	2316      	movs	r3, #22
 8009a7e:	18fb      	adds	r3, r7, r3
 8009a80:	881b      	ldrh	r3, [r3, #0]
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d13f      	bne.n	8009b06 <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a8a:	881a      	ldrh	r2, [r3, #0]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a96:	1c9a      	adds	r2, r3, #2
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	3b01      	subs	r3, #1
 8009aa4:	b29a      	uxth	r2, r3
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009aaa:	e02c      	b.n	8009b06 <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	2202      	movs	r2, #2
 8009ab4:	4013      	ands	r3, r2
 8009ab6:	2b02      	cmp	r3, #2
 8009ab8:	d112      	bne.n	8009ae0 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009abe:	881a      	ldrh	r2, [r3, #0]
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aca:	1c9a      	adds	r2, r3, #2
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	3b01      	subs	r3, #1
 8009ad8:	b29a      	uxth	r2, r3
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	86da      	strh	r2, [r3, #54]	; 0x36
 8009ade:	e012      	b.n	8009b06 <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ae0:	f7fd f87a 	bl	8006bd8 <HAL_GetTick>
 8009ae4:	0002      	movs	r2, r0
 8009ae6:	69bb      	ldr	r3, [r7, #24]
 8009ae8:	1ad3      	subs	r3, r2, r3
 8009aea:	683a      	ldr	r2, [r7, #0]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d802      	bhi.n	8009af6 <HAL_SPI_Transmit+0x17a>
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	3301      	adds	r3, #1
 8009af4:	d102      	bne.n	8009afc <HAL_SPI_Transmit+0x180>
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d104      	bne.n	8009b06 <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 8009afc:	231f      	movs	r3, #31
 8009afe:	18fb      	adds	r3, r7, r3
 8009b00:	2203      	movs	r2, #3
 8009b02:	701a      	strb	r2, [r3, #0]
          goto error;
 8009b04:	e079      	b.n	8009bfa <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d1cd      	bne.n	8009aac <HAL_SPI_Transmit+0x130>
 8009b10:	e04f      	b.n	8009bb2 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d004      	beq.n	8009b24 <HAL_SPI_Transmit+0x1a8>
 8009b1a:	2316      	movs	r3, #22
 8009b1c:	18fb      	adds	r3, r7, r3
 8009b1e:	881b      	ldrh	r3, [r3, #0]
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d141      	bne.n	8009ba8 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	330c      	adds	r3, #12
 8009b2e:	7812      	ldrb	r2, [r2, #0]
 8009b30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b36:	1c5a      	adds	r2, r3, #1
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	3b01      	subs	r3, #1
 8009b44:	b29a      	uxth	r2, r3
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009b4a:	e02d      	b.n	8009ba8 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	2202      	movs	r2, #2
 8009b54:	4013      	ands	r3, r2
 8009b56:	2b02      	cmp	r3, #2
 8009b58:	d113      	bne.n	8009b82 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	330c      	adds	r3, #12
 8009b64:	7812      	ldrb	r2, [r2, #0]
 8009b66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b6c:	1c5a      	adds	r2, r3, #1
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	3b01      	subs	r3, #1
 8009b7a:	b29a      	uxth	r2, r3
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	86da      	strh	r2, [r3, #54]	; 0x36
 8009b80:	e012      	b.n	8009ba8 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b82:	f7fd f829 	bl	8006bd8 <HAL_GetTick>
 8009b86:	0002      	movs	r2, r0
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	1ad3      	subs	r3, r2, r3
 8009b8c:	683a      	ldr	r2, [r7, #0]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d802      	bhi.n	8009b98 <HAL_SPI_Transmit+0x21c>
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	3301      	adds	r3, #1
 8009b96:	d102      	bne.n	8009b9e <HAL_SPI_Transmit+0x222>
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d104      	bne.n	8009ba8 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8009b9e:	231f      	movs	r3, #31
 8009ba0:	18fb      	adds	r3, r7, r3
 8009ba2:	2203      	movs	r2, #3
 8009ba4:	701a      	strb	r2, [r3, #0]
          goto error;
 8009ba6:	e028      	b.n	8009bfa <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d1cc      	bne.n	8009b4c <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009bb2:	69ba      	ldr	r2, [r7, #24]
 8009bb4:	6839      	ldr	r1, [r7, #0]
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	0018      	movs	r0, r3
 8009bba:	f000 fa99 	bl	800a0f0 <SPI_EndRxTxTransaction>
 8009bbe:	1e03      	subs	r3, r0, #0
 8009bc0:	d002      	beq.n	8009bc8 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2220      	movs	r2, #32
 8009bc6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d10a      	bne.n	8009be6 <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	613b      	str	r3, [r7, #16]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	613b      	str	r3, [r7, #16]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	613b      	str	r3, [r7, #16]
 8009be4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d004      	beq.n	8009bf8 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8009bee:	231f      	movs	r3, #31
 8009bf0:	18fb      	adds	r3, r7, r3
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	701a      	strb	r2, [r3, #0]
 8009bf6:	e000      	b.n	8009bfa <HAL_SPI_Transmit+0x27e>
  }

error:
 8009bf8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2251      	movs	r2, #81	; 0x51
 8009bfe:	2101      	movs	r1, #1
 8009c00:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2250      	movs	r2, #80	; 0x50
 8009c06:	2100      	movs	r1, #0
 8009c08:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009c0a:	231f      	movs	r3, #31
 8009c0c:	18fb      	adds	r3, r7, r3
 8009c0e:	781b      	ldrb	r3, [r3, #0]
}
 8009c10:	0018      	movs	r0, r3
 8009c12:	46bd      	mov	sp, r7
 8009c14:	b008      	add	sp, #32
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b086      	sub	sp, #24
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	60f8      	str	r0, [r7, #12]
 8009c20:	60b9      	str	r1, [r7, #8]
 8009c22:	1dbb      	adds	r3, r7, #6
 8009c24:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009c26:	2317      	movs	r3, #23
 8009c28:	18fb      	adds	r3, r7, r3
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2250      	movs	r2, #80	; 0x50
 8009c32:	5c9b      	ldrb	r3, [r3, r2]
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d101      	bne.n	8009c3c <HAL_SPI_Transmit_IT+0x24>
 8009c38:	2302      	movs	r3, #2
 8009c3a:	e072      	b.n	8009d22 <HAL_SPI_Transmit_IT+0x10a>
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2250      	movs	r2, #80	; 0x50
 8009c40:	2101      	movs	r1, #1
 8009c42:	5499      	strb	r1, [r3, r2]

  if ((pData == NULL) || (Size == 0U))
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d003      	beq.n	8009c52 <HAL_SPI_Transmit_IT+0x3a>
 8009c4a:	1dbb      	adds	r3, r7, #6
 8009c4c:	881b      	ldrh	r3, [r3, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d104      	bne.n	8009c5c <HAL_SPI_Transmit_IT+0x44>
  {
    errorcode = HAL_ERROR;
 8009c52:	2317      	movs	r3, #23
 8009c54:	18fb      	adds	r3, r7, r3
 8009c56:	2201      	movs	r2, #1
 8009c58:	701a      	strb	r2, [r3, #0]
    goto error;
 8009c5a:	e05b      	b.n	8009d14 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2251      	movs	r2, #81	; 0x51
 8009c60:	5c9b      	ldrb	r3, [r3, r2]
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d004      	beq.n	8009c72 <HAL_SPI_Transmit_IT+0x5a>
  {
    errorcode = HAL_BUSY;
 8009c68:	2317      	movs	r3, #23
 8009c6a:	18fb      	adds	r3, r7, r3
 8009c6c:	2202      	movs	r2, #2
 8009c6e:	701a      	strb	r2, [r3, #0]
    goto error;
 8009c70:	e050      	b.n	8009d14 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2251      	movs	r2, #81	; 0x51
 8009c76:	2103      	movs	r1, #3
 8009c78:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	68ba      	ldr	r2, [r7, #8]
 8009c84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	1dba      	adds	r2, r7, #6
 8009c8a:	8812      	ldrh	r2, [r2, #0]
 8009c8c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	1dba      	adds	r2, r7, #6
 8009c92:	8812      	ldrh	r2, [r2, #0]
 8009c94:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2200      	movs	r2, #0
 8009cac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d003      	beq.n	8009cbe <HAL_SPI_Transmit_IT+0xa6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	4a1c      	ldr	r2, [pc, #112]	; (8009d2c <HAL_SPI_Transmit_IT+0x114>)
 8009cba:	645a      	str	r2, [r3, #68]	; 0x44
 8009cbc:	e002      	b.n	8009cc4 <HAL_SPI_Transmit_IT+0xac>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	4a1b      	ldr	r2, [pc, #108]	; (8009d30 <HAL_SPI_Transmit_IT+0x118>)
 8009cc2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	689a      	ldr	r2, [r3, #8]
 8009cc8:	2380      	movs	r3, #128	; 0x80
 8009cca:	021b      	lsls	r3, r3, #8
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d108      	bne.n	8009ce2 <HAL_SPI_Transmit_IT+0xca>
  {
    SPI_1LINE_TX(hspi);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	2180      	movs	r1, #128	; 0x80
 8009cdc:	01c9      	lsls	r1, r1, #7
 8009cde:	430a      	orrs	r2, r1
 8009ce0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	685a      	ldr	r2, [r3, #4]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	21a0      	movs	r1, #160	; 0xa0
 8009cee:	430a      	orrs	r2, r1
 8009cf0:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2240      	movs	r2, #64	; 0x40
 8009cfa:	4013      	ands	r3, r2
 8009cfc:	2b40      	cmp	r3, #64	; 0x40
 8009cfe:	d008      	beq.n	8009d12 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	2140      	movs	r1, #64	; 0x40
 8009d0c:	430a      	orrs	r2, r1
 8009d0e:	601a      	str	r2, [r3, #0]
 8009d10:	e000      	b.n	8009d14 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8009d12:	46c0      	nop			; (mov r8, r8)
  __HAL_UNLOCK(hspi);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2250      	movs	r2, #80	; 0x50
 8009d18:	2100      	movs	r1, #0
 8009d1a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009d1c:	2317      	movs	r3, #23
 8009d1e:	18fb      	adds	r3, r7, r3
 8009d20:	781b      	ldrb	r3, [r3, #0]
}
 8009d22:	0018      	movs	r0, r3
 8009d24:	46bd      	mov	sp, r7
 8009d26:	b006      	add	sp, #24
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	46c0      	nop			; (mov r8, r8)
 8009d2c:	08009fcb 	.word	0x08009fcb
 8009d30:	08009f83 	.word	0x08009f83

08009d34 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b088      	sub	sp, #32
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	689b      	ldr	r3, [r3, #8]
 8009d4a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009d4c:	69bb      	ldr	r3, [r7, #24]
 8009d4e:	099b      	lsrs	r3, r3, #6
 8009d50:	001a      	movs	r2, r3
 8009d52:	2301      	movs	r3, #1
 8009d54:	4013      	ands	r3, r2
 8009d56:	d10f      	bne.n	8009d78 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009d58:	69bb      	ldr	r3, [r7, #24]
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009d5e:	d00b      	beq.n	8009d78 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009d60:	69fb      	ldr	r3, [r7, #28]
 8009d62:	099b      	lsrs	r3, r3, #6
 8009d64:	001a      	movs	r2, r3
 8009d66:	2301      	movs	r3, #1
 8009d68:	4013      	ands	r3, r2
 8009d6a:	d005      	beq.n	8009d78 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	0010      	movs	r0, r2
 8009d74:	4798      	blx	r3
    return;
 8009d76:	e0d6      	b.n	8009f26 <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	085b      	lsrs	r3, r3, #1
 8009d7c:	001a      	movs	r2, r3
 8009d7e:	2301      	movs	r3, #1
 8009d80:	4013      	ands	r3, r2
 8009d82:	d00b      	beq.n	8009d9c <HAL_SPI_IRQHandler+0x68>
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	09db      	lsrs	r3, r3, #7
 8009d88:	001a      	movs	r2, r3
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	4013      	ands	r3, r2
 8009d8e:	d005      	beq.n	8009d9c <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	0010      	movs	r0, r2
 8009d98:	4798      	blx	r3
    return;
 8009d9a:	e0c4      	b.n	8009f26 <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	095b      	lsrs	r3, r3, #5
 8009da0:	001a      	movs	r2, r3
 8009da2:	2301      	movs	r3, #1
 8009da4:	4013      	ands	r3, r2
 8009da6:	d10c      	bne.n	8009dc2 <HAL_SPI_IRQHandler+0x8e>
 8009da8:	69bb      	ldr	r3, [r7, #24]
 8009daa:	099b      	lsrs	r3, r3, #6
 8009dac:	001a      	movs	r2, r3
 8009dae:	2301      	movs	r3, #1
 8009db0:	4013      	ands	r3, r2
 8009db2:	d106      	bne.n	8009dc2 <HAL_SPI_IRQHandler+0x8e>
 8009db4:	69bb      	ldr	r3, [r7, #24]
 8009db6:	0a1b      	lsrs	r3, r3, #8
 8009db8:	001a      	movs	r2, r3
 8009dba:	2301      	movs	r3, #1
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	d100      	bne.n	8009dc2 <HAL_SPI_IRQHandler+0x8e>
 8009dc0:	e0b1      	b.n	8009f26 <HAL_SPI_IRQHandler+0x1f2>
 8009dc2:	69fb      	ldr	r3, [r7, #28]
 8009dc4:	095b      	lsrs	r3, r3, #5
 8009dc6:	001a      	movs	r2, r3
 8009dc8:	2301      	movs	r3, #1
 8009dca:	4013      	ands	r3, r2
 8009dcc:	d100      	bne.n	8009dd0 <HAL_SPI_IRQHandler+0x9c>
 8009dce:	e0aa      	b.n	8009f26 <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	099b      	lsrs	r3, r3, #6
 8009dd4:	001a      	movs	r2, r3
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	4013      	ands	r3, r2
 8009dda:	d023      	beq.n	8009e24 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2251      	movs	r2, #81	; 0x51
 8009de0:	5c9b      	ldrb	r3, [r3, r2]
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	2b03      	cmp	r3, #3
 8009de6:	d011      	beq.n	8009e0c <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dec:	2204      	movs	r2, #4
 8009dee:	431a      	orrs	r2, r3
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009df4:	2300      	movs	r3, #0
 8009df6:	617b      	str	r3, [r7, #20]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	617b      	str	r3, [r7, #20]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	617b      	str	r3, [r7, #20]
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	e00b      	b.n	8009e24 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	613b      	str	r3, [r7, #16]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	68db      	ldr	r3, [r3, #12]
 8009e16:	613b      	str	r3, [r7, #16]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	689b      	ldr	r3, [r3, #8]
 8009e1e:	613b      	str	r3, [r7, #16]
 8009e20:	693b      	ldr	r3, [r7, #16]
        return;
 8009e22:	e080      	b.n	8009f26 <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009e24:	69bb      	ldr	r3, [r7, #24]
 8009e26:	095b      	lsrs	r3, r3, #5
 8009e28:	001a      	movs	r2, r3
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	4013      	ands	r3, r2
 8009e2e:	d014      	beq.n	8009e5a <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e34:	2201      	movs	r2, #1
 8009e36:	431a      	orrs	r2, r3
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	60fb      	str	r3, [r7, #12]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	689b      	ldr	r3, [r3, #8]
 8009e46:	60fb      	str	r3, [r7, #12]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2140      	movs	r1, #64	; 0x40
 8009e54:	438a      	bics	r2, r1
 8009e56:	601a      	str	r2, [r3, #0]
 8009e58:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009e5a:	69bb      	ldr	r3, [r7, #24]
 8009e5c:	0a1b      	lsrs	r3, r3, #8
 8009e5e:	001a      	movs	r2, r3
 8009e60:	2301      	movs	r3, #1
 8009e62:	4013      	ands	r3, r2
 8009e64:	d00c      	beq.n	8009e80 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e6a:	2208      	movs	r2, #8
 8009e6c:	431a      	orrs	r2, r3
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009e72:	2300      	movs	r3, #0
 8009e74:	60bb      	str	r3, [r7, #8]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	689b      	ldr	r3, [r3, #8]
 8009e7c:	60bb      	str	r3, [r7, #8]
 8009e7e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d04d      	beq.n	8009f24 <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	685a      	ldr	r2, [r3, #4]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	21e0      	movs	r1, #224	; 0xe0
 8009e94:	438a      	bics	r2, r1
 8009e96:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2251      	movs	r2, #81	; 0x51
 8009e9c:	2101      	movs	r1, #1
 8009e9e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	2202      	movs	r2, #2
 8009ea4:	4013      	ands	r3, r2
 8009ea6:	d103      	bne.n	8009eb0 <HAL_SPI_IRQHandler+0x17c>
 8009ea8:	69fb      	ldr	r3, [r7, #28]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	4013      	ands	r3, r2
 8009eae:	d032      	beq.n	8009f16 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	685a      	ldr	r2, [r3, #4]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2103      	movs	r1, #3
 8009ebc:	438a      	bics	r2, r1
 8009ebe:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d010      	beq.n	8009eea <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ecc:	4a17      	ldr	r2, [pc, #92]	; (8009f2c <HAL_SPI_IRQHandler+0x1f8>)
 8009ece:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ed4:	0018      	movs	r0, r3
 8009ed6:	f7fd fcd5 	bl	8007884 <HAL_DMA_Abort_IT>
 8009eda:	1e03      	subs	r3, r0, #0
 8009edc:	d005      	beq.n	8009eea <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ee2:	2240      	movs	r2, #64	; 0x40
 8009ee4:	431a      	orrs	r2, r3
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d016      	beq.n	8009f20 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ef6:	4a0d      	ldr	r2, [pc, #52]	; (8009f2c <HAL_SPI_IRQHandler+0x1f8>)
 8009ef8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009efe:	0018      	movs	r0, r3
 8009f00:	f7fd fcc0 	bl	8007884 <HAL_DMA_Abort_IT>
 8009f04:	1e03      	subs	r3, r0, #0
 8009f06:	d00b      	beq.n	8009f20 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f0c:	2240      	movs	r2, #64	; 0x40
 8009f0e:	431a      	orrs	r2, r3
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8009f14:	e004      	b.n	8009f20 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	0018      	movs	r0, r3
 8009f1a:	f000 f809 	bl	8009f30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009f1e:	e000      	b.n	8009f22 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8009f20:	46c0      	nop			; (mov r8, r8)
    return;
 8009f22:	46c0      	nop			; (mov r8, r8)
 8009f24:	46c0      	nop			; (mov r8, r8)
  }
}
 8009f26:	46bd      	mov	sp, r7
 8009f28:	b008      	add	sp, #32
 8009f2a:	bd80      	pop	{r7, pc}
 8009f2c:	08009f59 	.word	0x08009f59

08009f30 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009f38:	46c0      	nop			; (mov r8, r8)
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	b002      	add	sp, #8
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2251      	movs	r2, #81	; 0x51
 8009f4c:	5c9b      	ldrb	r3, [r3, r2]
 8009f4e:	b2db      	uxtb	r3, r3
}
 8009f50:	0018      	movs	r0, r3
 8009f52:	46bd      	mov	sp, r7
 8009f54:	b002      	add	sp, #8
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f64:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	0018      	movs	r0, r3
 8009f76:	f7ff ffdb 	bl	8009f30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009f7a:	46c0      	nop			; (mov r8, r8)
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	b004      	add	sp, #16
 8009f80:	bd80      	pop	{r7, pc}

08009f82 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009f82:	b580      	push	{r7, lr}
 8009f84:	b082      	sub	sp, #8
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	330c      	adds	r3, #12
 8009f94:	7812      	ldrb	r2, [r2, #0]
 8009f96:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f9c:	1c5a      	adds	r2, r3, #1
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	3b01      	subs	r3, #1
 8009faa:	b29a      	uxth	r2, r3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d103      	bne.n	8009fc2 <SPI_TxISR_8BIT+0x40>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	0018      	movs	r0, r3
 8009fbe:	f000 f8d5 	bl	800a16c <SPI_CloseTx_ISR>
  }
}
 8009fc2:	46c0      	nop			; (mov r8, r8)
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	b002      	add	sp, #8
 8009fc8:	bd80      	pop	{r7, pc}

08009fca <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b082      	sub	sp, #8
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fd6:	881a      	ldrh	r2, [r3, #0]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe2:	1c9a      	adds	r2, r3, #2
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	3b01      	subs	r3, #1
 8009ff0:	b29a      	uxth	r2, r3
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d103      	bne.n	800a008 <SPI_TxISR_16BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	0018      	movs	r0, r3
 800a004:	f000 f8b2 	bl	800a16c <SPI_CloseTx_ISR>
  }
}
 800a008:	46c0      	nop			; (mov r8, r8)
 800a00a:	46bd      	mov	sp, r7
 800a00c:	b002      	add	sp, #8
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	60f8      	str	r0, [r7, #12]
 800a018:	60b9      	str	r1, [r7, #8]
 800a01a:	603b      	str	r3, [r7, #0]
 800a01c:	1dfb      	adds	r3, r7, #7
 800a01e:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a020:	e050      	b.n	800a0c4 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	3301      	adds	r3, #1
 800a026:	d04d      	beq.n	800a0c4 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a028:	f7fc fdd6 	bl	8006bd8 <HAL_GetTick>
 800a02c:	0002      	movs	r2, r0
 800a02e:	69bb      	ldr	r3, [r7, #24]
 800a030:	1ad3      	subs	r3, r2, r3
 800a032:	683a      	ldr	r2, [r7, #0]
 800a034:	429a      	cmp	r2, r3
 800a036:	d902      	bls.n	800a03e <SPI_WaitFlagStateUntilTimeout+0x2e>
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d142      	bne.n	800a0c4 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	685a      	ldr	r2, [r3, #4]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	21e0      	movs	r1, #224	; 0xe0
 800a04a:	438a      	bics	r2, r1
 800a04c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	685a      	ldr	r2, [r3, #4]
 800a052:	2382      	movs	r3, #130	; 0x82
 800a054:	005b      	lsls	r3, r3, #1
 800a056:	429a      	cmp	r2, r3
 800a058:	d113      	bne.n	800a082 <SPI_WaitFlagStateUntilTimeout+0x72>
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	689a      	ldr	r2, [r3, #8]
 800a05e:	2380      	movs	r3, #128	; 0x80
 800a060:	021b      	lsls	r3, r3, #8
 800a062:	429a      	cmp	r2, r3
 800a064:	d005      	beq.n	800a072 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	689a      	ldr	r2, [r3, #8]
 800a06a:	2380      	movs	r3, #128	; 0x80
 800a06c:	00db      	lsls	r3, r3, #3
 800a06e:	429a      	cmp	r2, r3
 800a070:	d107      	bne.n	800a082 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	2140      	movs	r1, #64	; 0x40
 800a07e:	438a      	bics	r2, r1
 800a080:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a086:	2380      	movs	r3, #128	; 0x80
 800a088:	019b      	lsls	r3, r3, #6
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d110      	bne.n	800a0b0 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4914      	ldr	r1, [pc, #80]	; (800a0ec <SPI_WaitFlagStateUntilTimeout+0xdc>)
 800a09a:	400a      	ands	r2, r1
 800a09c:	601a      	str	r2, [r3, #0]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2180      	movs	r1, #128	; 0x80
 800a0aa:	0189      	lsls	r1, r1, #6
 800a0ac:	430a      	orrs	r2, r1
 800a0ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2251      	movs	r2, #81	; 0x51
 800a0b4:	2101      	movs	r1, #1
 800a0b6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2250      	movs	r2, #80	; 0x50
 800a0bc:	2100      	movs	r1, #0
 800a0be:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a0c0:	2303      	movs	r3, #3
 800a0c2:	e00f      	b.n	800a0e4 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	689b      	ldr	r3, [r3, #8]
 800a0ca:	68ba      	ldr	r2, [r7, #8]
 800a0cc:	4013      	ands	r3, r2
 800a0ce:	68ba      	ldr	r2, [r7, #8]
 800a0d0:	1ad3      	subs	r3, r2, r3
 800a0d2:	425a      	negs	r2, r3
 800a0d4:	4153      	adcs	r3, r2
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	001a      	movs	r2, r3
 800a0da:	1dfb      	adds	r3, r7, #7
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d19f      	bne.n	800a022 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800a0e2:	2300      	movs	r3, #0
}
 800a0e4:	0018      	movs	r0, r3
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	b004      	add	sp, #16
 800a0ea:	bd80      	pop	{r7, pc}
 800a0ec:	ffffdfff 	.word	0xffffdfff

0800a0f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b086      	sub	sp, #24
 800a0f4:	af02      	add	r7, sp, #8
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	60b9      	str	r1, [r7, #8]
 800a0fa:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	685a      	ldr	r2, [r3, #4]
 800a100:	2382      	movs	r3, #130	; 0x82
 800a102:	005b      	lsls	r3, r3, #1
 800a104:	429a      	cmp	r2, r3
 800a106:	d112      	bne.n	800a12e <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a108:	68ba      	ldr	r2, [r7, #8]
 800a10a:	68f8      	ldr	r0, [r7, #12]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	9300      	str	r3, [sp, #0]
 800a110:	0013      	movs	r3, r2
 800a112:	2200      	movs	r2, #0
 800a114:	2180      	movs	r1, #128	; 0x80
 800a116:	f7ff ff7b 	bl	800a010 <SPI_WaitFlagStateUntilTimeout>
 800a11a:	1e03      	subs	r3, r0, #0
 800a11c:	d020      	beq.n	800a160 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a122:	2220      	movs	r2, #32
 800a124:	431a      	orrs	r2, r3
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a12a:	2303      	movs	r3, #3
 800a12c:	e019      	b.n	800a162 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2251      	movs	r2, #81	; 0x51
 800a132:	5c9b      	ldrb	r3, [r3, r2]
 800a134:	b2db      	uxtb	r3, r3
 800a136:	2b05      	cmp	r3, #5
 800a138:	d112      	bne.n	800a160 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a13a:	68ba      	ldr	r2, [r7, #8]
 800a13c:	68f8      	ldr	r0, [r7, #12]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	9300      	str	r3, [sp, #0]
 800a142:	0013      	movs	r3, r2
 800a144:	2200      	movs	r2, #0
 800a146:	2101      	movs	r1, #1
 800a148:	f7ff ff62 	bl	800a010 <SPI_WaitFlagStateUntilTimeout>
 800a14c:	1e03      	subs	r3, r0, #0
 800a14e:	d007      	beq.n	800a160 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a154:	2220      	movs	r2, #32
 800a156:	431a      	orrs	r2, r3
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a15c:	2303      	movs	r3, #3
 800a15e:	e000      	b.n	800a162 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 800a160:	2300      	movs	r3, #0
}
 800a162:	0018      	movs	r0, r3
 800a164:	46bd      	mov	sp, r7
 800a166:	b004      	add	sp, #16
 800a168:	bd80      	pop	{r7, pc}
	...

0800a16c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b086      	sub	sp, #24
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800a174:	4b2d      	ldr	r3, [pc, #180]	; (800a22c <SPI_CloseTx_ISR+0xc0>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	492d      	ldr	r1, [pc, #180]	; (800a230 <SPI_CloseTx_ISR+0xc4>)
 800a17a:	0018      	movs	r0, r3
 800a17c:	f7f5 ffcc 	bl	8000118 <__udivsi3>
 800a180:	0003      	movs	r3, r0
 800a182:	001a      	movs	r2, r3
 800a184:	2364      	movs	r3, #100	; 0x64
 800a186:	4353      	muls	r3, r2
 800a188:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a18a:	f7fc fd25 	bl	8006bd8 <HAL_GetTick>
 800a18e:	0003      	movs	r3, r0
 800a190:	617b      	str	r3, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d106      	bne.n	800a1a6 <SPI_CloseTx_ISR+0x3a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a19c:	2220      	movs	r2, #32
 800a19e:	431a      	orrs	r2, r3
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a1a4:	e008      	b.n	800a1b8 <SPI_CloseTx_ISR+0x4c>
    }
    count--;
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	3b01      	subs	r3, #1
 800a1aa:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	2202      	movs	r2, #2
 800a1b4:	4013      	ands	r3, r2
 800a1b6:	d0ec      	beq.n	800a192 <SPI_CloseTx_ISR+0x26>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	685a      	ldr	r2, [r3, #4]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	21a0      	movs	r1, #160	; 0xa0
 800a1c4:	438a      	bics	r2, r1
 800a1c6:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a1c8:	697a      	ldr	r2, [r7, #20]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2164      	movs	r1, #100	; 0x64
 800a1ce:	0018      	movs	r0, r3
 800a1d0:	f7ff ff8e 	bl	800a0f0 <SPI_EndRxTxTransaction>
 800a1d4:	1e03      	subs	r3, r0, #0
 800a1d6:	d005      	beq.n	800a1e4 <SPI_CloseTx_ISR+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1dc:	2220      	movs	r2, #32
 800a1de:	431a      	orrs	r2, r3
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d10a      	bne.n	800a202 <SPI_CloseTx_ISR+0x96>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	60fb      	str	r3, [r7, #12]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	68db      	ldr	r3, [r3, #12]
 800a1f6:	60fb      	str	r3, [r7, #12]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	60fb      	str	r3, [r7, #12]
 800a200:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2251      	movs	r2, #81	; 0x51
 800a206:	2101      	movs	r1, #1
 800a208:	5499      	strb	r1, [r3, r2]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d004      	beq.n	800a21c <SPI_CloseTx_ISR+0xb0>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	0018      	movs	r0, r3
 800a216:	f7ff fe8b 	bl	8009f30 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800a21a:	e003      	b.n	800a224 <SPI_CloseTx_ISR+0xb8>
    HAL_SPI_TxCpltCallback(hspi);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	0018      	movs	r0, r3
 800a220:	f7f7 fd60 	bl	8001ce4 <HAL_SPI_TxCpltCallback>
}
 800a224:	46c0      	nop			; (mov r8, r8)
 800a226:	46bd      	mov	sp, r7
 800a228:	b006      	add	sp, #24
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	20000010 	.word	0x20000010
 800a230:	00005dc0 	.word	0x00005dc0

0800a234 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d101      	bne.n	800a246 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a242:	2301      	movs	r3, #1
 800a244:	e01e      	b.n	800a284 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2239      	movs	r2, #57	; 0x39
 800a24a:	5c9b      	ldrb	r3, [r3, r2]
 800a24c:	b2db      	uxtb	r3, r3
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d107      	bne.n	800a262 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2238      	movs	r2, #56	; 0x38
 800a256:	2100      	movs	r1, #0
 800a258:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	0018      	movs	r0, r3
 800a25e:	f7fa fadd 	bl	800481c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2239      	movs	r2, #57	; 0x39
 800a266:	2102      	movs	r1, #2
 800a268:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	3304      	adds	r3, #4
 800a272:	0019      	movs	r1, r3
 800a274:	0010      	movs	r0, r2
 800a276:	f000 fcb3 	bl	800abe0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2239      	movs	r2, #57	; 0x39
 800a27e:	2101      	movs	r1, #1
 800a280:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a282:	2300      	movs	r3, #0
}
 800a284:	0018      	movs	r0, r3
 800a286:	46bd      	mov	sp, r7
 800a288:	b002      	add	sp, #8
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2239      	movs	r2, #57	; 0x39
 800a298:	2102      	movs	r1, #2
 800a29a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	689b      	ldr	r3, [r3, #8]
 800a2a2:	2207      	movs	r2, #7
 800a2a4:	4013      	ands	r3, r2
 800a2a6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2b06      	cmp	r3, #6
 800a2ac:	d007      	beq.n	800a2be <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	2101      	movs	r1, #1
 800a2ba:	430a      	orrs	r2, r1
 800a2bc:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2239      	movs	r2, #57	; 0x39
 800a2c2:	2101      	movs	r1, #1
 800a2c4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800a2c6:	2300      	movs	r3, #0
}
 800a2c8:	0018      	movs	r0, r3
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	b004      	add	sp, #16
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2239      	movs	r2, #57	; 0x39
 800a2dc:	2102      	movs	r1, #2
 800a2de:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	6a1b      	ldr	r3, [r3, #32]
 800a2e6:	4a0a      	ldr	r2, [pc, #40]	; (800a310 <HAL_TIM_Base_Stop+0x40>)
 800a2e8:	4013      	ands	r3, r2
 800a2ea:	d107      	bne.n	800a2fc <HAL_TIM_Base_Stop+0x2c>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2101      	movs	r1, #1
 800a2f8:	438a      	bics	r2, r1
 800a2fa:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2239      	movs	r2, #57	; 0x39
 800a300:	2101      	movs	r1, #1
 800a302:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800a304:	2300      	movs	r3, #0
}
 800a306:	0018      	movs	r0, r3
 800a308:	46bd      	mov	sp, r7
 800a30a:	b002      	add	sp, #8
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	46c0      	nop			; (mov r8, r8)
 800a310:	00001111 	.word	0x00001111

0800a314 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	68da      	ldr	r2, [r3, #12]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	2101      	movs	r1, #1
 800a328:	430a      	orrs	r2, r1
 800a32a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	689b      	ldr	r3, [r3, #8]
 800a332:	2207      	movs	r2, #7
 800a334:	4013      	ands	r3, r2
 800a336:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2b06      	cmp	r3, #6
 800a33c:	d007      	beq.n	800a34e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	2101      	movs	r1, #1
 800a34a:	430a      	orrs	r2, r1
 800a34c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a34e:	2300      	movs	r3, #0
}
 800a350:	0018      	movs	r0, r3
 800a352:	46bd      	mov	sp, r7
 800a354:	b004      	add	sp, #16
 800a356:	bd80      	pop	{r7, pc}

0800a358 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b082      	sub	sp, #8
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	68da      	ldr	r2, [r3, #12]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	2101      	movs	r1, #1
 800a36c:	438a      	bics	r2, r1
 800a36e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	6a1b      	ldr	r3, [r3, #32]
 800a376:	4a08      	ldr	r2, [pc, #32]	; (800a398 <HAL_TIM_Base_Stop_IT+0x40>)
 800a378:	4013      	ands	r3, r2
 800a37a:	d107      	bne.n	800a38c <HAL_TIM_Base_Stop_IT+0x34>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2101      	movs	r1, #1
 800a388:	438a      	bics	r2, r1
 800a38a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	0018      	movs	r0, r3
 800a390:	46bd      	mov	sp, r7
 800a392:	b002      	add	sp, #8
 800a394:	bd80      	pop	{r7, pc}
 800a396:	46c0      	nop			; (mov r8, r8)
 800a398:	00001111 	.word	0x00001111

0800a39c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d101      	bne.n	800a3ae <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	e01e      	b.n	800a3ec <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2239      	movs	r2, #57	; 0x39
 800a3b2:	5c9b      	ldrb	r3, [r3, r2]
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d107      	bne.n	800a3ca <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2238      	movs	r2, #56	; 0x38
 800a3be:	2100      	movs	r1, #0
 800a3c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	0018      	movs	r0, r3
 800a3c6:	f000 f815 	bl	800a3f4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2239      	movs	r2, #57	; 0x39
 800a3ce:	2102      	movs	r1, #2
 800a3d0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	3304      	adds	r3, #4
 800a3da:	0019      	movs	r1, r3
 800a3dc:	0010      	movs	r0, r2
 800a3de:	f000 fbff 	bl	800abe0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2239      	movs	r2, #57	; 0x39
 800a3e6:	2101      	movs	r1, #1
 800a3e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a3ea:	2300      	movs	r3, #0
}
 800a3ec:	0018      	movs	r0, r3
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	b002      	add	sp, #8
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b082      	sub	sp, #8
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a3fc:	46c0      	nop			; (mov r8, r8)
 800a3fe:	46bd      	mov	sp, r7
 800a400:	b002      	add	sp, #8
 800a402:	bd80      	pop	{r7, pc}

0800a404 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	2b04      	cmp	r3, #4
 800a412:	d011      	beq.n	800a438 <HAL_TIM_OC_Start_IT+0x34>
 800a414:	d802      	bhi.n	800a41c <HAL_TIM_OC_Start_IT+0x18>
 800a416:	2b00      	cmp	r3, #0
 800a418:	d005      	beq.n	800a426 <HAL_TIM_OC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 800a41a:	e028      	b.n	800a46e <HAL_TIM_OC_Start_IT+0x6a>
  switch (Channel)
 800a41c:	2b08      	cmp	r3, #8
 800a41e:	d014      	beq.n	800a44a <HAL_TIM_OC_Start_IT+0x46>
 800a420:	2b0c      	cmp	r3, #12
 800a422:	d01b      	beq.n	800a45c <HAL_TIM_OC_Start_IT+0x58>
      break;
 800a424:	e023      	b.n	800a46e <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	68da      	ldr	r2, [r3, #12]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	2102      	movs	r1, #2
 800a432:	430a      	orrs	r2, r1
 800a434:	60da      	str	r2, [r3, #12]
      break;
 800a436:	e01a      	b.n	800a46e <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	68da      	ldr	r2, [r3, #12]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	2104      	movs	r1, #4
 800a444:	430a      	orrs	r2, r1
 800a446:	60da      	str	r2, [r3, #12]
      break;
 800a448:	e011      	b.n	800a46e <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	68da      	ldr	r2, [r3, #12]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2108      	movs	r1, #8
 800a456:	430a      	orrs	r2, r1
 800a458:	60da      	str	r2, [r3, #12]
      break;
 800a45a:	e008      	b.n	800a46e <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	68da      	ldr	r2, [r3, #12]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2110      	movs	r1, #16
 800a468:	430a      	orrs	r2, r1
 800a46a:	60da      	str	r2, [r3, #12]
      break;
 800a46c:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	6839      	ldr	r1, [r7, #0]
 800a474:	2201      	movs	r2, #1
 800a476:	0018      	movs	r0, r3
 800a478:	f000 fdae 	bl	800afd8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	2207      	movs	r2, #7
 800a484:	4013      	ands	r3, r2
 800a486:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2b06      	cmp	r3, #6
 800a48c:	d007      	beq.n	800a49e <HAL_TIM_OC_Start_IT+0x9a>
  {
    __HAL_TIM_ENABLE(htim);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	2101      	movs	r1, #1
 800a49a:	430a      	orrs	r2, r1
 800a49c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a49e:	2300      	movs	r3, #0
}
 800a4a0:	0018      	movs	r0, r3
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	b004      	add	sp, #16
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	2b04      	cmp	r3, #4
 800a4b6:	d011      	beq.n	800a4dc <HAL_TIM_OC_Stop_IT+0x34>
 800a4b8:	d802      	bhi.n	800a4c0 <HAL_TIM_OC_Stop_IT+0x18>
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d005      	beq.n	800a4ca <HAL_TIM_OC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 800a4be:	e028      	b.n	800a512 <HAL_TIM_OC_Stop_IT+0x6a>
  switch (Channel)
 800a4c0:	2b08      	cmp	r3, #8
 800a4c2:	d014      	beq.n	800a4ee <HAL_TIM_OC_Stop_IT+0x46>
 800a4c4:	2b0c      	cmp	r3, #12
 800a4c6:	d01b      	beq.n	800a500 <HAL_TIM_OC_Stop_IT+0x58>
      break;
 800a4c8:	e023      	b.n	800a512 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	68da      	ldr	r2, [r3, #12]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	2102      	movs	r1, #2
 800a4d6:	438a      	bics	r2, r1
 800a4d8:	60da      	str	r2, [r3, #12]
      break;
 800a4da:	e01a      	b.n	800a512 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	68da      	ldr	r2, [r3, #12]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	2104      	movs	r1, #4
 800a4e8:	438a      	bics	r2, r1
 800a4ea:	60da      	str	r2, [r3, #12]
      break;
 800a4ec:	e011      	b.n	800a512 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	68da      	ldr	r2, [r3, #12]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2108      	movs	r1, #8
 800a4fa:	438a      	bics	r2, r1
 800a4fc:	60da      	str	r2, [r3, #12]
      break;
 800a4fe:	e008      	b.n	800a512 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	68da      	ldr	r2, [r3, #12]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	2110      	movs	r1, #16
 800a50c:	438a      	bics	r2, r1
 800a50e:	60da      	str	r2, [r3, #12]
      break;
 800a510:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	6839      	ldr	r1, [r7, #0]
 800a518:	2200      	movs	r2, #0
 800a51a:	0018      	movs	r0, r3
 800a51c:	f000 fd5c 	bl	800afd8 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	6a1b      	ldr	r3, [r3, #32]
 800a526:	4a08      	ldr	r2, [pc, #32]	; (800a548 <HAL_TIM_OC_Stop_IT+0xa0>)
 800a528:	4013      	ands	r3, r2
 800a52a:	d107      	bne.n	800a53c <HAL_TIM_OC_Stop_IT+0x94>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	681a      	ldr	r2, [r3, #0]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	2101      	movs	r1, #1
 800a538:	438a      	bics	r2, r1
 800a53a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	0018      	movs	r0, r3
 800a540:	46bd      	mov	sp, r7
 800a542:	b002      	add	sp, #8
 800a544:	bd80      	pop	{r7, pc}
 800a546:	46c0      	nop			; (mov r8, r8)
 800a548:	00001111 	.word	0x00001111

0800a54c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d101      	bne.n	800a55e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a55a:	2301      	movs	r3, #1
 800a55c:	e01e      	b.n	800a59c <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2239      	movs	r2, #57	; 0x39
 800a562:	5c9b      	ldrb	r3, [r3, r2]
 800a564:	b2db      	uxtb	r3, r3
 800a566:	2b00      	cmp	r3, #0
 800a568:	d107      	bne.n	800a57a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2238      	movs	r2, #56	; 0x38
 800a56e:	2100      	movs	r1, #0
 800a570:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	0018      	movs	r0, r3
 800a576:	f000 f815 	bl	800a5a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2239      	movs	r2, #57	; 0x39
 800a57e:	2102      	movs	r1, #2
 800a580:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681a      	ldr	r2, [r3, #0]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	3304      	adds	r3, #4
 800a58a:	0019      	movs	r1, r3
 800a58c:	0010      	movs	r0, r2
 800a58e:	f000 fb27 	bl	800abe0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2239      	movs	r2, #57	; 0x39
 800a596:	2101      	movs	r1, #1
 800a598:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a59a:	2300      	movs	r3, #0
}
 800a59c:	0018      	movs	r0, r3
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	b002      	add	sp, #8
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a5ac:	46c0      	nop			; (mov r8, r8)
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	b002      	add	sp, #8
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b084      	sub	sp, #16
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	2b04      	cmp	r3, #4
 800a5c2:	d011      	beq.n	800a5e8 <HAL_TIM_PWM_Start_IT+0x34>
 800a5c4:	d802      	bhi.n	800a5cc <HAL_TIM_PWM_Start_IT+0x18>
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d005      	beq.n	800a5d6 <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 800a5ca:	e028      	b.n	800a61e <HAL_TIM_PWM_Start_IT+0x6a>
  switch (Channel)
 800a5cc:	2b08      	cmp	r3, #8
 800a5ce:	d014      	beq.n	800a5fa <HAL_TIM_PWM_Start_IT+0x46>
 800a5d0:	2b0c      	cmp	r3, #12
 800a5d2:	d01b      	beq.n	800a60c <HAL_TIM_PWM_Start_IT+0x58>
      break;
 800a5d4:	e023      	b.n	800a61e <HAL_TIM_PWM_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	68da      	ldr	r2, [r3, #12]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2102      	movs	r1, #2
 800a5e2:	430a      	orrs	r2, r1
 800a5e4:	60da      	str	r2, [r3, #12]
      break;
 800a5e6:	e01a      	b.n	800a61e <HAL_TIM_PWM_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	68da      	ldr	r2, [r3, #12]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2104      	movs	r1, #4
 800a5f4:	430a      	orrs	r2, r1
 800a5f6:	60da      	str	r2, [r3, #12]
      break;
 800a5f8:	e011      	b.n	800a61e <HAL_TIM_PWM_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	68da      	ldr	r2, [r3, #12]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	2108      	movs	r1, #8
 800a606:	430a      	orrs	r2, r1
 800a608:	60da      	str	r2, [r3, #12]
      break;
 800a60a:	e008      	b.n	800a61e <HAL_TIM_PWM_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	68da      	ldr	r2, [r3, #12]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	2110      	movs	r1, #16
 800a618:	430a      	orrs	r2, r1
 800a61a:	60da      	str	r2, [r3, #12]
      break;
 800a61c:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	6839      	ldr	r1, [r7, #0]
 800a624:	2201      	movs	r2, #1
 800a626:	0018      	movs	r0, r3
 800a628:	f000 fcd6 	bl	800afd8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	689b      	ldr	r3, [r3, #8]
 800a632:	2207      	movs	r2, #7
 800a634:	4013      	ands	r3, r2
 800a636:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2b06      	cmp	r3, #6
 800a63c:	d007      	beq.n	800a64e <HAL_TIM_PWM_Start_IT+0x9a>
  {
    __HAL_TIM_ENABLE(htim);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	681a      	ldr	r2, [r3, #0]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2101      	movs	r1, #1
 800a64a:	430a      	orrs	r2, r1
 800a64c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a64e:	2300      	movs	r3, #0
}
 800a650:	0018      	movs	r0, r3
 800a652:	46bd      	mov	sp, r7
 800a654:	b004      	add	sp, #16
 800a656:	bd80      	pop	{r7, pc}

0800a658 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	691b      	ldr	r3, [r3, #16]
 800a666:	2202      	movs	r2, #2
 800a668:	4013      	ands	r3, r2
 800a66a:	2b02      	cmp	r3, #2
 800a66c:	d124      	bne.n	800a6b8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	68db      	ldr	r3, [r3, #12]
 800a674:	2202      	movs	r2, #2
 800a676:	4013      	ands	r3, r2
 800a678:	2b02      	cmp	r3, #2
 800a67a:	d11d      	bne.n	800a6b8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	2203      	movs	r2, #3
 800a682:	4252      	negs	r2, r2
 800a684:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2201      	movs	r2, #1
 800a68a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	699b      	ldr	r3, [r3, #24]
 800a692:	2203      	movs	r2, #3
 800a694:	4013      	ands	r3, r2
 800a696:	d004      	beq.n	800a6a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	0018      	movs	r0, r3
 800a69c:	f000 fa88 	bl	800abb0 <HAL_TIM_IC_CaptureCallback>
 800a6a0:	e007      	b.n	800a6b2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	0018      	movs	r0, r3
 800a6a6:	f7fa fac1 	bl	8004c2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	0018      	movs	r0, r3
 800a6ae:	f000 fa87 	bl	800abc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	691b      	ldr	r3, [r3, #16]
 800a6be:	2204      	movs	r2, #4
 800a6c0:	4013      	ands	r3, r2
 800a6c2:	2b04      	cmp	r3, #4
 800a6c4:	d125      	bne.n	800a712 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	68db      	ldr	r3, [r3, #12]
 800a6cc:	2204      	movs	r2, #4
 800a6ce:	4013      	ands	r3, r2
 800a6d0:	2b04      	cmp	r3, #4
 800a6d2:	d11e      	bne.n	800a712 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	2205      	movs	r2, #5
 800a6da:	4252      	negs	r2, r2
 800a6dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2202      	movs	r2, #2
 800a6e2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	699a      	ldr	r2, [r3, #24]
 800a6ea:	23c0      	movs	r3, #192	; 0xc0
 800a6ec:	009b      	lsls	r3, r3, #2
 800a6ee:	4013      	ands	r3, r2
 800a6f0:	d004      	beq.n	800a6fc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	0018      	movs	r0, r3
 800a6f6:	f000 fa5b 	bl	800abb0 <HAL_TIM_IC_CaptureCallback>
 800a6fa:	e007      	b.n	800a70c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	0018      	movs	r0, r3
 800a700:	f7fa fa94 	bl	8004c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	0018      	movs	r0, r3
 800a708:	f000 fa5a 	bl	800abc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	691b      	ldr	r3, [r3, #16]
 800a718:	2208      	movs	r2, #8
 800a71a:	4013      	ands	r3, r2
 800a71c:	2b08      	cmp	r3, #8
 800a71e:	d124      	bne.n	800a76a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	68db      	ldr	r3, [r3, #12]
 800a726:	2208      	movs	r2, #8
 800a728:	4013      	ands	r3, r2
 800a72a:	2b08      	cmp	r3, #8
 800a72c:	d11d      	bne.n	800a76a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	2209      	movs	r2, #9
 800a734:	4252      	negs	r2, r2
 800a736:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2204      	movs	r2, #4
 800a73c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	69db      	ldr	r3, [r3, #28]
 800a744:	2203      	movs	r2, #3
 800a746:	4013      	ands	r3, r2
 800a748:	d004      	beq.n	800a754 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	0018      	movs	r0, r3
 800a74e:	f000 fa2f 	bl	800abb0 <HAL_TIM_IC_CaptureCallback>
 800a752:	e007      	b.n	800a764 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	0018      	movs	r0, r3
 800a758:	f7fa fa68 	bl	8004c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	0018      	movs	r0, r3
 800a760:	f000 fa2e 	bl	800abc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2200      	movs	r2, #0
 800a768:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	691b      	ldr	r3, [r3, #16]
 800a770:	2210      	movs	r2, #16
 800a772:	4013      	ands	r3, r2
 800a774:	2b10      	cmp	r3, #16
 800a776:	d125      	bne.n	800a7c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	68db      	ldr	r3, [r3, #12]
 800a77e:	2210      	movs	r2, #16
 800a780:	4013      	ands	r3, r2
 800a782:	2b10      	cmp	r3, #16
 800a784:	d11e      	bne.n	800a7c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	2211      	movs	r2, #17
 800a78c:	4252      	negs	r2, r2
 800a78e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2208      	movs	r2, #8
 800a794:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	69da      	ldr	r2, [r3, #28]
 800a79c:	23c0      	movs	r3, #192	; 0xc0
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	4013      	ands	r3, r2
 800a7a2:	d004      	beq.n	800a7ae <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	0018      	movs	r0, r3
 800a7a8:	f000 fa02 	bl	800abb0 <HAL_TIM_IC_CaptureCallback>
 800a7ac:	e007      	b.n	800a7be <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	0018      	movs	r0, r3
 800a7b2:	f7fa fa3b 	bl	8004c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	0018      	movs	r0, r3
 800a7ba:	f000 fa01 	bl	800abc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	691b      	ldr	r3, [r3, #16]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	4013      	ands	r3, r2
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	d10f      	bne.n	800a7f2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	2201      	movs	r2, #1
 800a7da:	4013      	ands	r3, r2
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d108      	bne.n	800a7f2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	2202      	movs	r2, #2
 800a7e6:	4252      	negs	r2, r2
 800a7e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	0018      	movs	r0, r3
 800a7ee:	f7fa f9df 	bl	8004bb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	691b      	ldr	r3, [r3, #16]
 800a7f8:	2240      	movs	r2, #64	; 0x40
 800a7fa:	4013      	ands	r3, r2
 800a7fc:	2b40      	cmp	r3, #64	; 0x40
 800a7fe:	d10f      	bne.n	800a820 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	68db      	ldr	r3, [r3, #12]
 800a806:	2240      	movs	r2, #64	; 0x40
 800a808:	4013      	ands	r3, r2
 800a80a:	2b40      	cmp	r3, #64	; 0x40
 800a80c:	d108      	bne.n	800a820 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	2241      	movs	r2, #65	; 0x41
 800a814:	4252      	negs	r2, r2
 800a816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	0018      	movs	r0, r3
 800a81c:	f000 f9d8 	bl	800abd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a820:	46c0      	nop			; (mov r8, r8)
 800a822:	46bd      	mov	sp, r7
 800a824:	b002      	add	sp, #8
 800a826:	bd80      	pop	{r7, pc}

0800a828 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b084      	sub	sp, #16
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	60b9      	str	r1, [r7, #8]
 800a832:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2238      	movs	r2, #56	; 0x38
 800a838:	5c9b      	ldrb	r3, [r3, r2]
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d101      	bne.n	800a842 <HAL_TIM_OC_ConfigChannel+0x1a>
 800a83e:	2302      	movs	r3, #2
 800a840:	e03c      	b.n	800a8bc <HAL_TIM_OC_ConfigChannel+0x94>
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2238      	movs	r2, #56	; 0x38
 800a846:	2101      	movs	r1, #1
 800a848:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2239      	movs	r2, #57	; 0x39
 800a84e:	2102      	movs	r1, #2
 800a850:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2b04      	cmp	r3, #4
 800a856:	d010      	beq.n	800a87a <HAL_TIM_OC_ConfigChannel+0x52>
 800a858:	d802      	bhi.n	800a860 <HAL_TIM_OC_ConfigChannel+0x38>
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d005      	beq.n	800a86a <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 800a85e:	e024      	b.n	800a8aa <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 800a860:	2b08      	cmp	r3, #8
 800a862:	d012      	beq.n	800a88a <HAL_TIM_OC_ConfigChannel+0x62>
 800a864:	2b0c      	cmp	r3, #12
 800a866:	d018      	beq.n	800a89a <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 800a868:	e01f      	b.n	800a8aa <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	68ba      	ldr	r2, [r7, #8]
 800a870:	0011      	movs	r1, r2
 800a872:	0018      	movs	r0, r3
 800a874:	f000 fa12 	bl	800ac9c <TIM_OC1_SetConfig>
      break;
 800a878:	e017      	b.n	800a8aa <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	68ba      	ldr	r2, [r7, #8]
 800a880:	0011      	movs	r1, r2
 800a882:	0018      	movs	r0, r3
 800a884:	f000 fa46 	bl	800ad14 <TIM_OC2_SetConfig>
      break;
 800a888:	e00f      	b.n	800a8aa <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	68ba      	ldr	r2, [r7, #8]
 800a890:	0011      	movs	r1, r2
 800a892:	0018      	movs	r0, r3
 800a894:	f000 fa80 	bl	800ad98 <TIM_OC3_SetConfig>
      break;
 800a898:	e007      	b.n	800a8aa <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	68ba      	ldr	r2, [r7, #8]
 800a8a0:	0011      	movs	r1, r2
 800a8a2:	0018      	movs	r0, r3
 800a8a4:	f000 fab8 	bl	800ae18 <TIM_OC4_SetConfig>
      break;
 800a8a8:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2239      	movs	r2, #57	; 0x39
 800a8ae:	2101      	movs	r1, #1
 800a8b0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2238      	movs	r2, #56	; 0x38
 800a8b6:	2100      	movs	r1, #0
 800a8b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a8ba:	2300      	movs	r3, #0
}
 800a8bc:	0018      	movs	r0, r3
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	b004      	add	sp, #16
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	60f8      	str	r0, [r7, #12]
 800a8cc:	60b9      	str	r1, [r7, #8]
 800a8ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2238      	movs	r2, #56	; 0x38
 800a8d4:	5c9b      	ldrb	r3, [r3, r2]
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d101      	bne.n	800a8de <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a8da:	2302      	movs	r3, #2
 800a8dc:	e0a4      	b.n	800aa28 <HAL_TIM_PWM_ConfigChannel+0x164>
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2238      	movs	r2, #56	; 0x38
 800a8e2:	2101      	movs	r1, #1
 800a8e4:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2239      	movs	r2, #57	; 0x39
 800a8ea:	2102      	movs	r1, #2
 800a8ec:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2b04      	cmp	r3, #4
 800a8f2:	d029      	beq.n	800a948 <HAL_TIM_PWM_ConfigChannel+0x84>
 800a8f4:	d802      	bhi.n	800a8fc <HAL_TIM_PWM_ConfigChannel+0x38>
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d005      	beq.n	800a906 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 800a8fa:	e08c      	b.n	800aa16 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 800a8fc:	2b08      	cmp	r3, #8
 800a8fe:	d046      	beq.n	800a98e <HAL_TIM_PWM_ConfigChannel+0xca>
 800a900:	2b0c      	cmp	r3, #12
 800a902:	d065      	beq.n	800a9d0 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 800a904:	e087      	b.n	800aa16 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	68ba      	ldr	r2, [r7, #8]
 800a90c:	0011      	movs	r1, r2
 800a90e:	0018      	movs	r0, r3
 800a910:	f000 f9c4 	bl	800ac9c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	699a      	ldr	r2, [r3, #24]
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	2108      	movs	r1, #8
 800a920:	430a      	orrs	r2, r1
 800a922:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	699a      	ldr	r2, [r3, #24]
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	2104      	movs	r1, #4
 800a930:	438a      	bics	r2, r1
 800a932:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	6999      	ldr	r1, [r3, #24]
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	68da      	ldr	r2, [r3, #12]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	430a      	orrs	r2, r1
 800a944:	619a      	str	r2, [r3, #24]
      break;
 800a946:	e066      	b.n	800aa16 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	68ba      	ldr	r2, [r7, #8]
 800a94e:	0011      	movs	r1, r2
 800a950:	0018      	movs	r0, r3
 800a952:	f000 f9df 	bl	800ad14 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	699a      	ldr	r2, [r3, #24]
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2180      	movs	r1, #128	; 0x80
 800a962:	0109      	lsls	r1, r1, #4
 800a964:	430a      	orrs	r2, r1
 800a966:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	699a      	ldr	r2, [r3, #24]
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	492f      	ldr	r1, [pc, #188]	; (800aa30 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 800a974:	400a      	ands	r2, r1
 800a976:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	6999      	ldr	r1, [r3, #24]
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	68db      	ldr	r3, [r3, #12]
 800a982:	021a      	lsls	r2, r3, #8
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	430a      	orrs	r2, r1
 800a98a:	619a      	str	r2, [r3, #24]
      break;
 800a98c:	e043      	b.n	800aa16 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	68ba      	ldr	r2, [r7, #8]
 800a994:	0011      	movs	r1, r2
 800a996:	0018      	movs	r0, r3
 800a998:	f000 f9fe 	bl	800ad98 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	69da      	ldr	r2, [r3, #28]
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	2108      	movs	r1, #8
 800a9a8:	430a      	orrs	r2, r1
 800a9aa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	69da      	ldr	r2, [r3, #28]
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	2104      	movs	r1, #4
 800a9b8:	438a      	bics	r2, r1
 800a9ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	69d9      	ldr	r1, [r3, #28]
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	68da      	ldr	r2, [r3, #12]
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	430a      	orrs	r2, r1
 800a9cc:	61da      	str	r2, [r3, #28]
      break;
 800a9ce:	e022      	b.n	800aa16 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	68ba      	ldr	r2, [r7, #8]
 800a9d6:	0011      	movs	r1, r2
 800a9d8:	0018      	movs	r0, r3
 800a9da:	f000 fa1d 	bl	800ae18 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	69da      	ldr	r2, [r3, #28]
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	2180      	movs	r1, #128	; 0x80
 800a9ea:	0109      	lsls	r1, r1, #4
 800a9ec:	430a      	orrs	r2, r1
 800a9ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	69da      	ldr	r2, [r3, #28]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	490d      	ldr	r1, [pc, #52]	; (800aa30 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 800a9fc:	400a      	ands	r2, r1
 800a9fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	69d9      	ldr	r1, [r3, #28]
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	021a      	lsls	r2, r3, #8
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	430a      	orrs	r2, r1
 800aa12:	61da      	str	r2, [r3, #28]
      break;
 800aa14:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2239      	movs	r2, #57	; 0x39
 800aa1a:	2101      	movs	r1, #1
 800aa1c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2238      	movs	r2, #56	; 0x38
 800aa22:	2100      	movs	r1, #0
 800aa24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aa26:	2300      	movs	r3, #0
}
 800aa28:	0018      	movs	r0, r3
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	b004      	add	sp, #16
 800aa2e:	bd80      	pop	{r7, pc}
 800aa30:	fffffbff 	.word	0xfffffbff

0800aa34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2238      	movs	r2, #56	; 0x38
 800aa42:	5c9b      	ldrb	r3, [r3, r2]
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d101      	bne.n	800aa4c <HAL_TIM_ConfigClockSource+0x18>
 800aa48:	2302      	movs	r3, #2
 800aa4a:	e0ab      	b.n	800aba4 <HAL_TIM_ConfigClockSource+0x170>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2238      	movs	r2, #56	; 0x38
 800aa50:	2101      	movs	r1, #1
 800aa52:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2239      	movs	r2, #57	; 0x39
 800aa58:	2102      	movs	r1, #2
 800aa5a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	689b      	ldr	r3, [r3, #8]
 800aa62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2277      	movs	r2, #119	; 0x77
 800aa68:	4393      	bics	r3, r2
 800aa6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	4a4f      	ldr	r2, [pc, #316]	; (800abac <HAL_TIM_ConfigClockSource+0x178>)
 800aa70:	4013      	ands	r3, r2
 800aa72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	68fa      	ldr	r2, [r7, #12]
 800aa7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	2b40      	cmp	r3, #64	; 0x40
 800aa82:	d100      	bne.n	800aa86 <HAL_TIM_ConfigClockSource+0x52>
 800aa84:	e06b      	b.n	800ab5e <HAL_TIM_ConfigClockSource+0x12a>
 800aa86:	d80e      	bhi.n	800aaa6 <HAL_TIM_ConfigClockSource+0x72>
 800aa88:	2b10      	cmp	r3, #16
 800aa8a:	d100      	bne.n	800aa8e <HAL_TIM_ConfigClockSource+0x5a>
 800aa8c:	e077      	b.n	800ab7e <HAL_TIM_ConfigClockSource+0x14a>
 800aa8e:	d803      	bhi.n	800aa98 <HAL_TIM_ConfigClockSource+0x64>
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d100      	bne.n	800aa96 <HAL_TIM_ConfigClockSource+0x62>
 800aa94:	e073      	b.n	800ab7e <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800aa96:	e07c      	b.n	800ab92 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800aa98:	2b20      	cmp	r3, #32
 800aa9a:	d100      	bne.n	800aa9e <HAL_TIM_ConfigClockSource+0x6a>
 800aa9c:	e06f      	b.n	800ab7e <HAL_TIM_ConfigClockSource+0x14a>
 800aa9e:	2b30      	cmp	r3, #48	; 0x30
 800aaa0:	d100      	bne.n	800aaa4 <HAL_TIM_ConfigClockSource+0x70>
 800aaa2:	e06c      	b.n	800ab7e <HAL_TIM_ConfigClockSource+0x14a>
      break;
 800aaa4:	e075      	b.n	800ab92 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800aaa6:	2b70      	cmp	r3, #112	; 0x70
 800aaa8:	d00e      	beq.n	800aac8 <HAL_TIM_ConfigClockSource+0x94>
 800aaaa:	d804      	bhi.n	800aab6 <HAL_TIM_ConfigClockSource+0x82>
 800aaac:	2b50      	cmp	r3, #80	; 0x50
 800aaae:	d036      	beq.n	800ab1e <HAL_TIM_ConfigClockSource+0xea>
 800aab0:	2b60      	cmp	r3, #96	; 0x60
 800aab2:	d044      	beq.n	800ab3e <HAL_TIM_ConfigClockSource+0x10a>
      break;
 800aab4:	e06d      	b.n	800ab92 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800aab6:	2280      	movs	r2, #128	; 0x80
 800aab8:	0152      	lsls	r2, r2, #5
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d068      	beq.n	800ab90 <HAL_TIM_ConfigClockSource+0x15c>
 800aabe:	2280      	movs	r2, #128	; 0x80
 800aac0:	0192      	lsls	r2, r2, #6
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d017      	beq.n	800aaf6 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800aac6:	e064      	b.n	800ab92 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6818      	ldr	r0, [r3, #0]
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	6899      	ldr	r1, [r3, #8]
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	685a      	ldr	r2, [r3, #4]
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	68db      	ldr	r3, [r3, #12]
 800aad8:	f000 fa5e 	bl	800af98 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	689b      	ldr	r3, [r3, #8]
 800aae2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2277      	movs	r2, #119	; 0x77
 800aae8:	4313      	orrs	r3, r2
 800aaea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	68fa      	ldr	r2, [r7, #12]
 800aaf2:	609a      	str	r2, [r3, #8]
      break;
 800aaf4:	e04d      	b.n	800ab92 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6818      	ldr	r0, [r3, #0]
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	6899      	ldr	r1, [r3, #8]
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	685a      	ldr	r2, [r3, #4]
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	f000 fa47 	bl	800af98 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	689a      	ldr	r2, [r3, #8]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	2180      	movs	r1, #128	; 0x80
 800ab16:	01c9      	lsls	r1, r1, #7
 800ab18:	430a      	orrs	r2, r1
 800ab1a:	609a      	str	r2, [r3, #8]
      break;
 800ab1c:	e039      	b.n	800ab92 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6818      	ldr	r0, [r3, #0]
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	6859      	ldr	r1, [r3, #4]
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	68db      	ldr	r3, [r3, #12]
 800ab2a:	001a      	movs	r2, r3
 800ab2c:	f000 f9ba 	bl	800aea4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	2150      	movs	r1, #80	; 0x50
 800ab36:	0018      	movs	r0, r3
 800ab38:	f000 fa14 	bl	800af64 <TIM_ITRx_SetConfig>
      break;
 800ab3c:	e029      	b.n	800ab92 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6818      	ldr	r0, [r3, #0]
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	6859      	ldr	r1, [r3, #4]
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	68db      	ldr	r3, [r3, #12]
 800ab4a:	001a      	movs	r2, r3
 800ab4c:	f000 f9d8 	bl	800af00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	2160      	movs	r1, #96	; 0x60
 800ab56:	0018      	movs	r0, r3
 800ab58:	f000 fa04 	bl	800af64 <TIM_ITRx_SetConfig>
      break;
 800ab5c:	e019      	b.n	800ab92 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6818      	ldr	r0, [r3, #0]
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	6859      	ldr	r1, [r3, #4]
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	68db      	ldr	r3, [r3, #12]
 800ab6a:	001a      	movs	r2, r3
 800ab6c:	f000 f99a 	bl	800aea4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	2140      	movs	r1, #64	; 0x40
 800ab76:	0018      	movs	r0, r3
 800ab78:	f000 f9f4 	bl	800af64 <TIM_ITRx_SetConfig>
      break;
 800ab7c:	e009      	b.n	800ab92 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681a      	ldr	r2, [r3, #0]
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	0019      	movs	r1, r3
 800ab88:	0010      	movs	r0, r2
 800ab8a:	f000 f9eb 	bl	800af64 <TIM_ITRx_SetConfig>
      break;
 800ab8e:	e000      	b.n	800ab92 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 800ab90:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2239      	movs	r2, #57	; 0x39
 800ab96:	2101      	movs	r1, #1
 800ab98:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2238      	movs	r2, #56	; 0x38
 800ab9e:	2100      	movs	r1, #0
 800aba0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aba2:	2300      	movs	r3, #0
}
 800aba4:	0018      	movs	r0, r3
 800aba6:	46bd      	mov	sp, r7
 800aba8:	b004      	add	sp, #16
 800abaa:	bd80      	pop	{r7, pc}
 800abac:	ffff00ff 	.word	0xffff00ff

0800abb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b082      	sub	sp, #8
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800abb8:	46c0      	nop			; (mov r8, r8)
 800abba:	46bd      	mov	sp, r7
 800abbc:	b002      	add	sp, #8
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b082      	sub	sp, #8
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800abc8:	46c0      	nop			; (mov r8, r8)
 800abca:	46bd      	mov	sp, r7
 800abcc:	b002      	add	sp, #8
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b082      	sub	sp, #8
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800abd8:	46c0      	nop			; (mov r8, r8)
 800abda:	46bd      	mov	sp, r7
 800abdc:	b002      	add	sp, #8
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b084      	sub	sp, #16
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	2380      	movs	r3, #128	; 0x80
 800abf4:	05db      	lsls	r3, r3, #23
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d00b      	beq.n	800ac12 <TIM_Base_SetConfig+0x32>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	4a23      	ldr	r2, [pc, #140]	; (800ac8c <TIM_Base_SetConfig+0xac>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d007      	beq.n	800ac12 <TIM_Base_SetConfig+0x32>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	4a22      	ldr	r2, [pc, #136]	; (800ac90 <TIM_Base_SetConfig+0xb0>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d003      	beq.n	800ac12 <TIM_Base_SetConfig+0x32>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	4a21      	ldr	r2, [pc, #132]	; (800ac94 <TIM_Base_SetConfig+0xb4>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d108      	bne.n	800ac24 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2270      	movs	r2, #112	; 0x70
 800ac16:	4393      	bics	r3, r2
 800ac18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	68fa      	ldr	r2, [r7, #12]
 800ac20:	4313      	orrs	r3, r2
 800ac22:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	2380      	movs	r3, #128	; 0x80
 800ac28:	05db      	lsls	r3, r3, #23
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d00b      	beq.n	800ac46 <TIM_Base_SetConfig+0x66>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	4a16      	ldr	r2, [pc, #88]	; (800ac8c <TIM_Base_SetConfig+0xac>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d007      	beq.n	800ac46 <TIM_Base_SetConfig+0x66>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	4a15      	ldr	r2, [pc, #84]	; (800ac90 <TIM_Base_SetConfig+0xb0>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d003      	beq.n	800ac46 <TIM_Base_SetConfig+0x66>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	4a14      	ldr	r2, [pc, #80]	; (800ac94 <TIM_Base_SetConfig+0xb4>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d108      	bne.n	800ac58 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	4a13      	ldr	r2, [pc, #76]	; (800ac98 <TIM_Base_SetConfig+0xb8>)
 800ac4a:	4013      	ands	r3, r2
 800ac4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	68db      	ldr	r3, [r3, #12]
 800ac52:	68fa      	ldr	r2, [r7, #12]
 800ac54:	4313      	orrs	r3, r2
 800ac56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2280      	movs	r2, #128	; 0x80
 800ac5c:	4393      	bics	r3, r2
 800ac5e:	001a      	movs	r2, r3
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	691b      	ldr	r3, [r3, #16]
 800ac64:	4313      	orrs	r3, r2
 800ac66:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	68fa      	ldr	r2, [r7, #12]
 800ac6c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	689a      	ldr	r2, [r3, #8]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	681a      	ldr	r2, [r3, #0]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2201      	movs	r2, #1
 800ac82:	615a      	str	r2, [r3, #20]
}
 800ac84:	46c0      	nop			; (mov r8, r8)
 800ac86:	46bd      	mov	sp, r7
 800ac88:	b004      	add	sp, #16
 800ac8a:	bd80      	pop	{r7, pc}
 800ac8c:	40000400 	.word	0x40000400
 800ac90:	40010800 	.word	0x40010800
 800ac94:	40011400 	.word	0x40011400
 800ac98:	fffffcff 	.word	0xfffffcff

0800ac9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b086      	sub	sp, #24
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6a1b      	ldr	r3, [r3, #32]
 800acaa:	2201      	movs	r2, #1
 800acac:	4393      	bics	r3, r2
 800acae:	001a      	movs	r2, r3
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6a1b      	ldr	r3, [r3, #32]
 800acb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	699b      	ldr	r3, [r3, #24]
 800acc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2270      	movs	r2, #112	; 0x70
 800acca:	4393      	bics	r3, r2
 800accc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2203      	movs	r2, #3
 800acd2:	4393      	bics	r3, r2
 800acd4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	68fa      	ldr	r2, [r7, #12]
 800acdc:	4313      	orrs	r3, r2
 800acde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	2202      	movs	r2, #2
 800ace4:	4393      	bics	r3, r2
 800ace6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	697a      	ldr	r2, [r7, #20]
 800acee:	4313      	orrs	r3, r2
 800acf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	693a      	ldr	r2, [r7, #16]
 800acf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	68fa      	ldr	r2, [r7, #12]
 800acfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	685a      	ldr	r2, [r3, #4]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	697a      	ldr	r2, [r7, #20]
 800ad0a:	621a      	str	r2, [r3, #32]
}
 800ad0c:	46c0      	nop			; (mov r8, r8)
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	b006      	add	sp, #24
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b086      	sub	sp, #24
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6a1b      	ldr	r3, [r3, #32]
 800ad22:	2210      	movs	r2, #16
 800ad24:	4393      	bics	r3, r2
 800ad26:	001a      	movs	r2, r3
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6a1b      	ldr	r3, [r3, #32]
 800ad30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	699b      	ldr	r3, [r3, #24]
 800ad3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	4a13      	ldr	r2, [pc, #76]	; (800ad90 <TIM_OC2_SetConfig+0x7c>)
 800ad42:	4013      	ands	r3, r2
 800ad44:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	4a12      	ldr	r2, [pc, #72]	; (800ad94 <TIM_OC2_SetConfig+0x80>)
 800ad4a:	4013      	ands	r3, r2
 800ad4c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	021b      	lsls	r3, r3, #8
 800ad54:	68fa      	ldr	r2, [r7, #12]
 800ad56:	4313      	orrs	r3, r2
 800ad58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	2220      	movs	r2, #32
 800ad5e:	4393      	bics	r3, r2
 800ad60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	689b      	ldr	r3, [r3, #8]
 800ad66:	011b      	lsls	r3, r3, #4
 800ad68:	697a      	ldr	r2, [r7, #20]
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	693a      	ldr	r2, [r7, #16]
 800ad72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	68fa      	ldr	r2, [r7, #12]
 800ad78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	685a      	ldr	r2, [r3, #4]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	697a      	ldr	r2, [r7, #20]
 800ad86:	621a      	str	r2, [r3, #32]
}
 800ad88:	46c0      	nop			; (mov r8, r8)
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	b006      	add	sp, #24
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	ffff8fff 	.word	0xffff8fff
 800ad94:	fffffcff 	.word	0xfffffcff

0800ad98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b086      	sub	sp, #24
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6a1b      	ldr	r3, [r3, #32]
 800ada6:	4a1a      	ldr	r2, [pc, #104]	; (800ae10 <TIM_OC3_SetConfig+0x78>)
 800ada8:	401a      	ands	r2, r3
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6a1b      	ldr	r3, [r3, #32]
 800adb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	685b      	ldr	r3, [r3, #4]
 800adb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	69db      	ldr	r3, [r3, #28]
 800adbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2270      	movs	r2, #112	; 0x70
 800adc4:	4393      	bics	r3, r2
 800adc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2203      	movs	r2, #3
 800adcc:	4393      	bics	r3, r2
 800adce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	68fa      	ldr	r2, [r7, #12]
 800add6:	4313      	orrs	r3, r2
 800add8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	4a0d      	ldr	r2, [pc, #52]	; (800ae14 <TIM_OC3_SetConfig+0x7c>)
 800adde:	4013      	ands	r3, r2
 800ade0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	689b      	ldr	r3, [r3, #8]
 800ade6:	021b      	lsls	r3, r3, #8
 800ade8:	697a      	ldr	r2, [r7, #20]
 800adea:	4313      	orrs	r3, r2
 800adec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	693a      	ldr	r2, [r7, #16]
 800adf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	68fa      	ldr	r2, [r7, #12]
 800adf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	685a      	ldr	r2, [r3, #4]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	697a      	ldr	r2, [r7, #20]
 800ae06:	621a      	str	r2, [r3, #32]
}
 800ae08:	46c0      	nop			; (mov r8, r8)
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	b006      	add	sp, #24
 800ae0e:	bd80      	pop	{r7, pc}
 800ae10:	fffffeff 	.word	0xfffffeff
 800ae14:	fffffdff 	.word	0xfffffdff

0800ae18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b086      	sub	sp, #24
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6a1b      	ldr	r3, [r3, #32]
 800ae26:	4a1b      	ldr	r2, [pc, #108]	; (800ae94 <TIM_OC4_SetConfig+0x7c>)
 800ae28:	401a      	ands	r2, r3
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6a1b      	ldr	r3, [r3, #32]
 800ae32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	69db      	ldr	r3, [r3, #28]
 800ae3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	4a15      	ldr	r2, [pc, #84]	; (800ae98 <TIM_OC4_SetConfig+0x80>)
 800ae44:	4013      	ands	r3, r2
 800ae46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	4a14      	ldr	r2, [pc, #80]	; (800ae9c <TIM_OC4_SetConfig+0x84>)
 800ae4c:	4013      	ands	r3, r2
 800ae4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	021b      	lsls	r3, r3, #8
 800ae56:	68fa      	ldr	r2, [r7, #12]
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	4a10      	ldr	r2, [pc, #64]	; (800aea0 <TIM_OC4_SetConfig+0x88>)
 800ae60:	4013      	ands	r3, r2
 800ae62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	689b      	ldr	r3, [r3, #8]
 800ae68:	031b      	lsls	r3, r3, #12
 800ae6a:	697a      	ldr	r2, [r7, #20]
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	693a      	ldr	r2, [r7, #16]
 800ae74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	68fa      	ldr	r2, [r7, #12]
 800ae7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	685a      	ldr	r2, [r3, #4]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	697a      	ldr	r2, [r7, #20]
 800ae88:	621a      	str	r2, [r3, #32]
}
 800ae8a:	46c0      	nop			; (mov r8, r8)
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	b006      	add	sp, #24
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	46c0      	nop			; (mov r8, r8)
 800ae94:	ffffefff 	.word	0xffffefff
 800ae98:	ffff8fff 	.word	0xffff8fff
 800ae9c:	fffffcff 	.word	0xfffffcff
 800aea0:	ffffdfff 	.word	0xffffdfff

0800aea4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b086      	sub	sp, #24
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	60f8      	str	r0, [r7, #12]
 800aeac:	60b9      	str	r1, [r7, #8]
 800aeae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	6a1b      	ldr	r3, [r3, #32]
 800aeb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	6a1b      	ldr	r3, [r3, #32]
 800aeba:	2201      	movs	r2, #1
 800aebc:	4393      	bics	r3, r2
 800aebe:	001a      	movs	r2, r3
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	699b      	ldr	r3, [r3, #24]
 800aec8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	22f0      	movs	r2, #240	; 0xf0
 800aece:	4393      	bics	r3, r2
 800aed0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	011b      	lsls	r3, r3, #4
 800aed6:	693a      	ldr	r2, [r7, #16]
 800aed8:	4313      	orrs	r3, r2
 800aeda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	220a      	movs	r2, #10
 800aee0:	4393      	bics	r3, r2
 800aee2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aee4:	697a      	ldr	r2, [r7, #20]
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	4313      	orrs	r3, r2
 800aeea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	693a      	ldr	r2, [r7, #16]
 800aef0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	697a      	ldr	r2, [r7, #20]
 800aef6:	621a      	str	r2, [r3, #32]
}
 800aef8:	46c0      	nop			; (mov r8, r8)
 800aefa:	46bd      	mov	sp, r7
 800aefc:	b006      	add	sp, #24
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b086      	sub	sp, #24
 800af04:	af00      	add	r7, sp, #0
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	6a1b      	ldr	r3, [r3, #32]
 800af10:	2210      	movs	r2, #16
 800af12:	4393      	bics	r3, r2
 800af14:	001a      	movs	r2, r3
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	699b      	ldr	r3, [r3, #24]
 800af1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	6a1b      	ldr	r3, [r3, #32]
 800af24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	4a0d      	ldr	r2, [pc, #52]	; (800af60 <TIM_TI2_ConfigInputStage+0x60>)
 800af2a:	4013      	ands	r3, r2
 800af2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	031b      	lsls	r3, r3, #12
 800af32:	697a      	ldr	r2, [r7, #20]
 800af34:	4313      	orrs	r3, r2
 800af36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	22a0      	movs	r2, #160	; 0xa0
 800af3c:	4393      	bics	r3, r2
 800af3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	011b      	lsls	r3, r3, #4
 800af44:	693a      	ldr	r2, [r7, #16]
 800af46:	4313      	orrs	r3, r2
 800af48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	697a      	ldr	r2, [r7, #20]
 800af4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	693a      	ldr	r2, [r7, #16]
 800af54:	621a      	str	r2, [r3, #32]
}
 800af56:	46c0      	nop			; (mov r8, r8)
 800af58:	46bd      	mov	sp, r7
 800af5a:	b006      	add	sp, #24
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	46c0      	nop			; (mov r8, r8)
 800af60:	ffff0fff 	.word	0xffff0fff

0800af64 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	689b      	ldr	r3, [r3, #8]
 800af72:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2270      	movs	r2, #112	; 0x70
 800af78:	4393      	bics	r3, r2
 800af7a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af7c:	683a      	ldr	r2, [r7, #0]
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	4313      	orrs	r3, r2
 800af82:	2207      	movs	r2, #7
 800af84:	4313      	orrs	r3, r2
 800af86:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	68fa      	ldr	r2, [r7, #12]
 800af8c:	609a      	str	r2, [r3, #8]
}
 800af8e:	46c0      	nop			; (mov r8, r8)
 800af90:	46bd      	mov	sp, r7
 800af92:	b004      	add	sp, #16
 800af94:	bd80      	pop	{r7, pc}
	...

0800af98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b086      	sub	sp, #24
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	607a      	str	r2, [r7, #4]
 800afa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	689b      	ldr	r3, [r3, #8]
 800afaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	4a09      	ldr	r2, [pc, #36]	; (800afd4 <TIM_ETR_SetConfig+0x3c>)
 800afb0:	4013      	ands	r3, r2
 800afb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	021a      	lsls	r2, r3, #8
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	431a      	orrs	r2, r3
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	4313      	orrs	r3, r2
 800afc0:	697a      	ldr	r2, [r7, #20]
 800afc2:	4313      	orrs	r3, r2
 800afc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	697a      	ldr	r2, [r7, #20]
 800afca:	609a      	str	r2, [r3, #8]
}
 800afcc:	46c0      	nop			; (mov r8, r8)
 800afce:	46bd      	mov	sp, r7
 800afd0:	b006      	add	sp, #24
 800afd2:	bd80      	pop	{r7, pc}
 800afd4:	ffff00ff 	.word	0xffff00ff

0800afd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b086      	sub	sp, #24
 800afdc:	af00      	add	r7, sp, #0
 800afde:	60f8      	str	r0, [r7, #12]
 800afe0:	60b9      	str	r1, [r7, #8]
 800afe2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	221f      	movs	r2, #31
 800afe8:	4013      	ands	r3, r2
 800afea:	2201      	movs	r2, #1
 800afec:	409a      	lsls	r2, r3
 800afee:	0013      	movs	r3, r2
 800aff0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	6a1b      	ldr	r3, [r3, #32]
 800aff6:	697a      	ldr	r2, [r7, #20]
 800aff8:	43d2      	mvns	r2, r2
 800affa:	401a      	ands	r2, r3
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	6a1a      	ldr	r2, [r3, #32]
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	211f      	movs	r1, #31
 800b008:	400b      	ands	r3, r1
 800b00a:	6879      	ldr	r1, [r7, #4]
 800b00c:	4099      	lsls	r1, r3
 800b00e:	000b      	movs	r3, r1
 800b010:	431a      	orrs	r2, r3
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	621a      	str	r2, [r3, #32]
}
 800b016:	46c0      	nop			; (mov r8, r8)
 800b018:	46bd      	mov	sp, r7
 800b01a:	b006      	add	sp, #24
 800b01c:	bd80      	pop	{r7, pc}

0800b01e <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b01e:	b580      	push	{r7, lr}
 800b020:	b084      	sub	sp, #16
 800b022:	af00      	add	r7, sp, #0
 800b024:	6078      	str	r0, [r7, #4]
 800b026:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2238      	movs	r2, #56	; 0x38
 800b02c:	5c9b      	ldrb	r3, [r3, r2]
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d101      	bne.n	800b036 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b032:	2302      	movs	r3, #2
 800b034:	e032      	b.n	800b09c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2238      	movs	r2, #56	; 0x38
 800b03a:	2101      	movs	r1, #1
 800b03c:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2239      	movs	r2, #57	; 0x39
 800b042:	2102      	movs	r1, #2
 800b044:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	689b      	ldr	r3, [r3, #8]
 800b054:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2270      	movs	r2, #112	; 0x70
 800b05a:	4393      	bics	r3, r2
 800b05c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	68fa      	ldr	r2, [r7, #12]
 800b064:	4313      	orrs	r3, r2
 800b066:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	2280      	movs	r2, #128	; 0x80
 800b06c:	4393      	bics	r3, r2
 800b06e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	68ba      	ldr	r2, [r7, #8]
 800b076:	4313      	orrs	r3, r2
 800b078:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	68fa      	ldr	r2, [r7, #12]
 800b080:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	68ba      	ldr	r2, [r7, #8]
 800b088:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2239      	movs	r2, #57	; 0x39
 800b08e:	2101      	movs	r1, #1
 800b090:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2238      	movs	r2, #56	; 0x38
 800b096:	2100      	movs	r1, #0
 800b098:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b09a:	2300      	movs	r3, #0
}
 800b09c:	0018      	movs	r0, r3
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	b004      	add	sp, #16
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b082      	sub	sp, #8
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2238      	movs	r2, #56	; 0x38
 800b0b2:	5c9b      	ldrb	r3, [r3, r2]
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	d101      	bne.n	800b0bc <HAL_TIMEx_RemapConfig+0x18>
 800b0b8:	2302      	movs	r3, #2
 800b0ba:	e00c      	b.n	800b0d6 <HAL_TIMEx_RemapConfig+0x32>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2238      	movs	r2, #56	; 0x38
 800b0c0:	2101      	movs	r1, #1
 800b0c2:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	683a      	ldr	r2, [r7, #0]
 800b0ca:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2238      	movs	r2, #56	; 0x38
 800b0d0:	2100      	movs	r1, #0
 800b0d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b0d4:	2300      	movs	r3, #0
}
 800b0d6:	0018      	movs	r0, r3
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	b002      	add	sp, #8
 800b0dc:	bd80      	pop	{r7, pc}
	...

0800b0e0 <calloc>:
 800b0e0:	b510      	push	{r4, lr}
 800b0e2:	4b03      	ldr	r3, [pc, #12]	; (800b0f0 <calloc+0x10>)
 800b0e4:	000a      	movs	r2, r1
 800b0e6:	0001      	movs	r1, r0
 800b0e8:	6818      	ldr	r0, [r3, #0]
 800b0ea:	f000 f83e 	bl	800b16a <_calloc_r>
 800b0ee:	bd10      	pop	{r4, pc}
 800b0f0:	2000006c 	.word	0x2000006c

0800b0f4 <__errno>:
 800b0f4:	4b01      	ldr	r3, [pc, #4]	; (800b0fc <__errno+0x8>)
 800b0f6:	6818      	ldr	r0, [r3, #0]
 800b0f8:	4770      	bx	lr
 800b0fa:	46c0      	nop			; (mov r8, r8)
 800b0fc:	2000006c 	.word	0x2000006c

0800b100 <__libc_init_array>:
 800b100:	b570      	push	{r4, r5, r6, lr}
 800b102:	2600      	movs	r6, #0
 800b104:	4d0c      	ldr	r5, [pc, #48]	; (800b138 <__libc_init_array+0x38>)
 800b106:	4c0d      	ldr	r4, [pc, #52]	; (800b13c <__libc_init_array+0x3c>)
 800b108:	1b64      	subs	r4, r4, r5
 800b10a:	10a4      	asrs	r4, r4, #2
 800b10c:	42a6      	cmp	r6, r4
 800b10e:	d109      	bne.n	800b124 <__libc_init_array+0x24>
 800b110:	2600      	movs	r6, #0
 800b112:	f000 fc37 	bl	800b984 <_init>
 800b116:	4d0a      	ldr	r5, [pc, #40]	; (800b140 <__libc_init_array+0x40>)
 800b118:	4c0a      	ldr	r4, [pc, #40]	; (800b144 <__libc_init_array+0x44>)
 800b11a:	1b64      	subs	r4, r4, r5
 800b11c:	10a4      	asrs	r4, r4, #2
 800b11e:	42a6      	cmp	r6, r4
 800b120:	d105      	bne.n	800b12e <__libc_init_array+0x2e>
 800b122:	bd70      	pop	{r4, r5, r6, pc}
 800b124:	00b3      	lsls	r3, r6, #2
 800b126:	58eb      	ldr	r3, [r5, r3]
 800b128:	4798      	blx	r3
 800b12a:	3601      	adds	r6, #1
 800b12c:	e7ee      	b.n	800b10c <__libc_init_array+0xc>
 800b12e:	00b3      	lsls	r3, r6, #2
 800b130:	58eb      	ldr	r3, [r5, r3]
 800b132:	4798      	blx	r3
 800b134:	3601      	adds	r6, #1
 800b136:	e7f2      	b.n	800b11e <__libc_init_array+0x1e>
 800b138:	0800c5fc 	.word	0x0800c5fc
 800b13c:	0800c5fc 	.word	0x0800c5fc
 800b140:	0800c5fc 	.word	0x0800c5fc
 800b144:	0800c600 	.word	0x0800c600

0800b148 <memcpy>:
 800b148:	2300      	movs	r3, #0
 800b14a:	b510      	push	{r4, lr}
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d100      	bne.n	800b152 <memcpy+0xa>
 800b150:	bd10      	pop	{r4, pc}
 800b152:	5ccc      	ldrb	r4, [r1, r3]
 800b154:	54c4      	strb	r4, [r0, r3]
 800b156:	3301      	adds	r3, #1
 800b158:	e7f8      	b.n	800b14c <memcpy+0x4>

0800b15a <memset>:
 800b15a:	0003      	movs	r3, r0
 800b15c:	1812      	adds	r2, r2, r0
 800b15e:	4293      	cmp	r3, r2
 800b160:	d100      	bne.n	800b164 <memset+0xa>
 800b162:	4770      	bx	lr
 800b164:	7019      	strb	r1, [r3, #0]
 800b166:	3301      	adds	r3, #1
 800b168:	e7f9      	b.n	800b15e <memset+0x4>

0800b16a <_calloc_r>:
 800b16a:	434a      	muls	r2, r1
 800b16c:	b570      	push	{r4, r5, r6, lr}
 800b16e:	0011      	movs	r1, r2
 800b170:	0014      	movs	r4, r2
 800b172:	f000 f809 	bl	800b188 <_malloc_r>
 800b176:	1e05      	subs	r5, r0, #0
 800b178:	d003      	beq.n	800b182 <_calloc_r+0x18>
 800b17a:	0022      	movs	r2, r4
 800b17c:	2100      	movs	r1, #0
 800b17e:	f7ff ffec 	bl	800b15a <memset>
 800b182:	0028      	movs	r0, r5
 800b184:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b188 <_malloc_r>:
 800b188:	2303      	movs	r3, #3
 800b18a:	b570      	push	{r4, r5, r6, lr}
 800b18c:	1ccd      	adds	r5, r1, #3
 800b18e:	439d      	bics	r5, r3
 800b190:	3508      	adds	r5, #8
 800b192:	0006      	movs	r6, r0
 800b194:	2d0c      	cmp	r5, #12
 800b196:	d21e      	bcs.n	800b1d6 <_malloc_r+0x4e>
 800b198:	250c      	movs	r5, #12
 800b19a:	42a9      	cmp	r1, r5
 800b19c:	d81d      	bhi.n	800b1da <_malloc_r+0x52>
 800b19e:	0030      	movs	r0, r6
 800b1a0:	f000 f882 	bl	800b2a8 <__malloc_lock>
 800b1a4:	4a25      	ldr	r2, [pc, #148]	; (800b23c <_malloc_r+0xb4>)
 800b1a6:	6814      	ldr	r4, [r2, #0]
 800b1a8:	0021      	movs	r1, r4
 800b1aa:	2900      	cmp	r1, #0
 800b1ac:	d119      	bne.n	800b1e2 <_malloc_r+0x5a>
 800b1ae:	4c24      	ldr	r4, [pc, #144]	; (800b240 <_malloc_r+0xb8>)
 800b1b0:	6823      	ldr	r3, [r4, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d103      	bne.n	800b1be <_malloc_r+0x36>
 800b1b6:	0030      	movs	r0, r6
 800b1b8:	f000 f844 	bl	800b244 <_sbrk_r>
 800b1bc:	6020      	str	r0, [r4, #0]
 800b1be:	0029      	movs	r1, r5
 800b1c0:	0030      	movs	r0, r6
 800b1c2:	f000 f83f 	bl	800b244 <_sbrk_r>
 800b1c6:	1c43      	adds	r3, r0, #1
 800b1c8:	d12b      	bne.n	800b222 <_malloc_r+0x9a>
 800b1ca:	230c      	movs	r3, #12
 800b1cc:	0030      	movs	r0, r6
 800b1ce:	6033      	str	r3, [r6, #0]
 800b1d0:	f000 f86b 	bl	800b2aa <__malloc_unlock>
 800b1d4:	e003      	b.n	800b1de <_malloc_r+0x56>
 800b1d6:	2d00      	cmp	r5, #0
 800b1d8:	dadf      	bge.n	800b19a <_malloc_r+0x12>
 800b1da:	230c      	movs	r3, #12
 800b1dc:	6033      	str	r3, [r6, #0]
 800b1de:	2000      	movs	r0, #0
 800b1e0:	bd70      	pop	{r4, r5, r6, pc}
 800b1e2:	680b      	ldr	r3, [r1, #0]
 800b1e4:	1b5b      	subs	r3, r3, r5
 800b1e6:	d419      	bmi.n	800b21c <_malloc_r+0x94>
 800b1e8:	2b0b      	cmp	r3, #11
 800b1ea:	d903      	bls.n	800b1f4 <_malloc_r+0x6c>
 800b1ec:	600b      	str	r3, [r1, #0]
 800b1ee:	18cc      	adds	r4, r1, r3
 800b1f0:	6025      	str	r5, [r4, #0]
 800b1f2:	e003      	b.n	800b1fc <_malloc_r+0x74>
 800b1f4:	684b      	ldr	r3, [r1, #4]
 800b1f6:	428c      	cmp	r4, r1
 800b1f8:	d10d      	bne.n	800b216 <_malloc_r+0x8e>
 800b1fa:	6013      	str	r3, [r2, #0]
 800b1fc:	0030      	movs	r0, r6
 800b1fe:	f000 f854 	bl	800b2aa <__malloc_unlock>
 800b202:	0020      	movs	r0, r4
 800b204:	2207      	movs	r2, #7
 800b206:	300b      	adds	r0, #11
 800b208:	1d23      	adds	r3, r4, #4
 800b20a:	4390      	bics	r0, r2
 800b20c:	1ac3      	subs	r3, r0, r3
 800b20e:	d0e7      	beq.n	800b1e0 <_malloc_r+0x58>
 800b210:	425a      	negs	r2, r3
 800b212:	50e2      	str	r2, [r4, r3]
 800b214:	e7e4      	b.n	800b1e0 <_malloc_r+0x58>
 800b216:	6063      	str	r3, [r4, #4]
 800b218:	000c      	movs	r4, r1
 800b21a:	e7ef      	b.n	800b1fc <_malloc_r+0x74>
 800b21c:	000c      	movs	r4, r1
 800b21e:	6849      	ldr	r1, [r1, #4]
 800b220:	e7c3      	b.n	800b1aa <_malloc_r+0x22>
 800b222:	2303      	movs	r3, #3
 800b224:	1cc4      	adds	r4, r0, #3
 800b226:	439c      	bics	r4, r3
 800b228:	42a0      	cmp	r0, r4
 800b22a:	d0e1      	beq.n	800b1f0 <_malloc_r+0x68>
 800b22c:	1a21      	subs	r1, r4, r0
 800b22e:	0030      	movs	r0, r6
 800b230:	f000 f808 	bl	800b244 <_sbrk_r>
 800b234:	1c43      	adds	r3, r0, #1
 800b236:	d1db      	bne.n	800b1f0 <_malloc_r+0x68>
 800b238:	e7c7      	b.n	800b1ca <_malloc_r+0x42>
 800b23a:	46c0      	nop			; (mov r8, r8)
 800b23c:	20000134 	.word	0x20000134
 800b240:	20000138 	.word	0x20000138

0800b244 <_sbrk_r>:
 800b244:	2300      	movs	r3, #0
 800b246:	b570      	push	{r4, r5, r6, lr}
 800b248:	4c06      	ldr	r4, [pc, #24]	; (800b264 <_sbrk_r+0x20>)
 800b24a:	0005      	movs	r5, r0
 800b24c:	0008      	movs	r0, r1
 800b24e:	6023      	str	r3, [r4, #0]
 800b250:	f7f9 fc44 	bl	8004adc <_sbrk>
 800b254:	1c43      	adds	r3, r0, #1
 800b256:	d103      	bne.n	800b260 <_sbrk_r+0x1c>
 800b258:	6823      	ldr	r3, [r4, #0]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d000      	beq.n	800b260 <_sbrk_r+0x1c>
 800b25e:	602b      	str	r3, [r5, #0]
 800b260:	bd70      	pop	{r4, r5, r6, pc}
 800b262:	46c0      	nop			; (mov r8, r8)
 800b264:	200003ac 	.word	0x200003ac

0800b268 <siprintf>:
 800b268:	b40e      	push	{r1, r2, r3}
 800b26a:	b500      	push	{lr}
 800b26c:	490b      	ldr	r1, [pc, #44]	; (800b29c <siprintf+0x34>)
 800b26e:	b09c      	sub	sp, #112	; 0x70
 800b270:	ab1d      	add	r3, sp, #116	; 0x74
 800b272:	9002      	str	r0, [sp, #8]
 800b274:	9006      	str	r0, [sp, #24]
 800b276:	9107      	str	r1, [sp, #28]
 800b278:	9104      	str	r1, [sp, #16]
 800b27a:	4809      	ldr	r0, [pc, #36]	; (800b2a0 <siprintf+0x38>)
 800b27c:	4909      	ldr	r1, [pc, #36]	; (800b2a4 <siprintf+0x3c>)
 800b27e:	cb04      	ldmia	r3!, {r2}
 800b280:	9105      	str	r1, [sp, #20]
 800b282:	6800      	ldr	r0, [r0, #0]
 800b284:	a902      	add	r1, sp, #8
 800b286:	9301      	str	r3, [sp, #4]
 800b288:	f000 f872 	bl	800b370 <_svfiprintf_r>
 800b28c:	2300      	movs	r3, #0
 800b28e:	9a02      	ldr	r2, [sp, #8]
 800b290:	7013      	strb	r3, [r2, #0]
 800b292:	b01c      	add	sp, #112	; 0x70
 800b294:	bc08      	pop	{r3}
 800b296:	b003      	add	sp, #12
 800b298:	4718      	bx	r3
 800b29a:	46c0      	nop			; (mov r8, r8)
 800b29c:	7fffffff 	.word	0x7fffffff
 800b2a0:	2000006c 	.word	0x2000006c
 800b2a4:	ffff0208 	.word	0xffff0208

0800b2a8 <__malloc_lock>:
 800b2a8:	4770      	bx	lr

0800b2aa <__malloc_unlock>:
 800b2aa:	4770      	bx	lr

0800b2ac <__ssputs_r>:
 800b2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2ae:	688e      	ldr	r6, [r1, #8]
 800b2b0:	b085      	sub	sp, #20
 800b2b2:	0007      	movs	r7, r0
 800b2b4:	000c      	movs	r4, r1
 800b2b6:	9203      	str	r2, [sp, #12]
 800b2b8:	9301      	str	r3, [sp, #4]
 800b2ba:	429e      	cmp	r6, r3
 800b2bc:	d83c      	bhi.n	800b338 <__ssputs_r+0x8c>
 800b2be:	2390      	movs	r3, #144	; 0x90
 800b2c0:	898a      	ldrh	r2, [r1, #12]
 800b2c2:	00db      	lsls	r3, r3, #3
 800b2c4:	421a      	tst	r2, r3
 800b2c6:	d034      	beq.n	800b332 <__ssputs_r+0x86>
 800b2c8:	2503      	movs	r5, #3
 800b2ca:	6909      	ldr	r1, [r1, #16]
 800b2cc:	6823      	ldr	r3, [r4, #0]
 800b2ce:	1a5b      	subs	r3, r3, r1
 800b2d0:	9302      	str	r3, [sp, #8]
 800b2d2:	6963      	ldr	r3, [r4, #20]
 800b2d4:	9802      	ldr	r0, [sp, #8]
 800b2d6:	435d      	muls	r5, r3
 800b2d8:	0feb      	lsrs	r3, r5, #31
 800b2da:	195d      	adds	r5, r3, r5
 800b2dc:	9b01      	ldr	r3, [sp, #4]
 800b2de:	106d      	asrs	r5, r5, #1
 800b2e0:	3301      	adds	r3, #1
 800b2e2:	181b      	adds	r3, r3, r0
 800b2e4:	42ab      	cmp	r3, r5
 800b2e6:	d900      	bls.n	800b2ea <__ssputs_r+0x3e>
 800b2e8:	001d      	movs	r5, r3
 800b2ea:	0553      	lsls	r3, r2, #21
 800b2ec:	d532      	bpl.n	800b354 <__ssputs_r+0xa8>
 800b2ee:	0029      	movs	r1, r5
 800b2f0:	0038      	movs	r0, r7
 800b2f2:	f7ff ff49 	bl	800b188 <_malloc_r>
 800b2f6:	1e06      	subs	r6, r0, #0
 800b2f8:	d109      	bne.n	800b30e <__ssputs_r+0x62>
 800b2fa:	230c      	movs	r3, #12
 800b2fc:	603b      	str	r3, [r7, #0]
 800b2fe:	2340      	movs	r3, #64	; 0x40
 800b300:	2001      	movs	r0, #1
 800b302:	89a2      	ldrh	r2, [r4, #12]
 800b304:	4240      	negs	r0, r0
 800b306:	4313      	orrs	r3, r2
 800b308:	81a3      	strh	r3, [r4, #12]
 800b30a:	b005      	add	sp, #20
 800b30c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b30e:	9a02      	ldr	r2, [sp, #8]
 800b310:	6921      	ldr	r1, [r4, #16]
 800b312:	f7ff ff19 	bl	800b148 <memcpy>
 800b316:	89a3      	ldrh	r3, [r4, #12]
 800b318:	4a14      	ldr	r2, [pc, #80]	; (800b36c <__ssputs_r+0xc0>)
 800b31a:	401a      	ands	r2, r3
 800b31c:	2380      	movs	r3, #128	; 0x80
 800b31e:	4313      	orrs	r3, r2
 800b320:	81a3      	strh	r3, [r4, #12]
 800b322:	9b02      	ldr	r3, [sp, #8]
 800b324:	6126      	str	r6, [r4, #16]
 800b326:	18f6      	adds	r6, r6, r3
 800b328:	6026      	str	r6, [r4, #0]
 800b32a:	6165      	str	r5, [r4, #20]
 800b32c:	9e01      	ldr	r6, [sp, #4]
 800b32e:	1aed      	subs	r5, r5, r3
 800b330:	60a5      	str	r5, [r4, #8]
 800b332:	9b01      	ldr	r3, [sp, #4]
 800b334:	429e      	cmp	r6, r3
 800b336:	d900      	bls.n	800b33a <__ssputs_r+0x8e>
 800b338:	9e01      	ldr	r6, [sp, #4]
 800b33a:	0032      	movs	r2, r6
 800b33c:	9903      	ldr	r1, [sp, #12]
 800b33e:	6820      	ldr	r0, [r4, #0]
 800b340:	f000 fa95 	bl	800b86e <memmove>
 800b344:	68a3      	ldr	r3, [r4, #8]
 800b346:	2000      	movs	r0, #0
 800b348:	1b9b      	subs	r3, r3, r6
 800b34a:	60a3      	str	r3, [r4, #8]
 800b34c:	6823      	ldr	r3, [r4, #0]
 800b34e:	199e      	adds	r6, r3, r6
 800b350:	6026      	str	r6, [r4, #0]
 800b352:	e7da      	b.n	800b30a <__ssputs_r+0x5e>
 800b354:	002a      	movs	r2, r5
 800b356:	0038      	movs	r0, r7
 800b358:	f000 fae6 	bl	800b928 <_realloc_r>
 800b35c:	1e06      	subs	r6, r0, #0
 800b35e:	d1e0      	bne.n	800b322 <__ssputs_r+0x76>
 800b360:	6921      	ldr	r1, [r4, #16]
 800b362:	0038      	movs	r0, r7
 800b364:	f000 fa96 	bl	800b894 <_free_r>
 800b368:	e7c7      	b.n	800b2fa <__ssputs_r+0x4e>
 800b36a:	46c0      	nop			; (mov r8, r8)
 800b36c:	fffffb7f 	.word	0xfffffb7f

0800b370 <_svfiprintf_r>:
 800b370:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b372:	b0a1      	sub	sp, #132	; 0x84
 800b374:	9003      	str	r0, [sp, #12]
 800b376:	001d      	movs	r5, r3
 800b378:	898b      	ldrh	r3, [r1, #12]
 800b37a:	000f      	movs	r7, r1
 800b37c:	0016      	movs	r6, r2
 800b37e:	061b      	lsls	r3, r3, #24
 800b380:	d511      	bpl.n	800b3a6 <_svfiprintf_r+0x36>
 800b382:	690b      	ldr	r3, [r1, #16]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d10e      	bne.n	800b3a6 <_svfiprintf_r+0x36>
 800b388:	2140      	movs	r1, #64	; 0x40
 800b38a:	f7ff fefd 	bl	800b188 <_malloc_r>
 800b38e:	6038      	str	r0, [r7, #0]
 800b390:	6138      	str	r0, [r7, #16]
 800b392:	2800      	cmp	r0, #0
 800b394:	d105      	bne.n	800b3a2 <_svfiprintf_r+0x32>
 800b396:	230c      	movs	r3, #12
 800b398:	9a03      	ldr	r2, [sp, #12]
 800b39a:	3801      	subs	r0, #1
 800b39c:	6013      	str	r3, [r2, #0]
 800b39e:	b021      	add	sp, #132	; 0x84
 800b3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3a2:	2340      	movs	r3, #64	; 0x40
 800b3a4:	617b      	str	r3, [r7, #20]
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	ac08      	add	r4, sp, #32
 800b3aa:	6163      	str	r3, [r4, #20]
 800b3ac:	3320      	adds	r3, #32
 800b3ae:	7663      	strb	r3, [r4, #25]
 800b3b0:	3310      	adds	r3, #16
 800b3b2:	76a3      	strb	r3, [r4, #26]
 800b3b4:	9507      	str	r5, [sp, #28]
 800b3b6:	0035      	movs	r5, r6
 800b3b8:	782b      	ldrb	r3, [r5, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d001      	beq.n	800b3c2 <_svfiprintf_r+0x52>
 800b3be:	2b25      	cmp	r3, #37	; 0x25
 800b3c0:	d146      	bne.n	800b450 <_svfiprintf_r+0xe0>
 800b3c2:	1bab      	subs	r3, r5, r6
 800b3c4:	9305      	str	r3, [sp, #20]
 800b3c6:	d00c      	beq.n	800b3e2 <_svfiprintf_r+0x72>
 800b3c8:	0032      	movs	r2, r6
 800b3ca:	0039      	movs	r1, r7
 800b3cc:	9803      	ldr	r0, [sp, #12]
 800b3ce:	f7ff ff6d 	bl	800b2ac <__ssputs_r>
 800b3d2:	1c43      	adds	r3, r0, #1
 800b3d4:	d100      	bne.n	800b3d8 <_svfiprintf_r+0x68>
 800b3d6:	e0ae      	b.n	800b536 <_svfiprintf_r+0x1c6>
 800b3d8:	6962      	ldr	r2, [r4, #20]
 800b3da:	9b05      	ldr	r3, [sp, #20]
 800b3dc:	4694      	mov	ip, r2
 800b3de:	4463      	add	r3, ip
 800b3e0:	6163      	str	r3, [r4, #20]
 800b3e2:	782b      	ldrb	r3, [r5, #0]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d100      	bne.n	800b3ea <_svfiprintf_r+0x7a>
 800b3e8:	e0a5      	b.n	800b536 <_svfiprintf_r+0x1c6>
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	4252      	negs	r2, r2
 800b3f0:	6062      	str	r2, [r4, #4]
 800b3f2:	a904      	add	r1, sp, #16
 800b3f4:	3254      	adds	r2, #84	; 0x54
 800b3f6:	1852      	adds	r2, r2, r1
 800b3f8:	1c6e      	adds	r6, r5, #1
 800b3fa:	6023      	str	r3, [r4, #0]
 800b3fc:	60e3      	str	r3, [r4, #12]
 800b3fe:	60a3      	str	r3, [r4, #8]
 800b400:	7013      	strb	r3, [r2, #0]
 800b402:	65a3      	str	r3, [r4, #88]	; 0x58
 800b404:	7831      	ldrb	r1, [r6, #0]
 800b406:	2205      	movs	r2, #5
 800b408:	4853      	ldr	r0, [pc, #332]	; (800b558 <_svfiprintf_r+0x1e8>)
 800b40a:	f000 fa25 	bl	800b858 <memchr>
 800b40e:	1c75      	adds	r5, r6, #1
 800b410:	2800      	cmp	r0, #0
 800b412:	d11f      	bne.n	800b454 <_svfiprintf_r+0xe4>
 800b414:	6822      	ldr	r2, [r4, #0]
 800b416:	06d3      	lsls	r3, r2, #27
 800b418:	d504      	bpl.n	800b424 <_svfiprintf_r+0xb4>
 800b41a:	2353      	movs	r3, #83	; 0x53
 800b41c:	a904      	add	r1, sp, #16
 800b41e:	185b      	adds	r3, r3, r1
 800b420:	2120      	movs	r1, #32
 800b422:	7019      	strb	r1, [r3, #0]
 800b424:	0713      	lsls	r3, r2, #28
 800b426:	d504      	bpl.n	800b432 <_svfiprintf_r+0xc2>
 800b428:	2353      	movs	r3, #83	; 0x53
 800b42a:	a904      	add	r1, sp, #16
 800b42c:	185b      	adds	r3, r3, r1
 800b42e:	212b      	movs	r1, #43	; 0x2b
 800b430:	7019      	strb	r1, [r3, #0]
 800b432:	7833      	ldrb	r3, [r6, #0]
 800b434:	2b2a      	cmp	r3, #42	; 0x2a
 800b436:	d016      	beq.n	800b466 <_svfiprintf_r+0xf6>
 800b438:	0035      	movs	r5, r6
 800b43a:	2100      	movs	r1, #0
 800b43c:	200a      	movs	r0, #10
 800b43e:	68e3      	ldr	r3, [r4, #12]
 800b440:	782a      	ldrb	r2, [r5, #0]
 800b442:	1c6e      	adds	r6, r5, #1
 800b444:	3a30      	subs	r2, #48	; 0x30
 800b446:	2a09      	cmp	r2, #9
 800b448:	d94e      	bls.n	800b4e8 <_svfiprintf_r+0x178>
 800b44a:	2900      	cmp	r1, #0
 800b44c:	d018      	beq.n	800b480 <_svfiprintf_r+0x110>
 800b44e:	e010      	b.n	800b472 <_svfiprintf_r+0x102>
 800b450:	3501      	adds	r5, #1
 800b452:	e7b1      	b.n	800b3b8 <_svfiprintf_r+0x48>
 800b454:	4b40      	ldr	r3, [pc, #256]	; (800b558 <_svfiprintf_r+0x1e8>)
 800b456:	6822      	ldr	r2, [r4, #0]
 800b458:	1ac0      	subs	r0, r0, r3
 800b45a:	2301      	movs	r3, #1
 800b45c:	4083      	lsls	r3, r0
 800b45e:	4313      	orrs	r3, r2
 800b460:	6023      	str	r3, [r4, #0]
 800b462:	002e      	movs	r6, r5
 800b464:	e7ce      	b.n	800b404 <_svfiprintf_r+0x94>
 800b466:	9b07      	ldr	r3, [sp, #28]
 800b468:	1d19      	adds	r1, r3, #4
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	9107      	str	r1, [sp, #28]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	db01      	blt.n	800b476 <_svfiprintf_r+0x106>
 800b472:	930b      	str	r3, [sp, #44]	; 0x2c
 800b474:	e004      	b.n	800b480 <_svfiprintf_r+0x110>
 800b476:	425b      	negs	r3, r3
 800b478:	60e3      	str	r3, [r4, #12]
 800b47a:	2302      	movs	r3, #2
 800b47c:	4313      	orrs	r3, r2
 800b47e:	6023      	str	r3, [r4, #0]
 800b480:	782b      	ldrb	r3, [r5, #0]
 800b482:	2b2e      	cmp	r3, #46	; 0x2e
 800b484:	d10a      	bne.n	800b49c <_svfiprintf_r+0x12c>
 800b486:	786b      	ldrb	r3, [r5, #1]
 800b488:	2b2a      	cmp	r3, #42	; 0x2a
 800b48a:	d135      	bne.n	800b4f8 <_svfiprintf_r+0x188>
 800b48c:	9b07      	ldr	r3, [sp, #28]
 800b48e:	3502      	adds	r5, #2
 800b490:	1d1a      	adds	r2, r3, #4
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	9207      	str	r2, [sp, #28]
 800b496:	2b00      	cmp	r3, #0
 800b498:	db2b      	blt.n	800b4f2 <_svfiprintf_r+0x182>
 800b49a:	9309      	str	r3, [sp, #36]	; 0x24
 800b49c:	4e2f      	ldr	r6, [pc, #188]	; (800b55c <_svfiprintf_r+0x1ec>)
 800b49e:	7829      	ldrb	r1, [r5, #0]
 800b4a0:	2203      	movs	r2, #3
 800b4a2:	0030      	movs	r0, r6
 800b4a4:	f000 f9d8 	bl	800b858 <memchr>
 800b4a8:	2800      	cmp	r0, #0
 800b4aa:	d006      	beq.n	800b4ba <_svfiprintf_r+0x14a>
 800b4ac:	2340      	movs	r3, #64	; 0x40
 800b4ae:	1b80      	subs	r0, r0, r6
 800b4b0:	4083      	lsls	r3, r0
 800b4b2:	6822      	ldr	r2, [r4, #0]
 800b4b4:	3501      	adds	r5, #1
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	6023      	str	r3, [r4, #0]
 800b4ba:	7829      	ldrb	r1, [r5, #0]
 800b4bc:	2206      	movs	r2, #6
 800b4be:	4828      	ldr	r0, [pc, #160]	; (800b560 <_svfiprintf_r+0x1f0>)
 800b4c0:	1c6e      	adds	r6, r5, #1
 800b4c2:	7621      	strb	r1, [r4, #24]
 800b4c4:	f000 f9c8 	bl	800b858 <memchr>
 800b4c8:	2800      	cmp	r0, #0
 800b4ca:	d03c      	beq.n	800b546 <_svfiprintf_r+0x1d6>
 800b4cc:	4b25      	ldr	r3, [pc, #148]	; (800b564 <_svfiprintf_r+0x1f4>)
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d125      	bne.n	800b51e <_svfiprintf_r+0x1ae>
 800b4d2:	2207      	movs	r2, #7
 800b4d4:	9b07      	ldr	r3, [sp, #28]
 800b4d6:	3307      	adds	r3, #7
 800b4d8:	4393      	bics	r3, r2
 800b4da:	3308      	adds	r3, #8
 800b4dc:	9307      	str	r3, [sp, #28]
 800b4de:	6963      	ldr	r3, [r4, #20]
 800b4e0:	9a04      	ldr	r2, [sp, #16]
 800b4e2:	189b      	adds	r3, r3, r2
 800b4e4:	6163      	str	r3, [r4, #20]
 800b4e6:	e766      	b.n	800b3b6 <_svfiprintf_r+0x46>
 800b4e8:	4343      	muls	r3, r0
 800b4ea:	2101      	movs	r1, #1
 800b4ec:	189b      	adds	r3, r3, r2
 800b4ee:	0035      	movs	r5, r6
 800b4f0:	e7a6      	b.n	800b440 <_svfiprintf_r+0xd0>
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	425b      	negs	r3, r3
 800b4f6:	e7d0      	b.n	800b49a <_svfiprintf_r+0x12a>
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	200a      	movs	r0, #10
 800b4fc:	001a      	movs	r2, r3
 800b4fe:	3501      	adds	r5, #1
 800b500:	6063      	str	r3, [r4, #4]
 800b502:	7829      	ldrb	r1, [r5, #0]
 800b504:	1c6e      	adds	r6, r5, #1
 800b506:	3930      	subs	r1, #48	; 0x30
 800b508:	2909      	cmp	r1, #9
 800b50a:	d903      	bls.n	800b514 <_svfiprintf_r+0x1a4>
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d0c5      	beq.n	800b49c <_svfiprintf_r+0x12c>
 800b510:	9209      	str	r2, [sp, #36]	; 0x24
 800b512:	e7c3      	b.n	800b49c <_svfiprintf_r+0x12c>
 800b514:	4342      	muls	r2, r0
 800b516:	2301      	movs	r3, #1
 800b518:	1852      	adds	r2, r2, r1
 800b51a:	0035      	movs	r5, r6
 800b51c:	e7f1      	b.n	800b502 <_svfiprintf_r+0x192>
 800b51e:	ab07      	add	r3, sp, #28
 800b520:	9300      	str	r3, [sp, #0]
 800b522:	003a      	movs	r2, r7
 800b524:	4b10      	ldr	r3, [pc, #64]	; (800b568 <_svfiprintf_r+0x1f8>)
 800b526:	0021      	movs	r1, r4
 800b528:	9803      	ldr	r0, [sp, #12]
 800b52a:	e000      	b.n	800b52e <_svfiprintf_r+0x1be>
 800b52c:	bf00      	nop
 800b52e:	9004      	str	r0, [sp, #16]
 800b530:	9b04      	ldr	r3, [sp, #16]
 800b532:	3301      	adds	r3, #1
 800b534:	d1d3      	bne.n	800b4de <_svfiprintf_r+0x16e>
 800b536:	89bb      	ldrh	r3, [r7, #12]
 800b538:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b53a:	065b      	lsls	r3, r3, #25
 800b53c:	d400      	bmi.n	800b540 <_svfiprintf_r+0x1d0>
 800b53e:	e72e      	b.n	800b39e <_svfiprintf_r+0x2e>
 800b540:	2001      	movs	r0, #1
 800b542:	4240      	negs	r0, r0
 800b544:	e72b      	b.n	800b39e <_svfiprintf_r+0x2e>
 800b546:	ab07      	add	r3, sp, #28
 800b548:	9300      	str	r3, [sp, #0]
 800b54a:	003a      	movs	r2, r7
 800b54c:	4b06      	ldr	r3, [pc, #24]	; (800b568 <_svfiprintf_r+0x1f8>)
 800b54e:	0021      	movs	r1, r4
 800b550:	9803      	ldr	r0, [sp, #12]
 800b552:	f000 f879 	bl	800b648 <_printf_i>
 800b556:	e7ea      	b.n	800b52e <_svfiprintf_r+0x1be>
 800b558:	0800c5c8 	.word	0x0800c5c8
 800b55c:	0800c5ce 	.word	0x0800c5ce
 800b560:	0800c5d2 	.word	0x0800c5d2
 800b564:	00000000 	.word	0x00000000
 800b568:	0800b2ad 	.word	0x0800b2ad

0800b56c <_printf_common>:
 800b56c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b56e:	0015      	movs	r5, r2
 800b570:	9301      	str	r3, [sp, #4]
 800b572:	688a      	ldr	r2, [r1, #8]
 800b574:	690b      	ldr	r3, [r1, #16]
 800b576:	9000      	str	r0, [sp, #0]
 800b578:	000c      	movs	r4, r1
 800b57a:	4293      	cmp	r3, r2
 800b57c:	da00      	bge.n	800b580 <_printf_common+0x14>
 800b57e:	0013      	movs	r3, r2
 800b580:	0022      	movs	r2, r4
 800b582:	602b      	str	r3, [r5, #0]
 800b584:	3243      	adds	r2, #67	; 0x43
 800b586:	7812      	ldrb	r2, [r2, #0]
 800b588:	2a00      	cmp	r2, #0
 800b58a:	d001      	beq.n	800b590 <_printf_common+0x24>
 800b58c:	3301      	adds	r3, #1
 800b58e:	602b      	str	r3, [r5, #0]
 800b590:	6823      	ldr	r3, [r4, #0]
 800b592:	069b      	lsls	r3, r3, #26
 800b594:	d502      	bpl.n	800b59c <_printf_common+0x30>
 800b596:	682b      	ldr	r3, [r5, #0]
 800b598:	3302      	adds	r3, #2
 800b59a:	602b      	str	r3, [r5, #0]
 800b59c:	2706      	movs	r7, #6
 800b59e:	6823      	ldr	r3, [r4, #0]
 800b5a0:	401f      	ands	r7, r3
 800b5a2:	d027      	beq.n	800b5f4 <_printf_common+0x88>
 800b5a4:	0023      	movs	r3, r4
 800b5a6:	3343      	adds	r3, #67	; 0x43
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	1e5a      	subs	r2, r3, #1
 800b5ac:	4193      	sbcs	r3, r2
 800b5ae:	6822      	ldr	r2, [r4, #0]
 800b5b0:	0692      	lsls	r2, r2, #26
 800b5b2:	d430      	bmi.n	800b616 <_printf_common+0xaa>
 800b5b4:	0022      	movs	r2, r4
 800b5b6:	9901      	ldr	r1, [sp, #4]
 800b5b8:	3243      	adds	r2, #67	; 0x43
 800b5ba:	9800      	ldr	r0, [sp, #0]
 800b5bc:	9e08      	ldr	r6, [sp, #32]
 800b5be:	47b0      	blx	r6
 800b5c0:	1c43      	adds	r3, r0, #1
 800b5c2:	d025      	beq.n	800b610 <_printf_common+0xa4>
 800b5c4:	2306      	movs	r3, #6
 800b5c6:	6820      	ldr	r0, [r4, #0]
 800b5c8:	682a      	ldr	r2, [r5, #0]
 800b5ca:	68e1      	ldr	r1, [r4, #12]
 800b5cc:	4003      	ands	r3, r0
 800b5ce:	2500      	movs	r5, #0
 800b5d0:	2b04      	cmp	r3, #4
 800b5d2:	d103      	bne.n	800b5dc <_printf_common+0x70>
 800b5d4:	1a8d      	subs	r5, r1, r2
 800b5d6:	43eb      	mvns	r3, r5
 800b5d8:	17db      	asrs	r3, r3, #31
 800b5da:	401d      	ands	r5, r3
 800b5dc:	68a3      	ldr	r3, [r4, #8]
 800b5de:	6922      	ldr	r2, [r4, #16]
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	dd01      	ble.n	800b5e8 <_printf_common+0x7c>
 800b5e4:	1a9b      	subs	r3, r3, r2
 800b5e6:	18ed      	adds	r5, r5, r3
 800b5e8:	2700      	movs	r7, #0
 800b5ea:	42bd      	cmp	r5, r7
 800b5ec:	d120      	bne.n	800b630 <_printf_common+0xc4>
 800b5ee:	2000      	movs	r0, #0
 800b5f0:	e010      	b.n	800b614 <_printf_common+0xa8>
 800b5f2:	3701      	adds	r7, #1
 800b5f4:	68e3      	ldr	r3, [r4, #12]
 800b5f6:	682a      	ldr	r2, [r5, #0]
 800b5f8:	1a9b      	subs	r3, r3, r2
 800b5fa:	42bb      	cmp	r3, r7
 800b5fc:	ddd2      	ble.n	800b5a4 <_printf_common+0x38>
 800b5fe:	0022      	movs	r2, r4
 800b600:	2301      	movs	r3, #1
 800b602:	3219      	adds	r2, #25
 800b604:	9901      	ldr	r1, [sp, #4]
 800b606:	9800      	ldr	r0, [sp, #0]
 800b608:	9e08      	ldr	r6, [sp, #32]
 800b60a:	47b0      	blx	r6
 800b60c:	1c43      	adds	r3, r0, #1
 800b60e:	d1f0      	bne.n	800b5f2 <_printf_common+0x86>
 800b610:	2001      	movs	r0, #1
 800b612:	4240      	negs	r0, r0
 800b614:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b616:	2030      	movs	r0, #48	; 0x30
 800b618:	18e1      	adds	r1, r4, r3
 800b61a:	3143      	adds	r1, #67	; 0x43
 800b61c:	7008      	strb	r0, [r1, #0]
 800b61e:	0021      	movs	r1, r4
 800b620:	1c5a      	adds	r2, r3, #1
 800b622:	3145      	adds	r1, #69	; 0x45
 800b624:	7809      	ldrb	r1, [r1, #0]
 800b626:	18a2      	adds	r2, r4, r2
 800b628:	3243      	adds	r2, #67	; 0x43
 800b62a:	3302      	adds	r3, #2
 800b62c:	7011      	strb	r1, [r2, #0]
 800b62e:	e7c1      	b.n	800b5b4 <_printf_common+0x48>
 800b630:	0022      	movs	r2, r4
 800b632:	2301      	movs	r3, #1
 800b634:	321a      	adds	r2, #26
 800b636:	9901      	ldr	r1, [sp, #4]
 800b638:	9800      	ldr	r0, [sp, #0]
 800b63a:	9e08      	ldr	r6, [sp, #32]
 800b63c:	47b0      	blx	r6
 800b63e:	1c43      	adds	r3, r0, #1
 800b640:	d0e6      	beq.n	800b610 <_printf_common+0xa4>
 800b642:	3701      	adds	r7, #1
 800b644:	e7d1      	b.n	800b5ea <_printf_common+0x7e>
	...

0800b648 <_printf_i>:
 800b648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b64a:	b089      	sub	sp, #36	; 0x24
 800b64c:	9204      	str	r2, [sp, #16]
 800b64e:	000a      	movs	r2, r1
 800b650:	3243      	adds	r2, #67	; 0x43
 800b652:	9305      	str	r3, [sp, #20]
 800b654:	9003      	str	r0, [sp, #12]
 800b656:	9202      	str	r2, [sp, #8]
 800b658:	7e0a      	ldrb	r2, [r1, #24]
 800b65a:	000c      	movs	r4, r1
 800b65c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b65e:	2a6e      	cmp	r2, #110	; 0x6e
 800b660:	d100      	bne.n	800b664 <_printf_i+0x1c>
 800b662:	e086      	b.n	800b772 <_printf_i+0x12a>
 800b664:	d81f      	bhi.n	800b6a6 <_printf_i+0x5e>
 800b666:	2a63      	cmp	r2, #99	; 0x63
 800b668:	d033      	beq.n	800b6d2 <_printf_i+0x8a>
 800b66a:	d808      	bhi.n	800b67e <_printf_i+0x36>
 800b66c:	2a00      	cmp	r2, #0
 800b66e:	d100      	bne.n	800b672 <_printf_i+0x2a>
 800b670:	e08c      	b.n	800b78c <_printf_i+0x144>
 800b672:	2a58      	cmp	r2, #88	; 0x58
 800b674:	d04d      	beq.n	800b712 <_printf_i+0xca>
 800b676:	0025      	movs	r5, r4
 800b678:	3542      	adds	r5, #66	; 0x42
 800b67a:	702a      	strb	r2, [r5, #0]
 800b67c:	e030      	b.n	800b6e0 <_printf_i+0x98>
 800b67e:	2a64      	cmp	r2, #100	; 0x64
 800b680:	d001      	beq.n	800b686 <_printf_i+0x3e>
 800b682:	2a69      	cmp	r2, #105	; 0x69
 800b684:	d1f7      	bne.n	800b676 <_printf_i+0x2e>
 800b686:	6819      	ldr	r1, [r3, #0]
 800b688:	6825      	ldr	r5, [r4, #0]
 800b68a:	1d0a      	adds	r2, r1, #4
 800b68c:	0628      	lsls	r0, r5, #24
 800b68e:	d529      	bpl.n	800b6e4 <_printf_i+0x9c>
 800b690:	6808      	ldr	r0, [r1, #0]
 800b692:	601a      	str	r2, [r3, #0]
 800b694:	2800      	cmp	r0, #0
 800b696:	da03      	bge.n	800b6a0 <_printf_i+0x58>
 800b698:	232d      	movs	r3, #45	; 0x2d
 800b69a:	9a02      	ldr	r2, [sp, #8]
 800b69c:	4240      	negs	r0, r0
 800b69e:	7013      	strb	r3, [r2, #0]
 800b6a0:	4e6b      	ldr	r6, [pc, #428]	; (800b850 <_printf_i+0x208>)
 800b6a2:	270a      	movs	r7, #10
 800b6a4:	e04f      	b.n	800b746 <_printf_i+0xfe>
 800b6a6:	2a73      	cmp	r2, #115	; 0x73
 800b6a8:	d074      	beq.n	800b794 <_printf_i+0x14c>
 800b6aa:	d808      	bhi.n	800b6be <_printf_i+0x76>
 800b6ac:	2a6f      	cmp	r2, #111	; 0x6f
 800b6ae:	d01f      	beq.n	800b6f0 <_printf_i+0xa8>
 800b6b0:	2a70      	cmp	r2, #112	; 0x70
 800b6b2:	d1e0      	bne.n	800b676 <_printf_i+0x2e>
 800b6b4:	2220      	movs	r2, #32
 800b6b6:	6809      	ldr	r1, [r1, #0]
 800b6b8:	430a      	orrs	r2, r1
 800b6ba:	6022      	str	r2, [r4, #0]
 800b6bc:	e003      	b.n	800b6c6 <_printf_i+0x7e>
 800b6be:	2a75      	cmp	r2, #117	; 0x75
 800b6c0:	d016      	beq.n	800b6f0 <_printf_i+0xa8>
 800b6c2:	2a78      	cmp	r2, #120	; 0x78
 800b6c4:	d1d7      	bne.n	800b676 <_printf_i+0x2e>
 800b6c6:	0022      	movs	r2, r4
 800b6c8:	2178      	movs	r1, #120	; 0x78
 800b6ca:	3245      	adds	r2, #69	; 0x45
 800b6cc:	7011      	strb	r1, [r2, #0]
 800b6ce:	4e61      	ldr	r6, [pc, #388]	; (800b854 <_printf_i+0x20c>)
 800b6d0:	e022      	b.n	800b718 <_printf_i+0xd0>
 800b6d2:	0025      	movs	r5, r4
 800b6d4:	681a      	ldr	r2, [r3, #0]
 800b6d6:	3542      	adds	r5, #66	; 0x42
 800b6d8:	1d11      	adds	r1, r2, #4
 800b6da:	6019      	str	r1, [r3, #0]
 800b6dc:	6813      	ldr	r3, [r2, #0]
 800b6de:	702b      	strb	r3, [r5, #0]
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	e065      	b.n	800b7b0 <_printf_i+0x168>
 800b6e4:	6808      	ldr	r0, [r1, #0]
 800b6e6:	601a      	str	r2, [r3, #0]
 800b6e8:	0669      	lsls	r1, r5, #25
 800b6ea:	d5d3      	bpl.n	800b694 <_printf_i+0x4c>
 800b6ec:	b200      	sxth	r0, r0
 800b6ee:	e7d1      	b.n	800b694 <_printf_i+0x4c>
 800b6f0:	6819      	ldr	r1, [r3, #0]
 800b6f2:	6825      	ldr	r5, [r4, #0]
 800b6f4:	1d08      	adds	r0, r1, #4
 800b6f6:	6018      	str	r0, [r3, #0]
 800b6f8:	6808      	ldr	r0, [r1, #0]
 800b6fa:	062e      	lsls	r6, r5, #24
 800b6fc:	d505      	bpl.n	800b70a <_printf_i+0xc2>
 800b6fe:	4e54      	ldr	r6, [pc, #336]	; (800b850 <_printf_i+0x208>)
 800b700:	2708      	movs	r7, #8
 800b702:	2a6f      	cmp	r2, #111	; 0x6f
 800b704:	d01b      	beq.n	800b73e <_printf_i+0xf6>
 800b706:	270a      	movs	r7, #10
 800b708:	e019      	b.n	800b73e <_printf_i+0xf6>
 800b70a:	066d      	lsls	r5, r5, #25
 800b70c:	d5f7      	bpl.n	800b6fe <_printf_i+0xb6>
 800b70e:	b280      	uxth	r0, r0
 800b710:	e7f5      	b.n	800b6fe <_printf_i+0xb6>
 800b712:	3145      	adds	r1, #69	; 0x45
 800b714:	4e4e      	ldr	r6, [pc, #312]	; (800b850 <_printf_i+0x208>)
 800b716:	700a      	strb	r2, [r1, #0]
 800b718:	6818      	ldr	r0, [r3, #0]
 800b71a:	6822      	ldr	r2, [r4, #0]
 800b71c:	1d01      	adds	r1, r0, #4
 800b71e:	6800      	ldr	r0, [r0, #0]
 800b720:	6019      	str	r1, [r3, #0]
 800b722:	0615      	lsls	r5, r2, #24
 800b724:	d521      	bpl.n	800b76a <_printf_i+0x122>
 800b726:	07d3      	lsls	r3, r2, #31
 800b728:	d502      	bpl.n	800b730 <_printf_i+0xe8>
 800b72a:	2320      	movs	r3, #32
 800b72c:	431a      	orrs	r2, r3
 800b72e:	6022      	str	r2, [r4, #0]
 800b730:	2710      	movs	r7, #16
 800b732:	2800      	cmp	r0, #0
 800b734:	d103      	bne.n	800b73e <_printf_i+0xf6>
 800b736:	2320      	movs	r3, #32
 800b738:	6822      	ldr	r2, [r4, #0]
 800b73a:	439a      	bics	r2, r3
 800b73c:	6022      	str	r2, [r4, #0]
 800b73e:	0023      	movs	r3, r4
 800b740:	2200      	movs	r2, #0
 800b742:	3343      	adds	r3, #67	; 0x43
 800b744:	701a      	strb	r2, [r3, #0]
 800b746:	6863      	ldr	r3, [r4, #4]
 800b748:	60a3      	str	r3, [r4, #8]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	db58      	blt.n	800b800 <_printf_i+0x1b8>
 800b74e:	2204      	movs	r2, #4
 800b750:	6821      	ldr	r1, [r4, #0]
 800b752:	4391      	bics	r1, r2
 800b754:	6021      	str	r1, [r4, #0]
 800b756:	2800      	cmp	r0, #0
 800b758:	d154      	bne.n	800b804 <_printf_i+0x1bc>
 800b75a:	9d02      	ldr	r5, [sp, #8]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d05a      	beq.n	800b816 <_printf_i+0x1ce>
 800b760:	0025      	movs	r5, r4
 800b762:	7833      	ldrb	r3, [r6, #0]
 800b764:	3542      	adds	r5, #66	; 0x42
 800b766:	702b      	strb	r3, [r5, #0]
 800b768:	e055      	b.n	800b816 <_printf_i+0x1ce>
 800b76a:	0655      	lsls	r5, r2, #25
 800b76c:	d5db      	bpl.n	800b726 <_printf_i+0xde>
 800b76e:	b280      	uxth	r0, r0
 800b770:	e7d9      	b.n	800b726 <_printf_i+0xde>
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	680d      	ldr	r5, [r1, #0]
 800b776:	1d10      	adds	r0, r2, #4
 800b778:	6949      	ldr	r1, [r1, #20]
 800b77a:	6018      	str	r0, [r3, #0]
 800b77c:	6813      	ldr	r3, [r2, #0]
 800b77e:	062e      	lsls	r6, r5, #24
 800b780:	d501      	bpl.n	800b786 <_printf_i+0x13e>
 800b782:	6019      	str	r1, [r3, #0]
 800b784:	e002      	b.n	800b78c <_printf_i+0x144>
 800b786:	066d      	lsls	r5, r5, #25
 800b788:	d5fb      	bpl.n	800b782 <_printf_i+0x13a>
 800b78a:	8019      	strh	r1, [r3, #0]
 800b78c:	2300      	movs	r3, #0
 800b78e:	9d02      	ldr	r5, [sp, #8]
 800b790:	6123      	str	r3, [r4, #16]
 800b792:	e04f      	b.n	800b834 <_printf_i+0x1ec>
 800b794:	681a      	ldr	r2, [r3, #0]
 800b796:	1d11      	adds	r1, r2, #4
 800b798:	6019      	str	r1, [r3, #0]
 800b79a:	6815      	ldr	r5, [r2, #0]
 800b79c:	2100      	movs	r1, #0
 800b79e:	6862      	ldr	r2, [r4, #4]
 800b7a0:	0028      	movs	r0, r5
 800b7a2:	f000 f859 	bl	800b858 <memchr>
 800b7a6:	2800      	cmp	r0, #0
 800b7a8:	d001      	beq.n	800b7ae <_printf_i+0x166>
 800b7aa:	1b40      	subs	r0, r0, r5
 800b7ac:	6060      	str	r0, [r4, #4]
 800b7ae:	6863      	ldr	r3, [r4, #4]
 800b7b0:	6123      	str	r3, [r4, #16]
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	9a02      	ldr	r2, [sp, #8]
 800b7b6:	7013      	strb	r3, [r2, #0]
 800b7b8:	e03c      	b.n	800b834 <_printf_i+0x1ec>
 800b7ba:	6923      	ldr	r3, [r4, #16]
 800b7bc:	002a      	movs	r2, r5
 800b7be:	9904      	ldr	r1, [sp, #16]
 800b7c0:	9803      	ldr	r0, [sp, #12]
 800b7c2:	9d05      	ldr	r5, [sp, #20]
 800b7c4:	47a8      	blx	r5
 800b7c6:	1c43      	adds	r3, r0, #1
 800b7c8:	d03e      	beq.n	800b848 <_printf_i+0x200>
 800b7ca:	6823      	ldr	r3, [r4, #0]
 800b7cc:	079b      	lsls	r3, r3, #30
 800b7ce:	d415      	bmi.n	800b7fc <_printf_i+0x1b4>
 800b7d0:	9b07      	ldr	r3, [sp, #28]
 800b7d2:	68e0      	ldr	r0, [r4, #12]
 800b7d4:	4298      	cmp	r0, r3
 800b7d6:	da39      	bge.n	800b84c <_printf_i+0x204>
 800b7d8:	0018      	movs	r0, r3
 800b7da:	e037      	b.n	800b84c <_printf_i+0x204>
 800b7dc:	0022      	movs	r2, r4
 800b7de:	2301      	movs	r3, #1
 800b7e0:	3219      	adds	r2, #25
 800b7e2:	9904      	ldr	r1, [sp, #16]
 800b7e4:	9803      	ldr	r0, [sp, #12]
 800b7e6:	9e05      	ldr	r6, [sp, #20]
 800b7e8:	47b0      	blx	r6
 800b7ea:	1c43      	adds	r3, r0, #1
 800b7ec:	d02c      	beq.n	800b848 <_printf_i+0x200>
 800b7ee:	3501      	adds	r5, #1
 800b7f0:	68e3      	ldr	r3, [r4, #12]
 800b7f2:	9a07      	ldr	r2, [sp, #28]
 800b7f4:	1a9b      	subs	r3, r3, r2
 800b7f6:	42ab      	cmp	r3, r5
 800b7f8:	dcf0      	bgt.n	800b7dc <_printf_i+0x194>
 800b7fa:	e7e9      	b.n	800b7d0 <_printf_i+0x188>
 800b7fc:	2500      	movs	r5, #0
 800b7fe:	e7f7      	b.n	800b7f0 <_printf_i+0x1a8>
 800b800:	2800      	cmp	r0, #0
 800b802:	d0ad      	beq.n	800b760 <_printf_i+0x118>
 800b804:	9d02      	ldr	r5, [sp, #8]
 800b806:	0039      	movs	r1, r7
 800b808:	f7f4 fd0c 	bl	8000224 <__aeabi_uidivmod>
 800b80c:	5c73      	ldrb	r3, [r6, r1]
 800b80e:	3d01      	subs	r5, #1
 800b810:	702b      	strb	r3, [r5, #0]
 800b812:	2800      	cmp	r0, #0
 800b814:	d1f7      	bne.n	800b806 <_printf_i+0x1be>
 800b816:	2f08      	cmp	r7, #8
 800b818:	d109      	bne.n	800b82e <_printf_i+0x1e6>
 800b81a:	6823      	ldr	r3, [r4, #0]
 800b81c:	07db      	lsls	r3, r3, #31
 800b81e:	d506      	bpl.n	800b82e <_printf_i+0x1e6>
 800b820:	6863      	ldr	r3, [r4, #4]
 800b822:	6922      	ldr	r2, [r4, #16]
 800b824:	4293      	cmp	r3, r2
 800b826:	dc02      	bgt.n	800b82e <_printf_i+0x1e6>
 800b828:	2330      	movs	r3, #48	; 0x30
 800b82a:	3d01      	subs	r5, #1
 800b82c:	702b      	strb	r3, [r5, #0]
 800b82e:	9b02      	ldr	r3, [sp, #8]
 800b830:	1b5b      	subs	r3, r3, r5
 800b832:	6123      	str	r3, [r4, #16]
 800b834:	9b05      	ldr	r3, [sp, #20]
 800b836:	aa07      	add	r2, sp, #28
 800b838:	9300      	str	r3, [sp, #0]
 800b83a:	0021      	movs	r1, r4
 800b83c:	9b04      	ldr	r3, [sp, #16]
 800b83e:	9803      	ldr	r0, [sp, #12]
 800b840:	f7ff fe94 	bl	800b56c <_printf_common>
 800b844:	1c43      	adds	r3, r0, #1
 800b846:	d1b8      	bne.n	800b7ba <_printf_i+0x172>
 800b848:	2001      	movs	r0, #1
 800b84a:	4240      	negs	r0, r0
 800b84c:	b009      	add	sp, #36	; 0x24
 800b84e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b850:	0800c5d9 	.word	0x0800c5d9
 800b854:	0800c5ea 	.word	0x0800c5ea

0800b858 <memchr>:
 800b858:	b2c9      	uxtb	r1, r1
 800b85a:	1882      	adds	r2, r0, r2
 800b85c:	4290      	cmp	r0, r2
 800b85e:	d101      	bne.n	800b864 <memchr+0xc>
 800b860:	2000      	movs	r0, #0
 800b862:	4770      	bx	lr
 800b864:	7803      	ldrb	r3, [r0, #0]
 800b866:	428b      	cmp	r3, r1
 800b868:	d0fb      	beq.n	800b862 <memchr+0xa>
 800b86a:	3001      	adds	r0, #1
 800b86c:	e7f6      	b.n	800b85c <memchr+0x4>

0800b86e <memmove>:
 800b86e:	b510      	push	{r4, lr}
 800b870:	4288      	cmp	r0, r1
 800b872:	d902      	bls.n	800b87a <memmove+0xc>
 800b874:	188b      	adds	r3, r1, r2
 800b876:	4298      	cmp	r0, r3
 800b878:	d303      	bcc.n	800b882 <memmove+0x14>
 800b87a:	2300      	movs	r3, #0
 800b87c:	e007      	b.n	800b88e <memmove+0x20>
 800b87e:	5c8b      	ldrb	r3, [r1, r2]
 800b880:	5483      	strb	r3, [r0, r2]
 800b882:	3a01      	subs	r2, #1
 800b884:	d2fb      	bcs.n	800b87e <memmove+0x10>
 800b886:	bd10      	pop	{r4, pc}
 800b888:	5ccc      	ldrb	r4, [r1, r3]
 800b88a:	54c4      	strb	r4, [r0, r3]
 800b88c:	3301      	adds	r3, #1
 800b88e:	429a      	cmp	r2, r3
 800b890:	d1fa      	bne.n	800b888 <memmove+0x1a>
 800b892:	e7f8      	b.n	800b886 <memmove+0x18>

0800b894 <_free_r>:
 800b894:	b570      	push	{r4, r5, r6, lr}
 800b896:	0005      	movs	r5, r0
 800b898:	2900      	cmp	r1, #0
 800b89a:	d010      	beq.n	800b8be <_free_r+0x2a>
 800b89c:	1f0c      	subs	r4, r1, #4
 800b89e:	6823      	ldr	r3, [r4, #0]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	da00      	bge.n	800b8a6 <_free_r+0x12>
 800b8a4:	18e4      	adds	r4, r4, r3
 800b8a6:	0028      	movs	r0, r5
 800b8a8:	f7ff fcfe 	bl	800b2a8 <__malloc_lock>
 800b8ac:	4a1d      	ldr	r2, [pc, #116]	; (800b924 <_free_r+0x90>)
 800b8ae:	6813      	ldr	r3, [r2, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d105      	bne.n	800b8c0 <_free_r+0x2c>
 800b8b4:	6063      	str	r3, [r4, #4]
 800b8b6:	6014      	str	r4, [r2, #0]
 800b8b8:	0028      	movs	r0, r5
 800b8ba:	f7ff fcf6 	bl	800b2aa <__malloc_unlock>
 800b8be:	bd70      	pop	{r4, r5, r6, pc}
 800b8c0:	42a3      	cmp	r3, r4
 800b8c2:	d909      	bls.n	800b8d8 <_free_r+0x44>
 800b8c4:	6821      	ldr	r1, [r4, #0]
 800b8c6:	1860      	adds	r0, r4, r1
 800b8c8:	4283      	cmp	r3, r0
 800b8ca:	d1f3      	bne.n	800b8b4 <_free_r+0x20>
 800b8cc:	6818      	ldr	r0, [r3, #0]
 800b8ce:	685b      	ldr	r3, [r3, #4]
 800b8d0:	1841      	adds	r1, r0, r1
 800b8d2:	6021      	str	r1, [r4, #0]
 800b8d4:	e7ee      	b.n	800b8b4 <_free_r+0x20>
 800b8d6:	0013      	movs	r3, r2
 800b8d8:	685a      	ldr	r2, [r3, #4]
 800b8da:	2a00      	cmp	r2, #0
 800b8dc:	d001      	beq.n	800b8e2 <_free_r+0x4e>
 800b8de:	42a2      	cmp	r2, r4
 800b8e0:	d9f9      	bls.n	800b8d6 <_free_r+0x42>
 800b8e2:	6819      	ldr	r1, [r3, #0]
 800b8e4:	1858      	adds	r0, r3, r1
 800b8e6:	42a0      	cmp	r0, r4
 800b8e8:	d10b      	bne.n	800b902 <_free_r+0x6e>
 800b8ea:	6820      	ldr	r0, [r4, #0]
 800b8ec:	1809      	adds	r1, r1, r0
 800b8ee:	1858      	adds	r0, r3, r1
 800b8f0:	6019      	str	r1, [r3, #0]
 800b8f2:	4282      	cmp	r2, r0
 800b8f4:	d1e0      	bne.n	800b8b8 <_free_r+0x24>
 800b8f6:	6810      	ldr	r0, [r2, #0]
 800b8f8:	6852      	ldr	r2, [r2, #4]
 800b8fa:	1841      	adds	r1, r0, r1
 800b8fc:	6019      	str	r1, [r3, #0]
 800b8fe:	605a      	str	r2, [r3, #4]
 800b900:	e7da      	b.n	800b8b8 <_free_r+0x24>
 800b902:	42a0      	cmp	r0, r4
 800b904:	d902      	bls.n	800b90c <_free_r+0x78>
 800b906:	230c      	movs	r3, #12
 800b908:	602b      	str	r3, [r5, #0]
 800b90a:	e7d5      	b.n	800b8b8 <_free_r+0x24>
 800b90c:	6821      	ldr	r1, [r4, #0]
 800b90e:	1860      	adds	r0, r4, r1
 800b910:	4282      	cmp	r2, r0
 800b912:	d103      	bne.n	800b91c <_free_r+0x88>
 800b914:	6810      	ldr	r0, [r2, #0]
 800b916:	6852      	ldr	r2, [r2, #4]
 800b918:	1841      	adds	r1, r0, r1
 800b91a:	6021      	str	r1, [r4, #0]
 800b91c:	6062      	str	r2, [r4, #4]
 800b91e:	605c      	str	r4, [r3, #4]
 800b920:	e7ca      	b.n	800b8b8 <_free_r+0x24>
 800b922:	46c0      	nop			; (mov r8, r8)
 800b924:	20000134 	.word	0x20000134

0800b928 <_realloc_r>:
 800b928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b92a:	0007      	movs	r7, r0
 800b92c:	000d      	movs	r5, r1
 800b92e:	0016      	movs	r6, r2
 800b930:	2900      	cmp	r1, #0
 800b932:	d105      	bne.n	800b940 <_realloc_r+0x18>
 800b934:	0011      	movs	r1, r2
 800b936:	f7ff fc27 	bl	800b188 <_malloc_r>
 800b93a:	0004      	movs	r4, r0
 800b93c:	0020      	movs	r0, r4
 800b93e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b940:	2a00      	cmp	r2, #0
 800b942:	d103      	bne.n	800b94c <_realloc_r+0x24>
 800b944:	f7ff ffa6 	bl	800b894 <_free_r>
 800b948:	0034      	movs	r4, r6
 800b94a:	e7f7      	b.n	800b93c <_realloc_r+0x14>
 800b94c:	f000 f812 	bl	800b974 <_malloc_usable_size_r>
 800b950:	002c      	movs	r4, r5
 800b952:	42b0      	cmp	r0, r6
 800b954:	d2f2      	bcs.n	800b93c <_realloc_r+0x14>
 800b956:	0031      	movs	r1, r6
 800b958:	0038      	movs	r0, r7
 800b95a:	f7ff fc15 	bl	800b188 <_malloc_r>
 800b95e:	1e04      	subs	r4, r0, #0
 800b960:	d0ec      	beq.n	800b93c <_realloc_r+0x14>
 800b962:	0029      	movs	r1, r5
 800b964:	0032      	movs	r2, r6
 800b966:	f7ff fbef 	bl	800b148 <memcpy>
 800b96a:	0029      	movs	r1, r5
 800b96c:	0038      	movs	r0, r7
 800b96e:	f7ff ff91 	bl	800b894 <_free_r>
 800b972:	e7e3      	b.n	800b93c <_realloc_r+0x14>

0800b974 <_malloc_usable_size_r>:
 800b974:	1f0b      	subs	r3, r1, #4
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	1f18      	subs	r0, r3, #4
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	da01      	bge.n	800b982 <_malloc_usable_size_r+0xe>
 800b97e:	580b      	ldr	r3, [r1, r0]
 800b980:	18c0      	adds	r0, r0, r3
 800b982:	4770      	bx	lr

0800b984 <_init>:
 800b984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b986:	46c0      	nop			; (mov r8, r8)
 800b988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b98a:	bc08      	pop	{r3}
 800b98c:	469e      	mov	lr, r3
 800b98e:	4770      	bx	lr

0800b990 <_fini>:
 800b990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b992:	46c0      	nop			; (mov r8, r8)
 800b994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b996:	bc08      	pop	{r3}
 800b998:	469e      	mov	lr, r3
 800b99a:	4770      	bx	lr
