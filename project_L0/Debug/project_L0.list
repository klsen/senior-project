
project_L0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c138  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c60  0800c1f8  0800c1f8  0001c1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce58  0800ce58  000200d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800ce58  0800ce58  000200d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ce58  0800ce58  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce58  0800ce58  0001ce58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce5c  0800ce5c  0001ce5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  0800ce60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005dc  200000d8  0800cf38  000200d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006b4  0800cf38  000206b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d065  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003851  00000000  00000000  0003d165  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001530  00000000  00000000  000409b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001360  00000000  00000000  00041ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018bf6  00000000  00000000  00043248  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000134f8  00000000  00000000  0005be3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f58f  00000000  00000000  0006f336  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fe8c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050f4  00000000  00000000  000fe940  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000d8 	.word	0x200000d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c1e0 	.word	0x0800c1e0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000dc 	.word	0x200000dc
 8000104:	0800c1e0 	.word	0x0800c1e0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cfrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	1c08      	adds	r0, r1, #0
 8000408:	4661      	mov	r1, ip
 800040a:	e7ff      	b.n	800040c <__aeabi_cfcmpeq>

0800040c <__aeabi_cfcmpeq>:
 800040c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800040e:	f000 f9d3 	bl	80007b8 <__lesf2>
 8000412:	2800      	cmp	r0, #0
 8000414:	d401      	bmi.n	800041a <__aeabi_cfcmpeq+0xe>
 8000416:	2100      	movs	r1, #0
 8000418:	42c8      	cmn	r0, r1
 800041a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800041c <__aeabi_fcmpeq>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f000 f955 	bl	80006cc <__eqsf2>
 8000422:	4240      	negs	r0, r0
 8000424:	3001      	adds	r0, #1
 8000426:	bd10      	pop	{r4, pc}

08000428 <__aeabi_fcmplt>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 f9c5 	bl	80007b8 <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	db01      	blt.n	8000436 <__aeabi_fcmplt+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_fcmple>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 f9bb 	bl	80007b8 <__lesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dd01      	ble.n	800044a <__aeabi_fcmple+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_fcmpgt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 f963 	bl	800071c <__gesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	dc01      	bgt.n	800045e <__aeabi_fcmpgt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_fcmpge>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 f959 	bl	800071c <__gesf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	da01      	bge.n	8000472 <__aeabi_fcmpge+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_f2uiz>:
 8000478:	219e      	movs	r1, #158	; 0x9e
 800047a:	b510      	push	{r4, lr}
 800047c:	05c9      	lsls	r1, r1, #23
 800047e:	1c04      	adds	r4, r0, #0
 8000480:	f7ff fff0 	bl	8000464 <__aeabi_fcmpge>
 8000484:	2800      	cmp	r0, #0
 8000486:	d103      	bne.n	8000490 <__aeabi_f2uiz+0x18>
 8000488:	1c20      	adds	r0, r4, #0
 800048a:	f000 fcdb 	bl	8000e44 <__aeabi_f2iz>
 800048e:	bd10      	pop	{r4, pc}
 8000490:	219e      	movs	r1, #158	; 0x9e
 8000492:	1c20      	adds	r0, r4, #0
 8000494:	05c9      	lsls	r1, r1, #23
 8000496:	f000 fb11 	bl	8000abc <__aeabi_fsub>
 800049a:	f000 fcd3 	bl	8000e44 <__aeabi_f2iz>
 800049e:	2380      	movs	r3, #128	; 0x80
 80004a0:	061b      	lsls	r3, r3, #24
 80004a2:	469c      	mov	ip, r3
 80004a4:	4460      	add	r0, ip
 80004a6:	e7f2      	b.n	800048e <__aeabi_f2uiz+0x16>

080004a8 <__aeabi_fdiv>:
 80004a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004aa:	4657      	mov	r7, sl
 80004ac:	464e      	mov	r6, r9
 80004ae:	4645      	mov	r5, r8
 80004b0:	46de      	mov	lr, fp
 80004b2:	0244      	lsls	r4, r0, #9
 80004b4:	b5e0      	push	{r5, r6, r7, lr}
 80004b6:	0046      	lsls	r6, r0, #1
 80004b8:	4688      	mov	r8, r1
 80004ba:	0a64      	lsrs	r4, r4, #9
 80004bc:	0e36      	lsrs	r6, r6, #24
 80004be:	0fc7      	lsrs	r7, r0, #31
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d063      	beq.n	800058c <__aeabi_fdiv+0xe4>
 80004c4:	2eff      	cmp	r6, #255	; 0xff
 80004c6:	d024      	beq.n	8000512 <__aeabi_fdiv+0x6a>
 80004c8:	2380      	movs	r3, #128	; 0x80
 80004ca:	00e4      	lsls	r4, r4, #3
 80004cc:	04db      	lsls	r3, r3, #19
 80004ce:	431c      	orrs	r4, r3
 80004d0:	2300      	movs	r3, #0
 80004d2:	4699      	mov	r9, r3
 80004d4:	469b      	mov	fp, r3
 80004d6:	3e7f      	subs	r6, #127	; 0x7f
 80004d8:	4643      	mov	r3, r8
 80004da:	4642      	mov	r2, r8
 80004dc:	025d      	lsls	r5, r3, #9
 80004de:	0fd2      	lsrs	r2, r2, #31
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	0a6d      	lsrs	r5, r5, #9
 80004e4:	0e1b      	lsrs	r3, r3, #24
 80004e6:	4690      	mov	r8, r2
 80004e8:	4692      	mov	sl, r2
 80004ea:	d065      	beq.n	80005b8 <__aeabi_fdiv+0x110>
 80004ec:	2bff      	cmp	r3, #255	; 0xff
 80004ee:	d055      	beq.n	800059c <__aeabi_fdiv+0xf4>
 80004f0:	2280      	movs	r2, #128	; 0x80
 80004f2:	2100      	movs	r1, #0
 80004f4:	00ed      	lsls	r5, r5, #3
 80004f6:	04d2      	lsls	r2, r2, #19
 80004f8:	3b7f      	subs	r3, #127	; 0x7f
 80004fa:	4315      	orrs	r5, r2
 80004fc:	1af6      	subs	r6, r6, r3
 80004fe:	4643      	mov	r3, r8
 8000500:	464a      	mov	r2, r9
 8000502:	407b      	eors	r3, r7
 8000504:	2a0f      	cmp	r2, #15
 8000506:	d900      	bls.n	800050a <__aeabi_fdiv+0x62>
 8000508:	e08d      	b.n	8000626 <__aeabi_fdiv+0x17e>
 800050a:	486d      	ldr	r0, [pc, #436]	; (80006c0 <__aeabi_fdiv+0x218>)
 800050c:	0092      	lsls	r2, r2, #2
 800050e:	5882      	ldr	r2, [r0, r2]
 8000510:	4697      	mov	pc, r2
 8000512:	2c00      	cmp	r4, #0
 8000514:	d154      	bne.n	80005c0 <__aeabi_fdiv+0x118>
 8000516:	2308      	movs	r3, #8
 8000518:	4699      	mov	r9, r3
 800051a:	3b06      	subs	r3, #6
 800051c:	26ff      	movs	r6, #255	; 0xff
 800051e:	469b      	mov	fp, r3
 8000520:	e7da      	b.n	80004d8 <__aeabi_fdiv+0x30>
 8000522:	2500      	movs	r5, #0
 8000524:	4653      	mov	r3, sl
 8000526:	2902      	cmp	r1, #2
 8000528:	d01b      	beq.n	8000562 <__aeabi_fdiv+0xba>
 800052a:	2903      	cmp	r1, #3
 800052c:	d100      	bne.n	8000530 <__aeabi_fdiv+0x88>
 800052e:	e0bf      	b.n	80006b0 <__aeabi_fdiv+0x208>
 8000530:	2901      	cmp	r1, #1
 8000532:	d028      	beq.n	8000586 <__aeabi_fdiv+0xde>
 8000534:	0030      	movs	r0, r6
 8000536:	307f      	adds	r0, #127	; 0x7f
 8000538:	2800      	cmp	r0, #0
 800053a:	dd20      	ble.n	800057e <__aeabi_fdiv+0xd6>
 800053c:	076a      	lsls	r2, r5, #29
 800053e:	d004      	beq.n	800054a <__aeabi_fdiv+0xa2>
 8000540:	220f      	movs	r2, #15
 8000542:	402a      	ands	r2, r5
 8000544:	2a04      	cmp	r2, #4
 8000546:	d000      	beq.n	800054a <__aeabi_fdiv+0xa2>
 8000548:	3504      	adds	r5, #4
 800054a:	012a      	lsls	r2, r5, #4
 800054c:	d503      	bpl.n	8000556 <__aeabi_fdiv+0xae>
 800054e:	0030      	movs	r0, r6
 8000550:	4a5c      	ldr	r2, [pc, #368]	; (80006c4 <__aeabi_fdiv+0x21c>)
 8000552:	3080      	adds	r0, #128	; 0x80
 8000554:	4015      	ands	r5, r2
 8000556:	28fe      	cmp	r0, #254	; 0xfe
 8000558:	dc03      	bgt.n	8000562 <__aeabi_fdiv+0xba>
 800055a:	01ac      	lsls	r4, r5, #6
 800055c:	0a64      	lsrs	r4, r4, #9
 800055e:	b2c2      	uxtb	r2, r0
 8000560:	e001      	b.n	8000566 <__aeabi_fdiv+0xbe>
 8000562:	22ff      	movs	r2, #255	; 0xff
 8000564:	2400      	movs	r4, #0
 8000566:	0264      	lsls	r4, r4, #9
 8000568:	05d2      	lsls	r2, r2, #23
 800056a:	0a60      	lsrs	r0, r4, #9
 800056c:	07db      	lsls	r3, r3, #31
 800056e:	4310      	orrs	r0, r2
 8000570:	4318      	orrs	r0, r3
 8000572:	bc3c      	pop	{r2, r3, r4, r5}
 8000574:	4690      	mov	r8, r2
 8000576:	4699      	mov	r9, r3
 8000578:	46a2      	mov	sl, r4
 800057a:	46ab      	mov	fp, r5
 800057c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800057e:	2201      	movs	r2, #1
 8000580:	1a10      	subs	r0, r2, r0
 8000582:	281b      	cmp	r0, #27
 8000584:	dd7c      	ble.n	8000680 <__aeabi_fdiv+0x1d8>
 8000586:	2200      	movs	r2, #0
 8000588:	2400      	movs	r4, #0
 800058a:	e7ec      	b.n	8000566 <__aeabi_fdiv+0xbe>
 800058c:	2c00      	cmp	r4, #0
 800058e:	d11d      	bne.n	80005cc <__aeabi_fdiv+0x124>
 8000590:	2304      	movs	r3, #4
 8000592:	4699      	mov	r9, r3
 8000594:	3b03      	subs	r3, #3
 8000596:	2600      	movs	r6, #0
 8000598:	469b      	mov	fp, r3
 800059a:	e79d      	b.n	80004d8 <__aeabi_fdiv+0x30>
 800059c:	3eff      	subs	r6, #255	; 0xff
 800059e:	2d00      	cmp	r5, #0
 80005a0:	d120      	bne.n	80005e4 <__aeabi_fdiv+0x13c>
 80005a2:	2102      	movs	r1, #2
 80005a4:	4643      	mov	r3, r8
 80005a6:	464a      	mov	r2, r9
 80005a8:	407b      	eors	r3, r7
 80005aa:	430a      	orrs	r2, r1
 80005ac:	2a0f      	cmp	r2, #15
 80005ae:	d8d8      	bhi.n	8000562 <__aeabi_fdiv+0xba>
 80005b0:	4845      	ldr	r0, [pc, #276]	; (80006c8 <__aeabi_fdiv+0x220>)
 80005b2:	0092      	lsls	r2, r2, #2
 80005b4:	5882      	ldr	r2, [r0, r2]
 80005b6:	4697      	mov	pc, r2
 80005b8:	2d00      	cmp	r5, #0
 80005ba:	d119      	bne.n	80005f0 <__aeabi_fdiv+0x148>
 80005bc:	2101      	movs	r1, #1
 80005be:	e7f1      	b.n	80005a4 <__aeabi_fdiv+0xfc>
 80005c0:	230c      	movs	r3, #12
 80005c2:	4699      	mov	r9, r3
 80005c4:	3b09      	subs	r3, #9
 80005c6:	26ff      	movs	r6, #255	; 0xff
 80005c8:	469b      	mov	fp, r3
 80005ca:	e785      	b.n	80004d8 <__aeabi_fdiv+0x30>
 80005cc:	0020      	movs	r0, r4
 80005ce:	f001 fafd 	bl	8001bcc <__clzsi2>
 80005d2:	2676      	movs	r6, #118	; 0x76
 80005d4:	1f43      	subs	r3, r0, #5
 80005d6:	409c      	lsls	r4, r3
 80005d8:	2300      	movs	r3, #0
 80005da:	4276      	negs	r6, r6
 80005dc:	1a36      	subs	r6, r6, r0
 80005de:	4699      	mov	r9, r3
 80005e0:	469b      	mov	fp, r3
 80005e2:	e779      	b.n	80004d8 <__aeabi_fdiv+0x30>
 80005e4:	464a      	mov	r2, r9
 80005e6:	2303      	movs	r3, #3
 80005e8:	431a      	orrs	r2, r3
 80005ea:	4691      	mov	r9, r2
 80005ec:	2103      	movs	r1, #3
 80005ee:	e786      	b.n	80004fe <__aeabi_fdiv+0x56>
 80005f0:	0028      	movs	r0, r5
 80005f2:	f001 faeb 	bl	8001bcc <__clzsi2>
 80005f6:	1f43      	subs	r3, r0, #5
 80005f8:	1836      	adds	r6, r6, r0
 80005fa:	409d      	lsls	r5, r3
 80005fc:	3676      	adds	r6, #118	; 0x76
 80005fe:	2100      	movs	r1, #0
 8000600:	e77d      	b.n	80004fe <__aeabi_fdiv+0x56>
 8000602:	2480      	movs	r4, #128	; 0x80
 8000604:	2300      	movs	r3, #0
 8000606:	03e4      	lsls	r4, r4, #15
 8000608:	22ff      	movs	r2, #255	; 0xff
 800060a:	e7ac      	b.n	8000566 <__aeabi_fdiv+0xbe>
 800060c:	2500      	movs	r5, #0
 800060e:	2380      	movs	r3, #128	; 0x80
 8000610:	03db      	lsls	r3, r3, #15
 8000612:	421c      	tst	r4, r3
 8000614:	d028      	beq.n	8000668 <__aeabi_fdiv+0x1c0>
 8000616:	421d      	tst	r5, r3
 8000618:	d126      	bne.n	8000668 <__aeabi_fdiv+0x1c0>
 800061a:	432b      	orrs	r3, r5
 800061c:	025c      	lsls	r4, r3, #9
 800061e:	0a64      	lsrs	r4, r4, #9
 8000620:	4643      	mov	r3, r8
 8000622:	22ff      	movs	r2, #255	; 0xff
 8000624:	e79f      	b.n	8000566 <__aeabi_fdiv+0xbe>
 8000626:	0162      	lsls	r2, r4, #5
 8000628:	016c      	lsls	r4, r5, #5
 800062a:	42a2      	cmp	r2, r4
 800062c:	d224      	bcs.n	8000678 <__aeabi_fdiv+0x1d0>
 800062e:	211b      	movs	r1, #27
 8000630:	2500      	movs	r5, #0
 8000632:	3e01      	subs	r6, #1
 8000634:	2701      	movs	r7, #1
 8000636:	0010      	movs	r0, r2
 8000638:	006d      	lsls	r5, r5, #1
 800063a:	0052      	lsls	r2, r2, #1
 800063c:	2800      	cmp	r0, #0
 800063e:	db01      	blt.n	8000644 <__aeabi_fdiv+0x19c>
 8000640:	4294      	cmp	r4, r2
 8000642:	d801      	bhi.n	8000648 <__aeabi_fdiv+0x1a0>
 8000644:	1b12      	subs	r2, r2, r4
 8000646:	433d      	orrs	r5, r7
 8000648:	3901      	subs	r1, #1
 800064a:	2900      	cmp	r1, #0
 800064c:	d1f3      	bne.n	8000636 <__aeabi_fdiv+0x18e>
 800064e:	0014      	movs	r4, r2
 8000650:	1e62      	subs	r2, r4, #1
 8000652:	4194      	sbcs	r4, r2
 8000654:	4325      	orrs	r5, r4
 8000656:	e76d      	b.n	8000534 <__aeabi_fdiv+0x8c>
 8000658:	46ba      	mov	sl, r7
 800065a:	4659      	mov	r1, fp
 800065c:	0025      	movs	r5, r4
 800065e:	4653      	mov	r3, sl
 8000660:	2902      	cmp	r1, #2
 8000662:	d000      	beq.n	8000666 <__aeabi_fdiv+0x1be>
 8000664:	e761      	b.n	800052a <__aeabi_fdiv+0x82>
 8000666:	e77c      	b.n	8000562 <__aeabi_fdiv+0xba>
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	03db      	lsls	r3, r3, #15
 800066c:	431c      	orrs	r4, r3
 800066e:	0264      	lsls	r4, r4, #9
 8000670:	0a64      	lsrs	r4, r4, #9
 8000672:	003b      	movs	r3, r7
 8000674:	22ff      	movs	r2, #255	; 0xff
 8000676:	e776      	b.n	8000566 <__aeabi_fdiv+0xbe>
 8000678:	1b12      	subs	r2, r2, r4
 800067a:	211a      	movs	r1, #26
 800067c:	2501      	movs	r5, #1
 800067e:	e7d9      	b.n	8000634 <__aeabi_fdiv+0x18c>
 8000680:	369e      	adds	r6, #158	; 0x9e
 8000682:	002a      	movs	r2, r5
 8000684:	40b5      	lsls	r5, r6
 8000686:	002c      	movs	r4, r5
 8000688:	40c2      	lsrs	r2, r0
 800068a:	1e65      	subs	r5, r4, #1
 800068c:	41ac      	sbcs	r4, r5
 800068e:	4314      	orrs	r4, r2
 8000690:	0762      	lsls	r2, r4, #29
 8000692:	d004      	beq.n	800069e <__aeabi_fdiv+0x1f6>
 8000694:	220f      	movs	r2, #15
 8000696:	4022      	ands	r2, r4
 8000698:	2a04      	cmp	r2, #4
 800069a:	d000      	beq.n	800069e <__aeabi_fdiv+0x1f6>
 800069c:	3404      	adds	r4, #4
 800069e:	0162      	lsls	r2, r4, #5
 80006a0:	d403      	bmi.n	80006aa <__aeabi_fdiv+0x202>
 80006a2:	01a4      	lsls	r4, r4, #6
 80006a4:	0a64      	lsrs	r4, r4, #9
 80006a6:	2200      	movs	r2, #0
 80006a8:	e75d      	b.n	8000566 <__aeabi_fdiv+0xbe>
 80006aa:	2201      	movs	r2, #1
 80006ac:	2400      	movs	r4, #0
 80006ae:	e75a      	b.n	8000566 <__aeabi_fdiv+0xbe>
 80006b0:	2480      	movs	r4, #128	; 0x80
 80006b2:	03e4      	lsls	r4, r4, #15
 80006b4:	432c      	orrs	r4, r5
 80006b6:	0264      	lsls	r4, r4, #9
 80006b8:	0a64      	lsrs	r4, r4, #9
 80006ba:	22ff      	movs	r2, #255	; 0xff
 80006bc:	e753      	b.n	8000566 <__aeabi_fdiv+0xbe>
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	0800c470 	.word	0x0800c470
 80006c4:	f7ffffff 	.word	0xf7ffffff
 80006c8:	0800c4b0 	.word	0x0800c4b0

080006cc <__eqsf2>:
 80006cc:	b570      	push	{r4, r5, r6, lr}
 80006ce:	0042      	lsls	r2, r0, #1
 80006d0:	024e      	lsls	r6, r1, #9
 80006d2:	004c      	lsls	r4, r1, #1
 80006d4:	0245      	lsls	r5, r0, #9
 80006d6:	0a6d      	lsrs	r5, r5, #9
 80006d8:	0e12      	lsrs	r2, r2, #24
 80006da:	0fc3      	lsrs	r3, r0, #31
 80006dc:	0a76      	lsrs	r6, r6, #9
 80006de:	0e24      	lsrs	r4, r4, #24
 80006e0:	0fc9      	lsrs	r1, r1, #31
 80006e2:	2aff      	cmp	r2, #255	; 0xff
 80006e4:	d00f      	beq.n	8000706 <__eqsf2+0x3a>
 80006e6:	2cff      	cmp	r4, #255	; 0xff
 80006e8:	d011      	beq.n	800070e <__eqsf2+0x42>
 80006ea:	2001      	movs	r0, #1
 80006ec:	42a2      	cmp	r2, r4
 80006ee:	d000      	beq.n	80006f2 <__eqsf2+0x26>
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	42b5      	cmp	r5, r6
 80006f4:	d1fc      	bne.n	80006f0 <__eqsf2+0x24>
 80006f6:	428b      	cmp	r3, r1
 80006f8:	d00d      	beq.n	8000716 <__eqsf2+0x4a>
 80006fa:	2a00      	cmp	r2, #0
 80006fc:	d1f8      	bne.n	80006f0 <__eqsf2+0x24>
 80006fe:	0028      	movs	r0, r5
 8000700:	1e45      	subs	r5, r0, #1
 8000702:	41a8      	sbcs	r0, r5
 8000704:	e7f4      	b.n	80006f0 <__eqsf2+0x24>
 8000706:	2001      	movs	r0, #1
 8000708:	2d00      	cmp	r5, #0
 800070a:	d1f1      	bne.n	80006f0 <__eqsf2+0x24>
 800070c:	e7eb      	b.n	80006e6 <__eqsf2+0x1a>
 800070e:	2001      	movs	r0, #1
 8000710:	2e00      	cmp	r6, #0
 8000712:	d1ed      	bne.n	80006f0 <__eqsf2+0x24>
 8000714:	e7e9      	b.n	80006ea <__eqsf2+0x1e>
 8000716:	2000      	movs	r0, #0
 8000718:	e7ea      	b.n	80006f0 <__eqsf2+0x24>
 800071a:	46c0      	nop			; (mov r8, r8)

0800071c <__gesf2>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	004a      	lsls	r2, r1, #1
 8000720:	024e      	lsls	r6, r1, #9
 8000722:	0245      	lsls	r5, r0, #9
 8000724:	0044      	lsls	r4, r0, #1
 8000726:	0a6d      	lsrs	r5, r5, #9
 8000728:	0e24      	lsrs	r4, r4, #24
 800072a:	0fc3      	lsrs	r3, r0, #31
 800072c:	0a76      	lsrs	r6, r6, #9
 800072e:	0e12      	lsrs	r2, r2, #24
 8000730:	0fc9      	lsrs	r1, r1, #31
 8000732:	2cff      	cmp	r4, #255	; 0xff
 8000734:	d015      	beq.n	8000762 <__gesf2+0x46>
 8000736:	2aff      	cmp	r2, #255	; 0xff
 8000738:	d00e      	beq.n	8000758 <__gesf2+0x3c>
 800073a:	2c00      	cmp	r4, #0
 800073c:	d115      	bne.n	800076a <__gesf2+0x4e>
 800073e:	2a00      	cmp	r2, #0
 8000740:	d101      	bne.n	8000746 <__gesf2+0x2a>
 8000742:	2e00      	cmp	r6, #0
 8000744:	d01c      	beq.n	8000780 <__gesf2+0x64>
 8000746:	2d00      	cmp	r5, #0
 8000748:	d014      	beq.n	8000774 <__gesf2+0x58>
 800074a:	428b      	cmp	r3, r1
 800074c:	d027      	beq.n	800079e <__gesf2+0x82>
 800074e:	2002      	movs	r0, #2
 8000750:	3b01      	subs	r3, #1
 8000752:	4018      	ands	r0, r3
 8000754:	3801      	subs	r0, #1
 8000756:	bd70      	pop	{r4, r5, r6, pc}
 8000758:	2e00      	cmp	r6, #0
 800075a:	d0ee      	beq.n	800073a <__gesf2+0x1e>
 800075c:	2002      	movs	r0, #2
 800075e:	4240      	negs	r0, r0
 8000760:	e7f9      	b.n	8000756 <__gesf2+0x3a>
 8000762:	2d00      	cmp	r5, #0
 8000764:	d1fa      	bne.n	800075c <__gesf2+0x40>
 8000766:	2aff      	cmp	r2, #255	; 0xff
 8000768:	d00e      	beq.n	8000788 <__gesf2+0x6c>
 800076a:	2a00      	cmp	r2, #0
 800076c:	d10e      	bne.n	800078c <__gesf2+0x70>
 800076e:	2e00      	cmp	r6, #0
 8000770:	d0ed      	beq.n	800074e <__gesf2+0x32>
 8000772:	e00b      	b.n	800078c <__gesf2+0x70>
 8000774:	2301      	movs	r3, #1
 8000776:	3901      	subs	r1, #1
 8000778:	4399      	bics	r1, r3
 800077a:	0008      	movs	r0, r1
 800077c:	3001      	adds	r0, #1
 800077e:	e7ea      	b.n	8000756 <__gesf2+0x3a>
 8000780:	2000      	movs	r0, #0
 8000782:	2d00      	cmp	r5, #0
 8000784:	d0e7      	beq.n	8000756 <__gesf2+0x3a>
 8000786:	e7e2      	b.n	800074e <__gesf2+0x32>
 8000788:	2e00      	cmp	r6, #0
 800078a:	d1e7      	bne.n	800075c <__gesf2+0x40>
 800078c:	428b      	cmp	r3, r1
 800078e:	d1de      	bne.n	800074e <__gesf2+0x32>
 8000790:	4294      	cmp	r4, r2
 8000792:	dd05      	ble.n	80007a0 <__gesf2+0x84>
 8000794:	2102      	movs	r1, #2
 8000796:	1e58      	subs	r0, r3, #1
 8000798:	4008      	ands	r0, r1
 800079a:	3801      	subs	r0, #1
 800079c:	e7db      	b.n	8000756 <__gesf2+0x3a>
 800079e:	2400      	movs	r4, #0
 80007a0:	42a2      	cmp	r2, r4
 80007a2:	dc04      	bgt.n	80007ae <__gesf2+0x92>
 80007a4:	42b5      	cmp	r5, r6
 80007a6:	d8d2      	bhi.n	800074e <__gesf2+0x32>
 80007a8:	2000      	movs	r0, #0
 80007aa:	42b5      	cmp	r5, r6
 80007ac:	d2d3      	bcs.n	8000756 <__gesf2+0x3a>
 80007ae:	1e58      	subs	r0, r3, #1
 80007b0:	2301      	movs	r3, #1
 80007b2:	4398      	bics	r0, r3
 80007b4:	3001      	adds	r0, #1
 80007b6:	e7ce      	b.n	8000756 <__gesf2+0x3a>

080007b8 <__lesf2>:
 80007b8:	b530      	push	{r4, r5, lr}
 80007ba:	0042      	lsls	r2, r0, #1
 80007bc:	0244      	lsls	r4, r0, #9
 80007be:	024d      	lsls	r5, r1, #9
 80007c0:	0fc3      	lsrs	r3, r0, #31
 80007c2:	0048      	lsls	r0, r1, #1
 80007c4:	0a64      	lsrs	r4, r4, #9
 80007c6:	0e12      	lsrs	r2, r2, #24
 80007c8:	0a6d      	lsrs	r5, r5, #9
 80007ca:	0e00      	lsrs	r0, r0, #24
 80007cc:	0fc9      	lsrs	r1, r1, #31
 80007ce:	2aff      	cmp	r2, #255	; 0xff
 80007d0:	d012      	beq.n	80007f8 <__lesf2+0x40>
 80007d2:	28ff      	cmp	r0, #255	; 0xff
 80007d4:	d00c      	beq.n	80007f0 <__lesf2+0x38>
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d112      	bne.n	8000800 <__lesf2+0x48>
 80007da:	2800      	cmp	r0, #0
 80007dc:	d119      	bne.n	8000812 <__lesf2+0x5a>
 80007de:	2d00      	cmp	r5, #0
 80007e0:	d117      	bne.n	8000812 <__lesf2+0x5a>
 80007e2:	2c00      	cmp	r4, #0
 80007e4:	d02b      	beq.n	800083e <__lesf2+0x86>
 80007e6:	2002      	movs	r0, #2
 80007e8:	3b01      	subs	r3, #1
 80007ea:	4018      	ands	r0, r3
 80007ec:	3801      	subs	r0, #1
 80007ee:	e026      	b.n	800083e <__lesf2+0x86>
 80007f0:	2d00      	cmp	r5, #0
 80007f2:	d0f0      	beq.n	80007d6 <__lesf2+0x1e>
 80007f4:	2002      	movs	r0, #2
 80007f6:	e022      	b.n	800083e <__lesf2+0x86>
 80007f8:	2c00      	cmp	r4, #0
 80007fa:	d1fb      	bne.n	80007f4 <__lesf2+0x3c>
 80007fc:	28ff      	cmp	r0, #255	; 0xff
 80007fe:	d01f      	beq.n	8000840 <__lesf2+0x88>
 8000800:	2800      	cmp	r0, #0
 8000802:	d11f      	bne.n	8000844 <__lesf2+0x8c>
 8000804:	2d00      	cmp	r5, #0
 8000806:	d11d      	bne.n	8000844 <__lesf2+0x8c>
 8000808:	2002      	movs	r0, #2
 800080a:	3b01      	subs	r3, #1
 800080c:	4018      	ands	r0, r3
 800080e:	3801      	subs	r0, #1
 8000810:	e015      	b.n	800083e <__lesf2+0x86>
 8000812:	2c00      	cmp	r4, #0
 8000814:	d00e      	beq.n	8000834 <__lesf2+0x7c>
 8000816:	428b      	cmp	r3, r1
 8000818:	d1e5      	bne.n	80007e6 <__lesf2+0x2e>
 800081a:	2200      	movs	r2, #0
 800081c:	4290      	cmp	r0, r2
 800081e:	dc04      	bgt.n	800082a <__lesf2+0x72>
 8000820:	42ac      	cmp	r4, r5
 8000822:	d8e0      	bhi.n	80007e6 <__lesf2+0x2e>
 8000824:	2000      	movs	r0, #0
 8000826:	42ac      	cmp	r4, r5
 8000828:	d209      	bcs.n	800083e <__lesf2+0x86>
 800082a:	1e58      	subs	r0, r3, #1
 800082c:	2301      	movs	r3, #1
 800082e:	4398      	bics	r0, r3
 8000830:	3001      	adds	r0, #1
 8000832:	e004      	b.n	800083e <__lesf2+0x86>
 8000834:	2301      	movs	r3, #1
 8000836:	3901      	subs	r1, #1
 8000838:	4399      	bics	r1, r3
 800083a:	0008      	movs	r0, r1
 800083c:	3001      	adds	r0, #1
 800083e:	bd30      	pop	{r4, r5, pc}
 8000840:	2d00      	cmp	r5, #0
 8000842:	d1d7      	bne.n	80007f4 <__lesf2+0x3c>
 8000844:	428b      	cmp	r3, r1
 8000846:	d1ce      	bne.n	80007e6 <__lesf2+0x2e>
 8000848:	4282      	cmp	r2, r0
 800084a:	dde7      	ble.n	800081c <__lesf2+0x64>
 800084c:	2102      	movs	r1, #2
 800084e:	1e58      	subs	r0, r3, #1
 8000850:	4008      	ands	r0, r1
 8000852:	3801      	subs	r0, #1
 8000854:	e7f3      	b.n	800083e <__lesf2+0x86>
 8000856:	46c0      	nop			; (mov r8, r8)

08000858 <__aeabi_fmul>:
 8000858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800085a:	464e      	mov	r6, r9
 800085c:	4657      	mov	r7, sl
 800085e:	4645      	mov	r5, r8
 8000860:	46de      	mov	lr, fp
 8000862:	b5e0      	push	{r5, r6, r7, lr}
 8000864:	0243      	lsls	r3, r0, #9
 8000866:	0a5b      	lsrs	r3, r3, #9
 8000868:	0045      	lsls	r5, r0, #1
 800086a:	b083      	sub	sp, #12
 800086c:	1c0f      	adds	r7, r1, #0
 800086e:	4699      	mov	r9, r3
 8000870:	0e2d      	lsrs	r5, r5, #24
 8000872:	0fc6      	lsrs	r6, r0, #31
 8000874:	2d00      	cmp	r5, #0
 8000876:	d057      	beq.n	8000928 <__aeabi_fmul+0xd0>
 8000878:	2dff      	cmp	r5, #255	; 0xff
 800087a:	d024      	beq.n	80008c6 <__aeabi_fmul+0x6e>
 800087c:	2080      	movs	r0, #128	; 0x80
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	04c0      	lsls	r0, r0, #19
 8000882:	4318      	orrs	r0, r3
 8000884:	2300      	movs	r3, #0
 8000886:	4681      	mov	r9, r0
 8000888:	469a      	mov	sl, r3
 800088a:	469b      	mov	fp, r3
 800088c:	3d7f      	subs	r5, #127	; 0x7f
 800088e:	027c      	lsls	r4, r7, #9
 8000890:	007a      	lsls	r2, r7, #1
 8000892:	0ffb      	lsrs	r3, r7, #31
 8000894:	0a64      	lsrs	r4, r4, #9
 8000896:	0e12      	lsrs	r2, r2, #24
 8000898:	4698      	mov	r8, r3
 800089a:	d023      	beq.n	80008e4 <__aeabi_fmul+0x8c>
 800089c:	2aff      	cmp	r2, #255	; 0xff
 800089e:	d04b      	beq.n	8000938 <__aeabi_fmul+0xe0>
 80008a0:	00e3      	lsls	r3, r4, #3
 80008a2:	2480      	movs	r4, #128	; 0x80
 80008a4:	2000      	movs	r0, #0
 80008a6:	04e4      	lsls	r4, r4, #19
 80008a8:	3a7f      	subs	r2, #127	; 0x7f
 80008aa:	431c      	orrs	r4, r3
 80008ac:	18ad      	adds	r5, r5, r2
 80008ae:	1c6b      	adds	r3, r5, #1
 80008b0:	4647      	mov	r7, r8
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	4653      	mov	r3, sl
 80008b6:	4077      	eors	r7, r6
 80008b8:	003a      	movs	r2, r7
 80008ba:	2b0f      	cmp	r3, #15
 80008bc:	d848      	bhi.n	8000950 <__aeabi_fmul+0xf8>
 80008be:	497d      	ldr	r1, [pc, #500]	; (8000ab4 <__aeabi_fmul+0x25c>)
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	58cb      	ldr	r3, [r1, r3]
 80008c4:	469f      	mov	pc, r3
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d000      	beq.n	80008cc <__aeabi_fmul+0x74>
 80008ca:	e085      	b.n	80009d8 <__aeabi_fmul+0x180>
 80008cc:	3308      	adds	r3, #8
 80008ce:	469a      	mov	sl, r3
 80008d0:	3b06      	subs	r3, #6
 80008d2:	469b      	mov	fp, r3
 80008d4:	027c      	lsls	r4, r7, #9
 80008d6:	007a      	lsls	r2, r7, #1
 80008d8:	0ffb      	lsrs	r3, r7, #31
 80008da:	25ff      	movs	r5, #255	; 0xff
 80008dc:	0a64      	lsrs	r4, r4, #9
 80008de:	0e12      	lsrs	r2, r2, #24
 80008e0:	4698      	mov	r8, r3
 80008e2:	d1db      	bne.n	800089c <__aeabi_fmul+0x44>
 80008e4:	2c00      	cmp	r4, #0
 80008e6:	d000      	beq.n	80008ea <__aeabi_fmul+0x92>
 80008e8:	e090      	b.n	8000a0c <__aeabi_fmul+0x1b4>
 80008ea:	4652      	mov	r2, sl
 80008ec:	2301      	movs	r3, #1
 80008ee:	431a      	orrs	r2, r3
 80008f0:	4692      	mov	sl, r2
 80008f2:	2001      	movs	r0, #1
 80008f4:	e7db      	b.n	80008ae <__aeabi_fmul+0x56>
 80008f6:	464c      	mov	r4, r9
 80008f8:	4658      	mov	r0, fp
 80008fa:	0017      	movs	r7, r2
 80008fc:	2802      	cmp	r0, #2
 80008fe:	d024      	beq.n	800094a <__aeabi_fmul+0xf2>
 8000900:	2803      	cmp	r0, #3
 8000902:	d100      	bne.n	8000906 <__aeabi_fmul+0xae>
 8000904:	e0cf      	b.n	8000aa6 <__aeabi_fmul+0x24e>
 8000906:	2200      	movs	r2, #0
 8000908:	2300      	movs	r3, #0
 800090a:	2801      	cmp	r0, #1
 800090c:	d14d      	bne.n	80009aa <__aeabi_fmul+0x152>
 800090e:	0258      	lsls	r0, r3, #9
 8000910:	05d2      	lsls	r2, r2, #23
 8000912:	0a40      	lsrs	r0, r0, #9
 8000914:	07ff      	lsls	r7, r7, #31
 8000916:	4310      	orrs	r0, r2
 8000918:	4338      	orrs	r0, r7
 800091a:	b003      	add	sp, #12
 800091c:	bc3c      	pop	{r2, r3, r4, r5}
 800091e:	4690      	mov	r8, r2
 8000920:	4699      	mov	r9, r3
 8000922:	46a2      	mov	sl, r4
 8000924:	46ab      	mov	fp, r5
 8000926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000928:	2b00      	cmp	r3, #0
 800092a:	d15b      	bne.n	80009e4 <__aeabi_fmul+0x18c>
 800092c:	2304      	movs	r3, #4
 800092e:	469a      	mov	sl, r3
 8000930:	3b03      	subs	r3, #3
 8000932:	2500      	movs	r5, #0
 8000934:	469b      	mov	fp, r3
 8000936:	e7aa      	b.n	800088e <__aeabi_fmul+0x36>
 8000938:	35ff      	adds	r5, #255	; 0xff
 800093a:	2c00      	cmp	r4, #0
 800093c:	d160      	bne.n	8000a00 <__aeabi_fmul+0x1a8>
 800093e:	4652      	mov	r2, sl
 8000940:	2302      	movs	r3, #2
 8000942:	431a      	orrs	r2, r3
 8000944:	4692      	mov	sl, r2
 8000946:	2002      	movs	r0, #2
 8000948:	e7b1      	b.n	80008ae <__aeabi_fmul+0x56>
 800094a:	22ff      	movs	r2, #255	; 0xff
 800094c:	2300      	movs	r3, #0
 800094e:	e7de      	b.n	800090e <__aeabi_fmul+0xb6>
 8000950:	464b      	mov	r3, r9
 8000952:	0c1b      	lsrs	r3, r3, #16
 8000954:	469c      	mov	ip, r3
 8000956:	464b      	mov	r3, r9
 8000958:	0426      	lsls	r6, r4, #16
 800095a:	0c36      	lsrs	r6, r6, #16
 800095c:	0418      	lsls	r0, r3, #16
 800095e:	4661      	mov	r1, ip
 8000960:	0033      	movs	r3, r6
 8000962:	0c22      	lsrs	r2, r4, #16
 8000964:	4664      	mov	r4, ip
 8000966:	0c00      	lsrs	r0, r0, #16
 8000968:	4343      	muls	r3, r0
 800096a:	434e      	muls	r6, r1
 800096c:	4350      	muls	r0, r2
 800096e:	4354      	muls	r4, r2
 8000970:	1980      	adds	r0, r0, r6
 8000972:	0c1a      	lsrs	r2, r3, #16
 8000974:	1812      	adds	r2, r2, r0
 8000976:	4296      	cmp	r6, r2
 8000978:	d903      	bls.n	8000982 <__aeabi_fmul+0x12a>
 800097a:	2180      	movs	r1, #128	; 0x80
 800097c:	0249      	lsls	r1, r1, #9
 800097e:	468c      	mov	ip, r1
 8000980:	4464      	add	r4, ip
 8000982:	041b      	lsls	r3, r3, #16
 8000984:	0c1b      	lsrs	r3, r3, #16
 8000986:	0410      	lsls	r0, r2, #16
 8000988:	18c0      	adds	r0, r0, r3
 800098a:	0183      	lsls	r3, r0, #6
 800098c:	1e5e      	subs	r6, r3, #1
 800098e:	41b3      	sbcs	r3, r6
 8000990:	0e80      	lsrs	r0, r0, #26
 8000992:	4318      	orrs	r0, r3
 8000994:	0c13      	lsrs	r3, r2, #16
 8000996:	191b      	adds	r3, r3, r4
 8000998:	019b      	lsls	r3, r3, #6
 800099a:	4303      	orrs	r3, r0
 800099c:	001c      	movs	r4, r3
 800099e:	0123      	lsls	r3, r4, #4
 80009a0:	d579      	bpl.n	8000a96 <__aeabi_fmul+0x23e>
 80009a2:	2301      	movs	r3, #1
 80009a4:	0862      	lsrs	r2, r4, #1
 80009a6:	401c      	ands	r4, r3
 80009a8:	4314      	orrs	r4, r2
 80009aa:	9a01      	ldr	r2, [sp, #4]
 80009ac:	327f      	adds	r2, #127	; 0x7f
 80009ae:	2a00      	cmp	r2, #0
 80009b0:	dd4d      	ble.n	8000a4e <__aeabi_fmul+0x1f6>
 80009b2:	0763      	lsls	r3, r4, #29
 80009b4:	d004      	beq.n	80009c0 <__aeabi_fmul+0x168>
 80009b6:	230f      	movs	r3, #15
 80009b8:	4023      	ands	r3, r4
 80009ba:	2b04      	cmp	r3, #4
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fmul+0x168>
 80009be:	3404      	adds	r4, #4
 80009c0:	0123      	lsls	r3, r4, #4
 80009c2:	d503      	bpl.n	80009cc <__aeabi_fmul+0x174>
 80009c4:	4b3c      	ldr	r3, [pc, #240]	; (8000ab8 <__aeabi_fmul+0x260>)
 80009c6:	9a01      	ldr	r2, [sp, #4]
 80009c8:	401c      	ands	r4, r3
 80009ca:	3280      	adds	r2, #128	; 0x80
 80009cc:	2afe      	cmp	r2, #254	; 0xfe
 80009ce:	dcbc      	bgt.n	800094a <__aeabi_fmul+0xf2>
 80009d0:	01a3      	lsls	r3, r4, #6
 80009d2:	0a5b      	lsrs	r3, r3, #9
 80009d4:	b2d2      	uxtb	r2, r2
 80009d6:	e79a      	b.n	800090e <__aeabi_fmul+0xb6>
 80009d8:	230c      	movs	r3, #12
 80009da:	469a      	mov	sl, r3
 80009dc:	3b09      	subs	r3, #9
 80009de:	25ff      	movs	r5, #255	; 0xff
 80009e0:	469b      	mov	fp, r3
 80009e2:	e754      	b.n	800088e <__aeabi_fmul+0x36>
 80009e4:	0018      	movs	r0, r3
 80009e6:	f001 f8f1 	bl	8001bcc <__clzsi2>
 80009ea:	464a      	mov	r2, r9
 80009ec:	1f43      	subs	r3, r0, #5
 80009ee:	2576      	movs	r5, #118	; 0x76
 80009f0:	409a      	lsls	r2, r3
 80009f2:	2300      	movs	r3, #0
 80009f4:	426d      	negs	r5, r5
 80009f6:	4691      	mov	r9, r2
 80009f8:	1a2d      	subs	r5, r5, r0
 80009fa:	469a      	mov	sl, r3
 80009fc:	469b      	mov	fp, r3
 80009fe:	e746      	b.n	800088e <__aeabi_fmul+0x36>
 8000a00:	4652      	mov	r2, sl
 8000a02:	2303      	movs	r3, #3
 8000a04:	431a      	orrs	r2, r3
 8000a06:	4692      	mov	sl, r2
 8000a08:	2003      	movs	r0, #3
 8000a0a:	e750      	b.n	80008ae <__aeabi_fmul+0x56>
 8000a0c:	0020      	movs	r0, r4
 8000a0e:	f001 f8dd 	bl	8001bcc <__clzsi2>
 8000a12:	1f43      	subs	r3, r0, #5
 8000a14:	1a2d      	subs	r5, r5, r0
 8000a16:	409c      	lsls	r4, r3
 8000a18:	3d76      	subs	r5, #118	; 0x76
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	e747      	b.n	80008ae <__aeabi_fmul+0x56>
 8000a1e:	2380      	movs	r3, #128	; 0x80
 8000a20:	2700      	movs	r7, #0
 8000a22:	03db      	lsls	r3, r3, #15
 8000a24:	22ff      	movs	r2, #255	; 0xff
 8000a26:	e772      	b.n	800090e <__aeabi_fmul+0xb6>
 8000a28:	4642      	mov	r2, r8
 8000a2a:	e766      	b.n	80008fa <__aeabi_fmul+0xa2>
 8000a2c:	464c      	mov	r4, r9
 8000a2e:	0032      	movs	r2, r6
 8000a30:	4658      	mov	r0, fp
 8000a32:	e762      	b.n	80008fa <__aeabi_fmul+0xa2>
 8000a34:	2380      	movs	r3, #128	; 0x80
 8000a36:	464a      	mov	r2, r9
 8000a38:	03db      	lsls	r3, r3, #15
 8000a3a:	421a      	tst	r2, r3
 8000a3c:	d022      	beq.n	8000a84 <__aeabi_fmul+0x22c>
 8000a3e:	421c      	tst	r4, r3
 8000a40:	d120      	bne.n	8000a84 <__aeabi_fmul+0x22c>
 8000a42:	4323      	orrs	r3, r4
 8000a44:	025b      	lsls	r3, r3, #9
 8000a46:	0a5b      	lsrs	r3, r3, #9
 8000a48:	4647      	mov	r7, r8
 8000a4a:	22ff      	movs	r2, #255	; 0xff
 8000a4c:	e75f      	b.n	800090e <__aeabi_fmul+0xb6>
 8000a4e:	2301      	movs	r3, #1
 8000a50:	1a9a      	subs	r2, r3, r2
 8000a52:	2a1b      	cmp	r2, #27
 8000a54:	dc21      	bgt.n	8000a9a <__aeabi_fmul+0x242>
 8000a56:	0023      	movs	r3, r4
 8000a58:	9901      	ldr	r1, [sp, #4]
 8000a5a:	40d3      	lsrs	r3, r2
 8000a5c:	319e      	adds	r1, #158	; 0x9e
 8000a5e:	408c      	lsls	r4, r1
 8000a60:	001a      	movs	r2, r3
 8000a62:	0023      	movs	r3, r4
 8000a64:	1e5c      	subs	r4, r3, #1
 8000a66:	41a3      	sbcs	r3, r4
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	075a      	lsls	r2, r3, #29
 8000a6c:	d004      	beq.n	8000a78 <__aeabi_fmul+0x220>
 8000a6e:	220f      	movs	r2, #15
 8000a70:	401a      	ands	r2, r3
 8000a72:	2a04      	cmp	r2, #4
 8000a74:	d000      	beq.n	8000a78 <__aeabi_fmul+0x220>
 8000a76:	3304      	adds	r3, #4
 8000a78:	015a      	lsls	r2, r3, #5
 8000a7a:	d411      	bmi.n	8000aa0 <__aeabi_fmul+0x248>
 8000a7c:	019b      	lsls	r3, r3, #6
 8000a7e:	0a5b      	lsrs	r3, r3, #9
 8000a80:	2200      	movs	r2, #0
 8000a82:	e744      	b.n	800090e <__aeabi_fmul+0xb6>
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	464a      	mov	r2, r9
 8000a88:	03db      	lsls	r3, r3, #15
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	025b      	lsls	r3, r3, #9
 8000a8e:	0a5b      	lsrs	r3, r3, #9
 8000a90:	0037      	movs	r7, r6
 8000a92:	22ff      	movs	r2, #255	; 0xff
 8000a94:	e73b      	b.n	800090e <__aeabi_fmul+0xb6>
 8000a96:	9501      	str	r5, [sp, #4]
 8000a98:	e787      	b.n	80009aa <__aeabi_fmul+0x152>
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	e736      	b.n	800090e <__aeabi_fmul+0xb6>
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	e733      	b.n	800090e <__aeabi_fmul+0xb6>
 8000aa6:	2380      	movs	r3, #128	; 0x80
 8000aa8:	03db      	lsls	r3, r3, #15
 8000aaa:	4323      	orrs	r3, r4
 8000aac:	025b      	lsls	r3, r3, #9
 8000aae:	0a5b      	lsrs	r3, r3, #9
 8000ab0:	22ff      	movs	r2, #255	; 0xff
 8000ab2:	e72c      	b.n	800090e <__aeabi_fmul+0xb6>
 8000ab4:	0800c4f0 	.word	0x0800c4f0
 8000ab8:	f7ffffff 	.word	0xf7ffffff

08000abc <__aeabi_fsub>:
 8000abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000abe:	4647      	mov	r7, r8
 8000ac0:	46ce      	mov	lr, r9
 8000ac2:	0044      	lsls	r4, r0, #1
 8000ac4:	0fc2      	lsrs	r2, r0, #31
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	0247      	lsls	r7, r0, #9
 8000aca:	0248      	lsls	r0, r1, #9
 8000acc:	0a40      	lsrs	r0, r0, #9
 8000ace:	4684      	mov	ip, r0
 8000ad0:	4666      	mov	r6, ip
 8000ad2:	0048      	lsls	r0, r1, #1
 8000ad4:	0a7f      	lsrs	r7, r7, #9
 8000ad6:	0e24      	lsrs	r4, r4, #24
 8000ad8:	00f6      	lsls	r6, r6, #3
 8000ada:	0025      	movs	r5, r4
 8000adc:	4690      	mov	r8, r2
 8000ade:	00fb      	lsls	r3, r7, #3
 8000ae0:	0e00      	lsrs	r0, r0, #24
 8000ae2:	0fc9      	lsrs	r1, r1, #31
 8000ae4:	46b1      	mov	r9, r6
 8000ae6:	28ff      	cmp	r0, #255	; 0xff
 8000ae8:	d100      	bne.n	8000aec <__aeabi_fsub+0x30>
 8000aea:	e085      	b.n	8000bf8 <__aeabi_fsub+0x13c>
 8000aec:	2601      	movs	r6, #1
 8000aee:	4071      	eors	r1, r6
 8000af0:	1a26      	subs	r6, r4, r0
 8000af2:	4291      	cmp	r1, r2
 8000af4:	d057      	beq.n	8000ba6 <__aeabi_fsub+0xea>
 8000af6:	2e00      	cmp	r6, #0
 8000af8:	dd43      	ble.n	8000b82 <__aeabi_fsub+0xc6>
 8000afa:	2800      	cmp	r0, #0
 8000afc:	d000      	beq.n	8000b00 <__aeabi_fsub+0x44>
 8000afe:	e07f      	b.n	8000c00 <__aeabi_fsub+0x144>
 8000b00:	4649      	mov	r1, r9
 8000b02:	2900      	cmp	r1, #0
 8000b04:	d100      	bne.n	8000b08 <__aeabi_fsub+0x4c>
 8000b06:	e0aa      	b.n	8000c5e <__aeabi_fsub+0x1a2>
 8000b08:	3e01      	subs	r6, #1
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d000      	beq.n	8000b10 <__aeabi_fsub+0x54>
 8000b0e:	e0f7      	b.n	8000d00 <__aeabi_fsub+0x244>
 8000b10:	1a5b      	subs	r3, r3, r1
 8000b12:	015a      	lsls	r2, r3, #5
 8000b14:	d400      	bmi.n	8000b18 <__aeabi_fsub+0x5c>
 8000b16:	e08b      	b.n	8000c30 <__aeabi_fsub+0x174>
 8000b18:	019b      	lsls	r3, r3, #6
 8000b1a:	099c      	lsrs	r4, r3, #6
 8000b1c:	0020      	movs	r0, r4
 8000b1e:	f001 f855 	bl	8001bcc <__clzsi2>
 8000b22:	3805      	subs	r0, #5
 8000b24:	4084      	lsls	r4, r0
 8000b26:	4285      	cmp	r5, r0
 8000b28:	dd00      	ble.n	8000b2c <__aeabi_fsub+0x70>
 8000b2a:	e0d3      	b.n	8000cd4 <__aeabi_fsub+0x218>
 8000b2c:	1b45      	subs	r5, r0, r5
 8000b2e:	0023      	movs	r3, r4
 8000b30:	2020      	movs	r0, #32
 8000b32:	3501      	adds	r5, #1
 8000b34:	40eb      	lsrs	r3, r5
 8000b36:	1b45      	subs	r5, r0, r5
 8000b38:	40ac      	lsls	r4, r5
 8000b3a:	1e62      	subs	r2, r4, #1
 8000b3c:	4194      	sbcs	r4, r2
 8000b3e:	4323      	orrs	r3, r4
 8000b40:	2407      	movs	r4, #7
 8000b42:	2500      	movs	r5, #0
 8000b44:	401c      	ands	r4, r3
 8000b46:	2201      	movs	r2, #1
 8000b48:	4641      	mov	r1, r8
 8000b4a:	400a      	ands	r2, r1
 8000b4c:	2c00      	cmp	r4, #0
 8000b4e:	d004      	beq.n	8000b5a <__aeabi_fsub+0x9e>
 8000b50:	210f      	movs	r1, #15
 8000b52:	4019      	ands	r1, r3
 8000b54:	2904      	cmp	r1, #4
 8000b56:	d000      	beq.n	8000b5a <__aeabi_fsub+0x9e>
 8000b58:	3304      	adds	r3, #4
 8000b5a:	0159      	lsls	r1, r3, #5
 8000b5c:	d400      	bmi.n	8000b60 <__aeabi_fsub+0xa4>
 8000b5e:	e080      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000b60:	3501      	adds	r5, #1
 8000b62:	b2ec      	uxtb	r4, r5
 8000b64:	2dff      	cmp	r5, #255	; 0xff
 8000b66:	d000      	beq.n	8000b6a <__aeabi_fsub+0xae>
 8000b68:	e0a3      	b.n	8000cb2 <__aeabi_fsub+0x1f6>
 8000b6a:	24ff      	movs	r4, #255	; 0xff
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	025b      	lsls	r3, r3, #9
 8000b70:	05e4      	lsls	r4, r4, #23
 8000b72:	0a58      	lsrs	r0, r3, #9
 8000b74:	07d2      	lsls	r2, r2, #31
 8000b76:	4320      	orrs	r0, r4
 8000b78:	4310      	orrs	r0, r2
 8000b7a:	bc0c      	pop	{r2, r3}
 8000b7c:	4690      	mov	r8, r2
 8000b7e:	4699      	mov	r9, r3
 8000b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	d174      	bne.n	8000c70 <__aeabi_fsub+0x1b4>
 8000b86:	1c60      	adds	r0, r4, #1
 8000b88:	b2c0      	uxtb	r0, r0
 8000b8a:	2801      	cmp	r0, #1
 8000b8c:	dc00      	bgt.n	8000b90 <__aeabi_fsub+0xd4>
 8000b8e:	e0a7      	b.n	8000ce0 <__aeabi_fsub+0x224>
 8000b90:	464a      	mov	r2, r9
 8000b92:	1a9c      	subs	r4, r3, r2
 8000b94:	0162      	lsls	r2, r4, #5
 8000b96:	d500      	bpl.n	8000b9a <__aeabi_fsub+0xde>
 8000b98:	e0b6      	b.n	8000d08 <__aeabi_fsub+0x24c>
 8000b9a:	2c00      	cmp	r4, #0
 8000b9c:	d1be      	bne.n	8000b1c <__aeabi_fsub+0x60>
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2400      	movs	r4, #0
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	e7e3      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	dc00      	bgt.n	8000bac <__aeabi_fsub+0xf0>
 8000baa:	e085      	b.n	8000cb8 <__aeabi_fsub+0x1fc>
 8000bac:	2800      	cmp	r0, #0
 8000bae:	d046      	beq.n	8000c3e <__aeabi_fsub+0x182>
 8000bb0:	2cff      	cmp	r4, #255	; 0xff
 8000bb2:	d049      	beq.n	8000c48 <__aeabi_fsub+0x18c>
 8000bb4:	2280      	movs	r2, #128	; 0x80
 8000bb6:	4648      	mov	r0, r9
 8000bb8:	04d2      	lsls	r2, r2, #19
 8000bba:	4310      	orrs	r0, r2
 8000bbc:	4681      	mov	r9, r0
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	2e1b      	cmp	r6, #27
 8000bc2:	dc09      	bgt.n	8000bd8 <__aeabi_fsub+0x11c>
 8000bc4:	2020      	movs	r0, #32
 8000bc6:	464c      	mov	r4, r9
 8000bc8:	1b80      	subs	r0, r0, r6
 8000bca:	4084      	lsls	r4, r0
 8000bcc:	464a      	mov	r2, r9
 8000bce:	0020      	movs	r0, r4
 8000bd0:	40f2      	lsrs	r2, r6
 8000bd2:	1e44      	subs	r4, r0, #1
 8000bd4:	41a0      	sbcs	r0, r4
 8000bd6:	4302      	orrs	r2, r0
 8000bd8:	189b      	adds	r3, r3, r2
 8000bda:	015a      	lsls	r2, r3, #5
 8000bdc:	d528      	bpl.n	8000c30 <__aeabi_fsub+0x174>
 8000bde:	3501      	adds	r5, #1
 8000be0:	2dff      	cmp	r5, #255	; 0xff
 8000be2:	d100      	bne.n	8000be6 <__aeabi_fsub+0x12a>
 8000be4:	e0a8      	b.n	8000d38 <__aeabi_fsub+0x27c>
 8000be6:	2201      	movs	r2, #1
 8000be8:	2407      	movs	r4, #7
 8000bea:	4994      	ldr	r1, [pc, #592]	; (8000e3c <__aeabi_fsub+0x380>)
 8000bec:	401a      	ands	r2, r3
 8000bee:	085b      	lsrs	r3, r3, #1
 8000bf0:	400b      	ands	r3, r1
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	401c      	ands	r4, r3
 8000bf6:	e7a6      	b.n	8000b46 <__aeabi_fsub+0x8a>
 8000bf8:	2e00      	cmp	r6, #0
 8000bfa:	d000      	beq.n	8000bfe <__aeabi_fsub+0x142>
 8000bfc:	e778      	b.n	8000af0 <__aeabi_fsub+0x34>
 8000bfe:	e775      	b.n	8000aec <__aeabi_fsub+0x30>
 8000c00:	2cff      	cmp	r4, #255	; 0xff
 8000c02:	d054      	beq.n	8000cae <__aeabi_fsub+0x1f2>
 8000c04:	2280      	movs	r2, #128	; 0x80
 8000c06:	4649      	mov	r1, r9
 8000c08:	04d2      	lsls	r2, r2, #19
 8000c0a:	4311      	orrs	r1, r2
 8000c0c:	4689      	mov	r9, r1
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2e1b      	cmp	r6, #27
 8000c12:	dc09      	bgt.n	8000c28 <__aeabi_fsub+0x16c>
 8000c14:	2120      	movs	r1, #32
 8000c16:	4648      	mov	r0, r9
 8000c18:	1b89      	subs	r1, r1, r6
 8000c1a:	4088      	lsls	r0, r1
 8000c1c:	464a      	mov	r2, r9
 8000c1e:	0001      	movs	r1, r0
 8000c20:	40f2      	lsrs	r2, r6
 8000c22:	1e48      	subs	r0, r1, #1
 8000c24:	4181      	sbcs	r1, r0
 8000c26:	430a      	orrs	r2, r1
 8000c28:	1a9b      	subs	r3, r3, r2
 8000c2a:	015a      	lsls	r2, r3, #5
 8000c2c:	d500      	bpl.n	8000c30 <__aeabi_fsub+0x174>
 8000c2e:	e773      	b.n	8000b18 <__aeabi_fsub+0x5c>
 8000c30:	2201      	movs	r2, #1
 8000c32:	4641      	mov	r1, r8
 8000c34:	400a      	ands	r2, r1
 8000c36:	0759      	lsls	r1, r3, #29
 8000c38:	d000      	beq.n	8000c3c <__aeabi_fsub+0x180>
 8000c3a:	e789      	b.n	8000b50 <__aeabi_fsub+0x94>
 8000c3c:	e011      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000c3e:	4648      	mov	r0, r9
 8000c40:	2800      	cmp	r0, #0
 8000c42:	d158      	bne.n	8000cf6 <__aeabi_fsub+0x23a>
 8000c44:	2cff      	cmp	r4, #255	; 0xff
 8000c46:	d10c      	bne.n	8000c62 <__aeabi_fsub+0x1a6>
 8000c48:	08db      	lsrs	r3, r3, #3
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d100      	bne.n	8000c50 <__aeabi_fsub+0x194>
 8000c4e:	e78c      	b.n	8000b6a <__aeabi_fsub+0xae>
 8000c50:	2080      	movs	r0, #128	; 0x80
 8000c52:	03c0      	lsls	r0, r0, #15
 8000c54:	4303      	orrs	r3, r0
 8000c56:	025b      	lsls	r3, r3, #9
 8000c58:	0a5b      	lsrs	r3, r3, #9
 8000c5a:	24ff      	movs	r4, #255	; 0xff
 8000c5c:	e787      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000c5e:	2cff      	cmp	r4, #255	; 0xff
 8000c60:	d025      	beq.n	8000cae <__aeabi_fsub+0x1f2>
 8000c62:	08db      	lsrs	r3, r3, #3
 8000c64:	2dff      	cmp	r5, #255	; 0xff
 8000c66:	d0f0      	beq.n	8000c4a <__aeabi_fsub+0x18e>
 8000c68:	025b      	lsls	r3, r3, #9
 8000c6a:	0a5b      	lsrs	r3, r3, #9
 8000c6c:	b2ec      	uxtb	r4, r5
 8000c6e:	e77e      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000c70:	2c00      	cmp	r4, #0
 8000c72:	d04d      	beq.n	8000d10 <__aeabi_fsub+0x254>
 8000c74:	28ff      	cmp	r0, #255	; 0xff
 8000c76:	d018      	beq.n	8000caa <__aeabi_fsub+0x1ee>
 8000c78:	2480      	movs	r4, #128	; 0x80
 8000c7a:	04e4      	lsls	r4, r4, #19
 8000c7c:	4272      	negs	r2, r6
 8000c7e:	4323      	orrs	r3, r4
 8000c80:	2a1b      	cmp	r2, #27
 8000c82:	dd00      	ble.n	8000c86 <__aeabi_fsub+0x1ca>
 8000c84:	e0c4      	b.n	8000e10 <__aeabi_fsub+0x354>
 8000c86:	001c      	movs	r4, r3
 8000c88:	2520      	movs	r5, #32
 8000c8a:	40d4      	lsrs	r4, r2
 8000c8c:	1aaa      	subs	r2, r5, r2
 8000c8e:	4093      	lsls	r3, r2
 8000c90:	1e5a      	subs	r2, r3, #1
 8000c92:	4193      	sbcs	r3, r2
 8000c94:	4323      	orrs	r3, r4
 8000c96:	464a      	mov	r2, r9
 8000c98:	0005      	movs	r5, r0
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	4688      	mov	r8, r1
 8000c9e:	e738      	b.n	8000b12 <__aeabi_fsub+0x56>
 8000ca0:	1c72      	adds	r2, r6, #1
 8000ca2:	d0f8      	beq.n	8000c96 <__aeabi_fsub+0x1da>
 8000ca4:	43f2      	mvns	r2, r6
 8000ca6:	28ff      	cmp	r0, #255	; 0xff
 8000ca8:	d1ea      	bne.n	8000c80 <__aeabi_fsub+0x1c4>
 8000caa:	000a      	movs	r2, r1
 8000cac:	464b      	mov	r3, r9
 8000cae:	25ff      	movs	r5, #255	; 0xff
 8000cb0:	e7d7      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000cb2:	019b      	lsls	r3, r3, #6
 8000cb4:	0a5b      	lsrs	r3, r3, #9
 8000cb6:	e75a      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000cb8:	2e00      	cmp	r6, #0
 8000cba:	d141      	bne.n	8000d40 <__aeabi_fsub+0x284>
 8000cbc:	1c65      	adds	r5, r4, #1
 8000cbe:	b2e9      	uxtb	r1, r5
 8000cc0:	2901      	cmp	r1, #1
 8000cc2:	dd45      	ble.n	8000d50 <__aeabi_fsub+0x294>
 8000cc4:	2dff      	cmp	r5, #255	; 0xff
 8000cc6:	d100      	bne.n	8000cca <__aeabi_fsub+0x20e>
 8000cc8:	e74f      	b.n	8000b6a <__aeabi_fsub+0xae>
 8000cca:	2407      	movs	r4, #7
 8000ccc:	444b      	add	r3, r9
 8000cce:	085b      	lsrs	r3, r3, #1
 8000cd0:	401c      	ands	r4, r3
 8000cd2:	e738      	b.n	8000b46 <__aeabi_fsub+0x8a>
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	4b5a      	ldr	r3, [pc, #360]	; (8000e40 <__aeabi_fsub+0x384>)
 8000cd8:	1a2d      	subs	r5, r5, r0
 8000cda:	4023      	ands	r3, r4
 8000cdc:	4014      	ands	r4, r2
 8000cde:	e732      	b.n	8000b46 <__aeabi_fsub+0x8a>
 8000ce0:	2c00      	cmp	r4, #0
 8000ce2:	d11d      	bne.n	8000d20 <__aeabi_fsub+0x264>
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d17a      	bne.n	8000dde <__aeabi_fsub+0x322>
 8000ce8:	464b      	mov	r3, r9
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d100      	bne.n	8000cf0 <__aeabi_fsub+0x234>
 8000cee:	e091      	b.n	8000e14 <__aeabi_fsub+0x358>
 8000cf0:	000a      	movs	r2, r1
 8000cf2:	2500      	movs	r5, #0
 8000cf4:	e7b5      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000cf6:	3e01      	subs	r6, #1
 8000cf8:	2e00      	cmp	r6, #0
 8000cfa:	d119      	bne.n	8000d30 <__aeabi_fsub+0x274>
 8000cfc:	444b      	add	r3, r9
 8000cfe:	e76c      	b.n	8000bda <__aeabi_fsub+0x11e>
 8000d00:	2cff      	cmp	r4, #255	; 0xff
 8000d02:	d184      	bne.n	8000c0e <__aeabi_fsub+0x152>
 8000d04:	25ff      	movs	r5, #255	; 0xff
 8000d06:	e7ac      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000d08:	464a      	mov	r2, r9
 8000d0a:	4688      	mov	r8, r1
 8000d0c:	1ad4      	subs	r4, r2, r3
 8000d0e:	e705      	b.n	8000b1c <__aeabi_fsub+0x60>
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d1c5      	bne.n	8000ca0 <__aeabi_fsub+0x1e4>
 8000d14:	000a      	movs	r2, r1
 8000d16:	28ff      	cmp	r0, #255	; 0xff
 8000d18:	d0c8      	beq.n	8000cac <__aeabi_fsub+0x1f0>
 8000d1a:	0005      	movs	r5, r0
 8000d1c:	464b      	mov	r3, r9
 8000d1e:	e7a0      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d149      	bne.n	8000db8 <__aeabi_fsub+0x2fc>
 8000d24:	464b      	mov	r3, r9
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d077      	beq.n	8000e1a <__aeabi_fsub+0x35e>
 8000d2a:	000a      	movs	r2, r1
 8000d2c:	25ff      	movs	r5, #255	; 0xff
 8000d2e:	e798      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000d30:	2cff      	cmp	r4, #255	; 0xff
 8000d32:	d000      	beq.n	8000d36 <__aeabi_fsub+0x27a>
 8000d34:	e743      	b.n	8000bbe <__aeabi_fsub+0x102>
 8000d36:	e787      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000d38:	000a      	movs	r2, r1
 8000d3a:	24ff      	movs	r4, #255	; 0xff
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	e716      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000d40:	2c00      	cmp	r4, #0
 8000d42:	d115      	bne.n	8000d70 <__aeabi_fsub+0x2b4>
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d157      	bne.n	8000df8 <__aeabi_fsub+0x33c>
 8000d48:	28ff      	cmp	r0, #255	; 0xff
 8000d4a:	d1e6      	bne.n	8000d1a <__aeabi_fsub+0x25e>
 8000d4c:	464b      	mov	r3, r9
 8000d4e:	e77b      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000d50:	2c00      	cmp	r4, #0
 8000d52:	d120      	bne.n	8000d96 <__aeabi_fsub+0x2da>
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d057      	beq.n	8000e08 <__aeabi_fsub+0x34c>
 8000d58:	4649      	mov	r1, r9
 8000d5a:	2900      	cmp	r1, #0
 8000d5c:	d053      	beq.n	8000e06 <__aeabi_fsub+0x34a>
 8000d5e:	444b      	add	r3, r9
 8000d60:	015a      	lsls	r2, r3, #5
 8000d62:	d568      	bpl.n	8000e36 <__aeabi_fsub+0x37a>
 8000d64:	2407      	movs	r4, #7
 8000d66:	4a36      	ldr	r2, [pc, #216]	; (8000e40 <__aeabi_fsub+0x384>)
 8000d68:	401c      	ands	r4, r3
 8000d6a:	2501      	movs	r5, #1
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	e6ea      	b.n	8000b46 <__aeabi_fsub+0x8a>
 8000d70:	28ff      	cmp	r0, #255	; 0xff
 8000d72:	d0eb      	beq.n	8000d4c <__aeabi_fsub+0x290>
 8000d74:	2280      	movs	r2, #128	; 0x80
 8000d76:	04d2      	lsls	r2, r2, #19
 8000d78:	4276      	negs	r6, r6
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	2e1b      	cmp	r6, #27
 8000d7e:	dc53      	bgt.n	8000e28 <__aeabi_fsub+0x36c>
 8000d80:	2520      	movs	r5, #32
 8000d82:	1bad      	subs	r5, r5, r6
 8000d84:	001a      	movs	r2, r3
 8000d86:	40ab      	lsls	r3, r5
 8000d88:	40f2      	lsrs	r2, r6
 8000d8a:	1e5c      	subs	r4, r3, #1
 8000d8c:	41a3      	sbcs	r3, r4
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	444b      	add	r3, r9
 8000d92:	0005      	movs	r5, r0
 8000d94:	e721      	b.n	8000bda <__aeabi_fsub+0x11e>
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d0d8      	beq.n	8000d4c <__aeabi_fsub+0x290>
 8000d9a:	4649      	mov	r1, r9
 8000d9c:	2900      	cmp	r1, #0
 8000d9e:	d100      	bne.n	8000da2 <__aeabi_fsub+0x2e6>
 8000da0:	e752      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000da2:	2180      	movs	r1, #128	; 0x80
 8000da4:	03c9      	lsls	r1, r1, #15
 8000da6:	420f      	tst	r7, r1
 8000da8:	d100      	bne.n	8000dac <__aeabi_fsub+0x2f0>
 8000daa:	e74d      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000dac:	4660      	mov	r0, ip
 8000dae:	4208      	tst	r0, r1
 8000db0:	d000      	beq.n	8000db4 <__aeabi_fsub+0x2f8>
 8000db2:	e749      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000db4:	464b      	mov	r3, r9
 8000db6:	e747      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000db8:	4648      	mov	r0, r9
 8000dba:	25ff      	movs	r5, #255	; 0xff
 8000dbc:	2800      	cmp	r0, #0
 8000dbe:	d100      	bne.n	8000dc2 <__aeabi_fsub+0x306>
 8000dc0:	e74f      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000dc2:	2280      	movs	r2, #128	; 0x80
 8000dc4:	03d2      	lsls	r2, r2, #15
 8000dc6:	4217      	tst	r7, r2
 8000dc8:	d004      	beq.n	8000dd4 <__aeabi_fsub+0x318>
 8000dca:	4660      	mov	r0, ip
 8000dcc:	4210      	tst	r0, r2
 8000dce:	d101      	bne.n	8000dd4 <__aeabi_fsub+0x318>
 8000dd0:	464b      	mov	r3, r9
 8000dd2:	4688      	mov	r8, r1
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	4641      	mov	r1, r8
 8000dd8:	25ff      	movs	r5, #255	; 0xff
 8000dda:	400a      	ands	r2, r1
 8000ddc:	e741      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000dde:	4648      	mov	r0, r9
 8000de0:	2800      	cmp	r0, #0
 8000de2:	d01f      	beq.n	8000e24 <__aeabi_fsub+0x368>
 8000de4:	1a1a      	subs	r2, r3, r0
 8000de6:	0150      	lsls	r0, r2, #5
 8000de8:	d520      	bpl.n	8000e2c <__aeabi_fsub+0x370>
 8000dea:	464a      	mov	r2, r9
 8000dec:	2407      	movs	r4, #7
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	401c      	ands	r4, r3
 8000df2:	4688      	mov	r8, r1
 8000df4:	2500      	movs	r5, #0
 8000df6:	e6a6      	b.n	8000b46 <__aeabi_fsub+0x8a>
 8000df8:	1c74      	adds	r4, r6, #1
 8000dfa:	d0c9      	beq.n	8000d90 <__aeabi_fsub+0x2d4>
 8000dfc:	43f6      	mvns	r6, r6
 8000dfe:	28ff      	cmp	r0, #255	; 0xff
 8000e00:	d1bc      	bne.n	8000d7c <__aeabi_fsub+0x2c0>
 8000e02:	464b      	mov	r3, r9
 8000e04:	e720      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000e06:	4699      	mov	r9, r3
 8000e08:	464b      	mov	r3, r9
 8000e0a:	2500      	movs	r5, #0
 8000e0c:	08db      	lsrs	r3, r3, #3
 8000e0e:	e72b      	b.n	8000c68 <__aeabi_fsub+0x1ac>
 8000e10:	2301      	movs	r3, #1
 8000e12:	e740      	b.n	8000c96 <__aeabi_fsub+0x1da>
 8000e14:	2200      	movs	r2, #0
 8000e16:	2300      	movs	r3, #0
 8000e18:	e6a9      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	03db      	lsls	r3, r3, #15
 8000e20:	24ff      	movs	r4, #255	; 0xff
 8000e22:	e6a4      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000e24:	2500      	movs	r5, #0
 8000e26:	e71c      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e7b1      	b.n	8000d90 <__aeabi_fsub+0x2d4>
 8000e2c:	2a00      	cmp	r2, #0
 8000e2e:	d0f1      	beq.n	8000e14 <__aeabi_fsub+0x358>
 8000e30:	0013      	movs	r3, r2
 8000e32:	2500      	movs	r5, #0
 8000e34:	e6fc      	b.n	8000c30 <__aeabi_fsub+0x174>
 8000e36:	2500      	movs	r5, #0
 8000e38:	e6fa      	b.n	8000c30 <__aeabi_fsub+0x174>
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	7dffffff 	.word	0x7dffffff
 8000e40:	fbffffff 	.word	0xfbffffff

08000e44 <__aeabi_f2iz>:
 8000e44:	0241      	lsls	r1, r0, #9
 8000e46:	0042      	lsls	r2, r0, #1
 8000e48:	0fc3      	lsrs	r3, r0, #31
 8000e4a:	0a49      	lsrs	r1, r1, #9
 8000e4c:	0e12      	lsrs	r2, r2, #24
 8000e4e:	2000      	movs	r0, #0
 8000e50:	2a7e      	cmp	r2, #126	; 0x7e
 8000e52:	d90d      	bls.n	8000e70 <__aeabi_f2iz+0x2c>
 8000e54:	2a9d      	cmp	r2, #157	; 0x9d
 8000e56:	d80c      	bhi.n	8000e72 <__aeabi_f2iz+0x2e>
 8000e58:	2080      	movs	r0, #128	; 0x80
 8000e5a:	0400      	lsls	r0, r0, #16
 8000e5c:	4301      	orrs	r1, r0
 8000e5e:	2a95      	cmp	r2, #149	; 0x95
 8000e60:	dc0a      	bgt.n	8000e78 <__aeabi_f2iz+0x34>
 8000e62:	2096      	movs	r0, #150	; 0x96
 8000e64:	1a82      	subs	r2, r0, r2
 8000e66:	40d1      	lsrs	r1, r2
 8000e68:	4248      	negs	r0, r1
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d100      	bne.n	8000e70 <__aeabi_f2iz+0x2c>
 8000e6e:	0008      	movs	r0, r1
 8000e70:	4770      	bx	lr
 8000e72:	4a03      	ldr	r2, [pc, #12]	; (8000e80 <__aeabi_f2iz+0x3c>)
 8000e74:	1898      	adds	r0, r3, r2
 8000e76:	e7fb      	b.n	8000e70 <__aeabi_f2iz+0x2c>
 8000e78:	3a96      	subs	r2, #150	; 0x96
 8000e7a:	4091      	lsls	r1, r2
 8000e7c:	e7f4      	b.n	8000e68 <__aeabi_f2iz+0x24>
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	7fffffff 	.word	0x7fffffff

08000e84 <__aeabi_ui2f>:
 8000e84:	b570      	push	{r4, r5, r6, lr}
 8000e86:	1e04      	subs	r4, r0, #0
 8000e88:	d034      	beq.n	8000ef4 <__aeabi_ui2f+0x70>
 8000e8a:	f000 fe9f 	bl	8001bcc <__clzsi2>
 8000e8e:	229e      	movs	r2, #158	; 0x9e
 8000e90:	1a12      	subs	r2, r2, r0
 8000e92:	2a96      	cmp	r2, #150	; 0x96
 8000e94:	dc07      	bgt.n	8000ea6 <__aeabi_ui2f+0x22>
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	2808      	cmp	r0, #8
 8000e9a:	dd2e      	ble.n	8000efa <__aeabi_ui2f+0x76>
 8000e9c:	3808      	subs	r0, #8
 8000e9e:	4084      	lsls	r4, r0
 8000ea0:	0260      	lsls	r0, r4, #9
 8000ea2:	0a40      	lsrs	r0, r0, #9
 8000ea4:	e021      	b.n	8000eea <__aeabi_ui2f+0x66>
 8000ea6:	2a99      	cmp	r2, #153	; 0x99
 8000ea8:	dd09      	ble.n	8000ebe <__aeabi_ui2f+0x3a>
 8000eaa:	0003      	movs	r3, r0
 8000eac:	0021      	movs	r1, r4
 8000eae:	331b      	adds	r3, #27
 8000eb0:	4099      	lsls	r1, r3
 8000eb2:	1e4b      	subs	r3, r1, #1
 8000eb4:	4199      	sbcs	r1, r3
 8000eb6:	2305      	movs	r3, #5
 8000eb8:	1a1b      	subs	r3, r3, r0
 8000eba:	40dc      	lsrs	r4, r3
 8000ebc:	430c      	orrs	r4, r1
 8000ebe:	2805      	cmp	r0, #5
 8000ec0:	dd01      	ble.n	8000ec6 <__aeabi_ui2f+0x42>
 8000ec2:	1f43      	subs	r3, r0, #5
 8000ec4:	409c      	lsls	r4, r3
 8000ec6:	0023      	movs	r3, r4
 8000ec8:	490d      	ldr	r1, [pc, #52]	; (8000f00 <__aeabi_ui2f+0x7c>)
 8000eca:	400b      	ands	r3, r1
 8000ecc:	0765      	lsls	r5, r4, #29
 8000ece:	d009      	beq.n	8000ee4 <__aeabi_ui2f+0x60>
 8000ed0:	250f      	movs	r5, #15
 8000ed2:	402c      	ands	r4, r5
 8000ed4:	2c04      	cmp	r4, #4
 8000ed6:	d005      	beq.n	8000ee4 <__aeabi_ui2f+0x60>
 8000ed8:	3304      	adds	r3, #4
 8000eda:	015c      	lsls	r4, r3, #5
 8000edc:	d502      	bpl.n	8000ee4 <__aeabi_ui2f+0x60>
 8000ede:	229f      	movs	r2, #159	; 0x9f
 8000ee0:	400b      	ands	r3, r1
 8000ee2:	1a12      	subs	r2, r2, r0
 8000ee4:	019b      	lsls	r3, r3, #6
 8000ee6:	0a58      	lsrs	r0, r3, #9
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	0240      	lsls	r0, r0, #9
 8000eec:	05d2      	lsls	r2, r2, #23
 8000eee:	0a40      	lsrs	r0, r0, #9
 8000ef0:	4310      	orrs	r0, r2
 8000ef2:	bd70      	pop	{r4, r5, r6, pc}
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	e7f7      	b.n	8000eea <__aeabi_ui2f+0x66>
 8000efa:	0260      	lsls	r0, r4, #9
 8000efc:	0a40      	lsrs	r0, r0, #9
 8000efe:	e7f4      	b.n	8000eea <__aeabi_ui2f+0x66>
 8000f00:	fbffffff 	.word	0xfbffffff

08000f04 <__aeabi_ddiv>:
 8000f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f06:	4657      	mov	r7, sl
 8000f08:	46de      	mov	lr, fp
 8000f0a:	464e      	mov	r6, r9
 8000f0c:	4645      	mov	r5, r8
 8000f0e:	b5e0      	push	{r5, r6, r7, lr}
 8000f10:	4683      	mov	fp, r0
 8000f12:	0007      	movs	r7, r0
 8000f14:	030e      	lsls	r6, r1, #12
 8000f16:	0048      	lsls	r0, r1, #1
 8000f18:	b085      	sub	sp, #20
 8000f1a:	4692      	mov	sl, r2
 8000f1c:	001c      	movs	r4, r3
 8000f1e:	0b36      	lsrs	r6, r6, #12
 8000f20:	0d40      	lsrs	r0, r0, #21
 8000f22:	0fcd      	lsrs	r5, r1, #31
 8000f24:	2800      	cmp	r0, #0
 8000f26:	d100      	bne.n	8000f2a <__aeabi_ddiv+0x26>
 8000f28:	e09d      	b.n	8001066 <__aeabi_ddiv+0x162>
 8000f2a:	4b95      	ldr	r3, [pc, #596]	; (8001180 <__aeabi_ddiv+0x27c>)
 8000f2c:	4298      	cmp	r0, r3
 8000f2e:	d039      	beq.n	8000fa4 <__aeabi_ddiv+0xa0>
 8000f30:	2380      	movs	r3, #128	; 0x80
 8000f32:	00f6      	lsls	r6, r6, #3
 8000f34:	041b      	lsls	r3, r3, #16
 8000f36:	431e      	orrs	r6, r3
 8000f38:	4a92      	ldr	r2, [pc, #584]	; (8001184 <__aeabi_ddiv+0x280>)
 8000f3a:	0f7b      	lsrs	r3, r7, #29
 8000f3c:	4333      	orrs	r3, r6
 8000f3e:	4699      	mov	r9, r3
 8000f40:	4694      	mov	ip, r2
 8000f42:	0003      	movs	r3, r0
 8000f44:	4463      	add	r3, ip
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	2300      	movs	r3, #0
 8000f4a:	2600      	movs	r6, #0
 8000f4c:	00ff      	lsls	r7, r7, #3
 8000f4e:	9302      	str	r3, [sp, #8]
 8000f50:	0323      	lsls	r3, r4, #12
 8000f52:	0b1b      	lsrs	r3, r3, #12
 8000f54:	4698      	mov	r8, r3
 8000f56:	0063      	lsls	r3, r4, #1
 8000f58:	0fe4      	lsrs	r4, r4, #31
 8000f5a:	4652      	mov	r2, sl
 8000f5c:	0d5b      	lsrs	r3, r3, #21
 8000f5e:	9401      	str	r4, [sp, #4]
 8000f60:	d100      	bne.n	8000f64 <__aeabi_ddiv+0x60>
 8000f62:	e0b3      	b.n	80010cc <__aeabi_ddiv+0x1c8>
 8000f64:	4986      	ldr	r1, [pc, #536]	; (8001180 <__aeabi_ddiv+0x27c>)
 8000f66:	428b      	cmp	r3, r1
 8000f68:	d100      	bne.n	8000f6c <__aeabi_ddiv+0x68>
 8000f6a:	e09e      	b.n	80010aa <__aeabi_ddiv+0x1a6>
 8000f6c:	4642      	mov	r2, r8
 8000f6e:	00d1      	lsls	r1, r2, #3
 8000f70:	2280      	movs	r2, #128	; 0x80
 8000f72:	0412      	lsls	r2, r2, #16
 8000f74:	430a      	orrs	r2, r1
 8000f76:	4651      	mov	r1, sl
 8000f78:	0f49      	lsrs	r1, r1, #29
 8000f7a:	4311      	orrs	r1, r2
 8000f7c:	468b      	mov	fp, r1
 8000f7e:	4981      	ldr	r1, [pc, #516]	; (8001184 <__aeabi_ddiv+0x280>)
 8000f80:	4652      	mov	r2, sl
 8000f82:	468c      	mov	ip, r1
 8000f84:	9900      	ldr	r1, [sp, #0]
 8000f86:	4463      	add	r3, ip
 8000f88:	1acb      	subs	r3, r1, r3
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	00d2      	lsls	r2, r2, #3
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	002b      	movs	r3, r5
 8000f92:	4063      	eors	r3, r4
 8000f94:	469a      	mov	sl, r3
 8000f96:	2e0f      	cmp	r6, #15
 8000f98:	d900      	bls.n	8000f9c <__aeabi_ddiv+0x98>
 8000f9a:	e105      	b.n	80011a8 <__aeabi_ddiv+0x2a4>
 8000f9c:	4b7a      	ldr	r3, [pc, #488]	; (8001188 <__aeabi_ddiv+0x284>)
 8000f9e:	00b6      	lsls	r6, r6, #2
 8000fa0:	599b      	ldr	r3, [r3, r6]
 8000fa2:	469f      	mov	pc, r3
 8000fa4:	465b      	mov	r3, fp
 8000fa6:	4333      	orrs	r3, r6
 8000fa8:	4699      	mov	r9, r3
 8000faa:	d000      	beq.n	8000fae <__aeabi_ddiv+0xaa>
 8000fac:	e0b8      	b.n	8001120 <__aeabi_ddiv+0x21c>
 8000fae:	2302      	movs	r3, #2
 8000fb0:	2608      	movs	r6, #8
 8000fb2:	2700      	movs	r7, #0
 8000fb4:	9000      	str	r0, [sp, #0]
 8000fb6:	9302      	str	r3, [sp, #8]
 8000fb8:	e7ca      	b.n	8000f50 <__aeabi_ddiv+0x4c>
 8000fba:	46cb      	mov	fp, r9
 8000fbc:	003a      	movs	r2, r7
 8000fbe:	9902      	ldr	r1, [sp, #8]
 8000fc0:	9501      	str	r5, [sp, #4]
 8000fc2:	9b01      	ldr	r3, [sp, #4]
 8000fc4:	469a      	mov	sl, r3
 8000fc6:	2902      	cmp	r1, #2
 8000fc8:	d027      	beq.n	800101a <__aeabi_ddiv+0x116>
 8000fca:	2903      	cmp	r1, #3
 8000fcc:	d100      	bne.n	8000fd0 <__aeabi_ddiv+0xcc>
 8000fce:	e280      	b.n	80014d2 <__aeabi_ddiv+0x5ce>
 8000fd0:	2901      	cmp	r1, #1
 8000fd2:	d044      	beq.n	800105e <__aeabi_ddiv+0x15a>
 8000fd4:	496d      	ldr	r1, [pc, #436]	; (800118c <__aeabi_ddiv+0x288>)
 8000fd6:	9b00      	ldr	r3, [sp, #0]
 8000fd8:	468c      	mov	ip, r1
 8000fda:	4463      	add	r3, ip
 8000fdc:	001c      	movs	r4, r3
 8000fde:	2c00      	cmp	r4, #0
 8000fe0:	dd38      	ble.n	8001054 <__aeabi_ddiv+0x150>
 8000fe2:	0753      	lsls	r3, r2, #29
 8000fe4:	d000      	beq.n	8000fe8 <__aeabi_ddiv+0xe4>
 8000fe6:	e213      	b.n	8001410 <__aeabi_ddiv+0x50c>
 8000fe8:	08d2      	lsrs	r2, r2, #3
 8000fea:	465b      	mov	r3, fp
 8000fec:	01db      	lsls	r3, r3, #7
 8000fee:	d509      	bpl.n	8001004 <__aeabi_ddiv+0x100>
 8000ff0:	4659      	mov	r1, fp
 8000ff2:	4b67      	ldr	r3, [pc, #412]	; (8001190 <__aeabi_ddiv+0x28c>)
 8000ff4:	4019      	ands	r1, r3
 8000ff6:	468b      	mov	fp, r1
 8000ff8:	2180      	movs	r1, #128	; 0x80
 8000ffa:	00c9      	lsls	r1, r1, #3
 8000ffc:	468c      	mov	ip, r1
 8000ffe:	9b00      	ldr	r3, [sp, #0]
 8001000:	4463      	add	r3, ip
 8001002:	001c      	movs	r4, r3
 8001004:	4b63      	ldr	r3, [pc, #396]	; (8001194 <__aeabi_ddiv+0x290>)
 8001006:	429c      	cmp	r4, r3
 8001008:	dc07      	bgt.n	800101a <__aeabi_ddiv+0x116>
 800100a:	465b      	mov	r3, fp
 800100c:	0564      	lsls	r4, r4, #21
 800100e:	075f      	lsls	r7, r3, #29
 8001010:	025b      	lsls	r3, r3, #9
 8001012:	4317      	orrs	r7, r2
 8001014:	0b1b      	lsrs	r3, r3, #12
 8001016:	0d62      	lsrs	r2, r4, #21
 8001018:	e002      	b.n	8001020 <__aeabi_ddiv+0x11c>
 800101a:	2300      	movs	r3, #0
 800101c:	2700      	movs	r7, #0
 800101e:	4a58      	ldr	r2, [pc, #352]	; (8001180 <__aeabi_ddiv+0x27c>)
 8001020:	2100      	movs	r1, #0
 8001022:	031b      	lsls	r3, r3, #12
 8001024:	0b1c      	lsrs	r4, r3, #12
 8001026:	0d0b      	lsrs	r3, r1, #20
 8001028:	051b      	lsls	r3, r3, #20
 800102a:	4323      	orrs	r3, r4
 800102c:	0514      	lsls	r4, r2, #20
 800102e:	4a5a      	ldr	r2, [pc, #360]	; (8001198 <__aeabi_ddiv+0x294>)
 8001030:	0038      	movs	r0, r7
 8001032:	4013      	ands	r3, r2
 8001034:	431c      	orrs	r4, r3
 8001036:	4653      	mov	r3, sl
 8001038:	0064      	lsls	r4, r4, #1
 800103a:	07db      	lsls	r3, r3, #31
 800103c:	0864      	lsrs	r4, r4, #1
 800103e:	431c      	orrs	r4, r3
 8001040:	0021      	movs	r1, r4
 8001042:	b005      	add	sp, #20
 8001044:	bc3c      	pop	{r2, r3, r4, r5}
 8001046:	4690      	mov	r8, r2
 8001048:	4699      	mov	r9, r3
 800104a:	46a2      	mov	sl, r4
 800104c:	46ab      	mov	fp, r5
 800104e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001050:	2201      	movs	r2, #1
 8001052:	4252      	negs	r2, r2
 8001054:	2301      	movs	r3, #1
 8001056:	1b1b      	subs	r3, r3, r4
 8001058:	2b38      	cmp	r3, #56	; 0x38
 800105a:	dc00      	bgt.n	800105e <__aeabi_ddiv+0x15a>
 800105c:	e1ad      	b.n	80013ba <__aeabi_ddiv+0x4b6>
 800105e:	2200      	movs	r2, #0
 8001060:	2300      	movs	r3, #0
 8001062:	2700      	movs	r7, #0
 8001064:	e7dc      	b.n	8001020 <__aeabi_ddiv+0x11c>
 8001066:	465b      	mov	r3, fp
 8001068:	4333      	orrs	r3, r6
 800106a:	4699      	mov	r9, r3
 800106c:	d05e      	beq.n	800112c <__aeabi_ddiv+0x228>
 800106e:	2e00      	cmp	r6, #0
 8001070:	d100      	bne.n	8001074 <__aeabi_ddiv+0x170>
 8001072:	e18a      	b.n	800138a <__aeabi_ddiv+0x486>
 8001074:	0030      	movs	r0, r6
 8001076:	f000 fda9 	bl	8001bcc <__clzsi2>
 800107a:	0003      	movs	r3, r0
 800107c:	3b0b      	subs	r3, #11
 800107e:	2b1c      	cmp	r3, #28
 8001080:	dd00      	ble.n	8001084 <__aeabi_ddiv+0x180>
 8001082:	e17b      	b.n	800137c <__aeabi_ddiv+0x478>
 8001084:	221d      	movs	r2, #29
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	465a      	mov	r2, fp
 800108a:	0001      	movs	r1, r0
 800108c:	40da      	lsrs	r2, r3
 800108e:	3908      	subs	r1, #8
 8001090:	408e      	lsls	r6, r1
 8001092:	0013      	movs	r3, r2
 8001094:	465f      	mov	r7, fp
 8001096:	4333      	orrs	r3, r6
 8001098:	4699      	mov	r9, r3
 800109a:	408f      	lsls	r7, r1
 800109c:	4b3f      	ldr	r3, [pc, #252]	; (800119c <__aeabi_ddiv+0x298>)
 800109e:	2600      	movs	r6, #0
 80010a0:	1a1b      	subs	r3, r3, r0
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2300      	movs	r3, #0
 80010a6:	9302      	str	r3, [sp, #8]
 80010a8:	e752      	b.n	8000f50 <__aeabi_ddiv+0x4c>
 80010aa:	4641      	mov	r1, r8
 80010ac:	4653      	mov	r3, sl
 80010ae:	430b      	orrs	r3, r1
 80010b0:	493b      	ldr	r1, [pc, #236]	; (80011a0 <__aeabi_ddiv+0x29c>)
 80010b2:	469b      	mov	fp, r3
 80010b4:	468c      	mov	ip, r1
 80010b6:	9b00      	ldr	r3, [sp, #0]
 80010b8:	4463      	add	r3, ip
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	465b      	mov	r3, fp
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d13b      	bne.n	800113a <__aeabi_ddiv+0x236>
 80010c2:	2302      	movs	r3, #2
 80010c4:	2200      	movs	r2, #0
 80010c6:	431e      	orrs	r6, r3
 80010c8:	2102      	movs	r1, #2
 80010ca:	e761      	b.n	8000f90 <__aeabi_ddiv+0x8c>
 80010cc:	4643      	mov	r3, r8
 80010ce:	4313      	orrs	r3, r2
 80010d0:	469b      	mov	fp, r3
 80010d2:	d037      	beq.n	8001144 <__aeabi_ddiv+0x240>
 80010d4:	4643      	mov	r3, r8
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d100      	bne.n	80010dc <__aeabi_ddiv+0x1d8>
 80010da:	e162      	b.n	80013a2 <__aeabi_ddiv+0x49e>
 80010dc:	4640      	mov	r0, r8
 80010de:	f000 fd75 	bl	8001bcc <__clzsi2>
 80010e2:	0003      	movs	r3, r0
 80010e4:	3b0b      	subs	r3, #11
 80010e6:	2b1c      	cmp	r3, #28
 80010e8:	dd00      	ble.n	80010ec <__aeabi_ddiv+0x1e8>
 80010ea:	e153      	b.n	8001394 <__aeabi_ddiv+0x490>
 80010ec:	0002      	movs	r2, r0
 80010ee:	4641      	mov	r1, r8
 80010f0:	3a08      	subs	r2, #8
 80010f2:	4091      	lsls	r1, r2
 80010f4:	4688      	mov	r8, r1
 80010f6:	211d      	movs	r1, #29
 80010f8:	1acb      	subs	r3, r1, r3
 80010fa:	4651      	mov	r1, sl
 80010fc:	40d9      	lsrs	r1, r3
 80010fe:	000b      	movs	r3, r1
 8001100:	4641      	mov	r1, r8
 8001102:	430b      	orrs	r3, r1
 8001104:	469b      	mov	fp, r3
 8001106:	4653      	mov	r3, sl
 8001108:	4093      	lsls	r3, r2
 800110a:	001a      	movs	r2, r3
 800110c:	9b00      	ldr	r3, [sp, #0]
 800110e:	4925      	ldr	r1, [pc, #148]	; (80011a4 <__aeabi_ddiv+0x2a0>)
 8001110:	469c      	mov	ip, r3
 8001112:	4460      	add	r0, ip
 8001114:	0003      	movs	r3, r0
 8001116:	468c      	mov	ip, r1
 8001118:	4463      	add	r3, ip
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	2100      	movs	r1, #0
 800111e:	e737      	b.n	8000f90 <__aeabi_ddiv+0x8c>
 8001120:	2303      	movs	r3, #3
 8001122:	46b1      	mov	r9, r6
 8001124:	9000      	str	r0, [sp, #0]
 8001126:	260c      	movs	r6, #12
 8001128:	9302      	str	r3, [sp, #8]
 800112a:	e711      	b.n	8000f50 <__aeabi_ddiv+0x4c>
 800112c:	2300      	movs	r3, #0
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	3301      	adds	r3, #1
 8001132:	2604      	movs	r6, #4
 8001134:	2700      	movs	r7, #0
 8001136:	9302      	str	r3, [sp, #8]
 8001138:	e70a      	b.n	8000f50 <__aeabi_ddiv+0x4c>
 800113a:	2303      	movs	r3, #3
 800113c:	46c3      	mov	fp, r8
 800113e:	431e      	orrs	r6, r3
 8001140:	2103      	movs	r1, #3
 8001142:	e725      	b.n	8000f90 <__aeabi_ddiv+0x8c>
 8001144:	3301      	adds	r3, #1
 8001146:	431e      	orrs	r6, r3
 8001148:	2200      	movs	r2, #0
 800114a:	2101      	movs	r1, #1
 800114c:	e720      	b.n	8000f90 <__aeabi_ddiv+0x8c>
 800114e:	2300      	movs	r3, #0
 8001150:	469a      	mov	sl, r3
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	2700      	movs	r7, #0
 8001156:	031b      	lsls	r3, r3, #12
 8001158:	4a09      	ldr	r2, [pc, #36]	; (8001180 <__aeabi_ddiv+0x27c>)
 800115a:	e761      	b.n	8001020 <__aeabi_ddiv+0x11c>
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	4649      	mov	r1, r9
 8001160:	031b      	lsls	r3, r3, #12
 8001162:	4219      	tst	r1, r3
 8001164:	d100      	bne.n	8001168 <__aeabi_ddiv+0x264>
 8001166:	e0e2      	b.n	800132e <__aeabi_ddiv+0x42a>
 8001168:	4659      	mov	r1, fp
 800116a:	4219      	tst	r1, r3
 800116c:	d000      	beq.n	8001170 <__aeabi_ddiv+0x26c>
 800116e:	e0de      	b.n	800132e <__aeabi_ddiv+0x42a>
 8001170:	430b      	orrs	r3, r1
 8001172:	031b      	lsls	r3, r3, #12
 8001174:	0017      	movs	r7, r2
 8001176:	0b1b      	lsrs	r3, r3, #12
 8001178:	46a2      	mov	sl, r4
 800117a:	4a01      	ldr	r2, [pc, #4]	; (8001180 <__aeabi_ddiv+0x27c>)
 800117c:	e750      	b.n	8001020 <__aeabi_ddiv+0x11c>
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	000007ff 	.word	0x000007ff
 8001184:	fffffc01 	.word	0xfffffc01
 8001188:	0800c530 	.word	0x0800c530
 800118c:	000003ff 	.word	0x000003ff
 8001190:	feffffff 	.word	0xfeffffff
 8001194:	000007fe 	.word	0x000007fe
 8001198:	800fffff 	.word	0x800fffff
 800119c:	fffffc0d 	.word	0xfffffc0d
 80011a0:	fffff801 	.word	0xfffff801
 80011a4:	000003f3 	.word	0x000003f3
 80011a8:	45d9      	cmp	r9, fp
 80011aa:	d900      	bls.n	80011ae <__aeabi_ddiv+0x2aa>
 80011ac:	e0cb      	b.n	8001346 <__aeabi_ddiv+0x442>
 80011ae:	d100      	bne.n	80011b2 <__aeabi_ddiv+0x2ae>
 80011b0:	e0c6      	b.n	8001340 <__aeabi_ddiv+0x43c>
 80011b2:	003c      	movs	r4, r7
 80011b4:	4648      	mov	r0, r9
 80011b6:	2700      	movs	r7, #0
 80011b8:	9b00      	ldr	r3, [sp, #0]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	465b      	mov	r3, fp
 80011c0:	0e16      	lsrs	r6, r2, #24
 80011c2:	021b      	lsls	r3, r3, #8
 80011c4:	431e      	orrs	r6, r3
 80011c6:	0213      	lsls	r3, r2, #8
 80011c8:	4698      	mov	r8, r3
 80011ca:	0433      	lsls	r3, r6, #16
 80011cc:	0c1b      	lsrs	r3, r3, #16
 80011ce:	4699      	mov	r9, r3
 80011d0:	0c31      	lsrs	r1, r6, #16
 80011d2:	9101      	str	r1, [sp, #4]
 80011d4:	f7ff f826 	bl	8000224 <__aeabi_uidivmod>
 80011d8:	464a      	mov	r2, r9
 80011da:	4342      	muls	r2, r0
 80011dc:	040b      	lsls	r3, r1, #16
 80011de:	0c21      	lsrs	r1, r4, #16
 80011e0:	0005      	movs	r5, r0
 80011e2:	4319      	orrs	r1, r3
 80011e4:	428a      	cmp	r2, r1
 80011e6:	d907      	bls.n	80011f8 <__aeabi_ddiv+0x2f4>
 80011e8:	1989      	adds	r1, r1, r6
 80011ea:	3d01      	subs	r5, #1
 80011ec:	428e      	cmp	r6, r1
 80011ee:	d803      	bhi.n	80011f8 <__aeabi_ddiv+0x2f4>
 80011f0:	428a      	cmp	r2, r1
 80011f2:	d901      	bls.n	80011f8 <__aeabi_ddiv+0x2f4>
 80011f4:	1e85      	subs	r5, r0, #2
 80011f6:	1989      	adds	r1, r1, r6
 80011f8:	1a88      	subs	r0, r1, r2
 80011fa:	9901      	ldr	r1, [sp, #4]
 80011fc:	f7ff f812 	bl	8000224 <__aeabi_uidivmod>
 8001200:	0409      	lsls	r1, r1, #16
 8001202:	468c      	mov	ip, r1
 8001204:	464a      	mov	r2, r9
 8001206:	0421      	lsls	r1, r4, #16
 8001208:	4664      	mov	r4, ip
 800120a:	4342      	muls	r2, r0
 800120c:	0c09      	lsrs	r1, r1, #16
 800120e:	0003      	movs	r3, r0
 8001210:	4321      	orrs	r1, r4
 8001212:	428a      	cmp	r2, r1
 8001214:	d904      	bls.n	8001220 <__aeabi_ddiv+0x31c>
 8001216:	1989      	adds	r1, r1, r6
 8001218:	3b01      	subs	r3, #1
 800121a:	428e      	cmp	r6, r1
 800121c:	d800      	bhi.n	8001220 <__aeabi_ddiv+0x31c>
 800121e:	e0f1      	b.n	8001404 <__aeabi_ddiv+0x500>
 8001220:	042d      	lsls	r5, r5, #16
 8001222:	431d      	orrs	r5, r3
 8001224:	46ab      	mov	fp, r5
 8001226:	4643      	mov	r3, r8
 8001228:	1a89      	subs	r1, r1, r2
 800122a:	4642      	mov	r2, r8
 800122c:	0c28      	lsrs	r0, r5, #16
 800122e:	0412      	lsls	r2, r2, #16
 8001230:	0c1d      	lsrs	r5, r3, #16
 8001232:	465b      	mov	r3, fp
 8001234:	0c14      	lsrs	r4, r2, #16
 8001236:	0022      	movs	r2, r4
 8001238:	041b      	lsls	r3, r3, #16
 800123a:	0c1b      	lsrs	r3, r3, #16
 800123c:	435a      	muls	r2, r3
 800123e:	9403      	str	r4, [sp, #12]
 8001240:	436b      	muls	r3, r5
 8001242:	4344      	muls	r4, r0
 8001244:	9502      	str	r5, [sp, #8]
 8001246:	4368      	muls	r0, r5
 8001248:	191b      	adds	r3, r3, r4
 800124a:	0c15      	lsrs	r5, r2, #16
 800124c:	18eb      	adds	r3, r5, r3
 800124e:	429c      	cmp	r4, r3
 8001250:	d903      	bls.n	800125a <__aeabi_ddiv+0x356>
 8001252:	2480      	movs	r4, #128	; 0x80
 8001254:	0264      	lsls	r4, r4, #9
 8001256:	46a4      	mov	ip, r4
 8001258:	4460      	add	r0, ip
 800125a:	0c1c      	lsrs	r4, r3, #16
 800125c:	0415      	lsls	r5, r2, #16
 800125e:	041b      	lsls	r3, r3, #16
 8001260:	0c2d      	lsrs	r5, r5, #16
 8001262:	1820      	adds	r0, r4, r0
 8001264:	195d      	adds	r5, r3, r5
 8001266:	4281      	cmp	r1, r0
 8001268:	d377      	bcc.n	800135a <__aeabi_ddiv+0x456>
 800126a:	d073      	beq.n	8001354 <__aeabi_ddiv+0x450>
 800126c:	1a0c      	subs	r4, r1, r0
 800126e:	4aa2      	ldr	r2, [pc, #648]	; (80014f8 <__aeabi_ddiv+0x5f4>)
 8001270:	1b7d      	subs	r5, r7, r5
 8001272:	42af      	cmp	r7, r5
 8001274:	41bf      	sbcs	r7, r7
 8001276:	4694      	mov	ip, r2
 8001278:	9b00      	ldr	r3, [sp, #0]
 800127a:	427f      	negs	r7, r7
 800127c:	4463      	add	r3, ip
 800127e:	1be0      	subs	r0, r4, r7
 8001280:	001c      	movs	r4, r3
 8001282:	4286      	cmp	r6, r0
 8001284:	d100      	bne.n	8001288 <__aeabi_ddiv+0x384>
 8001286:	e0db      	b.n	8001440 <__aeabi_ddiv+0x53c>
 8001288:	9901      	ldr	r1, [sp, #4]
 800128a:	f7fe ffcb 	bl	8000224 <__aeabi_uidivmod>
 800128e:	464a      	mov	r2, r9
 8001290:	4342      	muls	r2, r0
 8001292:	040b      	lsls	r3, r1, #16
 8001294:	0c29      	lsrs	r1, r5, #16
 8001296:	0007      	movs	r7, r0
 8001298:	4319      	orrs	r1, r3
 800129a:	428a      	cmp	r2, r1
 800129c:	d907      	bls.n	80012ae <__aeabi_ddiv+0x3aa>
 800129e:	1989      	adds	r1, r1, r6
 80012a0:	3f01      	subs	r7, #1
 80012a2:	428e      	cmp	r6, r1
 80012a4:	d803      	bhi.n	80012ae <__aeabi_ddiv+0x3aa>
 80012a6:	428a      	cmp	r2, r1
 80012a8:	d901      	bls.n	80012ae <__aeabi_ddiv+0x3aa>
 80012aa:	1e87      	subs	r7, r0, #2
 80012ac:	1989      	adds	r1, r1, r6
 80012ae:	1a88      	subs	r0, r1, r2
 80012b0:	9901      	ldr	r1, [sp, #4]
 80012b2:	f7fe ffb7 	bl	8000224 <__aeabi_uidivmod>
 80012b6:	0409      	lsls	r1, r1, #16
 80012b8:	464a      	mov	r2, r9
 80012ba:	4689      	mov	r9, r1
 80012bc:	0429      	lsls	r1, r5, #16
 80012be:	464d      	mov	r5, r9
 80012c0:	4342      	muls	r2, r0
 80012c2:	0c09      	lsrs	r1, r1, #16
 80012c4:	0003      	movs	r3, r0
 80012c6:	4329      	orrs	r1, r5
 80012c8:	428a      	cmp	r2, r1
 80012ca:	d907      	bls.n	80012dc <__aeabi_ddiv+0x3d8>
 80012cc:	1989      	adds	r1, r1, r6
 80012ce:	3b01      	subs	r3, #1
 80012d0:	428e      	cmp	r6, r1
 80012d2:	d803      	bhi.n	80012dc <__aeabi_ddiv+0x3d8>
 80012d4:	428a      	cmp	r2, r1
 80012d6:	d901      	bls.n	80012dc <__aeabi_ddiv+0x3d8>
 80012d8:	1e83      	subs	r3, r0, #2
 80012da:	1989      	adds	r1, r1, r6
 80012dc:	043f      	lsls	r7, r7, #16
 80012de:	1a89      	subs	r1, r1, r2
 80012e0:	003a      	movs	r2, r7
 80012e2:	9f03      	ldr	r7, [sp, #12]
 80012e4:	431a      	orrs	r2, r3
 80012e6:	0038      	movs	r0, r7
 80012e8:	0413      	lsls	r3, r2, #16
 80012ea:	0c1b      	lsrs	r3, r3, #16
 80012ec:	4358      	muls	r0, r3
 80012ee:	4681      	mov	r9, r0
 80012f0:	9802      	ldr	r0, [sp, #8]
 80012f2:	0c15      	lsrs	r5, r2, #16
 80012f4:	436f      	muls	r7, r5
 80012f6:	4343      	muls	r3, r0
 80012f8:	4345      	muls	r5, r0
 80012fa:	4648      	mov	r0, r9
 80012fc:	0c00      	lsrs	r0, r0, #16
 80012fe:	4684      	mov	ip, r0
 8001300:	19db      	adds	r3, r3, r7
 8001302:	4463      	add	r3, ip
 8001304:	429f      	cmp	r7, r3
 8001306:	d903      	bls.n	8001310 <__aeabi_ddiv+0x40c>
 8001308:	2080      	movs	r0, #128	; 0x80
 800130a:	0240      	lsls	r0, r0, #9
 800130c:	4684      	mov	ip, r0
 800130e:	4465      	add	r5, ip
 8001310:	4648      	mov	r0, r9
 8001312:	0c1f      	lsrs	r7, r3, #16
 8001314:	0400      	lsls	r0, r0, #16
 8001316:	041b      	lsls	r3, r3, #16
 8001318:	0c00      	lsrs	r0, r0, #16
 800131a:	197d      	adds	r5, r7, r5
 800131c:	1818      	adds	r0, r3, r0
 800131e:	42a9      	cmp	r1, r5
 8001320:	d200      	bcs.n	8001324 <__aeabi_ddiv+0x420>
 8001322:	e084      	b.n	800142e <__aeabi_ddiv+0x52a>
 8001324:	d100      	bne.n	8001328 <__aeabi_ddiv+0x424>
 8001326:	e07f      	b.n	8001428 <__aeabi_ddiv+0x524>
 8001328:	2301      	movs	r3, #1
 800132a:	431a      	orrs	r2, r3
 800132c:	e657      	b.n	8000fde <__aeabi_ddiv+0xda>
 800132e:	2380      	movs	r3, #128	; 0x80
 8001330:	464a      	mov	r2, r9
 8001332:	031b      	lsls	r3, r3, #12
 8001334:	4313      	orrs	r3, r2
 8001336:	031b      	lsls	r3, r3, #12
 8001338:	0b1b      	lsrs	r3, r3, #12
 800133a:	46aa      	mov	sl, r5
 800133c:	4a6f      	ldr	r2, [pc, #444]	; (80014fc <__aeabi_ddiv+0x5f8>)
 800133e:	e66f      	b.n	8001020 <__aeabi_ddiv+0x11c>
 8001340:	42ba      	cmp	r2, r7
 8001342:	d900      	bls.n	8001346 <__aeabi_ddiv+0x442>
 8001344:	e735      	b.n	80011b2 <__aeabi_ddiv+0x2ae>
 8001346:	464b      	mov	r3, r9
 8001348:	07dc      	lsls	r4, r3, #31
 800134a:	0858      	lsrs	r0, r3, #1
 800134c:	087b      	lsrs	r3, r7, #1
 800134e:	431c      	orrs	r4, r3
 8001350:	07ff      	lsls	r7, r7, #31
 8001352:	e734      	b.n	80011be <__aeabi_ddiv+0x2ba>
 8001354:	2400      	movs	r4, #0
 8001356:	42af      	cmp	r7, r5
 8001358:	d289      	bcs.n	800126e <__aeabi_ddiv+0x36a>
 800135a:	4447      	add	r7, r8
 800135c:	4547      	cmp	r7, r8
 800135e:	41a4      	sbcs	r4, r4
 8001360:	465b      	mov	r3, fp
 8001362:	4264      	negs	r4, r4
 8001364:	19a4      	adds	r4, r4, r6
 8001366:	1864      	adds	r4, r4, r1
 8001368:	3b01      	subs	r3, #1
 800136a:	42a6      	cmp	r6, r4
 800136c:	d21e      	bcs.n	80013ac <__aeabi_ddiv+0x4a8>
 800136e:	42a0      	cmp	r0, r4
 8001370:	d86d      	bhi.n	800144e <__aeabi_ddiv+0x54a>
 8001372:	d100      	bne.n	8001376 <__aeabi_ddiv+0x472>
 8001374:	e0b6      	b.n	80014e4 <__aeabi_ddiv+0x5e0>
 8001376:	1a24      	subs	r4, r4, r0
 8001378:	469b      	mov	fp, r3
 800137a:	e778      	b.n	800126e <__aeabi_ddiv+0x36a>
 800137c:	0003      	movs	r3, r0
 800137e:	465a      	mov	r2, fp
 8001380:	3b28      	subs	r3, #40	; 0x28
 8001382:	409a      	lsls	r2, r3
 8001384:	2700      	movs	r7, #0
 8001386:	4691      	mov	r9, r2
 8001388:	e688      	b.n	800109c <__aeabi_ddiv+0x198>
 800138a:	4658      	mov	r0, fp
 800138c:	f000 fc1e 	bl	8001bcc <__clzsi2>
 8001390:	3020      	adds	r0, #32
 8001392:	e672      	b.n	800107a <__aeabi_ddiv+0x176>
 8001394:	0003      	movs	r3, r0
 8001396:	4652      	mov	r2, sl
 8001398:	3b28      	subs	r3, #40	; 0x28
 800139a:	409a      	lsls	r2, r3
 800139c:	4693      	mov	fp, r2
 800139e:	2200      	movs	r2, #0
 80013a0:	e6b4      	b.n	800110c <__aeabi_ddiv+0x208>
 80013a2:	4650      	mov	r0, sl
 80013a4:	f000 fc12 	bl	8001bcc <__clzsi2>
 80013a8:	3020      	adds	r0, #32
 80013aa:	e69a      	b.n	80010e2 <__aeabi_ddiv+0x1de>
 80013ac:	42a6      	cmp	r6, r4
 80013ae:	d1e2      	bne.n	8001376 <__aeabi_ddiv+0x472>
 80013b0:	45b8      	cmp	r8, r7
 80013b2:	d9dc      	bls.n	800136e <__aeabi_ddiv+0x46a>
 80013b4:	1a34      	subs	r4, r6, r0
 80013b6:	469b      	mov	fp, r3
 80013b8:	e759      	b.n	800126e <__aeabi_ddiv+0x36a>
 80013ba:	2b1f      	cmp	r3, #31
 80013bc:	dc65      	bgt.n	800148a <__aeabi_ddiv+0x586>
 80013be:	4c50      	ldr	r4, [pc, #320]	; (8001500 <__aeabi_ddiv+0x5fc>)
 80013c0:	9900      	ldr	r1, [sp, #0]
 80013c2:	46a4      	mov	ip, r4
 80013c4:	465c      	mov	r4, fp
 80013c6:	4461      	add	r1, ip
 80013c8:	0008      	movs	r0, r1
 80013ca:	408c      	lsls	r4, r1
 80013cc:	0011      	movs	r1, r2
 80013ce:	4082      	lsls	r2, r0
 80013d0:	40d9      	lsrs	r1, r3
 80013d2:	1e50      	subs	r0, r2, #1
 80013d4:	4182      	sbcs	r2, r0
 80013d6:	430c      	orrs	r4, r1
 80013d8:	4314      	orrs	r4, r2
 80013da:	465a      	mov	r2, fp
 80013dc:	40da      	lsrs	r2, r3
 80013de:	0013      	movs	r3, r2
 80013e0:	0762      	lsls	r2, r4, #29
 80013e2:	d009      	beq.n	80013f8 <__aeabi_ddiv+0x4f4>
 80013e4:	220f      	movs	r2, #15
 80013e6:	4022      	ands	r2, r4
 80013e8:	2a04      	cmp	r2, #4
 80013ea:	d005      	beq.n	80013f8 <__aeabi_ddiv+0x4f4>
 80013ec:	0022      	movs	r2, r4
 80013ee:	1d14      	adds	r4, r2, #4
 80013f0:	4294      	cmp	r4, r2
 80013f2:	4189      	sbcs	r1, r1
 80013f4:	4249      	negs	r1, r1
 80013f6:	185b      	adds	r3, r3, r1
 80013f8:	021a      	lsls	r2, r3, #8
 80013fa:	d562      	bpl.n	80014c2 <__aeabi_ddiv+0x5be>
 80013fc:	2201      	movs	r2, #1
 80013fe:	2300      	movs	r3, #0
 8001400:	2700      	movs	r7, #0
 8001402:	e60d      	b.n	8001020 <__aeabi_ddiv+0x11c>
 8001404:	428a      	cmp	r2, r1
 8001406:	d800      	bhi.n	800140a <__aeabi_ddiv+0x506>
 8001408:	e70a      	b.n	8001220 <__aeabi_ddiv+0x31c>
 800140a:	1e83      	subs	r3, r0, #2
 800140c:	1989      	adds	r1, r1, r6
 800140e:	e707      	b.n	8001220 <__aeabi_ddiv+0x31c>
 8001410:	230f      	movs	r3, #15
 8001412:	4013      	ands	r3, r2
 8001414:	2b04      	cmp	r3, #4
 8001416:	d100      	bne.n	800141a <__aeabi_ddiv+0x516>
 8001418:	e5e6      	b.n	8000fe8 <__aeabi_ddiv+0xe4>
 800141a:	1d17      	adds	r7, r2, #4
 800141c:	4297      	cmp	r7, r2
 800141e:	4192      	sbcs	r2, r2
 8001420:	4253      	negs	r3, r2
 8001422:	449b      	add	fp, r3
 8001424:	08fa      	lsrs	r2, r7, #3
 8001426:	e5e0      	b.n	8000fea <__aeabi_ddiv+0xe6>
 8001428:	2800      	cmp	r0, #0
 800142a:	d100      	bne.n	800142e <__aeabi_ddiv+0x52a>
 800142c:	e5d7      	b.n	8000fde <__aeabi_ddiv+0xda>
 800142e:	1871      	adds	r1, r6, r1
 8001430:	1e53      	subs	r3, r2, #1
 8001432:	42b1      	cmp	r1, r6
 8001434:	d327      	bcc.n	8001486 <__aeabi_ddiv+0x582>
 8001436:	42a9      	cmp	r1, r5
 8001438:	d315      	bcc.n	8001466 <__aeabi_ddiv+0x562>
 800143a:	d058      	beq.n	80014ee <__aeabi_ddiv+0x5ea>
 800143c:	001a      	movs	r2, r3
 800143e:	e773      	b.n	8001328 <__aeabi_ddiv+0x424>
 8001440:	2b00      	cmp	r3, #0
 8001442:	dc00      	bgt.n	8001446 <__aeabi_ddiv+0x542>
 8001444:	e604      	b.n	8001050 <__aeabi_ddiv+0x14c>
 8001446:	2301      	movs	r3, #1
 8001448:	2200      	movs	r2, #0
 800144a:	449b      	add	fp, r3
 800144c:	e5cd      	b.n	8000fea <__aeabi_ddiv+0xe6>
 800144e:	2302      	movs	r3, #2
 8001450:	4447      	add	r7, r8
 8001452:	4547      	cmp	r7, r8
 8001454:	4189      	sbcs	r1, r1
 8001456:	425b      	negs	r3, r3
 8001458:	469c      	mov	ip, r3
 800145a:	4249      	negs	r1, r1
 800145c:	1989      	adds	r1, r1, r6
 800145e:	190c      	adds	r4, r1, r4
 8001460:	44e3      	add	fp, ip
 8001462:	1a24      	subs	r4, r4, r0
 8001464:	e703      	b.n	800126e <__aeabi_ddiv+0x36a>
 8001466:	4643      	mov	r3, r8
 8001468:	005f      	lsls	r7, r3, #1
 800146a:	4547      	cmp	r7, r8
 800146c:	419b      	sbcs	r3, r3
 800146e:	46b8      	mov	r8, r7
 8001470:	425b      	negs	r3, r3
 8001472:	199e      	adds	r6, r3, r6
 8001474:	3a02      	subs	r2, #2
 8001476:	1989      	adds	r1, r1, r6
 8001478:	42a9      	cmp	r1, r5
 800147a:	d000      	beq.n	800147e <__aeabi_ddiv+0x57a>
 800147c:	e754      	b.n	8001328 <__aeabi_ddiv+0x424>
 800147e:	4540      	cmp	r0, r8
 8001480:	d000      	beq.n	8001484 <__aeabi_ddiv+0x580>
 8001482:	e751      	b.n	8001328 <__aeabi_ddiv+0x424>
 8001484:	e5ab      	b.n	8000fde <__aeabi_ddiv+0xda>
 8001486:	001a      	movs	r2, r3
 8001488:	e7f6      	b.n	8001478 <__aeabi_ddiv+0x574>
 800148a:	211f      	movs	r1, #31
 800148c:	465f      	mov	r7, fp
 800148e:	4249      	negs	r1, r1
 8001490:	1b0c      	subs	r4, r1, r4
 8001492:	40e7      	lsrs	r7, r4
 8001494:	2b20      	cmp	r3, #32
 8001496:	d007      	beq.n	80014a8 <__aeabi_ddiv+0x5a4>
 8001498:	491a      	ldr	r1, [pc, #104]	; (8001504 <__aeabi_ddiv+0x600>)
 800149a:	9b00      	ldr	r3, [sp, #0]
 800149c:	468c      	mov	ip, r1
 800149e:	4463      	add	r3, ip
 80014a0:	0018      	movs	r0, r3
 80014a2:	465b      	mov	r3, fp
 80014a4:	4083      	lsls	r3, r0
 80014a6:	431a      	orrs	r2, r3
 80014a8:	1e50      	subs	r0, r2, #1
 80014aa:	4182      	sbcs	r2, r0
 80014ac:	433a      	orrs	r2, r7
 80014ae:	2707      	movs	r7, #7
 80014b0:	2300      	movs	r3, #0
 80014b2:	4017      	ands	r7, r2
 80014b4:	d009      	beq.n	80014ca <__aeabi_ddiv+0x5c6>
 80014b6:	210f      	movs	r1, #15
 80014b8:	2300      	movs	r3, #0
 80014ba:	4011      	ands	r1, r2
 80014bc:	0014      	movs	r4, r2
 80014be:	2904      	cmp	r1, #4
 80014c0:	d195      	bne.n	80013ee <__aeabi_ddiv+0x4ea>
 80014c2:	0022      	movs	r2, r4
 80014c4:	075f      	lsls	r7, r3, #29
 80014c6:	025b      	lsls	r3, r3, #9
 80014c8:	0b1b      	lsrs	r3, r3, #12
 80014ca:	08d2      	lsrs	r2, r2, #3
 80014cc:	4317      	orrs	r7, r2
 80014ce:	2200      	movs	r2, #0
 80014d0:	e5a6      	b.n	8001020 <__aeabi_ddiv+0x11c>
 80014d2:	2380      	movs	r3, #128	; 0x80
 80014d4:	4659      	mov	r1, fp
 80014d6:	031b      	lsls	r3, r3, #12
 80014d8:	430b      	orrs	r3, r1
 80014da:	031b      	lsls	r3, r3, #12
 80014dc:	0017      	movs	r7, r2
 80014de:	0b1b      	lsrs	r3, r3, #12
 80014e0:	4a06      	ldr	r2, [pc, #24]	; (80014fc <__aeabi_ddiv+0x5f8>)
 80014e2:	e59d      	b.n	8001020 <__aeabi_ddiv+0x11c>
 80014e4:	42bd      	cmp	r5, r7
 80014e6:	d8b2      	bhi.n	800144e <__aeabi_ddiv+0x54a>
 80014e8:	469b      	mov	fp, r3
 80014ea:	2400      	movs	r4, #0
 80014ec:	e6bf      	b.n	800126e <__aeabi_ddiv+0x36a>
 80014ee:	4580      	cmp	r8, r0
 80014f0:	d3b9      	bcc.n	8001466 <__aeabi_ddiv+0x562>
 80014f2:	001a      	movs	r2, r3
 80014f4:	e7c3      	b.n	800147e <__aeabi_ddiv+0x57a>
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	000003ff 	.word	0x000003ff
 80014fc:	000007ff 	.word	0x000007ff
 8001500:	0000041e 	.word	0x0000041e
 8001504:	0000043e 	.word	0x0000043e

08001508 <__aeabi_dmul>:
 8001508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800150a:	4657      	mov	r7, sl
 800150c:	46de      	mov	lr, fp
 800150e:	464e      	mov	r6, r9
 8001510:	4645      	mov	r5, r8
 8001512:	b5e0      	push	{r5, r6, r7, lr}
 8001514:	4683      	mov	fp, r0
 8001516:	0006      	movs	r6, r0
 8001518:	030f      	lsls	r7, r1, #12
 800151a:	0048      	lsls	r0, r1, #1
 800151c:	b087      	sub	sp, #28
 800151e:	4692      	mov	sl, r2
 8001520:	001d      	movs	r5, r3
 8001522:	0b3f      	lsrs	r7, r7, #12
 8001524:	0d40      	lsrs	r0, r0, #21
 8001526:	0fcc      	lsrs	r4, r1, #31
 8001528:	2800      	cmp	r0, #0
 800152a:	d100      	bne.n	800152e <__aeabi_dmul+0x26>
 800152c:	e06f      	b.n	800160e <__aeabi_dmul+0x106>
 800152e:	4bde      	ldr	r3, [pc, #888]	; (80018a8 <__aeabi_dmul+0x3a0>)
 8001530:	4298      	cmp	r0, r3
 8001532:	d038      	beq.n	80015a6 <__aeabi_dmul+0x9e>
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	00ff      	lsls	r7, r7, #3
 8001538:	041b      	lsls	r3, r3, #16
 800153a:	431f      	orrs	r7, r3
 800153c:	0f73      	lsrs	r3, r6, #29
 800153e:	433b      	orrs	r3, r7
 8001540:	9301      	str	r3, [sp, #4]
 8001542:	4bda      	ldr	r3, [pc, #872]	; (80018ac <__aeabi_dmul+0x3a4>)
 8001544:	2700      	movs	r7, #0
 8001546:	4699      	mov	r9, r3
 8001548:	2300      	movs	r3, #0
 800154a:	469b      	mov	fp, r3
 800154c:	00f6      	lsls	r6, r6, #3
 800154e:	4481      	add	r9, r0
 8001550:	032b      	lsls	r3, r5, #12
 8001552:	0069      	lsls	r1, r5, #1
 8001554:	0b1b      	lsrs	r3, r3, #12
 8001556:	4652      	mov	r2, sl
 8001558:	4698      	mov	r8, r3
 800155a:	0d49      	lsrs	r1, r1, #21
 800155c:	0fed      	lsrs	r5, r5, #31
 800155e:	2900      	cmp	r1, #0
 8001560:	d100      	bne.n	8001564 <__aeabi_dmul+0x5c>
 8001562:	e085      	b.n	8001670 <__aeabi_dmul+0x168>
 8001564:	4bd0      	ldr	r3, [pc, #832]	; (80018a8 <__aeabi_dmul+0x3a0>)
 8001566:	4299      	cmp	r1, r3
 8001568:	d100      	bne.n	800156c <__aeabi_dmul+0x64>
 800156a:	e073      	b.n	8001654 <__aeabi_dmul+0x14c>
 800156c:	4643      	mov	r3, r8
 800156e:	00da      	lsls	r2, r3, #3
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	041b      	lsls	r3, r3, #16
 8001574:	4313      	orrs	r3, r2
 8001576:	4652      	mov	r2, sl
 8001578:	48cc      	ldr	r0, [pc, #816]	; (80018ac <__aeabi_dmul+0x3a4>)
 800157a:	0f52      	lsrs	r2, r2, #29
 800157c:	4684      	mov	ip, r0
 800157e:	4313      	orrs	r3, r2
 8001580:	4652      	mov	r2, sl
 8001582:	2000      	movs	r0, #0
 8001584:	4461      	add	r1, ip
 8001586:	00d2      	lsls	r2, r2, #3
 8001588:	4489      	add	r9, r1
 800158a:	0021      	movs	r1, r4
 800158c:	4069      	eors	r1, r5
 800158e:	9100      	str	r1, [sp, #0]
 8001590:	468c      	mov	ip, r1
 8001592:	2101      	movs	r1, #1
 8001594:	4449      	add	r1, r9
 8001596:	468a      	mov	sl, r1
 8001598:	2f0f      	cmp	r7, #15
 800159a:	d900      	bls.n	800159e <__aeabi_dmul+0x96>
 800159c:	e090      	b.n	80016c0 <__aeabi_dmul+0x1b8>
 800159e:	49c4      	ldr	r1, [pc, #784]	; (80018b0 <__aeabi_dmul+0x3a8>)
 80015a0:	00bf      	lsls	r7, r7, #2
 80015a2:	59cf      	ldr	r7, [r1, r7]
 80015a4:	46bf      	mov	pc, r7
 80015a6:	465b      	mov	r3, fp
 80015a8:	433b      	orrs	r3, r7
 80015aa:	9301      	str	r3, [sp, #4]
 80015ac:	d000      	beq.n	80015b0 <__aeabi_dmul+0xa8>
 80015ae:	e16a      	b.n	8001886 <__aeabi_dmul+0x37e>
 80015b0:	2302      	movs	r3, #2
 80015b2:	2708      	movs	r7, #8
 80015b4:	2600      	movs	r6, #0
 80015b6:	4681      	mov	r9, r0
 80015b8:	469b      	mov	fp, r3
 80015ba:	e7c9      	b.n	8001550 <__aeabi_dmul+0x48>
 80015bc:	0032      	movs	r2, r6
 80015be:	4658      	mov	r0, fp
 80015c0:	9b01      	ldr	r3, [sp, #4]
 80015c2:	4661      	mov	r1, ip
 80015c4:	9100      	str	r1, [sp, #0]
 80015c6:	2802      	cmp	r0, #2
 80015c8:	d100      	bne.n	80015cc <__aeabi_dmul+0xc4>
 80015ca:	e075      	b.n	80016b8 <__aeabi_dmul+0x1b0>
 80015cc:	2803      	cmp	r0, #3
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dmul+0xca>
 80015d0:	e1fe      	b.n	80019d0 <__aeabi_dmul+0x4c8>
 80015d2:	2801      	cmp	r0, #1
 80015d4:	d000      	beq.n	80015d8 <__aeabi_dmul+0xd0>
 80015d6:	e12c      	b.n	8001832 <__aeabi_dmul+0x32a>
 80015d8:	2300      	movs	r3, #0
 80015da:	2700      	movs	r7, #0
 80015dc:	2600      	movs	r6, #0
 80015de:	2500      	movs	r5, #0
 80015e0:	033f      	lsls	r7, r7, #12
 80015e2:	0d2a      	lsrs	r2, r5, #20
 80015e4:	0b3f      	lsrs	r7, r7, #12
 80015e6:	48b3      	ldr	r0, [pc, #716]	; (80018b4 <__aeabi_dmul+0x3ac>)
 80015e8:	0512      	lsls	r2, r2, #20
 80015ea:	433a      	orrs	r2, r7
 80015ec:	4002      	ands	r2, r0
 80015ee:	051b      	lsls	r3, r3, #20
 80015f0:	4313      	orrs	r3, r2
 80015f2:	9a00      	ldr	r2, [sp, #0]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	07d1      	lsls	r1, r2, #31
 80015f8:	085b      	lsrs	r3, r3, #1
 80015fa:	430b      	orrs	r3, r1
 80015fc:	0030      	movs	r0, r6
 80015fe:	0019      	movs	r1, r3
 8001600:	b007      	add	sp, #28
 8001602:	bc3c      	pop	{r2, r3, r4, r5}
 8001604:	4690      	mov	r8, r2
 8001606:	4699      	mov	r9, r3
 8001608:	46a2      	mov	sl, r4
 800160a:	46ab      	mov	fp, r5
 800160c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800160e:	465b      	mov	r3, fp
 8001610:	433b      	orrs	r3, r7
 8001612:	9301      	str	r3, [sp, #4]
 8001614:	d100      	bne.n	8001618 <__aeabi_dmul+0x110>
 8001616:	e12f      	b.n	8001878 <__aeabi_dmul+0x370>
 8001618:	2f00      	cmp	r7, #0
 800161a:	d100      	bne.n	800161e <__aeabi_dmul+0x116>
 800161c:	e1a5      	b.n	800196a <__aeabi_dmul+0x462>
 800161e:	0038      	movs	r0, r7
 8001620:	f000 fad4 	bl	8001bcc <__clzsi2>
 8001624:	0003      	movs	r3, r0
 8001626:	3b0b      	subs	r3, #11
 8001628:	2b1c      	cmp	r3, #28
 800162a:	dd00      	ble.n	800162e <__aeabi_dmul+0x126>
 800162c:	e196      	b.n	800195c <__aeabi_dmul+0x454>
 800162e:	221d      	movs	r2, #29
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	465a      	mov	r2, fp
 8001634:	0001      	movs	r1, r0
 8001636:	40da      	lsrs	r2, r3
 8001638:	465e      	mov	r6, fp
 800163a:	3908      	subs	r1, #8
 800163c:	408f      	lsls	r7, r1
 800163e:	0013      	movs	r3, r2
 8001640:	408e      	lsls	r6, r1
 8001642:	433b      	orrs	r3, r7
 8001644:	9301      	str	r3, [sp, #4]
 8001646:	4b9c      	ldr	r3, [pc, #624]	; (80018b8 <__aeabi_dmul+0x3b0>)
 8001648:	2700      	movs	r7, #0
 800164a:	1a1b      	subs	r3, r3, r0
 800164c:	4699      	mov	r9, r3
 800164e:	2300      	movs	r3, #0
 8001650:	469b      	mov	fp, r3
 8001652:	e77d      	b.n	8001550 <__aeabi_dmul+0x48>
 8001654:	4641      	mov	r1, r8
 8001656:	4653      	mov	r3, sl
 8001658:	430b      	orrs	r3, r1
 800165a:	4993      	ldr	r1, [pc, #588]	; (80018a8 <__aeabi_dmul+0x3a0>)
 800165c:	468c      	mov	ip, r1
 800165e:	44e1      	add	r9, ip
 8001660:	2b00      	cmp	r3, #0
 8001662:	d000      	beq.n	8001666 <__aeabi_dmul+0x15e>
 8001664:	e11a      	b.n	800189c <__aeabi_dmul+0x394>
 8001666:	2202      	movs	r2, #2
 8001668:	2002      	movs	r0, #2
 800166a:	4317      	orrs	r7, r2
 800166c:	2200      	movs	r2, #0
 800166e:	e78c      	b.n	800158a <__aeabi_dmul+0x82>
 8001670:	4313      	orrs	r3, r2
 8001672:	d100      	bne.n	8001676 <__aeabi_dmul+0x16e>
 8001674:	e10d      	b.n	8001892 <__aeabi_dmul+0x38a>
 8001676:	4643      	mov	r3, r8
 8001678:	2b00      	cmp	r3, #0
 800167a:	d100      	bne.n	800167e <__aeabi_dmul+0x176>
 800167c:	e181      	b.n	8001982 <__aeabi_dmul+0x47a>
 800167e:	4640      	mov	r0, r8
 8001680:	f000 faa4 	bl	8001bcc <__clzsi2>
 8001684:	0002      	movs	r2, r0
 8001686:	3a0b      	subs	r2, #11
 8001688:	2a1c      	cmp	r2, #28
 800168a:	dd00      	ble.n	800168e <__aeabi_dmul+0x186>
 800168c:	e172      	b.n	8001974 <__aeabi_dmul+0x46c>
 800168e:	0001      	movs	r1, r0
 8001690:	4643      	mov	r3, r8
 8001692:	3908      	subs	r1, #8
 8001694:	408b      	lsls	r3, r1
 8001696:	4698      	mov	r8, r3
 8001698:	231d      	movs	r3, #29
 800169a:	1a9a      	subs	r2, r3, r2
 800169c:	4653      	mov	r3, sl
 800169e:	40d3      	lsrs	r3, r2
 80016a0:	001a      	movs	r2, r3
 80016a2:	4643      	mov	r3, r8
 80016a4:	4313      	orrs	r3, r2
 80016a6:	4652      	mov	r2, sl
 80016a8:	408a      	lsls	r2, r1
 80016aa:	4649      	mov	r1, r9
 80016ac:	1a08      	subs	r0, r1, r0
 80016ae:	4982      	ldr	r1, [pc, #520]	; (80018b8 <__aeabi_dmul+0x3b0>)
 80016b0:	4689      	mov	r9, r1
 80016b2:	4481      	add	r9, r0
 80016b4:	2000      	movs	r0, #0
 80016b6:	e768      	b.n	800158a <__aeabi_dmul+0x82>
 80016b8:	4b7b      	ldr	r3, [pc, #492]	; (80018a8 <__aeabi_dmul+0x3a0>)
 80016ba:	2700      	movs	r7, #0
 80016bc:	2600      	movs	r6, #0
 80016be:	e78e      	b.n	80015de <__aeabi_dmul+0xd6>
 80016c0:	0c14      	lsrs	r4, r2, #16
 80016c2:	0412      	lsls	r2, r2, #16
 80016c4:	0c12      	lsrs	r2, r2, #16
 80016c6:	0011      	movs	r1, r2
 80016c8:	0c37      	lsrs	r7, r6, #16
 80016ca:	0436      	lsls	r6, r6, #16
 80016cc:	0c35      	lsrs	r5, r6, #16
 80016ce:	4379      	muls	r1, r7
 80016d0:	0028      	movs	r0, r5
 80016d2:	468c      	mov	ip, r1
 80016d4:	002e      	movs	r6, r5
 80016d6:	4360      	muls	r0, r4
 80016d8:	4460      	add	r0, ip
 80016da:	4683      	mov	fp, r0
 80016dc:	4356      	muls	r6, r2
 80016de:	0021      	movs	r1, r4
 80016e0:	0c30      	lsrs	r0, r6, #16
 80016e2:	4680      	mov	r8, r0
 80016e4:	4658      	mov	r0, fp
 80016e6:	4379      	muls	r1, r7
 80016e8:	4440      	add	r0, r8
 80016ea:	9102      	str	r1, [sp, #8]
 80016ec:	4584      	cmp	ip, r0
 80016ee:	d906      	bls.n	80016fe <__aeabi_dmul+0x1f6>
 80016f0:	4688      	mov	r8, r1
 80016f2:	2180      	movs	r1, #128	; 0x80
 80016f4:	0249      	lsls	r1, r1, #9
 80016f6:	468c      	mov	ip, r1
 80016f8:	44e0      	add	r8, ip
 80016fa:	4641      	mov	r1, r8
 80016fc:	9102      	str	r1, [sp, #8]
 80016fe:	0436      	lsls	r6, r6, #16
 8001700:	0c01      	lsrs	r1, r0, #16
 8001702:	0c36      	lsrs	r6, r6, #16
 8001704:	0400      	lsls	r0, r0, #16
 8001706:	468b      	mov	fp, r1
 8001708:	1981      	adds	r1, r0, r6
 800170a:	0c1e      	lsrs	r6, r3, #16
 800170c:	041b      	lsls	r3, r3, #16
 800170e:	0c1b      	lsrs	r3, r3, #16
 8001710:	9103      	str	r1, [sp, #12]
 8001712:	0019      	movs	r1, r3
 8001714:	4379      	muls	r1, r7
 8001716:	468c      	mov	ip, r1
 8001718:	0028      	movs	r0, r5
 800171a:	4375      	muls	r5, r6
 800171c:	4465      	add	r5, ip
 800171e:	46a8      	mov	r8, r5
 8001720:	4358      	muls	r0, r3
 8001722:	0c05      	lsrs	r5, r0, #16
 8001724:	4445      	add	r5, r8
 8001726:	4377      	muls	r7, r6
 8001728:	42a9      	cmp	r1, r5
 800172a:	d903      	bls.n	8001734 <__aeabi_dmul+0x22c>
 800172c:	2180      	movs	r1, #128	; 0x80
 800172e:	0249      	lsls	r1, r1, #9
 8001730:	468c      	mov	ip, r1
 8001732:	4467      	add	r7, ip
 8001734:	0c29      	lsrs	r1, r5, #16
 8001736:	468c      	mov	ip, r1
 8001738:	0039      	movs	r1, r7
 800173a:	0400      	lsls	r0, r0, #16
 800173c:	0c00      	lsrs	r0, r0, #16
 800173e:	042d      	lsls	r5, r5, #16
 8001740:	182d      	adds	r5, r5, r0
 8001742:	4461      	add	r1, ip
 8001744:	44ab      	add	fp, r5
 8001746:	9105      	str	r1, [sp, #20]
 8001748:	4659      	mov	r1, fp
 800174a:	9104      	str	r1, [sp, #16]
 800174c:	9901      	ldr	r1, [sp, #4]
 800174e:	040f      	lsls	r7, r1, #16
 8001750:	0c3f      	lsrs	r7, r7, #16
 8001752:	0c08      	lsrs	r0, r1, #16
 8001754:	0039      	movs	r1, r7
 8001756:	4351      	muls	r1, r2
 8001758:	4342      	muls	r2, r0
 800175a:	4690      	mov	r8, r2
 800175c:	0002      	movs	r2, r0
 800175e:	468c      	mov	ip, r1
 8001760:	0c09      	lsrs	r1, r1, #16
 8001762:	468b      	mov	fp, r1
 8001764:	4362      	muls	r2, r4
 8001766:	437c      	muls	r4, r7
 8001768:	4444      	add	r4, r8
 800176a:	445c      	add	r4, fp
 800176c:	45a0      	cmp	r8, r4
 800176e:	d903      	bls.n	8001778 <__aeabi_dmul+0x270>
 8001770:	2180      	movs	r1, #128	; 0x80
 8001772:	0249      	lsls	r1, r1, #9
 8001774:	4688      	mov	r8, r1
 8001776:	4442      	add	r2, r8
 8001778:	0c21      	lsrs	r1, r4, #16
 800177a:	4688      	mov	r8, r1
 800177c:	4661      	mov	r1, ip
 800177e:	0409      	lsls	r1, r1, #16
 8001780:	0c09      	lsrs	r1, r1, #16
 8001782:	468c      	mov	ip, r1
 8001784:	0039      	movs	r1, r7
 8001786:	4359      	muls	r1, r3
 8001788:	4343      	muls	r3, r0
 800178a:	4370      	muls	r0, r6
 800178c:	437e      	muls	r6, r7
 800178e:	0c0f      	lsrs	r7, r1, #16
 8001790:	18f6      	adds	r6, r6, r3
 8001792:	0424      	lsls	r4, r4, #16
 8001794:	19be      	adds	r6, r7, r6
 8001796:	4464      	add	r4, ip
 8001798:	4442      	add	r2, r8
 800179a:	468c      	mov	ip, r1
 800179c:	42b3      	cmp	r3, r6
 800179e:	d903      	bls.n	80017a8 <__aeabi_dmul+0x2a0>
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	025b      	lsls	r3, r3, #9
 80017a4:	4698      	mov	r8, r3
 80017a6:	4440      	add	r0, r8
 80017a8:	9b02      	ldr	r3, [sp, #8]
 80017aa:	4661      	mov	r1, ip
 80017ac:	4698      	mov	r8, r3
 80017ae:	9b04      	ldr	r3, [sp, #16]
 80017b0:	0437      	lsls	r7, r6, #16
 80017b2:	4443      	add	r3, r8
 80017b4:	469b      	mov	fp, r3
 80017b6:	45ab      	cmp	fp, r5
 80017b8:	41ad      	sbcs	r5, r5
 80017ba:	426b      	negs	r3, r5
 80017bc:	040d      	lsls	r5, r1, #16
 80017be:	9905      	ldr	r1, [sp, #20]
 80017c0:	0c2d      	lsrs	r5, r5, #16
 80017c2:	468c      	mov	ip, r1
 80017c4:	197f      	adds	r7, r7, r5
 80017c6:	4467      	add	r7, ip
 80017c8:	18fd      	adds	r5, r7, r3
 80017ca:	46a8      	mov	r8, r5
 80017cc:	465d      	mov	r5, fp
 80017ce:	192d      	adds	r5, r5, r4
 80017d0:	42a5      	cmp	r5, r4
 80017d2:	41a4      	sbcs	r4, r4
 80017d4:	4693      	mov	fp, r2
 80017d6:	4264      	negs	r4, r4
 80017d8:	46a4      	mov	ip, r4
 80017da:	44c3      	add	fp, r8
 80017dc:	44dc      	add	ip, fp
 80017de:	428f      	cmp	r7, r1
 80017e0:	41bf      	sbcs	r7, r7
 80017e2:	4598      	cmp	r8, r3
 80017e4:	419b      	sbcs	r3, r3
 80017e6:	4593      	cmp	fp, r2
 80017e8:	4192      	sbcs	r2, r2
 80017ea:	45a4      	cmp	ip, r4
 80017ec:	41a4      	sbcs	r4, r4
 80017ee:	425b      	negs	r3, r3
 80017f0:	427f      	negs	r7, r7
 80017f2:	431f      	orrs	r7, r3
 80017f4:	0c36      	lsrs	r6, r6, #16
 80017f6:	4252      	negs	r2, r2
 80017f8:	4264      	negs	r4, r4
 80017fa:	19bf      	adds	r7, r7, r6
 80017fc:	4322      	orrs	r2, r4
 80017fe:	18bf      	adds	r7, r7, r2
 8001800:	4662      	mov	r2, ip
 8001802:	1838      	adds	r0, r7, r0
 8001804:	0243      	lsls	r3, r0, #9
 8001806:	0dd2      	lsrs	r2, r2, #23
 8001808:	9903      	ldr	r1, [sp, #12]
 800180a:	4313      	orrs	r3, r2
 800180c:	026a      	lsls	r2, r5, #9
 800180e:	430a      	orrs	r2, r1
 8001810:	1e50      	subs	r0, r2, #1
 8001812:	4182      	sbcs	r2, r0
 8001814:	4661      	mov	r1, ip
 8001816:	0ded      	lsrs	r5, r5, #23
 8001818:	432a      	orrs	r2, r5
 800181a:	024e      	lsls	r6, r1, #9
 800181c:	4332      	orrs	r2, r6
 800181e:	01d9      	lsls	r1, r3, #7
 8001820:	d400      	bmi.n	8001824 <__aeabi_dmul+0x31c>
 8001822:	e0b3      	b.n	800198c <__aeabi_dmul+0x484>
 8001824:	2601      	movs	r6, #1
 8001826:	0850      	lsrs	r0, r2, #1
 8001828:	4032      	ands	r2, r6
 800182a:	4302      	orrs	r2, r0
 800182c:	07de      	lsls	r6, r3, #31
 800182e:	4332      	orrs	r2, r6
 8001830:	085b      	lsrs	r3, r3, #1
 8001832:	4c22      	ldr	r4, [pc, #136]	; (80018bc <__aeabi_dmul+0x3b4>)
 8001834:	4454      	add	r4, sl
 8001836:	2c00      	cmp	r4, #0
 8001838:	dd62      	ble.n	8001900 <__aeabi_dmul+0x3f8>
 800183a:	0751      	lsls	r1, r2, #29
 800183c:	d009      	beq.n	8001852 <__aeabi_dmul+0x34a>
 800183e:	200f      	movs	r0, #15
 8001840:	4010      	ands	r0, r2
 8001842:	2804      	cmp	r0, #4
 8001844:	d005      	beq.n	8001852 <__aeabi_dmul+0x34a>
 8001846:	1d10      	adds	r0, r2, #4
 8001848:	4290      	cmp	r0, r2
 800184a:	4192      	sbcs	r2, r2
 800184c:	4252      	negs	r2, r2
 800184e:	189b      	adds	r3, r3, r2
 8001850:	0002      	movs	r2, r0
 8001852:	01d9      	lsls	r1, r3, #7
 8001854:	d504      	bpl.n	8001860 <__aeabi_dmul+0x358>
 8001856:	2480      	movs	r4, #128	; 0x80
 8001858:	4819      	ldr	r0, [pc, #100]	; (80018c0 <__aeabi_dmul+0x3b8>)
 800185a:	00e4      	lsls	r4, r4, #3
 800185c:	4003      	ands	r3, r0
 800185e:	4454      	add	r4, sl
 8001860:	4818      	ldr	r0, [pc, #96]	; (80018c4 <__aeabi_dmul+0x3bc>)
 8001862:	4284      	cmp	r4, r0
 8001864:	dd00      	ble.n	8001868 <__aeabi_dmul+0x360>
 8001866:	e727      	b.n	80016b8 <__aeabi_dmul+0x1b0>
 8001868:	075e      	lsls	r6, r3, #29
 800186a:	025b      	lsls	r3, r3, #9
 800186c:	08d2      	lsrs	r2, r2, #3
 800186e:	0b1f      	lsrs	r7, r3, #12
 8001870:	0563      	lsls	r3, r4, #21
 8001872:	4316      	orrs	r6, r2
 8001874:	0d5b      	lsrs	r3, r3, #21
 8001876:	e6b2      	b.n	80015de <__aeabi_dmul+0xd6>
 8001878:	2300      	movs	r3, #0
 800187a:	4699      	mov	r9, r3
 800187c:	3301      	adds	r3, #1
 800187e:	2704      	movs	r7, #4
 8001880:	2600      	movs	r6, #0
 8001882:	469b      	mov	fp, r3
 8001884:	e664      	b.n	8001550 <__aeabi_dmul+0x48>
 8001886:	2303      	movs	r3, #3
 8001888:	9701      	str	r7, [sp, #4]
 800188a:	4681      	mov	r9, r0
 800188c:	270c      	movs	r7, #12
 800188e:	469b      	mov	fp, r3
 8001890:	e65e      	b.n	8001550 <__aeabi_dmul+0x48>
 8001892:	2201      	movs	r2, #1
 8001894:	2001      	movs	r0, #1
 8001896:	4317      	orrs	r7, r2
 8001898:	2200      	movs	r2, #0
 800189a:	e676      	b.n	800158a <__aeabi_dmul+0x82>
 800189c:	2303      	movs	r3, #3
 800189e:	2003      	movs	r0, #3
 80018a0:	431f      	orrs	r7, r3
 80018a2:	4643      	mov	r3, r8
 80018a4:	e671      	b.n	800158a <__aeabi_dmul+0x82>
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	000007ff 	.word	0x000007ff
 80018ac:	fffffc01 	.word	0xfffffc01
 80018b0:	0800c570 	.word	0x0800c570
 80018b4:	800fffff 	.word	0x800fffff
 80018b8:	fffffc0d 	.word	0xfffffc0d
 80018bc:	000003ff 	.word	0x000003ff
 80018c0:	feffffff 	.word	0xfeffffff
 80018c4:	000007fe 	.word	0x000007fe
 80018c8:	2300      	movs	r3, #0
 80018ca:	2780      	movs	r7, #128	; 0x80
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	033f      	lsls	r7, r7, #12
 80018d0:	2600      	movs	r6, #0
 80018d2:	4b43      	ldr	r3, [pc, #268]	; (80019e0 <__aeabi_dmul+0x4d8>)
 80018d4:	e683      	b.n	80015de <__aeabi_dmul+0xd6>
 80018d6:	9b01      	ldr	r3, [sp, #4]
 80018d8:	0032      	movs	r2, r6
 80018da:	46a4      	mov	ip, r4
 80018dc:	4658      	mov	r0, fp
 80018de:	e670      	b.n	80015c2 <__aeabi_dmul+0xba>
 80018e0:	46ac      	mov	ip, r5
 80018e2:	e66e      	b.n	80015c2 <__aeabi_dmul+0xba>
 80018e4:	2780      	movs	r7, #128	; 0x80
 80018e6:	9901      	ldr	r1, [sp, #4]
 80018e8:	033f      	lsls	r7, r7, #12
 80018ea:	4239      	tst	r1, r7
 80018ec:	d02d      	beq.n	800194a <__aeabi_dmul+0x442>
 80018ee:	423b      	tst	r3, r7
 80018f0:	d12b      	bne.n	800194a <__aeabi_dmul+0x442>
 80018f2:	431f      	orrs	r7, r3
 80018f4:	033f      	lsls	r7, r7, #12
 80018f6:	0b3f      	lsrs	r7, r7, #12
 80018f8:	9500      	str	r5, [sp, #0]
 80018fa:	0016      	movs	r6, r2
 80018fc:	4b38      	ldr	r3, [pc, #224]	; (80019e0 <__aeabi_dmul+0x4d8>)
 80018fe:	e66e      	b.n	80015de <__aeabi_dmul+0xd6>
 8001900:	2501      	movs	r5, #1
 8001902:	1b2d      	subs	r5, r5, r4
 8001904:	2d38      	cmp	r5, #56	; 0x38
 8001906:	dd00      	ble.n	800190a <__aeabi_dmul+0x402>
 8001908:	e666      	b.n	80015d8 <__aeabi_dmul+0xd0>
 800190a:	2d1f      	cmp	r5, #31
 800190c:	dc40      	bgt.n	8001990 <__aeabi_dmul+0x488>
 800190e:	4835      	ldr	r0, [pc, #212]	; (80019e4 <__aeabi_dmul+0x4dc>)
 8001910:	001c      	movs	r4, r3
 8001912:	4450      	add	r0, sl
 8001914:	0016      	movs	r6, r2
 8001916:	4082      	lsls	r2, r0
 8001918:	4084      	lsls	r4, r0
 800191a:	40ee      	lsrs	r6, r5
 800191c:	1e50      	subs	r0, r2, #1
 800191e:	4182      	sbcs	r2, r0
 8001920:	4334      	orrs	r4, r6
 8001922:	4314      	orrs	r4, r2
 8001924:	40eb      	lsrs	r3, r5
 8001926:	0762      	lsls	r2, r4, #29
 8001928:	d009      	beq.n	800193e <__aeabi_dmul+0x436>
 800192a:	220f      	movs	r2, #15
 800192c:	4022      	ands	r2, r4
 800192e:	2a04      	cmp	r2, #4
 8001930:	d005      	beq.n	800193e <__aeabi_dmul+0x436>
 8001932:	0022      	movs	r2, r4
 8001934:	1d14      	adds	r4, r2, #4
 8001936:	4294      	cmp	r4, r2
 8001938:	4180      	sbcs	r0, r0
 800193a:	4240      	negs	r0, r0
 800193c:	181b      	adds	r3, r3, r0
 800193e:	021a      	lsls	r2, r3, #8
 8001940:	d53e      	bpl.n	80019c0 <__aeabi_dmul+0x4b8>
 8001942:	2301      	movs	r3, #1
 8001944:	2700      	movs	r7, #0
 8001946:	2600      	movs	r6, #0
 8001948:	e649      	b.n	80015de <__aeabi_dmul+0xd6>
 800194a:	2780      	movs	r7, #128	; 0x80
 800194c:	9b01      	ldr	r3, [sp, #4]
 800194e:	033f      	lsls	r7, r7, #12
 8001950:	431f      	orrs	r7, r3
 8001952:	033f      	lsls	r7, r7, #12
 8001954:	0b3f      	lsrs	r7, r7, #12
 8001956:	9400      	str	r4, [sp, #0]
 8001958:	4b21      	ldr	r3, [pc, #132]	; (80019e0 <__aeabi_dmul+0x4d8>)
 800195a:	e640      	b.n	80015de <__aeabi_dmul+0xd6>
 800195c:	0003      	movs	r3, r0
 800195e:	465a      	mov	r2, fp
 8001960:	3b28      	subs	r3, #40	; 0x28
 8001962:	409a      	lsls	r2, r3
 8001964:	2600      	movs	r6, #0
 8001966:	9201      	str	r2, [sp, #4]
 8001968:	e66d      	b.n	8001646 <__aeabi_dmul+0x13e>
 800196a:	4658      	mov	r0, fp
 800196c:	f000 f92e 	bl	8001bcc <__clzsi2>
 8001970:	3020      	adds	r0, #32
 8001972:	e657      	b.n	8001624 <__aeabi_dmul+0x11c>
 8001974:	0003      	movs	r3, r0
 8001976:	4652      	mov	r2, sl
 8001978:	3b28      	subs	r3, #40	; 0x28
 800197a:	409a      	lsls	r2, r3
 800197c:	0013      	movs	r3, r2
 800197e:	2200      	movs	r2, #0
 8001980:	e693      	b.n	80016aa <__aeabi_dmul+0x1a2>
 8001982:	4650      	mov	r0, sl
 8001984:	f000 f922 	bl	8001bcc <__clzsi2>
 8001988:	3020      	adds	r0, #32
 800198a:	e67b      	b.n	8001684 <__aeabi_dmul+0x17c>
 800198c:	46ca      	mov	sl, r9
 800198e:	e750      	b.n	8001832 <__aeabi_dmul+0x32a>
 8001990:	201f      	movs	r0, #31
 8001992:	001e      	movs	r6, r3
 8001994:	4240      	negs	r0, r0
 8001996:	1b04      	subs	r4, r0, r4
 8001998:	40e6      	lsrs	r6, r4
 800199a:	2d20      	cmp	r5, #32
 800199c:	d003      	beq.n	80019a6 <__aeabi_dmul+0x49e>
 800199e:	4c12      	ldr	r4, [pc, #72]	; (80019e8 <__aeabi_dmul+0x4e0>)
 80019a0:	4454      	add	r4, sl
 80019a2:	40a3      	lsls	r3, r4
 80019a4:	431a      	orrs	r2, r3
 80019a6:	1e50      	subs	r0, r2, #1
 80019a8:	4182      	sbcs	r2, r0
 80019aa:	4332      	orrs	r2, r6
 80019ac:	2607      	movs	r6, #7
 80019ae:	2700      	movs	r7, #0
 80019b0:	4016      	ands	r6, r2
 80019b2:	d009      	beq.n	80019c8 <__aeabi_dmul+0x4c0>
 80019b4:	200f      	movs	r0, #15
 80019b6:	2300      	movs	r3, #0
 80019b8:	4010      	ands	r0, r2
 80019ba:	0014      	movs	r4, r2
 80019bc:	2804      	cmp	r0, #4
 80019be:	d1b9      	bne.n	8001934 <__aeabi_dmul+0x42c>
 80019c0:	0022      	movs	r2, r4
 80019c2:	075e      	lsls	r6, r3, #29
 80019c4:	025b      	lsls	r3, r3, #9
 80019c6:	0b1f      	lsrs	r7, r3, #12
 80019c8:	08d2      	lsrs	r2, r2, #3
 80019ca:	4316      	orrs	r6, r2
 80019cc:	2300      	movs	r3, #0
 80019ce:	e606      	b.n	80015de <__aeabi_dmul+0xd6>
 80019d0:	2780      	movs	r7, #128	; 0x80
 80019d2:	033f      	lsls	r7, r7, #12
 80019d4:	431f      	orrs	r7, r3
 80019d6:	033f      	lsls	r7, r7, #12
 80019d8:	0b3f      	lsrs	r7, r7, #12
 80019da:	0016      	movs	r6, r2
 80019dc:	4b00      	ldr	r3, [pc, #0]	; (80019e0 <__aeabi_dmul+0x4d8>)
 80019de:	e5fe      	b.n	80015de <__aeabi_dmul+0xd6>
 80019e0:	000007ff 	.word	0x000007ff
 80019e4:	0000041e 	.word	0x0000041e
 80019e8:	0000043e 	.word	0x0000043e

080019ec <__aeabi_i2d>:
 80019ec:	b570      	push	{r4, r5, r6, lr}
 80019ee:	2800      	cmp	r0, #0
 80019f0:	d02d      	beq.n	8001a4e <__aeabi_i2d+0x62>
 80019f2:	17c3      	asrs	r3, r0, #31
 80019f4:	18c5      	adds	r5, r0, r3
 80019f6:	405d      	eors	r5, r3
 80019f8:	0fc4      	lsrs	r4, r0, #31
 80019fa:	0028      	movs	r0, r5
 80019fc:	f000 f8e6 	bl	8001bcc <__clzsi2>
 8001a00:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <__aeabi_i2d+0x6c>)
 8001a02:	1a1b      	subs	r3, r3, r0
 8001a04:	055b      	lsls	r3, r3, #21
 8001a06:	0d5b      	lsrs	r3, r3, #21
 8001a08:	280a      	cmp	r0, #10
 8001a0a:	dd15      	ble.n	8001a38 <__aeabi_i2d+0x4c>
 8001a0c:	380b      	subs	r0, #11
 8001a0e:	4085      	lsls	r5, r0
 8001a10:	2200      	movs	r2, #0
 8001a12:	032d      	lsls	r5, r5, #12
 8001a14:	0b2d      	lsrs	r5, r5, #12
 8001a16:	2100      	movs	r1, #0
 8001a18:	0010      	movs	r0, r2
 8001a1a:	032d      	lsls	r5, r5, #12
 8001a1c:	0d0a      	lsrs	r2, r1, #20
 8001a1e:	0b2d      	lsrs	r5, r5, #12
 8001a20:	0512      	lsls	r2, r2, #20
 8001a22:	432a      	orrs	r2, r5
 8001a24:	4d0d      	ldr	r5, [pc, #52]	; (8001a5c <__aeabi_i2d+0x70>)
 8001a26:	051b      	lsls	r3, r3, #20
 8001a28:	402a      	ands	r2, r5
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	07e4      	lsls	r4, r4, #31
 8001a30:	085b      	lsrs	r3, r3, #1
 8001a32:	4323      	orrs	r3, r4
 8001a34:	0019      	movs	r1, r3
 8001a36:	bd70      	pop	{r4, r5, r6, pc}
 8001a38:	0002      	movs	r2, r0
 8001a3a:	0029      	movs	r1, r5
 8001a3c:	3215      	adds	r2, #21
 8001a3e:	4091      	lsls	r1, r2
 8001a40:	000a      	movs	r2, r1
 8001a42:	210b      	movs	r1, #11
 8001a44:	1a08      	subs	r0, r1, r0
 8001a46:	40c5      	lsrs	r5, r0
 8001a48:	032d      	lsls	r5, r5, #12
 8001a4a:	0b2d      	lsrs	r5, r5, #12
 8001a4c:	e7e3      	b.n	8001a16 <__aeabi_i2d+0x2a>
 8001a4e:	2400      	movs	r4, #0
 8001a50:	2300      	movs	r3, #0
 8001a52:	2500      	movs	r5, #0
 8001a54:	2200      	movs	r2, #0
 8001a56:	e7de      	b.n	8001a16 <__aeabi_i2d+0x2a>
 8001a58:	0000041e 	.word	0x0000041e
 8001a5c:	800fffff 	.word	0x800fffff

08001a60 <__aeabi_ui2d>:
 8001a60:	b510      	push	{r4, lr}
 8001a62:	1e04      	subs	r4, r0, #0
 8001a64:	d025      	beq.n	8001ab2 <__aeabi_ui2d+0x52>
 8001a66:	f000 f8b1 	bl	8001bcc <__clzsi2>
 8001a6a:	4b14      	ldr	r3, [pc, #80]	; (8001abc <__aeabi_ui2d+0x5c>)
 8001a6c:	1a1b      	subs	r3, r3, r0
 8001a6e:	055b      	lsls	r3, r3, #21
 8001a70:	0d5b      	lsrs	r3, r3, #21
 8001a72:	280a      	cmp	r0, #10
 8001a74:	dd12      	ble.n	8001a9c <__aeabi_ui2d+0x3c>
 8001a76:	380b      	subs	r0, #11
 8001a78:	4084      	lsls	r4, r0
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	0324      	lsls	r4, r4, #12
 8001a7e:	0b24      	lsrs	r4, r4, #12
 8001a80:	2100      	movs	r1, #0
 8001a82:	0010      	movs	r0, r2
 8001a84:	0324      	lsls	r4, r4, #12
 8001a86:	0d0a      	lsrs	r2, r1, #20
 8001a88:	0b24      	lsrs	r4, r4, #12
 8001a8a:	0512      	lsls	r2, r2, #20
 8001a8c:	4322      	orrs	r2, r4
 8001a8e:	4c0c      	ldr	r4, [pc, #48]	; (8001ac0 <__aeabi_ui2d+0x60>)
 8001a90:	051b      	lsls	r3, r3, #20
 8001a92:	4022      	ands	r2, r4
 8001a94:	4313      	orrs	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	0859      	lsrs	r1, r3, #1
 8001a9a:	bd10      	pop	{r4, pc}
 8001a9c:	0002      	movs	r2, r0
 8001a9e:	0021      	movs	r1, r4
 8001aa0:	3215      	adds	r2, #21
 8001aa2:	4091      	lsls	r1, r2
 8001aa4:	000a      	movs	r2, r1
 8001aa6:	210b      	movs	r1, #11
 8001aa8:	1a08      	subs	r0, r1, r0
 8001aaa:	40c4      	lsrs	r4, r0
 8001aac:	0324      	lsls	r4, r4, #12
 8001aae:	0b24      	lsrs	r4, r4, #12
 8001ab0:	e7e6      	b.n	8001a80 <__aeabi_ui2d+0x20>
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	2400      	movs	r4, #0
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	e7e2      	b.n	8001a80 <__aeabi_ui2d+0x20>
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	0000041e 	.word	0x0000041e
 8001ac0:	800fffff 	.word	0x800fffff

08001ac4 <__aeabi_d2f>:
 8001ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ac6:	004c      	lsls	r4, r1, #1
 8001ac8:	0d64      	lsrs	r4, r4, #21
 8001aca:	030b      	lsls	r3, r1, #12
 8001acc:	1c62      	adds	r2, r4, #1
 8001ace:	0a5b      	lsrs	r3, r3, #9
 8001ad0:	0f46      	lsrs	r6, r0, #29
 8001ad2:	0552      	lsls	r2, r2, #21
 8001ad4:	0fc9      	lsrs	r1, r1, #31
 8001ad6:	431e      	orrs	r6, r3
 8001ad8:	00c5      	lsls	r5, r0, #3
 8001ada:	0d52      	lsrs	r2, r2, #21
 8001adc:	2a01      	cmp	r2, #1
 8001ade:	dd29      	ble.n	8001b34 <__aeabi_d2f+0x70>
 8001ae0:	4b37      	ldr	r3, [pc, #220]	; (8001bc0 <__aeabi_d2f+0xfc>)
 8001ae2:	18e7      	adds	r7, r4, r3
 8001ae4:	2ffe      	cmp	r7, #254	; 0xfe
 8001ae6:	dc1c      	bgt.n	8001b22 <__aeabi_d2f+0x5e>
 8001ae8:	2f00      	cmp	r7, #0
 8001aea:	dd3b      	ble.n	8001b64 <__aeabi_d2f+0xa0>
 8001aec:	0180      	lsls	r0, r0, #6
 8001aee:	1e43      	subs	r3, r0, #1
 8001af0:	4198      	sbcs	r0, r3
 8001af2:	2207      	movs	r2, #7
 8001af4:	00f3      	lsls	r3, r6, #3
 8001af6:	0f6d      	lsrs	r5, r5, #29
 8001af8:	4303      	orrs	r3, r0
 8001afa:	432b      	orrs	r3, r5
 8001afc:	401a      	ands	r2, r3
 8001afe:	2a00      	cmp	r2, #0
 8001b00:	d004      	beq.n	8001b0c <__aeabi_d2f+0x48>
 8001b02:	220f      	movs	r2, #15
 8001b04:	401a      	ands	r2, r3
 8001b06:	2a04      	cmp	r2, #4
 8001b08:	d000      	beq.n	8001b0c <__aeabi_d2f+0x48>
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	2280      	movs	r2, #128	; 0x80
 8001b0e:	04d2      	lsls	r2, r2, #19
 8001b10:	401a      	ands	r2, r3
 8001b12:	d024      	beq.n	8001b5e <__aeabi_d2f+0x9a>
 8001b14:	3701      	adds	r7, #1
 8001b16:	b2fa      	uxtb	r2, r7
 8001b18:	2fff      	cmp	r7, #255	; 0xff
 8001b1a:	d002      	beq.n	8001b22 <__aeabi_d2f+0x5e>
 8001b1c:	019b      	lsls	r3, r3, #6
 8001b1e:	0a58      	lsrs	r0, r3, #9
 8001b20:	e001      	b.n	8001b26 <__aeabi_d2f+0x62>
 8001b22:	22ff      	movs	r2, #255	; 0xff
 8001b24:	2000      	movs	r0, #0
 8001b26:	0240      	lsls	r0, r0, #9
 8001b28:	05d2      	lsls	r2, r2, #23
 8001b2a:	0a40      	lsrs	r0, r0, #9
 8001b2c:	07c9      	lsls	r1, r1, #31
 8001b2e:	4310      	orrs	r0, r2
 8001b30:	4308      	orrs	r0, r1
 8001b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b34:	4335      	orrs	r5, r6
 8001b36:	2c00      	cmp	r4, #0
 8001b38:	d104      	bne.n	8001b44 <__aeabi_d2f+0x80>
 8001b3a:	2d00      	cmp	r5, #0
 8001b3c:	d10a      	bne.n	8001b54 <__aeabi_d2f+0x90>
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2000      	movs	r0, #0
 8001b42:	e7f0      	b.n	8001b26 <__aeabi_d2f+0x62>
 8001b44:	2d00      	cmp	r5, #0
 8001b46:	d0ec      	beq.n	8001b22 <__aeabi_d2f+0x5e>
 8001b48:	2080      	movs	r0, #128	; 0x80
 8001b4a:	03c0      	lsls	r0, r0, #15
 8001b4c:	4330      	orrs	r0, r6
 8001b4e:	22ff      	movs	r2, #255	; 0xff
 8001b50:	e7e9      	b.n	8001b26 <__aeabi_d2f+0x62>
 8001b52:	2400      	movs	r4, #0
 8001b54:	2300      	movs	r3, #0
 8001b56:	025b      	lsls	r3, r3, #9
 8001b58:	0a58      	lsrs	r0, r3, #9
 8001b5a:	b2e2      	uxtb	r2, r4
 8001b5c:	e7e3      	b.n	8001b26 <__aeabi_d2f+0x62>
 8001b5e:	08db      	lsrs	r3, r3, #3
 8001b60:	003c      	movs	r4, r7
 8001b62:	e7f8      	b.n	8001b56 <__aeabi_d2f+0x92>
 8001b64:	003b      	movs	r3, r7
 8001b66:	3317      	adds	r3, #23
 8001b68:	dbf3      	blt.n	8001b52 <__aeabi_d2f+0x8e>
 8001b6a:	2380      	movs	r3, #128	; 0x80
 8001b6c:	041b      	lsls	r3, r3, #16
 8001b6e:	4333      	orrs	r3, r6
 8001b70:	261e      	movs	r6, #30
 8001b72:	1bf6      	subs	r6, r6, r7
 8001b74:	2e1f      	cmp	r6, #31
 8001b76:	dd14      	ble.n	8001ba2 <__aeabi_d2f+0xde>
 8001b78:	2202      	movs	r2, #2
 8001b7a:	4252      	negs	r2, r2
 8001b7c:	1bd7      	subs	r7, r2, r7
 8001b7e:	001a      	movs	r2, r3
 8001b80:	40fa      	lsrs	r2, r7
 8001b82:	0017      	movs	r7, r2
 8001b84:	2e20      	cmp	r6, #32
 8001b86:	d004      	beq.n	8001b92 <__aeabi_d2f+0xce>
 8001b88:	4a0e      	ldr	r2, [pc, #56]	; (8001bc4 <__aeabi_d2f+0x100>)
 8001b8a:	4694      	mov	ip, r2
 8001b8c:	4464      	add	r4, ip
 8001b8e:	40a3      	lsls	r3, r4
 8001b90:	431d      	orrs	r5, r3
 8001b92:	002b      	movs	r3, r5
 8001b94:	1e5d      	subs	r5, r3, #1
 8001b96:	41ab      	sbcs	r3, r5
 8001b98:	2207      	movs	r2, #7
 8001b9a:	433b      	orrs	r3, r7
 8001b9c:	401a      	ands	r2, r3
 8001b9e:	2700      	movs	r7, #0
 8001ba0:	e7ad      	b.n	8001afe <__aeabi_d2f+0x3a>
 8001ba2:	4a09      	ldr	r2, [pc, #36]	; (8001bc8 <__aeabi_d2f+0x104>)
 8001ba4:	0028      	movs	r0, r5
 8001ba6:	18a2      	adds	r2, r4, r2
 8001ba8:	4095      	lsls	r5, r2
 8001baa:	4093      	lsls	r3, r2
 8001bac:	1e6c      	subs	r4, r5, #1
 8001bae:	41a5      	sbcs	r5, r4
 8001bb0:	40f0      	lsrs	r0, r6
 8001bb2:	2207      	movs	r2, #7
 8001bb4:	432b      	orrs	r3, r5
 8001bb6:	4303      	orrs	r3, r0
 8001bb8:	401a      	ands	r2, r3
 8001bba:	2700      	movs	r7, #0
 8001bbc:	e79f      	b.n	8001afe <__aeabi_d2f+0x3a>
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	fffffc80 	.word	0xfffffc80
 8001bc4:	fffffca2 	.word	0xfffffca2
 8001bc8:	fffffc82 	.word	0xfffffc82

08001bcc <__clzsi2>:
 8001bcc:	211c      	movs	r1, #28
 8001bce:	2301      	movs	r3, #1
 8001bd0:	041b      	lsls	r3, r3, #16
 8001bd2:	4298      	cmp	r0, r3
 8001bd4:	d301      	bcc.n	8001bda <__clzsi2+0xe>
 8001bd6:	0c00      	lsrs	r0, r0, #16
 8001bd8:	3910      	subs	r1, #16
 8001bda:	0a1b      	lsrs	r3, r3, #8
 8001bdc:	4298      	cmp	r0, r3
 8001bde:	d301      	bcc.n	8001be4 <__clzsi2+0x18>
 8001be0:	0a00      	lsrs	r0, r0, #8
 8001be2:	3908      	subs	r1, #8
 8001be4:	091b      	lsrs	r3, r3, #4
 8001be6:	4298      	cmp	r0, r3
 8001be8:	d301      	bcc.n	8001bee <__clzsi2+0x22>
 8001bea:	0900      	lsrs	r0, r0, #4
 8001bec:	3904      	subs	r1, #4
 8001bee:	a202      	add	r2, pc, #8	; (adr r2, 8001bf8 <__clzsi2+0x2c>)
 8001bf0:	5c10      	ldrb	r0, [r2, r0]
 8001bf2:	1840      	adds	r0, r0, r1
 8001bf4:	4770      	bx	lr
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	02020304 	.word	0x02020304
 8001bfc:	01010101 	.word	0x01010101
	...

08001c08 <SPI_DC_LOW>:
static uint16_t pixelColor;		// for use in DMA functions

// ---- lower level functions ----
void SPI_CS_LOW() {HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);}
void SPI_CS_HIGH() {HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);}
void SPI_DC_LOW() {HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);}
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	2380      	movs	r3, #128	; 0x80
 8001c0e:	01db      	lsls	r3, r3, #7
 8001c10:	4803      	ldr	r0, [pc, #12]	; (8001c20 <SPI_DC_LOW+0x18>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	0019      	movs	r1, r3
 8001c16:	f006 fa83 	bl	8008120 <HAL_GPIO_WritePin>
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	50000400 	.word	0x50000400

08001c24 <SPI_DC_HIGH>:
void SPI_DC_HIGH() {HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);}
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	01db      	lsls	r3, r3, #7
 8001c2c:	4803      	ldr	r0, [pc, #12]	; (8001c3c <SPI_DC_HIGH+0x18>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	0019      	movs	r1, r3
 8001c32:	f006 fa75 	bl	8008120 <HAL_GPIO_WritePin>
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	50000400 	.word	0x50000400

08001c40 <sendCommand>:

void sendCommand(uint8_t cmd, uint8_t *args, uint16_t numArgs, SPI_HandleTypeDef *hspi) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	0011      	movs	r1, r2
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	230f      	movs	r3, #15
 8001c4e:	18fb      	adds	r3, r7, r3
 8001c50:	1c02      	adds	r2, r0, #0
 8001c52:	701a      	strb	r2, [r3, #0]
 8001c54:	230c      	movs	r3, #12
 8001c56:	18fb      	adds	r3, r7, r3
 8001c58:	1c0a      	adds	r2, r1, #0
 8001c5a:	801a      	strh	r2, [r3, #0]
	while (HAL_SPI_GetState(hspi) == HAL_SPI_STATE_BUSY_TX);		// block next transfer request while DMA transfer is ongoing
 8001c5c:	46c0      	nop			; (mov r8, r8)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	0018      	movs	r0, r3
 8001c62:	f008 fd1d 	bl	800a6a0 <HAL_SPI_GetState>
 8001c66:	0003      	movs	r3, r0
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d0f8      	beq.n	8001c5e <sendCommand+0x1e>
//	SPI_CS_LOW();	// chip select

	SPI_DC_LOW();	// command mode
 8001c6c:	f7ff ffcc 	bl	8001c08 <SPI_DC_LOW>
	HAL_SPI_Transmit(hspi, &cmd, 1, 1000);	// not using DMA bc it's only 1 byte
 8001c70:	23fa      	movs	r3, #250	; 0xfa
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	220f      	movs	r2, #15
 8001c76:	18b9      	adds	r1, r7, r2
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f008 f96a 	bl	8009f54 <HAL_SPI_Transmit>

	SPI_DC_HIGH();	// data mode
 8001c80:	f7ff ffd0 	bl	8001c24 <SPI_DC_HIGH>
	if (numArgs) {
 8001c84:	230c      	movs	r3, #12
 8001c86:	18fb      	adds	r3, r7, r3
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d007      	beq.n	8001c9e <sendCommand+0x5e>
		HAL_SPI_Transmit_IT(hspi, args, numArgs);
 8001c8e:	230c      	movs	r3, #12
 8001c90:	18fb      	adds	r3, r7, r3
 8001c92:	881a      	ldrh	r2, [r3, #0]
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f008 faa9 	bl	800a1f0 <HAL_SPI_Transmit_IT>
	}
}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	b004      	add	sp, #16
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <sendColor>:

// no need to double pixel count since we're going into 16-bit mode
void sendColor(uint16_t color, uint16_t numPixels, SPI_HandleTypeDef *hspi) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	603a      	str	r2, [r7, #0]
 8001cb0:	1dbb      	adds	r3, r7, #6
 8001cb2:	1c02      	adds	r2, r0, #0
 8001cb4:	801a      	strh	r2, [r3, #0]
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	1c0a      	adds	r2, r1, #0
 8001cba:	801a      	strh	r2, [r3, #0]
	SPI_DC_LOW();
 8001cbc:	f7ff ffa4 	bl	8001c08 <SPI_DC_LOW>
	uint8_t cmd = ST77XX_RAMWR;
 8001cc0:	210f      	movs	r1, #15
 8001cc2:	187b      	adds	r3, r7, r1
 8001cc4:	222c      	movs	r2, #44	; 0x2c
 8001cc6:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(hspi, &cmd, 1);
 8001cc8:	1879      	adds	r1, r7, r1
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f008 fa8e 	bl	800a1f0 <HAL_SPI_Transmit_IT>
	SPI_DC_HIGH();
 8001cd4:	f7ff ffa6 	bl	8001c24 <SPI_DC_HIGH>

	pixelColor = color;
 8001cd8:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <sendColor+0x80>)
 8001cda:	1dba      	adds	r2, r7, #6
 8001cdc:	8812      	ldrh	r2, [r2, #0]
 8001cde:	801a      	strh	r2, [r3, #0]
	__HAL_SPI_DISABLE(hspi);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2140      	movs	r1, #64	; 0x40
 8001cec:	438a      	bics	r2, r1
 8001cee:	601a      	str	r2, [r3, #0]
	SET_BIT(hspi->Instance->CR1, SPI_CR1_DFF);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2180      	movs	r1, #128	; 0x80
 8001cfc:	0109      	lsls	r1, r1, #4
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	601a      	str	r2, [r3, #0]
	__HAL_SPI_ENABLE(hspi);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2140      	movs	r1, #64	; 0x40
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	601a      	str	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(hspi, &pixelColor, numPixels);
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	881a      	ldrh	r2, [r3, #0]
 8001d16:	4904      	ldr	r1, [pc, #16]	; (8001d28 <sendColor+0x80>)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	f008 faf6 	bl	800a30c <HAL_SPI_Transmit_DMA>
}
 8001d20:	46c0      	nop			; (mov r8, r8)
 8001d22:	46bd      	mov	sp, r7
 8001d24:	b004      	add	sp, #16
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	200000fc 	.word	0x200000fc

08001d2c <HAL_SPI_TxCpltCallback>:

// using only for sending data, but not commands
// dont send request when transfer is ongoing
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
//	if (HAL_GPIO_ReadPin(CS_PORT, CS_PIN) == GPIO_PIN_RESET) SPI_CS_HIGH();	// chip select disable
	__HAL_SPI_DISABLE(hspi);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2140      	movs	r1, #64	; 0x40
 8001d40:	438a      	bics	r2, r1
 8001d42:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_DFF);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	490c      	ldr	r1, [pc, #48]	; (8001d80 <HAL_SPI_TxCpltCallback+0x54>)
 8001d50:	400a      	ands	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(hspi->hdmatx->Instance->CCR, DMA_CCR_MINC);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2180      	movs	r1, #128	; 0x80
 8001d64:	438a      	bics	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]
	__HAL_SPI_ENABLE(hspi);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2140      	movs	r1, #64	; 0x40
 8001d74:	430a      	orrs	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]
}
 8001d78:	46c0      	nop			; (mov r8, r8)
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	b002      	add	sp, #8
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	fffff7ff 	.word	0xfffff7ff

08001d84 <displayInit>:

// array parser heavily based on Adafruit library code
void displayInit(uint8_t *args, SPI_HandleTypeDef *hspi) {
 8001d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
	uint8_t  numCommands, cmd, numArgs;
	uint16_t ms;
	uint8_t index = 0;
 8001d8e:	220b      	movs	r2, #11
 8001d90:	0011      	movs	r1, r2
 8001d92:	18bb      	adds	r3, r7, r2
 8001d94:	2200      	movs	r2, #0
 8001d96:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	numCommands = args[index++];			// Number of commands to follow
 8001d98:	000a      	movs	r2, r1
 8001d9a:	18bb      	adds	r3, r7, r2
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	18ba      	adds	r2, r7, r2
 8001da0:	1c59      	adds	r1, r3, #1
 8001da2:	7011      	strb	r1, [r2, #0]
 8001da4:	001a      	movs	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	189a      	adds	r2, r3, r2
 8001daa:	230f      	movs	r3, #15
 8001dac:	18fb      	adds	r3, r7, r3
 8001dae:	7812      	ldrb	r2, [r2, #0]
 8001db0:	701a      	strb	r2, [r3, #0]
	while(numCommands--) {					// For each command...
 8001db2:	e05e      	b.n	8001e72 <displayInit+0xee>
		cmd = args[index++];				// Read command
 8001db4:	200b      	movs	r0, #11
 8001db6:	183b      	adds	r3, r7, r0
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	183a      	adds	r2, r7, r0
 8001dbc:	1c59      	adds	r1, r3, #1
 8001dbe:	7011      	strb	r1, [r2, #0]
 8001dc0:	001a      	movs	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	189a      	adds	r2, r3, r2
 8001dc6:	230a      	movs	r3, #10
 8001dc8:	18fb      	adds	r3, r7, r3
 8001dca:	7812      	ldrb	r2, [r2, #0]
 8001dcc:	701a      	strb	r2, [r3, #0]
		numArgs  = args[index++];			// Number of args to follow
 8001dce:	183b      	adds	r3, r7, r0
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	183a      	adds	r2, r7, r0
 8001dd4:	1c59      	adds	r1, r3, #1
 8001dd6:	7011      	strb	r1, [r2, #0]
 8001dd8:	001a      	movs	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	189a      	adds	r2, r3, r2
 8001dde:	2609      	movs	r6, #9
 8001de0:	19bb      	adds	r3, r7, r6
 8001de2:	7812      	ldrb	r2, [r2, #0]
 8001de4:	701a      	strb	r2, [r3, #0]
		ms       = numArgs & ST_CMD_DELAY;	// If hibit set, delay follows args
 8001de6:	19bb      	adds	r3, r7, r6
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	210c      	movs	r1, #12
 8001dee:	187b      	adds	r3, r7, r1
 8001df0:	2180      	movs	r1, #128	; 0x80
 8001df2:	400a      	ands	r2, r1
 8001df4:	801a      	strh	r2, [r3, #0]
		numArgs &= ~ST_CMD_DELAY;			// Mask out delay bit
 8001df6:	19bb      	adds	r3, r7, r6
 8001df8:	19ba      	adds	r2, r7, r6
 8001dfa:	7812      	ldrb	r2, [r2, #0]
 8001dfc:	217f      	movs	r1, #127	; 0x7f
 8001dfe:	400a      	ands	r2, r1
 8001e00:	701a      	strb	r2, [r3, #0]
		sendCommand(cmd, &args[index], numArgs, hspi);
 8001e02:	0005      	movs	r5, r0
 8001e04:	183b      	adds	r3, r7, r0
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	18d1      	adds	r1, r2, r3
 8001e0c:	19bb      	adds	r3, r7, r6
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	683c      	ldr	r4, [r7, #0]
 8001e14:	230a      	movs	r3, #10
 8001e16:	18fb      	adds	r3, r7, r3
 8001e18:	7818      	ldrb	r0, [r3, #0]
 8001e1a:	0023      	movs	r3, r4
 8001e1c:	f7ff ff10 	bl	8001c40 <sendCommand>
		index += numArgs;
 8001e20:	0028      	movs	r0, r5
 8001e22:	183b      	adds	r3, r7, r0
 8001e24:	1839      	adds	r1, r7, r0
 8001e26:	19ba      	adds	r2, r7, r6
 8001e28:	7809      	ldrb	r1, [r1, #0]
 8001e2a:	7812      	ldrb	r2, [r2, #0]
 8001e2c:	188a      	adds	r2, r1, r2
 8001e2e:	701a      	strb	r2, [r3, #0]

		if(ms) {
 8001e30:	210c      	movs	r1, #12
 8001e32:	187b      	adds	r3, r7, r1
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d01b      	beq.n	8001e72 <displayInit+0xee>
			ms = args[index++];			// Read post-command delay time (ms)
 8001e3a:	220b      	movs	r2, #11
 8001e3c:	18bb      	adds	r3, r7, r2
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	18ba      	adds	r2, r7, r2
 8001e42:	1c59      	adds	r1, r3, #1
 8001e44:	7011      	strb	r1, [r2, #0]
 8001e46:	001a      	movs	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	189b      	adds	r3, r3, r2
 8001e4c:	781a      	ldrb	r2, [r3, #0]
 8001e4e:	210c      	movs	r1, #12
 8001e50:	187b      	adds	r3, r7, r1
 8001e52:	801a      	strh	r2, [r3, #0]
			if(ms == 255) ms = 500;		// If 255, delay for 500 ms
 8001e54:	187b      	adds	r3, r7, r1
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	2bff      	cmp	r3, #255	; 0xff
 8001e5a:	d104      	bne.n	8001e66 <displayInit+0xe2>
 8001e5c:	230c      	movs	r3, #12
 8001e5e:	18fb      	adds	r3, r7, r3
 8001e60:	22fa      	movs	r2, #250	; 0xfa
 8001e62:	0052      	lsls	r2, r2, #1
 8001e64:	801a      	strh	r2, [r3, #0]
			HAL_Delay(ms);
 8001e66:	230c      	movs	r3, #12
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	f004 ff63 	bl	8006d38 <HAL_Delay>
	while(numCommands--) {					// For each command...
 8001e72:	220f      	movs	r2, #15
 8001e74:	18bb      	adds	r3, r7, r2
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	18ba      	adds	r2, r7, r2
 8001e7a:	1e59      	subs	r1, r3, #1
 8001e7c:	7011      	strb	r1, [r2, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d198      	bne.n	8001db4 <displayInit+0x30>
		}
	}

	data = 0xC0;
 8001e82:	2108      	movs	r1, #8
 8001e84:	187b      	adds	r3, r7, r1
 8001e86:	22c0      	movs	r2, #192	; 0xc0
 8001e88:	701a      	strb	r2, [r3, #0]
	sendCommand(ST77XX_MADCTL, &data, 1, hspi);
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	1879      	adds	r1, r7, r1
 8001e8e:	2201      	movs	r2, #1
 8001e90:	2036      	movs	r0, #54	; 0x36
 8001e92:	f7ff fed5 	bl	8001c40 <sendCommand>
}
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	b005      	add	sp, #20
 8001e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001ea0 <TFT_startup>:

void TFT_startup(SPI_HandleTypeDef *hspi) {
 8001ea0:	b590      	push	{r4, r7, lr}
 8001ea2:	b0a3      	sub	sp, #140	; 0x8c
 8001ea4:	af02      	add	r7, sp, #8
 8001ea6:	6078      	str	r0, [r7, #4]
	// array pulled from Adafruit's library for ST7735R driver
	uint8_t initCommands[] = {
 8001ea8:	240c      	movs	r4, #12
 8001eaa:	193a      	adds	r2, r7, r4
 8001eac:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <TFT_startup+0x60>)
 8001eae:	0010      	movs	r0, r2
 8001eb0:	0019      	movs	r1, r3
 8001eb2:	2371      	movs	r3, #113	; 0x71
 8001eb4:	001a      	movs	r2, r3
 8001eb6:	f009 fd75 	bl	800b9a4 <memcpy>
			10,                         //     10 ms delay
		ST77XX_DISPON,    ST_CMD_DELAY, //  4: Main screen turn on, no args w/delay
			100	                        //     100 ms delay
	};

	displayInit(initCommands, hspi);
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	193b      	adds	r3, r7, r4
 8001ebe:	0011      	movs	r1, r2
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	f7ff ff5f 	bl	8001d84 <displayInit>
	setAddrWindow(0, 0, WIDTH, HEIGHT, hspi);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	23a0      	movs	r3, #160	; 0xa0
 8001ecc:	2280      	movs	r2, #128	; 0x80
 8001ece:	2100      	movs	r1, #0
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	f000 f821 	bl	8001f18 <setAddrWindow>

	// set the global variables
	cursorX = 0;
 8001ed6:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <TFT_startup+0x64>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	701a      	strb	r2, [r3, #0]
	cursorY = 0;
 8001edc:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <TFT_startup+0x68>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	701a      	strb	r2, [r3, #0]
	textSize = 1;
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <TFT_startup+0x6c>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	701a      	strb	r2, [r3, #0]
	textColor = ST77XX_BLACK;
 8001ee8:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <TFT_startup+0x70>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	801a      	strh	r2, [r3, #0]
	bg = ST77XX_WHITE;
 8001eee:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <TFT_startup+0x74>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	4252      	negs	r2, r2
 8001ef4:	801a      	strh	r2, [r3, #0]
}
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	b021      	add	sp, #132	; 0x84
 8001efc:	bd90      	pop	{r4, r7, pc}
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	0800c1f8 	.word	0x0800c1f8
 8001f04:	200000f4 	.word	0x200000f4
 8001f08:	200000f5 	.word	0x200000f5
 8001f0c:	200000f6 	.word	0x200000f6
 8001f10:	200000f8 	.word	0x200000f8
 8001f14:	200000fa 	.word	0x200000fa

08001f18 <setAddrWindow>:

// draw something: set addr window -> write to ram memory
// sets specific area on display to write pixels to
// x and y for upper left corner, w for width, h for height
void setAddrWindow(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SPI_HandleTypeDef *hspi) {
 8001f18:	b5b0      	push	{r4, r5, r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	0005      	movs	r5, r0
 8001f20:	000c      	movs	r4, r1
 8001f22:	0010      	movs	r0, r2
 8001f24:	0019      	movs	r1, r3
 8001f26:	1dbb      	adds	r3, r7, #6
 8001f28:	1c2a      	adds	r2, r5, #0
 8001f2a:	801a      	strh	r2, [r3, #0]
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	1c22      	adds	r2, r4, #0
 8001f30:	801a      	strh	r2, [r3, #0]
 8001f32:	1cbb      	adds	r3, r7, #2
 8001f34:	1c02      	adds	r2, r0, #0
 8001f36:	801a      	strh	r2, [r3, #0]
 8001f38:	003b      	movs	r3, r7
 8001f3a:	1c0a      	adds	r2, r1, #0
 8001f3c:	801a      	strh	r2, [r3, #0]
	// building 32-bit window args
	uint8_t temp[4];
	temp[0] = (x & (0xFF00)) >> 8;
 8001f3e:	1dbb      	adds	r3, r7, #6
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	0a1b      	lsrs	r3, r3, #8
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	210c      	movs	r1, #12
 8001f4a:	187b      	adds	r3, r7, r1
 8001f4c:	701a      	strb	r2, [r3, #0]
	temp[1] = x & (0xFF);
 8001f4e:	1dbb      	adds	r3, r7, #6
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	187b      	adds	r3, r7, r1
 8001f56:	705a      	strb	r2, [r3, #1]
	temp[2] = ((x+w-1) & (0xFF00)) >> 8;
 8001f58:	1dbb      	adds	r3, r7, #6
 8001f5a:	881a      	ldrh	r2, [r3, #0]
 8001f5c:	1cbb      	adds	r3, r7, #2
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	18d3      	adds	r3, r2, r3
 8001f62:	3b01      	subs	r3, #1
 8001f64:	121b      	asrs	r3, r3, #8
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	187b      	adds	r3, r7, r1
 8001f6a:	709a      	strb	r2, [r3, #2]
	temp[3] = (x+w-1) & (0xFF);
 8001f6c:	1dbb      	adds	r3, r7, #6
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	1cbb      	adds	r3, r7, #2
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	18d3      	adds	r3, r2, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	187b      	adds	r3, r7, r1
 8001f82:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_CASET, temp, 4, hspi);
 8001f84:	6a3b      	ldr	r3, [r7, #32]
 8001f86:	000c      	movs	r4, r1
 8001f88:	1879      	adds	r1, r7, r1
 8001f8a:	2204      	movs	r2, #4
 8001f8c:	202a      	movs	r0, #42	; 0x2a
 8001f8e:	f7ff fe57 	bl	8001c40 <sendCommand>

	temp[0] = (y & (0xFF00)) >> 8;
 8001f92:	1d3b      	adds	r3, r7, #4
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	0a1b      	lsrs	r3, r3, #8
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	0021      	movs	r1, r4
 8001f9e:	187b      	adds	r3, r7, r1
 8001fa0:	701a      	strb	r2, [r3, #0]
	temp[1] = y & (0xFF);
 8001fa2:	1d3b      	adds	r3, r7, #4
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	187b      	adds	r3, r7, r1
 8001faa:	705a      	strb	r2, [r3, #1]
	temp[2] = ((y+h-1) & (0xFF00)) >> 8;
 8001fac:	1d3b      	adds	r3, r7, #4
 8001fae:	881a      	ldrh	r2, [r3, #0]
 8001fb0:	003b      	movs	r3, r7
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	18d3      	adds	r3, r2, r3
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	121b      	asrs	r3, r3, #8
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	187b      	adds	r3, r7, r1
 8001fbe:	709a      	strb	r2, [r3, #2]
	temp[3] = (y+h-1) & (0x00FF);
 8001fc0:	1d3b      	adds	r3, r7, #4
 8001fc2:	881b      	ldrh	r3, [r3, #0]
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	003b      	movs	r3, r7
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	18d3      	adds	r3, r2, r3
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	187b      	adds	r3, r7, r1
 8001fd6:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_RASET, temp, 4, hspi);
 8001fd8:	6a3b      	ldr	r3, [r7, #32]
 8001fda:	1879      	adds	r1, r7, r1
 8001fdc:	2204      	movs	r2, #4
 8001fde:	202b      	movs	r0, #43	; 0x2b
 8001fe0:	f7ff fe2e 	bl	8001c40 <sendCommand>
}
 8001fe4:	46c0      	nop			; (mov r8, r8)
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b004      	add	sp, #16
 8001fea:	bdb0      	pop	{r4, r5, r7, pc}

08001fec <turnDisplayOn>:

// sends turn on/off command
void turnDisplayOn(SPI_HandleTypeDef *hspi) {sendCommand(ST77XX_DISPON, NULL, 0, hspi);}
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	2029      	movs	r0, #41	; 0x29
 8001ffc:	f7ff fe20 	bl	8001c40 <sendCommand>
 8002000:	46c0      	nop			; (mov r8, r8)
 8002002:	46bd      	mov	sp, r7
 8002004:	b002      	add	sp, #8
 8002006:	bd80      	pop	{r7, pc}

08002008 <colorFixer>:
// 8-bit spi bus wants msb first; in array, lowest index is sent first
// because ARM is little-endian
//   for 16-bit value, it sends lower byte before upper byte
//   resulting in device thinking lower byte is upper byte
// this switches byte order around
uint16_t colorFixer(uint16_t color) {
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	0002      	movs	r2, r0
 8002010:	1dbb      	adds	r3, r7, #6
 8002012:	801a      	strh	r2, [r3, #0]
	uint8_t a = color & 0xFF;
 8002014:	210f      	movs	r1, #15
 8002016:	187b      	adds	r3, r7, r1
 8002018:	1dba      	adds	r2, r7, #6
 800201a:	8812      	ldrh	r2, [r2, #0]
 800201c:	701a      	strb	r2, [r3, #0]
	uint8_t b = (color & 0xFF00) >> 8;
 800201e:	1dbb      	adds	r3, r7, #6
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	0a1b      	lsrs	r3, r3, #8
 8002024:	b29a      	uxth	r2, r3
 8002026:	200e      	movs	r0, #14
 8002028:	183b      	adds	r3, r7, r0
 800202a:	701a      	strb	r2, [r3, #0]
	uint16_t ret = (a << 8) | b;
 800202c:	187b      	adds	r3, r7, r1
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	021b      	lsls	r3, r3, #8
 8002032:	b21a      	sxth	r2, r3
 8002034:	183b      	adds	r3, r7, r0
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	b21b      	sxth	r3, r3
 800203a:	4313      	orrs	r3, r2
 800203c:	b21a      	sxth	r2, r3
 800203e:	210c      	movs	r1, #12
 8002040:	187b      	adds	r3, r7, r1
 8002042:	801a      	strh	r2, [r3, #0]

	return ret;
 8002044:	187b      	adds	r3, r7, r1
 8002046:	881b      	ldrh	r3, [r3, #0]
}
 8002048:	0018      	movs	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	b004      	add	sp, #16
 800204e:	bd80      	pop	{r7, pc}

08002050 <drawHLine>:
	setAddrWindow(x, y, 1, 1, hspi);
	sendColor(color, 1, hspi);
}

// draw a horizontal line. coordinates are for left point
void drawHLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 8002050:	b5b0      	push	{r4, r5, r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af02      	add	r7, sp, #8
 8002056:	0005      	movs	r5, r0
 8002058:	000c      	movs	r4, r1
 800205a:	0010      	movs	r0, r2
 800205c:	0019      	movs	r1, r3
 800205e:	1dfb      	adds	r3, r7, #7
 8002060:	1c2a      	adds	r2, r5, #0
 8002062:	701a      	strb	r2, [r3, #0]
 8002064:	1dbb      	adds	r3, r7, #6
 8002066:	1c22      	adds	r2, r4, #0
 8002068:	701a      	strb	r2, [r3, #0]
 800206a:	1d7b      	adds	r3, r7, #5
 800206c:	1c02      	adds	r2, r0, #0
 800206e:	701a      	strb	r2, [r3, #0]
 8002070:	1cbb      	adds	r3, r7, #2
 8002072:	1c0a      	adds	r2, r1, #0
 8002074:	801a      	strh	r2, [r3, #0]
	// bounds checking
	if (x < 0) x = 0;						// don't set x out of bounds
	if (x > WIDTH) x = WIDTH;
 8002076:	1dfb      	adds	r3, r7, #7
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b80      	cmp	r3, #128	; 0x80
 800207c:	d902      	bls.n	8002084 <drawHLine+0x34>
 800207e:	1dfb      	adds	r3, r7, #7
 8002080:	2280      	movs	r2, #128	; 0x80
 8002082:	701a      	strb	r2, [r3, #0]
	if (x+size > WIDTH) size = WIDTH-x;		// don't set size so line draws out of bounds
 8002084:	1dfb      	adds	r3, r7, #7
 8002086:	781a      	ldrb	r2, [r3, #0]
 8002088:	1d7b      	adds	r3, r7, #5
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	18d3      	adds	r3, r2, r3
 800208e:	2b80      	cmp	r3, #128	; 0x80
 8002090:	dd06      	ble.n	80020a0 <drawHLine+0x50>
 8002092:	1d7b      	adds	r3, r7, #5
 8002094:	1dfa      	adds	r2, r7, #7
 8002096:	7812      	ldrb	r2, [r2, #0]
 8002098:	2180      	movs	r1, #128	; 0x80
 800209a:	4249      	negs	r1, r1
 800209c:	1a8a      	subs	r2, r1, r2
 800209e:	701a      	strb	r2, [r3, #0]
	if (x+size < 0) size = 0-x;
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 80020a0:	1dbb      	adds	r3, r7, #6
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2ba0      	cmp	r3, #160	; 0xa0
 80020a6:	d817      	bhi.n	80020d8 <drawHLine+0x88>

	setAddrWindow(x, y, size, 1, hspi);
 80020a8:	1dfb      	adds	r3, r7, #7
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	b298      	uxth	r0, r3
 80020ae:	1dbb      	adds	r3, r7, #6
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	b299      	uxth	r1, r3
 80020b4:	1d7b      	adds	r3, r7, #5
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	2301      	movs	r3, #1
 80020c0:	f7ff ff2a 	bl	8001f18 <setAddrWindow>
	sendColor(color, size, hspi);
 80020c4:	1d7b      	adds	r3, r7, #5
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	b299      	uxth	r1, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	1cbb      	adds	r3, r7, #2
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	0018      	movs	r0, r3
 80020d2:	f7ff fde9 	bl	8001ca8 <sendColor>
 80020d6:	e000      	b.n	80020da <drawHLine+0x8a>
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 80020d8:	46c0      	nop			; (mov r8, r8)
}
 80020da:	46bd      	mov	sp, r7
 80020dc:	b002      	add	sp, #8
 80020de:	bdb0      	pop	{r4, r5, r7, pc}

080020e0 <drawVLine>:

// draws a vertical line. coordinates are for top point
void drawVLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 80020e0:	b5b0      	push	{r4, r5, r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af02      	add	r7, sp, #8
 80020e6:	0005      	movs	r5, r0
 80020e8:	000c      	movs	r4, r1
 80020ea:	0010      	movs	r0, r2
 80020ec:	0019      	movs	r1, r3
 80020ee:	1dfb      	adds	r3, r7, #7
 80020f0:	1c2a      	adds	r2, r5, #0
 80020f2:	701a      	strb	r2, [r3, #0]
 80020f4:	1dbb      	adds	r3, r7, #6
 80020f6:	1c22      	adds	r2, r4, #0
 80020f8:	701a      	strb	r2, [r3, #0]
 80020fa:	1d7b      	adds	r3, r7, #5
 80020fc:	1c02      	adds	r2, r0, #0
 80020fe:	701a      	strb	r2, [r3, #0]
 8002100:	1cbb      	adds	r3, r7, #2
 8002102:	1c0a      	adds	r2, r1, #0
 8002104:	801a      	strh	r2, [r3, #0]
	// bounds checking
	if (y < 0) y = 0;						// don't set y out of bounds
	if (y > HEIGHT) y = HEIGHT;
 8002106:	1dbb      	adds	r3, r7, #6
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2ba0      	cmp	r3, #160	; 0xa0
 800210c:	d902      	bls.n	8002114 <drawVLine+0x34>
 800210e:	1dbb      	adds	r3, r7, #6
 8002110:	22a0      	movs	r2, #160	; 0xa0
 8002112:	701a      	strb	r2, [r3, #0]
	if (y+size > HEIGHT) size = HEIGHT-y;	// don't set size so line draws out of bounds
 8002114:	1dbb      	adds	r3, r7, #6
 8002116:	781a      	ldrb	r2, [r3, #0]
 8002118:	1d7b      	adds	r3, r7, #5
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	18d3      	adds	r3, r2, r3
 800211e:	2ba0      	cmp	r3, #160	; 0xa0
 8002120:	dd06      	ble.n	8002130 <drawVLine+0x50>
 8002122:	1d7b      	adds	r3, r7, #5
 8002124:	1dba      	adds	r2, r7, #6
 8002126:	7812      	ldrb	r2, [r2, #0]
 8002128:	2160      	movs	r1, #96	; 0x60
 800212a:	4249      	negs	r1, r1
 800212c:	1a8a      	subs	r2, r1, r2
 800212e:	701a      	strb	r2, [r3, #0]
	if (y+size < 0) size = 0-y;
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if x is out of bounds
 8002130:	1dfb      	adds	r3, r7, #7
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b80      	cmp	r3, #128	; 0x80
 8002136:	d818      	bhi.n	800216a <drawVLine+0x8a>

	setAddrWindow(x, y, 1, size, hspi);
 8002138:	1dfb      	adds	r3, r7, #7
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	b298      	uxth	r0, r3
 800213e:	1dbb      	adds	r3, r7, #6
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	b299      	uxth	r1, r3
 8002144:	1d7b      	adds	r3, r7, #5
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	b29a      	uxth	r2, r3
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	0013      	movs	r3, r2
 8002150:	2201      	movs	r2, #1
 8002152:	f7ff fee1 	bl	8001f18 <setAddrWindow>
	sendColor(color, size, hspi);
 8002156:	1d7b      	adds	r3, r7, #5
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	b299      	uxth	r1, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	1cbb      	adds	r3, r7, #2
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	0018      	movs	r0, r3
 8002164:	f7ff fda0 	bl	8001ca8 <sendColor>
 8002168:	e000      	b.n	800216c <drawVLine+0x8c>
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if x is out of bounds
 800216a:	46c0      	nop			; (mov r8, r8)
}
 800216c:	46bd      	mov	sp, r7
 800216e:	b002      	add	sp, #8
 8002170:	bdb0      	pop	{r4, r5, r7, pc}

08002172 <drawBuffer>:

// draws on a specific region with input 16-bit buffer
uint16_t b[500];
void drawBuffer(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t *buffer, uint16_t bufferSize, SPI_HandleTypeDef *hspi) {
 8002172:	b5b0      	push	{r4, r5, r7, lr}
 8002174:	b084      	sub	sp, #16
 8002176:	af02      	add	r7, sp, #8
 8002178:	0005      	movs	r5, r0
 800217a:	000c      	movs	r4, r1
 800217c:	0010      	movs	r0, r2
 800217e:	0019      	movs	r1, r3
 8002180:	1dfb      	adds	r3, r7, #7
 8002182:	1c2a      	adds	r2, r5, #0
 8002184:	701a      	strb	r2, [r3, #0]
 8002186:	1dbb      	adds	r3, r7, #6
 8002188:	1c22      	adds	r2, r4, #0
 800218a:	701a      	strb	r2, [r3, #0]
 800218c:	1d7b      	adds	r3, r7, #5
 800218e:	1c02      	adds	r2, r0, #0
 8002190:	701a      	strb	r2, [r3, #0]
 8002192:	1d3b      	adds	r3, r7, #4
 8002194:	1c0a      	adds	r2, r1, #0
 8002196:	701a      	strb	r2, [r3, #0]
	if (x+w > WIDTH || y+h > HEIGHT) return;
 8002198:	1dfb      	adds	r3, r7, #7
 800219a:	781a      	ldrb	r2, [r3, #0]
 800219c:	1d7b      	adds	r3, r7, #5
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	18d3      	adds	r3, r2, r3
 80021a2:	2b80      	cmp	r3, #128	; 0x80
 80021a4:	dc22      	bgt.n	80021ec <drawBuffer+0x7a>
 80021a6:	1dbb      	adds	r3, r7, #6
 80021a8:	781a      	ldrb	r2, [r3, #0]
 80021aa:	1d3b      	adds	r3, r7, #4
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	18d3      	adds	r3, r2, r3
 80021b0:	2ba0      	cmp	r3, #160	; 0xa0
 80021b2:	dc1b      	bgt.n	80021ec <drawBuffer+0x7a>

	// also don't call this with buffer size too big bc there's not enough ram for all pixels of display
//	if (bufferSize > 10240) return;			// about 1/2 of total system ram

	setAddrWindow(x, y, w, h, hspi);
 80021b4:	1dfb      	adds	r3, r7, #7
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	b298      	uxth	r0, r3
 80021ba:	1dbb      	adds	r3, r7, #6
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	b299      	uxth	r1, r3
 80021c0:	1d7b      	adds	r3, r7, #5
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	1d3b      	adds	r3, r7, #4
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	b29c      	uxth	r4, r3
 80021cc:	6a3b      	ldr	r3, [r7, #32]
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	0023      	movs	r3, r4
 80021d2:	f7ff fea1 	bl	8001f18 <setAddrWindow>
	sendCommand(ST77XX_RAMWR, buffer, bufferSize*2, hspi);
 80021d6:	231c      	movs	r3, #28
 80021d8:	18fb      	adds	r3, r7, r3
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	18db      	adds	r3, r3, r3
 80021de:	b29a      	uxth	r2, r3
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	69b9      	ldr	r1, [r7, #24]
 80021e4:	202c      	movs	r0, #44	; 0x2c
 80021e6:	f7ff fd2b 	bl	8001c40 <sendCommand>
 80021ea:	e000      	b.n	80021ee <drawBuffer+0x7c>
	if (x+w > WIDTH || y+h > HEIGHT) return;
 80021ec:	46c0      	nop			; (mov r8, r8)
//	while(HAL_DMA_GetState(hspi->hdmatx) == HAL_DMA_STATE_BUSY);
//	SET_BIT(hspi->hdmatx->Instance->CCR, DMA_CCR_MINC);
//	__HAL_SPI_ENABLE(hspi);
//	HAL_SPI_Transmit_DMA(hspi, buffer, bufferSize);
////	HAL_SPI_Transmit_DMA(hspi, b, bufferSize);
}
 80021ee:	46bd      	mov	sp, r7
 80021f0:	b002      	add	sp, #8
 80021f2:	bdb0      	pop	{r4, r5, r7, pc}

080021f4 <drawRect>:
		}
	}
}

// draw an empty rectangle
void drawRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color, SPI_HandleTypeDef *hspi) {
 80021f4:	b5b0      	push	{r4, r5, r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af02      	add	r7, sp, #8
 80021fa:	0005      	movs	r5, r0
 80021fc:	000c      	movs	r4, r1
 80021fe:	0010      	movs	r0, r2
 8002200:	0019      	movs	r1, r3
 8002202:	1dfb      	adds	r3, r7, #7
 8002204:	1c2a      	adds	r2, r5, #0
 8002206:	701a      	strb	r2, [r3, #0]
 8002208:	1dbb      	adds	r3, r7, #6
 800220a:	1c22      	adds	r2, r4, #0
 800220c:	701a      	strb	r2, [r3, #0]
 800220e:	1d7b      	adds	r3, r7, #5
 8002210:	1c02      	adds	r2, r0, #0
 8002212:	701a      	strb	r2, [r3, #0]
 8002214:	1d3b      	adds	r3, r7, #4
 8002216:	1c0a      	adds	r2, r1, #0
 8002218:	701a      	strb	r2, [r3, #0]
	drawHLine(x, y, w, color, hspi);
 800221a:	2518      	movs	r5, #24
 800221c:	197b      	adds	r3, r7, r5
 800221e:	881c      	ldrh	r4, [r3, #0]
 8002220:	1d7b      	adds	r3, r7, #5
 8002222:	781a      	ldrb	r2, [r3, #0]
 8002224:	1dbb      	adds	r3, r7, #6
 8002226:	7819      	ldrb	r1, [r3, #0]
 8002228:	1dfb      	adds	r3, r7, #7
 800222a:	7818      	ldrb	r0, [r3, #0]
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	0023      	movs	r3, r4
 8002232:	f7ff ff0d 	bl	8002050 <drawHLine>
	drawHLine(x, y+h-1, w, color, hspi);
 8002236:	1dba      	adds	r2, r7, #6
 8002238:	1d3b      	adds	r3, r7, #4
 800223a:	7812      	ldrb	r2, [r2, #0]
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	18d3      	adds	r3, r2, r3
 8002240:	b2db      	uxtb	r3, r3
 8002242:	3b01      	subs	r3, #1
 8002244:	b2d9      	uxtb	r1, r3
 8002246:	197b      	adds	r3, r7, r5
 8002248:	881c      	ldrh	r4, [r3, #0]
 800224a:	1d7b      	adds	r3, r7, #5
 800224c:	781a      	ldrb	r2, [r3, #0]
 800224e:	1dfb      	adds	r3, r7, #7
 8002250:	7818      	ldrb	r0, [r3, #0]
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	0023      	movs	r3, r4
 8002258:	f7ff fefa 	bl	8002050 <drawHLine>
	drawVLine(x, y, h, color, hspi);
 800225c:	197b      	adds	r3, r7, r5
 800225e:	881c      	ldrh	r4, [r3, #0]
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	781a      	ldrb	r2, [r3, #0]
 8002264:	1dbb      	adds	r3, r7, #6
 8002266:	7819      	ldrb	r1, [r3, #0]
 8002268:	1dfb      	adds	r3, r7, #7
 800226a:	7818      	ldrb	r0, [r3, #0]
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	0023      	movs	r3, r4
 8002272:	f7ff ff35 	bl	80020e0 <drawVLine>
	drawVLine(x+w-1, y, h, color, hspi);
 8002276:	1dfa      	adds	r2, r7, #7
 8002278:	1d7b      	adds	r3, r7, #5
 800227a:	7812      	ldrb	r2, [r2, #0]
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	18d3      	adds	r3, r2, r3
 8002280:	b2db      	uxtb	r3, r3
 8002282:	3b01      	subs	r3, #1
 8002284:	b2d8      	uxtb	r0, r3
 8002286:	197b      	adds	r3, r7, r5
 8002288:	881c      	ldrh	r4, [r3, #0]
 800228a:	1d3b      	adds	r3, r7, #4
 800228c:	781a      	ldrb	r2, [r3, #0]
 800228e:	1dbb      	adds	r3, r7, #6
 8002290:	7819      	ldrb	r1, [r3, #0]
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	0023      	movs	r3, r4
 8002298:	f7ff ff22 	bl	80020e0 <drawVLine>
}
 800229c:	46c0      	nop			; (mov r8, r8)
 800229e:	46bd      	mov	sp, r7
 80022a0:	b002      	add	sp, #8
 80022a2:	bdb0      	pop	{r4, r5, r7, pc}

080022a4 <fillRect>:

// draw a filled rectangle
void fillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color, SPI_HandleTypeDef *hspi) {
 80022a4:	b5b0      	push	{r4, r5, r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af02      	add	r7, sp, #8
 80022aa:	0005      	movs	r5, r0
 80022ac:	000c      	movs	r4, r1
 80022ae:	0010      	movs	r0, r2
 80022b0:	0019      	movs	r1, r3
 80022b2:	1dfb      	adds	r3, r7, #7
 80022b4:	1c2a      	adds	r2, r5, #0
 80022b6:	701a      	strb	r2, [r3, #0]
 80022b8:	1dbb      	adds	r3, r7, #6
 80022ba:	1c22      	adds	r2, r4, #0
 80022bc:	701a      	strb	r2, [r3, #0]
 80022be:	1d7b      	adds	r3, r7, #5
 80022c0:	1c02      	adds	r2, r0, #0
 80022c2:	701a      	strb	r2, [r3, #0]
 80022c4:	1d3b      	adds	r3, r7, #4
 80022c6:	1c0a      	adds	r2, r1, #0
 80022c8:	701a      	strb	r2, [r3, #0]
	setAddrWindow(x, y, w, h, hspi);
 80022ca:	1dfb      	adds	r3, r7, #7
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	b298      	uxth	r0, r3
 80022d0:	1dbb      	adds	r3, r7, #6
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	b299      	uxth	r1, r3
 80022d6:	1d7b      	adds	r3, r7, #5
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	b29a      	uxth	r2, r3
 80022dc:	1d3b      	adds	r3, r7, #4
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	b29c      	uxth	r4, r3
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	0023      	movs	r3, r4
 80022e8:	f7ff fe16 	bl	8001f18 <setAddrWindow>
	sendColor(color, w*h, hspi);
 80022ec:	1d7b      	adds	r3, r7, #5
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	1d3a      	adds	r2, r7, #4
 80022f4:	7812      	ldrb	r2, [r2, #0]
 80022f6:	b292      	uxth	r2, r2
 80022f8:	4353      	muls	r3, r2
 80022fa:	b299      	uxth	r1, r3
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	2318      	movs	r3, #24
 8002300:	18fb      	adds	r3, r7, r3
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	0018      	movs	r0, r3
 8002306:	f7ff fccf 	bl	8001ca8 <sendColor>
//	for (int i = 0; i < h; i++) {
//		drawHLine(x, y+i, w, color, hspi);
//	}
}
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	46bd      	mov	sp, r7
 800230e:	b002      	add	sp, #8
 8002310:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002314 <fillScreen>:

// a big rectangle, but for the whole screen
void fillScreen(uint16_t color, SPI_HandleTypeDef *hspi) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af02      	add	r7, sp, #8
 800231a:	0002      	movs	r2, r0
 800231c:	6039      	str	r1, [r7, #0]
 800231e:	1dbb      	adds	r3, r7, #6
 8002320:	801a      	strh	r2, [r3, #0]
	setAddrWindow(0, 0, WIDTH, HEIGHT, hspi);
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	23a0      	movs	r3, #160	; 0xa0
 8002328:	2280      	movs	r2, #128	; 0x80
 800232a:	2100      	movs	r1, #0
 800232c:	2000      	movs	r0, #0
 800232e:	f7ff fdf3 	bl	8001f18 <setAddrWindow>
	sendColor(color, WIDTH*HEIGHT, hspi);
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	23a0      	movs	r3, #160	; 0xa0
 8002336:	01d9      	lsls	r1, r3, #7
 8002338:	1dbb      	adds	r3, r7, #6
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	0018      	movs	r0, r3
 800233e:	f7ff fcb3 	bl	8001ca8 <sendColor>
//	for (i = 0; i < HEIGHT; i++) {
//		for (k = 0; k < WIDTH; k++) {
//			drawPixel(k, i, colors[j], hspi);
//		}
//	}
	j = (j+1)%4;
 8002342:	4b09      	ldr	r3, [pc, #36]	; (8002368 <fillScreen+0x54>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	3301      	adds	r3, #1
 8002348:	4a08      	ldr	r2, [pc, #32]	; (800236c <fillScreen+0x58>)
 800234a:	4013      	ands	r3, r2
 800234c:	d504      	bpl.n	8002358 <fillScreen+0x44>
 800234e:	3b01      	subs	r3, #1
 8002350:	2204      	movs	r2, #4
 8002352:	4252      	negs	r2, r2
 8002354:	4313      	orrs	r3, r2
 8002356:	3301      	adds	r3, #1
 8002358:	001a      	movs	r2, r3
 800235a:	4b03      	ldr	r3, [pc, #12]	; (8002368 <fillScreen+0x54>)
 800235c:	601a      	str	r2, [r3, #0]
}
 800235e:	46c0      	nop			; (mov r8, r8)
 8002360:	46bd      	mov	sp, r7
 8002362:	b002      	add	sp, #8
 8002364:	bd80      	pop	{r7, pc}
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	20000100 	.word	0x20000100
 800236c:	80000003 	.word	0x80000003

08002370 <clearScreen>:

void clearScreen(uint16_t backgroundColor, SPI_HandleTypeDef *hspi) {
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	0002      	movs	r2, r0
 8002378:	6039      	str	r1, [r7, #0]
 800237a:	1dbb      	adds	r3, r7, #6
 800237c:	801a      	strh	r2, [r3, #0]
	bg = backgroundColor;
 800237e:	4b07      	ldr	r3, [pc, #28]	; (800239c <clearScreen+0x2c>)
 8002380:	1dba      	adds	r2, r7, #6
 8002382:	8812      	ldrh	r2, [r2, #0]
 8002384:	801a      	strh	r2, [r3, #0]
	fillScreen(backgroundColor, hspi);
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	1dbb      	adds	r3, r7, #6
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	0011      	movs	r1, r2
 800238e:	0018      	movs	r0, r3
 8002390:	f7ff ffc0 	bl	8002314 <fillScreen>
}
 8002394:	46c0      	nop			; (mov r8, r8)
 8002396:	46bd      	mov	sp, r7
 8002398:	b002      	add	sp, #8
 800239a:	bd80      	pop	{r7, pc}
 800239c:	200000fa 	.word	0x200000fa

080023a0 <drawChar>:
// ---- end of basic shapes and lines ----

// ---- text functions ----
// draw a character. based on 6x8 font, but scalable
// instead of drawing pixel by pixel, function builds a buffer first and then sends
void drawChar(uint8_t ch, SPI_HandleTypeDef *hspi) {
 80023a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023a2:	b095      	sub	sp, #84	; 0x54
 80023a4:	af04      	add	r7, sp, #16
 80023a6:	61b9      	str	r1, [r7, #24]
 80023a8:	221f      	movs	r2, #31
 80023aa:	18ba      	adds	r2, r7, r2
 80023ac:	1c01      	adds	r1, r0, #0
 80023ae:	7011      	strb	r1, [r2, #0]
 80023b0:	466a      	mov	r2, sp
 80023b2:	607a      	str	r2, [r7, #4]
	uint16_t bufferSize = 6*8*textSize*textSize;
 80023b4:	4abe      	ldr	r2, [pc, #760]	; (80026b0 <drawChar+0x310>)
 80023b6:	7812      	ldrb	r2, [r2, #0]
 80023b8:	b292      	uxth	r2, r2
 80023ba:	49bd      	ldr	r1, [pc, #756]	; (80026b0 <drawChar+0x310>)
 80023bc:	7809      	ldrb	r1, [r1, #0]
 80023be:	b289      	uxth	r1, r1
 80023c0:	434a      	muls	r2, r1
 80023c2:	b291      	uxth	r1, r2
 80023c4:	221a      	movs	r2, #26
 80023c6:	2018      	movs	r0, #24
 80023c8:	4684      	mov	ip, r0
 80023ca:	44bc      	add	ip, r7
 80023cc:	4462      	add	r2, ip
 80023ce:	2030      	movs	r0, #48	; 0x30
 80023d0:	4341      	muls	r1, r0
 80023d2:	8011      	strh	r1, [r2, #0]
	uint16_t buffer[bufferSize];
 80023d4:	221a      	movs	r2, #26
 80023d6:	2118      	movs	r1, #24
 80023d8:	468c      	mov	ip, r1
 80023da:	44bc      	add	ip, r7
 80023dc:	4462      	add	r2, ip
 80023de:	8812      	ldrh	r2, [r2, #0]
 80023e0:	0011      	movs	r1, r2
 80023e2:	3901      	subs	r1, #1
 80023e4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80023e6:	613a      	str	r2, [r7, #16]
 80023e8:	2100      	movs	r1, #0
 80023ea:	6179      	str	r1, [r7, #20]
 80023ec:	6939      	ldr	r1, [r7, #16]
 80023ee:	0f09      	lsrs	r1, r1, #28
 80023f0:	6978      	ldr	r0, [r7, #20]
 80023f2:	0106      	lsls	r6, r0, #4
 80023f4:	430e      	orrs	r6, r1
 80023f6:	6939      	ldr	r1, [r7, #16]
 80023f8:	010d      	lsls	r5, r1, #4
 80023fa:	60ba      	str	r2, [r7, #8]
 80023fc:	2100      	movs	r1, #0
 80023fe:	60f9      	str	r1, [r7, #12]
 8002400:	68bd      	ldr	r5, [r7, #8]
 8002402:	68fe      	ldr	r6, [r7, #12]
 8002404:	0029      	movs	r1, r5
 8002406:	0f09      	lsrs	r1, r1, #28
 8002408:	0030      	movs	r0, r6
 800240a:	0104      	lsls	r4, r0, #4
 800240c:	430c      	orrs	r4, r1
 800240e:	0029      	movs	r1, r5
 8002410:	010b      	lsls	r3, r1, #4
 8002412:	0013      	movs	r3, r2
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	3301      	adds	r3, #1
 8002418:	3307      	adds	r3, #7
 800241a:	08db      	lsrs	r3, r3, #3
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	466a      	mov	r2, sp
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	469d      	mov	sp, r3
 8002424:	ab04      	add	r3, sp, #16
 8002426:	3301      	adds	r3, #1
 8002428:	085b      	lsrs	r3, r3, #1
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	62bb      	str	r3, [r7, #40]	; 0x28
	int16_t rowOffset, address;

	// Char bitmap = 5 columns
	for (int8_t i=0; i<5; i++) {
 800242e:	2325      	movs	r3, #37	; 0x25
 8002430:	2218      	movs	r2, #24
 8002432:	4694      	mov	ip, r2
 8002434:	44bc      	add	ip, r7
 8002436:	4463      	add	r3, ip
 8002438:	2200      	movs	r2, #0
 800243a:	701a      	strb	r2, [r3, #0]
 800243c:	e1f4      	b.n	8002828 <drawChar+0x488>
		uint8_t line = font[ch*5+i];
 800243e:	231f      	movs	r3, #31
 8002440:	18fb      	adds	r3, r7, r3
 8002442:	781a      	ldrb	r2, [r3, #0]
 8002444:	0013      	movs	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	189a      	adds	r2, r3, r2
 800244a:	2325      	movs	r3, #37	; 0x25
 800244c:	2118      	movs	r1, #24
 800244e:	468c      	mov	ip, r1
 8002450:	44bc      	add	ip, r7
 8002452:	4463      	add	r3, ip
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	b25b      	sxtb	r3, r3
 8002458:	18d2      	adds	r2, r2, r3
 800245a:	2324      	movs	r3, #36	; 0x24
 800245c:	2118      	movs	r1, #24
 800245e:	468c      	mov	ip, r1
 8002460:	44bc      	add	ip, r7
 8002462:	4463      	add	r3, ip
 8002464:	4993      	ldr	r1, [pc, #588]	; (80026b4 <drawChar+0x314>)
 8002466:	5c8a      	ldrb	r2, [r1, r2]
 8002468:	701a      	strb	r2, [r3, #0]
		for (int8_t j=0; j<8; j++, line >>= 1) {
 800246a:	2323      	movs	r3, #35	; 0x23
 800246c:	2218      	movs	r2, #24
 800246e:	4694      	mov	ip, r2
 8002470:	44bc      	add	ip, r7
 8002472:	4463      	add	r3, ip
 8002474:	2200      	movs	r2, #0
 8002476:	701a      	strb	r2, [r3, #0]
 8002478:	e1c0      	b.n	80027fc <drawChar+0x45c>
			// draw character pixel
			if (line & 1) {
 800247a:	2324      	movs	r3, #36	; 0x24
 800247c:	2218      	movs	r2, #24
 800247e:	4694      	mov	ip, r2
 8002480:	44bc      	add	ip, r7
 8002482:	4463      	add	r3, ip
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2201      	movs	r2, #1
 8002488:	4013      	ands	r3, r2
 800248a:	d100      	bne.n	800248e <drawChar+0xee>
 800248c:	e0c8      	b.n	8002620 <drawChar+0x280>
				if (textSize == 1) {
 800248e:	4b88      	ldr	r3, [pc, #544]	; (80026b0 <drawChar+0x310>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d11c      	bne.n	80024d0 <drawChar+0x130>
					buffer[i+j*6] = colorFixer(textColor);
 8002496:	4b88      	ldr	r3, [pc, #544]	; (80026b8 <drawChar+0x318>)
 8002498:	8818      	ldrh	r0, [r3, #0]
 800249a:	2325      	movs	r3, #37	; 0x25
 800249c:	2218      	movs	r2, #24
 800249e:	4694      	mov	ip, r2
 80024a0:	44bc      	add	ip, r7
 80024a2:	4463      	add	r3, ip
 80024a4:	2100      	movs	r1, #0
 80024a6:	5659      	ldrsb	r1, [r3, r1]
 80024a8:	2323      	movs	r3, #35	; 0x23
 80024aa:	2218      	movs	r2, #24
 80024ac:	4694      	mov	ip, r2
 80024ae:	44bc      	add	ip, r7
 80024b0:	4463      	add	r3, ip
 80024b2:	2200      	movs	r2, #0
 80024b4:	569a      	ldrsb	r2, [r3, r2]
 80024b6:	0013      	movs	r3, r2
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	189b      	adds	r3, r3, r2
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	18cc      	adds	r4, r1, r3
 80024c0:	f7ff fda2 	bl	8002008 <colorFixer>
 80024c4:	0003      	movs	r3, r0
 80024c6:	0019      	movs	r1, r3
 80024c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ca:	0062      	lsls	r2, r4, #1
 80024cc:	52d1      	strh	r1, [r2, r3]
 80024ce:	e17f      	b.n	80027d0 <drawChar+0x430>
				}
				else {
					// indexing scheme for textSize > 1
					for (int8_t k = 0; k < textSize; k++) {
 80024d0:	2322      	movs	r3, #34	; 0x22
 80024d2:	2218      	movs	r2, #24
 80024d4:	4694      	mov	ip, r2
 80024d6:	44bc      	add	ip, r7
 80024d8:	4463      	add	r3, ip
 80024da:	2200      	movs	r2, #0
 80024dc:	701a      	strb	r2, [r3, #0]
 80024de:	e092      	b.n	8002606 <drawChar+0x266>
						rowOffset = textSize*6;
 80024e0:	4b73      	ldr	r3, [pc, #460]	; (80026b0 <drawChar+0x310>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	1c1a      	adds	r2, r3, #0
 80024e8:	1c13      	adds	r3, r2, #0
 80024ea:	18db      	adds	r3, r3, r3
 80024ec:	189b      	adds	r3, r3, r2
 80024ee:	18db      	adds	r3, r3, r3
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	2326      	movs	r3, #38	; 0x26
 80024f4:	2118      	movs	r1, #24
 80024f6:	468c      	mov	ip, r1
 80024f8:	44bc      	add	ip, r7
 80024fa:	4463      	add	r3, ip
 80024fc:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 80024fe:	2321      	movs	r3, #33	; 0x21
 8002500:	2218      	movs	r2, #24
 8002502:	4694      	mov	ip, r2
 8002504:	44bc      	add	ip, r7
 8002506:	4463      	add	r3, ip
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]
 800250c:	e064      	b.n	80025d8 <drawChar+0x238>
							address = (textSize*textSize*j*6)+(i*textSize);
 800250e:	4b68      	ldr	r3, [pc, #416]	; (80026b0 <drawChar+0x310>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	b29b      	uxth	r3, r3
 8002514:	4a66      	ldr	r2, [pc, #408]	; (80026b0 <drawChar+0x310>)
 8002516:	7812      	ldrb	r2, [r2, #0]
 8002518:	b292      	uxth	r2, r2
 800251a:	4353      	muls	r3, r2
 800251c:	b29b      	uxth	r3, r3
 800251e:	2223      	movs	r2, #35	; 0x23
 8002520:	2118      	movs	r1, #24
 8002522:	468c      	mov	ip, r1
 8002524:	44bc      	add	ip, r7
 8002526:	4462      	add	r2, ip
 8002528:	7812      	ldrb	r2, [r2, #0]
 800252a:	b252      	sxtb	r2, r2
 800252c:	b292      	uxth	r2, r2
 800252e:	4353      	muls	r3, r2
 8002530:	b29b      	uxth	r3, r3
 8002532:	1c1a      	adds	r2, r3, #0
 8002534:	1c13      	adds	r3, r2, #0
 8002536:	18db      	adds	r3, r3, r3
 8002538:	189b      	adds	r3, r3, r2
 800253a:	18db      	adds	r3, r3, r3
 800253c:	b29a      	uxth	r2, r3
 800253e:	2325      	movs	r3, #37	; 0x25
 8002540:	2118      	movs	r1, #24
 8002542:	468c      	mov	ip, r1
 8002544:	44bc      	add	ip, r7
 8002546:	4463      	add	r3, ip
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	b25b      	sxtb	r3, r3
 800254c:	b29b      	uxth	r3, r3
 800254e:	4958      	ldr	r1, [pc, #352]	; (80026b0 <drawChar+0x310>)
 8002550:	7809      	ldrb	r1, [r1, #0]
 8002552:	b289      	uxth	r1, r1
 8002554:	434b      	muls	r3, r1
 8002556:	b29b      	uxth	r3, r3
 8002558:	18d3      	adds	r3, r2, r3
 800255a:	b29a      	uxth	r2, r3
 800255c:	210e      	movs	r1, #14
 800255e:	2018      	movs	r0, #24
 8002560:	183b      	adds	r3, r7, r0
 8002562:	185b      	adds	r3, r3, r1
 8002564:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 8002566:	2322      	movs	r3, #34	; 0x22
 8002568:	2218      	movs	r2, #24
 800256a:	4694      	mov	ip, r2
 800256c:	44bc      	add	ip, r7
 800256e:	4463      	add	r3, ip
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	b25b      	sxtb	r3, r3
 8002574:	b29b      	uxth	r3, r3
 8002576:	2226      	movs	r2, #38	; 0x26
 8002578:	2418      	movs	r4, #24
 800257a:	46a4      	mov	ip, r4
 800257c:	44bc      	add	ip, r7
 800257e:	4462      	add	r2, ip
 8002580:	8812      	ldrh	r2, [r2, #0]
 8002582:	4353      	muls	r3, r2
 8002584:	b29a      	uxth	r2, r3
 8002586:	2521      	movs	r5, #33	; 0x21
 8002588:	183b      	adds	r3, r7, r0
 800258a:	195b      	adds	r3, r3, r5
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	b25b      	sxtb	r3, r3
 8002590:	b29b      	uxth	r3, r3
 8002592:	18d3      	adds	r3, r2, r3
 8002594:	b29a      	uxth	r2, r3
 8002596:	183b      	adds	r3, r7, r0
 8002598:	185b      	adds	r3, r3, r1
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	18d3      	adds	r3, r2, r3
 800259e:	b29a      	uxth	r2, r3
 80025a0:	183b      	adds	r3, r7, r0
 80025a2:	185b      	adds	r3, r3, r1
 80025a4:	801a      	strh	r2, [r3, #0]
							buffer[address] = colorFixer(textColor);
 80025a6:	4b44      	ldr	r3, [pc, #272]	; (80026b8 <drawChar+0x318>)
 80025a8:	881a      	ldrh	r2, [r3, #0]
 80025aa:	0006      	movs	r6, r0
 80025ac:	183b      	adds	r3, r7, r0
 80025ae:	185b      	adds	r3, r3, r1
 80025b0:	2400      	movs	r4, #0
 80025b2:	5f1c      	ldrsh	r4, [r3, r4]
 80025b4:	0010      	movs	r0, r2
 80025b6:	f7ff fd27 	bl	8002008 <colorFixer>
 80025ba:	0003      	movs	r3, r0
 80025bc:	0019      	movs	r1, r3
 80025be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c0:	0062      	lsls	r2, r4, #1
 80025c2:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 80025c4:	19bb      	adds	r3, r7, r6
 80025c6:	195b      	adds	r3, r3, r5
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	b25b      	sxtb	r3, r3
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	3301      	adds	r3, #1
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	19bb      	adds	r3, r7, r6
 80025d4:	195b      	adds	r3, r3, r5
 80025d6:	701a      	strb	r2, [r3, #0]
 80025d8:	2321      	movs	r3, #33	; 0x21
 80025da:	2218      	movs	r2, #24
 80025dc:	4694      	mov	ip, r2
 80025de:	44bc      	add	ip, r7
 80025e0:	4463      	add	r3, ip
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	b25b      	sxtb	r3, r3
 80025e6:	4a32      	ldr	r2, [pc, #200]	; (80026b0 <drawChar+0x310>)
 80025e8:	7812      	ldrb	r2, [r2, #0]
 80025ea:	4293      	cmp	r3, r2
 80025ec:	db8f      	blt.n	800250e <drawChar+0x16e>
					for (int8_t k = 0; k < textSize; k++) {
 80025ee:	2122      	movs	r1, #34	; 0x22
 80025f0:	2018      	movs	r0, #24
 80025f2:	183b      	adds	r3, r7, r0
 80025f4:	185b      	adds	r3, r3, r1
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	b25b      	sxtb	r3, r3
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	3301      	adds	r3, #1
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	183b      	adds	r3, r7, r0
 8002602:	185b      	adds	r3, r3, r1
 8002604:	701a      	strb	r2, [r3, #0]
 8002606:	2322      	movs	r3, #34	; 0x22
 8002608:	2218      	movs	r2, #24
 800260a:	4694      	mov	ip, r2
 800260c:	44bc      	add	ip, r7
 800260e:	4463      	add	r3, ip
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	b25b      	sxtb	r3, r3
 8002614:	4a26      	ldr	r2, [pc, #152]	; (80026b0 <drawChar+0x310>)
 8002616:	7812      	ldrb	r2, [r2, #0]
 8002618:	4293      	cmp	r3, r2
 800261a:	da00      	bge.n	800261e <drawChar+0x27e>
 800261c:	e760      	b.n	80024e0 <drawChar+0x140>
 800261e:	e0d7      	b.n	80027d0 <drawChar+0x430>
						}
					}
				}
			}
			// draw text background
			else if (bg != textColor) {
 8002620:	4b26      	ldr	r3, [pc, #152]	; (80026bc <drawChar+0x31c>)
 8002622:	881a      	ldrh	r2, [r3, #0]
 8002624:	4b24      	ldr	r3, [pc, #144]	; (80026b8 <drawChar+0x318>)
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d100      	bne.n	800262e <drawChar+0x28e>
 800262c:	e0d0      	b.n	80027d0 <drawChar+0x430>
				if (textSize == 1) {
 800262e:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <drawChar+0x310>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d11c      	bne.n	8002670 <drawChar+0x2d0>
					buffer[i+j*6] = colorFixer(bg);
 8002636:	4b21      	ldr	r3, [pc, #132]	; (80026bc <drawChar+0x31c>)
 8002638:	8818      	ldrh	r0, [r3, #0]
 800263a:	2325      	movs	r3, #37	; 0x25
 800263c:	2218      	movs	r2, #24
 800263e:	4694      	mov	ip, r2
 8002640:	44bc      	add	ip, r7
 8002642:	4463      	add	r3, ip
 8002644:	2100      	movs	r1, #0
 8002646:	5659      	ldrsb	r1, [r3, r1]
 8002648:	2323      	movs	r3, #35	; 0x23
 800264a:	2218      	movs	r2, #24
 800264c:	4694      	mov	ip, r2
 800264e:	44bc      	add	ip, r7
 8002650:	4463      	add	r3, ip
 8002652:	2200      	movs	r2, #0
 8002654:	569a      	ldrsb	r2, [r3, r2]
 8002656:	0013      	movs	r3, r2
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	189b      	adds	r3, r3, r2
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	18cc      	adds	r4, r1, r3
 8002660:	f7ff fcd2 	bl	8002008 <colorFixer>
 8002664:	0003      	movs	r3, r0
 8002666:	0019      	movs	r1, r3
 8002668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266a:	0062      	lsls	r2, r4, #1
 800266c:	52d1      	strh	r1, [r2, r3]
 800266e:	e0af      	b.n	80027d0 <drawChar+0x430>
				}
				else {
					for (int8_t k = 0; k < textSize; k++) {
 8002670:	2320      	movs	r3, #32
 8002672:	2218      	movs	r2, #24
 8002674:	4694      	mov	ip, r2
 8002676:	44bc      	add	ip, r7
 8002678:	4463      	add	r3, ip
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]
 800267e:	e09b      	b.n	80027b8 <drawChar+0x418>
						rowOffset = textSize*6;
 8002680:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <drawChar+0x310>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	b29b      	uxth	r3, r3
 8002686:	1c1a      	adds	r2, r3, #0
 8002688:	1c13      	adds	r3, r2, #0
 800268a:	18db      	adds	r3, r3, r3
 800268c:	189b      	adds	r3, r3, r2
 800268e:	18db      	adds	r3, r3, r3
 8002690:	b29a      	uxth	r2, r3
 8002692:	2326      	movs	r3, #38	; 0x26
 8002694:	2118      	movs	r1, #24
 8002696:	468c      	mov	ip, r1
 8002698:	44bc      	add	ip, r7
 800269a:	4463      	add	r3, ip
 800269c:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 800269e:	231f      	movs	r3, #31
 80026a0:	2218      	movs	r2, #24
 80026a2:	4694      	mov	ip, r2
 80026a4:	44bc      	add	ip, r7
 80026a6:	4463      	add	r3, ip
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]
 80026ac:	e06d      	b.n	800278a <drawChar+0x3ea>
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	200000f6 	.word	0x200000f6
 80026b4:	0800c87c 	.word	0x0800c87c
 80026b8:	200000f8 	.word	0x200000f8
 80026bc:	200000fa 	.word	0x200000fa
							address = (textSize*textSize*j*6)+(i*textSize);
 80026c0:	4bda      	ldr	r3, [pc, #872]	; (8002a2c <drawChar+0x68c>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	4ad9      	ldr	r2, [pc, #868]	; (8002a2c <drawChar+0x68c>)
 80026c8:	7812      	ldrb	r2, [r2, #0]
 80026ca:	b292      	uxth	r2, r2
 80026cc:	4353      	muls	r3, r2
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	2223      	movs	r2, #35	; 0x23
 80026d2:	2118      	movs	r1, #24
 80026d4:	468c      	mov	ip, r1
 80026d6:	44bc      	add	ip, r7
 80026d8:	4462      	add	r2, ip
 80026da:	7812      	ldrb	r2, [r2, #0]
 80026dc:	b252      	sxtb	r2, r2
 80026de:	b292      	uxth	r2, r2
 80026e0:	4353      	muls	r3, r2
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	1c1a      	adds	r2, r3, #0
 80026e6:	1c13      	adds	r3, r2, #0
 80026e8:	18db      	adds	r3, r3, r3
 80026ea:	189b      	adds	r3, r3, r2
 80026ec:	18db      	adds	r3, r3, r3
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	2325      	movs	r3, #37	; 0x25
 80026f2:	2118      	movs	r1, #24
 80026f4:	468c      	mov	ip, r1
 80026f6:	44bc      	add	ip, r7
 80026f8:	4463      	add	r3, ip
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	b25b      	sxtb	r3, r3
 80026fe:	b29b      	uxth	r3, r3
 8002700:	49ca      	ldr	r1, [pc, #808]	; (8002a2c <drawChar+0x68c>)
 8002702:	7809      	ldrb	r1, [r1, #0]
 8002704:	b289      	uxth	r1, r1
 8002706:	434b      	muls	r3, r1
 8002708:	b29b      	uxth	r3, r3
 800270a:	18d3      	adds	r3, r2, r3
 800270c:	b29a      	uxth	r2, r3
 800270e:	210e      	movs	r1, #14
 8002710:	2018      	movs	r0, #24
 8002712:	183b      	adds	r3, r7, r0
 8002714:	185b      	adds	r3, r3, r1
 8002716:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 8002718:	2320      	movs	r3, #32
 800271a:	2218      	movs	r2, #24
 800271c:	4694      	mov	ip, r2
 800271e:	44bc      	add	ip, r7
 8002720:	4463      	add	r3, ip
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	b25b      	sxtb	r3, r3
 8002726:	b29b      	uxth	r3, r3
 8002728:	2226      	movs	r2, #38	; 0x26
 800272a:	2418      	movs	r4, #24
 800272c:	46a4      	mov	ip, r4
 800272e:	44bc      	add	ip, r7
 8002730:	4462      	add	r2, ip
 8002732:	8812      	ldrh	r2, [r2, #0]
 8002734:	4353      	muls	r3, r2
 8002736:	b29a      	uxth	r2, r3
 8002738:	251f      	movs	r5, #31
 800273a:	183b      	adds	r3, r7, r0
 800273c:	195b      	adds	r3, r3, r5
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	b25b      	sxtb	r3, r3
 8002742:	b29b      	uxth	r3, r3
 8002744:	18d3      	adds	r3, r2, r3
 8002746:	b29a      	uxth	r2, r3
 8002748:	183b      	adds	r3, r7, r0
 800274a:	185b      	adds	r3, r3, r1
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	18d3      	adds	r3, r2, r3
 8002750:	b29a      	uxth	r2, r3
 8002752:	183b      	adds	r3, r7, r0
 8002754:	185b      	adds	r3, r3, r1
 8002756:	801a      	strh	r2, [r3, #0]
							buffer[address] = colorFixer(bg);
 8002758:	4bb5      	ldr	r3, [pc, #724]	; (8002a30 <drawChar+0x690>)
 800275a:	881a      	ldrh	r2, [r3, #0]
 800275c:	0006      	movs	r6, r0
 800275e:	183b      	adds	r3, r7, r0
 8002760:	185b      	adds	r3, r3, r1
 8002762:	2400      	movs	r4, #0
 8002764:	5f1c      	ldrsh	r4, [r3, r4]
 8002766:	0010      	movs	r0, r2
 8002768:	f7ff fc4e 	bl	8002008 <colorFixer>
 800276c:	0003      	movs	r3, r0
 800276e:	0019      	movs	r1, r3
 8002770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002772:	0062      	lsls	r2, r4, #1
 8002774:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 8002776:	19bb      	adds	r3, r7, r6
 8002778:	195b      	adds	r3, r3, r5
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	b25b      	sxtb	r3, r3
 800277e:	b2db      	uxtb	r3, r3
 8002780:	3301      	adds	r3, #1
 8002782:	b2da      	uxtb	r2, r3
 8002784:	19bb      	adds	r3, r7, r6
 8002786:	195b      	adds	r3, r3, r5
 8002788:	701a      	strb	r2, [r3, #0]
 800278a:	231f      	movs	r3, #31
 800278c:	2218      	movs	r2, #24
 800278e:	4694      	mov	ip, r2
 8002790:	44bc      	add	ip, r7
 8002792:	4463      	add	r3, ip
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	b25b      	sxtb	r3, r3
 8002798:	4aa4      	ldr	r2, [pc, #656]	; (8002a2c <drawChar+0x68c>)
 800279a:	7812      	ldrb	r2, [r2, #0]
 800279c:	4293      	cmp	r3, r2
 800279e:	db8f      	blt.n	80026c0 <drawChar+0x320>
					for (int8_t k = 0; k < textSize; k++) {
 80027a0:	2120      	movs	r1, #32
 80027a2:	2018      	movs	r0, #24
 80027a4:	183b      	adds	r3, r7, r0
 80027a6:	185b      	adds	r3, r3, r1
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	b25b      	sxtb	r3, r3
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	3301      	adds	r3, #1
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	183b      	adds	r3, r7, r0
 80027b4:	185b      	adds	r3, r3, r1
 80027b6:	701a      	strb	r2, [r3, #0]
 80027b8:	2320      	movs	r3, #32
 80027ba:	2218      	movs	r2, #24
 80027bc:	4694      	mov	ip, r2
 80027be:	44bc      	add	ip, r7
 80027c0:	4463      	add	r3, ip
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	b25b      	sxtb	r3, r3
 80027c6:	4a99      	ldr	r2, [pc, #612]	; (8002a2c <drawChar+0x68c>)
 80027c8:	7812      	ldrb	r2, [r2, #0]
 80027ca:	4293      	cmp	r3, r2
 80027cc:	da00      	bge.n	80027d0 <drawChar+0x430>
 80027ce:	e757      	b.n	8002680 <drawChar+0x2e0>
		for (int8_t j=0; j<8; j++, line >>= 1) {
 80027d0:	2123      	movs	r1, #35	; 0x23
 80027d2:	2018      	movs	r0, #24
 80027d4:	183b      	adds	r3, r7, r0
 80027d6:	185b      	adds	r3, r3, r1
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	b25b      	sxtb	r3, r3
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	3301      	adds	r3, #1
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	183b      	adds	r3, r7, r0
 80027e4:	185b      	adds	r3, r3, r1
 80027e6:	701a      	strb	r2, [r3, #0]
 80027e8:	2224      	movs	r2, #36	; 0x24
 80027ea:	183b      	adds	r3, r7, r0
 80027ec:	189b      	adds	r3, r3, r2
 80027ee:	2118      	movs	r1, #24
 80027f0:	468c      	mov	ip, r1
 80027f2:	44bc      	add	ip, r7
 80027f4:	4462      	add	r2, ip
 80027f6:	7812      	ldrb	r2, [r2, #0]
 80027f8:	0852      	lsrs	r2, r2, #1
 80027fa:	701a      	strb	r2, [r3, #0]
 80027fc:	2323      	movs	r3, #35	; 0x23
 80027fe:	2218      	movs	r2, #24
 8002800:	4694      	mov	ip, r2
 8002802:	44bc      	add	ip, r7
 8002804:	4463      	add	r3, ip
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	b25b      	sxtb	r3, r3
 800280a:	2b07      	cmp	r3, #7
 800280c:	dc00      	bgt.n	8002810 <drawChar+0x470>
 800280e:	e634      	b.n	800247a <drawChar+0xda>
	for (int8_t i=0; i<5; i++) {
 8002810:	2125      	movs	r1, #37	; 0x25
 8002812:	2018      	movs	r0, #24
 8002814:	183b      	adds	r3, r7, r0
 8002816:	185b      	adds	r3, r3, r1
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	b25b      	sxtb	r3, r3
 800281c:	b2db      	uxtb	r3, r3
 800281e:	3301      	adds	r3, #1
 8002820:	b2da      	uxtb	r2, r3
 8002822:	183b      	adds	r3, r7, r0
 8002824:	185b      	adds	r3, r3, r1
 8002826:	701a      	strb	r2, [r3, #0]
 8002828:	2325      	movs	r3, #37	; 0x25
 800282a:	2218      	movs	r2, #24
 800282c:	4694      	mov	ip, r2
 800282e:	44bc      	add	ip, r7
 8002830:	4463      	add	r3, ip
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	b25b      	sxtb	r3, r3
 8002836:	2b04      	cmp	r3, #4
 8002838:	dc00      	bgt.n	800283c <drawChar+0x49c>
 800283a:	e600      	b.n	800243e <drawChar+0x9e>
		}
	}

	// If opaque, draw vertical line for last column
	// for character 1px kerning
	if (bg != textColor) {
 800283c:	4b7c      	ldr	r3, [pc, #496]	; (8002a30 <drawChar+0x690>)
 800283e:	881a      	ldrh	r2, [r3, #0]
 8002840:	4b7c      	ldr	r3, [pc, #496]	; (8002a34 <drawChar+0x694>)
 8002842:	881b      	ldrh	r3, [r3, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d100      	bne.n	800284a <drawChar+0x4aa>
 8002848:	e0ca      	b.n	80029e0 <drawChar+0x640>
		for (int8_t j = 0; j < 8; j++) {
 800284a:	231e      	movs	r3, #30
 800284c:	2218      	movs	r2, #24
 800284e:	4694      	mov	ip, r2
 8002850:	44bc      	add	ip, r7
 8002852:	4463      	add	r3, ip
 8002854:	2200      	movs	r2, #0
 8002856:	701a      	strb	r2, [r3, #0]
 8002858:	e0b8      	b.n	80029cc <drawChar+0x62c>
			if (textSize == 1) {
 800285a:	4b74      	ldr	r3, [pc, #464]	; (8002a2c <drawChar+0x68c>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d116      	bne.n	8002890 <drawChar+0x4f0>
				buffer[5+j*6] = colorFixer(bg);
 8002862:	4b73      	ldr	r3, [pc, #460]	; (8002a30 <drawChar+0x690>)
 8002864:	8819      	ldrh	r1, [r3, #0]
 8002866:	231e      	movs	r3, #30
 8002868:	2218      	movs	r2, #24
 800286a:	4694      	mov	ip, r2
 800286c:	44bc      	add	ip, r7
 800286e:	4463      	add	r3, ip
 8002870:	2200      	movs	r2, #0
 8002872:	569a      	ldrsb	r2, [r3, r2]
 8002874:	0013      	movs	r3, r2
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	189b      	adds	r3, r3, r2
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	1d5c      	adds	r4, r3, #5
 800287e:	0008      	movs	r0, r1
 8002880:	f7ff fbc2 	bl	8002008 <colorFixer>
 8002884:	0003      	movs	r3, r0
 8002886:	0019      	movs	r1, r3
 8002888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288a:	0062      	lsls	r2, r4, #1
 800288c:	52d1      	strh	r1, [r2, r3]
 800288e:	e091      	b.n	80029b4 <drawChar+0x614>
			}
			else {
				for (int8_t k = 0; k < textSize; k++) {
 8002890:	231d      	movs	r3, #29
 8002892:	2218      	movs	r2, #24
 8002894:	4694      	mov	ip, r2
 8002896:	44bc      	add	ip, r7
 8002898:	4463      	add	r3, ip
 800289a:	2200      	movs	r2, #0
 800289c:	701a      	strb	r2, [r3, #0]
 800289e:	e07d      	b.n	800299c <drawChar+0x5fc>
					for (int8_t l = 0; l < textSize; l++) {
 80028a0:	231c      	movs	r3, #28
 80028a2:	2218      	movs	r2, #24
 80028a4:	4694      	mov	ip, r2
 80028a6:	44bc      	add	ip, r7
 80028a8:	4463      	add	r3, ip
 80028aa:	2200      	movs	r2, #0
 80028ac:	701a      	strb	r2, [r3, #0]
 80028ae:	e05e      	b.n	800296e <drawChar+0x5ce>
						address = (textSize*textSize*j*6)+(5*textSize);
 80028b0:	4b5e      	ldr	r3, [pc, #376]	; (8002a2c <drawChar+0x68c>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	4a5d      	ldr	r2, [pc, #372]	; (8002a2c <drawChar+0x68c>)
 80028b8:	7812      	ldrb	r2, [r2, #0]
 80028ba:	b292      	uxth	r2, r2
 80028bc:	4353      	muls	r3, r2
 80028be:	b29b      	uxth	r3, r3
 80028c0:	221e      	movs	r2, #30
 80028c2:	2118      	movs	r1, #24
 80028c4:	468c      	mov	ip, r1
 80028c6:	44bc      	add	ip, r7
 80028c8:	4462      	add	r2, ip
 80028ca:	7812      	ldrb	r2, [r2, #0]
 80028cc:	b252      	sxtb	r2, r2
 80028ce:	b292      	uxth	r2, r2
 80028d0:	4353      	muls	r3, r2
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	1c1a      	adds	r2, r3, #0
 80028d6:	1c13      	adds	r3, r2, #0
 80028d8:	18db      	adds	r3, r3, r3
 80028da:	189b      	adds	r3, r3, r2
 80028dc:	18db      	adds	r3, r3, r3
 80028de:	b29a      	uxth	r2, r3
 80028e0:	4b52      	ldr	r3, [pc, #328]	; (8002a2c <drawChar+0x68c>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	1c19      	adds	r1, r3, #0
 80028e8:	0089      	lsls	r1, r1, #2
 80028ea:	18cb      	adds	r3, r1, r3
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	18d3      	adds	r3, r2, r3
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	210e      	movs	r1, #14
 80028f4:	2018      	movs	r0, #24
 80028f6:	183b      	adds	r3, r7, r0
 80028f8:	185b      	adds	r3, r3, r1
 80028fa:	801a      	strh	r2, [r3, #0]
						address += rowOffset*k+l;
 80028fc:	231d      	movs	r3, #29
 80028fe:	2218      	movs	r2, #24
 8002900:	4694      	mov	ip, r2
 8002902:	44bc      	add	ip, r7
 8002904:	4463      	add	r3, ip
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	b25b      	sxtb	r3, r3
 800290a:	b29b      	uxth	r3, r3
 800290c:	2226      	movs	r2, #38	; 0x26
 800290e:	2418      	movs	r4, #24
 8002910:	46a4      	mov	ip, r4
 8002912:	44bc      	add	ip, r7
 8002914:	4462      	add	r2, ip
 8002916:	8812      	ldrh	r2, [r2, #0]
 8002918:	4353      	muls	r3, r2
 800291a:	b29a      	uxth	r2, r3
 800291c:	251c      	movs	r5, #28
 800291e:	183b      	adds	r3, r7, r0
 8002920:	195b      	adds	r3, r3, r5
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	b25b      	sxtb	r3, r3
 8002926:	b29b      	uxth	r3, r3
 8002928:	18d3      	adds	r3, r2, r3
 800292a:	b29a      	uxth	r2, r3
 800292c:	183b      	adds	r3, r7, r0
 800292e:	185b      	adds	r3, r3, r1
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	18d3      	adds	r3, r2, r3
 8002934:	b29a      	uxth	r2, r3
 8002936:	183b      	adds	r3, r7, r0
 8002938:	185b      	adds	r3, r3, r1
 800293a:	801a      	strh	r2, [r3, #0]
						buffer[address] = colorFixer(bg);
 800293c:	4b3c      	ldr	r3, [pc, #240]	; (8002a30 <drawChar+0x690>)
 800293e:	881a      	ldrh	r2, [r3, #0]
 8002940:	0006      	movs	r6, r0
 8002942:	183b      	adds	r3, r7, r0
 8002944:	185b      	adds	r3, r3, r1
 8002946:	2400      	movs	r4, #0
 8002948:	5f1c      	ldrsh	r4, [r3, r4]
 800294a:	0010      	movs	r0, r2
 800294c:	f7ff fb5c 	bl	8002008 <colorFixer>
 8002950:	0003      	movs	r3, r0
 8002952:	0019      	movs	r1, r3
 8002954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002956:	0062      	lsls	r2, r4, #1
 8002958:	52d1      	strh	r1, [r2, r3]
					for (int8_t l = 0; l < textSize; l++) {
 800295a:	19bb      	adds	r3, r7, r6
 800295c:	195b      	adds	r3, r3, r5
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	b25b      	sxtb	r3, r3
 8002962:	b2db      	uxtb	r3, r3
 8002964:	3301      	adds	r3, #1
 8002966:	b2da      	uxtb	r2, r3
 8002968:	19bb      	adds	r3, r7, r6
 800296a:	195b      	adds	r3, r3, r5
 800296c:	701a      	strb	r2, [r3, #0]
 800296e:	231c      	movs	r3, #28
 8002970:	2218      	movs	r2, #24
 8002972:	4694      	mov	ip, r2
 8002974:	44bc      	add	ip, r7
 8002976:	4463      	add	r3, ip
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	b25b      	sxtb	r3, r3
 800297c:	4a2b      	ldr	r2, [pc, #172]	; (8002a2c <drawChar+0x68c>)
 800297e:	7812      	ldrb	r2, [r2, #0]
 8002980:	4293      	cmp	r3, r2
 8002982:	db95      	blt.n	80028b0 <drawChar+0x510>
				for (int8_t k = 0; k < textSize; k++) {
 8002984:	211d      	movs	r1, #29
 8002986:	2018      	movs	r0, #24
 8002988:	183b      	adds	r3, r7, r0
 800298a:	185b      	adds	r3, r3, r1
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	b25b      	sxtb	r3, r3
 8002990:	b2db      	uxtb	r3, r3
 8002992:	3301      	adds	r3, #1
 8002994:	b2da      	uxtb	r2, r3
 8002996:	183b      	adds	r3, r7, r0
 8002998:	185b      	adds	r3, r3, r1
 800299a:	701a      	strb	r2, [r3, #0]
 800299c:	231d      	movs	r3, #29
 800299e:	2218      	movs	r2, #24
 80029a0:	4694      	mov	ip, r2
 80029a2:	44bc      	add	ip, r7
 80029a4:	4463      	add	r3, ip
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	b25b      	sxtb	r3, r3
 80029aa:	4a20      	ldr	r2, [pc, #128]	; (8002a2c <drawChar+0x68c>)
 80029ac:	7812      	ldrb	r2, [r2, #0]
 80029ae:	4293      	cmp	r3, r2
 80029b0:	da00      	bge.n	80029b4 <drawChar+0x614>
 80029b2:	e775      	b.n	80028a0 <drawChar+0x500>
		for (int8_t j = 0; j < 8; j++) {
 80029b4:	211e      	movs	r1, #30
 80029b6:	2018      	movs	r0, #24
 80029b8:	183b      	adds	r3, r7, r0
 80029ba:	185b      	adds	r3, r3, r1
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	b25b      	sxtb	r3, r3
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	3301      	adds	r3, #1
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	183b      	adds	r3, r7, r0
 80029c8:	185b      	adds	r3, r3, r1
 80029ca:	701a      	strb	r2, [r3, #0]
 80029cc:	231e      	movs	r3, #30
 80029ce:	2218      	movs	r2, #24
 80029d0:	4694      	mov	ip, r2
 80029d2:	44bc      	add	ip, r7
 80029d4:	4463      	add	r3, ip
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	b25b      	sxtb	r3, r3
 80029da:	2b07      	cmp	r3, #7
 80029dc:	dc00      	bgt.n	80029e0 <drawChar+0x640>
 80029de:	e73c      	b.n	800285a <drawChar+0x4ba>
				}
			}
		}
	}

	drawBuffer(cursorX, cursorY, 6*textSize, 8*textSize, buffer, bufferSize, hspi);
 80029e0:	4b15      	ldr	r3, [pc, #84]	; (8002a38 <drawChar+0x698>)
 80029e2:	7818      	ldrb	r0, [r3, #0]
 80029e4:	4b15      	ldr	r3, [pc, #84]	; (8002a3c <drawChar+0x69c>)
 80029e6:	7819      	ldrb	r1, [r3, #0]
 80029e8:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <drawChar+0x68c>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	1c1a      	adds	r2, r3, #0
 80029ee:	1c13      	adds	r3, r2, #0
 80029f0:	18db      	adds	r3, r3, r3
 80029f2:	189b      	adds	r3, r3, r2
 80029f4:	18db      	adds	r3, r3, r3
 80029f6:	b2dc      	uxtb	r4, r3
 80029f8:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <drawChar+0x68c>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	b2dd      	uxtb	r5, r3
 8002a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	9202      	str	r2, [sp, #8]
 8002a06:	221a      	movs	r2, #26
 8002a08:	2618      	movs	r6, #24
 8002a0a:	46b4      	mov	ip, r6
 8002a0c:	44bc      	add	ip, r7
 8002a0e:	4462      	add	r2, ip
 8002a10:	8812      	ldrh	r2, [r2, #0]
 8002a12:	9201      	str	r2, [sp, #4]
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	002b      	movs	r3, r5
 8002a18:	0022      	movs	r2, r4
 8002a1a:	f7ff fbaa 	bl	8002172 <drawBuffer>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	469d      	mov	sp, r3
}
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	46bd      	mov	sp, r7
 8002a26:	b011      	add	sp, #68	; 0x44
 8002a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a2a:	46c0      	nop			; (mov r8, r8)
 8002a2c:	200000f6 	.word	0x200000f6
 8002a30:	200000fa 	.word	0x200000fa
 8002a34:	200000f8 	.word	0x200000f8
 8002a38:	200000f4 	.word	0x200000f4
 8002a3c:	200000f5 	.word	0x200000f5

08002a40 <drawText>:

// draws character strings
void drawText(const char *str, SPI_HandleTypeDef *hspi) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
	for (int i = 0; str[i] != '\0'; i++) {
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	e01d      	b.n	8002a8c <drawText+0x4c>
		drawChar(str[i], hspi);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	18d3      	adds	r3, r2, r3
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	0011      	movs	r1, r2
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f7ff fc9f 	bl	80023a0 <drawChar>

		// moves cursor on every character print so it's not printed to the same place
		setCursor(cursorX+textSize*6, cursorY);
 8002a62:	4b0f      	ldr	r3, [pc, #60]	; (8002aa0 <drawText+0x60>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	1c1a      	adds	r2, r3, #0
 8002a68:	1c13      	adds	r3, r2, #0
 8002a6a:	18db      	adds	r3, r3, r3
 8002a6c:	189b      	adds	r3, r3, r2
 8002a6e:	18db      	adds	r3, r3, r3
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <drawText+0x64>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	18d3      	adds	r3, r2, r3
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <drawText+0x68>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	0019      	movs	r1, r3
 8002a80:	0010      	movs	r0, r2
 8002a82:	f000 f9c5 	bl	8002e10 <setCursor>
	for (int i = 0; str[i] != '\0'; i++) {
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	18d3      	adds	r3, r2, r3
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1db      	bne.n	8002a50 <drawText+0x10>
	}
}
 8002a98:	46c0      	nop			; (mov r8, r8)
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b004      	add	sp, #16
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	200000f6 	.word	0x200000f6
 8002aa4:	200000f4 	.word	0x200000f4
 8002aa8:	200000f5 	.word	0x200000f5

08002aac <drawTextAt>:

// drawText, but coordinates as arguments. coordinates are for upper left bound
void drawTextAt(uint8_t x, uint8_t y, const char *str, SPI_HandleTypeDef *hspi) {
 8002aac:	b590      	push	{r4, r7, lr}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60ba      	str	r2, [r7, #8]
 8002ab4:	607b      	str	r3, [r7, #4]
 8002ab6:	240f      	movs	r4, #15
 8002ab8:	193b      	adds	r3, r7, r4
 8002aba:	1c02      	adds	r2, r0, #0
 8002abc:	701a      	strb	r2, [r3, #0]
 8002abe:	200e      	movs	r0, #14
 8002ac0:	183b      	adds	r3, r7, r0
 8002ac2:	1c0a      	adds	r2, r1, #0
 8002ac4:	701a      	strb	r2, [r3, #0]
	// add text wrap
	int i = 0;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	617b      	str	r3, [r7, #20]
	setCursor(x,y);
 8002aca:	183b      	adds	r3, r7, r0
 8002acc:	781a      	ldrb	r2, [r3, #0]
 8002ace:	193b      	adds	r3, r7, r4
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	0011      	movs	r1, r2
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f000 f99b 	bl	8002e10 <setCursor>
	for (i = 0; str[i] != '\0'; i++) {
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	e01d      	b.n	8002b1c <drawTextAt+0x70>
		drawChar(str[i], hspi);
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	18d3      	adds	r3, r2, r3
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	0011      	movs	r1, r2
 8002aec:	0018      	movs	r0, r3
 8002aee:	f7ff fc57 	bl	80023a0 <drawChar>
		setCursor(cursorX+textSize*6, cursorY);
 8002af2:	4b0f      	ldr	r3, [pc, #60]	; (8002b30 <drawTextAt+0x84>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	1c1a      	adds	r2, r3, #0
 8002af8:	1c13      	adds	r3, r2, #0
 8002afa:	18db      	adds	r3, r3, r3
 8002afc:	189b      	adds	r3, r3, r2
 8002afe:	18db      	adds	r3, r3, r3
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <drawTextAt+0x88>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	18d3      	adds	r3, r2, r3
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <drawTextAt+0x8c>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	0019      	movs	r1, r3
 8002b10:	0010      	movs	r0, r2
 8002b12:	f000 f97d 	bl	8002e10 <setCursor>
	for (i = 0; str[i] != '\0'; i++) {
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	18d3      	adds	r3, r2, r3
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1db      	bne.n	8002ae0 <drawTextAt+0x34>
	}
}
 8002b28:	46c0      	nop			; (mov r8, r8)
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	b007      	add	sp, #28
 8002b2e:	bd90      	pop	{r4, r7, pc}
 8002b30:	200000f6 	.word	0x200000f6
 8002b34:	200000f4 	.word	0x200000f4
 8002b38:	200000f5 	.word	0x200000f5

08002b3c <drawCenteredText>:

// draws text centered on an x coordinate. y is upper bound of box
void drawCenteredText(uint8_t x_center, uint8_t y, const char *str, SPI_HandleTypeDef *hspi) {
 8002b3c:	b590      	push	{r4, r7, lr}
 8002b3e:	b089      	sub	sp, #36	; 0x24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60ba      	str	r2, [r7, #8]
 8002b44:	607b      	str	r3, [r7, #4]
 8002b46:	230f      	movs	r3, #15
 8002b48:	18fb      	adds	r3, r7, r3
 8002b4a:	1c02      	adds	r2, r0, #0
 8002b4c:	701a      	strb	r2, [r3, #0]
 8002b4e:	240e      	movs	r4, #14
 8002b50:	193b      	adds	r3, r7, r4
 8002b52:	1c0a      	adds	r2, r1, #0
 8002b54:	701a      	strb	r2, [r3, #0]
	uint8_t strSize = strlen(str);
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	0018      	movs	r0, r3
 8002b5a:	f7fd fad5 	bl	8000108 <strlen>
 8002b5e:	0002      	movs	r2, r0
 8002b60:	231f      	movs	r3, #31
 8002b62:	18fb      	adds	r3, r7, r3
 8002b64:	701a      	strb	r2, [r3, #0]
	// bounds checking. text box needed to print text should not end up out of bounds
	// also calculating what bounds of text box should be
	if (y+textSize*8 > HEIGHT) return;
 8002b66:	193b      	adds	r3, r7, r4
 8002b68:	781a      	ldrb	r2, [r3, #0]
 8002b6a:	4b24      	ldr	r3, [pc, #144]	; (8002bfc <drawCenteredText+0xc0>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	18d3      	adds	r3, r2, r3
 8002b72:	2ba0      	cmp	r3, #160	; 0xa0
 8002b74:	dc3a      	bgt.n	8002bec <drawCenteredText+0xb0>
	int leftBound = x_center-(strSize*textSize*6)/2;
 8002b76:	230f      	movs	r3, #15
 8002b78:	18fb      	adds	r3, r7, r3
 8002b7a:	7819      	ldrb	r1, [r3, #0]
 8002b7c:	231f      	movs	r3, #31
 8002b7e:	18fb      	adds	r3, r7, r3
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	4a1e      	ldr	r2, [pc, #120]	; (8002bfc <drawCenteredText+0xc0>)
 8002b84:	7812      	ldrb	r2, [r2, #0]
 8002b86:	435a      	muls	r2, r3
 8002b88:	0013      	movs	r3, r2
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	189b      	adds	r3, r3, r2
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	d500      	bpl.n	8002b94 <drawCenteredText+0x58>
 8002b92:	3301      	adds	r3, #1
 8002b94:	105b      	asrs	r3, r3, #1
 8002b96:	425b      	negs	r3, r3
 8002b98:	18cb      	adds	r3, r1, r3
 8002b9a:	61bb      	str	r3, [r7, #24]
	int rightBound = x_center+(strSize*textSize*6)/2;
 8002b9c:	230f      	movs	r3, #15
 8002b9e:	18fb      	adds	r3, r7, r3
 8002ba0:	7819      	ldrb	r1, [r3, #0]
 8002ba2:	231f      	movs	r3, #31
 8002ba4:	18fb      	adds	r3, r7, r3
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	4a14      	ldr	r2, [pc, #80]	; (8002bfc <drawCenteredText+0xc0>)
 8002baa:	7812      	ldrb	r2, [r2, #0]
 8002bac:	435a      	muls	r2, r3
 8002bae:	0013      	movs	r3, r2
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	189b      	adds	r3, r3, r2
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	d500      	bpl.n	8002bba <drawCenteredText+0x7e>
 8002bb8:	3301      	adds	r3, #1
 8002bba:	105b      	asrs	r3, r3, #1
 8002bbc:	18cb      	adds	r3, r1, r3
 8002bbe:	617b      	str	r3, [r7, #20]
	if (leftBound < 0) return;
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	db14      	blt.n	8002bf0 <drawCenteredText+0xb4>
	if (rightBound > WIDTH) return;
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	2b80      	cmp	r3, #128	; 0x80
 8002bca:	dc13      	bgt.n	8002bf4 <drawCenteredText+0xb8>

	setCursor(leftBound, y);
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	230e      	movs	r3, #14
 8002bd2:	18fb      	adds	r3, r7, r3
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	0019      	movs	r1, r3
 8002bd8:	0010      	movs	r0, r2
 8002bda:	f000 f919 	bl	8002e10 <setCursor>
	drawText(str, hspi);
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	0011      	movs	r1, r2
 8002be4:	0018      	movs	r0, r3
 8002be6:	f7ff ff2b 	bl	8002a40 <drawText>
 8002bea:	e004      	b.n	8002bf6 <drawCenteredText+0xba>
	if (y+textSize*8 > HEIGHT) return;
 8002bec:	46c0      	nop			; (mov r8, r8)
 8002bee:	e002      	b.n	8002bf6 <drawCenteredText+0xba>
	if (leftBound < 0) return;
 8002bf0:	46c0      	nop			; (mov r8, r8)
 8002bf2:	e000      	b.n	8002bf6 <drawCenteredText+0xba>
	if (rightBound > WIDTH) return;
 8002bf4:	46c0      	nop			; (mov r8, r8)
}
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	b009      	add	sp, #36	; 0x24
 8002bfa:	bd90      	pop	{r4, r7, pc}
 8002bfc:	200000f6 	.word	0x200000f6

08002c00 <drawCenteredTextWithPadding>:

// drawCenteredText, but background is filled to left and right of box
// used for cases where you're printing strings to the same place, but they have different sizes
void drawCenteredTextWithPadding(uint8_t x_center, uint8_t y, uint8_t maxLength, const char *str, SPI_HandleTypeDef *hspi) {
 8002c00:	b5b0      	push	{r4, r5, r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af02      	add	r7, sp, #8
 8002c06:	0004      	movs	r4, r0
 8002c08:	0008      	movs	r0, r1
 8002c0a:	0011      	movs	r1, r2
 8002c0c:	603b      	str	r3, [r7, #0]
 8002c0e:	1dfb      	adds	r3, r7, #7
 8002c10:	1c22      	adds	r2, r4, #0
 8002c12:	701a      	strb	r2, [r3, #0]
 8002c14:	1dbb      	adds	r3, r7, #6
 8002c16:	1c02      	adds	r2, r0, #0
 8002c18:	701a      	strb	r2, [r3, #0]
 8002c1a:	1d7b      	adds	r3, r7, #5
 8002c1c:	1c0a      	adds	r2, r1, #0
 8002c1e:	701a      	strb	r2, [r3, #0]
	// bounds checking. text box needed to print text should not end up out of bounds
	if (y+textSize*8 > HEIGHT) return;
 8002c20:	1dbb      	adds	r3, r7, #6
 8002c22:	781a      	ldrb	r2, [r3, #0]
 8002c24:	4b60      	ldr	r3, [pc, #384]	; (8002da8 <drawCenteredTextWithPadding+0x1a8>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	18d3      	adds	r3, r2, r3
 8002c2c:	2ba0      	cmp	r3, #160	; 0xa0
 8002c2e:	dd00      	ble.n	8002c32 <drawCenteredTextWithPadding+0x32>
 8002c30:	e0af      	b.n	8002d92 <drawCenteredTextWithPadding+0x192>
	int leftBound = x_center-(maxLength*textSize*6)/2;
 8002c32:	1dfb      	adds	r3, r7, #7
 8002c34:	7819      	ldrb	r1, [r3, #0]
 8002c36:	1d7b      	adds	r3, r7, #5
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	4a5b      	ldr	r2, [pc, #364]	; (8002da8 <drawCenteredTextWithPadding+0x1a8>)
 8002c3c:	7812      	ldrb	r2, [r2, #0]
 8002c3e:	435a      	muls	r2, r3
 8002c40:	0013      	movs	r3, r2
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	189b      	adds	r3, r3, r2
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	d500      	bpl.n	8002c4c <drawCenteredTextWithPadding+0x4c>
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	105b      	asrs	r3, r3, #1
 8002c4e:	425b      	negs	r3, r3
 8002c50:	18cb      	adds	r3, r1, r3
 8002c52:	617b      	str	r3, [r7, #20]
	int rightBound = x_center+(maxLength*textSize*6)/2;
 8002c54:	1dfb      	adds	r3, r7, #7
 8002c56:	7819      	ldrb	r1, [r3, #0]
 8002c58:	1d7b      	adds	r3, r7, #5
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	4a52      	ldr	r2, [pc, #328]	; (8002da8 <drawCenteredTextWithPadding+0x1a8>)
 8002c5e:	7812      	ldrb	r2, [r2, #0]
 8002c60:	435a      	muls	r2, r3
 8002c62:	0013      	movs	r3, r2
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	189b      	adds	r3, r3, r2
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	d500      	bpl.n	8002c6e <drawCenteredTextWithPadding+0x6e>
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	105b      	asrs	r3, r3, #1
 8002c70:	18cb      	adds	r3, r1, r3
 8002c72:	613b      	str	r3, [r7, #16]
	if (leftBound < 0) return;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	da00      	bge.n	8002c7c <drawCenteredTextWithPadding+0x7c>
 8002c7a:	e08c      	b.n	8002d96 <drawCenteredTextWithPadding+0x196>
	if (rightBound > WIDTH) return;
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	2b80      	cmp	r3, #128	; 0x80
 8002c80:	dd00      	ble.n	8002c84 <drawCenteredTextWithPadding+0x84>
 8002c82:	e08a      	b.n	8002d9a <drawCenteredTextWithPadding+0x19a>

	uint8_t strSize = strlen(str);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	0018      	movs	r0, r3
 8002c88:	f7fd fa3e 	bl	8000108 <strlen>
 8002c8c:	0002      	movs	r2, r0
 8002c8e:	210f      	movs	r1, #15
 8002c90:	187b      	adds	r3, r7, r1
 8002c92:	701a      	strb	r2, [r3, #0]
	if (maxLength < strSize) return;		// size should not be greater than max
 8002c94:	1d7a      	adds	r2, r7, #5
 8002c96:	187b      	adds	r3, r7, r1
 8002c98:	7812      	ldrb	r2, [r2, #0]
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d200      	bcs.n	8002ca2 <drawCenteredTextWithPadding+0xa2>
 8002ca0:	e07d      	b.n	8002d9e <drawCenteredTextWithPadding+0x19e>

	// draw left and right padding
	uint8_t diff = maxLength-strSize;
 8002ca2:	240e      	movs	r4, #14
 8002ca4:	193b      	adds	r3, r7, r4
 8002ca6:	1d79      	adds	r1, r7, #5
 8002ca8:	220f      	movs	r2, #15
 8002caa:	18ba      	adds	r2, r7, r2
 8002cac:	7809      	ldrb	r1, [r1, #0]
 8002cae:	7812      	ldrb	r2, [r2, #0]
 8002cb0:	1a8a      	subs	r2, r1, r2
 8002cb2:	701a      	strb	r2, [r3, #0]
	fillRect(leftBound, y, diff*textSize*6/2, textSize*8, bg, hspi);		// math out of order to accomodate diff/2 being a non-int
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	b2d8      	uxtb	r0, r3
 8002cb8:	193b      	adds	r3, r7, r4
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	4a3a      	ldr	r2, [pc, #232]	; (8002da8 <drawCenteredTextWithPadding+0x1a8>)
 8002cbe:	7812      	ldrb	r2, [r2, #0]
 8002cc0:	435a      	muls	r2, r3
 8002cc2:	0013      	movs	r3, r2
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	189b      	adds	r3, r3, r2
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	d500      	bpl.n	8002cce <drawCenteredTextWithPadding+0xce>
 8002ccc:	3301      	adds	r3, #1
 8002cce:	105b      	asrs	r3, r3, #1
 8002cd0:	b2dc      	uxtb	r4, r3
 8002cd2:	4b35      	ldr	r3, [pc, #212]	; (8002da8 <drawCenteredTextWithPadding+0x1a8>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	b2dd      	uxtb	r5, r3
 8002cda:	4b34      	ldr	r3, [pc, #208]	; (8002dac <drawCenteredTextWithPadding+0x1ac>)
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	1dba      	adds	r2, r7, #6
 8002ce0:	7811      	ldrb	r1, [r2, #0]
 8002ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ce4:	9201      	str	r2, [sp, #4]
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	002b      	movs	r3, r5
 8002cea:	0022      	movs	r2, r4
 8002cec:	f7ff fada 	bl	80022a4 <fillRect>
	fillRect(rightBound-diff*textSize*6/2, y, diff*textSize*6/2, textSize*8, bg, hspi);
 8002cf0:	230e      	movs	r3, #14
 8002cf2:	18fb      	adds	r3, r7, r3
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	4a2c      	ldr	r2, [pc, #176]	; (8002da8 <drawCenteredTextWithPadding+0x1a8>)
 8002cf8:	7812      	ldrb	r2, [r2, #0]
 8002cfa:	435a      	muls	r2, r3
 8002cfc:	0013      	movs	r3, r2
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	189b      	adds	r3, r3, r2
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	d500      	bpl.n	8002d08 <drawCenteredTextWithPadding+0x108>
 8002d06:	3301      	adds	r3, #1
 8002d08:	105b      	asrs	r3, r3, #1
 8002d0a:	425b      	negs	r3, r3
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	18d3      	adds	r3, r2, r3
 8002d14:	b2d8      	uxtb	r0, r3
 8002d16:	230e      	movs	r3, #14
 8002d18:	18fb      	adds	r3, r7, r3
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	4a22      	ldr	r2, [pc, #136]	; (8002da8 <drawCenteredTextWithPadding+0x1a8>)
 8002d1e:	7812      	ldrb	r2, [r2, #0]
 8002d20:	435a      	muls	r2, r3
 8002d22:	0013      	movs	r3, r2
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	189b      	adds	r3, r3, r2
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	d500      	bpl.n	8002d2e <drawCenteredTextWithPadding+0x12e>
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	105b      	asrs	r3, r3, #1
 8002d30:	b2dc      	uxtb	r4, r3
 8002d32:	4b1d      	ldr	r3, [pc, #116]	; (8002da8 <drawCenteredTextWithPadding+0x1a8>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	b2dd      	uxtb	r5, r3
 8002d3a:	4b1c      	ldr	r3, [pc, #112]	; (8002dac <drawCenteredTextWithPadding+0x1ac>)
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	1dba      	adds	r2, r7, #6
 8002d40:	7811      	ldrb	r1, [r2, #0]
 8002d42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d44:	9201      	str	r2, [sp, #4]
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	002b      	movs	r3, r5
 8002d4a:	0022      	movs	r2, r4
 8002d4c:	f7ff faaa 	bl	80022a4 <fillRect>

	int textLeftBound = x_center-(strSize*textSize*6)/2;
 8002d50:	1dfb      	adds	r3, r7, #7
 8002d52:	7819      	ldrb	r1, [r3, #0]
 8002d54:	230f      	movs	r3, #15
 8002d56:	18fb      	adds	r3, r7, r3
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	4a13      	ldr	r2, [pc, #76]	; (8002da8 <drawCenteredTextWithPadding+0x1a8>)
 8002d5c:	7812      	ldrb	r2, [r2, #0]
 8002d5e:	435a      	muls	r2, r3
 8002d60:	0013      	movs	r3, r2
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	189b      	adds	r3, r3, r2
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	d500      	bpl.n	8002d6c <drawCenteredTextWithPadding+0x16c>
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	105b      	asrs	r3, r3, #1
 8002d6e:	425b      	negs	r3, r3
 8002d70:	18cb      	adds	r3, r1, r3
 8002d72:	60bb      	str	r3, [r7, #8]
	setCursor(textLeftBound, y);
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	1dbb      	adds	r3, r7, #6
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	0019      	movs	r1, r3
 8002d7e:	0010      	movs	r0, r2
 8002d80:	f000 f846 	bl	8002e10 <setCursor>
	drawText(str, hspi);
 8002d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	0011      	movs	r1, r2
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f7ff fe58 	bl	8002a40 <drawText>
 8002d90:	e006      	b.n	8002da0 <drawCenteredTextWithPadding+0x1a0>
	if (y+textSize*8 > HEIGHT) return;
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	e004      	b.n	8002da0 <drawCenteredTextWithPadding+0x1a0>
	if (leftBound < 0) return;
 8002d96:	46c0      	nop			; (mov r8, r8)
 8002d98:	e002      	b.n	8002da0 <drawCenteredTextWithPadding+0x1a0>
	if (rightBound > WIDTH) return;
 8002d9a:	46c0      	nop			; (mov r8, r8)
 8002d9c:	e000      	b.n	8002da0 <drawCenteredTextWithPadding+0x1a0>
	if (maxLength < strSize) return;		// size should not be greater than max
 8002d9e:	46c0      	nop			; (mov r8, r8)
}
 8002da0:	46bd      	mov	sp, r7
 8002da2:	b006      	add	sp, #24
 8002da4:	bdb0      	pop	{r4, r5, r7, pc}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	200000f6 	.word	0x200000f6
 8002dac:	200000fa 	.word	0x200000fa

08002db0 <clearTextLine>:

// clear a line of text. y gives upper bound of text box
void clearTextLine(uint8_t y, SPI_HandleTypeDef *hspi) {
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af02      	add	r7, sp, #8
 8002db6:	0002      	movs	r2, r0
 8002db8:	6039      	str	r1, [r7, #0]
 8002dba:	1dfb      	adds	r3, r7, #7
 8002dbc:	701a      	strb	r2, [r3, #0]
	fillRect(0, y, WIDTH, textSize*8, bg, hspi);
 8002dbe:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <clearTextLine+0x38>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	b2d8      	uxtb	r0, r3
 8002dc6:	4b09      	ldr	r3, [pc, #36]	; (8002dec <clearTextLine+0x3c>)
 8002dc8:	881b      	ldrh	r3, [r3, #0]
 8002dca:	1dfa      	adds	r2, r7, #7
 8002dcc:	7811      	ldrb	r1, [r2, #0]
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	9201      	str	r2, [sp, #4]
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	0003      	movs	r3, r0
 8002dd6:	2280      	movs	r2, #128	; 0x80
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f7ff fa63 	bl	80022a4 <fillRect>
}
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	46bd      	mov	sp, r7
 8002de2:	b002      	add	sp, #8
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	200000f6 	.word	0x200000f6
 8002dec:	200000fa 	.word	0x200000fa

08002df0 <setBackgroundColor>:

// ---- getters and setters ----
// sets static variables
void setBackgroundColor(uint16_t color) {bg = color;}
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	0002      	movs	r2, r0
 8002df8:	1dbb      	adds	r3, r7, #6
 8002dfa:	801a      	strh	r2, [r3, #0]
 8002dfc:	4b03      	ldr	r3, [pc, #12]	; (8002e0c <setBackgroundColor+0x1c>)
 8002dfe:	1dba      	adds	r2, r7, #6
 8002e00:	8812      	ldrh	r2, [r2, #0]
 8002e02:	801a      	strh	r2, [r3, #0]
 8002e04:	46c0      	nop			; (mov r8, r8)
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b002      	add	sp, #8
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	200000fa 	.word	0x200000fa

08002e10 <setCursor>:

void setCursor(uint8_t x, uint8_t y) {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	0002      	movs	r2, r0
 8002e18:	1dfb      	adds	r3, r7, #7
 8002e1a:	701a      	strb	r2, [r3, #0]
 8002e1c:	1dbb      	adds	r3, r7, #6
 8002e1e:	1c0a      	adds	r2, r1, #0
 8002e20:	701a      	strb	r2, [r3, #0]
	cursorX = x;
 8002e22:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <setCursor+0x2c>)
 8002e24:	1dfa      	adds	r2, r7, #7
 8002e26:	7812      	ldrb	r2, [r2, #0]
 8002e28:	701a      	strb	r2, [r3, #0]
	cursorY = y;
 8002e2a:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <setCursor+0x30>)
 8002e2c:	1dba      	adds	r2, r7, #6
 8002e2e:	7812      	ldrb	r2, [r2, #0]
 8002e30:	701a      	strb	r2, [r3, #0]
}
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	46bd      	mov	sp, r7
 8002e36:	b002      	add	sp, #8
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	200000f4 	.word	0x200000f4
 8002e40:	200000f5 	.word	0x200000f5

08002e44 <setTextSize>:

void setTextSize(uint8_t size) {textSize = size;}
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	0002      	movs	r2, r0
 8002e4c:	1dfb      	adds	r3, r7, #7
 8002e4e:	701a      	strb	r2, [r3, #0]
 8002e50:	4b03      	ldr	r3, [pc, #12]	; (8002e60 <setTextSize+0x1c>)
 8002e52:	1dfa      	adds	r2, r7, #7
 8002e54:	7812      	ldrb	r2, [r2, #0]
 8002e56:	701a      	strb	r2, [r3, #0]
 8002e58:	46c0      	nop			; (mov r8, r8)
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	b002      	add	sp, #8
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	200000f6 	.word	0x200000f6

08002e64 <setTextColor>:

void setTextColor(uint16_t color) {textColor = color;}
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	0002      	movs	r2, r0
 8002e6c:	1dbb      	adds	r3, r7, #6
 8002e6e:	801a      	strh	r2, [r3, #0]
 8002e70:	4b03      	ldr	r3, [pc, #12]	; (8002e80 <setTextColor+0x1c>)
 8002e72:	1dba      	adds	r2, r7, #6
 8002e74:	8812      	ldrh	r2, [r2, #0]
 8002e76:	801a      	strh	r2, [r3, #0]
 8002e78:	46c0      	nop			; (mov r8, r8)
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	b002      	add	sp, #8
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	200000f8 	.word	0x200000f8

08002e84 <batteryManager>:

static const float batteryCapacity[];
static uint16_t batteryCapacityArraySize = 179;

// spi used to turn display on/off and drawing battery graphic
void batteryManager(ADC_HandleTypeDef *hadc, SPI_HandleTypeDef *hspi, TIM_HandleTypeDef *timerStopwatchTim, TIM_HandleTypeDef *backlightTim) {
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
 8002e90:	603b      	str	r3, [r7, #0]
	if (canSampleBattery) {
 8002e92:	4b0d      	ldr	r3, [pc, #52]	; (8002ec8 <batteryManager+0x44>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d011      	beq.n	8002ec0 <batteryManager+0x3c>
		canSampleBattery = 0;
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <batteryManager+0x44>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	701a      	strb	r2, [r3, #0]

		battPercentage = getBatteryPercentage(hadc);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	f000 f813 	bl	8002ed0 <getBatteryPercentage>
 8002eaa:	0003      	movs	r3, r0
 8002eac:	001a      	movs	r2, r3
 8002eae:	4b07      	ldr	r3, [pc, #28]	; (8002ecc <batteryManager+0x48>)
 8002eb0:	801a      	strh	r2, [r3, #0]
//			}
//			HAL_GPIO_WritePin(POWER_SUPPLY_ENABLE_PORT, POWER_SUPPLY_ENABLE_PIN, GPIO_PIN_SET);
//			bState = batteryNormal;
//		}

		drawBattery(battPercentage, hspi);
 8002eb2:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <batteryManager+0x48>)
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	0011      	movs	r1, r2
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f003 fbd0 	bl	8006660 <drawBattery>
	}
}
 8002ec0:	46c0      	nop			; (mov r8, r8)
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	b004      	add	sp, #16
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	2000014e 	.word	0x2000014e
 8002ecc:	2000014c 	.word	0x2000014c

08002ed0 <getBatteryPercentage>:
	setDisplayBacklight(100, backlightTim);
	runTimerStopwatchBase(timerStopwatchTim);
}

// should return a number from 0-100
uint16_t getBatteryPercentage(ADC_HandleTypeDef *hadc) {
 8002ed0:	b5b0      	push	{r4, r5, r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
	float v, temp;
	uint8_t index;

	// enable adc voltage divider for measurements, disable after
	HAL_GPIO_WritePin(ADC_DIVIDER_PORT, ADC_DIVIDER_PIN, GPIO_PIN_SET);
 8002ed8:	23a0      	movs	r3, #160	; 0xa0
 8002eda:	05db      	lsls	r3, r3, #23
 8002edc:	2201      	movs	r2, #1
 8002ede:	2102      	movs	r1, #2
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f005 f91d 	bl	8008120 <HAL_GPIO_WritePin>
	HAL_ADC_Start(hadc);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	0018      	movs	r0, r3
 8002eea:	f004 f8c9 	bl	8007080 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8002eee:	2301      	movs	r3, #1
 8002ef0:	425a      	negs	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	0011      	movs	r1, r2
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f004 f956 	bl	80071a8 <HAL_ADC_PollForConversion>
	v = 3.3*HAL_ADC_GetValue(hadc)/(0xFFF);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	0018      	movs	r0, r3
 8002f00:	f004 f9e8 	bl	80072d4 <HAL_ADC_GetValue>
 8002f04:	0003      	movs	r3, r0
 8002f06:	0018      	movs	r0, r3
 8002f08:	f7fe fdaa 	bl	8001a60 <__aeabi_ui2d>
 8002f0c:	4a2c      	ldr	r2, [pc, #176]	; (8002fc0 <getBatteryPercentage+0xf0>)
 8002f0e:	4b2d      	ldr	r3, [pc, #180]	; (8002fc4 <getBatteryPercentage+0xf4>)
 8002f10:	f7fe fafa 	bl	8001508 <__aeabi_dmul>
 8002f14:	0003      	movs	r3, r0
 8002f16:	000c      	movs	r4, r1
 8002f18:	0018      	movs	r0, r3
 8002f1a:	0021      	movs	r1, r4
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	4b2a      	ldr	r3, [pc, #168]	; (8002fc8 <getBatteryPercentage+0xf8>)
 8002f20:	f7fd fff0 	bl	8000f04 <__aeabi_ddiv>
 8002f24:	0003      	movs	r3, r0
 8002f26:	000c      	movs	r4, r1
 8002f28:	0018      	movs	r0, r3
 8002f2a:	0021      	movs	r1, r4
 8002f2c:	f7fe fdca 	bl	8001ac4 <__aeabi_d2f>
 8002f30:	1c03      	adds	r3, r0, #0
 8002f32:	617b      	str	r3, [r7, #20]

	HAL_ADC_Stop(hadc);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	0018      	movs	r0, r3
 8002f38:	f004 f8f6 	bl	8007128 <HAL_ADC_Stop>
	HAL_GPIO_WritePin(ADC_DIVIDER_PORT, ADC_DIVIDER_PIN, GPIO_PIN_RESET);
 8002f3c:	23a0      	movs	r3, #160	; 0xa0
 8002f3e:	05db      	lsls	r3, r3, #23
 8002f40:	2200      	movs	r2, #0
 8002f42:	2102      	movs	r1, #2
 8002f44:	0018      	movs	r0, r3
 8002f46:	f005 f8eb 	bl	8008120 <HAL_GPIO_WritePin>
//	return v*10;

	// trying to look only for 4.0-3.4. anything above 4.0 is 100%, anything below 3.4 is 0%
	// scaled voltages (3.3/4.2) at 3.1429-2.6714
	// indices at 2-153. have to scale and flip to go from 100-0 since 2->100%
	index = search(v);
 8002f4a:	2513      	movs	r5, #19
 8002f4c:	197c      	adds	r4, r7, r5
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	1c18      	adds	r0, r3, #0
 8002f52:	f000 f841 	bl	8002fd8 <search>
 8002f56:	0003      	movs	r3, r0
 8002f58:	7023      	strb	r3, [r4, #0]
	if (index < 2) return 100;
 8002f5a:	197b      	adds	r3, r7, r5
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d801      	bhi.n	8002f66 <getBatteryPercentage+0x96>
 8002f62:	2364      	movs	r3, #100	; 0x64
 8002f64:	e028      	b.n	8002fb8 <getBatteryPercentage+0xe8>
	else if (index >= 153) return 0;
 8002f66:	2313      	movs	r3, #19
 8002f68:	18fb      	adds	r3, r7, r3
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	2b98      	cmp	r3, #152	; 0x98
 8002f6e:	d901      	bls.n	8002f74 <getBatteryPercentage+0xa4>
 8002f70:	2300      	movs	r3, #0
 8002f72:	e021      	b.n	8002fb8 <getBatteryPercentage+0xe8>
	else {
		index -= 2;
 8002f74:	2113      	movs	r1, #19
 8002f76:	187b      	adds	r3, r7, r1
 8002f78:	187a      	adds	r2, r7, r1
 8002f7a:	7812      	ldrb	r2, [r2, #0]
 8002f7c:	3a02      	subs	r2, #2
 8002f7e:	701a      	strb	r2, [r3, #0]
		temp = index*(100.0/(153-2));
 8002f80:	187b      	adds	r3, r7, r1
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	0018      	movs	r0, r3
 8002f86:	f7fe fd31 	bl	80019ec <__aeabi_i2d>
 8002f8a:	4a10      	ldr	r2, [pc, #64]	; (8002fcc <getBatteryPercentage+0xfc>)
 8002f8c:	4b10      	ldr	r3, [pc, #64]	; (8002fd0 <getBatteryPercentage+0x100>)
 8002f8e:	f7fe fabb 	bl	8001508 <__aeabi_dmul>
 8002f92:	0003      	movs	r3, r0
 8002f94:	000c      	movs	r4, r1
 8002f96:	0018      	movs	r0, r3
 8002f98:	0021      	movs	r1, r4
 8002f9a:	f7fe fd93 	bl	8001ac4 <__aeabi_d2f>
 8002f9e:	1c03      	adds	r3, r0, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
		temp = 100-temp;
 8002fa2:	68f9      	ldr	r1, [r7, #12]
 8002fa4:	480b      	ldr	r0, [pc, #44]	; (8002fd4 <getBatteryPercentage+0x104>)
 8002fa6:	f7fd fd89 	bl	8000abc <__aeabi_fsub>
 8002faa:	1c03      	adds	r3, r0, #0
 8002fac:	60fb      	str	r3, [r7, #12]
		return temp;
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f7fd fa62 	bl	8000478 <__aeabi_f2uiz>
 8002fb4:	0003      	movs	r3, r0
 8002fb6:	b29b      	uxth	r3, r3
	}
}
 8002fb8:	0018      	movs	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b006      	add	sp, #24
 8002fbe:	bdb0      	pop	{r4, r5, r7, pc}
 8002fc0:	66666666 	.word	0x66666666
 8002fc4:	400a6666 	.word	0x400a6666
 8002fc8:	40affe00 	.word	0x40affe00
 8002fcc:	6254c4aa 	.word	0x6254c4aa
 8002fd0:	3fe5312a 	.word	0x3fe5312a
 8002fd4:	42c80000 	.word	0x42c80000

08002fd8 <search>:

// should return index in array
uint8_t search(float val) {
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
	// O(n) lookup. array is only size=179.
	uint8_t i;
	for (i = 0; i < batteryCapacityArraySize; i++) {
 8002fe0:	230f      	movs	r3, #15
 8002fe2:	18fb      	adds	r3, r7, r3
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	701a      	strb	r2, [r3, #0]
 8002fe8:	e015      	b.n	8003016 <search+0x3e>
		if (val > batteryCapacity[i]) return i;
 8002fea:	230f      	movs	r3, #15
 8002fec:	18fb      	adds	r3, r7, r3
 8002fee:	781a      	ldrb	r2, [r3, #0]
 8002ff0:	4b10      	ldr	r3, [pc, #64]	; (8003034 <search+0x5c>)
 8002ff2:	0092      	lsls	r2, r2, #2
 8002ff4:	58d3      	ldr	r3, [r2, r3]
 8002ff6:	1c19      	adds	r1, r3, #0
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7fd fa29 	bl	8000450 <__aeabi_fcmpgt>
 8002ffe:	1e03      	subs	r3, r0, #0
 8003000:	d003      	beq.n	800300a <search+0x32>
 8003002:	230f      	movs	r3, #15
 8003004:	18fb      	adds	r3, r7, r3
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	e010      	b.n	800302c <search+0x54>
	for (i = 0; i < batteryCapacityArraySize; i++) {
 800300a:	210f      	movs	r1, #15
 800300c:	187b      	adds	r3, r7, r1
 800300e:	781a      	ldrb	r2, [r3, #0]
 8003010:	187b      	adds	r3, r7, r1
 8003012:	3201      	adds	r2, #1
 8003014:	701a      	strb	r2, [r3, #0]
 8003016:	230f      	movs	r3, #15
 8003018:	18fb      	adds	r3, r7, r3
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	b29a      	uxth	r2, r3
 800301e:	4b06      	ldr	r3, [pc, #24]	; (8003038 <search+0x60>)
 8003020:	881b      	ldrh	r3, [r3, #0]
 8003022:	429a      	cmp	r2, r3
 8003024:	d3e1      	bcc.n	8002fea <search+0x12>
	}
	return batteryCapacityArraySize;
 8003026:	4b04      	ldr	r3, [pc, #16]	; (8003038 <search+0x60>)
 8003028:	881b      	ldrh	r3, [r3, #0]
 800302a:	b2db      	uxtb	r3, r3
}
 800302c:	0018      	movs	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	b004      	add	sp, #16
 8003032:	bd80      	pop	{r7, pc}
 8003034:	0800c5b0 	.word	0x0800c5b0
 8003038:	20000000 	.word	0x20000000

0800303c <setTime>:

static uint16_t century = 20;		// holds upper 2 digits of year that RTC doesn't hold
// ---- RTC setters ----
// set rtc time. uses personal struct as arg
// assumes t's fields are aleady set to something or not null
void setTime(struct times *t, RTC_HandleTypeDef *hrtc) {
 800303c:	b590      	push	{r4, r7, lr}
 800303e:	b089      	sub	sp, #36	; 0x24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
	RTC_TimeTypeDef stime = {0};
 8003046:	210c      	movs	r1, #12
 8003048:	000c      	movs	r4, r1
 800304a:	187b      	adds	r3, r7, r1
 800304c:	0018      	movs	r0, r3
 800304e:	2314      	movs	r3, #20
 8003050:	001a      	movs	r2, r3
 8003052:	2100      	movs	r1, #0
 8003054:	f008 fcaf 	bl	800b9b6 <memset>

	stime.Hours = t->hr;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	781a      	ldrb	r2, [r3, #0]
 800305c:	0021      	movs	r1, r4
 800305e:	187b      	adds	r3, r7, r1
 8003060:	701a      	strb	r2, [r3, #0]
	stime.Minutes = t->min;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	785a      	ldrb	r2, [r3, #1]
 8003066:	187b      	adds	r3, r7, r1
 8003068:	705a      	strb	r2, [r3, #1]
	stime.Seconds = t->sec;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	789a      	ldrb	r2, [r3, #2]
 800306e:	187b      	adds	r3, r7, r1
 8003070:	709a      	strb	r2, [r3, #2]

	stime.TimeFormat = RTC_HOURFORMAT_24;
 8003072:	187b      	adds	r3, r7, r1
 8003074:	2200      	movs	r2, #0
 8003076:	70da      	strb	r2, [r3, #3]

	// not really using
	stime.SubSeconds = 0;
 8003078:	187b      	adds	r3, r7, r1
 800307a:	2200      	movs	r2, #0
 800307c:	605a      	str	r2, [r3, #4]
	stime.SecondFraction = 0;
 800307e:	187b      	adds	r3, r7, r1
 8003080:	2200      	movs	r2, #0
 8003082:	609a      	str	r2, [r3, #8]
	stime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003084:	187b      	adds	r3, r7, r1
 8003086:	2200      	movs	r2, #0
 8003088:	60da      	str	r2, [r3, #12]
	stime.StoreOperation = RTC_STOREOPERATION_SET;
 800308a:	187b      	adds	r3, r7, r1
 800308c:	2280      	movs	r2, #128	; 0x80
 800308e:	02d2      	lsls	r2, r2, #11
 8003090:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(hrtc, &stime, RTC_FORMAT_BIN);
 8003092:	1879      	adds	r1, r7, r1
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	2200      	movs	r2, #0
 8003098:	0018      	movs	r0, r3
 800309a:	f006 f9a1 	bl	80093e0 <HAL_RTC_SetTime>
}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	46bd      	mov	sp, r7
 80030a2:	b009      	add	sp, #36	; 0x24
 80030a4:	bd90      	pop	{r4, r7, pc}
	...

080030a8 <setDate>:

// set rtc date. uses personal struct as arg
// assumes struct has values
void setDate(struct dates *d, RTC_HandleTypeDef *hrtc) {
 80030a8:	b590      	push	{r4, r7, lr}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
	RTC_DateTypeDef sdate = {0};
 80030b2:	240c      	movs	r4, #12
 80030b4:	193b      	adds	r3, r7, r4
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]

	sdate.Month = d->month;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	789a      	ldrb	r2, [r3, #2]
 80030be:	193b      	adds	r3, r7, r4
 80030c0:	705a      	strb	r2, [r3, #1]
	sdate.Date = d->date;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	78da      	ldrb	r2, [r3, #3]
 80030c6:	193b      	adds	r3, r7, r4
 80030c8:	709a      	strb	r2, [r3, #2]
	sdate.Year = d->yr % 100; 		// set only between 0-99. limitation of RTC
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	881b      	ldrh	r3, [r3, #0]
 80030ce:	2164      	movs	r1, #100	; 0x64
 80030d0:	0018      	movs	r0, r3
 80030d2:	f7fd f8a7 	bl	8000224 <__aeabi_uidivmod>
 80030d6:	000b      	movs	r3, r1
 80030d8:	b29b      	uxth	r3, r3
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	193b      	adds	r3, r7, r4
 80030de:	70da      	strb	r2, [r3, #3]
	century = d->yr / 100;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	2164      	movs	r1, #100	; 0x64
 80030e6:	0018      	movs	r0, r3
 80030e8:	f7fd f816 	bl	8000118 <__udivsi3>
 80030ec:	0003      	movs	r3, r0
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	4b0c      	ldr	r3, [pc, #48]	; (8003124 <setDate+0x7c>)
 80030f2:	801a      	strh	r2, [r3, #0]

	sdate.WeekDay = weekdayCalculator(d->yr, d->month, d->date);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	8818      	ldrh	r0, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	7899      	ldrb	r1, [r3, #2]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	78db      	ldrb	r3, [r3, #3]
 8003100:	001a      	movs	r2, r3
 8003102:	f000 fb3f 	bl	8003784 <weekdayCalculator>
 8003106:	0003      	movs	r3, r0
 8003108:	001a      	movs	r2, r3
 800310a:	193b      	adds	r3, r7, r4
 800310c:	701a      	strb	r2, [r3, #0]

	HAL_RTC_SetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 800310e:	1939      	adds	r1, r7, r4
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	2200      	movs	r2, #0
 8003114:	0018      	movs	r0, r3
 8003116:	f006 fa83 	bl	8009620 <HAL_RTC_SetDate>
}
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	46bd      	mov	sp, r7
 800311e:	b005      	add	sp, #20
 8003120:	bd90      	pop	{r4, r7, pc}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	20000002 	.word	0x20000002

08003128 <setDateTime>:

void setDateTime(struct dates *d, struct times *t, RTC_HandleTypeDef *hrtc) {
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
	setDate(d, hrtc);
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	0011      	movs	r1, r2
 800313a:	0018      	movs	r0, r3
 800313c:	f7ff ffb4 	bl	80030a8 <setDate>
	setTime(t, hrtc);
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	0011      	movs	r1, r2
 8003146:	0018      	movs	r0, r3
 8003148:	f7ff ff78 	bl	800303c <setTime>
}
 800314c:	46c0      	nop			; (mov r8, r8)
 800314e:	46bd      	mov	sp, r7
 8003150:	b004      	add	sp, #16
 8003152:	bd80      	pop	{r7, pc}

08003154 <setAlarm>:

// for time of day+week
void setAlarm(struct alarmTimes *a, RTC_HandleTypeDef *hrtc) {
 8003154:	b5b0      	push	{r4, r5, r7, lr}
 8003156:	b092      	sub	sp, #72	; 0x48
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
	RTC_AlarmTypeDef salarm = {0};
 800315e:	2520      	movs	r5, #32
 8003160:	197b      	adds	r3, r7, r5
 8003162:	0018      	movs	r0, r3
 8003164:	2328      	movs	r3, #40	; 0x28
 8003166:	001a      	movs	r2, r3
 8003168:	2100      	movs	r1, #0
 800316a:	f008 fc24 	bl	800b9b6 <memset>
	RTC_TimeTypeDef salarmtime = {0};
 800316e:	210c      	movs	r1, #12
 8003170:	000c      	movs	r4, r1
 8003172:	187b      	adds	r3, r7, r1
 8003174:	0018      	movs	r0, r3
 8003176:	2314      	movs	r3, #20
 8003178:	001a      	movs	r2, r3
 800317a:	2100      	movs	r1, #0
 800317c:	f008 fc1b 	bl	800b9b6 <memset>

	salarmtime.Hours = a->hr;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	781a      	ldrb	r2, [r3, #0]
 8003184:	0021      	movs	r1, r4
 8003186:	187b      	adds	r3, r7, r1
 8003188:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a->min;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	785a      	ldrb	r2, [r3, #1]
 800318e:	187b      	adds	r3, r7, r1
 8003190:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a->sec;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	789a      	ldrb	r2, [r3, #2]
 8003196:	187b      	adds	r3, r7, r1
 8003198:	709a      	strb	r2, [r3, #2]

	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 800319a:	187b      	adds	r3, r7, r1
 800319c:	2200      	movs	r2, #0
 800319e:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 80031a0:	187b      	adds	r3, r7, r1
 80031a2:	2200      	movs	r2, #0
 80031a4:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 80031a6:	187b      	adds	r3, r7, r1
 80031a8:	2200      	movs	r2, #0
 80031aa:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80031ac:	187b      	adds	r3, r7, r1
 80031ae:	2200      	movs	r2, #0
 80031b0:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 80031b2:	187b      	adds	r3, r7, r1
 80031b4:	2200      	movs	r2, #0
 80031b6:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 80031b8:	197b      	adds	r3, r7, r5
 80031ba:	187a      	adds	r2, r7, r1
 80031bc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80031be:	c313      	stmia	r3!, {r0, r1, r4}
 80031c0:	ca03      	ldmia	r2!, {r0, r1}
 80031c2:	c303      	stmia	r3!, {r0, r1}
	salarm.AlarmMask = RTC_ALARMMASK_NONE;		// allows comparison for all fields (sec, min, hour, weekday)
 80031c4:	197b      	adds	r3, r7, r5
 80031c6:	2200      	movs	r2, #0
 80031c8:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80031ca:	197b      	adds	r3, r7, r5
 80031cc:	2200      	movs	r2, #0
 80031ce:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 80031d0:	197b      	adds	r3, r7, r5
 80031d2:	2280      	movs	r2, #128	; 0x80
 80031d4:	05d2      	lsls	r2, r2, #23
 80031d6:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a->weekday;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	78d9      	ldrb	r1, [r3, #3]
 80031dc:	197b      	adds	r3, r7, r5
 80031de:	2220      	movs	r2, #32
 80031e0:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_A;
 80031e2:	197b      	adds	r3, r7, r5
 80031e4:	2280      	movs	r2, #128	; 0x80
 80031e6:	0052      	lsls	r2, r2, #1
 80031e8:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
 80031ea:	1979      	adds	r1, r7, r5
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	2200      	movs	r2, #0
 80031f0:	0018      	movs	r0, r3
 80031f2:	f006 fb11 	bl	8009818 <HAL_RTC_SetAlarm_IT>
}
 80031f6:	46c0      	nop			; (mov r8, r8)
 80031f8:	46bd      	mov	sp, r7
 80031fa:	b012      	add	sp, #72	; 0x48
 80031fc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003200 <setClockAlarm>:

// set an alarm for the next second for triggering display updates
void setClockAlarm(RTC_HandleTypeDef *hrtc) {
 8003200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003202:	b097      	sub	sp, #92	; 0x5c
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef salarm = {0};
 8003208:	232c      	movs	r3, #44	; 0x2c
 800320a:	18fb      	adds	r3, r7, r3
 800320c:	0018      	movs	r0, r3
 800320e:	2328      	movs	r3, #40	; 0x28
 8003210:	001a      	movs	r2, r3
 8003212:	2100      	movs	r1, #0
 8003214:	f008 fbcf 	bl	800b9b6 <memset>
	RTC_TimeTypeDef salarmtime = {0};
 8003218:	2318      	movs	r3, #24
 800321a:	18fb      	adds	r3, r7, r3
 800321c:	0018      	movs	r0, r3
 800321e:	2314      	movs	r3, #20
 8003220:	001a      	movs	r2, r3
 8003222:	2100      	movs	r1, #0
 8003224:	f008 fbc7 	bl	800b9b6 <memset>

	// pull current time
	struct dates currentDate = {0};
 8003228:	2410      	movs	r4, #16
 800322a:	193b      	adds	r3, r7, r4
 800322c:	0018      	movs	r0, r3
 800322e:	2306      	movs	r3, #6
 8003230:	001a      	movs	r2, r3
 8003232:	2100      	movs	r1, #0
 8003234:	f008 fbbf 	bl	800b9b6 <memset>
	struct times currentTime = {0};
 8003238:	250c      	movs	r5, #12
 800323a:	197b      	adds	r3, r7, r5
 800323c:	0018      	movs	r0, r3
 800323e:	2303      	movs	r3, #3
 8003240:	001a      	movs	r2, r3
 8003242:	2100      	movs	r1, #0
 8003244:	f008 fbb7 	bl	800b9b6 <memset>
	getDateTime(&currentDate, &currentTime, hrtc);
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	1979      	adds	r1, r7, r5
 800324c:	193b      	adds	r3, r7, r4
 800324e:	0018      	movs	r0, r3
 8003250:	f000 f9aa 	bl	80035a8 <getDateTime>

	// start setting alarm
	struct alarmTimes a = {0};
 8003254:	2308      	movs	r3, #8
 8003256:	18fb      	adds	r3, r7, r3
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
	uint8_t s,m,h,w;
	// set for only 1/min on low battery mode
//	bState = batteryLow;
	if (bState == batteryLow || bState == batteryReallyLow) {
 800325c:	4ba1      	ldr	r3, [pc, #644]	; (80034e4 <setClockAlarm+0x2e4>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d003      	beq.n	800326c <setClockAlarm+0x6c>
 8003264:	4b9f      	ldr	r3, [pc, #636]	; (80034e4 <setClockAlarm+0x2e4>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b02      	cmp	r3, #2
 800326a:	d164      	bne.n	8003336 <setClockAlarm+0x136>
		s = currentTime.sec;
 800326c:	2157      	movs	r1, #87	; 0x57
 800326e:	187b      	adds	r3, r7, r1
 8003270:	250c      	movs	r5, #12
 8003272:	197a      	adds	r2, r7, r5
 8003274:	7892      	ldrb	r2, [r2, #2]
 8003276:	701a      	strb	r2, [r3, #0]
		m = currentTime.min + s/60 + 1;
 8003278:	197b      	adds	r3, r7, r5
 800327a:	785c      	ldrb	r4, [r3, #1]
 800327c:	187b      	adds	r3, r7, r1
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	213c      	movs	r1, #60	; 0x3c
 8003282:	0018      	movs	r0, r3
 8003284:	f7fc ff48 	bl	8000118 <__udivsi3>
 8003288:	0003      	movs	r3, r0
 800328a:	b2db      	uxtb	r3, r3
 800328c:	18e3      	adds	r3, r4, r3
 800328e:	b2da      	uxtb	r2, r3
 8003290:	2156      	movs	r1, #86	; 0x56
 8003292:	187b      	adds	r3, r7, r1
 8003294:	3201      	adds	r2, #1
 8003296:	701a      	strb	r2, [r3, #0]
		h = currentTime.hr + m/60;
 8003298:	197b      	adds	r3, r7, r5
 800329a:	781c      	ldrb	r4, [r3, #0]
 800329c:	187b      	adds	r3, r7, r1
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	213c      	movs	r1, #60	; 0x3c
 80032a2:	0018      	movs	r0, r3
 80032a4:	f7fc ff38 	bl	8000118 <__udivsi3>
 80032a8:	0003      	movs	r3, r0
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	2155      	movs	r1, #85	; 0x55
 80032ae:	187b      	adds	r3, r7, r1
 80032b0:	18a2      	adds	r2, r4, r2
 80032b2:	701a      	strb	r2, [r3, #0]
		w = currentDate.weekday + h/24;
 80032b4:	2310      	movs	r3, #16
 80032b6:	18fb      	adds	r3, r7, r3
 80032b8:	791c      	ldrb	r4, [r3, #4]
 80032ba:	187b      	adds	r3, r7, r1
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2118      	movs	r1, #24
 80032c0:	0018      	movs	r0, r3
 80032c2:	f7fc ff29 	bl	8000118 <__udivsi3>
 80032c6:	0003      	movs	r3, r0
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	2354      	movs	r3, #84	; 0x54
 80032cc:	18fb      	adds	r3, r7, r3
 80032ce:	18a2      	adds	r2, r4, r2
 80032d0:	701a      	strb	r2, [r3, #0]

		// for transitioning between centuries
		if (currentTime.min == 59 &&
 80032d2:	197b      	adds	r3, r7, r5
 80032d4:	785b      	ldrb	r3, [r3, #1]
 80032d6:	2b3b      	cmp	r3, #59	; 0x3b
 80032d8:	d000      	beq.n	80032dc <setClockAlarm+0xdc>
 80032da:	e091      	b.n	8003400 <setClockAlarm+0x200>
			currentTime.hr == 23 &&
 80032dc:	230c      	movs	r3, #12
 80032de:	18fb      	adds	r3, r7, r3
 80032e0:	781b      	ldrb	r3, [r3, #0]
		if (currentTime.min == 59 &&
 80032e2:	2b17      	cmp	r3, #23
 80032e4:	d000      	beq.n	80032e8 <setClockAlarm+0xe8>
 80032e6:	e08b      	b.n	8003400 <setClockAlarm+0x200>
			currentDate.yr % 100 == 99 &&
 80032e8:	2310      	movs	r3, #16
 80032ea:	18fb      	adds	r3, r7, r3
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	2164      	movs	r1, #100	; 0x64
 80032f0:	0018      	movs	r0, r3
 80032f2:	f7fc ff97 	bl	8000224 <__aeabi_uidivmod>
 80032f6:	000b      	movs	r3, r1
 80032f8:	b29b      	uxth	r3, r3
			currentTime.hr == 23 &&
 80032fa:	2b63      	cmp	r3, #99	; 0x63
 80032fc:	d000      	beq.n	8003300 <setClockAlarm+0x100>
 80032fe:	e07f      	b.n	8003400 <setClockAlarm+0x200>
			currentDate.month == 12 &&
 8003300:	2310      	movs	r3, #16
 8003302:	18fb      	adds	r3, r7, r3
 8003304:	789b      	ldrb	r3, [r3, #2]
			currentDate.yr % 100 == 99 &&
 8003306:	2b0c      	cmp	r3, #12
 8003308:	d000      	beq.n	800330c <setClockAlarm+0x10c>
 800330a:	e079      	b.n	8003400 <setClockAlarm+0x200>
			currentDate.date == maxDaysInMonth(currentDate.month, currentDate.yr)) {
 800330c:	2110      	movs	r1, #16
 800330e:	187b      	adds	r3, r7, r1
 8003310:	78dc      	ldrb	r4, [r3, #3]
 8003312:	187b      	adds	r3, r7, r1
 8003314:	789a      	ldrb	r2, [r3, #2]
 8003316:	187b      	adds	r3, r7, r1
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	0019      	movs	r1, r3
 800331c:	0010      	movs	r0, r2
 800331e:	f000 fa85 	bl	800382c <maxDaysInMonth>
 8003322:	0003      	movs	r3, r0
			currentDate.month == 12 &&
 8003324:	429c      	cmp	r4, r3
 8003326:	d16b      	bne.n	8003400 <setClockAlarm+0x200>
			century++;
 8003328:	4b6f      	ldr	r3, [pc, #444]	; (80034e8 <setClockAlarm+0x2e8>)
 800332a:	881b      	ldrh	r3, [r3, #0]
 800332c:	3301      	adds	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	4b6d      	ldr	r3, [pc, #436]	; (80034e8 <setClockAlarm+0x2e8>)
 8003332:	801a      	strh	r2, [r3, #0]
		if (currentTime.min == 59 &&
 8003334:	e064      	b.n	8003400 <setClockAlarm+0x200>
		}
	}
	// else set 1/s
	else {
		s = currentTime.sec + 1;
 8003336:	250c      	movs	r5, #12
 8003338:	197b      	adds	r3, r7, r5
 800333a:	789a      	ldrb	r2, [r3, #2]
 800333c:	2157      	movs	r1, #87	; 0x57
 800333e:	187b      	adds	r3, r7, r1
 8003340:	3201      	adds	r2, #1
 8003342:	701a      	strb	r2, [r3, #0]
		m = currentTime.min + s/60;
 8003344:	197b      	adds	r3, r7, r5
 8003346:	785c      	ldrb	r4, [r3, #1]
 8003348:	187b      	adds	r3, r7, r1
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	213c      	movs	r1, #60	; 0x3c
 800334e:	0018      	movs	r0, r3
 8003350:	f7fc fee2 	bl	8000118 <__udivsi3>
 8003354:	0003      	movs	r3, r0
 8003356:	b2da      	uxtb	r2, r3
 8003358:	2156      	movs	r1, #86	; 0x56
 800335a:	187b      	adds	r3, r7, r1
 800335c:	18a2      	adds	r2, r4, r2
 800335e:	701a      	strb	r2, [r3, #0]
		h = currentTime.hr + m/60;
 8003360:	197b      	adds	r3, r7, r5
 8003362:	781c      	ldrb	r4, [r3, #0]
 8003364:	187b      	adds	r3, r7, r1
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	213c      	movs	r1, #60	; 0x3c
 800336a:	0018      	movs	r0, r3
 800336c:	f7fc fed4 	bl	8000118 <__udivsi3>
 8003370:	0003      	movs	r3, r0
 8003372:	b2da      	uxtb	r2, r3
 8003374:	2155      	movs	r1, #85	; 0x55
 8003376:	187b      	adds	r3, r7, r1
 8003378:	18a2      	adds	r2, r4, r2
 800337a:	701a      	strb	r2, [r3, #0]
		w = currentDate.weekday + h/24;
 800337c:	2310      	movs	r3, #16
 800337e:	18fb      	adds	r3, r7, r3
 8003380:	791c      	ldrb	r4, [r3, #4]
 8003382:	187b      	adds	r3, r7, r1
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	2118      	movs	r1, #24
 8003388:	0018      	movs	r0, r3
 800338a:	f7fc fec5 	bl	8000118 <__udivsi3>
 800338e:	0003      	movs	r3, r0
 8003390:	b2da      	uxtb	r2, r3
 8003392:	2354      	movs	r3, #84	; 0x54
 8003394:	18fb      	adds	r3, r7, r3
 8003396:	18a2      	adds	r2, r4, r2
 8003398:	701a      	strb	r2, [r3, #0]

		// for transitioning between centuries
		if (currentTime.sec == 59 &&			// need to check for second
 800339a:	197b      	adds	r3, r7, r5
 800339c:	789b      	ldrb	r3, [r3, #2]
 800339e:	2b3b      	cmp	r3, #59	; 0x3b
 80033a0:	d12f      	bne.n	8003402 <setClockAlarm+0x202>
			currentTime.min == 59 &&
 80033a2:	230c      	movs	r3, #12
 80033a4:	18fb      	adds	r3, r7, r3
 80033a6:	785b      	ldrb	r3, [r3, #1]
		if (currentTime.sec == 59 &&			// need to check for second
 80033a8:	2b3b      	cmp	r3, #59	; 0x3b
 80033aa:	d12a      	bne.n	8003402 <setClockAlarm+0x202>
			currentTime.hr == 23 &&
 80033ac:	230c      	movs	r3, #12
 80033ae:	18fb      	adds	r3, r7, r3
 80033b0:	781b      	ldrb	r3, [r3, #0]
			currentTime.min == 59 &&
 80033b2:	2b17      	cmp	r3, #23
 80033b4:	d125      	bne.n	8003402 <setClockAlarm+0x202>
			currentDate.yr % 100 == 99 &&
 80033b6:	2310      	movs	r3, #16
 80033b8:	18fb      	adds	r3, r7, r3
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	2164      	movs	r1, #100	; 0x64
 80033be:	0018      	movs	r0, r3
 80033c0:	f7fc ff30 	bl	8000224 <__aeabi_uidivmod>
 80033c4:	000b      	movs	r3, r1
 80033c6:	b29b      	uxth	r3, r3
			currentTime.hr == 23 &&
 80033c8:	2b63      	cmp	r3, #99	; 0x63
 80033ca:	d11a      	bne.n	8003402 <setClockAlarm+0x202>
			currentDate.month == 12 &&
 80033cc:	2310      	movs	r3, #16
 80033ce:	18fb      	adds	r3, r7, r3
 80033d0:	789b      	ldrb	r3, [r3, #2]
			currentDate.yr % 100 == 99 &&
 80033d2:	2b0c      	cmp	r3, #12
 80033d4:	d115      	bne.n	8003402 <setClockAlarm+0x202>
			currentDate.date == maxDaysInMonth(currentDate.month, currentDate.yr)) {
 80033d6:	2110      	movs	r1, #16
 80033d8:	187b      	adds	r3, r7, r1
 80033da:	78dc      	ldrb	r4, [r3, #3]
 80033dc:	187b      	adds	r3, r7, r1
 80033de:	789a      	ldrb	r2, [r3, #2]
 80033e0:	187b      	adds	r3, r7, r1
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	0019      	movs	r1, r3
 80033e6:	0010      	movs	r0, r2
 80033e8:	f000 fa20 	bl	800382c <maxDaysInMonth>
 80033ec:	0003      	movs	r3, r0
			currentDate.month == 12 &&
 80033ee:	429c      	cmp	r4, r3
 80033f0:	d107      	bne.n	8003402 <setClockAlarm+0x202>
			century++;
 80033f2:	4b3d      	ldr	r3, [pc, #244]	; (80034e8 <setClockAlarm+0x2e8>)
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	3301      	adds	r3, #1
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	4b3b      	ldr	r3, [pc, #236]	; (80034e8 <setClockAlarm+0x2e8>)
 80033fc:	801a      	strh	r2, [r3, #0]
 80033fe:	e000      	b.n	8003402 <setClockAlarm+0x202>
		if (currentTime.min == 59 &&
 8003400:	46c0      	nop			; (mov r8, r8)
		}
	}
	a.sec = s % 60;
 8003402:	2357      	movs	r3, #87	; 0x57
 8003404:	18fb      	adds	r3, r7, r3
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	213c      	movs	r1, #60	; 0x3c
 800340a:	0018      	movs	r0, r3
 800340c:	f7fc ff0a 	bl	8000224 <__aeabi_uidivmod>
 8003410:	000b      	movs	r3, r1
 8003412:	b2da      	uxtb	r2, r3
 8003414:	2408      	movs	r4, #8
 8003416:	193b      	adds	r3, r7, r4
 8003418:	709a      	strb	r2, [r3, #2]
	a.min = m % 60;
 800341a:	2356      	movs	r3, #86	; 0x56
 800341c:	18fb      	adds	r3, r7, r3
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	213c      	movs	r1, #60	; 0x3c
 8003422:	0018      	movs	r0, r3
 8003424:	f7fc fefe 	bl	8000224 <__aeabi_uidivmod>
 8003428:	000b      	movs	r3, r1
 800342a:	b2da      	uxtb	r2, r3
 800342c:	193b      	adds	r3, r7, r4
 800342e:	705a      	strb	r2, [r3, #1]
	a.hr = h % 24;
 8003430:	2355      	movs	r3, #85	; 0x55
 8003432:	18fb      	adds	r3, r7, r3
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2118      	movs	r1, #24
 8003438:	0018      	movs	r0, r3
 800343a:	f7fc fef3 	bl	8000224 <__aeabi_uidivmod>
 800343e:	000b      	movs	r3, r1
 8003440:	b2da      	uxtb	r2, r3
 8003442:	193b      	adds	r3, r7, r4
 8003444:	701a      	strb	r2, [r3, #0]
	a.weekday = (w-1) % 7 + 1;
 8003446:	2354      	movs	r3, #84	; 0x54
 8003448:	18fb      	adds	r3, r7, r3
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	3b01      	subs	r3, #1
 800344e:	2107      	movs	r1, #7
 8003450:	0018      	movs	r0, r3
 8003452:	f7fc ffd1 	bl	80003f8 <__aeabi_idivmod>
 8003456:	000b      	movs	r3, r1
 8003458:	b2db      	uxtb	r3, r3
 800345a:	3301      	adds	r3, #1
 800345c:	b2da      	uxtb	r2, r3
 800345e:	0020      	movs	r0, r4
 8003460:	183b      	adds	r3, r7, r0
 8003462:	70da      	strb	r2, [r3, #3]

	salarmtime.Hours = a.hr;
 8003464:	183b      	adds	r3, r7, r0
 8003466:	781a      	ldrb	r2, [r3, #0]
 8003468:	2118      	movs	r1, #24
 800346a:	187b      	adds	r3, r7, r1
 800346c:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a.min;
 800346e:	183b      	adds	r3, r7, r0
 8003470:	785a      	ldrb	r2, [r3, #1]
 8003472:	187b      	adds	r3, r7, r1
 8003474:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a.sec;
 8003476:	183b      	adds	r3, r7, r0
 8003478:	789a      	ldrb	r2, [r3, #2]
 800347a:	187b      	adds	r3, r7, r1
 800347c:	709a      	strb	r2, [r3, #2]
	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 800347e:	187b      	adds	r3, r7, r1
 8003480:	2200      	movs	r2, #0
 8003482:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 8003484:	187b      	adds	r3, r7, r1
 8003486:	2200      	movs	r2, #0
 8003488:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 800348a:	187b      	adds	r3, r7, r1
 800348c:	2200      	movs	r2, #0
 800348e:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003490:	187b      	adds	r3, r7, r1
 8003492:	2200      	movs	r2, #0
 8003494:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003496:	187b      	adds	r3, r7, r1
 8003498:	2200      	movs	r2, #0
 800349a:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 800349c:	242c      	movs	r4, #44	; 0x2c
 800349e:	193b      	adds	r3, r7, r4
 80034a0:	187a      	adds	r2, r7, r1
 80034a2:	ca62      	ldmia	r2!, {r1, r5, r6}
 80034a4:	c362      	stmia	r3!, {r1, r5, r6}
 80034a6:	ca22      	ldmia	r2!, {r1, r5}
 80034a8:	c322      	stmia	r3!, {r1, r5}
	salarm.AlarmMask = RTC_ALARMMASK_NONE;
 80034aa:	193b      	adds	r3, r7, r4
 80034ac:	2200      	movs	r2, #0
 80034ae:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80034b0:	193b      	adds	r3, r7, r4
 80034b2:	2200      	movs	r2, #0
 80034b4:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 80034b6:	193b      	adds	r3, r7, r4
 80034b8:	2280      	movs	r2, #128	; 0x80
 80034ba:	05d2      	lsls	r2, r2, #23
 80034bc:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a.weekday;
 80034be:	183b      	adds	r3, r7, r0
 80034c0:	78d9      	ldrb	r1, [r3, #3]
 80034c2:	193b      	adds	r3, r7, r4
 80034c4:	2220      	movs	r2, #32
 80034c6:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_B;
 80034c8:	193b      	adds	r3, r7, r4
 80034ca:	2280      	movs	r2, #128	; 0x80
 80034cc:	0092      	lsls	r2, r2, #2
 80034ce:	625a      	str	r2, [r3, #36]	; 0x24

	// do nothing until done
	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
 80034d0:	1939      	adds	r1, r7, r4
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	0018      	movs	r0, r3
 80034d8:	f006 f99e 	bl	8009818 <HAL_RTC_SetAlarm_IT>
}
 80034dc:	46c0      	nop			; (mov r8, r8)
 80034de:	46bd      	mov	sp, r7
 80034e0:	b017      	add	sp, #92	; 0x5c
 80034e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034e4:	2000015d 	.word	0x2000015d
 80034e8:	20000002 	.word	0x20000002

080034ec <clearClockAlarm>:

void clearClockAlarm(RTC_HandleTypeDef *hrtc) {
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
	HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_B);
 80034f4:	2380      	movs	r3, #128	; 0x80
 80034f6:	009a      	lsls	r2, r3, #2
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	0011      	movs	r1, r2
 80034fc:	0018      	movs	r0, r3
 80034fe:	f006 fad7 	bl	8009ab0 <HAL_RTC_DeactivateAlarm>
}
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	46bd      	mov	sp, r7
 8003506:	b002      	add	sp, #8
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <HAL_RTC_AlarmAEventCallback>:
// ---- end of RTC setters ----

// ---- callbacks for interrupts ----
// used for alarm function in project
// meant to send signal to use motor
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED1_PORT, LED1_PIN);
 8003514:	23a0      	movs	r3, #160	; 0xa0
 8003516:	05db      	lsls	r3, r3, #23
 8003518:	2120      	movs	r1, #32
 800351a:	0018      	movs	r0, r3
 800351c:	f004 fe1d 	bl	800815a <HAL_GPIO_TogglePin>
	isAlarmDone = 1;
 8003520:	4b04      	ldr	r3, [pc, #16]	; (8003534 <HAL_RTC_AlarmAEventCallback+0x28>)
 8003522:	2201      	movs	r2, #1
 8003524:	701a      	strb	r2, [r3, #0]
	updateFace.alarm = 1;
 8003526:	4b04      	ldr	r3, [pc, #16]	; (8003538 <HAL_RTC_AlarmAEventCallback+0x2c>)
 8003528:	2201      	movs	r2, #1
 800352a:	709a      	strb	r2, [r3, #2]
}
 800352c:	46c0      	nop			; (mov r8, r8)
 800352e:	46bd      	mov	sp, r7
 8003530:	b002      	add	sp, #8
 8003532:	bd80      	pop	{r7, pc}
 8003534:	2000014f 	.word	0x2000014f
 8003538:	20000150 	.word	0x20000150

0800353c <HAL_RTCEx_AlarmBEventCallback>:

// used to trigger display refresh every second. used because then it's synchronous with RTC updates
void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc) {
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
	updateFace.clock = 1;
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <HAL_RTCEx_AlarmBEventCallback+0x20>)
 8003546:	2201      	movs	r2, #1
 8003548:	701a      	strb	r2, [r3, #0]
	setClockAlarm(hrtc);		// set something for next second
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	0018      	movs	r0, r3
 800354e:	f7ff fe57 	bl	8003200 <setClockAlarm>
}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	46bd      	mov	sp, r7
 8003556:	b002      	add	sp, #8
 8003558:	bd80      	pop	{r7, pc}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	20000150 	.word	0x20000150

08003560 <getTime>:
// ---- end of callbacks ----

// ---- RTC getters ----
void getTime(struct times *t, RTC_HandleTypeDef *hrtc) {
 8003560:	b590      	push	{r4, r7, lr}
 8003562:	b089      	sub	sp, #36	; 0x24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
	RTC_TimeTypeDef stime;

	// programming manual says to read time after date. something shadow registers.
	// not done automatically in HAL
	HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN);
 800356a:	210c      	movs	r1, #12
 800356c:	000c      	movs	r4, r1
 800356e:	1879      	adds	r1, r7, r1
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	2200      	movs	r2, #0
 8003574:	0018      	movs	r0, r3
 8003576:	f005 fff7 	bl	8009568 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, NULL, RTC_FORMAT_BIN);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2200      	movs	r2, #0
 800357e:	2100      	movs	r1, #0
 8003580:	0018      	movs	r0, r3
 8003582:	f006 f8fb 	bl	800977c <HAL_RTC_GetDate>

	t->hr = stime.Hours;
 8003586:	0021      	movs	r1, r4
 8003588:	187b      	adds	r3, r7, r1
 800358a:	781a      	ldrb	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	701a      	strb	r2, [r3, #0]
	t->min = stime.Minutes;
 8003590:	187b      	adds	r3, r7, r1
 8003592:	785a      	ldrb	r2, [r3, #1]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	705a      	strb	r2, [r3, #1]
	t->sec = stime.Seconds;
 8003598:	187b      	adds	r3, r7, r1
 800359a:	789a      	ldrb	r2, [r3, #2]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	709a      	strb	r2, [r3, #2]
}
 80035a0:	46c0      	nop			; (mov r8, r8)
 80035a2:	46bd      	mov	sp, r7
 80035a4:	b009      	add	sp, #36	; 0x24
 80035a6:	bd90      	pop	{r4, r7, pc}

080035a8 <getDateTime>:
	d->date = sdate.Date;
	d->weekday = sdate.WeekDay;
}

// not using getDate and getTime for possible efficiency
void getDateTime(struct dates *d, struct times *t, RTC_HandleTypeDef *hrtc) {
 80035a8:	b5b0      	push	{r4, r5, r7, lr}
 80035aa:	b08a      	sub	sp, #40	; 0x28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
	RTC_DateTypeDef sdate;
	RTC_TimeTypeDef stime;

	// programming manual says to read time after date. something shadow registers.
	// not done automatically in HAL
	HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN);
 80035b4:	2510      	movs	r5, #16
 80035b6:	1979      	adds	r1, r7, r5
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	0018      	movs	r0, r3
 80035be:	f005 ffd3 	bl	8009568 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 80035c2:	2124      	movs	r1, #36	; 0x24
 80035c4:	000c      	movs	r4, r1
 80035c6:	1879      	adds	r1, r7, r1
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	0018      	movs	r0, r3
 80035ce:	f006 f8d5 	bl	800977c <HAL_RTC_GetDate>

	// pulls last 2 digits from RTC and upper 2 digits from static variable
	d->yr = century*100 + sdate.Year;
 80035d2:	4b14      	ldr	r3, [pc, #80]	; (8003624 <getDateTime+0x7c>)
 80035d4:	881b      	ldrh	r3, [r3, #0]
 80035d6:	2264      	movs	r2, #100	; 0x64
 80035d8:	4353      	muls	r3, r2
 80035da:	b29a      	uxth	r2, r3
 80035dc:	0021      	movs	r1, r4
 80035de:	187b      	adds	r3, r7, r1
 80035e0:	78db      	ldrb	r3, [r3, #3]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	18d3      	adds	r3, r2, r3
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	801a      	strh	r2, [r3, #0]
	d->month = sdate.Month;
 80035ec:	187b      	adds	r3, r7, r1
 80035ee:	785a      	ldrb	r2, [r3, #1]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	709a      	strb	r2, [r3, #2]
	d->date = sdate.Date;
 80035f4:	187b      	adds	r3, r7, r1
 80035f6:	789a      	ldrb	r2, [r3, #2]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	70da      	strb	r2, [r3, #3]
	d->weekday = sdate.WeekDay;
 80035fc:	187b      	adds	r3, r7, r1
 80035fe:	781a      	ldrb	r2, [r3, #0]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	711a      	strb	r2, [r3, #4]

	t->hr = stime.Hours;
 8003604:	197b      	adds	r3, r7, r5
 8003606:	781a      	ldrb	r2, [r3, #0]
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	701a      	strb	r2, [r3, #0]
	t->min = stime.Minutes;
 800360c:	197b      	adds	r3, r7, r5
 800360e:	785a      	ldrb	r2, [r3, #1]
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	705a      	strb	r2, [r3, #1]
	t->sec = stime.Seconds;
 8003614:	197b      	adds	r3, r7, r5
 8003616:	789a      	ldrb	r2, [r3, #2]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	709a      	strb	r2, [r3, #2]
}
 800361c:	46c0      	nop			; (mov r8, r8)
 800361e:	46bd      	mov	sp, r7
 8003620:	b00a      	add	sp, #40	; 0x28
 8003622:	bdb0      	pop	{r4, r5, r7, pc}
 8003624:	20000002 	.word	0x20000002

08003628 <setRTCCalibration>:
// ---- end of RTC getters ----

// ---- RTC calibration function ----
// calibVal should be given in drift/day in seconds
// calibration output on PC13
void setRTCCalibration(int calibVal, RTC_HandleTypeDef *hrtc) {
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
	uint16_t calm = 0;
 8003632:	230e      	movs	r3, #14
 8003634:	18fb      	adds	r3, r7, r3
 8003636:	2200      	movs	r2, #0
 8003638:	801a      	strh	r2, [r3, #0]
	uint32_t temp;

	if (calibVal == 0) return;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d048      	beq.n	80036d2 <setRTCCalibration+0xaa>
	else if (calibVal < 0) {		// drift offset is negative. need to slow rtc down
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	da20      	bge.n	8003688 <setRTCCalibration+0x60>
		if (calibVal <= -42) {		// bounds checking. just set to max
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	3329      	adds	r3, #41	; 0x29
 800364a:	da06      	bge.n	800365a <setRTCCalibration+0x32>
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_RESET, 0x1FF);
 800364c:	4b23      	ldr	r3, [pc, #140]	; (80036dc <setRTCCalibration+0xb4>)
 800364e:	6838      	ldr	r0, [r7, #0]
 8003650:	2200      	movs	r2, #0
 8003652:	2100      	movs	r1, #0
 8003654:	f006 fbb1 	bl	8009dba <HAL_RTCEx_SetSmoothCalib>
 8003658:	e03c      	b.n	80036d4 <setRTCCalibration+0xac>
		}
		else {
			// math for setting CALM 9-bit register in RTC. formula in notes and in L0 programming reference manual
			temp = -calibVal*32768*32/86400;		// possible overflow when doing math, so reordering
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	0013      	movs	r3, r2
 800365e:	031b      	lsls	r3, r3, #12
 8003660:	1a9b      	subs	r3, r3, r2
 8003662:	051b      	lsls	r3, r3, #20
 8003664:	491e      	ldr	r1, [pc, #120]	; (80036e0 <setRTCCalibration+0xb8>)
 8003666:	0018      	movs	r0, r3
 8003668:	f7fc fde0 	bl	800022c <__divsi3>
 800366c:	0003      	movs	r3, r0
 800366e:	60bb      	str	r3, [r7, #8]
			calm = temp;
 8003670:	210e      	movs	r1, #14
 8003672:	187b      	adds	r3, r7, r1
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	801a      	strh	r2, [r3, #0]
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_RESET, calm);
 8003678:	187b      	adds	r3, r7, r1
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	6838      	ldr	r0, [r7, #0]
 800367e:	2200      	movs	r2, #0
 8003680:	2100      	movs	r1, #0
 8003682:	f006 fb9a 	bl	8009dba <HAL_RTCEx_SetSmoothCalib>
 8003686:	e025      	b.n	80036d4 <setRTCCalibration+0xac>
		}
	}
	else {
		if (calibVal >= 42) { 		// drift offset is positive. need to speed rtc up
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b29      	cmp	r3, #41	; 0x29
 800368c:	dd07      	ble.n	800369e <setRTCCalibration+0x76>
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_SET, 0);
 800368e:	2380      	movs	r3, #128	; 0x80
 8003690:	021a      	lsls	r2, r3, #8
 8003692:	6838      	ldr	r0, [r7, #0]
 8003694:	2300      	movs	r3, #0
 8003696:	2100      	movs	r1, #0
 8003698:	f006 fb8f 	bl	8009dba <HAL_RTCEx_SetSmoothCalib>
 800369c:	e01a      	b.n	80036d4 <setRTCCalibration+0xac>
		}
		else {
			// math
			temp = 512-(calibVal*32768*32/86400);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	051b      	lsls	r3, r3, #20
 80036a2:	4910      	ldr	r1, [pc, #64]	; (80036e4 <setRTCCalibration+0xbc>)
 80036a4:	0018      	movs	r0, r3
 80036a6:	f7fc fdc1 	bl	800022c <__divsi3>
 80036aa:	0003      	movs	r3, r0
 80036ac:	2280      	movs	r2, #128	; 0x80
 80036ae:	0092      	lsls	r2, r2, #2
 80036b0:	4694      	mov	ip, r2
 80036b2:	4463      	add	r3, ip
 80036b4:	60bb      	str	r3, [r7, #8]
			calm = temp;
 80036b6:	210e      	movs	r1, #14
 80036b8:	187b      	adds	r3, r7, r1
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	801a      	strh	r2, [r3, #0]
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_SET, calm);
 80036be:	187b      	adds	r3, r7, r1
 80036c0:	8819      	ldrh	r1, [r3, #0]
 80036c2:	2380      	movs	r3, #128	; 0x80
 80036c4:	021a      	lsls	r2, r3, #8
 80036c6:	6838      	ldr	r0, [r7, #0]
 80036c8:	000b      	movs	r3, r1
 80036ca:	2100      	movs	r1, #0
 80036cc:	f006 fb75 	bl	8009dba <HAL_RTCEx_SetSmoothCalib>
 80036d0:	e000      	b.n	80036d4 <setRTCCalibration+0xac>
	if (calibVal == 0) return;
 80036d2:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 80036d4:	46bd      	mov	sp, r7
 80036d6:	b004      	add	sp, #16
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	000001ff 	.word	0x000001ff
 80036e0:	00015180 	.word	0x00015180
 80036e4:	fffeae80 	.word	0xfffeae80

080036e8 <timeToSeconds>:
// ---- end of RTC calibration function ----

// ---- converters and calculators ----
uint32_t timeToSeconds(struct times *t) {
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
	return t->sec + t->min*60 + t->hr*3600;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	789b      	ldrb	r3, [r3, #2]
 80036f4:	0019      	movs	r1, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	785b      	ldrb	r3, [r3, #1]
 80036fa:	001a      	movs	r2, r3
 80036fc:	0013      	movs	r3, r2
 80036fe:	011b      	lsls	r3, r3, #4
 8003700:	1a9b      	subs	r3, r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	18c9      	adds	r1, r1, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	001a      	movs	r2, r3
 800370c:	0013      	movs	r3, r2
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	1a9b      	subs	r3, r3, r2
 8003712:	011a      	lsls	r2, r3, #4
 8003714:	1ad2      	subs	r2, r2, r3
 8003716:	0113      	lsls	r3, r2, #4
 8003718:	001a      	movs	r2, r3
 800371a:	0013      	movs	r3, r2
 800371c:	18cb      	adds	r3, r1, r3
}
 800371e:	0018      	movs	r0, r3
 8003720:	46bd      	mov	sp, r7
 8003722:	b002      	add	sp, #8
 8003724:	bd80      	pop	{r7, pc}

08003726 <secondsToTime>:

void secondsToTime(struct times *t, uint32_t seconds) {
 8003726:	b580      	push	{r7, lr}
 8003728:	b082      	sub	sp, #8
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	6039      	str	r1, [r7, #0]
	t->hr = seconds / 3600;
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	23e1      	movs	r3, #225	; 0xe1
 8003734:	0119      	lsls	r1, r3, #4
 8003736:	0010      	movs	r0, r2
 8003738:	f7fc fcee 	bl	8000118 <__udivsi3>
 800373c:	0003      	movs	r3, r0
 800373e:	b2da      	uxtb	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	701a      	strb	r2, [r3, #0]
	seconds %= 3600;
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	23e1      	movs	r3, #225	; 0xe1
 8003748:	0119      	lsls	r1, r3, #4
 800374a:	0010      	movs	r0, r2
 800374c:	f7fc fd6a 	bl	8000224 <__aeabi_uidivmod>
 8003750:	000b      	movs	r3, r1
 8003752:	603b      	str	r3, [r7, #0]
	t->min = seconds / 60;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	213c      	movs	r1, #60	; 0x3c
 8003758:	0018      	movs	r0, r3
 800375a:	f7fc fcdd 	bl	8000118 <__udivsi3>
 800375e:	0003      	movs	r3, r0
 8003760:	b2da      	uxtb	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	705a      	strb	r2, [r3, #1]
	seconds %= 60;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	213c      	movs	r1, #60	; 0x3c
 800376a:	0018      	movs	r0, r3
 800376c:	f7fc fd5a 	bl	8000224 <__aeabi_uidivmod>
 8003770:	000b      	movs	r3, r1
 8003772:	603b      	str	r3, [r7, #0]
	t->sec = seconds;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	b2da      	uxtb	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	709a      	strb	r2, [r3, #2]
}
 800377c:	46c0      	nop			; (mov r8, r8)
 800377e:	46bd      	mov	sp, r7
 8003780:	b002      	add	sp, #8
 8003782:	bd80      	pop	{r7, pc}

08003784 <weekdayCalculator>:
 * weekdays is 0-6, with 0 being sunday. hal uses 1=monday, 7=sunday - just call with % 7 to integrate with hal
 * months given in 1-12, with 1 being january. hal uses the same setup
 * rtc represents years with last 2 digits only. make sure year has all 4 numbers
 * should be accurate for any gregorian date
 */
uint8_t weekdayCalculator(uint16_t year, uint8_t month, uint8_t day) {
 8003784:	b590      	push	{r4, r7, lr}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	0004      	movs	r4, r0
 800378c:	0008      	movs	r0, r1
 800378e:	0011      	movs	r1, r2
 8003790:	1dbb      	adds	r3, r7, #6
 8003792:	1c22      	adds	r2, r4, #0
 8003794:	801a      	strh	r2, [r3, #0]
 8003796:	1d7b      	adds	r3, r7, #5
 8003798:	1c02      	adds	r2, r0, #0
 800379a:	701a      	strb	r2, [r3, #0]
 800379c:	1d3b      	adds	r3, r7, #4
 800379e:	1c0a      	adds	r2, r1, #0
 80037a0:	701a      	strb	r2, [r3, #0]
	static uint8_t table[] = {0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4};
	if (month < 3) year--;
 80037a2:	1d7b      	adds	r3, r7, #5
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d804      	bhi.n	80037b4 <weekdayCalculator+0x30>
 80037aa:	1dbb      	adds	r3, r7, #6
 80037ac:	881a      	ldrh	r2, [r3, #0]
 80037ae:	1dbb      	adds	r3, r7, #6
 80037b0:	3a01      	subs	r2, #1
 80037b2:	801a      	strh	r2, [r3, #0]
	uint16_t temp = (year + year/4 - year/100 + year/400 + table[month-1] + day) % 7;
 80037b4:	1dbb      	adds	r3, r7, #6
 80037b6:	881b      	ldrh	r3, [r3, #0]
 80037b8:	1dba      	adds	r2, r7, #6
 80037ba:	8812      	ldrh	r2, [r2, #0]
 80037bc:	0892      	lsrs	r2, r2, #2
 80037be:	b292      	uxth	r2, r2
 80037c0:	189c      	adds	r4, r3, r2
 80037c2:	1dbb      	adds	r3, r7, #6
 80037c4:	881b      	ldrh	r3, [r3, #0]
 80037c6:	2164      	movs	r1, #100	; 0x64
 80037c8:	0018      	movs	r0, r3
 80037ca:	f7fc fca5 	bl	8000118 <__udivsi3>
 80037ce:	0003      	movs	r3, r0
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	1ae4      	subs	r4, r4, r3
 80037d4:	1dbb      	adds	r3, r7, #6
 80037d6:	881a      	ldrh	r2, [r3, #0]
 80037d8:	23c8      	movs	r3, #200	; 0xc8
 80037da:	0059      	lsls	r1, r3, #1
 80037dc:	0010      	movs	r0, r2
 80037de:	f7fc fc9b 	bl	8000118 <__udivsi3>
 80037e2:	0003      	movs	r3, r0
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	18e3      	adds	r3, r4, r3
 80037e8:	1d7a      	adds	r2, r7, #5
 80037ea:	7812      	ldrb	r2, [r2, #0]
 80037ec:	3a01      	subs	r2, #1
 80037ee:	490e      	ldr	r1, [pc, #56]	; (8003828 <weekdayCalculator+0xa4>)
 80037f0:	5c8a      	ldrb	r2, [r1, r2]
 80037f2:	189a      	adds	r2, r3, r2
 80037f4:	1d3b      	adds	r3, r7, #4
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	18d3      	adds	r3, r2, r3
 80037fa:	2107      	movs	r1, #7
 80037fc:	0018      	movs	r0, r3
 80037fe:	f7fc fdfb 	bl	80003f8 <__aeabi_idivmod>
 8003802:	000b      	movs	r3, r1
 8003804:	001a      	movs	r2, r3
 8003806:	210e      	movs	r1, #14
 8003808:	187b      	adds	r3, r7, r1
 800380a:	801a      	strh	r2, [r3, #0]
	if (temp == 0) return RTC_WEEKDAY_SUNDAY;
 800380c:	187b      	adds	r3, r7, r1
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <weekdayCalculator+0x94>
 8003814:	2307      	movs	r3, #7
 8003816:	e003      	b.n	8003820 <weekdayCalculator+0x9c>
	else return temp;
 8003818:	230e      	movs	r3, #14
 800381a:	18fb      	adds	r3, r7, r3
 800381c:	881b      	ldrh	r3, [r3, #0]
 800381e:	b2db      	uxtb	r3, r3
}
 8003820:	0018      	movs	r0, r3
 8003822:	46bd      	mov	sp, r7
 8003824:	b005      	add	sp, #20
 8003826:	bd90      	pop	{r4, r7, pc}
 8003828:	20000004 	.word	0x20000004

0800382c <maxDaysInMonth>:

// calculator for number of days in a month given a month and accounting for leap years
// assumes month is 1-12, 1=january, 12=december
uint8_t maxDaysInMonth(uint8_t month, uint16_t year) {
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	0002      	movs	r2, r0
 8003834:	1dfb      	adds	r3, r7, #7
 8003836:	701a      	strb	r2, [r3, #0]
 8003838:	1d3b      	adds	r3, r7, #4
 800383a:	1c0a      	adds	r2, r1, #0
 800383c:	801a      	strh	r2, [r3, #0]
	if (month == 0 || month > 12) return 0;		// bounds checking
 800383e:	1dfb      	adds	r3, r7, #7
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <maxDaysInMonth+0x22>
 8003846:	1dfb      	adds	r3, r7, #7
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	2b0c      	cmp	r3, #12
 800384c:	d901      	bls.n	8003852 <maxDaysInMonth+0x26>
 800384e:	2300      	movs	r3, #0
 8003850:	e052      	b.n	80038f8 <maxDaysInMonth+0xcc>

	// not using built-in defines, because they're in BCD
	if (month == 1  ||		// january
 8003852:	1dfb      	adds	r3, r7, #7
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d017      	beq.n	800388a <maxDaysInMonth+0x5e>
 800385a:	1dfb      	adds	r3, r7, #7
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b03      	cmp	r3, #3
 8003860:	d013      	beq.n	800388a <maxDaysInMonth+0x5e>
		month == 3  ||		// march
 8003862:	1dfb      	adds	r3, r7, #7
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	2b05      	cmp	r3, #5
 8003868:	d00f      	beq.n	800388a <maxDaysInMonth+0x5e>
		month == 5  ||		// may
 800386a:	1dfb      	adds	r3, r7, #7
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2b07      	cmp	r3, #7
 8003870:	d00b      	beq.n	800388a <maxDaysInMonth+0x5e>
		month == 7  ||		// july
 8003872:	1dfb      	adds	r3, r7, #7
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2b08      	cmp	r3, #8
 8003878:	d007      	beq.n	800388a <maxDaysInMonth+0x5e>
		month == 8  ||		// august
 800387a:	1dfb      	adds	r3, r7, #7
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2b0a      	cmp	r3, #10
 8003880:	d003      	beq.n	800388a <maxDaysInMonth+0x5e>
		month == 10 ||		// october
 8003882:	1dfb      	adds	r3, r7, #7
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	2b0c      	cmp	r3, #12
 8003888:	d101      	bne.n	800388e <maxDaysInMonth+0x62>
		month == 12) {		// december
		return 31;
 800388a:	231f      	movs	r3, #31
 800388c:	e034      	b.n	80038f8 <maxDaysInMonth+0xcc>
	}
	else if (month == 4 ||	// april
 800388e:	1dfb      	adds	r3, r7, #7
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	2b04      	cmp	r3, #4
 8003894:	d00b      	beq.n	80038ae <maxDaysInMonth+0x82>
 8003896:	1dfb      	adds	r3, r7, #7
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2b06      	cmp	r3, #6
 800389c:	d007      	beq.n	80038ae <maxDaysInMonth+0x82>
			 month == 6 ||	// june
 800389e:	1dfb      	adds	r3, r7, #7
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b09      	cmp	r3, #9
 80038a4:	d003      	beq.n	80038ae <maxDaysInMonth+0x82>
			 month == 9 ||	// september
 80038a6:	1dfb      	adds	r3, r7, #7
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	2b0b      	cmp	r3, #11
 80038ac:	d101      	bne.n	80038b2 <maxDaysInMonth+0x86>
			 month == 11) {	// november
		return 30;
 80038ae:	231e      	movs	r3, #30
 80038b0:	e022      	b.n	80038f8 <maxDaysInMonth+0xcc>
	}

	// february/leap year calculator
	// leap year for every 4th year, but every 100th year is not a leap year except on every 400th year
	// ex. 2020 is a leap year, 2100 is not a leap year, 2000 is a leap year.
	else if (year % 400 == 0) return 29;
 80038b2:	1d3b      	adds	r3, r7, #4
 80038b4:	881a      	ldrh	r2, [r3, #0]
 80038b6:	23c8      	movs	r3, #200	; 0xc8
 80038b8:	0059      	lsls	r1, r3, #1
 80038ba:	0010      	movs	r0, r2
 80038bc:	f7fc fcb2 	bl	8000224 <__aeabi_uidivmod>
 80038c0:	000b      	movs	r3, r1
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <maxDaysInMonth+0xa0>
 80038c8:	231d      	movs	r3, #29
 80038ca:	e015      	b.n	80038f8 <maxDaysInMonth+0xcc>
	else if (year % 100 == 0) return 28;
 80038cc:	1d3b      	adds	r3, r7, #4
 80038ce:	881b      	ldrh	r3, [r3, #0]
 80038d0:	2164      	movs	r1, #100	; 0x64
 80038d2:	0018      	movs	r0, r3
 80038d4:	f7fc fca6 	bl	8000224 <__aeabi_uidivmod>
 80038d8:	000b      	movs	r3, r1
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <maxDaysInMonth+0xb8>
 80038e0:	231c      	movs	r3, #28
 80038e2:	e009      	b.n	80038f8 <maxDaysInMonth+0xcc>
	else if (year % 4 == 0) return 29;
 80038e4:	1d3b      	adds	r3, r7, #4
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	2203      	movs	r2, #3
 80038ea:	4013      	ands	r3, r2
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <maxDaysInMonth+0xca>
 80038f2:	231d      	movs	r3, #29
 80038f4:	e000      	b.n	80038f8 <maxDaysInMonth+0xcc>
	else return 28;
 80038f6:	231c      	movs	r3, #28
}
 80038f8:	0018      	movs	r0, r3
 80038fa:	46bd      	mov	sp, r7
 80038fc:	b002      	add	sp, #8
 80038fe:	bd80      	pop	{r7, pc}

08003900 <stopMode>:
	setClockAlarm(&hrtc);
	setDisplayBacklight(50, &htim3);
//	HAL_GPIO_WritePin(LED1_PORT, LED1_PIN, GPIO_PIN_SET);					// basically measuring wake time (assuming only clock)
}

void stopMode() {
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED2_PORT, LED2_PIN, GPIO_PIN_RESET);
	stopDisplayBacklight(&htim3);
 8003904:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <stopMode+0x34>)
 8003906:	0018      	movs	r0, r3
 8003908:	f001 fb8e 	bl	8005028 <stopDisplayBacklight>
	clearClockAlarm(&hrtc);
 800390c:	4b0a      	ldr	r3, [pc, #40]	; (8003938 <stopMode+0x38>)
 800390e:	0018      	movs	r0, r3
 8003910:	f7ff fdec 	bl	80034ec <clearClockAlarm>
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8003914:	4b09      	ldr	r3, [pc, #36]	; (800393c <stopMode+0x3c>)
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	4b08      	ldr	r3, [pc, #32]	; (800393c <stopMode+0x3c>)
 800391a:	2104      	movs	r1, #4
 800391c:	430a      	orrs	r2, r1
 800391e:	601a      	str	r2, [r3, #0]
//	HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFI);
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8003920:	2101      	movs	r1, #1
 8003922:	2001      	movs	r0, #1
 8003924:	f004 fd98 	bl	8008458 <HAL_PWR_EnterSTOPMode>
//	HAL_GPIO_WritePin(LED2_PORT, LED2_PIN, GPIO_PIN_SET);					// basically measuring wake time (assuming only clock)
	exitStopMode();
 8003928:	f000 f80a 	bl	8003940 <exitStopMode>
}
 800392c:	46c0      	nop			; (mov r8, r8)
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	20000200 	.word	0x20000200
 8003938:	20000278 	.word	0x20000278
 800393c:	40007000 	.word	0x40007000

08003940 <exitStopMode>:

void exitStopMode() {
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
	HAL_Init();
 8003944:	f003 f988 	bl	8006c58 <HAL_Init>
	SystemClock_Config();
 8003948:	f000 f8d6 	bl	8003af8 <SystemClock_Config>
	MX_GPIO_Init();
 800394c:	f000 fd54 	bl	80043f8 <MX_GPIO_Init>
	MX_ADC_Init();
 8003950:	f000 f95a 	bl	8003c08 <MX_ADC_Init>
//	MX_RTC_Init();
	MX_TIM21_Init();
 8003954:	f000 fbe4 	bl	8004120 <MX_TIM21_Init>
	MX_TIM22_Init();
 8003958:	f000 fc7a 	bl	8004250 <MX_TIM22_Init>
	MX_TIM2_Init();
 800395c:	f000 fa8c 	bl	8003e78 <MX_TIM2_Init>
	MX_TIM6_Init();
 8003960:	f000 fba2 	bl	80040a8 <MX_TIM6_Init>
	MX_TIM3_Init();
 8003964:	f000 fb16 	bl	8003f94 <MX_TIM3_Init>
	MX_SPI2_Init();
 8003968:	f000 fa4e 	bl	8003e08 <MX_SPI2_Init>
	MX_USB_PCD_Init();
 800396c:	f000 fd00 	bl	8004370 <MX_USB_PCD_Init>
	HAL_SuspendTick();
 8003970:	f003 fa04 	bl	8006d7c <HAL_SuspendTick>
//	setRTCCalibration(-8, &hrtc);
//	TFT_startup(&hspi2);
	turnDisplayOn(&hspi2);
 8003974:	4b09      	ldr	r3, [pc, #36]	; (800399c <exitStopMode+0x5c>)
 8003976:	0018      	movs	r0, r3
 8003978:	f7fe fb38 	bl	8001fec <turnDisplayOn>
//	clearScreen(ST77XX_BLACK, &hspi2);
//	initFace();
	setClockAlarm(&hrtc);
 800397c:	4b08      	ldr	r3, [pc, #32]	; (80039a0 <exitStopMode+0x60>)
 800397e:	0018      	movs	r0, r3
 8003980:	f7ff fc3e 	bl	8003200 <setClockAlarm>
	runADCSampler(&htim22);
 8003984:	4b07      	ldr	r3, [pc, #28]	; (80039a4 <exitStopMode+0x64>)
 8003986:	0018      	movs	r0, r3
 8003988:	f001 faa6 	bl	8004ed8 <runADCSampler>
	setDisplayBacklight(50, &htim3);
 800398c:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <exitStopMode+0x68>)
 800398e:	0019      	movs	r1, r3
 8003990:	2032      	movs	r0, #50	; 0x32
 8003992:	f001 fafd 	bl	8004f90 <setDisplayBacklight>
}
 8003996:	46c0      	nop			; (mov r8, r8)
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	200001a8 	.word	0x200001a8
 80039a0:	20000278 	.word	0x20000278
 80039a4:	2000023c 	.word	0x2000023c
 80039a8:	20000200 	.word	0x20000200

080039ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039ac:	b590      	push	{r4, r7, lr}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039b2:	f003 f951 	bl	8006c58 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039b6:	f000 f89f 	bl	8003af8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039ba:	f000 fd1d 	bl	80043f8 <MX_GPIO_Init>
  MX_DMA_Init();
 80039be:	f000 fcfd 	bl	80043bc <MX_DMA_Init>
  MX_ADC_Init();
 80039c2:	f000 f921 	bl	8003c08 <MX_ADC_Init>
  MX_RTC_Init();
 80039c6:	f000 f983 	bl	8003cd0 <MX_RTC_Init>
  MX_TIM21_Init();
 80039ca:	f000 fba9 	bl	8004120 <MX_TIM21_Init>
  MX_TIM22_Init();
 80039ce:	f000 fc3f 	bl	8004250 <MX_TIM22_Init>
  MX_TIM2_Init();
 80039d2:	f000 fa51 	bl	8003e78 <MX_TIM2_Init>
  MX_TIM6_Init();
 80039d6:	f000 fb67 	bl	80040a8 <MX_TIM6_Init>
  MX_TIM3_Init();
 80039da:	f000 fadb 	bl	8003f94 <MX_TIM3_Init>
  MX_SPI2_Init();
 80039de:	f000 fa13 	bl	8003e08 <MX_SPI2_Init>
  MX_USB_PCD_Init();
 80039e2:	f000 fcc5 	bl	8004370 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
	// rtc software calibration
	setRTCCalibration(-8, &hrtc);
 80039e6:	4a3a      	ldr	r2, [pc, #232]	; (8003ad0 <main+0x124>)
 80039e8:	2308      	movs	r3, #8
 80039ea:	425b      	negs	r3, r3
 80039ec:	0011      	movs	r1, r2
 80039ee:	0018      	movs	r0, r3
 80039f0:	f7ff fe1a 	bl	8003628 <setRTCCalibration>
//	HAL_SuspendTick();					// disable systick. unused anyway (bad practice?)

  	// initialization for display
	TFT_startup(&hspi2);
 80039f4:	4b37      	ldr	r3, [pc, #220]	; (8003ad4 <main+0x128>)
 80039f6:	0018      	movs	r0, r3
 80039f8:	f7fe fa52 	bl	8001ea0 <TFT_startup>
	fillRect(0, 0, WIDTH, HEIGHT, ST77XX_ORANGE, &hspi2);
 80039fc:	4b35      	ldr	r3, [pc, #212]	; (8003ad4 <main+0x128>)
 80039fe:	9301      	str	r3, [sp, #4]
 8003a00:	23fc      	movs	r3, #252	; 0xfc
 8003a02:	021b      	lsls	r3, r3, #8
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	23a0      	movs	r3, #160	; 0xa0
 8003a08:	2280      	movs	r2, #128	; 0x80
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	2000      	movs	r0, #0
 8003a0e:	f7fe fc49 	bl	80022a4 <fillRect>
//	clearScreen(ST77XX_BLACK, &hspi2);

	// initialization for ui and hardware
	initFace();
 8003a12:	f003 f8c1 	bl	8006b98 <initFace>
	setClockAlarm(&hrtc);
 8003a16:	4b2e      	ldr	r3, [pc, #184]	; (8003ad0 <main+0x124>)
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f7ff fbf1 	bl	8003200 <setClockAlarm>
	runADCSampler(&htim22);
 8003a1e:	4b2e      	ldr	r3, [pc, #184]	; (8003ad8 <main+0x12c>)
 8003a20:	0018      	movs	r0, r3
 8003a22:	f001 fa59 	bl	8004ed8 <runADCSampler>
	setDisplayBacklight(50, &htim3);
 8003a26:	4b2d      	ldr	r3, [pc, #180]	; (8003adc <main+0x130>)
 8003a28:	0019      	movs	r1, r3
 8003a2a:	2032      	movs	r0, #50	; 0x32
 8003a2c:	f001 fab0 	bl	8004f90 <setDisplayBacklight>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//		lineTest(&hspi2);
//		charTest(&hspi2);
		updateState(&hrtc, &htim21, &htim2, &htim6, &hspi2);
 8003a30:	4c2b      	ldr	r4, [pc, #172]	; (8003ae0 <main+0x134>)
 8003a32:	4a2c      	ldr	r2, [pc, #176]	; (8003ae4 <main+0x138>)
 8003a34:	492c      	ldr	r1, [pc, #176]	; (8003ae8 <main+0x13c>)
 8003a36:	4826      	ldr	r0, [pc, #152]	; (8003ad0 <main+0x124>)
 8003a38:	4b26      	ldr	r3, [pc, #152]	; (8003ad4 <main+0x128>)
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	0023      	movs	r3, r4
 8003a3e:	f001 fb2d 	bl	800509c <updateState>
		updateDisplay(&hrtc, &hspi2);
 8003a42:	4a24      	ldr	r2, [pc, #144]	; (8003ad4 <main+0x128>)
 8003a44:	4b22      	ldr	r3, [pc, #136]	; (8003ad0 <main+0x124>)
 8003a46:	0011      	movs	r1, r2
 8003a48:	0018      	movs	r0, r3
 8003a4a:	f002 f93f 	bl	8005ccc <updateDisplay>

		batteryManager(&hadc, &hspi2, &htim21, &htim3);
 8003a4e:	4b23      	ldr	r3, [pc, #140]	; (8003adc <main+0x130>)
 8003a50:	4a25      	ldr	r2, [pc, #148]	; (8003ae8 <main+0x13c>)
 8003a52:	4920      	ldr	r1, [pc, #128]	; (8003ad4 <main+0x128>)
 8003a54:	4825      	ldr	r0, [pc, #148]	; (8003aec <main+0x140>)
 8003a56:	f7ff fa15 	bl	8002e84 <batteryManager>

		if (isTimerDone || isAlarmDone) {
 8003a5a:	4b25      	ldr	r3, [pc, #148]	; (8003af0 <main+0x144>)
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d104      	bne.n	8003a6e <main+0xc2>
 8003a64:	4b23      	ldr	r3, [pc, #140]	; (8003af4 <main+0x148>)
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d010      	beq.n	8003a90 <main+0xe4>
			runMotor(&htim2);
 8003a6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ae4 <main+0x138>)
 8003a70:	0018      	movs	r0, r3
 8003a72:	f001 fa43 	bl	8004efc <runMotor>
			updateDisplay(&hrtc, &hspi2);
 8003a76:	4a17      	ldr	r2, [pc, #92]	; (8003ad4 <main+0x128>)
 8003a78:	4b15      	ldr	r3, [pc, #84]	; (8003ad0 <main+0x124>)
 8003a7a:	0011      	movs	r1, r2
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	f002 f925 	bl	8005ccc <updateDisplay>
			isTimerDone = isAlarmDone = 0;
 8003a82:	2100      	movs	r1, #0
 8003a84:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <main+0x148>)
 8003a86:	1c0a      	adds	r2, r1, #0
 8003a88:	701a      	strb	r2, [r3, #0]
 8003a8a:	4b19      	ldr	r3, [pc, #100]	; (8003af0 <main+0x144>)
 8003a8c:	1c0a      	adds	r2, r1, #0
 8003a8e:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(LED1_PORT, LED1_PIN, GPIO_PIN_SET);
 8003a90:	23a0      	movs	r3, #160	; 0xa0
 8003a92:	05db      	lsls	r3, r3, #23
 8003a94:	2201      	movs	r2, #1
 8003a96:	2120      	movs	r1, #32
 8003a98:	0018      	movs	r0, r3
 8003a9a:	f004 fb41 	bl	8008120 <HAL_GPIO_WritePin>
//		SET_BIT(hspi2.hdmatx->Instance->CCR, DMA_CCR_MINC);
		if(((hspi2.hdmatx->Instance->CCR) & DMA_CCR_MINC) == DMA_CCR_MINC) HAL_GPIO_WritePin(LED1_PORT, LED1_PIN, GPIO_PIN_SET);
 8003a9e:	4b0d      	ldr	r3, [pc, #52]	; (8003ad4 <main+0x128>)
 8003aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2280      	movs	r2, #128	; 0x80
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	2b80      	cmp	r3, #128	; 0x80
 8003aac:	d107      	bne.n	8003abe <main+0x112>
 8003aae:	23a0      	movs	r3, #160	; 0xa0
 8003ab0:	05db      	lsls	r3, r3, #23
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	2120      	movs	r1, #32
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	f004 fb32 	bl	8008120 <HAL_GPIO_WritePin>
 8003abc:	e7b8      	b.n	8003a30 <main+0x84>
		else HAL_GPIO_WritePin(LED1_PORT, LED1_PIN, GPIO_PIN_RESET);
 8003abe:	23a0      	movs	r3, #160	; 0xa0
 8003ac0:	05db      	lsls	r3, r3, #23
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2120      	movs	r1, #32
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f004 fb2a 	bl	8008120 <HAL_GPIO_WritePin>
		updateState(&hrtc, &htim21, &htim2, &htim6, &hspi2);
 8003acc:	e7b0      	b.n	8003a30 <main+0x84>
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	20000278 	.word	0x20000278
 8003ad4:	200001a8 	.word	0x200001a8
 8003ad8:	2000023c 	.word	0x2000023c
 8003adc:	20000200 	.word	0x20000200
 8003ae0:	20000160 	.word	0x20000160
 8003ae4:	2000029c 	.word	0x2000029c
 8003ae8:	20000670 	.word	0x20000670
 8003aec:	20000614 	.word	0x20000614
 8003af0:	2000015c 	.word	0x2000015c
 8003af4:	2000014f 	.word	0x2000014f

08003af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003af8:	b590      	push	{r4, r7, lr}
 8003afa:	b09f      	sub	sp, #124	; 0x7c
 8003afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003afe:	2440      	movs	r4, #64	; 0x40
 8003b00:	193b      	adds	r3, r7, r4
 8003b02:	0018      	movs	r0, r3
 8003b04:	2338      	movs	r3, #56	; 0x38
 8003b06:	001a      	movs	r2, r3
 8003b08:	2100      	movs	r1, #0
 8003b0a:	f007 ff54 	bl	800b9b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b0e:	232c      	movs	r3, #44	; 0x2c
 8003b10:	18fb      	adds	r3, r7, r3
 8003b12:	0018      	movs	r0, r3
 8003b14:	2314      	movs	r3, #20
 8003b16:	001a      	movs	r2, r3
 8003b18:	2100      	movs	r1, #0
 8003b1a:	f007 ff4c 	bl	800b9b6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b1e:	1d3b      	adds	r3, r7, #4
 8003b20:	0018      	movs	r0, r3
 8003b22:	2328      	movs	r3, #40	; 0x28
 8003b24:	001a      	movs	r2, r3
 8003b26:	2100      	movs	r1, #0
 8003b28:	f007 ff45 	bl	800b9b6 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b2c:	4b33      	ldr	r3, [pc, #204]	; (8003bfc <SystemClock_Config+0x104>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a33      	ldr	r2, [pc, #204]	; (8003c00 <SystemClock_Config+0x108>)
 8003b32:	401a      	ands	r2, r3
 8003b34:	4b31      	ldr	r3, [pc, #196]	; (8003bfc <SystemClock_Config+0x104>)
 8003b36:	2180      	movs	r1, #128	; 0x80
 8003b38:	0109      	lsls	r1, r1, #4
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003b3e:	f004 fc7d 	bl	800843c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003b42:	4b30      	ldr	r3, [pc, #192]	; (8003c04 <SystemClock_Config+0x10c>)
 8003b44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b46:	4b2f      	ldr	r3, [pc, #188]	; (8003c04 <SystemClock_Config+0x10c>)
 8003b48:	492d      	ldr	r1, [pc, #180]	; (8003c00 <SystemClock_Config+0x108>)
 8003b4a:	400a      	ands	r2, r1
 8003b4c:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8003b4e:	193b      	adds	r3, r7, r4
 8003b50:	2226      	movs	r2, #38	; 0x26
 8003b52:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003b54:	193b      	adds	r3, r7, r4
 8003b56:	2280      	movs	r2, #128	; 0x80
 8003b58:	0052      	lsls	r2, r2, #1
 8003b5a:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b5c:	0021      	movs	r1, r4
 8003b5e:	187b      	adds	r3, r7, r1
 8003b60:	2201      	movs	r2, #1
 8003b62:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b64:	187b      	adds	r3, r7, r1
 8003b66:	2210      	movs	r2, #16
 8003b68:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003b6a:	187b      	adds	r3, r7, r1
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b70:	187b      	adds	r3, r7, r1
 8003b72:	2202      	movs	r2, #2
 8003b74:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003b76:	187b      	adds	r3, r7, r1
 8003b78:	2200      	movs	r2, #0
 8003b7a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8003b7c:	187b      	adds	r3, r7, r1
 8003b7e:	2280      	movs	r2, #128	; 0x80
 8003b80:	02d2      	lsls	r2, r2, #11
 8003b82:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8003b84:	187b      	adds	r3, r7, r1
 8003b86:	2280      	movs	r2, #128	; 0x80
 8003b88:	03d2      	lsls	r2, r2, #15
 8003b8a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b8c:	187b      	adds	r3, r7, r1
 8003b8e:	0018      	movs	r0, r3
 8003b90:	f004 fc96 	bl	80084c0 <HAL_RCC_OscConfig>
 8003b94:	1e03      	subs	r3, r0, #0
 8003b96:	d001      	beq.n	8003b9c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8003b98:	f000 fce8 	bl	800456c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b9c:	212c      	movs	r1, #44	; 0x2c
 8003b9e:	187b      	adds	r3, r7, r1
 8003ba0:	220f      	movs	r2, #15
 8003ba2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ba4:	187b      	adds	r3, r7, r1
 8003ba6:	2203      	movs	r2, #3
 8003ba8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003baa:	187b      	adds	r3, r7, r1
 8003bac:	2200      	movs	r2, #0
 8003bae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003bb0:	187b      	adds	r3, r7, r1
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003bb6:	187b      	adds	r3, r7, r1
 8003bb8:	2200      	movs	r2, #0
 8003bba:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003bbc:	187b      	adds	r3, r7, r1
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	f005 f84d 	bl	8008c60 <HAL_RCC_ClockConfig>
 8003bc6:	1e03      	subs	r3, r0, #0
 8003bc8:	d001      	beq.n	8003bce <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8003bca:	f000 fccf 	bl	800456c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 8003bce:	1d3b      	adds	r3, r7, #4
 8003bd0:	2260      	movs	r2, #96	; 0x60
 8003bd2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003bd4:	1d3b      	adds	r3, r7, #4
 8003bd6:	2280      	movs	r2, #128	; 0x80
 8003bd8:	0252      	lsls	r2, r2, #9
 8003bda:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003bdc:	1d3b      	adds	r3, r7, #4
 8003bde:	2280      	movs	r2, #128	; 0x80
 8003be0:	04d2      	lsls	r2, r2, #19
 8003be2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003be4:	1d3b      	adds	r3, r7, #4
 8003be6:	0018      	movs	r0, r3
 8003be8:	f005 f9e8 	bl	8008fbc <HAL_RCCEx_PeriphCLKConfig>
 8003bec:	1e03      	subs	r3, r0, #0
 8003bee:	d001      	beq.n	8003bf4 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8003bf0:	f000 fcbc 	bl	800456c <Error_Handler>
  }
}
 8003bf4:	46c0      	nop			; (mov r8, r8)
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	b01f      	add	sp, #124	; 0x7c
 8003bfa:	bd90      	pop	{r4, r7, pc}
 8003bfc:	40007000 	.word	0x40007000
 8003c00:	ffffe7ff 	.word	0xffffe7ff
 8003c04:	40021000 	.word	0x40021000

08003c08 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003c0e:	003b      	movs	r3, r7
 8003c10:	0018      	movs	r0, r3
 8003c12:	2308      	movs	r3, #8
 8003c14:	001a      	movs	r2, r3
 8003c16:	2100      	movs	r1, #0
 8003c18:	f007 fecd 	bl	800b9b6 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003c1c:	4b2a      	ldr	r3, [pc, #168]	; (8003cc8 <MX_ADC_Init+0xc0>)
 8003c1e:	4a2b      	ldr	r2, [pc, #172]	; (8003ccc <MX_ADC_Init+0xc4>)
 8003c20:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8003c22:	4b29      	ldr	r3, [pc, #164]	; (8003cc8 <MX_ADC_Init+0xc0>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003c28:	4b27      	ldr	r3, [pc, #156]	; (8003cc8 <MX_ADC_Init+0xc0>)
 8003c2a:	2280      	movs	r2, #128	; 0x80
 8003c2c:	05d2      	lsls	r2, r2, #23
 8003c2e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003c30:	4b25      	ldr	r3, [pc, #148]	; (8003cc8 <MX_ADC_Init+0xc0>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_79CYCLES_5;
 8003c36:	4b24      	ldr	r3, [pc, #144]	; (8003cc8 <MX_ADC_Init+0xc0>)
 8003c38:	2206      	movs	r2, #6
 8003c3a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003c3c:	4b22      	ldr	r3, [pc, #136]	; (8003cc8 <MX_ADC_Init+0xc0>)
 8003c3e:	2201      	movs	r2, #1
 8003c40:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003c42:	4b21      	ldr	r3, [pc, #132]	; (8003cc8 <MX_ADC_Init+0xc0>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8003c48:	4b1f      	ldr	r3, [pc, #124]	; (8003cc8 <MX_ADC_Init+0xc0>)
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003c50:	4b1d      	ldr	r3, [pc, #116]	; (8003cc8 <MX_ADC_Init+0xc0>)
 8003c52:	2221      	movs	r2, #33	; 0x21
 8003c54:	2100      	movs	r1, #0
 8003c56:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003c58:	4b1b      	ldr	r3, [pc, #108]	; (8003cc8 <MX_ADC_Init+0xc0>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c5e:	4b1a      	ldr	r3, [pc, #104]	; (8003cc8 <MX_ADC_Init+0xc0>)
 8003c60:	22c2      	movs	r2, #194	; 0xc2
 8003c62:	32ff      	adds	r2, #255	; 0xff
 8003c64:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003c66:	4b18      	ldr	r3, [pc, #96]	; (8003cc8 <MX_ADC_Init+0xc0>)
 8003c68:	222c      	movs	r2, #44	; 0x2c
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003c6e:	4b16      	ldr	r3, [pc, #88]	; (8003cc8 <MX_ADC_Init+0xc0>)
 8003c70:	2204      	movs	r2, #4
 8003c72:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003c74:	4b14      	ldr	r3, [pc, #80]	; (8003cc8 <MX_ADC_Init+0xc0>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003c7a:	4b13      	ldr	r3, [pc, #76]	; (8003cc8 <MX_ADC_Init+0xc0>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8003c80:	4b11      	ldr	r3, [pc, #68]	; (8003cc8 <MX_ADC_Init+0xc0>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003c86:	4b10      	ldr	r3, [pc, #64]	; (8003cc8 <MX_ADC_Init+0xc0>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003c8c:	4b0e      	ldr	r3, [pc, #56]	; (8003cc8 <MX_ADC_Init+0xc0>)
 8003c8e:	0018      	movs	r0, r3
 8003c90:	f003 f882 	bl	8006d98 <HAL_ADC_Init>
 8003c94:	1e03      	subs	r3, r0, #0
 8003c96:	d001      	beq.n	8003c9c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8003c98:	f000 fc68 	bl	800456c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003c9c:	003b      	movs	r3, r7
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003ca2:	003b      	movs	r3, r7
 8003ca4:	2280      	movs	r2, #128	; 0x80
 8003ca6:	0152      	lsls	r2, r2, #5
 8003ca8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003caa:	003a      	movs	r2, r7
 8003cac:	4b06      	ldr	r3, [pc, #24]	; (8003cc8 <MX_ADC_Init+0xc0>)
 8003cae:	0011      	movs	r1, r2
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f003 fbef 	bl	8007494 <HAL_ADC_ConfigChannel>
 8003cb6:	1e03      	subs	r3, r0, #0
 8003cb8:	d001      	beq.n	8003cbe <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8003cba:	f000 fc57 	bl	800456c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003cbe:	46c0      	nop			; (mov r8, r8)
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	b002      	add	sp, #8
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	20000614 	.word	0x20000614
 8003ccc:	40012400 	.word	0x40012400

08003cd0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b090      	sub	sp, #64	; 0x40
 8003cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003cd6:	232c      	movs	r3, #44	; 0x2c
 8003cd8:	18fb      	adds	r3, r7, r3
 8003cda:	0018      	movs	r0, r3
 8003cdc:	2314      	movs	r3, #20
 8003cde:	001a      	movs	r2, r3
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	f007 fe68 	bl	800b9b6 <memset>
  RTC_DateTypeDef sDate = {0};
 8003ce6:	2328      	movs	r3, #40	; 0x28
 8003ce8:	18fb      	adds	r3, r7, r3
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8003cee:	003b      	movs	r3, r7
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	2328      	movs	r3, #40	; 0x28
 8003cf4:	001a      	movs	r2, r3
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	f007 fe5d 	bl	800b9b6 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003cfc:	4b40      	ldr	r3, [pc, #256]	; (8003e00 <MX_RTC_Init+0x130>)
 8003cfe:	4a41      	ldr	r2, [pc, #260]	; (8003e04 <MX_RTC_Init+0x134>)
 8003d00:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003d02:	4b3f      	ldr	r3, [pc, #252]	; (8003e00 <MX_RTC_Init+0x130>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003d08:	4b3d      	ldr	r3, [pc, #244]	; (8003e00 <MX_RTC_Init+0x130>)
 8003d0a:	227f      	movs	r2, #127	; 0x7f
 8003d0c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003d0e:	4b3c      	ldr	r3, [pc, #240]	; (8003e00 <MX_RTC_Init+0x130>)
 8003d10:	22ff      	movs	r2, #255	; 0xff
 8003d12:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003d14:	4b3a      	ldr	r3, [pc, #232]	; (8003e00 <MX_RTC_Init+0x130>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003d1a:	4b39      	ldr	r3, [pc, #228]	; (8003e00 <MX_RTC_Init+0x130>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003d20:	4b37      	ldr	r3, [pc, #220]	; (8003e00 <MX_RTC_Init+0x130>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003d26:	4b36      	ldr	r3, [pc, #216]	; (8003e00 <MX_RTC_Init+0x130>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003d2c:	4b34      	ldr	r3, [pc, #208]	; (8003e00 <MX_RTC_Init+0x130>)
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f005 fab8 	bl	80092a4 <HAL_RTC_Init>
 8003d34:	1e03      	subs	r3, r0, #0
 8003d36:	d001      	beq.n	8003d3c <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8003d38:	f000 fc18 	bl	800456c <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8003d3c:	212c      	movs	r1, #44	; 0x2c
 8003d3e:	187b      	adds	r3, r7, r1
 8003d40:	2200      	movs	r2, #0
 8003d42:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8003d44:	187b      	adds	r3, r7, r1
 8003d46:	2200      	movs	r2, #0
 8003d48:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8003d4a:	187b      	adds	r3, r7, r1
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003d50:	187b      	adds	r3, r7, r1
 8003d52:	2200      	movs	r2, #0
 8003d54:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003d56:	187b      	adds	r3, r7, r1
 8003d58:	2200      	movs	r2, #0
 8003d5a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003d5c:	1879      	adds	r1, r7, r1
 8003d5e:	4b28      	ldr	r3, [pc, #160]	; (8003e00 <MX_RTC_Init+0x130>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	0018      	movs	r0, r3
 8003d64:	f005 fb3c 	bl	80093e0 <HAL_RTC_SetTime>
 8003d68:	1e03      	subs	r3, r0, #0
 8003d6a:	d001      	beq.n	8003d70 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8003d6c:	f000 fbfe 	bl	800456c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8003d70:	2128      	movs	r1, #40	; 0x28
 8003d72:	187b      	adds	r3, r7, r1
 8003d74:	2207      	movs	r2, #7
 8003d76:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 8003d78:	187b      	adds	r3, r7, r1
 8003d7a:	2212      	movs	r2, #18
 8003d7c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8003d7e:	187b      	adds	r3, r7, r1
 8003d80:	2201      	movs	r2, #1
 8003d82:	709a      	strb	r2, [r3, #2]
  sDate.Year = 19;
 8003d84:	187b      	adds	r3, r7, r1
 8003d86:	2213      	movs	r2, #19
 8003d88:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003d8a:	1879      	adds	r1, r7, r1
 8003d8c:	4b1c      	ldr	r3, [pc, #112]	; (8003e00 <MX_RTC_Init+0x130>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	0018      	movs	r0, r3
 8003d92:	f005 fc45 	bl	8009620 <HAL_RTC_SetDate>
 8003d96:	1e03      	subs	r3, r0, #0
 8003d98:	d001      	beq.n	8003d9e <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8003d9a:	f000 fbe7 	bl	800456c <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.AlarmTime.Hours = 0;
 8003d9e:	003b      	movs	r3, r7
 8003da0:	2200      	movs	r2, #0
 8003da2:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8003da4:	003b      	movs	r3, r7
 8003da6:	2200      	movs	r2, #0
 8003da8:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8003daa:	003b      	movs	r3, r7
 8003dac:	2200      	movs	r2, #0
 8003dae:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8003db0:	003b      	movs	r3, r7
 8003db2:	2200      	movs	r2, #0
 8003db4:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003db6:	003b      	movs	r3, r7
 8003db8:	2200      	movs	r2, #0
 8003dba:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003dbc:	003b      	movs	r3, r7
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003dc2:	003b      	movs	r3, r7
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003dc8:	003b      	movs	r3, r7
 8003dca:	2200      	movs	r2, #0
 8003dcc:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003dce:	003b      	movs	r3, r7
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8003dd4:	003b      	movs	r3, r7
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	2101      	movs	r1, #1
 8003dda:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_B;
 8003ddc:	003b      	movs	r3, r7
 8003dde:	2280      	movs	r2, #128	; 0x80
 8003de0:	0092      	lsls	r2, r2, #2
 8003de2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003de4:	0039      	movs	r1, r7
 8003de6:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <MX_RTC_Init+0x130>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	0018      	movs	r0, r3
 8003dec:	f005 fd14 	bl	8009818 <HAL_RTC_SetAlarm_IT>
 8003df0:	1e03      	subs	r3, r0, #0
 8003df2:	d001      	beq.n	8003df8 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 8003df4:	f000 fbba 	bl	800456c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003df8:	46c0      	nop			; (mov r8, r8)
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	b010      	add	sp, #64	; 0x40
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	20000278 	.word	0x20000278
 8003e04:	40002800 	.word	0x40002800

08003e08 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003e0c:	4b18      	ldr	r3, [pc, #96]	; (8003e70 <MX_SPI2_Init+0x68>)
 8003e0e:	4a19      	ldr	r2, [pc, #100]	; (8003e74 <MX_SPI2_Init+0x6c>)
 8003e10:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003e12:	4b17      	ldr	r3, [pc, #92]	; (8003e70 <MX_SPI2_Init+0x68>)
 8003e14:	2282      	movs	r2, #130	; 0x82
 8003e16:	0052      	lsls	r2, r2, #1
 8003e18:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003e1a:	4b15      	ldr	r3, [pc, #84]	; (8003e70 <MX_SPI2_Init+0x68>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e20:	4b13      	ldr	r3, [pc, #76]	; (8003e70 <MX_SPI2_Init+0x68>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e26:	4b12      	ldr	r3, [pc, #72]	; (8003e70 <MX_SPI2_Init+0x68>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003e2c:	4b10      	ldr	r3, [pc, #64]	; (8003e70 <MX_SPI2_Init+0x68>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003e32:	4b0f      	ldr	r3, [pc, #60]	; (8003e70 <MX_SPI2_Init+0x68>)
 8003e34:	2280      	movs	r2, #128	; 0x80
 8003e36:	02d2      	lsls	r2, r2, #11
 8003e38:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e3a:	4b0d      	ldr	r3, [pc, #52]	; (8003e70 <MX_SPI2_Init+0x68>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e40:	4b0b      	ldr	r3, [pc, #44]	; (8003e70 <MX_SPI2_Init+0x68>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e46:	4b0a      	ldr	r3, [pc, #40]	; (8003e70 <MX_SPI2_Init+0x68>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e4c:	4b08      	ldr	r3, [pc, #32]	; (8003e70 <MX_SPI2_Init+0x68>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003e52:	4b07      	ldr	r3, [pc, #28]	; (8003e70 <MX_SPI2_Init+0x68>)
 8003e54:	2207      	movs	r2, #7
 8003e56:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003e58:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <MX_SPI2_Init+0x68>)
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	f006 f810 	bl	8009e80 <HAL_SPI_Init>
 8003e60:	1e03      	subs	r3, r0, #0
 8003e62:	d001      	beq.n	8003e68 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003e64:	f000 fb82 	bl	800456c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003e68:	46c0      	nop			; (mov r8, r8)
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	46c0      	nop			; (mov r8, r8)
 8003e70:	200001a8 	.word	0x200001a8
 8003e74:	40003800 	.word	0x40003800

08003e78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08a      	sub	sp, #40	; 0x28
 8003e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e7e:	2318      	movs	r3, #24
 8003e80:	18fb      	adds	r3, r7, r3
 8003e82:	0018      	movs	r0, r3
 8003e84:	2310      	movs	r3, #16
 8003e86:	001a      	movs	r2, r3
 8003e88:	2100      	movs	r1, #0
 8003e8a:	f007 fd94 	bl	800b9b6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e8e:	2310      	movs	r3, #16
 8003e90:	18fb      	adds	r3, r7, r3
 8003e92:	0018      	movs	r0, r3
 8003e94:	2308      	movs	r3, #8
 8003e96:	001a      	movs	r2, r3
 8003e98:	2100      	movs	r1, #0
 8003e9a:	f007 fd8c 	bl	800b9b6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e9e:	003b      	movs	r3, r7
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	2310      	movs	r3, #16
 8003ea4:	001a      	movs	r2, r3
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	f007 fd85 	bl	800b9b6 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003eac:	4b37      	ldr	r3, [pc, #220]	; (8003f8c <MX_TIM2_Init+0x114>)
 8003eae:	2280      	movs	r2, #128	; 0x80
 8003eb0:	05d2      	lsls	r2, r2, #23
 8003eb2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003eb4:	4b35      	ldr	r3, [pc, #212]	; (8003f8c <MX_TIM2_Init+0x114>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003eba:	4b34      	ldr	r3, [pc, #208]	; (8003f8c <MX_TIM2_Init+0x114>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0x3FFF;
 8003ec0:	4b32      	ldr	r3, [pc, #200]	; (8003f8c <MX_TIM2_Init+0x114>)
 8003ec2:	4a33      	ldr	r2, [pc, #204]	; (8003f90 <MX_TIM2_Init+0x118>)
 8003ec4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ec6:	4b31      	ldr	r3, [pc, #196]	; (8003f8c <MX_TIM2_Init+0x114>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ecc:	4b2f      	ldr	r3, [pc, #188]	; (8003f8c <MX_TIM2_Init+0x114>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003ed2:	4b2e      	ldr	r3, [pc, #184]	; (8003f8c <MX_TIM2_Init+0x114>)
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	f006 fde3 	bl	800aaa0 <HAL_TIM_Base_Init>
 8003eda:	1e03      	subs	r3, r0, #0
 8003edc:	d001      	beq.n	8003ee2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003ede:	f000 fb45 	bl	800456c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8003ee2:	2118      	movs	r1, #24
 8003ee4:	187b      	adds	r3, r7, r1
 8003ee6:	2280      	movs	r2, #128	; 0x80
 8003ee8:	0192      	lsls	r2, r2, #6
 8003eea:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8003eec:	187b      	adds	r3, r7, r1
 8003eee:	2200      	movs	r2, #0
 8003ef0:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8003ef2:	187b      	adds	r3, r7, r1
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8003ef8:	187b      	adds	r3, r7, r1
 8003efa:	2200      	movs	r2, #0
 8003efc:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003efe:	187a      	adds	r2, r7, r1
 8003f00:	4b22      	ldr	r3, [pc, #136]	; (8003f8c <MX_TIM2_Init+0x114>)
 8003f02:	0011      	movs	r1, r2
 8003f04:	0018      	movs	r0, r3
 8003f06:	f007 f97d 	bl	800b204 <HAL_TIM_ConfigClockSource>
 8003f0a:	1e03      	subs	r3, r0, #0
 8003f0c:	d001      	beq.n	8003f12 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003f0e:	f000 fb2d 	bl	800456c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8003f12:	4b1e      	ldr	r3, [pc, #120]	; (8003f8c <MX_TIM2_Init+0x114>)
 8003f14:	0018      	movs	r0, r3
 8003f16:	f006 fe33 	bl	800ab80 <HAL_TIM_OC_Init>
 8003f1a:	1e03      	subs	r3, r0, #0
 8003f1c:	d001      	beq.n	8003f22 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8003f1e:	f000 fb25 	bl	800456c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f22:	2110      	movs	r1, #16
 8003f24:	187b      	adds	r3, r7, r1
 8003f26:	2200      	movs	r2, #0
 8003f28:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f2a:	187b      	adds	r3, r7, r1
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003f30:	187a      	adds	r2, r7, r1
 8003f32:	4b16      	ldr	r3, [pc, #88]	; (8003f8c <MX_TIM2_Init+0x114>)
 8003f34:	0011      	movs	r1, r2
 8003f36:	0018      	movs	r0, r3
 8003f38:	f007 fc59 	bl	800b7ee <HAL_TIMEx_MasterConfigSynchronization>
 8003f3c:	1e03      	subs	r3, r0, #0
 8003f3e:	d001      	beq.n	8003f44 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8003f40:	f000 fb14 	bl	800456c <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim2, TIM2_ETR_LSE) != HAL_OK)
 8003f44:	4b11      	ldr	r3, [pc, #68]	; (8003f8c <MX_TIM2_Init+0x114>)
 8003f46:	2105      	movs	r1, #5
 8003f48:	0018      	movs	r0, r3
 8003f4a:	f007 fc93 	bl	800b874 <HAL_TIMEx_RemapConfig>
 8003f4e:	1e03      	subs	r3, r0, #0
 8003f50:	d001      	beq.n	8003f56 <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 8003f52:	f000 fb0b 	bl	800456c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003f56:	003b      	movs	r3, r7
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003f5c:	003b      	movs	r3, r7
 8003f5e:	2200      	movs	r2, #0
 8003f60:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f62:	003b      	movs	r3, r7
 8003f64:	2200      	movs	r2, #0
 8003f66:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f68:	003b      	movs	r3, r7
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f6e:	0039      	movs	r1, r7
 8003f70:	4b06      	ldr	r3, [pc, #24]	; (8003f8c <MX_TIM2_Init+0x114>)
 8003f72:	2204      	movs	r2, #4
 8003f74:	0018      	movs	r0, r3
 8003f76:	f007 f83f 	bl	800aff8 <HAL_TIM_OC_ConfigChannel>
 8003f7a:	1e03      	subs	r3, r0, #0
 8003f7c:	d001      	beq.n	8003f82 <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 8003f7e:	f000 faf5 	bl	800456c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	46bd      	mov	sp, r7
 8003f86:	b00a      	add	sp, #40	; 0x28
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	46c0      	nop			; (mov r8, r8)
 8003f8c:	2000029c 	.word	0x2000029c
 8003f90:	00003fff 	.word	0x00003fff

08003f94 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b08a      	sub	sp, #40	; 0x28
 8003f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f9a:	2318      	movs	r3, #24
 8003f9c:	18fb      	adds	r3, r7, r3
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	2310      	movs	r3, #16
 8003fa2:	001a      	movs	r2, r3
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	f007 fd06 	bl	800b9b6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003faa:	2310      	movs	r3, #16
 8003fac:	18fb      	adds	r3, r7, r3
 8003fae:	0018      	movs	r0, r3
 8003fb0:	2308      	movs	r3, #8
 8003fb2:	001a      	movs	r2, r3
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	f007 fcfe 	bl	800b9b6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003fba:	003b      	movs	r3, r7
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	2310      	movs	r3, #16
 8003fc0:	001a      	movs	r2, r3
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	f007 fcf7 	bl	800b9b6 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003fc8:	4b34      	ldr	r3, [pc, #208]	; (800409c <MX_TIM3_Init+0x108>)
 8003fca:	4a35      	ldr	r2, [pc, #212]	; (80040a0 <MX_TIM3_Init+0x10c>)
 8003fcc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003fce:	4b33      	ldr	r3, [pc, #204]	; (800409c <MX_TIM3_Init+0x108>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fd4:	4b31      	ldr	r3, [pc, #196]	; (800409c <MX_TIM3_Init+0x108>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 8003fda:	4b30      	ldr	r3, [pc, #192]	; (800409c <MX_TIM3_Init+0x108>)
 8003fdc:	4a31      	ldr	r2, [pc, #196]	; (80040a4 <MX_TIM3_Init+0x110>)
 8003fde:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fe0:	4b2e      	ldr	r3, [pc, #184]	; (800409c <MX_TIM3_Init+0x108>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fe6:	4b2d      	ldr	r3, [pc, #180]	; (800409c <MX_TIM3_Init+0x108>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003fec:	4b2b      	ldr	r3, [pc, #172]	; (800409c <MX_TIM3_Init+0x108>)
 8003fee:	0018      	movs	r0, r3
 8003ff0:	f006 fd56 	bl	800aaa0 <HAL_TIM_Base_Init>
 8003ff4:	1e03      	subs	r3, r0, #0
 8003ff6:	d001      	beq.n	8003ffc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003ff8:	f000 fab8 	bl	800456c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ffc:	2118      	movs	r1, #24
 8003ffe:	187b      	adds	r3, r7, r1
 8004000:	2280      	movs	r2, #128	; 0x80
 8004002:	0152      	lsls	r2, r2, #5
 8004004:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004006:	187a      	adds	r2, r7, r1
 8004008:	4b24      	ldr	r3, [pc, #144]	; (800409c <MX_TIM3_Init+0x108>)
 800400a:	0011      	movs	r1, r2
 800400c:	0018      	movs	r0, r3
 800400e:	f007 f8f9 	bl	800b204 <HAL_TIM_ConfigClockSource>
 8004012:	1e03      	subs	r3, r0, #0
 8004014:	d001      	beq.n	800401a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8004016:	f000 faa9 	bl	800456c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800401a:	4b20      	ldr	r3, [pc, #128]	; (800409c <MX_TIM3_Init+0x108>)
 800401c:	0018      	movs	r0, r3
 800401e:	f006 fe87 	bl	800ad30 <HAL_TIM_PWM_Init>
 8004022:	1e03      	subs	r3, r0, #0
 8004024:	d001      	beq.n	800402a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8004026:	f000 faa1 	bl	800456c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800402a:	2110      	movs	r1, #16
 800402c:	187b      	adds	r3, r7, r1
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004032:	187b      	adds	r3, r7, r1
 8004034:	2200      	movs	r2, #0
 8004036:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004038:	187a      	adds	r2, r7, r1
 800403a:	4b18      	ldr	r3, [pc, #96]	; (800409c <MX_TIM3_Init+0x108>)
 800403c:	0011      	movs	r1, r2
 800403e:	0018      	movs	r0, r3
 8004040:	f007 fbd5 	bl	800b7ee <HAL_TIMEx_MasterConfigSynchronization>
 8004044:	1e03      	subs	r3, r0, #0
 8004046:	d001      	beq.n	800404c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8004048:	f000 fa90 	bl	800456c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800404c:	003b      	movs	r3, r7
 800404e:	2260      	movs	r2, #96	; 0x60
 8004050:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8004052:	003b      	movs	r3, r7
 8004054:	2200      	movs	r2, #0
 8004056:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004058:	003b      	movs	r3, r7
 800405a:	2200      	movs	r2, #0
 800405c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800405e:	003b      	movs	r3, r7
 8004060:	2200      	movs	r2, #0
 8004062:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004064:	0039      	movs	r1, r7
 8004066:	4b0d      	ldr	r3, [pc, #52]	; (800409c <MX_TIM3_Init+0x108>)
 8004068:	2200      	movs	r2, #0
 800406a:	0018      	movs	r0, r3
 800406c:	f007 f812 	bl	800b094 <HAL_TIM_PWM_ConfigChannel>
 8004070:	1e03      	subs	r3, r0, #0
 8004072:	d001      	beq.n	8004078 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8004074:	f000 fa7a 	bl	800456c <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8004078:	4b08      	ldr	r3, [pc, #32]	; (800409c <MX_TIM3_Init+0x108>)
 800407a:	2104      	movs	r1, #4
 800407c:	0018      	movs	r0, r3
 800407e:	f007 fbf9 	bl	800b874 <HAL_TIMEx_RemapConfig>
 8004082:	1e03      	subs	r3, r0, #0
 8004084:	d001      	beq.n	800408a <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 8004086:	f000 fa71 	bl	800456c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800408a:	4b04      	ldr	r3, [pc, #16]	; (800409c <MX_TIM3_Init+0x108>)
 800408c:	0018      	movs	r0, r3
 800408e:	f000 fbcf 	bl	8004830 <HAL_TIM_MspPostInit>

}
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	46bd      	mov	sp, r7
 8004096:	b00a      	add	sp, #40	; 0x28
 8004098:	bd80      	pop	{r7, pc}
 800409a:	46c0      	nop			; (mov r8, r8)
 800409c:	20000200 	.word	0x20000200
 80040a0:	40000400 	.word	0x40000400
 80040a4:	0000ffff 	.word	0x0000ffff

080040a8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040ae:	003b      	movs	r3, r7
 80040b0:	0018      	movs	r0, r3
 80040b2:	2308      	movs	r3, #8
 80040b4:	001a      	movs	r2, r3
 80040b6:	2100      	movs	r1, #0
 80040b8:	f007 fc7d 	bl	800b9b6 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80040bc:	4b15      	ldr	r3, [pc, #84]	; (8004114 <MX_TIM6_Init+0x6c>)
 80040be:	4a16      	ldr	r2, [pc, #88]	; (8004118 <MX_TIM6_Init+0x70>)
 80040c0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0x40;
 80040c2:	4b14      	ldr	r3, [pc, #80]	; (8004114 <MX_TIM6_Init+0x6c>)
 80040c4:	2240      	movs	r2, #64	; 0x40
 80040c6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040c8:	4b12      	ldr	r3, [pc, #72]	; (8004114 <MX_TIM6_Init+0x6c>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80040ce:	4b11      	ldr	r3, [pc, #68]	; (8004114 <MX_TIM6_Init+0x6c>)
 80040d0:	4a12      	ldr	r2, [pc, #72]	; (800411c <MX_TIM6_Init+0x74>)
 80040d2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040d4:	4b0f      	ldr	r3, [pc, #60]	; (8004114 <MX_TIM6_Init+0x6c>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80040da:	4b0e      	ldr	r3, [pc, #56]	; (8004114 <MX_TIM6_Init+0x6c>)
 80040dc:	0018      	movs	r0, r3
 80040de:	f006 fcdf 	bl	800aaa0 <HAL_TIM_Base_Init>
 80040e2:	1e03      	subs	r3, r0, #0
 80040e4:	d001      	beq.n	80040ea <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80040e6:	f000 fa41 	bl	800456c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040ea:	003b      	movs	r3, r7
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040f0:	003b      	movs	r3, r7
 80040f2:	2200      	movs	r2, #0
 80040f4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80040f6:	003a      	movs	r2, r7
 80040f8:	4b06      	ldr	r3, [pc, #24]	; (8004114 <MX_TIM6_Init+0x6c>)
 80040fa:	0011      	movs	r1, r2
 80040fc:	0018      	movs	r0, r3
 80040fe:	f007 fb76 	bl	800b7ee <HAL_TIMEx_MasterConfigSynchronization>
 8004102:	1e03      	subs	r3, r0, #0
 8004104:	d001      	beq.n	800410a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8004106:	f000 fa31 	bl	800456c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800410a:	46c0      	nop			; (mov r8, r8)
 800410c:	46bd      	mov	sp, r7
 800410e:	b002      	add	sp, #8
 8004110:	bd80      	pop	{r7, pc}
 8004112:	46c0      	nop			; (mov r8, r8)
 8004114:	20000160 	.word	0x20000160
 8004118:	40001000 	.word	0x40001000
 800411c:	0000ffff 	.word	0x0000ffff

08004120 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b08a      	sub	sp, #40	; 0x28
 8004124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004126:	2318      	movs	r3, #24
 8004128:	18fb      	adds	r3, r7, r3
 800412a:	0018      	movs	r0, r3
 800412c:	2310      	movs	r3, #16
 800412e:	001a      	movs	r2, r3
 8004130:	2100      	movs	r1, #0
 8004132:	f007 fc40 	bl	800b9b6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004136:	2310      	movs	r3, #16
 8004138:	18fb      	adds	r3, r7, r3
 800413a:	0018      	movs	r0, r3
 800413c:	2308      	movs	r3, #8
 800413e:	001a      	movs	r2, r3
 8004140:	2100      	movs	r1, #0
 8004142:	f007 fc38 	bl	800b9b6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004146:	003b      	movs	r3, r7
 8004148:	0018      	movs	r0, r3
 800414a:	2310      	movs	r3, #16
 800414c:	001a      	movs	r2, r3
 800414e:	2100      	movs	r1, #0
 8004150:	f007 fc31 	bl	800b9b6 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8004154:	4b3b      	ldr	r3, [pc, #236]	; (8004244 <MX_TIM21_Init+0x124>)
 8004156:	4a3c      	ldr	r2, [pc, #240]	; (8004248 <MX_TIM21_Init+0x128>)
 8004158:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 800415a:	4b3a      	ldr	r3, [pc, #232]	; (8004244 <MX_TIM21_Init+0x124>)
 800415c:	2200      	movs	r2, #0
 800415e:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004160:	4b38      	ldr	r3, [pc, #224]	; (8004244 <MX_TIM21_Init+0x124>)
 8004162:	2200      	movs	r2, #0
 8004164:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 0x7FFF;
 8004166:	4b37      	ldr	r3, [pc, #220]	; (8004244 <MX_TIM21_Init+0x124>)
 8004168:	4a38      	ldr	r2, [pc, #224]	; (800424c <MX_TIM21_Init+0x12c>)
 800416a:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800416c:	4b35      	ldr	r3, [pc, #212]	; (8004244 <MX_TIM21_Init+0x124>)
 800416e:	2200      	movs	r2, #0
 8004170:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004172:	4b34      	ldr	r3, [pc, #208]	; (8004244 <MX_TIM21_Init+0x124>)
 8004174:	2200      	movs	r2, #0
 8004176:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8004178:	4b32      	ldr	r3, [pc, #200]	; (8004244 <MX_TIM21_Init+0x124>)
 800417a:	0018      	movs	r0, r3
 800417c:	f006 fc90 	bl	800aaa0 <HAL_TIM_Base_Init>
 8004180:	1e03      	subs	r3, r0, #0
 8004182:	d001      	beq.n	8004188 <MX_TIM21_Init+0x68>
  {
    Error_Handler();
 8004184:	f000 f9f2 	bl	800456c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8004188:	2118      	movs	r1, #24
 800418a:	187b      	adds	r3, r7, r1
 800418c:	2280      	movs	r2, #128	; 0x80
 800418e:	0192      	lsls	r2, r2, #6
 8004190:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8004192:	187b      	adds	r3, r7, r1
 8004194:	2200      	movs	r2, #0
 8004196:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8004198:	187b      	adds	r3, r7, r1
 800419a:	2200      	movs	r2, #0
 800419c:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 800419e:	187b      	adds	r3, r7, r1
 80041a0:	2200      	movs	r2, #0
 80041a2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80041a4:	187a      	adds	r2, r7, r1
 80041a6:	4b27      	ldr	r3, [pc, #156]	; (8004244 <MX_TIM21_Init+0x124>)
 80041a8:	0011      	movs	r1, r2
 80041aa:	0018      	movs	r0, r3
 80041ac:	f007 f82a 	bl	800b204 <HAL_TIM_ConfigClockSource>
 80041b0:	1e03      	subs	r3, r0, #0
 80041b2:	d001      	beq.n	80041b8 <MX_TIM21_Init+0x98>
  {
    Error_Handler();
 80041b4:	f000 f9da 	bl	800456c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 80041b8:	4b22      	ldr	r3, [pc, #136]	; (8004244 <MX_TIM21_Init+0x124>)
 80041ba:	0018      	movs	r0, r3
 80041bc:	f006 fce0 	bl	800ab80 <HAL_TIM_OC_Init>
 80041c0:	1e03      	subs	r3, r0, #0
 80041c2:	d001      	beq.n	80041c8 <MX_TIM21_Init+0xa8>
  {
    Error_Handler();
 80041c4:	f000 f9d2 	bl	800456c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041c8:	2110      	movs	r1, #16
 80041ca:	187b      	adds	r3, r7, r1
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041d0:	187b      	adds	r3, r7, r1
 80041d2:	2200      	movs	r2, #0
 80041d4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80041d6:	187a      	adds	r2, r7, r1
 80041d8:	4b1a      	ldr	r3, [pc, #104]	; (8004244 <MX_TIM21_Init+0x124>)
 80041da:	0011      	movs	r1, r2
 80041dc:	0018      	movs	r0, r3
 80041de:	f007 fb06 	bl	800b7ee <HAL_TIMEx_MasterConfigSynchronization>
 80041e2:	1e03      	subs	r3, r0, #0
 80041e4:	d001      	beq.n	80041ea <MX_TIM21_Init+0xca>
  {
    Error_Handler();
 80041e6:	f000 f9c1 	bl	800456c <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim21, TIM21_ETR_LSE) != HAL_OK)
 80041ea:	4b16      	ldr	r3, [pc, #88]	; (8004244 <MX_TIM21_Init+0x124>)
 80041ec:	2103      	movs	r1, #3
 80041ee:	0018      	movs	r0, r3
 80041f0:	f007 fb40 	bl	800b874 <HAL_TIMEx_RemapConfig>
 80041f4:	1e03      	subs	r3, r0, #0
 80041f6:	d001      	beq.n	80041fc <MX_TIM21_Init+0xdc>
  {
    Error_Handler();
 80041f8:	f000 f9b8 	bl	800456c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80041fc:	003b      	movs	r3, r7
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8004202:	003b      	movs	r3, r7
 8004204:	2200      	movs	r2, #0
 8004206:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004208:	003b      	movs	r3, r7
 800420a:	2200      	movs	r2, #0
 800420c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800420e:	003b      	movs	r3, r7
 8004210:	2200      	movs	r2, #0
 8004212:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004214:	0039      	movs	r1, r7
 8004216:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <MX_TIM21_Init+0x124>)
 8004218:	2200      	movs	r2, #0
 800421a:	0018      	movs	r0, r3
 800421c:	f006 feec 	bl	800aff8 <HAL_TIM_OC_ConfigChannel>
 8004220:	1e03      	subs	r3, r0, #0
 8004222:	d001      	beq.n	8004228 <MX_TIM21_Init+0x108>
  {
    Error_Handler();
 8004224:	f000 f9a2 	bl	800456c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004228:	0039      	movs	r1, r7
 800422a:	4b06      	ldr	r3, [pc, #24]	; (8004244 <MX_TIM21_Init+0x124>)
 800422c:	2204      	movs	r2, #4
 800422e:	0018      	movs	r0, r3
 8004230:	f006 fee2 	bl	800aff8 <HAL_TIM_OC_ConfigChannel>
 8004234:	1e03      	subs	r3, r0, #0
 8004236:	d001      	beq.n	800423c <MX_TIM21_Init+0x11c>
  {
    Error_Handler();
 8004238:	f000 f998 	bl	800456c <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 800423c:	46c0      	nop			; (mov r8, r8)
 800423e:	46bd      	mov	sp, r7
 8004240:	b00a      	add	sp, #40	; 0x28
 8004242:	bd80      	pop	{r7, pc}
 8004244:	20000670 	.word	0x20000670
 8004248:	40010800 	.word	0x40010800
 800424c:	00007fff 	.word	0x00007fff

08004250 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b08a      	sub	sp, #40	; 0x28
 8004254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004256:	2318      	movs	r3, #24
 8004258:	18fb      	adds	r3, r7, r3
 800425a:	0018      	movs	r0, r3
 800425c:	2310      	movs	r3, #16
 800425e:	001a      	movs	r2, r3
 8004260:	2100      	movs	r1, #0
 8004262:	f007 fba8 	bl	800b9b6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004266:	2310      	movs	r3, #16
 8004268:	18fb      	adds	r3, r7, r3
 800426a:	0018      	movs	r0, r3
 800426c:	2308      	movs	r3, #8
 800426e:	001a      	movs	r2, r3
 8004270:	2100      	movs	r1, #0
 8004272:	f007 fba0 	bl	800b9b6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004276:	003b      	movs	r3, r7
 8004278:	0018      	movs	r0, r3
 800427a:	2310      	movs	r3, #16
 800427c:	001a      	movs	r2, r3
 800427e:	2100      	movs	r1, #0
 8004280:	f007 fb99 	bl	800b9b6 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8004284:	4b37      	ldr	r3, [pc, #220]	; (8004364 <MX_TIM22_Init+0x114>)
 8004286:	4a38      	ldr	r2, [pc, #224]	; (8004368 <MX_TIM22_Init+0x118>)
 8004288:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0x400;
 800428a:	4b36      	ldr	r3, [pc, #216]	; (8004364 <MX_TIM22_Init+0x114>)
 800428c:	2280      	movs	r2, #128	; 0x80
 800428e:	00d2      	lsls	r2, r2, #3
 8004290:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004292:	4b34      	ldr	r3, [pc, #208]	; (8004364 <MX_TIM22_Init+0x114>)
 8004294:	2200      	movs	r2, #0
 8004296:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 1919;
 8004298:	4b32      	ldr	r3, [pc, #200]	; (8004364 <MX_TIM22_Init+0x114>)
 800429a:	4a34      	ldr	r2, [pc, #208]	; (800436c <MX_TIM22_Init+0x11c>)
 800429c:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800429e:	4b31      	ldr	r3, [pc, #196]	; (8004364 <MX_TIM22_Init+0x114>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042a4:	4b2f      	ldr	r3, [pc, #188]	; (8004364 <MX_TIM22_Init+0x114>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 80042aa:	4b2e      	ldr	r3, [pc, #184]	; (8004364 <MX_TIM22_Init+0x114>)
 80042ac:	0018      	movs	r0, r3
 80042ae:	f006 fbf7 	bl	800aaa0 <HAL_TIM_Base_Init>
 80042b2:	1e03      	subs	r3, r0, #0
 80042b4:	d001      	beq.n	80042ba <MX_TIM22_Init+0x6a>
  {
    Error_Handler();
 80042b6:	f000 f959 	bl	800456c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80042ba:	2118      	movs	r1, #24
 80042bc:	187b      	adds	r3, r7, r1
 80042be:	2280      	movs	r2, #128	; 0x80
 80042c0:	0192      	lsls	r2, r2, #6
 80042c2:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80042c4:	187b      	adds	r3, r7, r1
 80042c6:	2200      	movs	r2, #0
 80042c8:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80042ca:	187b      	adds	r3, r7, r1
 80042cc:	2200      	movs	r2, #0
 80042ce:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 80042d0:	187b      	adds	r3, r7, r1
 80042d2:	2200      	movs	r2, #0
 80042d4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 80042d6:	187a      	adds	r2, r7, r1
 80042d8:	4b22      	ldr	r3, [pc, #136]	; (8004364 <MX_TIM22_Init+0x114>)
 80042da:	0011      	movs	r1, r2
 80042dc:	0018      	movs	r0, r3
 80042de:	f006 ff91 	bl	800b204 <HAL_TIM_ConfigClockSource>
 80042e2:	1e03      	subs	r3, r0, #0
 80042e4:	d001      	beq.n	80042ea <MX_TIM22_Init+0x9a>
  {
    Error_Handler();
 80042e6:	f000 f941 	bl	800456c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim22) != HAL_OK)
 80042ea:	4b1e      	ldr	r3, [pc, #120]	; (8004364 <MX_TIM22_Init+0x114>)
 80042ec:	0018      	movs	r0, r3
 80042ee:	f006 fc47 	bl	800ab80 <HAL_TIM_OC_Init>
 80042f2:	1e03      	subs	r3, r0, #0
 80042f4:	d001      	beq.n	80042fa <MX_TIM22_Init+0xaa>
  {
    Error_Handler();
 80042f6:	f000 f939 	bl	800456c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042fa:	2110      	movs	r1, #16
 80042fc:	187b      	adds	r3, r7, r1
 80042fe:	2200      	movs	r2, #0
 8004300:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004302:	187b      	adds	r3, r7, r1
 8004304:	2200      	movs	r2, #0
 8004306:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8004308:	187a      	adds	r2, r7, r1
 800430a:	4b16      	ldr	r3, [pc, #88]	; (8004364 <MX_TIM22_Init+0x114>)
 800430c:	0011      	movs	r1, r2
 800430e:	0018      	movs	r0, r3
 8004310:	f007 fa6d 	bl	800b7ee <HAL_TIMEx_MasterConfigSynchronization>
 8004314:	1e03      	subs	r3, r0, #0
 8004316:	d001      	beq.n	800431c <MX_TIM22_Init+0xcc>
  {
    Error_Handler();
 8004318:	f000 f928 	bl	800456c <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim22, TIM22_ETR_LSE) != HAL_OK)
 800431c:	4b11      	ldr	r3, [pc, #68]	; (8004364 <MX_TIM22_Init+0x114>)
 800431e:	2103      	movs	r1, #3
 8004320:	0018      	movs	r0, r3
 8004322:	f007 faa7 	bl	800b874 <HAL_TIMEx_RemapConfig>
 8004326:	1e03      	subs	r3, r0, #0
 8004328:	d001      	beq.n	800432e <MX_TIM22_Init+0xde>
  {
    Error_Handler();
 800432a:	f000 f91f 	bl	800456c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800432e:	003b      	movs	r3, r7
 8004330:	2200      	movs	r2, #0
 8004332:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8004334:	003b      	movs	r3, r7
 8004336:	2200      	movs	r2, #0
 8004338:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800433a:	003b      	movs	r3, r7
 800433c:	2200      	movs	r2, #0
 800433e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004340:	003b      	movs	r3, r7
 8004342:	2200      	movs	r2, #0
 8004344:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004346:	0039      	movs	r1, r7
 8004348:	4b06      	ldr	r3, [pc, #24]	; (8004364 <MX_TIM22_Init+0x114>)
 800434a:	2200      	movs	r2, #0
 800434c:	0018      	movs	r0, r3
 800434e:	f006 fe53 	bl	800aff8 <HAL_TIM_OC_ConfigChannel>
 8004352:	1e03      	subs	r3, r0, #0
 8004354:	d001      	beq.n	800435a <MX_TIM22_Init+0x10a>
  {
    Error_Handler();
 8004356:	f000 f909 	bl	800456c <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */

}
 800435a:	46c0      	nop			; (mov r8, r8)
 800435c:	46bd      	mov	sp, r7
 800435e:	b00a      	add	sp, #40	; 0x28
 8004360:	bd80      	pop	{r7, pc}
 8004362:	46c0      	nop			; (mov r8, r8)
 8004364:	2000023c 	.word	0x2000023c
 8004368:	40011400 	.word	0x40011400
 800436c:	0000077f 	.word	0x0000077f

08004370 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8004374:	4b0f      	ldr	r3, [pc, #60]	; (80043b4 <MX_USB_PCD_Init+0x44>)
 8004376:	4a10      	ldr	r2, [pc, #64]	; (80043b8 <MX_USB_PCD_Init+0x48>)
 8004378:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800437a:	4b0e      	ldr	r3, [pc, #56]	; (80043b4 <MX_USB_PCD_Init+0x44>)
 800437c:	2208      	movs	r2, #8
 800437e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004380:	4b0c      	ldr	r3, [pc, #48]	; (80043b4 <MX_USB_PCD_Init+0x44>)
 8004382:	2202      	movs	r2, #2
 8004384:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004386:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <MX_USB_PCD_Init+0x44>)
 8004388:	2202      	movs	r2, #2
 800438a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800438c:	4b09      	ldr	r3, [pc, #36]	; (80043b4 <MX_USB_PCD_Init+0x44>)
 800438e:	2200      	movs	r2, #0
 8004390:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004392:	4b08      	ldr	r3, [pc, #32]	; (80043b4 <MX_USB_PCD_Init+0x44>)
 8004394:	2200      	movs	r2, #0
 8004396:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004398:	4b06      	ldr	r3, [pc, #24]	; (80043b4 <MX_USB_PCD_Init+0x44>)
 800439a:	2200      	movs	r2, #0
 800439c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800439e:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <MX_USB_PCD_Init+0x44>)
 80043a0:	0018      	movs	r0, r3
 80043a2:	f003 ff11 	bl	80081c8 <HAL_PCD_Init>
 80043a6:	1e03      	subs	r3, r0, #0
 80043a8:	d001      	beq.n	80043ae <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 80043aa:	f000 f8df 	bl	800456c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	20000320 	.word	0x20000320
 80043b8:	40005c00 	.word	0x40005c00

080043bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80043c2:	4b0c      	ldr	r3, [pc, #48]	; (80043f4 <MX_DMA_Init+0x38>)
 80043c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043c6:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <MX_DMA_Init+0x38>)
 80043c8:	2101      	movs	r1, #1
 80043ca:	430a      	orrs	r2, r1
 80043cc:	631a      	str	r2, [r3, #48]	; 0x30
 80043ce:	4b09      	ldr	r3, [pc, #36]	; (80043f4 <MX_DMA_Init+0x38>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	2201      	movs	r2, #1
 80043d4:	4013      	ands	r3, r2
 80043d6:	607b      	str	r3, [r7, #4]
 80043d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80043da:	2200      	movs	r2, #0
 80043dc:	2100      	movs	r1, #0
 80043de:	200b      	movs	r0, #11
 80043e0:	f003 fadc 	bl	800799c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80043e4:	200b      	movs	r0, #11
 80043e6:	f003 faee 	bl	80079c6 <HAL_NVIC_EnableIRQ>

}
 80043ea:	46c0      	nop			; (mov r8, r8)
 80043ec:	46bd      	mov	sp, r7
 80043ee:	b002      	add	sp, #8
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	46c0      	nop			; (mov r8, r8)
 80043f4:	40021000 	.word	0x40021000

080043f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80043f8:	b590      	push	{r4, r7, lr}
 80043fa:	b089      	sub	sp, #36	; 0x24
 80043fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043fe:	240c      	movs	r4, #12
 8004400:	193b      	adds	r3, r7, r4
 8004402:	0018      	movs	r0, r3
 8004404:	2314      	movs	r3, #20
 8004406:	001a      	movs	r2, r3
 8004408:	2100      	movs	r1, #0
 800440a:	f007 fad4 	bl	800b9b6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800440e:	4b52      	ldr	r3, [pc, #328]	; (8004558 <MX_GPIO_Init+0x160>)
 8004410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004412:	4b51      	ldr	r3, [pc, #324]	; (8004558 <MX_GPIO_Init+0x160>)
 8004414:	2104      	movs	r1, #4
 8004416:	430a      	orrs	r2, r1
 8004418:	62da      	str	r2, [r3, #44]	; 0x2c
 800441a:	4b4f      	ldr	r3, [pc, #316]	; (8004558 <MX_GPIO_Init+0x160>)
 800441c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441e:	2204      	movs	r2, #4
 8004420:	4013      	ands	r3, r2
 8004422:	60bb      	str	r3, [r7, #8]
 8004424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004426:	4b4c      	ldr	r3, [pc, #304]	; (8004558 <MX_GPIO_Init+0x160>)
 8004428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800442a:	4b4b      	ldr	r3, [pc, #300]	; (8004558 <MX_GPIO_Init+0x160>)
 800442c:	2101      	movs	r1, #1
 800442e:	430a      	orrs	r2, r1
 8004430:	62da      	str	r2, [r3, #44]	; 0x2c
 8004432:	4b49      	ldr	r3, [pc, #292]	; (8004558 <MX_GPIO_Init+0x160>)
 8004434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004436:	2201      	movs	r2, #1
 8004438:	4013      	ands	r3, r2
 800443a:	607b      	str	r3, [r7, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800443e:	4b46      	ldr	r3, [pc, #280]	; (8004558 <MX_GPIO_Init+0x160>)
 8004440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004442:	4b45      	ldr	r3, [pc, #276]	; (8004558 <MX_GPIO_Init+0x160>)
 8004444:	2102      	movs	r1, #2
 8004446:	430a      	orrs	r2, r1
 8004448:	62da      	str	r2, [r3, #44]	; 0x2c
 800444a:	4b43      	ldr	r3, [pc, #268]	; (8004558 <MX_GPIO_Init+0x160>)
 800444c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444e:	2202      	movs	r2, #2
 8004450:	4013      	ands	r3, r2
 8004452:	603b      	str	r3, [r7, #0]
 8004454:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADC_DIV_EN_Pin|MOTOR_EN_Pin|LED1_Pin|LED2_Pin
 8004456:	23a0      	movs	r3, #160	; 0xa0
 8004458:	05db      	lsls	r3, r3, #23
 800445a:	2200      	movs	r2, #0
 800445c:	21f2      	movs	r1, #242	; 0xf2
 800445e:	0018      	movs	r0, r3
 8004460:	f003 fe5e 	bl	8008120 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PS_EN_GPIO_Port, PS_EN_Pin, GPIO_PIN_SET);
 8004464:	23a0      	movs	r3, #160	; 0xa0
 8004466:	05db      	lsls	r3, r3, #23
 8004468:	2201      	movs	r2, #1
 800446a:	2104      	movs	r1, #4
 800446c:	0018      	movs	r0, r3
 800446e:	f003 fe57 	bl	8008120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8004472:	2380      	movs	r3, #128	; 0x80
 8004474:	01db      	lsls	r3, r3, #7
 8004476:	4839      	ldr	r0, [pc, #228]	; (800455c <MX_GPIO_Init+0x164>)
 8004478:	2200      	movs	r2, #0
 800447a:	0019      	movs	r1, r3
 800447c:	f003 fe50 	bl	8008120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8004480:	4b37      	ldr	r3, [pc, #220]	; (8004560 <MX_GPIO_Init+0x168>)
 8004482:	2201      	movs	r2, #1
 8004484:	2180      	movs	r1, #128	; 0x80
 8004486:	0018      	movs	r0, r3
 8004488:	f003 fe4a 	bl	8008120 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_DIV_EN_Pin PS_EN_Pin MOTOR_EN_Pin LED1_Pin
                           LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = ADC_DIV_EN_Pin|PS_EN_Pin|MOTOR_EN_Pin|LED1_Pin
 800448c:	193b      	adds	r3, r7, r4
 800448e:	22f6      	movs	r2, #246	; 0xf6
 8004490:	601a      	str	r2, [r3, #0]
                          |LED2_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004492:	193b      	adds	r3, r7, r4
 8004494:	2201      	movs	r2, #1
 8004496:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004498:	193b      	adds	r3, r7, r4
 800449a:	2200      	movs	r2, #0
 800449c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800449e:	193b      	adds	r3, r7, r4
 80044a0:	2200      	movs	r2, #0
 80044a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044a4:	193a      	adds	r2, r7, r4
 80044a6:	23a0      	movs	r3, #160	; 0xa0
 80044a8:	05db      	lsls	r3, r3, #23
 80044aa:	0011      	movs	r1, r2
 80044ac:	0018      	movs	r0, r3
 80044ae:	f003 fcb9 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11;
 80044b2:	193b      	adds	r3, r7, r4
 80044b4:	4a2b      	ldr	r2, [pc, #172]	; (8004564 <MX_GPIO_Init+0x16c>)
 80044b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80044b8:	193b      	adds	r3, r7, r4
 80044ba:	4a2b      	ldr	r2, [pc, #172]	; (8004568 <MX_GPIO_Init+0x170>)
 80044bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044be:	193b      	adds	r3, r7, r4
 80044c0:	2200      	movs	r2, #0
 80044c2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044c4:	193b      	adds	r3, r7, r4
 80044c6:	4a25      	ldr	r2, [pc, #148]	; (800455c <MX_GPIO_Init+0x164>)
 80044c8:	0019      	movs	r1, r3
 80044ca:	0010      	movs	r0, r2
 80044cc:	f003 fcaa 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 80044d0:	0021      	movs	r1, r4
 80044d2:	187b      	adds	r3, r7, r1
 80044d4:	2280      	movs	r2, #128	; 0x80
 80044d6:	01d2      	lsls	r2, r2, #7
 80044d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044da:	187b      	adds	r3, r7, r1
 80044dc:	2201      	movs	r2, #1
 80044de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e0:	187b      	adds	r3, r7, r1
 80044e2:	2200      	movs	r2, #0
 80044e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044e6:	187b      	adds	r3, r7, r1
 80044e8:	2203      	movs	r2, #3
 80044ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 80044ec:	000c      	movs	r4, r1
 80044ee:	187b      	adds	r3, r7, r1
 80044f0:	4a1a      	ldr	r2, [pc, #104]	; (800455c <MX_GPIO_Init+0x164>)
 80044f2:	0019      	movs	r1, r3
 80044f4:	0010      	movs	r0, r2
 80044f6:	f003 fc95 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 80044fa:	0021      	movs	r1, r4
 80044fc:	187b      	adds	r3, r7, r1
 80044fe:	2280      	movs	r2, #128	; 0x80
 8004500:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004502:	187b      	adds	r3, r7, r1
 8004504:	2201      	movs	r2, #1
 8004506:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004508:	187b      	adds	r3, r7, r1
 800450a:	2200      	movs	r2, #0
 800450c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800450e:	187b      	adds	r3, r7, r1
 8004510:	2200      	movs	r2, #0
 8004512:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8004514:	187b      	adds	r3, r7, r1
 8004516:	4a12      	ldr	r2, [pc, #72]	; (8004560 <MX_GPIO_Init+0x168>)
 8004518:	0019      	movs	r1, r3
 800451a:	0010      	movs	r0, r2
 800451c:	f003 fc82 	bl	8007e24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8004520:	2200      	movs	r2, #0
 8004522:	2100      	movs	r1, #0
 8004524:	2005      	movs	r0, #5
 8004526:	f003 fa39 	bl	800799c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800452a:	2005      	movs	r0, #5
 800452c:	f003 fa4b 	bl	80079c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8004530:	2200      	movs	r2, #0
 8004532:	2100      	movs	r1, #0
 8004534:	2006      	movs	r0, #6
 8004536:	f003 fa31 	bl	800799c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800453a:	2006      	movs	r0, #6
 800453c:	f003 fa43 	bl	80079c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8004540:	2200      	movs	r2, #0
 8004542:	2100      	movs	r1, #0
 8004544:	2007      	movs	r0, #7
 8004546:	f003 fa29 	bl	800799c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800454a:	2007      	movs	r0, #7
 800454c:	f003 fa3b 	bl	80079c6 <HAL_NVIC_EnableIRQ>

}
 8004550:	46c0      	nop			; (mov r8, r8)
 8004552:	46bd      	mov	sp, r7
 8004554:	b009      	add	sp, #36	; 0x24
 8004556:	bd90      	pop	{r4, r7, pc}
 8004558:	40021000 	.word	0x40021000
 800455c:	50000400 	.word	0x50000400
 8004560:	50000800 	.word	0x50000800
 8004564:	00000c06 	.word	0x00000c06
 8004568:	10110000 	.word	0x10110000

0800456c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004570:	46c0      	nop			; (mov r8, r8)
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
	...

08004578 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800457c:	4b07      	ldr	r3, [pc, #28]	; (800459c <HAL_MspInit+0x24>)
 800457e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004580:	4b06      	ldr	r3, [pc, #24]	; (800459c <HAL_MspInit+0x24>)
 8004582:	2101      	movs	r1, #1
 8004584:	430a      	orrs	r2, r1
 8004586:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004588:	4b04      	ldr	r3, [pc, #16]	; (800459c <HAL_MspInit+0x24>)
 800458a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800458c:	4b03      	ldr	r3, [pc, #12]	; (800459c <HAL_MspInit+0x24>)
 800458e:	2180      	movs	r1, #128	; 0x80
 8004590:	0549      	lsls	r1, r1, #21
 8004592:	430a      	orrs	r2, r1
 8004594:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004596:	46c0      	nop			; (mov r8, r8)
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40021000 	.word	0x40021000

080045a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b088      	sub	sp, #32
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045a8:	230c      	movs	r3, #12
 80045aa:	18fb      	adds	r3, r7, r3
 80045ac:	0018      	movs	r0, r3
 80045ae:	2314      	movs	r3, #20
 80045b0:	001a      	movs	r2, r3
 80045b2:	2100      	movs	r1, #0
 80045b4:	f007 f9ff 	bl	800b9b6 <memset>
  if(hadc->Instance==ADC1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a19      	ldr	r2, [pc, #100]	; (8004624 <HAL_ADC_MspInit+0x84>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d12b      	bne.n	800461a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80045c2:	4b19      	ldr	r3, [pc, #100]	; (8004628 <HAL_ADC_MspInit+0x88>)
 80045c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045c6:	4b18      	ldr	r3, [pc, #96]	; (8004628 <HAL_ADC_MspInit+0x88>)
 80045c8:	2180      	movs	r1, #128	; 0x80
 80045ca:	0089      	lsls	r1, r1, #2
 80045cc:	430a      	orrs	r2, r1
 80045ce:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045d0:	4b15      	ldr	r3, [pc, #84]	; (8004628 <HAL_ADC_MspInit+0x88>)
 80045d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d4:	4b14      	ldr	r3, [pc, #80]	; (8004628 <HAL_ADC_MspInit+0x88>)
 80045d6:	2101      	movs	r1, #1
 80045d8:	430a      	orrs	r2, r1
 80045da:	62da      	str	r2, [r3, #44]	; 0x2c
 80045dc:	4b12      	ldr	r3, [pc, #72]	; (8004628 <HAL_ADC_MspInit+0x88>)
 80045de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e0:	2201      	movs	r2, #1
 80045e2:	4013      	ands	r3, r2
 80045e4:	60bb      	str	r3, [r7, #8]
 80045e6:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80045e8:	210c      	movs	r1, #12
 80045ea:	187b      	adds	r3, r7, r1
 80045ec:	2201      	movs	r2, #1
 80045ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045f0:	187b      	adds	r3, r7, r1
 80045f2:	2203      	movs	r2, #3
 80045f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f6:	187b      	adds	r3, r7, r1
 80045f8:	2200      	movs	r2, #0
 80045fa:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045fc:	187a      	adds	r2, r7, r1
 80045fe:	23a0      	movs	r3, #160	; 0xa0
 8004600:	05db      	lsls	r3, r3, #23
 8004602:	0011      	movs	r1, r2
 8004604:	0018      	movs	r0, r3
 8004606:	f003 fc0d 	bl	8007e24 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 800460a:	2200      	movs	r2, #0
 800460c:	2100      	movs	r1, #0
 800460e:	200c      	movs	r0, #12
 8004610:	f003 f9c4 	bl	800799c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8004614:	200c      	movs	r0, #12
 8004616:	f003 f9d6 	bl	80079c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800461a:	46c0      	nop			; (mov r8, r8)
 800461c:	46bd      	mov	sp, r7
 800461e:	b008      	add	sp, #32
 8004620:	bd80      	pop	{r7, pc}
 8004622:	46c0      	nop			; (mov r8, r8)
 8004624:	40012400 	.word	0x40012400
 8004628:	40021000 	.word	0x40021000

0800462c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a0a      	ldr	r2, [pc, #40]	; (8004664 <HAL_RTC_MspInit+0x38>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d10e      	bne.n	800465c <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800463e:	4b0a      	ldr	r3, [pc, #40]	; (8004668 <HAL_RTC_MspInit+0x3c>)
 8004640:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004642:	4b09      	ldr	r3, [pc, #36]	; (8004668 <HAL_RTC_MspInit+0x3c>)
 8004644:	2180      	movs	r1, #128	; 0x80
 8004646:	02c9      	lsls	r1, r1, #11
 8004648:	430a      	orrs	r2, r1
 800464a:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800464c:	2200      	movs	r2, #0
 800464e:	2100      	movs	r1, #0
 8004650:	2002      	movs	r0, #2
 8004652:	f003 f9a3 	bl	800799c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8004656:	2002      	movs	r0, #2
 8004658:	f003 f9b5 	bl	80079c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800465c:	46c0      	nop			; (mov r8, r8)
 800465e:	46bd      	mov	sp, r7
 8004660:	b002      	add	sp, #8
 8004662:	bd80      	pop	{r7, pc}
 8004664:	40002800 	.word	0x40002800
 8004668:	40021000 	.word	0x40021000

0800466c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b088      	sub	sp, #32
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004674:	230c      	movs	r3, #12
 8004676:	18fb      	adds	r3, r7, r3
 8004678:	0018      	movs	r0, r3
 800467a:	2314      	movs	r3, #20
 800467c:	001a      	movs	r2, r3
 800467e:	2100      	movs	r1, #0
 8004680:	f007 f999 	bl	800b9b6 <memset>
  if(hspi->Instance==SPI2)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a31      	ldr	r2, [pc, #196]	; (8004750 <HAL_SPI_MspInit+0xe4>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d15c      	bne.n	8004748 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800468e:	4b31      	ldr	r3, [pc, #196]	; (8004754 <HAL_SPI_MspInit+0xe8>)
 8004690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004692:	4b30      	ldr	r3, [pc, #192]	; (8004754 <HAL_SPI_MspInit+0xe8>)
 8004694:	2180      	movs	r1, #128	; 0x80
 8004696:	01c9      	lsls	r1, r1, #7
 8004698:	430a      	orrs	r2, r1
 800469a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800469c:	4b2d      	ldr	r3, [pc, #180]	; (8004754 <HAL_SPI_MspInit+0xe8>)
 800469e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a0:	4b2c      	ldr	r3, [pc, #176]	; (8004754 <HAL_SPI_MspInit+0xe8>)
 80046a2:	2102      	movs	r1, #2
 80046a4:	430a      	orrs	r2, r1
 80046a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80046a8:	4b2a      	ldr	r3, [pc, #168]	; (8004754 <HAL_SPI_MspInit+0xe8>)
 80046aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ac:	2202      	movs	r2, #2
 80046ae:	4013      	ands	r3, r2
 80046b0:	60bb      	str	r3, [r7, #8]
 80046b2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80046b4:	210c      	movs	r1, #12
 80046b6:	187b      	adds	r3, r7, r1
 80046b8:	22b0      	movs	r2, #176	; 0xb0
 80046ba:	0212      	lsls	r2, r2, #8
 80046bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046be:	187b      	adds	r3, r7, r1
 80046c0:	2202      	movs	r2, #2
 80046c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c4:	187b      	adds	r3, r7, r1
 80046c6:	2200      	movs	r2, #0
 80046c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046ca:	187b      	adds	r3, r7, r1
 80046cc:	2203      	movs	r2, #3
 80046ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80046d0:	187b      	adds	r3, r7, r1
 80046d2:	2200      	movs	r2, #0
 80046d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046d6:	187b      	adds	r3, r7, r1
 80046d8:	4a1f      	ldr	r2, [pc, #124]	; (8004758 <HAL_SPI_MspInit+0xec>)
 80046da:	0019      	movs	r1, r3
 80046dc:	0010      	movs	r0, r2
 80046de:	f003 fba1 	bl	8007e24 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80046e2:	4b1e      	ldr	r3, [pc, #120]	; (800475c <HAL_SPI_MspInit+0xf0>)
 80046e4:	4a1e      	ldr	r2, [pc, #120]	; (8004760 <HAL_SPI_MspInit+0xf4>)
 80046e6:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_2;
 80046e8:	4b1c      	ldr	r3, [pc, #112]	; (800475c <HAL_SPI_MspInit+0xf0>)
 80046ea:	2202      	movs	r2, #2
 80046ec:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80046ee:	4b1b      	ldr	r3, [pc, #108]	; (800475c <HAL_SPI_MspInit+0xf0>)
 80046f0:	2210      	movs	r2, #16
 80046f2:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046f4:	4b19      	ldr	r3, [pc, #100]	; (800475c <HAL_SPI_MspInit+0xf0>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_DISABLE;
 80046fa:	4b18      	ldr	r3, [pc, #96]	; (800475c <HAL_SPI_MspInit+0xf0>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004700:	4b16      	ldr	r3, [pc, #88]	; (800475c <HAL_SPI_MspInit+0xf0>)
 8004702:	2280      	movs	r2, #128	; 0x80
 8004704:	0052      	lsls	r2, r2, #1
 8004706:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004708:	4b14      	ldr	r3, [pc, #80]	; (800475c <HAL_SPI_MspInit+0xf0>)
 800470a:	2280      	movs	r2, #128	; 0x80
 800470c:	00d2      	lsls	r2, r2, #3
 800470e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004710:	4b12      	ldr	r3, [pc, #72]	; (800475c <HAL_SPI_MspInit+0xf0>)
 8004712:	2200      	movs	r2, #0
 8004714:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004716:	4b11      	ldr	r3, [pc, #68]	; (800475c <HAL_SPI_MspInit+0xf0>)
 8004718:	2200      	movs	r2, #0
 800471a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800471c:	4b0f      	ldr	r3, [pc, #60]	; (800475c <HAL_SPI_MspInit+0xf0>)
 800471e:	0018      	movs	r0, r3
 8004720:	f003 f97e 	bl	8007a20 <HAL_DMA_Init>
 8004724:	1e03      	subs	r3, r0, #0
 8004726:	d001      	beq.n	800472c <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 8004728:	f7ff ff20 	bl	800456c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a0b      	ldr	r2, [pc, #44]	; (800475c <HAL_SPI_MspInit+0xf0>)
 8004730:	649a      	str	r2, [r3, #72]	; 0x48
 8004732:	4b0a      	ldr	r3, [pc, #40]	; (800475c <HAL_SPI_MspInit+0xf0>)
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004738:	2200      	movs	r2, #0
 800473a:	2100      	movs	r1, #0
 800473c:	201a      	movs	r0, #26
 800473e:	f003 f92d 	bl	800799c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004742:	201a      	movs	r0, #26
 8004744:	f003 f93f 	bl	80079c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004748:	46c0      	nop			; (mov r8, r8)
 800474a:	46bd      	mov	sp, r7
 800474c:	b008      	add	sp, #32
 800474e:	bd80      	pop	{r7, pc}
 8004750:	40003800 	.word	0x40003800
 8004754:	40021000 	.word	0x40021000
 8004758:	50000400 	.word	0x50000400
 800475c:	200002d8 	.word	0x200002d8
 8004760:	40020058 	.word	0x40020058

08004764 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	2380      	movs	r3, #128	; 0x80
 8004772:	05db      	lsls	r3, r3, #23
 8004774:	429a      	cmp	r2, r3
 8004776:	d10e      	bne.n	8004796 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004778:	4b28      	ldr	r3, [pc, #160]	; (800481c <HAL_TIM_Base_MspInit+0xb8>)
 800477a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800477c:	4b27      	ldr	r3, [pc, #156]	; (800481c <HAL_TIM_Base_MspInit+0xb8>)
 800477e:	2101      	movs	r1, #1
 8004780:	430a      	orrs	r2, r1
 8004782:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004784:	2200      	movs	r2, #0
 8004786:	2100      	movs	r1, #0
 8004788:	200f      	movs	r0, #15
 800478a:	f003 f907 	bl	800799c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800478e:	200f      	movs	r0, #15
 8004790:	f003 f919 	bl	80079c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 8004794:	e03e      	b.n	8004814 <HAL_TIM_Base_MspInit+0xb0>
  else if(htim_base->Instance==TIM3)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a21      	ldr	r2, [pc, #132]	; (8004820 <HAL_TIM_Base_MspInit+0xbc>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d106      	bne.n	80047ae <HAL_TIM_Base_MspInit+0x4a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80047a0:	4b1e      	ldr	r3, [pc, #120]	; (800481c <HAL_TIM_Base_MspInit+0xb8>)
 80047a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047a4:	4b1d      	ldr	r3, [pc, #116]	; (800481c <HAL_TIM_Base_MspInit+0xb8>)
 80047a6:	2102      	movs	r1, #2
 80047a8:	430a      	orrs	r2, r1
 80047aa:	639a      	str	r2, [r3, #56]	; 0x38
}
 80047ac:	e032      	b.n	8004814 <HAL_TIM_Base_MspInit+0xb0>
  else if(htim_base->Instance==TIM6)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a1c      	ldr	r2, [pc, #112]	; (8004824 <HAL_TIM_Base_MspInit+0xc0>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d106      	bne.n	80047c6 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80047b8:	4b18      	ldr	r3, [pc, #96]	; (800481c <HAL_TIM_Base_MspInit+0xb8>)
 80047ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047bc:	4b17      	ldr	r3, [pc, #92]	; (800481c <HAL_TIM_Base_MspInit+0xb8>)
 80047be:	2110      	movs	r1, #16
 80047c0:	430a      	orrs	r2, r1
 80047c2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80047c4:	e026      	b.n	8004814 <HAL_TIM_Base_MspInit+0xb0>
  else if(htim_base->Instance==TIM21)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a17      	ldr	r2, [pc, #92]	; (8004828 <HAL_TIM_Base_MspInit+0xc4>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d10e      	bne.n	80047ee <HAL_TIM_Base_MspInit+0x8a>
    __HAL_RCC_TIM21_CLK_ENABLE();
 80047d0:	4b12      	ldr	r3, [pc, #72]	; (800481c <HAL_TIM_Base_MspInit+0xb8>)
 80047d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047d4:	4b11      	ldr	r3, [pc, #68]	; (800481c <HAL_TIM_Base_MspInit+0xb8>)
 80047d6:	2104      	movs	r1, #4
 80047d8:	430a      	orrs	r2, r1
 80047da:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 80047dc:	2200      	movs	r2, #0
 80047de:	2100      	movs	r1, #0
 80047e0:	2014      	movs	r0, #20
 80047e2:	f003 f8db 	bl	800799c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 80047e6:	2014      	movs	r0, #20
 80047e8:	f003 f8ed 	bl	80079c6 <HAL_NVIC_EnableIRQ>
}
 80047ec:	e012      	b.n	8004814 <HAL_TIM_Base_MspInit+0xb0>
  else if(htim_base->Instance==TIM22)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a0e      	ldr	r2, [pc, #56]	; (800482c <HAL_TIM_Base_MspInit+0xc8>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d10d      	bne.n	8004814 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM22_CLK_ENABLE();
 80047f8:	4b08      	ldr	r3, [pc, #32]	; (800481c <HAL_TIM_Base_MspInit+0xb8>)
 80047fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047fc:	4b07      	ldr	r3, [pc, #28]	; (800481c <HAL_TIM_Base_MspInit+0xb8>)
 80047fe:	2120      	movs	r1, #32
 8004800:	430a      	orrs	r2, r1
 8004802:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM22_IRQn, 0, 0);
 8004804:	2200      	movs	r2, #0
 8004806:	2100      	movs	r1, #0
 8004808:	2016      	movs	r0, #22
 800480a:	f003 f8c7 	bl	800799c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
 800480e:	2016      	movs	r0, #22
 8004810:	f003 f8d9 	bl	80079c6 <HAL_NVIC_EnableIRQ>
}
 8004814:	46c0      	nop			; (mov r8, r8)
 8004816:	46bd      	mov	sp, r7
 8004818:	b002      	add	sp, #8
 800481a:	bd80      	pop	{r7, pc}
 800481c:	40021000 	.word	0x40021000
 8004820:	40000400 	.word	0x40000400
 8004824:	40001000 	.word	0x40001000
 8004828:	40010800 	.word	0x40010800
 800482c:	40011400 	.word	0x40011400

08004830 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b088      	sub	sp, #32
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004838:	230c      	movs	r3, #12
 800483a:	18fb      	adds	r3, r7, r3
 800483c:	0018      	movs	r0, r3
 800483e:	2314      	movs	r3, #20
 8004840:	001a      	movs	r2, r3
 8004842:	2100      	movs	r1, #0
 8004844:	f007 f8b7 	bl	800b9b6 <memset>
  if(htim->Instance==TIM3)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a14      	ldr	r2, [pc, #80]	; (80048a0 <HAL_TIM_MspPostInit+0x70>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d121      	bne.n	8004896 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004852:	4b14      	ldr	r3, [pc, #80]	; (80048a4 <HAL_TIM_MspPostInit+0x74>)
 8004854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004856:	4b13      	ldr	r3, [pc, #76]	; (80048a4 <HAL_TIM_MspPostInit+0x74>)
 8004858:	2104      	movs	r1, #4
 800485a:	430a      	orrs	r2, r1
 800485c:	62da      	str	r2, [r3, #44]	; 0x2c
 800485e:	4b11      	ldr	r3, [pc, #68]	; (80048a4 <HAL_TIM_MspPostInit+0x74>)
 8004860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004862:	2204      	movs	r2, #4
 8004864:	4013      	ands	r3, r2
 8004866:	60bb      	str	r3, [r7, #8]
 8004868:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800486a:	210c      	movs	r1, #12
 800486c:	187b      	adds	r3, r7, r1
 800486e:	2240      	movs	r2, #64	; 0x40
 8004870:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004872:	187b      	adds	r3, r7, r1
 8004874:	2202      	movs	r2, #2
 8004876:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004878:	187b      	adds	r3, r7, r1
 800487a:	2200      	movs	r2, #0
 800487c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800487e:	187b      	adds	r3, r7, r1
 8004880:	2200      	movs	r2, #0
 8004882:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004884:	187b      	adds	r3, r7, r1
 8004886:	2202      	movs	r2, #2
 8004888:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800488a:	187b      	adds	r3, r7, r1
 800488c:	4a06      	ldr	r2, [pc, #24]	; (80048a8 <HAL_TIM_MspPostInit+0x78>)
 800488e:	0019      	movs	r1, r3
 8004890:	0010      	movs	r0, r2
 8004892:	f003 fac7 	bl	8007e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004896:	46c0      	nop			; (mov r8, r8)
 8004898:	46bd      	mov	sp, r7
 800489a:	b008      	add	sp, #32
 800489c:	bd80      	pop	{r7, pc}
 800489e:	46c0      	nop			; (mov r8, r8)
 80048a0:	40000400 	.word	0x40000400
 80048a4:	40021000 	.word	0x40021000
 80048a8:	50000800 	.word	0x50000800

080048ac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a06      	ldr	r2, [pc, #24]	; (80048d4 <HAL_PCD_MspInit+0x28>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d106      	bne.n	80048cc <HAL_PCD_MspInit+0x20>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80048be:	4b06      	ldr	r3, [pc, #24]	; (80048d8 <HAL_PCD_MspInit+0x2c>)
 80048c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048c2:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <HAL_PCD_MspInit+0x2c>)
 80048c4:	2180      	movs	r1, #128	; 0x80
 80048c6:	0409      	lsls	r1, r1, #16
 80048c8:	430a      	orrs	r2, r1
 80048ca:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80048cc:	46c0      	nop			; (mov r8, r8)
 80048ce:	46bd      	mov	sp, r7
 80048d0:	b002      	add	sp, #8
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40005c00 	.word	0x40005c00
 80048d8:	40021000 	.word	0x40021000

080048dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80048e0:	46c0      	nop			; (mov r8, r8)
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048ea:	e7fe      	b.n	80048ea <HardFault_Handler+0x4>

080048ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80048f0:	46c0      	nop			; (mov r8, r8)
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048fa:	46c0      	nop			; (mov r8, r8)
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004904:	f002 f9fc 	bl	8006d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004908:	46c0      	nop			; (mov r8, r8)
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
	...

08004910 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8004914:	4b03      	ldr	r3, [pc, #12]	; (8004924 <RTC_IRQHandler+0x14>)
 8004916:	0018      	movs	r0, r3
 8004918:	f005 f96a 	bl	8009bf0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800491c:	46c0      	nop			; (mov r8, r8)
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	46c0      	nop			; (mov r8, r8)
 8004924:	20000278 	.word	0x20000278

08004928 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800492c:	2002      	movs	r0, #2
 800492e:	f003 fc2f 	bl	8008190 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8004932:	46c0      	nop			; (mov r8, r8)
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800493c:	2004      	movs	r0, #4
 800493e:	f003 fc27 	bl	8008190 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8004942:	46c0      	nop			; (mov r8, r8)
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800494c:	2380      	movs	r3, #128	; 0x80
 800494e:	00db      	lsls	r3, r3, #3
 8004950:	0018      	movs	r0, r3
 8004952:	f003 fc1d 	bl	8008190 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004956:	2380      	movs	r3, #128	; 0x80
 8004958:	011b      	lsls	r3, r3, #4
 800495a:	0018      	movs	r0, r3
 800495c:	f003 fc18 	bl	8008190 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004960:	46c0      	nop			; (mov r8, r8)
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
	...

08004968 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800496c:	4b03      	ldr	r3, [pc, #12]	; (800497c <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 800496e:	0018      	movs	r0, r3
 8004970:	f003 f97c 	bl	8007c6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8004974:	46c0      	nop			; (mov r8, r8)
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	46c0      	nop			; (mov r8, r8)
 800497c:	200002d8 	.word	0x200002d8

08004980 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8004984:	4b03      	ldr	r3, [pc, #12]	; (8004994 <ADC1_COMP_IRQHandler+0x14>)
 8004986:	0018      	movs	r0, r3
 8004988:	f002 fcb0 	bl	80072ec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 800498c:	46c0      	nop			; (mov r8, r8)
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	46c0      	nop			; (mov r8, r8)
 8004994:	20000614 	.word	0x20000614

08004998 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800499c:	4b03      	ldr	r3, [pc, #12]	; (80049ac <TIM2_IRQHandler+0x14>)
 800499e:	0018      	movs	r0, r3
 80049a0:	f006 fa42 	bl	800ae28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80049a4:	46c0      	nop			; (mov r8, r8)
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	46c0      	nop			; (mov r8, r8)
 80049ac:	2000029c 	.word	0x2000029c

080049b0 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 80049b4:	4b03      	ldr	r3, [pc, #12]	; (80049c4 <TIM21_IRQHandler+0x14>)
 80049b6:	0018      	movs	r0, r3
 80049b8:	f006 fa36 	bl	800ae28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 80049bc:	46c0      	nop			; (mov r8, r8)
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	46c0      	nop			; (mov r8, r8)
 80049c4:	20000670 	.word	0x20000670

080049c8 <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM22_IRQn 0 */

  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 80049cc:	4b03      	ldr	r3, [pc, #12]	; (80049dc <TIM22_IRQHandler+0x14>)
 80049ce:	0018      	movs	r0, r3
 80049d0:	f006 fa2a 	bl	800ae28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 80049d4:	46c0      	nop			; (mov r8, r8)
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	2000023c 	.word	0x2000023c

080049e0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80049e4:	4b03      	ldr	r3, [pc, #12]	; (80049f4 <SPI2_IRQHandler+0x14>)
 80049e6:	0018      	movs	r0, r3
 80049e8:	f005 fd4c 	bl	800a484 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80049ec:	46c0      	nop			; (mov r8, r8)
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	46c0      	nop			; (mov r8, r8)
 80049f4:	200001a8 	.word	0x200001a8

080049f8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004a00:	4b11      	ldr	r3, [pc, #68]	; (8004a48 <_sbrk+0x50>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d102      	bne.n	8004a0e <_sbrk+0x16>
		heap_end = &end;
 8004a08:	4b0f      	ldr	r3, [pc, #60]	; (8004a48 <_sbrk+0x50>)
 8004a0a:	4a10      	ldr	r2, [pc, #64]	; (8004a4c <_sbrk+0x54>)
 8004a0c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004a0e:	4b0e      	ldr	r3, [pc, #56]	; (8004a48 <_sbrk+0x50>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004a14:	4b0c      	ldr	r3, [pc, #48]	; (8004a48 <_sbrk+0x50>)
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	18d3      	adds	r3, r2, r3
 8004a1c:	466a      	mov	r2, sp
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d907      	bls.n	8004a32 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004a22:	f006 ff95 	bl	800b950 <__errno>
 8004a26:	0003      	movs	r3, r0
 8004a28:	220c      	movs	r2, #12
 8004a2a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	425b      	negs	r3, r3
 8004a30:	e006      	b.n	8004a40 <_sbrk+0x48>
	}

	heap_end += incr;
 8004a32:	4b05      	ldr	r3, [pc, #20]	; (8004a48 <_sbrk+0x50>)
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	18d2      	adds	r2, r2, r3
 8004a3a:	4b03      	ldr	r3, [pc, #12]	; (8004a48 <_sbrk+0x50>)
 8004a3c:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
}
 8004a40:	0018      	movs	r0, r3
 8004a42:	46bd      	mov	sp, r7
 8004a44:	b004      	add	sp, #16
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	20000104 	.word	0x20000104
 8004a4c:	200006b8 	.word	0x200006b8

08004a50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8004a54:	4b17      	ldr	r3, [pc, #92]	; (8004ab4 <SystemInit+0x64>)
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	4b16      	ldr	r3, [pc, #88]	; (8004ab4 <SystemInit+0x64>)
 8004a5a:	2180      	movs	r1, #128	; 0x80
 8004a5c:	0049      	lsls	r1, r1, #1
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8004a62:	4b14      	ldr	r3, [pc, #80]	; (8004ab4 <SystemInit+0x64>)
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	4b13      	ldr	r3, [pc, #76]	; (8004ab4 <SystemInit+0x64>)
 8004a68:	4913      	ldr	r1, [pc, #76]	; (8004ab8 <SystemInit+0x68>)
 8004a6a:	400a      	ands	r2, r1
 8004a6c:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8004a6e:	4b11      	ldr	r3, [pc, #68]	; (8004ab4 <SystemInit+0x64>)
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	4b10      	ldr	r3, [pc, #64]	; (8004ab4 <SystemInit+0x64>)
 8004a74:	4911      	ldr	r1, [pc, #68]	; (8004abc <SystemInit+0x6c>)
 8004a76:	400a      	ands	r2, r1
 8004a78:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004a7a:	4b0e      	ldr	r3, [pc, #56]	; (8004ab4 <SystemInit+0x64>)
 8004a7c:	689a      	ldr	r2, [r3, #8]
 8004a7e:	4b0d      	ldr	r3, [pc, #52]	; (8004ab4 <SystemInit+0x64>)
 8004a80:	2101      	movs	r1, #1
 8004a82:	438a      	bics	r2, r1
 8004a84:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004a86:	4b0b      	ldr	r3, [pc, #44]	; (8004ab4 <SystemInit+0x64>)
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <SystemInit+0x64>)
 8004a8c:	490c      	ldr	r1, [pc, #48]	; (8004ac0 <SystemInit+0x70>)
 8004a8e:	400a      	ands	r2, r1
 8004a90:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8004a92:	4b08      	ldr	r3, [pc, #32]	; (8004ab4 <SystemInit+0x64>)
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	4b07      	ldr	r3, [pc, #28]	; (8004ab4 <SystemInit+0x64>)
 8004a98:	490a      	ldr	r1, [pc, #40]	; (8004ac4 <SystemInit+0x74>)
 8004a9a:	400a      	ands	r2, r1
 8004a9c:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004a9e:	4b05      	ldr	r3, [pc, #20]	; (8004ab4 <SystemInit+0x64>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004aa4:	4b08      	ldr	r3, [pc, #32]	; (8004ac8 <SystemInit+0x78>)
 8004aa6:	2280      	movs	r2, #128	; 0x80
 8004aa8:	0512      	lsls	r2, r2, #20
 8004aaa:	609a      	str	r2, [r3, #8]
#endif
}
 8004aac:	46c0      	nop			; (mov r8, r8)
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	46c0      	nop			; (mov r8, r8)
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	88ff400c 	.word	0x88ff400c
 8004abc:	fef6fff6 	.word	0xfef6fff6
 8004ac0:	fffbffff 	.word	0xfffbffff
 8004ac4:	ff02ffff 	.word	0xff02ffff
 8004ac8:	e000ed00 	.word	0xe000ed00

08004acc <HAL_TIM_PeriodElapsedCallback>:
static uint32_t stopwatchStartMarker = 0;
static uint32_t stopwatchPauseMarker = 0;
static uint8_t motorStateCounter = 0;

// called for a bunch of timers when timer has to circle back (arr->0, 0->arr)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
	// button's timer
	if (htim->Instance == TIM6) {
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a16      	ldr	r2, [pc, #88]	; (8004b34 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d11e      	bne.n	8004b1c <HAL_TIM_PeriodElapsedCallback+0x50>
		// stop timer, renable button interrupts, and clear pending
		HAL_TIM_Base_Stop_IT(htim);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	f006 f82b 	bl	800ab3c <HAL_TIM_Base_Stop_IT>
		HAL_NVIC_ClearPendingIRQ(EXTI2_3_IRQn);
 8004ae6:	2006      	movs	r0, #6
 8004ae8:	f002 ff8a 	bl	8007a00 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 8004aec:	2007      	movs	r0, #7
 8004aee:	f002 ff87 	bl	8007a00 <HAL_NVIC_ClearPendingIRQ>
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON1);
 8004af2:	4b11      	ldr	r3, [pc, #68]	; (8004b38 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004af4:	2202      	movs	r2, #2
 8004af6:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON2);
 8004af8:	4b0f      	ldr	r3, [pc, #60]	; (8004b38 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004afa:	2204      	movs	r2, #4
 8004afc:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON3);
 8004afe:	4b0e      	ldr	r3, [pc, #56]	; (8004b38 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004b00:	2280      	movs	r2, #128	; 0x80
 8004b02:	00d2      	lsls	r2, r2, #3
 8004b04:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON4);
 8004b06:	4b0c      	ldr	r3, [pc, #48]	; (8004b38 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004b08:	2280      	movs	r2, #128	; 0x80
 8004b0a:	0112      	lsls	r2, r2, #4
 8004b0c:	615a      	str	r2, [r3, #20]

		HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8004b0e:	2006      	movs	r0, #6
 8004b10:	f002 ff59 	bl	80079c6 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004b14:	2007      	movs	r0, #7
 8004b16:	f002 ff56 	bl	80079c6 <HAL_NVIC_EnableIRQ>
	// sampler's timer
	else if (htim->Instance == TIM22) {
		// set flag to start ADC sample
		canSampleBattery = 1;
	}
}
 8004b1a:	e007      	b.n	8004b2c <HAL_TIM_PeriodElapsedCallback+0x60>
	else if (htim->Instance == TIM22) {
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a06      	ldr	r2, [pc, #24]	; (8004b3c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d102      	bne.n	8004b2c <HAL_TIM_PeriodElapsedCallback+0x60>
		canSampleBattery = 1;
 8004b26:	4b06      	ldr	r3, [pc, #24]	; (8004b40 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8004b28:	2201      	movs	r2, #1
 8004b2a:	701a      	strb	r2, [r3, #0]
}
 8004b2c:	46c0      	nop			; (mov r8, r8)
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	b002      	add	sp, #8
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	40001000 	.word	0x40001000
 8004b38:	40010400 	.word	0x40010400
 8004b3c:	40011400 	.word	0x40011400
 8004b40:	2000014e 	.word	0x2000014e

08004b44 <HAL_TIM_OC_DelayElapsedCallback>:

// called for a bunch of timers when channel value = counter value
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM21) {
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a46      	ldr	r2, [pc, #280]	; (8004c6c <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d139      	bne.n	8004bca <HAL_TIM_OC_DelayElapsedCallback+0x86>
		// timer's channel
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	7e1b      	ldrb	r3, [r3, #24]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d122      	bne.n	8004ba4 <HAL_TIM_OC_DelayElapsedCallback+0x60>
			updateFace.timer = 1;		// set update screen flag
 8004b5e:	4b44      	ldr	r3, [pc, #272]	; (8004c70 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 8004b60:	2201      	movs	r2, #1
 8004b62:	705a      	strb	r2, [r3, #1]

			// decrement value if non-zero, else set done flag
			if (timerCounter != 1) --timerCounter;
 8004b64:	4b43      	ldr	r3, [pc, #268]	; (8004c74 <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d005      	beq.n	8004b78 <HAL_TIM_OC_DelayElapsedCallback+0x34>
 8004b6c:	4b41      	ldr	r3, [pc, #260]	; (8004c74 <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	1e5a      	subs	r2, r3, #1
 8004b72:	4b40      	ldr	r3, [pc, #256]	; (8004c74 <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8004b74:	601a      	str	r2, [r3, #0]
				stopMotor(htim);
				break;
			default: break;
		}
	}
}
 8004b76:	e074      	b.n	8004c62 <HAL_TIM_OC_DelayElapsedCallback+0x11e>
				--timerCounter;
 8004b78:	4b3e      	ldr	r3, [pc, #248]	; (8004c74 <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	1e5a      	subs	r2, r3, #1
 8004b7e:	4b3d      	ldr	r3, [pc, #244]	; (8004c74 <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8004b80:	601a      	str	r2, [r3, #0]
				isTimerDone = 1;
 8004b82:	4b3d      	ldr	r3, [pc, #244]	; (8004c78 <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 8004b84:	2201      	movs	r2, #1
 8004b86:	701a      	strb	r2, [r3, #0]
				stopTimer(htim);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	f000 f8f0 	bl	8004d70 <stopTimer>
				updateFace.timer = 1;
 8004b90:	4b37      	ldr	r3, [pc, #220]	; (8004c70 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 8004b92:	2201      	movs	r2, #1
 8004b94:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_TogglePin(LED2_PORT, LED2_PIN);
 8004b96:	23a0      	movs	r3, #160	; 0xa0
 8004b98:	05db      	lsls	r3, r3, #23
 8004b9a:	2140      	movs	r1, #64	; 0x40
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	f003 fadc 	bl	800815a <HAL_GPIO_TogglePin>
}
 8004ba2:	e05e      	b.n	8004c62 <HAL_TIM_OC_DelayElapsedCallback+0x11e>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	7e1b      	ldrb	r3, [r3, #24]
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d15a      	bne.n	8004c62 <HAL_TIM_OC_DelayElapsedCallback+0x11e>
			updateFace.stopwatch = 1;
 8004bac:	4b30      	ldr	r3, [pc, #192]	; (8004c70 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 8004bae:	2201      	movs	r2, #1
 8004bb0:	70da      	strb	r2, [r3, #3]
			++stopwatchCounter;
 8004bb2:	4b32      	ldr	r3, [pc, #200]	; (8004c7c <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	4b30      	ldr	r3, [pc, #192]	; (8004c7c <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8004bba:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED2_PORT, LED2_PIN);
 8004bbc:	23a0      	movs	r3, #160	; 0xa0
 8004bbe:	05db      	lsls	r3, r3, #23
 8004bc0:	2140      	movs	r1, #64	; 0x40
 8004bc2:	0018      	movs	r0, r3
 8004bc4:	f003 fac9 	bl	800815a <HAL_GPIO_TogglePin>
}
 8004bc8:	e04b      	b.n	8004c62 <HAL_TIM_OC_DelayElapsedCallback+0x11e>
	else if (htim->Instance == TIM2) {
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	2380      	movs	r3, #128	; 0x80
 8004bd0:	05db      	lsls	r3, r3, #23
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d142      	bne.n	8004c5c <HAL_TIM_OC_DelayElapsedCallback+0x118>
		++motorStateCounter;
 8004bd6:	4b2a      	ldr	r3, [pc, #168]	; (8004c80 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	4b28      	ldr	r3, [pc, #160]	; (8004c80 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8004be0:	701a      	strb	r2, [r3, #0]
		switch(motorStateCounter) {
 8004be2:	4b27      	ldr	r3, [pc, #156]	; (8004c80 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	2b06      	cmp	r3, #6
 8004be8:	d83a      	bhi.n	8004c60 <HAL_TIM_OC_DelayElapsedCallback+0x11c>
 8004bea:	009a      	lsls	r2, r3, #2
 8004bec:	4b25      	ldr	r3, [pc, #148]	; (8004c84 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8004bee:	18d3      	adds	r3, r2, r3
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	469f      	mov	pc, r3
			case 1: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8004bf4:	23a0      	movs	r3, #160	; 0xa0
 8004bf6:	05db      	lsls	r3, r3, #23
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	2110      	movs	r1, #16
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	f003 fa8f 	bl	8008120 <HAL_GPIO_WritePin>
 8004c02:	e02e      	b.n	8004c62 <HAL_TIM_OC_DelayElapsedCallback+0x11e>
			case 2: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET); break;
 8004c04:	23a0      	movs	r3, #160	; 0xa0
 8004c06:	05db      	lsls	r3, r3, #23
 8004c08:	2200      	movs	r2, #0
 8004c0a:	2110      	movs	r1, #16
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	f003 fa87 	bl	8008120 <HAL_GPIO_WritePin>
 8004c12:	e026      	b.n	8004c62 <HAL_TIM_OC_DelayElapsedCallback+0x11e>
			case 3: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8004c14:	23a0      	movs	r3, #160	; 0xa0
 8004c16:	05db      	lsls	r3, r3, #23
 8004c18:	2201      	movs	r2, #1
 8004c1a:	2110      	movs	r1, #16
 8004c1c:	0018      	movs	r0, r3
 8004c1e:	f003 fa7f 	bl	8008120 <HAL_GPIO_WritePin>
 8004c22:	e01e      	b.n	8004c62 <HAL_TIM_OC_DelayElapsedCallback+0x11e>
			case 4: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET); break;
 8004c24:	23a0      	movs	r3, #160	; 0xa0
 8004c26:	05db      	lsls	r3, r3, #23
 8004c28:	2200      	movs	r2, #0
 8004c2a:	2110      	movs	r1, #16
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	f003 fa77 	bl	8008120 <HAL_GPIO_WritePin>
 8004c32:	e016      	b.n	8004c62 <HAL_TIM_OC_DelayElapsedCallback+0x11e>
			case 5: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8004c34:	23a0      	movs	r3, #160	; 0xa0
 8004c36:	05db      	lsls	r3, r3, #23
 8004c38:	2201      	movs	r2, #1
 8004c3a:	2110      	movs	r1, #16
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	f003 fa6f 	bl	8008120 <HAL_GPIO_WritePin>
 8004c42:	e00e      	b.n	8004c62 <HAL_TIM_OC_DelayElapsedCallback+0x11e>
				HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET);
 8004c44:	23a0      	movs	r3, #160	; 0xa0
 8004c46:	05db      	lsls	r3, r3, #23
 8004c48:	2200      	movs	r2, #0
 8004c4a:	2110      	movs	r1, #16
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f003 fa67 	bl	8008120 <HAL_GPIO_WritePin>
				stopMotor(htim);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	0018      	movs	r0, r3
 8004c56:	f000 f989 	bl	8004f6c <stopMotor>
				break;
 8004c5a:	e002      	b.n	8004c62 <HAL_TIM_OC_DelayElapsedCallback+0x11e>
	}
 8004c5c:	46c0      	nop			; (mov r8, r8)
 8004c5e:	e000      	b.n	8004c62 <HAL_TIM_OC_DelayElapsedCallback+0x11e>
			default: break;
 8004c60:	46c0      	nop			; (mov r8, r8)
}
 8004c62:	46c0      	nop			; (mov r8, r8)
 8004c64:	46bd      	mov	sp, r7
 8004c66:	b002      	add	sp, #8
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	46c0      	nop			; (mov r8, r8)
 8004c6c:	40010800 	.word	0x40010800
 8004c70:	20000150 	.word	0x20000150
 8004c74:	20000158 	.word	0x20000158
 8004c78:	2000015c 	.word	0x2000015c
 8004c7c:	200001a4 	.word	0x200001a4
 8004c80:	20000118 	.word	0x20000118
 8004c84:	0800cd98 	.word	0x0800cd98

08004c88 <runTimer>:

// ---- important timer functions  ----
void runTimer(TIM_HandleTypeDef *htim) {
 8004c88:	b590      	push	{r4, r7, lr}
 8004c8a:	b089      	sub	sp, #36	; 0x24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfig = {0};
 8004c90:	2408      	movs	r4, #8
 8004c92:	193b      	adds	r3, r7, r4
 8004c94:	0018      	movs	r0, r3
 8004c96:	2310      	movs	r3, #16
 8004c98:	001a      	movs	r2, r3
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	f006 fe8b 	bl	800b9b6 <memset>
	sConfig.OCMode = TIM_OCMODE_TIMING;
 8004ca0:	193b      	adds	r3, r7, r4
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ca6:	193b      	adds	r3, r7, r4
 8004ca8:	2200      	movs	r2, #0
 8004caa:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 8004cac:	193b      	adds	r3, r7, r4
 8004cae:	2200      	movs	r2, #0
 8004cb0:	60da      	str	r2, [r3, #12]

	// calculating pulse/OC trigger
	if (isTimerPaused == 0) {		// 1st run, hasn't been paused yet
 8004cb2:	4b1f      	ldr	r3, [pc, #124]	; (8004d30 <runTimer+0xa8>)
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d107      	bne.n	8004ccc <runTimer+0x44>
		sConfig.Pulse = htim->Instance->CNT-1;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	1e5a      	subs	r2, r3, #1
 8004cc4:	2308      	movs	r3, #8
 8004cc6:	18fb      	adds	r3, r7, r3
 8004cc8:	605a      	str	r2, [r3, #4]
 8004cca:	e021      	b.n	8004d10 <runTimer+0x88>
	}
	else {		// unpausing
		uint32_t temp = htim->Instance->CNT-1;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	61fb      	str	r3, [r7, #28]

		// count needed to get from pause marker to start marker - basically how many steps it would've taken to get to next cycle
		// shifted to account for negative behavior
		uint32_t diff = ((int)(timerStartMarker-timerPauseMarker)+0x8000) % 0x8000;
 8004cd6:	4b17      	ldr	r3, [pc, #92]	; (8004d34 <runTimer+0xac>)
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	4b17      	ldr	r3, [pc, #92]	; (8004d38 <runTimer+0xb0>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2280      	movs	r2, #128	; 0x80
 8004ce2:	0212      	lsls	r2, r2, #8
 8004ce4:	4694      	mov	ip, r2
 8004ce6:	4463      	add	r3, ip
 8004ce8:	4a14      	ldr	r2, [pc, #80]	; (8004d3c <runTimer+0xb4>)
 8004cea:	4013      	ands	r3, r2
 8004cec:	d503      	bpl.n	8004cf6 <runTimer+0x6e>
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	4a13      	ldr	r2, [pc, #76]	; (8004d40 <runTimer+0xb8>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	61bb      	str	r3, [r7, #24]
		sConfig.Pulse = (temp+diff) % 0x8000;
 8004cf8:	69fa      	ldr	r2, [r7, #28]
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	18d3      	adds	r3, r2, r3
 8004cfe:	045b      	lsls	r3, r3, #17
 8004d00:	0c5a      	lsrs	r2, r3, #17
 8004d02:	2108      	movs	r1, #8
 8004d04:	187b      	adds	r3, r7, r1
 8004d06:	605a      	str	r2, [r3, #4]
		timerStartMarker = sConfig.Pulse;		// set new start marker
 8004d08:	187b      	adds	r3, r7, r1
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	4b09      	ldr	r3, [pc, #36]	; (8004d34 <runTimer+0xac>)
 8004d0e:	601a      	str	r2, [r3, #0]
	}

	HAL_TIM_OC_ConfigChannel(htim, &sConfig, TIM_CHANNEL_1);
 8004d10:	2308      	movs	r3, #8
 8004d12:	18f9      	adds	r1, r7, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	0018      	movs	r0, r3
 8004d1a:	f006 f96d 	bl	800aff8 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_OC_Start_IT(htim, TIM_CHANNEL_1);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2100      	movs	r1, #0
 8004d22:	0018      	movs	r0, r3
 8004d24:	f005 ff60 	bl	800abe8 <HAL_TIM_OC_Start_IT>
}
 8004d28:	46c0      	nop			; (mov r8, r8)
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	b009      	add	sp, #36	; 0x24
 8004d2e:	bd90      	pop	{r4, r7, pc}
 8004d30:	200001a2 	.word	0x200001a2
 8004d34:	20000108 	.word	0x20000108
 8004d38:	2000010c 	.word	0x2000010c
 8004d3c:	80007fff 	.word	0x80007fff
 8004d40:	ffff8000 	.word	0xffff8000

08004d44 <pauseTimer>:

void pauseTimer(TIM_HandleTypeDef *htim) {
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
	// stop timer, but hold marker so you can track milliseconds to next second
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_1);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2100      	movs	r1, #0
 8004d50:	0018      	movs	r0, r3
 8004d52:	f005 ff9b 	bl	800ac8c <HAL_TIM_OC_Stop_IT>
	timerPauseMarker = htim->Instance->CNT-1;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	1e5a      	subs	r2, r3, #1
 8004d5e:	4b03      	ldr	r3, [pc, #12]	; (8004d6c <pauseTimer+0x28>)
 8004d60:	601a      	str	r2, [r3, #0]
}
 8004d62:	46c0      	nop			; (mov r8, r8)
 8004d64:	46bd      	mov	sp, r7
 8004d66:	b002      	add	sp, #8
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	46c0      	nop			; (mov r8, r8)
 8004d6c:	2000010c 	.word	0x2000010c

08004d70 <stopTimer>:

void stopTimer(TIM_HandleTypeDef *htim) {
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
	// clear everything
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_1);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	0018      	movs	r0, r3
 8004d7e:	f005 ff85 	bl	800ac8c <HAL_TIM_OC_Stop_IT>
	timerStartMarker = 0;
 8004d82:	4b05      	ldr	r3, [pc, #20]	; (8004d98 <stopTimer+0x28>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	601a      	str	r2, [r3, #0]
	timerPauseMarker = 0;
 8004d88:	4b04      	ldr	r3, [pc, #16]	; (8004d9c <stopTimer+0x2c>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	601a      	str	r2, [r3, #0]
}
 8004d8e:	46c0      	nop			; (mov r8, r8)
 8004d90:	46bd      	mov	sp, r7
 8004d92:	b002      	add	sp, #8
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	46c0      	nop			; (mov r8, r8)
 8004d98:	20000108 	.word	0x20000108
 8004d9c:	2000010c 	.word	0x2000010c

08004da0 <runStopwatch>:

void runStopwatch(TIM_HandleTypeDef *htim) {
 8004da0:	b590      	push	{r4, r7, lr}
 8004da2:	b089      	sub	sp, #36	; 0x24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfig = {0};
 8004da8:	2408      	movs	r4, #8
 8004daa:	193b      	adds	r3, r7, r4
 8004dac:	0018      	movs	r0, r3
 8004dae:	2310      	movs	r3, #16
 8004db0:	001a      	movs	r2, r3
 8004db2:	2100      	movs	r1, #0
 8004db4:	f006 fdff 	bl	800b9b6 <memset>
	sConfig.OCMode = TIM_OCMODE_TIMING;
 8004db8:	193b      	adds	r3, r7, r4
 8004dba:	2200      	movs	r2, #0
 8004dbc:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004dbe:	193b      	adds	r3, r7, r4
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 8004dc4:	193b      	adds	r3, r7, r4
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	60da      	str	r2, [r3, #12]

	// calculating pulse/OC trigger
	if (isStopwatchPaused == 0) {		// 1st run, hasn't been paused yet
 8004dca:	4b23      	ldr	r3, [pc, #140]	; (8004e58 <runStopwatch+0xb8>)
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10e      	bne.n	8004df2 <runStopwatch+0x52>
		stopwatchCounter = 0;
 8004dd4:	4b21      	ldr	r3, [pc, #132]	; (8004e5c <runStopwatch+0xbc>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	601a      	str	r2, [r3, #0]
		sConfig.Pulse = htim->Instance->CNT-1;		// 32-bit unsigned going into 16-bit unsigned. no need to cast since
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	1e5a      	subs	r2, r3, #1
 8004de2:	2108      	movs	r1, #8
 8004de4:	187b      	adds	r3, r7, r1
 8004de6:	605a      	str	r2, [r3, #4]
													// lower level code will do it for me (cut off upper half)
		stopwatchStartMarker = sConfig.Pulse;		// set new start marker
 8004de8:	187b      	adds	r3, r7, r1
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	4b1c      	ldr	r3, [pc, #112]	; (8004e60 <runStopwatch+0xc0>)
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	e021      	b.n	8004e36 <runStopwatch+0x96>
	}
	else {		// unpausing
		uint32_t temp = htim->Instance->CNT-1;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	61fb      	str	r3, [r7, #28]

		// count needed to get from pause marker to start marker - basically how many steps it would've taken to get to next cycle
		// shifted to account for negative behavior
		uint32_t diff = ((int)(stopwatchStartMarker-stopwatchPauseMarker)+0x8000) % 0x8000;
 8004dfc:	4b18      	ldr	r3, [pc, #96]	; (8004e60 <runStopwatch+0xc0>)
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	4b18      	ldr	r3, [pc, #96]	; (8004e64 <runStopwatch+0xc4>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2280      	movs	r2, #128	; 0x80
 8004e08:	0212      	lsls	r2, r2, #8
 8004e0a:	4694      	mov	ip, r2
 8004e0c:	4463      	add	r3, ip
 8004e0e:	4a16      	ldr	r2, [pc, #88]	; (8004e68 <runStopwatch+0xc8>)
 8004e10:	4013      	ands	r3, r2
 8004e12:	d503      	bpl.n	8004e1c <runStopwatch+0x7c>
 8004e14:	3b01      	subs	r3, #1
 8004e16:	4a15      	ldr	r2, [pc, #84]	; (8004e6c <runStopwatch+0xcc>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	61bb      	str	r3, [r7, #24]
		sConfig.Pulse = (temp+diff) % 0x8000;
 8004e1e:	69fa      	ldr	r2, [r7, #28]
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	18d3      	adds	r3, r2, r3
 8004e24:	045b      	lsls	r3, r3, #17
 8004e26:	0c5a      	lsrs	r2, r3, #17
 8004e28:	2108      	movs	r1, #8
 8004e2a:	187b      	adds	r3, r7, r1
 8004e2c:	605a      	str	r2, [r3, #4]
		stopwatchStartMarker = sConfig.Pulse;		// set new start marker
 8004e2e:	187b      	adds	r3, r7, r1
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <runStopwatch+0xc0>)
 8004e34:	601a      	str	r2, [r3, #0]
	}

	HAL_TIM_OC_ConfigChannel(htim, &sConfig, TIM_CHANNEL_2);
 8004e36:	2308      	movs	r3, #8
 8004e38:	18f9      	adds	r1, r7, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2204      	movs	r2, #4
 8004e3e:	0018      	movs	r0, r3
 8004e40:	f006 f8da 	bl	800aff8 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_OC_Start_IT(htim, TIM_CHANNEL_2);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2104      	movs	r1, #4
 8004e48:	0018      	movs	r0, r3
 8004e4a:	f005 fecd 	bl	800abe8 <HAL_TIM_OC_Start_IT>
}
 8004e4e:	46c0      	nop			; (mov r8, r8)
 8004e50:	46bd      	mov	sp, r7
 8004e52:	b009      	add	sp, #36	; 0x24
 8004e54:	bd90      	pop	{r4, r7, pc}
 8004e56:	46c0      	nop			; (mov r8, r8)
 8004e58:	200001a1 	.word	0x200001a1
 8004e5c:	200001a4 	.word	0x200001a4
 8004e60:	20000110 	.word	0x20000110
 8004e64:	20000114 	.word	0x20000114
 8004e68:	80007fff 	.word	0x80007fff
 8004e6c:	ffff8000 	.word	0xffff8000

08004e70 <pauseStopwatch>:

void pauseStopwatch(TIM_HandleTypeDef *htim) {
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
	// save marker to hold milliseconds
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_2);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2104      	movs	r1, #4
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	f005 ff05 	bl	800ac8c <HAL_TIM_OC_Stop_IT>
	stopwatchPauseMarker = htim->Instance->CNT;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e88:	4b02      	ldr	r3, [pc, #8]	; (8004e94 <pauseStopwatch+0x24>)
 8004e8a:	601a      	str	r2, [r3, #0]
}
 8004e8c:	46c0      	nop			; (mov r8, r8)
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	b002      	add	sp, #8
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	20000114 	.word	0x20000114

08004e98 <clearStopwatch>:

void clearStopwatch(TIM_HandleTypeDef *htim) {
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
	// clear everything
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_2);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2104      	movs	r1, #4
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	f005 fef1 	bl	800ac8c <HAL_TIM_OC_Stop_IT>
	stopwatchPauseMarker = htim->Instance->CNT;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004eb0:	4b06      	ldr	r3, [pc, #24]	; (8004ecc <clearStopwatch+0x34>)
 8004eb2:	601a      	str	r2, [r3, #0]
	stopwatchStartMarker = htim->Instance->CNT;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004eba:	4b05      	ldr	r3, [pc, #20]	; (8004ed0 <clearStopwatch+0x38>)
 8004ebc:	601a      	str	r2, [r3, #0]

	stopwatchCounter = 0;
 8004ebe:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <clearStopwatch+0x3c>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	601a      	str	r2, [r3, #0]
}
 8004ec4:	46c0      	nop			; (mov r8, r8)
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	b002      	add	sp, #8
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	20000114 	.word	0x20000114
 8004ed0:	20000110 	.word	0x20000110
 8004ed4:	200001a4 	.word	0x200001a4

08004ed8 <runADCSampler>:
void stopTimerStopwatchBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Stop(htim);}
// ---- end of important timer functions ----

// ---- motor and other things that use timer ----
// uses LSE timer TIM22
void runADCSampler(TIM_HandleTypeDef *htim) {
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(htim);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	f005 fe08 	bl	800aaf8 <HAL_TIM_Base_Start_IT>
	canSampleBattery = 1;			// set flag to let ADC run at the start
 8004ee8:	4b03      	ldr	r3, [pc, #12]	; (8004ef8 <runADCSampler+0x20>)
 8004eea:	2201      	movs	r2, #1
 8004eec:	701a      	strb	r2, [r3, #0]
}
 8004eee:	46c0      	nop			; (mov r8, r8)
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	b002      	add	sp, #8
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	46c0      	nop			; (mov r8, r8)
 8004ef8:	2000014e 	.word	0x2000014e

08004efc <runMotor>:

// running motor for vibration. runs for a finite amount of time
// uses LSE timer TIM2 CH2
void runMotor(TIM_HandleTypeDef *htim) {
 8004efc:	b590      	push	{r4, r7, lr}
 8004efe:	b087      	sub	sp, #28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfig = {0};
 8004f04:	2408      	movs	r4, #8
 8004f06:	193b      	adds	r3, r7, r4
 8004f08:	0018      	movs	r0, r3
 8004f0a:	2310      	movs	r3, #16
 8004f0c:	001a      	movs	r2, r3
 8004f0e:	2100      	movs	r1, #0
 8004f10:	f006 fd51 	bl	800b9b6 <memset>
	sConfig.OCMode = TIM_OCMODE_TIMING;
 8004f14:	0021      	movs	r1, r4
 8004f16:	187b      	adds	r3, r7, r1
 8004f18:	2200      	movs	r2, #0
 8004f1a:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f1c:	187b      	adds	r3, r7, r1
 8004f1e:	2200      	movs	r2, #0
 8004f20:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 8004f22:	187b      	adds	r3, r7, r1
 8004f24:	2200      	movs	r2, #0
 8004f26:	60da      	str	r2, [r3, #12]
	sConfig.Pulse = htim->Instance->CNT;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f2e:	000c      	movs	r4, r1
 8004f30:	187b      	adds	r3, r7, r1
 8004f32:	605a      	str	r2, [r3, #4]

	HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET);
 8004f34:	23a0      	movs	r3, #160	; 0xa0
 8004f36:	05db      	lsls	r3, r3, #23
 8004f38:	2201      	movs	r2, #1
 8004f3a:	2110      	movs	r1, #16
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	f003 f8ef 	bl	8008120 <HAL_GPIO_WritePin>
	HAL_TIM_OC_ConfigChannel(htim, &sConfig, TIM_CHANNEL_2);
 8004f42:	0021      	movs	r1, r4
 8004f44:	1879      	adds	r1, r7, r1
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2204      	movs	r2, #4
 8004f4a:	0018      	movs	r0, r3
 8004f4c:	f006 f854 	bl	800aff8 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_OC_Start_IT(htim, TIM_CHANNEL_2);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2104      	movs	r1, #4
 8004f54:	0018      	movs	r0, r3
 8004f56:	f005 fe47 	bl	800abe8 <HAL_TIM_OC_Start_IT>

	motorStateCounter = 0;
 8004f5a:	4b03      	ldr	r3, [pc, #12]	; (8004f68 <runMotor+0x6c>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	701a      	strb	r2, [r3, #0]
}
 8004f60:	46c0      	nop			; (mov r8, r8)
 8004f62:	46bd      	mov	sp, r7
 8004f64:	b007      	add	sp, #28
 8004f66:	bd90      	pop	{r4, r7, pc}
 8004f68:	20000118 	.word	0x20000118

08004f6c <stopMotor>:

void stopMotor(TIM_HandleTypeDef *htim) {
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_2);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2104      	movs	r1, #4
 8004f78:	0018      	movs	r0, r3
 8004f7a:	f005 fe87 	bl	800ac8c <HAL_TIM_OC_Stop_IT>
	motorStateCounter = 0;
 8004f7e:	4b03      	ldr	r3, [pc, #12]	; (8004f8c <stopMotor+0x20>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	701a      	strb	r2, [r3, #0]
}
 8004f84:	46c0      	nop			; (mov r8, r8)
 8004f86:	46bd      	mov	sp, r7
 8004f88:	b002      	add	sp, #8
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	20000118 	.word	0x20000118

08004f90 <setDisplayBacklight>:
void runMotorBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Start(htim);}
void stopMotorBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Stop(htim);}

// should change display brightness by changing PWM pulse width. input should be from 0-100
// uses 32MHz timer TIM3 CH1
void setDisplayBacklight(uint8_t intensity, TIM_HandleTypeDef *htim) {
 8004f90:	b5b0      	push	{r4, r5, r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	0002      	movs	r2, r0
 8004f98:	6039      	str	r1, [r7, #0]
 8004f9a:	1dfb      	adds	r3, r7, #7
 8004f9c:	701a      	strb	r2, [r3, #0]
	if (intensity > 100) return;		// bounds checking
 8004f9e:	1dfb      	adds	r3, r7, #7
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	2b64      	cmp	r3, #100	; 0x64
 8004fa4:	d83a      	bhi.n	800501c <setDisplayBacklight+0x8c>

	TIM_OC_InitTypeDef sConfig = {0};
 8004fa6:	2508      	movs	r5, #8
 8004fa8:	197b      	adds	r3, r7, r5
 8004faa:	0018      	movs	r0, r3
 8004fac:	2310      	movs	r3, #16
 8004fae:	001a      	movs	r2, r3
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	f006 fd00 	bl	800b9b6 <memset>
	sConfig.OCMode = TIM_OCMODE_PWM1;
 8004fb6:	197b      	adds	r3, r7, r5
 8004fb8:	2260      	movs	r2, #96	; 0x60
 8004fba:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004fbc:	197b      	adds	r3, r7, r5
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 8004fc2:	197b      	adds	r3, r7, r5
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	60da      	str	r2, [r3, #12]
	sConfig.Pulse = (htim->Instance->ARR-1)*((float)intensity/100);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	0018      	movs	r0, r3
 8004fd2:	f7fb ff57 	bl	8000e84 <__aeabi_ui2f>
 8004fd6:	1c04      	adds	r4, r0, #0
 8004fd8:	1dfb      	adds	r3, r7, #7
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	0018      	movs	r0, r3
 8004fde:	f7fb ff51 	bl	8000e84 <__aeabi_ui2f>
 8004fe2:	1c03      	adds	r3, r0, #0
 8004fe4:	490f      	ldr	r1, [pc, #60]	; (8005024 <setDisplayBacklight+0x94>)
 8004fe6:	1c18      	adds	r0, r3, #0
 8004fe8:	f7fb fa5e 	bl	80004a8 <__aeabi_fdiv>
 8004fec:	1c03      	adds	r3, r0, #0
 8004fee:	1c19      	adds	r1, r3, #0
 8004ff0:	1c20      	adds	r0, r4, #0
 8004ff2:	f7fb fc31 	bl	8000858 <__aeabi_fmul>
 8004ff6:	1c03      	adds	r3, r0, #0
 8004ff8:	1c18      	adds	r0, r3, #0
 8004ffa:	f7fb fa3d 	bl	8000478 <__aeabi_f2uiz>
 8004ffe:	0002      	movs	r2, r0
 8005000:	197b      	adds	r3, r7, r5
 8005002:	605a      	str	r2, [r3, #4]

	HAL_TIM_PWM_ConfigChannel(htim, &sConfig, TIM_CHANNEL_1);
 8005004:	1979      	adds	r1, r7, r5
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	2200      	movs	r2, #0
 800500a:	0018      	movs	r0, r3
 800500c:	f006 f842 	bl	800b094 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	2100      	movs	r1, #0
 8005014:	0018      	movs	r0, r3
 8005016:	f005 febf 	bl	800ad98 <HAL_TIM_PWM_Start>
 800501a:	e000      	b.n	800501e <setDisplayBacklight+0x8e>
	if (intensity > 100) return;		// bounds checking
 800501c:	46c0      	nop			; (mov r8, r8)
}
 800501e:	46bd      	mov	sp, r7
 8005020:	b006      	add	sp, #24
 8005022:	bdb0      	pop	{r4, r5, r7, pc}
 8005024:	42c80000 	.word	0x42c80000

08005028 <stopDisplayBacklight>:

void stopDisplayBacklight(TIM_HandleTypeDef *htim) {
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
	// stop pwm
	HAL_TIM_PWM_Stop(htim, TIM_CHANNEL_1);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2100      	movs	r1, #0
 8005034:	0018      	movs	r0, r3
 8005036:	f005 fed1 	bl	800addc <HAL_TIM_PWM_Stop>
}
 800503a:	46c0      	nop			; (mov r8, r8)
 800503c:	46bd      	mov	sp, r7
 800503e:	b002      	add	sp, #8
 8005040:	bd80      	pop	{r7, pc}
	...

08005044 <HAL_GPIO_EXTI_Callback>:
	"Nov",
	"Dec"
};

// callback for button interrupts.
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	0002      	movs	r2, r0
 800504c:	1dbb      	adds	r3, r7, #6
 800504e:	801a      	strh	r2, [r3, #0]
//	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
//	HAL_NVIC_ClearPendingIRQ(EXTI2_3_IRQn);
//	HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);

	// updates flags
	if (GPIO_Pin == BUTTON1) buttons.is1Pressed = 1;
 8005050:	1dbb      	adds	r3, r7, #6
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	2b02      	cmp	r3, #2
 8005056:	d102      	bne.n	800505e <HAL_GPIO_EXTI_Callback+0x1a>
 8005058:	4b0f      	ldr	r3, [pc, #60]	; (8005098 <HAL_GPIO_EXTI_Callback+0x54>)
 800505a:	2201      	movs	r2, #1
 800505c:	701a      	strb	r2, [r3, #0]
	if (GPIO_Pin == BUTTON2) buttons.is2Pressed = 1;
 800505e:	1dbb      	adds	r3, r7, #6
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	2b04      	cmp	r3, #4
 8005064:	d102      	bne.n	800506c <HAL_GPIO_EXTI_Callback+0x28>
 8005066:	4b0c      	ldr	r3, [pc, #48]	; (8005098 <HAL_GPIO_EXTI_Callback+0x54>)
 8005068:	2201      	movs	r2, #1
 800506a:	705a      	strb	r2, [r3, #1]
	if (GPIO_Pin == BUTTON3) buttons.is3Pressed = 1;
 800506c:	1dbb      	adds	r3, r7, #6
 800506e:	881a      	ldrh	r2, [r3, #0]
 8005070:	2380      	movs	r3, #128	; 0x80
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	429a      	cmp	r2, r3
 8005076:	d102      	bne.n	800507e <HAL_GPIO_EXTI_Callback+0x3a>
 8005078:	4b07      	ldr	r3, [pc, #28]	; (8005098 <HAL_GPIO_EXTI_Callback+0x54>)
 800507a:	2201      	movs	r2, #1
 800507c:	709a      	strb	r2, [r3, #2]
	if (GPIO_Pin == BUTTON4) buttons.is4Pressed = 1;
 800507e:	1dbb      	adds	r3, r7, #6
 8005080:	881a      	ldrh	r2, [r3, #0]
 8005082:	2380      	movs	r3, #128	; 0x80
 8005084:	011b      	lsls	r3, r3, #4
 8005086:	429a      	cmp	r2, r3
 8005088:	d102      	bne.n	8005090 <HAL_GPIO_EXTI_Callback+0x4c>
 800508a:	4b03      	ldr	r3, [pc, #12]	; (8005098 <HAL_GPIO_EXTI_Callback+0x54>)
 800508c:	2201      	movs	r2, #1
 800508e:	70da      	strb	r2, [r3, #3]

	// runs timer for software debouncing delay
//	HAL_TIM_Base_Start_IT(&htim6);
}
 8005090:	46c0      	nop			; (mov r8, r8)
 8005092:	46bd      	mov	sp, r7
 8005094:	b002      	add	sp, #8
 8005096:	bd80      	pop	{r7, pc}
 8005098:	2000019c 	.word	0x2000019c

0800509c <updateState>:

//
void updateState(RTC_HandleTypeDef *hrtc, TIM_HandleTypeDef *timerStopwatchTim, TIM_HandleTypeDef *motorBacklightTim, TIM_HandleTypeDef *buttonTim, SPI_HandleTypeDef *hspi) {
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
 80050a8:	603b      	str	r3, [r7, #0]
	if (buttons.is1Pressed || buttons.is2Pressed || buttons.is3Pressed || buttons.is4Pressed) {
 80050aa:	4bbf      	ldr	r3, [pc, #764]	; (80053a8 <updateState+0x30c>)
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10f      	bne.n	80050d4 <updateState+0x38>
 80050b4:	4bbc      	ldr	r3, [pc, #752]	; (80053a8 <updateState+0x30c>)
 80050b6:	785b      	ldrb	r3, [r3, #1]
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10a      	bne.n	80050d4 <updateState+0x38>
 80050be:	4bba      	ldr	r3, [pc, #744]	; (80053a8 <updateState+0x30c>)
 80050c0:	789b      	ldrb	r3, [r3, #2]
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d105      	bne.n	80050d4 <updateState+0x38>
 80050c8:	4bb7      	ldr	r3, [pc, #732]	; (80053a8 <updateState+0x30c>)
 80050ca:	78db      	ldrb	r3, [r3, #3]
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d100      	bne.n	80050d4 <updateState+0x38>
 80050d2:	e1ab      	b.n	800542c <updateState+0x390>
		// button 1 changes the face on screen.
		if (buttons.is1Pressed) {
 80050d4:	4bb4      	ldr	r3, [pc, #720]	; (80053a8 <updateState+0x30c>)
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d02d      	beq.n	800513a <updateState+0x9e>
			isFaceBeingChanged = 1;
 80050de:	4bb3      	ldr	r3, [pc, #716]	; (80053ac <updateState+0x310>)
 80050e0:	2201      	movs	r2, #1
 80050e2:	701a      	strb	r2, [r3, #0]
			faceOnDisplay = (faceOnDisplay + 1) % NUM_FACES;
 80050e4:	4bb2      	ldr	r3, [pc, #712]	; (80053b0 <updateState+0x314>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	3301      	adds	r3, #1
 80050ea:	4ab2      	ldr	r2, [pc, #712]	; (80053b4 <updateState+0x318>)
 80050ec:	4013      	ands	r3, r2
 80050ee:	d504      	bpl.n	80050fa <updateState+0x5e>
 80050f0:	3b01      	subs	r3, #1
 80050f2:	2204      	movs	r2, #4
 80050f4:	4252      	negs	r2, r2
 80050f6:	4313      	orrs	r3, r2
 80050f8:	3301      	adds	r3, #1
 80050fa:	b2da      	uxtb	r2, r3
 80050fc:	4bac      	ldr	r3, [pc, #688]	; (80053b0 <updateState+0x314>)
 80050fe:	701a      	strb	r2, [r3, #0]
			switch (faceOnDisplay) {
 8005100:	4bab      	ldr	r3, [pc, #684]	; (80053b0 <updateState+0x314>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d00c      	beq.n	8005122 <updateState+0x86>
 8005108:	dc02      	bgt.n	8005110 <updateState+0x74>
 800510a:	2b00      	cmp	r3, #0
 800510c:	d005      	beq.n	800511a <updateState+0x7e>
				case faceClock: updateFace.clock = 1; break;
				case faceTimer: updateFace.timer = 1; break;
				case faceAlarm: updateFace.alarm = 1; break;
				case faceStopwatch: updateFace.stopwatch = 1; break;
				default: break;
 800510e:	e015      	b.n	800513c <updateState+0xa0>
			switch (faceOnDisplay) {
 8005110:	2b02      	cmp	r3, #2
 8005112:	d00a      	beq.n	800512a <updateState+0x8e>
 8005114:	2b03      	cmp	r3, #3
 8005116:	d00c      	beq.n	8005132 <updateState+0x96>
				default: break;
 8005118:	e010      	b.n	800513c <updateState+0xa0>
				case faceClock: updateFace.clock = 1; break;
 800511a:	4ba7      	ldr	r3, [pc, #668]	; (80053b8 <updateState+0x31c>)
 800511c:	2201      	movs	r2, #1
 800511e:	701a      	strb	r2, [r3, #0]
 8005120:	e00c      	b.n	800513c <updateState+0xa0>
				case faceTimer: updateFace.timer = 1; break;
 8005122:	4ba5      	ldr	r3, [pc, #660]	; (80053b8 <updateState+0x31c>)
 8005124:	2201      	movs	r2, #1
 8005126:	705a      	strb	r2, [r3, #1]
 8005128:	e008      	b.n	800513c <updateState+0xa0>
				case faceAlarm: updateFace.alarm = 1; break;
 800512a:	4ba3      	ldr	r3, [pc, #652]	; (80053b8 <updateState+0x31c>)
 800512c:	2201      	movs	r2, #1
 800512e:	709a      	strb	r2, [r3, #2]
 8005130:	e004      	b.n	800513c <updateState+0xa0>
				case faceStopwatch: updateFace.stopwatch = 1; break;
 8005132:	4ba1      	ldr	r3, [pc, #644]	; (80053b8 <updateState+0x31c>)
 8005134:	2201      	movs	r2, #1
 8005136:	70da      	strb	r2, [r3, #3]
 8005138:	e000      	b.n	800513c <updateState+0xa0>
			}
		}
 800513a:	46c0      	nop			; (mov r8, r8)

		// button combo: press 2 and 3 alternatively 5 times to reinit display.
		// needed since screen often turns white when its power supply is rustled, and there's no way to show the information
		static uint8_t s = 0;
		switch(s) {
 800513c:	4b9f      	ldr	r3, [pc, #636]	; (80053bc <updateState+0x320>)
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	2b09      	cmp	r3, #9
 8005142:	d900      	bls.n	8005146 <updateState+0xaa>
 8005144:	e11b      	b.n	800537e <updateState+0x2e2>
 8005146:	009a      	lsls	r2, r3, #2
 8005148:	4b9d      	ldr	r3, [pc, #628]	; (80053c0 <updateState+0x324>)
 800514a:	18d3      	adds	r3, r2, r3
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	469f      	mov	pc, r3
			case 0:	if (buttons.is2Pressed) s++; break;
 8005150:	4b95      	ldr	r3, [pc, #596]	; (80053a8 <updateState+0x30c>)
 8005152:	785b      	ldrb	r3, [r3, #1]
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d100      	bne.n	800515c <updateState+0xc0>
 800515a:	e112      	b.n	8005382 <updateState+0x2e6>
 800515c:	4b97      	ldr	r3, [pc, #604]	; (80053bc <updateState+0x320>)
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	3301      	adds	r3, #1
 8005162:	b2da      	uxtb	r2, r3
 8005164:	4b95      	ldr	r3, [pc, #596]	; (80053bc <updateState+0x320>)
 8005166:	701a      	strb	r2, [r3, #0]
 8005168:	e10b      	b.n	8005382 <updateState+0x2e6>
			case 1: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 800516a:	4b8f      	ldr	r3, [pc, #572]	; (80053a8 <updateState+0x30c>)
 800516c:	789b      	ldrb	r3, [r3, #2]
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	d006      	beq.n	8005182 <updateState+0xe6>
 8005174:	4b91      	ldr	r3, [pc, #580]	; (80053bc <updateState+0x320>)
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	3301      	adds	r3, #1
 800517a:	b2da      	uxtb	r2, r3
 800517c:	4b8f      	ldr	r3, [pc, #572]	; (80053bc <updateState+0x320>)
 800517e:	701a      	strb	r2, [r3, #0]
 8005180:	e101      	b.n	8005386 <updateState+0x2ea>
 8005182:	4b89      	ldr	r3, [pc, #548]	; (80053a8 <updateState+0x30c>)
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10a      	bne.n	80051a2 <updateState+0x106>
 800518c:	4b86      	ldr	r3, [pc, #536]	; (80053a8 <updateState+0x30c>)
 800518e:	785b      	ldrb	r3, [r3, #1]
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d105      	bne.n	80051a2 <updateState+0x106>
 8005196:	4b84      	ldr	r3, [pc, #528]	; (80053a8 <updateState+0x30c>)
 8005198:	78db      	ldrb	r3, [r3, #3]
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	d100      	bne.n	80051a2 <updateState+0x106>
 80051a0:	e0f1      	b.n	8005386 <updateState+0x2ea>
 80051a2:	4b86      	ldr	r3, [pc, #536]	; (80053bc <updateState+0x320>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	701a      	strb	r2, [r3, #0]
 80051a8:	e0ed      	b.n	8005386 <updateState+0x2ea>
			case 2: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 80051aa:	4b7f      	ldr	r3, [pc, #508]	; (80053a8 <updateState+0x30c>)
 80051ac:	785b      	ldrb	r3, [r3, #1]
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d006      	beq.n	80051c2 <updateState+0x126>
 80051b4:	4b81      	ldr	r3, [pc, #516]	; (80053bc <updateState+0x320>)
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	3301      	adds	r3, #1
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	4b7f      	ldr	r3, [pc, #508]	; (80053bc <updateState+0x320>)
 80051be:	701a      	strb	r2, [r3, #0]
 80051c0:	e0e3      	b.n	800538a <updateState+0x2ee>
 80051c2:	4b79      	ldr	r3, [pc, #484]	; (80053a8 <updateState+0x30c>)
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10a      	bne.n	80051e2 <updateState+0x146>
 80051cc:	4b76      	ldr	r3, [pc, #472]	; (80053a8 <updateState+0x30c>)
 80051ce:	789b      	ldrb	r3, [r3, #2]
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d105      	bne.n	80051e2 <updateState+0x146>
 80051d6:	4b74      	ldr	r3, [pc, #464]	; (80053a8 <updateState+0x30c>)
 80051d8:	78db      	ldrb	r3, [r3, #3]
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d100      	bne.n	80051e2 <updateState+0x146>
 80051e0:	e0d3      	b.n	800538a <updateState+0x2ee>
 80051e2:	4b76      	ldr	r3, [pc, #472]	; (80053bc <updateState+0x320>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	701a      	strb	r2, [r3, #0]
 80051e8:	e0cf      	b.n	800538a <updateState+0x2ee>
			case 3: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 80051ea:	4b6f      	ldr	r3, [pc, #444]	; (80053a8 <updateState+0x30c>)
 80051ec:	789b      	ldrb	r3, [r3, #2]
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d006      	beq.n	8005202 <updateState+0x166>
 80051f4:	4b71      	ldr	r3, [pc, #452]	; (80053bc <updateState+0x320>)
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	3301      	adds	r3, #1
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	4b6f      	ldr	r3, [pc, #444]	; (80053bc <updateState+0x320>)
 80051fe:	701a      	strb	r2, [r3, #0]
 8005200:	e0c5      	b.n	800538e <updateState+0x2f2>
 8005202:	4b69      	ldr	r3, [pc, #420]	; (80053a8 <updateState+0x30c>)
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10a      	bne.n	8005222 <updateState+0x186>
 800520c:	4b66      	ldr	r3, [pc, #408]	; (80053a8 <updateState+0x30c>)
 800520e:	785b      	ldrb	r3, [r3, #1]
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d105      	bne.n	8005222 <updateState+0x186>
 8005216:	4b64      	ldr	r3, [pc, #400]	; (80053a8 <updateState+0x30c>)
 8005218:	78db      	ldrb	r3, [r3, #3]
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d100      	bne.n	8005222 <updateState+0x186>
 8005220:	e0b5      	b.n	800538e <updateState+0x2f2>
 8005222:	4b66      	ldr	r3, [pc, #408]	; (80053bc <updateState+0x320>)
 8005224:	2200      	movs	r2, #0
 8005226:	701a      	strb	r2, [r3, #0]
 8005228:	e0b1      	b.n	800538e <updateState+0x2f2>
			case 4: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 800522a:	4b5f      	ldr	r3, [pc, #380]	; (80053a8 <updateState+0x30c>)
 800522c:	785b      	ldrb	r3, [r3, #1]
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b00      	cmp	r3, #0
 8005232:	d006      	beq.n	8005242 <updateState+0x1a6>
 8005234:	4b61      	ldr	r3, [pc, #388]	; (80053bc <updateState+0x320>)
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	3301      	adds	r3, #1
 800523a:	b2da      	uxtb	r2, r3
 800523c:	4b5f      	ldr	r3, [pc, #380]	; (80053bc <updateState+0x320>)
 800523e:	701a      	strb	r2, [r3, #0]
 8005240:	e0a7      	b.n	8005392 <updateState+0x2f6>
 8005242:	4b59      	ldr	r3, [pc, #356]	; (80053a8 <updateState+0x30c>)
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b00      	cmp	r3, #0
 800524a:	d10a      	bne.n	8005262 <updateState+0x1c6>
 800524c:	4b56      	ldr	r3, [pc, #344]	; (80053a8 <updateState+0x30c>)
 800524e:	789b      	ldrb	r3, [r3, #2]
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d105      	bne.n	8005262 <updateState+0x1c6>
 8005256:	4b54      	ldr	r3, [pc, #336]	; (80053a8 <updateState+0x30c>)
 8005258:	78db      	ldrb	r3, [r3, #3]
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b00      	cmp	r3, #0
 800525e:	d100      	bne.n	8005262 <updateState+0x1c6>
 8005260:	e097      	b.n	8005392 <updateState+0x2f6>
 8005262:	4b56      	ldr	r3, [pc, #344]	; (80053bc <updateState+0x320>)
 8005264:	2200      	movs	r2, #0
 8005266:	701a      	strb	r2, [r3, #0]
 8005268:	e093      	b.n	8005392 <updateState+0x2f6>
			case 5: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 800526a:	4b4f      	ldr	r3, [pc, #316]	; (80053a8 <updateState+0x30c>)
 800526c:	789b      	ldrb	r3, [r3, #2]
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	d006      	beq.n	8005282 <updateState+0x1e6>
 8005274:	4b51      	ldr	r3, [pc, #324]	; (80053bc <updateState+0x320>)
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	3301      	adds	r3, #1
 800527a:	b2da      	uxtb	r2, r3
 800527c:	4b4f      	ldr	r3, [pc, #316]	; (80053bc <updateState+0x320>)
 800527e:	701a      	strb	r2, [r3, #0]
 8005280:	e089      	b.n	8005396 <updateState+0x2fa>
 8005282:	4b49      	ldr	r3, [pc, #292]	; (80053a8 <updateState+0x30c>)
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10a      	bne.n	80052a2 <updateState+0x206>
 800528c:	4b46      	ldr	r3, [pc, #280]	; (80053a8 <updateState+0x30c>)
 800528e:	785b      	ldrb	r3, [r3, #1]
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d105      	bne.n	80052a2 <updateState+0x206>
 8005296:	4b44      	ldr	r3, [pc, #272]	; (80053a8 <updateState+0x30c>)
 8005298:	78db      	ldrb	r3, [r3, #3]
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d100      	bne.n	80052a2 <updateState+0x206>
 80052a0:	e079      	b.n	8005396 <updateState+0x2fa>
 80052a2:	4b46      	ldr	r3, [pc, #280]	; (80053bc <updateState+0x320>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	701a      	strb	r2, [r3, #0]
 80052a8:	e075      	b.n	8005396 <updateState+0x2fa>
			case 6: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 80052aa:	4b3f      	ldr	r3, [pc, #252]	; (80053a8 <updateState+0x30c>)
 80052ac:	785b      	ldrb	r3, [r3, #1]
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d006      	beq.n	80052c2 <updateState+0x226>
 80052b4:	4b41      	ldr	r3, [pc, #260]	; (80053bc <updateState+0x320>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	3301      	adds	r3, #1
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	4b3f      	ldr	r3, [pc, #252]	; (80053bc <updateState+0x320>)
 80052be:	701a      	strb	r2, [r3, #0]
 80052c0:	e06b      	b.n	800539a <updateState+0x2fe>
 80052c2:	4b39      	ldr	r3, [pc, #228]	; (80053a8 <updateState+0x30c>)
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d109      	bne.n	80052e0 <updateState+0x244>
 80052cc:	4b36      	ldr	r3, [pc, #216]	; (80053a8 <updateState+0x30c>)
 80052ce:	789b      	ldrb	r3, [r3, #2]
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d104      	bne.n	80052e0 <updateState+0x244>
 80052d6:	4b34      	ldr	r3, [pc, #208]	; (80053a8 <updateState+0x30c>)
 80052d8:	78db      	ldrb	r3, [r3, #3]
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d05c      	beq.n	800539a <updateState+0x2fe>
 80052e0:	4b36      	ldr	r3, [pc, #216]	; (80053bc <updateState+0x320>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	701a      	strb	r2, [r3, #0]
 80052e6:	e058      	b.n	800539a <updateState+0x2fe>
			case 7: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 80052e8:	4b2f      	ldr	r3, [pc, #188]	; (80053a8 <updateState+0x30c>)
 80052ea:	789b      	ldrb	r3, [r3, #2]
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d006      	beq.n	8005300 <updateState+0x264>
 80052f2:	4b32      	ldr	r3, [pc, #200]	; (80053bc <updateState+0x320>)
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	3301      	adds	r3, #1
 80052f8:	b2da      	uxtb	r2, r3
 80052fa:	4b30      	ldr	r3, [pc, #192]	; (80053bc <updateState+0x320>)
 80052fc:	701a      	strb	r2, [r3, #0]
 80052fe:	e04e      	b.n	800539e <updateState+0x302>
 8005300:	4b29      	ldr	r3, [pc, #164]	; (80053a8 <updateState+0x30c>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d109      	bne.n	800531e <updateState+0x282>
 800530a:	4b27      	ldr	r3, [pc, #156]	; (80053a8 <updateState+0x30c>)
 800530c:	785b      	ldrb	r3, [r3, #1]
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b00      	cmp	r3, #0
 8005312:	d104      	bne.n	800531e <updateState+0x282>
 8005314:	4b24      	ldr	r3, [pc, #144]	; (80053a8 <updateState+0x30c>)
 8005316:	78db      	ldrb	r3, [r3, #3]
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d03f      	beq.n	800539e <updateState+0x302>
 800531e:	4b27      	ldr	r3, [pc, #156]	; (80053bc <updateState+0x320>)
 8005320:	2200      	movs	r2, #0
 8005322:	701a      	strb	r2, [r3, #0]
 8005324:	e03b      	b.n	800539e <updateState+0x302>
			case 8: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8005326:	4b20      	ldr	r3, [pc, #128]	; (80053a8 <updateState+0x30c>)
 8005328:	785b      	ldrb	r3, [r3, #1]
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	d006      	beq.n	800533e <updateState+0x2a2>
 8005330:	4b22      	ldr	r3, [pc, #136]	; (80053bc <updateState+0x320>)
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	3301      	adds	r3, #1
 8005336:	b2da      	uxtb	r2, r3
 8005338:	4b20      	ldr	r3, [pc, #128]	; (80053bc <updateState+0x320>)
 800533a:	701a      	strb	r2, [r3, #0]
 800533c:	e031      	b.n	80053a2 <updateState+0x306>
 800533e:	4b1a      	ldr	r3, [pc, #104]	; (80053a8 <updateState+0x30c>)
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b00      	cmp	r3, #0
 8005346:	d109      	bne.n	800535c <updateState+0x2c0>
 8005348:	4b17      	ldr	r3, [pc, #92]	; (80053a8 <updateState+0x30c>)
 800534a:	789b      	ldrb	r3, [r3, #2]
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d104      	bne.n	800535c <updateState+0x2c0>
 8005352:	4b15      	ldr	r3, [pc, #84]	; (80053a8 <updateState+0x30c>)
 8005354:	78db      	ldrb	r3, [r3, #3]
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b00      	cmp	r3, #0
 800535a:	d022      	beq.n	80053a2 <updateState+0x306>
 800535c:	4b17      	ldr	r3, [pc, #92]	; (80053bc <updateState+0x320>)
 800535e:	2200      	movs	r2, #0
 8005360:	701a      	strb	r2, [r3, #0]
 8005362:	e01e      	b.n	80053a2 <updateState+0x306>
			case 9: if (buttons.is3Pressed) {s = 0; TFT_startup(hspi);} break;
 8005364:	4b10      	ldr	r3, [pc, #64]	; (80053a8 <updateState+0x30c>)
 8005366:	789b      	ldrb	r3, [r3, #2]
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d02a      	beq.n	80053c4 <updateState+0x328>
 800536e:	4b13      	ldr	r3, [pc, #76]	; (80053bc <updateState+0x320>)
 8005370:	2200      	movs	r2, #0
 8005372:	701a      	strb	r2, [r3, #0]
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	0018      	movs	r0, r3
 8005378:	f7fc fd92 	bl	8001ea0 <TFT_startup>
 800537c:	e022      	b.n	80053c4 <updateState+0x328>
			default: break;
 800537e:	46c0      	nop			; (mov r8, r8)
 8005380:	e021      	b.n	80053c6 <updateState+0x32a>
			case 0:	if (buttons.is2Pressed) s++; break;
 8005382:	46c0      	nop			; (mov r8, r8)
 8005384:	e01f      	b.n	80053c6 <updateState+0x32a>
			case 1: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8005386:	46c0      	nop			; (mov r8, r8)
 8005388:	e01d      	b.n	80053c6 <updateState+0x32a>
			case 2: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 800538a:	46c0      	nop			; (mov r8, r8)
 800538c:	e01b      	b.n	80053c6 <updateState+0x32a>
			case 3: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 800538e:	46c0      	nop			; (mov r8, r8)
 8005390:	e019      	b.n	80053c6 <updateState+0x32a>
			case 4: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8005392:	46c0      	nop			; (mov r8, r8)
 8005394:	e017      	b.n	80053c6 <updateState+0x32a>
			case 5: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	e015      	b.n	80053c6 <updateState+0x32a>
			case 6: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 800539a:	46c0      	nop			; (mov r8, r8)
 800539c:	e013      	b.n	80053c6 <updateState+0x32a>
			case 7: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 800539e:	46c0      	nop			; (mov r8, r8)
 80053a0:	e011      	b.n	80053c6 <updateState+0x32a>
			case 8: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 80053a2:	46c0      	nop			; (mov r8, r8)
 80053a4:	e00f      	b.n	80053c6 <updateState+0x32a>
 80053a6:	46c0      	nop			; (mov r8, r8)
 80053a8:	2000019c 	.word	0x2000019c
 80053ac:	20000068 	.word	0x20000068
 80053b0:	20000140 	.word	0x20000140
 80053b4:	80000003 	.word	0x80000003
 80053b8:	20000150 	.word	0x20000150
 80053bc:	20000141 	.word	0x20000141
 80053c0:	0800cdb4 	.word	0x0800cdb4
			case 9: if (buttons.is3Pressed) {s = 0; TFT_startup(hspi);} break;
 80053c4:	46c0      	nop			; (mov r8, r8)
		}

		// run helper functions when their face is on screen
		if (faceOnDisplay == faceClock) updateClockState(hrtc);
 80053c6:	4b1b      	ldr	r3, [pc, #108]	; (8005434 <updateState+0x398>)
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d104      	bne.n	80053d8 <updateState+0x33c>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	0018      	movs	r0, r3
 80053d2:	f000 f833 	bl	800543c <updateClockState>
 80053d6:	e01d      	b.n	8005414 <updateState+0x378>
		else if (faceOnDisplay == faceTimer) updateTimerState(timerStopwatchTim, motorBacklightTim);
 80053d8:	4b16      	ldr	r3, [pc, #88]	; (8005434 <updateState+0x398>)
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d106      	bne.n	80053ee <updateState+0x352>
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	0011      	movs	r1, r2
 80053e6:	0018      	movs	r0, r3
 80053e8:	f000 f9a6 	bl	8005738 <updateTimerState>
 80053ec:	e012      	b.n	8005414 <updateState+0x378>
		else if (faceOnDisplay == faceAlarm) updateAlarmState(hrtc, motorBacklightTim);
 80053ee:	4b11      	ldr	r3, [pc, #68]	; (8005434 <updateState+0x398>)
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d106      	bne.n	8005404 <updateState+0x368>
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	0011      	movs	r1, r2
 80053fc:	0018      	movs	r0, r3
 80053fe:	f000 fad7 	bl	80059b0 <updateAlarmState>
 8005402:	e007      	b.n	8005414 <updateState+0x378>
		else if (faceOnDisplay == faceStopwatch) updateStopwatchState(timerStopwatchTim);
 8005404:	4b0b      	ldr	r3, [pc, #44]	; (8005434 <updateState+0x398>)
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	2b03      	cmp	r3, #3
 800540a:	d103      	bne.n	8005414 <updateState+0x378>
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	0018      	movs	r0, r3
 8005410:	f000 fbfa 	bl	8005c08 <updateStopwatchState>

		// flags cleared only when state code has finished executing once
		buttons.is1Pressed = buttons.is2Pressed = buttons.is3Pressed = buttons.is4Pressed = 0;
 8005414:	2200      	movs	r2, #0
 8005416:	4b08      	ldr	r3, [pc, #32]	; (8005438 <updateState+0x39c>)
 8005418:	1c11      	adds	r1, r2, #0
 800541a:	70d9      	strb	r1, [r3, #3]
 800541c:	4b06      	ldr	r3, [pc, #24]	; (8005438 <updateState+0x39c>)
 800541e:	1c11      	adds	r1, r2, #0
 8005420:	7099      	strb	r1, [r3, #2]
 8005422:	4b05      	ldr	r3, [pc, #20]	; (8005438 <updateState+0x39c>)
 8005424:	1c11      	adds	r1, r2, #0
 8005426:	7059      	strb	r1, [r3, #1]
 8005428:	4b03      	ldr	r3, [pc, #12]	; (8005438 <updateState+0x39c>)
 800542a:	701a      	strb	r2, [r3, #0]
	}
}
 800542c:	46c0      	nop			; (mov r8, r8)
 800542e:	46bd      	mov	sp, r7
 8005430:	b004      	add	sp, #16
 8005432:	bd80      	pop	{r7, pc}
 8005434:	20000140 	.word	0x20000140
 8005438:	2000019c 	.word	0x2000019c

0800543c <updateClockState>:
 *   button 2 changes value up
 *   button 3 changes value down
 *   button 4 changes field being set. changes between min, hr, year, month, and day. once it finishes cycling through it once,
 *     the clock is updated and we revert back to default mode.
 */
void updateClockState(RTC_HandleTypeDef *hrtc) {
 800543c:	b590      	push	{r4, r7, lr}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
	// check button pressed -> perform action
	static int8_t brightness = 50;
	if (buttons.is2Pressed) {
 8005444:	4bb4      	ldr	r3, [pc, #720]	; (8005718 <updateClockState+0x2dc>)
 8005446:	785b      	ldrb	r3, [r3, #1]
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d100      	bne.n	8005450 <updateClockState+0x14>
 800544e:	e086      	b.n	800555e <updateClockState+0x122>
		updateFace.clock = 1;
 8005450:	4bb2      	ldr	r3, [pc, #712]	; (800571c <updateClockState+0x2e0>)
 8005452:	2201      	movs	r2, #1
 8005454:	701a      	strb	r2, [r3, #0]
		if (clockVars.isBeingSet) {
 8005456:	4bb2      	ldr	r3, [pc, #712]	; (8005720 <updateClockState+0x2e4>)
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d05f      	beq.n	800551e <updateClockState+0xe2>
			switch (clockVars.fieldBeingSet) {
 800545e:	4bb0      	ldr	r3, [pc, #704]	; (8005720 <updateClockState+0x2e4>)
 8005460:	785b      	ldrb	r3, [r3, #1]
 8005462:	2b05      	cmp	r3, #5
 8005464:	d900      	bls.n	8005468 <updateClockState+0x2c>
 8005466:	e079      	b.n	800555c <updateClockState+0x120>
 8005468:	009a      	lsls	r2, r3, #2
 800546a:	4bae      	ldr	r3, [pc, #696]	; (8005724 <updateClockState+0x2e8>)
 800546c:	18d3      	adds	r3, r2, r3
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	469f      	mov	pc, r3
				case 1: clockVars.timeToSet->min = (clockVars.timeToSet->min+1) % 60; break;
 8005472:	4bab      	ldr	r3, [pc, #684]	; (8005720 <updateClockState+0x2e4>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	785b      	ldrb	r3, [r3, #1]
 8005478:	3301      	adds	r3, #1
 800547a:	213c      	movs	r1, #60	; 0x3c
 800547c:	0018      	movs	r0, r3
 800547e:	f7fa ffbb 	bl	80003f8 <__aeabi_idivmod>
 8005482:	000b      	movs	r3, r1
 8005484:	001a      	movs	r2, r3
 8005486:	4ba6      	ldr	r3, [pc, #664]	; (8005720 <updateClockState+0x2e4>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	b2d2      	uxtb	r2, r2
 800548c:	705a      	strb	r2, [r3, #1]
 800548e:	e066      	b.n	800555e <updateClockState+0x122>
				case 2: clockVars.timeToSet->hr = (clockVars.timeToSet->hr+1) % 24; break;
 8005490:	4ba3      	ldr	r3, [pc, #652]	; (8005720 <updateClockState+0x2e4>)
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	3301      	adds	r3, #1
 8005498:	2118      	movs	r1, #24
 800549a:	0018      	movs	r0, r3
 800549c:	f7fa ffac 	bl	80003f8 <__aeabi_idivmod>
 80054a0:	000b      	movs	r3, r1
 80054a2:	001a      	movs	r2, r3
 80054a4:	4b9e      	ldr	r3, [pc, #632]	; (8005720 <updateClockState+0x2e4>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	b2d2      	uxtb	r2, r2
 80054aa:	701a      	strb	r2, [r3, #0]
 80054ac:	e057      	b.n	800555e <updateClockState+0x122>
				case 3: clockVars.dateToSet->yr = (clockVars.dateToSet->yr + 1) % 10000; break;		// fit in 4 characters
 80054ae:	4b9c      	ldr	r3, [pc, #624]	; (8005720 <updateClockState+0x2e4>)
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	881b      	ldrh	r3, [r3, #0]
 80054b4:	3301      	adds	r3, #1
 80054b6:	499c      	ldr	r1, [pc, #624]	; (8005728 <updateClockState+0x2ec>)
 80054b8:	0018      	movs	r0, r3
 80054ba:	f7fa ff9d 	bl	80003f8 <__aeabi_idivmod>
 80054be:	000b      	movs	r3, r1
 80054c0:	001a      	movs	r2, r3
 80054c2:	4b97      	ldr	r3, [pc, #604]	; (8005720 <updateClockState+0x2e4>)
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	b292      	uxth	r2, r2
 80054c8:	801a      	strh	r2, [r3, #0]
 80054ca:	e048      	b.n	800555e <updateClockState+0x122>
				case 4: clockVars.dateToSet->month = (clockVars.dateToSet->month) % 12 + 1; break;
 80054cc:	4b94      	ldr	r3, [pc, #592]	; (8005720 <updateClockState+0x2e4>)
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	789b      	ldrb	r3, [r3, #2]
 80054d2:	210c      	movs	r1, #12
 80054d4:	0018      	movs	r0, r3
 80054d6:	f7fa fea5 	bl	8000224 <__aeabi_uidivmod>
 80054da:	000b      	movs	r3, r1
 80054dc:	b2da      	uxtb	r2, r3
 80054de:	4b90      	ldr	r3, [pc, #576]	; (8005720 <updateClockState+0x2e4>)
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	3201      	adds	r2, #1
 80054e4:	b2d2      	uxtb	r2, r2
 80054e6:	709a      	strb	r2, [r3, #2]
 80054e8:	e039      	b.n	800555e <updateClockState+0x122>
				case 5: clockVars.dateToSet->date = ((clockVars.dateToSet->date) % maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr)) + 1; break;
 80054ea:	4b8d      	ldr	r3, [pc, #564]	; (8005720 <updateClockState+0x2e4>)
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	78dc      	ldrb	r4, [r3, #3]
 80054f0:	4b8b      	ldr	r3, [pc, #556]	; (8005720 <updateClockState+0x2e4>)
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	789a      	ldrb	r2, [r3, #2]
 80054f6:	4b8a      	ldr	r3, [pc, #552]	; (8005720 <updateClockState+0x2e4>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	0019      	movs	r1, r3
 80054fe:	0010      	movs	r0, r2
 8005500:	f7fe f994 	bl	800382c <maxDaysInMonth>
 8005504:	0003      	movs	r3, r0
 8005506:	0019      	movs	r1, r3
 8005508:	0020      	movs	r0, r4
 800550a:	f7fa fe8b 	bl	8000224 <__aeabi_uidivmod>
 800550e:	000b      	movs	r3, r1
 8005510:	b2da      	uxtb	r2, r3
 8005512:	4b83      	ldr	r3, [pc, #524]	; (8005720 <updateClockState+0x2e4>)
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	3201      	adds	r2, #1
 8005518:	b2d2      	uxtb	r2, r2
 800551a:	70da      	strb	r2, [r3, #3]
 800551c:	e01f      	b.n	800555e <updateClockState+0x122>
				default: break;
			}
		}
		else {
//			if (brightness < 100) brightness += 10;
			if (brightness == 50) brightness = 10;
 800551e:	4b83      	ldr	r3, [pc, #524]	; (800572c <updateClockState+0x2f0>)
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	b25b      	sxtb	r3, r3
 8005524:	2b32      	cmp	r3, #50	; 0x32
 8005526:	d103      	bne.n	8005530 <updateClockState+0xf4>
 8005528:	4b80      	ldr	r3, [pc, #512]	; (800572c <updateClockState+0x2f0>)
 800552a:	220a      	movs	r2, #10
 800552c:	701a      	strb	r2, [r3, #0]
 800552e:	e00b      	b.n	8005548 <updateClockState+0x10c>
			else if (brightness == 10) brightness = 0;
 8005530:	4b7e      	ldr	r3, [pc, #504]	; (800572c <updateClockState+0x2f0>)
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	b25b      	sxtb	r3, r3
 8005536:	2b0a      	cmp	r3, #10
 8005538:	d103      	bne.n	8005542 <updateClockState+0x106>
 800553a:	4b7c      	ldr	r3, [pc, #496]	; (800572c <updateClockState+0x2f0>)
 800553c:	2200      	movs	r2, #0
 800553e:	701a      	strb	r2, [r3, #0]
 8005540:	e002      	b.n	8005548 <updateClockState+0x10c>
			else brightness = 50;
 8005542:	4b7a      	ldr	r3, [pc, #488]	; (800572c <updateClockState+0x2f0>)
 8005544:	2232      	movs	r2, #50	; 0x32
 8005546:	701a      	strb	r2, [r3, #0]
			setDisplayBacklight(brightness, &htim3);
 8005548:	4b78      	ldr	r3, [pc, #480]	; (800572c <updateClockState+0x2f0>)
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	b25b      	sxtb	r3, r3
 800554e:	b2db      	uxtb	r3, r3
 8005550:	4a77      	ldr	r2, [pc, #476]	; (8005730 <updateClockState+0x2f4>)
 8005552:	0011      	movs	r1, r2
 8005554:	0018      	movs	r0, r3
 8005556:	f7ff fd1b 	bl	8004f90 <setDisplayBacklight>
 800555a:	e000      	b.n	800555e <updateClockState+0x122>
				default: break;
 800555c:	46c0      	nop			; (mov r8, r8)
//			sleepMode();
		}
	}
	// change fields down, do nothing if not setting clock
	if (buttons.is3Pressed) {
 800555e:	4b6e      	ldr	r3, [pc, #440]	; (8005718 <updateClockState+0x2dc>)
 8005560:	789b      	ldrb	r3, [r3, #2]
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b00      	cmp	r3, #0
 8005566:	d100      	bne.n	800556a <updateClockState+0x12e>
 8005568:	e078      	b.n	800565c <updateClockState+0x220>
		updateFace.clock = 1;
 800556a:	4b6c      	ldr	r3, [pc, #432]	; (800571c <updateClockState+0x2e0>)
 800556c:	2201      	movs	r2, #1
 800556e:	701a      	strb	r2, [r3, #0]
		if (clockVars.isBeingSet) {
 8005570:	4b6b      	ldr	r3, [pc, #428]	; (8005720 <updateClockState+0x2e4>)
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d062      	beq.n	800563e <updateClockState+0x202>
			switch (clockVars.fieldBeingSet) {
 8005578:	4b69      	ldr	r3, [pc, #420]	; (8005720 <updateClockState+0x2e4>)
 800557a:	785b      	ldrb	r3, [r3, #1]
 800557c:	2b05      	cmp	r3, #5
 800557e:	d900      	bls.n	8005582 <updateClockState+0x146>
 8005580:	e069      	b.n	8005656 <updateClockState+0x21a>
 8005582:	009a      	lsls	r2, r3, #2
 8005584:	4b6b      	ldr	r3, [pc, #428]	; (8005734 <updateClockState+0x2f8>)
 8005586:	18d3      	adds	r3, r2, r3
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	469f      	mov	pc, r3
				case 1:
					if (clockVars.timeToSet->min == 0) clockVars.timeToSet->min = 59;
 800558c:	4b64      	ldr	r3, [pc, #400]	; (8005720 <updateClockState+0x2e4>)
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	785b      	ldrb	r3, [r3, #1]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d104      	bne.n	80055a0 <updateClockState+0x164>
 8005596:	4b62      	ldr	r3, [pc, #392]	; (8005720 <updateClockState+0x2e4>)
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	223b      	movs	r2, #59	; 0x3b
 800559c:	705a      	strb	r2, [r3, #1]
					else clockVars.timeToSet->min--;
					break;
 800559e:	e05d      	b.n	800565c <updateClockState+0x220>
					else clockVars.timeToSet->min--;
 80055a0:	4b5f      	ldr	r3, [pc, #380]	; (8005720 <updateClockState+0x2e4>)
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	785a      	ldrb	r2, [r3, #1]
 80055a6:	3a01      	subs	r2, #1
 80055a8:	b2d2      	uxtb	r2, r2
 80055aa:	705a      	strb	r2, [r3, #1]
					break;
 80055ac:	e056      	b.n	800565c <updateClockState+0x220>
				case 2:
					if (clockVars.timeToSet->hr == 0) clockVars.timeToSet->hr = 23;
 80055ae:	4b5c      	ldr	r3, [pc, #368]	; (8005720 <updateClockState+0x2e4>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d104      	bne.n	80055c2 <updateClockState+0x186>
 80055b8:	4b59      	ldr	r3, [pc, #356]	; (8005720 <updateClockState+0x2e4>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	2217      	movs	r2, #23
 80055be:	701a      	strb	r2, [r3, #0]
					else clockVars.timeToSet->hr--;
					break;
 80055c0:	e04c      	b.n	800565c <updateClockState+0x220>
					else clockVars.timeToSet->hr--;
 80055c2:	4b57      	ldr	r3, [pc, #348]	; (8005720 <updateClockState+0x2e4>)
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	781a      	ldrb	r2, [r3, #0]
 80055c8:	3a01      	subs	r2, #1
 80055ca:	b2d2      	uxtb	r2, r2
 80055cc:	701a      	strb	r2, [r3, #0]
					break;
 80055ce:	e045      	b.n	800565c <updateClockState+0x220>
				case 3: if (clockVars.dateToSet->yr != 0) clockVars.dateToSet->yr--; break;		// limit to positive numbers. no wrap-around
 80055d0:	4b53      	ldr	r3, [pc, #332]	; (8005720 <updateClockState+0x2e4>)
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d03f      	beq.n	800565a <updateClockState+0x21e>
 80055da:	4b51      	ldr	r3, [pc, #324]	; (8005720 <updateClockState+0x2e4>)
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	881a      	ldrh	r2, [r3, #0]
 80055e0:	3a01      	subs	r2, #1
 80055e2:	b292      	uxth	r2, r2
 80055e4:	801a      	strh	r2, [r3, #0]
 80055e6:	e038      	b.n	800565a <updateClockState+0x21e>
				case 4: //clockVars.dateToSet->month = clockVars.dateToSet->month == 1 ? 12 : clockVars.dateToSet->month-1; break;
					if (clockVars.dateToSet->month == 1) clockVars.dateToSet->month = 12;
 80055e8:	4b4d      	ldr	r3, [pc, #308]	; (8005720 <updateClockState+0x2e4>)
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	789b      	ldrb	r3, [r3, #2]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d104      	bne.n	80055fc <updateClockState+0x1c0>
 80055f2:	4b4b      	ldr	r3, [pc, #300]	; (8005720 <updateClockState+0x2e4>)
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	220c      	movs	r2, #12
 80055f8:	709a      	strb	r2, [r3, #2]
					else clockVars.dateToSet->month--;
					break;
 80055fa:	e02f      	b.n	800565c <updateClockState+0x220>
					else clockVars.dateToSet->month--;
 80055fc:	4b48      	ldr	r3, [pc, #288]	; (8005720 <updateClockState+0x2e4>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	789a      	ldrb	r2, [r3, #2]
 8005602:	3a01      	subs	r2, #1
 8005604:	b2d2      	uxtb	r2, r2
 8005606:	709a      	strb	r2, [r3, #2]
					break;
 8005608:	e028      	b.n	800565c <updateClockState+0x220>
				case 5:
					if (clockVars.dateToSet->date == 1) clockVars.dateToSet->date = maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr);
 800560a:	4b45      	ldr	r3, [pc, #276]	; (8005720 <updateClockState+0x2e4>)
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	78db      	ldrb	r3, [r3, #3]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d10d      	bne.n	8005630 <updateClockState+0x1f4>
 8005614:	4b42      	ldr	r3, [pc, #264]	; (8005720 <updateClockState+0x2e4>)
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	789a      	ldrb	r2, [r3, #2]
 800561a:	4b41      	ldr	r3, [pc, #260]	; (8005720 <updateClockState+0x2e4>)
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	8819      	ldrh	r1, [r3, #0]
 8005620:	4b3f      	ldr	r3, [pc, #252]	; (8005720 <updateClockState+0x2e4>)
 8005622:	685c      	ldr	r4, [r3, #4]
 8005624:	0010      	movs	r0, r2
 8005626:	f7fe f901 	bl	800382c <maxDaysInMonth>
 800562a:	0003      	movs	r3, r0
 800562c:	70e3      	strb	r3, [r4, #3]
					else clockVars.dateToSet->date--;
					break;
 800562e:	e015      	b.n	800565c <updateClockState+0x220>
					else clockVars.dateToSet->date--;
 8005630:	4b3b      	ldr	r3, [pc, #236]	; (8005720 <updateClockState+0x2e4>)
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	78da      	ldrb	r2, [r3, #3]
 8005636:	3a01      	subs	r2, #1
 8005638:	b2d2      	uxtb	r2, r2
 800563a:	70da      	strb	r2, [r3, #3]
					break;
 800563c:	e00e      	b.n	800565c <updateClockState+0x220>
			}
		}
		else {
//			if (brightness > 0) brightness -= 10;
//			setDisplayBacklight(brightness, &htim3);
			stopMode();
 800563e:	f7fe f95f 	bl	8003900 <stopMode>
			setDisplayBacklight(brightness, &htim3);
 8005642:	4b3a      	ldr	r3, [pc, #232]	; (800572c <updateClockState+0x2f0>)
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	b25b      	sxtb	r3, r3
 8005648:	b2db      	uxtb	r3, r3
 800564a:	4a39      	ldr	r2, [pc, #228]	; (8005730 <updateClockState+0x2f4>)
 800564c:	0011      	movs	r1, r2
 800564e:	0018      	movs	r0, r3
 8005650:	f7ff fc9e 	bl	8004f90 <setDisplayBacklight>
 8005654:	e002      	b.n	800565c <updateClockState+0x220>
				default: break;
 8005656:	46c0      	nop			; (mov r8, r8)
 8005658:	e000      	b.n	800565c <updateClockState+0x220>
				case 3: if (clockVars.dateToSet->yr != 0) clockVars.dateToSet->yr--; break;		// limit to positive numbers. no wrap-around
 800565a:	46c0      	nop			; (mov r8, r8)
		}
	}
	// switches between setting mode and default mode. changes between different clock fields
	if (buttons.is4Pressed) {
 800565c:	4b2e      	ldr	r3, [pc, #184]	; (8005718 <updateClockState+0x2dc>)
 800565e:	78db      	ldrb	r3, [r3, #3]
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d054      	beq.n	8005710 <updateClockState+0x2d4>
		updateFace.clock = 1;
 8005666:	4b2d      	ldr	r3, [pc, #180]	; (800571c <updateClockState+0x2e0>)
 8005668:	2201      	movs	r2, #1
 800566a:	701a      	strb	r2, [r3, #0]
		clockVars.fieldBeingSet = (clockVars.fieldBeingSet + 1) % (NUM_CLOCKFIELDS + 1);
 800566c:	4b2c      	ldr	r3, [pc, #176]	; (8005720 <updateClockState+0x2e4>)
 800566e:	785b      	ldrb	r3, [r3, #1]
 8005670:	3301      	adds	r3, #1
 8005672:	2106      	movs	r1, #6
 8005674:	0018      	movs	r0, r3
 8005676:	f7fa febf 	bl	80003f8 <__aeabi_idivmod>
 800567a:	000b      	movs	r3, r1
 800567c:	b2da      	uxtb	r2, r3
 800567e:	4b28      	ldr	r3, [pc, #160]	; (8005720 <updateClockState+0x2e4>)
 8005680:	705a      	strb	r2, [r3, #1]
		if (clockVars.fieldBeingSet != 0) {
 8005682:	4b27      	ldr	r3, [pc, #156]	; (8005720 <updateClockState+0x2e4>)
 8005684:	785b      	ldrb	r3, [r3, #1]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d033      	beq.n	80056f2 <updateClockState+0x2b6>
			clockVars.isBeingSet = 1;
 800568a:	4b25      	ldr	r3, [pc, #148]	; (8005720 <updateClockState+0x2e4>)
 800568c:	2201      	movs	r2, #1
 800568e:	701a      	strb	r2, [r3, #0]

			// should pull current time when first entering setting mode
			if (clockVars.fieldBeingSet == 1) {
 8005690:	4b23      	ldr	r3, [pc, #140]	; (8005720 <updateClockState+0x2e4>)
 8005692:	785b      	ldrb	r3, [r3, #1]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d10e      	bne.n	80056b6 <updateClockState+0x27a>
				getDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
 8005698:	4b21      	ldr	r3, [pc, #132]	; (8005720 <updateClockState+0x2e4>)
 800569a:	6858      	ldr	r0, [r3, #4]
 800569c:	4b20      	ldr	r3, [pc, #128]	; (8005720 <updateClockState+0x2e4>)
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	0019      	movs	r1, r3
 80056a4:	f7fd ff80 	bl	80035a8 <getDateTime>
				HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_B);
 80056a8:	2380      	movs	r3, #128	; 0x80
 80056aa:	009a      	lsls	r2, r3, #2
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	0011      	movs	r1, r2
 80056b0:	0018      	movs	r0, r3
 80056b2:	f004 f9fd 	bl	8009ab0 <HAL_RTC_DeactivateAlarm>
			}

			if (clockVars.dateToSet->date > maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr)) {
 80056b6:	4b1a      	ldr	r3, [pc, #104]	; (8005720 <updateClockState+0x2e4>)
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	78dc      	ldrb	r4, [r3, #3]
 80056bc:	4b18      	ldr	r3, [pc, #96]	; (8005720 <updateClockState+0x2e4>)
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	789a      	ldrb	r2, [r3, #2]
 80056c2:	4b17      	ldr	r3, [pc, #92]	; (8005720 <updateClockState+0x2e4>)
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	0019      	movs	r1, r3
 80056ca:	0010      	movs	r0, r2
 80056cc:	f7fe f8ae 	bl	800382c <maxDaysInMonth>
 80056d0:	0003      	movs	r3, r0
 80056d2:	429c      	cmp	r4, r3
 80056d4:	d91c      	bls.n	8005710 <updateClockState+0x2d4>
				clockVars.dateToSet->date = maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr);
 80056d6:	4b12      	ldr	r3, [pc, #72]	; (8005720 <updateClockState+0x2e4>)
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	789a      	ldrb	r2, [r3, #2]
 80056dc:	4b10      	ldr	r3, [pc, #64]	; (8005720 <updateClockState+0x2e4>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	8819      	ldrh	r1, [r3, #0]
 80056e2:	4b0f      	ldr	r3, [pc, #60]	; (8005720 <updateClockState+0x2e4>)
 80056e4:	685c      	ldr	r4, [r3, #4]
 80056e6:	0010      	movs	r0, r2
 80056e8:	f7fe f8a0 	bl	800382c <maxDaysInMonth>
 80056ec:	0003      	movs	r3, r0
 80056ee:	70e3      	strb	r3, [r4, #3]
			// second set to 0, weekday ignored
			setDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
			setClockAlarm(hrtc);
		}
	}
}
 80056f0:	e00e      	b.n	8005710 <updateClockState+0x2d4>
			clockVars.isBeingSet = 0;
 80056f2:	4b0b      	ldr	r3, [pc, #44]	; (8005720 <updateClockState+0x2e4>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	701a      	strb	r2, [r3, #0]
			setDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
 80056f8:	4b09      	ldr	r3, [pc, #36]	; (8005720 <updateClockState+0x2e4>)
 80056fa:	6858      	ldr	r0, [r3, #4]
 80056fc:	4b08      	ldr	r3, [pc, #32]	; (8005720 <updateClockState+0x2e4>)
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	0019      	movs	r1, r3
 8005704:	f7fd fd10 	bl	8003128 <setDateTime>
			setClockAlarm(hrtc);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	0018      	movs	r0, r3
 800570c:	f7fd fd78 	bl	8003200 <setClockAlarm>
}
 8005710:	46c0      	nop			; (mov r8, r8)
 8005712:	46bd      	mov	sp, r7
 8005714:	b003      	add	sp, #12
 8005716:	bd90      	pop	{r4, r7, pc}
 8005718:	2000019c 	.word	0x2000019c
 800571c:	20000150 	.word	0x20000150
 8005720:	2000011c 	.word	0x2000011c
 8005724:	0800cddc 	.word	0x0800cddc
 8005728:	00002710 	.word	0x00002710
 800572c:	20000069 	.word	0x20000069
 8005730:	20000200 	.word	0x20000200
 8005734:	0800cdf4 	.word	0x0800cdf4

08005738 <updateTimerState>:
 *   button 2 changes value up
 *   button 3 changes value down
 *   button 4 changes field being set. changes between sec, min, hr. returns to default mode after
 *     cycling through fields once.
 */
void updateTimerState(TIM_HandleTypeDef *timerStopwatchTim, TIM_HandleTypeDef *motorTim) {
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
	// check which button is pressed -> perform action
	if (buttons.is2Pressed) {
 8005742:	4b93      	ldr	r3, [pc, #588]	; (8005990 <updateTimerState+0x258>)
 8005744:	785b      	ldrb	r3, [r3, #1]
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b00      	cmp	r3, #0
 800574a:	d057      	beq.n	80057fc <updateTimerState+0xc4>
		updateFace.timer = 1;
 800574c:	4b91      	ldr	r3, [pc, #580]	; (8005994 <updateTimerState+0x25c>)
 800574e:	2201      	movs	r2, #1
 8005750:	705a      	strb	r2, [r3, #1]
		if (timerVars.isBeingSet) {
 8005752:	4b91      	ldr	r3, [pc, #580]	; (8005998 <updateTimerState+0x260>)
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d035      	beq.n	80057c6 <updateTimerState+0x8e>
			// set field up
			switch (timerVars.fieldBeingSet) {
 800575a:	4b8f      	ldr	r3, [pc, #572]	; (8005998 <updateTimerState+0x260>)
 800575c:	785b      	ldrb	r3, [r3, #1]
 800575e:	2b02      	cmp	r3, #2
 8005760:	d013      	beq.n	800578a <updateTimerState+0x52>
 8005762:	2b03      	cmp	r3, #3
 8005764:	d020      	beq.n	80057a8 <updateTimerState+0x70>
 8005766:	2b01      	cmp	r3, #1
 8005768:	d000      	beq.n	800576c <updateTimerState+0x34>
				case 1: timerVars.timeToSet->sec = (timerVars.timeToSet->sec+1) % 60; break;
				case 2: timerVars.timeToSet->min = (timerVars.timeToSet->min+1) % 60; break;
				case 3: timerVars.timeToSet->hr = (timerVars.timeToSet->hr+1) % 100; break;
				default: break;
 800576a:	e10d      	b.n	8005988 <updateTimerState+0x250>
				case 1: timerVars.timeToSet->sec = (timerVars.timeToSet->sec+1) % 60; break;
 800576c:	4b8a      	ldr	r3, [pc, #552]	; (8005998 <updateTimerState+0x260>)
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	789b      	ldrb	r3, [r3, #2]
 8005772:	3301      	adds	r3, #1
 8005774:	213c      	movs	r1, #60	; 0x3c
 8005776:	0018      	movs	r0, r3
 8005778:	f7fa fe3e 	bl	80003f8 <__aeabi_idivmod>
 800577c:	000b      	movs	r3, r1
 800577e:	001a      	movs	r2, r3
 8005780:	4b85      	ldr	r3, [pc, #532]	; (8005998 <updateTimerState+0x260>)
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	b2d2      	uxtb	r2, r2
 8005786:	709a      	strb	r2, [r3, #2]
 8005788:	e0fe      	b.n	8005988 <updateTimerState+0x250>
				case 2: timerVars.timeToSet->min = (timerVars.timeToSet->min+1) % 60; break;
 800578a:	4b83      	ldr	r3, [pc, #524]	; (8005998 <updateTimerState+0x260>)
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	785b      	ldrb	r3, [r3, #1]
 8005790:	3301      	adds	r3, #1
 8005792:	213c      	movs	r1, #60	; 0x3c
 8005794:	0018      	movs	r0, r3
 8005796:	f7fa fe2f 	bl	80003f8 <__aeabi_idivmod>
 800579a:	000b      	movs	r3, r1
 800579c:	001a      	movs	r2, r3
 800579e:	4b7e      	ldr	r3, [pc, #504]	; (8005998 <updateTimerState+0x260>)
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	705a      	strb	r2, [r3, #1]
 80057a6:	e0ef      	b.n	8005988 <updateTimerState+0x250>
				case 3: timerVars.timeToSet->hr = (timerVars.timeToSet->hr+1) % 100; break;
 80057a8:	4b7b      	ldr	r3, [pc, #492]	; (8005998 <updateTimerState+0x260>)
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	3301      	adds	r3, #1
 80057b0:	2164      	movs	r1, #100	; 0x64
 80057b2:	0018      	movs	r0, r3
 80057b4:	f7fa fe20 	bl	80003f8 <__aeabi_idivmod>
 80057b8:	000b      	movs	r3, r1
 80057ba:	001a      	movs	r2, r3
 80057bc:	4b76      	ldr	r3, [pc, #472]	; (8005998 <updateTimerState+0x260>)
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	b2d2      	uxtb	r2, r2
 80057c2:	701a      	strb	r2, [r3, #0]
 80057c4:	e0e0      	b.n	8005988 <updateTimerState+0x250>
			}
		}
		else if (timerVars.isSet && isTimerRunning == 0 && timerCounter != 0) {
 80057c6:	4b74      	ldr	r3, [pc, #464]	; (8005998 <updateTimerState+0x260>)
 80057c8:	789b      	ldrb	r3, [r3, #2]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d100      	bne.n	80057d0 <updateTimerState+0x98>
 80057ce:	e0db      	b.n	8005988 <updateTimerState+0x250>
 80057d0:	4b72      	ldr	r3, [pc, #456]	; (800599c <updateTimerState+0x264>)
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d000      	beq.n	80057dc <updateTimerState+0xa4>
 80057da:	e0d5      	b.n	8005988 <updateTimerState+0x250>
 80057dc:	4b70      	ldr	r3, [pc, #448]	; (80059a0 <updateTimerState+0x268>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d100      	bne.n	80057e6 <updateTimerState+0xae>
 80057e4:	e0d0      	b.n	8005988 <updateTimerState+0x250>
			// start timer
			runTimer(timerStopwatchTim);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	0018      	movs	r0, r3
 80057ea:	f7ff fa4d 	bl	8004c88 <runTimer>
			isTimerRunning = 1;
 80057ee:	4b6b      	ldr	r3, [pc, #428]	; (800599c <updateTimerState+0x264>)
 80057f0:	2201      	movs	r2, #1
 80057f2:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 0;
 80057f4:	4b6b      	ldr	r3, [pc, #428]	; (80059a4 <updateTimerState+0x26c>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	701a      	strb	r2, [r3, #0]
				timerVars.isBeingSet = 0;
				timerVars.isSet = 0;
			}
		}
	}
}
 80057fa:	e0c5      	b.n	8005988 <updateTimerState+0x250>
	else if (buttons.is3Pressed) {
 80057fc:	4b64      	ldr	r3, [pc, #400]	; (8005990 <updateTimerState+0x258>)
 80057fe:	789b      	ldrb	r3, [r3, #2]
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d05d      	beq.n	80058c2 <updateTimerState+0x18a>
		updateFace.timer = 1;
 8005806:	4b63      	ldr	r3, [pc, #396]	; (8005994 <updateTimerState+0x25c>)
 8005808:	2201      	movs	r2, #1
 800580a:	705a      	strb	r2, [r3, #1]
		if (timerVars.isBeingSet) {
 800580c:	4b62      	ldr	r3, [pc, #392]	; (8005998 <updateTimerState+0x260>)
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d03b      	beq.n	800588c <updateTimerState+0x154>
			switch (timerVars.fieldBeingSet) {
 8005814:	4b60      	ldr	r3, [pc, #384]	; (8005998 <updateTimerState+0x260>)
 8005816:	785b      	ldrb	r3, [r3, #1]
 8005818:	2b02      	cmp	r3, #2
 800581a:	d015      	beq.n	8005848 <updateTimerState+0x110>
 800581c:	2b03      	cmp	r3, #3
 800581e:	d024      	beq.n	800586a <updateTimerState+0x132>
 8005820:	2b01      	cmp	r3, #1
 8005822:	d000      	beq.n	8005826 <updateTimerState+0xee>
				default: break;
 8005824:	e0b0      	b.n	8005988 <updateTimerState+0x250>
					if (timerVars.timeToSet->sec == 0) timerVars.timeToSet->sec = 59;
 8005826:	4b5c      	ldr	r3, [pc, #368]	; (8005998 <updateTimerState+0x260>)
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	789b      	ldrb	r3, [r3, #2]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d104      	bne.n	800583a <updateTimerState+0x102>
 8005830:	4b59      	ldr	r3, [pc, #356]	; (8005998 <updateTimerState+0x260>)
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	223b      	movs	r2, #59	; 0x3b
 8005836:	709a      	strb	r2, [r3, #2]
					break;
 8005838:	e0a6      	b.n	8005988 <updateTimerState+0x250>
					else timerVars.timeToSet->sec--;
 800583a:	4b57      	ldr	r3, [pc, #348]	; (8005998 <updateTimerState+0x260>)
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	789a      	ldrb	r2, [r3, #2]
 8005840:	3a01      	subs	r2, #1
 8005842:	b2d2      	uxtb	r2, r2
 8005844:	709a      	strb	r2, [r3, #2]
					break;
 8005846:	e09f      	b.n	8005988 <updateTimerState+0x250>
					if (timerVars.timeToSet->min == 0) timerVars.timeToSet->min = 59;
 8005848:	4b53      	ldr	r3, [pc, #332]	; (8005998 <updateTimerState+0x260>)
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	785b      	ldrb	r3, [r3, #1]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d104      	bne.n	800585c <updateTimerState+0x124>
 8005852:	4b51      	ldr	r3, [pc, #324]	; (8005998 <updateTimerState+0x260>)
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	223b      	movs	r2, #59	; 0x3b
 8005858:	705a      	strb	r2, [r3, #1]
					break;
 800585a:	e095      	b.n	8005988 <updateTimerState+0x250>
					else timerVars.timeToSet->min--;
 800585c:	4b4e      	ldr	r3, [pc, #312]	; (8005998 <updateTimerState+0x260>)
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	785a      	ldrb	r2, [r3, #1]
 8005862:	3a01      	subs	r2, #1
 8005864:	b2d2      	uxtb	r2, r2
 8005866:	705a      	strb	r2, [r3, #1]
					break;
 8005868:	e08e      	b.n	8005988 <updateTimerState+0x250>
					if (timerVars.timeToSet->hr == 0) timerVars.timeToSet->hr = 99;		// no limit on hour, since we're not using day
 800586a:	4b4b      	ldr	r3, [pc, #300]	; (8005998 <updateTimerState+0x260>)
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d104      	bne.n	800587e <updateTimerState+0x146>
 8005874:	4b48      	ldr	r3, [pc, #288]	; (8005998 <updateTimerState+0x260>)
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	2263      	movs	r2, #99	; 0x63
 800587a:	701a      	strb	r2, [r3, #0]
					break;
 800587c:	e084      	b.n	8005988 <updateTimerState+0x250>
					else timerVars.timeToSet->hr--;
 800587e:	4b46      	ldr	r3, [pc, #280]	; (8005998 <updateTimerState+0x260>)
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	781a      	ldrb	r2, [r3, #0]
 8005884:	3a01      	subs	r2, #1
 8005886:	b2d2      	uxtb	r2, r2
 8005888:	701a      	strb	r2, [r3, #0]
					break;
 800588a:	e07d      	b.n	8005988 <updateTimerState+0x250>
		else if (timerVars.isSet && isTimerRunning && timerCounter != 0) {
 800588c:	4b42      	ldr	r3, [pc, #264]	; (8005998 <updateTimerState+0x260>)
 800588e:	789b      	ldrb	r3, [r3, #2]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d100      	bne.n	8005896 <updateTimerState+0x15e>
 8005894:	e078      	b.n	8005988 <updateTimerState+0x250>
 8005896:	4b41      	ldr	r3, [pc, #260]	; (800599c <updateTimerState+0x264>)
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	d100      	bne.n	80058a2 <updateTimerState+0x16a>
 80058a0:	e072      	b.n	8005988 <updateTimerState+0x250>
 80058a2:	4b3f      	ldr	r3, [pc, #252]	; (80059a0 <updateTimerState+0x268>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d100      	bne.n	80058ac <updateTimerState+0x174>
 80058aa:	e06d      	b.n	8005988 <updateTimerState+0x250>
			pauseTimer(timerStopwatchTim);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	0018      	movs	r0, r3
 80058b0:	f7ff fa48 	bl	8004d44 <pauseTimer>
			isTimerRunning = 0;
 80058b4:	4b39      	ldr	r3, [pc, #228]	; (800599c <updateTimerState+0x264>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 1;
 80058ba:	4b3a      	ldr	r3, [pc, #232]	; (80059a4 <updateTimerState+0x26c>)
 80058bc:	2201      	movs	r2, #1
 80058be:	701a      	strb	r2, [r3, #0]
}
 80058c0:	e062      	b.n	8005988 <updateTimerState+0x250>
	else if (buttons.is4Pressed) {
 80058c2:	4b33      	ldr	r3, [pc, #204]	; (8005990 <updateTimerState+0x258>)
 80058c4:	78db      	ldrb	r3, [r3, #3]
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d05d      	beq.n	8005988 <updateTimerState+0x250>
		updateFace.timer = 1;
 80058cc:	4b31      	ldr	r3, [pc, #196]	; (8005994 <updateTimerState+0x25c>)
 80058ce:	2201      	movs	r2, #1
 80058d0:	705a      	strb	r2, [r3, #1]
		if (timerVars.isSet) {
 80058d2:	4b31      	ldr	r3, [pc, #196]	; (8005998 <updateTimerState+0x260>)
 80058d4:	789b      	ldrb	r3, [r3, #2]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00d      	beq.n	80058f6 <updateTimerState+0x1be>
			stopTimer(timerStopwatchTim);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	0018      	movs	r0, r3
 80058de:	f7ff fa47 	bl	8004d70 <stopTimer>
			timerVars.isSet = 0;
 80058e2:	4b2d      	ldr	r3, [pc, #180]	; (8005998 <updateTimerState+0x260>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	709a      	strb	r2, [r3, #2]
			isTimerRunning = 0;
 80058e8:	4b2c      	ldr	r3, [pc, #176]	; (800599c <updateTimerState+0x264>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 0;
 80058ee:	4b2d      	ldr	r3, [pc, #180]	; (80059a4 <updateTimerState+0x26c>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	701a      	strb	r2, [r3, #0]
}
 80058f4:	e048      	b.n	8005988 <updateTimerState+0x250>
			timerVars.fieldBeingSet = (timerVars.fieldBeingSet + 1) % (NUM_TIMERFIELDS + 1);
 80058f6:	4b28      	ldr	r3, [pc, #160]	; (8005998 <updateTimerState+0x260>)
 80058f8:	785b      	ldrb	r3, [r3, #1]
 80058fa:	3301      	adds	r3, #1
 80058fc:	4a2a      	ldr	r2, [pc, #168]	; (80059a8 <updateTimerState+0x270>)
 80058fe:	4013      	ands	r3, r2
 8005900:	d504      	bpl.n	800590c <updateTimerState+0x1d4>
 8005902:	3b01      	subs	r3, #1
 8005904:	2204      	movs	r2, #4
 8005906:	4252      	negs	r2, r2
 8005908:	4313      	orrs	r3, r2
 800590a:	3301      	adds	r3, #1
 800590c:	b2da      	uxtb	r2, r3
 800590e:	4b22      	ldr	r3, [pc, #136]	; (8005998 <updateTimerState+0x260>)
 8005910:	705a      	strb	r2, [r3, #1]
			if (timerVars.fieldBeingSet != 0) {
 8005912:	4b21      	ldr	r3, [pc, #132]	; (8005998 <updateTimerState+0x260>)
 8005914:	785b      	ldrb	r3, [r3, #1]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d016      	beq.n	8005948 <updateTimerState+0x210>
				timerVars.isBeingSet = 1;
 800591a:	4b1f      	ldr	r3, [pc, #124]	; (8005998 <updateTimerState+0x260>)
 800591c:	2201      	movs	r2, #1
 800591e:	701a      	strb	r2, [r3, #0]
				timerVars.isSet = 0;
 8005920:	4b1d      	ldr	r3, [pc, #116]	; (8005998 <updateTimerState+0x260>)
 8005922:	2200      	movs	r2, #0
 8005924:	709a      	strb	r2, [r3, #2]
				if (timerVars.fieldBeingSet == 1) {
 8005926:	4b1c      	ldr	r3, [pc, #112]	; (8005998 <updateTimerState+0x260>)
 8005928:	785b      	ldrb	r3, [r3, #1]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d12c      	bne.n	8005988 <updateTimerState+0x250>
					timerVars.timeToSet->sec = 0;
 800592e:	4b1a      	ldr	r3, [pc, #104]	; (8005998 <updateTimerState+0x260>)
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	709a      	strb	r2, [r3, #2]
					timerVars.timeToSet->min = 0;
 8005936:	4b18      	ldr	r3, [pc, #96]	; (8005998 <updateTimerState+0x260>)
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	705a      	strb	r2, [r3, #1]
					timerVars.timeToSet->hr = 0;
 800593e:	4b16      	ldr	r3, [pc, #88]	; (8005998 <updateTimerState+0x260>)
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	701a      	strb	r2, [r3, #0]
}
 8005946:	e01f      	b.n	8005988 <updateTimerState+0x250>
			else if (timeToSeconds(timerVars.timeToSet) != 0) {
 8005948:	4b13      	ldr	r3, [pc, #76]	; (8005998 <updateTimerState+0x260>)
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	0018      	movs	r0, r3
 800594e:	f7fd fecb 	bl	80036e8 <timeToSeconds>
 8005952:	1e03      	subs	r3, r0, #0
 8005954:	d011      	beq.n	800597a <updateTimerState+0x242>
				timerVars.isBeingSet = 0;
 8005956:	4b10      	ldr	r3, [pc, #64]	; (8005998 <updateTimerState+0x260>)
 8005958:	2200      	movs	r2, #0
 800595a:	701a      	strb	r2, [r3, #0]
				timerVars.isSet = 1;
 800595c:	4b0e      	ldr	r3, [pc, #56]	; (8005998 <updateTimerState+0x260>)
 800595e:	2201      	movs	r2, #1
 8005960:	709a      	strb	r2, [r3, #2]
				isTimerDone = 0;
 8005962:	4b12      	ldr	r3, [pc, #72]	; (80059ac <updateTimerState+0x274>)
 8005964:	2200      	movs	r2, #0
 8005966:	701a      	strb	r2, [r3, #0]
				timerCounter = timeToSeconds(timerVars.timeToSet);
 8005968:	4b0b      	ldr	r3, [pc, #44]	; (8005998 <updateTimerState+0x260>)
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	0018      	movs	r0, r3
 800596e:	f7fd febb 	bl	80036e8 <timeToSeconds>
 8005972:	0002      	movs	r2, r0
 8005974:	4b0a      	ldr	r3, [pc, #40]	; (80059a0 <updateTimerState+0x268>)
 8005976:	601a      	str	r2, [r3, #0]
}
 8005978:	e006      	b.n	8005988 <updateTimerState+0x250>
				timerVars.isBeingSet = 0;
 800597a:	4b07      	ldr	r3, [pc, #28]	; (8005998 <updateTimerState+0x260>)
 800597c:	2200      	movs	r2, #0
 800597e:	701a      	strb	r2, [r3, #0]
				timerVars.isSet = 0;
 8005980:	4b05      	ldr	r3, [pc, #20]	; (8005998 <updateTimerState+0x260>)
 8005982:	2200      	movs	r2, #0
 8005984:	709a      	strb	r2, [r3, #2]
}
 8005986:	e7ff      	b.n	8005988 <updateTimerState+0x250>
 8005988:	46c0      	nop			; (mov r8, r8)
 800598a:	46bd      	mov	sp, r7
 800598c:	b002      	add	sp, #8
 800598e:	bd80      	pop	{r7, pc}
 8005990:	2000019c 	.word	0x2000019c
 8005994:	20000150 	.word	0x20000150
 8005998:	20000128 	.word	0x20000128
 800599c:	200001a0 	.word	0x200001a0
 80059a0:	20000158 	.word	0x20000158
 80059a4:	200001a2 	.word	0x200001a2
 80059a8:	80000003 	.word	0x80000003
 80059ac:	2000015c 	.word	0x2000015c

080059b0 <updateAlarmState>:
 *   button 2 changes value up
 *   button 3 changes value down
 *   button 4 changes field being set. changes between sec, min, hr. returns to default mode after
 *     cycling through fields once.
 */
void updateAlarmState(RTC_HandleTypeDef *hrtc, TIM_HandleTypeDef *motorTim) {
 80059b0:	b5b0      	push	{r4, r5, r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
	// check button pressed -> perform action
	if (buttons.is2Pressed && alarmVars.isBeingSet) {
 80059ba:	4b90      	ldr	r3, [pc, #576]	; (8005bfc <updateAlarmState+0x24c>)
 80059bc:	785b      	ldrb	r3, [r3, #1]
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d04f      	beq.n	8005a64 <updateAlarmState+0xb4>
 80059c4:	4b8e      	ldr	r3, [pc, #568]	; (8005c00 <updateAlarmState+0x250>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d04b      	beq.n	8005a64 <updateAlarmState+0xb4>
		updateFace.alarm = 1;
 80059cc:	4b8d      	ldr	r3, [pc, #564]	; (8005c04 <updateAlarmState+0x254>)
 80059ce:	2201      	movs	r2, #1
 80059d0:	709a      	strb	r2, [r3, #2]

		// change fields up
		switch (alarmVars.fieldBeingSet) {
 80059d2:	4b8b      	ldr	r3, [pc, #556]	; (8005c00 <updateAlarmState+0x250>)
 80059d4:	785b      	ldrb	r3, [r3, #1]
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d017      	beq.n	8005a0a <updateAlarmState+0x5a>
 80059da:	dc02      	bgt.n	80059e2 <updateAlarmState+0x32>
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d005      	beq.n	80059ec <updateAlarmState+0x3c>
			case 1: alarmVars.alarmToSet->sec = (alarmVars.alarmToSet->sec + 1) % 60; break;
			case 2: alarmVars.alarmToSet->min = (alarmVars.alarmToSet->min + 1) % 60; break;
			case 3: alarmVars.alarmToSet->hr = (alarmVars.alarmToSet->hr + 1) % 24; break;
			case 4: alarmVars.alarmToSet->weekday = (alarmVars.alarmToSet->weekday) % 7 + 1; break;
			default: break;
 80059e0:	e041      	b.n	8005a66 <updateAlarmState+0xb6>
		switch (alarmVars.fieldBeingSet) {
 80059e2:	2b03      	cmp	r3, #3
 80059e4:	d020      	beq.n	8005a28 <updateAlarmState+0x78>
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	d02d      	beq.n	8005a46 <updateAlarmState+0x96>
			default: break;
 80059ea:	e03c      	b.n	8005a66 <updateAlarmState+0xb6>
			case 1: alarmVars.alarmToSet->sec = (alarmVars.alarmToSet->sec + 1) % 60; break;
 80059ec:	4b84      	ldr	r3, [pc, #528]	; (8005c00 <updateAlarmState+0x250>)
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	789b      	ldrb	r3, [r3, #2]
 80059f2:	3301      	adds	r3, #1
 80059f4:	213c      	movs	r1, #60	; 0x3c
 80059f6:	0018      	movs	r0, r3
 80059f8:	f7fa fcfe 	bl	80003f8 <__aeabi_idivmod>
 80059fc:	000b      	movs	r3, r1
 80059fe:	001a      	movs	r2, r3
 8005a00:	4b7f      	ldr	r3, [pc, #508]	; (8005c00 <updateAlarmState+0x250>)
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	b2d2      	uxtb	r2, r2
 8005a06:	709a      	strb	r2, [r3, #2]
 8005a08:	e02d      	b.n	8005a66 <updateAlarmState+0xb6>
			case 2: alarmVars.alarmToSet->min = (alarmVars.alarmToSet->min + 1) % 60; break;
 8005a0a:	4b7d      	ldr	r3, [pc, #500]	; (8005c00 <updateAlarmState+0x250>)
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	785b      	ldrb	r3, [r3, #1]
 8005a10:	3301      	adds	r3, #1
 8005a12:	213c      	movs	r1, #60	; 0x3c
 8005a14:	0018      	movs	r0, r3
 8005a16:	f7fa fcef 	bl	80003f8 <__aeabi_idivmod>
 8005a1a:	000b      	movs	r3, r1
 8005a1c:	001a      	movs	r2, r3
 8005a1e:	4b78      	ldr	r3, [pc, #480]	; (8005c00 <updateAlarmState+0x250>)
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	b2d2      	uxtb	r2, r2
 8005a24:	705a      	strb	r2, [r3, #1]
 8005a26:	e01e      	b.n	8005a66 <updateAlarmState+0xb6>
			case 3: alarmVars.alarmToSet->hr = (alarmVars.alarmToSet->hr + 1) % 24; break;
 8005a28:	4b75      	ldr	r3, [pc, #468]	; (8005c00 <updateAlarmState+0x250>)
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	2118      	movs	r1, #24
 8005a32:	0018      	movs	r0, r3
 8005a34:	f7fa fce0 	bl	80003f8 <__aeabi_idivmod>
 8005a38:	000b      	movs	r3, r1
 8005a3a:	001a      	movs	r2, r3
 8005a3c:	4b70      	ldr	r3, [pc, #448]	; (8005c00 <updateAlarmState+0x250>)
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	b2d2      	uxtb	r2, r2
 8005a42:	701a      	strb	r2, [r3, #0]
 8005a44:	e00f      	b.n	8005a66 <updateAlarmState+0xb6>
			case 4: alarmVars.alarmToSet->weekday = (alarmVars.alarmToSet->weekday) % 7 + 1; break;
 8005a46:	4b6e      	ldr	r3, [pc, #440]	; (8005c00 <updateAlarmState+0x250>)
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	78db      	ldrb	r3, [r3, #3]
 8005a4c:	2107      	movs	r1, #7
 8005a4e:	0018      	movs	r0, r3
 8005a50:	f7fa fbe8 	bl	8000224 <__aeabi_uidivmod>
 8005a54:	000b      	movs	r3, r1
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	4b69      	ldr	r3, [pc, #420]	; (8005c00 <updateAlarmState+0x250>)
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	3201      	adds	r2, #1
 8005a5e:	b2d2      	uxtb	r2, r2
 8005a60:	70da      	strb	r2, [r3, #3]
 8005a62:	e000      	b.n	8005a66 <updateAlarmState+0xb6>
		}
	}
 8005a64:	46c0      	nop			; (mov r8, r8)
	if (buttons.is3Pressed && alarmVars.isBeingSet) {
 8005a66:	4b65      	ldr	r3, [pc, #404]	; (8005bfc <updateAlarmState+0x24c>)
 8005a68:	789b      	ldrb	r3, [r3, #2]
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d057      	beq.n	8005b20 <updateAlarmState+0x170>
 8005a70:	4b63      	ldr	r3, [pc, #396]	; (8005c00 <updateAlarmState+0x250>)
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d053      	beq.n	8005b20 <updateAlarmState+0x170>
		updateFace.alarm = 1;
 8005a78:	4b62      	ldr	r3, [pc, #392]	; (8005c04 <updateAlarmState+0x254>)
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	709a      	strb	r2, [r3, #2]

		// change fields down
		switch (alarmVars.fieldBeingSet) {
 8005a7e:	4b60      	ldr	r3, [pc, #384]	; (8005c00 <updateAlarmState+0x250>)
 8005a80:	785b      	ldrb	r3, [r3, #1]
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d019      	beq.n	8005aba <updateAlarmState+0x10a>
 8005a86:	dc02      	bgt.n	8005a8e <updateAlarmState+0xde>
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d005      	beq.n	8005a98 <updateAlarmState+0xe8>
				break;
			case 4:
				if (alarmVars.alarmToSet->weekday == RTC_WEEKDAY_MONDAY) alarmVars.alarmToSet->weekday = RTC_WEEKDAY_SUNDAY;
				else alarmVars.alarmToSet->weekday--;
				break;
			default: break;
 8005a8c:	e049      	b.n	8005b22 <updateAlarmState+0x172>
		switch (alarmVars.fieldBeingSet) {
 8005a8e:	2b03      	cmp	r3, #3
 8005a90:	d024      	beq.n	8005adc <updateAlarmState+0x12c>
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	d033      	beq.n	8005afe <updateAlarmState+0x14e>
			default: break;
 8005a96:	e044      	b.n	8005b22 <updateAlarmState+0x172>
				if (alarmVars.alarmToSet->sec == 0) alarmVars.alarmToSet->sec = 59;
 8005a98:	4b59      	ldr	r3, [pc, #356]	; (8005c00 <updateAlarmState+0x250>)
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	789b      	ldrb	r3, [r3, #2]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d104      	bne.n	8005aac <updateAlarmState+0xfc>
 8005aa2:	4b57      	ldr	r3, [pc, #348]	; (8005c00 <updateAlarmState+0x250>)
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	223b      	movs	r2, #59	; 0x3b
 8005aa8:	709a      	strb	r2, [r3, #2]
				break;
 8005aaa:	e03a      	b.n	8005b22 <updateAlarmState+0x172>
				else alarmVars.alarmToSet->sec--;
 8005aac:	4b54      	ldr	r3, [pc, #336]	; (8005c00 <updateAlarmState+0x250>)
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	789a      	ldrb	r2, [r3, #2]
 8005ab2:	3a01      	subs	r2, #1
 8005ab4:	b2d2      	uxtb	r2, r2
 8005ab6:	709a      	strb	r2, [r3, #2]
				break;
 8005ab8:	e033      	b.n	8005b22 <updateAlarmState+0x172>
				if (alarmVars.alarmToSet->min == 0) alarmVars.alarmToSet->min = 59;
 8005aba:	4b51      	ldr	r3, [pc, #324]	; (8005c00 <updateAlarmState+0x250>)
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	785b      	ldrb	r3, [r3, #1]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d104      	bne.n	8005ace <updateAlarmState+0x11e>
 8005ac4:	4b4e      	ldr	r3, [pc, #312]	; (8005c00 <updateAlarmState+0x250>)
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	223b      	movs	r2, #59	; 0x3b
 8005aca:	705a      	strb	r2, [r3, #1]
				break;
 8005acc:	e029      	b.n	8005b22 <updateAlarmState+0x172>
				else alarmVars.alarmToSet->min--;
 8005ace:	4b4c      	ldr	r3, [pc, #304]	; (8005c00 <updateAlarmState+0x250>)
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	785a      	ldrb	r2, [r3, #1]
 8005ad4:	3a01      	subs	r2, #1
 8005ad6:	b2d2      	uxtb	r2, r2
 8005ad8:	705a      	strb	r2, [r3, #1]
				break;
 8005ada:	e022      	b.n	8005b22 <updateAlarmState+0x172>
				if (alarmVars.alarmToSet->hr == 0) alarmVars.alarmToSet->hr = 23;
 8005adc:	4b48      	ldr	r3, [pc, #288]	; (8005c00 <updateAlarmState+0x250>)
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d104      	bne.n	8005af0 <updateAlarmState+0x140>
 8005ae6:	4b46      	ldr	r3, [pc, #280]	; (8005c00 <updateAlarmState+0x250>)
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	2217      	movs	r2, #23
 8005aec:	701a      	strb	r2, [r3, #0]
				break;
 8005aee:	e018      	b.n	8005b22 <updateAlarmState+0x172>
				else alarmVars.alarmToSet->hr--;
 8005af0:	4b43      	ldr	r3, [pc, #268]	; (8005c00 <updateAlarmState+0x250>)
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	781a      	ldrb	r2, [r3, #0]
 8005af6:	3a01      	subs	r2, #1
 8005af8:	b2d2      	uxtb	r2, r2
 8005afa:	701a      	strb	r2, [r3, #0]
				break;
 8005afc:	e011      	b.n	8005b22 <updateAlarmState+0x172>
				if (alarmVars.alarmToSet->weekday == RTC_WEEKDAY_MONDAY) alarmVars.alarmToSet->weekday = RTC_WEEKDAY_SUNDAY;
 8005afe:	4b40      	ldr	r3, [pc, #256]	; (8005c00 <updateAlarmState+0x250>)
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	78db      	ldrb	r3, [r3, #3]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d104      	bne.n	8005b12 <updateAlarmState+0x162>
 8005b08:	4b3d      	ldr	r3, [pc, #244]	; (8005c00 <updateAlarmState+0x250>)
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	2207      	movs	r2, #7
 8005b0e:	70da      	strb	r2, [r3, #3]
				break;
 8005b10:	e007      	b.n	8005b22 <updateAlarmState+0x172>
				else alarmVars.alarmToSet->weekday--;
 8005b12:	4b3b      	ldr	r3, [pc, #236]	; (8005c00 <updateAlarmState+0x250>)
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	78da      	ldrb	r2, [r3, #3]
 8005b18:	3a01      	subs	r2, #1
 8005b1a:	b2d2      	uxtb	r2, r2
 8005b1c:	70da      	strb	r2, [r3, #3]
				break;
 8005b1e:	e000      	b.n	8005b22 <updateAlarmState+0x172>
		}
	}
 8005b20:	46c0      	nop			; (mov r8, r8)
	if (buttons.is4Pressed) {
 8005b22:	4b36      	ldr	r3, [pc, #216]	; (8005bfc <updateAlarmState+0x24c>)
 8005b24:	78db      	ldrb	r3, [r3, #3]
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d062      	beq.n	8005bf2 <updateAlarmState+0x242>
		updateFace.alarm = 1;
 8005b2c:	4b35      	ldr	r3, [pc, #212]	; (8005c04 <updateAlarmState+0x254>)
 8005b2e:	2201      	movs	r2, #1
 8005b30:	709a      	strb	r2, [r3, #2]

		if (alarmVars.isSet == 0) {
 8005b32:	4b33      	ldr	r3, [pc, #204]	; (8005c00 <updateAlarmState+0x250>)
 8005b34:	789b      	ldrb	r3, [r3, #2]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d151      	bne.n	8005bde <updateAlarmState+0x22e>
			// toggle between fields
			alarmVars.fieldBeingSet = (alarmVars.fieldBeingSet + 1) % (NUM_ALARMFIELDS + 1);
 8005b3a:	4b31      	ldr	r3, [pc, #196]	; (8005c00 <updateAlarmState+0x250>)
 8005b3c:	785b      	ldrb	r3, [r3, #1]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	2105      	movs	r1, #5
 8005b42:	0018      	movs	r0, r3
 8005b44:	f7fa fc58 	bl	80003f8 <__aeabi_idivmod>
 8005b48:	000b      	movs	r3, r1
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	4b2c      	ldr	r3, [pc, #176]	; (8005c00 <updateAlarmState+0x250>)
 8005b4e:	705a      	strb	r2, [r3, #1]
			if (alarmVars.fieldBeingSet != 0) {
 8005b50:	4b2b      	ldr	r3, [pc, #172]	; (8005c00 <updateAlarmState+0x250>)
 8005b52:	785b      	ldrb	r3, [r3, #1]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d034      	beq.n	8005bc2 <updateAlarmState+0x212>
				alarmVars.isBeingSet = 1;
 8005b58:	4b29      	ldr	r3, [pc, #164]	; (8005c00 <updateAlarmState+0x250>)
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	701a      	strb	r2, [r3, #0]
				if (alarmVars.fieldBeingSet == 1) {
 8005b5e:	4b28      	ldr	r3, [pc, #160]	; (8005c00 <updateAlarmState+0x250>)
 8005b60:	785b      	ldrb	r3, [r3, #1]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d145      	bne.n	8005bf2 <updateAlarmState+0x242>
					struct dates d = {0};
 8005b66:	2510      	movs	r5, #16
 8005b68:	197b      	adds	r3, r7, r5
 8005b6a:	0018      	movs	r0, r3
 8005b6c:	2306      	movs	r3, #6
 8005b6e:	001a      	movs	r2, r3
 8005b70:	2100      	movs	r1, #0
 8005b72:	f005 ff20 	bl	800b9b6 <memset>
					struct times t = {0};
 8005b76:	240c      	movs	r4, #12
 8005b78:	193b      	adds	r3, r7, r4
 8005b7a:	0018      	movs	r0, r3
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	001a      	movs	r2, r3
 8005b80:	2100      	movs	r1, #0
 8005b82:	f005 ff18 	bl	800b9b6 <memset>
					getDateTime(&d, &t, hrtc);
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	0021      	movs	r1, r4
 8005b8a:	000c      	movs	r4, r1
 8005b8c:	1879      	adds	r1, r7, r1
 8005b8e:	197b      	adds	r3, r7, r5
 8005b90:	0018      	movs	r0, r3
 8005b92:	f7fd fd09 	bl	80035a8 <getDateTime>
					alarmVars.alarmToSet->sec = t.sec;
 8005b96:	4b1a      	ldr	r3, [pc, #104]	; (8005c00 <updateAlarmState+0x250>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	0021      	movs	r1, r4
 8005b9c:	187a      	adds	r2, r7, r1
 8005b9e:	7892      	ldrb	r2, [r2, #2]
 8005ba0:	709a      	strb	r2, [r3, #2]
					alarmVars.alarmToSet->min = t.min;
 8005ba2:	4b17      	ldr	r3, [pc, #92]	; (8005c00 <updateAlarmState+0x250>)
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	187a      	adds	r2, r7, r1
 8005ba8:	7852      	ldrb	r2, [r2, #1]
 8005baa:	705a      	strb	r2, [r3, #1]
					alarmVars.alarmToSet->hr = t.hr;
 8005bac:	4b14      	ldr	r3, [pc, #80]	; (8005c00 <updateAlarmState+0x250>)
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	187a      	adds	r2, r7, r1
 8005bb2:	7812      	ldrb	r2, [r2, #0]
 8005bb4:	701a      	strb	r2, [r3, #0]
					alarmVars.alarmToSet->weekday = d.weekday;
 8005bb6:	4b12      	ldr	r3, [pc, #72]	; (8005c00 <updateAlarmState+0x250>)
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	197a      	adds	r2, r7, r5
 8005bbc:	7912      	ldrb	r2, [r2, #4]
 8005bbe:	70da      	strb	r2, [r3, #3]
			// stop and clear alarm hw
			alarmVars.isSet = 0;
			HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);
		}
	}
}
 8005bc0:	e017      	b.n	8005bf2 <updateAlarmState+0x242>
				alarmVars.isBeingSet = 0;
 8005bc2:	4b0f      	ldr	r3, [pc, #60]	; (8005c00 <updateAlarmState+0x250>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	701a      	strb	r2, [r3, #0]
				alarmVars.isSet = 1;
 8005bc8:	4b0d      	ldr	r3, [pc, #52]	; (8005c00 <updateAlarmState+0x250>)
 8005bca:	2201      	movs	r2, #1
 8005bcc:	709a      	strb	r2, [r3, #2]
				setAlarm(alarmVars.alarmToSet, hrtc);
 8005bce:	4b0c      	ldr	r3, [pc, #48]	; (8005c00 <updateAlarmState+0x250>)
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	0011      	movs	r1, r2
 8005bd6:	0018      	movs	r0, r3
 8005bd8:	f7fd fabc 	bl	8003154 <setAlarm>
}
 8005bdc:	e009      	b.n	8005bf2 <updateAlarmState+0x242>
			alarmVars.isSet = 0;
 8005bde:	4b08      	ldr	r3, [pc, #32]	; (8005c00 <updateAlarmState+0x250>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	709a      	strb	r2, [r3, #2]
			HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);
 8005be4:	2380      	movs	r3, #128	; 0x80
 8005be6:	005a      	lsls	r2, r3, #1
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	0011      	movs	r1, r2
 8005bec:	0018      	movs	r0, r3
 8005bee:	f003 ff5f 	bl	8009ab0 <HAL_RTC_DeactivateAlarm>
}
 8005bf2:	46c0      	nop			; (mov r8, r8)
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	b006      	add	sp, #24
 8005bf8:	bdb0      	pop	{r4, r5, r7, pc}
 8005bfa:	46c0      	nop			; (mov r8, r8)
 8005bfc:	2000019c 	.word	0x2000019c
 8005c00:	20000130 	.word	0x20000130
 8005c04:	20000150 	.word	0x20000150

08005c08 <updateStopwatchState>:
 * in not running mode:
 *   button 2 starts stopwatch and moves to running mode
 *   button 3 captures stopwatch for lap
 *   button 4 clears stopwatch and returns to default mode
 */
void updateStopwatchState(TIM_HandleTypeDef *timerStopwatchTim) {
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
	// start/stop
	if (buttons.is2Pressed) {
 8005c10:	4b28      	ldr	r3, [pc, #160]	; (8005cb4 <updateStopwatchState+0xac>)
 8005c12:	785b      	ldrb	r3, [r3, #1]
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d01c      	beq.n	8005c54 <updateStopwatchState+0x4c>
		updateFace.stopwatch = 1;
 8005c1a:	4b27      	ldr	r3, [pc, #156]	; (8005cb8 <updateStopwatchState+0xb0>)
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	70da      	strb	r2, [r3, #3]

		if (isStopwatchRunning == 0) {
 8005c20:	4b26      	ldr	r3, [pc, #152]	; (8005cbc <updateStopwatchState+0xb4>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10a      	bne.n	8005c40 <updateStopwatchState+0x38>
			runStopwatch(timerStopwatchTim);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	0018      	movs	r0, r3
 8005c2e:	f7ff f8b7 	bl	8004da0 <runStopwatch>
			isStopwatchRunning = 1;
 8005c32:	4b22      	ldr	r3, [pc, #136]	; (8005cbc <updateStopwatchState+0xb4>)
 8005c34:	2201      	movs	r2, #1
 8005c36:	701a      	strb	r2, [r3, #0]
			isStopwatchPaused = 0;
 8005c38:	4b21      	ldr	r3, [pc, #132]	; (8005cc0 <updateStopwatchState+0xb8>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	701a      	strb	r2, [r3, #0]
 8005c3e:	e009      	b.n	8005c54 <updateStopwatchState+0x4c>
		}
		else {
			pauseStopwatch(timerStopwatchTim);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	0018      	movs	r0, r3
 8005c44:	f7ff f914 	bl	8004e70 <pauseStopwatch>
			isStopwatchRunning = 0;
 8005c48:	4b1c      	ldr	r3, [pc, #112]	; (8005cbc <updateStopwatchState+0xb4>)
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	701a      	strb	r2, [r3, #0]
			isStopwatchPaused = 1;
 8005c4e:	4b1c      	ldr	r3, [pc, #112]	; (8005cc0 <updateStopwatchState+0xb8>)
 8005c50:	2201      	movs	r2, #1
 8005c52:	701a      	strb	r2, [r3, #0]
		}
	}
	if (buttons.is3Pressed && stopwatchCounter != 0) {
 8005c54:	4b17      	ldr	r3, [pc, #92]	; (8005cb4 <updateStopwatchState+0xac>)
 8005c56:	789b      	ldrb	r3, [r3, #2]
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00e      	beq.n	8005c7c <updateStopwatchState+0x74>
 8005c5e:	4b19      	ldr	r3, [pc, #100]	; (8005cc4 <updateStopwatchState+0xbc>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00a      	beq.n	8005c7c <updateStopwatchState+0x74>
		updateFace.stopwatch = 1;
 8005c66:	4b14      	ldr	r3, [pc, #80]	; (8005cb8 <updateStopwatchState+0xb0>)
 8005c68:	2201      	movs	r2, #1
 8005c6a:	70da      	strb	r2, [r3, #3]

		// pull data and set lap
		stopwatchVars.lapPrev = stopwatchVars.lapCurrent;
 8005c6c:	4b16      	ldr	r3, [pc, #88]	; (8005cc8 <updateStopwatchState+0xc0>)
 8005c6e:	685a      	ldr	r2, [r3, #4]
 8005c70:	4b15      	ldr	r3, [pc, #84]	; (8005cc8 <updateStopwatchState+0xc0>)
 8005c72:	601a      	str	r2, [r3, #0]
		stopwatchVars.lapCurrent = stopwatchCounter;
 8005c74:	4b13      	ldr	r3, [pc, #76]	; (8005cc4 <updateStopwatchState+0xbc>)
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	4b13      	ldr	r3, [pc, #76]	; (8005cc8 <updateStopwatchState+0xc0>)
 8005c7a:	605a      	str	r2, [r3, #4]
	}
	if (buttons.is4Pressed) {
 8005c7c:	4b0d      	ldr	r3, [pc, #52]	; (8005cb4 <updateStopwatchState+0xac>)
 8005c7e:	78db      	ldrb	r3, [r3, #3]
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d012      	beq.n	8005cac <updateStopwatchState+0xa4>
		updateFace.stopwatch = 1;
 8005c86:	4b0c      	ldr	r3, [pc, #48]	; (8005cb8 <updateStopwatchState+0xb0>)
 8005c88:	2201      	movs	r2, #1
 8005c8a:	70da      	strb	r2, [r3, #3]

		// clear stopwatch hw
		clearStopwatch(timerStopwatchTim);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	0018      	movs	r0, r3
 8005c90:	f7ff f902 	bl	8004e98 <clearStopwatch>
		stopwatchVars.lapCurrent = 0;
 8005c94:	4b0c      	ldr	r3, [pc, #48]	; (8005cc8 <updateStopwatchState+0xc0>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	605a      	str	r2, [r3, #4]
		stopwatchVars.lapPrev = 0;
 8005c9a:	4b0b      	ldr	r3, [pc, #44]	; (8005cc8 <updateStopwatchState+0xc0>)
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	601a      	str	r2, [r3, #0]
		isStopwatchRunning = 0;
 8005ca0:	4b06      	ldr	r3, [pc, #24]	; (8005cbc <updateStopwatchState+0xb4>)
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	701a      	strb	r2, [r3, #0]
		isStopwatchPaused = 0;
 8005ca6:	4b06      	ldr	r3, [pc, #24]	; (8005cc0 <updateStopwatchState+0xb8>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	701a      	strb	r2, [r3, #0]
	}
}
 8005cac:	46c0      	nop			; (mov r8, r8)
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	b002      	add	sp, #8
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	2000019c 	.word	0x2000019c
 8005cb8:	20000150 	.word	0x20000150
 8005cbc:	20000154 	.word	0x20000154
 8005cc0:	200001a1 	.word	0x200001a1
 8005cc4:	200001a4 	.word	0x200001a4
 8005cc8:	20000138 	.word	0x20000138

08005ccc <updateDisplay>:

// primary function for making changes to display
void updateDisplay(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
	// change faces
	if (isFaceBeingChanged == 1) {
 8005cd6:	4b7a      	ldr	r3, [pc, #488]	; (8005ec0 <updateDisplay+0x1f4>)
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d160      	bne.n	8005da0 <updateDisplay+0xd4>
		isFaceBeingChanged = 0;
 8005cde:	4b78      	ldr	r3, [pc, #480]	; (8005ec0 <updateDisplay+0x1f4>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	701a      	strb	r2, [r3, #0]

		// drawing titles and boxes that won't be rewritten during normal operation within
		// a specific face (titles and buttons)
		if (faceOnDisplay == faceClock) {
 8005ce4:	4b77      	ldr	r3, [pc, #476]	; (8005ec4 <updateDisplay+0x1f8>)
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10b      	bne.n	8005d04 <updateDisplay+0x38>
			clearScreen(ST77XX_CYAN, hspi);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	4a76      	ldr	r2, [pc, #472]	; (8005ec8 <updateDisplay+0x1fc>)
 8005cf0:	0019      	movs	r1, r3
 8005cf2:	0010      	movs	r0, r2
 8005cf4:	f7fc fb3c 	bl	8002370 <clearScreen>
			drawTitle("clock", hspi);
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	4b74      	ldr	r3, [pc, #464]	; (8005ecc <updateDisplay+0x200>)
 8005cfc:	0011      	movs	r1, r2
 8005cfe:	0018      	movs	r0, r3
 8005d00:	f000 fc3a 	bl	8006578 <drawTitle>
		}
		if (faceOnDisplay == faceTimer) {
 8005d04:	4b6f      	ldr	r3, [pc, #444]	; (8005ec4 <updateDisplay+0x1f8>)
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d112      	bne.n	8005d32 <updateDisplay+0x66>
			clearScreen(ST77XX_GREEN, hspi);
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	23fc      	movs	r3, #252	; 0xfc
 8005d10:	00db      	lsls	r3, r3, #3
 8005d12:	0011      	movs	r1, r2
 8005d14:	0018      	movs	r0, r3
 8005d16:	f7fc fb2b 	bl	8002370 <clearScreen>
			drawTopClock(hrtc, hspi);
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	0011      	movs	r1, r2
 8005d20:	0018      	movs	r0, r3
 8005d22:	f000 fdd1 	bl	80068c8 <drawTopClock>
			drawTitle("timer", hspi);
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	4b69      	ldr	r3, [pc, #420]	; (8005ed0 <updateDisplay+0x204>)
 8005d2a:	0011      	movs	r1, r2
 8005d2c:	0018      	movs	r0, r3
 8005d2e:	f000 fc23 	bl	8006578 <drawTitle>
		}
		if (faceOnDisplay == faceAlarm) {
 8005d32:	4b64      	ldr	r3, [pc, #400]	; (8005ec4 <updateDisplay+0x1f8>)
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d111      	bne.n	8005d5e <updateDisplay+0x92>
			clearScreen(ST77XX_MAGENTA, hspi);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	4a65      	ldr	r2, [pc, #404]	; (8005ed4 <updateDisplay+0x208>)
 8005d3e:	0019      	movs	r1, r3
 8005d40:	0010      	movs	r0, r2
 8005d42:	f7fc fb15 	bl	8002370 <clearScreen>
			drawTopClock(hrtc, hspi);
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	0011      	movs	r1, r2
 8005d4c:	0018      	movs	r0, r3
 8005d4e:	f000 fdbb 	bl	80068c8 <drawTopClock>
			drawTitle("alarm", hspi);
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	4b60      	ldr	r3, [pc, #384]	; (8005ed8 <updateDisplay+0x20c>)
 8005d56:	0011      	movs	r1, r2
 8005d58:	0018      	movs	r0, r3
 8005d5a:	f000 fc0d 	bl	8006578 <drawTitle>
		}
		if (faceOnDisplay == faceStopwatch) {
 8005d5e:	4b59      	ldr	r3, [pc, #356]	; (8005ec4 <updateDisplay+0x1f8>)
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	2b03      	cmp	r3, #3
 8005d64:	d111      	bne.n	8005d8a <updateDisplay+0xbe>
			clearScreen(ST77XX_YELLOW, hspi);
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	4a5c      	ldr	r2, [pc, #368]	; (8005edc <updateDisplay+0x210>)
 8005d6a:	0019      	movs	r1, r3
 8005d6c:	0010      	movs	r0, r2
 8005d6e:	f7fc faff 	bl	8002370 <clearScreen>
			drawTopClock(hrtc, hspi);
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	0011      	movs	r1, r2
 8005d78:	0018      	movs	r0, r3
 8005d7a:	f000 fda5 	bl	80068c8 <drawTopClock>
			drawTitle("stopwatch", hspi);
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	4b57      	ldr	r3, [pc, #348]	; (8005ee0 <updateDisplay+0x214>)
 8005d82:	0011      	movs	r1, r2
 8005d84:	0018      	movs	r0, r3
 8005d86:	f000 fbf7 	bl	8006578 <drawTitle>
		}

		drawBattery(battPercentage, hspi);
 8005d8a:	4b56      	ldr	r3, [pc, #344]	; (8005ee4 <updateDisplay+0x218>)
 8005d8c:	881b      	ldrh	r3, [r3, #0]
 8005d8e:	683a      	ldr	r2, [r7, #0]
 8005d90:	0011      	movs	r1, r2
 8005d92:	0018      	movs	r0, r3
 8005d94:	f000 fc64 	bl	8006660 <drawBattery>
		drawButtons(hspi);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	0018      	movs	r0, r3
 8005d9c:	f000 fba6 	bl	80064ec <drawButtons>
	}


	if (updateFace.clock || updateFace.timer || updateFace.alarm || updateFace.stopwatch) {
 8005da0:	4b51      	ldr	r3, [pc, #324]	; (8005ee8 <updateDisplay+0x21c>)
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10f      	bne.n	8005dca <updateDisplay+0xfe>
 8005daa:	4b4f      	ldr	r3, [pc, #316]	; (8005ee8 <updateDisplay+0x21c>)
 8005dac:	785b      	ldrb	r3, [r3, #1]
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10a      	bne.n	8005dca <updateDisplay+0xfe>
 8005db4:	4b4c      	ldr	r3, [pc, #304]	; (8005ee8 <updateDisplay+0x21c>)
 8005db6:	789b      	ldrb	r3, [r3, #2]
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d105      	bne.n	8005dca <updateDisplay+0xfe>
 8005dbe:	4b4a      	ldr	r3, [pc, #296]	; (8005ee8 <updateDisplay+0x21c>)
 8005dc0:	78db      	ldrb	r3, [r3, #3]
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d100      	bne.n	8005dca <updateDisplay+0xfe>
 8005dc8:	e076      	b.n	8005eb8 <updateDisplay+0x1ec>
		// update clock face
		if (faceOnDisplay == faceClock) {
 8005dca:	4b3e      	ldr	r3, [pc, #248]	; (8005ec4 <updateDisplay+0x1f8>)
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10f      	bne.n	8005df2 <updateDisplay+0x126>
			if (updateFace.clock == 1) {
 8005dd2:	4b45      	ldr	r3, [pc, #276]	; (8005ee8 <updateDisplay+0x21c>)
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d161      	bne.n	8005ea0 <updateDisplay+0x1d4>
				setBackgroundColor(ST77XX_CYAN);
 8005ddc:	4b3a      	ldr	r3, [pc, #232]	; (8005ec8 <updateDisplay+0x1fc>)
 8005dde:	0018      	movs	r0, r3
 8005de0:	f7fd f806 	bl	8002df0 <setBackgroundColor>
				updateClockDisplay(hrtc, hspi);
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	0011      	movs	r1, r2
 8005dea:	0018      	movs	r0, r3
 8005dec:	f000 f87e 	bl	8005eec <updateClockDisplay>
 8005df0:	e056      	b.n	8005ea0 <updateDisplay+0x1d4>
			}
		}
		// update timer face
		else if (faceOnDisplay == faceTimer) {
 8005df2:	4b34      	ldr	r3, [pc, #208]	; (8005ec4 <updateDisplay+0x1f8>)
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d119      	bne.n	8005e2e <updateDisplay+0x162>
			if (updateFace.timer == 1) {
 8005dfa:	4b3b      	ldr	r3, [pc, #236]	; (8005ee8 <updateDisplay+0x21c>)
 8005dfc:	785b      	ldrb	r3, [r3, #1]
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d108      	bne.n	8005e16 <updateDisplay+0x14a>
				setBackgroundColor(ST77XX_GREEN);
 8005e04:	23fc      	movs	r3, #252	; 0xfc
 8005e06:	00db      	lsls	r3, r3, #3
 8005e08:	0018      	movs	r0, r3
 8005e0a:	f7fc fff1 	bl	8002df0 <setBackgroundColor>
				updateTimerDisplay(hspi);
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	0018      	movs	r0, r3
 8005e12:	f000 f915 	bl	8006040 <updateTimerDisplay>
			}
			if (updateFace.clock == 1) drawTopClock(hrtc, hspi);
 8005e16:	4b34      	ldr	r3, [pc, #208]	; (8005ee8 <updateDisplay+0x21c>)
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d13f      	bne.n	8005ea0 <updateDisplay+0x1d4>
 8005e20:	683a      	ldr	r2, [r7, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	0011      	movs	r1, r2
 8005e26:	0018      	movs	r0, r3
 8005e28:	f000 fd4e 	bl	80068c8 <drawTopClock>
 8005e2c:	e038      	b.n	8005ea0 <updateDisplay+0x1d4>
		}
		// update alarm face
		else if (faceOnDisplay == faceAlarm) {
 8005e2e:	4b25      	ldr	r3, [pc, #148]	; (8005ec4 <updateDisplay+0x1f8>)
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d118      	bne.n	8005e68 <updateDisplay+0x19c>
			if (updateFace.alarm == 1) {
 8005e36:	4b2c      	ldr	r3, [pc, #176]	; (8005ee8 <updateDisplay+0x21c>)
 8005e38:	789b      	ldrb	r3, [r3, #2]
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d107      	bne.n	8005e50 <updateDisplay+0x184>
				setBackgroundColor(ST77XX_MAGENTA);
 8005e40:	4b24      	ldr	r3, [pc, #144]	; (8005ed4 <updateDisplay+0x208>)
 8005e42:	0018      	movs	r0, r3
 8005e44:	f7fc ffd4 	bl	8002df0 <setBackgroundColor>
				updateAlarmDisplay(hspi);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	0018      	movs	r0, r3
 8005e4c:	f000 f9f8 	bl	8006240 <updateAlarmDisplay>
			}
			if (updateFace.clock == 1) drawTopClock(hrtc, hspi);
 8005e50:	4b25      	ldr	r3, [pc, #148]	; (8005ee8 <updateDisplay+0x21c>)
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d122      	bne.n	8005ea0 <updateDisplay+0x1d4>
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	0011      	movs	r1, r2
 8005e60:	0018      	movs	r0, r3
 8005e62:	f000 fd31 	bl	80068c8 <drawTopClock>
 8005e66:	e01b      	b.n	8005ea0 <updateDisplay+0x1d4>
		}
		// update stopwatch face
		else if (faceOnDisplay == faceStopwatch) {
 8005e68:	4b16      	ldr	r3, [pc, #88]	; (8005ec4 <updateDisplay+0x1f8>)
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	2b03      	cmp	r3, #3
 8005e6e:	d117      	bne.n	8005ea0 <updateDisplay+0x1d4>
			if (updateFace.stopwatch == 1) {
 8005e70:	4b1d      	ldr	r3, [pc, #116]	; (8005ee8 <updateDisplay+0x21c>)
 8005e72:	78db      	ldrb	r3, [r3, #3]
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d107      	bne.n	8005e8a <updateDisplay+0x1be>
				setBackgroundColor(ST77XX_YELLOW);
 8005e7a:	4b18      	ldr	r3, [pc, #96]	; (8005edc <updateDisplay+0x210>)
 8005e7c:	0018      	movs	r0, r3
 8005e7e:	f7fc ffb7 	bl	8002df0 <setBackgroundColor>
				updateStopwatchDisplay(hspi);
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	0018      	movs	r0, r3
 8005e86:	f000 faa9 	bl	80063dc <updateStopwatchDisplay>
			}
			if (updateFace.clock == 1) drawTopClock(hrtc, hspi);
 8005e8a:	4b17      	ldr	r3, [pc, #92]	; (8005ee8 <updateDisplay+0x21c>)
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d105      	bne.n	8005ea0 <updateDisplay+0x1d4>
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	0011      	movs	r1, r2
 8005e9a:	0018      	movs	r0, r3
 8005e9c:	f000 fd14 	bl	80068c8 <drawTopClock>
		}

		updateFace.clock = updateFace.timer = updateFace.alarm = updateFace.stopwatch = 0;
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	4b11      	ldr	r3, [pc, #68]	; (8005ee8 <updateDisplay+0x21c>)
 8005ea4:	1c11      	adds	r1, r2, #0
 8005ea6:	70d9      	strb	r1, [r3, #3]
 8005ea8:	4b0f      	ldr	r3, [pc, #60]	; (8005ee8 <updateDisplay+0x21c>)
 8005eaa:	1c11      	adds	r1, r2, #0
 8005eac:	7099      	strb	r1, [r3, #2]
 8005eae:	4b0e      	ldr	r3, [pc, #56]	; (8005ee8 <updateDisplay+0x21c>)
 8005eb0:	1c11      	adds	r1, r2, #0
 8005eb2:	7059      	strb	r1, [r3, #1]
 8005eb4:	4b0c      	ldr	r3, [pc, #48]	; (8005ee8 <updateDisplay+0x21c>)
 8005eb6:	701a      	strb	r2, [r3, #0]
	}
}
 8005eb8:	46c0      	nop			; (mov r8, r8)
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	b002      	add	sp, #8
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	20000068 	.word	0x20000068
 8005ec4:	20000140 	.word	0x20000140
 8005ec8:	000007ff 	.word	0x000007ff
 8005ecc:	0800c2e8 	.word	0x0800c2e8
 8005ed0:	0800c2f0 	.word	0x0800c2f0
 8005ed4:	0000f81f 	.word	0x0000f81f
 8005ed8:	0800c2f8 	.word	0x0800c2f8
 8005edc:	0000ffe0 	.word	0x0000ffe0
 8005ee0:	0800c300 	.word	0x0800c300
 8005ee4:	2000014c 	.word	0x2000014c
 8005ee8:	20000150 	.word	0x20000150

08005eec <updateClockDisplay>:

// helper function for drawing all elements for clock display
void updateClockDisplay(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 8005eec:	b5b0      	push	{r4, r5, r7, lr}
 8005eee:	b088      	sub	sp, #32
 8005ef0:	af02      	add	r7, sp, #8
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
	struct dates currentDate = {0};
 8005ef6:	2310      	movs	r3, #16
 8005ef8:	18fb      	adds	r3, r7, r3
 8005efa:	0018      	movs	r0, r3
 8005efc:	2306      	movs	r3, #6
 8005efe:	001a      	movs	r2, r3
 8005f00:	2100      	movs	r1, #0
 8005f02:	f005 fd58 	bl	800b9b6 <memset>
	struct times currentTime = {0};
 8005f06:	230c      	movs	r3, #12
 8005f08:	18fb      	adds	r3, r7, r3
 8005f0a:	0018      	movs	r0, r3
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	001a      	movs	r2, r3
 8005f10:	2100      	movs	r1, #0
 8005f12:	f005 fd50 	bl	800b9b6 <memset>

	setTextColor(ST77XX_BLACK);
 8005f16:	2000      	movs	r0, #0
 8005f18:	f7fc ffa4 	bl	8002e64 <setTextColor>
	if (clockVars.isBeingSet == 0) {
 8005f1c:	4b3c      	ldr	r3, [pc, #240]	; (8006010 <updateClockDisplay+0x124>)
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d11c      	bne.n	8005f5e <updateClockDisplay+0x72>
		getDateTime(&currentDate, &currentTime, hrtc);
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	240c      	movs	r4, #12
 8005f28:	1939      	adds	r1, r7, r4
 8005f2a:	2510      	movs	r5, #16
 8005f2c:	197b      	adds	r3, r7, r5
 8005f2e:	0018      	movs	r0, r3
 8005f30:	f7fd fb3a 	bl	80035a8 <getDateTime>
		drawClock(&currentDate, &currentTime, hspi);
 8005f34:	683a      	ldr	r2, [r7, #0]
 8005f36:	1939      	adds	r1, r7, r4
 8005f38:	197b      	adds	r3, r7, r5
 8005f3a:	0018      	movs	r0, r3
 8005f3c:	f000 fc2a 	bl	8006794 <drawClock>

		setTextSize(1);
 8005f40:	2001      	movs	r0, #1
 8005f42:	f7fc ff7f 	bl	8002e44 <setTextSize>
		// clear line that says "setting ___"
		clearTextLine(44, hspi);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	0019      	movs	r1, r3
 8005f4a:	202c      	movs	r0, #44	; 0x2c
 8005f4c:	f7fc ff30 	bl	8002db0 <clearTextLine>

		// draw button text
		drawButtonText("", "", "set", hspi);
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	4a30      	ldr	r2, [pc, #192]	; (8006014 <updateClockDisplay+0x128>)
 8005f54:	4930      	ldr	r1, [pc, #192]	; (8006018 <updateClockDisplay+0x12c>)
 8005f56:	4830      	ldr	r0, [pc, #192]	; (8006018 <updateClockDisplay+0x12c>)
 8005f58:	f000 fae2 	bl	8006520 <drawButtonText>
			default: break;
		}

		drawClock(clockVars.dateToSet, clockVars.timeToSet, hspi);
	}
}
 8005f5c:	e054      	b.n	8006008 <updateClockDisplay+0x11c>
	else if (clockVars.isBeingSet == 1) {
 8005f5e:	4b2c      	ldr	r3, [pc, #176]	; (8006010 <updateClockDisplay+0x124>)
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d150      	bne.n	8006008 <updateClockDisplay+0x11c>
		if (clockVars.fieldBeingSet == 1) drawButtonText("up", "down", "change", hspi);
 8005f66:	4b2a      	ldr	r3, [pc, #168]	; (8006010 <updateClockDisplay+0x124>)
 8005f68:	785b      	ldrb	r3, [r3, #1]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d105      	bne.n	8005f7a <updateClockDisplay+0x8e>
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	4a2a      	ldr	r2, [pc, #168]	; (800601c <updateClockDisplay+0x130>)
 8005f72:	492b      	ldr	r1, [pc, #172]	; (8006020 <updateClockDisplay+0x134>)
 8005f74:	482b      	ldr	r0, [pc, #172]	; (8006024 <updateClockDisplay+0x138>)
 8005f76:	f000 fad3 	bl	8006520 <drawButtonText>
		setTextSize(1);
 8005f7a:	2001      	movs	r0, #1
 8005f7c:	f7fc ff62 	bl	8002e44 <setTextSize>
		switch (clockVars.fieldBeingSet) {
 8005f80:	4b23      	ldr	r3, [pc, #140]	; (8006010 <updateClockDisplay+0x124>)
 8005f82:	785b      	ldrb	r3, [r3, #1]
 8005f84:	2b05      	cmp	r3, #5
 8005f86:	d836      	bhi.n	8005ff6 <updateClockDisplay+0x10a>
 8005f88:	009a      	lsls	r2, r3, #2
 8005f8a:	4b27      	ldr	r3, [pc, #156]	; (8006028 <updateClockDisplay+0x13c>)
 8005f8c:	18d3      	adds	r3, r2, r3
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	469f      	mov	pc, r3
			case 1:	drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting minute...", hspi); break;
 8005f92:	4a26      	ldr	r2, [pc, #152]	; (800602c <updateClockDisplay+0x140>)
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	9300      	str	r3, [sp, #0]
 8005f98:	0013      	movs	r3, r2
 8005f9a:	2211      	movs	r2, #17
 8005f9c:	212c      	movs	r1, #44	; 0x2c
 8005f9e:	2040      	movs	r0, #64	; 0x40
 8005fa0:	f7fc fe2e 	bl	8002c00 <drawCenteredTextWithPadding>
 8005fa4:	e028      	b.n	8005ff8 <updateClockDisplay+0x10c>
			case 2:	drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting hour...", hspi);	break;
 8005fa6:	4a22      	ldr	r2, [pc, #136]	; (8006030 <updateClockDisplay+0x144>)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	0013      	movs	r3, r2
 8005fae:	2211      	movs	r2, #17
 8005fb0:	212c      	movs	r1, #44	; 0x2c
 8005fb2:	2040      	movs	r0, #64	; 0x40
 8005fb4:	f7fc fe24 	bl	8002c00 <drawCenteredTextWithPadding>
 8005fb8:	e01e      	b.n	8005ff8 <updateClockDisplay+0x10c>
			case 3: drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting year...", hspi); break;
 8005fba:	4a1e      	ldr	r2, [pc, #120]	; (8006034 <updateClockDisplay+0x148>)
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	0013      	movs	r3, r2
 8005fc2:	2211      	movs	r2, #17
 8005fc4:	212c      	movs	r1, #44	; 0x2c
 8005fc6:	2040      	movs	r0, #64	; 0x40
 8005fc8:	f7fc fe1a 	bl	8002c00 <drawCenteredTextWithPadding>
 8005fcc:	e014      	b.n	8005ff8 <updateClockDisplay+0x10c>
			case 4: drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting month...", hspi); break;
 8005fce:	4a1a      	ldr	r2, [pc, #104]	; (8006038 <updateClockDisplay+0x14c>)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	0013      	movs	r3, r2
 8005fd6:	2211      	movs	r2, #17
 8005fd8:	212c      	movs	r1, #44	; 0x2c
 8005fda:	2040      	movs	r0, #64	; 0x40
 8005fdc:	f7fc fe10 	bl	8002c00 <drawCenteredTextWithPadding>
 8005fe0:	e00a      	b.n	8005ff8 <updateClockDisplay+0x10c>
			case 5: drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting date...", hspi); break;
 8005fe2:	4a16      	ldr	r2, [pc, #88]	; (800603c <updateClockDisplay+0x150>)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	0013      	movs	r3, r2
 8005fea:	2211      	movs	r2, #17
 8005fec:	212c      	movs	r1, #44	; 0x2c
 8005fee:	2040      	movs	r0, #64	; 0x40
 8005ff0:	f7fc fe06 	bl	8002c00 <drawCenteredTextWithPadding>
 8005ff4:	e000      	b.n	8005ff8 <updateClockDisplay+0x10c>
			default: break;
 8005ff6:	46c0      	nop			; (mov r8, r8)
		drawClock(clockVars.dateToSet, clockVars.timeToSet, hspi);
 8005ff8:	4b05      	ldr	r3, [pc, #20]	; (8006010 <updateClockDisplay+0x124>)
 8005ffa:	6858      	ldr	r0, [r3, #4]
 8005ffc:	4b04      	ldr	r3, [pc, #16]	; (8006010 <updateClockDisplay+0x124>)
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	0019      	movs	r1, r3
 8006004:	f000 fbc6 	bl	8006794 <drawClock>
}
 8006008:	46c0      	nop			; (mov r8, r8)
 800600a:	46bd      	mov	sp, r7
 800600c:	b006      	add	sp, #24
 800600e:	bdb0      	pop	{r4, r5, r7, pc}
 8006010:	2000011c 	.word	0x2000011c
 8006014:	0800c30c 	.word	0x0800c30c
 8006018:	0800c26c 	.word	0x0800c26c
 800601c:	0800c310 	.word	0x0800c310
 8006020:	0800c318 	.word	0x0800c318
 8006024:	0800c320 	.word	0x0800c320
 8006028:	0800ce0c 	.word	0x0800ce0c
 800602c:	0800c324 	.word	0x0800c324
 8006030:	0800c338 	.word	0x0800c338
 8006034:	0800c348 	.word	0x0800c348
 8006038:	0800c358 	.word	0x0800c358
 800603c:	0800c36c 	.word	0x0800c36c

08006040 <updateTimerDisplay>:

// helper function for drawing all elements for timer display
void updateTimerDisplay(SPI_HandleTypeDef *hspi) {
 8006040:	b590      	push	{r4, r7, lr}
 8006042:	b087      	sub	sp, #28
 8006044:	af02      	add	r7, sp, #8
 8006046:	6078      	str	r0, [r7, #4]
	struct times currentTimer = {0};
 8006048:	230c      	movs	r3, #12
 800604a:	18fb      	adds	r3, r7, r3
 800604c:	0018      	movs	r0, r3
 800604e:	2303      	movs	r3, #3
 8006050:	001a      	movs	r2, r3
 8006052:	2100      	movs	r1, #0
 8006054:	f005 fcaf 	bl	800b9b6 <memset>

	setTextColor(ST77XX_BLACK);
 8006058:	2000      	movs	r0, #0
 800605a:	f7fc ff03 	bl	8002e64 <setTextColor>
	if (timerVars.isBeingSet == 0) {
 800605e:	4b64      	ldr	r3, [pc, #400]	; (80061f0 <updateTimerDisplay+0x1b0>)
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d000      	beq.n	8006068 <updateTimerDisplay+0x28>
 8006066:	e087      	b.n	8006178 <updateTimerDisplay+0x138>
		if (timerVars.isSet == 0) {
 8006068:	4b61      	ldr	r3, [pc, #388]	; (80061f0 <updateTimerDisplay+0x1b0>)
 800606a:	789b      	ldrb	r3, [r3, #2]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d11f      	bne.n	80060b0 <updateTimerDisplay+0x70>
			setTextSize(2);
 8006070:	2002      	movs	r0, #2
 8006072:	f7fc fee7 	bl	8002e44 <setTextSize>
			clearTextLine(68, hspi);	// clear timer time text
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	0019      	movs	r1, r3
 800607a:	2044      	movs	r0, #68	; 0x44
 800607c:	f7fc fe98 	bl	8002db0 <clearTextLine>

			// write "timer unset"
			setTextSize(1);
 8006080:	2001      	movs	r0, #1
 8006082:	f7fc fedf 	bl	8002e44 <setTextSize>
			clearTextLine(52, hspi);	// clear setting ___ text
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	0019      	movs	r1, r3
 800608a:	2034      	movs	r0, #52	; 0x34
 800608c:	f7fc fe90 	bl	8002db0 <clearTextLine>
			drawCenteredTextWithPadding(WIDTH/2, 84, 12, "timer unset", hspi);
 8006090:	4a58      	ldr	r2, [pc, #352]	; (80061f4 <updateTimerDisplay+0x1b4>)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	0013      	movs	r3, r2
 8006098:	220c      	movs	r2, #12
 800609a:	2154      	movs	r1, #84	; 0x54
 800609c:	2040      	movs	r0, #64	; 0x40
 800609e:	f7fc fdaf 	bl	8002c00 <drawCenteredTextWithPadding>

			// draw button text
			drawButtonText("", "", "set", hspi);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a54      	ldr	r2, [pc, #336]	; (80061f8 <updateTimerDisplay+0x1b8>)
 80060a6:	4955      	ldr	r1, [pc, #340]	; (80061fc <updateTimerDisplay+0x1bc>)
 80060a8:	4854      	ldr	r0, [pc, #336]	; (80061fc <updateTimerDisplay+0x1bc>)
 80060aa:	f000 fa39 	bl	8006520 <drawButtonText>
			default: break;
		}

		drawTimer(timerVars.timeToSet, hspi);
	}
}
 80060ae:	e09b      	b.n	80061e8 <updateTimerDisplay+0x1a8>
		else if (isTimerDone == 0) {
 80060b0:	4b53      	ldr	r3, [pc, #332]	; (8006200 <updateTimerDisplay+0x1c0>)
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d143      	bne.n	8006142 <updateTimerDisplay+0x102>
			secondsToTime(&currentTimer, timerCounter);
 80060ba:	4b52      	ldr	r3, [pc, #328]	; (8006204 <updateTimerDisplay+0x1c4>)
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	240c      	movs	r4, #12
 80060c0:	193b      	adds	r3, r7, r4
 80060c2:	0011      	movs	r1, r2
 80060c4:	0018      	movs	r0, r3
 80060c6:	f7fd fb2e 	bl	8003726 <secondsToTime>
			drawTimer(&currentTimer, hspi);
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	193b      	adds	r3, r7, r4
 80060ce:	0011      	movs	r1, r2
 80060d0:	0018      	movs	r0, r3
 80060d2:	f000 fc5b 	bl	800698c <drawTimer>
			setTextSize(1);
 80060d6:	2001      	movs	r0, #1
 80060d8:	f7fc feb4 	bl	8002e44 <setTextSize>
			clearTextLine(52, hspi);	// clear setting ___ text
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	0019      	movs	r1, r3
 80060e0:	2034      	movs	r0, #52	; 0x34
 80060e2:	f7fc fe65 	bl	8002db0 <clearTextLine>
			if (isTimerPaused == 1) {
 80060e6:	4b48      	ldr	r3, [pc, #288]	; (8006208 <updateTimerDisplay+0x1c8>)
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d109      	bne.n	8006104 <updateTimerDisplay+0xc4>
				drawCenteredTextWithPadding(WIDTH/2, 84, 12, "timer paused", hspi);
 80060f0:	4a46      	ldr	r2, [pc, #280]	; (800620c <updateTimerDisplay+0x1cc>)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	9300      	str	r3, [sp, #0]
 80060f6:	0013      	movs	r3, r2
 80060f8:	220c      	movs	r2, #12
 80060fa:	2154      	movs	r1, #84	; 0x54
 80060fc:	2040      	movs	r0, #64	; 0x40
 80060fe:	f7fc fd7f 	bl	8002c00 <drawCenteredTextWithPadding>
 8006102:	e017      	b.n	8006134 <updateTimerDisplay+0xf4>
			else if (isTimerRunning == 0 && timerCounter != 0) {
 8006104:	4b42      	ldr	r3, [pc, #264]	; (8006210 <updateTimerDisplay+0x1d0>)
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10d      	bne.n	800612a <updateTimerDisplay+0xea>
 800610e:	4b3d      	ldr	r3, [pc, #244]	; (8006204 <updateTimerDisplay+0x1c4>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d009      	beq.n	800612a <updateTimerDisplay+0xea>
				drawCenteredTextWithPadding(WIDTH/2, 84, 12, "timer set!", hspi);
 8006116:	4a3f      	ldr	r2, [pc, #252]	; (8006214 <updateTimerDisplay+0x1d4>)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	0013      	movs	r3, r2
 800611e:	220c      	movs	r2, #12
 8006120:	2154      	movs	r1, #84	; 0x54
 8006122:	2040      	movs	r0, #64	; 0x40
 8006124:	f7fc fd6c 	bl	8002c00 <drawCenteredTextWithPadding>
 8006128:	e004      	b.n	8006134 <updateTimerDisplay+0xf4>
				clearTextLine(84, hspi);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	0019      	movs	r1, r3
 800612e:	2054      	movs	r0, #84	; 0x54
 8006130:	f7fc fe3e 	bl	8002db0 <clearTextLine>
			drawButtonText("run", "pause", "clear", hspi);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a38      	ldr	r2, [pc, #224]	; (8006218 <updateTimerDisplay+0x1d8>)
 8006138:	4938      	ldr	r1, [pc, #224]	; (800621c <updateTimerDisplay+0x1dc>)
 800613a:	4839      	ldr	r0, [pc, #228]	; (8006220 <updateTimerDisplay+0x1e0>)
 800613c:	f000 f9f0 	bl	8006520 <drawButtonText>
}
 8006140:	e052      	b.n	80061e8 <updateTimerDisplay+0x1a8>
			secondsToTime(&currentTimer, timerCounter);
 8006142:	4b30      	ldr	r3, [pc, #192]	; (8006204 <updateTimerDisplay+0x1c4>)
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	240c      	movs	r4, #12
 8006148:	193b      	adds	r3, r7, r4
 800614a:	0011      	movs	r1, r2
 800614c:	0018      	movs	r0, r3
 800614e:	f7fd faea 	bl	8003726 <secondsToTime>
			drawTimer(&currentTimer, hspi);
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	193b      	adds	r3, r7, r4
 8006156:	0011      	movs	r1, r2
 8006158:	0018      	movs	r0, r3
 800615a:	f000 fc17 	bl	800698c <drawTimer>
			setTextSize(1);
 800615e:	2001      	movs	r0, #1
 8006160:	f7fc fe70 	bl	8002e44 <setTextSize>
			drawCenteredTextWithPadding(WIDTH/2, 84, 12, "timer done!", hspi);
 8006164:	4a2f      	ldr	r2, [pc, #188]	; (8006224 <updateTimerDisplay+0x1e4>)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	0013      	movs	r3, r2
 800616c:	220c      	movs	r2, #12
 800616e:	2154      	movs	r1, #84	; 0x54
 8006170:	2040      	movs	r0, #64	; 0x40
 8006172:	f7fc fd45 	bl	8002c00 <drawCenteredTextWithPadding>
}
 8006176:	e037      	b.n	80061e8 <updateTimerDisplay+0x1a8>
	else if (timerVars.isBeingSet == 1) {
 8006178:	4b1d      	ldr	r3, [pc, #116]	; (80061f0 <updateTimerDisplay+0x1b0>)
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d133      	bne.n	80061e8 <updateTimerDisplay+0x1a8>
		drawButtonText("up", "down", "change", hspi);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a29      	ldr	r2, [pc, #164]	; (8006228 <updateTimerDisplay+0x1e8>)
 8006184:	4929      	ldr	r1, [pc, #164]	; (800622c <updateTimerDisplay+0x1ec>)
 8006186:	482a      	ldr	r0, [pc, #168]	; (8006230 <updateTimerDisplay+0x1f0>)
 8006188:	f000 f9ca 	bl	8006520 <drawButtonText>
		switch (timerVars.fieldBeingSet) {
 800618c:	4b18      	ldr	r3, [pc, #96]	; (80061f0 <updateTimerDisplay+0x1b0>)
 800618e:	785b      	ldrb	r3, [r3, #1]
 8006190:	2b02      	cmp	r3, #2
 8006192:	d00e      	beq.n	80061b2 <updateTimerDisplay+0x172>
 8006194:	2b03      	cmp	r3, #3
 8006196:	d016      	beq.n	80061c6 <updateTimerDisplay+0x186>
 8006198:	2b01      	cmp	r3, #1
 800619a:	d000      	beq.n	800619e <updateTimerDisplay+0x15e>
			default: break;
 800619c:	e01d      	b.n	80061da <updateTimerDisplay+0x19a>
			case 1: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting second...", hspi); break;
 800619e:	4a25      	ldr	r2, [pc, #148]	; (8006234 <updateTimerDisplay+0x1f4>)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	0013      	movs	r3, r2
 80061a6:	2211      	movs	r2, #17
 80061a8:	2134      	movs	r1, #52	; 0x34
 80061aa:	2040      	movs	r0, #64	; 0x40
 80061ac:	f7fc fd28 	bl	8002c00 <drawCenteredTextWithPadding>
 80061b0:	e013      	b.n	80061da <updateTimerDisplay+0x19a>
			case 2: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting minute...", hspi); break;
 80061b2:	4a21      	ldr	r2, [pc, #132]	; (8006238 <updateTimerDisplay+0x1f8>)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	0013      	movs	r3, r2
 80061ba:	2211      	movs	r2, #17
 80061bc:	2134      	movs	r1, #52	; 0x34
 80061be:	2040      	movs	r0, #64	; 0x40
 80061c0:	f7fc fd1e 	bl	8002c00 <drawCenteredTextWithPadding>
 80061c4:	e009      	b.n	80061da <updateTimerDisplay+0x19a>
			case 3: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting hour...", hspi); break;
 80061c6:	4a1d      	ldr	r2, [pc, #116]	; (800623c <updateTimerDisplay+0x1fc>)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	0013      	movs	r3, r2
 80061ce:	2211      	movs	r2, #17
 80061d0:	2134      	movs	r1, #52	; 0x34
 80061d2:	2040      	movs	r0, #64	; 0x40
 80061d4:	f7fc fd14 	bl	8002c00 <drawCenteredTextWithPadding>
 80061d8:	46c0      	nop			; (mov r8, r8)
		drawTimer(timerVars.timeToSet, hspi);
 80061da:	4b05      	ldr	r3, [pc, #20]	; (80061f0 <updateTimerDisplay+0x1b0>)
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	0011      	movs	r1, r2
 80061e2:	0018      	movs	r0, r3
 80061e4:	f000 fbd2 	bl	800698c <drawTimer>
}
 80061e8:	46c0      	nop			; (mov r8, r8)
 80061ea:	46bd      	mov	sp, r7
 80061ec:	b005      	add	sp, #20
 80061ee:	bd90      	pop	{r4, r7, pc}
 80061f0:	20000128 	.word	0x20000128
 80061f4:	0800c37c 	.word	0x0800c37c
 80061f8:	0800c30c 	.word	0x0800c30c
 80061fc:	0800c26c 	.word	0x0800c26c
 8006200:	2000015c 	.word	0x2000015c
 8006204:	20000158 	.word	0x20000158
 8006208:	200001a2 	.word	0x200001a2
 800620c:	0800c388 	.word	0x0800c388
 8006210:	200001a0 	.word	0x200001a0
 8006214:	0800c398 	.word	0x0800c398
 8006218:	0800c3a4 	.word	0x0800c3a4
 800621c:	0800c3ac 	.word	0x0800c3ac
 8006220:	0800c3b4 	.word	0x0800c3b4
 8006224:	0800c3b8 	.word	0x0800c3b8
 8006228:	0800c310 	.word	0x0800c310
 800622c:	0800c318 	.word	0x0800c318
 8006230:	0800c320 	.word	0x0800c320
 8006234:	0800c3c4 	.word	0x0800c3c4
 8006238:	0800c324 	.word	0x0800c324
 800623c:	0800c338 	.word	0x0800c338

08006240 <updateAlarmDisplay>:

// helper function for drawing all elements for alarm display
void updateAlarmDisplay(SPI_HandleTypeDef *hspi) {
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af02      	add	r7, sp, #8
 8006246:	6078      	str	r0, [r7, #4]
	setTextColor(ST77XX_BLACK);
 8006248:	2000      	movs	r0, #0
 800624a:	f7fc fe0b 	bl	8002e64 <setTextColor>
	if (alarmVars.isBeingSet == 0) {
 800624e:	4b54      	ldr	r3, [pc, #336]	; (80063a0 <updateAlarmDisplay+0x160>)
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d157      	bne.n	8006306 <updateAlarmDisplay+0xc6>
		setTextSize(1);
 8006256:	2001      	movs	r0, #1
 8006258:	f7fc fdf4 	bl	8002e44 <setTextSize>
		clearTextLine(52, hspi);	// clear "setting..." text
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	0019      	movs	r1, r3
 8006260:	2034      	movs	r0, #52	; 0x34
 8006262:	f7fc fda5 	bl	8002db0 <clearTextLine>
		clearTextLine(60, hspi);	// clear am/pm text
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	0019      	movs	r1, r3
 800626a:	203c      	movs	r0, #60	; 0x3c
 800626c:	f7fc fda0 	bl	8002db0 <clearTextLine>
		if (alarmVars.isSet == 0) {
 8006270:	4b4b      	ldr	r3, [pc, #300]	; (80063a0 <updateAlarmDisplay+0x160>)
 8006272:	789b      	ldrb	r3, [r3, #2]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d11a      	bne.n	80062ae <updateAlarmDisplay+0x6e>
			setTextSize(3);
 8006278:	2003      	movs	r0, #3
 800627a:	f7fc fde3 	bl	8002e44 <setTextSize>
			clearTextLine(68, hspi);	// clear alarm time text
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	0019      	movs	r1, r3
 8006282:	2044      	movs	r0, #68	; 0x44
 8006284:	f7fc fd94 	bl	8002db0 <clearTextLine>

			setTextSize(1);
 8006288:	2001      	movs	r0, #1
 800628a:	f7fc fddb 	bl	8002e44 <setTextSize>
			drawCenteredTextWithPadding(WIDTH/2, 100, 11, "alarm unset", hspi);
 800628e:	4a45      	ldr	r2, [pc, #276]	; (80063a4 <updateAlarmDisplay+0x164>)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	0013      	movs	r3, r2
 8006296:	220b      	movs	r2, #11
 8006298:	2164      	movs	r1, #100	; 0x64
 800629a:	2040      	movs	r0, #64	; 0x40
 800629c:	f7fc fcb0 	bl	8002c00 <drawCenteredTextWithPadding>

			// draw button text
			drawButtonText("", "", "set", hspi);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a41      	ldr	r2, [pc, #260]	; (80063a8 <updateAlarmDisplay+0x168>)
 80062a4:	4941      	ldr	r1, [pc, #260]	; (80063ac <updateAlarmDisplay+0x16c>)
 80062a6:	4841      	ldr	r0, [pc, #260]	; (80063ac <updateAlarmDisplay+0x16c>)
 80062a8:	f000 f93a 	bl	8006520 <drawButtonText>
		drawButtonText("up", "down", "change", hspi);

		// draw alarm
		drawAlarm(alarmVars.alarmToSet, hspi);
	}
}
 80062ac:	e074      	b.n	8006398 <updateAlarmDisplay+0x158>
		else if (isAlarmDone == 0) {
 80062ae:	4b40      	ldr	r3, [pc, #256]	; (80063b0 <updateAlarmDisplay+0x170>)
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d119      	bne.n	80062ec <updateAlarmDisplay+0xac>
			setTextSize(1);
 80062b8:	2001      	movs	r0, #1
 80062ba:	f7fc fdc3 	bl	8002e44 <setTextSize>
			drawCenteredTextWithPadding(WIDTH/2, 100, 11, "alarm set", hspi);
 80062be:	4a3d      	ldr	r2, [pc, #244]	; (80063b4 <updateAlarmDisplay+0x174>)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	0013      	movs	r3, r2
 80062c6:	220b      	movs	r2, #11
 80062c8:	2164      	movs	r1, #100	; 0x64
 80062ca:	2040      	movs	r0, #64	; 0x40
 80062cc:	f7fc fc98 	bl	8002c00 <drawCenteredTextWithPadding>
			drawAlarm(alarmVars.alarmToSet, hspi);
 80062d0:	4b33      	ldr	r3, [pc, #204]	; (80063a0 <updateAlarmDisplay+0x160>)
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	0011      	movs	r1, r2
 80062d8:	0018      	movs	r0, r3
 80062da:	f000 fb7d 	bl	80069d8 <drawAlarm>
			drawButtonText("", "", "clear", hspi);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a35      	ldr	r2, [pc, #212]	; (80063b8 <updateAlarmDisplay+0x178>)
 80062e2:	4932      	ldr	r1, [pc, #200]	; (80063ac <updateAlarmDisplay+0x16c>)
 80062e4:	4831      	ldr	r0, [pc, #196]	; (80063ac <updateAlarmDisplay+0x16c>)
 80062e6:	f000 f91b 	bl	8006520 <drawButtonText>
}
 80062ea:	e055      	b.n	8006398 <updateAlarmDisplay+0x158>
			setTextSize(1);
 80062ec:	2001      	movs	r0, #1
 80062ee:	f7fc fda9 	bl	8002e44 <setTextSize>
			drawCenteredTextWithPadding(WIDTH/2, 100, 11, "alarm done!", hspi);
 80062f2:	4a32      	ldr	r2, [pc, #200]	; (80063bc <updateAlarmDisplay+0x17c>)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	9300      	str	r3, [sp, #0]
 80062f8:	0013      	movs	r3, r2
 80062fa:	220b      	movs	r2, #11
 80062fc:	2164      	movs	r1, #100	; 0x64
 80062fe:	2040      	movs	r0, #64	; 0x40
 8006300:	f7fc fc7e 	bl	8002c00 <drawCenteredTextWithPadding>
}
 8006304:	e048      	b.n	8006398 <updateAlarmDisplay+0x158>
	else if (alarmVars.isBeingSet == 1) {
 8006306:	4b26      	ldr	r3, [pc, #152]	; (80063a0 <updateAlarmDisplay+0x160>)
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d144      	bne.n	8006398 <updateAlarmDisplay+0x158>
		setTextSize(1);
 800630e:	2001      	movs	r0, #1
 8006310:	f7fc fd98 	bl	8002e44 <setTextSize>
		switch (alarmVars.fieldBeingSet) {
 8006314:	4b22      	ldr	r3, [pc, #136]	; (80063a0 <updateAlarmDisplay+0x160>)
 8006316:	785b      	ldrb	r3, [r3, #1]
 8006318:	2b02      	cmp	r3, #2
 800631a:	d012      	beq.n	8006342 <updateAlarmDisplay+0x102>
 800631c:	dc02      	bgt.n	8006324 <updateAlarmDisplay+0xe4>
 800631e:	2b01      	cmp	r3, #1
 8006320:	d005      	beq.n	800632e <updateAlarmDisplay+0xee>
			default: break;
 8006322:	e02c      	b.n	800637e <updateAlarmDisplay+0x13e>
		switch (alarmVars.fieldBeingSet) {
 8006324:	2b03      	cmp	r3, #3
 8006326:	d016      	beq.n	8006356 <updateAlarmDisplay+0x116>
 8006328:	2b04      	cmp	r3, #4
 800632a:	d01e      	beq.n	800636a <updateAlarmDisplay+0x12a>
			default: break;
 800632c:	e027      	b.n	800637e <updateAlarmDisplay+0x13e>
			case 1: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting second...", hspi); break;
 800632e:	4a24      	ldr	r2, [pc, #144]	; (80063c0 <updateAlarmDisplay+0x180>)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	9300      	str	r3, [sp, #0]
 8006334:	0013      	movs	r3, r2
 8006336:	2211      	movs	r2, #17
 8006338:	2134      	movs	r1, #52	; 0x34
 800633a:	2040      	movs	r0, #64	; 0x40
 800633c:	f7fc fc60 	bl	8002c00 <drawCenteredTextWithPadding>
 8006340:	e01d      	b.n	800637e <updateAlarmDisplay+0x13e>
			case 2: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting minute...", hspi); break;
 8006342:	4a20      	ldr	r2, [pc, #128]	; (80063c4 <updateAlarmDisplay+0x184>)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	0013      	movs	r3, r2
 800634a:	2211      	movs	r2, #17
 800634c:	2134      	movs	r1, #52	; 0x34
 800634e:	2040      	movs	r0, #64	; 0x40
 8006350:	f7fc fc56 	bl	8002c00 <drawCenteredTextWithPadding>
 8006354:	e013      	b.n	800637e <updateAlarmDisplay+0x13e>
			case 3: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting hour...", hspi); break;
 8006356:	4a1c      	ldr	r2, [pc, #112]	; (80063c8 <updateAlarmDisplay+0x188>)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	0013      	movs	r3, r2
 800635e:	2211      	movs	r2, #17
 8006360:	2134      	movs	r1, #52	; 0x34
 8006362:	2040      	movs	r0, #64	; 0x40
 8006364:	f7fc fc4c 	bl	8002c00 <drawCenteredTextWithPadding>
 8006368:	e009      	b.n	800637e <updateAlarmDisplay+0x13e>
			case 4: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting day...", hspi); break;
 800636a:	4a18      	ldr	r2, [pc, #96]	; (80063cc <updateAlarmDisplay+0x18c>)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	9300      	str	r3, [sp, #0]
 8006370:	0013      	movs	r3, r2
 8006372:	2211      	movs	r2, #17
 8006374:	2134      	movs	r1, #52	; 0x34
 8006376:	2040      	movs	r0, #64	; 0x40
 8006378:	f7fc fc42 	bl	8002c00 <drawCenteredTextWithPadding>
 800637c:	46c0      	nop			; (mov r8, r8)
		drawButtonText("up", "down", "change", hspi);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a13      	ldr	r2, [pc, #76]	; (80063d0 <updateAlarmDisplay+0x190>)
 8006382:	4914      	ldr	r1, [pc, #80]	; (80063d4 <updateAlarmDisplay+0x194>)
 8006384:	4814      	ldr	r0, [pc, #80]	; (80063d8 <updateAlarmDisplay+0x198>)
 8006386:	f000 f8cb 	bl	8006520 <drawButtonText>
		drawAlarm(alarmVars.alarmToSet, hspi);
 800638a:	4b05      	ldr	r3, [pc, #20]	; (80063a0 <updateAlarmDisplay+0x160>)
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	0011      	movs	r1, r2
 8006392:	0018      	movs	r0, r3
 8006394:	f000 fb20 	bl	80069d8 <drawAlarm>
}
 8006398:	46c0      	nop			; (mov r8, r8)
 800639a:	46bd      	mov	sp, r7
 800639c:	b002      	add	sp, #8
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	20000130 	.word	0x20000130
 80063a4:	0800c3d8 	.word	0x0800c3d8
 80063a8:	0800c30c 	.word	0x0800c30c
 80063ac:	0800c26c 	.word	0x0800c26c
 80063b0:	2000014f 	.word	0x2000014f
 80063b4:	0800c3e4 	.word	0x0800c3e4
 80063b8:	0800c3a4 	.word	0x0800c3a4
 80063bc:	0800c3f0 	.word	0x0800c3f0
 80063c0:	0800c3c4 	.word	0x0800c3c4
 80063c4:	0800c324 	.word	0x0800c324
 80063c8:	0800c338 	.word	0x0800c338
 80063cc:	0800c3fc 	.word	0x0800c3fc
 80063d0:	0800c310 	.word	0x0800c310
 80063d4:	0800c318 	.word	0x0800c318
 80063d8:	0800c320 	.word	0x0800c320

080063dc <updateStopwatchDisplay>:

// helper function for drawing all elements for stopwatch display
void updateStopwatchDisplay(SPI_HandleTypeDef *hspi) {
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
	setTextColor(ST77XX_BLACK);
 80063e4:	2000      	movs	r0, #0
 80063e6:	f7fc fd3d 	bl	8002e64 <setTextColor>
	drawStopwatch(stopwatchCounter, hspi);
 80063ea:	4b16      	ldr	r3, [pc, #88]	; (8006444 <updateStopwatchDisplay+0x68>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	0011      	movs	r1, r2
 80063f2:	0018      	movs	r0, r3
 80063f4:	f000 fb60 	bl	8006ab8 <drawStopwatch>
	drawStopwatchLap(stopwatchVars.lapCurrent-stopwatchVars.lapPrev, hspi);
 80063f8:	4b13      	ldr	r3, [pc, #76]	; (8006448 <updateStopwatchDisplay+0x6c>)
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	4b12      	ldr	r3, [pc, #72]	; (8006448 <updateStopwatchDisplay+0x6c>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	0011      	movs	r1, r2
 8006406:	0018      	movs	r0, r3
 8006408:	f000 fb8e 	bl	8006b28 <drawStopwatchLap>

	if (isStopwatchRunning == 0) drawButtonText("run", "lap", "clear", hspi);
 800640c:	4b0f      	ldr	r3, [pc, #60]	; (800644c <updateStopwatchDisplay+0x70>)
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d106      	bne.n	8006424 <updateStopwatchDisplay+0x48>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a0d      	ldr	r2, [pc, #52]	; (8006450 <updateStopwatchDisplay+0x74>)
 800641a:	490e      	ldr	r1, [pc, #56]	; (8006454 <updateStopwatchDisplay+0x78>)
 800641c:	480e      	ldr	r0, [pc, #56]	; (8006458 <updateStopwatchDisplay+0x7c>)
 800641e:	f000 f87f 	bl	8006520 <drawButtonText>
	else if (isStopwatchRunning == 1) drawButtonText("pause", "lap", "clear", hspi);
}
 8006422:	e00a      	b.n	800643a <updateStopwatchDisplay+0x5e>
	else if (isStopwatchRunning == 1) drawButtonText("pause", "lap", "clear", hspi);
 8006424:	4b09      	ldr	r3, [pc, #36]	; (800644c <updateStopwatchDisplay+0x70>)
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	b2db      	uxtb	r3, r3
 800642a:	2b01      	cmp	r3, #1
 800642c:	d105      	bne.n	800643a <updateStopwatchDisplay+0x5e>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a07      	ldr	r2, [pc, #28]	; (8006450 <updateStopwatchDisplay+0x74>)
 8006432:	4908      	ldr	r1, [pc, #32]	; (8006454 <updateStopwatchDisplay+0x78>)
 8006434:	4809      	ldr	r0, [pc, #36]	; (800645c <updateStopwatchDisplay+0x80>)
 8006436:	f000 f873 	bl	8006520 <drawButtonText>
}
 800643a:	46c0      	nop			; (mov r8, r8)
 800643c:	46bd      	mov	sp, r7
 800643e:	b002      	add	sp, #8
 8006440:	bd80      	pop	{r7, pc}
 8006442:	46c0      	nop			; (mov r8, r8)
 8006444:	200001a4 	.word	0x200001a4
 8006448:	20000138 	.word	0x20000138
 800644c:	20000154 	.word	0x20000154
 8006450:	0800c3a4 	.word	0x0800c3a4
 8006454:	0800c40c 	.word	0x0800c40c
 8006458:	0800c3b4 	.word	0x0800c3b4
 800645c:	0800c3ac 	.word	0x0800c3ac

08006460 <drawButton>:

// ---- drawing functions related specifically to the user interface ----
// draws a 10x10 box representing a button onto the screen
void drawButton(uint8_t x_center, uint8_t y_center, SPI_HandleTypeDef *hspi) {
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af02      	add	r7, sp, #8
 8006466:	603a      	str	r2, [r7, #0]
 8006468:	1dfb      	adds	r3, r7, #7
 800646a:	1c02      	adds	r2, r0, #0
 800646c:	701a      	strb	r2, [r3, #0]
 800646e:	1dbb      	adds	r3, r7, #6
 8006470:	1c0a      	adds	r2, r1, #0
 8006472:	701a      	strb	r2, [r3, #0]
	// bounds checking. probably already done in draw/fillRect
	if (x_center-5 < 0 || x_center+5 > WIDTH || y_center-5 < 0 || y_center+5 > HEIGHT) return;
 8006474:	1dfb      	adds	r3, r7, #7
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	3b05      	subs	r3, #5
 800647a:	2b00      	cmp	r3, #0
 800647c:	db2f      	blt.n	80064de <drawButton+0x7e>
 800647e:	1dfb      	adds	r3, r7, #7
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	3305      	adds	r3, #5
 8006484:	2b80      	cmp	r3, #128	; 0x80
 8006486:	dc2a      	bgt.n	80064de <drawButton+0x7e>
 8006488:	1dbb      	adds	r3, r7, #6
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	3b05      	subs	r3, #5
 800648e:	2b00      	cmp	r3, #0
 8006490:	db25      	blt.n	80064de <drawButton+0x7e>
 8006492:	1dbb      	adds	r3, r7, #6
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	3305      	adds	r3, #5
 8006498:	2ba0      	cmp	r3, #160	; 0xa0
 800649a:	dc20      	bgt.n	80064de <drawButton+0x7e>

	// draw rect size 8 with 1 pixel border
	// parameters give center position of graphic
	drawRect(x_center-5, y_center-5, 10, 10, ST77XX_BLACK, hspi);
 800649c:	1dfb      	adds	r3, r7, #7
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	3b05      	subs	r3, #5
 80064a2:	b2d8      	uxtb	r0, r3
 80064a4:	1dbb      	adds	r3, r7, #6
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	3b05      	subs	r3, #5
 80064aa:	b2d9      	uxtb	r1, r3
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	9301      	str	r3, [sp, #4]
 80064b0:	2300      	movs	r3, #0
 80064b2:	9300      	str	r3, [sp, #0]
 80064b4:	230a      	movs	r3, #10
 80064b6:	220a      	movs	r2, #10
 80064b8:	f7fb fe9c 	bl	80021f4 <drawRect>
	fillRect(x_center-4, y_center-4, 8, 8, ST77XX_WHITE, hspi);
 80064bc:	1dfb      	adds	r3, r7, #7
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	3b04      	subs	r3, #4
 80064c2:	b2d8      	uxtb	r0, r3
 80064c4:	1dbb      	adds	r3, r7, #6
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	3b04      	subs	r3, #4
 80064ca:	b2d9      	uxtb	r1, r3
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	9301      	str	r3, [sp, #4]
 80064d0:	4b05      	ldr	r3, [pc, #20]	; (80064e8 <drawButton+0x88>)
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	2308      	movs	r3, #8
 80064d6:	2208      	movs	r2, #8
 80064d8:	f7fb fee4 	bl	80022a4 <fillRect>
 80064dc:	e000      	b.n	80064e0 <drawButton+0x80>
	if (x_center-5 < 0 || x_center+5 > WIDTH || y_center-5 < 0 || y_center+5 > HEIGHT) return;
 80064de:	46c0      	nop			; (mov r8, r8)
}
 80064e0:	46bd      	mov	sp, r7
 80064e2:	b002      	add	sp, #8
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	46c0      	nop			; (mov r8, r8)
 80064e8:	0000ffff 	.word	0x0000ffff

080064ec <drawButtons>:

// draws 3 buttons to represent important ui buttons and tell the user their action
void drawButtons(SPI_HandleTypeDef *hspi) {
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
	// 3 buttons. positioned so their text boxes, which are centered over button, can have equal spacing left and right
	drawButton(22, HEIGHT-15, hspi);		// button 1
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	001a      	movs	r2, r3
 80064f8:	2191      	movs	r1, #145	; 0x91
 80064fa:	2016      	movs	r0, #22
 80064fc:	f7ff ffb0 	bl	8006460 <drawButton>
	drawButton(64, HEIGHT-15, hspi);		// button 2
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	001a      	movs	r2, r3
 8006504:	2191      	movs	r1, #145	; 0x91
 8006506:	2040      	movs	r0, #64	; 0x40
 8006508:	f7ff ffaa 	bl	8006460 <drawButton>
	drawButton(106, HEIGHT-15, hspi);		// button 3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	001a      	movs	r2, r3
 8006510:	2191      	movs	r1, #145	; 0x91
 8006512:	206a      	movs	r0, #106	; 0x6a
 8006514:	f7ff ffa4 	bl	8006460 <drawButton>
}
 8006518:	46c0      	nop			; (mov r8, r8)
 800651a:	46bd      	mov	sp, r7
 800651c:	b002      	add	sp, #8
 800651e:	bd80      	pop	{r7, pc}

08006520 <drawButtonText>:

// draws text that goes a few pixels over the button
void drawButtonText(const char *str1, const char *str2, const char *str3, SPI_HandleTypeDef *hspi) {
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af02      	add	r7, sp, #8
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
 800652c:	603b      	str	r3, [r7, #0]
	setTextSize(1);
 800652e:	2001      	movs	r0, #1
 8006530:	f7fc fc88 	bl	8002e44 <setTextSize>
	setTextColor(ST77XX_BLACK);
 8006534:	2000      	movs	r0, #0
 8006536:	f7fc fc95 	bl	8002e64 <setTextColor>
	drawCenteredTextWithPadding(22, HEIGHT-28, 7, str1, hspi);		// button 1
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	0013      	movs	r3, r2
 8006542:	2207      	movs	r2, #7
 8006544:	2184      	movs	r1, #132	; 0x84
 8006546:	2016      	movs	r0, #22
 8006548:	f7fc fb5a 	bl	8002c00 <drawCenteredTextWithPadding>
	drawCenteredTextWithPadding(64, HEIGHT-28, 7, str2, hspi);		// button 2
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	9300      	str	r3, [sp, #0]
 8006552:	0013      	movs	r3, r2
 8006554:	2207      	movs	r2, #7
 8006556:	2184      	movs	r1, #132	; 0x84
 8006558:	2040      	movs	r0, #64	; 0x40
 800655a:	f7fc fb51 	bl	8002c00 <drawCenteredTextWithPadding>
	drawCenteredTextWithPadding(106, HEIGHT-28, 7, str3, hspi);		// button 3
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	9300      	str	r3, [sp, #0]
 8006564:	0013      	movs	r3, r2
 8006566:	2207      	movs	r2, #7
 8006568:	2184      	movs	r1, #132	; 0x84
 800656a:	206a      	movs	r0, #106	; 0x6a
 800656c:	f7fc fb48 	bl	8002c00 <drawCenteredTextWithPadding>
}
 8006570:	46c0      	nop			; (mov r8, r8)
 8006572:	46bd      	mov	sp, r7
 8006574:	b004      	add	sp, #16
 8006576:	bd80      	pop	{r7, pc}

08006578 <drawTitle>:

// draws big text on top of the display
void drawTitle(char *str, SPI_HandleTypeDef *hspi) {
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
	uint8_t strSize = strlen(str);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	0018      	movs	r0, r3
 8006586:	f7f9 fdbf 	bl	8000108 <strlen>
 800658a:	0002      	movs	r2, r0
 800658c:	210f      	movs	r1, #15
 800658e:	187b      	adds	r3, r7, r1
 8006590:	701a      	strb	r2, [r3, #0]

	// drawing title
	// bounds checking
	if (12*strSize < WIDTH) {			// about string size = 10 for width = 128
 8006592:	187b      	adds	r3, r7, r1
 8006594:	781a      	ldrb	r2, [r3, #0]
 8006596:	0013      	movs	r3, r2
 8006598:	005b      	lsls	r3, r3, #1
 800659a:	189b      	adds	r3, r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	2b7f      	cmp	r3, #127	; 0x7f
 80065a0:	dc14      	bgt.n	80065cc <drawTitle+0x54>
		setTextSize(2);
 80065a2:	2002      	movs	r0, #2
 80065a4:	f7fc fc4e 	bl	8002e44 <setTextSize>
		setCursor((WIDTH-12*strSize)/2, 10);
 80065a8:	230f      	movs	r3, #15
 80065aa:	18fb      	adds	r3, r7, r3
 80065ac:	781a      	ldrb	r2, [r3, #0]
 80065ae:	0013      	movs	r3, r2
 80065b0:	0092      	lsls	r2, r2, #2
 80065b2:	1a9b      	subs	r3, r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	3380      	adds	r3, #128	; 0x80
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	da00      	bge.n	80065be <drawTitle+0x46>
 80065bc:	3301      	adds	r3, #1
 80065be:	105b      	asrs	r3, r3, #1
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	210a      	movs	r1, #10
 80065c4:	0018      	movs	r0, r3
 80065c6:	f7fc fc23 	bl	8002e10 <setCursor>
 80065ca:	e039      	b.n	8006640 <drawTitle+0xc8>
	}
	else if (6*strSize < WIDTH) {		// about string size = 21 for width = 128
 80065cc:	230f      	movs	r3, #15
 80065ce:	18fb      	adds	r3, r7, r3
 80065d0:	781a      	ldrb	r2, [r3, #0]
 80065d2:	0013      	movs	r3, r2
 80065d4:	005b      	lsls	r3, r3, #1
 80065d6:	189b      	adds	r3, r3, r2
 80065d8:	005b      	lsls	r3, r3, #1
 80065da:	2b7f      	cmp	r3, #127	; 0x7f
 80065dc:	dc14      	bgt.n	8006608 <drawTitle+0x90>
		setTextSize(1);
 80065de:	2001      	movs	r0, #1
 80065e0:	f7fc fc30 	bl	8002e44 <setTextSize>
		setCursor((WIDTH-6*strSize)/2, 10);
 80065e4:	230f      	movs	r3, #15
 80065e6:	18fb      	adds	r3, r7, r3
 80065e8:	781a      	ldrb	r2, [r3, #0]
 80065ea:	0013      	movs	r3, r2
 80065ec:	0092      	lsls	r2, r2, #2
 80065ee:	1a9b      	subs	r3, r3, r2
 80065f0:	005b      	lsls	r3, r3, #1
 80065f2:	3380      	adds	r3, #128	; 0x80
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	da00      	bge.n	80065fa <drawTitle+0x82>
 80065f8:	3301      	adds	r3, #1
 80065fa:	105b      	asrs	r3, r3, #1
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	210a      	movs	r1, #10
 8006600:	0018      	movs	r0, r3
 8006602:	f7fc fc05 	bl	8002e10 <setCursor>
 8006606:	e01b      	b.n	8006640 <drawTitle+0xc8>
	}
	else {
		setTextSize(1);
 8006608:	2001      	movs	r0, #1
 800660a:	f7fc fc1b 	bl	8002e44 <setTextSize>
		sprintf(str, "it's too long");		// should not need to worry about null access, since this string is shorter than case above
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	4b12      	ldr	r3, [pc, #72]	; (800665c <drawTitle+0xe4>)
 8006612:	0010      	movs	r0, r2
 8006614:	0019      	movs	r1, r3
 8006616:	230e      	movs	r3, #14
 8006618:	001a      	movs	r2, r3
 800661a:	f005 f9c3 	bl	800b9a4 <memcpy>
		setCursor((WIDTH-6*strSize)/2, 10);
 800661e:	230f      	movs	r3, #15
 8006620:	18fb      	adds	r3, r7, r3
 8006622:	781a      	ldrb	r2, [r3, #0]
 8006624:	0013      	movs	r3, r2
 8006626:	0092      	lsls	r2, r2, #2
 8006628:	1a9b      	subs	r3, r3, r2
 800662a:	005b      	lsls	r3, r3, #1
 800662c:	3380      	adds	r3, #128	; 0x80
 800662e:	2b00      	cmp	r3, #0
 8006630:	da00      	bge.n	8006634 <drawTitle+0xbc>
 8006632:	3301      	adds	r3, #1
 8006634:	105b      	asrs	r3, r3, #1
 8006636:	b2db      	uxtb	r3, r3
 8006638:	210a      	movs	r1, #10
 800663a:	0018      	movs	r0, r3
 800663c:	f7fc fbe8 	bl	8002e10 <setCursor>
	}

	setTextColor(ST77XX_BLACK);
 8006640:	2000      	movs	r0, #0
 8006642:	f7fc fc0f 	bl	8002e64 <setTextColor>
	drawText(str, hspi);
 8006646:	683a      	ldr	r2, [r7, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	0011      	movs	r1, r2
 800664c:	0018      	movs	r0, r3
 800664e:	f7fc f9f7 	bl	8002a40 <drawText>
}
 8006652:	46c0      	nop			; (mov r8, r8)
 8006654:	46bd      	mov	sp, r7
 8006656:	b004      	add	sp, #16
 8006658:	bd80      	pop	{r7, pc}
 800665a:	46c0      	nop			; (mov r8, r8)
 800665c:	0800c410 	.word	0x0800c410

08006660 <drawBattery>:

// draws a battery graphic to represent current battery level
void drawBattery(uint16_t batteryLevel, SPI_HandleTypeDef *hspi) {
 8006660:	b590      	push	{r4, r7, lr}
 8006662:	b087      	sub	sp, #28
 8006664:	af02      	add	r7, sp, #8
 8006666:	0002      	movs	r2, r0
 8006668:	6039      	str	r1, [r7, #0]
 800666a:	1dbb      	adds	r3, r7, #6
 800666c:	801a      	strh	r2, [r3, #0]
	// doesn't move and is used on an empty screen, so shouldn't need to clear then print
	char str[5];

	// drawing battery symbol. hard coded to be 6x13, upper left corner on (49,26)
	drawVLine(49, 28, 10, ST77XX_BLACK, hspi);		// left col
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	2300      	movs	r3, #0
 8006674:	220a      	movs	r2, #10
 8006676:	211c      	movs	r1, #28
 8006678:	2031      	movs	r0, #49	; 0x31
 800667a:	f7fb fd31 	bl	80020e0 <drawVLine>
	drawVLine(54, 28, 10, ST77XX_BLACK, hspi);		// right col
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	2300      	movs	r3, #0
 8006684:	220a      	movs	r2, #10
 8006686:	211c      	movs	r1, #28
 8006688:	2036      	movs	r0, #54	; 0x36
 800668a:	f7fb fd29 	bl	80020e0 <drawVLine>
	drawHLine(50, 38, 4, ST77XX_BLACK, hspi);		// bottom
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	9300      	str	r3, [sp, #0]
 8006692:	2300      	movs	r3, #0
 8006694:	2204      	movs	r2, #4
 8006696:	2126      	movs	r1, #38	; 0x26
 8006698:	2032      	movs	r0, #50	; 0x32
 800669a:	f7fb fcd9 	bl	8002050 <drawHLine>
	drawHLine(50, 27, 4, ST77XX_BLACK, hspi);		// top bottom level
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	2300      	movs	r3, #0
 80066a4:	2204      	movs	r2, #4
 80066a6:	211b      	movs	r1, #27
 80066a8:	2032      	movs	r0, #50	; 0x32
 80066aa:	f7fb fcd1 	bl	8002050 <drawHLine>
	drawHLine(51, 26, 2, ST77XX_BLACK, hspi);		// top upper level
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	2300      	movs	r3, #0
 80066b4:	2202      	movs	r2, #2
 80066b6:	211a      	movs	r1, #26
 80066b8:	2033      	movs	r0, #51	; 0x33
 80066ba:	f7fb fcc9 	bl	8002050 <drawHLine>

	// start filling in green/red box depending on battery level
	uint16_t color = ST77XX_GREEN;
 80066be:	230e      	movs	r3, #14
 80066c0:	18fb      	adds	r3, r7, r3
 80066c2:	22fc      	movs	r2, #252	; 0xfc
 80066c4:	00d2      	lsls	r2, r2, #3
 80066c6:	801a      	strh	r2, [r3, #0]
	if (batteryLevel < 20) color = ST77XX_RED;
 80066c8:	1dbb      	adds	r3, r7, #6
 80066ca:	881b      	ldrh	r3, [r3, #0]
 80066cc:	2b13      	cmp	r3, #19
 80066ce:	d803      	bhi.n	80066d8 <drawBattery+0x78>
 80066d0:	230e      	movs	r3, #14
 80066d2:	18fb      	adds	r3, r7, r3
 80066d4:	4a2c      	ldr	r2, [pc, #176]	; (8006788 <drawBattery+0x128>)
 80066d6:	801a      	strh	r2, [r3, #0]
	fillRect(50, 28+(100-batteryLevel)/10, 4, (batteryLevel+9)/10, color, hspi);	// +9 to avoid having to use float and round()
 80066d8:	1dbb      	adds	r3, r7, #6
 80066da:	881b      	ldrh	r3, [r3, #0]
 80066dc:	2264      	movs	r2, #100	; 0x64
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	210a      	movs	r1, #10
 80066e2:	0018      	movs	r0, r3
 80066e4:	f7f9 fda2 	bl	800022c <__divsi3>
 80066e8:	0003      	movs	r3, r0
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	331c      	adds	r3, #28
 80066ee:	b2dc      	uxtb	r4, r3
 80066f0:	1dbb      	adds	r3, r7, #6
 80066f2:	881b      	ldrh	r3, [r3, #0]
 80066f4:	3309      	adds	r3, #9
 80066f6:	210a      	movs	r1, #10
 80066f8:	0018      	movs	r0, r3
 80066fa:	f7f9 fd97 	bl	800022c <__divsi3>
 80066fe:	0003      	movs	r3, r0
 8006700:	b2da      	uxtb	r2, r3
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	9301      	str	r3, [sp, #4]
 8006706:	230e      	movs	r3, #14
 8006708:	18fb      	adds	r3, r7, r3
 800670a:	881b      	ldrh	r3, [r3, #0]
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	0013      	movs	r3, r2
 8006710:	2204      	movs	r2, #4
 8006712:	0021      	movs	r1, r4
 8006714:	2032      	movs	r0, #50	; 0x32
 8006716:	f7fb fdc5 	bl	80022a4 <fillRect>
	fillRect(50, 28, 4, (100-batteryLevel)/10, ST77XX_WHITE, hspi);
 800671a:	1dbb      	adds	r3, r7, #6
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	2264      	movs	r2, #100	; 0x64
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	210a      	movs	r1, #10
 8006724:	0018      	movs	r0, r3
 8006726:	f7f9 fd81 	bl	800022c <__divsi3>
 800672a:	0003      	movs	r3, r0
 800672c:	b2da      	uxtb	r2, r3
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	9301      	str	r3, [sp, #4]
 8006732:	4b16      	ldr	r3, [pc, #88]	; (800678c <drawBattery+0x12c>)
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	0013      	movs	r3, r2
 8006738:	2204      	movs	r2, #4
 800673a:	211c      	movs	r1, #28
 800673c:	2032      	movs	r0, #50	; 0x32
 800673e:	f7fb fdb1 	bl	80022a4 <fillRect>

	// draw numerical text
	setTextSize(1);
 8006742:	2001      	movs	r0, #1
 8006744:	f7fc fb7e 	bl	8002e44 <setTextSize>
	if (batteryLevel >= 20) color = ST77XX_BLACK;		// reusing variable for more obfuscated code.
 8006748:	1dbb      	adds	r3, r7, #6
 800674a:	881b      	ldrh	r3, [r3, #0]
 800674c:	2b13      	cmp	r3, #19
 800674e:	d903      	bls.n	8006758 <drawBattery+0xf8>
 8006750:	230e      	movs	r3, #14
 8006752:	18fb      	adds	r3, r7, r3
 8006754:	2200      	movs	r2, #0
 8006756:	801a      	strh	r2, [r3, #0]
	setTextColor(color);
 8006758:	230e      	movs	r3, #14
 800675a:	18fb      	adds	r3, r7, r3
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	0018      	movs	r0, r3
 8006760:	f7fc fb80 	bl	8002e64 <setTextColor>
	sprintf(str, "%3d%%", batteryLevel);
 8006764:	1dbb      	adds	r3, r7, #6
 8006766:	881a      	ldrh	r2, [r3, #0]
 8006768:	4909      	ldr	r1, [pc, #36]	; (8006790 <drawBattery+0x130>)
 800676a:	2408      	movs	r4, #8
 800676c:	193b      	adds	r3, r7, r4
 800676e:	0018      	movs	r0, r3
 8006770:	f005 f9a8 	bl	800bac4 <siprintf>
	drawTextAt(55, 31, str, hspi);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	193a      	adds	r2, r7, r4
 8006778:	211f      	movs	r1, #31
 800677a:	2037      	movs	r0, #55	; 0x37
 800677c:	f7fc f996 	bl	8002aac <drawTextAt>
}
 8006780:	46c0      	nop			; (mov r8, r8)
 8006782:	46bd      	mov	sp, r7
 8006784:	b005      	add	sp, #20
 8006786:	bd90      	pop	{r4, r7, pc}
 8006788:	fffff800 	.word	0xfffff800
 800678c:	0000ffff 	.word	0x0000ffff
 8006790:	0800c420 	.word	0x0800c420

08006794 <drawClock>:

// draw time and date on screen
void drawClock(struct dates *d, struct times *t, SPI_HandleTypeDef *hspi) {
 8006794:	b5b0      	push	{r4, r5, r7, lr}
 8006796:	b090      	sub	sp, #64	; 0x40
 8006798:	af02      	add	r7, sp, #8
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
	// notes on paper.
	char str[40];

	// no need to draw padding for those that always have the same length
	// drawing hr and min, 12-hr format
	if (t->hr % 12 == 0) sprintf(str, "%2d:%02d", 12, t->min);
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	210c      	movs	r1, #12
 80067a6:	0018      	movs	r0, r3
 80067a8:	f7f9 fd3c 	bl	8000224 <__aeabi_uidivmod>
 80067ac:	000b      	movs	r3, r1
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d108      	bne.n	80067c6 <drawClock+0x32>
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	785b      	ldrb	r3, [r3, #1]
 80067b8:	493c      	ldr	r1, [pc, #240]	; (80068ac <drawClock+0x118>)
 80067ba:	2210      	movs	r2, #16
 80067bc:	18b8      	adds	r0, r7, r2
 80067be:	220c      	movs	r2, #12
 80067c0:	f005 f980 	bl	800bac4 <siprintf>
 80067c4:	e00f      	b.n	80067e6 <drawClock+0x52>
	else sprintf(str, "%2d:%02d", t->hr%12, t->min);
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	210c      	movs	r1, #12
 80067cc:	0018      	movs	r0, r3
 80067ce:	f7f9 fd29 	bl	8000224 <__aeabi_uidivmod>
 80067d2:	000b      	movs	r3, r1
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	001a      	movs	r2, r3
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	785b      	ldrb	r3, [r3, #1]
 80067dc:	4933      	ldr	r1, [pc, #204]	; (80068ac <drawClock+0x118>)
 80067de:	2010      	movs	r0, #16
 80067e0:	1838      	adds	r0, r7, r0
 80067e2:	f005 f96f 	bl	800bac4 <siprintf>
	setTextSize(3);
 80067e6:	2003      	movs	r0, #3
 80067e8:	f7fc fb2c 	bl	8002e44 <setTextSize>
	setTextColor(ST77XX_BLACK);
 80067ec:	2000      	movs	r0, #0
 80067ee:	f7fc fb39 	bl	8002e64 <setTextColor>
	drawCenteredText(52, 60, str, hspi);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2410      	movs	r4, #16
 80067f6:	193a      	adds	r2, r7, r4
 80067f8:	213c      	movs	r1, #60	; 0x3c
 80067fa:	2034      	movs	r0, #52	; 0x34
 80067fc:	f7fc f99e 	bl	8002b3c <drawCenteredText>

	// drawing sec
	sprintf(str, "%02d", t->sec);
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	789b      	ldrb	r3, [r3, #2]
 8006804:	001a      	movs	r2, r3
 8006806:	492a      	ldr	r1, [pc, #168]	; (80068b0 <drawClock+0x11c>)
 8006808:	193b      	adds	r3, r7, r4
 800680a:	0018      	movs	r0, r3
 800680c:	f005 f95a 	bl	800bac4 <siprintf>
	setTextSize(2);
 8006810:	2002      	movs	r0, #2
 8006812:	f7fc fb17 	bl	8002e44 <setTextSize>
	drawCenteredText(109, 68, str, hspi);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	193a      	adds	r2, r7, r4
 800681a:	2144      	movs	r1, #68	; 0x44
 800681c:	206d      	movs	r0, #109	; 0x6d
 800681e:	f7fc f98d 	bl	8002b3c <drawCenteredText>

	// drawing AM/PM text
	setTextSize(1);
 8006822:	2001      	movs	r0, #1
 8006824:	f7fc fb0e 	bl	8002e44 <setTextSize>
	if (t->hr < 12) drawCenteredText(103, 60, "AM", hspi);
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	2b0b      	cmp	r3, #11
 800682e:	d806      	bhi.n	800683e <drawClock+0xaa>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a20      	ldr	r2, [pc, #128]	; (80068b4 <drawClock+0x120>)
 8006834:	213c      	movs	r1, #60	; 0x3c
 8006836:	2067      	movs	r0, #103	; 0x67
 8006838:	f7fc f980 	bl	8002b3c <drawCenteredText>
 800683c:	e005      	b.n	800684a <drawClock+0xb6>
	else drawCenteredText(103, 60, "PM", hspi);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a1d      	ldr	r2, [pc, #116]	; (80068b8 <drawClock+0x124>)
 8006842:	213c      	movs	r1, #60	; 0x3c
 8006844:	2067      	movs	r0, #103	; 0x67
 8006846:	f7fc f979 	bl	8002b3c <drawCenteredText>

	// drawing date
	setTextSize(1);
 800684a:	2001      	movs	r0, #1
 800684c:	f7fc fafa 	bl	8002e44 <setTextSize>
	sprintf(str, "%s %d %04d", monthNames[d->month], d->date, d->yr);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	789b      	ldrb	r3, [r3, #2]
 8006854:	001a      	movs	r2, r3
 8006856:	4b19      	ldr	r3, [pc, #100]	; (80068bc <drawClock+0x128>)
 8006858:	0092      	lsls	r2, r2, #2
 800685a:	58d2      	ldr	r2, [r2, r3]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	78db      	ldrb	r3, [r3, #3]
 8006860:	001c      	movs	r4, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	881b      	ldrh	r3, [r3, #0]
 8006866:	4916      	ldr	r1, [pc, #88]	; (80068c0 <drawClock+0x12c>)
 8006868:	2510      	movs	r5, #16
 800686a:	1978      	adds	r0, r7, r5
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	0023      	movs	r3, r4
 8006870:	f005 f928 	bl	800bac4 <siprintf>
	drawCenteredTextWithPadding(WIDTH/2, 84, 11, str, hspi);
 8006874:	197a      	adds	r2, r7, r5
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	0013      	movs	r3, r2
 800687c:	220b      	movs	r2, #11
 800687e:	2154      	movs	r1, #84	; 0x54
 8006880:	2040      	movs	r0, #64	; 0x40
 8006882:	f7fc f9bd 	bl	8002c00 <drawCenteredTextWithPadding>

	// drawing weekday
	drawCenteredTextWithPadding(WIDTH/2, 92, 9, weekdayNames[d->weekday], hspi);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	791b      	ldrb	r3, [r3, #4]
 800688a:	001a      	movs	r2, r3
 800688c:	4b0d      	ldr	r3, [pc, #52]	; (80068c4 <drawClock+0x130>)
 800688e:	0092      	lsls	r2, r2, #2
 8006890:	58d2      	ldr	r2, [r2, r3]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	0013      	movs	r3, r2
 8006898:	2209      	movs	r2, #9
 800689a:	215c      	movs	r1, #92	; 0x5c
 800689c:	2040      	movs	r0, #64	; 0x40
 800689e:	f7fc f9af 	bl	8002c00 <drawCenteredTextWithPadding>
}
 80068a2:	46c0      	nop			; (mov r8, r8)
 80068a4:	46bd      	mov	sp, r7
 80068a6:	b00e      	add	sp, #56	; 0x38
 80068a8:	bdb0      	pop	{r4, r5, r7, pc}
 80068aa:	46c0      	nop			; (mov r8, r8)
 80068ac:	0800c428 	.word	0x0800c428
 80068b0:	0800c434 	.word	0x0800c434
 80068b4:	0800c43c 	.word	0x0800c43c
 80068b8:	0800c440 	.word	0x0800c440
 80068bc:	20000034 	.word	0x20000034
 80068c0:	0800c444 	.word	0x0800c444
 80068c4:	20000014 	.word	0x20000014

080068c8 <drawTopClock>:

// drawing current time on top of screen when other faces are displayed
void drawTopClock(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 80068c8:	b590      	push	{r4, r7, lr}
 80068ca:	b08f      	sub	sp, #60	; 0x3c
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
	char str[40];
	struct times currentTime = {0};
 80068d2:	240c      	movs	r4, #12
 80068d4:	193b      	adds	r3, r7, r4
 80068d6:	0018      	movs	r0, r3
 80068d8:	2303      	movs	r3, #3
 80068da:	001a      	movs	r2, r3
 80068dc:	2100      	movs	r1, #0
 80068de:	f005 f86a 	bl	800b9b6 <memset>
	getTime(&currentTime, hrtc);
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	193b      	adds	r3, r7, r4
 80068e6:	0011      	movs	r1, r2
 80068e8:	0018      	movs	r0, r3
 80068ea:	f7fc fe39 	bl	8003560 <getTime>

	if (currentTime.hr % 12 == 0) sprintf(str, "%2d:%02d", 12, currentTime.min);
 80068ee:	193b      	adds	r3, r7, r4
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	210c      	movs	r1, #12
 80068f4:	0018      	movs	r0, r3
 80068f6:	f7f9 fc95 	bl	8000224 <__aeabi_uidivmod>
 80068fa:	000b      	movs	r3, r1
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d109      	bne.n	8006916 <drawTopClock+0x4e>
 8006902:	230c      	movs	r3, #12
 8006904:	18fb      	adds	r3, r7, r3
 8006906:	785b      	ldrb	r3, [r3, #1]
 8006908:	491d      	ldr	r1, [pc, #116]	; (8006980 <drawTopClock+0xb8>)
 800690a:	2210      	movs	r2, #16
 800690c:	18b8      	adds	r0, r7, r2
 800690e:	220c      	movs	r2, #12
 8006910:	f005 f8d8 	bl	800bac4 <siprintf>
 8006914:	e010      	b.n	8006938 <drawTopClock+0x70>
	else sprintf(str, "%2d:%02d", currentTime.hr%12, currentTime.min);
 8006916:	240c      	movs	r4, #12
 8006918:	193b      	adds	r3, r7, r4
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	210c      	movs	r1, #12
 800691e:	0018      	movs	r0, r3
 8006920:	f7f9 fc80 	bl	8000224 <__aeabi_uidivmod>
 8006924:	000b      	movs	r3, r1
 8006926:	b2db      	uxtb	r3, r3
 8006928:	001a      	movs	r2, r3
 800692a:	193b      	adds	r3, r7, r4
 800692c:	785b      	ldrb	r3, [r3, #1]
 800692e:	4914      	ldr	r1, [pc, #80]	; (8006980 <drawTopClock+0xb8>)
 8006930:	2010      	movs	r0, #16
 8006932:	1838      	adds	r0, r7, r0
 8006934:	f005 f8c6 	bl	800bac4 <siprintf>
	setTextSize(1);
 8006938:	2001      	movs	r0, #1
 800693a:	f7fc fa83 	bl	8002e44 <setTextSize>
	setTextColor(ST77XX_BLACK);
 800693e:	2000      	movs	r0, #0
 8006940:	f7fc fa90 	bl	8002e64 <setTextColor>
	drawTextAt(WIDTH/2-21, 1, str, hspi);
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	2210      	movs	r2, #16
 8006948:	18ba      	adds	r2, r7, r2
 800694a:	2101      	movs	r1, #1
 800694c:	202b      	movs	r0, #43	; 0x2b
 800694e:	f7fc f8ad 	bl	8002aac <drawTextAt>

	if (currentTime.hr < 12) drawTextAt(WIDTH/2+9, 1, "AM", hspi);
 8006952:	230c      	movs	r3, #12
 8006954:	18fb      	adds	r3, r7, r3
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	2b0b      	cmp	r3, #11
 800695a:	d806      	bhi.n	800696a <drawTopClock+0xa2>
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	4a09      	ldr	r2, [pc, #36]	; (8006984 <drawTopClock+0xbc>)
 8006960:	2101      	movs	r1, #1
 8006962:	2049      	movs	r0, #73	; 0x49
 8006964:	f7fc f8a2 	bl	8002aac <drawTextAt>
	else drawTextAt(WIDTH/2+9, 1, "PM", hspi);
}
 8006968:	e005      	b.n	8006976 <drawTopClock+0xae>
	else drawTextAt(WIDTH/2+9, 1, "PM", hspi);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	4a06      	ldr	r2, [pc, #24]	; (8006988 <drawTopClock+0xc0>)
 800696e:	2101      	movs	r1, #1
 8006970:	2049      	movs	r0, #73	; 0x49
 8006972:	f7fc f89b 	bl	8002aac <drawTextAt>
}
 8006976:	46c0      	nop			; (mov r8, r8)
 8006978:	46bd      	mov	sp, r7
 800697a:	b00f      	add	sp, #60	; 0x3c
 800697c:	bd90      	pop	{r4, r7, pc}
 800697e:	46c0      	nop			; (mov r8, r8)
 8006980:	0800c428 	.word	0x0800c428
 8006984:	0800c43c 	.word	0x0800c43c
 8006988:	0800c440 	.word	0x0800c440

0800698c <drawTimer>:

// drawing timer on screen
void drawTimer(struct times *t, SPI_HandleTypeDef *hspi) {
 800698c:	b5b0      	push	{r4, r5, r7, lr}
 800698e:	b08e      	sub	sp, #56	; 0x38
 8006990:	af02      	add	r7, sp, #8
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
	char str[40];

	// only drawing hr:min:sec of timer
	setTextSize(2);
 8006996:	2002      	movs	r0, #2
 8006998:	f7fc fa54 	bl	8002e44 <setTextSize>
	setTextColor(ST77XX_BLACK);
 800699c:	2000      	movs	r0, #0
 800699e:	f7fc fa61 	bl	8002e64 <setTextColor>
	sprintf(str, "%2d:%2d:%2d", t->hr, t->min, t->sec);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	001a      	movs	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	785b      	ldrb	r3, [r3, #1]
 80069ac:	001c      	movs	r4, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	789b      	ldrb	r3, [r3, #2]
 80069b2:	4908      	ldr	r1, [pc, #32]	; (80069d4 <drawTimer+0x48>)
 80069b4:	2508      	movs	r5, #8
 80069b6:	1978      	adds	r0, r7, r5
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	0023      	movs	r3, r4
 80069bc:	f005 f882 	bl	800bac4 <siprintf>
	drawCenteredText(WIDTH/2, HEIGHT/2-12, str, hspi);		// about y=68
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	197a      	adds	r2, r7, r5
 80069c4:	2144      	movs	r1, #68	; 0x44
 80069c6:	2040      	movs	r0, #64	; 0x40
 80069c8:	f7fc f8b8 	bl	8002b3c <drawCenteredText>

	// leaving room to draw "timer set!/unset" text
}
 80069cc:	46c0      	nop			; (mov r8, r8)
 80069ce:	46bd      	mov	sp, r7
 80069d0:	b00c      	add	sp, #48	; 0x30
 80069d2:	bdb0      	pop	{r4, r5, r7, pc}
 80069d4:	0800c450 	.word	0x0800c450

080069d8 <drawAlarm>:

// drawing alarm on screen
void drawAlarm(struct alarmTimes *a, SPI_HandleTypeDef *hspi) {
 80069d8:	b590      	push	{r4, r7, lr}
 80069da:	b08f      	sub	sp, #60	; 0x3c
 80069dc:	af02      	add	r7, sp, #8
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
	char str[40];

	// drawing hr:min:sec
	setTextSize(2);
 80069e2:	2002      	movs	r0, #2
 80069e4:	f7fc fa2e 	bl	8002e44 <setTextSize>
	setTextColor(ST77XX_BLACK);
 80069e8:	2000      	movs	r0, #0
 80069ea:	f7fc fa3b 	bl	8002e64 <setTextColor>
	if (a->hr % 12 == 0) sprintf(str, "%2d:%2d:%2d", 12, a->min, a->sec);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	210c      	movs	r1, #12
 80069f4:	0018      	movs	r0, r3
 80069f6:	f7f9 fc15 	bl	8000224 <__aeabi_uidivmod>
 80069fa:	000b      	movs	r3, r1
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10d      	bne.n	8006a1e <drawAlarm+0x46>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	785b      	ldrb	r3, [r3, #1]
 8006a06:	001a      	movs	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	789b      	ldrb	r3, [r3, #2]
 8006a0c:	4926      	ldr	r1, [pc, #152]	; (8006aa8 <drawAlarm+0xd0>)
 8006a0e:	2008      	movs	r0, #8
 8006a10:	1838      	adds	r0, r7, r0
 8006a12:	9300      	str	r3, [sp, #0]
 8006a14:	0013      	movs	r3, r2
 8006a16:	220c      	movs	r2, #12
 8006a18:	f005 f854 	bl	800bac4 <siprintf>
 8006a1c:	e014      	b.n	8006a48 <drawAlarm+0x70>
	else sprintf(str, "%2d:%2d:%2d", a->hr%12, a->min, a->sec);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	210c      	movs	r1, #12
 8006a24:	0018      	movs	r0, r3
 8006a26:	f7f9 fbfd 	bl	8000224 <__aeabi_uidivmod>
 8006a2a:	000b      	movs	r3, r1
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	001a      	movs	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	785b      	ldrb	r3, [r3, #1]
 8006a34:	001c      	movs	r4, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	789b      	ldrb	r3, [r3, #2]
 8006a3a:	491b      	ldr	r1, [pc, #108]	; (8006aa8 <drawAlarm+0xd0>)
 8006a3c:	2008      	movs	r0, #8
 8006a3e:	1838      	adds	r0, r7, r0
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	0023      	movs	r3, r4
 8006a44:	f005 f83e 	bl	800bac4 <siprintf>
	drawCenteredText(WIDTH/2, 68, str, hspi);
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	2208      	movs	r2, #8
 8006a4c:	18ba      	adds	r2, r7, r2
 8006a4e:	2144      	movs	r1, #68	; 0x44
 8006a50:	2040      	movs	r0, #64	; 0x40
 8006a52:	f7fc f873 	bl	8002b3c <drawCenteredText>

	setTextSize(1);
 8006a56:	2001      	movs	r0, #1
 8006a58:	f7fc f9f4 	bl	8002e44 <setTextSize>
	if (a->hr < 12) drawCenteredText(100, 60, "AM", hspi);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	2b0b      	cmp	r3, #11
 8006a62:	d806      	bhi.n	8006a72 <drawAlarm+0x9a>
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	4a11      	ldr	r2, [pc, #68]	; (8006aac <drawAlarm+0xd4>)
 8006a68:	213c      	movs	r1, #60	; 0x3c
 8006a6a:	2064      	movs	r0, #100	; 0x64
 8006a6c:	f7fc f866 	bl	8002b3c <drawCenteredText>
 8006a70:	e005      	b.n	8006a7e <drawAlarm+0xa6>
	else drawCenteredText(100, 60, "PM", hspi);
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	4a0e      	ldr	r2, [pc, #56]	; (8006ab0 <drawAlarm+0xd8>)
 8006a76:	213c      	movs	r1, #60	; 0x3c
 8006a78:	2064      	movs	r0, #100	; 0x64
 8006a7a:	f7fc f85f 	bl	8002b3c <drawCenteredText>


	// drawing weekday
	setTextSize(1);
 8006a7e:	2001      	movs	r0, #1
 8006a80:	f7fc f9e0 	bl	8002e44 <setTextSize>
	drawCenteredTextWithPadding(WIDTH/2, 84, 9, weekdayNames[a->weekday], hspi);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	78db      	ldrb	r3, [r3, #3]
 8006a88:	001a      	movs	r2, r3
 8006a8a:	4b0a      	ldr	r3, [pc, #40]	; (8006ab4 <drawAlarm+0xdc>)
 8006a8c:	0092      	lsls	r2, r2, #2
 8006a8e:	58d2      	ldr	r2, [r2, r3]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	0013      	movs	r3, r2
 8006a96:	2209      	movs	r2, #9
 8006a98:	2154      	movs	r1, #84	; 0x54
 8006a9a:	2040      	movs	r0, #64	; 0x40
 8006a9c:	f7fc f8b0 	bl	8002c00 <drawCenteredTextWithPadding>
}
 8006aa0:	46c0      	nop			; (mov r8, r8)
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	b00d      	add	sp, #52	; 0x34
 8006aa6:	bd90      	pop	{r4, r7, pc}
 8006aa8:	0800c450 	.word	0x0800c450
 8006aac:	0800c43c 	.word	0x0800c43c
 8006ab0:	0800c440 	.word	0x0800c440
 8006ab4:	20000014 	.word	0x20000014

08006ab8 <drawStopwatch>:

// drawing stopwatch on screen
void drawStopwatch(uint32_t seconds, SPI_HandleTypeDef *hspi) {
 8006ab8:	b5b0      	push	{r4, r5, r7, lr}
 8006aba:	b090      	sub	sp, #64	; 0x40
 8006abc:	af02      	add	r7, sp, #8
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
	struct times t = {0};
 8006ac2:	2134      	movs	r1, #52	; 0x34
 8006ac4:	000c      	movs	r4, r1
 8006ac6:	187b      	adds	r3, r7, r1
 8006ac8:	0018      	movs	r0, r3
 8006aca:	2303      	movs	r3, #3
 8006acc:	001a      	movs	r2, r3
 8006ace:	2100      	movs	r1, #0
 8006ad0:	f004 ff71 	bl	800b9b6 <memset>
	char str[40];

	secondsToTime(&t, seconds);
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	0021      	movs	r1, r4
 8006ad8:	000c      	movs	r4, r1
 8006ada:	187b      	adds	r3, r7, r1
 8006adc:	0011      	movs	r1, r2
 8006ade:	0018      	movs	r0, r3
 8006ae0:	f7fc fe21 	bl	8003726 <secondsToTime>

	// drawing hr:min:sec
	setTextSize(2);
 8006ae4:	2002      	movs	r0, #2
 8006ae6:	f7fc f9ad 	bl	8002e44 <setTextSize>
	setTextColor(ST77XX_BLACK);
 8006aea:	2000      	movs	r0, #0
 8006aec:	f7fc f9ba 	bl	8002e64 <setTextColor>
	sprintf(str, "%2d:%2d:%2d", t.hr, t.min, t.sec);
 8006af0:	0021      	movs	r1, r4
 8006af2:	187b      	adds	r3, r7, r1
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	001a      	movs	r2, r3
 8006af8:	187b      	adds	r3, r7, r1
 8006afa:	785b      	ldrb	r3, [r3, #1]
 8006afc:	001c      	movs	r4, r3
 8006afe:	187b      	adds	r3, r7, r1
 8006b00:	789b      	ldrb	r3, [r3, #2]
 8006b02:	4908      	ldr	r1, [pc, #32]	; (8006b24 <drawStopwatch+0x6c>)
 8006b04:	250c      	movs	r5, #12
 8006b06:	1978      	adds	r0, r7, r5
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	0023      	movs	r3, r4
 8006b0c:	f004 ffda 	bl	800bac4 <siprintf>
	drawCenteredText(WIDTH/2, 68, str, hspi);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	197a      	adds	r2, r7, r5
 8006b14:	2144      	movs	r1, #68	; 0x44
 8006b16:	2040      	movs	r0, #64	; 0x40
 8006b18:	f7fc f810 	bl	8002b3c <drawCenteredText>

	// leaving room for lap text
}
 8006b1c:	46c0      	nop			; (mov r8, r8)
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	b00e      	add	sp, #56	; 0x38
 8006b22:	bdb0      	pop	{r4, r5, r7, pc}
 8006b24:	0800c450 	.word	0x0800c450

08006b28 <drawStopwatchLap>:

// drawing lap text
void drawStopwatchLap(uint32_t seconds, SPI_HandleTypeDef *hspi) {
 8006b28:	b5b0      	push	{r4, r5, r7, lr}
 8006b2a:	b090      	sub	sp, #64	; 0x40
 8006b2c:	af02      	add	r7, sp, #8
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
	struct times t = {0};
 8006b32:	2134      	movs	r1, #52	; 0x34
 8006b34:	000c      	movs	r4, r1
 8006b36:	187b      	adds	r3, r7, r1
 8006b38:	0018      	movs	r0, r3
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	001a      	movs	r2, r3
 8006b3e:	2100      	movs	r1, #0
 8006b40:	f004 ff39 	bl	800b9b6 <memset>
	char str[40];

	secondsToTime(&t, seconds);		// converting
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	0021      	movs	r1, r4
 8006b48:	000c      	movs	r4, r1
 8006b4a:	187b      	adds	r3, r7, r1
 8006b4c:	0011      	movs	r1, r2
 8006b4e:	0018      	movs	r0, r3
 8006b50:	f7fc fde9 	bl	8003726 <secondsToTime>

	// drawing hr:min:sec
	setTextSize(1);
 8006b54:	2001      	movs	r0, #1
 8006b56:	f7fc f975 	bl	8002e44 <setTextSize>
	setTextColor(ST77XX_BLACK);
 8006b5a:	2000      	movs	r0, #0
 8006b5c:	f7fc f982 	bl	8002e64 <setTextColor>
	sprintf(str, "lap: %2d:%2d:%2d", t.hr, t.min, t.sec);
 8006b60:	0021      	movs	r1, r4
 8006b62:	187b      	adds	r3, r7, r1
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	001a      	movs	r2, r3
 8006b68:	187b      	adds	r3, r7, r1
 8006b6a:	785b      	ldrb	r3, [r3, #1]
 8006b6c:	001c      	movs	r4, r3
 8006b6e:	187b      	adds	r3, r7, r1
 8006b70:	789b      	ldrb	r3, [r3, #2]
 8006b72:	4908      	ldr	r1, [pc, #32]	; (8006b94 <drawStopwatchLap+0x6c>)
 8006b74:	250c      	movs	r5, #12
 8006b76:	1978      	adds	r0, r7, r5
 8006b78:	9300      	str	r3, [sp, #0]
 8006b7a:	0023      	movs	r3, r4
 8006b7c:	f004 ffa2 	bl	800bac4 <siprintf>
	drawCenteredText(WIDTH/2, 84, str, hspi);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	197a      	adds	r2, r7, r5
 8006b84:	2154      	movs	r1, #84	; 0x54
 8006b86:	2040      	movs	r0, #64	; 0x40
 8006b88:	f7fb ffd8 	bl	8002b3c <drawCenteredText>
}
 8006b8c:	46c0      	nop			; (mov r8, r8)
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	b00e      	add	sp, #56	; 0x38
 8006b92:	bdb0      	pop	{r4, r5, r7, pc}
 8006b94:	0800c45c 	.word	0x0800c45c

08006b98 <initFace>:
// ---- end of drawing functions ----

// initializes variables. should be called at the start of program
void initFace() {
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	af00      	add	r7, sp, #0
	faceOnDisplay = faceClock;
 8006b9c:	4b14      	ldr	r3, [pc, #80]	; (8006bf0 <initFace+0x58>)
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	701a      	strb	r2, [r3, #0]
	updateFace.clock = 1;
 8006ba2:	4b14      	ldr	r3, [pc, #80]	; (8006bf4 <initFace+0x5c>)
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	701a      	strb	r2, [r3, #0]

	// initializing pointers
	clockVars.dateToSet = (struct dates *)calloc(1, sizeof(struct dates *));
 8006ba8:	2104      	movs	r1, #4
 8006baa:	2001      	movs	r0, #1
 8006bac:	f004 fec6 	bl	800b93c <calloc>
 8006bb0:	0003      	movs	r3, r0
 8006bb2:	001a      	movs	r2, r3
 8006bb4:	4b10      	ldr	r3, [pc, #64]	; (8006bf8 <initFace+0x60>)
 8006bb6:	605a      	str	r2, [r3, #4]
	clockVars.timeToSet = (struct times *)calloc(1, sizeof(struct times *));
 8006bb8:	2104      	movs	r1, #4
 8006bba:	2001      	movs	r0, #1
 8006bbc:	f004 febe 	bl	800b93c <calloc>
 8006bc0:	0003      	movs	r3, r0
 8006bc2:	001a      	movs	r2, r3
 8006bc4:	4b0c      	ldr	r3, [pc, #48]	; (8006bf8 <initFace+0x60>)
 8006bc6:	609a      	str	r2, [r3, #8]
	timerVars.timeToSet = (struct times *)calloc(1, sizeof(struct times *));
 8006bc8:	2104      	movs	r1, #4
 8006bca:	2001      	movs	r0, #1
 8006bcc:	f004 feb6 	bl	800b93c <calloc>
 8006bd0:	0003      	movs	r3, r0
 8006bd2:	001a      	movs	r2, r3
 8006bd4:	4b09      	ldr	r3, [pc, #36]	; (8006bfc <initFace+0x64>)
 8006bd6:	605a      	str	r2, [r3, #4]
	alarmVars.alarmToSet = (struct alarmTimes *)calloc(1, sizeof(struct alarmTimes *));
 8006bd8:	2104      	movs	r1, #4
 8006bda:	2001      	movs	r0, #1
 8006bdc:	f004 feae 	bl	800b93c <calloc>
 8006be0:	0003      	movs	r3, r0
 8006be2:	001a      	movs	r2, r3
 8006be4:	4b06      	ldr	r3, [pc, #24]	; (8006c00 <initFace+0x68>)
 8006be6:	605a      	str	r2, [r3, #4]
}
 8006be8:	46c0      	nop			; (mov r8, r8)
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	46c0      	nop			; (mov r8, r8)
 8006bf0:	20000140 	.word	0x20000140
 8006bf4:	20000150 	.word	0x20000150
 8006bf8:	2000011c 	.word	0x2000011c
 8006bfc:	20000128 	.word	0x20000128
 8006c00:	20000130 	.word	0x20000130

08006c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8006c04:	480d      	ldr	r0, [pc, #52]	; (8006c3c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8006c06:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8006c08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006c0a:	e003      	b.n	8006c14 <LoopCopyDataInit>

08006c0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006c0c:	4b0c      	ldr	r3, [pc, #48]	; (8006c40 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8006c0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006c10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006c12:	3104      	adds	r1, #4

08006c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8006c14:	480b      	ldr	r0, [pc, #44]	; (8006c44 <LoopForever+0xa>)
  ldr  r3, =_edata
 8006c16:	4b0c      	ldr	r3, [pc, #48]	; (8006c48 <LoopForever+0xe>)
  adds  r2, r0, r1
 8006c18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006c1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006c1c:	d3f6      	bcc.n	8006c0c <CopyDataInit>
  ldr  r2, =_sbss
 8006c1e:	4a0b      	ldr	r2, [pc, #44]	; (8006c4c <LoopForever+0x12>)
  b  LoopFillZerobss
 8006c20:	e002      	b.n	8006c28 <LoopFillZerobss>

08006c22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8006c22:	2300      	movs	r3, #0
  str  r3, [r2]
 8006c24:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006c26:	3204      	adds	r2, #4

08006c28 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8006c28:	4b09      	ldr	r3, [pc, #36]	; (8006c50 <LoopForever+0x16>)
  cmp  r2, r3
 8006c2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006c2c:	d3f9      	bcc.n	8006c22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006c2e:	f7fd ff0f 	bl	8004a50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006c32:	f004 fe93 	bl	800b95c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006c36:	f7fc feb9 	bl	80039ac <main>

08006c3a <LoopForever>:

LoopForever:
    b LoopForever
 8006c3a:	e7fe      	b.n	8006c3a <LoopForever>
   ldr   r0, =_estack
 8006c3c:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8006c40:	0800ce60 	.word	0x0800ce60
  ldr  r0, =_sdata
 8006c44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006c48:	200000d8 	.word	0x200000d8
  ldr  r2, =_sbss
 8006c4c:	200000d8 	.word	0x200000d8
  ldr  r3, = _ebss
 8006c50:	200006b4 	.word	0x200006b4

08006c54 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006c54:	e7fe      	b.n	8006c54 <DMA1_Channel1_IRQHandler>
	...

08006c58 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006c5e:	1dfb      	adds	r3, r7, #7
 8006c60:	2200      	movs	r2, #0
 8006c62:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8006c64:	4b0b      	ldr	r3, [pc, #44]	; (8006c94 <HAL_Init+0x3c>)
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	4b0a      	ldr	r3, [pc, #40]	; (8006c94 <HAL_Init+0x3c>)
 8006c6a:	2140      	movs	r1, #64	; 0x40
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006c70:	2000      	movs	r0, #0
 8006c72:	f000 f811 	bl	8006c98 <HAL_InitTick>
 8006c76:	1e03      	subs	r3, r0, #0
 8006c78:	d003      	beq.n	8006c82 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8006c7a:	1dfb      	adds	r3, r7, #7
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	701a      	strb	r2, [r3, #0]
 8006c80:	e001      	b.n	8006c86 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006c82:	f7fd fc79 	bl	8004578 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006c86:	1dfb      	adds	r3, r7, #7
 8006c88:	781b      	ldrb	r3, [r3, #0]
}
 8006c8a:	0018      	movs	r0, r3
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	b002      	add	sp, #8
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	46c0      	nop			; (mov r8, r8)
 8006c94:	40022000 	.word	0x40022000

08006c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c98:	b590      	push	{r4, r7, lr}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006ca0:	4b14      	ldr	r3, [pc, #80]	; (8006cf4 <HAL_InitTick+0x5c>)
 8006ca2:	681c      	ldr	r4, [r3, #0]
 8006ca4:	4b14      	ldr	r3, [pc, #80]	; (8006cf8 <HAL_InitTick+0x60>)
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	0019      	movs	r1, r3
 8006caa:	23fa      	movs	r3, #250	; 0xfa
 8006cac:	0098      	lsls	r0, r3, #2
 8006cae:	f7f9 fa33 	bl	8000118 <__udivsi3>
 8006cb2:	0003      	movs	r3, r0
 8006cb4:	0019      	movs	r1, r3
 8006cb6:	0020      	movs	r0, r4
 8006cb8:	f7f9 fa2e 	bl	8000118 <__udivsi3>
 8006cbc:	0003      	movs	r3, r0
 8006cbe:	0018      	movs	r0, r3
 8006cc0:	f000 fe91 	bl	80079e6 <HAL_SYSTICK_Config>
 8006cc4:	1e03      	subs	r3, r0, #0
 8006cc6:	d001      	beq.n	8006ccc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e00f      	b.n	8006cec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b03      	cmp	r3, #3
 8006cd0:	d80b      	bhi.n	8006cea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006cd2:	6879      	ldr	r1, [r7, #4]
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	425b      	negs	r3, r3
 8006cd8:	2200      	movs	r2, #0
 8006cda:	0018      	movs	r0, r3
 8006cdc:	f000 fe5e 	bl	800799c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006ce0:	4b06      	ldr	r3, [pc, #24]	; (8006cfc <HAL_InitTick+0x64>)
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	e000      	b.n	8006cec <HAL_InitTick+0x54>
    return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
}
 8006cec:	0018      	movs	r0, r3
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	b003      	add	sp, #12
 8006cf2:	bd90      	pop	{r4, r7, pc}
 8006cf4:	20000010 	.word	0x20000010
 8006cf8:	20000070 	.word	0x20000070
 8006cfc:	2000006c 	.word	0x2000006c

08006d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006d04:	4b05      	ldr	r3, [pc, #20]	; (8006d1c <HAL_IncTick+0x1c>)
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	001a      	movs	r2, r3
 8006d0a:	4b05      	ldr	r3, [pc, #20]	; (8006d20 <HAL_IncTick+0x20>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	18d2      	adds	r2, r2, r3
 8006d10:	4b03      	ldr	r3, [pc, #12]	; (8006d20 <HAL_IncTick+0x20>)
 8006d12:	601a      	str	r2, [r3, #0]
}
 8006d14:	46c0      	nop			; (mov r8, r8)
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	46c0      	nop			; (mov r8, r8)
 8006d1c:	20000070 	.word	0x20000070
 8006d20:	200006ac 	.word	0x200006ac

08006d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	af00      	add	r7, sp, #0
  return uwTick;
 8006d28:	4b02      	ldr	r3, [pc, #8]	; (8006d34 <HAL_GetTick+0x10>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
}
 8006d2c:	0018      	movs	r0, r3
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	46c0      	nop			; (mov r8, r8)
 8006d34:	200006ac 	.word	0x200006ac

08006d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006d40:	f7ff fff0 	bl	8006d24 <HAL_GetTick>
 8006d44:	0003      	movs	r3, r0
 8006d46:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	d005      	beq.n	8006d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006d52:	4b09      	ldr	r3, [pc, #36]	; (8006d78 <HAL_Delay+0x40>)
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	001a      	movs	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	189b      	adds	r3, r3, r2
 8006d5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006d5e:	46c0      	nop			; (mov r8, r8)
 8006d60:	f7ff ffe0 	bl	8006d24 <HAL_GetTick>
 8006d64:	0002      	movs	r2, r0
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d8f7      	bhi.n	8006d60 <HAL_Delay+0x28>
  {
  }
}
 8006d70:	46c0      	nop			; (mov r8, r8)
 8006d72:	46bd      	mov	sp, r7
 8006d74:	b004      	add	sp, #16
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	20000070 	.word	0x20000070

08006d7c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8006d80:	4b04      	ldr	r3, [pc, #16]	; (8006d94 <HAL_SuspendTick+0x18>)
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	4b03      	ldr	r3, [pc, #12]	; (8006d94 <HAL_SuspendTick+0x18>)
 8006d86:	2102      	movs	r1, #2
 8006d88:	438a      	bics	r2, r1
 8006d8a:	601a      	str	r2, [r3, #0]
}
 8006d8c:	46c0      	nop			; (mov r8, r8)
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	46c0      	nop			; (mov r8, r8)
 8006d94:	e000e010 	.word	0xe000e010

08006d98 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e159      	b.n	800705e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10a      	bne.n	8006dc8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2250      	movs	r2, #80	; 0x50
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	0018      	movs	r0, r3
 8006dc4:	f7fd fbec 	bl	80045a0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dcc:	2210      	movs	r2, #16
 8006dce:	4013      	ands	r3, r2
 8006dd0:	2b10      	cmp	r3, #16
 8006dd2:	d005      	beq.n	8006de0 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	2204      	movs	r2, #4
 8006ddc:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8006dde:	d00b      	beq.n	8006df8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de4:	2210      	movs	r2, #16
 8006de6:	431a      	orrs	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2250      	movs	r2, #80	; 0x50
 8006df0:	2100      	movs	r1, #0
 8006df2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e132      	b.n	800705e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dfc:	4a9a      	ldr	r2, [pc, #616]	; (8007068 <HAL_ADC_Init+0x2d0>)
 8006dfe:	4013      	ands	r3, r2
 8006e00:	2202      	movs	r2, #2
 8006e02:	431a      	orrs	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	2203      	movs	r2, #3
 8006e10:	4013      	ands	r3, r2
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d108      	bne.n	8006e28 <HAL_ADC_Init+0x90>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	4013      	ands	r3, r2
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d101      	bne.n	8006e28 <HAL_ADC_Init+0x90>
 8006e24:	2301      	movs	r3, #1
 8006e26:	e000      	b.n	8006e2a <HAL_ADC_Init+0x92>
 8006e28:	2300      	movs	r3, #0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d149      	bne.n	8006ec2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	23c0      	movs	r3, #192	; 0xc0
 8006e34:	061b      	lsls	r3, r3, #24
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d00b      	beq.n	8006e52 <HAL_ADC_Init+0xba>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685a      	ldr	r2, [r3, #4]
 8006e3e:	2380      	movs	r3, #128	; 0x80
 8006e40:	05db      	lsls	r3, r3, #23
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d005      	beq.n	8006e52 <HAL_ADC_Init+0xba>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	685a      	ldr	r2, [r3, #4]
 8006e4a:	2380      	movs	r3, #128	; 0x80
 8006e4c:	061b      	lsls	r3, r3, #24
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d111      	bne.n	8006e76 <HAL_ADC_Init+0xde>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	691a      	ldr	r2, [r3, #16]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	0092      	lsls	r2, r2, #2
 8006e5e:	0892      	lsrs	r2, r2, #2
 8006e60:	611a      	str	r2, [r3, #16]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	6919      	ldr	r1, [r3, #16]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	430a      	orrs	r2, r1
 8006e72:	611a      	str	r2, [r3, #16]
 8006e74:	e014      	b.n	8006ea0 <HAL_ADC_Init+0x108>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	691a      	ldr	r2, [r3, #16]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	0092      	lsls	r2, r2, #2
 8006e82:	0892      	lsrs	r2, r2, #2
 8006e84:	611a      	str	r2, [r3, #16]
 8006e86:	4b79      	ldr	r3, [pc, #484]	; (800706c <HAL_ADC_Init+0x2d4>)
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	4b78      	ldr	r3, [pc, #480]	; (800706c <HAL_ADC_Init+0x2d4>)
 8006e8c:	4978      	ldr	r1, [pc, #480]	; (8007070 <HAL_ADC_Init+0x2d8>)
 8006e8e:	400a      	ands	r2, r1
 8006e90:	601a      	str	r2, [r3, #0]
 8006e92:	4b76      	ldr	r3, [pc, #472]	; (800706c <HAL_ADC_Init+0x2d4>)
 8006e94:	6819      	ldr	r1, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	685a      	ldr	r2, [r3, #4]
 8006e9a:	4b74      	ldr	r3, [pc, #464]	; (800706c <HAL_ADC_Init+0x2d4>)
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68da      	ldr	r2, [r3, #12]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2118      	movs	r1, #24
 8006eac:	438a      	bics	r2, r1
 8006eae:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68d9      	ldr	r1, [r3, #12]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	689a      	ldr	r2, [r3, #8]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	430a      	orrs	r2, r1
 8006ec0:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8006ec2:	4b6a      	ldr	r3, [pc, #424]	; (800706c <HAL_ADC_Init+0x2d4>)
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	4b69      	ldr	r3, [pc, #420]	; (800706c <HAL_ADC_Init+0x2d4>)
 8006ec8:	496a      	ldr	r1, [pc, #424]	; (8007074 <HAL_ADC_Init+0x2dc>)
 8006eca:	400a      	ands	r2, r1
 8006ecc:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8006ece:	4b67      	ldr	r3, [pc, #412]	; (800706c <HAL_ADC_Init+0x2d4>)
 8006ed0:	6819      	ldr	r1, [r3, #0]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ed6:	065a      	lsls	r2, r3, #25
 8006ed8:	4b64      	ldr	r3, [pc, #400]	; (800706c <HAL_ADC_Init+0x2d4>)
 8006eda:	430a      	orrs	r2, r1
 8006edc:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	689a      	ldr	r2, [r3, #8]
 8006ee4:	2380      	movs	r3, #128	; 0x80
 8006ee6:	055b      	lsls	r3, r3, #21
 8006ee8:	4013      	ands	r3, r2
 8006eea:	d108      	bne.n	8006efe <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	689a      	ldr	r2, [r3, #8]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2180      	movs	r1, #128	; 0x80
 8006ef8:	0549      	lsls	r1, r1, #21
 8006efa:	430a      	orrs	r2, r1
 8006efc:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68da      	ldr	r2, [r3, #12]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	495b      	ldr	r1, [pc, #364]	; (8007078 <HAL_ADC_Init+0x2e0>)
 8006f0a:	400a      	ands	r2, r1
 8006f0c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68d9      	ldr	r1, [r3, #12]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d101      	bne.n	8006f24 <HAL_ADC_Init+0x18c>
 8006f20:	2304      	movs	r3, #4
 8006f22:	e000      	b.n	8006f26 <HAL_ADC_Init+0x18e>
 8006f24:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006f26:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2020      	movs	r0, #32
 8006f2c:	5c1b      	ldrb	r3, [r3, r0]
 8006f2e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8006f30:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	202c      	movs	r0, #44	; 0x2c
 8006f36:	5c1b      	ldrb	r3, [r3, r0]
 8006f38:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006f3a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8006f40:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8006f48:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	69db      	ldr	r3, [r3, #28]
 8006f4e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8006f50:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	430a      	orrs	r2, r1
 8006f58:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f5e:	23c2      	movs	r3, #194	; 0xc2
 8006f60:	33ff      	adds	r3, #255	; 0xff
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d00b      	beq.n	8006f7e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68d9      	ldr	r1, [r3, #12]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8006f74:	431a      	orrs	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	430a      	orrs	r2, r1
 8006f7c:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2221      	movs	r2, #33	; 0x21
 8006f82:	5c9b      	ldrb	r3, [r3, r2]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d11a      	bne.n	8006fbe <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2220      	movs	r2, #32
 8006f8c:	5c9b      	ldrb	r3, [r3, r2]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d109      	bne.n	8006fa6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68da      	ldr	r2, [r3, #12]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2180      	movs	r1, #128	; 0x80
 8006f9e:	0249      	lsls	r1, r1, #9
 8006fa0:	430a      	orrs	r2, r1
 8006fa2:	60da      	str	r2, [r3, #12]
 8006fa4:	e00b      	b.n	8006fbe <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006faa:	2220      	movs	r2, #32
 8006fac:	431a      	orrs	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	431a      	orrs	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d11f      	bne.n	8007006 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	691a      	ldr	r2, [r3, #16]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	492a      	ldr	r1, [pc, #168]	; (800707c <HAL_ADC_Init+0x2e4>)
 8006fd2:	400a      	ands	r2, r1
 8006fd4:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	6919      	ldr	r1, [r3, #16]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006fe4:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8006fea:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	430a      	orrs	r2, r1
 8006ff2:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	691a      	ldr	r2, [r3, #16]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2101      	movs	r1, #1
 8007000:	430a      	orrs	r2, r1
 8007002:	611a      	str	r2, [r3, #16]
 8007004:	e00e      	b.n	8007024 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	2201      	movs	r2, #1
 800700e:	4013      	ands	r3, r2
 8007010:	2b01      	cmp	r3, #1
 8007012:	d107      	bne.n	8007024 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	691a      	ldr	r2, [r3, #16]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2101      	movs	r1, #1
 8007020:	438a      	bics	r2, r1
 8007022:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	695a      	ldr	r2, [r3, #20]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2107      	movs	r1, #7
 8007030:	438a      	bics	r2, r1
 8007032:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	6959      	ldr	r1, [r3, #20]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	430a      	orrs	r2, r1
 8007044:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007050:	2203      	movs	r2, #3
 8007052:	4393      	bics	r3, r2
 8007054:	2201      	movs	r2, #1
 8007056:	431a      	orrs	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	0018      	movs	r0, r3
 8007060:	46bd      	mov	sp, r7
 8007062:	b002      	add	sp, #8
 8007064:	bd80      	pop	{r7, pc}
 8007066:	46c0      	nop			; (mov r8, r8)
 8007068:	fffffefd 	.word	0xfffffefd
 800706c:	40012708 	.word	0x40012708
 8007070:	ffc3ffff 	.word	0xffc3ffff
 8007074:	fdffffff 	.word	0xfdffffff
 8007078:	fffe0219 	.word	0xfffe0219
 800707c:	fffffc03 	.word	0xfffffc03

08007080 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8007080:	b590      	push	{r4, r7, lr}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007088:	230f      	movs	r3, #15
 800708a:	18fb      	adds	r3, r7, r3
 800708c:	2200      	movs	r2, #0
 800708e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	2204      	movs	r2, #4
 8007098:	4013      	ands	r3, r2
 800709a:	d138      	bne.n	800710e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2250      	movs	r2, #80	; 0x50
 80070a0:	5c9b      	ldrb	r3, [r3, r2]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d101      	bne.n	80070aa <HAL_ADC_Start+0x2a>
 80070a6:	2302      	movs	r3, #2
 80070a8:	e038      	b.n	800711c <HAL_ADC_Start+0x9c>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2250      	movs	r2, #80	; 0x50
 80070ae:	2101      	movs	r1, #1
 80070b0:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	69db      	ldr	r3, [r3, #28]
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d007      	beq.n	80070ca <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80070ba:	230f      	movs	r3, #15
 80070bc:	18fc      	adds	r4, r7, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	0018      	movs	r0, r3
 80070c2:	f000 fa87 	bl	80075d4 <ADC_Enable>
 80070c6:	0003      	movs	r3, r0
 80070c8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80070ca:	230f      	movs	r3, #15
 80070cc:	18fb      	adds	r3, r7, r3
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d120      	bne.n	8007116 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070d8:	4a12      	ldr	r2, [pc, #72]	; (8007124 <HAL_ADC_Start+0xa4>)
 80070da:	4013      	ands	r3, r2
 80070dc:	2280      	movs	r2, #128	; 0x80
 80070de:	0052      	lsls	r2, r2, #1
 80070e0:	431a      	orrs	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2250      	movs	r2, #80	; 0x50
 80070f0:	2100      	movs	r1, #0
 80070f2:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	221c      	movs	r2, #28
 80070fa:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	689a      	ldr	r2, [r3, #8]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2104      	movs	r1, #4
 8007108:	430a      	orrs	r2, r1
 800710a:	609a      	str	r2, [r3, #8]
 800710c:	e003      	b.n	8007116 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800710e:	230f      	movs	r3, #15
 8007110:	18fb      	adds	r3, r7, r3
 8007112:	2202      	movs	r2, #2
 8007114:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8007116:	230f      	movs	r3, #15
 8007118:	18fb      	adds	r3, r7, r3
 800711a:	781b      	ldrb	r3, [r3, #0]
}
 800711c:	0018      	movs	r0, r3
 800711e:	46bd      	mov	sp, r7
 8007120:	b005      	add	sp, #20
 8007122:	bd90      	pop	{r4, r7, pc}
 8007124:	fffff0fe 	.word	0xfffff0fe

08007128 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8007128:	b5b0      	push	{r4, r5, r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007130:	230f      	movs	r3, #15
 8007132:	18fb      	adds	r3, r7, r3
 8007134:	2200      	movs	r2, #0
 8007136:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2250      	movs	r2, #80	; 0x50
 800713c:	5c9b      	ldrb	r3, [r3, r2]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d101      	bne.n	8007146 <HAL_ADC_Stop+0x1e>
 8007142:	2302      	movs	r3, #2
 8007144:	e02a      	b.n	800719c <HAL_ADC_Stop+0x74>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2250      	movs	r2, #80	; 0x50
 800714a:	2101      	movs	r1, #1
 800714c:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800714e:	250f      	movs	r5, #15
 8007150:	197c      	adds	r4, r7, r5
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	0018      	movs	r0, r3
 8007156:	f000 fafd 	bl	8007754 <ADC_ConversionStop>
 800715a:	0003      	movs	r3, r0
 800715c:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800715e:	197b      	adds	r3, r7, r5
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d113      	bne.n	800718e <HAL_ADC_Stop+0x66>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8007166:	250f      	movs	r5, #15
 8007168:	197c      	adds	r4, r7, r5
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	0018      	movs	r0, r3
 800716e:	f000 fa91 	bl	8007694 <ADC_Disable>
 8007172:	0003      	movs	r3, r0
 8007174:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8007176:	197b      	adds	r3, r7, r5
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d107      	bne.n	800718e <HAL_ADC_Stop+0x66>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007182:	4a08      	ldr	r2, [pc, #32]	; (80071a4 <HAL_ADC_Stop+0x7c>)
 8007184:	4013      	ands	r3, r2
 8007186:	2201      	movs	r2, #1
 8007188:	431a      	orrs	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2250      	movs	r2, #80	; 0x50
 8007192:	2100      	movs	r1, #0
 8007194:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8007196:	230f      	movs	r3, #15
 8007198:	18fb      	adds	r3, r7, r3
 800719a:	781b      	ldrb	r3, [r3, #0]
}
 800719c:	0018      	movs	r0, r3
 800719e:	46bd      	mov	sp, r7
 80071a0:	b004      	add	sp, #16
 80071a2:	bdb0      	pop	{r4, r5, r7, pc}
 80071a4:	fffffefe 	.word	0xfffffefe

080071a8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80071b2:	2300      	movs	r3, #0
 80071b4:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 80071b6:	2300      	movs	r3, #0
 80071b8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	695b      	ldr	r3, [r3, #20]
 80071be:	2b08      	cmp	r3, #8
 80071c0:	d102      	bne.n	80071c8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80071c2:	2308      	movs	r3, #8
 80071c4:	60fb      	str	r3, [r7, #12]
 80071c6:	e014      	b.n	80071f2 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	2201      	movs	r2, #1
 80071d0:	4013      	ands	r3, r2
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d10b      	bne.n	80071ee <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071da:	2220      	movs	r2, #32
 80071dc:	431a      	orrs	r2, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2250      	movs	r2, #80	; 0x50
 80071e6:	2100      	movs	r1, #0
 80071e8:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e06c      	b.n	80072c8 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80071ee:	230c      	movs	r3, #12
 80071f0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80071f2:	f7ff fd97 	bl	8006d24 <HAL_GetTick>
 80071f6:	0003      	movs	r3, r0
 80071f8:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80071fa:	e019      	b.n	8007230 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	3301      	adds	r3, #1
 8007200:	d016      	beq.n	8007230 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d007      	beq.n	8007218 <HAL_ADC_PollForConversion+0x70>
 8007208:	f7ff fd8c 	bl	8006d24 <HAL_GetTick>
 800720c:	0002      	movs	r2, r0
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	429a      	cmp	r2, r3
 8007216:	d20b      	bcs.n	8007230 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800721c:	2204      	movs	r2, #4
 800721e:	431a      	orrs	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2250      	movs	r2, #80	; 0x50
 8007228:	2100      	movs	r1, #0
 800722a:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 800722c:	2303      	movs	r3, #3
 800722e:	e04b      	b.n	80072c8 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	4013      	ands	r3, r2
 800723a:	d0df      	beq.n	80071fc <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007240:	2280      	movs	r2, #128	; 0x80
 8007242:	0092      	lsls	r2, r2, #2
 8007244:	431a      	orrs	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68da      	ldr	r2, [r3, #12]
 8007250:	23c0      	movs	r3, #192	; 0xc0
 8007252:	011b      	lsls	r3, r3, #4
 8007254:	4013      	ands	r3, r2
 8007256:	d12e      	bne.n	80072b6 <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2220      	movs	r2, #32
 800725c:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800725e:	2b00      	cmp	r3, #0
 8007260:	d129      	bne.n	80072b6 <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2208      	movs	r2, #8
 800726a:	4013      	ands	r3, r2
 800726c:	2b08      	cmp	r3, #8
 800726e:	d122      	bne.n	80072b6 <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	2204      	movs	r2, #4
 8007278:	4013      	ands	r3, r2
 800727a:	d110      	bne.n	800729e <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	685a      	ldr	r2, [r3, #4]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	210c      	movs	r1, #12
 8007288:	438a      	bics	r2, r1
 800728a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007290:	4a0f      	ldr	r2, [pc, #60]	; (80072d0 <HAL_ADC_PollForConversion+0x128>)
 8007292:	4013      	ands	r3, r2
 8007294:	2201      	movs	r2, #1
 8007296:	431a      	orrs	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	655a      	str	r2, [r3, #84]	; 0x54
 800729c:	e00b      	b.n	80072b6 <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a2:	2220      	movs	r2, #32
 80072a4:	431a      	orrs	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ae:	2201      	movs	r2, #1
 80072b0:	431a      	orrs	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d103      	bne.n	80072c6 <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	220c      	movs	r2, #12
 80072c4:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	0018      	movs	r0, r3
 80072ca:	46bd      	mov	sp, r7
 80072cc:	b004      	add	sp, #16
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	fffffefe 	.word	0xfffffefe

080072d4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80072e2:	0018      	movs	r0, r3
 80072e4:	46bd      	mov	sp, r7
 80072e6:	b002      	add	sp, #8
 80072e8:	bd80      	pop	{r7, pc}
	...

080072ec <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2204      	movs	r2, #4
 80072fc:	4013      	ands	r3, r2
 80072fe:	2b04      	cmp	r3, #4
 8007300:	d106      	bne.n	8007310 <HAL_ADC_IRQHandler+0x24>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	2204      	movs	r2, #4
 800730a:	4013      	ands	r3, r2
 800730c:	2b04      	cmp	r3, #4
 800730e:	d00d      	beq.n	800732c <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2208      	movs	r2, #8
 8007318:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800731a:	2b08      	cmp	r3, #8
 800731c:	d154      	bne.n	80073c8 <HAL_ADC_IRQHandler+0xdc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	2208      	movs	r2, #8
 8007326:	4013      	ands	r3, r2
 8007328:	2b08      	cmp	r3, #8
 800732a:	d14d      	bne.n	80073c8 <HAL_ADC_IRQHandler+0xdc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007330:	2210      	movs	r2, #16
 8007332:	4013      	ands	r3, r2
 8007334:	d106      	bne.n	8007344 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800733a:	2280      	movs	r2, #128	; 0x80
 800733c:	0092      	lsls	r2, r2, #2
 800733e:	431a      	orrs	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68da      	ldr	r2, [r3, #12]
 800734a:	23c0      	movs	r3, #192	; 0xc0
 800734c:	011b      	lsls	r3, r3, #4
 800734e:	4013      	ands	r3, r2
 8007350:	d12e      	bne.n	80073b0 <HAL_ADC_IRQHandler+0xc4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2220      	movs	r2, #32
 8007356:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007358:	2b00      	cmp	r3, #0
 800735a:	d129      	bne.n	80073b0 <HAL_ADC_IRQHandler+0xc4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2208      	movs	r2, #8
 8007364:	4013      	ands	r3, r2
 8007366:	2b08      	cmp	r3, #8
 8007368:	d122      	bne.n	80073b0 <HAL_ADC_IRQHandler+0xc4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	2204      	movs	r2, #4
 8007372:	4013      	ands	r3, r2
 8007374:	d110      	bne.n	8007398 <HAL_ADC_IRQHandler+0xac>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	685a      	ldr	r2, [r3, #4]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	210c      	movs	r1, #12
 8007382:	438a      	bics	r2, r1
 8007384:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800738a:	4a35      	ldr	r2, [pc, #212]	; (8007460 <HAL_ADC_IRQHandler+0x174>)
 800738c:	4013      	ands	r3, r2
 800738e:	2201      	movs	r2, #1
 8007390:	431a      	orrs	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	655a      	str	r2, [r3, #84]	; 0x54
 8007396:	e00b      	b.n	80073b0 <HAL_ADC_IRQHandler+0xc4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800739c:	2220      	movs	r2, #32
 800739e:	431a      	orrs	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073a8:	2201      	movs	r2, #1
 80073aa:	431a      	orrs	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	0018      	movs	r0, r3
 80073b4:	f000 f856 	bl	8007464 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	699b      	ldr	r3, [r3, #24]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d003      	beq.n	80073c8 <HAL_ADC_IRQHandler+0xdc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	220c      	movs	r2, #12
 80073c6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2280      	movs	r2, #128	; 0x80
 80073d0:	4013      	ands	r3, r2
 80073d2:	2b80      	cmp	r3, #128	; 0x80
 80073d4:	d115      	bne.n	8007402 <HAL_ADC_IRQHandler+0x116>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	2280      	movs	r2, #128	; 0x80
 80073de:	4013      	ands	r3, r2
 80073e0:	2b80      	cmp	r3, #128	; 0x80
 80073e2:	d10e      	bne.n	8007402 <HAL_ADC_IRQHandler+0x116>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e8:	2280      	movs	r2, #128	; 0x80
 80073ea:	0252      	lsls	r2, r2, #9
 80073ec:	431a      	orrs	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	655a      	str	r2, [r3, #84]	; 0x54
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	0018      	movs	r0, r3
 80073f6:	f000 f83d 	bl	8007474 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2280      	movs	r2, #128	; 0x80
 8007400:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2210      	movs	r2, #16
 800740a:	4013      	ands	r3, r2
 800740c:	2b10      	cmp	r3, #16
 800740e:	d123      	bne.n	8007458 <HAL_ADC_IRQHandler+0x16c>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	2210      	movs	r2, #16
 8007418:	4013      	ands	r3, r2
 800741a:	2b10      	cmp	r3, #16
 800741c:	d11c      	bne.n	8007458 <HAL_ADC_IRQHandler+0x16c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007422:	2b00      	cmp	r3, #0
 8007424:	d006      	beq.n	8007434 <HAL_ADC_IRQHandler+0x148>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	2201      	movs	r2, #1
 800742e:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8007430:	2b01      	cmp	r3, #1
 8007432:	d10d      	bne.n	8007450 <HAL_ADC_IRQHandler+0x164>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007438:	2202      	movs	r2, #2
 800743a:	431a      	orrs	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2210      	movs	r2, #16
 8007446:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	0018      	movs	r0, r3
 800744c:	f000 f81a 	bl	8007484 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2210      	movs	r2, #16
 8007456:	601a      	str	r2, [r3, #0]
  }
  
}
 8007458:	46c0      	nop			; (mov r8, r8)
 800745a:	46bd      	mov	sp, r7
 800745c:	b002      	add	sp, #8
 800745e:	bd80      	pop	{r7, pc}
 8007460:	fffffefe 	.word	0xfffffefe

08007464 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800746c:	46c0      	nop			; (mov r8, r8)
 800746e:	46bd      	mov	sp, r7
 8007470:	b002      	add	sp, #8
 8007472:	bd80      	pop	{r7, pc}

08007474 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800747c:	46c0      	nop			; (mov r8, r8)
 800747e:	46bd      	mov	sp, r7
 8007480:	b002      	add	sp, #8
 8007482:	bd80      	pop	{r7, pc}

08007484 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800748c:	46c0      	nop			; (mov r8, r8)
 800748e:	46bd      	mov	sp, r7
 8007490:	b002      	add	sp, #8
 8007492:	bd80      	pop	{r7, pc}

08007494 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2250      	movs	r2, #80	; 0x50
 80074a2:	5c9b      	ldrb	r3, [r3, r2]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d101      	bne.n	80074ac <HAL_ADC_ConfigChannel+0x18>
 80074a8:	2302      	movs	r3, #2
 80074aa:	e085      	b.n	80075b8 <HAL_ADC_ConfigChannel+0x124>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2250      	movs	r2, #80	; 0x50
 80074b0:	2101      	movs	r1, #1
 80074b2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	2204      	movs	r2, #4
 80074bc:	4013      	ands	r3, r2
 80074be:	d00b      	beq.n	80074d8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c4:	2220      	movs	r2, #32
 80074c6:	431a      	orrs	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2250      	movs	r2, #80	; 0x50
 80074d0:	2100      	movs	r1, #0
 80074d2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e06f      	b.n	80075b8 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	4a38      	ldr	r2, [pc, #224]	; (80075c0 <HAL_ADC_ConfigChannel+0x12c>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d035      	beq.n	800754e <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	035b      	lsls	r3, r3, #13
 80074ee:	0b5a      	lsrs	r2, r3, #13
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	430a      	orrs	r2, r1
 80074f6:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	2380      	movs	r3, #128	; 0x80
 80074fe:	02db      	lsls	r3, r3, #11
 8007500:	4013      	ands	r3, r2
 8007502:	d009      	beq.n	8007518 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8007504:	4b2f      	ldr	r3, [pc, #188]	; (80075c4 <HAL_ADC_ConfigChannel+0x130>)
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	4b2e      	ldr	r3, [pc, #184]	; (80075c4 <HAL_ADC_ConfigChannel+0x130>)
 800750a:	2180      	movs	r1, #128	; 0x80
 800750c:	0409      	lsls	r1, r1, #16
 800750e:	430a      	orrs	r2, r1
 8007510:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8007512:	200a      	movs	r0, #10
 8007514:	f000 f964 	bl	80077e0 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	2380      	movs	r3, #128	; 0x80
 800751e:	029b      	lsls	r3, r3, #10
 8007520:	4013      	ands	r3, r2
 8007522:	d006      	beq.n	8007532 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8007524:	4b27      	ldr	r3, [pc, #156]	; (80075c4 <HAL_ADC_ConfigChannel+0x130>)
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	4b26      	ldr	r3, [pc, #152]	; (80075c4 <HAL_ADC_ConfigChannel+0x130>)
 800752a:	2180      	movs	r1, #128	; 0x80
 800752c:	03c9      	lsls	r1, r1, #15
 800752e:	430a      	orrs	r2, r1
 8007530:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	2380      	movs	r3, #128	; 0x80
 8007538:	025b      	lsls	r3, r3, #9
 800753a:	4013      	ands	r3, r2
 800753c:	d037      	beq.n	80075ae <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 800753e:	4b21      	ldr	r3, [pc, #132]	; (80075c4 <HAL_ADC_ConfigChannel+0x130>)
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	4b20      	ldr	r3, [pc, #128]	; (80075c4 <HAL_ADC_ConfigChannel+0x130>)
 8007544:	2180      	movs	r1, #128	; 0x80
 8007546:	0449      	lsls	r1, r1, #17
 8007548:	430a      	orrs	r2, r1
 800754a:	601a      	str	r2, [r3, #0]
 800754c:	e02f      	b.n	80075ae <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	035b      	lsls	r3, r3, #13
 800755a:	0b5b      	lsrs	r3, r3, #13
 800755c:	43d9      	mvns	r1, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	400a      	ands	r2, r1
 8007564:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	2380      	movs	r3, #128	; 0x80
 800756c:	02db      	lsls	r3, r3, #11
 800756e:	4013      	ands	r3, r2
 8007570:	d005      	beq.n	800757e <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8007572:	4b14      	ldr	r3, [pc, #80]	; (80075c4 <HAL_ADC_ConfigChannel+0x130>)
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	4b13      	ldr	r3, [pc, #76]	; (80075c4 <HAL_ADC_ConfigChannel+0x130>)
 8007578:	4913      	ldr	r1, [pc, #76]	; (80075c8 <HAL_ADC_ConfigChannel+0x134>)
 800757a:	400a      	ands	r2, r1
 800757c:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	2380      	movs	r3, #128	; 0x80
 8007584:	029b      	lsls	r3, r3, #10
 8007586:	4013      	ands	r3, r2
 8007588:	d005      	beq.n	8007596 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800758a:	4b0e      	ldr	r3, [pc, #56]	; (80075c4 <HAL_ADC_ConfigChannel+0x130>)
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	4b0d      	ldr	r3, [pc, #52]	; (80075c4 <HAL_ADC_ConfigChannel+0x130>)
 8007590:	490e      	ldr	r1, [pc, #56]	; (80075cc <HAL_ADC_ConfigChannel+0x138>)
 8007592:	400a      	ands	r2, r1
 8007594:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	2380      	movs	r3, #128	; 0x80
 800759c:	025b      	lsls	r3, r3, #9
 800759e:	4013      	ands	r3, r2
 80075a0:	d005      	beq.n	80075ae <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 80075a2:	4b08      	ldr	r3, [pc, #32]	; (80075c4 <HAL_ADC_ConfigChannel+0x130>)
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	4b07      	ldr	r3, [pc, #28]	; (80075c4 <HAL_ADC_ConfigChannel+0x130>)
 80075a8:	4909      	ldr	r1, [pc, #36]	; (80075d0 <HAL_ADC_ConfigChannel+0x13c>)
 80075aa:	400a      	ands	r2, r1
 80075ac:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2250      	movs	r2, #80	; 0x50
 80075b2:	2100      	movs	r1, #0
 80075b4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	0018      	movs	r0, r3
 80075ba:	46bd      	mov	sp, r7
 80075bc:	b002      	add	sp, #8
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	00001001 	.word	0x00001001
 80075c4:	40012708 	.word	0x40012708
 80075c8:	ff7fffff 	.word	0xff7fffff
 80075cc:	ffbfffff 	.word	0xffbfffff
 80075d0:	feffffff 	.word	0xfeffffff

080075d4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80075dc:	2300      	movs	r3, #0
 80075de:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	2203      	movs	r2, #3
 80075e8:	4013      	ands	r3, r2
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d108      	bne.n	8007600 <ADC_Enable+0x2c>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2201      	movs	r2, #1
 80075f6:	4013      	ands	r3, r2
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d101      	bne.n	8007600 <ADC_Enable+0x2c>
 80075fc:	2301      	movs	r3, #1
 80075fe:	e000      	b.n	8007602 <ADC_Enable+0x2e>
 8007600:	2300      	movs	r3, #0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d13f      	bne.n	8007686 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	4a20      	ldr	r2, [pc, #128]	; (8007690 <ADC_Enable+0xbc>)
 800760e:	4013      	ands	r3, r2
 8007610:	d00d      	beq.n	800762e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007616:	2210      	movs	r2, #16
 8007618:	431a      	orrs	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007622:	2201      	movs	r2, #1
 8007624:	431a      	orrs	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e02c      	b.n	8007688 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	689a      	ldr	r2, [r3, #8]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2101      	movs	r1, #1
 800763a:	430a      	orrs	r2, r1
 800763c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800763e:	2001      	movs	r0, #1
 8007640:	f000 f8ce 	bl	80077e0 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8007644:	f7ff fb6e 	bl	8006d24 <HAL_GetTick>
 8007648:	0003      	movs	r3, r0
 800764a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800764c:	e014      	b.n	8007678 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800764e:	f7ff fb69 	bl	8006d24 <HAL_GetTick>
 8007652:	0002      	movs	r2, r0
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	1ad3      	subs	r3, r2, r3
 8007658:	2b0a      	cmp	r3, #10
 800765a:	d90d      	bls.n	8007678 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007660:	2210      	movs	r2, #16
 8007662:	431a      	orrs	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800766c:	2201      	movs	r2, #1
 800766e:	431a      	orrs	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	e007      	b.n	8007688 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2201      	movs	r2, #1
 8007680:	4013      	ands	r3, r2
 8007682:	2b01      	cmp	r3, #1
 8007684:	d1e3      	bne.n	800764e <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	0018      	movs	r0, r3
 800768a:	46bd      	mov	sp, r7
 800768c:	b004      	add	sp, #16
 800768e:	bd80      	pop	{r7, pc}
 8007690:	80000017 	.word	0x80000017

08007694 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800769c:	2300      	movs	r3, #0
 800769e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	2203      	movs	r2, #3
 80076a8:	4013      	ands	r3, r2
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d108      	bne.n	80076c0 <ADC_Disable+0x2c>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2201      	movs	r2, #1
 80076b6:	4013      	ands	r3, r2
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d101      	bne.n	80076c0 <ADC_Disable+0x2c>
 80076bc:	2301      	movs	r3, #1
 80076be:	e000      	b.n	80076c2 <ADC_Disable+0x2e>
 80076c0:	2300      	movs	r3, #0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d041      	beq.n	800774a <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	2205      	movs	r2, #5
 80076ce:	4013      	ands	r3, r2
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d110      	bne.n	80076f6 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	689a      	ldr	r2, [r3, #8]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2102      	movs	r1, #2
 80076e0:	430a      	orrs	r2, r1
 80076e2:	609a      	str	r2, [r3, #8]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2203      	movs	r2, #3
 80076ea:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80076ec:	f7ff fb1a 	bl	8006d24 <HAL_GetTick>
 80076f0:	0003      	movs	r3, r0
 80076f2:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80076f4:	e022      	b.n	800773c <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076fa:	2210      	movs	r2, #16
 80076fc:	431a      	orrs	r2, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007706:	2201      	movs	r2, #1
 8007708:	431a      	orrs	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e01c      	b.n	800774c <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007712:	f7ff fb07 	bl	8006d24 <HAL_GetTick>
 8007716:	0002      	movs	r2, r0
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	1ad3      	subs	r3, r2, r3
 800771c:	2b0a      	cmp	r3, #10
 800771e:	d90d      	bls.n	800773c <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007724:	2210      	movs	r2, #16
 8007726:	431a      	orrs	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007730:	2201      	movs	r2, #1
 8007732:	431a      	orrs	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	e007      	b.n	800774c <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	2201      	movs	r2, #1
 8007744:	4013      	ands	r3, r2
 8007746:	2b01      	cmp	r3, #1
 8007748:	d0e3      	beq.n	8007712 <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	0018      	movs	r0, r3
 800774e:	46bd      	mov	sp, r7
 8007750:	b004      	add	sp, #16
 8007752:	bd80      	pop	{r7, pc}

08007754 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800775c:	2300      	movs	r3, #0
 800775e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	2204      	movs	r2, #4
 8007768:	4013      	ands	r3, r2
 800776a:	d034      	beq.n	80077d6 <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	2204      	movs	r2, #4
 8007774:	4013      	ands	r3, r2
 8007776:	2b04      	cmp	r3, #4
 8007778:	d10d      	bne.n	8007796 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	2202      	movs	r2, #2
 8007782:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8007784:	d107      	bne.n	8007796 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	689a      	ldr	r2, [r3, #8]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2110      	movs	r1, #16
 8007792:	430a      	orrs	r2, r1
 8007794:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007796:	f7ff fac5 	bl	8006d24 <HAL_GetTick>
 800779a:	0003      	movs	r3, r0
 800779c:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800779e:	e014      	b.n	80077ca <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80077a0:	f7ff fac0 	bl	8006d24 <HAL_GetTick>
 80077a4:	0002      	movs	r2, r0
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	2b0a      	cmp	r3, #10
 80077ac:	d90d      	bls.n	80077ca <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077b2:	2210      	movs	r2, #16
 80077b4:	431a      	orrs	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077be:	2201      	movs	r2, #1
 80077c0:	431a      	orrs	r2, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e006      	b.n	80077d8 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	2204      	movs	r2, #4
 80077d2:	4013      	ands	r3, r2
 80077d4:	d1e4      	bne.n	80077a0 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	0018      	movs	r0, r3
 80077da:	46bd      	mov	sp, r7
 80077dc:	b004      	add	sp, #16
 80077de:	bd80      	pop	{r7, pc}

080077e0 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80077e8:	4b0a      	ldr	r3, [pc, #40]	; (8007814 <ADC_DelayMicroSecond+0x34>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	490a      	ldr	r1, [pc, #40]	; (8007818 <ADC_DelayMicroSecond+0x38>)
 80077ee:	0018      	movs	r0, r3
 80077f0:	f7f8 fc92 	bl	8000118 <__udivsi3>
 80077f4:	0003      	movs	r3, r0
 80077f6:	001a      	movs	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4353      	muls	r3, r2
 80077fc:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80077fe:	e002      	b.n	8007806 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	3b01      	subs	r3, #1
 8007804:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1f9      	bne.n	8007800 <ADC_DelayMicroSecond+0x20>
  } 
}
 800780c:	46c0      	nop			; (mov r8, r8)
 800780e:	46bd      	mov	sp, r7
 8007810:	b004      	add	sp, #16
 8007812:	bd80      	pop	{r7, pc}
 8007814:	20000010 	.word	0x20000010
 8007818:	000f4240 	.word	0x000f4240

0800781c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	0002      	movs	r2, r0
 8007824:	1dfb      	adds	r3, r7, #7
 8007826:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8007828:	1dfb      	adds	r3, r7, #7
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	001a      	movs	r2, r3
 800782e:	231f      	movs	r3, #31
 8007830:	401a      	ands	r2, r3
 8007832:	4b04      	ldr	r3, [pc, #16]	; (8007844 <NVIC_EnableIRQ+0x28>)
 8007834:	2101      	movs	r1, #1
 8007836:	4091      	lsls	r1, r2
 8007838:	000a      	movs	r2, r1
 800783a:	601a      	str	r2, [r3, #0]
}
 800783c:	46c0      	nop			; (mov r8, r8)
 800783e:	46bd      	mov	sp, r7
 8007840:	b002      	add	sp, #8
 8007842:	bd80      	pop	{r7, pc}
 8007844:	e000e100 	.word	0xe000e100

08007848 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	0002      	movs	r2, r0
 8007850:	1dfb      	adds	r3, r7, #7
 8007852:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8007854:	1dfb      	adds	r3, r7, #7
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	001a      	movs	r2, r3
 800785a:	231f      	movs	r3, #31
 800785c:	4013      	ands	r3, r2
 800785e:	4905      	ldr	r1, [pc, #20]	; (8007874 <NVIC_ClearPendingIRQ+0x2c>)
 8007860:	2201      	movs	r2, #1
 8007862:	409a      	lsls	r2, r3
 8007864:	23c0      	movs	r3, #192	; 0xc0
 8007866:	005b      	lsls	r3, r3, #1
 8007868:	50ca      	str	r2, [r1, r3]
}
 800786a:	46c0      	nop			; (mov r8, r8)
 800786c:	46bd      	mov	sp, r7
 800786e:	b002      	add	sp, #8
 8007870:	bd80      	pop	{r7, pc}
 8007872:	46c0      	nop			; (mov r8, r8)
 8007874:	e000e100 	.word	0xe000e100

08007878 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007878:	b590      	push	{r4, r7, lr}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	0002      	movs	r2, r0
 8007880:	6039      	str	r1, [r7, #0]
 8007882:	1dfb      	adds	r3, r7, #7
 8007884:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8007886:	1dfb      	adds	r3, r7, #7
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	2b7f      	cmp	r3, #127	; 0x7f
 800788c:	d932      	bls.n	80078f4 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800788e:	4a2f      	ldr	r2, [pc, #188]	; (800794c <NVIC_SetPriority+0xd4>)
 8007890:	1dfb      	adds	r3, r7, #7
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	0019      	movs	r1, r3
 8007896:	230f      	movs	r3, #15
 8007898:	400b      	ands	r3, r1
 800789a:	3b08      	subs	r3, #8
 800789c:	089b      	lsrs	r3, r3, #2
 800789e:	3306      	adds	r3, #6
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	18d3      	adds	r3, r2, r3
 80078a4:	3304      	adds	r3, #4
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	1dfa      	adds	r2, r7, #7
 80078aa:	7812      	ldrb	r2, [r2, #0]
 80078ac:	0011      	movs	r1, r2
 80078ae:	2203      	movs	r2, #3
 80078b0:	400a      	ands	r2, r1
 80078b2:	00d2      	lsls	r2, r2, #3
 80078b4:	21ff      	movs	r1, #255	; 0xff
 80078b6:	4091      	lsls	r1, r2
 80078b8:	000a      	movs	r2, r1
 80078ba:	43d2      	mvns	r2, r2
 80078bc:	401a      	ands	r2, r3
 80078be:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	019b      	lsls	r3, r3, #6
 80078c4:	22ff      	movs	r2, #255	; 0xff
 80078c6:	401a      	ands	r2, r3
 80078c8:	1dfb      	adds	r3, r7, #7
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	0018      	movs	r0, r3
 80078ce:	2303      	movs	r3, #3
 80078d0:	4003      	ands	r3, r0
 80078d2:	00db      	lsls	r3, r3, #3
 80078d4:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80078d6:	481d      	ldr	r0, [pc, #116]	; (800794c <NVIC_SetPriority+0xd4>)
 80078d8:	1dfb      	adds	r3, r7, #7
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	001c      	movs	r4, r3
 80078de:	230f      	movs	r3, #15
 80078e0:	4023      	ands	r3, r4
 80078e2:	3b08      	subs	r3, #8
 80078e4:	089b      	lsrs	r3, r3, #2
 80078e6:	430a      	orrs	r2, r1
 80078e8:	3306      	adds	r3, #6
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	18c3      	adds	r3, r0, r3
 80078ee:	3304      	adds	r3, #4
 80078f0:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80078f2:	e027      	b.n	8007944 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80078f4:	4a16      	ldr	r2, [pc, #88]	; (8007950 <NVIC_SetPriority+0xd8>)
 80078f6:	1dfb      	adds	r3, r7, #7
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	b25b      	sxtb	r3, r3
 80078fc:	089b      	lsrs	r3, r3, #2
 80078fe:	33c0      	adds	r3, #192	; 0xc0
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	589b      	ldr	r3, [r3, r2]
 8007904:	1dfa      	adds	r2, r7, #7
 8007906:	7812      	ldrb	r2, [r2, #0]
 8007908:	0011      	movs	r1, r2
 800790a:	2203      	movs	r2, #3
 800790c:	400a      	ands	r2, r1
 800790e:	00d2      	lsls	r2, r2, #3
 8007910:	21ff      	movs	r1, #255	; 0xff
 8007912:	4091      	lsls	r1, r2
 8007914:	000a      	movs	r2, r1
 8007916:	43d2      	mvns	r2, r2
 8007918:	401a      	ands	r2, r3
 800791a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	019b      	lsls	r3, r3, #6
 8007920:	22ff      	movs	r2, #255	; 0xff
 8007922:	401a      	ands	r2, r3
 8007924:	1dfb      	adds	r3, r7, #7
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	0018      	movs	r0, r3
 800792a:	2303      	movs	r3, #3
 800792c:	4003      	ands	r3, r0
 800792e:	00db      	lsls	r3, r3, #3
 8007930:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007932:	4807      	ldr	r0, [pc, #28]	; (8007950 <NVIC_SetPriority+0xd8>)
 8007934:	1dfb      	adds	r3, r7, #7
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	b25b      	sxtb	r3, r3
 800793a:	089b      	lsrs	r3, r3, #2
 800793c:	430a      	orrs	r2, r1
 800793e:	33c0      	adds	r3, #192	; 0xc0
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	501a      	str	r2, [r3, r0]
}
 8007944:	46c0      	nop			; (mov r8, r8)
 8007946:	46bd      	mov	sp, r7
 8007948:	b003      	add	sp, #12
 800794a:	bd90      	pop	{r4, r7, pc}
 800794c:	e000ed00 	.word	0xe000ed00
 8007950:	e000e100 	.word	0xe000e100

08007954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	3b01      	subs	r3, #1
 8007960:	4a0c      	ldr	r2, [pc, #48]	; (8007994 <SysTick_Config+0x40>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d901      	bls.n	800796a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007966:	2301      	movs	r3, #1
 8007968:	e010      	b.n	800798c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800796a:	4b0b      	ldr	r3, [pc, #44]	; (8007998 <SysTick_Config+0x44>)
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	3a01      	subs	r2, #1
 8007970:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007972:	2301      	movs	r3, #1
 8007974:	425b      	negs	r3, r3
 8007976:	2103      	movs	r1, #3
 8007978:	0018      	movs	r0, r3
 800797a:	f7ff ff7d 	bl	8007878 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800797e:	4b06      	ldr	r3, [pc, #24]	; (8007998 <SysTick_Config+0x44>)
 8007980:	2200      	movs	r2, #0
 8007982:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007984:	4b04      	ldr	r3, [pc, #16]	; (8007998 <SysTick_Config+0x44>)
 8007986:	2207      	movs	r2, #7
 8007988:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800798a:	2300      	movs	r3, #0
}
 800798c:	0018      	movs	r0, r3
 800798e:	46bd      	mov	sp, r7
 8007990:	b002      	add	sp, #8
 8007992:	bd80      	pop	{r7, pc}
 8007994:	00ffffff 	.word	0x00ffffff
 8007998:	e000e010 	.word	0xe000e010

0800799c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60b9      	str	r1, [r7, #8]
 80079a4:	607a      	str	r2, [r7, #4]
 80079a6:	210f      	movs	r1, #15
 80079a8:	187b      	adds	r3, r7, r1
 80079aa:	1c02      	adds	r2, r0, #0
 80079ac:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80079ae:	68ba      	ldr	r2, [r7, #8]
 80079b0:	187b      	adds	r3, r7, r1
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	b25b      	sxtb	r3, r3
 80079b6:	0011      	movs	r1, r2
 80079b8:	0018      	movs	r0, r3
 80079ba:	f7ff ff5d 	bl	8007878 <NVIC_SetPriority>
}
 80079be:	46c0      	nop			; (mov r8, r8)
 80079c0:	46bd      	mov	sp, r7
 80079c2:	b004      	add	sp, #16
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b082      	sub	sp, #8
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	0002      	movs	r2, r0
 80079ce:	1dfb      	adds	r3, r7, #7
 80079d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80079d2:	1dfb      	adds	r3, r7, #7
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	b25b      	sxtb	r3, r3
 80079d8:	0018      	movs	r0, r3
 80079da:	f7ff ff1f 	bl	800781c <NVIC_EnableIRQ>
}
 80079de:	46c0      	nop			; (mov r8, r8)
 80079e0:	46bd      	mov	sp, r7
 80079e2:	b002      	add	sp, #8
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b082      	sub	sp, #8
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	0018      	movs	r0, r3
 80079f2:	f7ff ffaf 	bl	8007954 <SysTick_Config>
 80079f6:	0003      	movs	r3, r0
}
 80079f8:	0018      	movs	r0, r3
 80079fa:	46bd      	mov	sp, r7
 80079fc:	b002      	add	sp, #8
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	0002      	movs	r2, r0
 8007a08:	1dfb      	adds	r3, r7, #7
 8007a0a:	701a      	strb	r2, [r3, #0]
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8007a0c:	1dfb      	adds	r3, r7, #7
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	b25b      	sxtb	r3, r3
 8007a12:	0018      	movs	r0, r3
 8007a14:	f7ff ff18 	bl	8007848 <NVIC_ClearPendingIRQ>
}
 8007a18:	46c0      	nop			; (mov r8, r8)
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	b002      	add	sp, #8
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d101      	bne.n	8007a32 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e061      	b.n	8007af6 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a32      	ldr	r2, [pc, #200]	; (8007b00 <HAL_DMA_Init+0xe0>)
 8007a38:	4694      	mov	ip, r2
 8007a3a:	4463      	add	r3, ip
 8007a3c:	2114      	movs	r1, #20
 8007a3e:	0018      	movs	r0, r3
 8007a40:	f7f8 fb6a 	bl	8000118 <__udivsi3>
 8007a44:	0003      	movs	r3, r0
 8007a46:	009a      	lsls	r2, r3, #2
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a2d      	ldr	r2, [pc, #180]	; (8007b04 <HAL_DMA_Init+0xe4>)
 8007a50:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2225      	movs	r2, #37	; 0x25
 8007a56:	2102      	movs	r1, #2
 8007a58:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	4a28      	ldr	r2, [pc, #160]	; (8007b08 <HAL_DMA_Init+0xe8>)
 8007a66:	4013      	ands	r3, r2
 8007a68:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007a72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a1b      	ldr	r3, [r3, #32]
 8007a90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	689a      	ldr	r2, [r3, #8]
 8007aa4:	2380      	movs	r3, #128	; 0x80
 8007aa6:	01db      	lsls	r3, r3, #7
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d018      	beq.n	8007ade <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007aac:	4b17      	ldr	r3, [pc, #92]	; (8007b0c <HAL_DMA_Init+0xec>)
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ab4:	211c      	movs	r1, #28
 8007ab6:	400b      	ands	r3, r1
 8007ab8:	210f      	movs	r1, #15
 8007aba:	4099      	lsls	r1, r3
 8007abc:	000b      	movs	r3, r1
 8007abe:	43d9      	mvns	r1, r3
 8007ac0:	4b12      	ldr	r3, [pc, #72]	; (8007b0c <HAL_DMA_Init+0xec>)
 8007ac2:	400a      	ands	r2, r1
 8007ac4:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007ac6:	4b11      	ldr	r3, [pc, #68]	; (8007b0c <HAL_DMA_Init+0xec>)
 8007ac8:	6819      	ldr	r1, [r3, #0]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	685a      	ldr	r2, [r3, #4]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ad2:	201c      	movs	r0, #28
 8007ad4:	4003      	ands	r3, r0
 8007ad6:	409a      	lsls	r2, r3
 8007ad8:	4b0c      	ldr	r3, [pc, #48]	; (8007b0c <HAL_DMA_Init+0xec>)
 8007ada:	430a      	orrs	r2, r1
 8007adc:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2225      	movs	r2, #37	; 0x25
 8007ae8:	2101      	movs	r1, #1
 8007aea:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2224      	movs	r2, #36	; 0x24
 8007af0:	2100      	movs	r1, #0
 8007af2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	0018      	movs	r0, r3
 8007af8:	46bd      	mov	sp, r7
 8007afa:	b004      	add	sp, #16
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	46c0      	nop			; (mov r8, r8)
 8007b00:	bffdfff8 	.word	0xbffdfff8
 8007b04:	40020000 	.word	0x40020000
 8007b08:	ffff800f 	.word	0xffff800f
 8007b0c:	400200a8 	.word	0x400200a8

08007b10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	607a      	str	r2, [r7, #4]
 8007b1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b1e:	2317      	movs	r3, #23
 8007b20:	18fb      	adds	r3, r7, r3
 8007b22:	2200      	movs	r2, #0
 8007b24:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2224      	movs	r2, #36	; 0x24
 8007b2a:	5c9b      	ldrb	r3, [r3, r2]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d101      	bne.n	8007b34 <HAL_DMA_Start_IT+0x24>
 8007b30:	2302      	movs	r3, #2
 8007b32:	e04f      	b.n	8007bd4 <HAL_DMA_Start_IT+0xc4>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2224      	movs	r2, #36	; 0x24
 8007b38:	2101      	movs	r1, #1
 8007b3a:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2225      	movs	r2, #37	; 0x25
 8007b40:	5c9b      	ldrb	r3, [r3, r2]
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d13a      	bne.n	8007bbe <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2225      	movs	r2, #37	; 0x25
 8007b4c:	2102      	movs	r1, #2
 8007b4e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2200      	movs	r2, #0
 8007b54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2101      	movs	r1, #1
 8007b62:	438a      	bics	r2, r1
 8007b64:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	68b9      	ldr	r1, [r7, #8]
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f000 f92b 	bl	8007dc8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d008      	beq.n	8007b8c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	210e      	movs	r1, #14
 8007b86:	430a      	orrs	r2, r1
 8007b88:	601a      	str	r2, [r3, #0]
 8007b8a:	e00f      	b.n	8007bac <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2104      	movs	r1, #4
 8007b98:	438a      	bics	r2, r1
 8007b9a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	210a      	movs	r1, #10
 8007ba8:	430a      	orrs	r2, r1
 8007baa:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	2101      	movs	r1, #1
 8007bb8:	430a      	orrs	r2, r1
 8007bba:	601a      	str	r2, [r3, #0]
 8007bbc:	e007      	b.n	8007bce <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2224      	movs	r2, #36	; 0x24
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8007bc6:	2317      	movs	r3, #23
 8007bc8:	18fb      	adds	r3, r7, r3
 8007bca:	2202      	movs	r2, #2
 8007bcc:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8007bce:	2317      	movs	r3, #23
 8007bd0:	18fb      	adds	r3, r7, r3
 8007bd2:	781b      	ldrb	r3, [r3, #0]
}
 8007bd4:	0018      	movs	r0, r3
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	b006      	add	sp, #24
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007be4:	230f      	movs	r3, #15
 8007be6:	18fb      	adds	r3, r7, r3
 8007be8:	2200      	movs	r2, #0
 8007bea:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2225      	movs	r2, #37	; 0x25
 8007bf0:	5c9b      	ldrb	r3, [r3, r2]
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d007      	beq.n	8007c08 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2204      	movs	r2, #4
 8007bfc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007bfe:	230f      	movs	r3, #15
 8007c00:	18fb      	adds	r3, r7, r3
 8007c02:	2201      	movs	r2, #1
 8007c04:	701a      	strb	r2, [r3, #0]
 8007c06:	e02a      	b.n	8007c5e <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	210e      	movs	r1, #14
 8007c14:	438a      	bics	r2, r1
 8007c16:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2101      	movs	r1, #1
 8007c24:	438a      	bics	r2, r1
 8007c26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c2c:	221c      	movs	r2, #28
 8007c2e:	401a      	ands	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c34:	2101      	movs	r1, #1
 8007c36:	4091      	lsls	r1, r2
 8007c38:	000a      	movs	r2, r1
 8007c3a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2225      	movs	r2, #37	; 0x25
 8007c40:	2101      	movs	r1, #1
 8007c42:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2224      	movs	r2, #36	; 0x24
 8007c48:	2100      	movs	r1, #0
 8007c4a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d004      	beq.n	8007c5e <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	0010      	movs	r0, r2
 8007c5c:	4798      	blx	r3
    }
  }
  return status;
 8007c5e:	230f      	movs	r3, #15
 8007c60:	18fb      	adds	r3, r7, r3
 8007c62:	781b      	ldrb	r3, [r3, #0]
}
 8007c64:	0018      	movs	r0, r3
 8007c66:	46bd      	mov	sp, r7
 8007c68:	b004      	add	sp, #16
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c88:	221c      	movs	r2, #28
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	2204      	movs	r2, #4
 8007c8e:	409a      	lsls	r2, r3
 8007c90:	0013      	movs	r3, r2
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	4013      	ands	r3, r2
 8007c96:	d026      	beq.n	8007ce6 <HAL_DMA_IRQHandler+0x7a>
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	2204      	movs	r2, #4
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	d022      	beq.n	8007ce6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2220      	movs	r2, #32
 8007ca8:	4013      	ands	r3, r2
 8007caa:	d107      	bne.n	8007cbc <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2104      	movs	r1, #4
 8007cb8:	438a      	bics	r2, r1
 8007cba:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cc0:	221c      	movs	r2, #28
 8007cc2:	401a      	ands	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc8:	2104      	movs	r1, #4
 8007cca:	4091      	lsls	r1, r2
 8007ccc:	000a      	movs	r2, r1
 8007cce:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d100      	bne.n	8007cda <HAL_DMA_IRQHandler+0x6e>
 8007cd8:	e071      	b.n	8007dbe <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	0010      	movs	r0, r2
 8007ce2:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8007ce4:	e06b      	b.n	8007dbe <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cea:	221c      	movs	r2, #28
 8007cec:	4013      	ands	r3, r2
 8007cee:	2202      	movs	r2, #2
 8007cf0:	409a      	lsls	r2, r3
 8007cf2:	0013      	movs	r3, r2
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	4013      	ands	r3, r2
 8007cf8:	d02d      	beq.n	8007d56 <HAL_DMA_IRQHandler+0xea>
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	2202      	movs	r2, #2
 8007cfe:	4013      	ands	r3, r2
 8007d00:	d029      	beq.n	8007d56 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2220      	movs	r2, #32
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	d10b      	bne.n	8007d26 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	210a      	movs	r1, #10
 8007d1a:	438a      	bics	r2, r1
 8007d1c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2225      	movs	r2, #37	; 0x25
 8007d22:	2101      	movs	r1, #1
 8007d24:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d2a:	221c      	movs	r2, #28
 8007d2c:	401a      	ands	r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d32:	2102      	movs	r1, #2
 8007d34:	4091      	lsls	r1, r2
 8007d36:	000a      	movs	r2, r1
 8007d38:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2224      	movs	r2, #36	; 0x24
 8007d3e:	2100      	movs	r1, #0
 8007d40:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d039      	beq.n	8007dbe <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	0010      	movs	r0, r2
 8007d52:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007d54:	e033      	b.n	8007dbe <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d5a:	221c      	movs	r2, #28
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	2208      	movs	r2, #8
 8007d60:	409a      	lsls	r2, r3
 8007d62:	0013      	movs	r3, r2
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	4013      	ands	r3, r2
 8007d68:	d02a      	beq.n	8007dc0 <HAL_DMA_IRQHandler+0x154>
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	2208      	movs	r2, #8
 8007d6e:	4013      	ands	r3, r2
 8007d70:	d026      	beq.n	8007dc0 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	210e      	movs	r1, #14
 8007d7e:	438a      	bics	r2, r1
 8007d80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d86:	221c      	movs	r2, #28
 8007d88:	401a      	ands	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8e:	2101      	movs	r1, #1
 8007d90:	4091      	lsls	r1, r2
 8007d92:	000a      	movs	r2, r1
 8007d94:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2225      	movs	r2, #37	; 0x25
 8007da0:	2101      	movs	r1, #1
 8007da2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2224      	movs	r2, #36	; 0x24
 8007da8:	2100      	movs	r1, #0
 8007daa:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d005      	beq.n	8007dc0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	0010      	movs	r0, r2
 8007dbc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007dbe:	46c0      	nop			; (mov r8, r8)
 8007dc0:	46c0      	nop			; (mov r8, r8)
}
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	b004      	add	sp, #16
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	607a      	str	r2, [r7, #4]
 8007dd4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dda:	221c      	movs	r2, #28
 8007ddc:	401a      	ands	r2, r3
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de2:	2101      	movs	r1, #1
 8007de4:	4091      	lsls	r1, r2
 8007de6:	000a      	movs	r2, r1
 8007de8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	683a      	ldr	r2, [r7, #0]
 8007df0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	2b10      	cmp	r3, #16
 8007df8:	d108      	bne.n	8007e0c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68ba      	ldr	r2, [r7, #8]
 8007e08:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007e0a:	e007      	b.n	8007e1c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68ba      	ldr	r2, [r7, #8]
 8007e12:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	60da      	str	r2, [r3, #12]
}
 8007e1c:	46c0      	nop			; (mov r8, r8)
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	b004      	add	sp, #16
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b086      	sub	sp, #24
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007e32:	2300      	movs	r3, #0
 8007e34:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8007e36:	2300      	movs	r3, #0
 8007e38:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8007e3a:	e155      	b.n	80080e8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2101      	movs	r1, #1
 8007e42:	697a      	ldr	r2, [r7, #20]
 8007e44:	4091      	lsls	r1, r2
 8007e46:	000a      	movs	r2, r1
 8007e48:	4013      	ands	r3, r2
 8007e4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d100      	bne.n	8007e54 <HAL_GPIO_Init+0x30>
 8007e52:	e146      	b.n	80080e2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d00b      	beq.n	8007e74 <HAL_GPIO_Init+0x50>
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	d007      	beq.n	8007e74 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007e68:	2b11      	cmp	r3, #17
 8007e6a:	d003      	beq.n	8007e74 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	2b12      	cmp	r3, #18
 8007e72:	d130      	bne.n	8007ed6 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	005b      	lsls	r3, r3, #1
 8007e7e:	2203      	movs	r2, #3
 8007e80:	409a      	lsls	r2, r3
 8007e82:	0013      	movs	r3, r2
 8007e84:	43da      	mvns	r2, r3
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	4013      	ands	r3, r2
 8007e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	68da      	ldr	r2, [r3, #12]
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	005b      	lsls	r3, r3, #1
 8007e94:	409a      	lsls	r2, r3
 8007e96:	0013      	movs	r3, r2
 8007e98:	693a      	ldr	r2, [r7, #16]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	693a      	ldr	r2, [r7, #16]
 8007ea2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007eaa:	2201      	movs	r2, #1
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	409a      	lsls	r2, r3
 8007eb0:	0013      	movs	r3, r2
 8007eb2:	43da      	mvns	r2, r3
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	4013      	ands	r3, r2
 8007eb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	091b      	lsrs	r3, r3, #4
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	401a      	ands	r2, r3
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	409a      	lsls	r2, r3
 8007ec8:	0013      	movs	r3, r2
 8007eca:	693a      	ldr	r2, [r7, #16]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	693a      	ldr	r2, [r7, #16]
 8007ed4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	005b      	lsls	r3, r3, #1
 8007ee0:	2203      	movs	r2, #3
 8007ee2:	409a      	lsls	r2, r3
 8007ee4:	0013      	movs	r3, r2
 8007ee6:	43da      	mvns	r2, r3
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	4013      	ands	r3, r2
 8007eec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	689a      	ldr	r2, [r3, #8]
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	005b      	lsls	r3, r3, #1
 8007ef6:	409a      	lsls	r2, r3
 8007ef8:	0013      	movs	r3, r2
 8007efa:	693a      	ldr	r2, [r7, #16]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	693a      	ldr	r2, [r7, #16]
 8007f04:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	d003      	beq.n	8007f16 <HAL_GPIO_Init+0xf2>
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	2b12      	cmp	r3, #18
 8007f14:	d123      	bne.n	8007f5e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	08da      	lsrs	r2, r3, #3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	3208      	adds	r2, #8
 8007f1e:	0092      	lsls	r2, r2, #2
 8007f20:	58d3      	ldr	r3, [r2, r3]
 8007f22:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	2207      	movs	r2, #7
 8007f28:	4013      	ands	r3, r2
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	220f      	movs	r2, #15
 8007f2e:	409a      	lsls	r2, r3
 8007f30:	0013      	movs	r3, r2
 8007f32:	43da      	mvns	r2, r3
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	4013      	ands	r3, r2
 8007f38:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	691a      	ldr	r2, [r3, #16]
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	2107      	movs	r1, #7
 8007f42:	400b      	ands	r3, r1
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	409a      	lsls	r2, r3
 8007f48:	0013      	movs	r3, r2
 8007f4a:	693a      	ldr	r2, [r7, #16]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	08da      	lsrs	r2, r3, #3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	3208      	adds	r2, #8
 8007f58:	0092      	lsls	r2, r2, #2
 8007f5a:	6939      	ldr	r1, [r7, #16]
 8007f5c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	005b      	lsls	r3, r3, #1
 8007f68:	2203      	movs	r2, #3
 8007f6a:	409a      	lsls	r2, r3
 8007f6c:	0013      	movs	r3, r2
 8007f6e:	43da      	mvns	r2, r3
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	4013      	ands	r3, r2
 8007f74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	2203      	movs	r2, #3
 8007f7c:	401a      	ands	r2, r3
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	005b      	lsls	r3, r3, #1
 8007f82:	409a      	lsls	r2, r3
 8007f84:	0013      	movs	r3, r2
 8007f86:	693a      	ldr	r2, [r7, #16]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	693a      	ldr	r2, [r7, #16]
 8007f90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	685a      	ldr	r2, [r3, #4]
 8007f96:	2380      	movs	r3, #128	; 0x80
 8007f98:	055b      	lsls	r3, r3, #21
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	d100      	bne.n	8007fa0 <HAL_GPIO_Init+0x17c>
 8007f9e:	e0a0      	b.n	80080e2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007fa0:	4b57      	ldr	r3, [pc, #348]	; (8008100 <HAL_GPIO_Init+0x2dc>)
 8007fa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fa4:	4b56      	ldr	r3, [pc, #344]	; (8008100 <HAL_GPIO_Init+0x2dc>)
 8007fa6:	2101      	movs	r1, #1
 8007fa8:	430a      	orrs	r2, r1
 8007faa:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8007fac:	4a55      	ldr	r2, [pc, #340]	; (8008104 <HAL_GPIO_Init+0x2e0>)
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	089b      	lsrs	r3, r3, #2
 8007fb2:	3302      	adds	r3, #2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	589b      	ldr	r3, [r3, r2]
 8007fb8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	2203      	movs	r2, #3
 8007fbe:	4013      	ands	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	220f      	movs	r2, #15
 8007fc4:	409a      	lsls	r2, r3
 8007fc6:	0013      	movs	r3, r2
 8007fc8:	43da      	mvns	r2, r3
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	4013      	ands	r3, r2
 8007fce:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	23a0      	movs	r3, #160	; 0xa0
 8007fd4:	05db      	lsls	r3, r3, #23
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d01f      	beq.n	800801a <HAL_GPIO_Init+0x1f6>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a4a      	ldr	r2, [pc, #296]	; (8008108 <HAL_GPIO_Init+0x2e4>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d019      	beq.n	8008016 <HAL_GPIO_Init+0x1f2>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a49      	ldr	r2, [pc, #292]	; (800810c <HAL_GPIO_Init+0x2e8>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d013      	beq.n	8008012 <HAL_GPIO_Init+0x1ee>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a48      	ldr	r2, [pc, #288]	; (8008110 <HAL_GPIO_Init+0x2ec>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d00d      	beq.n	800800e <HAL_GPIO_Init+0x1ea>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a47      	ldr	r2, [pc, #284]	; (8008114 <HAL_GPIO_Init+0x2f0>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d007      	beq.n	800800a <HAL_GPIO_Init+0x1e6>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a46      	ldr	r2, [pc, #280]	; (8008118 <HAL_GPIO_Init+0x2f4>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d101      	bne.n	8008006 <HAL_GPIO_Init+0x1e2>
 8008002:	2305      	movs	r3, #5
 8008004:	e00a      	b.n	800801c <HAL_GPIO_Init+0x1f8>
 8008006:	2306      	movs	r3, #6
 8008008:	e008      	b.n	800801c <HAL_GPIO_Init+0x1f8>
 800800a:	2304      	movs	r3, #4
 800800c:	e006      	b.n	800801c <HAL_GPIO_Init+0x1f8>
 800800e:	2303      	movs	r3, #3
 8008010:	e004      	b.n	800801c <HAL_GPIO_Init+0x1f8>
 8008012:	2302      	movs	r3, #2
 8008014:	e002      	b.n	800801c <HAL_GPIO_Init+0x1f8>
 8008016:	2301      	movs	r3, #1
 8008018:	e000      	b.n	800801c <HAL_GPIO_Init+0x1f8>
 800801a:	2300      	movs	r3, #0
 800801c:	697a      	ldr	r2, [r7, #20]
 800801e:	2103      	movs	r1, #3
 8008020:	400a      	ands	r2, r1
 8008022:	0092      	lsls	r2, r2, #2
 8008024:	4093      	lsls	r3, r2
 8008026:	693a      	ldr	r2, [r7, #16]
 8008028:	4313      	orrs	r3, r2
 800802a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800802c:	4935      	ldr	r1, [pc, #212]	; (8008104 <HAL_GPIO_Init+0x2e0>)
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	089b      	lsrs	r3, r3, #2
 8008032:	3302      	adds	r3, #2
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	693a      	ldr	r2, [r7, #16]
 8008038:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800803a:	4b38      	ldr	r3, [pc, #224]	; (800811c <HAL_GPIO_Init+0x2f8>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	43da      	mvns	r2, r3
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	4013      	ands	r3, r2
 8008048:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	685a      	ldr	r2, [r3, #4]
 800804e:	2380      	movs	r3, #128	; 0x80
 8008050:	025b      	lsls	r3, r3, #9
 8008052:	4013      	ands	r3, r2
 8008054:	d003      	beq.n	800805e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	4313      	orrs	r3, r2
 800805c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800805e:	4b2f      	ldr	r3, [pc, #188]	; (800811c <HAL_GPIO_Init+0x2f8>)
 8008060:	693a      	ldr	r2, [r7, #16]
 8008062:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8008064:	4b2d      	ldr	r3, [pc, #180]	; (800811c <HAL_GPIO_Init+0x2f8>)
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	43da      	mvns	r2, r3
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	4013      	ands	r3, r2
 8008072:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	685a      	ldr	r2, [r3, #4]
 8008078:	2380      	movs	r3, #128	; 0x80
 800807a:	029b      	lsls	r3, r3, #10
 800807c:	4013      	ands	r3, r2
 800807e:	d003      	beq.n	8008088 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8008080:	693a      	ldr	r2, [r7, #16]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	4313      	orrs	r3, r2
 8008086:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8008088:	4b24      	ldr	r3, [pc, #144]	; (800811c <HAL_GPIO_Init+0x2f8>)
 800808a:	693a      	ldr	r2, [r7, #16]
 800808c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800808e:	4b23      	ldr	r3, [pc, #140]	; (800811c <HAL_GPIO_Init+0x2f8>)
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	43da      	mvns	r2, r3
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	4013      	ands	r3, r2
 800809c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	685a      	ldr	r2, [r3, #4]
 80080a2:	2380      	movs	r3, #128	; 0x80
 80080a4:	035b      	lsls	r3, r3, #13
 80080a6:	4013      	ands	r3, r2
 80080a8:	d003      	beq.n	80080b2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80080aa:	693a      	ldr	r2, [r7, #16]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80080b2:	4b1a      	ldr	r3, [pc, #104]	; (800811c <HAL_GPIO_Init+0x2f8>)
 80080b4:	693a      	ldr	r2, [r7, #16]
 80080b6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80080b8:	4b18      	ldr	r3, [pc, #96]	; (800811c <HAL_GPIO_Init+0x2f8>)
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	43da      	mvns	r2, r3
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	4013      	ands	r3, r2
 80080c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	685a      	ldr	r2, [r3, #4]
 80080cc:	2380      	movs	r3, #128	; 0x80
 80080ce:	039b      	lsls	r3, r3, #14
 80080d0:	4013      	ands	r3, r2
 80080d2:	d003      	beq.n	80080dc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80080d4:	693a      	ldr	r2, [r7, #16]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	4313      	orrs	r3, r2
 80080da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80080dc:	4b0f      	ldr	r3, [pc, #60]	; (800811c <HAL_GPIO_Init+0x2f8>)
 80080de:	693a      	ldr	r2, [r7, #16]
 80080e0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	3301      	adds	r3, #1
 80080e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	40da      	lsrs	r2, r3
 80080f0:	1e13      	subs	r3, r2, #0
 80080f2:	d000      	beq.n	80080f6 <HAL_GPIO_Init+0x2d2>
 80080f4:	e6a2      	b.n	8007e3c <HAL_GPIO_Init+0x18>
  }
}
 80080f6:	46c0      	nop			; (mov r8, r8)
 80080f8:	46bd      	mov	sp, r7
 80080fa:	b006      	add	sp, #24
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	46c0      	nop			; (mov r8, r8)
 8008100:	40021000 	.word	0x40021000
 8008104:	40010000 	.word	0x40010000
 8008108:	50000400 	.word	0x50000400
 800810c:	50000800 	.word	0x50000800
 8008110:	50000c00 	.word	0x50000c00
 8008114:	50001000 	.word	0x50001000
 8008118:	50001c00 	.word	0x50001c00
 800811c:	40010400 	.word	0x40010400

08008120 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	0008      	movs	r0, r1
 800812a:	0011      	movs	r1, r2
 800812c:	1cbb      	adds	r3, r7, #2
 800812e:	1c02      	adds	r2, r0, #0
 8008130:	801a      	strh	r2, [r3, #0]
 8008132:	1c7b      	adds	r3, r7, #1
 8008134:	1c0a      	adds	r2, r1, #0
 8008136:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008138:	1c7b      	adds	r3, r7, #1
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d004      	beq.n	800814a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008140:	1cbb      	adds	r3, r7, #2
 8008142:	881a      	ldrh	r2, [r3, #0]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8008148:	e003      	b.n	8008152 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800814a:	1cbb      	adds	r3, r7, #2
 800814c:	881a      	ldrh	r2, [r3, #0]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008152:	46c0      	nop			; (mov r8, r8)
 8008154:	46bd      	mov	sp, r7
 8008156:	b002      	add	sp, #8
 8008158:	bd80      	pop	{r7, pc}

0800815a <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b084      	sub	sp, #16
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
 8008162:	000a      	movs	r2, r1
 8008164:	1cbb      	adds	r3, r7, #2
 8008166:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	695b      	ldr	r3, [r3, #20]
 800816c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800816e:	1cbb      	adds	r3, r7, #2
 8008170:	881b      	ldrh	r3, [r3, #0]
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	4013      	ands	r3, r2
 8008176:	041a      	lsls	r2, r3, #16
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	43db      	mvns	r3, r3
 800817c:	1cb9      	adds	r1, r7, #2
 800817e:	8809      	ldrh	r1, [r1, #0]
 8008180:	400b      	ands	r3, r1
 8008182:	431a      	orrs	r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	619a      	str	r2, [r3, #24]
}
 8008188:	46c0      	nop			; (mov r8, r8)
 800818a:	46bd      	mov	sp, r7
 800818c:	b004      	add	sp, #16
 800818e:	bd80      	pop	{r7, pc}

08008190 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	0002      	movs	r2, r0
 8008198:	1dbb      	adds	r3, r7, #6
 800819a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800819c:	4b09      	ldr	r3, [pc, #36]	; (80081c4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800819e:	695b      	ldr	r3, [r3, #20]
 80081a0:	1dba      	adds	r2, r7, #6
 80081a2:	8812      	ldrh	r2, [r2, #0]
 80081a4:	4013      	ands	r3, r2
 80081a6:	d008      	beq.n	80081ba <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80081a8:	4b06      	ldr	r3, [pc, #24]	; (80081c4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80081aa:	1dba      	adds	r2, r7, #6
 80081ac:	8812      	ldrh	r2, [r2, #0]
 80081ae:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80081b0:	1dbb      	adds	r3, r7, #6
 80081b2:	881b      	ldrh	r3, [r3, #0]
 80081b4:	0018      	movs	r0, r3
 80081b6:	f7fc ff45 	bl	8005044 <HAL_GPIO_EXTI_Callback>
  }
}
 80081ba:	46c0      	nop			; (mov r8, r8)
 80081bc:	46bd      	mov	sp, r7
 80081be:	b002      	add	sp, #8
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	46c0      	nop			; (mov r8, r8)
 80081c4:	40010400 	.word	0x40010400

080081c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80081c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ca:	b08b      	sub	sp, #44	; 0x2c
 80081cc:	af06      	add	r7, sp, #24
 80081ce:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d101      	bne.n	80081da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	e100      	b.n	80083dc <HAL_PCD_Init+0x214>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a81      	ldr	r2, [pc, #516]	; (80083e4 <HAL_PCD_Init+0x21c>)
 80081de:	5c9b      	ldrb	r3, [r3, r2]
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d108      	bne.n	80081f8 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	23aa      	movs	r3, #170	; 0xaa
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	2100      	movs	r1, #0
 80081ee:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	0018      	movs	r0, r3
 80081f4:	f7fc fb5a 	bl	80048ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a7a      	ldr	r2, [pc, #488]	; (80083e4 <HAL_PCD_Init+0x21c>)
 80081fc:	2103      	movs	r1, #3
 80081fe:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	0018      	movs	r0, r3
 8008206:	f003 fb53 	bl	800b8b0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800820a:	230f      	movs	r3, #15
 800820c:	18fb      	adds	r3, r7, r3
 800820e:	2200      	movs	r2, #0
 8008210:	701a      	strb	r2, [r3, #0]
 8008212:	e058      	b.n	80082c6 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008214:	200f      	movs	r0, #15
 8008216:	183b      	adds	r3, r7, r0
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	6879      	ldr	r1, [r7, #4]
 800821c:	1c5a      	adds	r2, r3, #1
 800821e:	0013      	movs	r3, r2
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	189b      	adds	r3, r3, r2
 8008224:	00db      	lsls	r3, r3, #3
 8008226:	18cb      	adds	r3, r1, r3
 8008228:	3301      	adds	r3, #1
 800822a:	2201      	movs	r2, #1
 800822c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800822e:	183b      	adds	r3, r7, r0
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	6879      	ldr	r1, [r7, #4]
 8008234:	1c5a      	adds	r2, r3, #1
 8008236:	0013      	movs	r3, r2
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	189b      	adds	r3, r3, r2
 800823c:	00db      	lsls	r3, r3, #3
 800823e:	183a      	adds	r2, r7, r0
 8008240:	7812      	ldrb	r2, [r2, #0]
 8008242:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008244:	183b      	adds	r3, r7, r0
 8008246:	781a      	ldrb	r2, [r3, #0]
 8008248:	0004      	movs	r4, r0
 800824a:	183b      	adds	r3, r7, r0
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	b298      	uxth	r0, r3
 8008250:	6879      	ldr	r1, [r7, #4]
 8008252:	0013      	movs	r3, r2
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	189b      	adds	r3, r3, r2
 8008258:	00db      	lsls	r3, r3, #3
 800825a:	18cb      	adds	r3, r1, r3
 800825c:	3336      	adds	r3, #54	; 0x36
 800825e:	1c02      	adds	r2, r0, #0
 8008260:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008262:	193b      	adds	r3, r7, r4
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	6879      	ldr	r1, [r7, #4]
 8008268:	1c5a      	adds	r2, r3, #1
 800826a:	0013      	movs	r3, r2
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	189b      	adds	r3, r3, r2
 8008270:	00db      	lsls	r3, r3, #3
 8008272:	18cb      	adds	r3, r1, r3
 8008274:	3303      	adds	r3, #3
 8008276:	2200      	movs	r2, #0
 8008278:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800827a:	193b      	adds	r3, r7, r4
 800827c:	781a      	ldrb	r2, [r3, #0]
 800827e:	6879      	ldr	r1, [r7, #4]
 8008280:	0013      	movs	r3, r2
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	189b      	adds	r3, r3, r2
 8008286:	00db      	lsls	r3, r3, #3
 8008288:	18cb      	adds	r3, r1, r3
 800828a:	3338      	adds	r3, #56	; 0x38
 800828c:	2200      	movs	r2, #0
 800828e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008290:	193b      	adds	r3, r7, r4
 8008292:	781a      	ldrb	r2, [r3, #0]
 8008294:	6879      	ldr	r1, [r7, #4]
 8008296:	0013      	movs	r3, r2
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	189b      	adds	r3, r3, r2
 800829c:	00db      	lsls	r3, r3, #3
 800829e:	18cb      	adds	r3, r1, r3
 80082a0:	333c      	adds	r3, #60	; 0x3c
 80082a2:	2200      	movs	r2, #0
 80082a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80082a6:	193b      	adds	r3, r7, r4
 80082a8:	781a      	ldrb	r2, [r3, #0]
 80082aa:	6879      	ldr	r1, [r7, #4]
 80082ac:	0013      	movs	r3, r2
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	189b      	adds	r3, r3, r2
 80082b2:	00db      	lsls	r3, r3, #3
 80082b4:	18cb      	adds	r3, r1, r3
 80082b6:	3340      	adds	r3, #64	; 0x40
 80082b8:	2200      	movs	r2, #0
 80082ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082bc:	193b      	adds	r3, r7, r4
 80082be:	781a      	ldrb	r2, [r3, #0]
 80082c0:	193b      	adds	r3, r7, r4
 80082c2:	3201      	adds	r2, #1
 80082c4:	701a      	strb	r2, [r3, #0]
 80082c6:	230f      	movs	r3, #15
 80082c8:	18fb      	adds	r3, r7, r3
 80082ca:	781a      	ldrb	r2, [r3, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d39f      	bcc.n	8008214 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082d4:	230f      	movs	r3, #15
 80082d6:	18fb      	adds	r3, r7, r3
 80082d8:	2200      	movs	r2, #0
 80082da:	701a      	strb	r2, [r3, #0]
 80082dc:	e056      	b.n	800838c <HAL_PCD_Init+0x1c4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80082de:	240f      	movs	r4, #15
 80082e0:	193b      	adds	r3, r7, r4
 80082e2:	781a      	ldrb	r2, [r3, #0]
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	236a      	movs	r3, #106	; 0x6a
 80082e8:	33ff      	adds	r3, #255	; 0xff
 80082ea:	0019      	movs	r1, r3
 80082ec:	0013      	movs	r3, r2
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	189b      	adds	r3, r3, r2
 80082f2:	00db      	lsls	r3, r3, #3
 80082f4:	18c3      	adds	r3, r0, r3
 80082f6:	185b      	adds	r3, r3, r1
 80082f8:	2200      	movs	r2, #0
 80082fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80082fc:	193b      	adds	r3, r7, r4
 80082fe:	781a      	ldrb	r2, [r3, #0]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	23b4      	movs	r3, #180	; 0xb4
 8008304:	0059      	lsls	r1, r3, #1
 8008306:	0013      	movs	r3, r2
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	189b      	adds	r3, r3, r2
 800830c:	00db      	lsls	r3, r3, #3
 800830e:	18c3      	adds	r3, r0, r3
 8008310:	185b      	adds	r3, r3, r1
 8008312:	193a      	adds	r2, r7, r4
 8008314:	7812      	ldrb	r2, [r2, #0]
 8008316:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008318:	193b      	adds	r3, r7, r4
 800831a:	781a      	ldrb	r2, [r3, #0]
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	236c      	movs	r3, #108	; 0x6c
 8008320:	33ff      	adds	r3, #255	; 0xff
 8008322:	0019      	movs	r1, r3
 8008324:	0013      	movs	r3, r2
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	189b      	adds	r3, r3, r2
 800832a:	00db      	lsls	r3, r3, #3
 800832c:	18c3      	adds	r3, r0, r3
 800832e:	185b      	adds	r3, r3, r1
 8008330:	2200      	movs	r2, #0
 8008332:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008334:	193b      	adds	r3, r7, r4
 8008336:	781a      	ldrb	r2, [r3, #0]
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	23bc      	movs	r3, #188	; 0xbc
 800833c:	0059      	lsls	r1, r3, #1
 800833e:	0013      	movs	r3, r2
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	189b      	adds	r3, r3, r2
 8008344:	00db      	lsls	r3, r3, #3
 8008346:	18c3      	adds	r3, r0, r3
 8008348:	185b      	adds	r3, r3, r1
 800834a:	2200      	movs	r2, #0
 800834c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800834e:	193b      	adds	r3, r7, r4
 8008350:	781a      	ldrb	r2, [r3, #0]
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	23be      	movs	r3, #190	; 0xbe
 8008356:	0059      	lsls	r1, r3, #1
 8008358:	0013      	movs	r3, r2
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	189b      	adds	r3, r3, r2
 800835e:	00db      	lsls	r3, r3, #3
 8008360:	18c3      	adds	r3, r0, r3
 8008362:	185b      	adds	r3, r3, r1
 8008364:	2200      	movs	r2, #0
 8008366:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008368:	193b      	adds	r3, r7, r4
 800836a:	781a      	ldrb	r2, [r3, #0]
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	23c0      	movs	r3, #192	; 0xc0
 8008370:	0059      	lsls	r1, r3, #1
 8008372:	0013      	movs	r3, r2
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	189b      	adds	r3, r3, r2
 8008378:	00db      	lsls	r3, r3, #3
 800837a:	18c3      	adds	r3, r0, r3
 800837c:	185b      	adds	r3, r3, r1
 800837e:	2200      	movs	r2, #0
 8008380:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008382:	193b      	adds	r3, r7, r4
 8008384:	781a      	ldrb	r2, [r3, #0]
 8008386:	193b      	adds	r3, r7, r4
 8008388:	3201      	adds	r2, #1
 800838a:	701a      	strb	r2, [r3, #0]
 800838c:	230f      	movs	r3, #15
 800838e:	18fb      	adds	r3, r7, r3
 8008390:	781a      	ldrb	r2, [r3, #0]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	429a      	cmp	r2, r3
 8008398:	d3a1      	bcc.n	80082de <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6818      	ldr	r0, [r3, #0]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	466a      	mov	r2, sp
 80083a2:	0011      	movs	r1, r2
 80083a4:	001a      	movs	r2, r3
 80083a6:	3210      	adds	r2, #16
 80083a8:	ca70      	ldmia	r2!, {r4, r5, r6}
 80083aa:	c170      	stmia	r1!, {r4, r5, r6}
 80083ac:	ca30      	ldmia	r2!, {r4, r5}
 80083ae:	c130      	stmia	r1!, {r4, r5}
 80083b0:	6859      	ldr	r1, [r3, #4]
 80083b2:	689a      	ldr	r2, [r3, #8]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	f003 fa95 	bl	800b8e4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2224      	movs	r2, #36	; 0x24
 80083be:	2100      	movs	r1, #0
 80083c0:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4a07      	ldr	r2, [pc, #28]	; (80083e4 <HAL_PCD_Init+0x21c>)
 80083c6:	2101      	movs	r1, #1
 80083c8:	5499      	strb	r1, [r3, r2]
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	69db      	ldr	r3, [r3, #28]
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d103      	bne.n	80083da <HAL_PCD_Init+0x212>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	0018      	movs	r0, r3
 80083d6:	f000 f807 	bl	80083e8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	0018      	movs	r0, r3
 80083de:	46bd      	mov	sp, r7
 80083e0:	b005      	add	sp, #20
 80083e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083e4:	000002a9 	.word	0x000002a9

080083e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	23ba      	movs	r3, #186	; 0xba
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	2101      	movs	r1, #1
 80083fe:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	23b8      	movs	r3, #184	; 0xb8
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	2100      	movs	r1, #0
 8008408:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2254      	movs	r2, #84	; 0x54
 800840e:	5a9b      	ldrh	r3, [r3, r2]
 8008410:	b29b      	uxth	r3, r3
 8008412:	2201      	movs	r2, #1
 8008414:	4313      	orrs	r3, r2
 8008416:	b299      	uxth	r1, r3
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2254      	movs	r2, #84	; 0x54
 800841c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2254      	movs	r2, #84	; 0x54
 8008422:	5a9b      	ldrh	r3, [r3, r2]
 8008424:	b29b      	uxth	r3, r3
 8008426:	2202      	movs	r2, #2
 8008428:	4313      	orrs	r3, r2
 800842a:	b299      	uxth	r1, r3
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2254      	movs	r2, #84	; 0x54
 8008430:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008432:	2300      	movs	r3, #0
}
 8008434:	0018      	movs	r0, r3
 8008436:	46bd      	mov	sp, r7
 8008438:	b004      	add	sp, #16
 800843a:	bd80      	pop	{r7, pc}

0800843c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8008440:	4b04      	ldr	r3, [pc, #16]	; (8008454 <HAL_PWR_EnableBkUpAccess+0x18>)
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	4b03      	ldr	r3, [pc, #12]	; (8008454 <HAL_PWR_EnableBkUpAccess+0x18>)
 8008446:	2180      	movs	r1, #128	; 0x80
 8008448:	0049      	lsls	r1, r1, #1
 800844a:	430a      	orrs	r2, r1
 800844c:	601a      	str	r2, [r3, #0]
}
 800844e:	46c0      	nop			; (mov r8, r8)
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}
 8008454:	40007000 	.word	0x40007000

08008458 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	000a      	movs	r2, r1
 8008462:	1cfb      	adds	r3, r7, #3
 8008464:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8008466:	2300      	movs	r3, #0
 8008468:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 800846a:	4b13      	ldr	r3, [pc, #76]	; (80084b8 <HAL_PWR_EnterSTOPMode+0x60>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2203      	movs	r2, #3
 8008474:	4393      	bics	r3, r2
 8008476:	60fb      	str	r3, [r7, #12]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4313      	orrs	r3, r2
 800847e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8008480:	4b0d      	ldr	r3, [pc, #52]	; (80084b8 <HAL_PWR_EnterSTOPMode+0x60>)
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008486:	4b0d      	ldr	r3, [pc, #52]	; (80084bc <HAL_PWR_EnterSTOPMode+0x64>)
 8008488:	691a      	ldr	r2, [r3, #16]
 800848a:	4b0c      	ldr	r3, [pc, #48]	; (80084bc <HAL_PWR_EnterSTOPMode+0x64>)
 800848c:	2104      	movs	r1, #4
 800848e:	430a      	orrs	r2, r1
 8008490:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8008492:	1cfb      	adds	r3, r7, #3
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	2b01      	cmp	r3, #1
 8008498:	d101      	bne.n	800849e <HAL_PWR_EnterSTOPMode+0x46>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 800849a:	bf30      	wfi
 800849c:	e002      	b.n	80084a4 <HAL_PWR_EnterSTOPMode+0x4c>
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 800849e:	bf40      	sev
  __ASM volatile ("wfe");
 80084a0:	bf20      	wfe
 80084a2:	bf20      	wfe
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80084a4:	4b05      	ldr	r3, [pc, #20]	; (80084bc <HAL_PWR_EnterSTOPMode+0x64>)
 80084a6:	691a      	ldr	r2, [r3, #16]
 80084a8:	4b04      	ldr	r3, [pc, #16]	; (80084bc <HAL_PWR_EnterSTOPMode+0x64>)
 80084aa:	2104      	movs	r1, #4
 80084ac:	438a      	bics	r2, r1
 80084ae:	611a      	str	r2, [r3, #16]

}
 80084b0:	46c0      	nop			; (mov r8, r8)
 80084b2:	46bd      	mov	sp, r7
 80084b4:	b004      	add	sp, #16
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	40007000 	.word	0x40007000
 80084bc:	e000ed00 	.word	0xe000ed00

080084c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80084c0:	b5b0      	push	{r4, r5, r7, lr}
 80084c2:	b08a      	sub	sp, #40	; 0x28
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d102      	bne.n	80084d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	f000 fbbc 	bl	8008c4c <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80084d4:	4bc8      	ldr	r3, [pc, #800]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	220c      	movs	r2, #12
 80084da:	4013      	ands	r3, r2
 80084dc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80084de:	4bc6      	ldr	r3, [pc, #792]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 80084e0:	68da      	ldr	r2, [r3, #12]
 80084e2:	2380      	movs	r3, #128	; 0x80
 80084e4:	025b      	lsls	r3, r3, #9
 80084e6:	4013      	ands	r3, r2
 80084e8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2201      	movs	r2, #1
 80084f0:	4013      	ands	r3, r2
 80084f2:	d100      	bne.n	80084f6 <HAL_RCC_OscConfig+0x36>
 80084f4:	e07e      	b.n	80085f4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	2b08      	cmp	r3, #8
 80084fa:	d007      	beq.n	800850c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	2b0c      	cmp	r3, #12
 8008500:	d112      	bne.n	8008528 <HAL_RCC_OscConfig+0x68>
 8008502:	69ba      	ldr	r2, [r7, #24]
 8008504:	2380      	movs	r3, #128	; 0x80
 8008506:	025b      	lsls	r3, r3, #9
 8008508:	429a      	cmp	r2, r3
 800850a:	d10d      	bne.n	8008528 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800850c:	4bba      	ldr	r3, [pc, #744]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	2380      	movs	r3, #128	; 0x80
 8008512:	029b      	lsls	r3, r3, #10
 8008514:	4013      	ands	r3, r2
 8008516:	d100      	bne.n	800851a <HAL_RCC_OscConfig+0x5a>
 8008518:	e06b      	b.n	80085f2 <HAL_RCC_OscConfig+0x132>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d167      	bne.n	80085f2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	f000 fb92 	bl	8008c4c <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	685a      	ldr	r2, [r3, #4]
 800852c:	2380      	movs	r3, #128	; 0x80
 800852e:	025b      	lsls	r3, r3, #9
 8008530:	429a      	cmp	r2, r3
 8008532:	d107      	bne.n	8008544 <HAL_RCC_OscConfig+0x84>
 8008534:	4bb0      	ldr	r3, [pc, #704]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	4baf      	ldr	r3, [pc, #700]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 800853a:	2180      	movs	r1, #128	; 0x80
 800853c:	0249      	lsls	r1, r1, #9
 800853e:	430a      	orrs	r2, r1
 8008540:	601a      	str	r2, [r3, #0]
 8008542:	e027      	b.n	8008594 <HAL_RCC_OscConfig+0xd4>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	685a      	ldr	r2, [r3, #4]
 8008548:	23a0      	movs	r3, #160	; 0xa0
 800854a:	02db      	lsls	r3, r3, #11
 800854c:	429a      	cmp	r2, r3
 800854e:	d10e      	bne.n	800856e <HAL_RCC_OscConfig+0xae>
 8008550:	4ba9      	ldr	r3, [pc, #676]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	4ba8      	ldr	r3, [pc, #672]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 8008556:	2180      	movs	r1, #128	; 0x80
 8008558:	02c9      	lsls	r1, r1, #11
 800855a:	430a      	orrs	r2, r1
 800855c:	601a      	str	r2, [r3, #0]
 800855e:	4ba6      	ldr	r3, [pc, #664]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	4ba5      	ldr	r3, [pc, #660]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 8008564:	2180      	movs	r1, #128	; 0x80
 8008566:	0249      	lsls	r1, r1, #9
 8008568:	430a      	orrs	r2, r1
 800856a:	601a      	str	r2, [r3, #0]
 800856c:	e012      	b.n	8008594 <HAL_RCC_OscConfig+0xd4>
 800856e:	4ba2      	ldr	r3, [pc, #648]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	4ba1      	ldr	r3, [pc, #644]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 8008574:	49a1      	ldr	r1, [pc, #644]	; (80087fc <HAL_RCC_OscConfig+0x33c>)
 8008576:	400a      	ands	r2, r1
 8008578:	601a      	str	r2, [r3, #0]
 800857a:	4b9f      	ldr	r3, [pc, #636]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	2380      	movs	r3, #128	; 0x80
 8008580:	025b      	lsls	r3, r3, #9
 8008582:	4013      	ands	r3, r2
 8008584:	60fb      	str	r3, [r7, #12]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	4b9b      	ldr	r3, [pc, #620]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	4b9a      	ldr	r3, [pc, #616]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 800858e:	499c      	ldr	r1, [pc, #624]	; (8008800 <HAL_RCC_OscConfig+0x340>)
 8008590:	400a      	ands	r2, r1
 8008592:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d015      	beq.n	80085c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800859c:	f7fe fbc2 	bl	8006d24 <HAL_GetTick>
 80085a0:	0003      	movs	r3, r0
 80085a2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80085a4:	e009      	b.n	80085ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085a6:	f7fe fbbd 	bl	8006d24 <HAL_GetTick>
 80085aa:	0002      	movs	r2, r0
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	1ad3      	subs	r3, r2, r3
 80085b0:	2b64      	cmp	r3, #100	; 0x64
 80085b2:	d902      	bls.n	80085ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80085b4:	2303      	movs	r3, #3
 80085b6:	f000 fb49 	bl	8008c4c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80085ba:	4b8f      	ldr	r3, [pc, #572]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	2380      	movs	r3, #128	; 0x80
 80085c0:	029b      	lsls	r3, r3, #10
 80085c2:	4013      	ands	r3, r2
 80085c4:	d0ef      	beq.n	80085a6 <HAL_RCC_OscConfig+0xe6>
 80085c6:	e015      	b.n	80085f4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085c8:	f7fe fbac 	bl	8006d24 <HAL_GetTick>
 80085cc:	0003      	movs	r3, r0
 80085ce:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80085d0:	e008      	b.n	80085e4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085d2:	f7fe fba7 	bl	8006d24 <HAL_GetTick>
 80085d6:	0002      	movs	r2, r0
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	1ad3      	subs	r3, r2, r3
 80085dc:	2b64      	cmp	r3, #100	; 0x64
 80085de:	d901      	bls.n	80085e4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80085e0:	2303      	movs	r3, #3
 80085e2:	e333      	b.n	8008c4c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80085e4:	4b84      	ldr	r3, [pc, #528]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	2380      	movs	r3, #128	; 0x80
 80085ea:	029b      	lsls	r3, r3, #10
 80085ec:	4013      	ands	r3, r2
 80085ee:	d1f0      	bne.n	80085d2 <HAL_RCC_OscConfig+0x112>
 80085f0:	e000      	b.n	80085f4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085f2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2202      	movs	r2, #2
 80085fa:	4013      	ands	r3, r2
 80085fc:	d100      	bne.n	8008600 <HAL_RCC_OscConfig+0x140>
 80085fe:	e098      	b.n	8008732 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8008606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008608:	2220      	movs	r2, #32
 800860a:	4013      	ands	r3, r2
 800860c:	d009      	beq.n	8008622 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800860e:	4b7a      	ldr	r3, [pc, #488]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	4b79      	ldr	r3, [pc, #484]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 8008614:	2120      	movs	r1, #32
 8008616:	430a      	orrs	r2, r1
 8008618:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800861a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861c:	2220      	movs	r2, #32
 800861e:	4393      	bics	r3, r2
 8008620:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	2b04      	cmp	r3, #4
 8008626:	d005      	beq.n	8008634 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	2b0c      	cmp	r3, #12
 800862c:	d13d      	bne.n	80086aa <HAL_RCC_OscConfig+0x1ea>
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d13a      	bne.n	80086aa <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8008634:	4b70      	ldr	r3, [pc, #448]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2204      	movs	r2, #4
 800863a:	4013      	ands	r3, r2
 800863c:	d004      	beq.n	8008648 <HAL_RCC_OscConfig+0x188>
 800863e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008640:	2b00      	cmp	r3, #0
 8008642:	d101      	bne.n	8008648 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8008644:	2301      	movs	r3, #1
 8008646:	e301      	b.n	8008c4c <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008648:	4b6b      	ldr	r3, [pc, #428]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	4a6d      	ldr	r2, [pc, #436]	; (8008804 <HAL_RCC_OscConfig+0x344>)
 800864e:	4013      	ands	r3, r2
 8008650:	0019      	movs	r1, r3
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	021a      	lsls	r2, r3, #8
 8008658:	4b67      	ldr	r3, [pc, #412]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 800865a:	430a      	orrs	r2, r1
 800865c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800865e:	4b66      	ldr	r3, [pc, #408]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2209      	movs	r2, #9
 8008664:	4393      	bics	r3, r2
 8008666:	0019      	movs	r1, r3
 8008668:	4b63      	ldr	r3, [pc, #396]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 800866a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800866c:	430a      	orrs	r2, r1
 800866e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008670:	f000 fc20 	bl	8008eb4 <HAL_RCC_GetSysClockFreq>
 8008674:	0001      	movs	r1, r0
 8008676:	4b60      	ldr	r3, [pc, #384]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 8008678:	68db      	ldr	r3, [r3, #12]
 800867a:	091b      	lsrs	r3, r3, #4
 800867c:	220f      	movs	r2, #15
 800867e:	4013      	ands	r3, r2
 8008680:	4a61      	ldr	r2, [pc, #388]	; (8008808 <HAL_RCC_OscConfig+0x348>)
 8008682:	5cd3      	ldrb	r3, [r2, r3]
 8008684:	000a      	movs	r2, r1
 8008686:	40da      	lsrs	r2, r3
 8008688:	4b60      	ldr	r3, [pc, #384]	; (800880c <HAL_RCC_OscConfig+0x34c>)
 800868a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 800868c:	2513      	movs	r5, #19
 800868e:	197c      	adds	r4, r7, r5
 8008690:	2000      	movs	r0, #0
 8008692:	f7fe fb01 	bl	8006c98 <HAL_InitTick>
 8008696:	0003      	movs	r3, r0
 8008698:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800869a:	197b      	adds	r3, r7, r5
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d047      	beq.n	8008732 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80086a2:	2313      	movs	r3, #19
 80086a4:	18fb      	adds	r3, r7, r3
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	e2d0      	b.n	8008c4c <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80086aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d027      	beq.n	8008700 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80086b0:	4b51      	ldr	r3, [pc, #324]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2209      	movs	r2, #9
 80086b6:	4393      	bics	r3, r2
 80086b8:	0019      	movs	r1, r3
 80086ba:	4b4f      	ldr	r3, [pc, #316]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 80086bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086be:	430a      	orrs	r2, r1
 80086c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086c2:	f7fe fb2f 	bl	8006d24 <HAL_GetTick>
 80086c6:	0003      	movs	r3, r0
 80086c8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086ca:	e008      	b.n	80086de <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80086cc:	f7fe fb2a 	bl	8006d24 <HAL_GetTick>
 80086d0:	0002      	movs	r2, r0
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	1ad3      	subs	r3, r2, r3
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	d901      	bls.n	80086de <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80086da:	2303      	movs	r3, #3
 80086dc:	e2b6      	b.n	8008c4c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086de:	4b46      	ldr	r3, [pc, #280]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2204      	movs	r2, #4
 80086e4:	4013      	ands	r3, r2
 80086e6:	d0f1      	beq.n	80086cc <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086e8:	4b43      	ldr	r3, [pc, #268]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	4a45      	ldr	r2, [pc, #276]	; (8008804 <HAL_RCC_OscConfig+0x344>)
 80086ee:	4013      	ands	r3, r2
 80086f0:	0019      	movs	r1, r3
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	021a      	lsls	r2, r3, #8
 80086f8:	4b3f      	ldr	r3, [pc, #252]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 80086fa:	430a      	orrs	r2, r1
 80086fc:	605a      	str	r2, [r3, #4]
 80086fe:	e018      	b.n	8008732 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008700:	4b3d      	ldr	r3, [pc, #244]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	4b3c      	ldr	r3, [pc, #240]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 8008706:	2101      	movs	r1, #1
 8008708:	438a      	bics	r2, r1
 800870a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800870c:	f7fe fb0a 	bl	8006d24 <HAL_GetTick>
 8008710:	0003      	movs	r3, r0
 8008712:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008714:	e008      	b.n	8008728 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008716:	f7fe fb05 	bl	8006d24 <HAL_GetTick>
 800871a:	0002      	movs	r2, r0
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	1ad3      	subs	r3, r2, r3
 8008720:	2b02      	cmp	r3, #2
 8008722:	d901      	bls.n	8008728 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8008724:	2303      	movs	r3, #3
 8008726:	e291      	b.n	8008c4c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008728:	4b33      	ldr	r3, [pc, #204]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2204      	movs	r2, #4
 800872e:	4013      	ands	r3, r2
 8008730:	d1f1      	bne.n	8008716 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2210      	movs	r2, #16
 8008738:	4013      	ands	r3, r2
 800873a:	d100      	bne.n	800873e <HAL_RCC_OscConfig+0x27e>
 800873c:	e09f      	b.n	800887e <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d13f      	bne.n	80087c4 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008744:	4b2c      	ldr	r3, [pc, #176]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	2380      	movs	r3, #128	; 0x80
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	4013      	ands	r3, r2
 800874e:	d005      	beq.n	800875c <HAL_RCC_OscConfig+0x29c>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	69db      	ldr	r3, [r3, #28]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d101      	bne.n	800875c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	e277      	b.n	8008c4c <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800875c:	4b26      	ldr	r3, [pc, #152]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	4a2b      	ldr	r2, [pc, #172]	; (8008810 <HAL_RCC_OscConfig+0x350>)
 8008762:	4013      	ands	r3, r2
 8008764:	0019      	movs	r1, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800876a:	4b23      	ldr	r3, [pc, #140]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 800876c:	430a      	orrs	r2, r1
 800876e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008770:	4b21      	ldr	r3, [pc, #132]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	021b      	lsls	r3, r3, #8
 8008776:	0a19      	lsrs	r1, r3, #8
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6a1b      	ldr	r3, [r3, #32]
 800877c:	061a      	lsls	r2, r3, #24
 800877e:	4b1e      	ldr	r3, [pc, #120]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 8008780:	430a      	orrs	r2, r1
 8008782:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008788:	0b5b      	lsrs	r3, r3, #13
 800878a:	3301      	adds	r3, #1
 800878c:	2280      	movs	r2, #128	; 0x80
 800878e:	0212      	lsls	r2, r2, #8
 8008790:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8008792:	4b19      	ldr	r3, [pc, #100]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	091b      	lsrs	r3, r3, #4
 8008798:	210f      	movs	r1, #15
 800879a:	400b      	ands	r3, r1
 800879c:	491a      	ldr	r1, [pc, #104]	; (8008808 <HAL_RCC_OscConfig+0x348>)
 800879e:	5ccb      	ldrb	r3, [r1, r3]
 80087a0:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80087a2:	4b1a      	ldr	r3, [pc, #104]	; (800880c <HAL_RCC_OscConfig+0x34c>)
 80087a4:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80087a6:	2513      	movs	r5, #19
 80087a8:	197c      	adds	r4, r7, r5
 80087aa:	2000      	movs	r0, #0
 80087ac:	f7fe fa74 	bl	8006c98 <HAL_InitTick>
 80087b0:	0003      	movs	r3, r0
 80087b2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80087b4:	197b      	adds	r3, r7, r5
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d060      	beq.n	800887e <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 80087bc:	2313      	movs	r3, #19
 80087be:	18fb      	adds	r3, r7, r3
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	e243      	b.n	8008c4c <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	69db      	ldr	r3, [r3, #28]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d03e      	beq.n	800884a <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80087cc:	4b0a      	ldr	r3, [pc, #40]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	4b09      	ldr	r3, [pc, #36]	; (80087f8 <HAL_RCC_OscConfig+0x338>)
 80087d2:	2180      	movs	r1, #128	; 0x80
 80087d4:	0049      	lsls	r1, r1, #1
 80087d6:	430a      	orrs	r2, r1
 80087d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087da:	f7fe faa3 	bl	8006d24 <HAL_GetTick>
 80087de:	0003      	movs	r3, r0
 80087e0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80087e2:	e017      	b.n	8008814 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80087e4:	f7fe fa9e 	bl	8006d24 <HAL_GetTick>
 80087e8:	0002      	movs	r2, r0
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	1ad3      	subs	r3, r2, r3
 80087ee:	2b02      	cmp	r3, #2
 80087f0:	d910      	bls.n	8008814 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 80087f2:	2303      	movs	r3, #3
 80087f4:	e22a      	b.n	8008c4c <HAL_RCC_OscConfig+0x78c>
 80087f6:	46c0      	nop			; (mov r8, r8)
 80087f8:	40021000 	.word	0x40021000
 80087fc:	fffeffff 	.word	0xfffeffff
 8008800:	fffbffff 	.word	0xfffbffff
 8008804:	ffffe0ff 	.word	0xffffe0ff
 8008808:	0800cd7c 	.word	0x0800cd7c
 800880c:	20000010 	.word	0x20000010
 8008810:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008814:	4bc6      	ldr	r3, [pc, #792]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	2380      	movs	r3, #128	; 0x80
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	4013      	ands	r3, r2
 800881e:	d0e1      	beq.n	80087e4 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008820:	4bc3      	ldr	r3, [pc, #780]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	4ac3      	ldr	r2, [pc, #780]	; (8008b34 <HAL_RCC_OscConfig+0x674>)
 8008826:	4013      	ands	r3, r2
 8008828:	0019      	movs	r1, r3
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800882e:	4bc0      	ldr	r3, [pc, #768]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 8008830:	430a      	orrs	r2, r1
 8008832:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008834:	4bbe      	ldr	r3, [pc, #760]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	021b      	lsls	r3, r3, #8
 800883a:	0a19      	lsrs	r1, r3, #8
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6a1b      	ldr	r3, [r3, #32]
 8008840:	061a      	lsls	r2, r3, #24
 8008842:	4bbb      	ldr	r3, [pc, #748]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 8008844:	430a      	orrs	r2, r1
 8008846:	605a      	str	r2, [r3, #4]
 8008848:	e019      	b.n	800887e <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800884a:	4bb9      	ldr	r3, [pc, #740]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	4bb8      	ldr	r3, [pc, #736]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 8008850:	49b9      	ldr	r1, [pc, #740]	; (8008b38 <HAL_RCC_OscConfig+0x678>)
 8008852:	400a      	ands	r2, r1
 8008854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008856:	f7fe fa65 	bl	8006d24 <HAL_GetTick>
 800885a:	0003      	movs	r3, r0
 800885c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800885e:	e008      	b.n	8008872 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008860:	f7fe fa60 	bl	8006d24 <HAL_GetTick>
 8008864:	0002      	movs	r2, r0
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	1ad3      	subs	r3, r2, r3
 800886a:	2b02      	cmp	r3, #2
 800886c:	d901      	bls.n	8008872 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800886e:	2303      	movs	r3, #3
 8008870:	e1ec      	b.n	8008c4c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8008872:	4baf      	ldr	r3, [pc, #700]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	2380      	movs	r3, #128	; 0x80
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	4013      	ands	r3, r2
 800887c:	d1f0      	bne.n	8008860 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2208      	movs	r2, #8
 8008884:	4013      	ands	r3, r2
 8008886:	d036      	beq.n	80088f6 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	695b      	ldr	r3, [r3, #20]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d019      	beq.n	80088c4 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008890:	4ba7      	ldr	r3, [pc, #668]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 8008892:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008894:	4ba6      	ldr	r3, [pc, #664]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 8008896:	2101      	movs	r1, #1
 8008898:	430a      	orrs	r2, r1
 800889a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800889c:	f7fe fa42 	bl	8006d24 <HAL_GetTick>
 80088a0:	0003      	movs	r3, r0
 80088a2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80088a4:	e008      	b.n	80088b8 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80088a6:	f7fe fa3d 	bl	8006d24 <HAL_GetTick>
 80088aa:	0002      	movs	r2, r0
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	1ad3      	subs	r3, r2, r3
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	d901      	bls.n	80088b8 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80088b4:	2303      	movs	r3, #3
 80088b6:	e1c9      	b.n	8008c4c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80088b8:	4b9d      	ldr	r3, [pc, #628]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 80088ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088bc:	2202      	movs	r2, #2
 80088be:	4013      	ands	r3, r2
 80088c0:	d0f1      	beq.n	80088a6 <HAL_RCC_OscConfig+0x3e6>
 80088c2:	e018      	b.n	80088f6 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80088c4:	4b9a      	ldr	r3, [pc, #616]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 80088c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80088c8:	4b99      	ldr	r3, [pc, #612]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 80088ca:	2101      	movs	r1, #1
 80088cc:	438a      	bics	r2, r1
 80088ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088d0:	f7fe fa28 	bl	8006d24 <HAL_GetTick>
 80088d4:	0003      	movs	r3, r0
 80088d6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80088d8:	e008      	b.n	80088ec <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80088da:	f7fe fa23 	bl	8006d24 <HAL_GetTick>
 80088de:	0002      	movs	r2, r0
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	1ad3      	subs	r3, r2, r3
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	d901      	bls.n	80088ec <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80088e8:	2303      	movs	r3, #3
 80088ea:	e1af      	b.n	8008c4c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80088ec:	4b90      	ldr	r3, [pc, #576]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 80088ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088f0:	2202      	movs	r2, #2
 80088f2:	4013      	ands	r3, r2
 80088f4:	d1f1      	bne.n	80088da <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2204      	movs	r2, #4
 80088fc:	4013      	ands	r3, r2
 80088fe:	d100      	bne.n	8008902 <HAL_RCC_OscConfig+0x442>
 8008900:	e0af      	b.n	8008a62 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008902:	2323      	movs	r3, #35	; 0x23
 8008904:	18fb      	adds	r3, r7, r3
 8008906:	2200      	movs	r2, #0
 8008908:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800890a:	4b89      	ldr	r3, [pc, #548]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 800890c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800890e:	2380      	movs	r3, #128	; 0x80
 8008910:	055b      	lsls	r3, r3, #21
 8008912:	4013      	ands	r3, r2
 8008914:	d10a      	bne.n	800892c <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008916:	4b86      	ldr	r3, [pc, #536]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 8008918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800891a:	4b85      	ldr	r3, [pc, #532]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 800891c:	2180      	movs	r1, #128	; 0x80
 800891e:	0549      	lsls	r1, r1, #21
 8008920:	430a      	orrs	r2, r1
 8008922:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8008924:	2323      	movs	r3, #35	; 0x23
 8008926:	18fb      	adds	r3, r7, r3
 8008928:	2201      	movs	r2, #1
 800892a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800892c:	4b83      	ldr	r3, [pc, #524]	; (8008b3c <HAL_RCC_OscConfig+0x67c>)
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	2380      	movs	r3, #128	; 0x80
 8008932:	005b      	lsls	r3, r3, #1
 8008934:	4013      	ands	r3, r2
 8008936:	d11a      	bne.n	800896e <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008938:	4b80      	ldr	r3, [pc, #512]	; (8008b3c <HAL_RCC_OscConfig+0x67c>)
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	4b7f      	ldr	r3, [pc, #508]	; (8008b3c <HAL_RCC_OscConfig+0x67c>)
 800893e:	2180      	movs	r1, #128	; 0x80
 8008940:	0049      	lsls	r1, r1, #1
 8008942:	430a      	orrs	r2, r1
 8008944:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008946:	f7fe f9ed 	bl	8006d24 <HAL_GetTick>
 800894a:	0003      	movs	r3, r0
 800894c:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800894e:	e008      	b.n	8008962 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008950:	f7fe f9e8 	bl	8006d24 <HAL_GetTick>
 8008954:	0002      	movs	r2, r0
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	2b64      	cmp	r3, #100	; 0x64
 800895c:	d901      	bls.n	8008962 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800895e:	2303      	movs	r3, #3
 8008960:	e174      	b.n	8008c4c <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008962:	4b76      	ldr	r3, [pc, #472]	; (8008b3c <HAL_RCC_OscConfig+0x67c>)
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	2380      	movs	r3, #128	; 0x80
 8008968:	005b      	lsls	r3, r3, #1
 800896a:	4013      	ands	r3, r2
 800896c:	d0f0      	beq.n	8008950 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	689a      	ldr	r2, [r3, #8]
 8008972:	2380      	movs	r3, #128	; 0x80
 8008974:	005b      	lsls	r3, r3, #1
 8008976:	429a      	cmp	r2, r3
 8008978:	d107      	bne.n	800898a <HAL_RCC_OscConfig+0x4ca>
 800897a:	4b6d      	ldr	r3, [pc, #436]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 800897c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800897e:	4b6c      	ldr	r3, [pc, #432]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 8008980:	2180      	movs	r1, #128	; 0x80
 8008982:	0049      	lsls	r1, r1, #1
 8008984:	430a      	orrs	r2, r1
 8008986:	651a      	str	r2, [r3, #80]	; 0x50
 8008988:	e031      	b.n	80089ee <HAL_RCC_OscConfig+0x52e>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10c      	bne.n	80089ac <HAL_RCC_OscConfig+0x4ec>
 8008992:	4b67      	ldr	r3, [pc, #412]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 8008994:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008996:	4b66      	ldr	r3, [pc, #408]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 8008998:	4967      	ldr	r1, [pc, #412]	; (8008b38 <HAL_RCC_OscConfig+0x678>)
 800899a:	400a      	ands	r2, r1
 800899c:	651a      	str	r2, [r3, #80]	; 0x50
 800899e:	4b64      	ldr	r3, [pc, #400]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 80089a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80089a2:	4b63      	ldr	r3, [pc, #396]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 80089a4:	4966      	ldr	r1, [pc, #408]	; (8008b40 <HAL_RCC_OscConfig+0x680>)
 80089a6:	400a      	ands	r2, r1
 80089a8:	651a      	str	r2, [r3, #80]	; 0x50
 80089aa:	e020      	b.n	80089ee <HAL_RCC_OscConfig+0x52e>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	689a      	ldr	r2, [r3, #8]
 80089b0:	23a0      	movs	r3, #160	; 0xa0
 80089b2:	00db      	lsls	r3, r3, #3
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d10e      	bne.n	80089d6 <HAL_RCC_OscConfig+0x516>
 80089b8:	4b5d      	ldr	r3, [pc, #372]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 80089ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80089bc:	4b5c      	ldr	r3, [pc, #368]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 80089be:	2180      	movs	r1, #128	; 0x80
 80089c0:	00c9      	lsls	r1, r1, #3
 80089c2:	430a      	orrs	r2, r1
 80089c4:	651a      	str	r2, [r3, #80]	; 0x50
 80089c6:	4b5a      	ldr	r3, [pc, #360]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 80089c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80089ca:	4b59      	ldr	r3, [pc, #356]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 80089cc:	2180      	movs	r1, #128	; 0x80
 80089ce:	0049      	lsls	r1, r1, #1
 80089d0:	430a      	orrs	r2, r1
 80089d2:	651a      	str	r2, [r3, #80]	; 0x50
 80089d4:	e00b      	b.n	80089ee <HAL_RCC_OscConfig+0x52e>
 80089d6:	4b56      	ldr	r3, [pc, #344]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 80089d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80089da:	4b55      	ldr	r3, [pc, #340]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 80089dc:	4956      	ldr	r1, [pc, #344]	; (8008b38 <HAL_RCC_OscConfig+0x678>)
 80089de:	400a      	ands	r2, r1
 80089e0:	651a      	str	r2, [r3, #80]	; 0x50
 80089e2:	4b53      	ldr	r3, [pc, #332]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 80089e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80089e6:	4b52      	ldr	r3, [pc, #328]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 80089e8:	4955      	ldr	r1, [pc, #340]	; (8008b40 <HAL_RCC_OscConfig+0x680>)
 80089ea:	400a      	ands	r2, r1
 80089ec:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d015      	beq.n	8008a22 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089f6:	f7fe f995 	bl	8006d24 <HAL_GetTick>
 80089fa:	0003      	movs	r3, r0
 80089fc:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089fe:	e009      	b.n	8008a14 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a00:	f7fe f990 	bl	8006d24 <HAL_GetTick>
 8008a04:	0002      	movs	r2, r0
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	4a4e      	ldr	r2, [pc, #312]	; (8008b44 <HAL_RCC_OscConfig+0x684>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d901      	bls.n	8008a14 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8008a10:	2303      	movs	r3, #3
 8008a12:	e11b      	b.n	8008c4c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a14:	4b46      	ldr	r3, [pc, #280]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 8008a16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a18:	2380      	movs	r3, #128	; 0x80
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	4013      	ands	r3, r2
 8008a1e:	d0ef      	beq.n	8008a00 <HAL_RCC_OscConfig+0x540>
 8008a20:	e014      	b.n	8008a4c <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a22:	f7fe f97f 	bl	8006d24 <HAL_GetTick>
 8008a26:	0003      	movs	r3, r0
 8008a28:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008a2a:	e009      	b.n	8008a40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a2c:	f7fe f97a 	bl	8006d24 <HAL_GetTick>
 8008a30:	0002      	movs	r2, r0
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	1ad3      	subs	r3, r2, r3
 8008a36:	4a43      	ldr	r2, [pc, #268]	; (8008b44 <HAL_RCC_OscConfig+0x684>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d901      	bls.n	8008a40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008a3c:	2303      	movs	r3, #3
 8008a3e:	e105      	b.n	8008c4c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008a40:	4b3b      	ldr	r3, [pc, #236]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 8008a42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a44:	2380      	movs	r3, #128	; 0x80
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	4013      	ands	r3, r2
 8008a4a:	d1ef      	bne.n	8008a2c <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008a4c:	2323      	movs	r3, #35	; 0x23
 8008a4e:	18fb      	adds	r3, r7, r3
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d105      	bne.n	8008a62 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a56:	4b36      	ldr	r3, [pc, #216]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 8008a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a5a:	4b35      	ldr	r3, [pc, #212]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 8008a5c:	493a      	ldr	r1, [pc, #232]	; (8008b48 <HAL_RCC_OscConfig+0x688>)
 8008a5e:	400a      	ands	r2, r1
 8008a60:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2220      	movs	r2, #32
 8008a68:	4013      	ands	r3, r2
 8008a6a:	d049      	beq.n	8008b00 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	699b      	ldr	r3, [r3, #24]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d026      	beq.n	8008ac2 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8008a74:	4b2e      	ldr	r3, [pc, #184]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 8008a76:	689a      	ldr	r2, [r3, #8]
 8008a78:	4b2d      	ldr	r3, [pc, #180]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 8008a7a:	2101      	movs	r1, #1
 8008a7c:	430a      	orrs	r2, r1
 8008a7e:	609a      	str	r2, [r3, #8]
 8008a80:	4b2b      	ldr	r3, [pc, #172]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 8008a82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a84:	4b2a      	ldr	r3, [pc, #168]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 8008a86:	2101      	movs	r1, #1
 8008a88:	430a      	orrs	r2, r1
 8008a8a:	635a      	str	r2, [r3, #52]	; 0x34
 8008a8c:	4b2f      	ldr	r3, [pc, #188]	; (8008b4c <HAL_RCC_OscConfig+0x68c>)
 8008a8e:	6a1a      	ldr	r2, [r3, #32]
 8008a90:	4b2e      	ldr	r3, [pc, #184]	; (8008b4c <HAL_RCC_OscConfig+0x68c>)
 8008a92:	2180      	movs	r1, #128	; 0x80
 8008a94:	0189      	lsls	r1, r1, #6
 8008a96:	430a      	orrs	r2, r1
 8008a98:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a9a:	f7fe f943 	bl	8006d24 <HAL_GetTick>
 8008a9e:	0003      	movs	r3, r0
 8008aa0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008aa2:	e008      	b.n	8008ab6 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008aa4:	f7fe f93e 	bl	8006d24 <HAL_GetTick>
 8008aa8:	0002      	movs	r2, r0
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d901      	bls.n	8008ab6 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	e0ca      	b.n	8008c4c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008ab6:	4b1e      	ldr	r3, [pc, #120]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	2202      	movs	r2, #2
 8008abc:	4013      	ands	r3, r2
 8008abe:	d0f1      	beq.n	8008aa4 <HAL_RCC_OscConfig+0x5e4>
 8008ac0:	e01e      	b.n	8008b00 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8008ac2:	4b1b      	ldr	r3, [pc, #108]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 8008ac4:	689a      	ldr	r2, [r3, #8]
 8008ac6:	4b1a      	ldr	r3, [pc, #104]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 8008ac8:	2101      	movs	r1, #1
 8008aca:	438a      	bics	r2, r1
 8008acc:	609a      	str	r2, [r3, #8]
 8008ace:	4b1f      	ldr	r3, [pc, #124]	; (8008b4c <HAL_RCC_OscConfig+0x68c>)
 8008ad0:	6a1a      	ldr	r2, [r3, #32]
 8008ad2:	4b1e      	ldr	r3, [pc, #120]	; (8008b4c <HAL_RCC_OscConfig+0x68c>)
 8008ad4:	491e      	ldr	r1, [pc, #120]	; (8008b50 <HAL_RCC_OscConfig+0x690>)
 8008ad6:	400a      	ands	r2, r1
 8008ad8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ada:	f7fe f923 	bl	8006d24 <HAL_GetTick>
 8008ade:	0003      	movs	r3, r0
 8008ae0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008ae2:	e008      	b.n	8008af6 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008ae4:	f7fe f91e 	bl	8006d24 <HAL_GetTick>
 8008ae8:	0002      	movs	r2, r0
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	1ad3      	subs	r3, r2, r3
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d901      	bls.n	8008af6 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8008af2:	2303      	movs	r3, #3
 8008af4:	e0aa      	b.n	8008c4c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008af6:	4b0e      	ldr	r3, [pc, #56]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	2202      	movs	r2, #2
 8008afc:	4013      	ands	r3, r2
 8008afe:	d1f1      	bne.n	8008ae4 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d100      	bne.n	8008b0a <HAL_RCC_OscConfig+0x64a>
 8008b08:	e09f      	b.n	8008c4a <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b0a:	69fb      	ldr	r3, [r7, #28]
 8008b0c:	2b0c      	cmp	r3, #12
 8008b0e:	d100      	bne.n	8008b12 <HAL_RCC_OscConfig+0x652>
 8008b10:	e078      	b.n	8008c04 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b16:	2b02      	cmp	r3, #2
 8008b18:	d159      	bne.n	8008bce <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b1a:	4b05      	ldr	r3, [pc, #20]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	4b04      	ldr	r3, [pc, #16]	; (8008b30 <HAL_RCC_OscConfig+0x670>)
 8008b20:	490c      	ldr	r1, [pc, #48]	; (8008b54 <HAL_RCC_OscConfig+0x694>)
 8008b22:	400a      	ands	r2, r1
 8008b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b26:	f7fe f8fd 	bl	8006d24 <HAL_GetTick>
 8008b2a:	0003      	movs	r3, r0
 8008b2c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008b2e:	e01c      	b.n	8008b6a <HAL_RCC_OscConfig+0x6aa>
 8008b30:	40021000 	.word	0x40021000
 8008b34:	ffff1fff 	.word	0xffff1fff
 8008b38:	fffffeff 	.word	0xfffffeff
 8008b3c:	40007000 	.word	0x40007000
 8008b40:	fffffbff 	.word	0xfffffbff
 8008b44:	00001388 	.word	0x00001388
 8008b48:	efffffff 	.word	0xefffffff
 8008b4c:	40010000 	.word	0x40010000
 8008b50:	ffffdfff 	.word	0xffffdfff
 8008b54:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b58:	f7fe f8e4 	bl	8006d24 <HAL_GetTick>
 8008b5c:	0002      	movs	r2, r0
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d901      	bls.n	8008b6a <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8008b66:	2303      	movs	r3, #3
 8008b68:	e070      	b.n	8008c4c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008b6a:	4b3a      	ldr	r3, [pc, #232]	; (8008c54 <HAL_RCC_OscConfig+0x794>)
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	2380      	movs	r3, #128	; 0x80
 8008b70:	049b      	lsls	r3, r3, #18
 8008b72:	4013      	ands	r3, r2
 8008b74:	d1f0      	bne.n	8008b58 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b76:	4b37      	ldr	r3, [pc, #220]	; (8008c54 <HAL_RCC_OscConfig+0x794>)
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	4a37      	ldr	r2, [pc, #220]	; (8008c58 <HAL_RCC_OscConfig+0x798>)
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	0019      	movs	r1, r3
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b88:	431a      	orrs	r2, r3
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b8e:	431a      	orrs	r2, r3
 8008b90:	4b30      	ldr	r3, [pc, #192]	; (8008c54 <HAL_RCC_OscConfig+0x794>)
 8008b92:	430a      	orrs	r2, r1
 8008b94:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b96:	4b2f      	ldr	r3, [pc, #188]	; (8008c54 <HAL_RCC_OscConfig+0x794>)
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	4b2e      	ldr	r3, [pc, #184]	; (8008c54 <HAL_RCC_OscConfig+0x794>)
 8008b9c:	2180      	movs	r1, #128	; 0x80
 8008b9e:	0449      	lsls	r1, r1, #17
 8008ba0:	430a      	orrs	r2, r1
 8008ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ba4:	f7fe f8be 	bl	8006d24 <HAL_GetTick>
 8008ba8:	0003      	movs	r3, r0
 8008baa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8008bac:	e008      	b.n	8008bc0 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008bae:	f7fe f8b9 	bl	8006d24 <HAL_GetTick>
 8008bb2:	0002      	movs	r2, r0
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	1ad3      	subs	r3, r2, r3
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d901      	bls.n	8008bc0 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	e045      	b.n	8008c4c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8008bc0:	4b24      	ldr	r3, [pc, #144]	; (8008c54 <HAL_RCC_OscConfig+0x794>)
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	2380      	movs	r3, #128	; 0x80
 8008bc6:	049b      	lsls	r3, r3, #18
 8008bc8:	4013      	ands	r3, r2
 8008bca:	d0f0      	beq.n	8008bae <HAL_RCC_OscConfig+0x6ee>
 8008bcc:	e03d      	b.n	8008c4a <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bce:	4b21      	ldr	r3, [pc, #132]	; (8008c54 <HAL_RCC_OscConfig+0x794>)
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	4b20      	ldr	r3, [pc, #128]	; (8008c54 <HAL_RCC_OscConfig+0x794>)
 8008bd4:	4921      	ldr	r1, [pc, #132]	; (8008c5c <HAL_RCC_OscConfig+0x79c>)
 8008bd6:	400a      	ands	r2, r1
 8008bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bda:	f7fe f8a3 	bl	8006d24 <HAL_GetTick>
 8008bde:	0003      	movs	r3, r0
 8008be0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008be2:	e008      	b.n	8008bf6 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008be4:	f7fe f89e 	bl	8006d24 <HAL_GetTick>
 8008be8:	0002      	movs	r2, r0
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	1ad3      	subs	r3, r2, r3
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d901      	bls.n	8008bf6 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	e02a      	b.n	8008c4c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008bf6:	4b17      	ldr	r3, [pc, #92]	; (8008c54 <HAL_RCC_OscConfig+0x794>)
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	2380      	movs	r3, #128	; 0x80
 8008bfc:	049b      	lsls	r3, r3, #18
 8008bfe:	4013      	ands	r3, r2
 8008c00:	d1f0      	bne.n	8008be4 <HAL_RCC_OscConfig+0x724>
 8008c02:	e022      	b.n	8008c4a <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d101      	bne.n	8008c10 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e01d      	b.n	8008c4c <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008c10:	4b10      	ldr	r3, [pc, #64]	; (8008c54 <HAL_RCC_OscConfig+0x794>)
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c16:	69ba      	ldr	r2, [r7, #24]
 8008c18:	2380      	movs	r3, #128	; 0x80
 8008c1a:	025b      	lsls	r3, r3, #9
 8008c1c:	401a      	ands	r2, r3
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d10f      	bne.n	8008c46 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8008c26:	69ba      	ldr	r2, [r7, #24]
 8008c28:	23f0      	movs	r3, #240	; 0xf0
 8008c2a:	039b      	lsls	r3, r3, #14
 8008c2c:	401a      	ands	r2, r3
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d107      	bne.n	8008c46 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8008c36:	69ba      	ldr	r2, [r7, #24]
 8008c38:	23c0      	movs	r3, #192	; 0xc0
 8008c3a:	041b      	lsls	r3, r3, #16
 8008c3c:	401a      	ands	r2, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d001      	beq.n	8008c4a <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	e000      	b.n	8008c4c <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	0018      	movs	r0, r3
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	b00a      	add	sp, #40	; 0x28
 8008c52:	bdb0      	pop	{r4, r5, r7, pc}
 8008c54:	40021000 	.word	0x40021000
 8008c58:	ff02ffff 	.word	0xff02ffff
 8008c5c:	feffffff 	.word	0xfeffffff

08008c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c60:	b5b0      	push	{r4, r5, r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d101      	bne.n	8008c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	e10d      	b.n	8008e90 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008c74:	4b88      	ldr	r3, [pc, #544]	; (8008e98 <HAL_RCC_ClockConfig+0x238>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	4013      	ands	r3, r2
 8008c7c:	683a      	ldr	r2, [r7, #0]
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d911      	bls.n	8008ca6 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c82:	4b85      	ldr	r3, [pc, #532]	; (8008e98 <HAL_RCC_ClockConfig+0x238>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2201      	movs	r2, #1
 8008c88:	4393      	bics	r3, r2
 8008c8a:	0019      	movs	r1, r3
 8008c8c:	4b82      	ldr	r3, [pc, #520]	; (8008e98 <HAL_RCC_ClockConfig+0x238>)
 8008c8e:	683a      	ldr	r2, [r7, #0]
 8008c90:	430a      	orrs	r2, r1
 8008c92:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c94:	4b80      	ldr	r3, [pc, #512]	; (8008e98 <HAL_RCC_ClockConfig+0x238>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	683a      	ldr	r2, [r7, #0]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d001      	beq.n	8008ca6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e0f4      	b.n	8008e90 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2202      	movs	r2, #2
 8008cac:	4013      	ands	r3, r2
 8008cae:	d009      	beq.n	8008cc4 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008cb0:	4b7a      	ldr	r3, [pc, #488]	; (8008e9c <HAL_RCC_ClockConfig+0x23c>)
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	22f0      	movs	r2, #240	; 0xf0
 8008cb6:	4393      	bics	r3, r2
 8008cb8:	0019      	movs	r1, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	689a      	ldr	r2, [r3, #8]
 8008cbe:	4b77      	ldr	r3, [pc, #476]	; (8008e9c <HAL_RCC_ClockConfig+0x23c>)
 8008cc0:	430a      	orrs	r2, r1
 8008cc2:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	4013      	ands	r3, r2
 8008ccc:	d100      	bne.n	8008cd0 <HAL_RCC_ClockConfig+0x70>
 8008cce:	e089      	b.n	8008de4 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	2b02      	cmp	r3, #2
 8008cd6:	d107      	bne.n	8008ce8 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008cd8:	4b70      	ldr	r3, [pc, #448]	; (8008e9c <HAL_RCC_ClockConfig+0x23c>)
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	2380      	movs	r3, #128	; 0x80
 8008cde:	029b      	lsls	r3, r3, #10
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	d120      	bne.n	8008d26 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e0d3      	b.n	8008e90 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	2b03      	cmp	r3, #3
 8008cee:	d107      	bne.n	8008d00 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008cf0:	4b6a      	ldr	r3, [pc, #424]	; (8008e9c <HAL_RCC_ClockConfig+0x23c>)
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	2380      	movs	r3, #128	; 0x80
 8008cf6:	049b      	lsls	r3, r3, #18
 8008cf8:	4013      	ands	r3, r2
 8008cfa:	d114      	bne.n	8008d26 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e0c7      	b.n	8008e90 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d106      	bne.n	8008d16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d08:	4b64      	ldr	r3, [pc, #400]	; (8008e9c <HAL_RCC_ClockConfig+0x23c>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	2204      	movs	r2, #4
 8008d0e:	4013      	ands	r3, r2
 8008d10:	d109      	bne.n	8008d26 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	e0bc      	b.n	8008e90 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008d16:	4b61      	ldr	r3, [pc, #388]	; (8008e9c <HAL_RCC_ClockConfig+0x23c>)
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	2380      	movs	r3, #128	; 0x80
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	4013      	ands	r3, r2
 8008d20:	d101      	bne.n	8008d26 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	e0b4      	b.n	8008e90 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d26:	4b5d      	ldr	r3, [pc, #372]	; (8008e9c <HAL_RCC_ClockConfig+0x23c>)
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	2203      	movs	r2, #3
 8008d2c:	4393      	bics	r3, r2
 8008d2e:	0019      	movs	r1, r3
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	685a      	ldr	r2, [r3, #4]
 8008d34:	4b59      	ldr	r3, [pc, #356]	; (8008e9c <HAL_RCC_ClockConfig+0x23c>)
 8008d36:	430a      	orrs	r2, r1
 8008d38:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008d3a:	f7fd fff3 	bl	8006d24 <HAL_GetTick>
 8008d3e:	0003      	movs	r3, r0
 8008d40:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	d111      	bne.n	8008d6e <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008d4a:	e009      	b.n	8008d60 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d4c:	f7fd ffea 	bl	8006d24 <HAL_GetTick>
 8008d50:	0002      	movs	r2, r0
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	4a52      	ldr	r2, [pc, #328]	; (8008ea0 <HAL_RCC_ClockConfig+0x240>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d901      	bls.n	8008d60 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8008d5c:	2303      	movs	r3, #3
 8008d5e:	e097      	b.n	8008e90 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008d60:	4b4e      	ldr	r3, [pc, #312]	; (8008e9c <HAL_RCC_ClockConfig+0x23c>)
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	220c      	movs	r2, #12
 8008d66:	4013      	ands	r3, r2
 8008d68:	2b08      	cmp	r3, #8
 8008d6a:	d1ef      	bne.n	8008d4c <HAL_RCC_ClockConfig+0xec>
 8008d6c:	e03a      	b.n	8008de4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	2b03      	cmp	r3, #3
 8008d74:	d111      	bne.n	8008d9a <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008d76:	e009      	b.n	8008d8c <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d78:	f7fd ffd4 	bl	8006d24 <HAL_GetTick>
 8008d7c:	0002      	movs	r2, r0
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	1ad3      	subs	r3, r2, r3
 8008d82:	4a47      	ldr	r2, [pc, #284]	; (8008ea0 <HAL_RCC_ClockConfig+0x240>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d901      	bls.n	8008d8c <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8008d88:	2303      	movs	r3, #3
 8008d8a:	e081      	b.n	8008e90 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008d8c:	4b43      	ldr	r3, [pc, #268]	; (8008e9c <HAL_RCC_ClockConfig+0x23c>)
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	220c      	movs	r2, #12
 8008d92:	4013      	ands	r3, r2
 8008d94:	2b0c      	cmp	r3, #12
 8008d96:	d1ef      	bne.n	8008d78 <HAL_RCC_ClockConfig+0x118>
 8008d98:	e024      	b.n	8008de4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d11b      	bne.n	8008dda <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008da2:	e009      	b.n	8008db8 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008da4:	f7fd ffbe 	bl	8006d24 <HAL_GetTick>
 8008da8:	0002      	movs	r2, r0
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	1ad3      	subs	r3, r2, r3
 8008dae:	4a3c      	ldr	r2, [pc, #240]	; (8008ea0 <HAL_RCC_ClockConfig+0x240>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d901      	bls.n	8008db8 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8008db4:	2303      	movs	r3, #3
 8008db6:	e06b      	b.n	8008e90 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008db8:	4b38      	ldr	r3, [pc, #224]	; (8008e9c <HAL_RCC_ClockConfig+0x23c>)
 8008dba:	68db      	ldr	r3, [r3, #12]
 8008dbc:	220c      	movs	r2, #12
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	2b04      	cmp	r3, #4
 8008dc2:	d1ef      	bne.n	8008da4 <HAL_RCC_ClockConfig+0x144>
 8008dc4:	e00e      	b.n	8008de4 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008dc6:	f7fd ffad 	bl	8006d24 <HAL_GetTick>
 8008dca:	0002      	movs	r2, r0
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	1ad3      	subs	r3, r2, r3
 8008dd0:	4a33      	ldr	r2, [pc, #204]	; (8008ea0 <HAL_RCC_ClockConfig+0x240>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d901      	bls.n	8008dda <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8008dd6:	2303      	movs	r3, #3
 8008dd8:	e05a      	b.n	8008e90 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8008dda:	4b30      	ldr	r3, [pc, #192]	; (8008e9c <HAL_RCC_ClockConfig+0x23c>)
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	220c      	movs	r2, #12
 8008de0:	4013      	ands	r3, r2
 8008de2:	d1f0      	bne.n	8008dc6 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008de4:	4b2c      	ldr	r3, [pc, #176]	; (8008e98 <HAL_RCC_ClockConfig+0x238>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2201      	movs	r2, #1
 8008dea:	4013      	ands	r3, r2
 8008dec:	683a      	ldr	r2, [r7, #0]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d211      	bcs.n	8008e16 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008df2:	4b29      	ldr	r3, [pc, #164]	; (8008e98 <HAL_RCC_ClockConfig+0x238>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	2201      	movs	r2, #1
 8008df8:	4393      	bics	r3, r2
 8008dfa:	0019      	movs	r1, r3
 8008dfc:	4b26      	ldr	r3, [pc, #152]	; (8008e98 <HAL_RCC_ClockConfig+0x238>)
 8008dfe:	683a      	ldr	r2, [r7, #0]
 8008e00:	430a      	orrs	r2, r1
 8008e02:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e04:	4b24      	ldr	r3, [pc, #144]	; (8008e98 <HAL_RCC_ClockConfig+0x238>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	4013      	ands	r3, r2
 8008e0c:	683a      	ldr	r2, [r7, #0]
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d001      	beq.n	8008e16 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e03c      	b.n	8008e90 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2204      	movs	r2, #4
 8008e1c:	4013      	ands	r3, r2
 8008e1e:	d009      	beq.n	8008e34 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008e20:	4b1e      	ldr	r3, [pc, #120]	; (8008e9c <HAL_RCC_ClockConfig+0x23c>)
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	4a1f      	ldr	r2, [pc, #124]	; (8008ea4 <HAL_RCC_ClockConfig+0x244>)
 8008e26:	4013      	ands	r3, r2
 8008e28:	0019      	movs	r1, r3
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	68da      	ldr	r2, [r3, #12]
 8008e2e:	4b1b      	ldr	r3, [pc, #108]	; (8008e9c <HAL_RCC_ClockConfig+0x23c>)
 8008e30:	430a      	orrs	r2, r1
 8008e32:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2208      	movs	r2, #8
 8008e3a:	4013      	ands	r3, r2
 8008e3c:	d00a      	beq.n	8008e54 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008e3e:	4b17      	ldr	r3, [pc, #92]	; (8008e9c <HAL_RCC_ClockConfig+0x23c>)
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	4a19      	ldr	r2, [pc, #100]	; (8008ea8 <HAL_RCC_ClockConfig+0x248>)
 8008e44:	4013      	ands	r3, r2
 8008e46:	0019      	movs	r1, r3
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	691b      	ldr	r3, [r3, #16]
 8008e4c:	00da      	lsls	r2, r3, #3
 8008e4e:	4b13      	ldr	r3, [pc, #76]	; (8008e9c <HAL_RCC_ClockConfig+0x23c>)
 8008e50:	430a      	orrs	r2, r1
 8008e52:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008e54:	f000 f82e 	bl	8008eb4 <HAL_RCC_GetSysClockFreq>
 8008e58:	0001      	movs	r1, r0
 8008e5a:	4b10      	ldr	r3, [pc, #64]	; (8008e9c <HAL_RCC_ClockConfig+0x23c>)
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	091b      	lsrs	r3, r3, #4
 8008e60:	220f      	movs	r2, #15
 8008e62:	4013      	ands	r3, r2
 8008e64:	4a11      	ldr	r2, [pc, #68]	; (8008eac <HAL_RCC_ClockConfig+0x24c>)
 8008e66:	5cd3      	ldrb	r3, [r2, r3]
 8008e68:	000a      	movs	r2, r1
 8008e6a:	40da      	lsrs	r2, r3
 8008e6c:	4b10      	ldr	r3, [pc, #64]	; (8008eb0 <HAL_RCC_ClockConfig+0x250>)
 8008e6e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8008e70:	250b      	movs	r5, #11
 8008e72:	197c      	adds	r4, r7, r5
 8008e74:	2000      	movs	r0, #0
 8008e76:	f7fd ff0f 	bl	8006c98 <HAL_InitTick>
 8008e7a:	0003      	movs	r3, r0
 8008e7c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8008e7e:	197b      	adds	r3, r7, r5
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d003      	beq.n	8008e8e <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8008e86:	230b      	movs	r3, #11
 8008e88:	18fb      	adds	r3, r7, r3
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	e000      	b.n	8008e90 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	0018      	movs	r0, r3
 8008e92:	46bd      	mov	sp, r7
 8008e94:	b004      	add	sp, #16
 8008e96:	bdb0      	pop	{r4, r5, r7, pc}
 8008e98:	40022000 	.word	0x40022000
 8008e9c:	40021000 	.word	0x40021000
 8008ea0:	00001388 	.word	0x00001388
 8008ea4:	fffff8ff 	.word	0xfffff8ff
 8008ea8:	ffffc7ff 	.word	0xffffc7ff
 8008eac:	0800cd7c 	.word	0x0800cd7c
 8008eb0:	20000010 	.word	0x20000010

08008eb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b086      	sub	sp, #24
 8008eb8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8008eba:	4b3b      	ldr	r3, [pc, #236]	; (8008fa8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	220c      	movs	r2, #12
 8008ec4:	4013      	ands	r3, r2
 8008ec6:	2b08      	cmp	r3, #8
 8008ec8:	d00e      	beq.n	8008ee8 <HAL_RCC_GetSysClockFreq+0x34>
 8008eca:	2b0c      	cmp	r3, #12
 8008ecc:	d00f      	beq.n	8008eee <HAL_RCC_GetSysClockFreq+0x3a>
 8008ece:	2b04      	cmp	r3, #4
 8008ed0:	d157      	bne.n	8008f82 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8008ed2:	4b35      	ldr	r3, [pc, #212]	; (8008fa8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2210      	movs	r2, #16
 8008ed8:	4013      	ands	r3, r2
 8008eda:	d002      	beq.n	8008ee2 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8008edc:	4b33      	ldr	r3, [pc, #204]	; (8008fac <HAL_RCC_GetSysClockFreq+0xf8>)
 8008ede:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8008ee0:	e05d      	b.n	8008f9e <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8008ee2:	4b33      	ldr	r3, [pc, #204]	; (8008fb0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008ee4:	613b      	str	r3, [r7, #16]
      break;
 8008ee6:	e05a      	b.n	8008f9e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008ee8:	4b32      	ldr	r3, [pc, #200]	; (8008fb4 <HAL_RCC_GetSysClockFreq+0x100>)
 8008eea:	613b      	str	r3, [r7, #16]
      break;
 8008eec:	e057      	b.n	8008f9e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	0c9b      	lsrs	r3, r3, #18
 8008ef2:	220f      	movs	r2, #15
 8008ef4:	4013      	ands	r3, r2
 8008ef6:	4a30      	ldr	r2, [pc, #192]	; (8008fb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8008ef8:	5cd3      	ldrb	r3, [r2, r3]
 8008efa:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	0d9b      	lsrs	r3, r3, #22
 8008f00:	2203      	movs	r2, #3
 8008f02:	4013      	ands	r3, r2
 8008f04:	3301      	adds	r3, #1
 8008f06:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008f08:	4b27      	ldr	r3, [pc, #156]	; (8008fa8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8008f0a:	68da      	ldr	r2, [r3, #12]
 8008f0c:	2380      	movs	r3, #128	; 0x80
 8008f0e:	025b      	lsls	r3, r3, #9
 8008f10:	4013      	ands	r3, r2
 8008f12:	d00f      	beq.n	8008f34 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8008f14:	68b9      	ldr	r1, [r7, #8]
 8008f16:	000a      	movs	r2, r1
 8008f18:	0152      	lsls	r2, r2, #5
 8008f1a:	1a52      	subs	r2, r2, r1
 8008f1c:	0193      	lsls	r3, r2, #6
 8008f1e:	1a9b      	subs	r3, r3, r2
 8008f20:	00db      	lsls	r3, r3, #3
 8008f22:	185b      	adds	r3, r3, r1
 8008f24:	025b      	lsls	r3, r3, #9
 8008f26:	6879      	ldr	r1, [r7, #4]
 8008f28:	0018      	movs	r0, r3
 8008f2a:	f7f7 f8f5 	bl	8000118 <__udivsi3>
 8008f2e:	0003      	movs	r3, r0
 8008f30:	617b      	str	r3, [r7, #20]
 8008f32:	e023      	b.n	8008f7c <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8008f34:	4b1c      	ldr	r3, [pc, #112]	; (8008fa8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2210      	movs	r2, #16
 8008f3a:	4013      	ands	r3, r2
 8008f3c:	d00f      	beq.n	8008f5e <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8008f3e:	68b9      	ldr	r1, [r7, #8]
 8008f40:	000a      	movs	r2, r1
 8008f42:	0152      	lsls	r2, r2, #5
 8008f44:	1a52      	subs	r2, r2, r1
 8008f46:	0193      	lsls	r3, r2, #6
 8008f48:	1a9b      	subs	r3, r3, r2
 8008f4a:	00db      	lsls	r3, r3, #3
 8008f4c:	185b      	adds	r3, r3, r1
 8008f4e:	021b      	lsls	r3, r3, #8
 8008f50:	6879      	ldr	r1, [r7, #4]
 8008f52:	0018      	movs	r0, r3
 8008f54:	f7f7 f8e0 	bl	8000118 <__udivsi3>
 8008f58:	0003      	movs	r3, r0
 8008f5a:	617b      	str	r3, [r7, #20]
 8008f5c:	e00e      	b.n	8008f7c <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8008f5e:	68b9      	ldr	r1, [r7, #8]
 8008f60:	000a      	movs	r2, r1
 8008f62:	0152      	lsls	r2, r2, #5
 8008f64:	1a52      	subs	r2, r2, r1
 8008f66:	0193      	lsls	r3, r2, #6
 8008f68:	1a9b      	subs	r3, r3, r2
 8008f6a:	00db      	lsls	r3, r3, #3
 8008f6c:	185b      	adds	r3, r3, r1
 8008f6e:	029b      	lsls	r3, r3, #10
 8008f70:	6879      	ldr	r1, [r7, #4]
 8008f72:	0018      	movs	r0, r3
 8008f74:	f7f7 f8d0 	bl	8000118 <__udivsi3>
 8008f78:	0003      	movs	r3, r0
 8008f7a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	613b      	str	r3, [r7, #16]
      break;
 8008f80:	e00d      	b.n	8008f9e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8008f82:	4b09      	ldr	r3, [pc, #36]	; (8008fa8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	0b5b      	lsrs	r3, r3, #13
 8008f88:	2207      	movs	r2, #7
 8008f8a:	4013      	ands	r3, r2
 8008f8c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	3301      	adds	r3, #1
 8008f92:	2280      	movs	r2, #128	; 0x80
 8008f94:	0212      	lsls	r2, r2, #8
 8008f96:	409a      	lsls	r2, r3
 8008f98:	0013      	movs	r3, r2
 8008f9a:	613b      	str	r3, [r7, #16]
      break;
 8008f9c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8008f9e:	693b      	ldr	r3, [r7, #16]
}
 8008fa0:	0018      	movs	r0, r3
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	b006      	add	sp, #24
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	40021000 	.word	0x40021000
 8008fac:	003d0900 	.word	0x003d0900
 8008fb0:	00f42400 	.word	0x00f42400
 8008fb4:	007a1200 	.word	0x007a1200
 8008fb8:	0800cd8c 	.word	0x0800cd8c

08008fbc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b086      	sub	sp, #24
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2220      	movs	r2, #32
 8008fca:	4013      	ands	r3, r2
 8008fcc:	d106      	bne.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	2380      	movs	r3, #128	; 0x80
 8008fd4:	011b      	lsls	r3, r3, #4
 8008fd6:	4013      	ands	r3, r2
 8008fd8:	d100      	bne.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x20>
 8008fda:	e0dd      	b.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8008fdc:	2317      	movs	r3, #23
 8008fde:	18fb      	adds	r3, r7, r3
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008fe4:	4ba4      	ldr	r3, [pc, #656]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008fe6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fe8:	2380      	movs	r3, #128	; 0x80
 8008fea:	055b      	lsls	r3, r3, #21
 8008fec:	4013      	ands	r3, r2
 8008fee:	d10a      	bne.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ff0:	4ba1      	ldr	r3, [pc, #644]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008ff2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ff4:	4ba0      	ldr	r3, [pc, #640]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008ff6:	2180      	movs	r1, #128	; 0x80
 8008ff8:	0549      	lsls	r1, r1, #21
 8008ffa:	430a      	orrs	r2, r1
 8008ffc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8008ffe:	2317      	movs	r3, #23
 8009000:	18fb      	adds	r3, r7, r3
 8009002:	2201      	movs	r2, #1
 8009004:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009006:	4b9d      	ldr	r3, [pc, #628]	; (800927c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	2380      	movs	r3, #128	; 0x80
 800900c:	005b      	lsls	r3, r3, #1
 800900e:	4013      	ands	r3, r2
 8009010:	d11a      	bne.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009012:	4b9a      	ldr	r3, [pc, #616]	; (800927c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	4b99      	ldr	r3, [pc, #612]	; (800927c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009018:	2180      	movs	r1, #128	; 0x80
 800901a:	0049      	lsls	r1, r1, #1
 800901c:	430a      	orrs	r2, r1
 800901e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009020:	f7fd fe80 	bl	8006d24 <HAL_GetTick>
 8009024:	0003      	movs	r3, r0
 8009026:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009028:	e008      	b.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800902a:	f7fd fe7b 	bl	8006d24 <HAL_GetTick>
 800902e:	0002      	movs	r2, r0
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	1ad3      	subs	r3, r2, r3
 8009034:	2b64      	cmp	r3, #100	; 0x64
 8009036:	d901      	bls.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8009038:	2303      	movs	r3, #3
 800903a:	e118      	b.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800903c:	4b8f      	ldr	r3, [pc, #572]	; (800927c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	2380      	movs	r3, #128	; 0x80
 8009042:	005b      	lsls	r3, r3, #1
 8009044:	4013      	ands	r3, r2
 8009046:	d0f0      	beq.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8009048:	4b8b      	ldr	r3, [pc, #556]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	23c0      	movs	r3, #192	; 0xc0
 800904e:	039b      	lsls	r3, r3, #14
 8009050:	4013      	ands	r3, r2
 8009052:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	685a      	ldr	r2, [r3, #4]
 8009058:	23c0      	movs	r3, #192	; 0xc0
 800905a:	039b      	lsls	r3, r3, #14
 800905c:	4013      	ands	r3, r2
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	429a      	cmp	r2, r3
 8009062:	d107      	bne.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	689a      	ldr	r2, [r3, #8]
 8009068:	23c0      	movs	r3, #192	; 0xc0
 800906a:	039b      	lsls	r3, r3, #14
 800906c:	4013      	ands	r3, r2
 800906e:	68fa      	ldr	r2, [r7, #12]
 8009070:	429a      	cmp	r2, r3
 8009072:	d013      	beq.n	800909c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685a      	ldr	r2, [r3, #4]
 8009078:	23c0      	movs	r3, #192	; 0xc0
 800907a:	029b      	lsls	r3, r3, #10
 800907c:	401a      	ands	r2, r3
 800907e:	23c0      	movs	r3, #192	; 0xc0
 8009080:	029b      	lsls	r3, r3, #10
 8009082:	429a      	cmp	r2, r3
 8009084:	d10a      	bne.n	800909c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009086:	4b7c      	ldr	r3, [pc, #496]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	2380      	movs	r3, #128	; 0x80
 800908c:	029b      	lsls	r3, r3, #10
 800908e:	401a      	ands	r2, r3
 8009090:	2380      	movs	r3, #128	; 0x80
 8009092:	029b      	lsls	r3, r3, #10
 8009094:	429a      	cmp	r2, r3
 8009096:	d101      	bne.n	800909c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8009098:	2301      	movs	r3, #1
 800909a:	e0e8      	b.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800909c:	4b76      	ldr	r3, [pc, #472]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800909e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80090a0:	23c0      	movs	r3, #192	; 0xc0
 80090a2:	029b      	lsls	r3, r3, #10
 80090a4:	4013      	ands	r3, r2
 80090a6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d049      	beq.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	685a      	ldr	r2, [r3, #4]
 80090b2:	23c0      	movs	r3, #192	; 0xc0
 80090b4:	029b      	lsls	r3, r3, #10
 80090b6:	4013      	ands	r3, r2
 80090b8:	68fa      	ldr	r2, [r7, #12]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d004      	beq.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2220      	movs	r2, #32
 80090c4:	4013      	ands	r3, r2
 80090c6:	d10d      	bne.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	689a      	ldr	r2, [r3, #8]
 80090cc:	23c0      	movs	r3, #192	; 0xc0
 80090ce:	029b      	lsls	r3, r3, #10
 80090d0:	4013      	ands	r3, r2
 80090d2:	68fa      	ldr	r2, [r7, #12]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d034      	beq.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	2380      	movs	r3, #128	; 0x80
 80090de:	011b      	lsls	r3, r3, #4
 80090e0:	4013      	ands	r3, r2
 80090e2:	d02e      	beq.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80090e4:	4b64      	ldr	r3, [pc, #400]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80090e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090e8:	4a65      	ldr	r2, [pc, #404]	; (8009280 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80090ea:	4013      	ands	r3, r2
 80090ec:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80090ee:	4b62      	ldr	r3, [pc, #392]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80090f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80090f2:	4b61      	ldr	r3, [pc, #388]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80090f4:	2180      	movs	r1, #128	; 0x80
 80090f6:	0309      	lsls	r1, r1, #12
 80090f8:	430a      	orrs	r2, r1
 80090fa:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80090fc:	4b5e      	ldr	r3, [pc, #376]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80090fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009100:	4b5d      	ldr	r3, [pc, #372]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009102:	4960      	ldr	r1, [pc, #384]	; (8009284 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8009104:	400a      	ands	r2, r1
 8009106:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8009108:	4b5b      	ldr	r3, [pc, #364]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800910e:	68fa      	ldr	r2, [r7, #12]
 8009110:	2380      	movs	r3, #128	; 0x80
 8009112:	005b      	lsls	r3, r3, #1
 8009114:	4013      	ands	r3, r2
 8009116:	d014      	beq.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009118:	f7fd fe04 	bl	8006d24 <HAL_GetTick>
 800911c:	0003      	movs	r3, r0
 800911e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009120:	e009      	b.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009122:	f7fd fdff 	bl	8006d24 <HAL_GetTick>
 8009126:	0002      	movs	r2, r0
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	1ad3      	subs	r3, r2, r3
 800912c:	4a56      	ldr	r2, [pc, #344]	; (8009288 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d901      	bls.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8009132:	2303      	movs	r3, #3
 8009134:	e09b      	b.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009136:	4b50      	ldr	r3, [pc, #320]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009138:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800913a:	2380      	movs	r3, #128	; 0x80
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	4013      	ands	r3, r2
 8009140:	d0ef      	beq.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	685a      	ldr	r2, [r3, #4]
 8009146:	23c0      	movs	r3, #192	; 0xc0
 8009148:	029b      	lsls	r3, r3, #10
 800914a:	401a      	ands	r2, r3
 800914c:	23c0      	movs	r3, #192	; 0xc0
 800914e:	029b      	lsls	r3, r3, #10
 8009150:	429a      	cmp	r2, r3
 8009152:	d10c      	bne.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8009154:	4b48      	ldr	r3, [pc, #288]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a4c      	ldr	r2, [pc, #304]	; (800928c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800915a:	4013      	ands	r3, r2
 800915c:	0019      	movs	r1, r3
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	685a      	ldr	r2, [r3, #4]
 8009162:	23c0      	movs	r3, #192	; 0xc0
 8009164:	039b      	lsls	r3, r3, #14
 8009166:	401a      	ands	r2, r3
 8009168:	4b43      	ldr	r3, [pc, #268]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800916a:	430a      	orrs	r2, r1
 800916c:	601a      	str	r2, [r3, #0]
 800916e:	4b42      	ldr	r3, [pc, #264]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009170:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	685a      	ldr	r2, [r3, #4]
 8009176:	23c0      	movs	r3, #192	; 0xc0
 8009178:	029b      	lsls	r3, r3, #10
 800917a:	401a      	ands	r2, r3
 800917c:	4b3e      	ldr	r3, [pc, #248]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800917e:	430a      	orrs	r2, r1
 8009180:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009182:	2317      	movs	r3, #23
 8009184:	18fb      	adds	r3, r7, r3
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	2b01      	cmp	r3, #1
 800918a:	d105      	bne.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800918c:	4b3a      	ldr	r3, [pc, #232]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800918e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009190:	4b39      	ldr	r3, [pc, #228]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009192:	493f      	ldr	r1, [pc, #252]	; (8009290 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009194:	400a      	ands	r2, r1
 8009196:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	2201      	movs	r2, #1
 800919e:	4013      	ands	r3, r2
 80091a0:	d009      	beq.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80091a2:	4b35      	ldr	r3, [pc, #212]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80091a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091a6:	2203      	movs	r2, #3
 80091a8:	4393      	bics	r3, r2
 80091aa:	0019      	movs	r1, r3
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	68da      	ldr	r2, [r3, #12]
 80091b0:	4b31      	ldr	r3, [pc, #196]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80091b2:	430a      	orrs	r2, r1
 80091b4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	2202      	movs	r2, #2
 80091bc:	4013      	ands	r3, r2
 80091be:	d009      	beq.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80091c0:	4b2d      	ldr	r3, [pc, #180]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80091c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091c4:	220c      	movs	r2, #12
 80091c6:	4393      	bics	r3, r2
 80091c8:	0019      	movs	r1, r3
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	691a      	ldr	r2, [r3, #16]
 80091ce:	4b2a      	ldr	r3, [pc, #168]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80091d0:	430a      	orrs	r2, r1
 80091d2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2204      	movs	r2, #4
 80091da:	4013      	ands	r3, r2
 80091dc:	d009      	beq.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80091de:	4b26      	ldr	r3, [pc, #152]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80091e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091e2:	4a2c      	ldr	r2, [pc, #176]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80091e4:	4013      	ands	r3, r2
 80091e6:	0019      	movs	r1, r3
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	695a      	ldr	r2, [r3, #20]
 80091ec:	4b22      	ldr	r3, [pc, #136]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80091ee:	430a      	orrs	r2, r1
 80091f0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2208      	movs	r2, #8
 80091f8:	4013      	ands	r3, r2
 80091fa:	d009      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80091fc:	4b1e      	ldr	r3, [pc, #120]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80091fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009200:	4a25      	ldr	r2, [pc, #148]	; (8009298 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8009202:	4013      	ands	r3, r2
 8009204:	0019      	movs	r1, r3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	699a      	ldr	r2, [r3, #24]
 800920a:	4b1b      	ldr	r3, [pc, #108]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800920c:	430a      	orrs	r2, r1
 800920e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	2380      	movs	r3, #128	; 0x80
 8009216:	005b      	lsls	r3, r3, #1
 8009218:	4013      	ands	r3, r2
 800921a:	d009      	beq.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800921c:	4b16      	ldr	r3, [pc, #88]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800921e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009220:	4a17      	ldr	r2, [pc, #92]	; (8009280 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009222:	4013      	ands	r3, r2
 8009224:	0019      	movs	r1, r3
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	69da      	ldr	r2, [r3, #28]
 800922a:	4b13      	ldr	r3, [pc, #76]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800922c:	430a      	orrs	r2, r1
 800922e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2240      	movs	r2, #64	; 0x40
 8009236:	4013      	ands	r3, r2
 8009238:	d009      	beq.n	800924e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800923a:	4b0f      	ldr	r3, [pc, #60]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800923c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800923e:	4a17      	ldr	r2, [pc, #92]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8009240:	4013      	ands	r3, r2
 8009242:	0019      	movs	r1, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009248:	4b0b      	ldr	r3, [pc, #44]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800924a:	430a      	orrs	r2, r1
 800924c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2280      	movs	r2, #128	; 0x80
 8009254:	4013      	ands	r3, r2
 8009256:	d009      	beq.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8009258:	4b07      	ldr	r3, [pc, #28]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800925a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800925c:	4a10      	ldr	r2, [pc, #64]	; (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800925e:	4013      	ands	r3, r2
 8009260:	0019      	movs	r1, r3
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6a1a      	ldr	r2, [r3, #32]
 8009266:	4b04      	ldr	r3, [pc, #16]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009268:	430a      	orrs	r2, r1
 800926a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	0018      	movs	r0, r3
 8009270:	46bd      	mov	sp, r7
 8009272:	b006      	add	sp, #24
 8009274:	bd80      	pop	{r7, pc}
 8009276:	46c0      	nop			; (mov r8, r8)
 8009278:	40021000 	.word	0x40021000
 800927c:	40007000 	.word	0x40007000
 8009280:	fffcffff 	.word	0xfffcffff
 8009284:	fff7ffff 	.word	0xfff7ffff
 8009288:	00001388 	.word	0x00001388
 800928c:	ffcfffff 	.word	0xffcfffff
 8009290:	efffffff 	.word	0xefffffff
 8009294:	fffff3ff 	.word	0xfffff3ff
 8009298:	ffffcfff 	.word	0xffffcfff
 800929c:	fbffffff 	.word	0xfbffffff
 80092a0:	fff3ffff 	.word	0xfff3ffff

080092a4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d101      	bne.n	80092b6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	e08e      	b.n	80093d4 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2221      	movs	r2, #33	; 0x21
 80092ba:	5c9b      	ldrb	r3, [r3, r2]
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d107      	bne.n	80092d2 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2220      	movs	r2, #32
 80092c6:	2100      	movs	r1, #0
 80092c8:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	0018      	movs	r0, r3
 80092ce:	f7fb f9ad 	bl	800462c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2221      	movs	r2, #33	; 0x21
 80092d6:	2102      	movs	r1, #2
 80092d8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	22ca      	movs	r2, #202	; 0xca
 80092e0:	625a      	str	r2, [r3, #36]	; 0x24
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	2253      	movs	r2, #83	; 0x53
 80092e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	0018      	movs	r0, r3
 80092ee:	f000 fcf4 	bl	8009cda <RTC_EnterInitMode>
 80092f2:	1e03      	subs	r3, r0, #0
 80092f4:	d009      	beq.n	800930a <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	22ff      	movs	r2, #255	; 0xff
 80092fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2221      	movs	r2, #33	; 0x21
 8009302:	2104      	movs	r1, #4
 8009304:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009306:	2301      	movs	r3, #1
 8009308:	e064      	b.n	80093d4 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	689a      	ldr	r2, [r3, #8]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4931      	ldr	r1, [pc, #196]	; (80093dc <HAL_RTC_Init+0x138>)
 8009316:	400a      	ands	r2, r1
 8009318:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	6899      	ldr	r1, [r3, #8]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	685a      	ldr	r2, [r3, #4]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	691b      	ldr	r3, [r3, #16]
 8009328:	431a      	orrs	r2, r3
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	699b      	ldr	r3, [r3, #24]
 800932e:	431a      	orrs	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	430a      	orrs	r2, r1
 8009336:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	68d2      	ldr	r2, [r2, #12]
 8009340:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	6919      	ldr	r1, [r3, #16]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	041a      	lsls	r2, r3, #16
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	430a      	orrs	r2, r1
 8009354:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	68da      	ldr	r2, [r3, #12]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2180      	movs	r1, #128	; 0x80
 8009362:	438a      	bics	r2, r1
 8009364:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2103      	movs	r1, #3
 8009372:	438a      	bics	r2, r1
 8009374:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	69da      	ldr	r2, [r3, #28]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	695b      	ldr	r3, [r3, #20]
 8009384:	431a      	orrs	r2, r3
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	430a      	orrs	r2, r1
 800938c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	2220      	movs	r2, #32
 8009396:	4013      	ands	r3, r2
 8009398:	d113      	bne.n	80093c2 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	0018      	movs	r0, r3
 800939e:	f000 fc75 	bl	8009c8c <HAL_RTC_WaitForSynchro>
 80093a2:	1e03      	subs	r3, r0, #0
 80093a4:	d00d      	beq.n	80093c2 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	22ff      	movs	r2, #255	; 0xff
 80093ac:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2221      	movs	r2, #33	; 0x21
 80093b2:	2104      	movs	r1, #4
 80093b4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2220      	movs	r2, #32
 80093ba:	2100      	movs	r1, #0
 80093bc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80093be:	2301      	movs	r3, #1
 80093c0:	e008      	b.n	80093d4 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	22ff      	movs	r2, #255	; 0xff
 80093c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2221      	movs	r2, #33	; 0x21
 80093ce:	2101      	movs	r1, #1
 80093d0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80093d2:	2300      	movs	r3, #0
  }
}
 80093d4:	0018      	movs	r0, r3
 80093d6:	46bd      	mov	sp, r7
 80093d8:	b002      	add	sp, #8
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	ff8fffbf 	.word	0xff8fffbf

080093e0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80093e0:	b590      	push	{r4, r7, lr}
 80093e2:	b087      	sub	sp, #28
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	60b9      	str	r1, [r7, #8]
 80093ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2220      	movs	r2, #32
 80093f0:	5c9b      	ldrb	r3, [r3, r2]
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d101      	bne.n	80093fa <HAL_RTC_SetTime+0x1a>
 80093f6:	2302      	movs	r3, #2
 80093f8:	e0ad      	b.n	8009556 <HAL_RTC_SetTime+0x176>
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2220      	movs	r2, #32
 80093fe:	2101      	movs	r1, #1
 8009400:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2221      	movs	r2, #33	; 0x21
 8009406:	2102      	movs	r1, #2
 8009408:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d125      	bne.n	800945c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	2240      	movs	r2, #64	; 0x40
 8009418:	4013      	ands	r3, r2
 800941a:	d102      	bne.n	8009422 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	2200      	movs	r2, #0
 8009420:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	0018      	movs	r0, r3
 8009428:	f000 fc81 	bl	8009d2e <RTC_ByteToBcd2>
 800942c:	0003      	movs	r3, r0
 800942e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	785b      	ldrb	r3, [r3, #1]
 8009434:	0018      	movs	r0, r3
 8009436:	f000 fc7a 	bl	8009d2e <RTC_ByteToBcd2>
 800943a:	0003      	movs	r3, r0
 800943c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800943e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	789b      	ldrb	r3, [r3, #2]
 8009444:	0018      	movs	r0, r3
 8009446:	f000 fc72 	bl	8009d2e <RTC_ByteToBcd2>
 800944a:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800944c:	0022      	movs	r2, r4
 800944e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	78db      	ldrb	r3, [r3, #3]
 8009454:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009456:	4313      	orrs	r3, r2
 8009458:	617b      	str	r3, [r7, #20]
 800945a:	e017      	b.n	800948c <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	2240      	movs	r2, #64	; 0x40
 8009464:	4013      	ands	r3, r2
 8009466:	d102      	bne.n	800946e <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	2200      	movs	r2, #0
 800946c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	785b      	ldrb	r3, [r3, #1]
 8009478:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800947a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800947c:	68ba      	ldr	r2, [r7, #8]
 800947e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009480:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	78db      	ldrb	r3, [r3, #3]
 8009486:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009488:	4313      	orrs	r3, r2
 800948a:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	22ca      	movs	r2, #202	; 0xca
 8009492:	625a      	str	r2, [r3, #36]	; 0x24
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2253      	movs	r2, #83	; 0x53
 800949a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	0018      	movs	r0, r3
 80094a0:	f000 fc1b 	bl	8009cda <RTC_EnterInitMode>
 80094a4:	1e03      	subs	r3, r0, #0
 80094a6:	d00d      	beq.n	80094c4 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	22ff      	movs	r2, #255	; 0xff
 80094ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2221      	movs	r2, #33	; 0x21
 80094b4:	2104      	movs	r1, #4
 80094b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2220      	movs	r2, #32
 80094bc:	2100      	movs	r1, #0
 80094be:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80094c0:	2301      	movs	r3, #1
 80094c2:	e048      	b.n	8009556 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	697a      	ldr	r2, [r7, #20]
 80094ca:	4925      	ldr	r1, [pc, #148]	; (8009560 <HAL_RTC_SetTime+0x180>)
 80094cc:	400a      	ands	r2, r1
 80094ce:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	689a      	ldr	r2, [r3, #8]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4922      	ldr	r1, [pc, #136]	; (8009564 <HAL_RTC_SetTime+0x184>)
 80094dc:	400a      	ands	r2, r1
 80094de:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	6899      	ldr	r1, [r3, #8]
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	68da      	ldr	r2, [r3, #12]
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	431a      	orrs	r2, r3
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	430a      	orrs	r2, r1
 80094f6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	68da      	ldr	r2, [r3, #12]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2180      	movs	r1, #128	; 0x80
 8009504:	438a      	bics	r2, r1
 8009506:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	2220      	movs	r2, #32
 8009510:	4013      	ands	r3, r2
 8009512:	d113      	bne.n	800953c <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	0018      	movs	r0, r3
 8009518:	f000 fbb8 	bl	8009c8c <HAL_RTC_WaitForSynchro>
 800951c:	1e03      	subs	r3, r0, #0
 800951e:	d00d      	beq.n	800953c <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	22ff      	movs	r2, #255	; 0xff
 8009526:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2221      	movs	r2, #33	; 0x21
 800952c:	2104      	movs	r1, #4
 800952e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2220      	movs	r2, #32
 8009534:	2100      	movs	r1, #0
 8009536:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009538:	2301      	movs	r3, #1
 800953a:	e00c      	b.n	8009556 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	22ff      	movs	r2, #255	; 0xff
 8009542:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2221      	movs	r2, #33	; 0x21
 8009548:	2101      	movs	r1, #1
 800954a:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2220      	movs	r2, #32
 8009550:	2100      	movs	r1, #0
 8009552:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009554:	2300      	movs	r3, #0
  }
}
 8009556:	0018      	movs	r0, r3
 8009558:	46bd      	mov	sp, r7
 800955a:	b007      	add	sp, #28
 800955c:	bd90      	pop	{r4, r7, pc}
 800955e:	46c0      	nop			; (mov r8, r8)
 8009560:	007f7f7f 	.word	0x007f7f7f
 8009564:	fffbffff 	.word	0xfffbffff

08009568 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b086      	sub	sp, #24
 800956c:	af00      	add	r7, sp, #0
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	60b9      	str	r1, [r7, #8]
 8009572:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	691b      	ldr	r3, [r3, #16]
 8009584:	045b      	lsls	r3, r3, #17
 8009586:	0c5a      	lsrs	r2, r3, #17
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a22      	ldr	r2, [pc, #136]	; (800961c <HAL_RTC_GetTime+0xb4>)
 8009594:	4013      	ands	r3, r2
 8009596:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	0c1b      	lsrs	r3, r3, #16
 800959c:	b2db      	uxtb	r3, r3
 800959e:	223f      	movs	r2, #63	; 0x3f
 80095a0:	4013      	ands	r3, r2
 80095a2:	b2da      	uxtb	r2, r3
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	0a1b      	lsrs	r3, r3, #8
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	227f      	movs	r2, #127	; 0x7f
 80095b0:	4013      	ands	r3, r2
 80095b2:	b2da      	uxtb	r2, r3
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	227f      	movs	r2, #127	; 0x7f
 80095be:	4013      	ands	r3, r2
 80095c0:	b2da      	uxtb	r2, r3
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	0c1b      	lsrs	r3, r3, #16
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	2240      	movs	r2, #64	; 0x40
 80095ce:	4013      	ands	r3, r2
 80095d0:	b2da      	uxtb	r2, r3
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d11a      	bne.n	8009612 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	0018      	movs	r0, r3
 80095e2:	f000 fbcd 	bl	8009d80 <RTC_Bcd2ToByte>
 80095e6:	0003      	movs	r3, r0
 80095e8:	001a      	movs	r2, r3
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	785b      	ldrb	r3, [r3, #1]
 80095f2:	0018      	movs	r0, r3
 80095f4:	f000 fbc4 	bl	8009d80 <RTC_Bcd2ToByte>
 80095f8:	0003      	movs	r3, r0
 80095fa:	001a      	movs	r2, r3
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	789b      	ldrb	r3, [r3, #2]
 8009604:	0018      	movs	r0, r3
 8009606:	f000 fbbb 	bl	8009d80 <RTC_Bcd2ToByte>
 800960a:	0003      	movs	r3, r0
 800960c:	001a      	movs	r2, r3
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009612:	2300      	movs	r3, #0
}
 8009614:	0018      	movs	r0, r3
 8009616:	46bd      	mov	sp, r7
 8009618:	b006      	add	sp, #24
 800961a:	bd80      	pop	{r7, pc}
 800961c:	007f7f7f 	.word	0x007f7f7f

08009620 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009620:	b590      	push	{r4, r7, lr}
 8009622:	b087      	sub	sp, #28
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2220      	movs	r2, #32
 8009630:	5c9b      	ldrb	r3, [r3, r2]
 8009632:	2b01      	cmp	r3, #1
 8009634:	d101      	bne.n	800963a <HAL_RTC_SetDate+0x1a>
 8009636:	2302      	movs	r3, #2
 8009638:	e099      	b.n	800976e <HAL_RTC_SetDate+0x14e>
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2220      	movs	r2, #32
 800963e:	2101      	movs	r1, #1
 8009640:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2221      	movs	r2, #33	; 0x21
 8009646:	2102      	movs	r1, #2
 8009648:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d10e      	bne.n	800966e <HAL_RTC_SetDate+0x4e>
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	785b      	ldrb	r3, [r3, #1]
 8009654:	001a      	movs	r2, r3
 8009656:	2310      	movs	r3, #16
 8009658:	4013      	ands	r3, r2
 800965a:	d008      	beq.n	800966e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	785b      	ldrb	r3, [r3, #1]
 8009660:	2210      	movs	r2, #16
 8009662:	4393      	bics	r3, r2
 8009664:	b2db      	uxtb	r3, r3
 8009666:	330a      	adds	r3, #10
 8009668:	b2da      	uxtb	r2, r3
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d11c      	bne.n	80096ae <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	78db      	ldrb	r3, [r3, #3]
 8009678:	0018      	movs	r0, r3
 800967a:	f000 fb58 	bl	8009d2e <RTC_ByteToBcd2>
 800967e:	0003      	movs	r3, r0
 8009680:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	785b      	ldrb	r3, [r3, #1]
 8009686:	0018      	movs	r0, r3
 8009688:	f000 fb51 	bl	8009d2e <RTC_ByteToBcd2>
 800968c:	0003      	movs	r3, r0
 800968e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009690:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	789b      	ldrb	r3, [r3, #2]
 8009696:	0018      	movs	r0, r3
 8009698:	f000 fb49 	bl	8009d2e <RTC_ByteToBcd2>
 800969c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800969e:	0022      	movs	r2, r4
 80096a0:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80096a8:	4313      	orrs	r3, r2
 80096aa:	617b      	str	r3, [r7, #20]
 80096ac:	e00e      	b.n	80096cc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	78db      	ldrb	r3, [r3, #3]
 80096b2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	785b      	ldrb	r3, [r3, #1]
 80096b8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80096ba:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80096bc:	68ba      	ldr	r2, [r7, #8]
 80096be:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80096c0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80096c8:	4313      	orrs	r3, r2
 80096ca:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	22ca      	movs	r2, #202	; 0xca
 80096d2:	625a      	str	r2, [r3, #36]	; 0x24
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	2253      	movs	r2, #83	; 0x53
 80096da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	0018      	movs	r0, r3
 80096e0:	f000 fafb 	bl	8009cda <RTC_EnterInitMode>
 80096e4:	1e03      	subs	r3, r0, #0
 80096e6:	d00d      	beq.n	8009704 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	22ff      	movs	r2, #255	; 0xff
 80096ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2221      	movs	r2, #33	; 0x21
 80096f4:	2104      	movs	r1, #4
 80096f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2220      	movs	r2, #32
 80096fc:	2100      	movs	r1, #0
 80096fe:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	e034      	b.n	800976e <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	697a      	ldr	r2, [r7, #20]
 800970a:	491b      	ldr	r1, [pc, #108]	; (8009778 <HAL_RTC_SetDate+0x158>)
 800970c:	400a      	ands	r2, r1
 800970e:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	68da      	ldr	r2, [r3, #12]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	2180      	movs	r1, #128	; 0x80
 800971c:	438a      	bics	r2, r1
 800971e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	2220      	movs	r2, #32
 8009728:	4013      	ands	r3, r2
 800972a:	d113      	bne.n	8009754 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	0018      	movs	r0, r3
 8009730:	f000 faac 	bl	8009c8c <HAL_RTC_WaitForSynchro>
 8009734:	1e03      	subs	r3, r0, #0
 8009736:	d00d      	beq.n	8009754 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	22ff      	movs	r2, #255	; 0xff
 800973e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2221      	movs	r2, #33	; 0x21
 8009744:	2104      	movs	r1, #4
 8009746:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2220      	movs	r2, #32
 800974c:	2100      	movs	r1, #0
 800974e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	e00c      	b.n	800976e <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	22ff      	movs	r2, #255	; 0xff
 800975a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2221      	movs	r2, #33	; 0x21
 8009760:	2101      	movs	r1, #1
 8009762:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2220      	movs	r2, #32
 8009768:	2100      	movs	r1, #0
 800976a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800976c:	2300      	movs	r3, #0
  }
}
 800976e:	0018      	movs	r0, r3
 8009770:	46bd      	mov	sp, r7
 8009772:	b007      	add	sp, #28
 8009774:	bd90      	pop	{r4, r7, pc}
 8009776:	46c0      	nop			; (mov r8, r8)
 8009778:	00ffff3f 	.word	0x00ffff3f

0800977c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b086      	sub	sp, #24
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	4a21      	ldr	r2, [pc, #132]	; (8009814 <HAL_RTC_GetDate+0x98>)
 8009790:	4013      	ands	r3, r2
 8009792:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	0c1b      	lsrs	r3, r3, #16
 8009798:	b2da      	uxtb	r2, r3
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	0a1b      	lsrs	r3, r3, #8
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	221f      	movs	r2, #31
 80097a6:	4013      	ands	r3, r2
 80097a8:	b2da      	uxtb	r2, r3
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	223f      	movs	r2, #63	; 0x3f
 80097b4:	4013      	ands	r3, r2
 80097b6:	b2da      	uxtb	r2, r3
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	0b5b      	lsrs	r3, r3, #13
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	2207      	movs	r2, #7
 80097c4:	4013      	ands	r3, r2
 80097c6:	b2da      	uxtb	r2, r3
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d11a      	bne.n	8009808 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	78db      	ldrb	r3, [r3, #3]
 80097d6:	0018      	movs	r0, r3
 80097d8:	f000 fad2 	bl	8009d80 <RTC_Bcd2ToByte>
 80097dc:	0003      	movs	r3, r0
 80097de:	001a      	movs	r2, r3
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	785b      	ldrb	r3, [r3, #1]
 80097e8:	0018      	movs	r0, r3
 80097ea:	f000 fac9 	bl	8009d80 <RTC_Bcd2ToByte>
 80097ee:	0003      	movs	r3, r0
 80097f0:	001a      	movs	r2, r3
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	789b      	ldrb	r3, [r3, #2]
 80097fa:	0018      	movs	r0, r3
 80097fc:	f000 fac0 	bl	8009d80 <RTC_Bcd2ToByte>
 8009800:	0003      	movs	r3, r0
 8009802:	001a      	movs	r2, r3
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009808:	2300      	movs	r3, #0
}
 800980a:	0018      	movs	r0, r3
 800980c:	46bd      	mov	sp, r7
 800980e:	b006      	add	sp, #24
 8009810:	bd80      	pop	{r7, pc}
 8009812:	46c0      	nop			; (mov r8, r8)
 8009814:	00ffff3f 	.word	0x00ffff3f

08009818 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009818:	b590      	push	{r4, r7, lr}
 800981a:	b089      	sub	sp, #36	; 0x24
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2220      	movs	r2, #32
 8009828:	5c9b      	ldrb	r3, [r3, r2]
 800982a:	2b01      	cmp	r3, #1
 800982c:	d101      	bne.n	8009832 <HAL_RTC_SetAlarm_IT+0x1a>
 800982e:	2302      	movs	r3, #2
 8009830:	e130      	b.n	8009a94 <HAL_RTC_SetAlarm_IT+0x27c>
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2220      	movs	r2, #32
 8009836:	2101      	movs	r1, #1
 8009838:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2221      	movs	r2, #33	; 0x21
 800983e:	2102      	movs	r1, #2
 8009840:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d136      	bne.n	80098b6 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	2240      	movs	r2, #64	; 0x40
 8009850:	4013      	ands	r3, r2
 8009852:	d102      	bne.n	800985a <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	2200      	movs	r2, #0
 8009858:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	0018      	movs	r0, r3
 8009860:	f000 fa65 	bl	8009d2e <RTC_ByteToBcd2>
 8009864:	0003      	movs	r3, r0
 8009866:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	785b      	ldrb	r3, [r3, #1]
 800986c:	0018      	movs	r0, r3
 800986e:	f000 fa5e 	bl	8009d2e <RTC_ByteToBcd2>
 8009872:	0003      	movs	r3, r0
 8009874:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8009876:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	789b      	ldrb	r3, [r3, #2]
 800987c:	0018      	movs	r0, r3
 800987e:	f000 fa56 	bl	8009d2e <RTC_ByteToBcd2>
 8009882:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8009884:	0022      	movs	r2, r4
 8009886:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	78db      	ldrb	r3, [r3, #3]
 800988c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800988e:	431a      	orrs	r2, r3
 8009890:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	2220      	movs	r2, #32
 8009896:	5c9b      	ldrb	r3, [r3, r2]
 8009898:	0018      	movs	r0, r3
 800989a:	f000 fa48 	bl	8009d2e <RTC_ByteToBcd2>
 800989e:	0003      	movs	r3, r0
 80098a0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80098a2:	0022      	movs	r2, r4
 80098a4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80098aa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80098b0:	4313      	orrs	r3, r2
 80098b2:	61fb      	str	r3, [r7, #28]
 80098b4:	e022      	b.n	80098fc <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	2240      	movs	r2, #64	; 0x40
 80098be:	4013      	ands	r3, r2
 80098c0:	d102      	bne.n	80098c8 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	2200      	movs	r2, #0
 80098c6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	785b      	ldrb	r3, [r3, #1]
 80098d2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80098d4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80098d6:	68ba      	ldr	r2, [r7, #8]
 80098d8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80098da:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	78db      	ldrb	r3, [r3, #3]
 80098e0:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80098e2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	2120      	movs	r1, #32
 80098e8:	5c5b      	ldrb	r3, [r3, r1]
 80098ea:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80098ec:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80098f2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80098f8:	4313      	orrs	r3, r2
 80098fa:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	685a      	ldr	r2, [r3, #4]
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	699b      	ldr	r3, [r3, #24]
 8009904:	4313      	orrs	r3, r2
 8009906:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	22ca      	movs	r2, #202	; 0xca
 800990e:	625a      	str	r2, [r3, #36]	; 0x24
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2253      	movs	r2, #83	; 0x53
 8009916:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800991c:	2380      	movs	r3, #128	; 0x80
 800991e:	005b      	lsls	r3, r3, #1
 8009920:	429a      	cmp	r2, r3
 8009922:	d14e      	bne.n	80099c2 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	689a      	ldr	r2, [r3, #8]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	495b      	ldr	r1, [pc, #364]	; (8009a9c <HAL_RTC_SetAlarm_IT+0x284>)
 8009930:	400a      	ands	r2, r1
 8009932:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	22ff      	movs	r2, #255	; 0xff
 800993c:	401a      	ands	r2, r3
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4957      	ldr	r1, [pc, #348]	; (8009aa0 <HAL_RTC_SetAlarm_IT+0x288>)
 8009944:	430a      	orrs	r2, r1
 8009946:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009948:	f7fd f9ec 	bl	8006d24 <HAL_GetTick>
 800994c:	0003      	movs	r3, r0
 800994e:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009950:	e016      	b.n	8009980 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009952:	f7fd f9e7 	bl	8006d24 <HAL_GetTick>
 8009956:	0002      	movs	r2, r0
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	1ad2      	subs	r2, r2, r3
 800995c:	23fa      	movs	r3, #250	; 0xfa
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	429a      	cmp	r2, r3
 8009962:	d90d      	bls.n	8009980 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	22ff      	movs	r2, #255	; 0xff
 800996a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2221      	movs	r2, #33	; 0x21
 8009970:	2103      	movs	r1, #3
 8009972:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2220      	movs	r2, #32
 8009978:	2100      	movs	r1, #0
 800997a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800997c:	2303      	movs	r3, #3
 800997e:	e089      	b.n	8009a94 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	68db      	ldr	r3, [r3, #12]
 8009986:	2201      	movs	r2, #1
 8009988:	4013      	ands	r3, r2
 800998a:	d0e2      	beq.n	8009952 <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	69fa      	ldr	r2, [r7, #28]
 8009992:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	69ba      	ldr	r2, [r7, #24]
 800999a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	689a      	ldr	r2, [r3, #8]
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2180      	movs	r1, #128	; 0x80
 80099a8:	0049      	lsls	r1, r1, #1
 80099aa:	430a      	orrs	r2, r1
 80099ac:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	689a      	ldr	r2, [r3, #8]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2180      	movs	r1, #128	; 0x80
 80099ba:	0149      	lsls	r1, r1, #5
 80099bc:	430a      	orrs	r2, r1
 80099be:	609a      	str	r2, [r3, #8]
 80099c0:	e04d      	b.n	8009a5e <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	689a      	ldr	r2, [r3, #8]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4935      	ldr	r1, [pc, #212]	; (8009aa4 <HAL_RTC_SetAlarm_IT+0x28c>)
 80099ce:	400a      	ands	r2, r1
 80099d0:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	22ff      	movs	r2, #255	; 0xff
 80099da:	401a      	ands	r2, r3
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4931      	ldr	r1, [pc, #196]	; (8009aa8 <HAL_RTC_SetAlarm_IT+0x290>)
 80099e2:	430a      	orrs	r2, r1
 80099e4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80099e6:	f7fd f99d 	bl	8006d24 <HAL_GetTick>
 80099ea:	0003      	movs	r3, r0
 80099ec:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80099ee:	e016      	b.n	8009a1e <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80099f0:	f7fd f998 	bl	8006d24 <HAL_GetTick>
 80099f4:	0002      	movs	r2, r0
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	1ad2      	subs	r2, r2, r3
 80099fa:	23fa      	movs	r3, #250	; 0xfa
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d90d      	bls.n	8009a1e <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	22ff      	movs	r2, #255	; 0xff
 8009a08:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2221      	movs	r2, #33	; 0x21
 8009a0e:	2103      	movs	r1, #3
 8009a10:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2220      	movs	r2, #32
 8009a16:	2100      	movs	r1, #0
 8009a18:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009a1a:	2303      	movs	r3, #3
 8009a1c:	e03a      	b.n	8009a94 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	2202      	movs	r2, #2
 8009a26:	4013      	ands	r3, r2
 8009a28:	d0e2      	beq.n	80099f0 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	69fa      	ldr	r2, [r7, #28]
 8009a30:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	69ba      	ldr	r2, [r7, #24]
 8009a38:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	689a      	ldr	r2, [r3, #8]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	2180      	movs	r1, #128	; 0x80
 8009a46:	0089      	lsls	r1, r1, #2
 8009a48:	430a      	orrs	r2, r1
 8009a4a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	689a      	ldr	r2, [r3, #8]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2180      	movs	r1, #128	; 0x80
 8009a58:	0189      	lsls	r1, r1, #6
 8009a5a:	430a      	orrs	r2, r1
 8009a5c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8009a5e:	4b13      	ldr	r3, [pc, #76]	; (8009aac <HAL_RTC_SetAlarm_IT+0x294>)
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	4b12      	ldr	r3, [pc, #72]	; (8009aac <HAL_RTC_SetAlarm_IT+0x294>)
 8009a64:	2180      	movs	r1, #128	; 0x80
 8009a66:	0289      	lsls	r1, r1, #10
 8009a68:	430a      	orrs	r2, r1
 8009a6a:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8009a6c:	4b0f      	ldr	r3, [pc, #60]	; (8009aac <HAL_RTC_SetAlarm_IT+0x294>)
 8009a6e:	689a      	ldr	r2, [r3, #8]
 8009a70:	4b0e      	ldr	r3, [pc, #56]	; (8009aac <HAL_RTC_SetAlarm_IT+0x294>)
 8009a72:	2180      	movs	r1, #128	; 0x80
 8009a74:	0289      	lsls	r1, r1, #10
 8009a76:	430a      	orrs	r2, r1
 8009a78:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	22ff      	movs	r2, #255	; 0xff
 8009a80:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2221      	movs	r2, #33	; 0x21
 8009a86:	2101      	movs	r1, #1
 8009a88:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2220      	movs	r2, #32
 8009a8e:	2100      	movs	r1, #0
 8009a90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	0018      	movs	r0, r3
 8009a96:	46bd      	mov	sp, r7
 8009a98:	b009      	add	sp, #36	; 0x24
 8009a9a:	bd90      	pop	{r4, r7, pc}
 8009a9c:	fffffeff 	.word	0xfffffeff
 8009aa0:	fffffe7f 	.word	0xfffffe7f
 8009aa4:	fffffdff 	.word	0xfffffdff
 8009aa8:	fffffd7f 	.word	0xfffffd7f
 8009aac:	40010400 	.word	0x40010400

08009ab0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2220      	movs	r2, #32
 8009abe:	5c9b      	ldrb	r3, [r3, r2]
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d101      	bne.n	8009ac8 <HAL_RTC_DeactivateAlarm+0x18>
 8009ac4:	2302      	movs	r3, #2
 8009ac6:	e086      	b.n	8009bd6 <HAL_RTC_DeactivateAlarm+0x126>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2220      	movs	r2, #32
 8009acc:	2101      	movs	r1, #1
 8009ace:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2221      	movs	r2, #33	; 0x21
 8009ad4:	2102      	movs	r1, #2
 8009ad6:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	22ca      	movs	r2, #202	; 0xca
 8009ade:	625a      	str	r2, [r3, #36]	; 0x24
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2253      	movs	r2, #83	; 0x53
 8009ae6:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8009ae8:	683a      	ldr	r2, [r7, #0]
 8009aea:	2380      	movs	r3, #128	; 0x80
 8009aec:	005b      	lsls	r3, r3, #1
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d132      	bne.n	8009b58 <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	689a      	ldr	r2, [r3, #8]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4938      	ldr	r1, [pc, #224]	; (8009be0 <HAL_RTC_DeactivateAlarm+0x130>)
 8009afe:	400a      	ands	r2, r1
 8009b00:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	689a      	ldr	r2, [r3, #8]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4935      	ldr	r1, [pc, #212]	; (8009be4 <HAL_RTC_DeactivateAlarm+0x134>)
 8009b0e:	400a      	ands	r2, r1
 8009b10:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8009b12:	f7fd f907 	bl	8006d24 <HAL_GetTick>
 8009b16:	0003      	movs	r3, r0
 8009b18:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009b1a:	e016      	b.n	8009b4a <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009b1c:	f7fd f902 	bl	8006d24 <HAL_GetTick>
 8009b20:	0002      	movs	r2, r0
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	1ad2      	subs	r2, r2, r3
 8009b26:	23fa      	movs	r3, #250	; 0xfa
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d90d      	bls.n	8009b4a <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	22ff      	movs	r2, #255	; 0xff
 8009b34:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2221      	movs	r2, #33	; 0x21
 8009b3a:	2103      	movs	r1, #3
 8009b3c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2220      	movs	r2, #32
 8009b42:	2100      	movs	r1, #0
 8009b44:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009b46:	2303      	movs	r3, #3
 8009b48:	e045      	b.n	8009bd6 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	2201      	movs	r2, #1
 8009b52:	4013      	ands	r3, r2
 8009b54:	d0e2      	beq.n	8009b1c <HAL_RTC_DeactivateAlarm+0x6c>
 8009b56:	e031      	b.n	8009bbc <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	689a      	ldr	r2, [r3, #8]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4921      	ldr	r1, [pc, #132]	; (8009be8 <HAL_RTC_DeactivateAlarm+0x138>)
 8009b64:	400a      	ands	r2, r1
 8009b66:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	689a      	ldr	r2, [r3, #8]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	491e      	ldr	r1, [pc, #120]	; (8009bec <HAL_RTC_DeactivateAlarm+0x13c>)
 8009b74:	400a      	ands	r2, r1
 8009b76:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8009b78:	f7fd f8d4 	bl	8006d24 <HAL_GetTick>
 8009b7c:	0003      	movs	r3, r0
 8009b7e:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009b80:	e016      	b.n	8009bb0 <HAL_RTC_DeactivateAlarm+0x100>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009b82:	f7fd f8cf 	bl	8006d24 <HAL_GetTick>
 8009b86:	0002      	movs	r2, r0
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	1ad2      	subs	r2, r2, r3
 8009b8c:	23fa      	movs	r3, #250	; 0xfa
 8009b8e:	009b      	lsls	r3, r3, #2
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d90d      	bls.n	8009bb0 <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	22ff      	movs	r2, #255	; 0xff
 8009b9a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2221      	movs	r2, #33	; 0x21
 8009ba0:	2103      	movs	r1, #3
 8009ba2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2220      	movs	r2, #32
 8009ba8:	2100      	movs	r1, #0
 8009baa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009bac:	2303      	movs	r3, #3
 8009bae:	e012      	b.n	8009bd6 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	2202      	movs	r2, #2
 8009bb8:	4013      	ands	r3, r2
 8009bba:	d0e2      	beq.n	8009b82 <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	22ff      	movs	r2, #255	; 0xff
 8009bc2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2221      	movs	r2, #33	; 0x21
 8009bc8:	2101      	movs	r1, #1
 8009bca:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2220      	movs	r2, #32
 8009bd0:	2100      	movs	r1, #0
 8009bd2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009bd4:	2300      	movs	r3, #0
}
 8009bd6:	0018      	movs	r0, r3
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	b004      	add	sp, #16
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	46c0      	nop			; (mov r8, r8)
 8009be0:	fffffeff 	.word	0xfffffeff
 8009be4:	ffffefff 	.word	0xffffefff
 8009be8:	fffffdff 	.word	0xfffffdff
 8009bec:	ffffdfff 	.word	0xffffdfff

08009bf0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	689a      	ldr	r2, [r3, #8]
 8009bfe:	2380      	movs	r3, #128	; 0x80
 8009c00:	015b      	lsls	r3, r3, #5
 8009c02:	4013      	ands	r3, r2
 8009c04:	d014      	beq.n	8009c30 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	68da      	ldr	r2, [r3, #12]
 8009c0c:	2380      	movs	r3, #128	; 0x80
 8009c0e:	005b      	lsls	r3, r3, #1
 8009c10:	4013      	ands	r3, r2
 8009c12:	d00d      	beq.n	8009c30 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	0018      	movs	r0, r3
 8009c18:	f7f9 fc78 	bl	800350c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	22ff      	movs	r2, #255	; 0xff
 8009c24:	401a      	ands	r2, r3
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4915      	ldr	r1, [pc, #84]	; (8009c80 <HAL_RTC_AlarmIRQHandler+0x90>)
 8009c2c:	430a      	orrs	r2, r1
 8009c2e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	689a      	ldr	r2, [r3, #8]
 8009c36:	2380      	movs	r3, #128	; 0x80
 8009c38:	019b      	lsls	r3, r3, #6
 8009c3a:	4013      	ands	r3, r2
 8009c3c:	d014      	beq.n	8009c68 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	68da      	ldr	r2, [r3, #12]
 8009c44:	2380      	movs	r3, #128	; 0x80
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	4013      	ands	r3, r2
 8009c4a:	d00d      	beq.n	8009c68 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	0018      	movs	r0, r3
 8009c50:	f7f9 fc74 	bl	800353c <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	22ff      	movs	r2, #255	; 0xff
 8009c5c:	401a      	ands	r2, r3
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4908      	ldr	r1, [pc, #32]	; (8009c84 <HAL_RTC_AlarmIRQHandler+0x94>)
 8009c64:	430a      	orrs	r2, r1
 8009c66:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8009c68:	4b07      	ldr	r3, [pc, #28]	; (8009c88 <HAL_RTC_AlarmIRQHandler+0x98>)
 8009c6a:	2280      	movs	r2, #128	; 0x80
 8009c6c:	0292      	lsls	r2, r2, #10
 8009c6e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2221      	movs	r2, #33	; 0x21
 8009c74:	2101      	movs	r1, #1
 8009c76:	5499      	strb	r1, [r3, r2]
}
 8009c78:	46c0      	nop			; (mov r8, r8)
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	b002      	add	sp, #8
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	fffffe7f 	.word	0xfffffe7f
 8009c84:	fffffd7f 	.word	0xfffffd7f
 8009c88:	40010400 	.word	0x40010400

08009c8c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	68da      	ldr	r2, [r3, #12]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	21a0      	movs	r1, #160	; 0xa0
 8009ca0:	438a      	bics	r2, r1
 8009ca2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009ca4:	f7fd f83e 	bl	8006d24 <HAL_GetTick>
 8009ca8:	0003      	movs	r3, r0
 8009caa:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009cac:	e00a      	b.n	8009cc4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009cae:	f7fd f839 	bl	8006d24 <HAL_GetTick>
 8009cb2:	0002      	movs	r2, r0
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	1ad2      	subs	r2, r2, r3
 8009cb8:	23fa      	movs	r3, #250	; 0xfa
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d901      	bls.n	8009cc4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009cc0:	2303      	movs	r3, #3
 8009cc2:	e006      	b.n	8009cd2 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	2220      	movs	r2, #32
 8009ccc:	4013      	ands	r3, r2
 8009cce:	d0ee      	beq.n	8009cae <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8009cd0:	2300      	movs	r3, #0
}
 8009cd2:	0018      	movs	r0, r3
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	b004      	add	sp, #16
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b084      	sub	sp, #16
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	2240      	movs	r2, #64	; 0x40
 8009cea:	4013      	ands	r3, r2
 8009cec:	d11a      	bne.n	8009d24 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	4252      	negs	r2, r2
 8009cf6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009cf8:	f7fd f814 	bl	8006d24 <HAL_GetTick>
 8009cfc:	0003      	movs	r3, r0
 8009cfe:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009d00:	e00a      	b.n	8009d18 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009d02:	f7fd f80f 	bl	8006d24 <HAL_GetTick>
 8009d06:	0002      	movs	r2, r0
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	1ad2      	subs	r2, r2, r3
 8009d0c:	23fa      	movs	r3, #250	; 0xfa
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d901      	bls.n	8009d18 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8009d14:	2303      	movs	r3, #3
 8009d16:	e006      	b.n	8009d26 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	68db      	ldr	r3, [r3, #12]
 8009d1e:	2240      	movs	r2, #64	; 0x40
 8009d20:	4013      	ands	r3, r2
 8009d22:	d0ee      	beq.n	8009d02 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	0018      	movs	r0, r3
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	b004      	add	sp, #16
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b084      	sub	sp, #16
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	0002      	movs	r2, r0
 8009d36:	1dfb      	adds	r3, r7, #7
 8009d38:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8009d3e:	230b      	movs	r3, #11
 8009d40:	18fb      	adds	r3, r7, r3
 8009d42:	1dfa      	adds	r2, r7, #7
 8009d44:	7812      	ldrb	r2, [r2, #0]
 8009d46:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8009d48:	e008      	b.n	8009d5c <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8009d50:	220b      	movs	r2, #11
 8009d52:	18bb      	adds	r3, r7, r2
 8009d54:	18ba      	adds	r2, r7, r2
 8009d56:	7812      	ldrb	r2, [r2, #0]
 8009d58:	3a0a      	subs	r2, #10
 8009d5a:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8009d5c:	230b      	movs	r3, #11
 8009d5e:	18fb      	adds	r3, r7, r3
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	2b09      	cmp	r3, #9
 8009d64:	d8f1      	bhi.n	8009d4a <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	011b      	lsls	r3, r3, #4
 8009d6c:	b2da      	uxtb	r2, r3
 8009d6e:	230b      	movs	r3, #11
 8009d70:	18fb      	adds	r3, r7, r3
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	4313      	orrs	r3, r2
 8009d76:	b2db      	uxtb	r3, r3
}
 8009d78:	0018      	movs	r0, r3
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	b004      	add	sp, #16
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	0002      	movs	r2, r0
 8009d88:	1dfb      	adds	r3, r7, #7
 8009d8a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8009d8c:	1dfb      	adds	r3, r7, #7
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	091b      	lsrs	r3, r3, #4
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	001a      	movs	r2, r3
 8009d96:	0013      	movs	r3, r2
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	189b      	adds	r3, r3, r2
 8009d9c:	005b      	lsls	r3, r3, #1
 8009d9e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	b2da      	uxtb	r2, r3
 8009da4:	1dfb      	adds	r3, r7, #7
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	210f      	movs	r1, #15
 8009daa:	400b      	ands	r3, r1
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	18d3      	adds	r3, r2, r3
 8009db0:	b2db      	uxtb	r3, r3
}
 8009db2:	0018      	movs	r0, r3
 8009db4:	46bd      	mov	sp, r7
 8009db6:	b004      	add	sp, #16
 8009db8:	bd80      	pop	{r7, pc}

08009dba <HAL_RTCEx_SetSmoothCalib>:
  *         must be equal to SMOOTHCALIB_PLUSPULSES_RESET and the field
  *         SmoothCalibMinusPulsesValue mut be equal to 0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef *hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b086      	sub	sp, #24
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	60f8      	str	r0, [r7, #12]
 8009dc2:	60b9      	str	r1, [r7, #8]
 8009dc4:	607a      	str	r2, [r7, #4]
 8009dc6:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2220      	movs	r2, #32
 8009dcc:	5c9b      	ldrb	r3, [r3, r2]
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d101      	bne.n	8009dd6 <HAL_RTCEx_SetSmoothCalib+0x1c>
 8009dd2:	2302      	movs	r3, #2
 8009dd4:	e04f      	b.n	8009e76 <HAL_RTCEx_SetSmoothCalib+0xbc>
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2220      	movs	r2, #32
 8009dda:	2101      	movs	r1, #1
 8009ddc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2221      	movs	r2, #33	; 0x21
 8009de2:	2102      	movs	r1, #2
 8009de4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	22ca      	movs	r2, #202	; 0xca
 8009dec:	625a      	str	r2, [r3, #36]	; 0x24
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2253      	movs	r2, #83	; 0x53
 8009df4:	625a      	str	r2, [r3, #36]	; 0x24

  /* check if a calibration is pending*/
  if ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	68da      	ldr	r2, [r3, #12]
 8009dfc:	2380      	movs	r3, #128	; 0x80
 8009dfe:	025b      	lsls	r3, r3, #9
 8009e00:	4013      	ands	r3, r2
 8009e02:	d022      	beq.n	8009e4a <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 8009e04:	f7fc ff8e 	bl	8006d24 <HAL_GetTick>
 8009e08:	0003      	movs	r3, r0
 8009e0a:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 8009e0c:	e016      	b.n	8009e3c <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009e0e:	f7fc ff89 	bl	8006d24 <HAL_GetTick>
 8009e12:	0002      	movs	r2, r0
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	1ad2      	subs	r2, r2, r3
 8009e18:	23fa      	movs	r3, #250	; 0xfa
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d90d      	bls.n	8009e3c <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	22ff      	movs	r2, #255	; 0xff
 8009e26:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2221      	movs	r2, #33	; 0x21
 8009e2c:	2103      	movs	r1, #3
 8009e2e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2220      	movs	r2, #32
 8009e34:	2100      	movs	r1, #0
 8009e36:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009e38:	2303      	movs	r3, #3
 8009e3a:	e01c      	b.n	8009e76 <HAL_RTCEx_SetSmoothCalib+0xbc>
    while ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	68da      	ldr	r2, [r3, #12]
 8009e42:	2380      	movs	r3, #128	; 0x80
 8009e44:	025b      	lsls	r3, r3, #9
 8009e46:	4013      	ands	r3, r2
 8009e48:	d1e1      	bne.n	8009e0e <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 8009e4a:	68ba      	ldr	r2, [r7, #8]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	431a      	orrs	r2, r3
 8009e50:	0011      	movs	r1, r2
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	683a      	ldr	r2, [r7, #0]
 8009e58:	430a      	orrs	r2, r1
 8009e5a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	22ff      	movs	r2, #255	; 0xff
 8009e62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2221      	movs	r2, #33	; 0x21
 8009e68:	2101      	movs	r1, #1
 8009e6a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2220      	movs	r2, #32
 8009e70:	2100      	movs	r1, #0
 8009e72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009e74:	2300      	movs	r3, #0
}
 8009e76:	0018      	movs	r0, r3
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	b006      	add	sp, #24
 8009e7c:	bd80      	pop	{r7, pc}
	...

08009e80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d101      	bne.n	8009e92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e059      	b.n	8009f46 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2200      	movs	r2, #0
 8009e96:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2251      	movs	r2, #81	; 0x51
 8009e9c:	5c9b      	ldrb	r3, [r3, r2]
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d107      	bne.n	8009eb4 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2250      	movs	r2, #80	; 0x50
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	0018      	movs	r0, r3
 8009eb0:	f7fa fbdc 	bl	800466c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2251      	movs	r2, #81	; 0x51
 8009eb8:	2102      	movs	r1, #2
 8009eba:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	2140      	movs	r1, #64	; 0x40
 8009ec8:	438a      	bics	r2, r1
 8009eca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	685a      	ldr	r2, [r3, #4]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	431a      	orrs	r2, r3
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	431a      	orrs	r2, r3
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	691b      	ldr	r3, [r3, #16]
 8009ee0:	431a      	orrs	r2, r3
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	695b      	ldr	r3, [r3, #20]
 8009ee6:	431a      	orrs	r2, r3
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6999      	ldr	r1, [r3, #24]
 8009eec:	2380      	movs	r3, #128	; 0x80
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	400b      	ands	r3, r1
 8009ef2:	431a      	orrs	r2, r3
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	69db      	ldr	r3, [r3, #28]
 8009ef8:	431a      	orrs	r2, r3
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6a1b      	ldr	r3, [r3, #32]
 8009efe:	431a      	orrs	r2, r3
 8009f00:	0011      	movs	r1, r2
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	430a      	orrs	r2, r1
 8009f0c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	699b      	ldr	r3, [r3, #24]
 8009f12:	0c1b      	lsrs	r3, r3, #16
 8009f14:	2204      	movs	r2, #4
 8009f16:	4013      	ands	r3, r2
 8009f18:	0019      	movs	r1, r3
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	430a      	orrs	r2, r1
 8009f24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	69da      	ldr	r2, [r3, #28]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4907      	ldr	r1, [pc, #28]	; (8009f50 <HAL_SPI_Init+0xd0>)
 8009f32:	400a      	ands	r2, r1
 8009f34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2251      	movs	r2, #81	; 0x51
 8009f40:	2101      	movs	r1, #1
 8009f42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009f44:	2300      	movs	r3, #0
}
 8009f46:	0018      	movs	r0, r3
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	b002      	add	sp, #8
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	46c0      	nop			; (mov r8, r8)
 8009f50:	fffff7ff 	.word	0xfffff7ff

08009f54 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b088      	sub	sp, #32
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	603b      	str	r3, [r7, #0]
 8009f60:	1dbb      	adds	r3, r7, #6
 8009f62:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009f64:	231f      	movs	r3, #31
 8009f66:	18fb      	adds	r3, r7, r3
 8009f68:	2200      	movs	r2, #0
 8009f6a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2250      	movs	r2, #80	; 0x50
 8009f70:	5c9b      	ldrb	r3, [r3, r2]
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d101      	bne.n	8009f7a <HAL_SPI_Transmit+0x26>
 8009f76:	2302      	movs	r3, #2
 8009f78:	e136      	b.n	800a1e8 <HAL_SPI_Transmit+0x294>
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2250      	movs	r2, #80	; 0x50
 8009f7e:	2101      	movs	r1, #1
 8009f80:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009f82:	f7fc fecf 	bl	8006d24 <HAL_GetTick>
 8009f86:	0003      	movs	r3, r0
 8009f88:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009f8a:	2316      	movs	r3, #22
 8009f8c:	18fb      	adds	r3, r7, r3
 8009f8e:	1dba      	adds	r2, r7, #6
 8009f90:	8812      	ldrh	r2, [r2, #0]
 8009f92:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2251      	movs	r2, #81	; 0x51
 8009f98:	5c9b      	ldrb	r3, [r3, r2]
 8009f9a:	b2db      	uxtb	r3, r3
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d004      	beq.n	8009faa <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8009fa0:	231f      	movs	r3, #31
 8009fa2:	18fb      	adds	r3, r7, r3
 8009fa4:	2202      	movs	r2, #2
 8009fa6:	701a      	strb	r2, [r3, #0]
    goto error;
 8009fa8:	e113      	b.n	800a1d2 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d003      	beq.n	8009fb8 <HAL_SPI_Transmit+0x64>
 8009fb0:	1dbb      	adds	r3, r7, #6
 8009fb2:	881b      	ldrh	r3, [r3, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d104      	bne.n	8009fc2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8009fb8:	231f      	movs	r3, #31
 8009fba:	18fb      	adds	r3, r7, r3
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	701a      	strb	r2, [r3, #0]
    goto error;
 8009fc0:	e107      	b.n	800a1d2 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2251      	movs	r2, #81	; 0x51
 8009fc6:	2103      	movs	r1, #3
 8009fc8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	68ba      	ldr	r2, [r7, #8]
 8009fd4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	1dba      	adds	r2, r7, #6
 8009fda:	8812      	ldrh	r2, [r2, #0]
 8009fdc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	1dba      	adds	r2, r7, #6
 8009fe2:	8812      	ldrh	r2, [r2, #0]
 8009fe4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2200      	movs	r2, #0
 800a002:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	689a      	ldr	r2, [r3, #8]
 800a008:	2380      	movs	r3, #128	; 0x80
 800a00a:	021b      	lsls	r3, r3, #8
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d108      	bne.n	800a022 <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	2180      	movs	r1, #128	; 0x80
 800a01c:	01c9      	lsls	r1, r1, #7
 800a01e:	430a      	orrs	r2, r1
 800a020:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	2240      	movs	r2, #64	; 0x40
 800a02a:	4013      	ands	r3, r2
 800a02c:	2b40      	cmp	r3, #64	; 0x40
 800a02e:	d007      	beq.n	800a040 <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	2140      	movs	r1, #64	; 0x40
 800a03c:	430a      	orrs	r2, r1
 800a03e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	68da      	ldr	r2, [r3, #12]
 800a044:	2380      	movs	r3, #128	; 0x80
 800a046:	011b      	lsls	r3, r3, #4
 800a048:	429a      	cmp	r2, r3
 800a04a:	d14e      	bne.n	800a0ea <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d004      	beq.n	800a05e <HAL_SPI_Transmit+0x10a>
 800a054:	2316      	movs	r3, #22
 800a056:	18fb      	adds	r3, r7, r3
 800a058:	881b      	ldrh	r3, [r3, #0]
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d13f      	bne.n	800a0de <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a062:	881a      	ldrh	r2, [r3, #0]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a06e:	1c9a      	adds	r2, r3, #2
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a078:	b29b      	uxth	r3, r3
 800a07a:	3b01      	subs	r3, #1
 800a07c:	b29a      	uxth	r2, r3
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a082:	e02c      	b.n	800a0de <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	2202      	movs	r2, #2
 800a08c:	4013      	ands	r3, r2
 800a08e:	2b02      	cmp	r3, #2
 800a090:	d112      	bne.n	800a0b8 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a096:	881a      	ldrh	r2, [r3, #0]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0a2:	1c9a      	adds	r2, r3, #2
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	3b01      	subs	r3, #1
 800a0b0:	b29a      	uxth	r2, r3
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	86da      	strh	r2, [r3, #54]	; 0x36
 800a0b6:	e012      	b.n	800a0de <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a0b8:	f7fc fe34 	bl	8006d24 <HAL_GetTick>
 800a0bc:	0002      	movs	r2, r0
 800a0be:	69bb      	ldr	r3, [r7, #24]
 800a0c0:	1ad3      	subs	r3, r2, r3
 800a0c2:	683a      	ldr	r2, [r7, #0]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d802      	bhi.n	800a0ce <HAL_SPI_Transmit+0x17a>
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	d102      	bne.n	800a0d4 <HAL_SPI_Transmit+0x180>
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d104      	bne.n	800a0de <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 800a0d4:	231f      	movs	r3, #31
 800a0d6:	18fb      	adds	r3, r7, r3
 800a0d8:	2203      	movs	r2, #3
 800a0da:	701a      	strb	r2, [r3, #0]
          goto error;
 800a0dc:	e079      	b.n	800a1d2 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d1cd      	bne.n	800a084 <HAL_SPI_Transmit+0x130>
 800a0e8:	e04f      	b.n	800a18a <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d004      	beq.n	800a0fc <HAL_SPI_Transmit+0x1a8>
 800a0f2:	2316      	movs	r3, #22
 800a0f4:	18fb      	adds	r3, r7, r3
 800a0f6:	881b      	ldrh	r3, [r3, #0]
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d141      	bne.n	800a180 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	330c      	adds	r3, #12
 800a106:	7812      	ldrb	r2, [r2, #0]
 800a108:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a10e:	1c5a      	adds	r2, r3, #1
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a118:	b29b      	uxth	r3, r3
 800a11a:	3b01      	subs	r3, #1
 800a11c:	b29a      	uxth	r2, r3
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a122:	e02d      	b.n	800a180 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	2202      	movs	r2, #2
 800a12c:	4013      	ands	r3, r2
 800a12e:	2b02      	cmp	r3, #2
 800a130:	d113      	bne.n	800a15a <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	330c      	adds	r3, #12
 800a13c:	7812      	ldrb	r2, [r2, #0]
 800a13e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a144:	1c5a      	adds	r2, r3, #1
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a14e:	b29b      	uxth	r3, r3
 800a150:	3b01      	subs	r3, #1
 800a152:	b29a      	uxth	r2, r3
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	86da      	strh	r2, [r3, #54]	; 0x36
 800a158:	e012      	b.n	800a180 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a15a:	f7fc fde3 	bl	8006d24 <HAL_GetTick>
 800a15e:	0002      	movs	r2, r0
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	1ad3      	subs	r3, r2, r3
 800a164:	683a      	ldr	r2, [r7, #0]
 800a166:	429a      	cmp	r2, r3
 800a168:	d802      	bhi.n	800a170 <HAL_SPI_Transmit+0x21c>
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	3301      	adds	r3, #1
 800a16e:	d102      	bne.n	800a176 <HAL_SPI_Transmit+0x222>
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d104      	bne.n	800a180 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 800a176:	231f      	movs	r3, #31
 800a178:	18fb      	adds	r3, r7, r3
 800a17a:	2203      	movs	r2, #3
 800a17c:	701a      	strb	r2, [r3, #0]
          goto error;
 800a17e:	e028      	b.n	800a1d2 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a184:	b29b      	uxth	r3, r3
 800a186:	2b00      	cmp	r3, #0
 800a188:	d1cc      	bne.n	800a124 <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a18a:	69ba      	ldr	r2, [r7, #24]
 800a18c:	6839      	ldr	r1, [r7, #0]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	0018      	movs	r0, r3
 800a192:	f000 fbe3 	bl	800a95c <SPI_EndRxTxTransaction>
 800a196:	1e03      	subs	r3, r0, #0
 800a198:	d002      	beq.n	800a1a0 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2220      	movs	r2, #32
 800a19e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	689b      	ldr	r3, [r3, #8]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d10a      	bne.n	800a1be <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	613b      	str	r3, [r7, #16]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	68db      	ldr	r3, [r3, #12]
 800a1b2:	613b      	str	r3, [r7, #16]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	613b      	str	r3, [r7, #16]
 800a1bc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d004      	beq.n	800a1d0 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 800a1c6:	231f      	movs	r3, #31
 800a1c8:	18fb      	adds	r3, r7, r3
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	701a      	strb	r2, [r3, #0]
 800a1ce:	e000      	b.n	800a1d2 <HAL_SPI_Transmit+0x27e>
  }

error:
 800a1d0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2251      	movs	r2, #81	; 0x51
 800a1d6:	2101      	movs	r1, #1
 800a1d8:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2250      	movs	r2, #80	; 0x50
 800a1de:	2100      	movs	r1, #0
 800a1e0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800a1e2:	231f      	movs	r3, #31
 800a1e4:	18fb      	adds	r3, r7, r3
 800a1e6:	781b      	ldrb	r3, [r3, #0]
}
 800a1e8:	0018      	movs	r0, r3
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	b008      	add	sp, #32
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b086      	sub	sp, #24
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	60f8      	str	r0, [r7, #12]
 800a1f8:	60b9      	str	r1, [r7, #8]
 800a1fa:	1dbb      	adds	r3, r7, #6
 800a1fc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a1fe:	2317      	movs	r3, #23
 800a200:	18fb      	adds	r3, r7, r3
 800a202:	2200      	movs	r2, #0
 800a204:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2250      	movs	r2, #80	; 0x50
 800a20a:	5c9b      	ldrb	r3, [r3, r2]
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d101      	bne.n	800a214 <HAL_SPI_Transmit_IT+0x24>
 800a210:	2302      	movs	r3, #2
 800a212:	e072      	b.n	800a2fa <HAL_SPI_Transmit_IT+0x10a>
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2250      	movs	r2, #80	; 0x50
 800a218:	2101      	movs	r1, #1
 800a21a:	5499      	strb	r1, [r3, r2]

  if ((pData == NULL) || (Size == 0U))
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d003      	beq.n	800a22a <HAL_SPI_Transmit_IT+0x3a>
 800a222:	1dbb      	adds	r3, r7, #6
 800a224:	881b      	ldrh	r3, [r3, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d104      	bne.n	800a234 <HAL_SPI_Transmit_IT+0x44>
  {
    errorcode = HAL_ERROR;
 800a22a:	2317      	movs	r3, #23
 800a22c:	18fb      	adds	r3, r7, r3
 800a22e:	2201      	movs	r2, #1
 800a230:	701a      	strb	r2, [r3, #0]
    goto error;
 800a232:	e05b      	b.n	800a2ec <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2251      	movs	r2, #81	; 0x51
 800a238:	5c9b      	ldrb	r3, [r3, r2]
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d004      	beq.n	800a24a <HAL_SPI_Transmit_IT+0x5a>
  {
    errorcode = HAL_BUSY;
 800a240:	2317      	movs	r3, #23
 800a242:	18fb      	adds	r3, r7, r3
 800a244:	2202      	movs	r2, #2
 800a246:	701a      	strb	r2, [r3, #0]
    goto error;
 800a248:	e050      	b.n	800a2ec <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2251      	movs	r2, #81	; 0x51
 800a24e:	2103      	movs	r1, #3
 800a250:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2200      	movs	r2, #0
 800a256:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	68ba      	ldr	r2, [r7, #8]
 800a25c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	1dba      	adds	r2, r7, #6
 800a262:	8812      	ldrh	r2, [r2, #0]
 800a264:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	1dba      	adds	r2, r7, #6
 800a26a:	8812      	ldrh	r2, [r2, #0]
 800a26c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2200      	movs	r2, #0
 800a272:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2200      	movs	r2, #0
 800a278:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2200      	movs	r2, #0
 800a27e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2200      	movs	r2, #0
 800a284:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d003      	beq.n	800a296 <HAL_SPI_Transmit_IT+0xa6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	4a1c      	ldr	r2, [pc, #112]	; (800a304 <HAL_SPI_Transmit_IT+0x114>)
 800a292:	645a      	str	r2, [r3, #68]	; 0x44
 800a294:	e002      	b.n	800a29c <HAL_SPI_Transmit_IT+0xac>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	4a1b      	ldr	r2, [pc, #108]	; (800a308 <HAL_SPI_Transmit_IT+0x118>)
 800a29a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	689a      	ldr	r2, [r3, #8]
 800a2a0:	2380      	movs	r3, #128	; 0x80
 800a2a2:	021b      	lsls	r3, r3, #8
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d108      	bne.n	800a2ba <HAL_SPI_Transmit_IT+0xca>
  {
    SPI_1LINE_TX(hspi);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	2180      	movs	r1, #128	; 0x80
 800a2b4:	01c9      	lsls	r1, r1, #7
 800a2b6:	430a      	orrs	r2, r1
 800a2b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	685a      	ldr	r2, [r3, #4]
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	21a0      	movs	r1, #160	; 0xa0
 800a2c6:	430a      	orrs	r2, r1
 800a2c8:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	2240      	movs	r2, #64	; 0x40
 800a2d2:	4013      	ands	r3, r2
 800a2d4:	2b40      	cmp	r3, #64	; 0x40
 800a2d6:	d008      	beq.n	800a2ea <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	2140      	movs	r1, #64	; 0x40
 800a2e4:	430a      	orrs	r2, r1
 800a2e6:	601a      	str	r2, [r3, #0]
 800a2e8:	e000      	b.n	800a2ec <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 800a2ea:	46c0      	nop			; (mov r8, r8)
  __HAL_UNLOCK(hspi);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2250      	movs	r2, #80	; 0x50
 800a2f0:	2100      	movs	r1, #0
 800a2f2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800a2f4:	2317      	movs	r3, #23
 800a2f6:	18fb      	adds	r3, r7, r3
 800a2f8:	781b      	ldrb	r3, [r3, #0]
}
 800a2fa:	0018      	movs	r0, r3
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	b006      	add	sp, #24
 800a300:	bd80      	pop	{r7, pc}
 800a302:	46c0      	nop			; (mov r8, r8)
 800a304:	0800a837 	.word	0x0800a837
 800a308:	0800a7ef 	.word	0x0800a7ef

0800a30c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b086      	sub	sp, #24
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	1dbb      	adds	r3, r7, #6
 800a318:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a31a:	2317      	movs	r3, #23
 800a31c:	18fb      	adds	r3, r7, r3
 800a31e:	2200      	movs	r2, #0
 800a320:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2250      	movs	r2, #80	; 0x50
 800a326:	5c9b      	ldrb	r3, [r3, r2]
 800a328:	2b01      	cmp	r3, #1
 800a32a:	d101      	bne.n	800a330 <HAL_SPI_Transmit_DMA+0x24>
 800a32c:	2302      	movs	r3, #2
 800a32e:	e09f      	b.n	800a470 <HAL_SPI_Transmit_DMA+0x164>
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2250      	movs	r2, #80	; 0x50
 800a334:	2101      	movs	r1, #1
 800a336:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2251      	movs	r2, #81	; 0x51
 800a33c:	5c9b      	ldrb	r3, [r3, r2]
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	2b01      	cmp	r3, #1
 800a342:	d004      	beq.n	800a34e <HAL_SPI_Transmit_DMA+0x42>
  {
    errorcode = HAL_BUSY;
 800a344:	2317      	movs	r3, #23
 800a346:	18fb      	adds	r3, r7, r3
 800a348:	2202      	movs	r2, #2
 800a34a:	701a      	strb	r2, [r3, #0]
    goto error;
 800a34c:	e089      	b.n	800a462 <HAL_SPI_Transmit_DMA+0x156>
  }

  if ((pData == NULL) || (Size == 0U))
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d003      	beq.n	800a35c <HAL_SPI_Transmit_DMA+0x50>
 800a354:	1dbb      	adds	r3, r7, #6
 800a356:	881b      	ldrh	r3, [r3, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d104      	bne.n	800a366 <HAL_SPI_Transmit_DMA+0x5a>
  {
    errorcode = HAL_ERROR;
 800a35c:	2317      	movs	r3, #23
 800a35e:	18fb      	adds	r3, r7, r3
 800a360:	2201      	movs	r2, #1
 800a362:	701a      	strb	r2, [r3, #0]
    goto error;
 800a364:	e07d      	b.n	800a462 <HAL_SPI_Transmit_DMA+0x156>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2251      	movs	r2, #81	; 0x51
 800a36a:	2103      	movs	r1, #3
 800a36c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2200      	movs	r2, #0
 800a372:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	68ba      	ldr	r2, [r7, #8]
 800a378:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	1dba      	adds	r2, r7, #6
 800a37e:	8812      	ldrh	r2, [r2, #0]
 800a380:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	1dba      	adds	r2, r7, #6
 800a386:	8812      	ldrh	r2, [r2, #0]
 800a388:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2200      	movs	r2, #0
 800a38e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2200      	movs	r2, #0
 800a394:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2200      	movs	r2, #0
 800a39a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	689a      	ldr	r2, [r3, #8]
 800a3ac:	2380      	movs	r3, #128	; 0x80
 800a3ae:	021b      	lsls	r3, r3, #8
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d108      	bne.n	800a3c6 <HAL_SPI_Transmit_DMA+0xba>
  {
    SPI_1LINE_TX(hspi);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	2180      	movs	r1, #128	; 0x80
 800a3c0:	01c9      	lsls	r1, r1, #7
 800a3c2:	430a      	orrs	r2, r1
 800a3c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3ca:	4a2b      	ldr	r2, [pc, #172]	; (800a478 <HAL_SPI_Transmit_DMA+0x16c>)
 800a3cc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3d2:	4a2a      	ldr	r2, [pc, #168]	; (800a47c <HAL_SPI_Transmit_DMA+0x170>)
 800a3d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3da:	4a29      	ldr	r2, [pc, #164]	; (800a480 <HAL_SPI_Transmit_DMA+0x174>)
 800a3dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ee:	0019      	movs	r1, r3
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	330c      	adds	r3, #12
 800a3f6:	001a      	movs	r2, r3
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3fc:	b29b      	uxth	r3, r3
 800a3fe:	f7fd fb87 	bl	8007b10 <HAL_DMA_Start_IT>
 800a402:	1e03      	subs	r3, r0, #0
 800a404:	d00e      	beq.n	800a424 <HAL_SPI_Transmit_DMA+0x118>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a40a:	2210      	movs	r2, #16
 800a40c:	431a      	orrs	r2, r3
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800a412:	2317      	movs	r3, #23
 800a414:	18fb      	adds	r3, r7, r3
 800a416:	2201      	movs	r2, #1
 800a418:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2251      	movs	r2, #81	; 0x51
 800a41e:	2101      	movs	r1, #1
 800a420:	5499      	strb	r1, [r3, r2]
    goto error;
 800a422:	e01e      	b.n	800a462 <HAL_SPI_Transmit_DMA+0x156>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	2240      	movs	r2, #64	; 0x40
 800a42c:	4013      	ands	r3, r2
 800a42e:	2b40      	cmp	r3, #64	; 0x40
 800a430:	d007      	beq.n	800a442 <HAL_SPI_Transmit_DMA+0x136>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	2140      	movs	r1, #64	; 0x40
 800a43e:	430a      	orrs	r2, r1
 800a440:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	685a      	ldr	r2, [r3, #4]
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	2120      	movs	r1, #32
 800a44e:	430a      	orrs	r2, r1
 800a450:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	685a      	ldr	r2, [r3, #4]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	2102      	movs	r1, #2
 800a45e:	430a      	orrs	r2, r1
 800a460:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2250      	movs	r2, #80	; 0x50
 800a466:	2100      	movs	r1, #0
 800a468:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800a46a:	2317      	movs	r3, #23
 800a46c:	18fb      	adds	r3, r7, r3
 800a46e:	781b      	ldrb	r3, [r3, #0]
}
 800a470:	0018      	movs	r0, r3
 800a472:	46bd      	mov	sp, r7
 800a474:	b006      	add	sp, #24
 800a476:	bd80      	pop	{r7, pc}
 800a478:	0800a765 	.word	0x0800a765
 800a47c:	0800a6b9 	.word	0x0800a6b9
 800a480:	0800a783 	.word	0x0800a783

0800a484 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b088      	sub	sp, #32
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	689b      	ldr	r3, [r3, #8]
 800a49a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a49c:	69bb      	ldr	r3, [r7, #24]
 800a49e:	099b      	lsrs	r3, r3, #6
 800a4a0:	001a      	movs	r2, r3
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	4013      	ands	r3, r2
 800a4a6:	d10f      	bne.n	800a4c8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a4ae:	d00b      	beq.n	800a4c8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a4b0:	69fb      	ldr	r3, [r7, #28]
 800a4b2:	099b      	lsrs	r3, r3, #6
 800a4b4:	001a      	movs	r2, r3
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	4013      	ands	r3, r2
 800a4ba:	d005      	beq.n	800a4c8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	0010      	movs	r0, r2
 800a4c4:	4798      	blx	r3
    return;
 800a4c6:	e0d6      	b.n	800a676 <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a4c8:	69bb      	ldr	r3, [r7, #24]
 800a4ca:	085b      	lsrs	r3, r3, #1
 800a4cc:	001a      	movs	r2, r3
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	4013      	ands	r3, r2
 800a4d2:	d00b      	beq.n	800a4ec <HAL_SPI_IRQHandler+0x68>
 800a4d4:	69fb      	ldr	r3, [r7, #28]
 800a4d6:	09db      	lsrs	r3, r3, #7
 800a4d8:	001a      	movs	r2, r3
 800a4da:	2301      	movs	r3, #1
 800a4dc:	4013      	ands	r3, r2
 800a4de:	d005      	beq.n	800a4ec <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	0010      	movs	r0, r2
 800a4e8:	4798      	blx	r3
    return;
 800a4ea:	e0c4      	b.n	800a676 <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a4ec:	69bb      	ldr	r3, [r7, #24]
 800a4ee:	095b      	lsrs	r3, r3, #5
 800a4f0:	001a      	movs	r2, r3
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	4013      	ands	r3, r2
 800a4f6:	d10c      	bne.n	800a512 <HAL_SPI_IRQHandler+0x8e>
 800a4f8:	69bb      	ldr	r3, [r7, #24]
 800a4fa:	099b      	lsrs	r3, r3, #6
 800a4fc:	001a      	movs	r2, r3
 800a4fe:	2301      	movs	r3, #1
 800a500:	4013      	ands	r3, r2
 800a502:	d106      	bne.n	800a512 <HAL_SPI_IRQHandler+0x8e>
 800a504:	69bb      	ldr	r3, [r7, #24]
 800a506:	0a1b      	lsrs	r3, r3, #8
 800a508:	001a      	movs	r2, r3
 800a50a:	2301      	movs	r3, #1
 800a50c:	4013      	ands	r3, r2
 800a50e:	d100      	bne.n	800a512 <HAL_SPI_IRQHandler+0x8e>
 800a510:	e0b1      	b.n	800a676 <HAL_SPI_IRQHandler+0x1f2>
 800a512:	69fb      	ldr	r3, [r7, #28]
 800a514:	095b      	lsrs	r3, r3, #5
 800a516:	001a      	movs	r2, r3
 800a518:	2301      	movs	r3, #1
 800a51a:	4013      	ands	r3, r2
 800a51c:	d100      	bne.n	800a520 <HAL_SPI_IRQHandler+0x9c>
 800a51e:	e0aa      	b.n	800a676 <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	099b      	lsrs	r3, r3, #6
 800a524:	001a      	movs	r2, r3
 800a526:	2301      	movs	r3, #1
 800a528:	4013      	ands	r3, r2
 800a52a:	d023      	beq.n	800a574 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2251      	movs	r2, #81	; 0x51
 800a530:	5c9b      	ldrb	r3, [r3, r2]
 800a532:	b2db      	uxtb	r3, r3
 800a534:	2b03      	cmp	r3, #3
 800a536:	d011      	beq.n	800a55c <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a53c:	2204      	movs	r2, #4
 800a53e:	431a      	orrs	r2, r3
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a544:	2300      	movs	r3, #0
 800a546:	617b      	str	r3, [r7, #20]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	68db      	ldr	r3, [r3, #12]
 800a54e:	617b      	str	r3, [r7, #20]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	689b      	ldr	r3, [r3, #8]
 800a556:	617b      	str	r3, [r7, #20]
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	e00b      	b.n	800a574 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a55c:	2300      	movs	r3, #0
 800a55e:	613b      	str	r3, [r7, #16]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	68db      	ldr	r3, [r3, #12]
 800a566:	613b      	str	r3, [r7, #16]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	689b      	ldr	r3, [r3, #8]
 800a56e:	613b      	str	r3, [r7, #16]
 800a570:	693b      	ldr	r3, [r7, #16]
        return;
 800a572:	e080      	b.n	800a676 <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a574:	69bb      	ldr	r3, [r7, #24]
 800a576:	095b      	lsrs	r3, r3, #5
 800a578:	001a      	movs	r2, r3
 800a57a:	2301      	movs	r3, #1
 800a57c:	4013      	ands	r3, r2
 800a57e:	d014      	beq.n	800a5aa <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a584:	2201      	movs	r2, #1
 800a586:	431a      	orrs	r2, r3
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a58c:	2300      	movs	r3, #0
 800a58e:	60fb      	str	r3, [r7, #12]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	689b      	ldr	r3, [r3, #8]
 800a596:	60fb      	str	r3, [r7, #12]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	2140      	movs	r1, #64	; 0x40
 800a5a4:	438a      	bics	r2, r1
 800a5a6:	601a      	str	r2, [r3, #0]
 800a5a8:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	0a1b      	lsrs	r3, r3, #8
 800a5ae:	001a      	movs	r2, r3
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	4013      	ands	r3, r2
 800a5b4:	d00c      	beq.n	800a5d0 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5ba:	2208      	movs	r2, #8
 800a5bc:	431a      	orrs	r2, r3
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	60bb      	str	r3, [r7, #8]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	60bb      	str	r3, [r7, #8]
 800a5ce:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d04d      	beq.n	800a674 <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	685a      	ldr	r2, [r3, #4]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	21e0      	movs	r1, #224	; 0xe0
 800a5e4:	438a      	bics	r2, r1
 800a5e6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2251      	movs	r2, #81	; 0x51
 800a5ec:	2101      	movs	r1, #1
 800a5ee:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a5f0:	69fb      	ldr	r3, [r7, #28]
 800a5f2:	2202      	movs	r2, #2
 800a5f4:	4013      	ands	r3, r2
 800a5f6:	d103      	bne.n	800a600 <HAL_SPI_IRQHandler+0x17c>
 800a5f8:	69fb      	ldr	r3, [r7, #28]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	4013      	ands	r3, r2
 800a5fe:	d032      	beq.n	800a666 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	685a      	ldr	r2, [r3, #4]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	2103      	movs	r1, #3
 800a60c:	438a      	bics	r2, r1
 800a60e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a614:	2b00      	cmp	r3, #0
 800a616:	d010      	beq.n	800a63a <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a61c:	4a17      	ldr	r2, [pc, #92]	; (800a67c <HAL_SPI_IRQHandler+0x1f8>)
 800a61e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a624:	0018      	movs	r0, r3
 800a626:	f7fd fad9 	bl	8007bdc <HAL_DMA_Abort_IT>
 800a62a:	1e03      	subs	r3, r0, #0
 800a62c:	d005      	beq.n	800a63a <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a632:	2240      	movs	r2, #64	; 0x40
 800a634:	431a      	orrs	r2, r3
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d016      	beq.n	800a670 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a646:	4a0d      	ldr	r2, [pc, #52]	; (800a67c <HAL_SPI_IRQHandler+0x1f8>)
 800a648:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a64e:	0018      	movs	r0, r3
 800a650:	f7fd fac4 	bl	8007bdc <HAL_DMA_Abort_IT>
 800a654:	1e03      	subs	r3, r0, #0
 800a656:	d00b      	beq.n	800a670 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a65c:	2240      	movs	r2, #64	; 0x40
 800a65e:	431a      	orrs	r2, r3
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800a664:	e004      	b.n	800a670 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	0018      	movs	r0, r3
 800a66a:	f000 f811 	bl	800a690 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a66e:	e000      	b.n	800a672 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 800a670:	46c0      	nop			; (mov r8, r8)
    return;
 800a672:	46c0      	nop			; (mov r8, r8)
 800a674:	46c0      	nop			; (mov r8, r8)
  }
}
 800a676:	46bd      	mov	sp, r7
 800a678:	b008      	add	sp, #32
 800a67a:	bd80      	pop	{r7, pc}
 800a67c:	0800a7c5 	.word	0x0800a7c5

0800a680 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a688:	46c0      	nop			; (mov r8, r8)
 800a68a:	46bd      	mov	sp, r7
 800a68c:	b002      	add	sp, #8
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b082      	sub	sp, #8
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a698:	46c0      	nop			; (mov r8, r8)
 800a69a:	46bd      	mov	sp, r7
 800a69c:	b002      	add	sp, #8
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2251      	movs	r2, #81	; 0x51
 800a6ac:	5c9b      	ldrb	r3, [r3, r2]
 800a6ae:	b2db      	uxtb	r3, r3
}
 800a6b0:	0018      	movs	r0, r3
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	b002      	add	sp, #8
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b086      	sub	sp, #24
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6c4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a6c6:	f7fc fb2d 	bl	8006d24 <HAL_GetTick>
 800a6ca:	0003      	movs	r3, r0
 800a6cc:	613b      	str	r3, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2220      	movs	r2, #32
 800a6d6:	4013      	ands	r3, r2
 800a6d8:	2b20      	cmp	r3, #32
 800a6da:	d03c      	beq.n	800a756 <SPI_DMATransmitCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	685a      	ldr	r2, [r3, #4]
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	2120      	movs	r1, #32
 800a6e8:	438a      	bics	r2, r1
 800a6ea:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	685a      	ldr	r2, [r3, #4]
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	2102      	movs	r1, #2
 800a6f8:	438a      	bics	r2, r1
 800a6fa:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a6fc:	693a      	ldr	r2, [r7, #16]
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	2164      	movs	r1, #100	; 0x64
 800a702:	0018      	movs	r0, r3
 800a704:	f000 f92a 	bl	800a95c <SPI_EndRxTxTransaction>
 800a708:	1e03      	subs	r3, r0, #0
 800a70a:	d005      	beq.n	800a718 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a710:	2220      	movs	r2, #32
 800a712:	431a      	orrs	r2, r3
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	689b      	ldr	r3, [r3, #8]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d10a      	bne.n	800a736 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a720:	2300      	movs	r3, #0
 800a722:	60fb      	str	r3, [r7, #12]
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	68db      	ldr	r3, [r3, #12]
 800a72a:	60fb      	str	r3, [r7, #12]
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	689b      	ldr	r3, [r3, #8]
 800a732:	60fb      	str	r3, [r7, #12]
 800a734:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	2200      	movs	r2, #0
 800a73a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	2251      	movs	r2, #81	; 0x51
 800a740:	2101      	movs	r1, #1
 800a742:	5499      	strb	r1, [r3, r2]

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d004      	beq.n	800a756 <SPI_DMATransmitCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	0018      	movs	r0, r3
 800a750:	f7ff ff9e 	bl	800a690 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a754:	e003      	b.n	800a75e <SPI_DMATransmitCplt+0xa6>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	0018      	movs	r0, r3
 800a75a:	f7f7 fae7 	bl	8001d2c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a75e:	46bd      	mov	sp, r7
 800a760:	b006      	add	sp, #24
 800a762:	bd80      	pop	{r7, pc}

0800a764 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b084      	sub	sp, #16
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a770:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	0018      	movs	r0, r3
 800a776:	f7ff ff83 	bl	800a680 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a77a:	46c0      	nop			; (mov r8, r8)
 800a77c:	46bd      	mov	sp, r7
 800a77e:	b004      	add	sp, #16
 800a780:	bd80      	pop	{r7, pc}

0800a782 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a782:	b580      	push	{r7, lr}
 800a784:	b084      	sub	sp, #16
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a78e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	685a      	ldr	r2, [r3, #4]
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	2103      	movs	r1, #3
 800a79c:	438a      	bics	r2, r1
 800a79e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7a4:	2210      	movs	r2, #16
 800a7a6:	431a      	orrs	r2, r3
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	2251      	movs	r2, #81	; 0x51
 800a7b0:	2101      	movs	r1, #1
 800a7b2:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	0018      	movs	r0, r3
 800a7b8:	f7ff ff6a 	bl	800a690 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a7bc:	46c0      	nop			; (mov r8, r8)
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	b004      	add	sp, #16
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7d0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	0018      	movs	r0, r3
 800a7e2:	f7ff ff55 	bl	800a690 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a7e6:	46c0      	nop			; (mov r8, r8)
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	b004      	add	sp, #16
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b082      	sub	sp, #8
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	330c      	adds	r3, #12
 800a800:	7812      	ldrb	r2, [r2, #0]
 800a802:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a808:	1c5a      	adds	r2, r3, #1
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a812:	b29b      	uxth	r3, r3
 800a814:	3b01      	subs	r3, #1
 800a816:	b29a      	uxth	r2, r3
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a820:	b29b      	uxth	r3, r3
 800a822:	2b00      	cmp	r3, #0
 800a824:	d103      	bne.n	800a82e <SPI_TxISR_8BIT+0x40>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	0018      	movs	r0, r3
 800a82a:	f000 f8d5 	bl	800a9d8 <SPI_CloseTx_ISR>
  }
}
 800a82e:	46c0      	nop			; (mov r8, r8)
 800a830:	46bd      	mov	sp, r7
 800a832:	b002      	add	sp, #8
 800a834:	bd80      	pop	{r7, pc}

0800a836 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a836:	b580      	push	{r7, lr}
 800a838:	b082      	sub	sp, #8
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a842:	881a      	ldrh	r2, [r3, #0]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a84e:	1c9a      	adds	r2, r3, #2
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a858:	b29b      	uxth	r3, r3
 800a85a:	3b01      	subs	r3, #1
 800a85c:	b29a      	uxth	r2, r3
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a866:	b29b      	uxth	r3, r3
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d103      	bne.n	800a874 <SPI_TxISR_16BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	0018      	movs	r0, r3
 800a870:	f000 f8b2 	bl	800a9d8 <SPI_CloseTx_ISR>
  }
}
 800a874:	46c0      	nop			; (mov r8, r8)
 800a876:	46bd      	mov	sp, r7
 800a878:	b002      	add	sp, #8
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b084      	sub	sp, #16
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	603b      	str	r3, [r7, #0]
 800a888:	1dfb      	adds	r3, r7, #7
 800a88a:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a88c:	e050      	b.n	800a930 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	3301      	adds	r3, #1
 800a892:	d04d      	beq.n	800a930 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a894:	f7fc fa46 	bl	8006d24 <HAL_GetTick>
 800a898:	0002      	movs	r2, r0
 800a89a:	69bb      	ldr	r3, [r7, #24]
 800a89c:	1ad3      	subs	r3, r2, r3
 800a89e:	683a      	ldr	r2, [r7, #0]
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d902      	bls.n	800a8aa <SPI_WaitFlagStateUntilTimeout+0x2e>
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d142      	bne.n	800a930 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	685a      	ldr	r2, [r3, #4]
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	21e0      	movs	r1, #224	; 0xe0
 800a8b6:	438a      	bics	r2, r1
 800a8b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	685a      	ldr	r2, [r3, #4]
 800a8be:	2382      	movs	r3, #130	; 0x82
 800a8c0:	005b      	lsls	r3, r3, #1
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d113      	bne.n	800a8ee <SPI_WaitFlagStateUntilTimeout+0x72>
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	689a      	ldr	r2, [r3, #8]
 800a8ca:	2380      	movs	r3, #128	; 0x80
 800a8cc:	021b      	lsls	r3, r3, #8
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d005      	beq.n	800a8de <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	689a      	ldr	r2, [r3, #8]
 800a8d6:	2380      	movs	r3, #128	; 0x80
 800a8d8:	00db      	lsls	r3, r3, #3
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d107      	bne.n	800a8ee <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	681a      	ldr	r2, [r3, #0]
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	2140      	movs	r1, #64	; 0x40
 800a8ea:	438a      	bics	r2, r1
 800a8ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8f2:	2380      	movs	r3, #128	; 0x80
 800a8f4:	019b      	lsls	r3, r3, #6
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d110      	bne.n	800a91c <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4914      	ldr	r1, [pc, #80]	; (800a958 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 800a906:	400a      	ands	r2, r1
 800a908:	601a      	str	r2, [r3, #0]
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	2180      	movs	r1, #128	; 0x80
 800a916:	0189      	lsls	r1, r1, #6
 800a918:	430a      	orrs	r2, r1
 800a91a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2251      	movs	r2, #81	; 0x51
 800a920:	2101      	movs	r1, #1
 800a922:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2250      	movs	r2, #80	; 0x50
 800a928:	2100      	movs	r1, #0
 800a92a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a92c:	2303      	movs	r3, #3
 800a92e:	e00f      	b.n	800a950 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	689b      	ldr	r3, [r3, #8]
 800a936:	68ba      	ldr	r2, [r7, #8]
 800a938:	4013      	ands	r3, r2
 800a93a:	68ba      	ldr	r2, [r7, #8]
 800a93c:	1ad3      	subs	r3, r2, r3
 800a93e:	425a      	negs	r2, r3
 800a940:	4153      	adcs	r3, r2
 800a942:	b2db      	uxtb	r3, r3
 800a944:	001a      	movs	r2, r3
 800a946:	1dfb      	adds	r3, r7, #7
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d19f      	bne.n	800a88e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800a94e:	2300      	movs	r3, #0
}
 800a950:	0018      	movs	r0, r3
 800a952:	46bd      	mov	sp, r7
 800a954:	b004      	add	sp, #16
 800a956:	bd80      	pop	{r7, pc}
 800a958:	ffffdfff 	.word	0xffffdfff

0800a95c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b086      	sub	sp, #24
 800a960:	af02      	add	r7, sp, #8
 800a962:	60f8      	str	r0, [r7, #12]
 800a964:	60b9      	str	r1, [r7, #8]
 800a966:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	685a      	ldr	r2, [r3, #4]
 800a96c:	2382      	movs	r3, #130	; 0x82
 800a96e:	005b      	lsls	r3, r3, #1
 800a970:	429a      	cmp	r2, r3
 800a972:	d112      	bne.n	800a99a <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a974:	68ba      	ldr	r2, [r7, #8]
 800a976:	68f8      	ldr	r0, [r7, #12]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	9300      	str	r3, [sp, #0]
 800a97c:	0013      	movs	r3, r2
 800a97e:	2200      	movs	r2, #0
 800a980:	2180      	movs	r1, #128	; 0x80
 800a982:	f7ff ff7b 	bl	800a87c <SPI_WaitFlagStateUntilTimeout>
 800a986:	1e03      	subs	r3, r0, #0
 800a988:	d020      	beq.n	800a9cc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a98e:	2220      	movs	r2, #32
 800a990:	431a      	orrs	r2, r3
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a996:	2303      	movs	r3, #3
 800a998:	e019      	b.n	800a9ce <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2251      	movs	r2, #81	; 0x51
 800a99e:	5c9b      	ldrb	r3, [r3, r2]
 800a9a0:	b2db      	uxtb	r3, r3
 800a9a2:	2b05      	cmp	r3, #5
 800a9a4:	d112      	bne.n	800a9cc <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a9a6:	68ba      	ldr	r2, [r7, #8]
 800a9a8:	68f8      	ldr	r0, [r7, #12]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	9300      	str	r3, [sp, #0]
 800a9ae:	0013      	movs	r3, r2
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	2101      	movs	r1, #1
 800a9b4:	f7ff ff62 	bl	800a87c <SPI_WaitFlagStateUntilTimeout>
 800a9b8:	1e03      	subs	r3, r0, #0
 800a9ba:	d007      	beq.n	800a9cc <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9c0:	2220      	movs	r2, #32
 800a9c2:	431a      	orrs	r2, r3
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a9c8:	2303      	movs	r3, #3
 800a9ca:	e000      	b.n	800a9ce <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 800a9cc:	2300      	movs	r3, #0
}
 800a9ce:	0018      	movs	r0, r3
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	b004      	add	sp, #16
 800a9d4:	bd80      	pop	{r7, pc}
	...

0800a9d8 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b086      	sub	sp, #24
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800a9e0:	4b2d      	ldr	r3, [pc, #180]	; (800aa98 <SPI_CloseTx_ISR+0xc0>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	492d      	ldr	r1, [pc, #180]	; (800aa9c <SPI_CloseTx_ISR+0xc4>)
 800a9e6:	0018      	movs	r0, r3
 800a9e8:	f7f5 fb96 	bl	8000118 <__udivsi3>
 800a9ec:	0003      	movs	r3, r0
 800a9ee:	001a      	movs	r2, r3
 800a9f0:	2364      	movs	r3, #100	; 0x64
 800a9f2:	4353      	muls	r3, r2
 800a9f4:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a9f6:	f7fc f995 	bl	8006d24 <HAL_GetTick>
 800a9fa:	0003      	movs	r3, r0
 800a9fc:	617b      	str	r3, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d106      	bne.n	800aa12 <SPI_CloseTx_ISR+0x3a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa08:	2220      	movs	r2, #32
 800aa0a:	431a      	orrs	r2, r3
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800aa10:	e008      	b.n	800aa24 <SPI_CloseTx_ISR+0x4c>
    }
    count--;
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	3b01      	subs	r3, #1
 800aa16:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	689b      	ldr	r3, [r3, #8]
 800aa1e:	2202      	movs	r2, #2
 800aa20:	4013      	ands	r3, r2
 800aa22:	d0ec      	beq.n	800a9fe <SPI_CloseTx_ISR+0x26>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	685a      	ldr	r2, [r3, #4]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	21a0      	movs	r1, #160	; 0xa0
 800aa30:	438a      	bics	r2, r1
 800aa32:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800aa34:	697a      	ldr	r2, [r7, #20]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2164      	movs	r1, #100	; 0x64
 800aa3a:	0018      	movs	r0, r3
 800aa3c:	f7ff ff8e 	bl	800a95c <SPI_EndRxTxTransaction>
 800aa40:	1e03      	subs	r3, r0, #0
 800aa42:	d005      	beq.n	800aa50 <SPI_CloseTx_ISR+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa48:	2220      	movs	r2, #32
 800aa4a:	431a      	orrs	r2, r3
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	689b      	ldr	r3, [r3, #8]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d10a      	bne.n	800aa6e <SPI_CloseTx_ISR+0x96>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aa58:	2300      	movs	r3, #0
 800aa5a:	60fb      	str	r3, [r7, #12]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	68db      	ldr	r3, [r3, #12]
 800aa62:	60fb      	str	r3, [r7, #12]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	689b      	ldr	r3, [r3, #8]
 800aa6a:	60fb      	str	r3, [r7, #12]
 800aa6c:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2251      	movs	r2, #81	; 0x51
 800aa72:	2101      	movs	r1, #1
 800aa74:	5499      	strb	r1, [r3, r2]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d004      	beq.n	800aa88 <SPI_CloseTx_ISR+0xb0>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	0018      	movs	r0, r3
 800aa82:	f7ff fe05 	bl	800a690 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800aa86:	e003      	b.n	800aa90 <SPI_CloseTx_ISR+0xb8>
    HAL_SPI_TxCpltCallback(hspi);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	0018      	movs	r0, r3
 800aa8c:	f7f7 f94e 	bl	8001d2c <HAL_SPI_TxCpltCallback>
}
 800aa90:	46c0      	nop			; (mov r8, r8)
 800aa92:	46bd      	mov	sp, r7
 800aa94:	b006      	add	sp, #24
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	20000010 	.word	0x20000010
 800aa9c:	00005dc0 	.word	0x00005dc0

0800aaa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b082      	sub	sp, #8
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d101      	bne.n	800aab2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aaae:	2301      	movs	r3, #1
 800aab0:	e01e      	b.n	800aaf0 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2239      	movs	r2, #57	; 0x39
 800aab6:	5c9b      	ldrb	r3, [r3, r2]
 800aab8:	b2db      	uxtb	r3, r3
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d107      	bne.n	800aace <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2238      	movs	r2, #56	; 0x38
 800aac2:	2100      	movs	r1, #0
 800aac4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	0018      	movs	r0, r3
 800aaca:	f7f9 fe4b 	bl	8004764 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2239      	movs	r2, #57	; 0x39
 800aad2:	2102      	movs	r1, #2
 800aad4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	3304      	adds	r3, #4
 800aade:	0019      	movs	r1, r3
 800aae0:	0010      	movs	r0, r2
 800aae2:	f000 fc65 	bl	800b3b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2239      	movs	r2, #57	; 0x39
 800aaea:	2101      	movs	r1, #1
 800aaec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aaee:	2300      	movs	r3, #0
}
 800aaf0:	0018      	movs	r0, r3
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	b002      	add	sp, #8
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b084      	sub	sp, #16
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	68da      	ldr	r2, [r3, #12]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	2101      	movs	r1, #1
 800ab0c:	430a      	orrs	r2, r1
 800ab0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	689b      	ldr	r3, [r3, #8]
 800ab16:	2207      	movs	r2, #7
 800ab18:	4013      	ands	r3, r2
 800ab1a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2b06      	cmp	r3, #6
 800ab20:	d007      	beq.n	800ab32 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	681a      	ldr	r2, [r3, #0]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	2101      	movs	r1, #1
 800ab2e:	430a      	orrs	r2, r1
 800ab30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ab32:	2300      	movs	r3, #0
}
 800ab34:	0018      	movs	r0, r3
 800ab36:	46bd      	mov	sp, r7
 800ab38:	b004      	add	sp, #16
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	68da      	ldr	r2, [r3, #12]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	2101      	movs	r1, #1
 800ab50:	438a      	bics	r2, r1
 800ab52:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	6a1b      	ldr	r3, [r3, #32]
 800ab5a:	4a08      	ldr	r2, [pc, #32]	; (800ab7c <HAL_TIM_Base_Stop_IT+0x40>)
 800ab5c:	4013      	ands	r3, r2
 800ab5e:	d107      	bne.n	800ab70 <HAL_TIM_Base_Stop_IT+0x34>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	681a      	ldr	r2, [r3, #0]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	2101      	movs	r1, #1
 800ab6c:	438a      	bics	r2, r1
 800ab6e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ab70:	2300      	movs	r3, #0
}
 800ab72:	0018      	movs	r0, r3
 800ab74:	46bd      	mov	sp, r7
 800ab76:	b002      	add	sp, #8
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	46c0      	nop			; (mov r8, r8)
 800ab7c:	00001111 	.word	0x00001111

0800ab80 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b082      	sub	sp, #8
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d101      	bne.n	800ab92 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	e01e      	b.n	800abd0 <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2239      	movs	r2, #57	; 0x39
 800ab96:	5c9b      	ldrb	r3, [r3, r2]
 800ab98:	b2db      	uxtb	r3, r3
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d107      	bne.n	800abae <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2238      	movs	r2, #56	; 0x38
 800aba2:	2100      	movs	r1, #0
 800aba4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	0018      	movs	r0, r3
 800abaa:	f000 f815 	bl	800abd8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2239      	movs	r2, #57	; 0x39
 800abb2:	2102      	movs	r1, #2
 800abb4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	3304      	adds	r3, #4
 800abbe:	0019      	movs	r1, r3
 800abc0:	0010      	movs	r0, r2
 800abc2:	f000 fbf5 	bl	800b3b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2239      	movs	r2, #57	; 0x39
 800abca:	2101      	movs	r1, #1
 800abcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800abce:	2300      	movs	r3, #0
}
 800abd0:	0018      	movs	r0, r3
 800abd2:	46bd      	mov	sp, r7
 800abd4:	b002      	add	sp, #8
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b082      	sub	sp, #8
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800abe0:	46c0      	nop			; (mov r8, r8)
 800abe2:	46bd      	mov	sp, r7
 800abe4:	b002      	add	sp, #8
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	2b04      	cmp	r3, #4
 800abf6:	d011      	beq.n	800ac1c <HAL_TIM_OC_Start_IT+0x34>
 800abf8:	d802      	bhi.n	800ac00 <HAL_TIM_OC_Start_IT+0x18>
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d005      	beq.n	800ac0a <HAL_TIM_OC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 800abfe:	e028      	b.n	800ac52 <HAL_TIM_OC_Start_IT+0x6a>
  switch (Channel)
 800ac00:	2b08      	cmp	r3, #8
 800ac02:	d014      	beq.n	800ac2e <HAL_TIM_OC_Start_IT+0x46>
 800ac04:	2b0c      	cmp	r3, #12
 800ac06:	d01b      	beq.n	800ac40 <HAL_TIM_OC_Start_IT+0x58>
      break;
 800ac08:	e023      	b.n	800ac52 <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	68da      	ldr	r2, [r3, #12]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	2102      	movs	r1, #2
 800ac16:	430a      	orrs	r2, r1
 800ac18:	60da      	str	r2, [r3, #12]
      break;
 800ac1a:	e01a      	b.n	800ac52 <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	68da      	ldr	r2, [r3, #12]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	2104      	movs	r1, #4
 800ac28:	430a      	orrs	r2, r1
 800ac2a:	60da      	str	r2, [r3, #12]
      break;
 800ac2c:	e011      	b.n	800ac52 <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	68da      	ldr	r2, [r3, #12]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	2108      	movs	r1, #8
 800ac3a:	430a      	orrs	r2, r1
 800ac3c:	60da      	str	r2, [r3, #12]
      break;
 800ac3e:	e008      	b.n	800ac52 <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	68da      	ldr	r2, [r3, #12]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	2110      	movs	r1, #16
 800ac4c:	430a      	orrs	r2, r1
 800ac4e:	60da      	str	r2, [r3, #12]
      break;
 800ac50:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	6839      	ldr	r1, [r7, #0]
 800ac58:	2201      	movs	r2, #1
 800ac5a:	0018      	movs	r0, r3
 800ac5c:	f000 fda4 	bl	800b7a8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	2207      	movs	r2, #7
 800ac68:	4013      	ands	r3, r2
 800ac6a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2b06      	cmp	r3, #6
 800ac70:	d007      	beq.n	800ac82 <HAL_TIM_OC_Start_IT+0x9a>
  {
    __HAL_TIM_ENABLE(htim);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	2101      	movs	r1, #1
 800ac7e:	430a      	orrs	r2, r1
 800ac80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ac82:	2300      	movs	r3, #0
}
 800ac84:	0018      	movs	r0, r3
 800ac86:	46bd      	mov	sp, r7
 800ac88:	b004      	add	sp, #16
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	2b04      	cmp	r3, #4
 800ac9a:	d011      	beq.n	800acc0 <HAL_TIM_OC_Stop_IT+0x34>
 800ac9c:	d802      	bhi.n	800aca4 <HAL_TIM_OC_Stop_IT+0x18>
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d005      	beq.n	800acae <HAL_TIM_OC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 800aca2:	e028      	b.n	800acf6 <HAL_TIM_OC_Stop_IT+0x6a>
  switch (Channel)
 800aca4:	2b08      	cmp	r3, #8
 800aca6:	d014      	beq.n	800acd2 <HAL_TIM_OC_Stop_IT+0x46>
 800aca8:	2b0c      	cmp	r3, #12
 800acaa:	d01b      	beq.n	800ace4 <HAL_TIM_OC_Stop_IT+0x58>
      break;
 800acac:	e023      	b.n	800acf6 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	68da      	ldr	r2, [r3, #12]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	2102      	movs	r1, #2
 800acba:	438a      	bics	r2, r1
 800acbc:	60da      	str	r2, [r3, #12]
      break;
 800acbe:	e01a      	b.n	800acf6 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	68da      	ldr	r2, [r3, #12]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	2104      	movs	r1, #4
 800accc:	438a      	bics	r2, r1
 800acce:	60da      	str	r2, [r3, #12]
      break;
 800acd0:	e011      	b.n	800acf6 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	68da      	ldr	r2, [r3, #12]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	2108      	movs	r1, #8
 800acde:	438a      	bics	r2, r1
 800ace0:	60da      	str	r2, [r3, #12]
      break;
 800ace2:	e008      	b.n	800acf6 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	68da      	ldr	r2, [r3, #12]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	2110      	movs	r1, #16
 800acf0:	438a      	bics	r2, r1
 800acf2:	60da      	str	r2, [r3, #12]
      break;
 800acf4:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	6839      	ldr	r1, [r7, #0]
 800acfc:	2200      	movs	r2, #0
 800acfe:	0018      	movs	r0, r3
 800ad00:	f000 fd52 	bl	800b7a8 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	6a1b      	ldr	r3, [r3, #32]
 800ad0a:	4a08      	ldr	r2, [pc, #32]	; (800ad2c <HAL_TIM_OC_Stop_IT+0xa0>)
 800ad0c:	4013      	ands	r3, r2
 800ad0e:	d107      	bne.n	800ad20 <HAL_TIM_OC_Stop_IT+0x94>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	681a      	ldr	r2, [r3, #0]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	2101      	movs	r1, #1
 800ad1c:	438a      	bics	r2, r1
 800ad1e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ad20:	2300      	movs	r3, #0
}
 800ad22:	0018      	movs	r0, r3
 800ad24:	46bd      	mov	sp, r7
 800ad26:	b002      	add	sp, #8
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	46c0      	nop			; (mov r8, r8)
 800ad2c:	00001111 	.word	0x00001111

0800ad30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d101      	bne.n	800ad42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	e01e      	b.n	800ad80 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2239      	movs	r2, #57	; 0x39
 800ad46:	5c9b      	ldrb	r3, [r3, r2]
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d107      	bne.n	800ad5e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2238      	movs	r2, #56	; 0x38
 800ad52:	2100      	movs	r1, #0
 800ad54:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	0018      	movs	r0, r3
 800ad5a:	f000 f815 	bl	800ad88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2239      	movs	r2, #57	; 0x39
 800ad62:	2102      	movs	r1, #2
 800ad64:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	3304      	adds	r3, #4
 800ad6e:	0019      	movs	r1, r3
 800ad70:	0010      	movs	r0, r2
 800ad72:	f000 fb1d 	bl	800b3b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2239      	movs	r2, #57	; 0x39
 800ad7a:	2101      	movs	r1, #1
 800ad7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ad7e:	2300      	movs	r3, #0
}
 800ad80:	0018      	movs	r0, r3
 800ad82:	46bd      	mov	sp, r7
 800ad84:	b002      	add	sp, #8
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ad90:	46c0      	nop			; (mov r8, r8)
 800ad92:	46bd      	mov	sp, r7
 800ad94:	b002      	add	sp, #8
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	6839      	ldr	r1, [r7, #0]
 800ada8:	2201      	movs	r2, #1
 800adaa:	0018      	movs	r0, r3
 800adac:	f000 fcfc 	bl	800b7a8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	689b      	ldr	r3, [r3, #8]
 800adb6:	2207      	movs	r2, #7
 800adb8:	4013      	ands	r3, r2
 800adba:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2b06      	cmp	r3, #6
 800adc0:	d007      	beq.n	800add2 <HAL_TIM_PWM_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	2101      	movs	r1, #1
 800adce:	430a      	orrs	r2, r1
 800add0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800add2:	2300      	movs	r3, #0
}
 800add4:	0018      	movs	r0, r3
 800add6:	46bd      	mov	sp, r7
 800add8:	b004      	add	sp, #16
 800adda:	bd80      	pop	{r7, pc}

0800addc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	6839      	ldr	r1, [r7, #0]
 800adec:	2200      	movs	r2, #0
 800adee:	0018      	movs	r0, r3
 800adf0:	f000 fcda 	bl	800b7a8 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	6a1b      	ldr	r3, [r3, #32]
 800adfa:	4a0a      	ldr	r2, [pc, #40]	; (800ae24 <HAL_TIM_PWM_Stop+0x48>)
 800adfc:	4013      	ands	r3, r2
 800adfe:	d107      	bne.n	800ae10 <HAL_TIM_PWM_Stop+0x34>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	2101      	movs	r1, #1
 800ae0c:	438a      	bics	r2, r1
 800ae0e:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2239      	movs	r2, #57	; 0x39
 800ae14:	2101      	movs	r1, #1
 800ae16:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800ae18:	2300      	movs	r3, #0
}
 800ae1a:	0018      	movs	r0, r3
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	b002      	add	sp, #8
 800ae20:	bd80      	pop	{r7, pc}
 800ae22:	46c0      	nop			; (mov r8, r8)
 800ae24:	00001111 	.word	0x00001111

0800ae28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	691b      	ldr	r3, [r3, #16]
 800ae36:	2202      	movs	r2, #2
 800ae38:	4013      	ands	r3, r2
 800ae3a:	2b02      	cmp	r3, #2
 800ae3c:	d124      	bne.n	800ae88 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	68db      	ldr	r3, [r3, #12]
 800ae44:	2202      	movs	r2, #2
 800ae46:	4013      	ands	r3, r2
 800ae48:	2b02      	cmp	r3, #2
 800ae4a:	d11d      	bne.n	800ae88 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	2203      	movs	r2, #3
 800ae52:	4252      	negs	r2, r2
 800ae54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2201      	movs	r2, #1
 800ae5a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	699b      	ldr	r3, [r3, #24]
 800ae62:	2203      	movs	r2, #3
 800ae64:	4013      	ands	r3, r2
 800ae66:	d004      	beq.n	800ae72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	0018      	movs	r0, r3
 800ae6c:	f000 fa88 	bl	800b380 <HAL_TIM_IC_CaptureCallback>
 800ae70:	e007      	b.n	800ae82 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	0018      	movs	r0, r3
 800ae76:	f7f9 fe65 	bl	8004b44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	0018      	movs	r0, r3
 800ae7e:	f000 fa87 	bl	800b390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	691b      	ldr	r3, [r3, #16]
 800ae8e:	2204      	movs	r2, #4
 800ae90:	4013      	ands	r3, r2
 800ae92:	2b04      	cmp	r3, #4
 800ae94:	d125      	bne.n	800aee2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	68db      	ldr	r3, [r3, #12]
 800ae9c:	2204      	movs	r2, #4
 800ae9e:	4013      	ands	r3, r2
 800aea0:	2b04      	cmp	r3, #4
 800aea2:	d11e      	bne.n	800aee2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	2205      	movs	r2, #5
 800aeaa:	4252      	negs	r2, r2
 800aeac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2202      	movs	r2, #2
 800aeb2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	699a      	ldr	r2, [r3, #24]
 800aeba:	23c0      	movs	r3, #192	; 0xc0
 800aebc:	009b      	lsls	r3, r3, #2
 800aebe:	4013      	ands	r3, r2
 800aec0:	d004      	beq.n	800aecc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	0018      	movs	r0, r3
 800aec6:	f000 fa5b 	bl	800b380 <HAL_TIM_IC_CaptureCallback>
 800aeca:	e007      	b.n	800aedc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	0018      	movs	r0, r3
 800aed0:	f7f9 fe38 	bl	8004b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	0018      	movs	r0, r3
 800aed8:	f000 fa5a 	bl	800b390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	691b      	ldr	r3, [r3, #16]
 800aee8:	2208      	movs	r2, #8
 800aeea:	4013      	ands	r3, r2
 800aeec:	2b08      	cmp	r3, #8
 800aeee:	d124      	bne.n	800af3a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	68db      	ldr	r3, [r3, #12]
 800aef6:	2208      	movs	r2, #8
 800aef8:	4013      	ands	r3, r2
 800aefa:	2b08      	cmp	r3, #8
 800aefc:	d11d      	bne.n	800af3a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	2209      	movs	r2, #9
 800af04:	4252      	negs	r2, r2
 800af06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2204      	movs	r2, #4
 800af0c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	69db      	ldr	r3, [r3, #28]
 800af14:	2203      	movs	r2, #3
 800af16:	4013      	ands	r3, r2
 800af18:	d004      	beq.n	800af24 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	0018      	movs	r0, r3
 800af1e:	f000 fa2f 	bl	800b380 <HAL_TIM_IC_CaptureCallback>
 800af22:	e007      	b.n	800af34 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	0018      	movs	r0, r3
 800af28:	f7f9 fe0c 	bl	8004b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	0018      	movs	r0, r3
 800af30:	f000 fa2e 	bl	800b390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2200      	movs	r2, #0
 800af38:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	691b      	ldr	r3, [r3, #16]
 800af40:	2210      	movs	r2, #16
 800af42:	4013      	ands	r3, r2
 800af44:	2b10      	cmp	r3, #16
 800af46:	d125      	bne.n	800af94 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	68db      	ldr	r3, [r3, #12]
 800af4e:	2210      	movs	r2, #16
 800af50:	4013      	ands	r3, r2
 800af52:	2b10      	cmp	r3, #16
 800af54:	d11e      	bne.n	800af94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	2211      	movs	r2, #17
 800af5c:	4252      	negs	r2, r2
 800af5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2208      	movs	r2, #8
 800af64:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	69da      	ldr	r2, [r3, #28]
 800af6c:	23c0      	movs	r3, #192	; 0xc0
 800af6e:	009b      	lsls	r3, r3, #2
 800af70:	4013      	ands	r3, r2
 800af72:	d004      	beq.n	800af7e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	0018      	movs	r0, r3
 800af78:	f000 fa02 	bl	800b380 <HAL_TIM_IC_CaptureCallback>
 800af7c:	e007      	b.n	800af8e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	0018      	movs	r0, r3
 800af82:	f7f9 fddf 	bl	8004b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	0018      	movs	r0, r3
 800af8a:	f000 fa01 	bl	800b390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2200      	movs	r2, #0
 800af92:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	691b      	ldr	r3, [r3, #16]
 800af9a:	2201      	movs	r2, #1
 800af9c:	4013      	ands	r3, r2
 800af9e:	2b01      	cmp	r3, #1
 800afa0:	d10f      	bne.n	800afc2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	68db      	ldr	r3, [r3, #12]
 800afa8:	2201      	movs	r2, #1
 800afaa:	4013      	ands	r3, r2
 800afac:	2b01      	cmp	r3, #1
 800afae:	d108      	bne.n	800afc2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	2202      	movs	r2, #2
 800afb6:	4252      	negs	r2, r2
 800afb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	0018      	movs	r0, r3
 800afbe:	f7f9 fd85 	bl	8004acc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	691b      	ldr	r3, [r3, #16]
 800afc8:	2240      	movs	r2, #64	; 0x40
 800afca:	4013      	ands	r3, r2
 800afcc:	2b40      	cmp	r3, #64	; 0x40
 800afce:	d10f      	bne.n	800aff0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	68db      	ldr	r3, [r3, #12]
 800afd6:	2240      	movs	r2, #64	; 0x40
 800afd8:	4013      	ands	r3, r2
 800afda:	2b40      	cmp	r3, #64	; 0x40
 800afdc:	d108      	bne.n	800aff0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	2241      	movs	r2, #65	; 0x41
 800afe4:	4252      	negs	r2, r2
 800afe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	0018      	movs	r0, r3
 800afec:	f000 f9d8 	bl	800b3a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aff0:	46c0      	nop			; (mov r8, r8)
 800aff2:	46bd      	mov	sp, r7
 800aff4:	b002      	add	sp, #8
 800aff6:	bd80      	pop	{r7, pc}

0800aff8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b084      	sub	sp, #16
 800affc:	af00      	add	r7, sp, #0
 800affe:	60f8      	str	r0, [r7, #12]
 800b000:	60b9      	str	r1, [r7, #8]
 800b002:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2238      	movs	r2, #56	; 0x38
 800b008:	5c9b      	ldrb	r3, [r3, r2]
 800b00a:	2b01      	cmp	r3, #1
 800b00c:	d101      	bne.n	800b012 <HAL_TIM_OC_ConfigChannel+0x1a>
 800b00e:	2302      	movs	r3, #2
 800b010:	e03c      	b.n	800b08c <HAL_TIM_OC_ConfigChannel+0x94>
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2238      	movs	r2, #56	; 0x38
 800b016:	2101      	movs	r1, #1
 800b018:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2239      	movs	r2, #57	; 0x39
 800b01e:	2102      	movs	r1, #2
 800b020:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2b04      	cmp	r3, #4
 800b026:	d010      	beq.n	800b04a <HAL_TIM_OC_ConfigChannel+0x52>
 800b028:	d802      	bhi.n	800b030 <HAL_TIM_OC_ConfigChannel+0x38>
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d005      	beq.n	800b03a <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 800b02e:	e024      	b.n	800b07a <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 800b030:	2b08      	cmp	r3, #8
 800b032:	d012      	beq.n	800b05a <HAL_TIM_OC_ConfigChannel+0x62>
 800b034:	2b0c      	cmp	r3, #12
 800b036:	d018      	beq.n	800b06a <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 800b038:	e01f      	b.n	800b07a <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	68ba      	ldr	r2, [r7, #8]
 800b040:	0011      	movs	r1, r2
 800b042:	0018      	movs	r0, r3
 800b044:	f000 fa12 	bl	800b46c <TIM_OC1_SetConfig>
      break;
 800b048:	e017      	b.n	800b07a <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	68ba      	ldr	r2, [r7, #8]
 800b050:	0011      	movs	r1, r2
 800b052:	0018      	movs	r0, r3
 800b054:	f000 fa46 	bl	800b4e4 <TIM_OC2_SetConfig>
      break;
 800b058:	e00f      	b.n	800b07a <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	68ba      	ldr	r2, [r7, #8]
 800b060:	0011      	movs	r1, r2
 800b062:	0018      	movs	r0, r3
 800b064:	f000 fa80 	bl	800b568 <TIM_OC3_SetConfig>
      break;
 800b068:	e007      	b.n	800b07a <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	68ba      	ldr	r2, [r7, #8]
 800b070:	0011      	movs	r1, r2
 800b072:	0018      	movs	r0, r3
 800b074:	f000 fab8 	bl	800b5e8 <TIM_OC4_SetConfig>
      break;
 800b078:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	2239      	movs	r2, #57	; 0x39
 800b07e:	2101      	movs	r1, #1
 800b080:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	2238      	movs	r2, #56	; 0x38
 800b086:	2100      	movs	r1, #0
 800b088:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b08a:	2300      	movs	r3, #0
}
 800b08c:	0018      	movs	r0, r3
 800b08e:	46bd      	mov	sp, r7
 800b090:	b004      	add	sp, #16
 800b092:	bd80      	pop	{r7, pc}

0800b094 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b084      	sub	sp, #16
 800b098:	af00      	add	r7, sp, #0
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	60b9      	str	r1, [r7, #8]
 800b09e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2238      	movs	r2, #56	; 0x38
 800b0a4:	5c9b      	ldrb	r3, [r3, r2]
 800b0a6:	2b01      	cmp	r3, #1
 800b0a8:	d101      	bne.n	800b0ae <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b0aa:	2302      	movs	r3, #2
 800b0ac:	e0a4      	b.n	800b1f8 <HAL_TIM_PWM_ConfigChannel+0x164>
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2238      	movs	r2, #56	; 0x38
 800b0b2:	2101      	movs	r1, #1
 800b0b4:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2239      	movs	r2, #57	; 0x39
 800b0ba:	2102      	movs	r1, #2
 800b0bc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2b04      	cmp	r3, #4
 800b0c2:	d029      	beq.n	800b118 <HAL_TIM_PWM_ConfigChannel+0x84>
 800b0c4:	d802      	bhi.n	800b0cc <HAL_TIM_PWM_ConfigChannel+0x38>
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d005      	beq.n	800b0d6 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 800b0ca:	e08c      	b.n	800b1e6 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 800b0cc:	2b08      	cmp	r3, #8
 800b0ce:	d046      	beq.n	800b15e <HAL_TIM_PWM_ConfigChannel+0xca>
 800b0d0:	2b0c      	cmp	r3, #12
 800b0d2:	d065      	beq.n	800b1a0 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 800b0d4:	e087      	b.n	800b1e6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	68ba      	ldr	r2, [r7, #8]
 800b0dc:	0011      	movs	r1, r2
 800b0de:	0018      	movs	r0, r3
 800b0e0:	f000 f9c4 	bl	800b46c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	699a      	ldr	r2, [r3, #24]
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	2108      	movs	r1, #8
 800b0f0:	430a      	orrs	r2, r1
 800b0f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	699a      	ldr	r2, [r3, #24]
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	2104      	movs	r1, #4
 800b100:	438a      	bics	r2, r1
 800b102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	6999      	ldr	r1, [r3, #24]
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	68da      	ldr	r2, [r3, #12]
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	430a      	orrs	r2, r1
 800b114:	619a      	str	r2, [r3, #24]
      break;
 800b116:	e066      	b.n	800b1e6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	68ba      	ldr	r2, [r7, #8]
 800b11e:	0011      	movs	r1, r2
 800b120:	0018      	movs	r0, r3
 800b122:	f000 f9df 	bl	800b4e4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	699a      	ldr	r2, [r3, #24]
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	2180      	movs	r1, #128	; 0x80
 800b132:	0109      	lsls	r1, r1, #4
 800b134:	430a      	orrs	r2, r1
 800b136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	699a      	ldr	r2, [r3, #24]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	492f      	ldr	r1, [pc, #188]	; (800b200 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 800b144:	400a      	ands	r2, r1
 800b146:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	6999      	ldr	r1, [r3, #24]
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	68db      	ldr	r3, [r3, #12]
 800b152:	021a      	lsls	r2, r3, #8
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	430a      	orrs	r2, r1
 800b15a:	619a      	str	r2, [r3, #24]
      break;
 800b15c:	e043      	b.n	800b1e6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	68ba      	ldr	r2, [r7, #8]
 800b164:	0011      	movs	r1, r2
 800b166:	0018      	movs	r0, r3
 800b168:	f000 f9fe 	bl	800b568 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	69da      	ldr	r2, [r3, #28]
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	2108      	movs	r1, #8
 800b178:	430a      	orrs	r2, r1
 800b17a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	69da      	ldr	r2, [r3, #28]
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	2104      	movs	r1, #4
 800b188:	438a      	bics	r2, r1
 800b18a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	69d9      	ldr	r1, [r3, #28]
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	68da      	ldr	r2, [r3, #12]
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	430a      	orrs	r2, r1
 800b19c:	61da      	str	r2, [r3, #28]
      break;
 800b19e:	e022      	b.n	800b1e6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	68ba      	ldr	r2, [r7, #8]
 800b1a6:	0011      	movs	r1, r2
 800b1a8:	0018      	movs	r0, r3
 800b1aa:	f000 fa1d 	bl	800b5e8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	69da      	ldr	r2, [r3, #28]
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	2180      	movs	r1, #128	; 0x80
 800b1ba:	0109      	lsls	r1, r1, #4
 800b1bc:	430a      	orrs	r2, r1
 800b1be:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	69da      	ldr	r2, [r3, #28]
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	490d      	ldr	r1, [pc, #52]	; (800b200 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 800b1cc:	400a      	ands	r2, r1
 800b1ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	69d9      	ldr	r1, [r3, #28]
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	021a      	lsls	r2, r3, #8
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	430a      	orrs	r2, r1
 800b1e2:	61da      	str	r2, [r3, #28]
      break;
 800b1e4:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2239      	movs	r2, #57	; 0x39
 800b1ea:	2101      	movs	r1, #1
 800b1ec:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	2238      	movs	r2, #56	; 0x38
 800b1f2:	2100      	movs	r1, #0
 800b1f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b1f6:	2300      	movs	r3, #0
}
 800b1f8:	0018      	movs	r0, r3
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	b004      	add	sp, #16
 800b1fe:	bd80      	pop	{r7, pc}
 800b200:	fffffbff 	.word	0xfffffbff

0800b204 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2238      	movs	r2, #56	; 0x38
 800b212:	5c9b      	ldrb	r3, [r3, r2]
 800b214:	2b01      	cmp	r3, #1
 800b216:	d101      	bne.n	800b21c <HAL_TIM_ConfigClockSource+0x18>
 800b218:	2302      	movs	r3, #2
 800b21a:	e0ab      	b.n	800b374 <HAL_TIM_ConfigClockSource+0x170>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2238      	movs	r2, #56	; 0x38
 800b220:	2101      	movs	r1, #1
 800b222:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2239      	movs	r2, #57	; 0x39
 800b228:	2102      	movs	r1, #2
 800b22a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	689b      	ldr	r3, [r3, #8]
 800b232:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2277      	movs	r2, #119	; 0x77
 800b238:	4393      	bics	r3, r2
 800b23a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	4a4f      	ldr	r2, [pc, #316]	; (800b37c <HAL_TIM_ConfigClockSource+0x178>)
 800b240:	4013      	ands	r3, r2
 800b242:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	68fa      	ldr	r2, [r7, #12]
 800b24a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	2b40      	cmp	r3, #64	; 0x40
 800b252:	d100      	bne.n	800b256 <HAL_TIM_ConfigClockSource+0x52>
 800b254:	e06b      	b.n	800b32e <HAL_TIM_ConfigClockSource+0x12a>
 800b256:	d80e      	bhi.n	800b276 <HAL_TIM_ConfigClockSource+0x72>
 800b258:	2b10      	cmp	r3, #16
 800b25a:	d100      	bne.n	800b25e <HAL_TIM_ConfigClockSource+0x5a>
 800b25c:	e077      	b.n	800b34e <HAL_TIM_ConfigClockSource+0x14a>
 800b25e:	d803      	bhi.n	800b268 <HAL_TIM_ConfigClockSource+0x64>
 800b260:	2b00      	cmp	r3, #0
 800b262:	d100      	bne.n	800b266 <HAL_TIM_ConfigClockSource+0x62>
 800b264:	e073      	b.n	800b34e <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800b266:	e07c      	b.n	800b362 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800b268:	2b20      	cmp	r3, #32
 800b26a:	d100      	bne.n	800b26e <HAL_TIM_ConfigClockSource+0x6a>
 800b26c:	e06f      	b.n	800b34e <HAL_TIM_ConfigClockSource+0x14a>
 800b26e:	2b30      	cmp	r3, #48	; 0x30
 800b270:	d100      	bne.n	800b274 <HAL_TIM_ConfigClockSource+0x70>
 800b272:	e06c      	b.n	800b34e <HAL_TIM_ConfigClockSource+0x14a>
      break;
 800b274:	e075      	b.n	800b362 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800b276:	2b70      	cmp	r3, #112	; 0x70
 800b278:	d00e      	beq.n	800b298 <HAL_TIM_ConfigClockSource+0x94>
 800b27a:	d804      	bhi.n	800b286 <HAL_TIM_ConfigClockSource+0x82>
 800b27c:	2b50      	cmp	r3, #80	; 0x50
 800b27e:	d036      	beq.n	800b2ee <HAL_TIM_ConfigClockSource+0xea>
 800b280:	2b60      	cmp	r3, #96	; 0x60
 800b282:	d044      	beq.n	800b30e <HAL_TIM_ConfigClockSource+0x10a>
      break;
 800b284:	e06d      	b.n	800b362 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800b286:	2280      	movs	r2, #128	; 0x80
 800b288:	0152      	lsls	r2, r2, #5
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d068      	beq.n	800b360 <HAL_TIM_ConfigClockSource+0x15c>
 800b28e:	2280      	movs	r2, #128	; 0x80
 800b290:	0192      	lsls	r2, r2, #6
 800b292:	4293      	cmp	r3, r2
 800b294:	d017      	beq.n	800b2c6 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800b296:	e064      	b.n	800b362 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6818      	ldr	r0, [r3, #0]
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	6899      	ldr	r1, [r3, #8]
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	685a      	ldr	r2, [r3, #4]
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	68db      	ldr	r3, [r3, #12]
 800b2a8:	f000 fa5e 	bl	800b768 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	689b      	ldr	r3, [r3, #8]
 800b2b2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2277      	movs	r2, #119	; 0x77
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	68fa      	ldr	r2, [r7, #12]
 800b2c2:	609a      	str	r2, [r3, #8]
      break;
 800b2c4:	e04d      	b.n	800b362 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6818      	ldr	r0, [r3, #0]
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	6899      	ldr	r1, [r3, #8]
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	685a      	ldr	r2, [r3, #4]
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	68db      	ldr	r3, [r3, #12]
 800b2d6:	f000 fa47 	bl	800b768 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	689a      	ldr	r2, [r3, #8]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	2180      	movs	r1, #128	; 0x80
 800b2e6:	01c9      	lsls	r1, r1, #7
 800b2e8:	430a      	orrs	r2, r1
 800b2ea:	609a      	str	r2, [r3, #8]
      break;
 800b2ec:	e039      	b.n	800b362 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6818      	ldr	r0, [r3, #0]
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	6859      	ldr	r1, [r3, #4]
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	68db      	ldr	r3, [r3, #12]
 800b2fa:	001a      	movs	r2, r3
 800b2fc:	f000 f9ba 	bl	800b674 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	2150      	movs	r1, #80	; 0x50
 800b306:	0018      	movs	r0, r3
 800b308:	f000 fa14 	bl	800b734 <TIM_ITRx_SetConfig>
      break;
 800b30c:	e029      	b.n	800b362 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6818      	ldr	r0, [r3, #0]
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	6859      	ldr	r1, [r3, #4]
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	68db      	ldr	r3, [r3, #12]
 800b31a:	001a      	movs	r2, r3
 800b31c:	f000 f9d8 	bl	800b6d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	2160      	movs	r1, #96	; 0x60
 800b326:	0018      	movs	r0, r3
 800b328:	f000 fa04 	bl	800b734 <TIM_ITRx_SetConfig>
      break;
 800b32c:	e019      	b.n	800b362 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6818      	ldr	r0, [r3, #0]
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	6859      	ldr	r1, [r3, #4]
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	68db      	ldr	r3, [r3, #12]
 800b33a:	001a      	movs	r2, r3
 800b33c:	f000 f99a 	bl	800b674 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	2140      	movs	r1, #64	; 0x40
 800b346:	0018      	movs	r0, r3
 800b348:	f000 f9f4 	bl	800b734 <TIM_ITRx_SetConfig>
      break;
 800b34c:	e009      	b.n	800b362 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681a      	ldr	r2, [r3, #0]
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	0019      	movs	r1, r3
 800b358:	0010      	movs	r0, r2
 800b35a:	f000 f9eb 	bl	800b734 <TIM_ITRx_SetConfig>
      break;
 800b35e:	e000      	b.n	800b362 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 800b360:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2239      	movs	r2, #57	; 0x39
 800b366:	2101      	movs	r1, #1
 800b368:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2238      	movs	r2, #56	; 0x38
 800b36e:	2100      	movs	r1, #0
 800b370:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b372:	2300      	movs	r3, #0
}
 800b374:	0018      	movs	r0, r3
 800b376:	46bd      	mov	sp, r7
 800b378:	b004      	add	sp, #16
 800b37a:	bd80      	pop	{r7, pc}
 800b37c:	ffff00ff 	.word	0xffff00ff

0800b380 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b082      	sub	sp, #8
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b388:	46c0      	nop			; (mov r8, r8)
 800b38a:	46bd      	mov	sp, r7
 800b38c:	b002      	add	sp, #8
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b398:	46c0      	nop			; (mov r8, r8)
 800b39a:	46bd      	mov	sp, r7
 800b39c:	b002      	add	sp, #8
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b3a8:	46c0      	nop			; (mov r8, r8)
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	b002      	add	sp, #8
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	2380      	movs	r3, #128	; 0x80
 800b3c4:	05db      	lsls	r3, r3, #23
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d00b      	beq.n	800b3e2 <TIM_Base_SetConfig+0x32>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	4a23      	ldr	r2, [pc, #140]	; (800b45c <TIM_Base_SetConfig+0xac>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d007      	beq.n	800b3e2 <TIM_Base_SetConfig+0x32>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	4a22      	ldr	r2, [pc, #136]	; (800b460 <TIM_Base_SetConfig+0xb0>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d003      	beq.n	800b3e2 <TIM_Base_SetConfig+0x32>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	4a21      	ldr	r2, [pc, #132]	; (800b464 <TIM_Base_SetConfig+0xb4>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d108      	bne.n	800b3f4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	2270      	movs	r2, #112	; 0x70
 800b3e6:	4393      	bics	r3, r2
 800b3e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	68fa      	ldr	r2, [r7, #12]
 800b3f0:	4313      	orrs	r3, r2
 800b3f2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	2380      	movs	r3, #128	; 0x80
 800b3f8:	05db      	lsls	r3, r3, #23
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d00b      	beq.n	800b416 <TIM_Base_SetConfig+0x66>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	4a16      	ldr	r2, [pc, #88]	; (800b45c <TIM_Base_SetConfig+0xac>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d007      	beq.n	800b416 <TIM_Base_SetConfig+0x66>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	4a15      	ldr	r2, [pc, #84]	; (800b460 <TIM_Base_SetConfig+0xb0>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d003      	beq.n	800b416 <TIM_Base_SetConfig+0x66>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	4a14      	ldr	r2, [pc, #80]	; (800b464 <TIM_Base_SetConfig+0xb4>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d108      	bne.n	800b428 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	4a13      	ldr	r2, [pc, #76]	; (800b468 <TIM_Base_SetConfig+0xb8>)
 800b41a:	4013      	ands	r3, r2
 800b41c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	68db      	ldr	r3, [r3, #12]
 800b422:	68fa      	ldr	r2, [r7, #12]
 800b424:	4313      	orrs	r3, r2
 800b426:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2280      	movs	r2, #128	; 0x80
 800b42c:	4393      	bics	r3, r2
 800b42e:	001a      	movs	r2, r3
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	691b      	ldr	r3, [r3, #16]
 800b434:	4313      	orrs	r3, r2
 800b436:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	68fa      	ldr	r2, [r7, #12]
 800b43c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	689a      	ldr	r2, [r3, #8]
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	681a      	ldr	r2, [r3, #0]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2201      	movs	r2, #1
 800b452:	615a      	str	r2, [r3, #20]
}
 800b454:	46c0      	nop			; (mov r8, r8)
 800b456:	46bd      	mov	sp, r7
 800b458:	b004      	add	sp, #16
 800b45a:	bd80      	pop	{r7, pc}
 800b45c:	40000400 	.word	0x40000400
 800b460:	40010800 	.word	0x40010800
 800b464:	40011400 	.word	0x40011400
 800b468:	fffffcff 	.word	0xfffffcff

0800b46c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b086      	sub	sp, #24
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6a1b      	ldr	r3, [r3, #32]
 800b47a:	2201      	movs	r2, #1
 800b47c:	4393      	bics	r3, r2
 800b47e:	001a      	movs	r2, r3
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6a1b      	ldr	r3, [r3, #32]
 800b488:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	699b      	ldr	r3, [r3, #24]
 800b494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2270      	movs	r2, #112	; 0x70
 800b49a:	4393      	bics	r3, r2
 800b49c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2203      	movs	r2, #3
 800b4a2:	4393      	bics	r3, r2
 800b4a4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	68fa      	ldr	r2, [r7, #12]
 800b4ac:	4313      	orrs	r3, r2
 800b4ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	2202      	movs	r2, #2
 800b4b4:	4393      	bics	r3, r2
 800b4b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	697a      	ldr	r2, [r7, #20]
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	693a      	ldr	r2, [r7, #16]
 800b4c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	68fa      	ldr	r2, [r7, #12]
 800b4cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	685a      	ldr	r2, [r3, #4]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	697a      	ldr	r2, [r7, #20]
 800b4da:	621a      	str	r2, [r3, #32]
}
 800b4dc:	46c0      	nop			; (mov r8, r8)
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	b006      	add	sp, #24
 800b4e2:	bd80      	pop	{r7, pc}

0800b4e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b086      	sub	sp, #24
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6a1b      	ldr	r3, [r3, #32]
 800b4f2:	2210      	movs	r2, #16
 800b4f4:	4393      	bics	r3, r2
 800b4f6:	001a      	movs	r2, r3
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6a1b      	ldr	r3, [r3, #32]
 800b500:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	699b      	ldr	r3, [r3, #24]
 800b50c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	4a13      	ldr	r2, [pc, #76]	; (800b560 <TIM_OC2_SetConfig+0x7c>)
 800b512:	4013      	ands	r3, r2
 800b514:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	4a12      	ldr	r2, [pc, #72]	; (800b564 <TIM_OC2_SetConfig+0x80>)
 800b51a:	4013      	ands	r3, r2
 800b51c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	021b      	lsls	r3, r3, #8
 800b524:	68fa      	ldr	r2, [r7, #12]
 800b526:	4313      	orrs	r3, r2
 800b528:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	2220      	movs	r2, #32
 800b52e:	4393      	bics	r3, r2
 800b530:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	689b      	ldr	r3, [r3, #8]
 800b536:	011b      	lsls	r3, r3, #4
 800b538:	697a      	ldr	r2, [r7, #20]
 800b53a:	4313      	orrs	r3, r2
 800b53c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	693a      	ldr	r2, [r7, #16]
 800b542:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	68fa      	ldr	r2, [r7, #12]
 800b548:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	685a      	ldr	r2, [r3, #4]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	697a      	ldr	r2, [r7, #20]
 800b556:	621a      	str	r2, [r3, #32]
}
 800b558:	46c0      	nop			; (mov r8, r8)
 800b55a:	46bd      	mov	sp, r7
 800b55c:	b006      	add	sp, #24
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	ffff8fff 	.word	0xffff8fff
 800b564:	fffffcff 	.word	0xfffffcff

0800b568 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b086      	sub	sp, #24
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6a1b      	ldr	r3, [r3, #32]
 800b576:	4a1a      	ldr	r2, [pc, #104]	; (800b5e0 <TIM_OC3_SetConfig+0x78>)
 800b578:	401a      	ands	r2, r3
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6a1b      	ldr	r3, [r3, #32]
 800b582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	69db      	ldr	r3, [r3, #28]
 800b58e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2270      	movs	r2, #112	; 0x70
 800b594:	4393      	bics	r3, r2
 800b596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2203      	movs	r2, #3
 800b59c:	4393      	bics	r3, r2
 800b59e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	68fa      	ldr	r2, [r7, #12]
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	4a0d      	ldr	r2, [pc, #52]	; (800b5e4 <TIM_OC3_SetConfig+0x7c>)
 800b5ae:	4013      	ands	r3, r2
 800b5b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	021b      	lsls	r3, r3, #8
 800b5b8:	697a      	ldr	r2, [r7, #20]
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	693a      	ldr	r2, [r7, #16]
 800b5c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	68fa      	ldr	r2, [r7, #12]
 800b5c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	685a      	ldr	r2, [r3, #4]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	697a      	ldr	r2, [r7, #20]
 800b5d6:	621a      	str	r2, [r3, #32]
}
 800b5d8:	46c0      	nop			; (mov r8, r8)
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	b006      	add	sp, #24
 800b5de:	bd80      	pop	{r7, pc}
 800b5e0:	fffffeff 	.word	0xfffffeff
 800b5e4:	fffffdff 	.word	0xfffffdff

0800b5e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b086      	sub	sp, #24
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6a1b      	ldr	r3, [r3, #32]
 800b5f6:	4a1b      	ldr	r2, [pc, #108]	; (800b664 <TIM_OC4_SetConfig+0x7c>)
 800b5f8:	401a      	ands	r2, r3
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6a1b      	ldr	r3, [r3, #32]
 800b602:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	69db      	ldr	r3, [r3, #28]
 800b60e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	4a15      	ldr	r2, [pc, #84]	; (800b668 <TIM_OC4_SetConfig+0x80>)
 800b614:	4013      	ands	r3, r2
 800b616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	4a14      	ldr	r2, [pc, #80]	; (800b66c <TIM_OC4_SetConfig+0x84>)
 800b61c:	4013      	ands	r3, r2
 800b61e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	021b      	lsls	r3, r3, #8
 800b626:	68fa      	ldr	r2, [r7, #12]
 800b628:	4313      	orrs	r3, r2
 800b62a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	4a10      	ldr	r2, [pc, #64]	; (800b670 <TIM_OC4_SetConfig+0x88>)
 800b630:	4013      	ands	r3, r2
 800b632:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	689b      	ldr	r3, [r3, #8]
 800b638:	031b      	lsls	r3, r3, #12
 800b63a:	697a      	ldr	r2, [r7, #20]
 800b63c:	4313      	orrs	r3, r2
 800b63e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	693a      	ldr	r2, [r7, #16]
 800b644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	68fa      	ldr	r2, [r7, #12]
 800b64a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	685a      	ldr	r2, [r3, #4]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	697a      	ldr	r2, [r7, #20]
 800b658:	621a      	str	r2, [r3, #32]
}
 800b65a:	46c0      	nop			; (mov r8, r8)
 800b65c:	46bd      	mov	sp, r7
 800b65e:	b006      	add	sp, #24
 800b660:	bd80      	pop	{r7, pc}
 800b662:	46c0      	nop			; (mov r8, r8)
 800b664:	ffffefff 	.word	0xffffefff
 800b668:	ffff8fff 	.word	0xffff8fff
 800b66c:	fffffcff 	.word	0xfffffcff
 800b670:	ffffdfff 	.word	0xffffdfff

0800b674 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b086      	sub	sp, #24
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	6a1b      	ldr	r3, [r3, #32]
 800b684:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	6a1b      	ldr	r3, [r3, #32]
 800b68a:	2201      	movs	r2, #1
 800b68c:	4393      	bics	r3, r2
 800b68e:	001a      	movs	r2, r3
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	699b      	ldr	r3, [r3, #24]
 800b698:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	22f0      	movs	r2, #240	; 0xf0
 800b69e:	4393      	bics	r3, r2
 800b6a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	011b      	lsls	r3, r3, #4
 800b6a6:	693a      	ldr	r2, [r7, #16]
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	220a      	movs	r2, #10
 800b6b0:	4393      	bics	r3, r2
 800b6b2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b6b4:	697a      	ldr	r2, [r7, #20]
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	4313      	orrs	r3, r2
 800b6ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	693a      	ldr	r2, [r7, #16]
 800b6c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	697a      	ldr	r2, [r7, #20]
 800b6c6:	621a      	str	r2, [r3, #32]
}
 800b6c8:	46c0      	nop			; (mov r8, r8)
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	b006      	add	sp, #24
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b086      	sub	sp, #24
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	60b9      	str	r1, [r7, #8]
 800b6da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	6a1b      	ldr	r3, [r3, #32]
 800b6e0:	2210      	movs	r2, #16
 800b6e2:	4393      	bics	r3, r2
 800b6e4:	001a      	movs	r2, r3
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	699b      	ldr	r3, [r3, #24]
 800b6ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	6a1b      	ldr	r3, [r3, #32]
 800b6f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	4a0d      	ldr	r2, [pc, #52]	; (800b730 <TIM_TI2_ConfigInputStage+0x60>)
 800b6fa:	4013      	ands	r3, r2
 800b6fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	031b      	lsls	r3, r3, #12
 800b702:	697a      	ldr	r2, [r7, #20]
 800b704:	4313      	orrs	r3, r2
 800b706:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	22a0      	movs	r2, #160	; 0xa0
 800b70c:	4393      	bics	r3, r2
 800b70e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	011b      	lsls	r3, r3, #4
 800b714:	693a      	ldr	r2, [r7, #16]
 800b716:	4313      	orrs	r3, r2
 800b718:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	697a      	ldr	r2, [r7, #20]
 800b71e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	693a      	ldr	r2, [r7, #16]
 800b724:	621a      	str	r2, [r3, #32]
}
 800b726:	46c0      	nop			; (mov r8, r8)
 800b728:	46bd      	mov	sp, r7
 800b72a:	b006      	add	sp, #24
 800b72c:	bd80      	pop	{r7, pc}
 800b72e:	46c0      	nop			; (mov r8, r8)
 800b730:	ffff0fff 	.word	0xffff0fff

0800b734 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b084      	sub	sp, #16
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	689b      	ldr	r3, [r3, #8]
 800b742:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	2270      	movs	r2, #112	; 0x70
 800b748:	4393      	bics	r3, r2
 800b74a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b74c:	683a      	ldr	r2, [r7, #0]
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	4313      	orrs	r3, r2
 800b752:	2207      	movs	r2, #7
 800b754:	4313      	orrs	r3, r2
 800b756:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	68fa      	ldr	r2, [r7, #12]
 800b75c:	609a      	str	r2, [r3, #8]
}
 800b75e:	46c0      	nop			; (mov r8, r8)
 800b760:	46bd      	mov	sp, r7
 800b762:	b004      	add	sp, #16
 800b764:	bd80      	pop	{r7, pc}
	...

0800b768 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b086      	sub	sp, #24
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	60b9      	str	r1, [r7, #8]
 800b772:	607a      	str	r2, [r7, #4]
 800b774:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	689b      	ldr	r3, [r3, #8]
 800b77a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	4a09      	ldr	r2, [pc, #36]	; (800b7a4 <TIM_ETR_SetConfig+0x3c>)
 800b780:	4013      	ands	r3, r2
 800b782:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	021a      	lsls	r2, r3, #8
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	431a      	orrs	r2, r3
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	4313      	orrs	r3, r2
 800b790:	697a      	ldr	r2, [r7, #20]
 800b792:	4313      	orrs	r3, r2
 800b794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	697a      	ldr	r2, [r7, #20]
 800b79a:	609a      	str	r2, [r3, #8]
}
 800b79c:	46c0      	nop			; (mov r8, r8)
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	b006      	add	sp, #24
 800b7a2:	bd80      	pop	{r7, pc}
 800b7a4:	ffff00ff 	.word	0xffff00ff

0800b7a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b086      	sub	sp, #24
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	60b9      	str	r1, [r7, #8]
 800b7b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	221f      	movs	r2, #31
 800b7b8:	4013      	ands	r3, r2
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	409a      	lsls	r2, r3
 800b7be:	0013      	movs	r3, r2
 800b7c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	6a1b      	ldr	r3, [r3, #32]
 800b7c6:	697a      	ldr	r2, [r7, #20]
 800b7c8:	43d2      	mvns	r2, r2
 800b7ca:	401a      	ands	r2, r3
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	6a1a      	ldr	r2, [r3, #32]
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	211f      	movs	r1, #31
 800b7d8:	400b      	ands	r3, r1
 800b7da:	6879      	ldr	r1, [r7, #4]
 800b7dc:	4099      	lsls	r1, r3
 800b7de:	000b      	movs	r3, r1
 800b7e0:	431a      	orrs	r2, r3
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	621a      	str	r2, [r3, #32]
}
 800b7e6:	46c0      	nop			; (mov r8, r8)
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	b006      	add	sp, #24
 800b7ec:	bd80      	pop	{r7, pc}

0800b7ee <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b7ee:	b580      	push	{r7, lr}
 800b7f0:	b084      	sub	sp, #16
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	6078      	str	r0, [r7, #4]
 800b7f6:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2238      	movs	r2, #56	; 0x38
 800b7fc:	5c9b      	ldrb	r3, [r3, r2]
 800b7fe:	2b01      	cmp	r3, #1
 800b800:	d101      	bne.n	800b806 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b802:	2302      	movs	r3, #2
 800b804:	e032      	b.n	800b86c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2238      	movs	r2, #56	; 0x38
 800b80a:	2101      	movs	r1, #1
 800b80c:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2239      	movs	r2, #57	; 0x39
 800b812:	2102      	movs	r1, #2
 800b814:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	689b      	ldr	r3, [r3, #8]
 800b824:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2270      	movs	r2, #112	; 0x70
 800b82a:	4393      	bics	r3, r2
 800b82c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	68fa      	ldr	r2, [r7, #12]
 800b834:	4313      	orrs	r3, r2
 800b836:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	2280      	movs	r2, #128	; 0x80
 800b83c:	4393      	bics	r3, r2
 800b83e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	68ba      	ldr	r2, [r7, #8]
 800b846:	4313      	orrs	r3, r2
 800b848:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	68fa      	ldr	r2, [r7, #12]
 800b850:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	68ba      	ldr	r2, [r7, #8]
 800b858:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2239      	movs	r2, #57	; 0x39
 800b85e:	2101      	movs	r1, #1
 800b860:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2238      	movs	r2, #56	; 0x38
 800b866:	2100      	movs	r1, #0
 800b868:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b86a:	2300      	movs	r3, #0
}
 800b86c:	0018      	movs	r0, r3
 800b86e:	46bd      	mov	sp, r7
 800b870:	b004      	add	sp, #16
 800b872:	bd80      	pop	{r7, pc}

0800b874 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b082      	sub	sp, #8
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2238      	movs	r2, #56	; 0x38
 800b882:	5c9b      	ldrb	r3, [r3, r2]
 800b884:	2b01      	cmp	r3, #1
 800b886:	d101      	bne.n	800b88c <HAL_TIMEx_RemapConfig+0x18>
 800b888:	2302      	movs	r3, #2
 800b88a:	e00c      	b.n	800b8a6 <HAL_TIMEx_RemapConfig+0x32>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2238      	movs	r2, #56	; 0x38
 800b890:	2101      	movs	r1, #1
 800b892:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	683a      	ldr	r2, [r7, #0]
 800b89a:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2238      	movs	r2, #56	; 0x38
 800b8a0:	2100      	movs	r1, #0
 800b8a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b8a4:	2300      	movs	r3, #0
}
 800b8a6:	0018      	movs	r0, r3
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	b002      	add	sp, #8
 800b8ac:	bd80      	pop	{r7, pc}
	...

0800b8b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b084      	sub	sp, #16
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b8b8:	4b09      	ldr	r3, [pc, #36]	; (800b8e0 <USB_DisableGlobalInt+0x30>)
 800b8ba:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2240      	movs	r2, #64	; 0x40
 800b8c0:	5a9b      	ldrh	r3, [r3, r2]
 800b8c2:	b29b      	uxth	r3, r3
 800b8c4:	68fa      	ldr	r2, [r7, #12]
 800b8c6:	b292      	uxth	r2, r2
 800b8c8:	43d2      	mvns	r2, r2
 800b8ca:	b292      	uxth	r2, r2
 800b8cc:	4013      	ands	r3, r2
 800b8ce:	b299      	uxth	r1, r3
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2240      	movs	r2, #64	; 0x40
 800b8d4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800b8d6:	2300      	movs	r3, #0
}
 800b8d8:	0018      	movs	r0, r3
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	b004      	add	sp, #16
 800b8de:	bd80      	pop	{r7, pc}
 800b8e0:	0000bf80 	.word	0x0000bf80

0800b8e4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b8e4:	b084      	sub	sp, #16
 800b8e6:	b590      	push	{r4, r7, lr}
 800b8e8:	46c6      	mov	lr, r8
 800b8ea:	b500      	push	{lr}
 800b8ec:	b082      	sub	sp, #8
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	6078      	str	r0, [r7, #4]
 800b8f2:	2004      	movs	r0, #4
 800b8f4:	2410      	movs	r4, #16
 800b8f6:	46a4      	mov	ip, r4
 800b8f8:	2408      	movs	r4, #8
 800b8fa:	46a0      	mov	r8, r4
 800b8fc:	44b8      	add	r8, r7
 800b8fe:	44c4      	add	ip, r8
 800b900:	4460      	add	r0, ip
 800b902:	6001      	str	r1, [r0, #0]
 800b904:	6042      	str	r2, [r0, #4]
 800b906:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2240      	movs	r2, #64	; 0x40
 800b90c:	2101      	movs	r1, #1
 800b90e:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2240      	movs	r2, #64	; 0x40
 800b914:	2100      	movs	r1, #0
 800b916:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2244      	movs	r2, #68	; 0x44
 800b91c:	2100      	movs	r1, #0
 800b91e:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2250      	movs	r2, #80	; 0x50
 800b924:	2100      	movs	r1, #0
 800b926:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800b928:	2300      	movs	r3, #0
}
 800b92a:	0018      	movs	r0, r3
 800b92c:	46bd      	mov	sp, r7
 800b92e:	b002      	add	sp, #8
 800b930:	bc04      	pop	{r2}
 800b932:	4690      	mov	r8, r2
 800b934:	bc90      	pop	{r4, r7}
 800b936:	bc08      	pop	{r3}
 800b938:	b004      	add	sp, #16
 800b93a:	4718      	bx	r3

0800b93c <calloc>:
 800b93c:	b510      	push	{r4, lr}
 800b93e:	4b03      	ldr	r3, [pc, #12]	; (800b94c <calloc+0x10>)
 800b940:	000a      	movs	r2, r1
 800b942:	0001      	movs	r1, r0
 800b944:	6818      	ldr	r0, [r3, #0]
 800b946:	f000 f83e 	bl	800b9c6 <_calloc_r>
 800b94a:	bd10      	pop	{r4, pc}
 800b94c:	20000074 	.word	0x20000074

0800b950 <__errno>:
 800b950:	4b01      	ldr	r3, [pc, #4]	; (800b958 <__errno+0x8>)
 800b952:	6818      	ldr	r0, [r3, #0]
 800b954:	4770      	bx	lr
 800b956:	46c0      	nop			; (mov r8, r8)
 800b958:	20000074 	.word	0x20000074

0800b95c <__libc_init_array>:
 800b95c:	b570      	push	{r4, r5, r6, lr}
 800b95e:	2600      	movs	r6, #0
 800b960:	4d0c      	ldr	r5, [pc, #48]	; (800b994 <__libc_init_array+0x38>)
 800b962:	4c0d      	ldr	r4, [pc, #52]	; (800b998 <__libc_init_array+0x3c>)
 800b964:	1b64      	subs	r4, r4, r5
 800b966:	10a4      	asrs	r4, r4, #2
 800b968:	42a6      	cmp	r6, r4
 800b96a:	d109      	bne.n	800b980 <__libc_init_array+0x24>
 800b96c:	2600      	movs	r6, #0
 800b96e:	f000 fc37 	bl	800c1e0 <_init>
 800b972:	4d0a      	ldr	r5, [pc, #40]	; (800b99c <__libc_init_array+0x40>)
 800b974:	4c0a      	ldr	r4, [pc, #40]	; (800b9a0 <__libc_init_array+0x44>)
 800b976:	1b64      	subs	r4, r4, r5
 800b978:	10a4      	asrs	r4, r4, #2
 800b97a:	42a6      	cmp	r6, r4
 800b97c:	d105      	bne.n	800b98a <__libc_init_array+0x2e>
 800b97e:	bd70      	pop	{r4, r5, r6, pc}
 800b980:	00b3      	lsls	r3, r6, #2
 800b982:	58eb      	ldr	r3, [r5, r3]
 800b984:	4798      	blx	r3
 800b986:	3601      	adds	r6, #1
 800b988:	e7ee      	b.n	800b968 <__libc_init_array+0xc>
 800b98a:	00b3      	lsls	r3, r6, #2
 800b98c:	58eb      	ldr	r3, [r5, r3]
 800b98e:	4798      	blx	r3
 800b990:	3601      	adds	r6, #1
 800b992:	e7f2      	b.n	800b97a <__libc_init_array+0x1e>
 800b994:	0800ce58 	.word	0x0800ce58
 800b998:	0800ce58 	.word	0x0800ce58
 800b99c:	0800ce58 	.word	0x0800ce58
 800b9a0:	0800ce5c 	.word	0x0800ce5c

0800b9a4 <memcpy>:
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	b510      	push	{r4, lr}
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	d100      	bne.n	800b9ae <memcpy+0xa>
 800b9ac:	bd10      	pop	{r4, pc}
 800b9ae:	5ccc      	ldrb	r4, [r1, r3]
 800b9b0:	54c4      	strb	r4, [r0, r3]
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	e7f8      	b.n	800b9a8 <memcpy+0x4>

0800b9b6 <memset>:
 800b9b6:	0003      	movs	r3, r0
 800b9b8:	1812      	adds	r2, r2, r0
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	d100      	bne.n	800b9c0 <memset+0xa>
 800b9be:	4770      	bx	lr
 800b9c0:	7019      	strb	r1, [r3, #0]
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	e7f9      	b.n	800b9ba <memset+0x4>

0800b9c6 <_calloc_r>:
 800b9c6:	434a      	muls	r2, r1
 800b9c8:	b570      	push	{r4, r5, r6, lr}
 800b9ca:	0011      	movs	r1, r2
 800b9cc:	0014      	movs	r4, r2
 800b9ce:	f000 f809 	bl	800b9e4 <_malloc_r>
 800b9d2:	1e05      	subs	r5, r0, #0
 800b9d4:	d003      	beq.n	800b9de <_calloc_r+0x18>
 800b9d6:	0022      	movs	r2, r4
 800b9d8:	2100      	movs	r1, #0
 800b9da:	f7ff ffec 	bl	800b9b6 <memset>
 800b9de:	0028      	movs	r0, r5
 800b9e0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b9e4 <_malloc_r>:
 800b9e4:	2303      	movs	r3, #3
 800b9e6:	b570      	push	{r4, r5, r6, lr}
 800b9e8:	1ccd      	adds	r5, r1, #3
 800b9ea:	439d      	bics	r5, r3
 800b9ec:	3508      	adds	r5, #8
 800b9ee:	0006      	movs	r6, r0
 800b9f0:	2d0c      	cmp	r5, #12
 800b9f2:	d21e      	bcs.n	800ba32 <_malloc_r+0x4e>
 800b9f4:	250c      	movs	r5, #12
 800b9f6:	42a9      	cmp	r1, r5
 800b9f8:	d81d      	bhi.n	800ba36 <_malloc_r+0x52>
 800b9fa:	0030      	movs	r0, r6
 800b9fc:	f000 f882 	bl	800bb04 <__malloc_lock>
 800ba00:	4a25      	ldr	r2, [pc, #148]	; (800ba98 <_malloc_r+0xb4>)
 800ba02:	6814      	ldr	r4, [r2, #0]
 800ba04:	0021      	movs	r1, r4
 800ba06:	2900      	cmp	r1, #0
 800ba08:	d119      	bne.n	800ba3e <_malloc_r+0x5a>
 800ba0a:	4c24      	ldr	r4, [pc, #144]	; (800ba9c <_malloc_r+0xb8>)
 800ba0c:	6823      	ldr	r3, [r4, #0]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d103      	bne.n	800ba1a <_malloc_r+0x36>
 800ba12:	0030      	movs	r0, r6
 800ba14:	f000 f844 	bl	800baa0 <_sbrk_r>
 800ba18:	6020      	str	r0, [r4, #0]
 800ba1a:	0029      	movs	r1, r5
 800ba1c:	0030      	movs	r0, r6
 800ba1e:	f000 f83f 	bl	800baa0 <_sbrk_r>
 800ba22:	1c43      	adds	r3, r0, #1
 800ba24:	d12b      	bne.n	800ba7e <_malloc_r+0x9a>
 800ba26:	230c      	movs	r3, #12
 800ba28:	0030      	movs	r0, r6
 800ba2a:	6033      	str	r3, [r6, #0]
 800ba2c:	f000 f86b 	bl	800bb06 <__malloc_unlock>
 800ba30:	e003      	b.n	800ba3a <_malloc_r+0x56>
 800ba32:	2d00      	cmp	r5, #0
 800ba34:	dadf      	bge.n	800b9f6 <_malloc_r+0x12>
 800ba36:	230c      	movs	r3, #12
 800ba38:	6033      	str	r3, [r6, #0]
 800ba3a:	2000      	movs	r0, #0
 800ba3c:	bd70      	pop	{r4, r5, r6, pc}
 800ba3e:	680b      	ldr	r3, [r1, #0]
 800ba40:	1b5b      	subs	r3, r3, r5
 800ba42:	d419      	bmi.n	800ba78 <_malloc_r+0x94>
 800ba44:	2b0b      	cmp	r3, #11
 800ba46:	d903      	bls.n	800ba50 <_malloc_r+0x6c>
 800ba48:	600b      	str	r3, [r1, #0]
 800ba4a:	18cc      	adds	r4, r1, r3
 800ba4c:	6025      	str	r5, [r4, #0]
 800ba4e:	e003      	b.n	800ba58 <_malloc_r+0x74>
 800ba50:	684b      	ldr	r3, [r1, #4]
 800ba52:	428c      	cmp	r4, r1
 800ba54:	d10d      	bne.n	800ba72 <_malloc_r+0x8e>
 800ba56:	6013      	str	r3, [r2, #0]
 800ba58:	0030      	movs	r0, r6
 800ba5a:	f000 f854 	bl	800bb06 <__malloc_unlock>
 800ba5e:	0020      	movs	r0, r4
 800ba60:	2207      	movs	r2, #7
 800ba62:	300b      	adds	r0, #11
 800ba64:	1d23      	adds	r3, r4, #4
 800ba66:	4390      	bics	r0, r2
 800ba68:	1ac3      	subs	r3, r0, r3
 800ba6a:	d0e7      	beq.n	800ba3c <_malloc_r+0x58>
 800ba6c:	425a      	negs	r2, r3
 800ba6e:	50e2      	str	r2, [r4, r3]
 800ba70:	e7e4      	b.n	800ba3c <_malloc_r+0x58>
 800ba72:	6063      	str	r3, [r4, #4]
 800ba74:	000c      	movs	r4, r1
 800ba76:	e7ef      	b.n	800ba58 <_malloc_r+0x74>
 800ba78:	000c      	movs	r4, r1
 800ba7a:	6849      	ldr	r1, [r1, #4]
 800ba7c:	e7c3      	b.n	800ba06 <_malloc_r+0x22>
 800ba7e:	2303      	movs	r3, #3
 800ba80:	1cc4      	adds	r4, r0, #3
 800ba82:	439c      	bics	r4, r3
 800ba84:	42a0      	cmp	r0, r4
 800ba86:	d0e1      	beq.n	800ba4c <_malloc_r+0x68>
 800ba88:	1a21      	subs	r1, r4, r0
 800ba8a:	0030      	movs	r0, r6
 800ba8c:	f000 f808 	bl	800baa0 <_sbrk_r>
 800ba90:	1c43      	adds	r3, r0, #1
 800ba92:	d1db      	bne.n	800ba4c <_malloc_r+0x68>
 800ba94:	e7c7      	b.n	800ba26 <_malloc_r+0x42>
 800ba96:	46c0      	nop			; (mov r8, r8)
 800ba98:	20000144 	.word	0x20000144
 800ba9c:	20000148 	.word	0x20000148

0800baa0 <_sbrk_r>:
 800baa0:	2300      	movs	r3, #0
 800baa2:	b570      	push	{r4, r5, r6, lr}
 800baa4:	4c06      	ldr	r4, [pc, #24]	; (800bac0 <_sbrk_r+0x20>)
 800baa6:	0005      	movs	r5, r0
 800baa8:	0008      	movs	r0, r1
 800baaa:	6023      	str	r3, [r4, #0]
 800baac:	f7f8 ffa4 	bl	80049f8 <_sbrk>
 800bab0:	1c43      	adds	r3, r0, #1
 800bab2:	d103      	bne.n	800babc <_sbrk_r+0x1c>
 800bab4:	6823      	ldr	r3, [r4, #0]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d000      	beq.n	800babc <_sbrk_r+0x1c>
 800baba:	602b      	str	r3, [r5, #0]
 800babc:	bd70      	pop	{r4, r5, r6, pc}
 800babe:	46c0      	nop			; (mov r8, r8)
 800bac0:	200006b0 	.word	0x200006b0

0800bac4 <siprintf>:
 800bac4:	b40e      	push	{r1, r2, r3}
 800bac6:	b500      	push	{lr}
 800bac8:	490b      	ldr	r1, [pc, #44]	; (800baf8 <siprintf+0x34>)
 800baca:	b09c      	sub	sp, #112	; 0x70
 800bacc:	ab1d      	add	r3, sp, #116	; 0x74
 800bace:	9002      	str	r0, [sp, #8]
 800bad0:	9006      	str	r0, [sp, #24]
 800bad2:	9107      	str	r1, [sp, #28]
 800bad4:	9104      	str	r1, [sp, #16]
 800bad6:	4809      	ldr	r0, [pc, #36]	; (800bafc <siprintf+0x38>)
 800bad8:	4909      	ldr	r1, [pc, #36]	; (800bb00 <siprintf+0x3c>)
 800bada:	cb04      	ldmia	r3!, {r2}
 800badc:	9105      	str	r1, [sp, #20]
 800bade:	6800      	ldr	r0, [r0, #0]
 800bae0:	a902      	add	r1, sp, #8
 800bae2:	9301      	str	r3, [sp, #4]
 800bae4:	f000 f872 	bl	800bbcc <_svfiprintf_r>
 800bae8:	2300      	movs	r3, #0
 800baea:	9a02      	ldr	r2, [sp, #8]
 800baec:	7013      	strb	r3, [r2, #0]
 800baee:	b01c      	add	sp, #112	; 0x70
 800baf0:	bc08      	pop	{r3}
 800baf2:	b003      	add	sp, #12
 800baf4:	4718      	bx	r3
 800baf6:	46c0      	nop			; (mov r8, r8)
 800baf8:	7fffffff 	.word	0x7fffffff
 800bafc:	20000074 	.word	0x20000074
 800bb00:	ffff0208 	.word	0xffff0208

0800bb04 <__malloc_lock>:
 800bb04:	4770      	bx	lr

0800bb06 <__malloc_unlock>:
 800bb06:	4770      	bx	lr

0800bb08 <__ssputs_r>:
 800bb08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb0a:	688e      	ldr	r6, [r1, #8]
 800bb0c:	b085      	sub	sp, #20
 800bb0e:	0007      	movs	r7, r0
 800bb10:	000c      	movs	r4, r1
 800bb12:	9203      	str	r2, [sp, #12]
 800bb14:	9301      	str	r3, [sp, #4]
 800bb16:	429e      	cmp	r6, r3
 800bb18:	d83c      	bhi.n	800bb94 <__ssputs_r+0x8c>
 800bb1a:	2390      	movs	r3, #144	; 0x90
 800bb1c:	898a      	ldrh	r2, [r1, #12]
 800bb1e:	00db      	lsls	r3, r3, #3
 800bb20:	421a      	tst	r2, r3
 800bb22:	d034      	beq.n	800bb8e <__ssputs_r+0x86>
 800bb24:	2503      	movs	r5, #3
 800bb26:	6909      	ldr	r1, [r1, #16]
 800bb28:	6823      	ldr	r3, [r4, #0]
 800bb2a:	1a5b      	subs	r3, r3, r1
 800bb2c:	9302      	str	r3, [sp, #8]
 800bb2e:	6963      	ldr	r3, [r4, #20]
 800bb30:	9802      	ldr	r0, [sp, #8]
 800bb32:	435d      	muls	r5, r3
 800bb34:	0feb      	lsrs	r3, r5, #31
 800bb36:	195d      	adds	r5, r3, r5
 800bb38:	9b01      	ldr	r3, [sp, #4]
 800bb3a:	106d      	asrs	r5, r5, #1
 800bb3c:	3301      	adds	r3, #1
 800bb3e:	181b      	adds	r3, r3, r0
 800bb40:	42ab      	cmp	r3, r5
 800bb42:	d900      	bls.n	800bb46 <__ssputs_r+0x3e>
 800bb44:	001d      	movs	r5, r3
 800bb46:	0553      	lsls	r3, r2, #21
 800bb48:	d532      	bpl.n	800bbb0 <__ssputs_r+0xa8>
 800bb4a:	0029      	movs	r1, r5
 800bb4c:	0038      	movs	r0, r7
 800bb4e:	f7ff ff49 	bl	800b9e4 <_malloc_r>
 800bb52:	1e06      	subs	r6, r0, #0
 800bb54:	d109      	bne.n	800bb6a <__ssputs_r+0x62>
 800bb56:	230c      	movs	r3, #12
 800bb58:	603b      	str	r3, [r7, #0]
 800bb5a:	2340      	movs	r3, #64	; 0x40
 800bb5c:	2001      	movs	r0, #1
 800bb5e:	89a2      	ldrh	r2, [r4, #12]
 800bb60:	4240      	negs	r0, r0
 800bb62:	4313      	orrs	r3, r2
 800bb64:	81a3      	strh	r3, [r4, #12]
 800bb66:	b005      	add	sp, #20
 800bb68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb6a:	9a02      	ldr	r2, [sp, #8]
 800bb6c:	6921      	ldr	r1, [r4, #16]
 800bb6e:	f7ff ff19 	bl	800b9a4 <memcpy>
 800bb72:	89a3      	ldrh	r3, [r4, #12]
 800bb74:	4a14      	ldr	r2, [pc, #80]	; (800bbc8 <__ssputs_r+0xc0>)
 800bb76:	401a      	ands	r2, r3
 800bb78:	2380      	movs	r3, #128	; 0x80
 800bb7a:	4313      	orrs	r3, r2
 800bb7c:	81a3      	strh	r3, [r4, #12]
 800bb7e:	9b02      	ldr	r3, [sp, #8]
 800bb80:	6126      	str	r6, [r4, #16]
 800bb82:	18f6      	adds	r6, r6, r3
 800bb84:	6026      	str	r6, [r4, #0]
 800bb86:	6165      	str	r5, [r4, #20]
 800bb88:	9e01      	ldr	r6, [sp, #4]
 800bb8a:	1aed      	subs	r5, r5, r3
 800bb8c:	60a5      	str	r5, [r4, #8]
 800bb8e:	9b01      	ldr	r3, [sp, #4]
 800bb90:	429e      	cmp	r6, r3
 800bb92:	d900      	bls.n	800bb96 <__ssputs_r+0x8e>
 800bb94:	9e01      	ldr	r6, [sp, #4]
 800bb96:	0032      	movs	r2, r6
 800bb98:	9903      	ldr	r1, [sp, #12]
 800bb9a:	6820      	ldr	r0, [r4, #0]
 800bb9c:	f000 fa95 	bl	800c0ca <memmove>
 800bba0:	68a3      	ldr	r3, [r4, #8]
 800bba2:	2000      	movs	r0, #0
 800bba4:	1b9b      	subs	r3, r3, r6
 800bba6:	60a3      	str	r3, [r4, #8]
 800bba8:	6823      	ldr	r3, [r4, #0]
 800bbaa:	199e      	adds	r6, r3, r6
 800bbac:	6026      	str	r6, [r4, #0]
 800bbae:	e7da      	b.n	800bb66 <__ssputs_r+0x5e>
 800bbb0:	002a      	movs	r2, r5
 800bbb2:	0038      	movs	r0, r7
 800bbb4:	f000 fae6 	bl	800c184 <_realloc_r>
 800bbb8:	1e06      	subs	r6, r0, #0
 800bbba:	d1e0      	bne.n	800bb7e <__ssputs_r+0x76>
 800bbbc:	6921      	ldr	r1, [r4, #16]
 800bbbe:	0038      	movs	r0, r7
 800bbc0:	f000 fa96 	bl	800c0f0 <_free_r>
 800bbc4:	e7c7      	b.n	800bb56 <__ssputs_r+0x4e>
 800bbc6:	46c0      	nop			; (mov r8, r8)
 800bbc8:	fffffb7f 	.word	0xfffffb7f

0800bbcc <_svfiprintf_r>:
 800bbcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbce:	b0a1      	sub	sp, #132	; 0x84
 800bbd0:	9003      	str	r0, [sp, #12]
 800bbd2:	001d      	movs	r5, r3
 800bbd4:	898b      	ldrh	r3, [r1, #12]
 800bbd6:	000f      	movs	r7, r1
 800bbd8:	0016      	movs	r6, r2
 800bbda:	061b      	lsls	r3, r3, #24
 800bbdc:	d511      	bpl.n	800bc02 <_svfiprintf_r+0x36>
 800bbde:	690b      	ldr	r3, [r1, #16]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d10e      	bne.n	800bc02 <_svfiprintf_r+0x36>
 800bbe4:	2140      	movs	r1, #64	; 0x40
 800bbe6:	f7ff fefd 	bl	800b9e4 <_malloc_r>
 800bbea:	6038      	str	r0, [r7, #0]
 800bbec:	6138      	str	r0, [r7, #16]
 800bbee:	2800      	cmp	r0, #0
 800bbf0:	d105      	bne.n	800bbfe <_svfiprintf_r+0x32>
 800bbf2:	230c      	movs	r3, #12
 800bbf4:	9a03      	ldr	r2, [sp, #12]
 800bbf6:	3801      	subs	r0, #1
 800bbf8:	6013      	str	r3, [r2, #0]
 800bbfa:	b021      	add	sp, #132	; 0x84
 800bbfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbfe:	2340      	movs	r3, #64	; 0x40
 800bc00:	617b      	str	r3, [r7, #20]
 800bc02:	2300      	movs	r3, #0
 800bc04:	ac08      	add	r4, sp, #32
 800bc06:	6163      	str	r3, [r4, #20]
 800bc08:	3320      	adds	r3, #32
 800bc0a:	7663      	strb	r3, [r4, #25]
 800bc0c:	3310      	adds	r3, #16
 800bc0e:	76a3      	strb	r3, [r4, #26]
 800bc10:	9507      	str	r5, [sp, #28]
 800bc12:	0035      	movs	r5, r6
 800bc14:	782b      	ldrb	r3, [r5, #0]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d001      	beq.n	800bc1e <_svfiprintf_r+0x52>
 800bc1a:	2b25      	cmp	r3, #37	; 0x25
 800bc1c:	d146      	bne.n	800bcac <_svfiprintf_r+0xe0>
 800bc1e:	1bab      	subs	r3, r5, r6
 800bc20:	9305      	str	r3, [sp, #20]
 800bc22:	d00c      	beq.n	800bc3e <_svfiprintf_r+0x72>
 800bc24:	0032      	movs	r2, r6
 800bc26:	0039      	movs	r1, r7
 800bc28:	9803      	ldr	r0, [sp, #12]
 800bc2a:	f7ff ff6d 	bl	800bb08 <__ssputs_r>
 800bc2e:	1c43      	adds	r3, r0, #1
 800bc30:	d100      	bne.n	800bc34 <_svfiprintf_r+0x68>
 800bc32:	e0ae      	b.n	800bd92 <_svfiprintf_r+0x1c6>
 800bc34:	6962      	ldr	r2, [r4, #20]
 800bc36:	9b05      	ldr	r3, [sp, #20]
 800bc38:	4694      	mov	ip, r2
 800bc3a:	4463      	add	r3, ip
 800bc3c:	6163      	str	r3, [r4, #20]
 800bc3e:	782b      	ldrb	r3, [r5, #0]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d100      	bne.n	800bc46 <_svfiprintf_r+0x7a>
 800bc44:	e0a5      	b.n	800bd92 <_svfiprintf_r+0x1c6>
 800bc46:	2201      	movs	r2, #1
 800bc48:	2300      	movs	r3, #0
 800bc4a:	4252      	negs	r2, r2
 800bc4c:	6062      	str	r2, [r4, #4]
 800bc4e:	a904      	add	r1, sp, #16
 800bc50:	3254      	adds	r2, #84	; 0x54
 800bc52:	1852      	adds	r2, r2, r1
 800bc54:	1c6e      	adds	r6, r5, #1
 800bc56:	6023      	str	r3, [r4, #0]
 800bc58:	60e3      	str	r3, [r4, #12]
 800bc5a:	60a3      	str	r3, [r4, #8]
 800bc5c:	7013      	strb	r3, [r2, #0]
 800bc5e:	65a3      	str	r3, [r4, #88]	; 0x58
 800bc60:	7831      	ldrb	r1, [r6, #0]
 800bc62:	2205      	movs	r2, #5
 800bc64:	4853      	ldr	r0, [pc, #332]	; (800bdb4 <_svfiprintf_r+0x1e8>)
 800bc66:	f000 fa25 	bl	800c0b4 <memchr>
 800bc6a:	1c75      	adds	r5, r6, #1
 800bc6c:	2800      	cmp	r0, #0
 800bc6e:	d11f      	bne.n	800bcb0 <_svfiprintf_r+0xe4>
 800bc70:	6822      	ldr	r2, [r4, #0]
 800bc72:	06d3      	lsls	r3, r2, #27
 800bc74:	d504      	bpl.n	800bc80 <_svfiprintf_r+0xb4>
 800bc76:	2353      	movs	r3, #83	; 0x53
 800bc78:	a904      	add	r1, sp, #16
 800bc7a:	185b      	adds	r3, r3, r1
 800bc7c:	2120      	movs	r1, #32
 800bc7e:	7019      	strb	r1, [r3, #0]
 800bc80:	0713      	lsls	r3, r2, #28
 800bc82:	d504      	bpl.n	800bc8e <_svfiprintf_r+0xc2>
 800bc84:	2353      	movs	r3, #83	; 0x53
 800bc86:	a904      	add	r1, sp, #16
 800bc88:	185b      	adds	r3, r3, r1
 800bc8a:	212b      	movs	r1, #43	; 0x2b
 800bc8c:	7019      	strb	r1, [r3, #0]
 800bc8e:	7833      	ldrb	r3, [r6, #0]
 800bc90:	2b2a      	cmp	r3, #42	; 0x2a
 800bc92:	d016      	beq.n	800bcc2 <_svfiprintf_r+0xf6>
 800bc94:	0035      	movs	r5, r6
 800bc96:	2100      	movs	r1, #0
 800bc98:	200a      	movs	r0, #10
 800bc9a:	68e3      	ldr	r3, [r4, #12]
 800bc9c:	782a      	ldrb	r2, [r5, #0]
 800bc9e:	1c6e      	adds	r6, r5, #1
 800bca0:	3a30      	subs	r2, #48	; 0x30
 800bca2:	2a09      	cmp	r2, #9
 800bca4:	d94e      	bls.n	800bd44 <_svfiprintf_r+0x178>
 800bca6:	2900      	cmp	r1, #0
 800bca8:	d018      	beq.n	800bcdc <_svfiprintf_r+0x110>
 800bcaa:	e010      	b.n	800bcce <_svfiprintf_r+0x102>
 800bcac:	3501      	adds	r5, #1
 800bcae:	e7b1      	b.n	800bc14 <_svfiprintf_r+0x48>
 800bcb0:	4b40      	ldr	r3, [pc, #256]	; (800bdb4 <_svfiprintf_r+0x1e8>)
 800bcb2:	6822      	ldr	r2, [r4, #0]
 800bcb4:	1ac0      	subs	r0, r0, r3
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	4083      	lsls	r3, r0
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	6023      	str	r3, [r4, #0]
 800bcbe:	002e      	movs	r6, r5
 800bcc0:	e7ce      	b.n	800bc60 <_svfiprintf_r+0x94>
 800bcc2:	9b07      	ldr	r3, [sp, #28]
 800bcc4:	1d19      	adds	r1, r3, #4
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	9107      	str	r1, [sp, #28]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	db01      	blt.n	800bcd2 <_svfiprintf_r+0x106>
 800bcce:	930b      	str	r3, [sp, #44]	; 0x2c
 800bcd0:	e004      	b.n	800bcdc <_svfiprintf_r+0x110>
 800bcd2:	425b      	negs	r3, r3
 800bcd4:	60e3      	str	r3, [r4, #12]
 800bcd6:	2302      	movs	r3, #2
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	6023      	str	r3, [r4, #0]
 800bcdc:	782b      	ldrb	r3, [r5, #0]
 800bcde:	2b2e      	cmp	r3, #46	; 0x2e
 800bce0:	d10a      	bne.n	800bcf8 <_svfiprintf_r+0x12c>
 800bce2:	786b      	ldrb	r3, [r5, #1]
 800bce4:	2b2a      	cmp	r3, #42	; 0x2a
 800bce6:	d135      	bne.n	800bd54 <_svfiprintf_r+0x188>
 800bce8:	9b07      	ldr	r3, [sp, #28]
 800bcea:	3502      	adds	r5, #2
 800bcec:	1d1a      	adds	r2, r3, #4
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	9207      	str	r2, [sp, #28]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	db2b      	blt.n	800bd4e <_svfiprintf_r+0x182>
 800bcf6:	9309      	str	r3, [sp, #36]	; 0x24
 800bcf8:	4e2f      	ldr	r6, [pc, #188]	; (800bdb8 <_svfiprintf_r+0x1ec>)
 800bcfa:	7829      	ldrb	r1, [r5, #0]
 800bcfc:	2203      	movs	r2, #3
 800bcfe:	0030      	movs	r0, r6
 800bd00:	f000 f9d8 	bl	800c0b4 <memchr>
 800bd04:	2800      	cmp	r0, #0
 800bd06:	d006      	beq.n	800bd16 <_svfiprintf_r+0x14a>
 800bd08:	2340      	movs	r3, #64	; 0x40
 800bd0a:	1b80      	subs	r0, r0, r6
 800bd0c:	4083      	lsls	r3, r0
 800bd0e:	6822      	ldr	r2, [r4, #0]
 800bd10:	3501      	adds	r5, #1
 800bd12:	4313      	orrs	r3, r2
 800bd14:	6023      	str	r3, [r4, #0]
 800bd16:	7829      	ldrb	r1, [r5, #0]
 800bd18:	2206      	movs	r2, #6
 800bd1a:	4828      	ldr	r0, [pc, #160]	; (800bdbc <_svfiprintf_r+0x1f0>)
 800bd1c:	1c6e      	adds	r6, r5, #1
 800bd1e:	7621      	strb	r1, [r4, #24]
 800bd20:	f000 f9c8 	bl	800c0b4 <memchr>
 800bd24:	2800      	cmp	r0, #0
 800bd26:	d03c      	beq.n	800bda2 <_svfiprintf_r+0x1d6>
 800bd28:	4b25      	ldr	r3, [pc, #148]	; (800bdc0 <_svfiprintf_r+0x1f4>)
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d125      	bne.n	800bd7a <_svfiprintf_r+0x1ae>
 800bd2e:	2207      	movs	r2, #7
 800bd30:	9b07      	ldr	r3, [sp, #28]
 800bd32:	3307      	adds	r3, #7
 800bd34:	4393      	bics	r3, r2
 800bd36:	3308      	adds	r3, #8
 800bd38:	9307      	str	r3, [sp, #28]
 800bd3a:	6963      	ldr	r3, [r4, #20]
 800bd3c:	9a04      	ldr	r2, [sp, #16]
 800bd3e:	189b      	adds	r3, r3, r2
 800bd40:	6163      	str	r3, [r4, #20]
 800bd42:	e766      	b.n	800bc12 <_svfiprintf_r+0x46>
 800bd44:	4343      	muls	r3, r0
 800bd46:	2101      	movs	r1, #1
 800bd48:	189b      	adds	r3, r3, r2
 800bd4a:	0035      	movs	r5, r6
 800bd4c:	e7a6      	b.n	800bc9c <_svfiprintf_r+0xd0>
 800bd4e:	2301      	movs	r3, #1
 800bd50:	425b      	negs	r3, r3
 800bd52:	e7d0      	b.n	800bcf6 <_svfiprintf_r+0x12a>
 800bd54:	2300      	movs	r3, #0
 800bd56:	200a      	movs	r0, #10
 800bd58:	001a      	movs	r2, r3
 800bd5a:	3501      	adds	r5, #1
 800bd5c:	6063      	str	r3, [r4, #4]
 800bd5e:	7829      	ldrb	r1, [r5, #0]
 800bd60:	1c6e      	adds	r6, r5, #1
 800bd62:	3930      	subs	r1, #48	; 0x30
 800bd64:	2909      	cmp	r1, #9
 800bd66:	d903      	bls.n	800bd70 <_svfiprintf_r+0x1a4>
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d0c5      	beq.n	800bcf8 <_svfiprintf_r+0x12c>
 800bd6c:	9209      	str	r2, [sp, #36]	; 0x24
 800bd6e:	e7c3      	b.n	800bcf8 <_svfiprintf_r+0x12c>
 800bd70:	4342      	muls	r2, r0
 800bd72:	2301      	movs	r3, #1
 800bd74:	1852      	adds	r2, r2, r1
 800bd76:	0035      	movs	r5, r6
 800bd78:	e7f1      	b.n	800bd5e <_svfiprintf_r+0x192>
 800bd7a:	ab07      	add	r3, sp, #28
 800bd7c:	9300      	str	r3, [sp, #0]
 800bd7e:	003a      	movs	r2, r7
 800bd80:	4b10      	ldr	r3, [pc, #64]	; (800bdc4 <_svfiprintf_r+0x1f8>)
 800bd82:	0021      	movs	r1, r4
 800bd84:	9803      	ldr	r0, [sp, #12]
 800bd86:	e000      	b.n	800bd8a <_svfiprintf_r+0x1be>
 800bd88:	bf00      	nop
 800bd8a:	9004      	str	r0, [sp, #16]
 800bd8c:	9b04      	ldr	r3, [sp, #16]
 800bd8e:	3301      	adds	r3, #1
 800bd90:	d1d3      	bne.n	800bd3a <_svfiprintf_r+0x16e>
 800bd92:	89bb      	ldrh	r3, [r7, #12]
 800bd94:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bd96:	065b      	lsls	r3, r3, #25
 800bd98:	d400      	bmi.n	800bd9c <_svfiprintf_r+0x1d0>
 800bd9a:	e72e      	b.n	800bbfa <_svfiprintf_r+0x2e>
 800bd9c:	2001      	movs	r0, #1
 800bd9e:	4240      	negs	r0, r0
 800bda0:	e72b      	b.n	800bbfa <_svfiprintf_r+0x2e>
 800bda2:	ab07      	add	r3, sp, #28
 800bda4:	9300      	str	r3, [sp, #0]
 800bda6:	003a      	movs	r2, r7
 800bda8:	4b06      	ldr	r3, [pc, #24]	; (800bdc4 <_svfiprintf_r+0x1f8>)
 800bdaa:	0021      	movs	r1, r4
 800bdac:	9803      	ldr	r0, [sp, #12]
 800bdae:	f000 f879 	bl	800bea4 <_printf_i>
 800bdb2:	e7ea      	b.n	800bd8a <_svfiprintf_r+0x1be>
 800bdb4:	0800ce24 	.word	0x0800ce24
 800bdb8:	0800ce2a 	.word	0x0800ce2a
 800bdbc:	0800ce2e 	.word	0x0800ce2e
 800bdc0:	00000000 	.word	0x00000000
 800bdc4:	0800bb09 	.word	0x0800bb09

0800bdc8 <_printf_common>:
 800bdc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdca:	0015      	movs	r5, r2
 800bdcc:	9301      	str	r3, [sp, #4]
 800bdce:	688a      	ldr	r2, [r1, #8]
 800bdd0:	690b      	ldr	r3, [r1, #16]
 800bdd2:	9000      	str	r0, [sp, #0]
 800bdd4:	000c      	movs	r4, r1
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	da00      	bge.n	800bddc <_printf_common+0x14>
 800bdda:	0013      	movs	r3, r2
 800bddc:	0022      	movs	r2, r4
 800bdde:	602b      	str	r3, [r5, #0]
 800bde0:	3243      	adds	r2, #67	; 0x43
 800bde2:	7812      	ldrb	r2, [r2, #0]
 800bde4:	2a00      	cmp	r2, #0
 800bde6:	d001      	beq.n	800bdec <_printf_common+0x24>
 800bde8:	3301      	adds	r3, #1
 800bdea:	602b      	str	r3, [r5, #0]
 800bdec:	6823      	ldr	r3, [r4, #0]
 800bdee:	069b      	lsls	r3, r3, #26
 800bdf0:	d502      	bpl.n	800bdf8 <_printf_common+0x30>
 800bdf2:	682b      	ldr	r3, [r5, #0]
 800bdf4:	3302      	adds	r3, #2
 800bdf6:	602b      	str	r3, [r5, #0]
 800bdf8:	2706      	movs	r7, #6
 800bdfa:	6823      	ldr	r3, [r4, #0]
 800bdfc:	401f      	ands	r7, r3
 800bdfe:	d027      	beq.n	800be50 <_printf_common+0x88>
 800be00:	0023      	movs	r3, r4
 800be02:	3343      	adds	r3, #67	; 0x43
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	1e5a      	subs	r2, r3, #1
 800be08:	4193      	sbcs	r3, r2
 800be0a:	6822      	ldr	r2, [r4, #0]
 800be0c:	0692      	lsls	r2, r2, #26
 800be0e:	d430      	bmi.n	800be72 <_printf_common+0xaa>
 800be10:	0022      	movs	r2, r4
 800be12:	9901      	ldr	r1, [sp, #4]
 800be14:	3243      	adds	r2, #67	; 0x43
 800be16:	9800      	ldr	r0, [sp, #0]
 800be18:	9e08      	ldr	r6, [sp, #32]
 800be1a:	47b0      	blx	r6
 800be1c:	1c43      	adds	r3, r0, #1
 800be1e:	d025      	beq.n	800be6c <_printf_common+0xa4>
 800be20:	2306      	movs	r3, #6
 800be22:	6820      	ldr	r0, [r4, #0]
 800be24:	682a      	ldr	r2, [r5, #0]
 800be26:	68e1      	ldr	r1, [r4, #12]
 800be28:	4003      	ands	r3, r0
 800be2a:	2500      	movs	r5, #0
 800be2c:	2b04      	cmp	r3, #4
 800be2e:	d103      	bne.n	800be38 <_printf_common+0x70>
 800be30:	1a8d      	subs	r5, r1, r2
 800be32:	43eb      	mvns	r3, r5
 800be34:	17db      	asrs	r3, r3, #31
 800be36:	401d      	ands	r5, r3
 800be38:	68a3      	ldr	r3, [r4, #8]
 800be3a:	6922      	ldr	r2, [r4, #16]
 800be3c:	4293      	cmp	r3, r2
 800be3e:	dd01      	ble.n	800be44 <_printf_common+0x7c>
 800be40:	1a9b      	subs	r3, r3, r2
 800be42:	18ed      	adds	r5, r5, r3
 800be44:	2700      	movs	r7, #0
 800be46:	42bd      	cmp	r5, r7
 800be48:	d120      	bne.n	800be8c <_printf_common+0xc4>
 800be4a:	2000      	movs	r0, #0
 800be4c:	e010      	b.n	800be70 <_printf_common+0xa8>
 800be4e:	3701      	adds	r7, #1
 800be50:	68e3      	ldr	r3, [r4, #12]
 800be52:	682a      	ldr	r2, [r5, #0]
 800be54:	1a9b      	subs	r3, r3, r2
 800be56:	42bb      	cmp	r3, r7
 800be58:	ddd2      	ble.n	800be00 <_printf_common+0x38>
 800be5a:	0022      	movs	r2, r4
 800be5c:	2301      	movs	r3, #1
 800be5e:	3219      	adds	r2, #25
 800be60:	9901      	ldr	r1, [sp, #4]
 800be62:	9800      	ldr	r0, [sp, #0]
 800be64:	9e08      	ldr	r6, [sp, #32]
 800be66:	47b0      	blx	r6
 800be68:	1c43      	adds	r3, r0, #1
 800be6a:	d1f0      	bne.n	800be4e <_printf_common+0x86>
 800be6c:	2001      	movs	r0, #1
 800be6e:	4240      	negs	r0, r0
 800be70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800be72:	2030      	movs	r0, #48	; 0x30
 800be74:	18e1      	adds	r1, r4, r3
 800be76:	3143      	adds	r1, #67	; 0x43
 800be78:	7008      	strb	r0, [r1, #0]
 800be7a:	0021      	movs	r1, r4
 800be7c:	1c5a      	adds	r2, r3, #1
 800be7e:	3145      	adds	r1, #69	; 0x45
 800be80:	7809      	ldrb	r1, [r1, #0]
 800be82:	18a2      	adds	r2, r4, r2
 800be84:	3243      	adds	r2, #67	; 0x43
 800be86:	3302      	adds	r3, #2
 800be88:	7011      	strb	r1, [r2, #0]
 800be8a:	e7c1      	b.n	800be10 <_printf_common+0x48>
 800be8c:	0022      	movs	r2, r4
 800be8e:	2301      	movs	r3, #1
 800be90:	321a      	adds	r2, #26
 800be92:	9901      	ldr	r1, [sp, #4]
 800be94:	9800      	ldr	r0, [sp, #0]
 800be96:	9e08      	ldr	r6, [sp, #32]
 800be98:	47b0      	blx	r6
 800be9a:	1c43      	adds	r3, r0, #1
 800be9c:	d0e6      	beq.n	800be6c <_printf_common+0xa4>
 800be9e:	3701      	adds	r7, #1
 800bea0:	e7d1      	b.n	800be46 <_printf_common+0x7e>
	...

0800bea4 <_printf_i>:
 800bea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bea6:	b089      	sub	sp, #36	; 0x24
 800bea8:	9204      	str	r2, [sp, #16]
 800beaa:	000a      	movs	r2, r1
 800beac:	3243      	adds	r2, #67	; 0x43
 800beae:	9305      	str	r3, [sp, #20]
 800beb0:	9003      	str	r0, [sp, #12]
 800beb2:	9202      	str	r2, [sp, #8]
 800beb4:	7e0a      	ldrb	r2, [r1, #24]
 800beb6:	000c      	movs	r4, r1
 800beb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800beba:	2a6e      	cmp	r2, #110	; 0x6e
 800bebc:	d100      	bne.n	800bec0 <_printf_i+0x1c>
 800bebe:	e086      	b.n	800bfce <_printf_i+0x12a>
 800bec0:	d81f      	bhi.n	800bf02 <_printf_i+0x5e>
 800bec2:	2a63      	cmp	r2, #99	; 0x63
 800bec4:	d033      	beq.n	800bf2e <_printf_i+0x8a>
 800bec6:	d808      	bhi.n	800beda <_printf_i+0x36>
 800bec8:	2a00      	cmp	r2, #0
 800beca:	d100      	bne.n	800bece <_printf_i+0x2a>
 800becc:	e08c      	b.n	800bfe8 <_printf_i+0x144>
 800bece:	2a58      	cmp	r2, #88	; 0x58
 800bed0:	d04d      	beq.n	800bf6e <_printf_i+0xca>
 800bed2:	0025      	movs	r5, r4
 800bed4:	3542      	adds	r5, #66	; 0x42
 800bed6:	702a      	strb	r2, [r5, #0]
 800bed8:	e030      	b.n	800bf3c <_printf_i+0x98>
 800beda:	2a64      	cmp	r2, #100	; 0x64
 800bedc:	d001      	beq.n	800bee2 <_printf_i+0x3e>
 800bede:	2a69      	cmp	r2, #105	; 0x69
 800bee0:	d1f7      	bne.n	800bed2 <_printf_i+0x2e>
 800bee2:	6819      	ldr	r1, [r3, #0]
 800bee4:	6825      	ldr	r5, [r4, #0]
 800bee6:	1d0a      	adds	r2, r1, #4
 800bee8:	0628      	lsls	r0, r5, #24
 800beea:	d529      	bpl.n	800bf40 <_printf_i+0x9c>
 800beec:	6808      	ldr	r0, [r1, #0]
 800beee:	601a      	str	r2, [r3, #0]
 800bef0:	2800      	cmp	r0, #0
 800bef2:	da03      	bge.n	800befc <_printf_i+0x58>
 800bef4:	232d      	movs	r3, #45	; 0x2d
 800bef6:	9a02      	ldr	r2, [sp, #8]
 800bef8:	4240      	negs	r0, r0
 800befa:	7013      	strb	r3, [r2, #0]
 800befc:	4e6b      	ldr	r6, [pc, #428]	; (800c0ac <_printf_i+0x208>)
 800befe:	270a      	movs	r7, #10
 800bf00:	e04f      	b.n	800bfa2 <_printf_i+0xfe>
 800bf02:	2a73      	cmp	r2, #115	; 0x73
 800bf04:	d074      	beq.n	800bff0 <_printf_i+0x14c>
 800bf06:	d808      	bhi.n	800bf1a <_printf_i+0x76>
 800bf08:	2a6f      	cmp	r2, #111	; 0x6f
 800bf0a:	d01f      	beq.n	800bf4c <_printf_i+0xa8>
 800bf0c:	2a70      	cmp	r2, #112	; 0x70
 800bf0e:	d1e0      	bne.n	800bed2 <_printf_i+0x2e>
 800bf10:	2220      	movs	r2, #32
 800bf12:	6809      	ldr	r1, [r1, #0]
 800bf14:	430a      	orrs	r2, r1
 800bf16:	6022      	str	r2, [r4, #0]
 800bf18:	e003      	b.n	800bf22 <_printf_i+0x7e>
 800bf1a:	2a75      	cmp	r2, #117	; 0x75
 800bf1c:	d016      	beq.n	800bf4c <_printf_i+0xa8>
 800bf1e:	2a78      	cmp	r2, #120	; 0x78
 800bf20:	d1d7      	bne.n	800bed2 <_printf_i+0x2e>
 800bf22:	0022      	movs	r2, r4
 800bf24:	2178      	movs	r1, #120	; 0x78
 800bf26:	3245      	adds	r2, #69	; 0x45
 800bf28:	7011      	strb	r1, [r2, #0]
 800bf2a:	4e61      	ldr	r6, [pc, #388]	; (800c0b0 <_printf_i+0x20c>)
 800bf2c:	e022      	b.n	800bf74 <_printf_i+0xd0>
 800bf2e:	0025      	movs	r5, r4
 800bf30:	681a      	ldr	r2, [r3, #0]
 800bf32:	3542      	adds	r5, #66	; 0x42
 800bf34:	1d11      	adds	r1, r2, #4
 800bf36:	6019      	str	r1, [r3, #0]
 800bf38:	6813      	ldr	r3, [r2, #0]
 800bf3a:	702b      	strb	r3, [r5, #0]
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	e065      	b.n	800c00c <_printf_i+0x168>
 800bf40:	6808      	ldr	r0, [r1, #0]
 800bf42:	601a      	str	r2, [r3, #0]
 800bf44:	0669      	lsls	r1, r5, #25
 800bf46:	d5d3      	bpl.n	800bef0 <_printf_i+0x4c>
 800bf48:	b200      	sxth	r0, r0
 800bf4a:	e7d1      	b.n	800bef0 <_printf_i+0x4c>
 800bf4c:	6819      	ldr	r1, [r3, #0]
 800bf4e:	6825      	ldr	r5, [r4, #0]
 800bf50:	1d08      	adds	r0, r1, #4
 800bf52:	6018      	str	r0, [r3, #0]
 800bf54:	6808      	ldr	r0, [r1, #0]
 800bf56:	062e      	lsls	r6, r5, #24
 800bf58:	d505      	bpl.n	800bf66 <_printf_i+0xc2>
 800bf5a:	4e54      	ldr	r6, [pc, #336]	; (800c0ac <_printf_i+0x208>)
 800bf5c:	2708      	movs	r7, #8
 800bf5e:	2a6f      	cmp	r2, #111	; 0x6f
 800bf60:	d01b      	beq.n	800bf9a <_printf_i+0xf6>
 800bf62:	270a      	movs	r7, #10
 800bf64:	e019      	b.n	800bf9a <_printf_i+0xf6>
 800bf66:	066d      	lsls	r5, r5, #25
 800bf68:	d5f7      	bpl.n	800bf5a <_printf_i+0xb6>
 800bf6a:	b280      	uxth	r0, r0
 800bf6c:	e7f5      	b.n	800bf5a <_printf_i+0xb6>
 800bf6e:	3145      	adds	r1, #69	; 0x45
 800bf70:	4e4e      	ldr	r6, [pc, #312]	; (800c0ac <_printf_i+0x208>)
 800bf72:	700a      	strb	r2, [r1, #0]
 800bf74:	6818      	ldr	r0, [r3, #0]
 800bf76:	6822      	ldr	r2, [r4, #0]
 800bf78:	1d01      	adds	r1, r0, #4
 800bf7a:	6800      	ldr	r0, [r0, #0]
 800bf7c:	6019      	str	r1, [r3, #0]
 800bf7e:	0615      	lsls	r5, r2, #24
 800bf80:	d521      	bpl.n	800bfc6 <_printf_i+0x122>
 800bf82:	07d3      	lsls	r3, r2, #31
 800bf84:	d502      	bpl.n	800bf8c <_printf_i+0xe8>
 800bf86:	2320      	movs	r3, #32
 800bf88:	431a      	orrs	r2, r3
 800bf8a:	6022      	str	r2, [r4, #0]
 800bf8c:	2710      	movs	r7, #16
 800bf8e:	2800      	cmp	r0, #0
 800bf90:	d103      	bne.n	800bf9a <_printf_i+0xf6>
 800bf92:	2320      	movs	r3, #32
 800bf94:	6822      	ldr	r2, [r4, #0]
 800bf96:	439a      	bics	r2, r3
 800bf98:	6022      	str	r2, [r4, #0]
 800bf9a:	0023      	movs	r3, r4
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	3343      	adds	r3, #67	; 0x43
 800bfa0:	701a      	strb	r2, [r3, #0]
 800bfa2:	6863      	ldr	r3, [r4, #4]
 800bfa4:	60a3      	str	r3, [r4, #8]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	db58      	blt.n	800c05c <_printf_i+0x1b8>
 800bfaa:	2204      	movs	r2, #4
 800bfac:	6821      	ldr	r1, [r4, #0]
 800bfae:	4391      	bics	r1, r2
 800bfb0:	6021      	str	r1, [r4, #0]
 800bfb2:	2800      	cmp	r0, #0
 800bfb4:	d154      	bne.n	800c060 <_printf_i+0x1bc>
 800bfb6:	9d02      	ldr	r5, [sp, #8]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d05a      	beq.n	800c072 <_printf_i+0x1ce>
 800bfbc:	0025      	movs	r5, r4
 800bfbe:	7833      	ldrb	r3, [r6, #0]
 800bfc0:	3542      	adds	r5, #66	; 0x42
 800bfc2:	702b      	strb	r3, [r5, #0]
 800bfc4:	e055      	b.n	800c072 <_printf_i+0x1ce>
 800bfc6:	0655      	lsls	r5, r2, #25
 800bfc8:	d5db      	bpl.n	800bf82 <_printf_i+0xde>
 800bfca:	b280      	uxth	r0, r0
 800bfcc:	e7d9      	b.n	800bf82 <_printf_i+0xde>
 800bfce:	681a      	ldr	r2, [r3, #0]
 800bfd0:	680d      	ldr	r5, [r1, #0]
 800bfd2:	1d10      	adds	r0, r2, #4
 800bfd4:	6949      	ldr	r1, [r1, #20]
 800bfd6:	6018      	str	r0, [r3, #0]
 800bfd8:	6813      	ldr	r3, [r2, #0]
 800bfda:	062e      	lsls	r6, r5, #24
 800bfdc:	d501      	bpl.n	800bfe2 <_printf_i+0x13e>
 800bfde:	6019      	str	r1, [r3, #0]
 800bfe0:	e002      	b.n	800bfe8 <_printf_i+0x144>
 800bfe2:	066d      	lsls	r5, r5, #25
 800bfe4:	d5fb      	bpl.n	800bfde <_printf_i+0x13a>
 800bfe6:	8019      	strh	r1, [r3, #0]
 800bfe8:	2300      	movs	r3, #0
 800bfea:	9d02      	ldr	r5, [sp, #8]
 800bfec:	6123      	str	r3, [r4, #16]
 800bfee:	e04f      	b.n	800c090 <_printf_i+0x1ec>
 800bff0:	681a      	ldr	r2, [r3, #0]
 800bff2:	1d11      	adds	r1, r2, #4
 800bff4:	6019      	str	r1, [r3, #0]
 800bff6:	6815      	ldr	r5, [r2, #0]
 800bff8:	2100      	movs	r1, #0
 800bffa:	6862      	ldr	r2, [r4, #4]
 800bffc:	0028      	movs	r0, r5
 800bffe:	f000 f859 	bl	800c0b4 <memchr>
 800c002:	2800      	cmp	r0, #0
 800c004:	d001      	beq.n	800c00a <_printf_i+0x166>
 800c006:	1b40      	subs	r0, r0, r5
 800c008:	6060      	str	r0, [r4, #4]
 800c00a:	6863      	ldr	r3, [r4, #4]
 800c00c:	6123      	str	r3, [r4, #16]
 800c00e:	2300      	movs	r3, #0
 800c010:	9a02      	ldr	r2, [sp, #8]
 800c012:	7013      	strb	r3, [r2, #0]
 800c014:	e03c      	b.n	800c090 <_printf_i+0x1ec>
 800c016:	6923      	ldr	r3, [r4, #16]
 800c018:	002a      	movs	r2, r5
 800c01a:	9904      	ldr	r1, [sp, #16]
 800c01c:	9803      	ldr	r0, [sp, #12]
 800c01e:	9d05      	ldr	r5, [sp, #20]
 800c020:	47a8      	blx	r5
 800c022:	1c43      	adds	r3, r0, #1
 800c024:	d03e      	beq.n	800c0a4 <_printf_i+0x200>
 800c026:	6823      	ldr	r3, [r4, #0]
 800c028:	079b      	lsls	r3, r3, #30
 800c02a:	d415      	bmi.n	800c058 <_printf_i+0x1b4>
 800c02c:	9b07      	ldr	r3, [sp, #28]
 800c02e:	68e0      	ldr	r0, [r4, #12]
 800c030:	4298      	cmp	r0, r3
 800c032:	da39      	bge.n	800c0a8 <_printf_i+0x204>
 800c034:	0018      	movs	r0, r3
 800c036:	e037      	b.n	800c0a8 <_printf_i+0x204>
 800c038:	0022      	movs	r2, r4
 800c03a:	2301      	movs	r3, #1
 800c03c:	3219      	adds	r2, #25
 800c03e:	9904      	ldr	r1, [sp, #16]
 800c040:	9803      	ldr	r0, [sp, #12]
 800c042:	9e05      	ldr	r6, [sp, #20]
 800c044:	47b0      	blx	r6
 800c046:	1c43      	adds	r3, r0, #1
 800c048:	d02c      	beq.n	800c0a4 <_printf_i+0x200>
 800c04a:	3501      	adds	r5, #1
 800c04c:	68e3      	ldr	r3, [r4, #12]
 800c04e:	9a07      	ldr	r2, [sp, #28]
 800c050:	1a9b      	subs	r3, r3, r2
 800c052:	42ab      	cmp	r3, r5
 800c054:	dcf0      	bgt.n	800c038 <_printf_i+0x194>
 800c056:	e7e9      	b.n	800c02c <_printf_i+0x188>
 800c058:	2500      	movs	r5, #0
 800c05a:	e7f7      	b.n	800c04c <_printf_i+0x1a8>
 800c05c:	2800      	cmp	r0, #0
 800c05e:	d0ad      	beq.n	800bfbc <_printf_i+0x118>
 800c060:	9d02      	ldr	r5, [sp, #8]
 800c062:	0039      	movs	r1, r7
 800c064:	f7f4 f8de 	bl	8000224 <__aeabi_uidivmod>
 800c068:	5c73      	ldrb	r3, [r6, r1]
 800c06a:	3d01      	subs	r5, #1
 800c06c:	702b      	strb	r3, [r5, #0]
 800c06e:	2800      	cmp	r0, #0
 800c070:	d1f7      	bne.n	800c062 <_printf_i+0x1be>
 800c072:	2f08      	cmp	r7, #8
 800c074:	d109      	bne.n	800c08a <_printf_i+0x1e6>
 800c076:	6823      	ldr	r3, [r4, #0]
 800c078:	07db      	lsls	r3, r3, #31
 800c07a:	d506      	bpl.n	800c08a <_printf_i+0x1e6>
 800c07c:	6863      	ldr	r3, [r4, #4]
 800c07e:	6922      	ldr	r2, [r4, #16]
 800c080:	4293      	cmp	r3, r2
 800c082:	dc02      	bgt.n	800c08a <_printf_i+0x1e6>
 800c084:	2330      	movs	r3, #48	; 0x30
 800c086:	3d01      	subs	r5, #1
 800c088:	702b      	strb	r3, [r5, #0]
 800c08a:	9b02      	ldr	r3, [sp, #8]
 800c08c:	1b5b      	subs	r3, r3, r5
 800c08e:	6123      	str	r3, [r4, #16]
 800c090:	9b05      	ldr	r3, [sp, #20]
 800c092:	aa07      	add	r2, sp, #28
 800c094:	9300      	str	r3, [sp, #0]
 800c096:	0021      	movs	r1, r4
 800c098:	9b04      	ldr	r3, [sp, #16]
 800c09a:	9803      	ldr	r0, [sp, #12]
 800c09c:	f7ff fe94 	bl	800bdc8 <_printf_common>
 800c0a0:	1c43      	adds	r3, r0, #1
 800c0a2:	d1b8      	bne.n	800c016 <_printf_i+0x172>
 800c0a4:	2001      	movs	r0, #1
 800c0a6:	4240      	negs	r0, r0
 800c0a8:	b009      	add	sp, #36	; 0x24
 800c0aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0ac:	0800ce35 	.word	0x0800ce35
 800c0b0:	0800ce46 	.word	0x0800ce46

0800c0b4 <memchr>:
 800c0b4:	b2c9      	uxtb	r1, r1
 800c0b6:	1882      	adds	r2, r0, r2
 800c0b8:	4290      	cmp	r0, r2
 800c0ba:	d101      	bne.n	800c0c0 <memchr+0xc>
 800c0bc:	2000      	movs	r0, #0
 800c0be:	4770      	bx	lr
 800c0c0:	7803      	ldrb	r3, [r0, #0]
 800c0c2:	428b      	cmp	r3, r1
 800c0c4:	d0fb      	beq.n	800c0be <memchr+0xa>
 800c0c6:	3001      	adds	r0, #1
 800c0c8:	e7f6      	b.n	800c0b8 <memchr+0x4>

0800c0ca <memmove>:
 800c0ca:	b510      	push	{r4, lr}
 800c0cc:	4288      	cmp	r0, r1
 800c0ce:	d902      	bls.n	800c0d6 <memmove+0xc>
 800c0d0:	188b      	adds	r3, r1, r2
 800c0d2:	4298      	cmp	r0, r3
 800c0d4:	d303      	bcc.n	800c0de <memmove+0x14>
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	e007      	b.n	800c0ea <memmove+0x20>
 800c0da:	5c8b      	ldrb	r3, [r1, r2]
 800c0dc:	5483      	strb	r3, [r0, r2]
 800c0de:	3a01      	subs	r2, #1
 800c0e0:	d2fb      	bcs.n	800c0da <memmove+0x10>
 800c0e2:	bd10      	pop	{r4, pc}
 800c0e4:	5ccc      	ldrb	r4, [r1, r3]
 800c0e6:	54c4      	strb	r4, [r0, r3]
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d1fa      	bne.n	800c0e4 <memmove+0x1a>
 800c0ee:	e7f8      	b.n	800c0e2 <memmove+0x18>

0800c0f0 <_free_r>:
 800c0f0:	b570      	push	{r4, r5, r6, lr}
 800c0f2:	0005      	movs	r5, r0
 800c0f4:	2900      	cmp	r1, #0
 800c0f6:	d010      	beq.n	800c11a <_free_r+0x2a>
 800c0f8:	1f0c      	subs	r4, r1, #4
 800c0fa:	6823      	ldr	r3, [r4, #0]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	da00      	bge.n	800c102 <_free_r+0x12>
 800c100:	18e4      	adds	r4, r4, r3
 800c102:	0028      	movs	r0, r5
 800c104:	f7ff fcfe 	bl	800bb04 <__malloc_lock>
 800c108:	4a1d      	ldr	r2, [pc, #116]	; (800c180 <_free_r+0x90>)
 800c10a:	6813      	ldr	r3, [r2, #0]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d105      	bne.n	800c11c <_free_r+0x2c>
 800c110:	6063      	str	r3, [r4, #4]
 800c112:	6014      	str	r4, [r2, #0]
 800c114:	0028      	movs	r0, r5
 800c116:	f7ff fcf6 	bl	800bb06 <__malloc_unlock>
 800c11a:	bd70      	pop	{r4, r5, r6, pc}
 800c11c:	42a3      	cmp	r3, r4
 800c11e:	d909      	bls.n	800c134 <_free_r+0x44>
 800c120:	6821      	ldr	r1, [r4, #0]
 800c122:	1860      	adds	r0, r4, r1
 800c124:	4283      	cmp	r3, r0
 800c126:	d1f3      	bne.n	800c110 <_free_r+0x20>
 800c128:	6818      	ldr	r0, [r3, #0]
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	1841      	adds	r1, r0, r1
 800c12e:	6021      	str	r1, [r4, #0]
 800c130:	e7ee      	b.n	800c110 <_free_r+0x20>
 800c132:	0013      	movs	r3, r2
 800c134:	685a      	ldr	r2, [r3, #4]
 800c136:	2a00      	cmp	r2, #0
 800c138:	d001      	beq.n	800c13e <_free_r+0x4e>
 800c13a:	42a2      	cmp	r2, r4
 800c13c:	d9f9      	bls.n	800c132 <_free_r+0x42>
 800c13e:	6819      	ldr	r1, [r3, #0]
 800c140:	1858      	adds	r0, r3, r1
 800c142:	42a0      	cmp	r0, r4
 800c144:	d10b      	bne.n	800c15e <_free_r+0x6e>
 800c146:	6820      	ldr	r0, [r4, #0]
 800c148:	1809      	adds	r1, r1, r0
 800c14a:	1858      	adds	r0, r3, r1
 800c14c:	6019      	str	r1, [r3, #0]
 800c14e:	4282      	cmp	r2, r0
 800c150:	d1e0      	bne.n	800c114 <_free_r+0x24>
 800c152:	6810      	ldr	r0, [r2, #0]
 800c154:	6852      	ldr	r2, [r2, #4]
 800c156:	1841      	adds	r1, r0, r1
 800c158:	6019      	str	r1, [r3, #0]
 800c15a:	605a      	str	r2, [r3, #4]
 800c15c:	e7da      	b.n	800c114 <_free_r+0x24>
 800c15e:	42a0      	cmp	r0, r4
 800c160:	d902      	bls.n	800c168 <_free_r+0x78>
 800c162:	230c      	movs	r3, #12
 800c164:	602b      	str	r3, [r5, #0]
 800c166:	e7d5      	b.n	800c114 <_free_r+0x24>
 800c168:	6821      	ldr	r1, [r4, #0]
 800c16a:	1860      	adds	r0, r4, r1
 800c16c:	4282      	cmp	r2, r0
 800c16e:	d103      	bne.n	800c178 <_free_r+0x88>
 800c170:	6810      	ldr	r0, [r2, #0]
 800c172:	6852      	ldr	r2, [r2, #4]
 800c174:	1841      	adds	r1, r0, r1
 800c176:	6021      	str	r1, [r4, #0]
 800c178:	6062      	str	r2, [r4, #4]
 800c17a:	605c      	str	r4, [r3, #4]
 800c17c:	e7ca      	b.n	800c114 <_free_r+0x24>
 800c17e:	46c0      	nop			; (mov r8, r8)
 800c180:	20000144 	.word	0x20000144

0800c184 <_realloc_r>:
 800c184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c186:	0007      	movs	r7, r0
 800c188:	000d      	movs	r5, r1
 800c18a:	0016      	movs	r6, r2
 800c18c:	2900      	cmp	r1, #0
 800c18e:	d105      	bne.n	800c19c <_realloc_r+0x18>
 800c190:	0011      	movs	r1, r2
 800c192:	f7ff fc27 	bl	800b9e4 <_malloc_r>
 800c196:	0004      	movs	r4, r0
 800c198:	0020      	movs	r0, r4
 800c19a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c19c:	2a00      	cmp	r2, #0
 800c19e:	d103      	bne.n	800c1a8 <_realloc_r+0x24>
 800c1a0:	f7ff ffa6 	bl	800c0f0 <_free_r>
 800c1a4:	0034      	movs	r4, r6
 800c1a6:	e7f7      	b.n	800c198 <_realloc_r+0x14>
 800c1a8:	f000 f812 	bl	800c1d0 <_malloc_usable_size_r>
 800c1ac:	002c      	movs	r4, r5
 800c1ae:	42b0      	cmp	r0, r6
 800c1b0:	d2f2      	bcs.n	800c198 <_realloc_r+0x14>
 800c1b2:	0031      	movs	r1, r6
 800c1b4:	0038      	movs	r0, r7
 800c1b6:	f7ff fc15 	bl	800b9e4 <_malloc_r>
 800c1ba:	1e04      	subs	r4, r0, #0
 800c1bc:	d0ec      	beq.n	800c198 <_realloc_r+0x14>
 800c1be:	0029      	movs	r1, r5
 800c1c0:	0032      	movs	r2, r6
 800c1c2:	f7ff fbef 	bl	800b9a4 <memcpy>
 800c1c6:	0029      	movs	r1, r5
 800c1c8:	0038      	movs	r0, r7
 800c1ca:	f7ff ff91 	bl	800c0f0 <_free_r>
 800c1ce:	e7e3      	b.n	800c198 <_realloc_r+0x14>

0800c1d0 <_malloc_usable_size_r>:
 800c1d0:	1f0b      	subs	r3, r1, #4
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	1f18      	subs	r0, r3, #4
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	da01      	bge.n	800c1de <_malloc_usable_size_r+0xe>
 800c1da:	580b      	ldr	r3, [r1, r0]
 800c1dc:	18c0      	adds	r0, r0, r3
 800c1de:	4770      	bx	lr

0800c1e0 <_init>:
 800c1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1e2:	46c0      	nop			; (mov r8, r8)
 800c1e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1e6:	bc08      	pop	{r3}
 800c1e8:	469e      	mov	lr, r3
 800c1ea:	4770      	bx	lr

0800c1ec <_fini>:
 800c1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ee:	46c0      	nop			; (mov r8, r8)
 800c1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1f2:	bc08      	pop	{r3}
 800c1f4:	469e      	mov	lr, r3
 800c1f6:	4770      	bx	lr
