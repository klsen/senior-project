
project_L0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000899c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e8  08008a5c  08008a5c  00018a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009244  08009244  000200bc  2**0
                  CONTENTS
  4 .ARM          00000000  08009244  08009244  000200bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009244  08009244  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009244  08009244  00019244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009248  08009248  00019248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  0800924c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  200000bc  08009308  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  08009308  00020398  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c19  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ef9  00000000  00000000  00037cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001248  00000000  00000000  0003abf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010b8  00000000  00000000  0003be40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017b9e  00000000  00000000  0003cef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fceb  00000000  00000000  00054a96  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d1e6  00000000  00000000  00064781  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f1967  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004390  00000000  00000000  000f19e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000bc 	.word	0x200000bc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008a44 	.word	0x08008a44

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000c0 	.word	0x200000c0
 8000104:	08008a44 	.word	0x08008a44

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <SPI_CS_LOW>:
static uint8_t textSize;
static uint16_t textColor;
static uint16_t bg;

// ---- lower level functions ----
void SPI_CS_LOW() {HAL_GPIO_WritePin(CS_GPIO, CS_PIN, GPIO_PIN_RESET);}
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
 8000408:	4b04      	ldr	r3, [pc, #16]	; (800041c <SPI_CS_LOW+0x18>)
 800040a:	2200      	movs	r2, #0
 800040c:	2180      	movs	r1, #128	; 0x80
 800040e:	0018      	movs	r0, r3
 8000410:	f004 fd27 	bl	8004e62 <HAL_GPIO_WritePin>
 8000414:	46c0      	nop			; (mov r8, r8)
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	50000800 	.word	0x50000800

08000420 <SPI_CS_HIGH>:

void SPI_CS_HIGH() {HAL_GPIO_WritePin(CS_GPIO, CS_PIN, GPIO_PIN_SET);}
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
 8000424:	4b04      	ldr	r3, [pc, #16]	; (8000438 <SPI_CS_HIGH+0x18>)
 8000426:	2201      	movs	r2, #1
 8000428:	2180      	movs	r1, #128	; 0x80
 800042a:	0018      	movs	r0, r3
 800042c:	f004 fd19 	bl	8004e62 <HAL_GPIO_WritePin>
 8000430:	46c0      	nop			; (mov r8, r8)
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	50000800 	.word	0x50000800

0800043c <SPI_DC_LOW>:

void SPI_DC_LOW() {HAL_GPIO_WritePin(DC_GPIO, DC_PIN, GPIO_PIN_RESET);}
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
 8000440:	4b04      	ldr	r3, [pc, #16]	; (8000454 <SPI_DC_LOW+0x18>)
 8000442:	2200      	movs	r2, #0
 8000444:	2140      	movs	r1, #64	; 0x40
 8000446:	0018      	movs	r0, r3
 8000448:	f004 fd0b 	bl	8004e62 <HAL_GPIO_WritePin>
 800044c:	46c0      	nop			; (mov r8, r8)
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	50000400 	.word	0x50000400

08000458 <SPI_DC_HIGH>:

void SPI_DC_HIGH() {HAL_GPIO_WritePin(DC_GPIO, DC_PIN, GPIO_PIN_SET);}
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
 800045c:	4b04      	ldr	r3, [pc, #16]	; (8000470 <SPI_DC_HIGH+0x18>)
 800045e:	2201      	movs	r2, #1
 8000460:	2140      	movs	r1, #64	; 0x40
 8000462:	0018      	movs	r0, r3
 8000464:	f004 fcfd 	bl	8004e62 <HAL_GPIO_WritePin>
 8000468:	46c0      	nop			; (mov r8, r8)
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	50000400 	.word	0x50000400

08000474 <sendCommand>:

// still ripped but now im changing it
void sendCommand(uint8_t cmd, uint8_t *args, uint16_t numArgs, SPI_HandleTypeDef *hspi) {
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0
 800047a:	60b9      	str	r1, [r7, #8]
 800047c:	0011      	movs	r1, r2
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	230f      	movs	r3, #15
 8000482:	18fb      	adds	r3, r7, r3
 8000484:	1c02      	adds	r2, r0, #0
 8000486:	701a      	strb	r2, [r3, #0]
 8000488:	230c      	movs	r3, #12
 800048a:	18fb      	adds	r3, r7, r3
 800048c:	1c0a      	adds	r2, r1, #0
 800048e:	801a      	strh	r2, [r3, #0]
	while (HAL_SPI_GetState(hspi) == HAL_SPI_STATE_BUSY_TX);		// block next transfer request while DMA transfer is ongoing
 8000490:	46c0      	nop			; (mov r8, r8)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	0018      	movs	r0, r3
 8000496:	f006 fe61 	bl	800715c <HAL_SPI_GetState>
 800049a:	0003      	movs	r3, r0
 800049c:	2b03      	cmp	r3, #3
 800049e:	d0f8      	beq.n	8000492 <sendCommand+0x1e>
	SPI_CS_LOW();	// chip select
 80004a0:	f7ff ffb0 	bl	8000404 <SPI_CS_LOW>

	SPI_DC_LOW();	// command mode
 80004a4:	f7ff ffca 	bl	800043c <SPI_DC_LOW>
	HAL_SPI_Transmit(hspi, &cmd, 1, 1000);	// not using DMA bc it's only 1 byte
 80004a8:	23fa      	movs	r3, #250	; 0xfa
 80004aa:	009b      	lsls	r3, r3, #2
 80004ac:	220f      	movs	r2, #15
 80004ae:	18b9      	adds	r1, r7, r2
 80004b0:	6878      	ldr	r0, [r7, #4]
 80004b2:	2201      	movs	r2, #1
 80004b4:	f006 fb70 	bl	8006b98 <HAL_SPI_Transmit>

	SPI_DC_HIGH();	// data mode
 80004b8:	f7ff ffce 	bl	8000458 <SPI_DC_HIGH>
	if (numArgs) {
 80004bc:	230c      	movs	r3, #12
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	881b      	ldrh	r3, [r3, #0]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d007      	beq.n	80004d6 <sendCommand+0x62>
		HAL_SPI_Transmit_IT(hspi, args, numArgs);
 80004c6:	230c      	movs	r3, #12
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	881a      	ldrh	r2, [r3, #0]
 80004cc:	68b9      	ldr	r1, [r7, #8]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	0018      	movs	r0, r3
 80004d2:	f006 fcaf 	bl	8006e34 <HAL_SPI_Transmit_IT>
//		HAL_SPI_Transmit_DMA(hspi, args, numArgs);
	}

//	SPI_CS_HIGH();	// chip select disable
}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	46bd      	mov	sp, r7
 80004da:	b004      	add	sp, #16
 80004dc:	bd80      	pop	{r7, pc}
	...

080004e0 <HAL_SPI_TxCpltCallback>:

// DMA callback on transfer compelete
// using only for sending data, but not commands
// dont send request when transfer is ongoing
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(CS_GPIO, CS_PIN) == GPIO_PIN_RESET) SPI_CS_HIGH();	// chip select disable
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <HAL_SPI_TxCpltCallback+0x24>)
 80004ea:	2180      	movs	r1, #128	; 0x80
 80004ec:	0018      	movs	r0, r3
 80004ee:	f004 fc9b 	bl	8004e28 <HAL_GPIO_ReadPin>
 80004f2:	1e03      	subs	r3, r0, #0
 80004f4:	d101      	bne.n	80004fa <HAL_SPI_TxCpltCallback+0x1a>
 80004f6:	f7ff ff93 	bl	8000420 <SPI_CS_HIGH>
}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	b002      	add	sp, #8
 8000500:	bd80      	pop	{r7, pc}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	50000800 	.word	0x50000800

08000508 <displayInit>:

// array parser heavily based on Adafruit library code
void displayInit(uint8_t *args, SPI_HandleTypeDef *hspi) {
 8000508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
	uint8_t  numCommands, cmd, numArgs;
	uint16_t ms;
	uint8_t index = 0;
 8000512:	220b      	movs	r2, #11
 8000514:	0011      	movs	r1, r2
 8000516:	18bb      	adds	r3, r7, r2
 8000518:	2200      	movs	r2, #0
 800051a:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	numCommands = args[index++];   // Number of commands to follow
 800051c:	000a      	movs	r2, r1
 800051e:	18bb      	adds	r3, r7, r2
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	18ba      	adds	r2, r7, r2
 8000524:	1c59      	adds	r1, r3, #1
 8000526:	7011      	strb	r1, [r2, #0]
 8000528:	001a      	movs	r2, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	189a      	adds	r2, r3, r2
 800052e:	230f      	movs	r3, #15
 8000530:	18fb      	adds	r3, r7, r3
 8000532:	7812      	ldrb	r2, [r2, #0]
 8000534:	701a      	strb	r2, [r3, #0]
	while(numCommands--) {                 // For each command...
 8000536:	e05e      	b.n	80005f6 <displayInit+0xee>
		cmd = args[index++];         // Read command
 8000538:	200b      	movs	r0, #11
 800053a:	183b      	adds	r3, r7, r0
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	183a      	adds	r2, r7, r0
 8000540:	1c59      	adds	r1, r3, #1
 8000542:	7011      	strb	r1, [r2, #0]
 8000544:	001a      	movs	r2, r3
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	189a      	adds	r2, r3, r2
 800054a:	230a      	movs	r3, #10
 800054c:	18fb      	adds	r3, r7, r3
 800054e:	7812      	ldrb	r2, [r2, #0]
 8000550:	701a      	strb	r2, [r3, #0]
		numArgs  = args[index++];    // Number of args to follow
 8000552:	183b      	adds	r3, r7, r0
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	183a      	adds	r2, r7, r0
 8000558:	1c59      	adds	r1, r3, #1
 800055a:	7011      	strb	r1, [r2, #0]
 800055c:	001a      	movs	r2, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	189a      	adds	r2, r3, r2
 8000562:	2609      	movs	r6, #9
 8000564:	19bb      	adds	r3, r7, r6
 8000566:	7812      	ldrb	r2, [r2, #0]
 8000568:	701a      	strb	r2, [r3, #0]
		ms       = numArgs & ST_CMD_DELAY;   // If hibit set, delay follows args
 800056a:	19bb      	adds	r3, r7, r6
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	b29a      	uxth	r2, r3
 8000570:	210c      	movs	r1, #12
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2180      	movs	r1, #128	; 0x80
 8000576:	400a      	ands	r2, r1
 8000578:	801a      	strh	r2, [r3, #0]
		numArgs &= ~ST_CMD_DELAY;            // Mask out delay bit
 800057a:	19bb      	adds	r3, r7, r6
 800057c:	19ba      	adds	r2, r7, r6
 800057e:	7812      	ldrb	r2, [r2, #0]
 8000580:	217f      	movs	r1, #127	; 0x7f
 8000582:	400a      	ands	r2, r1
 8000584:	701a      	strb	r2, [r3, #0]
		sendCommand(cmd, &args[index], numArgs, hspi);
 8000586:	0005      	movs	r5, r0
 8000588:	183b      	adds	r3, r7, r0
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	18d1      	adds	r1, r2, r3
 8000590:	19bb      	adds	r3, r7, r6
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	b29a      	uxth	r2, r3
 8000596:	683c      	ldr	r4, [r7, #0]
 8000598:	230a      	movs	r3, #10
 800059a:	18fb      	adds	r3, r7, r3
 800059c:	7818      	ldrb	r0, [r3, #0]
 800059e:	0023      	movs	r3, r4
 80005a0:	f7ff ff68 	bl	8000474 <sendCommand>
		index += numArgs;
 80005a4:	0028      	movs	r0, r5
 80005a6:	183b      	adds	r3, r7, r0
 80005a8:	1839      	adds	r1, r7, r0
 80005aa:	19ba      	adds	r2, r7, r6
 80005ac:	7809      	ldrb	r1, [r1, #0]
 80005ae:	7812      	ldrb	r2, [r2, #0]
 80005b0:	188a      	adds	r2, r1, r2
 80005b2:	701a      	strb	r2, [r3, #0]

		if(ms) {
 80005b4:	210c      	movs	r1, #12
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	881b      	ldrh	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d01b      	beq.n	80005f6 <displayInit+0xee>
			ms = args[index++]; // Read post-command delay time (ms)
 80005be:	220b      	movs	r2, #11
 80005c0:	18bb      	adds	r3, r7, r2
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	18ba      	adds	r2, r7, r2
 80005c6:	1c59      	adds	r1, r3, #1
 80005c8:	7011      	strb	r1, [r2, #0]
 80005ca:	001a      	movs	r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	189b      	adds	r3, r3, r2
 80005d0:	781a      	ldrb	r2, [r3, #0]
 80005d2:	210c      	movs	r1, #12
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	801a      	strh	r2, [r3, #0]
			if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	2bff      	cmp	r3, #255	; 0xff
 80005de:	d104      	bne.n	80005ea <displayInit+0xe2>
 80005e0:	230c      	movs	r3, #12
 80005e2:	18fb      	adds	r3, r7, r3
 80005e4:	22fa      	movs	r2, #250	; 0xfa
 80005e6:	0052      	lsls	r2, r2, #1
 80005e8:	801a      	strh	r2, [r3, #0]
			HAL_Delay(ms);
 80005ea:	230c      	movs	r3, #12
 80005ec:	18fb      	adds	r3, r7, r3
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	0018      	movs	r0, r3
 80005f2:	f003 fdb3 	bl	800415c <HAL_Delay>
	while(numCommands--) {                 // For each command...
 80005f6:	220f      	movs	r2, #15
 80005f8:	18bb      	adds	r3, r7, r2
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	18ba      	adds	r2, r7, r2
 80005fe:	1e59      	subs	r1, r3, #1
 8000600:	7011      	strb	r1, [r2, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d198      	bne.n	8000538 <displayInit+0x30>
		}
	}

	// note: this line may be doing more work than I think
	// (hard to read in datasheet)
	data = 0xC0;
 8000606:	2108      	movs	r1, #8
 8000608:	187b      	adds	r3, r7, r1
 800060a:	22c0      	movs	r2, #192	; 0xc0
 800060c:	701a      	strb	r2, [r3, #0]
	sendCommand(ST77XX_MADCTL, &data, 1, hspi);
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	1879      	adds	r1, r7, r1
 8000612:	2201      	movs	r2, #1
 8000614:	2036      	movs	r0, #54	; 0x36
 8000616:	f7ff ff2d 	bl	8000474 <sendCommand>
}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	46bd      	mov	sp, r7
 800061e:	b005      	add	sp, #20
 8000620:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000624 <TFT_startup>:

void TFT_startup(SPI_HandleTypeDef *hspi) {
 8000624:	b590      	push	{r4, r7, lr}
 8000626:	b0a3      	sub	sp, #140	; 0x8c
 8000628:	af02      	add	r7, sp, #8
 800062a:	6078      	str	r0, [r7, #4]
	// startup sequence: rcmd1->rcmd2red->rcmd3
	uint8_t initCommands[] = {
 800062c:	240c      	movs	r4, #12
 800062e:	193a      	adds	r2, r7, r4
 8000630:	4b14      	ldr	r3, [pc, #80]	; (8000684 <TFT_startup+0x60>)
 8000632:	0010      	movs	r0, r2
 8000634:	0019      	movs	r1, r3
 8000636:	2371      	movs	r3, #113	; 0x71
 8000638:	001a      	movs	r2, r3
 800063a:	f007 fdf3 	bl	8008224 <memcpy>
			10,                           //     10 ms delay
		ST77XX_DISPON,    ST_CMD_DELAY, //  4: Main screen turn on, no args w/delay
			100	                        //     100 ms delay
	};

	displayInit(initCommands, hspi);
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	193b      	adds	r3, r7, r4
 8000642:	0011      	movs	r1, r2
 8000644:	0018      	movs	r0, r3
 8000646:	f7ff ff5f 	bl	8000508 <displayInit>
	setAddrWindow(0, 0, WIDTH, HEIGHT, hspi);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	23a0      	movs	r3, #160	; 0xa0
 8000650:	2280      	movs	r2, #128	; 0x80
 8000652:	2100      	movs	r1, #0
 8000654:	2000      	movs	r0, #0
 8000656:	f000 f821 	bl	800069c <setAddrWindow>

	// set the global variables
	cursorX = 0;
 800065a:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <TFT_startup+0x64>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	cursorY = 0;
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <TFT_startup+0x68>)
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]
	textSize = 1;
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <TFT_startup+0x6c>)
 8000668:	2201      	movs	r2, #1
 800066a:	701a      	strb	r2, [r3, #0]
	textColor = ST77XX_BLACK;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <TFT_startup+0x70>)
 800066e:	2200      	movs	r2, #0
 8000670:	801a      	strh	r2, [r3, #0]
	bg = ST77XX_WHITE;
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <TFT_startup+0x74>)
 8000674:	2201      	movs	r2, #1
 8000676:	4252      	negs	r2, r2
 8000678:	801a      	strh	r2, [r3, #0]
}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b021      	add	sp, #132	; 0x84
 8000680:	bd90      	pop	{r4, r7, pc}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	08008a5c 	.word	0x08008a5c
 8000688:	200000d8 	.word	0x200000d8
 800068c:	200000d9 	.word	0x200000d9
 8000690:	200000da 	.word	0x200000da
 8000694:	200000dc 	.word	0x200000dc
 8000698:	200000de 	.word	0x200000de

0800069c <setAddrWindow>:

// draw something: set addr window -> write to ram memory
// sets specific area on display to write pixels to
// x and y for upper left corner, w for width, h for height
void setAddrWindow(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SPI_HandleTypeDef *hspi) {
 800069c:	b5b0      	push	{r4, r5, r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	0005      	movs	r5, r0
 80006a4:	000c      	movs	r4, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	1dbb      	adds	r3, r7, #6
 80006ac:	1c2a      	adds	r2, r5, #0
 80006ae:	801a      	strh	r2, [r3, #0]
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	1c22      	adds	r2, r4, #0
 80006b4:	801a      	strh	r2, [r3, #0]
 80006b6:	1cbb      	adds	r3, r7, #2
 80006b8:	1c02      	adds	r2, r0, #0
 80006ba:	801a      	strh	r2, [r3, #0]
 80006bc:	003b      	movs	r3, r7
 80006be:	1c0a      	adds	r2, r1, #0
 80006c0:	801a      	strh	r2, [r3, #0]
	// not really needed for our display
	x += _xstart;
 80006c2:	1dbb      	adds	r3, r7, #6
 80006c4:	1dba      	adds	r2, r7, #6
 80006c6:	8812      	ldrh	r2, [r2, #0]
 80006c8:	801a      	strh	r2, [r3, #0]
	y += _ystart;
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	1d3a      	adds	r2, r7, #4
 80006ce:	8812      	ldrh	r2, [r2, #0]
 80006d0:	801a      	strh	r2, [r3, #0]

	uint8_t temp[4];
	temp[0] = (x & (0xFF00)) >> 8;
 80006d2:	1dbb      	adds	r3, r7, #6
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	0a1b      	lsrs	r3, r3, #8
 80006d8:	b29b      	uxth	r3, r3
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	210c      	movs	r1, #12
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	701a      	strb	r2, [r3, #0]
	temp[1] = x & (0xFF);
 80006e2:	1dbb      	adds	r3, r7, #6
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	705a      	strb	r2, [r3, #1]
	temp[2] = ((x+w-1) & (0xFF00)) >> 8;
 80006ec:	1dbb      	adds	r3, r7, #6
 80006ee:	881a      	ldrh	r2, [r3, #0]
 80006f0:	1cbb      	adds	r3, r7, #2
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	18d3      	adds	r3, r2, r3
 80006f6:	3b01      	subs	r3, #1
 80006f8:	121b      	asrs	r3, r3, #8
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	709a      	strb	r2, [r3, #2]
	temp[3] = (x+w-1) & (0xFF);
 8000700:	1dbb      	adds	r3, r7, #6
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	b2da      	uxtb	r2, r3
 8000706:	1cbb      	adds	r3, r7, #2
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	b2db      	uxtb	r3, r3
 800070c:	18d3      	adds	r3, r2, r3
 800070e:	b2db      	uxtb	r3, r3
 8000710:	3b01      	subs	r3, #1
 8000712:	b2da      	uxtb	r2, r3
 8000714:	187b      	adds	r3, r7, r1
 8000716:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_CASET, temp, 4, hspi);
 8000718:	6a3b      	ldr	r3, [r7, #32]
 800071a:	000c      	movs	r4, r1
 800071c:	1879      	adds	r1, r7, r1
 800071e:	2204      	movs	r2, #4
 8000720:	202a      	movs	r0, #42	; 0x2a
 8000722:	f7ff fea7 	bl	8000474 <sendCommand>

	temp[0] = (y & (0xFF00)) >> 8;
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	0a1b      	lsrs	r3, r3, #8
 800072c:	b29b      	uxth	r3, r3
 800072e:	b2da      	uxtb	r2, r3
 8000730:	0021      	movs	r1, r4
 8000732:	187b      	adds	r3, r7, r1
 8000734:	701a      	strb	r2, [r3, #0]
	temp[1] = y & (0xFF);
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	881b      	ldrh	r3, [r3, #0]
 800073a:	b2da      	uxtb	r2, r3
 800073c:	187b      	adds	r3, r7, r1
 800073e:	705a      	strb	r2, [r3, #1]
	temp[2] = ((y+h-1) & (0xFF00)) >> 8;
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	881a      	ldrh	r2, [r3, #0]
 8000744:	003b      	movs	r3, r7
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	18d3      	adds	r3, r2, r3
 800074a:	3b01      	subs	r3, #1
 800074c:	121b      	asrs	r3, r3, #8
 800074e:	b2da      	uxtb	r2, r3
 8000750:	187b      	adds	r3, r7, r1
 8000752:	709a      	strb	r2, [r3, #2]
	temp[3] = (y+h-1) & (0x00FF);
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	b2da      	uxtb	r2, r3
 800075a:	003b      	movs	r3, r7
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	18d3      	adds	r3, r2, r3
 8000762:	b2db      	uxtb	r3, r3
 8000764:	3b01      	subs	r3, #1
 8000766:	b2da      	uxtb	r2, r3
 8000768:	187b      	adds	r3, r7, r1
 800076a:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_RASET, temp, 4, hspi);
 800076c:	6a3b      	ldr	r3, [r7, #32]
 800076e:	1879      	adds	r1, r7, r1
 8000770:	2204      	movs	r2, #4
 8000772:	202b      	movs	r0, #43	; 0x2b
 8000774:	f7ff fe7e 	bl	8000474 <sendCommand>
}
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	b004      	add	sp, #16
 800077e:	bdb0      	pop	{r4, r5, r7, pc}

08000780 <colorFixer>:
// 8-bit spi bus wants msb first; in array, lowest index is sent first
// because L4 is little-endian
//   for 16-bit value, it sends lower byte before upper byte
//   resulting in device thinking lower byte is upper byte
// this switches byte order around
uint16_t colorFixer(uint16_t color) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	0002      	movs	r2, r0
 8000788:	1dbb      	adds	r3, r7, #6
 800078a:	801a      	strh	r2, [r3, #0]
	uint8_t a = color & 0xFF;
 800078c:	210f      	movs	r1, #15
 800078e:	187b      	adds	r3, r7, r1
 8000790:	1dba      	adds	r2, r7, #6
 8000792:	8812      	ldrh	r2, [r2, #0]
 8000794:	701a      	strb	r2, [r3, #0]
	uint8_t b = (color & 0xFF00) >> 8;
 8000796:	1dbb      	adds	r3, r7, #6
 8000798:	881b      	ldrh	r3, [r3, #0]
 800079a:	0a1b      	lsrs	r3, r3, #8
 800079c:	b29a      	uxth	r2, r3
 800079e:	200e      	movs	r0, #14
 80007a0:	183b      	adds	r3, r7, r0
 80007a2:	701a      	strb	r2, [r3, #0]
	uint16_t ret = (a << 8) | b;
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	021b      	lsls	r3, r3, #8
 80007aa:	b21a      	sxth	r2, r3
 80007ac:	183b      	adds	r3, r7, r0
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b21b      	sxth	r3, r3
 80007b2:	4313      	orrs	r3, r2
 80007b4:	b21a      	sxth	r2, r3
 80007b6:	210c      	movs	r1, #12
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	801a      	strh	r2, [r3, #0]

	return ret;
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	881b      	ldrh	r3, [r3, #0]
}
 80007c0:	0018      	movs	r0, r3
 80007c2:	46bd      	mov	sp, r7
 80007c4:	b004      	add	sp, #16
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <drawHLine>:
	setAddrWindow(x, y, 1, 1, hspi);
	uint16_t tempColor = colorFixer(color);		// else we're using address of something passed by value
	sendCommand(ST77XX_RAMWR, &tempColor, 2, hspi);
}

void drawHLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 80007c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ca:	b091      	sub	sp, #68	; 0x44
 80007cc:	af02      	add	r7, sp, #8
 80007ce:	000c      	movs	r4, r1
 80007d0:	0016      	movs	r6, r2
 80007d2:	0019      	movs	r1, r3
 80007d4:	2327      	movs	r3, #39	; 0x27
 80007d6:	18fa      	adds	r2, r7, r3
 80007d8:	1c03      	adds	r3, r0, #0
 80007da:	7013      	strb	r3, [r2, #0]
 80007dc:	2326      	movs	r3, #38	; 0x26
 80007de:	18fb      	adds	r3, r7, r3
 80007e0:	1c22      	adds	r2, r4, #0
 80007e2:	701a      	strb	r2, [r3, #0]
 80007e4:	2325      	movs	r3, #37	; 0x25
 80007e6:	18fb      	adds	r3, r7, r3
 80007e8:	1c32      	adds	r2, r6, #0
 80007ea:	701a      	strb	r2, [r3, #0]
 80007ec:	2322      	movs	r3, #34	; 0x22
 80007ee:	18fb      	adds	r3, r7, r3
 80007f0:	1c0a      	adds	r2, r1, #0
 80007f2:	801a      	strh	r2, [r3, #0]
 80007f4:	466b      	mov	r3, sp
 80007f6:	001e      	movs	r6, r3
	// bounds checking
	if (x < 0) x = 0;						// don't set x out of bounds
	if (x > WIDTH) x = WIDTH;
 80007f8:	2327      	movs	r3, #39	; 0x27
 80007fa:	18fb      	adds	r3, r7, r3
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b80      	cmp	r3, #128	; 0x80
 8000800:	d903      	bls.n	800080a <drawHLine+0x42>
 8000802:	2327      	movs	r3, #39	; 0x27
 8000804:	18fb      	adds	r3, r7, r3
 8000806:	2280      	movs	r2, #128	; 0x80
 8000808:	701a      	strb	r2, [r3, #0]
	if (x+size > WIDTH) size = WIDTH-x;		// don't set size so line draws out of bounds
 800080a:	2327      	movs	r3, #39	; 0x27
 800080c:	18fb      	adds	r3, r7, r3
 800080e:	781a      	ldrb	r2, [r3, #0]
 8000810:	2325      	movs	r3, #37	; 0x25
 8000812:	18fb      	adds	r3, r7, r3
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	18d3      	adds	r3, r2, r3
 8000818:	2b80      	cmp	r3, #128	; 0x80
 800081a:	dd08      	ble.n	800082e <drawHLine+0x66>
 800081c:	2325      	movs	r3, #37	; 0x25
 800081e:	18fb      	adds	r3, r7, r3
 8000820:	2227      	movs	r2, #39	; 0x27
 8000822:	18ba      	adds	r2, r7, r2
 8000824:	7812      	ldrb	r2, [r2, #0]
 8000826:	2180      	movs	r1, #128	; 0x80
 8000828:	4249      	negs	r1, r1
 800082a:	1a8a      	subs	r2, r1, r2
 800082c:	701a      	strb	r2, [r3, #0]
	if (x+size < 0) size = 0-x;
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 800082e:	2326      	movs	r3, #38	; 0x26
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2ba0      	cmp	r3, #160	; 0xa0
 8000836:	d868      	bhi.n	800090a <drawHLine+0x142>

	setAddrWindow(x, y, size, 1, hspi);
 8000838:	2327      	movs	r3, #39	; 0x27
 800083a:	18fb      	adds	r3, r7, r3
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	b298      	uxth	r0, r3
 8000840:	2326      	movs	r3, #38	; 0x26
 8000842:	18fb      	adds	r3, r7, r3
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	b299      	uxth	r1, r3
 8000848:	2325      	movs	r3, #37	; 0x25
 800084a:	18fb      	adds	r3, r7, r3
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	b29a      	uxth	r2, r3
 8000850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	2301      	movs	r3, #1
 8000856:	f7ff ff21 	bl	800069c <setAddrWindow>
	uint16_t colors[size];
 800085a:	2325      	movs	r3, #37	; 0x25
 800085c:	18fb      	adds	r3, r7, r3
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	001a      	movs	r2, r3
 8000862:	3a01      	subs	r2, #1
 8000864:	633a      	str	r2, [r7, #48]	; 0x30
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	2200      	movs	r2, #0
 800086a:	60fa      	str	r2, [r7, #12]
 800086c:	68b8      	ldr	r0, [r7, #8]
 800086e:	68f9      	ldr	r1, [r7, #12]
 8000870:	0002      	movs	r2, r0
 8000872:	0f12      	lsrs	r2, r2, #28
 8000874:	000c      	movs	r4, r1
 8000876:	0124      	lsls	r4, r4, #4
 8000878:	61fc      	str	r4, [r7, #28]
 800087a:	69fc      	ldr	r4, [r7, #28]
 800087c:	4314      	orrs	r4, r2
 800087e:	61fc      	str	r4, [r7, #28]
 8000880:	0002      	movs	r2, r0
 8000882:	0112      	lsls	r2, r2, #4
 8000884:	61ba      	str	r2, [r7, #24]
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	2200      	movs	r2, #0
 800088a:	607a      	str	r2, [r7, #4]
 800088c:	6838      	ldr	r0, [r7, #0]
 800088e:	6879      	ldr	r1, [r7, #4]
 8000890:	0002      	movs	r2, r0
 8000892:	0f12      	lsrs	r2, r2, #28
 8000894:	000c      	movs	r4, r1
 8000896:	0124      	lsls	r4, r4, #4
 8000898:	617c      	str	r4, [r7, #20]
 800089a:	697c      	ldr	r4, [r7, #20]
 800089c:	4314      	orrs	r4, r2
 800089e:	617c      	str	r4, [r7, #20]
 80008a0:	0002      	movs	r2, r0
 80008a2:	0112      	lsls	r2, r2, #4
 80008a4:	613a      	str	r2, [r7, #16]
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	3301      	adds	r3, #1
 80008aa:	3307      	adds	r3, #7
 80008ac:	08db      	lsrs	r3, r3, #3
 80008ae:	00db      	lsls	r3, r3, #3
 80008b0:	466a      	mov	r2, sp
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	469d      	mov	sp, r3
 80008b6:	ab02      	add	r3, sp, #8
 80008b8:	3301      	adds	r3, #1
 80008ba:	085b      	lsrs	r3, r3, #1
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {		// better way to make array of 1 color; SPI without moving address of sent?
 80008c0:	2300      	movs	r3, #0
 80008c2:	637b      	str	r3, [r7, #52]	; 0x34
 80008c4:	e00e      	b.n	80008e4 <drawHLine+0x11c>
		colors[i] = colorFixer(color);
 80008c6:	2322      	movs	r3, #34	; 0x22
 80008c8:	18fb      	adds	r3, r7, r3
 80008ca:	881b      	ldrh	r3, [r3, #0]
 80008cc:	0018      	movs	r0, r3
 80008ce:	f7ff ff57 	bl	8000780 <colorFixer>
 80008d2:	0003      	movs	r3, r0
 80008d4:	0019      	movs	r1, r3
 80008d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008da:	0052      	lsls	r2, r2, #1
 80008dc:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {		// better way to make array of 1 color; SPI without moving address of sent?
 80008de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008e0:	3301      	adds	r3, #1
 80008e2:	637b      	str	r3, [r7, #52]	; 0x34
 80008e4:	2325      	movs	r3, #37	; 0x25
 80008e6:	18fb      	adds	r3, r7, r3
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008ec:	429a      	cmp	r2, r3
 80008ee:	dbea      	blt.n	80008c6 <drawHLine+0xfe>
//		colors[i] = color;
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 80008f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80008f2:	2325      	movs	r3, #37	; 0x25
 80008f4:	18fb      	adds	r3, r7, r3
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	18db      	adds	r3, r3, r3
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000900:	202c      	movs	r0, #44	; 0x2c
 8000902:	f7ff fdb7 	bl	8000474 <sendCommand>
 8000906:	46b5      	mov	sp, r6
 8000908:	e001      	b.n	800090e <drawHLine+0x146>
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	46b5      	mov	sp, r6
}
 800090e:	46bd      	mov	sp, r7
 8000910:	b00f      	add	sp, #60	; 0x3c
 8000912:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000914 <drawVLine>:

void drawVLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 8000914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000916:	b091      	sub	sp, #68	; 0x44
 8000918:	af02      	add	r7, sp, #8
 800091a:	000c      	movs	r4, r1
 800091c:	0016      	movs	r6, r2
 800091e:	0019      	movs	r1, r3
 8000920:	2327      	movs	r3, #39	; 0x27
 8000922:	18fa      	adds	r2, r7, r3
 8000924:	1c03      	adds	r3, r0, #0
 8000926:	7013      	strb	r3, [r2, #0]
 8000928:	2326      	movs	r3, #38	; 0x26
 800092a:	18fb      	adds	r3, r7, r3
 800092c:	1c22      	adds	r2, r4, #0
 800092e:	701a      	strb	r2, [r3, #0]
 8000930:	2325      	movs	r3, #37	; 0x25
 8000932:	18fb      	adds	r3, r7, r3
 8000934:	1c32      	adds	r2, r6, #0
 8000936:	701a      	strb	r2, [r3, #0]
 8000938:	2322      	movs	r3, #34	; 0x22
 800093a:	18fb      	adds	r3, r7, r3
 800093c:	1c0a      	adds	r2, r1, #0
 800093e:	801a      	strh	r2, [r3, #0]
 8000940:	466b      	mov	r3, sp
 8000942:	001e      	movs	r6, r3
	// bounds checking
	if (y < 0) y = 0;						// don't set x out of bounds
	if (y > HEIGHT) y = HEIGHT;
 8000944:	2326      	movs	r3, #38	; 0x26
 8000946:	18fb      	adds	r3, r7, r3
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2ba0      	cmp	r3, #160	; 0xa0
 800094c:	d903      	bls.n	8000956 <drawVLine+0x42>
 800094e:	2326      	movs	r3, #38	; 0x26
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	22a0      	movs	r2, #160	; 0xa0
 8000954:	701a      	strb	r2, [r3, #0]
	if (y+size > HEIGHT) size = HEIGHT-y;	// don't set size so line draws out of bounds
 8000956:	2326      	movs	r3, #38	; 0x26
 8000958:	18fb      	adds	r3, r7, r3
 800095a:	781a      	ldrb	r2, [r3, #0]
 800095c:	2325      	movs	r3, #37	; 0x25
 800095e:	18fb      	adds	r3, r7, r3
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	18d3      	adds	r3, r2, r3
 8000964:	2ba0      	cmp	r3, #160	; 0xa0
 8000966:	dd08      	ble.n	800097a <drawVLine+0x66>
 8000968:	2325      	movs	r3, #37	; 0x25
 800096a:	18fb      	adds	r3, r7, r3
 800096c:	2226      	movs	r2, #38	; 0x26
 800096e:	18ba      	adds	r2, r7, r2
 8000970:	7812      	ldrb	r2, [r2, #0]
 8000972:	2160      	movs	r1, #96	; 0x60
 8000974:	4249      	negs	r1, r1
 8000976:	1a8a      	subs	r2, r1, r2
 8000978:	701a      	strb	r2, [r3, #0]
	if (y+size < 0) size = 0-y;
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if x is out of bounds
 800097a:	2327      	movs	r3, #39	; 0x27
 800097c:	18fb      	adds	r3, r7, r3
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b80      	cmp	r3, #128	; 0x80
 8000982:	d869      	bhi.n	8000a58 <drawVLine+0x144>

	setAddrWindow(x, y, 1, size, hspi);
 8000984:	2327      	movs	r3, #39	; 0x27
 8000986:	18fb      	adds	r3, r7, r3
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	b298      	uxth	r0, r3
 800098c:	2326      	movs	r3, #38	; 0x26
 800098e:	18fb      	adds	r3, r7, r3
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	b299      	uxth	r1, r3
 8000994:	2325      	movs	r3, #37	; 0x25
 8000996:	18fb      	adds	r3, r7, r3
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	b29a      	uxth	r2, r3
 800099c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	0013      	movs	r3, r2
 80009a2:	2201      	movs	r2, #1
 80009a4:	f7ff fe7a 	bl	800069c <setAddrWindow>
	uint16_t colors[size];
 80009a8:	2325      	movs	r3, #37	; 0x25
 80009aa:	18fb      	adds	r3, r7, r3
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	001a      	movs	r2, r3
 80009b0:	3a01      	subs	r2, #1
 80009b2:	633a      	str	r2, [r7, #48]	; 0x30
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	2200      	movs	r2, #0
 80009b8:	60fa      	str	r2, [r7, #12]
 80009ba:	68b8      	ldr	r0, [r7, #8]
 80009bc:	68f9      	ldr	r1, [r7, #12]
 80009be:	0002      	movs	r2, r0
 80009c0:	0f12      	lsrs	r2, r2, #28
 80009c2:	000c      	movs	r4, r1
 80009c4:	0124      	lsls	r4, r4, #4
 80009c6:	61fc      	str	r4, [r7, #28]
 80009c8:	69fc      	ldr	r4, [r7, #28]
 80009ca:	4314      	orrs	r4, r2
 80009cc:	61fc      	str	r4, [r7, #28]
 80009ce:	0002      	movs	r2, r0
 80009d0:	0112      	lsls	r2, r2, #4
 80009d2:	61ba      	str	r2, [r7, #24]
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	2200      	movs	r2, #0
 80009d8:	607a      	str	r2, [r7, #4]
 80009da:	6838      	ldr	r0, [r7, #0]
 80009dc:	6879      	ldr	r1, [r7, #4]
 80009de:	0002      	movs	r2, r0
 80009e0:	0f12      	lsrs	r2, r2, #28
 80009e2:	000c      	movs	r4, r1
 80009e4:	0124      	lsls	r4, r4, #4
 80009e6:	617c      	str	r4, [r7, #20]
 80009e8:	697c      	ldr	r4, [r7, #20]
 80009ea:	4314      	orrs	r4, r2
 80009ec:	617c      	str	r4, [r7, #20]
 80009ee:	0002      	movs	r2, r0
 80009f0:	0112      	lsls	r2, r2, #4
 80009f2:	613a      	str	r2, [r7, #16]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	3301      	adds	r3, #1
 80009f8:	3307      	adds	r3, #7
 80009fa:	08db      	lsrs	r3, r3, #3
 80009fc:	00db      	lsls	r3, r3, #3
 80009fe:	466a      	mov	r2, sp
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	469d      	mov	sp, r3
 8000a04:	ab02      	add	r3, sp, #8
 8000a06:	3301      	adds	r3, #1
 8000a08:	085b      	lsrs	r3, r3, #1
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {		// there has to be a better way to make array of 1 color
 8000a0e:	2300      	movs	r3, #0
 8000a10:	637b      	str	r3, [r7, #52]	; 0x34
 8000a12:	e00e      	b.n	8000a32 <drawVLine+0x11e>
											// SPI without moving address of sent buffer?
		colors[i] = colorFixer(color);
 8000a14:	2322      	movs	r3, #34	; 0x22
 8000a16:	18fb      	adds	r3, r7, r3
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f7ff feb0 	bl	8000780 <colorFixer>
 8000a20:	0003      	movs	r3, r0
 8000a22:	0019      	movs	r1, r3
 8000a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a28:	0052      	lsls	r2, r2, #1
 8000a2a:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {		// there has to be a better way to make array of 1 color
 8000a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a2e:	3301      	adds	r3, #1
 8000a30:	637b      	str	r3, [r7, #52]	; 0x34
 8000a32:	2325      	movs	r3, #37	; 0x25
 8000a34:	18fb      	adds	r3, r7, r3
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	dbea      	blt.n	8000a14 <drawVLine+0x100>
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 8000a3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000a40:	2325      	movs	r3, #37	; 0x25
 8000a42:	18fb      	adds	r3, r7, r3
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	18db      	adds	r3, r3, r3
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a4e:	202c      	movs	r0, #44	; 0x2c
 8000a50:	f7ff fd10 	bl	8000474 <sendCommand>
 8000a54:	46b5      	mov	sp, r6
 8000a56:	e001      	b.n	8000a5c <drawVLine+0x148>
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if x is out of bounds
 8000a58:	46c0      	nop			; (mov r8, r8)
 8000a5a:	46b5      	mov	sp, r6
}
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	b00f      	add	sp, #60	; 0x3c
 8000a60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a62 <drawBuffer>:

void drawBuffer(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t *buffer, uint16_t bufferSize, SPI_HandleTypeDef *hspi) {
 8000a62:	b5b0      	push	{r4, r5, r7, lr}
 8000a64:	b084      	sub	sp, #16
 8000a66:	af02      	add	r7, sp, #8
 8000a68:	0005      	movs	r5, r0
 8000a6a:	000c      	movs	r4, r1
 8000a6c:	0010      	movs	r0, r2
 8000a6e:	0019      	movs	r1, r3
 8000a70:	1dfb      	adds	r3, r7, #7
 8000a72:	1c2a      	adds	r2, r5, #0
 8000a74:	701a      	strb	r2, [r3, #0]
 8000a76:	1dbb      	adds	r3, r7, #6
 8000a78:	1c22      	adds	r2, r4, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
 8000a7c:	1d7b      	adds	r3, r7, #5
 8000a7e:	1c02      	adds	r2, r0, #0
 8000a80:	701a      	strb	r2, [r3, #0]
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	1c0a      	adds	r2, r1, #0
 8000a86:	701a      	strb	r2, [r3, #0]
	// just dont call this with out-of-range vals pls.
	if (x+w > WIDTH || y+h > HEIGHT) return;
 8000a88:	1dfb      	adds	r3, r7, #7
 8000a8a:	781a      	ldrb	r2, [r3, #0]
 8000a8c:	1d7b      	adds	r3, r7, #5
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	18d3      	adds	r3, r2, r3
 8000a92:	2b80      	cmp	r3, #128	; 0x80
 8000a94:	dc29      	bgt.n	8000aea <drawBuffer+0x88>
 8000a96:	1dbb      	adds	r3, r7, #6
 8000a98:	781a      	ldrb	r2, [r3, #0]
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	18d3      	adds	r3, r2, r3
 8000aa0:	2ba0      	cmp	r3, #160	; 0xa0
 8000aa2:	dc22      	bgt.n	8000aea <drawBuffer+0x88>

	// also don't call this with buffer size too big bc there's not enough ram for all pixels of display
	if (bufferSize > 10240) return;
 8000aa4:	231c      	movs	r3, #28
 8000aa6:	18fb      	adds	r3, r7, r3
 8000aa8:	881a      	ldrh	r2, [r3, #0]
 8000aaa:	23a0      	movs	r3, #160	; 0xa0
 8000aac:	019b      	lsls	r3, r3, #6
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d81d      	bhi.n	8000aee <drawBuffer+0x8c>

	setAddrWindow(x, y, w, h, hspi);
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	b298      	uxth	r0, r3
 8000ab8:	1dbb      	adds	r3, r7, #6
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	b299      	uxth	r1, r3
 8000abe:	1d7b      	adds	r3, r7, #5
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	b29c      	uxth	r4, r3
 8000aca:	6a3b      	ldr	r3, [r7, #32]
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	0023      	movs	r3, r4
 8000ad0:	f7ff fde4 	bl	800069c <setAddrWindow>
	sendCommand(ST77XX_RAMWR, buffer, bufferSize*2, hspi);
 8000ad4:	231c      	movs	r3, #28
 8000ad6:	18fb      	adds	r3, r7, r3
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	18db      	adds	r3, r3, r3
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	6a3b      	ldr	r3, [r7, #32]
 8000ae0:	69b9      	ldr	r1, [r7, #24]
 8000ae2:	202c      	movs	r0, #44	; 0x2c
 8000ae4:	f7ff fcc6 	bl	8000474 <sendCommand>
 8000ae8:	e002      	b.n	8000af0 <drawBuffer+0x8e>
	if (x+w > WIDTH || y+h > HEIGHT) return;
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	e000      	b.n	8000af0 <drawBuffer+0x8e>
	if (bufferSize > 10240) return;
 8000aee:	46c0      	nop			; (mov r8, r8)
}
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b002      	add	sp, #8
 8000af4:	bdb0      	pop	{r4, r5, r7, pc}

08000af6 <drawRect>:
			err -= 1;
		}
	}
}

void drawRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color, SPI_HandleTypeDef *hspi) {
 8000af6:	b5b0      	push	{r4, r5, r7, lr}
 8000af8:	b084      	sub	sp, #16
 8000afa:	af02      	add	r7, sp, #8
 8000afc:	0005      	movs	r5, r0
 8000afe:	000c      	movs	r4, r1
 8000b00:	0010      	movs	r0, r2
 8000b02:	0019      	movs	r1, r3
 8000b04:	1dfb      	adds	r3, r7, #7
 8000b06:	1c2a      	adds	r2, r5, #0
 8000b08:	701a      	strb	r2, [r3, #0]
 8000b0a:	1dbb      	adds	r3, r7, #6
 8000b0c:	1c22      	adds	r2, r4, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
 8000b10:	1d7b      	adds	r3, r7, #5
 8000b12:	1c02      	adds	r2, r0, #0
 8000b14:	701a      	strb	r2, [r3, #0]
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	1c0a      	adds	r2, r1, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
	drawHLine(x, y, w, color, hspi);
 8000b1c:	2518      	movs	r5, #24
 8000b1e:	197b      	adds	r3, r7, r5
 8000b20:	881c      	ldrh	r4, [r3, #0]
 8000b22:	1d7b      	adds	r3, r7, #5
 8000b24:	781a      	ldrb	r2, [r3, #0]
 8000b26:	1dbb      	adds	r3, r7, #6
 8000b28:	7819      	ldrb	r1, [r3, #0]
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	7818      	ldrb	r0, [r3, #0]
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	0023      	movs	r3, r4
 8000b34:	f7ff fe48 	bl	80007c8 <drawHLine>
	drawHLine(x, y+h-1, w, color, hspi);
 8000b38:	1dba      	adds	r2, r7, #6
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	7812      	ldrb	r2, [r2, #0]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	18d3      	adds	r3, r2, r3
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	3b01      	subs	r3, #1
 8000b46:	b2d9      	uxtb	r1, r3
 8000b48:	197b      	adds	r3, r7, r5
 8000b4a:	881c      	ldrh	r4, [r3, #0]
 8000b4c:	1d7b      	adds	r3, r7, #5
 8000b4e:	781a      	ldrb	r2, [r3, #0]
 8000b50:	1dfb      	adds	r3, r7, #7
 8000b52:	7818      	ldrb	r0, [r3, #0]
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	0023      	movs	r3, r4
 8000b5a:	f7ff fe35 	bl	80007c8 <drawHLine>
	drawVLine(x, y, h, color, hspi);
 8000b5e:	197b      	adds	r3, r7, r5
 8000b60:	881c      	ldrh	r4, [r3, #0]
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	781a      	ldrb	r2, [r3, #0]
 8000b66:	1dbb      	adds	r3, r7, #6
 8000b68:	7819      	ldrb	r1, [r3, #0]
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	7818      	ldrb	r0, [r3, #0]
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	0023      	movs	r3, r4
 8000b74:	f7ff fece 	bl	8000914 <drawVLine>
	drawVLine(x+w-1, y, h, color, hspi);
 8000b78:	1dfa      	adds	r2, r7, #7
 8000b7a:	1d7b      	adds	r3, r7, #5
 8000b7c:	7812      	ldrb	r2, [r2, #0]
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	18d3      	adds	r3, r2, r3
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	3b01      	subs	r3, #1
 8000b86:	b2d8      	uxtb	r0, r3
 8000b88:	197b      	adds	r3, r7, r5
 8000b8a:	881c      	ldrh	r4, [r3, #0]
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	781a      	ldrb	r2, [r3, #0]
 8000b90:	1dbb      	adds	r3, r7, #6
 8000b92:	7819      	ldrb	r1, [r3, #0]
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	0023      	movs	r3, r4
 8000b9a:	f7ff febb 	bl	8000914 <drawVLine>
}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b002      	add	sp, #8
 8000ba4:	bdb0      	pop	{r4, r5, r7, pc}

08000ba6 <fillRect>:

void fillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color, SPI_HandleTypeDef *hspi) {
 8000ba6:	b5b0      	push	{r4, r5, r7, lr}
 8000ba8:	b086      	sub	sp, #24
 8000baa:	af02      	add	r7, sp, #8
 8000bac:	0005      	movs	r5, r0
 8000bae:	000c      	movs	r4, r1
 8000bb0:	0010      	movs	r0, r2
 8000bb2:	0019      	movs	r1, r3
 8000bb4:	1dfb      	adds	r3, r7, #7
 8000bb6:	1c2a      	adds	r2, r5, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
 8000bba:	1dbb      	adds	r3, r7, #6
 8000bbc:	1c22      	adds	r2, r4, #0
 8000bbe:	701a      	strb	r2, [r3, #0]
 8000bc0:	1d7b      	adds	r3, r7, #5
 8000bc2:	1c02      	adds	r2, r0, #0
 8000bc4:	701a      	strb	r2, [r3, #0]
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	1c0a      	adds	r2, r1, #0
 8000bca:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < h; i++) {
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	e014      	b.n	8000bfc <fillRect+0x56>
		drawHLine(x, y+i, w, color, hspi);
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	1dbb      	adds	r3, r7, #6
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	18d3      	adds	r3, r2, r3
 8000bdc:	b2d9      	uxtb	r1, r3
 8000bde:	2320      	movs	r3, #32
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	881c      	ldrh	r4, [r3, #0]
 8000be4:	1d7b      	adds	r3, r7, #5
 8000be6:	781a      	ldrb	r2, [r3, #0]
 8000be8:	1dfb      	adds	r3, r7, #7
 8000bea:	7818      	ldrb	r0, [r3, #0]
 8000bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bee:	9300      	str	r3, [sp, #0]
 8000bf0:	0023      	movs	r3, r4
 8000bf2:	f7ff fde9 	bl	80007c8 <drawHLine>
	for (int i = 0; i < h; i++) {
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	68fa      	ldr	r2, [r7, #12]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	dbe5      	blt.n	8000bd2 <fillRect+0x2c>
	}
}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	b004      	add	sp, #16
 8000c0c:	bdb0      	pop	{r4, r5, r7, pc}

08000c0e <fillScreen>:

void fillScreen(uint16_t color, SPI_HandleTypeDef *hspi) {
 8000c0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c10:	b091      	sub	sp, #68	; 0x44
 8000c12:	af04      	add	r7, sp, #16
 8000c14:	61b9      	str	r1, [r7, #24]
 8000c16:	221e      	movs	r2, #30
 8000c18:	18ba      	adds	r2, r7, r2
 8000c1a:	1c01      	adds	r1, r0, #0
 8000c1c:	8011      	strh	r1, [r2, #0]
 8000c1e:	466a      	mov	r2, sp
 8000c20:	607a      	str	r2, [r7, #4]
	uint16_t bufferSize = WIDTH*HEIGHT/4;
 8000c22:	2012      	movs	r0, #18
 8000c24:	2218      	movs	r2, #24
 8000c26:	18b9      	adds	r1, r7, r2
 8000c28:	180a      	adds	r2, r1, r0
 8000c2a:	21a0      	movs	r1, #160	; 0xa0
 8000c2c:	0149      	lsls	r1, r1, #5
 8000c2e:	8011      	strh	r1, [r2, #0]
	uint16_t buffer[bufferSize];
 8000c30:	2218      	movs	r2, #24
 8000c32:	18ba      	adds	r2, r7, r2
 8000c34:	1812      	adds	r2, r2, r0
 8000c36:	8812      	ldrh	r2, [r2, #0]
 8000c38:	0011      	movs	r1, r2
 8000c3a:	3901      	subs	r1, #1
 8000c3c:	6279      	str	r1, [r7, #36]	; 0x24
 8000c3e:	613a      	str	r2, [r7, #16]
 8000c40:	2100      	movs	r1, #0
 8000c42:	6179      	str	r1, [r7, #20]
 8000c44:	6939      	ldr	r1, [r7, #16]
 8000c46:	0f09      	lsrs	r1, r1, #28
 8000c48:	6978      	ldr	r0, [r7, #20]
 8000c4a:	0106      	lsls	r6, r0, #4
 8000c4c:	430e      	orrs	r6, r1
 8000c4e:	6939      	ldr	r1, [r7, #16]
 8000c50:	010d      	lsls	r5, r1, #4
 8000c52:	60ba      	str	r2, [r7, #8]
 8000c54:	2100      	movs	r1, #0
 8000c56:	60f9      	str	r1, [r7, #12]
 8000c58:	68bd      	ldr	r5, [r7, #8]
 8000c5a:	68fe      	ldr	r6, [r7, #12]
 8000c5c:	0029      	movs	r1, r5
 8000c5e:	0f09      	lsrs	r1, r1, #28
 8000c60:	0030      	movs	r0, r6
 8000c62:	0104      	lsls	r4, r0, #4
 8000c64:	430c      	orrs	r4, r1
 8000c66:	0029      	movs	r1, r5
 8000c68:	010b      	lsls	r3, r1, #4
 8000c6a:	0013      	movs	r3, r2
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	3301      	adds	r3, #1
 8000c70:	3307      	adds	r3, #7
 8000c72:	08db      	lsrs	r3, r3, #3
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	466a      	mov	r2, sp
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	469d      	mov	sp, r3
 8000c7c:	ab04      	add	r3, sp, #16
 8000c7e:	3301      	adds	r3, #1
 8000c80:	085b      	lsrs	r3, r3, #1
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	623b      	str	r3, [r7, #32]
	int i;
	for (i = 0; i < bufferSize; i++) {
 8000c86:	2300      	movs	r3, #0
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c8a:	e00e      	b.n	8000caa <fillScreen+0x9c>
		buffer[i] = colorFixer(color);
 8000c8c:	231e      	movs	r3, #30
 8000c8e:	18fb      	adds	r3, r7, r3
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	0018      	movs	r0, r3
 8000c94:	f7ff fd74 	bl	8000780 <colorFixer>
 8000c98:	0003      	movs	r3, r0
 8000c9a:	0019      	movs	r1, r3
 8000c9c:	6a3b      	ldr	r3, [r7, #32]
 8000c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ca0:	0052      	lsls	r2, r2, #1
 8000ca2:	52d1      	strh	r1, [r2, r3]
	for (i = 0; i < bufferSize; i++) {
 8000ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000caa:	2312      	movs	r3, #18
 8000cac:	2218      	movs	r2, #24
 8000cae:	4694      	mov	ip, r2
 8000cb0:	44bc      	add	ip, r7
 8000cb2:	4463      	add	r3, ip
 8000cb4:	881b      	ldrh	r3, [r3, #0]
 8000cb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	dbe7      	blt.n	8000c8c <fillScreen+0x7e>
	}

	for (i = 0; i < 4; i++) {
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cc0:	e017      	b.n	8000cf2 <fillScreen+0xe4>
		drawBuffer(0, HEIGHT/4*i, WIDTH, HEIGHT/4, buffer, bufferSize, hspi);
 8000cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	2228      	movs	r2, #40	; 0x28
 8000cc8:	4353      	muls	r3, r2
 8000cca:	b2d9      	uxtb	r1, r3
 8000ccc:	6a3b      	ldr	r3, [r7, #32]
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	9202      	str	r2, [sp, #8]
 8000cd2:	2212      	movs	r2, #18
 8000cd4:	2018      	movs	r0, #24
 8000cd6:	4684      	mov	ip, r0
 8000cd8:	44bc      	add	ip, r7
 8000cda:	4462      	add	r2, ip
 8000cdc:	8812      	ldrh	r2, [r2, #0]
 8000cde:	9201      	str	r2, [sp, #4]
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	2328      	movs	r3, #40	; 0x28
 8000ce4:	2280      	movs	r2, #128	; 0x80
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f7ff febb 	bl	8000a62 <drawBuffer>
	for (i = 0; i < 4; i++) {
 8000cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cee:	3301      	adds	r3, #1
 8000cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cf4:	2b03      	cmp	r3, #3
 8000cf6:	dde4      	ble.n	8000cc2 <fillScreen+0xb4>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	469d      	mov	sp, r3
	}
}
 8000cfc:	46c0      	nop			; (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b00d      	add	sp, #52	; 0x34
 8000d02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d04 <drawCenteredText>:
// ---- end of basic shapes and lines ----

// ---- start of more complicated graphics ----
void drawCenteredText(uint8_t x_center, uint8_t y, const char *str, SPI_HandleTypeDef *hspi) {
 8000d04:	b590      	push	{r4, r7, lr}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60ba      	str	r2, [r7, #8]
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	230f      	movs	r3, #15
 8000d10:	18fb      	adds	r3, r7, r3
 8000d12:	1c02      	adds	r2, r0, #0
 8000d14:	701a      	strb	r2, [r3, #0]
 8000d16:	240e      	movs	r4, #14
 8000d18:	193b      	adds	r3, r7, r4
 8000d1a:	1c0a      	adds	r2, r1, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
	uint8_t strSize = strlen(str);
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	0018      	movs	r0, r3
 8000d22:	f7ff f9f1 	bl	8000108 <strlen>
 8000d26:	0002      	movs	r2, r0
 8000d28:	231f      	movs	r3, #31
 8000d2a:	18fb      	adds	r3, r7, r3
 8000d2c:	701a      	strb	r2, [r3, #0]
	// bounds checking. text box needed to print text should not end up ouf of bounds
	if (y+textSize*8 > HEIGHT) return;
 8000d2e:	193b      	adds	r3, r7, r4
 8000d30:	781a      	ldrb	r2, [r3, #0]
 8000d32:	4b24      	ldr	r3, [pc, #144]	; (8000dc4 <drawCenteredText+0xc0>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	18d3      	adds	r3, r2, r3
 8000d3a:	2ba0      	cmp	r3, #160	; 0xa0
 8000d3c:	dc3a      	bgt.n	8000db4 <drawCenteredText+0xb0>
	int leftBound = x_center-(strSize*textSize*6)/2;
 8000d3e:	230f      	movs	r3, #15
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	7819      	ldrb	r1, [r3, #0]
 8000d44:	231f      	movs	r3, #31
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	4a1e      	ldr	r2, [pc, #120]	; (8000dc4 <drawCenteredText+0xc0>)
 8000d4c:	7812      	ldrb	r2, [r2, #0]
 8000d4e:	435a      	muls	r2, r3
 8000d50:	0013      	movs	r3, r2
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	189b      	adds	r3, r3, r2
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	d500      	bpl.n	8000d5c <drawCenteredText+0x58>
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	105b      	asrs	r3, r3, #1
 8000d5e:	425b      	negs	r3, r3
 8000d60:	18cb      	adds	r3, r1, r3
 8000d62:	61bb      	str	r3, [r7, #24]
	int rightBound = x_center+(strSize*textSize*6)/2;
 8000d64:	230f      	movs	r3, #15
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	7819      	ldrb	r1, [r3, #0]
 8000d6a:	231f      	movs	r3, #31
 8000d6c:	18fb      	adds	r3, r7, r3
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4a14      	ldr	r2, [pc, #80]	; (8000dc4 <drawCenteredText+0xc0>)
 8000d72:	7812      	ldrb	r2, [r2, #0]
 8000d74:	435a      	muls	r2, r3
 8000d76:	0013      	movs	r3, r2
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	189b      	adds	r3, r3, r2
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	d500      	bpl.n	8000d82 <drawCenteredText+0x7e>
 8000d80:	3301      	adds	r3, #1
 8000d82:	105b      	asrs	r3, r3, #1
 8000d84:	18cb      	adds	r3, r1, r3
 8000d86:	617b      	str	r3, [r7, #20]
	if (leftBound < 0) return;
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	db14      	blt.n	8000db8 <drawCenteredText+0xb4>
	if (rightBound > WIDTH) return;
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	2b80      	cmp	r3, #128	; 0x80
 8000d92:	dc13      	bgt.n	8000dbc <drawCenteredText+0xb8>

	setCursor(leftBound, y);
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	230e      	movs	r3, #14
 8000d9a:	18fb      	adds	r3, r7, r3
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	0019      	movs	r1, r3
 8000da0:	0010      	movs	r0, r2
 8000da2:	f000 fbaf 	bl	8001504 <setCursor>
	drawText(str, hspi);
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	0011      	movs	r1, r2
 8000dac:	0018      	movs	r0, r3
 8000dae:	f000 fb7b 	bl	80014a8 <drawText>
 8000db2:	e004      	b.n	8000dbe <drawCenteredText+0xba>
	if (y+textSize*8 > HEIGHT) return;
 8000db4:	46c0      	nop			; (mov r8, r8)
 8000db6:	e002      	b.n	8000dbe <drawCenteredText+0xba>
	if (leftBound < 0) return;
 8000db8:	46c0      	nop			; (mov r8, r8)
 8000dba:	e000      	b.n	8000dbe <drawCenteredText+0xba>
	if (rightBound > WIDTH) return;
 8000dbc:	46c0      	nop			; (mov r8, r8)
}
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	b009      	add	sp, #36	; 0x24
 8000dc2:	bd90      	pop	{r4, r7, pc}
 8000dc4:	200000da 	.word	0x200000da

08000dc8 <clearTextLine>:

void clearTextLine(uint8_t y, SPI_HandleTypeDef *hspi) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af02      	add	r7, sp, #8
 8000dce:	0002      	movs	r2, r0
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	1dfb      	adds	r3, r7, #7
 8000dd4:	701a      	strb	r2, [r3, #0]
	fillRect(0, y, WIDTH, textSize*8, bg, hspi);
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <clearTextLine+0x38>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	00db      	lsls	r3, r3, #3
 8000ddc:	b2d8      	uxtb	r0, r3
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <clearTextLine+0x3c>)
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	1dfa      	adds	r2, r7, #7
 8000de4:	7811      	ldrb	r1, [r2, #0]
 8000de6:	683a      	ldr	r2, [r7, #0]
 8000de8:	9201      	str	r2, [sp, #4]
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	0003      	movs	r3, r0
 8000dee:	2280      	movs	r2, #128	; 0x80
 8000df0:	2000      	movs	r0, #0
 8000df2:	f7ff fed8 	bl	8000ba6 <fillRect>
}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	b002      	add	sp, #8
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	200000da 	.word	0x200000da
 8000e04:	200000de 	.word	0x200000de

08000e08 <drawChar>:
// ---- end of more complicated graphics ----

// ---- text functions ----
void drawChar(uint8_t ch, SPI_HandleTypeDef *hspi) {
 8000e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e0a:	b095      	sub	sp, #84	; 0x54
 8000e0c:	af04      	add	r7, sp, #16
 8000e0e:	61b9      	str	r1, [r7, #24]
 8000e10:	221f      	movs	r2, #31
 8000e12:	18ba      	adds	r2, r7, r2
 8000e14:	1c01      	adds	r1, r0, #0
 8000e16:	7011      	strb	r1, [r2, #0]
 8000e18:	466a      	mov	r2, sp
 8000e1a:	607a      	str	r2, [r7, #4]
	uint16_t bufferSize = 6*8*textSize*textSize;
 8000e1c:	4abe      	ldr	r2, [pc, #760]	; (8001118 <drawChar+0x310>)
 8000e1e:	7812      	ldrb	r2, [r2, #0]
 8000e20:	b292      	uxth	r2, r2
 8000e22:	49bd      	ldr	r1, [pc, #756]	; (8001118 <drawChar+0x310>)
 8000e24:	7809      	ldrb	r1, [r1, #0]
 8000e26:	b289      	uxth	r1, r1
 8000e28:	434a      	muls	r2, r1
 8000e2a:	b291      	uxth	r1, r2
 8000e2c:	221a      	movs	r2, #26
 8000e2e:	2018      	movs	r0, #24
 8000e30:	4684      	mov	ip, r0
 8000e32:	44bc      	add	ip, r7
 8000e34:	4462      	add	r2, ip
 8000e36:	2030      	movs	r0, #48	; 0x30
 8000e38:	4341      	muls	r1, r0
 8000e3a:	8011      	strh	r1, [r2, #0]
	uint16_t buffer[bufferSize];
 8000e3c:	221a      	movs	r2, #26
 8000e3e:	2118      	movs	r1, #24
 8000e40:	468c      	mov	ip, r1
 8000e42:	44bc      	add	ip, r7
 8000e44:	4462      	add	r2, ip
 8000e46:	8812      	ldrh	r2, [r2, #0]
 8000e48:	0011      	movs	r1, r2
 8000e4a:	3901      	subs	r1, #1
 8000e4c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000e4e:	613a      	str	r2, [r7, #16]
 8000e50:	2100      	movs	r1, #0
 8000e52:	6179      	str	r1, [r7, #20]
 8000e54:	6939      	ldr	r1, [r7, #16]
 8000e56:	0f09      	lsrs	r1, r1, #28
 8000e58:	6978      	ldr	r0, [r7, #20]
 8000e5a:	0106      	lsls	r6, r0, #4
 8000e5c:	430e      	orrs	r6, r1
 8000e5e:	6939      	ldr	r1, [r7, #16]
 8000e60:	010d      	lsls	r5, r1, #4
 8000e62:	60ba      	str	r2, [r7, #8]
 8000e64:	2100      	movs	r1, #0
 8000e66:	60f9      	str	r1, [r7, #12]
 8000e68:	68bd      	ldr	r5, [r7, #8]
 8000e6a:	68fe      	ldr	r6, [r7, #12]
 8000e6c:	0029      	movs	r1, r5
 8000e6e:	0f09      	lsrs	r1, r1, #28
 8000e70:	0030      	movs	r0, r6
 8000e72:	0104      	lsls	r4, r0, #4
 8000e74:	430c      	orrs	r4, r1
 8000e76:	0029      	movs	r1, r5
 8000e78:	010b      	lsls	r3, r1, #4
 8000e7a:	0013      	movs	r3, r2
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	3301      	adds	r3, #1
 8000e80:	3307      	adds	r3, #7
 8000e82:	08db      	lsrs	r3, r3, #3
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	466a      	mov	r2, sp
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	469d      	mov	sp, r3
 8000e8c:	ab04      	add	r3, sp, #16
 8000e8e:	3301      	adds	r3, #1
 8000e90:	085b      	lsrs	r3, r3, #1
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	62bb      	str	r3, [r7, #40]	; 0x28
	int16_t rowOffset, address;

	for (int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 8000e96:	2325      	movs	r3, #37	; 0x25
 8000e98:	2218      	movs	r2, #24
 8000e9a:	4694      	mov	ip, r2
 8000e9c:	44bc      	add	ip, r7
 8000e9e:	4463      	add	r3, ip
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
 8000ea4:	e1f4      	b.n	8001290 <drawChar+0x488>
		uint8_t line = font[ch*5+i];
 8000ea6:	231f      	movs	r3, #31
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	781a      	ldrb	r2, [r3, #0]
 8000eac:	0013      	movs	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	189a      	adds	r2, r3, r2
 8000eb2:	2325      	movs	r3, #37	; 0x25
 8000eb4:	2118      	movs	r1, #24
 8000eb6:	468c      	mov	ip, r1
 8000eb8:	44bc      	add	ip, r7
 8000eba:	4463      	add	r3, ip
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	b25b      	sxtb	r3, r3
 8000ec0:	18d2      	adds	r2, r2, r3
 8000ec2:	2324      	movs	r3, #36	; 0x24
 8000ec4:	2118      	movs	r1, #24
 8000ec6:	468c      	mov	ip, r1
 8000ec8:	44bc      	add	ip, r7
 8000eca:	4463      	add	r3, ip
 8000ecc:	4993      	ldr	r1, [pc, #588]	; (800111c <drawChar+0x314>)
 8000ece:	5c8a      	ldrb	r2, [r1, r2]
 8000ed0:	701a      	strb	r2, [r3, #0]
		for (int8_t j=0; j<8; j++, line >>= 1) {
 8000ed2:	2323      	movs	r3, #35	; 0x23
 8000ed4:	2218      	movs	r2, #24
 8000ed6:	4694      	mov	ip, r2
 8000ed8:	44bc      	add	ip, r7
 8000eda:	4463      	add	r3, ip
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]
 8000ee0:	e1c0      	b.n	8001264 <drawChar+0x45c>
			if (line & 1) {
 8000ee2:	2324      	movs	r3, #36	; 0x24
 8000ee4:	2218      	movs	r2, #24
 8000ee6:	4694      	mov	ip, r2
 8000ee8:	44bc      	add	ip, r7
 8000eea:	4463      	add	r3, ip
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	d100      	bne.n	8000ef6 <drawChar+0xee>
 8000ef4:	e0c8      	b.n	8001088 <drawChar+0x280>
				if (textSize == 1) {
 8000ef6:	4b88      	ldr	r3, [pc, #544]	; (8001118 <drawChar+0x310>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d11c      	bne.n	8000f38 <drawChar+0x130>
					buffer[i+j*6] = colorFixer(textColor);
 8000efe:	4b88      	ldr	r3, [pc, #544]	; (8001120 <drawChar+0x318>)
 8000f00:	8818      	ldrh	r0, [r3, #0]
 8000f02:	2325      	movs	r3, #37	; 0x25
 8000f04:	2218      	movs	r2, #24
 8000f06:	4694      	mov	ip, r2
 8000f08:	44bc      	add	ip, r7
 8000f0a:	4463      	add	r3, ip
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	5659      	ldrsb	r1, [r3, r1]
 8000f10:	2323      	movs	r3, #35	; 0x23
 8000f12:	2218      	movs	r2, #24
 8000f14:	4694      	mov	ip, r2
 8000f16:	44bc      	add	ip, r7
 8000f18:	4463      	add	r3, ip
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	569a      	ldrsb	r2, [r3, r2]
 8000f1e:	0013      	movs	r3, r2
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	189b      	adds	r3, r3, r2
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	18cc      	adds	r4, r1, r3
 8000f28:	f7ff fc2a 	bl	8000780 <colorFixer>
 8000f2c:	0003      	movs	r3, r0
 8000f2e:	0019      	movs	r1, r3
 8000f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f32:	0062      	lsls	r2, r4, #1
 8000f34:	52d1      	strh	r1, [r2, r3]
 8000f36:	e17f      	b.n	8001238 <drawChar+0x430>
				}
				else {
					for (int8_t k = 0; k < textSize; k++) {
 8000f38:	2322      	movs	r3, #34	; 0x22
 8000f3a:	2218      	movs	r2, #24
 8000f3c:	4694      	mov	ip, r2
 8000f3e:	44bc      	add	ip, r7
 8000f40:	4463      	add	r3, ip
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
 8000f46:	e092      	b.n	800106e <drawChar+0x266>
						rowOffset = textSize*6;
 8000f48:	4b73      	ldr	r3, [pc, #460]	; (8001118 <drawChar+0x310>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	1c1a      	adds	r2, r3, #0
 8000f50:	1c13      	adds	r3, r2, #0
 8000f52:	18db      	adds	r3, r3, r3
 8000f54:	189b      	adds	r3, r3, r2
 8000f56:	18db      	adds	r3, r3, r3
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	2326      	movs	r3, #38	; 0x26
 8000f5c:	2118      	movs	r1, #24
 8000f5e:	468c      	mov	ip, r1
 8000f60:	44bc      	add	ip, r7
 8000f62:	4463      	add	r3, ip
 8000f64:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 8000f66:	2321      	movs	r3, #33	; 0x21
 8000f68:	2218      	movs	r2, #24
 8000f6a:	4694      	mov	ip, r2
 8000f6c:	44bc      	add	ip, r7
 8000f6e:	4463      	add	r3, ip
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
 8000f74:	e064      	b.n	8001040 <drawChar+0x238>
							address = (textSize*textSize*j*6)+(i*textSize);
 8000f76:	4b68      	ldr	r3, [pc, #416]	; (8001118 <drawChar+0x310>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	4a66      	ldr	r2, [pc, #408]	; (8001118 <drawChar+0x310>)
 8000f7e:	7812      	ldrb	r2, [r2, #0]
 8000f80:	b292      	uxth	r2, r2
 8000f82:	4353      	muls	r3, r2
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	2223      	movs	r2, #35	; 0x23
 8000f88:	2118      	movs	r1, #24
 8000f8a:	468c      	mov	ip, r1
 8000f8c:	44bc      	add	ip, r7
 8000f8e:	4462      	add	r2, ip
 8000f90:	7812      	ldrb	r2, [r2, #0]
 8000f92:	b252      	sxtb	r2, r2
 8000f94:	b292      	uxth	r2, r2
 8000f96:	4353      	muls	r3, r2
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	1c1a      	adds	r2, r3, #0
 8000f9c:	1c13      	adds	r3, r2, #0
 8000f9e:	18db      	adds	r3, r3, r3
 8000fa0:	189b      	adds	r3, r3, r2
 8000fa2:	18db      	adds	r3, r3, r3
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	2325      	movs	r3, #37	; 0x25
 8000fa8:	2118      	movs	r1, #24
 8000faa:	468c      	mov	ip, r1
 8000fac:	44bc      	add	ip, r7
 8000fae:	4463      	add	r3, ip
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b25b      	sxtb	r3, r3
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	4958      	ldr	r1, [pc, #352]	; (8001118 <drawChar+0x310>)
 8000fb8:	7809      	ldrb	r1, [r1, #0]
 8000fba:	b289      	uxth	r1, r1
 8000fbc:	434b      	muls	r3, r1
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	18d3      	adds	r3, r2, r3
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	210e      	movs	r1, #14
 8000fc6:	2018      	movs	r0, #24
 8000fc8:	183b      	adds	r3, r7, r0
 8000fca:	185b      	adds	r3, r3, r1
 8000fcc:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 8000fce:	2322      	movs	r3, #34	; 0x22
 8000fd0:	2218      	movs	r2, #24
 8000fd2:	4694      	mov	ip, r2
 8000fd4:	44bc      	add	ip, r7
 8000fd6:	4463      	add	r3, ip
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	b25b      	sxtb	r3, r3
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	2226      	movs	r2, #38	; 0x26
 8000fe0:	2418      	movs	r4, #24
 8000fe2:	46a4      	mov	ip, r4
 8000fe4:	44bc      	add	ip, r7
 8000fe6:	4462      	add	r2, ip
 8000fe8:	8812      	ldrh	r2, [r2, #0]
 8000fea:	4353      	muls	r3, r2
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	2521      	movs	r5, #33	; 0x21
 8000ff0:	183b      	adds	r3, r7, r0
 8000ff2:	195b      	adds	r3, r3, r5
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	b25b      	sxtb	r3, r3
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	18d3      	adds	r3, r2, r3
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	183b      	adds	r3, r7, r0
 8001000:	185b      	adds	r3, r3, r1
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	18d3      	adds	r3, r2, r3
 8001006:	b29a      	uxth	r2, r3
 8001008:	183b      	adds	r3, r7, r0
 800100a:	185b      	adds	r3, r3, r1
 800100c:	801a      	strh	r2, [r3, #0]
							buffer[address] = colorFixer(textColor);
 800100e:	4b44      	ldr	r3, [pc, #272]	; (8001120 <drawChar+0x318>)
 8001010:	881a      	ldrh	r2, [r3, #0]
 8001012:	0006      	movs	r6, r0
 8001014:	183b      	adds	r3, r7, r0
 8001016:	185b      	adds	r3, r3, r1
 8001018:	2400      	movs	r4, #0
 800101a:	5f1c      	ldrsh	r4, [r3, r4]
 800101c:	0010      	movs	r0, r2
 800101e:	f7ff fbaf 	bl	8000780 <colorFixer>
 8001022:	0003      	movs	r3, r0
 8001024:	0019      	movs	r1, r3
 8001026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001028:	0062      	lsls	r2, r4, #1
 800102a:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 800102c:	19bb      	adds	r3, r7, r6
 800102e:	195b      	adds	r3, r3, r5
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b25b      	sxtb	r3, r3
 8001034:	b2db      	uxtb	r3, r3
 8001036:	3301      	adds	r3, #1
 8001038:	b2da      	uxtb	r2, r3
 800103a:	19bb      	adds	r3, r7, r6
 800103c:	195b      	adds	r3, r3, r5
 800103e:	701a      	strb	r2, [r3, #0]
 8001040:	2321      	movs	r3, #33	; 0x21
 8001042:	2218      	movs	r2, #24
 8001044:	4694      	mov	ip, r2
 8001046:	44bc      	add	ip, r7
 8001048:	4463      	add	r3, ip
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b25b      	sxtb	r3, r3
 800104e:	4a32      	ldr	r2, [pc, #200]	; (8001118 <drawChar+0x310>)
 8001050:	7812      	ldrb	r2, [r2, #0]
 8001052:	4293      	cmp	r3, r2
 8001054:	db8f      	blt.n	8000f76 <drawChar+0x16e>
					for (int8_t k = 0; k < textSize; k++) {
 8001056:	2122      	movs	r1, #34	; 0x22
 8001058:	2018      	movs	r0, #24
 800105a:	183b      	adds	r3, r7, r0
 800105c:	185b      	adds	r3, r3, r1
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b25b      	sxtb	r3, r3
 8001062:	b2db      	uxtb	r3, r3
 8001064:	3301      	adds	r3, #1
 8001066:	b2da      	uxtb	r2, r3
 8001068:	183b      	adds	r3, r7, r0
 800106a:	185b      	adds	r3, r3, r1
 800106c:	701a      	strb	r2, [r3, #0]
 800106e:	2322      	movs	r3, #34	; 0x22
 8001070:	2218      	movs	r2, #24
 8001072:	4694      	mov	ip, r2
 8001074:	44bc      	add	ip, r7
 8001076:	4463      	add	r3, ip
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b25b      	sxtb	r3, r3
 800107c:	4a26      	ldr	r2, [pc, #152]	; (8001118 <drawChar+0x310>)
 800107e:	7812      	ldrb	r2, [r2, #0]
 8001080:	4293      	cmp	r3, r2
 8001082:	da00      	bge.n	8001086 <drawChar+0x27e>
 8001084:	e760      	b.n	8000f48 <drawChar+0x140>
 8001086:	e0d7      	b.n	8001238 <drawChar+0x430>
						}
					}
//					fillRect(cursorX+i*textSize, cursorY+j*textSize, textSize, textSize, textColor, hspi);
				}
			} else if (bg != textColor) {
 8001088:	4b26      	ldr	r3, [pc, #152]	; (8001124 <drawChar+0x31c>)
 800108a:	881a      	ldrh	r2, [r3, #0]
 800108c:	4b24      	ldr	r3, [pc, #144]	; (8001120 <drawChar+0x318>)
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	429a      	cmp	r2, r3
 8001092:	d100      	bne.n	8001096 <drawChar+0x28e>
 8001094:	e0d0      	b.n	8001238 <drawChar+0x430>
				if (textSize == 1) {
 8001096:	4b20      	ldr	r3, [pc, #128]	; (8001118 <drawChar+0x310>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d11c      	bne.n	80010d8 <drawChar+0x2d0>
					buffer[i+j*6] = colorFixer(bg);
 800109e:	4b21      	ldr	r3, [pc, #132]	; (8001124 <drawChar+0x31c>)
 80010a0:	8818      	ldrh	r0, [r3, #0]
 80010a2:	2325      	movs	r3, #37	; 0x25
 80010a4:	2218      	movs	r2, #24
 80010a6:	4694      	mov	ip, r2
 80010a8:	44bc      	add	ip, r7
 80010aa:	4463      	add	r3, ip
 80010ac:	2100      	movs	r1, #0
 80010ae:	5659      	ldrsb	r1, [r3, r1]
 80010b0:	2323      	movs	r3, #35	; 0x23
 80010b2:	2218      	movs	r2, #24
 80010b4:	4694      	mov	ip, r2
 80010b6:	44bc      	add	ip, r7
 80010b8:	4463      	add	r3, ip
 80010ba:	2200      	movs	r2, #0
 80010bc:	569a      	ldrsb	r2, [r3, r2]
 80010be:	0013      	movs	r3, r2
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	189b      	adds	r3, r3, r2
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	18cc      	adds	r4, r1, r3
 80010c8:	f7ff fb5a 	bl	8000780 <colorFixer>
 80010cc:	0003      	movs	r3, r0
 80010ce:	0019      	movs	r1, r3
 80010d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d2:	0062      	lsls	r2, r4, #1
 80010d4:	52d1      	strh	r1, [r2, r3]
 80010d6:	e0af      	b.n	8001238 <drawChar+0x430>
				}
				else {
					for (int8_t k = 0; k < textSize; k++) {
 80010d8:	2320      	movs	r3, #32
 80010da:	2218      	movs	r2, #24
 80010dc:	4694      	mov	ip, r2
 80010de:	44bc      	add	ip, r7
 80010e0:	4463      	add	r3, ip
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
 80010e6:	e09b      	b.n	8001220 <drawChar+0x418>
						rowOffset = textSize*6;
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <drawChar+0x310>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	1c1a      	adds	r2, r3, #0
 80010f0:	1c13      	adds	r3, r2, #0
 80010f2:	18db      	adds	r3, r3, r3
 80010f4:	189b      	adds	r3, r3, r2
 80010f6:	18db      	adds	r3, r3, r3
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	2326      	movs	r3, #38	; 0x26
 80010fc:	2118      	movs	r1, #24
 80010fe:	468c      	mov	ip, r1
 8001100:	44bc      	add	ip, r7
 8001102:	4463      	add	r3, ip
 8001104:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 8001106:	231f      	movs	r3, #31
 8001108:	2218      	movs	r2, #24
 800110a:	4694      	mov	ip, r2
 800110c:	44bc      	add	ip, r7
 800110e:	4463      	add	r3, ip
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
 8001114:	e06d      	b.n	80011f2 <drawChar+0x3ea>
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	200000da 	.word	0x200000da
 800111c:	08008c98 	.word	0x08008c98
 8001120:	200000dc 	.word	0x200000dc
 8001124:	200000de 	.word	0x200000de
							address = (textSize*textSize*j*6)+(i*textSize);
 8001128:	4bda      	ldr	r3, [pc, #872]	; (8001494 <drawChar+0x68c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	b29b      	uxth	r3, r3
 800112e:	4ad9      	ldr	r2, [pc, #868]	; (8001494 <drawChar+0x68c>)
 8001130:	7812      	ldrb	r2, [r2, #0]
 8001132:	b292      	uxth	r2, r2
 8001134:	4353      	muls	r3, r2
 8001136:	b29b      	uxth	r3, r3
 8001138:	2223      	movs	r2, #35	; 0x23
 800113a:	2118      	movs	r1, #24
 800113c:	468c      	mov	ip, r1
 800113e:	44bc      	add	ip, r7
 8001140:	4462      	add	r2, ip
 8001142:	7812      	ldrb	r2, [r2, #0]
 8001144:	b252      	sxtb	r2, r2
 8001146:	b292      	uxth	r2, r2
 8001148:	4353      	muls	r3, r2
 800114a:	b29b      	uxth	r3, r3
 800114c:	1c1a      	adds	r2, r3, #0
 800114e:	1c13      	adds	r3, r2, #0
 8001150:	18db      	adds	r3, r3, r3
 8001152:	189b      	adds	r3, r3, r2
 8001154:	18db      	adds	r3, r3, r3
 8001156:	b29a      	uxth	r2, r3
 8001158:	2325      	movs	r3, #37	; 0x25
 800115a:	2118      	movs	r1, #24
 800115c:	468c      	mov	ip, r1
 800115e:	44bc      	add	ip, r7
 8001160:	4463      	add	r3, ip
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	b25b      	sxtb	r3, r3
 8001166:	b29b      	uxth	r3, r3
 8001168:	49ca      	ldr	r1, [pc, #808]	; (8001494 <drawChar+0x68c>)
 800116a:	7809      	ldrb	r1, [r1, #0]
 800116c:	b289      	uxth	r1, r1
 800116e:	434b      	muls	r3, r1
 8001170:	b29b      	uxth	r3, r3
 8001172:	18d3      	adds	r3, r2, r3
 8001174:	b29a      	uxth	r2, r3
 8001176:	210e      	movs	r1, #14
 8001178:	2018      	movs	r0, #24
 800117a:	183b      	adds	r3, r7, r0
 800117c:	185b      	adds	r3, r3, r1
 800117e:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 8001180:	2320      	movs	r3, #32
 8001182:	2218      	movs	r2, #24
 8001184:	4694      	mov	ip, r2
 8001186:	44bc      	add	ip, r7
 8001188:	4463      	add	r3, ip
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	b25b      	sxtb	r3, r3
 800118e:	b29b      	uxth	r3, r3
 8001190:	2226      	movs	r2, #38	; 0x26
 8001192:	2418      	movs	r4, #24
 8001194:	46a4      	mov	ip, r4
 8001196:	44bc      	add	ip, r7
 8001198:	4462      	add	r2, ip
 800119a:	8812      	ldrh	r2, [r2, #0]
 800119c:	4353      	muls	r3, r2
 800119e:	b29a      	uxth	r2, r3
 80011a0:	251f      	movs	r5, #31
 80011a2:	183b      	adds	r3, r7, r0
 80011a4:	195b      	adds	r3, r3, r5
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	b25b      	sxtb	r3, r3
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	18d3      	adds	r3, r2, r3
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	183b      	adds	r3, r7, r0
 80011b2:	185b      	adds	r3, r3, r1
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	18d3      	adds	r3, r2, r3
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	183b      	adds	r3, r7, r0
 80011bc:	185b      	adds	r3, r3, r1
 80011be:	801a      	strh	r2, [r3, #0]
							buffer[address] = colorFixer(bg);
 80011c0:	4bb5      	ldr	r3, [pc, #724]	; (8001498 <drawChar+0x690>)
 80011c2:	881a      	ldrh	r2, [r3, #0]
 80011c4:	0006      	movs	r6, r0
 80011c6:	183b      	adds	r3, r7, r0
 80011c8:	185b      	adds	r3, r3, r1
 80011ca:	2400      	movs	r4, #0
 80011cc:	5f1c      	ldrsh	r4, [r3, r4]
 80011ce:	0010      	movs	r0, r2
 80011d0:	f7ff fad6 	bl	8000780 <colorFixer>
 80011d4:	0003      	movs	r3, r0
 80011d6:	0019      	movs	r1, r3
 80011d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011da:	0062      	lsls	r2, r4, #1
 80011dc:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 80011de:	19bb      	adds	r3, r7, r6
 80011e0:	195b      	adds	r3, r3, r5
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b25b      	sxtb	r3, r3
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	3301      	adds	r3, #1
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	19bb      	adds	r3, r7, r6
 80011ee:	195b      	adds	r3, r3, r5
 80011f0:	701a      	strb	r2, [r3, #0]
 80011f2:	231f      	movs	r3, #31
 80011f4:	2218      	movs	r2, #24
 80011f6:	4694      	mov	ip, r2
 80011f8:	44bc      	add	ip, r7
 80011fa:	4463      	add	r3, ip
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	b25b      	sxtb	r3, r3
 8001200:	4aa4      	ldr	r2, [pc, #656]	; (8001494 <drawChar+0x68c>)
 8001202:	7812      	ldrb	r2, [r2, #0]
 8001204:	4293      	cmp	r3, r2
 8001206:	db8f      	blt.n	8001128 <drawChar+0x320>
					for (int8_t k = 0; k < textSize; k++) {
 8001208:	2120      	movs	r1, #32
 800120a:	2018      	movs	r0, #24
 800120c:	183b      	adds	r3, r7, r0
 800120e:	185b      	adds	r3, r3, r1
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	b25b      	sxtb	r3, r3
 8001214:	b2db      	uxtb	r3, r3
 8001216:	3301      	adds	r3, #1
 8001218:	b2da      	uxtb	r2, r3
 800121a:	183b      	adds	r3, r7, r0
 800121c:	185b      	adds	r3, r3, r1
 800121e:	701a      	strb	r2, [r3, #0]
 8001220:	2320      	movs	r3, #32
 8001222:	2218      	movs	r2, #24
 8001224:	4694      	mov	ip, r2
 8001226:	44bc      	add	ip, r7
 8001228:	4463      	add	r3, ip
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	b25b      	sxtb	r3, r3
 800122e:	4a99      	ldr	r2, [pc, #612]	; (8001494 <drawChar+0x68c>)
 8001230:	7812      	ldrb	r2, [r2, #0]
 8001232:	4293      	cmp	r3, r2
 8001234:	da00      	bge.n	8001238 <drawChar+0x430>
 8001236:	e757      	b.n	80010e8 <drawChar+0x2e0>
		for (int8_t j=0; j<8; j++, line >>= 1) {
 8001238:	2123      	movs	r1, #35	; 0x23
 800123a:	2018      	movs	r0, #24
 800123c:	183b      	adds	r3, r7, r0
 800123e:	185b      	adds	r3, r3, r1
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	b25b      	sxtb	r3, r3
 8001244:	b2db      	uxtb	r3, r3
 8001246:	3301      	adds	r3, #1
 8001248:	b2da      	uxtb	r2, r3
 800124a:	183b      	adds	r3, r7, r0
 800124c:	185b      	adds	r3, r3, r1
 800124e:	701a      	strb	r2, [r3, #0]
 8001250:	2224      	movs	r2, #36	; 0x24
 8001252:	183b      	adds	r3, r7, r0
 8001254:	189b      	adds	r3, r3, r2
 8001256:	2118      	movs	r1, #24
 8001258:	468c      	mov	ip, r1
 800125a:	44bc      	add	ip, r7
 800125c:	4462      	add	r2, ip
 800125e:	7812      	ldrb	r2, [r2, #0]
 8001260:	0852      	lsrs	r2, r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
 8001264:	2323      	movs	r3, #35	; 0x23
 8001266:	2218      	movs	r2, #24
 8001268:	4694      	mov	ip, r2
 800126a:	44bc      	add	ip, r7
 800126c:	4463      	add	r3, ip
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b25b      	sxtb	r3, r3
 8001272:	2b07      	cmp	r3, #7
 8001274:	dc00      	bgt.n	8001278 <drawChar+0x470>
 8001276:	e634      	b.n	8000ee2 <drawChar+0xda>
	for (int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 8001278:	2125      	movs	r1, #37	; 0x25
 800127a:	2018      	movs	r0, #24
 800127c:	183b      	adds	r3, r7, r0
 800127e:	185b      	adds	r3, r3, r1
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	b25b      	sxtb	r3, r3
 8001284:	b2db      	uxtb	r3, r3
 8001286:	3301      	adds	r3, #1
 8001288:	b2da      	uxtb	r2, r3
 800128a:	183b      	adds	r3, r7, r0
 800128c:	185b      	adds	r3, r3, r1
 800128e:	701a      	strb	r2, [r3, #0]
 8001290:	2325      	movs	r3, #37	; 0x25
 8001292:	2218      	movs	r2, #24
 8001294:	4694      	mov	ip, r2
 8001296:	44bc      	add	ip, r7
 8001298:	4463      	add	r3, ip
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	b25b      	sxtb	r3, r3
 800129e:	2b04      	cmp	r3, #4
 80012a0:	dc00      	bgt.n	80012a4 <drawChar+0x49c>
 80012a2:	e600      	b.n	8000ea6 <drawChar+0x9e>
				}
			}
		}
	}

	if (bg != textColor) { // If opaque, draw vertical line for last column
 80012a4:	4b7c      	ldr	r3, [pc, #496]	; (8001498 <drawChar+0x690>)
 80012a6:	881a      	ldrh	r2, [r3, #0]
 80012a8:	4b7c      	ldr	r3, [pc, #496]	; (800149c <drawChar+0x694>)
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d100      	bne.n	80012b2 <drawChar+0x4aa>
 80012b0:	e0ca      	b.n	8001448 <drawChar+0x640>
		for (int8_t j = 0; j < 8; j++) {
 80012b2:	231e      	movs	r3, #30
 80012b4:	2218      	movs	r2, #24
 80012b6:	4694      	mov	ip, r2
 80012b8:	44bc      	add	ip, r7
 80012ba:	4463      	add	r3, ip
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
 80012c0:	e0b8      	b.n	8001434 <drawChar+0x62c>
			if (textSize == 1) {
 80012c2:	4b74      	ldr	r3, [pc, #464]	; (8001494 <drawChar+0x68c>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d116      	bne.n	80012f8 <drawChar+0x4f0>
				buffer[5+j*6] = colorFixer(bg);
 80012ca:	4b73      	ldr	r3, [pc, #460]	; (8001498 <drawChar+0x690>)
 80012cc:	8819      	ldrh	r1, [r3, #0]
 80012ce:	231e      	movs	r3, #30
 80012d0:	2218      	movs	r2, #24
 80012d2:	4694      	mov	ip, r2
 80012d4:	44bc      	add	ip, r7
 80012d6:	4463      	add	r3, ip
 80012d8:	2200      	movs	r2, #0
 80012da:	569a      	ldrsb	r2, [r3, r2]
 80012dc:	0013      	movs	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	189b      	adds	r3, r3, r2
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	1d5c      	adds	r4, r3, #5
 80012e6:	0008      	movs	r0, r1
 80012e8:	f7ff fa4a 	bl	8000780 <colorFixer>
 80012ec:	0003      	movs	r3, r0
 80012ee:	0019      	movs	r1, r3
 80012f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f2:	0062      	lsls	r2, r4, #1
 80012f4:	52d1      	strh	r1, [r2, r3]
 80012f6:	e091      	b.n	800141c <drawChar+0x614>
			}
			else {
				for (int8_t k = 0; k < textSize; k++) {
 80012f8:	231d      	movs	r3, #29
 80012fa:	2218      	movs	r2, #24
 80012fc:	4694      	mov	ip, r2
 80012fe:	44bc      	add	ip, r7
 8001300:	4463      	add	r3, ip
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]
 8001306:	e07d      	b.n	8001404 <drawChar+0x5fc>
					for (int8_t l = 0; l < textSize; l++) {
 8001308:	231c      	movs	r3, #28
 800130a:	2218      	movs	r2, #24
 800130c:	4694      	mov	ip, r2
 800130e:	44bc      	add	ip, r7
 8001310:	4463      	add	r3, ip
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
 8001316:	e05e      	b.n	80013d6 <drawChar+0x5ce>
						address = (textSize*textSize*j*6)+(5*textSize);
 8001318:	4b5e      	ldr	r3, [pc, #376]	; (8001494 <drawChar+0x68c>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b29b      	uxth	r3, r3
 800131e:	4a5d      	ldr	r2, [pc, #372]	; (8001494 <drawChar+0x68c>)
 8001320:	7812      	ldrb	r2, [r2, #0]
 8001322:	b292      	uxth	r2, r2
 8001324:	4353      	muls	r3, r2
 8001326:	b29b      	uxth	r3, r3
 8001328:	221e      	movs	r2, #30
 800132a:	2118      	movs	r1, #24
 800132c:	468c      	mov	ip, r1
 800132e:	44bc      	add	ip, r7
 8001330:	4462      	add	r2, ip
 8001332:	7812      	ldrb	r2, [r2, #0]
 8001334:	b252      	sxtb	r2, r2
 8001336:	b292      	uxth	r2, r2
 8001338:	4353      	muls	r3, r2
 800133a:	b29b      	uxth	r3, r3
 800133c:	1c1a      	adds	r2, r3, #0
 800133e:	1c13      	adds	r3, r2, #0
 8001340:	18db      	adds	r3, r3, r3
 8001342:	189b      	adds	r3, r3, r2
 8001344:	18db      	adds	r3, r3, r3
 8001346:	b29a      	uxth	r2, r3
 8001348:	4b52      	ldr	r3, [pc, #328]	; (8001494 <drawChar+0x68c>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	b29b      	uxth	r3, r3
 800134e:	1c19      	adds	r1, r3, #0
 8001350:	0089      	lsls	r1, r1, #2
 8001352:	18cb      	adds	r3, r1, r3
 8001354:	b29b      	uxth	r3, r3
 8001356:	18d3      	adds	r3, r2, r3
 8001358:	b29a      	uxth	r2, r3
 800135a:	210e      	movs	r1, #14
 800135c:	2018      	movs	r0, #24
 800135e:	183b      	adds	r3, r7, r0
 8001360:	185b      	adds	r3, r3, r1
 8001362:	801a      	strh	r2, [r3, #0]
						address += rowOffset*k+l;
 8001364:	231d      	movs	r3, #29
 8001366:	2218      	movs	r2, #24
 8001368:	4694      	mov	ip, r2
 800136a:	44bc      	add	ip, r7
 800136c:	4463      	add	r3, ip
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	b25b      	sxtb	r3, r3
 8001372:	b29b      	uxth	r3, r3
 8001374:	2226      	movs	r2, #38	; 0x26
 8001376:	2418      	movs	r4, #24
 8001378:	46a4      	mov	ip, r4
 800137a:	44bc      	add	ip, r7
 800137c:	4462      	add	r2, ip
 800137e:	8812      	ldrh	r2, [r2, #0]
 8001380:	4353      	muls	r3, r2
 8001382:	b29a      	uxth	r2, r3
 8001384:	251c      	movs	r5, #28
 8001386:	183b      	adds	r3, r7, r0
 8001388:	195b      	adds	r3, r3, r5
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	b25b      	sxtb	r3, r3
 800138e:	b29b      	uxth	r3, r3
 8001390:	18d3      	adds	r3, r2, r3
 8001392:	b29a      	uxth	r2, r3
 8001394:	183b      	adds	r3, r7, r0
 8001396:	185b      	adds	r3, r3, r1
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	18d3      	adds	r3, r2, r3
 800139c:	b29a      	uxth	r2, r3
 800139e:	183b      	adds	r3, r7, r0
 80013a0:	185b      	adds	r3, r3, r1
 80013a2:	801a      	strh	r2, [r3, #0]
						buffer[address] = colorFixer(bg);
 80013a4:	4b3c      	ldr	r3, [pc, #240]	; (8001498 <drawChar+0x690>)
 80013a6:	881a      	ldrh	r2, [r3, #0]
 80013a8:	0006      	movs	r6, r0
 80013aa:	183b      	adds	r3, r7, r0
 80013ac:	185b      	adds	r3, r3, r1
 80013ae:	2400      	movs	r4, #0
 80013b0:	5f1c      	ldrsh	r4, [r3, r4]
 80013b2:	0010      	movs	r0, r2
 80013b4:	f7ff f9e4 	bl	8000780 <colorFixer>
 80013b8:	0003      	movs	r3, r0
 80013ba:	0019      	movs	r1, r3
 80013bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013be:	0062      	lsls	r2, r4, #1
 80013c0:	52d1      	strh	r1, [r2, r3]
					for (int8_t l = 0; l < textSize; l++) {
 80013c2:	19bb      	adds	r3, r7, r6
 80013c4:	195b      	adds	r3, r3, r5
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	b25b      	sxtb	r3, r3
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	3301      	adds	r3, #1
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	19bb      	adds	r3, r7, r6
 80013d2:	195b      	adds	r3, r3, r5
 80013d4:	701a      	strb	r2, [r3, #0]
 80013d6:	231c      	movs	r3, #28
 80013d8:	2218      	movs	r2, #24
 80013da:	4694      	mov	ip, r2
 80013dc:	44bc      	add	ip, r7
 80013de:	4463      	add	r3, ip
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	b25b      	sxtb	r3, r3
 80013e4:	4a2b      	ldr	r2, [pc, #172]	; (8001494 <drawChar+0x68c>)
 80013e6:	7812      	ldrb	r2, [r2, #0]
 80013e8:	4293      	cmp	r3, r2
 80013ea:	db95      	blt.n	8001318 <drawChar+0x510>
				for (int8_t k = 0; k < textSize; k++) {
 80013ec:	211d      	movs	r1, #29
 80013ee:	2018      	movs	r0, #24
 80013f0:	183b      	adds	r3, r7, r0
 80013f2:	185b      	adds	r3, r3, r1
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	b25b      	sxtb	r3, r3
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	3301      	adds	r3, #1
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	183b      	adds	r3, r7, r0
 8001400:	185b      	adds	r3, r3, r1
 8001402:	701a      	strb	r2, [r3, #0]
 8001404:	231d      	movs	r3, #29
 8001406:	2218      	movs	r2, #24
 8001408:	4694      	mov	ip, r2
 800140a:	44bc      	add	ip, r7
 800140c:	4463      	add	r3, ip
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b25b      	sxtb	r3, r3
 8001412:	4a20      	ldr	r2, [pc, #128]	; (8001494 <drawChar+0x68c>)
 8001414:	7812      	ldrb	r2, [r2, #0]
 8001416:	4293      	cmp	r3, r2
 8001418:	da00      	bge.n	800141c <drawChar+0x614>
 800141a:	e775      	b.n	8001308 <drawChar+0x500>
		for (int8_t j = 0; j < 8; j++) {
 800141c:	211e      	movs	r1, #30
 800141e:	2018      	movs	r0, #24
 8001420:	183b      	adds	r3, r7, r0
 8001422:	185b      	adds	r3, r3, r1
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	b25b      	sxtb	r3, r3
 8001428:	b2db      	uxtb	r3, r3
 800142a:	3301      	adds	r3, #1
 800142c:	b2da      	uxtb	r2, r3
 800142e:	183b      	adds	r3, r7, r0
 8001430:	185b      	adds	r3, r3, r1
 8001432:	701a      	strb	r2, [r3, #0]
 8001434:	231e      	movs	r3, #30
 8001436:	2218      	movs	r2, #24
 8001438:	4694      	mov	ip, r2
 800143a:	44bc      	add	ip, r7
 800143c:	4463      	add	r3, ip
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	b25b      	sxtb	r3, r3
 8001442:	2b07      	cmp	r3, #7
 8001444:	dc00      	bgt.n	8001448 <drawChar+0x640>
 8001446:	e73c      	b.n	80012c2 <drawChar+0x4ba>
			}
		}
//		else fillRect(cursorX+5*textSize, cursorY, textSize, 8*textSize, bg, hspi);
	}

	drawBuffer(cursorX, cursorY, 6*textSize, 8*textSize, buffer, bufferSize, hspi);
 8001448:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <drawChar+0x698>)
 800144a:	7818      	ldrb	r0, [r3, #0]
 800144c:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <drawChar+0x69c>)
 800144e:	7819      	ldrb	r1, [r3, #0]
 8001450:	4b10      	ldr	r3, [pc, #64]	; (8001494 <drawChar+0x68c>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	1c1a      	adds	r2, r3, #0
 8001456:	1c13      	adds	r3, r2, #0
 8001458:	18db      	adds	r3, r3, r3
 800145a:	189b      	adds	r3, r3, r2
 800145c:	18db      	adds	r3, r3, r3
 800145e:	b2dc      	uxtb	r4, r3
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <drawChar+0x68c>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	b2dd      	uxtb	r5, r3
 8001468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	9202      	str	r2, [sp, #8]
 800146e:	221a      	movs	r2, #26
 8001470:	2618      	movs	r6, #24
 8001472:	46b4      	mov	ip, r6
 8001474:	44bc      	add	ip, r7
 8001476:	4462      	add	r2, ip
 8001478:	8812      	ldrh	r2, [r2, #0]
 800147a:	9201      	str	r2, [sp, #4]
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	002b      	movs	r3, r5
 8001480:	0022      	movs	r2, r4
 8001482:	f7ff faee 	bl	8000a62 <drawBuffer>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	469d      	mov	sp, r3
//	setCursor(cursorX+6, cursorY);
}
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	46bd      	mov	sp, r7
 800148e:	b011      	add	sp, #68	; 0x44
 8001490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	200000da 	.word	0x200000da
 8001498:	200000de 	.word	0x200000de
 800149c:	200000dc 	.word	0x200000dc
 80014a0:	200000d8 	.word	0x200000d8
 80014a4:	200000d9 	.word	0x200000d9

080014a8 <drawText>:

// this function is slow, and you can definitely see a scrolling speed thing going on
// how to remove this so it prints near instantly?
// maybe not needed if all we're doing is printing time (very few characters)
void drawText(const char *str, SPI_HandleTypeDef *hspi) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
	// add text wrap
	for (int i = 0; str[i] != '\0'; i++) {
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	e00b      	b.n	80014d0 <drawText+0x28>
		drawChar(str[i], hspi);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	18d3      	adds	r3, r2, r3
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	0011      	movs	r1, r2
 80014c4:	0018      	movs	r0, r3
 80014c6:	f7ff fc9f 	bl	8000e08 <drawChar>
	for (int i = 0; str[i] != '\0'; i++) {
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	3301      	adds	r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	18d3      	adds	r3, r2, r3
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1ed      	bne.n	80014b8 <drawText+0x10>
	}
}
 80014dc:	46c0      	nop			; (mov r8, r8)
 80014de:	46bd      	mov	sp, r7
 80014e0:	b004      	add	sp, #16
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <setBackgroundColor>:
		setCursor(cursorX+textSize*6, cursorY);
	}
//	setCursor(x+i*textSize*6, y);
}

void setBackgroundColor(uint16_t color) {bg = color;}
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	0002      	movs	r2, r0
 80014ec:	1dbb      	adds	r3, r7, #6
 80014ee:	801a      	strh	r2, [r3, #0]
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <setBackgroundColor+0x1c>)
 80014f2:	1dba      	adds	r2, r7, #6
 80014f4:	8812      	ldrh	r2, [r2, #0]
 80014f6:	801a      	strh	r2, [r3, #0]
 80014f8:	46c0      	nop			; (mov r8, r8)
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b002      	add	sp, #8
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	200000de 	.word	0x200000de

08001504 <setCursor>:

void setCursor(uint8_t x, uint8_t y) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	0002      	movs	r2, r0
 800150c:	1dfb      	adds	r3, r7, #7
 800150e:	701a      	strb	r2, [r3, #0]
 8001510:	1dbb      	adds	r3, r7, #6
 8001512:	1c0a      	adds	r2, r1, #0
 8001514:	701a      	strb	r2, [r3, #0]
	cursorX = x;
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <setCursor+0x2c>)
 8001518:	1dfa      	adds	r2, r7, #7
 800151a:	7812      	ldrb	r2, [r2, #0]
 800151c:	701a      	strb	r2, [r3, #0]
	cursorY = y;
 800151e:	4b05      	ldr	r3, [pc, #20]	; (8001534 <setCursor+0x30>)
 8001520:	1dba      	adds	r2, r7, #6
 8001522:	7812      	ldrb	r2, [r2, #0]
 8001524:	701a      	strb	r2, [r3, #0]
}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	46bd      	mov	sp, r7
 800152a:	b002      	add	sp, #8
 800152c:	bd80      	pop	{r7, pc}
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	200000d8 	.word	0x200000d8
 8001534:	200000d9 	.word	0x200000d9

08001538 <setTextSize>:

void setTextSize(uint8_t size) {textSize = size;}
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	0002      	movs	r2, r0
 8001540:	1dfb      	adds	r3, r7, #7
 8001542:	701a      	strb	r2, [r3, #0]
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <setTextSize+0x1c>)
 8001546:	1dfa      	adds	r2, r7, #7
 8001548:	7812      	ldrb	r2, [r2, #0]
 800154a:	701a      	strb	r2, [r3, #0]
 800154c:	46c0      	nop			; (mov r8, r8)
 800154e:	46bd      	mov	sp, r7
 8001550:	b002      	add	sp, #8
 8001552:	bd80      	pop	{r7, pc}
 8001554:	200000da 	.word	0x200000da

08001558 <setTextColor>:

void setTextColor(uint16_t color) {textColor = color;}
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	0002      	movs	r2, r0
 8001560:	1dbb      	adds	r3, r7, #6
 8001562:	801a      	strh	r2, [r3, #0]
 8001564:	4b03      	ldr	r3, [pc, #12]	; (8001574 <setTextColor+0x1c>)
 8001566:	1dba      	adds	r2, r7, #6
 8001568:	8812      	ldrh	r2, [r2, #0]
 800156a:	801a      	strh	r2, [r3, #0]
 800156c:	46c0      	nop			; (mov r8, r8)
 800156e:	46bd      	mov	sp, r7
 8001570:	b002      	add	sp, #8
 8001572:	bd80      	pop	{r7, pc}
 8001574:	200000dc 	.word	0x200000dc

08001578 <clearScreen>:

void clearScreen(uint16_t backgroundColor, SPI_HandleTypeDef *hspi) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	0002      	movs	r2, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	1dbb      	adds	r3, r7, #6
 8001584:	801a      	strh	r2, [r3, #0]
	bg = backgroundColor;
 8001586:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <clearScreen+0x2c>)
 8001588:	1dba      	adds	r2, r7, #6
 800158a:	8812      	ldrh	r2, [r2, #0]
 800158c:	801a      	strh	r2, [r3, #0]
	fillScreen(backgroundColor, hspi);
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	1dbb      	adds	r3, r7, #6
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	0011      	movs	r1, r2
 8001596:	0018      	movs	r0, r3
 8001598:	f7ff fb39 	bl	8000c0e <fillScreen>
}
 800159c:	46c0      	nop			; (mov r8, r8)
 800159e:	46bd      	mov	sp, r7
 80015a0:	b002      	add	sp, #8
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	200000de 	.word	0x200000de

080015a8 <setTime>:

#include "clocks.h"

// set rtc time. uses perosnal struct as arg
// assert members not null for set functions?
void setTime(struct times *t, RTC_HandleTypeDef *hrtc) {
 80015a8:	b590      	push	{r4, r7, lr}
 80015aa:	b089      	sub	sp, #36	; 0x24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
	RTC_TimeTypeDef stime = {0};	// change to malloc call? does that work in embedded?
 80015b2:	210c      	movs	r1, #12
 80015b4:	000c      	movs	r4, r1
 80015b6:	187b      	adds	r3, r7, r1
 80015b8:	0018      	movs	r0, r3
 80015ba:	2314      	movs	r3, #20
 80015bc:	001a      	movs	r2, r3
 80015be:	2100      	movs	r1, #0
 80015c0:	f006 fe39 	bl	8008236 <memset>

	// set using args later
	stime.Hours = t->hr;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	781a      	ldrb	r2, [r3, #0]
 80015c8:	0021      	movs	r1, r4
 80015ca:	187b      	adds	r3, r7, r1
 80015cc:	701a      	strb	r2, [r3, #0]
	stime.Minutes = t->min;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	785a      	ldrb	r2, [r3, #1]
 80015d2:	187b      	adds	r3, r7, r1
 80015d4:	705a      	strb	r2, [r3, #1]
	stime.Seconds = t->sec;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	789a      	ldrb	r2, [r3, #2]
 80015da:	187b      	adds	r3, r7, r1
 80015dc:	709a      	strb	r2, [r3, #2]

	stime.TimeFormat = RTC_HOURFORMAT_24;
 80015de:	187b      	adds	r3, r7, r1
 80015e0:	2200      	movs	r2, #0
 80015e2:	70da      	strb	r2, [r3, #3]

	// not sure what these do, but probably fine if set to 0 or ignored
	stime.SubSeconds = 0;
 80015e4:	187b      	adds	r3, r7, r1
 80015e6:	2200      	movs	r2, #0
 80015e8:	605a      	str	r2, [r3, #4]
	stime.SecondFraction = 0;
 80015ea:	187b      	adds	r3, r7, r1
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]

	stime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;		// add daylight savings later?
 80015f0:	187b      	adds	r3, r7, r1
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]
	stime.StoreOperation = RTC_STOREOPERATION_SET;		// not sure what this does
 80015f6:	187b      	adds	r3, r7, r1
 80015f8:	2280      	movs	r2, #128	; 0x80
 80015fa:	02d2      	lsls	r2, r2, #11
 80015fc:	611a      	str	r2, [r3, #16]

	// do nothing until done
	// not following BCD format (4-bit digit 1, 4-bit digit 2)
	// while makes program hang? ignore instead?
//	while (HAL_RTC_SetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK);
	HAL_RTC_SetTime(hrtc, &stime, RTC_FORMAT_BIN);
 80015fe:	1879      	adds	r1, r7, r1
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	2200      	movs	r2, #0
 8001604:	0018      	movs	r0, r3
 8001606:	f004 fd6f 	bl	80060e8 <HAL_RTC_SetTime>

//	runClockDisplay(&htim22);
}
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	46bd      	mov	sp, r7
 800160e:	b009      	add	sp, #36	; 0x24
 8001610:	bd90      	pop	{r4, r7, pc}

08001612 <setDate>:

// set rtc date. uses personal struct
void setDate(struct dates *d, RTC_HandleTypeDef *hrtc) {
 8001612:	b590      	push	{r4, r7, lr}
 8001614:	b085      	sub	sp, #20
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	6039      	str	r1, [r7, #0]
	// ---- date ----
	RTC_DateTypeDef sdate = {0};
 800161c:	240c      	movs	r4, #12
 800161e:	193b      	adds	r3, r7, r4
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]

	sdate.Month = d->month;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	789a      	ldrb	r2, [r3, #2]
 8001628:	193b      	adds	r3, r7, r4
 800162a:	705a      	strb	r2, [r3, #1]
	sdate.Date = d->date;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	78da      	ldrb	r2, [r3, #3]
 8001630:	193b      	adds	r3, r7, r4
 8001632:	709a      	strb	r2, [r3, #2]
	sdate.WeekDay = d->weekday;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	791a      	ldrb	r2, [r3, #4]
 8001638:	193b      	adds	r3, r7, r4
 800163a:	701a      	strb	r2, [r3, #0]
	sdate.Year = d->yr % 100; 		// set only between 0-99. part of the library (!?)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	2164      	movs	r1, #100	; 0x64
 8001642:	0018      	movs	r0, r3
 8001644:	f7fe fdee 	bl	8000224 <__aeabi_uidivmod>
 8001648:	000b      	movs	r3, r1
 800164a:	b29b      	uxth	r3, r3
 800164c:	b2da      	uxtb	r2, r3
 800164e:	193b      	adds	r3, r7, r4
 8001650:	70da      	strb	r2, [r3, #3]

	HAL_RTC_SetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 8001652:	1939      	adds	r1, r7, r4
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	2200      	movs	r2, #0
 8001658:	0018      	movs	r0, r3
 800165a:	f004 fe65 	bl	8006328 <HAL_RTC_SetDate>

//	runClockDisplay(&htim22);
}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	46bd      	mov	sp, r7
 8001662:	b005      	add	sp, #20
 8001664:	bd90      	pop	{r4, r7, pc}

08001666 <setDateTime>:

void setDateTime(struct dates *d, struct times *t, RTC_HandleTypeDef *hrtc) {
 8001666:	b580      	push	{r7, lr}
 8001668:	b084      	sub	sp, #16
 800166a:	af00      	add	r7, sp, #0
 800166c:	60f8      	str	r0, [r7, #12]
 800166e:	60b9      	str	r1, [r7, #8]
 8001670:	607a      	str	r2, [r7, #4]
	setDate(d, hrtc);
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	0011      	movs	r1, r2
 8001678:	0018      	movs	r0, r3
 800167a:	f7ff ffca 	bl	8001612 <setDate>
	setTime(t, hrtc);
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	0011      	movs	r1, r2
 8001684:	0018      	movs	r0, r3
 8001686:	f7ff ff8f 	bl	80015a8 <setTime>
}
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	46bd      	mov	sp, r7
 800168e:	b004      	add	sp, #16
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <setAlarm>:

// for time of day+week
void setAlarm(struct alarmTimes *a, RTC_HandleTypeDef *hrtc) {
 8001694:	b5b0      	push	{r4, r5, r7, lr}
 8001696:	b092      	sub	sp, #72	; 0x48
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
	RTC_AlarmTypeDef salarm = {0};		// is there a problem with using pointers instead?
 800169e:	2520      	movs	r5, #32
 80016a0:	197b      	adds	r3, r7, r5
 80016a2:	0018      	movs	r0, r3
 80016a4:	2328      	movs	r3, #40	; 0x28
 80016a6:	001a      	movs	r2, r3
 80016a8:	2100      	movs	r1, #0
 80016aa:	f006 fdc4 	bl	8008236 <memset>
	RTC_TimeTypeDef salarmtime = {0};
 80016ae:	240c      	movs	r4, #12
 80016b0:	193b      	adds	r3, r7, r4
 80016b2:	0018      	movs	r0, r3
 80016b4:	2314      	movs	r3, #20
 80016b6:	001a      	movs	r2, r3
 80016b8:	2100      	movs	r1, #0
 80016ba:	f006 fdbc 	bl	8008236 <memset>

	watchAlarm = *a;	// this is probably fine (value at a is defined already)
 80016be:	4a23      	ldr	r2, [pc, #140]	; (800174c <setAlarm+0xb8>)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	0010      	movs	r0, r2
 80016c4:	0019      	movs	r1, r3
 80016c6:	2304      	movs	r3, #4
 80016c8:	001a      	movs	r2, r3
 80016ca:	f006 fdab 	bl	8008224 <memcpy>

	// change to set with args
	salarmtime.Hours = a->hr;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	781a      	ldrb	r2, [r3, #0]
 80016d2:	193b      	adds	r3, r7, r4
 80016d4:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a->min;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	785a      	ldrb	r2, [r3, #1]
 80016da:	193b      	adds	r3, r7, r4
 80016dc:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a->sec;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	789a      	ldrb	r2, [r3, #2]
 80016e2:	193b      	adds	r3, r7, r4
 80016e4:	709a      	strb	r2, [r3, #2]
	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 80016e6:	193b      	adds	r3, r7, r4
 80016e8:	2200      	movs	r2, #0
 80016ea:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 80016ec:	0021      	movs	r1, r4
 80016ee:	187b      	adds	r3, r7, r1
 80016f0:	2200      	movs	r2, #0
 80016f2:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 80016f4:	187b      	adds	r3, r7, r1
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80016fa:	187b      	adds	r3, r7, r1
 80016fc:	2200      	movs	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001700:	187b      	adds	r3, r7, r1
 8001702:	2200      	movs	r2, #0
 8001704:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 8001706:	197b      	adds	r3, r7, r5
 8001708:	187a      	adds	r2, r7, r1
 800170a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800170c:	c313      	stmia	r3!, {r0, r1, r4}
 800170e:	ca03      	ldmia	r2!, {r0, r1}
 8001710:	c303      	stmia	r3!, {r0, r1}
	salarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001712:	197b      	adds	r3, r7, r5
 8001714:	2200      	movs	r2, #0
 8001716:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001718:	197b      	adds	r3, r7, r5
 800171a:	2200      	movs	r2, #0
 800171c:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 800171e:	197b      	adds	r3, r7, r5
 8001720:	2280      	movs	r2, #128	; 0x80
 8001722:	05d2      	lsls	r2, r2, #23
 8001724:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a->weekday;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	78d9      	ldrb	r1, [r3, #3]
 800172a:	197b      	adds	r3, r7, r5
 800172c:	2220      	movs	r2, #32
 800172e:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_A;			// change if using different alarm
 8001730:	197b      	adds	r3, r7, r5
 8001732:	2280      	movs	r2, #128	; 0x80
 8001734:	0052      	lsls	r2, r2, #1
 8001736:	625a      	str	r2, [r3, #36]	; 0x24

	// do nothing until done
	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
 8001738:	1979      	adds	r1, r7, r5
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	2200      	movs	r2, #0
 800173e:	0018      	movs	r0, r3
 8001740:	f004 feee 	bl	8006520 <HAL_RTC_SetAlarm_IT>
}
 8001744:	46c0      	nop			; (mov r8, r8)
 8001746:	46bd      	mov	sp, r7
 8001748:	b012      	add	sp, #72	; 0x48
 800174a:	bdb0      	pop	{r4, r5, r7, pc}
 800174c:	20000124 	.word	0x20000124

08001750 <setClockAlarm>:

// set an alarm for the next second.
// for triggering display updates.
// uses rtc weekday. should have weekday calculator integrated before using
void setClockAlarm(RTC_HandleTypeDef *hrtc) {
 8001750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001752:	b097      	sub	sp, #92	; 0x5c
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef salarm = {0};
 8001758:	2620      	movs	r6, #32
 800175a:	19bb      	adds	r3, r7, r6
 800175c:	0018      	movs	r0, r3
 800175e:	2328      	movs	r3, #40	; 0x28
 8001760:	001a      	movs	r2, r3
 8001762:	2100      	movs	r1, #0
 8001764:	f006 fd67 	bl	8008236 <memset>
	RTC_TimeTypeDef salarmtime = {0};
 8001768:	250c      	movs	r5, #12
 800176a:	197b      	adds	r3, r7, r5
 800176c:	0018      	movs	r0, r3
 800176e:	2314      	movs	r3, #20
 8001770:	001a      	movs	r2, r3
 8001772:	2100      	movs	r1, #0
 8001774:	f006 fd5f 	bl	8008236 <memset>

	struct dates *currentDate;
	struct times *currentTime;

	getDateTime(currentDate, currentTime, hrtc);
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800177c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800177e:	0018      	movs	r0, r3
 8001780:	f000 f8cc 	bl	800191c <getDateTime>

	struct alarmTimes *a;
	uint8_t s,m,h,w;
	s = currentTime->sec + 1;
 8001784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001786:	789a      	ldrb	r2, [r3, #2]
 8001788:	214f      	movs	r1, #79	; 0x4f
 800178a:	187b      	adds	r3, r7, r1
 800178c:	3201      	adds	r2, #1
 800178e:	701a      	strb	r2, [r3, #0]
	m = currentTime->min + s/60;
 8001790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001792:	785c      	ldrb	r4, [r3, #1]
 8001794:	187b      	adds	r3, r7, r1
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	213c      	movs	r1, #60	; 0x3c
 800179a:	0018      	movs	r0, r3
 800179c:	f7fe fcbc 	bl	8000118 <__udivsi3>
 80017a0:	0003      	movs	r3, r0
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	204e      	movs	r0, #78	; 0x4e
 80017a6:	183b      	adds	r3, r7, r0
 80017a8:	18a2      	adds	r2, r4, r2
 80017aa:	701a      	strb	r2, [r3, #0]
	h = currentTime->hr + m/60;
 80017ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017ae:	781c      	ldrb	r4, [r3, #0]
 80017b0:	183b      	adds	r3, r7, r0
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	213c      	movs	r1, #60	; 0x3c
 80017b6:	0018      	movs	r0, r3
 80017b8:	f7fe fcae 	bl	8000118 <__udivsi3>
 80017bc:	0003      	movs	r3, r0
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	234d      	movs	r3, #77	; 0x4d
 80017c2:	0019      	movs	r1, r3
 80017c4:	18fb      	adds	r3, r7, r3
 80017c6:	18a2      	adds	r2, r4, r2
 80017c8:	701a      	strb	r2, [r3, #0]
	w = currentDate->weekday + h/24;
 80017ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017cc:	791c      	ldrb	r4, [r3, #4]
 80017ce:	000b      	movs	r3, r1
 80017d0:	18fb      	adds	r3, r7, r3
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2118      	movs	r1, #24
 80017d6:	0018      	movs	r0, r3
 80017d8:	f7fe fc9e 	bl	8000118 <__udivsi3>
 80017dc:	0003      	movs	r3, r0
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	234c      	movs	r3, #76	; 0x4c
 80017e2:	18fb      	adds	r3, r7, r3
 80017e4:	18a2      	adds	r2, r4, r2
 80017e6:	701a      	strb	r2, [r3, #0]
	a->sec = s % 60;
 80017e8:	214f      	movs	r1, #79	; 0x4f
 80017ea:	187b      	adds	r3, r7, r1
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	213c      	movs	r1, #60	; 0x3c
 80017f0:	0018      	movs	r0, r3
 80017f2:	f7fe fd17 	bl	8000224 <__aeabi_uidivmod>
 80017f6:	000b      	movs	r3, r1
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017fc:	709a      	strb	r2, [r3, #2]
	a->min = m % 60;
 80017fe:	204e      	movs	r0, #78	; 0x4e
 8001800:	183b      	adds	r3, r7, r0
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	213c      	movs	r1, #60	; 0x3c
 8001806:	0018      	movs	r0, r3
 8001808:	f7fe fd0c 	bl	8000224 <__aeabi_uidivmod>
 800180c:	000b      	movs	r3, r1
 800180e:	b2da      	uxtb	r2, r3
 8001810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001812:	705a      	strb	r2, [r3, #1]
	a->hr = h % 24;
 8001814:	234d      	movs	r3, #77	; 0x4d
 8001816:	18fb      	adds	r3, r7, r3
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2118      	movs	r1, #24
 800181c:	0018      	movs	r0, r3
 800181e:	f7fe fd01 	bl	8000224 <__aeabi_uidivmod>
 8001822:	000b      	movs	r3, r1
 8001824:	b2da      	uxtb	r2, r3
 8001826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001828:	701a      	strb	r2, [r3, #0]
	a->weekday = (w-1) % 7 + 1;
 800182a:	234c      	movs	r3, #76	; 0x4c
 800182c:	18fb      	adds	r3, r7, r3
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	3b01      	subs	r3, #1
 8001832:	2107      	movs	r1, #7
 8001834:	0018      	movs	r0, r3
 8001836:	f7fe fddf 	bl	80003f8 <__aeabi_idivmod>
 800183a:	000b      	movs	r3, r1
 800183c:	b2db      	uxtb	r3, r3
 800183e:	3301      	adds	r3, #1
 8001840:	b2da      	uxtb	r2, r3
 8001842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001844:	70da      	strb	r2, [r3, #3]

	salarmtime.Hours = a->hr;
 8001846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001848:	781a      	ldrb	r2, [r3, #0]
 800184a:	197b      	adds	r3, r7, r5
 800184c:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a->min;
 800184e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001850:	785a      	ldrb	r2, [r3, #1]
 8001852:	197b      	adds	r3, r7, r5
 8001854:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a->sec;
 8001856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001858:	789a      	ldrb	r2, [r3, #2]
 800185a:	197b      	adds	r3, r7, r5
 800185c:	709a      	strb	r2, [r3, #2]
	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 800185e:	197b      	adds	r3, r7, r5
 8001860:	2200      	movs	r2, #0
 8001862:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 8001864:	0029      	movs	r1, r5
 8001866:	187b      	adds	r3, r7, r1
 8001868:	2200      	movs	r2, #0
 800186a:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 800186c:	187b      	adds	r3, r7, r1
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001872:	187b      	adds	r3, r7, r1
 8001874:	2200      	movs	r2, #0
 8001876:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001878:	187b      	adds	r3, r7, r1
 800187a:	2200      	movs	r2, #0
 800187c:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 800187e:	19bb      	adds	r3, r7, r6
 8001880:	187a      	adds	r2, r7, r1
 8001882:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001884:	c313      	stmia	r3!, {r0, r1, r4}
 8001886:	ca03      	ldmia	r2!, {r0, r1}
 8001888:	c303      	stmia	r3!, {r0, r1}
	salarm.AlarmMask = RTC_ALARMMASK_NONE;
 800188a:	19bb      	adds	r3, r7, r6
 800188c:	2200      	movs	r2, #0
 800188e:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001890:	19bb      	adds	r3, r7, r6
 8001892:	2200      	movs	r2, #0
 8001894:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8001896:	19bb      	adds	r3, r7, r6
 8001898:	2280      	movs	r2, #128	; 0x80
 800189a:	05d2      	lsls	r2, r2, #23
 800189c:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a->weekday;
 800189e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018a0:	78d9      	ldrb	r1, [r3, #3]
 80018a2:	19bb      	adds	r3, r7, r6
 80018a4:	2220      	movs	r2, #32
 80018a6:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_B;			// change if using different alarm
 80018a8:	19bb      	adds	r3, r7, r6
 80018aa:	2280      	movs	r2, #128	; 0x80
 80018ac:	0092      	lsls	r2, r2, #2
 80018ae:	625a      	str	r2, [r3, #36]	; 0x24

	// do nothing until done
	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
 80018b0:	19b9      	adds	r1, r7, r6
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	0018      	movs	r0, r3
 80018b8:	f004 fe32 	bl	8006520 <HAL_RTC_SetAlarm_IT>
}
 80018bc:	46c0      	nop			; (mov r8, r8)
 80018be:	46bd      	mov	sp, r7
 80018c0:	b017      	add	sp, #92	; 0x5c
 80018c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018c4 <HAL_RTC_AlarmAEventCallback>:

// ---- callbacks for interrupts ----
// used for alarm function in project
// meant to send signal to use motor
// change to use hw timer so signal is temporary
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	// change pin to whatever's accessible
	// using PC0
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);

	HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	005a      	lsls	r2, r3, #1
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	0011      	movs	r1, r2
 80018d4:	0018      	movs	r0, r3
 80018d6:	f004 ff6f 	bl	80067b8 <HAL_RTC_DeactivateAlarm>
	isAlarmRunning = 0;
 80018da:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <HAL_RTC_AlarmAEventCallback+0x2c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
	updateFace.alarm = 1;
 80018e0:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <HAL_RTC_AlarmAEventCallback+0x30>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	709a      	strb	r2, [r3, #2]
}
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	46bd      	mov	sp, r7
 80018ea:	b002      	add	sp, #8
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	20000138 	.word	0x20000138
 80018f4:	2000012c 	.word	0x2000012c

080018f8 <HAL_RTCEx_AlarmBEventCallback>:

void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
//	HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_B);
//	isTimerRunning = 0;
//	updateFace.timer = 1;

	updateFace.clock = 1;
 8001900:	4b05      	ldr	r3, [pc, #20]	; (8001918 <HAL_RTCEx_AlarmBEventCallback+0x20>)
 8001902:	2201      	movs	r2, #1
 8001904:	701a      	strb	r2, [r3, #0]
	setClockAlarm(hrtc);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	0018      	movs	r0, r3
 800190a:	f7ff ff21 	bl	8001750 <setClockAlarm>
}
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	46bd      	mov	sp, r7
 8001912:	b002      	add	sp, #8
 8001914:	bd80      	pop	{r7, pc}
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	2000012c 	.word	0x2000012c

0800191c <getDateTime>:
	d->date = sdate.Date;
	d->weekday = sdate.WeekDay;
}

// not using getDate and getTime for efficiency (?)
void getDateTime(struct dates *d, struct times *t, RTC_HandleTypeDef *hrtc) {
 800191c:	b590      	push	{r4, r7, lr}
 800191e:	b08b      	sub	sp, #44	; 0x2c
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
	RTC_DateTypeDef sdate;
	RTC_TimeTypeDef stime;

	// programming manual says to read time after date. something shadow registers.
	// not done automatically in HAL
	HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN);
 8001928:	2310      	movs	r3, #16
 800192a:	18f9      	adds	r1, r7, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	0018      	movs	r0, r3
 8001932:	f004 fc9d 	bl	8006270 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 8001936:	2424      	movs	r4, #36	; 0x24
 8001938:	1939      	adds	r1, r7, r4
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	0018      	movs	r0, r3
 8001940:	f004 fda0 	bl	8006484 <HAL_RTC_GetDate>

	d->yr = sdate.Year > 50 ? sdate.Year+1900 : sdate.Year+2000;		// make assumptions on whether it's 19xx or 20xx
 8001944:	193b      	adds	r3, r7, r4
 8001946:	78db      	ldrb	r3, [r3, #3]
 8001948:	2b32      	cmp	r3, #50	; 0x32
 800194a:	d908      	bls.n	800195e <getDateTime+0x42>
 800194c:	2324      	movs	r3, #36	; 0x24
 800194e:	18fb      	adds	r3, r7, r3
 8001950:	78db      	ldrb	r3, [r3, #3]
 8001952:	b29b      	uxth	r3, r3
 8001954:	4a16      	ldr	r2, [pc, #88]	; (80019b0 <getDateTime+0x94>)
 8001956:	4694      	mov	ip, r2
 8001958:	4463      	add	r3, ip
 800195a:	b29b      	uxth	r3, r3
 800195c:	e008      	b.n	8001970 <getDateTime+0x54>
 800195e:	2324      	movs	r3, #36	; 0x24
 8001960:	18fb      	adds	r3, r7, r3
 8001962:	78db      	ldrb	r3, [r3, #3]
 8001964:	b29b      	uxth	r3, r3
 8001966:	22fa      	movs	r2, #250	; 0xfa
 8001968:	00d2      	lsls	r2, r2, #3
 800196a:	4694      	mov	ip, r2
 800196c:	4463      	add	r3, ip
 800196e:	b29b      	uxth	r3, r3
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	8013      	strh	r3, [r2, #0]
	d->month = sdate.Month;
 8001974:	2124      	movs	r1, #36	; 0x24
 8001976:	187b      	adds	r3, r7, r1
 8001978:	785a      	ldrb	r2, [r3, #1]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	709a      	strb	r2, [r3, #2]
	d->date = sdate.Date;
 800197e:	187b      	adds	r3, r7, r1
 8001980:	789a      	ldrb	r2, [r3, #2]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	70da      	strb	r2, [r3, #3]
	d->weekday = sdate.WeekDay;
 8001986:	187b      	adds	r3, r7, r1
 8001988:	781a      	ldrb	r2, [r3, #0]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	711a      	strb	r2, [r3, #4]

	t->hr = stime.Hours;
 800198e:	2110      	movs	r1, #16
 8001990:	187b      	adds	r3, r7, r1
 8001992:	781a      	ldrb	r2, [r3, #0]
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	701a      	strb	r2, [r3, #0]
	t->min = stime.Minutes;
 8001998:	187b      	adds	r3, r7, r1
 800199a:	785a      	ldrb	r2, [r3, #1]
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	705a      	strb	r2, [r3, #1]
	t->sec = stime.Seconds;
 80019a0:	187b      	adds	r3, r7, r1
 80019a2:	789a      	ldrb	r2, [r3, #2]
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	709a      	strb	r2, [r3, #2]
}
 80019a8:	46c0      	nop			; (mov r8, r8)
 80019aa:	46bd      	mov	sp, r7
 80019ac:	b00b      	add	sp, #44	; 0x2c
 80019ae:	bd90      	pop	{r4, r7, pc}
 80019b0:	0000076c 	.word	0x0000076c

080019b4 <secondsToTime>:
// ---- converters ----
uint32_t timeToSeconds(struct times *t) {
	return t->sec + t->min*60 + t->hr*3600;
}

void secondsToTime(struct times *t, uint32_t seconds) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
	t->hr = seconds / 3600;
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	23e1      	movs	r3, #225	; 0xe1
 80019c2:	0119      	lsls	r1, r3, #4
 80019c4:	0010      	movs	r0, r2
 80019c6:	f7fe fba7 	bl	8000118 <__udivsi3>
 80019ca:	0003      	movs	r3, r0
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	701a      	strb	r2, [r3, #0]
	seconds %= 3600;
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	23e1      	movs	r3, #225	; 0xe1
 80019d6:	0119      	lsls	r1, r3, #4
 80019d8:	0010      	movs	r0, r2
 80019da:	f7fe fc23 	bl	8000224 <__aeabi_uidivmod>
 80019de:	000b      	movs	r3, r1
 80019e0:	603b      	str	r3, [r7, #0]
	t->min = seconds / 60;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	213c      	movs	r1, #60	; 0x3c
 80019e6:	0018      	movs	r0, r3
 80019e8:	f7fe fb96 	bl	8000118 <__udivsi3>
 80019ec:	0003      	movs	r3, r0
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	705a      	strb	r2, [r3, #1]
	seconds %= 60;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	213c      	movs	r1, #60	; 0x3c
 80019f8:	0018      	movs	r0, r3
 80019fa:	f7fe fc13 	bl	8000224 <__aeabi_uidivmod>
 80019fe:	000b      	movs	r3, r1
 8001a00:	603b      	str	r3, [r7, #0]
	t->sec = seconds;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	709a      	strb	r2, [r3, #2]
}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	b002      	add	sp, #8
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a18:	f002 fb40 	bl	800409c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a1c:	f000 f83e 	bl	8001a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  peripheralClockConfig();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a20:	f000 fc56 	bl	80022d0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001a24:	f000 f9f2 	bl	8001e0c <MX_SPI1_Init>
  MX_ADC_Init();
 8001a28:	f000 f8b6 	bl	8001b98 <MX_ADC_Init>
  MX_RTC_Init();
 8001a2c:	f000 f940 	bl	8001cb0 <MX_RTC_Init>
  MX_TIM21_Init();
 8001a30:	f000 fb0a 	bl	8002048 <MX_TIM21_Init>
  MX_LPTIM1_Init();
 8001a34:	f000 f914 	bl	8001c60 <MX_LPTIM1_Init>
  MX_DMA_Init();
 8001a38:	f000 fc2c 	bl	8002294 <MX_DMA_Init>
  MX_TIM22_Init();
 8001a3c:	f000 fb9c 	bl	8002178 <MX_TIM22_Init>
  MX_TIM2_Init();
 8001a40:	f000 fa20 	bl	8001e84 <MX_TIM2_Init>
  MX_TIM6_Init();
 8001a44:	f000 fac4 	bl	8001fd0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  	/* initialization for display */
	HAL_Delay(2000);
 8001a48:	23fa      	movs	r3, #250	; 0xfa
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f002 fb85 	bl	800415c <HAL_Delay>
	TFT_startup(&hspi1);
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <main+0x78>)
 8001a54:	0018      	movs	r0, r3
 8001a56:	f7fe fde5 	bl	8000624 <TFT_startup>
	clearScreen(ST77XX_BLACK, &hspi1);
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <main+0x78>)
 8001a5c:	0019      	movs	r1, r3
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f7ff fd8a 	bl	8001578 <clearScreen>

	/* start updating display for ui */
	initFace();
 8001a64:	f001 ff1e 	bl	80038a4 <initFace>
//	runClockDisplay();
	setClockAlarm(&hrtc);
 8001a68:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <main+0x7c>)
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	f7ff fe70 	bl	8001750 <setClockAlarm>
//	  lineTest(&hspi1);
//	  charTest(&hspi1);
//	  textTest(bg, &hspi1);

	  // ui/nav tests or full run. uncomment when ready
	  updateWithButtons(&hrtc, &htim21, &htim2);
 8001a70:	4a08      	ldr	r2, [pc, #32]	; (8001a94 <main+0x80>)
 8001a72:	4909      	ldr	r1, [pc, #36]	; (8001a98 <main+0x84>)
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <main+0x7c>)
 8001a76:	0018      	movs	r0, r3
 8001a78:	f000 fcfc 	bl	8002474 <updateWithButtons>
	  updateDisplay(&hrtc, &hspi1);
 8001a7c:	4a03      	ldr	r2, [pc, #12]	; (8001a8c <main+0x78>)
 8001a7e:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <main+0x7c>)
 8001a80:	0011      	movs	r1, r2
 8001a82:	0018      	movs	r0, r3
 8001a84:	f001 f936 	bl	8002cf4 <updateDisplay>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8001a88:	bf30      	wfi
	  updateWithButtons(&hrtc, &htim21, &htim2);
 8001a8a:	e7f1      	b.n	8001a70 <main+0x5c>
 8001a8c:	2000021c 	.word	0x2000021c
 8001a90:	200001f8 	.word	0x200001f8
 8001a94:	20000274 	.word	0x20000274
 8001a98:	20000354 	.word	0x20000354

08001a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a9c:	b590      	push	{r4, r7, lr}
 8001a9e:	b09f      	sub	sp, #124	; 0x7c
 8001aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aa2:	2440      	movs	r4, #64	; 0x40
 8001aa4:	193b      	adds	r3, r7, r4
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	2338      	movs	r3, #56	; 0x38
 8001aaa:	001a      	movs	r2, r3
 8001aac:	2100      	movs	r1, #0
 8001aae:	f006 fbc2 	bl	8008236 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ab2:	232c      	movs	r3, #44	; 0x2c
 8001ab4:	18fb      	adds	r3, r7, r3
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	2314      	movs	r3, #20
 8001aba:	001a      	movs	r2, r3
 8001abc:	2100      	movs	r1, #0
 8001abe:	f006 fbba 	bl	8008236 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	2328      	movs	r3, #40	; 0x28
 8001ac8:	001a      	movs	r2, r3
 8001aca:	2100      	movs	r1, #0
 8001acc:	f006 fbb3 	bl	8008236 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ad0:	4b2e      	ldr	r3, [pc, #184]	; (8001b8c <SystemClock_Config+0xf0>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a2e      	ldr	r2, [pc, #184]	; (8001b90 <SystemClock_Config+0xf4>)
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	4b2c      	ldr	r3, [pc, #176]	; (8001b8c <SystemClock_Config+0xf0>)
 8001ada:	2180      	movs	r1, #128	; 0x80
 8001adc:	0109      	lsls	r1, r1, #4
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001ae2:	f003 fb63 	bl	80051ac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001ae6:	4b2b      	ldr	r3, [pc, #172]	; (8001b94 <SystemClock_Config+0xf8>)
 8001ae8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001aea:	4b2a      	ldr	r3, [pc, #168]	; (8001b94 <SystemClock_Config+0xf8>)
 8001aec:	4928      	ldr	r1, [pc, #160]	; (8001b90 <SystemClock_Config+0xf4>)
 8001aee:	400a      	ands	r2, r1
 8001af0:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8001af2:	193b      	adds	r3, r7, r4
 8001af4:	2226      	movs	r2, #38	; 0x26
 8001af6:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001af8:	193b      	adds	r3, r7, r4
 8001afa:	2280      	movs	r2, #128	; 0x80
 8001afc:	0052      	lsls	r2, r2, #1
 8001afe:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b00:	0021      	movs	r1, r4
 8001b02:	187b      	adds	r3, r7, r1
 8001b04:	2201      	movs	r2, #1
 8001b06:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b08:	187b      	adds	r3, r7, r1
 8001b0a:	2210      	movs	r2, #16
 8001b0c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001b0e:	187b      	adds	r3, r7, r1
 8001b10:	2201      	movs	r2, #1
 8001b12:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b14:	187b      	adds	r3, r7, r1
 8001b16:	2200      	movs	r2, #0
 8001b18:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b1a:	187b      	adds	r3, r7, r1
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f003 fb53 	bl	80051c8 <HAL_RCC_OscConfig>
 8001b22:	1e03      	subs	r3, r0, #0
 8001b24:	d001      	beq.n	8001b2a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001b26:	f000 fc65 	bl	80023f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b2a:	212c      	movs	r1, #44	; 0x2c
 8001b2c:	187b      	adds	r3, r7, r1
 8001b2e:	220f      	movs	r2, #15
 8001b30:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001b32:	187b      	adds	r3, r7, r1
 8001b34:	2201      	movs	r2, #1
 8001b36:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b38:	187b      	adds	r3, r7, r1
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b3e:	187b      	adds	r3, r7, r1
 8001b40:	2200      	movs	r2, #0
 8001b42:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b44:	187b      	adds	r3, r7, r1
 8001b46:	2200      	movs	r2, #0
 8001b48:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b4a:	187b      	adds	r3, r7, r1
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f003 ff0a 	bl	8005968 <HAL_RCC_ClockConfig>
 8001b54:	1e03      	subs	r3, r0, #0
 8001b56:	d001      	beq.n	8001b5c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001b58:	f000 fc4c 	bl	80023f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPTIM1;
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	22a0      	movs	r2, #160	; 0xa0
 8001b60:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	2280      	movs	r2, #128	; 0x80
 8001b66:	0252      	lsls	r2, r2, #9
 8001b68:	605a      	str	r2, [r3, #4]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	22c0      	movs	r2, #192	; 0xc0
 8001b6e:	0312      	lsls	r2, r2, #12
 8001b70:	621a      	str	r2, [r3, #32]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b72:	1d3b      	adds	r3, r7, #4
 8001b74:	0018      	movs	r0, r3
 8001b76:	f004 f8a5 	bl	8005cc4 <HAL_RCCEx_PeriphCLKConfig>
 8001b7a:	1e03      	subs	r3, r0, #0
 8001b7c:	d001      	beq.n	8001b82 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001b7e:	f000 fc39 	bl	80023f4 <Error_Handler>
  }
}
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	46bd      	mov	sp, r7
 8001b86:	b01f      	add	sp, #124	; 0x7c
 8001b88:	bd90      	pop	{r4, r7, pc}
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	40007000 	.word	0x40007000
 8001b90:	ffffe7ff 	.word	0xffffe7ff
 8001b94:	40021000 	.word	0x40021000

08001b98 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b9e:	003b      	movs	r3, r7
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	2308      	movs	r3, #8
 8001ba4:	001a      	movs	r2, r3
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	f006 fb45 	bl	8008236 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8001bac:	4b2a      	ldr	r3, [pc, #168]	; (8001c58 <MX_ADC_Init+0xc0>)
 8001bae:	4a2b      	ldr	r2, [pc, #172]	; (8001c5c <MX_ADC_Init+0xc4>)
 8001bb0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8001bb2:	4b29      	ldr	r3, [pc, #164]	; (8001c58 <MX_ADC_Init+0xc0>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001bb8:	4b27      	ldr	r3, [pc, #156]	; (8001c58 <MX_ADC_Init+0xc0>)
 8001bba:	22c0      	movs	r2, #192	; 0xc0
 8001bbc:	0612      	lsls	r2, r2, #24
 8001bbe:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001bc0:	4b25      	ldr	r3, [pc, #148]	; (8001c58 <MX_ADC_Init+0xc0>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001bc6:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <MX_ADC_Init+0xc0>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001bcc:	4b22      	ldr	r3, [pc, #136]	; (8001c58 <MX_ADC_Init+0xc0>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bd2:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <MX_ADC_Init+0xc0>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001bd8:	4b1f      	ldr	r3, [pc, #124]	; (8001c58 <MX_ADC_Init+0xc0>)
 8001bda:	2220      	movs	r2, #32
 8001bdc:	2100      	movs	r1, #0
 8001bde:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001be0:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <MX_ADC_Init+0xc0>)
 8001be2:	2221      	movs	r2, #33	; 0x21
 8001be4:	2100      	movs	r1, #0
 8001be6:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001be8:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <MX_ADC_Init+0xc0>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bee:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <MX_ADC_Init+0xc0>)
 8001bf0:	22c2      	movs	r2, #194	; 0xc2
 8001bf2:	32ff      	adds	r2, #255	; 0xff
 8001bf4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001bf6:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <MX_ADC_Init+0xc0>)
 8001bf8:	222c      	movs	r2, #44	; 0x2c
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bfe:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <MX_ADC_Init+0xc0>)
 8001c00:	2204      	movs	r2, #4
 8001c02:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c04:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <MX_ADC_Init+0xc0>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001c0a:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <MX_ADC_Init+0xc0>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <MX_ADC_Init+0xc0>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001c16:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <MX_ADC_Init+0xc0>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001c1c:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <MX_ADC_Init+0xc0>)
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f002 faba 	bl	8004198 <HAL_ADC_Init>
 8001c24:	1e03      	subs	r3, r0, #0
 8001c26:	d001      	beq.n	8001c2c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8001c28:	f000 fbe4 	bl	80023f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001c2c:	003b      	movs	r3, r7
 8001c2e:	2201      	movs	r2, #1
 8001c30:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001c32:	003b      	movs	r3, r7
 8001c34:	2280      	movs	r2, #128	; 0x80
 8001c36:	0152      	lsls	r2, r2, #5
 8001c38:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001c3a:	003a      	movs	r2, r7
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <MX_ADC_Init+0xc0>)
 8001c3e:	0011      	movs	r1, r2
 8001c40:	0018      	movs	r0, r3
 8001c42:	f002 fc1d 	bl	8004480 <HAL_ADC_ConfigChannel>
 8001c46:	1e03      	subs	r3, r0, #0
 8001c48:	d001      	beq.n	8001c4e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8001c4a:	f000 fbd3 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	46bd      	mov	sp, r7
 8001c52:	b002      	add	sp, #8
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	200002b0 	.word	0x200002b0
 8001c5c:	40012400 	.word	0x40012400

08001c60 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001c64:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <MX_LPTIM1_Init+0x44>)
 8001c66:	4a10      	ldr	r2, [pc, #64]	; (8001ca8 <MX_LPTIM1_Init+0x48>)
 8001c68:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <MX_LPTIM1_Init+0x44>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <MX_LPTIM1_Init+0x44>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001c76:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <MX_LPTIM1_Init+0x44>)
 8001c78:	4a0c      	ldr	r2, [pc, #48]	; (8001cac <MX_LPTIM1_Init+0x4c>)
 8001c7a:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001c7c:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <MX_LPTIM1_Init+0x44>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001c82:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <MX_LPTIM1_Init+0x44>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <MX_LPTIM1_Init+0x44>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001c8e:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <MX_LPTIM1_Init+0x44>)
 8001c90:	0018      	movs	r0, r3
 8001c92:	f003 f931 	bl	8004ef8 <HAL_LPTIM_Init>
 8001c96:	1e03      	subs	r3, r0, #0
 8001c98:	d001      	beq.n	8001c9e <MX_LPTIM1_Init+0x3e>
  {
    Error_Handler();
 8001c9a:	f000 fbab 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	200001c8 	.word	0x200001c8
 8001ca8:	40007c00 	.word	0x40007c00
 8001cac:	0000ffff 	.word	0x0000ffff

08001cb0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b090      	sub	sp, #64	; 0x40
 8001cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001cb6:	232c      	movs	r3, #44	; 0x2c
 8001cb8:	18fb      	adds	r3, r7, r3
 8001cba:	0018      	movs	r0, r3
 8001cbc:	2314      	movs	r3, #20
 8001cbe:	001a      	movs	r2, r3
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	f006 fab8 	bl	8008236 <memset>
  RTC_DateTypeDef sDate = {0};
 8001cc6:	2328      	movs	r3, #40	; 0x28
 8001cc8:	18fb      	adds	r3, r7, r3
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8001cce:	003b      	movs	r3, r7
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	2328      	movs	r3, #40	; 0x28
 8001cd4:	001a      	movs	r2, r3
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	f006 faad 	bl	8008236 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001cdc:	4b49      	ldr	r3, [pc, #292]	; (8001e04 <MX_RTC_Init+0x154>)
 8001cde:	4a4a      	ldr	r2, [pc, #296]	; (8001e08 <MX_RTC_Init+0x158>)
 8001ce0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001ce2:	4b48      	ldr	r3, [pc, #288]	; (8001e04 <MX_RTC_Init+0x154>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001ce8:	4b46      	ldr	r3, [pc, #280]	; (8001e04 <MX_RTC_Init+0x154>)
 8001cea:	227f      	movs	r2, #127	; 0x7f
 8001cec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001cee:	4b45      	ldr	r3, [pc, #276]	; (8001e04 <MX_RTC_Init+0x154>)
 8001cf0:	22ff      	movs	r2, #255	; 0xff
 8001cf2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001cf4:	4b43      	ldr	r3, [pc, #268]	; (8001e04 <MX_RTC_Init+0x154>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001cfa:	4b42      	ldr	r3, [pc, #264]	; (8001e04 <MX_RTC_Init+0x154>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d00:	4b40      	ldr	r3, [pc, #256]	; (8001e04 <MX_RTC_Init+0x154>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d06:	4b3f      	ldr	r3, [pc, #252]	; (8001e04 <MX_RTC_Init+0x154>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d0c:	4b3d      	ldr	r3, [pc, #244]	; (8001e04 <MX_RTC_Init+0x154>)
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f004 f94c 	bl	8005fac <HAL_RTC_Init>
 8001d14:	1e03      	subs	r3, r0, #0
 8001d16:	d001      	beq.n	8001d1c <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8001d18:	f000 fb6c 	bl	80023f4 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 8001d1c:	212c      	movs	r1, #44	; 0x2c
 8001d1e:	187b      	adds	r3, r7, r1
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8001d24:	187b      	adds	r3, r7, r1
 8001d26:	2200      	movs	r2, #0
 8001d28:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8001d2a:	187b      	adds	r3, r7, r1
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d30:	187b      	adds	r3, r7, r1
 8001d32:	2200      	movs	r2, #0
 8001d34:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d36:	187b      	adds	r3, r7, r1
 8001d38:	2200      	movs	r2, #0
 8001d3a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001d3c:	1879      	adds	r1, r7, r1
 8001d3e:	4b31      	ldr	r3, [pc, #196]	; (8001e04 <MX_RTC_Init+0x154>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	0018      	movs	r0, r3
 8001d44:	f004 f9d0 	bl	80060e8 <HAL_RTC_SetTime>
 8001d48:	1e03      	subs	r3, r0, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8001d4c:	f000 fb52 	bl	80023f4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001d50:	2128      	movs	r1, #40	; 0x28
 8001d52:	187b      	adds	r3, r7, r1
 8001d54:	2201      	movs	r2, #1
 8001d56:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001d58:	187b      	adds	r3, r7, r1
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8001d5e:	187b      	adds	r3, r7, r1
 8001d60:	2201      	movs	r2, #1
 8001d62:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8001d64:	187b      	adds	r3, r7, r1
 8001d66:	2200      	movs	r2, #0
 8001d68:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001d6a:	1879      	adds	r1, r7, r1
 8001d6c:	4b25      	ldr	r3, [pc, #148]	; (8001e04 <MX_RTC_Init+0x154>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	0018      	movs	r0, r3
 8001d72:	f004 fad9 	bl	8006328 <HAL_RTC_SetDate>
 8001d76:	1e03      	subs	r3, r0, #0
 8001d78:	d001      	beq.n	8001d7e <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8001d7a:	f000 fb3b 	bl	80023f4 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 8001d7e:	003b      	movs	r3, r7
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8001d84:	003b      	movs	r3, r7
 8001d86:	2200      	movs	r2, #0
 8001d88:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8001d8a:	003b      	movs	r3, r7
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8001d90:	003b      	movs	r3, r7
 8001d92:	2200      	movs	r2, #0
 8001d94:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d96:	003b      	movs	r3, r7
 8001d98:	2200      	movs	r2, #0
 8001d9a:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d9c:	003b      	movs	r3, r7
 8001d9e:	2200      	movs	r2, #0
 8001da0:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001da2:	003b      	movs	r3, r7
 8001da4:	2200      	movs	r2, #0
 8001da6:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001da8:	003b      	movs	r3, r7
 8001daa:	2200      	movs	r2, #0
 8001dac:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001dae:	003b      	movs	r3, r7
 8001db0:	2200      	movs	r2, #0
 8001db2:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8001db4:	003b      	movs	r3, r7
 8001db6:	2220      	movs	r2, #32
 8001db8:	2101      	movs	r1, #1
 8001dba:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8001dbc:	003b      	movs	r3, r7
 8001dbe:	2280      	movs	r2, #128	; 0x80
 8001dc0:	0052      	lsls	r2, r2, #1
 8001dc2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001dc4:	0039      	movs	r1, r7
 8001dc6:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <MX_RTC_Init+0x154>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f004 fba8 	bl	8006520 <HAL_RTC_SetAlarm_IT>
 8001dd0:	1e03      	subs	r3, r0, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 8001dd4:	f000 fb0e 	bl	80023f4 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 1;
 8001dd8:	003b      	movs	r3, r7
 8001dda:	2220      	movs	r2, #32
 8001ddc:	2101      	movs	r1, #1
 8001dde:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_B;
 8001de0:	003b      	movs	r3, r7
 8001de2:	2280      	movs	r2, #128	; 0x80
 8001de4:	0092      	lsls	r2, r2, #2
 8001de6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001de8:	0039      	movs	r1, r7
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <MX_RTC_Init+0x154>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	0018      	movs	r0, r3
 8001df0:	f004 fb96 	bl	8006520 <HAL_RTC_SetAlarm_IT>
 8001df4:	1e03      	subs	r3, r0, #0
 8001df6:	d001      	beq.n	8001dfc <MX_RTC_Init+0x14c>
  {
    Error_Handler();
 8001df8:	f000 fafc 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001dfc:	46c0      	nop			; (mov r8, r8)
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	b010      	add	sp, #64	; 0x40
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	200001f8 	.word	0x200001f8
 8001e08:	40002800 	.word	0x40002800

08001e0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e10:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <MX_SPI1_Init+0x6c>)
 8001e12:	4a1a      	ldr	r2, [pc, #104]	; (8001e7c <MX_SPI1_Init+0x70>)
 8001e14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e16:	4b18      	ldr	r3, [pc, #96]	; (8001e78 <MX_SPI1_Init+0x6c>)
 8001e18:	2282      	movs	r2, #130	; 0x82
 8001e1a:	0052      	lsls	r2, r2, #1
 8001e1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e1e:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <MX_SPI1_Init+0x6c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e24:	4b14      	ldr	r3, [pc, #80]	; (8001e78 <MX_SPI1_Init+0x6c>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e2a:	4b13      	ldr	r3, [pc, #76]	; (8001e78 <MX_SPI1_Init+0x6c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e30:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <MX_SPI1_Init+0x6c>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e36:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <MX_SPI1_Init+0x6c>)
 8001e38:	2280      	movs	r2, #128	; 0x80
 8001e3a:	0092      	lsls	r2, r2, #2
 8001e3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <MX_SPI1_Init+0x6c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e44:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <MX_SPI1_Init+0x6c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e4a:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <MX_SPI1_Init+0x6c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e50:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <MX_SPI1_Init+0x6c>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001e56:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <MX_SPI1_Init+0x6c>)
 8001e58:	2207      	movs	r2, #7
 8001e5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <MX_SPI1_Init+0x6c>)
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f004 fe30 	bl	8006ac4 <HAL_SPI_Init>
 8001e64:	1e03      	subs	r3, r0, #0
 8001e66:	d001      	beq.n	8001e6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001e68:	f000 fac4 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  hspi1.hdmatx = &hdma_spi1_tx;
 8001e6c:	4b02      	ldr	r3, [pc, #8]	; (8001e78 <MX_SPI1_Init+0x6c>)
 8001e6e:	4a04      	ldr	r2, [pc, #16]	; (8001e80 <MX_SPI1_Init+0x74>)
 8001e70:	649a      	str	r2, [r3, #72]	; 0x48
  /* USER CODE END SPI1_Init 2 */

}
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	2000021c 	.word	0x2000021c
 8001e7c:	40013000 	.word	0x40013000
 8001e80:	2000030c 	.word	0x2000030c

08001e84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08a      	sub	sp, #40	; 0x28
 8001e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e8a:	2318      	movs	r3, #24
 8001e8c:	18fb      	adds	r3, r7, r3
 8001e8e:	0018      	movs	r0, r3
 8001e90:	2310      	movs	r3, #16
 8001e92:	001a      	movs	r2, r3
 8001e94:	2100      	movs	r1, #0
 8001e96:	f006 f9ce 	bl	8008236 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e9a:	2310      	movs	r3, #16
 8001e9c:	18fb      	adds	r3, r7, r3
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	2308      	movs	r3, #8
 8001ea2:	001a      	movs	r2, r3
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	f006 f9c6 	bl	8008236 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eaa:	003b      	movs	r3, r7
 8001eac:	0018      	movs	r0, r3
 8001eae:	2310      	movs	r3, #16
 8001eb0:	001a      	movs	r2, r3
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	f006 f9bf 	bl	8008236 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001eb8:	4b44      	ldr	r3, [pc, #272]	; (8001fcc <MX_TIM2_Init+0x148>)
 8001eba:	2280      	movs	r2, #128	; 0x80
 8001ebc:	05d2      	lsls	r2, r2, #23
 8001ebe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ec0:	4b42      	ldr	r3, [pc, #264]	; (8001fcc <MX_TIM2_Init+0x148>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec6:	4b41      	ldr	r3, [pc, #260]	; (8001fcc <MX_TIM2_Init+0x148>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0x8000;
 8001ecc:	4b3f      	ldr	r3, [pc, #252]	; (8001fcc <MX_TIM2_Init+0x148>)
 8001ece:	2280      	movs	r2, #128	; 0x80
 8001ed0:	0212      	lsls	r2, r2, #8
 8001ed2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed4:	4b3d      	ldr	r3, [pc, #244]	; (8001fcc <MX_TIM2_Init+0x148>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eda:	4b3c      	ldr	r3, [pc, #240]	; (8001fcc <MX_TIM2_Init+0x148>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ee0:	4b3a      	ldr	r3, [pc, #232]	; (8001fcc <MX_TIM2_Init+0x148>)
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f005 fab4 	bl	8007450 <HAL_TIM_Base_Init>
 8001ee8:	1e03      	subs	r3, r0, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001eec:	f000 fa82 	bl	80023f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8001ef0:	2118      	movs	r1, #24
 8001ef2:	187b      	adds	r3, r7, r1
 8001ef4:	2280      	movs	r2, #128	; 0x80
 8001ef6:	0192      	lsls	r2, r2, #6
 8001ef8:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001efa:	187b      	adds	r3, r7, r1
 8001efc:	2200      	movs	r2, #0
 8001efe:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001f00:	187b      	adds	r3, r7, r1
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8001f06:	187b      	adds	r3, r7, r1
 8001f08:	2200      	movs	r2, #0
 8001f0a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f0c:	187a      	adds	r2, r7, r1
 8001f0e:	4b2f      	ldr	r3, [pc, #188]	; (8001fcc <MX_TIM2_Init+0x148>)
 8001f10:	0011      	movs	r1, r2
 8001f12:	0018      	movs	r0, r3
 8001f14:	f005 fe06 	bl	8007b24 <HAL_TIM_ConfigClockSource>
 8001f18:	1e03      	subs	r3, r0, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001f1c:	f000 fa6a 	bl	80023f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f20:	4b2a      	ldr	r3, [pc, #168]	; (8001fcc <MX_TIM2_Init+0x148>)
 8001f22:	0018      	movs	r0, r3
 8001f24:	f005 fbdc 	bl	80076e0 <HAL_TIM_PWM_Init>
 8001f28:	1e03      	subs	r3, r0, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001f2c:	f000 fa62 	bl	80023f4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001f30:	4b26      	ldr	r3, [pc, #152]	; (8001fcc <MX_TIM2_Init+0x148>)
 8001f32:	0018      	movs	r0, r3
 8001f34:	f005 fafc 	bl	8007530 <HAL_TIM_OC_Init>
 8001f38:	1e03      	subs	r3, r0, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001f3c:	f000 fa5a 	bl	80023f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f40:	2110      	movs	r1, #16
 8001f42:	187b      	adds	r3, r7, r1
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f48:	187b      	adds	r3, r7, r1
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f4e:	187a      	adds	r2, r7, r1
 8001f50:	4b1e      	ldr	r3, [pc, #120]	; (8001fcc <MX_TIM2_Init+0x148>)
 8001f52:	0011      	movs	r1, r2
 8001f54:	0018      	movs	r0, r3
 8001f56:	f006 f8da 	bl	800810e <HAL_TIMEx_MasterConfigSynchronization>
 8001f5a:	1e03      	subs	r3, r0, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 8001f5e:	f000 fa49 	bl	80023f4 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim2, TIM2_ETR_LSE) != HAL_OK)
 8001f62:	4b1a      	ldr	r3, [pc, #104]	; (8001fcc <MX_TIM2_Init+0x148>)
 8001f64:	2105      	movs	r1, #5
 8001f66:	0018      	movs	r0, r3
 8001f68:	f006 f914 	bl	8008194 <HAL_TIMEx_RemapConfig>
 8001f6c:	1e03      	subs	r3, r0, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001f70:	f000 fa40 	bl	80023f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f74:	003b      	movs	r3, r7
 8001f76:	2260      	movs	r2, #96	; 0x60
 8001f78:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001f7a:	003b      	movs	r3, r7
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f80:	003b      	movs	r3, r7
 8001f82:	2200      	movs	r2, #0
 8001f84:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f86:	003b      	movs	r3, r7
 8001f88:	2200      	movs	r2, #0
 8001f8a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f8c:	0039      	movs	r1, r7
 8001f8e:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <MX_TIM2_Init+0x148>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	0018      	movs	r0, r3
 8001f94:	f005 fd0e 	bl	80079b4 <HAL_TIM_PWM_ConfigChannel>
 8001f98:	1e03      	subs	r3, r0, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8001f9c:	f000 fa2a 	bl	80023f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001fa0:	003b      	movs	r3, r7
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fa6:	0039      	movs	r1, r7
 8001fa8:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <MX_TIM2_Init+0x148>)
 8001faa:	2204      	movs	r2, #4
 8001fac:	0018      	movs	r0, r3
 8001fae:	f005 fcb3 	bl	8007918 <HAL_TIM_OC_ConfigChannel>
 8001fb2:	1e03      	subs	r3, r0, #0
 8001fb4:	d001      	beq.n	8001fba <MX_TIM2_Init+0x136>
  {
    Error_Handler();
 8001fb6:	f000 fa1d 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001fba:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <MX_TIM2_Init+0x148>)
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f001 fde7 	bl	8003b90 <HAL_TIM_MspPostInit>

}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	b00a      	add	sp, #40	; 0x28
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	20000274 	.word	0x20000274

08001fd0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd6:	003b      	movs	r3, r7
 8001fd8:	0018      	movs	r0, r3
 8001fda:	2308      	movs	r3, #8
 8001fdc:	001a      	movs	r2, r3
 8001fde:	2100      	movs	r1, #0
 8001fe0:	f006 f929 	bl	8008236 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001fe4:	4b16      	ldr	r3, [pc, #88]	; (8002040 <MX_TIM6_Init+0x70>)
 8001fe6:	4a17      	ldr	r2, [pc, #92]	; (8002044 <MX_TIM6_Init+0x74>)
 8001fe8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0x8000;
 8001fea:	4b15      	ldr	r3, [pc, #84]	; (8002040 <MX_TIM6_Init+0x70>)
 8001fec:	2280      	movs	r2, #128	; 0x80
 8001fee:	0212      	lsls	r2, r2, #8
 8001ff0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff2:	4b13      	ldr	r3, [pc, #76]	; (8002040 <MX_TIM6_Init+0x70>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 30720;
 8001ff8:	4b11      	ldr	r3, [pc, #68]	; (8002040 <MX_TIM6_Init+0x70>)
 8001ffa:	22f0      	movs	r2, #240	; 0xf0
 8001ffc:	01d2      	lsls	r2, r2, #7
 8001ffe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002000:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <MX_TIM6_Init+0x70>)
 8002002:	2200      	movs	r2, #0
 8002004:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002006:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <MX_TIM6_Init+0x70>)
 8002008:	0018      	movs	r0, r3
 800200a:	f005 fa21 	bl	8007450 <HAL_TIM_Base_Init>
 800200e:	1e03      	subs	r3, r0, #0
 8002010:	d001      	beq.n	8002016 <MX_TIM6_Init+0x46>
  {
    Error_Handler();
 8002012:	f000 f9ef 	bl	80023f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002016:	003b      	movs	r3, r7
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800201c:	003b      	movs	r3, r7
 800201e:	2200      	movs	r2, #0
 8002020:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002022:	003a      	movs	r2, r7
 8002024:	4b06      	ldr	r3, [pc, #24]	; (8002040 <MX_TIM6_Init+0x70>)
 8002026:	0011      	movs	r1, r2
 8002028:	0018      	movs	r0, r3
 800202a:	f006 f870 	bl	800810e <HAL_TIMEx_MasterConfigSynchronization>
 800202e:	1e03      	subs	r3, r0, #0
 8002030:	d001      	beq.n	8002036 <MX_TIM6_Init+0x66>
  {
    Error_Handler();
 8002032:	f000 f9df 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	46bd      	mov	sp, r7
 800203a:	b002      	add	sp, #8
 800203c:	bd80      	pop	{r7, pc}
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	2000013c 	.word	0x2000013c
 8002044:	40001000 	.word	0x40001000

08002048 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08a      	sub	sp, #40	; 0x28
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800204e:	2318      	movs	r3, #24
 8002050:	18fb      	adds	r3, r7, r3
 8002052:	0018      	movs	r0, r3
 8002054:	2310      	movs	r3, #16
 8002056:	001a      	movs	r2, r3
 8002058:	2100      	movs	r1, #0
 800205a:	f006 f8ec 	bl	8008236 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800205e:	2310      	movs	r3, #16
 8002060:	18fb      	adds	r3, r7, r3
 8002062:	0018      	movs	r0, r3
 8002064:	2308      	movs	r3, #8
 8002066:	001a      	movs	r2, r3
 8002068:	2100      	movs	r1, #0
 800206a:	f006 f8e4 	bl	8008236 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800206e:	003b      	movs	r3, r7
 8002070:	0018      	movs	r0, r3
 8002072:	2310      	movs	r3, #16
 8002074:	001a      	movs	r2, r3
 8002076:	2100      	movs	r1, #0
 8002078:	f006 f8dd 	bl	8008236 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 800207c:	4b3c      	ldr	r3, [pc, #240]	; (8002170 <MX_TIM21_Init+0x128>)
 800207e:	4a3d      	ldr	r2, [pc, #244]	; (8002174 <MX_TIM21_Init+0x12c>)
 8002080:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 8002082:	4b3b      	ldr	r3, [pc, #236]	; (8002170 <MX_TIM21_Init+0x128>)
 8002084:	2200      	movs	r2, #0
 8002086:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002088:	4b39      	ldr	r3, [pc, #228]	; (8002170 <MX_TIM21_Init+0x128>)
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 0x8000;
 800208e:	4b38      	ldr	r3, [pc, #224]	; (8002170 <MX_TIM21_Init+0x128>)
 8002090:	2280      	movs	r2, #128	; 0x80
 8002092:	0212      	lsls	r2, r2, #8
 8002094:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002096:	4b36      	ldr	r3, [pc, #216]	; (8002170 <MX_TIM21_Init+0x128>)
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800209c:	4b34      	ldr	r3, [pc, #208]	; (8002170 <MX_TIM21_Init+0x128>)
 800209e:	2200      	movs	r2, #0
 80020a0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 80020a2:	4b33      	ldr	r3, [pc, #204]	; (8002170 <MX_TIM21_Init+0x128>)
 80020a4:	0018      	movs	r0, r3
 80020a6:	f005 f9d3 	bl	8007450 <HAL_TIM_Base_Init>
 80020aa:	1e03      	subs	r3, r0, #0
 80020ac:	d001      	beq.n	80020b2 <MX_TIM21_Init+0x6a>
  {
    Error_Handler();
 80020ae:	f000 f9a1 	bl	80023f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80020b2:	2118      	movs	r1, #24
 80020b4:	187b      	adds	r3, r7, r1
 80020b6:	2280      	movs	r2, #128	; 0x80
 80020b8:	0192      	lsls	r2, r2, #6
 80020ba:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80020bc:	187b      	adds	r3, r7, r1
 80020be:	2200      	movs	r2, #0
 80020c0:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80020c2:	187b      	adds	r3, r7, r1
 80020c4:	2200      	movs	r2, #0
 80020c6:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 80020c8:	187b      	adds	r3, r7, r1
 80020ca:	2200      	movs	r2, #0
 80020cc:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80020ce:	187a      	adds	r2, r7, r1
 80020d0:	4b27      	ldr	r3, [pc, #156]	; (8002170 <MX_TIM21_Init+0x128>)
 80020d2:	0011      	movs	r1, r2
 80020d4:	0018      	movs	r0, r3
 80020d6:	f005 fd25 	bl	8007b24 <HAL_TIM_ConfigClockSource>
 80020da:	1e03      	subs	r3, r0, #0
 80020dc:	d001      	beq.n	80020e2 <MX_TIM21_Init+0x9a>
  {
    Error_Handler();
 80020de:	f000 f989 	bl	80023f4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 80020e2:	4b23      	ldr	r3, [pc, #140]	; (8002170 <MX_TIM21_Init+0x128>)
 80020e4:	0018      	movs	r0, r3
 80020e6:	f005 fa23 	bl	8007530 <HAL_TIM_OC_Init>
 80020ea:	1e03      	subs	r3, r0, #0
 80020ec:	d001      	beq.n	80020f2 <MX_TIM21_Init+0xaa>
  {
    Error_Handler();
 80020ee:	f000 f981 	bl	80023f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020f2:	2110      	movs	r1, #16
 80020f4:	187b      	adds	r3, r7, r1
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020fa:	187b      	adds	r3, r7, r1
 80020fc:	2200      	movs	r2, #0
 80020fe:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8002100:	187a      	adds	r2, r7, r1
 8002102:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <MX_TIM21_Init+0x128>)
 8002104:	0011      	movs	r1, r2
 8002106:	0018      	movs	r0, r3
 8002108:	f006 f801 	bl	800810e <HAL_TIMEx_MasterConfigSynchronization>
 800210c:	1e03      	subs	r3, r0, #0
 800210e:	d001      	beq.n	8002114 <MX_TIM21_Init+0xcc>
  {
    Error_Handler();
 8002110:	f000 f970 	bl	80023f4 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim21, TIM21_ETR_LSE) != HAL_OK)
 8002114:	4b16      	ldr	r3, [pc, #88]	; (8002170 <MX_TIM21_Init+0x128>)
 8002116:	2103      	movs	r1, #3
 8002118:	0018      	movs	r0, r3
 800211a:	f006 f83b 	bl	8008194 <HAL_TIMEx_RemapConfig>
 800211e:	1e03      	subs	r3, r0, #0
 8002120:	d001      	beq.n	8002126 <MX_TIM21_Init+0xde>
  {
    Error_Handler();
 8002122:	f000 f967 	bl	80023f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002126:	003b      	movs	r3, r7
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800212c:	003b      	movs	r3, r7
 800212e:	2200      	movs	r2, #0
 8002130:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002132:	003b      	movs	r3, r7
 8002134:	2200      	movs	r2, #0
 8002136:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002138:	003b      	movs	r3, r7
 800213a:	2200      	movs	r2, #0
 800213c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800213e:	0039      	movs	r1, r7
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <MX_TIM21_Init+0x128>)
 8002142:	2200      	movs	r2, #0
 8002144:	0018      	movs	r0, r3
 8002146:	f005 fbe7 	bl	8007918 <HAL_TIM_OC_ConfigChannel>
 800214a:	1e03      	subs	r3, r0, #0
 800214c:	d001      	beq.n	8002152 <MX_TIM21_Init+0x10a>
  {
    Error_Handler();
 800214e:	f000 f951 	bl	80023f4 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002152:	0039      	movs	r1, r7
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <MX_TIM21_Init+0x128>)
 8002156:	2204      	movs	r2, #4
 8002158:	0018      	movs	r0, r3
 800215a:	f005 fbdd 	bl	8007918 <HAL_TIM_OC_ConfigChannel>
 800215e:	1e03      	subs	r3, r0, #0
 8002160:	d001      	beq.n	8002166 <MX_TIM21_Init+0x11e>
  {
    Error_Handler();
 8002162:	f000 f947 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	46bd      	mov	sp, r7
 800216a:	b00a      	add	sp, #40	; 0x28
 800216c:	bd80      	pop	{r7, pc}
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	20000354 	.word	0x20000354
 8002174:	40010800 	.word	0x40010800

08002178 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b08a      	sub	sp, #40	; 0x28
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800217e:	2318      	movs	r3, #24
 8002180:	18fb      	adds	r3, r7, r3
 8002182:	0018      	movs	r0, r3
 8002184:	2310      	movs	r3, #16
 8002186:	001a      	movs	r2, r3
 8002188:	2100      	movs	r1, #0
 800218a:	f006 f854 	bl	8008236 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800218e:	2310      	movs	r3, #16
 8002190:	18fb      	adds	r3, r7, r3
 8002192:	0018      	movs	r0, r3
 8002194:	2308      	movs	r3, #8
 8002196:	001a      	movs	r2, r3
 8002198:	2100      	movs	r1, #0
 800219a:	f006 f84c 	bl	8008236 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800219e:	003b      	movs	r3, r7
 80021a0:	0018      	movs	r0, r3
 80021a2:	2310      	movs	r3, #16
 80021a4:	001a      	movs	r2, r3
 80021a6:	2100      	movs	r1, #0
 80021a8:	f006 f845 	bl	8008236 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 80021ac:	4b37      	ldr	r3, [pc, #220]	; (800228c <MX_TIM22_Init+0x114>)
 80021ae:	4a38      	ldr	r2, [pc, #224]	; (8002290 <MX_TIM22_Init+0x118>)
 80021b0:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0x400;
 80021b2:	4b36      	ldr	r3, [pc, #216]	; (800228c <MX_TIM22_Init+0x114>)
 80021b4:	2280      	movs	r2, #128	; 0x80
 80021b6:	00d2      	lsls	r2, r2, #3
 80021b8:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ba:	4b34      	ldr	r3, [pc, #208]	; (800228c <MX_TIM22_Init+0x114>)
 80021bc:	2200      	movs	r2, #0
 80021be:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 1920;
 80021c0:	4b32      	ldr	r3, [pc, #200]	; (800228c <MX_TIM22_Init+0x114>)
 80021c2:	22f0      	movs	r2, #240	; 0xf0
 80021c4:	00d2      	lsls	r2, r2, #3
 80021c6:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c8:	4b30      	ldr	r3, [pc, #192]	; (800228c <MX_TIM22_Init+0x114>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ce:	4b2f      	ldr	r3, [pc, #188]	; (800228c <MX_TIM22_Init+0x114>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 80021d4:	4b2d      	ldr	r3, [pc, #180]	; (800228c <MX_TIM22_Init+0x114>)
 80021d6:	0018      	movs	r0, r3
 80021d8:	f005 f93a 	bl	8007450 <HAL_TIM_Base_Init>
 80021dc:	1e03      	subs	r3, r0, #0
 80021de:	d001      	beq.n	80021e4 <MX_TIM22_Init+0x6c>
  {
    Error_Handler();
 80021e0:	f000 f908 	bl	80023f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80021e4:	2118      	movs	r1, #24
 80021e6:	187b      	adds	r3, r7, r1
 80021e8:	2280      	movs	r2, #128	; 0x80
 80021ea:	0192      	lsls	r2, r2, #6
 80021ec:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80021ee:	187b      	adds	r3, r7, r1
 80021f0:	2200      	movs	r2, #0
 80021f2:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80021f4:	187b      	adds	r3, r7, r1
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 80021fa:	187b      	adds	r3, r7, r1
 80021fc:	2200      	movs	r2, #0
 80021fe:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 8002200:	187a      	adds	r2, r7, r1
 8002202:	4b22      	ldr	r3, [pc, #136]	; (800228c <MX_TIM22_Init+0x114>)
 8002204:	0011      	movs	r1, r2
 8002206:	0018      	movs	r0, r3
 8002208:	f005 fc8c 	bl	8007b24 <HAL_TIM_ConfigClockSource>
 800220c:	1e03      	subs	r3, r0, #0
 800220e:	d001      	beq.n	8002214 <MX_TIM22_Init+0x9c>
  {
    Error_Handler();
 8002210:	f000 f8f0 	bl	80023f4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim22) != HAL_OK)
 8002214:	4b1d      	ldr	r3, [pc, #116]	; (800228c <MX_TIM22_Init+0x114>)
 8002216:	0018      	movs	r0, r3
 8002218:	f005 f98a 	bl	8007530 <HAL_TIM_OC_Init>
 800221c:	1e03      	subs	r3, r0, #0
 800221e:	d001      	beq.n	8002224 <MX_TIM22_Init+0xac>
  {
    Error_Handler();
 8002220:	f000 f8e8 	bl	80023f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002224:	2110      	movs	r1, #16
 8002226:	187b      	adds	r3, r7, r1
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800222c:	187b      	adds	r3, r7, r1
 800222e:	2200      	movs	r2, #0
 8002230:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8002232:	187a      	adds	r2, r7, r1
 8002234:	4b15      	ldr	r3, [pc, #84]	; (800228c <MX_TIM22_Init+0x114>)
 8002236:	0011      	movs	r1, r2
 8002238:	0018      	movs	r0, r3
 800223a:	f005 ff68 	bl	800810e <HAL_TIMEx_MasterConfigSynchronization>
 800223e:	1e03      	subs	r3, r0, #0
 8002240:	d001      	beq.n	8002246 <MX_TIM22_Init+0xce>
  {
    Error_Handler();
 8002242:	f000 f8d7 	bl	80023f4 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim22, TIM22_ETR_LSE) != HAL_OK)
 8002246:	4b11      	ldr	r3, [pc, #68]	; (800228c <MX_TIM22_Init+0x114>)
 8002248:	2103      	movs	r1, #3
 800224a:	0018      	movs	r0, r3
 800224c:	f005 ffa2 	bl	8008194 <HAL_TIMEx_RemapConfig>
 8002250:	1e03      	subs	r3, r0, #0
 8002252:	d001      	beq.n	8002258 <MX_TIM22_Init+0xe0>
  {
    Error_Handler();
 8002254:	f000 f8ce 	bl	80023f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002258:	003b      	movs	r3, r7
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800225e:	003b      	movs	r3, r7
 8002260:	2200      	movs	r2, #0
 8002262:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002264:	003b      	movs	r3, r7
 8002266:	2200      	movs	r2, #0
 8002268:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800226a:	003b      	movs	r3, r7
 800226c:	2200      	movs	r2, #0
 800226e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002270:	0039      	movs	r1, r7
 8002272:	4b06      	ldr	r3, [pc, #24]	; (800228c <MX_TIM22_Init+0x114>)
 8002274:	2200      	movs	r2, #0
 8002276:	0018      	movs	r0, r3
 8002278:	f005 fb4e 	bl	8007918 <HAL_TIM_OC_ConfigChannel>
 800227c:	1e03      	subs	r3, r0, #0
 800227e:	d001      	beq.n	8002284 <MX_TIM22_Init+0x10c>
  {
    Error_Handler();
 8002280:	f000 f8b8 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */

}
 8002284:	46c0      	nop			; (mov r8, r8)
 8002286:	46bd      	mov	sp, r7
 8002288:	b00a      	add	sp, #40	; 0x28
 800228a:	bd80      	pop	{r7, pc}
 800228c:	2000018c 	.word	0x2000018c
 8002290:	40011400 	.word	0x40011400

08002294 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800229a:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <MX_DMA_Init+0x38>)
 800229c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800229e:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <MX_DMA_Init+0x38>)
 80022a0:	2101      	movs	r1, #1
 80022a2:	430a      	orrs	r2, r1
 80022a4:	631a      	str	r2, [r3, #48]	; 0x30
 80022a6:	4b09      	ldr	r3, [pc, #36]	; (80022cc <MX_DMA_Init+0x38>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	2201      	movs	r2, #1
 80022ac:	4013      	ands	r3, r2
 80022ae:	607b      	str	r3, [r7, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80022b2:	2200      	movs	r2, #0
 80022b4:	2100      	movs	r1, #0
 80022b6:	200a      	movs	r0, #10
 80022b8:	f002 fa78 	bl	80047ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80022bc:	200a      	movs	r0, #10
 80022be:	f002 fa8a 	bl	80047d6 <HAL_NVIC_EnableIRQ>

}
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	46bd      	mov	sp, r7
 80022c6:	b002      	add	sp, #8
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	40021000 	.word	0x40021000

080022d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022d0:	b590      	push	{r4, r7, lr}
 80022d2:	b089      	sub	sp, #36	; 0x24
 80022d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d6:	240c      	movs	r4, #12
 80022d8:	193b      	adds	r3, r7, r4
 80022da:	0018      	movs	r0, r3
 80022dc:	2314      	movs	r3, #20
 80022de:	001a      	movs	r2, r3
 80022e0:	2100      	movs	r1, #0
 80022e2:	f005 ffa8 	bl	8008236 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022e6:	4b3e      	ldr	r3, [pc, #248]	; (80023e0 <MX_GPIO_Init+0x110>)
 80022e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ea:	4b3d      	ldr	r3, [pc, #244]	; (80023e0 <MX_GPIO_Init+0x110>)
 80022ec:	2104      	movs	r1, #4
 80022ee:	430a      	orrs	r2, r1
 80022f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80022f2:	4b3b      	ldr	r3, [pc, #236]	; (80023e0 <MX_GPIO_Init+0x110>)
 80022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f6:	2204      	movs	r2, #4
 80022f8:	4013      	ands	r3, r2
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fe:	4b38      	ldr	r3, [pc, #224]	; (80023e0 <MX_GPIO_Init+0x110>)
 8002300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002302:	4b37      	ldr	r3, [pc, #220]	; (80023e0 <MX_GPIO_Init+0x110>)
 8002304:	2101      	movs	r1, #1
 8002306:	430a      	orrs	r2, r1
 8002308:	62da      	str	r2, [r3, #44]	; 0x2c
 800230a:	4b35      	ldr	r3, [pc, #212]	; (80023e0 <MX_GPIO_Init+0x110>)
 800230c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230e:	2201      	movs	r2, #1
 8002310:	4013      	ands	r3, r2
 8002312:	607b      	str	r3, [r7, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002316:	4b32      	ldr	r3, [pc, #200]	; (80023e0 <MX_GPIO_Init+0x110>)
 8002318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800231a:	4b31      	ldr	r3, [pc, #196]	; (80023e0 <MX_GPIO_Init+0x110>)
 800231c:	2102      	movs	r1, #2
 800231e:	430a      	orrs	r2, r1
 8002320:	62da      	str	r2, [r3, #44]	; 0x2c
 8002322:	4b2f      	ldr	r3, [pc, #188]	; (80023e0 <MX_GPIO_Init+0x110>)
 8002324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002326:	2202      	movs	r2, #2
 8002328:	4013      	ands	r3, r2
 800232a:	603b      	str	r3, [r7, #0]
 800232c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_7, GPIO_PIN_RESET);
 800232e:	4b2d      	ldr	r3, [pc, #180]	; (80023e4 <MX_GPIO_Init+0x114>)
 8002330:	2200      	movs	r2, #0
 8002332:	218b      	movs	r1, #139	; 0x8b
 8002334:	0018      	movs	r0, r3
 8002336:	f002 fd94 	bl	8004e62 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_6, GPIO_PIN_RESET);
 800233a:	4b2b      	ldr	r3, [pc, #172]	; (80023e8 <MX_GPIO_Init+0x118>)
 800233c:	2200      	movs	r2, #0
 800233e:	2142      	movs	r1, #66	; 0x42
 8002340:	0018      	movs	r0, r3
 8002342:	f002 fd8e 	bl	8004e62 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC3 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_7;
 8002346:	0021      	movs	r1, r4
 8002348:	187b      	adds	r3, r7, r1
 800234a:	228b      	movs	r2, #139	; 0x8b
 800234c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234e:	187b      	adds	r3, r7, r1
 8002350:	2201      	movs	r2, #1
 8002352:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	187b      	adds	r3, r7, r1
 8002356:	2200      	movs	r2, #0
 8002358:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235a:	187b      	adds	r3, r7, r1
 800235c:	2200      	movs	r2, #0
 800235e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002360:	000c      	movs	r4, r1
 8002362:	187b      	adds	r3, r7, r1
 8002364:	4a1f      	ldr	r2, [pc, #124]	; (80023e4 <MX_GPIO_Init+0x114>)
 8002366:	0019      	movs	r1, r3
 8002368:	0010      	movs	r0, r2
 800236a:	f002 fbdf 	bl	8004b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 800236e:	0021      	movs	r1, r4
 8002370:	187b      	adds	r3, r7, r1
 8002372:	2242      	movs	r2, #66	; 0x42
 8002374:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002376:	187b      	adds	r3, r7, r1
 8002378:	2201      	movs	r2, #1
 800237a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	187b      	adds	r3, r7, r1
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002382:	187b      	adds	r3, r7, r1
 8002384:	2200      	movs	r2, #0
 8002386:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002388:	000c      	movs	r4, r1
 800238a:	187b      	adds	r3, r7, r1
 800238c:	4a16      	ldr	r2, [pc, #88]	; (80023e8 <MX_GPIO_Init+0x118>)
 800238e:	0019      	movs	r1, r3
 8002390:	0010      	movs	r0, r2
 8002392:	f002 fbcb 	bl	8004b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002396:	0021      	movs	r1, r4
 8002398:	187b      	adds	r3, r7, r1
 800239a:	4a14      	ldr	r2, [pc, #80]	; (80023ec <MX_GPIO_Init+0x11c>)
 800239c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800239e:	187b      	adds	r3, r7, r1
 80023a0:	4a13      	ldr	r2, [pc, #76]	; (80023f0 <MX_GPIO_Init+0x120>)
 80023a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023a4:	187b      	adds	r3, r7, r1
 80023a6:	2202      	movs	r2, #2
 80023a8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023aa:	187b      	adds	r3, r7, r1
 80023ac:	4a0e      	ldr	r2, [pc, #56]	; (80023e8 <MX_GPIO_Init+0x118>)
 80023ae:	0019      	movs	r1, r3
 80023b0:	0010      	movs	r0, r2
 80023b2:	f002 fbbb 	bl	8004b2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80023b6:	2200      	movs	r2, #0
 80023b8:	2100      	movs	r1, #0
 80023ba:	2006      	movs	r0, #6
 80023bc:	f002 f9f6 	bl	80047ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80023c0:	2006      	movs	r0, #6
 80023c2:	f002 fa08 	bl	80047d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80023c6:	2200      	movs	r2, #0
 80023c8:	2100      	movs	r1, #0
 80023ca:	2007      	movs	r0, #7
 80023cc:	f002 f9ee 	bl	80047ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80023d0:	2007      	movs	r0, #7
 80023d2:	f002 fa00 	bl	80047d6 <HAL_NVIC_EnableIRQ>

}
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	46bd      	mov	sp, r7
 80023da:	b009      	add	sp, #36	; 0x24
 80023dc:	bd90      	pop	{r4, r7, pc}
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	40021000 	.word	0x40021000
 80023e4:	50000800 	.word	0x50000800
 80023e8:	50000400 	.word	0x50000400
 80023ec:	0000e004 	.word	0x0000e004
 80023f0:	10110000 	.word	0x10110000

080023f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80023f8:	46c0      	nop			; (mov r8, r8)
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <HAL_GPIO_EXTI_Callback>:
	"Nov",
	"Dec"
};

// button interrupt(s)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	0002      	movs	r2, r0
 8002408:	1dbb      	adds	r3, r7, #6
 800240a:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == BUTTON1) buttons.is1Pressed = 1;
 800240c:	1dbb      	adds	r3, r7, #6
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	2b04      	cmp	r3, #4
 8002412:	d102      	bne.n	800241a <HAL_GPIO_EXTI_Callback+0x1a>
 8002414:	4b15      	ldr	r3, [pc, #84]	; (800246c <HAL_GPIO_EXTI_Callback+0x6c>)
 8002416:	2201      	movs	r2, #1
 8002418:	701a      	strb	r2, [r3, #0]
	if (GPIO_Pin == BUTTON2) buttons.is2Pressed = 1;
 800241a:	1dbb      	adds	r3, r7, #6
 800241c:	881a      	ldrh	r2, [r3, #0]
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	019b      	lsls	r3, r3, #6
 8002422:	429a      	cmp	r2, r3
 8002424:	d102      	bne.n	800242c <HAL_GPIO_EXTI_Callback+0x2c>
 8002426:	4b11      	ldr	r3, [pc, #68]	; (800246c <HAL_GPIO_EXTI_Callback+0x6c>)
 8002428:	2201      	movs	r2, #1
 800242a:	705a      	strb	r2, [r3, #1]
	if (GPIO_Pin == BUTTON3) buttons.is3Pressed = 1;
 800242c:	1dbb      	adds	r3, r7, #6
 800242e:	881a      	ldrh	r2, [r3, #0]
 8002430:	2380      	movs	r3, #128	; 0x80
 8002432:	01db      	lsls	r3, r3, #7
 8002434:	429a      	cmp	r2, r3
 8002436:	d102      	bne.n	800243e <HAL_GPIO_EXTI_Callback+0x3e>
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <HAL_GPIO_EXTI_Callback+0x6c>)
 800243a:	2201      	movs	r2, #1
 800243c:	709a      	strb	r2, [r3, #2]
	if (GPIO_Pin == BUTTON4) buttons.is4Pressed = 1;
 800243e:	1dbb      	adds	r3, r7, #6
 8002440:	881a      	ldrh	r2, [r3, #0]
 8002442:	2380      	movs	r3, #128	; 0x80
 8002444:	021b      	lsls	r3, r3, #8
 8002446:	429a      	cmp	r2, r3
 8002448:	d102      	bne.n	8002450 <HAL_GPIO_EXTI_Callback+0x50>
 800244a:	4b08      	ldr	r3, [pc, #32]	; (800246c <HAL_GPIO_EXTI_Callback+0x6c>)
 800244c:	2201      	movs	r2, #1
 800244e:	70da      	strb	r2, [r3, #3]

	HAL_NVIC_DisableIRQ(EXTI2_3_IRQn);
 8002450:	2006      	movs	r0, #6
 8002452:	f002 f9d0 	bl	80047f6 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 8002456:	2007      	movs	r0, #7
 8002458:	f002 f9cd 	bl	80047f6 <HAL_NVIC_DisableIRQ>
	HAL_TIM_Base_Start_IT(&htim6);
 800245c:	4b04      	ldr	r3, [pc, #16]	; (8002470 <HAL_GPIO_EXTI_Callback+0x70>)
 800245e:	0018      	movs	r0, r3
 8002460:	f005 f822 	bl	80074a8 <HAL_TIM_Base_Start_IT>
}
 8002464:	46c0      	nop			; (mov r8, r8)
 8002466:	46bd      	mov	sp, r7
 8002468:	b002      	add	sp, #8
 800246a:	bd80      	pop	{r7, pc}
 800246c:	20000178 	.word	0x20000178
 8002470:	2000013c 	.word	0x2000013c

08002474 <updateWithButtons>:

void updateWithButtons(RTC_HandleTypeDef *hrtc, TIM_HandleTypeDef *timerStopwatchTim, TIM_HandleTypeDef *motorBacklightTim) {
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
	/* program flow:
	 *   check current face used
	 *   check current variables and check button pressed
	 */
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);		// should run for any button
 8002480:	4b31      	ldr	r3, [pc, #196]	; (8002548 <updateWithButtons+0xd4>)
 8002482:	2108      	movs	r1, #8
 8002484:	0018      	movs	r0, r3
 8002486:	f002 fd09 	bl	8004e9c <HAL_GPIO_TogglePin>

	// button 1 changes the face on screen.
	if (buttons.is1Pressed) {
 800248a:	4b30      	ldr	r3, [pc, #192]	; (800254c <updateWithButtons+0xd8>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	d030      	beq.n	80024f6 <updateWithButtons+0x82>
		buttons.is1Pressed = 0;
 8002494:	4b2d      	ldr	r3, [pc, #180]	; (800254c <updateWithButtons+0xd8>)
 8002496:	2200      	movs	r2, #0
 8002498:	701a      	strb	r2, [r3, #0]
		faceOnDisplay = (faceOnDisplay + 1) % NUM_FACES;
 800249a:	4b2d      	ldr	r3, [pc, #180]	; (8002550 <updateWithButtons+0xdc>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	3301      	adds	r3, #1
 80024a0:	4a2c      	ldr	r2, [pc, #176]	; (8002554 <updateWithButtons+0xe0>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	d504      	bpl.n	80024b0 <updateWithButtons+0x3c>
 80024a6:	3b01      	subs	r3, #1
 80024a8:	2204      	movs	r2, #4
 80024aa:	4252      	negs	r2, r2
 80024ac:	4313      	orrs	r3, r2
 80024ae:	3301      	adds	r3, #1
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	4b27      	ldr	r3, [pc, #156]	; (8002550 <updateWithButtons+0xdc>)
 80024b4:	701a      	strb	r2, [r3, #0]
		isFaceBeingChanged = 1;
 80024b6:	4b28      	ldr	r3, [pc, #160]	; (8002558 <updateWithButtons+0xe4>)
 80024b8:	2201      	movs	r2, #1
 80024ba:	701a      	strb	r2, [r3, #0]
		switch (faceOnDisplay) {
 80024bc:	4b24      	ldr	r3, [pc, #144]	; (8002550 <updateWithButtons+0xdc>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d00c      	beq.n	80024de <updateWithButtons+0x6a>
 80024c4:	dc02      	bgt.n	80024cc <updateWithButtons+0x58>
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d005      	beq.n	80024d6 <updateWithButtons+0x62>
			case faceClock: updateFace.clock = 1; break;
			case faceTimer: updateFace.timer = 1; break;
			case faceAlarm: updateFace.alarm = 1; break;
			case faceStopwatch: updateFace.stopwatch = 1; break;
			default: break;
 80024ca:	e015      	b.n	80024f8 <updateWithButtons+0x84>
		switch (faceOnDisplay) {
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d00a      	beq.n	80024e6 <updateWithButtons+0x72>
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d00c      	beq.n	80024ee <updateWithButtons+0x7a>
			default: break;
 80024d4:	e010      	b.n	80024f8 <updateWithButtons+0x84>
			case faceClock: updateFace.clock = 1; break;
 80024d6:	4b21      	ldr	r3, [pc, #132]	; (800255c <updateWithButtons+0xe8>)
 80024d8:	2201      	movs	r2, #1
 80024da:	701a      	strb	r2, [r3, #0]
 80024dc:	e00c      	b.n	80024f8 <updateWithButtons+0x84>
			case faceTimer: updateFace.timer = 1; break;
 80024de:	4b1f      	ldr	r3, [pc, #124]	; (800255c <updateWithButtons+0xe8>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	705a      	strb	r2, [r3, #1]
 80024e4:	e008      	b.n	80024f8 <updateWithButtons+0x84>
			case faceAlarm: updateFace.alarm = 1; break;
 80024e6:	4b1d      	ldr	r3, [pc, #116]	; (800255c <updateWithButtons+0xe8>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	709a      	strb	r2, [r3, #2]
 80024ec:	e004      	b.n	80024f8 <updateWithButtons+0x84>
			case faceStopwatch: updateFace.stopwatch = 1; break;
 80024ee:	4b1b      	ldr	r3, [pc, #108]	; (800255c <updateWithButtons+0xe8>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	70da      	strb	r2, [r3, #3]
 80024f4:	e000      	b.n	80024f8 <updateWithButtons+0x84>
		}
	}
 80024f6:	46c0      	nop			; (mov r8, r8)

	if (faceOnDisplay == faceClock) updateClockState(hrtc);
 80024f8:	4b15      	ldr	r3, [pc, #84]	; (8002550 <updateWithButtons+0xdc>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d104      	bne.n	800250a <updateWithButtons+0x96>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	0018      	movs	r0, r3
 8002504:	f000 f82c 	bl	8002560 <updateClockState>
	else if (faceOnDisplay == faceTimer) updateTimerState(timerStopwatchTim);
	else if (faceOnDisplay == faceAlarm) updateAlarmState(hrtc);
	else if (faceOnDisplay == faceStopwatch) updateStopwatchState(timerStopwatchTim);
}
 8002508:	e019      	b.n	800253e <updateWithButtons+0xca>
	else if (faceOnDisplay == faceTimer) updateTimerState(timerStopwatchTim);
 800250a:	4b11      	ldr	r3, [pc, #68]	; (8002550 <updateWithButtons+0xdc>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d104      	bne.n	800251c <updateWithButtons+0xa8>
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	0018      	movs	r0, r3
 8002516:	f000 f943 	bl	80027a0 <updateTimerState>
}
 800251a:	e010      	b.n	800253e <updateWithButtons+0xca>
	else if (faceOnDisplay == faceAlarm) updateAlarmState(hrtc);
 800251c:	4b0c      	ldr	r3, [pc, #48]	; (8002550 <updateWithButtons+0xdc>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b02      	cmp	r3, #2
 8002522:	d104      	bne.n	800252e <updateWithButtons+0xba>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	0018      	movs	r0, r3
 8002528:	f000 fa5e 	bl	80029e8 <updateAlarmState>
}
 800252c:	e007      	b.n	800253e <updateWithButtons+0xca>
	else if (faceOnDisplay == faceStopwatch) updateStopwatchState(timerStopwatchTim);
 800252e:	4b08      	ldr	r3, [pc, #32]	; (8002550 <updateWithButtons+0xdc>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b03      	cmp	r3, #3
 8002534:	d103      	bne.n	800253e <updateWithButtons+0xca>
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	0018      	movs	r0, r3
 800253a:	f000 fb79 	bl	8002c30 <updateStopwatchState>
}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	46bd      	mov	sp, r7
 8002542:	b004      	add	sp, #16
 8002544:	bd80      	pop	{r7, pc}
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	50000800 	.word	0x50000800
 800254c:	20000178 	.word	0x20000178
 8002550:	20000105 	.word	0x20000105
 8002554:	80000003 	.word	0x80000003
 8002558:	20000104 	.word	0x20000104
 800255c:	2000012c 	.word	0x2000012c

08002560 <updateClockState>:
 *     the clock is updated and we revert back to default mode.
 *
 * notes:
 *   make date setting more robust (invalidate date entries when that day of month doesn't exist or just change modulo)
 */
void updateClockState(RTC_HandleTypeDef *hrtc) {
 8002560:	b590      	push	{r4, r7, lr}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
	// change fields up, do nothing if not setting clock
	if (buttons.is2Pressed && clockVars.isBeingSet) {
 8002568:	4b88      	ldr	r3, [pc, #544]	; (800278c <updateClockState+0x22c>)
 800256a:	785b      	ldrb	r3, [r3, #1]
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d061      	beq.n	8002636 <updateClockState+0xd6>
 8002572:	4b87      	ldr	r3, [pc, #540]	; (8002790 <updateClockState+0x230>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d05d      	beq.n	8002636 <updateClockState+0xd6>
		buttons.is2Pressed = 0;
 800257a:	4b84      	ldr	r3, [pc, #528]	; (800278c <updateClockState+0x22c>)
 800257c:	2200      	movs	r2, #0
 800257e:	705a      	strb	r2, [r3, #1]
		updateFace.clock = 1;
 8002580:	4b84      	ldr	r3, [pc, #528]	; (8002794 <updateClockState+0x234>)
 8002582:	2201      	movs	r2, #1
 8002584:	701a      	strb	r2, [r3, #0]
		switch (clockVars.fieldBeingSet) {
 8002586:	4b82      	ldr	r3, [pc, #520]	; (8002790 <updateClockState+0x230>)
 8002588:	785b      	ldrb	r3, [r3, #1]
 800258a:	2b05      	cmp	r3, #5
 800258c:	d855      	bhi.n	800263a <updateClockState+0xda>
 800258e:	009a      	lsls	r2, r3, #2
 8002590:	4b81      	ldr	r3, [pc, #516]	; (8002798 <updateClockState+0x238>)
 8002592:	18d3      	adds	r3, r2, r3
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	469f      	mov	pc, r3
			case 1: clockVars.timeToSet->min = (clockVars.timeToSet->min+1) % 60; break;
 8002598:	4b7d      	ldr	r3, [pc, #500]	; (8002790 <updateClockState+0x230>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	785b      	ldrb	r3, [r3, #1]
 800259e:	3301      	adds	r3, #1
 80025a0:	213c      	movs	r1, #60	; 0x3c
 80025a2:	0018      	movs	r0, r3
 80025a4:	f7fd ff28 	bl	80003f8 <__aeabi_idivmod>
 80025a8:	000b      	movs	r3, r1
 80025aa:	001a      	movs	r2, r3
 80025ac:	4b78      	ldr	r3, [pc, #480]	; (8002790 <updateClockState+0x230>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	705a      	strb	r2, [r3, #1]
 80025b4:	e042      	b.n	800263c <updateClockState+0xdc>
			case 2: clockVars.timeToSet->hr = (clockVars.timeToSet->hr+1) % 24; break;
 80025b6:	4b76      	ldr	r3, [pc, #472]	; (8002790 <updateClockState+0x230>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	3301      	adds	r3, #1
 80025be:	2118      	movs	r1, #24
 80025c0:	0018      	movs	r0, r3
 80025c2:	f7fd ff19 	bl	80003f8 <__aeabi_idivmod>
 80025c6:	000b      	movs	r3, r1
 80025c8:	001a      	movs	r2, r3
 80025ca:	4b71      	ldr	r3, [pc, #452]	; (8002790 <updateClockState+0x230>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	701a      	strb	r2, [r3, #0]
 80025d2:	e033      	b.n	800263c <updateClockState+0xdc>
			case 3: clockVars.dateToSet->yr++; break;		// supposed to be between large numbers. no need for bounds checking
 80025d4:	4b6e      	ldr	r3, [pc, #440]	; (8002790 <updateClockState+0x230>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	881a      	ldrh	r2, [r3, #0]
 80025da:	3201      	adds	r2, #1
 80025dc:	b292      	uxth	r2, r2
 80025de:	801a      	strh	r2, [r3, #0]
 80025e0:	e02c      	b.n	800263c <updateClockState+0xdc>
			case 4: clockVars.dateToSet->month = (clockVars.dateToSet->month+1) % 12 + 1; break;
 80025e2:	4b6b      	ldr	r3, [pc, #428]	; (8002790 <updateClockState+0x230>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	789b      	ldrb	r3, [r3, #2]
 80025e8:	3301      	adds	r3, #1
 80025ea:	210c      	movs	r1, #12
 80025ec:	0018      	movs	r0, r3
 80025ee:	f7fd ff03 	bl	80003f8 <__aeabi_idivmod>
 80025f2:	000b      	movs	r3, r1
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	4b66      	ldr	r3, [pc, #408]	; (8002790 <updateClockState+0x230>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	3201      	adds	r2, #1
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	709a      	strb	r2, [r3, #2]
 8002600:	e01c      	b.n	800263c <updateClockState+0xdc>
			case 5: clockVars.dateToSet->date = (clockVars.dateToSet->date+1) % maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr); break;		// make more robust?
 8002602:	4b63      	ldr	r3, [pc, #396]	; (8002790 <updateClockState+0x230>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	78db      	ldrb	r3, [r3, #3]
 8002608:	1c5c      	adds	r4, r3, #1
 800260a:	4b61      	ldr	r3, [pc, #388]	; (8002790 <updateClockState+0x230>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	789a      	ldrb	r2, [r3, #2]
 8002610:	4b5f      	ldr	r3, [pc, #380]	; (8002790 <updateClockState+0x230>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	0019      	movs	r1, r3
 8002618:	0010      	movs	r0, r2
 800261a:	f001 f8d9 	bl	80037d0 <maxDaysInMonth>
 800261e:	0003      	movs	r3, r0
 8002620:	0019      	movs	r1, r3
 8002622:	0020      	movs	r0, r4
 8002624:	f7fd fee8 	bl	80003f8 <__aeabi_idivmod>
 8002628:	000b      	movs	r3, r1
 800262a:	001a      	movs	r2, r3
 800262c:	4b58      	ldr	r3, [pc, #352]	; (8002790 <updateClockState+0x230>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	70da      	strb	r2, [r3, #3]
 8002634:	e002      	b.n	800263c <updateClockState+0xdc>
			default: break;
		}
	}
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	e000      	b.n	800263c <updateClockState+0xdc>
			default: break;
 800263a:	46c0      	nop			; (mov r8, r8)
	// change fields down, do nothing if not setting clock
	if (buttons.is3Pressed && clockVars.isBeingSet) {
 800263c:	4b53      	ldr	r3, [pc, #332]	; (800278c <updateClockState+0x22c>)
 800263e:	789b      	ldrb	r3, [r3, #2]
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d065      	beq.n	8002712 <updateClockState+0x1b2>
 8002646:	4b52      	ldr	r3, [pc, #328]	; (8002790 <updateClockState+0x230>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d061      	beq.n	8002712 <updateClockState+0x1b2>
		buttons.is3Pressed = 0;
 800264e:	4b4f      	ldr	r3, [pc, #316]	; (800278c <updateClockState+0x22c>)
 8002650:	2200      	movs	r2, #0
 8002652:	709a      	strb	r2, [r3, #2]
		updateFace.clock = 1;
 8002654:	4b4f      	ldr	r3, [pc, #316]	; (8002794 <updateClockState+0x234>)
 8002656:	2201      	movs	r2, #1
 8002658:	701a      	strb	r2, [r3, #0]
		switch (clockVars.fieldBeingSet) {
 800265a:	4b4d      	ldr	r3, [pc, #308]	; (8002790 <updateClockState+0x230>)
 800265c:	785b      	ldrb	r3, [r3, #1]
 800265e:	2b05      	cmp	r3, #5
 8002660:	d859      	bhi.n	8002716 <updateClockState+0x1b6>
 8002662:	009a      	lsls	r2, r3, #2
 8002664:	4b4d      	ldr	r3, [pc, #308]	; (800279c <updateClockState+0x23c>)
 8002666:	18d3      	adds	r3, r2, r3
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	469f      	mov	pc, r3
			case 1:
				if (clockVars.timeToSet->min == 0) clockVars.timeToSet->min = 59;
 800266c:	4b48      	ldr	r3, [pc, #288]	; (8002790 <updateClockState+0x230>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	785b      	ldrb	r3, [r3, #1]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d104      	bne.n	8002680 <updateClockState+0x120>
 8002676:	4b46      	ldr	r3, [pc, #280]	; (8002790 <updateClockState+0x230>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	223b      	movs	r2, #59	; 0x3b
 800267c:	705a      	strb	r2, [r3, #1]
				else clockVars.timeToSet->min--;
				break;
 800267e:	e04b      	b.n	8002718 <updateClockState+0x1b8>
				else clockVars.timeToSet->min--;
 8002680:	4b43      	ldr	r3, [pc, #268]	; (8002790 <updateClockState+0x230>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	785a      	ldrb	r2, [r3, #1]
 8002686:	3a01      	subs	r2, #1
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	705a      	strb	r2, [r3, #1]
				break;
 800268c:	e044      	b.n	8002718 <updateClockState+0x1b8>
			case 2:
				if (clockVars.timeToSet->hr == 0) clockVars.timeToSet->hr = 23;
 800268e:	4b40      	ldr	r3, [pc, #256]	; (8002790 <updateClockState+0x230>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d104      	bne.n	80026a2 <updateClockState+0x142>
 8002698:	4b3d      	ldr	r3, [pc, #244]	; (8002790 <updateClockState+0x230>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	2217      	movs	r2, #23
 800269e:	701a      	strb	r2, [r3, #0]
				else clockVars.timeToSet->hr--;
				break;
 80026a0:	e03a      	b.n	8002718 <updateClockState+0x1b8>
				else clockVars.timeToSet->hr--;
 80026a2:	4b3b      	ldr	r3, [pc, #236]	; (8002790 <updateClockState+0x230>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	781a      	ldrb	r2, [r3, #0]
 80026a8:	3a01      	subs	r2, #1
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	701a      	strb	r2, [r3, #0]
				break;
 80026ae:	e033      	b.n	8002718 <updateClockState+0x1b8>
			case 3: clockVars.dateToSet->yr--; break;		// supposed to be from 1950-2050. no need to do bounds checking
 80026b0:	4b37      	ldr	r3, [pc, #220]	; (8002790 <updateClockState+0x230>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	881a      	ldrh	r2, [r3, #0]
 80026b6:	3a01      	subs	r2, #1
 80026b8:	b292      	uxth	r2, r2
 80026ba:	801a      	strh	r2, [r3, #0]
 80026bc:	e02c      	b.n	8002718 <updateClockState+0x1b8>
			case 4: clockVars.dateToSet->month = clockVars.dateToSet->month == 1 ? 12 : clockVars.dateToSet->month-1; break;
 80026be:	4b34      	ldr	r3, [pc, #208]	; (8002790 <updateClockState+0x230>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	789b      	ldrb	r3, [r3, #2]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d005      	beq.n	80026d4 <updateClockState+0x174>
 80026c8:	4b31      	ldr	r3, [pc, #196]	; (8002790 <updateClockState+0x230>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	789b      	ldrb	r3, [r3, #2]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	e000      	b.n	80026d6 <updateClockState+0x176>
 80026d4:	220c      	movs	r2, #12
 80026d6:	4b2e      	ldr	r3, [pc, #184]	; (8002790 <updateClockState+0x230>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	709a      	strb	r2, [r3, #2]
 80026dc:	e01c      	b.n	8002718 <updateClockState+0x1b8>
				if (clockVars.dateToSet->month == RTC_MONTH_JANUARY) clockVars.dateToSet->month = RTC_MONTH_DECEMBER;
				else clockVars.dateToSet->month--;
			case 5:
				if (clockVars.dateToSet->date == 0) clockVars.dateToSet->date = maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr);
 80026de:	4b2c      	ldr	r3, [pc, #176]	; (8002790 <updateClockState+0x230>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	78db      	ldrb	r3, [r3, #3]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10d      	bne.n	8002704 <updateClockState+0x1a4>
 80026e8:	4b29      	ldr	r3, [pc, #164]	; (8002790 <updateClockState+0x230>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	789a      	ldrb	r2, [r3, #2]
 80026ee:	4b28      	ldr	r3, [pc, #160]	; (8002790 <updateClockState+0x230>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	8819      	ldrh	r1, [r3, #0]
 80026f4:	4b26      	ldr	r3, [pc, #152]	; (8002790 <updateClockState+0x230>)
 80026f6:	685c      	ldr	r4, [r3, #4]
 80026f8:	0010      	movs	r0, r2
 80026fa:	f001 f869 	bl	80037d0 <maxDaysInMonth>
 80026fe:	0003      	movs	r3, r0
 8002700:	70e3      	strb	r3, [r4, #3]
				else clockVars.dateToSet->date--;
				break;
 8002702:	e009      	b.n	8002718 <updateClockState+0x1b8>
				else clockVars.dateToSet->date--;
 8002704:	4b22      	ldr	r3, [pc, #136]	; (8002790 <updateClockState+0x230>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	78da      	ldrb	r2, [r3, #3]
 800270a:	3a01      	subs	r2, #1
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	70da      	strb	r2, [r3, #3]
				break;
 8002710:	e002      	b.n	8002718 <updateClockState+0x1b8>
			default: break;
		}
	}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	e000      	b.n	8002718 <updateClockState+0x1b8>
			default: break;
 8002716:	46c0      	nop			; (mov r8, r8)
	// switches between setting mode and default mode. changes between different clock fields
	if (buttons.is4Pressed) {
 8002718:	4b1c      	ldr	r3, [pc, #112]	; (800278c <updateClockState+0x22c>)
 800271a:	78db      	ldrb	r3, [r3, #3]
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d02f      	beq.n	8002782 <updateClockState+0x222>
		buttons.is4Pressed = 0;
 8002722:	4b1a      	ldr	r3, [pc, #104]	; (800278c <updateClockState+0x22c>)
 8002724:	2200      	movs	r2, #0
 8002726:	70da      	strb	r2, [r3, #3]
		updateFace.clock = 1;
 8002728:	4b1a      	ldr	r3, [pc, #104]	; (8002794 <updateClockState+0x234>)
 800272a:	2201      	movs	r2, #1
 800272c:	701a      	strb	r2, [r3, #0]
		clockVars.fieldBeingSet = (clockVars.fieldBeingSet + 1) % (NUM_CLOCKFIELDS + 1);
 800272e:	4b18      	ldr	r3, [pc, #96]	; (8002790 <updateClockState+0x230>)
 8002730:	785b      	ldrb	r3, [r3, #1]
 8002732:	3301      	adds	r3, #1
 8002734:	2106      	movs	r1, #6
 8002736:	0018      	movs	r0, r3
 8002738:	f7fd fe5e 	bl	80003f8 <__aeabi_idivmod>
 800273c:	000b      	movs	r3, r1
 800273e:	b2da      	uxtb	r2, r3
 8002740:	4b13      	ldr	r3, [pc, #76]	; (8002790 <updateClockState+0x230>)
 8002742:	705a      	strb	r2, [r3, #1]
		if (clockVars.fieldBeingSet != 0) {
 8002744:	4b12      	ldr	r3, [pc, #72]	; (8002790 <updateClockState+0x230>)
 8002746:	785b      	ldrb	r3, [r3, #1]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00f      	beq.n	800276c <updateClockState+0x20c>
			clockVars.isBeingSet = 1;
 800274c:	4b10      	ldr	r3, [pc, #64]	; (8002790 <updateClockState+0x230>)
 800274e:	2201      	movs	r2, #1
 8002750:	701a      	strb	r2, [r3, #0]

			// should pull current time when first entering setting mode
			if (clockVars.fieldBeingSet == 1) getDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
 8002752:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <updateClockState+0x230>)
 8002754:	785b      	ldrb	r3, [r3, #1]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d113      	bne.n	8002782 <updateClockState+0x222>
 800275a:	4b0d      	ldr	r3, [pc, #52]	; (8002790 <updateClockState+0x230>)
 800275c:	6858      	ldr	r0, [r3, #4]
 800275e:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <updateClockState+0x230>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	0019      	movs	r1, r3
 8002766:	f7ff f8d9 	bl	800191c <getDateTime>
			// second set to 0, weekday ignored
			setDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
		}
	}
	// checks on clock set for other buttons here (what did this note mean??)
}
 800276a:	e00a      	b.n	8002782 <updateClockState+0x222>
			clockVars.isBeingSet = 0;
 800276c:	4b08      	ldr	r3, [pc, #32]	; (8002790 <updateClockState+0x230>)
 800276e:	2200      	movs	r2, #0
 8002770:	701a      	strb	r2, [r3, #0]
			setDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
 8002772:	4b07      	ldr	r3, [pc, #28]	; (8002790 <updateClockState+0x230>)
 8002774:	6858      	ldr	r0, [r3, #4]
 8002776:	4b06      	ldr	r3, [pc, #24]	; (8002790 <updateClockState+0x230>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	0019      	movs	r1, r3
 800277e:	f7fe ff72 	bl	8001666 <setDateTime>
}
 8002782:	46c0      	nop			; (mov r8, r8)
 8002784:	46bd      	mov	sp, r7
 8002786:	b003      	add	sp, #12
 8002788:	bd90      	pop	{r4, r7, pc}
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	20000178 	.word	0x20000178
 8002790:	200000e0 	.word	0x200000e0
 8002794:	2000012c 	.word	0x2000012c
 8002798:	08009198 	.word	0x08009198
 800279c:	080091b0 	.word	0x080091b0

080027a0 <updateTimerState>:
 *     second, timer only runs for half second.)
 *     also not sure how to implement pause using rtc (alarm value has to change depending on how long timer is paused for)
 *   might need to change to using only hardware timer for this instead of rtc because of problems listed above
 *   insert a few more functions into this (those that need to use the hardware)
 */
void updateTimerState(TIM_HandleTypeDef *timerStopwatchTim) {
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
	if (timerVars.isBeingSet) {
 80027a8:	4b89      	ldr	r3, [pc, #548]	; (80029d0 <updateTimerState+0x230>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d100      	bne.n	80027b2 <updateTimerState+0x12>
 80027b0:	e089      	b.n	80028c6 <updateTimerState+0x126>
		if (buttons.is2Pressed) {
 80027b2:	4b88      	ldr	r3, [pc, #544]	; (80029d4 <updateTimerState+0x234>)
 80027b4:	785b      	ldrb	r3, [r3, #1]
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d03b      	beq.n	8002834 <updateTimerState+0x94>
			buttons.is2Pressed = 0;
 80027bc:	4b85      	ldr	r3, [pc, #532]	; (80029d4 <updateTimerState+0x234>)
 80027be:	2200      	movs	r2, #0
 80027c0:	705a      	strb	r2, [r3, #1]
			updateFace.timer = 1;
 80027c2:	4b85      	ldr	r3, [pc, #532]	; (80029d8 <updateTimerState+0x238>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	705a      	strb	r2, [r3, #1]

			// set field up
			switch (timerVars.fieldBeingSet) {
 80027c8:	4b81      	ldr	r3, [pc, #516]	; (80029d0 <updateTimerState+0x230>)
 80027ca:	785b      	ldrb	r3, [r3, #1]
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d013      	beq.n	80027f8 <updateTimerState+0x58>
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	d020      	beq.n	8002816 <updateTimerState+0x76>
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d000      	beq.n	80027da <updateTimerState+0x3a>
				case 1: timerVars.timeToSet->sec = (timerVars.timeToSet->sec+1) % 60; break;
				case 2: timerVars.timeToSet->min = (timerVars.timeToSet->min+1) % 60; break;
				case 3: timerVars.timeToSet->hr = (timerVars.timeToSet->hr+1) % 24; break;
				default: break;
 80027d8:	e02d      	b.n	8002836 <updateTimerState+0x96>
				case 1: timerVars.timeToSet->sec = (timerVars.timeToSet->sec+1) % 60; break;
 80027da:	4b7d      	ldr	r3, [pc, #500]	; (80029d0 <updateTimerState+0x230>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	789b      	ldrb	r3, [r3, #2]
 80027e0:	3301      	adds	r3, #1
 80027e2:	213c      	movs	r1, #60	; 0x3c
 80027e4:	0018      	movs	r0, r3
 80027e6:	f7fd fe07 	bl	80003f8 <__aeabi_idivmod>
 80027ea:	000b      	movs	r3, r1
 80027ec:	001a      	movs	r2, r3
 80027ee:	4b78      	ldr	r3, [pc, #480]	; (80029d0 <updateTimerState+0x230>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	709a      	strb	r2, [r3, #2]
 80027f6:	e01e      	b.n	8002836 <updateTimerState+0x96>
				case 2: timerVars.timeToSet->min = (timerVars.timeToSet->min+1) % 60; break;
 80027f8:	4b75      	ldr	r3, [pc, #468]	; (80029d0 <updateTimerState+0x230>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	785b      	ldrb	r3, [r3, #1]
 80027fe:	3301      	adds	r3, #1
 8002800:	213c      	movs	r1, #60	; 0x3c
 8002802:	0018      	movs	r0, r3
 8002804:	f7fd fdf8 	bl	80003f8 <__aeabi_idivmod>
 8002808:	000b      	movs	r3, r1
 800280a:	001a      	movs	r2, r3
 800280c:	4b70      	ldr	r3, [pc, #448]	; (80029d0 <updateTimerState+0x230>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	705a      	strb	r2, [r3, #1]
 8002814:	e00f      	b.n	8002836 <updateTimerState+0x96>
				case 3: timerVars.timeToSet->hr = (timerVars.timeToSet->hr+1) % 24; break;
 8002816:	4b6e      	ldr	r3, [pc, #440]	; (80029d0 <updateTimerState+0x230>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	3301      	adds	r3, #1
 800281e:	2118      	movs	r1, #24
 8002820:	0018      	movs	r0, r3
 8002822:	f7fd fde9 	bl	80003f8 <__aeabi_idivmod>
 8002826:	000b      	movs	r3, r1
 8002828:	001a      	movs	r2, r3
 800282a:	4b69      	ldr	r3, [pc, #420]	; (80029d0 <updateTimerState+0x230>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	701a      	strb	r2, [r3, #0]
 8002832:	e000      	b.n	8002836 <updateTimerState+0x96>
			}
		}
 8002834:	46c0      	nop			; (mov r8, r8)
		if (buttons.is3Pressed) {
 8002836:	4b67      	ldr	r3, [pc, #412]	; (80029d4 <updateTimerState+0x234>)
 8002838:	789b      	ldrb	r3, [r3, #2]
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d100      	bne.n	8002842 <updateTimerState+0xa2>
 8002840:	e0c1      	b.n	80029c6 <updateTimerState+0x226>
			buttons.is3Pressed = 0;
 8002842:	4b64      	ldr	r3, [pc, #400]	; (80029d4 <updateTimerState+0x234>)
 8002844:	2200      	movs	r2, #0
 8002846:	709a      	strb	r2, [r3, #2]
			updateFace.timer = 1;
 8002848:	4b63      	ldr	r3, [pc, #396]	; (80029d8 <updateTimerState+0x238>)
 800284a:	2201      	movs	r2, #1
 800284c:	705a      	strb	r2, [r3, #1]

			// set field down
			switch (timerVars.fieldBeingSet) {
 800284e:	4b60      	ldr	r3, [pc, #384]	; (80029d0 <updateTimerState+0x230>)
 8002850:	785b      	ldrb	r3, [r3, #1]
 8002852:	2b02      	cmp	r3, #2
 8002854:	d015      	beq.n	8002882 <updateTimerState+0xe2>
 8002856:	2b03      	cmp	r3, #3
 8002858:	d024      	beq.n	80028a4 <updateTimerState+0x104>
 800285a:	2b01      	cmp	r3, #1
 800285c:	d000      	beq.n	8002860 <updateTimerState+0xc0>
					break;
				case 3:
					if (timerVars.timeToSet->hr == 0) timerVars.timeToSet->hr = 23;
					else timerVars.timeToSet->hr--;
					break;
				default: break;
 800285e:	e0b3      	b.n	80029c8 <updateTimerState+0x228>
					if (timerVars.timeToSet->sec == 0) timerVars.timeToSet->sec = 59;
 8002860:	4b5b      	ldr	r3, [pc, #364]	; (80029d0 <updateTimerState+0x230>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	789b      	ldrb	r3, [r3, #2]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d104      	bne.n	8002874 <updateTimerState+0xd4>
 800286a:	4b59      	ldr	r3, [pc, #356]	; (80029d0 <updateTimerState+0x230>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	223b      	movs	r2, #59	; 0x3b
 8002870:	709a      	strb	r2, [r3, #2]
					break;
 8002872:	e0a9      	b.n	80029c8 <updateTimerState+0x228>
					else timerVars.timeToSet->sec--;
 8002874:	4b56      	ldr	r3, [pc, #344]	; (80029d0 <updateTimerState+0x230>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	789a      	ldrb	r2, [r3, #2]
 800287a:	3a01      	subs	r2, #1
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	709a      	strb	r2, [r3, #2]
					break;
 8002880:	e0a2      	b.n	80029c8 <updateTimerState+0x228>
					if (timerVars.timeToSet->min == 0) timerVars.timeToSet->min = 59;
 8002882:	4b53      	ldr	r3, [pc, #332]	; (80029d0 <updateTimerState+0x230>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	785b      	ldrb	r3, [r3, #1]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d104      	bne.n	8002896 <updateTimerState+0xf6>
 800288c:	4b50      	ldr	r3, [pc, #320]	; (80029d0 <updateTimerState+0x230>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	223b      	movs	r2, #59	; 0x3b
 8002892:	705a      	strb	r2, [r3, #1]
					break;
 8002894:	e098      	b.n	80029c8 <updateTimerState+0x228>
					else timerVars.timeToSet->min--;
 8002896:	4b4e      	ldr	r3, [pc, #312]	; (80029d0 <updateTimerState+0x230>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	785a      	ldrb	r2, [r3, #1]
 800289c:	3a01      	subs	r2, #1
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	705a      	strb	r2, [r3, #1]
					break;
 80028a2:	e091      	b.n	80029c8 <updateTimerState+0x228>
					if (timerVars.timeToSet->hr == 0) timerVars.timeToSet->hr = 23;
 80028a4:	4b4a      	ldr	r3, [pc, #296]	; (80029d0 <updateTimerState+0x230>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d104      	bne.n	80028b8 <updateTimerState+0x118>
 80028ae:	4b48      	ldr	r3, [pc, #288]	; (80029d0 <updateTimerState+0x230>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2217      	movs	r2, #23
 80028b4:	701a      	strb	r2, [r3, #0]
					break;
 80028b6:	e087      	b.n	80029c8 <updateTimerState+0x228>
					else timerVars.timeToSet->hr--;
 80028b8:	4b45      	ldr	r3, [pc, #276]	; (80029d0 <updateTimerState+0x230>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	781a      	ldrb	r2, [r3, #0]
 80028be:	3a01      	subs	r2, #1
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	701a      	strb	r2, [r3, #0]
					break;
 80028c4:	e080      	b.n	80029c8 <updateTimerState+0x228>
			}
		}
	}
	// not done
	else if (timerVars.isSet) {
 80028c6:	4b42      	ldr	r3, [pc, #264]	; (80029d0 <updateTimerState+0x230>)
 80028c8:	789b      	ldrb	r3, [r3, #2]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d040      	beq.n	8002950 <updateTimerState+0x1b0>
		if (buttons.is2Pressed && isTimerRunning == 0) {
 80028ce:	4b41      	ldr	r3, [pc, #260]	; (80029d4 <updateTimerState+0x234>)
 80028d0:	785b      	ldrb	r3, [r3, #1]
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d010      	beq.n	80028fa <updateTimerState+0x15a>
 80028d8:	4b40      	ldr	r3, [pc, #256]	; (80029dc <updateTimerState+0x23c>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10b      	bne.n	80028fa <updateTimerState+0x15a>
			buttons.is2Pressed = 0;
 80028e2:	4b3c      	ldr	r3, [pc, #240]	; (80029d4 <updateTimerState+0x234>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	705a      	strb	r2, [r3, #1]
			updateFace.timer = 1;
 80028e8:	4b3b      	ldr	r3, [pc, #236]	; (80029d8 <updateTimerState+0x238>)
 80028ea:	2201      	movs	r2, #1
 80028ec:	705a      	strb	r2, [r3, #1]
			// start timer
			isTimerRunning = 1;
 80028ee:	4b3b      	ldr	r3, [pc, #236]	; (80029dc <updateTimerState+0x23c>)
 80028f0:	2201      	movs	r2, #1
 80028f2:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 0;
 80028f4:	4b3a      	ldr	r3, [pc, #232]	; (80029e0 <updateTimerState+0x240>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	701a      	strb	r2, [r3, #0]
		}
		if (buttons.is3Pressed && isTimerRunning) {
 80028fa:	4b36      	ldr	r3, [pc, #216]	; (80029d4 <updateTimerState+0x234>)
 80028fc:	789b      	ldrb	r3, [r3, #2]
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d010      	beq.n	8002926 <updateTimerState+0x186>
 8002904:	4b35      	ldr	r3, [pc, #212]	; (80029dc <updateTimerState+0x23c>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00b      	beq.n	8002926 <updateTimerState+0x186>
			buttons.is3Pressed = 0;
 800290e:	4b31      	ldr	r3, [pc, #196]	; (80029d4 <updateTimerState+0x234>)
 8002910:	2200      	movs	r2, #0
 8002912:	709a      	strb	r2, [r3, #2]
			updateFace.timer = 1;
 8002914:	4b30      	ldr	r3, [pc, #192]	; (80029d8 <updateTimerState+0x238>)
 8002916:	2201      	movs	r2, #1
 8002918:	705a      	strb	r2, [r3, #1]
			// pause timer
			isTimerRunning = 0;
 800291a:	4b30      	ldr	r3, [pc, #192]	; (80029dc <updateTimerState+0x23c>)
 800291c:	2200      	movs	r2, #0
 800291e:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 1;
 8002920:	4b2f      	ldr	r3, [pc, #188]	; (80029e0 <updateTimerState+0x240>)
 8002922:	2201      	movs	r2, #1
 8002924:	701a      	strb	r2, [r3, #0]
		}
		if (buttons.is4Pressed) {
 8002926:	4b2b      	ldr	r3, [pc, #172]	; (80029d4 <updateTimerState+0x234>)
 8002928:	78db      	ldrb	r3, [r3, #3]
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b00      	cmp	r3, #0
 800292e:	d04b      	beq.n	80029c8 <updateTimerState+0x228>
			buttons.is4Pressed = 0;
 8002930:	4b28      	ldr	r3, [pc, #160]	; (80029d4 <updateTimerState+0x234>)
 8002932:	2200      	movs	r2, #0
 8002934:	70da      	strb	r2, [r3, #3]
			updateFace.timer = 1;
 8002936:	4b28      	ldr	r3, [pc, #160]	; (80029d8 <updateTimerState+0x238>)
 8002938:	2201      	movs	r2, #1
 800293a:	705a      	strb	r2, [r3, #1]

			// stop and clear timer
			timerVars.isSet = 0;
 800293c:	4b24      	ldr	r3, [pc, #144]	; (80029d0 <updateTimerState+0x230>)
 800293e:	2200      	movs	r2, #0
 8002940:	709a      	strb	r2, [r3, #2]
			isTimerRunning = 0;
 8002942:	4b26      	ldr	r3, [pc, #152]	; (80029dc <updateTimerState+0x23c>)
 8002944:	2200      	movs	r2, #0
 8002946:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 0;
 8002948:	4b25      	ldr	r3, [pc, #148]	; (80029e0 <updateTimerState+0x240>)
 800294a:	2200      	movs	r2, #0
 800294c:	701a      	strb	r2, [r3, #0]
			timerVars.isBeingSet = 0;
			timerVars.isSet = 1;
			// setTimer(&timerVars.timeToSet);
		}
	}
}
 800294e:	e03b      	b.n	80029c8 <updateTimerState+0x228>
	else if (buttons.is4Pressed) {
 8002950:	4b20      	ldr	r3, [pc, #128]	; (80029d4 <updateTimerState+0x234>)
 8002952:	78db      	ldrb	r3, [r3, #3]
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d036      	beq.n	80029c8 <updateTimerState+0x228>
		buttons.is4Pressed = 0;
 800295a:	4b1e      	ldr	r3, [pc, #120]	; (80029d4 <updateTimerState+0x234>)
 800295c:	2200      	movs	r2, #0
 800295e:	70da      	strb	r2, [r3, #3]
		updateFace.timer = 1;
 8002960:	4b1d      	ldr	r3, [pc, #116]	; (80029d8 <updateTimerState+0x238>)
 8002962:	2201      	movs	r2, #1
 8002964:	705a      	strb	r2, [r3, #1]
		timerVars.fieldBeingSet = (timerVars.fieldBeingSet + 1) % (NUM_TIMERFIELDS + 1);
 8002966:	4b1a      	ldr	r3, [pc, #104]	; (80029d0 <updateTimerState+0x230>)
 8002968:	785b      	ldrb	r3, [r3, #1]
 800296a:	3301      	adds	r3, #1
 800296c:	4a1d      	ldr	r2, [pc, #116]	; (80029e4 <updateTimerState+0x244>)
 800296e:	4013      	ands	r3, r2
 8002970:	d504      	bpl.n	800297c <updateTimerState+0x1dc>
 8002972:	3b01      	subs	r3, #1
 8002974:	2204      	movs	r2, #4
 8002976:	4252      	negs	r2, r2
 8002978:	4313      	orrs	r3, r2
 800297a:	3301      	adds	r3, #1
 800297c:	b2da      	uxtb	r2, r3
 800297e:	4b14      	ldr	r3, [pc, #80]	; (80029d0 <updateTimerState+0x230>)
 8002980:	705a      	strb	r2, [r3, #1]
		if (timerVars.fieldBeingSet != 0) {
 8002982:	4b13      	ldr	r3, [pc, #76]	; (80029d0 <updateTimerState+0x230>)
 8002984:	785b      	ldrb	r3, [r3, #1]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d016      	beq.n	80029b8 <updateTimerState+0x218>
			timerVars.isBeingSet = 1;
 800298a:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <updateTimerState+0x230>)
 800298c:	2201      	movs	r2, #1
 800298e:	701a      	strb	r2, [r3, #0]
			timerVars.isSet = 0;
 8002990:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <updateTimerState+0x230>)
 8002992:	2200      	movs	r2, #0
 8002994:	709a      	strb	r2, [r3, #2]
			if (timerVars.fieldBeingSet == 1) {
 8002996:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <updateTimerState+0x230>)
 8002998:	785b      	ldrb	r3, [r3, #1]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d114      	bne.n	80029c8 <updateTimerState+0x228>
				timerVars.timeToSet->sec = 0;
 800299e:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <updateTimerState+0x230>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	709a      	strb	r2, [r3, #2]
				timerVars.timeToSet->min = 0;
 80029a6:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <updateTimerState+0x230>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	705a      	strb	r2, [r3, #1]
				timerVars.timeToSet->hr = 0;
 80029ae:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <updateTimerState+0x230>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	701a      	strb	r2, [r3, #0]
}
 80029b6:	e007      	b.n	80029c8 <updateTimerState+0x228>
			timerVars.isBeingSet = 0;
 80029b8:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <updateTimerState+0x230>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	701a      	strb	r2, [r3, #0]
			timerVars.isSet = 1;
 80029be:	4b04      	ldr	r3, [pc, #16]	; (80029d0 <updateTimerState+0x230>)
 80029c0:	2201      	movs	r2, #1
 80029c2:	709a      	strb	r2, [r3, #2]
}
 80029c4:	e000      	b.n	80029c8 <updateTimerState+0x228>
		}
 80029c6:	46c0      	nop			; (mov r8, r8)
}
 80029c8:	46c0      	nop			; (mov r8, r8)
 80029ca:	46bd      	mov	sp, r7
 80029cc:	b002      	add	sp, #8
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	200000ec 	.word	0x200000ec
 80029d4:	20000178 	.word	0x20000178
 80029d8:	2000012c 	.word	0x2000012c
 80029dc:	2000017c 	.word	0x2000017c
 80029e0:	20000184 	.word	0x20000184
 80029e4:	80000003 	.word	0x80000003

080029e8 <updateAlarmState>:
 *   should change to make it possible to have multiple alarms
 *   also pick alarms that repeat and alarms that don't
 *   need to make changes to ui to make this happen
 *   currently just does old behavior (only 1 alarm)
 */
void updateAlarmState(RTC_HandleTypeDef *hrtc) {
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
	if (buttons.is2Pressed && alarmVars.isBeingSet) {
 80029f0:	4b8b      	ldr	r3, [pc, #556]	; (8002c20 <updateAlarmState+0x238>)
 80029f2:	785b      	ldrb	r3, [r3, #1]
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d053      	beq.n	8002aa2 <updateAlarmState+0xba>
 80029fa:	4b8a      	ldr	r3, [pc, #552]	; (8002c24 <updateAlarmState+0x23c>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d04f      	beq.n	8002aa2 <updateAlarmState+0xba>
		buttons.is2Pressed = 0;
 8002a02:	4b87      	ldr	r3, [pc, #540]	; (8002c20 <updateAlarmState+0x238>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	705a      	strb	r2, [r3, #1]
		updateFace.alarm = 1;
 8002a08:	4b87      	ldr	r3, [pc, #540]	; (8002c28 <updateAlarmState+0x240>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	709a      	strb	r2, [r3, #2]

		// change fields up
		switch (alarmVars.fieldBeingSet) {
 8002a0e:	4b85      	ldr	r3, [pc, #532]	; (8002c24 <updateAlarmState+0x23c>)
 8002a10:	785b      	ldrb	r3, [r3, #1]
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d017      	beq.n	8002a46 <updateAlarmState+0x5e>
 8002a16:	dc02      	bgt.n	8002a1e <updateAlarmState+0x36>
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d005      	beq.n	8002a28 <updateAlarmState+0x40>
			case 1: alarmVars.alarmToSet->sec = (alarmVars.alarmToSet->sec + 1) % 60; break;
			case 2: alarmVars.alarmToSet->min = (alarmVars.alarmToSet->min + 1) % 60; break;
			case 3: alarmVars.alarmToSet->hr = (alarmVars.alarmToSet->hr + 1) % 24; break;
			case 4: alarmVars.alarmToSet->weekday = (alarmVars.alarmToSet->weekday + 1) % 7 + 1; break;
			default: break;
 8002a1c:	e042      	b.n	8002aa4 <updateAlarmState+0xbc>
		switch (alarmVars.fieldBeingSet) {
 8002a1e:	2b03      	cmp	r3, #3
 8002a20:	d020      	beq.n	8002a64 <updateAlarmState+0x7c>
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d02d      	beq.n	8002a82 <updateAlarmState+0x9a>
			default: break;
 8002a26:	e03d      	b.n	8002aa4 <updateAlarmState+0xbc>
			case 1: alarmVars.alarmToSet->sec = (alarmVars.alarmToSet->sec + 1) % 60; break;
 8002a28:	4b7e      	ldr	r3, [pc, #504]	; (8002c24 <updateAlarmState+0x23c>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	789b      	ldrb	r3, [r3, #2]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	213c      	movs	r1, #60	; 0x3c
 8002a32:	0018      	movs	r0, r3
 8002a34:	f7fd fce0 	bl	80003f8 <__aeabi_idivmod>
 8002a38:	000b      	movs	r3, r1
 8002a3a:	001a      	movs	r2, r3
 8002a3c:	4b79      	ldr	r3, [pc, #484]	; (8002c24 <updateAlarmState+0x23c>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	709a      	strb	r2, [r3, #2]
 8002a44:	e02e      	b.n	8002aa4 <updateAlarmState+0xbc>
			case 2: alarmVars.alarmToSet->min = (alarmVars.alarmToSet->min + 1) % 60; break;
 8002a46:	4b77      	ldr	r3, [pc, #476]	; (8002c24 <updateAlarmState+0x23c>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	785b      	ldrb	r3, [r3, #1]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	213c      	movs	r1, #60	; 0x3c
 8002a50:	0018      	movs	r0, r3
 8002a52:	f7fd fcd1 	bl	80003f8 <__aeabi_idivmod>
 8002a56:	000b      	movs	r3, r1
 8002a58:	001a      	movs	r2, r3
 8002a5a:	4b72      	ldr	r3, [pc, #456]	; (8002c24 <updateAlarmState+0x23c>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	705a      	strb	r2, [r3, #1]
 8002a62:	e01f      	b.n	8002aa4 <updateAlarmState+0xbc>
			case 3: alarmVars.alarmToSet->hr = (alarmVars.alarmToSet->hr + 1) % 24; break;
 8002a64:	4b6f      	ldr	r3, [pc, #444]	; (8002c24 <updateAlarmState+0x23c>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	2118      	movs	r1, #24
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f7fd fcc2 	bl	80003f8 <__aeabi_idivmod>
 8002a74:	000b      	movs	r3, r1
 8002a76:	001a      	movs	r2, r3
 8002a78:	4b6a      	ldr	r3, [pc, #424]	; (8002c24 <updateAlarmState+0x23c>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	701a      	strb	r2, [r3, #0]
 8002a80:	e010      	b.n	8002aa4 <updateAlarmState+0xbc>
			case 4: alarmVars.alarmToSet->weekday = (alarmVars.alarmToSet->weekday + 1) % 7 + 1; break;
 8002a82:	4b68      	ldr	r3, [pc, #416]	; (8002c24 <updateAlarmState+0x23c>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	78db      	ldrb	r3, [r3, #3]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	2107      	movs	r1, #7
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f7fd fcb3 	bl	80003f8 <__aeabi_idivmod>
 8002a92:	000b      	movs	r3, r1
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	4b63      	ldr	r3, [pc, #396]	; (8002c24 <updateAlarmState+0x23c>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	3201      	adds	r2, #1
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	70da      	strb	r2, [r3, #3]
 8002aa0:	e000      	b.n	8002aa4 <updateAlarmState+0xbc>
		}
	}
 8002aa2:	46c0      	nop			; (mov r8, r8)
	if (buttons.is3Pressed && alarmVars.isBeingSet) {
 8002aa4:	4b5e      	ldr	r3, [pc, #376]	; (8002c20 <updateAlarmState+0x238>)
 8002aa6:	789b      	ldrb	r3, [r3, #2]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d05a      	beq.n	8002b64 <updateAlarmState+0x17c>
 8002aae:	4b5d      	ldr	r3, [pc, #372]	; (8002c24 <updateAlarmState+0x23c>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d056      	beq.n	8002b64 <updateAlarmState+0x17c>
		buttons.is3Pressed = 0;
 8002ab6:	4b5a      	ldr	r3, [pc, #360]	; (8002c20 <updateAlarmState+0x238>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	709a      	strb	r2, [r3, #2]
		updateFace.alarm = 1;
 8002abc:	4b5a      	ldr	r3, [pc, #360]	; (8002c28 <updateAlarmState+0x240>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	709a      	strb	r2, [r3, #2]

		// change fields down
		switch (alarmVars.fieldBeingSet) {
 8002ac2:	4b58      	ldr	r3, [pc, #352]	; (8002c24 <updateAlarmState+0x23c>)
 8002ac4:	785b      	ldrb	r3, [r3, #1]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d019      	beq.n	8002afe <updateAlarmState+0x116>
 8002aca:	dc02      	bgt.n	8002ad2 <updateAlarmState+0xea>
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d005      	beq.n	8002adc <updateAlarmState+0xf4>
				break;
			case 4:
				if (alarmVars.alarmToSet->weekday == RTC_WEEKDAY_MONDAY) alarmVars.alarmToSet->weekday = RTC_WEEKDAY_SUNDAY;
				else alarmVars.alarmToSet->weekday--;
				break;
			default: break;
 8002ad0:	e049      	b.n	8002b66 <updateAlarmState+0x17e>
		switch (alarmVars.fieldBeingSet) {
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d024      	beq.n	8002b20 <updateAlarmState+0x138>
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d033      	beq.n	8002b42 <updateAlarmState+0x15a>
			default: break;
 8002ada:	e044      	b.n	8002b66 <updateAlarmState+0x17e>
				if (alarmVars.alarmToSet->sec == 0) alarmVars.alarmToSet->sec = 59;
 8002adc:	4b51      	ldr	r3, [pc, #324]	; (8002c24 <updateAlarmState+0x23c>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	789b      	ldrb	r3, [r3, #2]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d104      	bne.n	8002af0 <updateAlarmState+0x108>
 8002ae6:	4b4f      	ldr	r3, [pc, #316]	; (8002c24 <updateAlarmState+0x23c>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	223b      	movs	r2, #59	; 0x3b
 8002aec:	709a      	strb	r2, [r3, #2]
				break;
 8002aee:	e03a      	b.n	8002b66 <updateAlarmState+0x17e>
				else alarmVars.alarmToSet->sec--;
 8002af0:	4b4c      	ldr	r3, [pc, #304]	; (8002c24 <updateAlarmState+0x23c>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	789a      	ldrb	r2, [r3, #2]
 8002af6:	3a01      	subs	r2, #1
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	709a      	strb	r2, [r3, #2]
				break;
 8002afc:	e033      	b.n	8002b66 <updateAlarmState+0x17e>
				if (alarmVars.alarmToSet->min == 0) alarmVars.alarmToSet->min = 59;
 8002afe:	4b49      	ldr	r3, [pc, #292]	; (8002c24 <updateAlarmState+0x23c>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	785b      	ldrb	r3, [r3, #1]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d104      	bne.n	8002b12 <updateAlarmState+0x12a>
 8002b08:	4b46      	ldr	r3, [pc, #280]	; (8002c24 <updateAlarmState+0x23c>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	223b      	movs	r2, #59	; 0x3b
 8002b0e:	705a      	strb	r2, [r3, #1]
				break;
 8002b10:	e029      	b.n	8002b66 <updateAlarmState+0x17e>
				else alarmVars.alarmToSet->min--;
 8002b12:	4b44      	ldr	r3, [pc, #272]	; (8002c24 <updateAlarmState+0x23c>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	785a      	ldrb	r2, [r3, #1]
 8002b18:	3a01      	subs	r2, #1
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	705a      	strb	r2, [r3, #1]
				break;
 8002b1e:	e022      	b.n	8002b66 <updateAlarmState+0x17e>
				if (alarmVars.alarmToSet->hr == 0) alarmVars.alarmToSet->hr = 23;
 8002b20:	4b40      	ldr	r3, [pc, #256]	; (8002c24 <updateAlarmState+0x23c>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d104      	bne.n	8002b34 <updateAlarmState+0x14c>
 8002b2a:	4b3e      	ldr	r3, [pc, #248]	; (8002c24 <updateAlarmState+0x23c>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2217      	movs	r2, #23
 8002b30:	701a      	strb	r2, [r3, #0]
				break;
 8002b32:	e018      	b.n	8002b66 <updateAlarmState+0x17e>
				else alarmVars.alarmToSet->hr--;
 8002b34:	4b3b      	ldr	r3, [pc, #236]	; (8002c24 <updateAlarmState+0x23c>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	781a      	ldrb	r2, [r3, #0]
 8002b3a:	3a01      	subs	r2, #1
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	701a      	strb	r2, [r3, #0]
				break;
 8002b40:	e011      	b.n	8002b66 <updateAlarmState+0x17e>
				if (alarmVars.alarmToSet->weekday == RTC_WEEKDAY_MONDAY) alarmVars.alarmToSet->weekday = RTC_WEEKDAY_SUNDAY;
 8002b42:	4b38      	ldr	r3, [pc, #224]	; (8002c24 <updateAlarmState+0x23c>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	78db      	ldrb	r3, [r3, #3]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d104      	bne.n	8002b56 <updateAlarmState+0x16e>
 8002b4c:	4b35      	ldr	r3, [pc, #212]	; (8002c24 <updateAlarmState+0x23c>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2207      	movs	r2, #7
 8002b52:	70da      	strb	r2, [r3, #3]
				break;
 8002b54:	e007      	b.n	8002b66 <updateAlarmState+0x17e>
				else alarmVars.alarmToSet->weekday--;
 8002b56:	4b33      	ldr	r3, [pc, #204]	; (8002c24 <updateAlarmState+0x23c>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	78da      	ldrb	r2, [r3, #3]
 8002b5c:	3a01      	subs	r2, #1
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	70da      	strb	r2, [r3, #3]
				break;
 8002b62:	e000      	b.n	8002b66 <updateAlarmState+0x17e>
		}
	}
 8002b64:	46c0      	nop			; (mov r8, r8)
	if (buttons.is4Pressed) {
 8002b66:	4b2e      	ldr	r3, [pc, #184]	; (8002c20 <updateAlarmState+0x238>)
 8002b68:	78db      	ldrb	r3, [r3, #3]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d053      	beq.n	8002c18 <updateAlarmState+0x230>
		buttons.is4Pressed = 0;
 8002b70:	4b2b      	ldr	r3, [pc, #172]	; (8002c20 <updateAlarmState+0x238>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	70da      	strb	r2, [r3, #3]
		updateFace.alarm = 1;
 8002b76:	4b2c      	ldr	r3, [pc, #176]	; (8002c28 <updateAlarmState+0x240>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	709a      	strb	r2, [r3, #2]

		if (isAlarmRunning == 0) {
 8002b7c:	4b2b      	ldr	r3, [pc, #172]	; (8002c2c <updateAlarmState+0x244>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d13e      	bne.n	8002c04 <updateAlarmState+0x21c>
			// toggle between fields
			alarmVars.fieldBeingSet = (alarmVars.fieldBeingSet + 1) % (NUM_ALARMFIELDS + 1);
 8002b86:	4b27      	ldr	r3, [pc, #156]	; (8002c24 <updateAlarmState+0x23c>)
 8002b88:	785b      	ldrb	r3, [r3, #1]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	2105      	movs	r1, #5
 8002b8e:	0018      	movs	r0, r3
 8002b90:	f7fd fc32 	bl	80003f8 <__aeabi_idivmod>
 8002b94:	000b      	movs	r3, r1
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	4b22      	ldr	r3, [pc, #136]	; (8002c24 <updateAlarmState+0x23c>)
 8002b9a:	705a      	strb	r2, [r3, #1]
			if (alarmVars.fieldBeingSet != 0) {
 8002b9c:	4b21      	ldr	r3, [pc, #132]	; (8002c24 <updateAlarmState+0x23c>)
 8002b9e:	785b      	ldrb	r3, [r3, #1]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d021      	beq.n	8002be8 <updateAlarmState+0x200>
				alarmVars.isBeingSet = 1;
 8002ba4:	4b1f      	ldr	r3, [pc, #124]	; (8002c24 <updateAlarmState+0x23c>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	701a      	strb	r2, [r3, #0]
				if (alarmVars.fieldBeingSet == 1) {
 8002baa:	4b1e      	ldr	r3, [pc, #120]	; (8002c24 <updateAlarmState+0x23c>)
 8002bac:	785b      	ldrb	r3, [r3, #1]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d132      	bne.n	8002c18 <updateAlarmState+0x230>
					struct dates *d;
					struct times *t;
					getDateTime(d, t, hrtc);
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	68b9      	ldr	r1, [r7, #8]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f7fe feaf 	bl	800191c <getDateTime>
					alarmVars.alarmToSet->sec = t->sec;
 8002bbe:	4b19      	ldr	r3, [pc, #100]	; (8002c24 <updateAlarmState+0x23c>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	7892      	ldrb	r2, [r2, #2]
 8002bc6:	709a      	strb	r2, [r3, #2]
					alarmVars.alarmToSet->min = t->min;
 8002bc8:	4b16      	ldr	r3, [pc, #88]	; (8002c24 <updateAlarmState+0x23c>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	7852      	ldrb	r2, [r2, #1]
 8002bd0:	705a      	strb	r2, [r3, #1]
					alarmVars.alarmToSet->hr = t->hr;
 8002bd2:	4b14      	ldr	r3, [pc, #80]	; (8002c24 <updateAlarmState+0x23c>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	7812      	ldrb	r2, [r2, #0]
 8002bda:	701a      	strb	r2, [r3, #0]
					alarmVars.alarmToSet->weekday = d->weekday;
 8002bdc:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <updateAlarmState+0x23c>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	7912      	ldrb	r2, [r2, #4]
 8002be4:	70da      	strb	r2, [r3, #3]
			// stop and clear alarm hw
			isAlarmRunning = 0;
			HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);
		}
	}
}
 8002be6:	e017      	b.n	8002c18 <updateAlarmState+0x230>
				alarmVars.isBeingSet = 0;
 8002be8:	4b0e      	ldr	r3, [pc, #56]	; (8002c24 <updateAlarmState+0x23c>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	701a      	strb	r2, [r3, #0]
				isAlarmRunning = 1;
 8002bee:	4b0f      	ldr	r3, [pc, #60]	; (8002c2c <updateAlarmState+0x244>)
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	701a      	strb	r2, [r3, #0]
				setAlarm(alarmVars.alarmToSet, hrtc);
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <updateAlarmState+0x23c>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	0011      	movs	r1, r2
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f7fe fd49 	bl	8001694 <setAlarm>
}
 8002c02:	e009      	b.n	8002c18 <updateAlarmState+0x230>
			isAlarmRunning = 0;
 8002c04:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <updateAlarmState+0x244>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	701a      	strb	r2, [r3, #0]
			HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);
 8002c0a:	2380      	movs	r3, #128	; 0x80
 8002c0c:	005a      	lsls	r2, r3, #1
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	0011      	movs	r1, r2
 8002c12:	0018      	movs	r0, r3
 8002c14:	f003 fdd0 	bl	80067b8 <HAL_RTC_DeactivateAlarm>
}
 8002c18:	46c0      	nop			; (mov r8, r8)
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	b004      	add	sp, #16
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	20000178 	.word	0x20000178
 8002c24:	200000f4 	.word	0x200000f4
 8002c28:	2000012c 	.word	0x2000012c
 8002c2c:	20000138 	.word	0x20000138

08002c30 <updateStopwatchState>:
 * notes:
 *   using lptim now, but might need to change to use other timer as lptim might be used by adc
 *     to take regular measurements of the battery
 *   would just have to modify functions in timers.c
 */
void updateStopwatchState(TIM_HandleTypeDef *timerStopwatchTim) {
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
	if (buttons.is2Pressed) {	// start/stop
 8002c38:	4b28      	ldr	r3, [pc, #160]	; (8002cdc <updateStopwatchState+0xac>)
 8002c3a:	785b      	ldrb	r3, [r3, #1]
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d01f      	beq.n	8002c82 <updateStopwatchState+0x52>
		buttons.is2Pressed = 0;
 8002c42:	4b26      	ldr	r3, [pc, #152]	; (8002cdc <updateStopwatchState+0xac>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	705a      	strb	r2, [r3, #1]
		updateFace.stopwatch = 1;
 8002c48:	4b25      	ldr	r3, [pc, #148]	; (8002ce0 <updateStopwatchState+0xb0>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	70da      	strb	r2, [r3, #3]

		if (isStopwatchRunning == 0) {
 8002c4e:	4b25      	ldr	r3, [pc, #148]	; (8002ce4 <updateStopwatchState+0xb4>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10a      	bne.n	8002c6e <updateStopwatchState+0x3e>
			isStopwatchRunning = 1;
 8002c58:	4b22      	ldr	r3, [pc, #136]	; (8002ce4 <updateStopwatchState+0xb4>)
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	701a      	strb	r2, [r3, #0]
			isStopwatchPaused = 0;
 8002c5e:	4b22      	ldr	r3, [pc, #136]	; (8002ce8 <updateStopwatchState+0xb8>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	701a      	strb	r2, [r3, #0]
			runStopwatch(timerStopwatchTim);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	0018      	movs	r0, r3
 8002c68:	f001 f966 	bl	8003f38 <runStopwatch>
 8002c6c:	e009      	b.n	8002c82 <updateStopwatchState+0x52>
		}
		else {
			isStopwatchRunning = 0;
 8002c6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ce4 <updateStopwatchState+0xb4>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
			isStopwatchPaused = 1;
 8002c74:	4b1c      	ldr	r3, [pc, #112]	; (8002ce8 <updateStopwatchState+0xb8>)
 8002c76:	2201      	movs	r2, #1
 8002c78:	701a      	strb	r2, [r3, #0]
			pauseStopwatch(timerStopwatchTim);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f001 f9af 	bl	8003fe0 <pauseStopwatch>
		}
	}
	if (buttons.is3Pressed) {
 8002c82:	4b16      	ldr	r3, [pc, #88]	; (8002cdc <updateStopwatchState+0xac>)
 8002c84:	789b      	ldrb	r3, [r3, #2]
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00d      	beq.n	8002ca8 <updateStopwatchState+0x78>
		buttons.is3Pressed = 0;
 8002c8c:	4b13      	ldr	r3, [pc, #76]	; (8002cdc <updateStopwatchState+0xac>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	709a      	strb	r2, [r3, #2]
		updateFace.stopwatch = 1;
 8002c92:	4b13      	ldr	r3, [pc, #76]	; (8002ce0 <updateStopwatchState+0xb0>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	70da      	strb	r2, [r3, #3]

		// pull data and set lap
		stopwatchVars.lapPrev = stopwatchVars.lapCurrent;
 8002c98:	4b14      	ldr	r3, [pc, #80]	; (8002cec <updateStopwatchState+0xbc>)
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	4b13      	ldr	r3, [pc, #76]	; (8002cec <updateStopwatchState+0xbc>)
 8002c9e:	601a      	str	r2, [r3, #0]
		stopwatchVars.lapCurrent = stopwatchCounter;		// did this variable get changed to something else?
 8002ca0:	4b13      	ldr	r3, [pc, #76]	; (8002cf0 <updateStopwatchState+0xc0>)
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	4b11      	ldr	r3, [pc, #68]	; (8002cec <updateStopwatchState+0xbc>)
 8002ca6:	605a      	str	r2, [r3, #4]
	}
	if (buttons.is4Pressed) {
 8002ca8:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <updateStopwatchState+0xac>)
 8002caa:	78db      	ldrb	r3, [r3, #3]
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00f      	beq.n	8002cd2 <updateStopwatchState+0xa2>
		buttons.is4Pressed = 0;
 8002cb2:	4b0a      	ldr	r3, [pc, #40]	; (8002cdc <updateStopwatchState+0xac>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	70da      	strb	r2, [r3, #3]
		updateFace.stopwatch = 1;
 8002cb8:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <updateStopwatchState+0xb0>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	70da      	strb	r2, [r3, #3]

		// clear stopwatch hw
		isStopwatchRunning = 0;
 8002cbe:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <updateStopwatchState+0xb4>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	701a      	strb	r2, [r3, #0]
		isStopwatchPaused = 0;
 8002cc4:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <updateStopwatchState+0xb8>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	701a      	strb	r2, [r3, #0]
		clearStopwatch(timerStopwatchTim);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	0018      	movs	r0, r3
 8002cce:	f001 f99b 	bl	8004008 <clearStopwatch>
	}
}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	b002      	add	sp, #8
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	20000178 	.word	0x20000178
 8002ce0:	2000012c 	.word	0x2000012c
 8002ce4:	20000130 	.word	0x20000130
 8002ce8:	2000017d 	.word	0x2000017d
 8002cec:	200000fc 	.word	0x200000fc
 8002cf0:	20000188 	.word	0x20000188

08002cf4 <updateDisplay>:

// update screen based on global variables
// going in main, so it's executing in a while loop
//   software interrupt on flag so that this doesn't run all the time?
void updateDisplay(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
	// change faces
	if (isFaceBeingChanged == 1) {
 8002cfe:	4b51      	ldr	r3, [pc, #324]	; (8002e44 <updateDisplay+0x150>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d155      	bne.n	8002db2 <updateDisplay+0xbe>
		isFaceBeingChanged = 0;
 8002d06:	4b4f      	ldr	r3, [pc, #316]	; (8002e44 <updateDisplay+0x150>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]

		// drawing titles and boxes that won't be rewritten during normal operation within
		// a specific face (titles and buttons)
		if (faceOnDisplay == faceClock) {
 8002d0c:	4b4e      	ldr	r3, [pc, #312]	; (8002e48 <updateDisplay+0x154>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10b      	bne.n	8002d2c <updateDisplay+0x38>
			clearScreen(ST77XX_CYAN, hspi);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	4a4d      	ldr	r2, [pc, #308]	; (8002e4c <updateDisplay+0x158>)
 8002d18:	0019      	movs	r1, r3
 8002d1a:	0010      	movs	r0, r2
 8002d1c:	f7fe fc2c 	bl	8001578 <clearScreen>
			drawTitle("clock", hspi);
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	4b4b      	ldr	r3, [pc, #300]	; (8002e50 <updateDisplay+0x15c>)
 8002d24:	0011      	movs	r1, r2
 8002d26:	0018      	movs	r0, r3
 8002d28:	f000 fb8c 	bl	8003444 <drawTitle>
		}
		if (faceOnDisplay == faceTimer) {
 8002d2c:	4b46      	ldr	r3, [pc, #280]	; (8002e48 <updateDisplay+0x154>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d10c      	bne.n	8002d4e <updateDisplay+0x5a>
			clearScreen(ST77XX_GREEN, hspi);
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	23fc      	movs	r3, #252	; 0xfc
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	0011      	movs	r1, r2
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f7fe fc1b 	bl	8001578 <clearScreen>
			drawTitle("timer", hspi);
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	4b43      	ldr	r3, [pc, #268]	; (8002e54 <updateDisplay+0x160>)
 8002d46:	0011      	movs	r1, r2
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f000 fb7b 	bl	8003444 <drawTitle>
		}
		if (faceOnDisplay == faceAlarm) {
 8002d4e:	4b3e      	ldr	r3, [pc, #248]	; (8002e48 <updateDisplay+0x154>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d10b      	bne.n	8002d6e <updateDisplay+0x7a>
			clearScreen(ST77XX_MAGENTA, hspi);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	4a3f      	ldr	r2, [pc, #252]	; (8002e58 <updateDisplay+0x164>)
 8002d5a:	0019      	movs	r1, r3
 8002d5c:	0010      	movs	r0, r2
 8002d5e:	f7fe fc0b 	bl	8001578 <clearScreen>
			drawTitle("alarm", hspi);
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	4b3d      	ldr	r3, [pc, #244]	; (8002e5c <updateDisplay+0x168>)
 8002d66:	0011      	movs	r1, r2
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f000 fb6b 	bl	8003444 <drawTitle>
		}
		if (faceOnDisplay == faceStopwatch) {
 8002d6e:	4b36      	ldr	r3, [pc, #216]	; (8002e48 <updateDisplay+0x154>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b03      	cmp	r3, #3
 8002d74:	d10b      	bne.n	8002d8e <updateDisplay+0x9a>
			clearScreen(ST77XX_YELLOW, hspi);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	4a39      	ldr	r2, [pc, #228]	; (8002e60 <updateDisplay+0x16c>)
 8002d7a:	0019      	movs	r1, r3
 8002d7c:	0010      	movs	r0, r2
 8002d7e:	f7fe fbfb 	bl	8001578 <clearScreen>
			drawTitle("stopwatch", hspi);
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	4b37      	ldr	r3, [pc, #220]	; (8002e64 <updateDisplay+0x170>)
 8002d86:	0011      	movs	r1, r2
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f000 fb5b 	bl	8003444 <drawTitle>
		}

		drawButton(WIDTH/4-5, HEIGHT-20, hspi);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	001a      	movs	r2, r3
 8002d92:	218c      	movs	r1, #140	; 0x8c
 8002d94:	201b      	movs	r0, #27
 8002d96:	f000 fb11 	bl	80033bc <drawButton>
		drawButton(WIDTH/2-5, HEIGHT-20, hspi);
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	001a      	movs	r2, r3
 8002d9e:	218c      	movs	r1, #140	; 0x8c
 8002da0:	203b      	movs	r0, #59	; 0x3b
 8002da2:	f000 fb0b 	bl	80033bc <drawButton>
		drawButton(WIDTH/4*3-5, HEIGHT-20, hspi);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	001a      	movs	r2, r3
 8002daa:	218c      	movs	r1, #140	; 0x8c
 8002dac:	205b      	movs	r0, #91	; 0x5b
 8002dae:	f000 fb05 	bl	80033bc <drawButton>
	}

	// update clock face
	if (faceOnDisplay == faceClock) {
 8002db2:	4b25      	ldr	r3, [pc, #148]	; (8002e48 <updateDisplay+0x154>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10e      	bne.n	8002dd8 <updateDisplay+0xe4>
		if (updateFace.clock == 1) {
 8002dba:	4b2b      	ldr	r3, [pc, #172]	; (8002e68 <updateDisplay+0x174>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d13b      	bne.n	8002e3c <updateDisplay+0x148>
			updateFace.clock = 0;
 8002dc4:	4b28      	ldr	r3, [pc, #160]	; (8002e68 <updateDisplay+0x174>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	701a      	strb	r2, [r3, #0]
			updateClockDisplay(hrtc, hspi);
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	0011      	movs	r1, r2
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f000 f84b 	bl	8002e6c <updateClockDisplay>
		if (updateFace.stopwatch == 1) {
			updateFace.stopwatch = 0;
			updateStopwatchDisplay(hspi);
		}
	}
}
 8002dd6:	e031      	b.n	8002e3c <updateDisplay+0x148>
	else if (faceOnDisplay == faceTimer) {
 8002dd8:	4b1b      	ldr	r3, [pc, #108]	; (8002e48 <updateDisplay+0x154>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d10c      	bne.n	8002dfa <updateDisplay+0x106>
		if (updateFace.timer == 1) {
 8002de0:	4b21      	ldr	r3, [pc, #132]	; (8002e68 <updateDisplay+0x174>)
 8002de2:	785b      	ldrb	r3, [r3, #1]
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d128      	bne.n	8002e3c <updateDisplay+0x148>
			updateFace.timer = 0;
 8002dea:	4b1f      	ldr	r3, [pc, #124]	; (8002e68 <updateDisplay+0x174>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	705a      	strb	r2, [r3, #1]
			updateTimerDisplay(hspi);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	0018      	movs	r0, r3
 8002df4:	f000 f8d8 	bl	8002fa8 <updateTimerDisplay>
}
 8002df8:	e020      	b.n	8002e3c <updateDisplay+0x148>
	else if (faceOnDisplay == faceAlarm) {
 8002dfa:	4b13      	ldr	r3, [pc, #76]	; (8002e48 <updateDisplay+0x154>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d10c      	bne.n	8002e1c <updateDisplay+0x128>
		if (updateFace.alarm == 1) {
 8002e02:	4b19      	ldr	r3, [pc, #100]	; (8002e68 <updateDisplay+0x174>)
 8002e04:	789b      	ldrb	r3, [r3, #2]
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d117      	bne.n	8002e3c <updateDisplay+0x148>
			updateFace.alarm = 0;
 8002e0c:	4b16      	ldr	r3, [pc, #88]	; (8002e68 <updateDisplay+0x174>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	709a      	strb	r2, [r3, #2]
			updateAlarmDisplay(hspi);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	0018      	movs	r0, r3
 8002e16:	f000 f9c7 	bl	80031a8 <updateAlarmDisplay>
}
 8002e1a:	e00f      	b.n	8002e3c <updateDisplay+0x148>
	else if (faceOnDisplay == faceStopwatch) {
 8002e1c:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <updateDisplay+0x154>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b03      	cmp	r3, #3
 8002e22:	d10b      	bne.n	8002e3c <updateDisplay+0x148>
		if (updateFace.stopwatch == 1) {
 8002e24:	4b10      	ldr	r3, [pc, #64]	; (8002e68 <updateDisplay+0x174>)
 8002e26:	78db      	ldrb	r3, [r3, #3]
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d106      	bne.n	8002e3c <updateDisplay+0x148>
			updateFace.stopwatch = 0;
 8002e2e:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <updateDisplay+0x174>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	70da      	strb	r2, [r3, #3]
			updateStopwatchDisplay(hspi);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	0018      	movs	r0, r3
 8002e38:	f000 fa70 	bl	800331c <updateStopwatchDisplay>
}
 8002e3c:	46c0      	nop			; (mov r8, r8)
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	b002      	add	sp, #8
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	20000104 	.word	0x20000104
 8002e48:	20000105 	.word	0x20000105
 8002e4c:	000007ff 	.word	0x000007ff
 8002e50:	08008b4c 	.word	0x08008b4c
 8002e54:	08008b54 	.word	0x08008b54
 8002e58:	0000f81f 	.word	0x0000f81f
 8002e5c:	08008b5c 	.word	0x08008b5c
 8002e60:	0000ffe0 	.word	0x0000ffe0
 8002e64:	08008b64 	.word	0x08008b64
 8002e68:	2000012c 	.word	0x2000012c

08002e6c <updateClockDisplay>:

void updateClockDisplay(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
	struct dates *currentDate;
	struct times *currentTime;

	if (clockVars.isBeingSet == 0) {
 8002e76:	4b41      	ldr	r3, [pc, #260]	; (8002f7c <updateClockDisplay+0x110>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d11f      	bne.n	8002ebe <updateClockDisplay+0x52>
		getDateTime(currentDate, currentTime, hrtc);
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	68b9      	ldr	r1, [r7, #8]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	0018      	movs	r0, r3
 8002e86:	f7fe fd49 	bl	800191c <getDateTime>
		drawClock(currentDate, currentTime, hspi);
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	68b9      	ldr	r1, [r7, #8]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	0018      	movs	r0, r3
 8002e92:	f000 fb57 	bl	8003544 <drawClock>

		setTextSize(1);
 8002e96:	2001      	movs	r0, #1
 8002e98:	f7fe fb4e 	bl	8001538 <setTextSize>
		// clear line that says "setting ___"
		clearTextLine(52, hspi);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	0019      	movs	r1, r3
 8002ea0:	2034      	movs	r0, #52	; 0x34
 8002ea2:	f7fd ff91 	bl	8000dc8 <clearTextLine>

		// draw button text
		clearTextLine(HEIGHT-28, hspi);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	0019      	movs	r1, r3
 8002eaa:	2084      	movs	r0, #132	; 0x84
 8002eac:	f7fd ff8c 	bl	8000dc8 <clearTextLine>
		drawCenteredText(WIDTH*3/4, HEIGHT-28, "set", hspi);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	4a33      	ldr	r2, [pc, #204]	; (8002f80 <updateClockDisplay+0x114>)
 8002eb4:	2184      	movs	r1, #132	; 0x84
 8002eb6:	2060      	movs	r0, #96	; 0x60
 8002eb8:	f7fd ff24 	bl	8000d04 <drawCenteredText>
			default: break;
		}

		drawClock(clockVars.dateToSet, clockVars.timeToSet, hspi);
	}
}
 8002ebc:	e05a      	b.n	8002f74 <updateClockDisplay+0x108>
	else if (clockVars.isBeingSet == 1) {
 8002ebe:	4b2f      	ldr	r3, [pc, #188]	; (8002f7c <updateClockDisplay+0x110>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d156      	bne.n	8002f74 <updateClockDisplay+0x108>
		setTextSize(1);
 8002ec6:	2001      	movs	r0, #1
 8002ec8:	f7fe fb36 	bl	8001538 <setTextSize>
		clearTextLine(HEIGHT-28, hspi);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	0019      	movs	r1, r3
 8002ed0:	2084      	movs	r0, #132	; 0x84
 8002ed2:	f7fd ff79 	bl	8000dc8 <clearTextLine>
		drawCenteredText(WIDTH/4, HEIGHT-28, "up", hspi);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	4a2a      	ldr	r2, [pc, #168]	; (8002f84 <updateClockDisplay+0x118>)
 8002eda:	2184      	movs	r1, #132	; 0x84
 8002edc:	2020      	movs	r0, #32
 8002ede:	f7fd ff11 	bl	8000d04 <drawCenteredText>
		drawCenteredText(WIDTH/2, HEIGHT-28, "down", hspi);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	4a28      	ldr	r2, [pc, #160]	; (8002f88 <updateClockDisplay+0x11c>)
 8002ee6:	2184      	movs	r1, #132	; 0x84
 8002ee8:	2040      	movs	r0, #64	; 0x40
 8002eea:	f7fd ff0b 	bl	8000d04 <drawCenteredText>
		drawCenteredText(WIDTH*3/4, HEIGHT-28, "change", hspi);
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	4a26      	ldr	r2, [pc, #152]	; (8002f8c <updateClockDisplay+0x120>)
 8002ef2:	2184      	movs	r1, #132	; 0x84
 8002ef4:	2060      	movs	r0, #96	; 0x60
 8002ef6:	f7fd ff05 	bl	8000d04 <drawCenteredText>
		clearTextLine(52, hspi);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	0019      	movs	r1, r3
 8002efe:	2034      	movs	r0, #52	; 0x34
 8002f00:	f7fd ff62 	bl	8000dc8 <clearTextLine>
		setTextSize(1);
 8002f04:	2001      	movs	r0, #1
 8002f06:	f7fe fb17 	bl	8001538 <setTextSize>
		switch (clockVars.fieldBeingSet) {
 8002f0a:	4b1c      	ldr	r3, [pc, #112]	; (8002f7c <updateClockDisplay+0x110>)
 8002f0c:	785b      	ldrb	r3, [r3, #1]
 8002f0e:	2b05      	cmp	r3, #5
 8002f10:	d827      	bhi.n	8002f62 <updateClockDisplay+0xf6>
 8002f12:	009a      	lsls	r2, r3, #2
 8002f14:	4b1e      	ldr	r3, [pc, #120]	; (8002f90 <updateClockDisplay+0x124>)
 8002f16:	18d3      	adds	r3, r2, r3
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	469f      	mov	pc, r3
			case 1:	drawCenteredText(WIDTH/2, 52, "setting minute...", hspi); break;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	4a1d      	ldr	r2, [pc, #116]	; (8002f94 <updateClockDisplay+0x128>)
 8002f20:	2134      	movs	r1, #52	; 0x34
 8002f22:	2040      	movs	r0, #64	; 0x40
 8002f24:	f7fd feee 	bl	8000d04 <drawCenteredText>
 8002f28:	e01c      	b.n	8002f64 <updateClockDisplay+0xf8>
			case 2:	drawCenteredText(WIDTH/2, 52, "setting hour...", hspi);	break;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	4a1a      	ldr	r2, [pc, #104]	; (8002f98 <updateClockDisplay+0x12c>)
 8002f2e:	2134      	movs	r1, #52	; 0x34
 8002f30:	2040      	movs	r0, #64	; 0x40
 8002f32:	f7fd fee7 	bl	8000d04 <drawCenteredText>
 8002f36:	e015      	b.n	8002f64 <updateClockDisplay+0xf8>
			case 3: drawCenteredText(WIDTH/2, 52, "setting year...", hspi); break;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	4a18      	ldr	r2, [pc, #96]	; (8002f9c <updateClockDisplay+0x130>)
 8002f3c:	2134      	movs	r1, #52	; 0x34
 8002f3e:	2040      	movs	r0, #64	; 0x40
 8002f40:	f7fd fee0 	bl	8000d04 <drawCenteredText>
 8002f44:	e00e      	b.n	8002f64 <updateClockDisplay+0xf8>
			case 4: drawCenteredText(WIDTH/2, 52, "setting month...", hspi); break;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	4a15      	ldr	r2, [pc, #84]	; (8002fa0 <updateClockDisplay+0x134>)
 8002f4a:	2134      	movs	r1, #52	; 0x34
 8002f4c:	2040      	movs	r0, #64	; 0x40
 8002f4e:	f7fd fed9 	bl	8000d04 <drawCenteredText>
 8002f52:	e007      	b.n	8002f64 <updateClockDisplay+0xf8>
			case 5: drawCenteredText(WIDTH/2, 52, "setting date...", hspi); break;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	4a13      	ldr	r2, [pc, #76]	; (8002fa4 <updateClockDisplay+0x138>)
 8002f58:	2134      	movs	r1, #52	; 0x34
 8002f5a:	2040      	movs	r0, #64	; 0x40
 8002f5c:	f7fd fed2 	bl	8000d04 <drawCenteredText>
 8002f60:	e000      	b.n	8002f64 <updateClockDisplay+0xf8>
			default: break;
 8002f62:	46c0      	nop			; (mov r8, r8)
		drawClock(clockVars.dateToSet, clockVars.timeToSet, hspi);
 8002f64:	4b05      	ldr	r3, [pc, #20]	; (8002f7c <updateClockDisplay+0x110>)
 8002f66:	6858      	ldr	r0, [r3, #4]
 8002f68:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <updateClockDisplay+0x110>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	0019      	movs	r1, r3
 8002f70:	f000 fae8 	bl	8003544 <drawClock>
}
 8002f74:	46c0      	nop			; (mov r8, r8)
 8002f76:	46bd      	mov	sp, r7
 8002f78:	b004      	add	sp, #16
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	200000e0 	.word	0x200000e0
 8002f80:	08008b70 	.word	0x08008b70
 8002f84:	08008b74 	.word	0x08008b74
 8002f88:	08008b78 	.word	0x08008b78
 8002f8c:	08008b80 	.word	0x08008b80
 8002f90:	080091c8 	.word	0x080091c8
 8002f94:	08008b88 	.word	0x08008b88
 8002f98:	08008b9c 	.word	0x08008b9c
 8002f9c:	08008bac 	.word	0x08008bac
 8002fa0:	08008bbc 	.word	0x08008bbc
 8002fa4:	08008bd0 	.word	0x08008bd0

08002fa8 <updateTimerDisplay>:

void updateTimerDisplay(SPI_HandleTypeDef *hspi) {
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
	struct times *currentTimer;
	uint32_t timerVal;

	if (timerVars.isBeingSet == 0) {
 8002fb0:	4b6c      	ldr	r3, [pc, #432]	; (8003164 <updateTimerDisplay+0x1bc>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d000      	beq.n	8002fba <updateTimerDisplay+0x12>
 8002fb8:	e088      	b.n	80030cc <updateTimerDisplay+0x124>
		if (timerVars.isSet == 0) {
 8002fba:	4b6a      	ldr	r3, [pc, #424]	; (8003164 <updateTimerDisplay+0x1bc>)
 8002fbc:	789b      	ldrb	r3, [r3, #2]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d119      	bne.n	8002ff6 <updateTimerDisplay+0x4e>
			// write "timer unset"
			setTextSize(1);
 8002fc2:	2001      	movs	r0, #1
 8002fc4:	f7fe fab8 	bl	8001538 <setTextSize>
			clearTextLine(84, hspi);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	0019      	movs	r1, r3
 8002fcc:	2054      	movs	r0, #84	; 0x54
 8002fce:	f7fd fefb 	bl	8000dc8 <clearTextLine>
			drawCenteredText(WIDTH/2, 84, "timer unset", hspi);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a64      	ldr	r2, [pc, #400]	; (8003168 <updateTimerDisplay+0x1c0>)
 8002fd6:	2154      	movs	r1, #84	; 0x54
 8002fd8:	2040      	movs	r0, #64	; 0x40
 8002fda:	f7fd fe93 	bl	8000d04 <drawCenteredText>

			// draw button text
			clearTextLine(HEIGHT-28, hspi);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	0019      	movs	r1, r3
 8002fe2:	2084      	movs	r0, #132	; 0x84
 8002fe4:	f7fd fef0 	bl	8000dc8 <clearTextLine>
			drawCenteredText(WIDTH*3/4, HEIGHT-28, "set", hspi);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a60      	ldr	r2, [pc, #384]	; (800316c <updateTimerDisplay+0x1c4>)
 8002fec:	2184      	movs	r1, #132	; 0x84
 8002fee:	2060      	movs	r0, #96	; 0x60
 8002ff0:	f7fd fe88 	bl	8000d04 <drawCenteredText>
			default: break;
		}

		drawTimer(timerVars.timeToSet, hspi);
	}
}
 8002ff4:	e0b2      	b.n	800315c <updateTimerDisplay+0x1b4>
			timerVal = watchTimerSeconds;
 8002ff6:	4b5e      	ldr	r3, [pc, #376]	; (8003170 <updateTimerDisplay+0x1c8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	60fb      	str	r3, [r7, #12]
			currentTimer->hr = timerVal/3600;
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	23e1      	movs	r3, #225	; 0xe1
 8003000:	0119      	lsls	r1, r3, #4
 8003002:	0010      	movs	r0, r2
 8003004:	f7fd f888 	bl	8000118 <__udivsi3>
 8003008:	0003      	movs	r3, r0
 800300a:	b2da      	uxtb	r2, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	701a      	strb	r2, [r3, #0]
			timerVal %= 3600;
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	23e1      	movs	r3, #225	; 0xe1
 8003014:	0119      	lsls	r1, r3, #4
 8003016:	0010      	movs	r0, r2
 8003018:	f7fd f904 	bl	8000224 <__aeabi_uidivmod>
 800301c:	000b      	movs	r3, r1
 800301e:	60fb      	str	r3, [r7, #12]
			currentTimer->min = timerVal/60;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	213c      	movs	r1, #60	; 0x3c
 8003024:	0018      	movs	r0, r3
 8003026:	f7fd f877 	bl	8000118 <__udivsi3>
 800302a:	0003      	movs	r3, r0
 800302c:	b2da      	uxtb	r2, r3
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	705a      	strb	r2, [r3, #1]
			timerVal %= 60;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	213c      	movs	r1, #60	; 0x3c
 8003036:	0018      	movs	r0, r3
 8003038:	f7fd f8f4 	bl	8000224 <__aeabi_uidivmod>
 800303c:	000b      	movs	r3, r1
 800303e:	60fb      	str	r3, [r7, #12]
			currentTimer->sec = timerVal;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	b2da      	uxtb	r2, r3
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	709a      	strb	r2, [r3, #2]
			drawTimer(currentTimer, hspi);
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	0011      	movs	r1, r2
 800304e:	0018      	movs	r0, r3
 8003050:	f000 fafe 	bl	8003650 <drawTimer>
			setTextSize(1);
 8003054:	2001      	movs	r0, #1
 8003056:	f7fe fa6f 	bl	8001538 <setTextSize>
			if (isTimerRunning == 0 && watchTimerSeconds != 0) {
 800305a:	4b46      	ldr	r3, [pc, #280]	; (8003174 <updateTimerDisplay+0x1cc>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10a      	bne.n	800307a <updateTimerDisplay+0xd2>
 8003064:	4b42      	ldr	r3, [pc, #264]	; (8003170 <updateTimerDisplay+0x1c8>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d006      	beq.n	800307a <updateTimerDisplay+0xd2>
				drawCenteredText(WIDTH/2, 84, "timer set!", hspi);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a42      	ldr	r2, [pc, #264]	; (8003178 <updateTimerDisplay+0x1d0>)
 8003070:	2154      	movs	r1, #84	; 0x54
 8003072:	2040      	movs	r0, #64	; 0x40
 8003074:	f7fd fe46 	bl	8000d04 <drawCenteredText>
 8003078:	e010      	b.n	800309c <updateTimerDisplay+0xf4>
			else if (isTimerPaused == 1) {
 800307a:	4b40      	ldr	r3, [pc, #256]	; (800317c <updateTimerDisplay+0x1d4>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b01      	cmp	r3, #1
 8003082:	d106      	bne.n	8003092 <updateTimerDisplay+0xea>
				drawCenteredText(WIDTH/2, 84, "timer paused", hspi);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a3e      	ldr	r2, [pc, #248]	; (8003180 <updateTimerDisplay+0x1d8>)
 8003088:	2154      	movs	r1, #84	; 0x54
 800308a:	2040      	movs	r0, #64	; 0x40
 800308c:	f7fd fe3a 	bl	8000d04 <drawCenteredText>
 8003090:	e004      	b.n	800309c <updateTimerDisplay+0xf4>
				clearTextLine(84, hspi);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	0019      	movs	r1, r3
 8003096:	2054      	movs	r0, #84	; 0x54
 8003098:	f7fd fe96 	bl	8000dc8 <clearTextLine>
			clearTextLine(HEIGHT-28, hspi);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	0019      	movs	r1, r3
 80030a0:	2084      	movs	r0, #132	; 0x84
 80030a2:	f7fd fe91 	bl	8000dc8 <clearTextLine>
			drawCenteredText(WIDTH/4, HEIGHT-28, "run", hspi);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a36      	ldr	r2, [pc, #216]	; (8003184 <updateTimerDisplay+0x1dc>)
 80030aa:	2184      	movs	r1, #132	; 0x84
 80030ac:	2020      	movs	r0, #32
 80030ae:	f7fd fe29 	bl	8000d04 <drawCenteredText>
			drawCenteredText(WIDTH/2, HEIGHT-28, "pause", hspi);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a34      	ldr	r2, [pc, #208]	; (8003188 <updateTimerDisplay+0x1e0>)
 80030b6:	2184      	movs	r1, #132	; 0x84
 80030b8:	2040      	movs	r0, #64	; 0x40
 80030ba:	f7fd fe23 	bl	8000d04 <drawCenteredText>
			drawCenteredText(WIDTH*3/4, HEIGHT-28, "clear", hspi);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a32      	ldr	r2, [pc, #200]	; (800318c <updateTimerDisplay+0x1e4>)
 80030c2:	2184      	movs	r1, #132	; 0x84
 80030c4:	2060      	movs	r0, #96	; 0x60
 80030c6:	f7fd fe1d 	bl	8000d04 <drawCenteredText>
}
 80030ca:	e047      	b.n	800315c <updateTimerDisplay+0x1b4>
	else if (timerVars.isBeingSet == 1) {
 80030cc:	4b25      	ldr	r3, [pc, #148]	; (8003164 <updateTimerDisplay+0x1bc>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d143      	bne.n	800315c <updateTimerDisplay+0x1b4>
		setTextSize(1);
 80030d4:	2001      	movs	r0, #1
 80030d6:	f7fe fa2f 	bl	8001538 <setTextSize>
		clearTextLine(HEIGHT-28, hspi);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	0019      	movs	r1, r3
 80030de:	2084      	movs	r0, #132	; 0x84
 80030e0:	f7fd fe72 	bl	8000dc8 <clearTextLine>
		drawCenteredText(WIDTH/4, HEIGHT-28, "up", hspi);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a2a      	ldr	r2, [pc, #168]	; (8003190 <updateTimerDisplay+0x1e8>)
 80030e8:	2184      	movs	r1, #132	; 0x84
 80030ea:	2020      	movs	r0, #32
 80030ec:	f7fd fe0a 	bl	8000d04 <drawCenteredText>
		drawCenteredText(WIDTH/2, HEIGHT-28, "down", hspi);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a28      	ldr	r2, [pc, #160]	; (8003194 <updateTimerDisplay+0x1ec>)
 80030f4:	2184      	movs	r1, #132	; 0x84
 80030f6:	2040      	movs	r0, #64	; 0x40
 80030f8:	f7fd fe04 	bl	8000d04 <drawCenteredText>
		drawCenteredText(WIDTH*3/4, HEIGHT-28, "change", hspi);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a26      	ldr	r2, [pc, #152]	; (8003198 <updateTimerDisplay+0x1f0>)
 8003100:	2184      	movs	r1, #132	; 0x84
 8003102:	2060      	movs	r0, #96	; 0x60
 8003104:	f7fd fdfe 	bl	8000d04 <drawCenteredText>
		clearTextLine(60, hspi);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	0019      	movs	r1, r3
 800310c:	203c      	movs	r0, #60	; 0x3c
 800310e:	f7fd fe5b 	bl	8000dc8 <clearTextLine>
		switch (timerVars.fieldBeingSet) {
 8003112:	4b14      	ldr	r3, [pc, #80]	; (8003164 <updateTimerDisplay+0x1bc>)
 8003114:	785b      	ldrb	r3, [r3, #1]
 8003116:	2b02      	cmp	r3, #2
 8003118:	d00b      	beq.n	8003132 <updateTimerDisplay+0x18a>
 800311a:	2b03      	cmp	r3, #3
 800311c:	d010      	beq.n	8003140 <updateTimerDisplay+0x198>
 800311e:	2b01      	cmp	r3, #1
 8003120:	d000      	beq.n	8003124 <updateTimerDisplay+0x17c>
			default: break;
 8003122:	e014      	b.n	800314e <updateTimerDisplay+0x1a6>
			case 1: drawCenteredText(WIDTH/2, 60, "setting hour...", hspi); break;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a1d      	ldr	r2, [pc, #116]	; (800319c <updateTimerDisplay+0x1f4>)
 8003128:	213c      	movs	r1, #60	; 0x3c
 800312a:	2040      	movs	r0, #64	; 0x40
 800312c:	f7fd fdea 	bl	8000d04 <drawCenteredText>
 8003130:	e00d      	b.n	800314e <updateTimerDisplay+0x1a6>
			case 2: drawCenteredText(WIDTH/2, 60, "setting minute...", hspi); break;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a1a      	ldr	r2, [pc, #104]	; (80031a0 <updateTimerDisplay+0x1f8>)
 8003136:	213c      	movs	r1, #60	; 0x3c
 8003138:	2040      	movs	r0, #64	; 0x40
 800313a:	f7fd fde3 	bl	8000d04 <drawCenteredText>
 800313e:	e006      	b.n	800314e <updateTimerDisplay+0x1a6>
			case 3: drawCenteredText(WIDTH/2, 60, "setting second...", hspi); break;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a18      	ldr	r2, [pc, #96]	; (80031a4 <updateTimerDisplay+0x1fc>)
 8003144:	213c      	movs	r1, #60	; 0x3c
 8003146:	2040      	movs	r0, #64	; 0x40
 8003148:	f7fd fddc 	bl	8000d04 <drawCenteredText>
 800314c:	46c0      	nop			; (mov r8, r8)
		drawTimer(timerVars.timeToSet, hspi);
 800314e:	4b05      	ldr	r3, [pc, #20]	; (8003164 <updateTimerDisplay+0x1bc>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	0011      	movs	r1, r2
 8003156:	0018      	movs	r0, r3
 8003158:	f000 fa7a 	bl	8003650 <drawTimer>
}
 800315c:	46c0      	nop			; (mov r8, r8)
 800315e:	46bd      	mov	sp, r7
 8003160:	b004      	add	sp, #16
 8003162:	bd80      	pop	{r7, pc}
 8003164:	200000ec 	.word	0x200000ec
 8003168:	08008be0 	.word	0x08008be0
 800316c:	08008b70 	.word	0x08008b70
 8003170:	20000180 	.word	0x20000180
 8003174:	2000017c 	.word	0x2000017c
 8003178:	08008bec 	.word	0x08008bec
 800317c:	20000184 	.word	0x20000184
 8003180:	08008bf8 	.word	0x08008bf8
 8003184:	08008c08 	.word	0x08008c08
 8003188:	08008c0c 	.word	0x08008c0c
 800318c:	08008c14 	.word	0x08008c14
 8003190:	08008b74 	.word	0x08008b74
 8003194:	08008b78 	.word	0x08008b78
 8003198:	08008b80 	.word	0x08008b80
 800319c:	08008b9c 	.word	0x08008b9c
 80031a0:	08008b88 	.word	0x08008b88
 80031a4:	08008c1c 	.word	0x08008c1c

080031a8 <updateAlarmDisplay>:

void updateAlarmDisplay(SPI_HandleTypeDef *hspi) {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
	if (alarmVars.isBeingSet == 0) {
 80031b0:	4b4e      	ldr	r3, [pc, #312]	; (80032ec <updateAlarmDisplay+0x144>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d147      	bne.n	8003248 <updateAlarmDisplay+0xa0>
		if (isAlarmRunning == 0) {
 80031b8:	4b4d      	ldr	r3, [pc, #308]	; (80032f0 <updateAlarmDisplay+0x148>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d121      	bne.n	8003206 <updateAlarmDisplay+0x5e>
			setTextSize(3);
 80031c2:	2003      	movs	r0, #3
 80031c4:	f7fe f9b8 	bl	8001538 <setTextSize>
			clearTextLine(68, hspi);	// clear alarm time text
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	0019      	movs	r1, r3
 80031cc:	2044      	movs	r0, #68	; 0x44
 80031ce:	f7fd fdfb 	bl	8000dc8 <clearTextLine>

			setTextSize(1);
 80031d2:	2001      	movs	r0, #1
 80031d4:	f7fe f9b0 	bl	8001538 <setTextSize>
			clearTextLine(92, hspi);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	0019      	movs	r1, r3
 80031dc:	205c      	movs	r0, #92	; 0x5c
 80031de:	f7fd fdf3 	bl	8000dc8 <clearTextLine>
			drawCenteredText(WIDTH/2, 92, "alarm unset", hspi);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a43      	ldr	r2, [pc, #268]	; (80032f4 <updateAlarmDisplay+0x14c>)
 80031e6:	215c      	movs	r1, #92	; 0x5c
 80031e8:	2040      	movs	r0, #64	; 0x40
 80031ea:	f7fd fd8b 	bl	8000d04 <drawCenteredText>

			// draw button text
			clearTextLine(HEIGHT-28, hspi);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	0019      	movs	r1, r3
 80031f2:	2084      	movs	r0, #132	; 0x84
 80031f4:	f7fd fde8 	bl	8000dc8 <clearTextLine>
			drawCenteredText(WIDTH*3/4, HEIGHT-28, "clear", hspi);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a3f      	ldr	r2, [pc, #252]	; (80032f8 <updateAlarmDisplay+0x150>)
 80031fc:	2184      	movs	r1, #132	; 0x84
 80031fe:	2060      	movs	r0, #96	; 0x60
 8003200:	f7fd fd80 	bl	8000d04 <drawCenteredText>
		drawCenteredText(WIDTH/2, HEIGHT-28, "down", hspi);
		drawCenteredText(WIDTH*3/4, HEIGHT-28, "change", hspi);

		drawAlarm(alarmVars.alarmToSet, hspi);
	}
}
 8003204:	e06e      	b.n	80032e4 <updateAlarmDisplay+0x13c>
			setTextSize(1);
 8003206:	2001      	movs	r0, #1
 8003208:	f7fe f996 	bl	8001538 <setTextSize>
			clearTextLine(92, hspi);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	0019      	movs	r1, r3
 8003210:	205c      	movs	r0, #92	; 0x5c
 8003212:	f7fd fdd9 	bl	8000dc8 <clearTextLine>
			drawCenteredText(WIDTH/2, 92, "alarm set", hspi);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a38      	ldr	r2, [pc, #224]	; (80032fc <updateAlarmDisplay+0x154>)
 800321a:	215c      	movs	r1, #92	; 0x5c
 800321c:	2040      	movs	r0, #64	; 0x40
 800321e:	f7fd fd71 	bl	8000d04 <drawCenteredText>
			drawAlarm(alarmVars.alarmToSet, hspi);
 8003222:	4b32      	ldr	r3, [pc, #200]	; (80032ec <updateAlarmDisplay+0x144>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	0011      	movs	r1, r2
 800322a:	0018      	movs	r0, r3
 800322c:	f000 fa38 	bl	80036a0 <drawAlarm>
			clearTextLine(HEIGHT-28, hspi);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	0019      	movs	r1, r3
 8003234:	2084      	movs	r0, #132	; 0x84
 8003236:	f7fd fdc7 	bl	8000dc8 <clearTextLine>
			drawCenteredText(WIDTH*3/4, HEIGHT-28, "clear", hspi);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a2e      	ldr	r2, [pc, #184]	; (80032f8 <updateAlarmDisplay+0x150>)
 800323e:	2184      	movs	r1, #132	; 0x84
 8003240:	2060      	movs	r0, #96	; 0x60
 8003242:	f7fd fd5f 	bl	8000d04 <drawCenteredText>
}
 8003246:	e04d      	b.n	80032e4 <updateAlarmDisplay+0x13c>
	else if (alarmVars.isBeingSet == 1) {
 8003248:	4b28      	ldr	r3, [pc, #160]	; (80032ec <updateAlarmDisplay+0x144>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d149      	bne.n	80032e4 <updateAlarmDisplay+0x13c>
		setTextSize(1);
 8003250:	2001      	movs	r0, #1
 8003252:	f7fe f971 	bl	8001538 <setTextSize>
		switch (alarmVars.fieldBeingSet) {
 8003256:	4b25      	ldr	r3, [pc, #148]	; (80032ec <updateAlarmDisplay+0x144>)
 8003258:	785b      	ldrb	r3, [r3, #1]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d00f      	beq.n	800327e <updateAlarmDisplay+0xd6>
 800325e:	dc02      	bgt.n	8003266 <updateAlarmDisplay+0xbe>
 8003260:	2b01      	cmp	r3, #1
 8003262:	d005      	beq.n	8003270 <updateAlarmDisplay+0xc8>
			default: break;
 8003264:	e020      	b.n	80032a8 <updateAlarmDisplay+0x100>
		switch (alarmVars.fieldBeingSet) {
 8003266:	2b03      	cmp	r3, #3
 8003268:	d010      	beq.n	800328c <updateAlarmDisplay+0xe4>
 800326a:	2b04      	cmp	r3, #4
 800326c:	d015      	beq.n	800329a <updateAlarmDisplay+0xf2>
			default: break;
 800326e:	e01b      	b.n	80032a8 <updateAlarmDisplay+0x100>
			case 1: drawCenteredText(WIDTH/2, 60, "setting second...", hspi); break;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a23      	ldr	r2, [pc, #140]	; (8003300 <updateAlarmDisplay+0x158>)
 8003274:	213c      	movs	r1, #60	; 0x3c
 8003276:	2040      	movs	r0, #64	; 0x40
 8003278:	f7fd fd44 	bl	8000d04 <drawCenteredText>
 800327c:	e014      	b.n	80032a8 <updateAlarmDisplay+0x100>
			case 2: drawCenteredText(WIDTH/2, 60, "setting minute...", hspi); break;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a20      	ldr	r2, [pc, #128]	; (8003304 <updateAlarmDisplay+0x15c>)
 8003282:	213c      	movs	r1, #60	; 0x3c
 8003284:	2040      	movs	r0, #64	; 0x40
 8003286:	f7fd fd3d 	bl	8000d04 <drawCenteredText>
 800328a:	e00d      	b.n	80032a8 <updateAlarmDisplay+0x100>
			case 3: drawCenteredText(WIDTH/2, 60, "setting hour...", hspi); break;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a1e      	ldr	r2, [pc, #120]	; (8003308 <updateAlarmDisplay+0x160>)
 8003290:	213c      	movs	r1, #60	; 0x3c
 8003292:	2040      	movs	r0, #64	; 0x40
 8003294:	f7fd fd36 	bl	8000d04 <drawCenteredText>
 8003298:	e006      	b.n	80032a8 <updateAlarmDisplay+0x100>
			case 4: drawCenteredText(WIDTH/2, 60, "setting day...", hspi); break;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a1b      	ldr	r2, [pc, #108]	; (800330c <updateAlarmDisplay+0x164>)
 800329e:	213c      	movs	r1, #60	; 0x3c
 80032a0:	2040      	movs	r0, #64	; 0x40
 80032a2:	f7fd fd2f 	bl	8000d04 <drawCenteredText>
 80032a6:	46c0      	nop			; (mov r8, r8)
		clearTextLine(HEIGHT-28, hspi);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	0019      	movs	r1, r3
 80032ac:	2084      	movs	r0, #132	; 0x84
 80032ae:	f7fd fd8b 	bl	8000dc8 <clearTextLine>
		drawCenteredText(WIDTH/4, HEIGHT-28, "up", hspi);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a16      	ldr	r2, [pc, #88]	; (8003310 <updateAlarmDisplay+0x168>)
 80032b6:	2184      	movs	r1, #132	; 0x84
 80032b8:	2020      	movs	r0, #32
 80032ba:	f7fd fd23 	bl	8000d04 <drawCenteredText>
		drawCenteredText(WIDTH/2, HEIGHT-28, "down", hspi);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a14      	ldr	r2, [pc, #80]	; (8003314 <updateAlarmDisplay+0x16c>)
 80032c2:	2184      	movs	r1, #132	; 0x84
 80032c4:	2040      	movs	r0, #64	; 0x40
 80032c6:	f7fd fd1d 	bl	8000d04 <drawCenteredText>
		drawCenteredText(WIDTH*3/4, HEIGHT-28, "change", hspi);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a12      	ldr	r2, [pc, #72]	; (8003318 <updateAlarmDisplay+0x170>)
 80032ce:	2184      	movs	r1, #132	; 0x84
 80032d0:	2060      	movs	r0, #96	; 0x60
 80032d2:	f7fd fd17 	bl	8000d04 <drawCenteredText>
		drawAlarm(alarmVars.alarmToSet, hspi);
 80032d6:	4b05      	ldr	r3, [pc, #20]	; (80032ec <updateAlarmDisplay+0x144>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	0011      	movs	r1, r2
 80032de:	0018      	movs	r0, r3
 80032e0:	f000 f9de 	bl	80036a0 <drawAlarm>
}
 80032e4:	46c0      	nop			; (mov r8, r8)
 80032e6:	46bd      	mov	sp, r7
 80032e8:	b002      	add	sp, #8
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	200000f4 	.word	0x200000f4
 80032f0:	20000138 	.word	0x20000138
 80032f4:	08008c30 	.word	0x08008c30
 80032f8:	08008c14 	.word	0x08008c14
 80032fc:	08008c3c 	.word	0x08008c3c
 8003300:	08008c1c 	.word	0x08008c1c
 8003304:	08008b88 	.word	0x08008b88
 8003308:	08008b9c 	.word	0x08008b9c
 800330c:	08008c48 	.word	0x08008c48
 8003310:	08008b74 	.word	0x08008b74
 8003314:	08008b78 	.word	0x08008b78
 8003318:	08008b80 	.word	0x08008b80

0800331c <updateStopwatchDisplay>:

void updateStopwatchDisplay(SPI_HandleTypeDef *hspi) {
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
	drawStopwatch(stopwatchCounter, hspi);
 8003324:	4b1e      	ldr	r3, [pc, #120]	; (80033a0 <updateStopwatchDisplay+0x84>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	0011      	movs	r1, r2
 800332c:	0018      	movs	r0, r3
 800332e:	f000 f9f3 	bl	8003718 <drawStopwatch>
	drawStopwatchLap(stopwatchVars.lapCurrent, hspi);
 8003332:	4b1c      	ldr	r3, [pc, #112]	; (80033a4 <updateStopwatchDisplay+0x88>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	0011      	movs	r1, r2
 800333a:	0018      	movs	r0, r3
 800333c:	f000 fa1a 	bl	8003774 <drawStopwatchLap>

	setTextSize(1);
 8003340:	2001      	movs	r0, #1
 8003342:	f7fe f8f9 	bl	8001538 <setTextSize>
	clearTextLine(HEIGHT-28, hspi);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	0019      	movs	r1, r3
 800334a:	2084      	movs	r0, #132	; 0x84
 800334c:	f7fd fd3c 	bl	8000dc8 <clearTextLine>
	drawCenteredText(WIDTH/2, HEIGHT-28, "lap", hspi);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a15      	ldr	r2, [pc, #84]	; (80033a8 <updateStopwatchDisplay+0x8c>)
 8003354:	2184      	movs	r1, #132	; 0x84
 8003356:	2040      	movs	r0, #64	; 0x40
 8003358:	f7fd fcd4 	bl	8000d04 <drawCenteredText>
	drawCenteredText(WIDTH*3/4, HEIGHT-28, "clear", hspi);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a13      	ldr	r2, [pc, #76]	; (80033ac <updateStopwatchDisplay+0x90>)
 8003360:	2184      	movs	r1, #132	; 0x84
 8003362:	2060      	movs	r0, #96	; 0x60
 8003364:	f7fd fcce 	bl	8000d04 <drawCenteredText>

	if (isStopwatchRunning == 0) drawCenteredText(WIDTH/4, HEIGHT-28, "run", hspi);
 8003368:	4b11      	ldr	r3, [pc, #68]	; (80033b0 <updateStopwatchDisplay+0x94>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d106      	bne.n	8003380 <updateStopwatchDisplay+0x64>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a0f      	ldr	r2, [pc, #60]	; (80033b4 <updateStopwatchDisplay+0x98>)
 8003376:	2184      	movs	r1, #132	; 0x84
 8003378:	2020      	movs	r0, #32
 800337a:	f7fd fcc3 	bl	8000d04 <drawCenteredText>
	else if (isStopwatchRunning == 1) drawCenteredText(WIDTH/4, HEIGHT-28, "pause", hspi);
}
 800337e:	e00a      	b.n	8003396 <updateStopwatchDisplay+0x7a>
	else if (isStopwatchRunning == 1) drawCenteredText(WIDTH/4, HEIGHT-28, "pause", hspi);
 8003380:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <updateStopwatchDisplay+0x94>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b01      	cmp	r3, #1
 8003388:	d105      	bne.n	8003396 <updateStopwatchDisplay+0x7a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a0a      	ldr	r2, [pc, #40]	; (80033b8 <updateStopwatchDisplay+0x9c>)
 800338e:	2184      	movs	r1, #132	; 0x84
 8003390:	2020      	movs	r0, #32
 8003392:	f7fd fcb7 	bl	8000d04 <drawCenteredText>
}
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	46bd      	mov	sp, r7
 800339a:	b002      	add	sp, #8
 800339c:	bd80      	pop	{r7, pc}
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	20000188 	.word	0x20000188
 80033a4:	200000fc 	.word	0x200000fc
 80033a8:	08008c58 	.word	0x08008c58
 80033ac:	08008c14 	.word	0x08008c14
 80033b0:	20000130 	.word	0x20000130
 80033b4:	08008c08 	.word	0x08008c08
 80033b8:	08008c0c 	.word	0x08008c0c

080033bc <drawButton>:

void drawButton(uint8_t x, uint8_t y, SPI_HandleTypeDef *hspi) {
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af02      	add	r7, sp, #8
 80033c2:	603a      	str	r2, [r7, #0]
 80033c4:	1dfb      	adds	r3, r7, #7
 80033c6:	1c02      	adds	r2, r0, #0
 80033c8:	701a      	strb	r2, [r3, #0]
 80033ca:	1dbb      	adds	r3, r7, #6
 80033cc:	1c0a      	adds	r2, r1, #0
 80033ce:	701a      	strb	r2, [r3, #0]
	// draw rect size 8 with 1 pixel border
	drawRect(x, y, 10, 10, ST77XX_BLACK, hspi);
 80033d0:	1dbb      	adds	r3, r7, #6
 80033d2:	7819      	ldrb	r1, [r3, #0]
 80033d4:	1dfb      	adds	r3, r7, #7
 80033d6:	7818      	ldrb	r0, [r3, #0]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	9301      	str	r3, [sp, #4]
 80033dc:	2300      	movs	r3, #0
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	230a      	movs	r3, #10
 80033e2:	220a      	movs	r2, #10
 80033e4:	f7fd fb87 	bl	8000af6 <drawRect>
	fillRect(x+1, y+1, 8, 8, ST77XX_WHITE, hspi);
 80033e8:	1dfb      	adds	r3, r7, #7
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	3301      	adds	r3, #1
 80033ee:	b2d8      	uxtb	r0, r3
 80033f0:	1dbb      	adds	r3, r7, #6
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	3301      	adds	r3, #1
 80033f6:	b2d9      	uxtb	r1, r3
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	9301      	str	r3, [sp, #4]
 80033fc:	4b10      	ldr	r3, [pc, #64]	; (8003440 <drawButton+0x84>)
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	2308      	movs	r3, #8
 8003402:	2208      	movs	r2, #8
 8003404:	f7fd fbcf 	bl	8000ba6 <fillRect>

	// draw circle in the middle
	setCursor(x+3, y+1);
 8003408:	1dfb      	adds	r3, r7, #7
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	3303      	adds	r3, #3
 800340e:	b2da      	uxtb	r2, r3
 8003410:	1dbb      	adds	r3, r7, #6
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	3301      	adds	r3, #1
 8003416:	b2db      	uxtb	r3, r3
 8003418:	0019      	movs	r1, r3
 800341a:	0010      	movs	r0, r2
 800341c:	f7fe f872 	bl	8001504 <setCursor>
	setTextColor(ST77XX_BLACK);
 8003420:	2000      	movs	r0, #0
 8003422:	f7fe f899 	bl	8001558 <setTextColor>
	setBackgroundColor(ST77XX_WHITE);
 8003426:	4b06      	ldr	r3, [pc, #24]	; (8003440 <drawButton+0x84>)
 8003428:	0018      	movs	r0, r3
 800342a:	f7fe f85b 	bl	80014e4 <setBackgroundColor>
	drawChar('O', hspi);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	0019      	movs	r1, r3
 8003432:	204f      	movs	r0, #79	; 0x4f
 8003434:	f7fd fce8 	bl	8000e08 <drawChar>
}
 8003438:	46c0      	nop			; (mov r8, r8)
 800343a:	46bd      	mov	sp, r7
 800343c:	b002      	add	sp, #8
 800343e:	bd80      	pop	{r7, pc}
 8003440:	0000ffff 	.word	0x0000ffff

08003444 <drawTitle>:

void drawTitle(char *str, SPI_HandleTypeDef *hspi) {
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
	uint8_t strSize = strlen(str);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	0018      	movs	r0, r3
 8003452:	f7fc fe59 	bl	8000108 <strlen>
 8003456:	0002      	movs	r2, r0
 8003458:	210f      	movs	r1, #15
 800345a:	187b      	adds	r3, r7, r1
 800345c:	701a      	strb	r2, [r3, #0]

	// drawing title
	if (12*strSize < WIDTH) {		// about string size = 10 for width = 128
 800345e:	187b      	adds	r3, r7, r1
 8003460:	781a      	ldrb	r2, [r3, #0]
 8003462:	0013      	movs	r3, r2
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	189b      	adds	r3, r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	2b7f      	cmp	r3, #127	; 0x7f
 800346c:	dc22      	bgt.n	80034b4 <drawTitle+0x70>
		setTextSize(2);
 800346e:	2002      	movs	r0, #2
 8003470:	f7fe f862 	bl	8001538 <setTextSize>
		clearTextLine(10, hspi);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	0019      	movs	r1, r3
 8003478:	200a      	movs	r0, #10
 800347a:	f7fd fca5 	bl	8000dc8 <clearTextLine>
		setCursor((WIDTH-12*strSize)/2, 10);
 800347e:	230f      	movs	r3, #15
 8003480:	18fb      	adds	r3, r7, r3
 8003482:	781a      	ldrb	r2, [r3, #0]
 8003484:	0013      	movs	r3, r2
 8003486:	0092      	lsls	r2, r2, #2
 8003488:	1a9b      	subs	r3, r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	3380      	adds	r3, #128	; 0x80
 800348e:	2b00      	cmp	r3, #0
 8003490:	da00      	bge.n	8003494 <drawTitle+0x50>
 8003492:	3301      	adds	r3, #1
 8003494:	105b      	asrs	r3, r3, #1
 8003496:	b2db      	uxtb	r3, r3
 8003498:	210a      	movs	r1, #10
 800349a:	0018      	movs	r0, r3
 800349c:	f7fe f832 	bl	8001504 <setCursor>
		setTextColor(ST77XX_BLACK);
 80034a0:	2000      	movs	r0, #0
 80034a2:	f7fe f859 	bl	8001558 <setTextColor>
		drawText(str, hspi);
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	0011      	movs	r1, r2
 80034ac:	0018      	movs	r0, r3
 80034ae:	f7fd fffb 	bl	80014a8 <drawText>
		clearTextLine(10, hspi);
		setCursor((WIDTH-6*15)/2, 10);
		setTextColor(ST77XX_BLACK);
		drawText("shit's too long", hspi);
	}
}
 80034b2:	e040      	b.n	8003536 <drawTitle+0xf2>
	else if (6*strSize < WIDTH) {	// about string size = 21 for width = 128
 80034b4:	230f      	movs	r3, #15
 80034b6:	18fb      	adds	r3, r7, r3
 80034b8:	781a      	ldrb	r2, [r3, #0]
 80034ba:	0013      	movs	r3, r2
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	189b      	adds	r3, r3, r2
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	2b7f      	cmp	r3, #127	; 0x7f
 80034c4:	dc22      	bgt.n	800350c <drawTitle+0xc8>
		setTextSize(1);
 80034c6:	2001      	movs	r0, #1
 80034c8:	f7fe f836 	bl	8001538 <setTextSize>
		clearTextLine(10, hspi);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	0019      	movs	r1, r3
 80034d0:	200a      	movs	r0, #10
 80034d2:	f7fd fc79 	bl	8000dc8 <clearTextLine>
		setCursor((WIDTH-6*strSize)/2, 10);
 80034d6:	230f      	movs	r3, #15
 80034d8:	18fb      	adds	r3, r7, r3
 80034da:	781a      	ldrb	r2, [r3, #0]
 80034dc:	0013      	movs	r3, r2
 80034de:	0092      	lsls	r2, r2, #2
 80034e0:	1a9b      	subs	r3, r3, r2
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	3380      	adds	r3, #128	; 0x80
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	da00      	bge.n	80034ec <drawTitle+0xa8>
 80034ea:	3301      	adds	r3, #1
 80034ec:	105b      	asrs	r3, r3, #1
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	210a      	movs	r1, #10
 80034f2:	0018      	movs	r0, r3
 80034f4:	f7fe f806 	bl	8001504 <setCursor>
		setTextColor(ST77XX_BLACK);
 80034f8:	2000      	movs	r0, #0
 80034fa:	f7fe f82d 	bl	8001558 <setTextColor>
		drawText(str, hspi);
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	0011      	movs	r1, r2
 8003504:	0018      	movs	r0, r3
 8003506:	f7fd ffcf 	bl	80014a8 <drawText>
}
 800350a:	e014      	b.n	8003536 <drawTitle+0xf2>
		setTextSize(1);
 800350c:	2001      	movs	r0, #1
 800350e:	f7fe f813 	bl	8001538 <setTextSize>
		clearTextLine(10, hspi);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	0019      	movs	r1, r3
 8003516:	200a      	movs	r0, #10
 8003518:	f7fd fc56 	bl	8000dc8 <clearTextLine>
		setCursor((WIDTH-6*15)/2, 10);
 800351c:	210a      	movs	r1, #10
 800351e:	2013      	movs	r0, #19
 8003520:	f7fd fff0 	bl	8001504 <setCursor>
		setTextColor(ST77XX_BLACK);
 8003524:	2000      	movs	r0, #0
 8003526:	f7fe f817 	bl	8001558 <setTextColor>
		drawText("shit's too long", hspi);
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	4b04      	ldr	r3, [pc, #16]	; (8003540 <drawTitle+0xfc>)
 800352e:	0011      	movs	r1, r2
 8003530:	0018      	movs	r0, r3
 8003532:	f7fd ffb9 	bl	80014a8 <drawText>
}
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	46bd      	mov	sp, r7
 800353a:	b004      	add	sp, #16
 800353c:	bd80      	pop	{r7, pc}
 800353e:	46c0      	nop			; (mov r8, r8)
 8003540:	08008c5c 	.word	0x08008c5c

08003544 <drawClock>:

// draw time and date
// should optimize to only redraw part that changed
void drawClock(struct dates *d, struct times *t, SPI_HandleTypeDef *hspi) {
 8003544:	b5b0      	push	{r4, r5, r7, lr}
 8003546:	b090      	sub	sp, #64	; 0x40
 8003548:	af02      	add	r7, sp, #8
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
	// notes on paper.
	char str[40];

	// drawing hr and min
	// should change to print 12-hr format instead of 24 if using am/pm
	sprintf(str, "%2d:%2d", t->hr, t->min);
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	001a      	movs	r2, r3
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	785b      	ldrb	r3, [r3, #1]
 800355a:	4936      	ldr	r1, [pc, #216]	; (8003634 <drawClock+0xf0>)
 800355c:	2410      	movs	r4, #16
 800355e:	1938      	adds	r0, r7, r4
 8003560:	f004 fe72 	bl	8008248 <siprintf>
	setTextSize(3);
 8003564:	2003      	movs	r0, #3
 8003566:	f7fd ffe7 	bl	8001538 <setTextSize>
	setTextColor(ST77XX_BLACK);
 800356a:	2000      	movs	r0, #0
 800356c:	f7fd fff4 	bl	8001558 <setTextColor>
	clearTextLine(68, hspi);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	0019      	movs	r1, r3
 8003574:	2044      	movs	r0, #68	; 0x44
 8003576:	f7fd fc27 	bl	8000dc8 <clearTextLine>
	drawCenteredText(45, 60, str, hspi);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	193a      	adds	r2, r7, r4
 800357e:	213c      	movs	r1, #60	; 0x3c
 8003580:	202d      	movs	r0, #45	; 0x2d
 8003582:	f7fd fbbf 	bl	8000d04 <drawCenteredText>

	// drawing sec
	sprintf(str, "%2d", t->sec);
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	789b      	ldrb	r3, [r3, #2]
 800358a:	001a      	movs	r2, r3
 800358c:	492a      	ldr	r1, [pc, #168]	; (8003638 <drawClock+0xf4>)
 800358e:	193b      	adds	r3, r7, r4
 8003590:	0018      	movs	r0, r3
 8003592:	f004 fe59 	bl	8008248 <siprintf>
	setTextSize(2);
 8003596:	2002      	movs	r0, #2
 8003598:	f7fd ffce 	bl	8001538 <setTextSize>
	drawCenteredText(109, 68, str, hspi);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	193a      	adds	r2, r7, r4
 80035a0:	2144      	movs	r1, #68	; 0x44
 80035a2:	206d      	movs	r0, #109	; 0x6d
 80035a4:	f7fd fbae 	bl	8000d04 <drawCenteredText>

	// drawing AM/PM text
	setTextSize(1);
 80035a8:	2001      	movs	r0, #1
 80035aa:	f7fd ffc5 	bl	8001538 <setTextSize>
	if (t->hr < 12) drawCenteredText(103, 60, "AM", hspi);
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2b0b      	cmp	r3, #11
 80035b4:	d806      	bhi.n	80035c4 <drawClock+0x80>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a20      	ldr	r2, [pc, #128]	; (800363c <drawClock+0xf8>)
 80035ba:	213c      	movs	r1, #60	; 0x3c
 80035bc:	2067      	movs	r0, #103	; 0x67
 80035be:	f7fd fba1 	bl	8000d04 <drawCenteredText>
 80035c2:	e005      	b.n	80035d0 <drawClock+0x8c>
	else drawCenteredText(103, 60, "PM", hspi);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a1e      	ldr	r2, [pc, #120]	; (8003640 <drawClock+0xfc>)
 80035c8:	213c      	movs	r1, #60	; 0x3c
 80035ca:	2067      	movs	r0, #103	; 0x67
 80035cc:	f7fd fb9a 	bl	8000d04 <drawCenteredText>

	// drawing date
	setTextSize(2);
 80035d0:	2002      	movs	r0, #2
 80035d2:	f7fd ffb1 	bl	8001538 <setTextSize>
	clearTextLine(84, hspi);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	0019      	movs	r1, r3
 80035da:	2054      	movs	r0, #84	; 0x54
 80035dc:	f7fd fbf4 	bl	8000dc8 <clearTextLine>
	setTextSize(1);
 80035e0:	2001      	movs	r0, #1
 80035e2:	f7fd ffa9 	bl	8001538 <setTextSize>
	sprintf(str, "%s %2d %04d", monthNames[d->month], d->date, d->yr);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	789b      	ldrb	r3, [r3, #2]
 80035ea:	001a      	movs	r2, r3
 80035ec:	4b15      	ldr	r3, [pc, #84]	; (8003644 <drawClock+0x100>)
 80035ee:	0092      	lsls	r2, r2, #2
 80035f0:	58d2      	ldr	r2, [r2, r3]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	78db      	ldrb	r3, [r3, #3]
 80035f6:	001c      	movs	r4, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	881b      	ldrh	r3, [r3, #0]
 80035fc:	4912      	ldr	r1, [pc, #72]	; (8003648 <drawClock+0x104>)
 80035fe:	2510      	movs	r5, #16
 8003600:	1978      	adds	r0, r7, r5
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	0023      	movs	r3, r4
 8003606:	f004 fe1f 	bl	8008248 <siprintf>
	drawCenteredText(WIDTH/2, 84, str, hspi);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	197a      	adds	r2, r7, r5
 800360e:	2154      	movs	r1, #84	; 0x54
 8003610:	2040      	movs	r0, #64	; 0x40
 8003612:	f7fd fb77 	bl	8000d04 <drawCenteredText>

	// drawing weekday
	drawCenteredText(WIDTH/2, 92, weekdayNames[d->weekday], hspi);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	791b      	ldrb	r3, [r3, #4]
 800361a:	001a      	movs	r2, r3
 800361c:	4b0b      	ldr	r3, [pc, #44]	; (800364c <drawClock+0x108>)
 800361e:	0092      	lsls	r2, r2, #2
 8003620:	58d2      	ldr	r2, [r2, r3]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	215c      	movs	r1, #92	; 0x5c
 8003626:	2040      	movs	r0, #64	; 0x40
 8003628:	f7fd fb6c 	bl	8000d04 <drawCenteredText>
}
 800362c:	46c0      	nop			; (mov r8, r8)
 800362e:	46bd      	mov	sp, r7
 8003630:	b00e      	add	sp, #56	; 0x38
 8003632:	bdb0      	pop	{r4, r5, r7, pc}
 8003634:	08008c6c 	.word	0x08008c6c
 8003638:	08008c74 	.word	0x08008c74
 800363c:	08008c78 	.word	0x08008c78
 8003640:	08008c7c 	.word	0x08008c7c
 8003644:	20000020 	.word	0x20000020
 8003648:	08008c80 	.word	0x08008c80
 800364c:	20000000 	.word	0x20000000

08003650 <drawTimer>:

void drawTimer(struct times *t, SPI_HandleTypeDef *hspi) {
 8003650:	b5b0      	push	{r4, r5, r7, lr}
 8003652:	b08e      	sub	sp, #56	; 0x38
 8003654:	af02      	add	r7, sp, #8
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
	char str[40];

	// only drawing hr:min:sec of timer
	setTextSize(2);
 800365a:	2002      	movs	r0, #2
 800365c:	f7fd ff6c 	bl	8001538 <setTextSize>
	clearTextLine(68, hspi);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	0019      	movs	r1, r3
 8003664:	2044      	movs	r0, #68	; 0x44
 8003666:	f7fd fbaf 	bl	8000dc8 <clearTextLine>
	sprintf(str, "%2d:%2d:%2d", t->hr, t->min, t->sec);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	001a      	movs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	785b      	ldrb	r3, [r3, #1]
 8003674:	001c      	movs	r4, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	789b      	ldrb	r3, [r3, #2]
 800367a:	4908      	ldr	r1, [pc, #32]	; (800369c <drawTimer+0x4c>)
 800367c:	2508      	movs	r5, #8
 800367e:	1978      	adds	r0, r7, r5
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	0023      	movs	r3, r4
 8003684:	f004 fde0 	bl	8008248 <siprintf>
	drawCenteredText(WIDTH/2, HEIGHT/2-12, str, hspi);		// about y=68
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	197a      	adds	r2, r7, r5
 800368c:	2144      	movs	r1, #68	; 0x44
 800368e:	2040      	movs	r0, #64	; 0x40
 8003690:	f7fd fb38 	bl	8000d04 <drawCenteredText>

	// leaving room to draw "timer set!/unset"
}
 8003694:	46c0      	nop			; (mov r8, r8)
 8003696:	46bd      	mov	sp, r7
 8003698:	b00c      	add	sp, #48	; 0x30
 800369a:	bdb0      	pop	{r4, r5, r7, pc}
 800369c:	08008c8c 	.word	0x08008c8c

080036a0 <drawAlarm>:

void drawAlarm(struct alarmTimes *a, SPI_HandleTypeDef *hspi) {
 80036a0:	b5b0      	push	{r4, r5, r7, lr}
 80036a2:	b08e      	sub	sp, #56	; 0x38
 80036a4:	af02      	add	r7, sp, #8
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
	char str[40];
	setTextSize(3);
 80036aa:	2003      	movs	r0, #3
 80036ac:	f7fd ff44 	bl	8001538 <setTextSize>
	clearTextLine(68, hspi);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	0019      	movs	r1, r3
 80036b4:	2044      	movs	r0, #68	; 0x44
 80036b6:	f7fd fb87 	bl	8000dc8 <clearTextLine>

	// drawing hr:min:sec
	setTextSize(2);
 80036ba:	2002      	movs	r0, #2
 80036bc:	f7fd ff3c 	bl	8001538 <setTextSize>
	sprintf(str, "%2d:%2d:%2d", a->hr, a->min, a->sec);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	001a      	movs	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	785b      	ldrb	r3, [r3, #1]
 80036ca:	001c      	movs	r4, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	789b      	ldrb	r3, [r3, #2]
 80036d0:	490f      	ldr	r1, [pc, #60]	; (8003710 <drawAlarm+0x70>)
 80036d2:	2508      	movs	r5, #8
 80036d4:	1978      	adds	r0, r7, r5
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	0023      	movs	r3, r4
 80036da:	f004 fdb5 	bl	8008248 <siprintf>
	drawCenteredText(WIDTH/2, 68, str, hspi);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	197a      	adds	r2, r7, r5
 80036e2:	2144      	movs	r1, #68	; 0x44
 80036e4:	2040      	movs	r0, #64	; 0x40
 80036e6:	f7fd fb0d 	bl	8000d04 <drawCenteredText>

	// drawing weekday
	setTextSize(1);
 80036ea:	2001      	movs	r0, #1
 80036ec:	f7fd ff24 	bl	8001538 <setTextSize>
	drawCenteredText(WIDTH/2, 84, weekdayNames[a->weekday], hspi);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	78db      	ldrb	r3, [r3, #3]
 80036f4:	001a      	movs	r2, r3
 80036f6:	4b07      	ldr	r3, [pc, #28]	; (8003714 <drawAlarm+0x74>)
 80036f8:	0092      	lsls	r2, r2, #2
 80036fa:	58d2      	ldr	r2, [r2, r3]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	2154      	movs	r1, #84	; 0x54
 8003700:	2040      	movs	r0, #64	; 0x40
 8003702:	f7fd faff 	bl	8000d04 <drawCenteredText>
}
 8003706:	46c0      	nop			; (mov r8, r8)
 8003708:	46bd      	mov	sp, r7
 800370a:	b00c      	add	sp, #48	; 0x30
 800370c:	bdb0      	pop	{r4, r5, r7, pc}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	08008c8c 	.word	0x08008c8c
 8003714:	20000000 	.word	0x20000000

08003718 <drawStopwatch>:

void drawStopwatch(uint32_t seconds, SPI_HandleTypeDef *hspi) {
 8003718:	b5b0      	push	{r4, r5, r7, lr}
 800371a:	b090      	sub	sp, #64	; 0x40
 800371c:	af02      	add	r7, sp, #8
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
	struct times *t;
	char str[40];

	secondsToTime(t, seconds);
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003726:	0011      	movs	r1, r2
 8003728:	0018      	movs	r0, r3
 800372a:	f7fe f943 	bl	80019b4 <secondsToTime>

	// drawing hr:min:sec
	setTextSize(2);
 800372e:	2002      	movs	r0, #2
 8003730:	f7fd ff02 	bl	8001538 <setTextSize>
	clearTextLine(68, hspi);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	0019      	movs	r1, r3
 8003738:	2044      	movs	r0, #68	; 0x44
 800373a:	f7fd fb45 	bl	8000dc8 <clearTextLine>
	sprintf(str, "%2d:%2d:%2d", t->hr, t->min, t->sec);
 800373e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	001a      	movs	r2, r3
 8003744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003746:	785b      	ldrb	r3, [r3, #1]
 8003748:	001c      	movs	r4, r3
 800374a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800374c:	789b      	ldrb	r3, [r3, #2]
 800374e:	4908      	ldr	r1, [pc, #32]	; (8003770 <drawStopwatch+0x58>)
 8003750:	250c      	movs	r5, #12
 8003752:	1978      	adds	r0, r7, r5
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	0023      	movs	r3, r4
 8003758:	f004 fd76 	bl	8008248 <siprintf>
	drawCenteredText(WIDTH/2, 68, str, hspi);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	197a      	adds	r2, r7, r5
 8003760:	2144      	movs	r1, #68	; 0x44
 8003762:	2040      	movs	r0, #64	; 0x40
 8003764:	f7fd face 	bl	8000d04 <drawCenteredText>

	// leaving room for lap
}
 8003768:	46c0      	nop			; (mov r8, r8)
 800376a:	46bd      	mov	sp, r7
 800376c:	b00e      	add	sp, #56	; 0x38
 800376e:	bdb0      	pop	{r4, r5, r7, pc}
 8003770:	08008c8c 	.word	0x08008c8c

08003774 <drawStopwatchLap>:

void drawStopwatchLap(uint32_t seconds, SPI_HandleTypeDef *hspi) {
 8003774:	b5b0      	push	{r4, r5, r7, lr}
 8003776:	b090      	sub	sp, #64	; 0x40
 8003778:	af02      	add	r7, sp, #8
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
	struct times *t;
	char str[40];

	secondsToTime(t, seconds);
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003782:	0011      	movs	r1, r2
 8003784:	0018      	movs	r0, r3
 8003786:	f7fe f915 	bl	80019b4 <secondsToTime>

	// drawing hr:min:sec
	setTextSize(1);
 800378a:	2001      	movs	r0, #1
 800378c:	f7fd fed4 	bl	8001538 <setTextSize>
	clearTextLine(84, hspi);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	0019      	movs	r1, r3
 8003794:	2054      	movs	r0, #84	; 0x54
 8003796:	f7fd fb17 	bl	8000dc8 <clearTextLine>
	sprintf(str, "%2d:%2d:%2d", t->hr, t->min, t->sec);
 800379a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	001a      	movs	r2, r3
 80037a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a2:	785b      	ldrb	r3, [r3, #1]
 80037a4:	001c      	movs	r4, r3
 80037a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a8:	789b      	ldrb	r3, [r3, #2]
 80037aa:	4908      	ldr	r1, [pc, #32]	; (80037cc <drawStopwatchLap+0x58>)
 80037ac:	250c      	movs	r5, #12
 80037ae:	1978      	adds	r0, r7, r5
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	0023      	movs	r3, r4
 80037b4:	f004 fd48 	bl	8008248 <siprintf>
	drawCenteredText(WIDTH/2, 84, str, hspi);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	197a      	adds	r2, r7, r5
 80037bc:	2154      	movs	r1, #84	; 0x54
 80037be:	2040      	movs	r0, #64	; 0x40
 80037c0:	f7fd faa0 	bl	8000d04 <drawCenteredText>
}
 80037c4:	46c0      	nop			; (mov r8, r8)
 80037c6:	46bd      	mov	sp, r7
 80037c8:	b00e      	add	sp, #56	; 0x38
 80037ca:	bdb0      	pop	{r4, r5, r7, pc}
 80037cc:	08008c8c 	.word	0x08008c8c

080037d0 <maxDaysInMonth>:

// calculator for number of days in a month given a month and accounting for leap years
uint8_t maxDaysInMonth(uint8_t month, uint16_t year) {
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	0002      	movs	r2, r0
 80037d8:	1dfb      	adds	r3, r7, #7
 80037da:	701a      	strb	r2, [r3, #0]
 80037dc:	1d3b      	adds	r3, r7, #4
 80037de:	1c0a      	adds	r2, r1, #0
 80037e0:	801a      	strh	r2, [r3, #0]
	if (month == 0 || month > 12) return 0;		// bounds checking
 80037e2:	1dfb      	adds	r3, r7, #7
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <maxDaysInMonth+0x22>
 80037ea:	1dfb      	adds	r3, r7, #7
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b0c      	cmp	r3, #12
 80037f0:	d901      	bls.n	80037f6 <maxDaysInMonth+0x26>
 80037f2:	2300      	movs	r3, #0
 80037f4:	e052      	b.n	800389c <maxDaysInMonth+0xcc>

	if (month == RTC_MONTH_JANUARY ||
 80037f6:	1dfb      	adds	r3, r7, #7
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d017      	beq.n	800382e <maxDaysInMonth+0x5e>
 80037fe:	1dfb      	adds	r3, r7, #7
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	2b03      	cmp	r3, #3
 8003804:	d013      	beq.n	800382e <maxDaysInMonth+0x5e>
		month == RTC_MONTH_MARCH   ||
 8003806:	1dfb      	adds	r3, r7, #7
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	2b05      	cmp	r3, #5
 800380c:	d00f      	beq.n	800382e <maxDaysInMonth+0x5e>
		month == RTC_MONTH_MAY     ||
 800380e:	1dfb      	adds	r3, r7, #7
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	2b07      	cmp	r3, #7
 8003814:	d00b      	beq.n	800382e <maxDaysInMonth+0x5e>
		month == RTC_MONTH_JULY    ||
 8003816:	1dfb      	adds	r3, r7, #7
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	2b08      	cmp	r3, #8
 800381c:	d007      	beq.n	800382e <maxDaysInMonth+0x5e>
		month == RTC_MONTH_AUGUST  ||
 800381e:	1dfb      	adds	r3, r7, #7
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b10      	cmp	r3, #16
 8003824:	d003      	beq.n	800382e <maxDaysInMonth+0x5e>
		month == RTC_MONTH_OCTOBER ||
 8003826:	1dfb      	adds	r3, r7, #7
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b12      	cmp	r3, #18
 800382c:	d101      	bne.n	8003832 <maxDaysInMonth+0x62>
		month == RTC_MONTH_DECEMBER) {
		return 31;
 800382e:	231f      	movs	r3, #31
 8003830:	e034      	b.n	800389c <maxDaysInMonth+0xcc>
	}
	else if (month == RTC_MONTH_APRIL     ||
 8003832:	1dfb      	adds	r3, r7, #7
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	2b04      	cmp	r3, #4
 8003838:	d00b      	beq.n	8003852 <maxDaysInMonth+0x82>
 800383a:	1dfb      	adds	r3, r7, #7
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b06      	cmp	r3, #6
 8003840:	d007      	beq.n	8003852 <maxDaysInMonth+0x82>
			 month == RTC_MONTH_JUNE      ||
 8003842:	1dfb      	adds	r3, r7, #7
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b09      	cmp	r3, #9
 8003848:	d003      	beq.n	8003852 <maxDaysInMonth+0x82>
			 month == RTC_MONTH_SEPTEMBER ||
 800384a:	1dfb      	adds	r3, r7, #7
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b11      	cmp	r3, #17
 8003850:	d101      	bne.n	8003856 <maxDaysInMonth+0x86>
			 month == RTC_MONTH_NOVEMBER) {
		return 30;
 8003852:	231e      	movs	r3, #30
 8003854:	e022      	b.n	800389c <maxDaysInMonth+0xcc>
	}

	// february/leap year calculator
	// leap year for every 4th year, but every 100th year is not a leap year except on every 400th year
	// ex. 2020 is a leap year, 2100 is not a leap year, 2000 is a leap year.
	else if (year % 400 == 0) return 29;
 8003856:	1d3b      	adds	r3, r7, #4
 8003858:	881a      	ldrh	r2, [r3, #0]
 800385a:	23c8      	movs	r3, #200	; 0xc8
 800385c:	0059      	lsls	r1, r3, #1
 800385e:	0010      	movs	r0, r2
 8003860:	f7fc fce0 	bl	8000224 <__aeabi_uidivmod>
 8003864:	000b      	movs	r3, r1
 8003866:	b29b      	uxth	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <maxDaysInMonth+0xa0>
 800386c:	231d      	movs	r3, #29
 800386e:	e015      	b.n	800389c <maxDaysInMonth+0xcc>
	else if (year % 100 == 0) return 28;
 8003870:	1d3b      	adds	r3, r7, #4
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	2164      	movs	r1, #100	; 0x64
 8003876:	0018      	movs	r0, r3
 8003878:	f7fc fcd4 	bl	8000224 <__aeabi_uidivmod>
 800387c:	000b      	movs	r3, r1
 800387e:	b29b      	uxth	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <maxDaysInMonth+0xb8>
 8003884:	231c      	movs	r3, #28
 8003886:	e009      	b.n	800389c <maxDaysInMonth+0xcc>
	else if (year % 4 == 0) return 29;
 8003888:	1d3b      	adds	r3, r7, #4
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	2203      	movs	r2, #3
 800388e:	4013      	ands	r3, r2
 8003890:	b29b      	uxth	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <maxDaysInMonth+0xca>
 8003896:	231d      	movs	r3, #29
 8003898:	e000      	b.n	800389c <maxDaysInMonth+0xcc>
	else return 28;
 800389a:	231c      	movs	r3, #28
}
 800389c:	0018      	movs	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	b002      	add	sp, #8
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <initFace>:

void initFace() {
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
	isFaceBeingChanged = 1;
 80038a8:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <initFace+0x1c>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	701a      	strb	r2, [r3, #0]
	faceOnDisplay = faceClock;
 80038ae:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <initFace+0x20>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	701a      	strb	r2, [r3, #0]
	updateFace.clock = 1;
 80038b4:	4b04      	ldr	r3, [pc, #16]	; (80038c8 <initFace+0x24>)
 80038b6:	2201      	movs	r2, #1
 80038b8:	701a      	strb	r2, [r3, #0]
}
 80038ba:	46c0      	nop			; (mov r8, r8)
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	20000104 	.word	0x20000104
 80038c4:	20000105 	.word	0x20000105
 80038c8:	2000012c 	.word	0x2000012c

080038cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038d0:	4b07      	ldr	r3, [pc, #28]	; (80038f0 <HAL_MspInit+0x24>)
 80038d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038d4:	4b06      	ldr	r3, [pc, #24]	; (80038f0 <HAL_MspInit+0x24>)
 80038d6:	2101      	movs	r1, #1
 80038d8:	430a      	orrs	r2, r1
 80038da:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80038dc:	4b04      	ldr	r3, [pc, #16]	; (80038f0 <HAL_MspInit+0x24>)
 80038de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038e0:	4b03      	ldr	r3, [pc, #12]	; (80038f0 <HAL_MspInit+0x24>)
 80038e2:	2180      	movs	r1, #128	; 0x80
 80038e4:	0549      	lsls	r1, r1, #21
 80038e6:	430a      	orrs	r2, r1
 80038e8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038ea:	46c0      	nop			; (mov r8, r8)
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40021000 	.word	0x40021000

080038f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038fc:	230c      	movs	r3, #12
 80038fe:	18fb      	adds	r3, r7, r3
 8003900:	0018      	movs	r0, r3
 8003902:	2314      	movs	r3, #20
 8003904:	001a      	movs	r2, r3
 8003906:	2100      	movs	r1, #0
 8003908:	f004 fc95 	bl	8008236 <memset>
  if(hadc->Instance==ADC1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a15      	ldr	r2, [pc, #84]	; (8003968 <HAL_ADC_MspInit+0x74>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d123      	bne.n	800395e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003916:	4b15      	ldr	r3, [pc, #84]	; (800396c <HAL_ADC_MspInit+0x78>)
 8003918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800391a:	4b14      	ldr	r3, [pc, #80]	; (800396c <HAL_ADC_MspInit+0x78>)
 800391c:	2180      	movs	r1, #128	; 0x80
 800391e:	0089      	lsls	r1, r1, #2
 8003920:	430a      	orrs	r2, r1
 8003922:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003924:	4b11      	ldr	r3, [pc, #68]	; (800396c <HAL_ADC_MspInit+0x78>)
 8003926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003928:	4b10      	ldr	r3, [pc, #64]	; (800396c <HAL_ADC_MspInit+0x78>)
 800392a:	2101      	movs	r1, #1
 800392c:	430a      	orrs	r2, r1
 800392e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003930:	4b0e      	ldr	r3, [pc, #56]	; (800396c <HAL_ADC_MspInit+0x78>)
 8003932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003934:	2201      	movs	r2, #1
 8003936:	4013      	ands	r3, r2
 8003938:	60bb      	str	r3, [r7, #8]
 800393a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800393c:	210c      	movs	r1, #12
 800393e:	187b      	adds	r3, r7, r1
 8003940:	2201      	movs	r2, #1
 8003942:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003944:	187b      	adds	r3, r7, r1
 8003946:	2203      	movs	r2, #3
 8003948:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394a:	187b      	adds	r3, r7, r1
 800394c:	2200      	movs	r2, #0
 800394e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003950:	187a      	adds	r2, r7, r1
 8003952:	23a0      	movs	r3, #160	; 0xa0
 8003954:	05db      	lsls	r3, r3, #23
 8003956:	0011      	movs	r1, r2
 8003958:	0018      	movs	r0, r3
 800395a:	f001 f8e7 	bl	8004b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	46bd      	mov	sp, r7
 8003962:	b008      	add	sp, #32
 8003964:	bd80      	pop	{r7, pc}
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	40012400 	.word	0x40012400
 800396c:	40021000 	.word	0x40021000

08003970 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  if(hlptim->Instance==LPTIM1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a0a      	ldr	r2, [pc, #40]	; (80039a8 <HAL_LPTIM_MspInit+0x38>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d10e      	bne.n	80039a0 <HAL_LPTIM_MspInit+0x30>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8003982:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <HAL_LPTIM_MspInit+0x3c>)
 8003984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003986:	4b09      	ldr	r3, [pc, #36]	; (80039ac <HAL_LPTIM_MspInit+0x3c>)
 8003988:	2180      	movs	r1, #128	; 0x80
 800398a:	0609      	lsls	r1, r1, #24
 800398c:	430a      	orrs	r2, r1
 800398e:	639a      	str	r2, [r3, #56]	; 0x38
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8003990:	2200      	movs	r2, #0
 8003992:	2100      	movs	r1, #0
 8003994:	200d      	movs	r0, #13
 8003996:	f000 ff09 	bl	80047ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800399a:	200d      	movs	r0, #13
 800399c:	f000 ff1b 	bl	80047d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80039a0:	46c0      	nop			; (mov r8, r8)
 80039a2:	46bd      	mov	sp, r7
 80039a4:	b002      	add	sp, #8
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40007c00 	.word	0x40007c00
 80039ac:	40021000 	.word	0x40021000

080039b0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a0a      	ldr	r2, [pc, #40]	; (80039e8 <HAL_RTC_MspInit+0x38>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d10e      	bne.n	80039e0 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80039c2:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <HAL_RTC_MspInit+0x3c>)
 80039c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039c6:	4b09      	ldr	r3, [pc, #36]	; (80039ec <HAL_RTC_MspInit+0x3c>)
 80039c8:	2180      	movs	r1, #128	; 0x80
 80039ca:	02c9      	lsls	r1, r1, #11
 80039cc:	430a      	orrs	r2, r1
 80039ce:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80039d0:	2200      	movs	r2, #0
 80039d2:	2100      	movs	r1, #0
 80039d4:	2002      	movs	r0, #2
 80039d6:	f000 fee9 	bl	80047ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80039da:	2002      	movs	r0, #2
 80039dc:	f000 fefb 	bl	80047d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80039e0:	46c0      	nop			; (mov r8, r8)
 80039e2:	46bd      	mov	sp, r7
 80039e4:	b002      	add	sp, #8
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40002800 	.word	0x40002800
 80039ec:	40021000 	.word	0x40021000

080039f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b088      	sub	sp, #32
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039f8:	230c      	movs	r3, #12
 80039fa:	18fb      	adds	r3, r7, r3
 80039fc:	0018      	movs	r0, r3
 80039fe:	2314      	movs	r3, #20
 8003a00:	001a      	movs	r2, r3
 8003a02:	2100      	movs	r1, #0
 8003a04:	f004 fc17 	bl	8008236 <memset>
  if(hspi->Instance==SPI1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a30      	ldr	r2, [pc, #192]	; (8003ad0 <HAL_SPI_MspInit+0xe0>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d15a      	bne.n	8003ac8 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003a12:	4b30      	ldr	r3, [pc, #192]	; (8003ad4 <HAL_SPI_MspInit+0xe4>)
 8003a14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a16:	4b2f      	ldr	r3, [pc, #188]	; (8003ad4 <HAL_SPI_MspInit+0xe4>)
 8003a18:	2180      	movs	r1, #128	; 0x80
 8003a1a:	0149      	lsls	r1, r1, #5
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a20:	4b2c      	ldr	r3, [pc, #176]	; (8003ad4 <HAL_SPI_MspInit+0xe4>)
 8003a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a24:	4b2b      	ldr	r3, [pc, #172]	; (8003ad4 <HAL_SPI_MspInit+0xe4>)
 8003a26:	2101      	movs	r1, #1
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a2c:	4b29      	ldr	r3, [pc, #164]	; (8003ad4 <HAL_SPI_MspInit+0xe4>)
 8003a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a30:	2201      	movs	r2, #1
 8003a32:	4013      	ands	r3, r2
 8003a34:	60bb      	str	r3, [r7, #8]
 8003a36:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003a38:	210c      	movs	r1, #12
 8003a3a:	187b      	adds	r3, r7, r1
 8003a3c:	22a0      	movs	r2, #160	; 0xa0
 8003a3e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a40:	187b      	adds	r3, r7, r1
 8003a42:	2202      	movs	r2, #2
 8003a44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a46:	187b      	adds	r3, r7, r1
 8003a48:	2200      	movs	r2, #0
 8003a4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a4c:	187b      	adds	r3, r7, r1
 8003a4e:	2203      	movs	r2, #3
 8003a50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003a52:	187b      	adds	r3, r7, r1
 8003a54:	2200      	movs	r2, #0
 8003a56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a58:	187a      	adds	r2, r7, r1
 8003a5a:	23a0      	movs	r3, #160	; 0xa0
 8003a5c:	05db      	lsls	r3, r3, #23
 8003a5e:	0011      	movs	r1, r2
 8003a60:	0018      	movs	r0, r3
 8003a62:	f001 f863 	bl	8004b2c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8003a66:	4b1c      	ldr	r3, [pc, #112]	; (8003ad8 <HAL_SPI_MspInit+0xe8>)
 8003a68:	4a1c      	ldr	r2, [pc, #112]	; (8003adc <HAL_SPI_MspInit+0xec>)
 8003a6a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8003a6c:	4b1a      	ldr	r3, [pc, #104]	; (8003ad8 <HAL_SPI_MspInit+0xe8>)
 8003a6e:	2201      	movs	r2, #1
 8003a70:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a72:	4b19      	ldr	r3, [pc, #100]	; (8003ad8 <HAL_SPI_MspInit+0xe8>)
 8003a74:	2210      	movs	r2, #16
 8003a76:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a78:	4b17      	ldr	r3, [pc, #92]	; (8003ad8 <HAL_SPI_MspInit+0xe8>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a7e:	4b16      	ldr	r3, [pc, #88]	; (8003ad8 <HAL_SPI_MspInit+0xe8>)
 8003a80:	2280      	movs	r2, #128	; 0x80
 8003a82:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a84:	4b14      	ldr	r3, [pc, #80]	; (8003ad8 <HAL_SPI_MspInit+0xe8>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a8a:	4b13      	ldr	r3, [pc, #76]	; (8003ad8 <HAL_SPI_MspInit+0xe8>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003a90:	4b11      	ldr	r3, [pc, #68]	; (8003ad8 <HAL_SPI_MspInit+0xe8>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a96:	4b10      	ldr	r3, [pc, #64]	; (8003ad8 <HAL_SPI_MspInit+0xe8>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003a9c:	4b0e      	ldr	r3, [pc, #56]	; (8003ad8 <HAL_SPI_MspInit+0xe8>)
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	f000 fed6 	bl	8004850 <HAL_DMA_Init>
 8003aa4:	1e03      	subs	r3, r0, #0
 8003aa6:	d001      	beq.n	8003aac <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8003aa8:	f7fe fca4 	bl	80023f4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a0a      	ldr	r2, [pc, #40]	; (8003ad8 <HAL_SPI_MspInit+0xe8>)
 8003ab0:	649a      	str	r2, [r3, #72]	; 0x48
 8003ab2:	4b09      	ldr	r3, [pc, #36]	; (8003ad8 <HAL_SPI_MspInit+0xe8>)
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003ab8:	2200      	movs	r2, #0
 8003aba:	2100      	movs	r1, #0
 8003abc:	2019      	movs	r0, #25
 8003abe:	f000 fe75 	bl	80047ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003ac2:	2019      	movs	r0, #25
 8003ac4:	f000 fe87 	bl	80047d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003ac8:	46c0      	nop			; (mov r8, r8)
 8003aca:	46bd      	mov	sp, r7
 8003acc:	b008      	add	sp, #32
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40013000 	.word	0x40013000
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	2000030c 	.word	0x2000030c
 8003adc:	40020030 	.word	0x40020030

08003ae0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	2380      	movs	r3, #128	; 0x80
 8003aee:	05db      	lsls	r3, r3, #23
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d10e      	bne.n	8003b12 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003af4:	4b22      	ldr	r3, [pc, #136]	; (8003b80 <HAL_TIM_Base_MspInit+0xa0>)
 8003af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003af8:	4b21      	ldr	r3, [pc, #132]	; (8003b80 <HAL_TIM_Base_MspInit+0xa0>)
 8003afa:	2101      	movs	r1, #1
 8003afc:	430a      	orrs	r2, r1
 8003afe:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003b00:	2200      	movs	r2, #0
 8003b02:	2100      	movs	r1, #0
 8003b04:	200f      	movs	r0, #15
 8003b06:	f000 fe51 	bl	80047ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003b0a:	200f      	movs	r0, #15
 8003b0c:	f000 fe63 	bl	80047d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 8003b10:	e032      	b.n	8003b78 <HAL_TIM_Base_MspInit+0x98>
  else if(htim_base->Instance==TIM6)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a1b      	ldr	r2, [pc, #108]	; (8003b84 <HAL_TIM_Base_MspInit+0xa4>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d106      	bne.n	8003b2a <HAL_TIM_Base_MspInit+0x4a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003b1c:	4b18      	ldr	r3, [pc, #96]	; (8003b80 <HAL_TIM_Base_MspInit+0xa0>)
 8003b1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b20:	4b17      	ldr	r3, [pc, #92]	; (8003b80 <HAL_TIM_Base_MspInit+0xa0>)
 8003b22:	2110      	movs	r1, #16
 8003b24:	430a      	orrs	r2, r1
 8003b26:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003b28:	e026      	b.n	8003b78 <HAL_TIM_Base_MspInit+0x98>
  else if(htim_base->Instance==TIM21)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a16      	ldr	r2, [pc, #88]	; (8003b88 <HAL_TIM_Base_MspInit+0xa8>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d10e      	bne.n	8003b52 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8003b34:	4b12      	ldr	r3, [pc, #72]	; (8003b80 <HAL_TIM_Base_MspInit+0xa0>)
 8003b36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b38:	4b11      	ldr	r3, [pc, #68]	; (8003b80 <HAL_TIM_Base_MspInit+0xa0>)
 8003b3a:	2104      	movs	r1, #4
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8003b40:	2200      	movs	r2, #0
 8003b42:	2100      	movs	r1, #0
 8003b44:	2014      	movs	r0, #20
 8003b46:	f000 fe31 	bl	80047ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8003b4a:	2014      	movs	r0, #20
 8003b4c:	f000 fe43 	bl	80047d6 <HAL_NVIC_EnableIRQ>
}
 8003b50:	e012      	b.n	8003b78 <HAL_TIM_Base_MspInit+0x98>
  else if(htim_base->Instance==TIM22)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a0d      	ldr	r2, [pc, #52]	; (8003b8c <HAL_TIM_Base_MspInit+0xac>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d10d      	bne.n	8003b78 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8003b5c:	4b08      	ldr	r3, [pc, #32]	; (8003b80 <HAL_TIM_Base_MspInit+0xa0>)
 8003b5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b60:	4b07      	ldr	r3, [pc, #28]	; (8003b80 <HAL_TIM_Base_MspInit+0xa0>)
 8003b62:	2120      	movs	r1, #32
 8003b64:	430a      	orrs	r2, r1
 8003b66:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM22_IRQn, 0, 0);
 8003b68:	2200      	movs	r2, #0
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	2016      	movs	r0, #22
 8003b6e:	f000 fe1d 	bl	80047ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
 8003b72:	2016      	movs	r0, #22
 8003b74:	f000 fe2f 	bl	80047d6 <HAL_NVIC_EnableIRQ>
}
 8003b78:	46c0      	nop			; (mov r8, r8)
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	b002      	add	sp, #8
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40021000 	.word	0x40021000
 8003b84:	40001000 	.word	0x40001000
 8003b88:	40010800 	.word	0x40010800
 8003b8c:	40011400 	.word	0x40011400

08003b90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b088      	sub	sp, #32
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b98:	230c      	movs	r3, #12
 8003b9a:	18fb      	adds	r3, r7, r3
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	2314      	movs	r3, #20
 8003ba0:	001a      	movs	r2, r3
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	f004 fb47 	bl	8008236 <memset>
  if(htim->Instance==TIM2)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	2380      	movs	r3, #128	; 0x80
 8003bae:	05db      	lsls	r3, r3, #23
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d123      	bne.n	8003bfc <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bb4:	4b13      	ldr	r3, [pc, #76]	; (8003c04 <HAL_TIM_MspPostInit+0x74>)
 8003bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb8:	4b12      	ldr	r3, [pc, #72]	; (8003c04 <HAL_TIM_MspPostInit+0x74>)
 8003bba:	2101      	movs	r1, #1
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	62da      	str	r2, [r3, #44]	; 0x2c
 8003bc0:	4b10      	ldr	r3, [pc, #64]	; (8003c04 <HAL_TIM_MspPostInit+0x74>)
 8003bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003bcc:	210c      	movs	r1, #12
 8003bce:	187b      	adds	r3, r7, r1
 8003bd0:	2280      	movs	r2, #128	; 0x80
 8003bd2:	0212      	lsls	r2, r2, #8
 8003bd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd6:	187b      	adds	r3, r7, r1
 8003bd8:	2202      	movs	r2, #2
 8003bda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bdc:	187b      	adds	r3, r7, r1
 8003bde:	2200      	movs	r2, #0
 8003be0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003be2:	187b      	adds	r3, r7, r1
 8003be4:	2200      	movs	r2, #0
 8003be6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8003be8:	187b      	adds	r3, r7, r1
 8003bea:	2205      	movs	r2, #5
 8003bec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bee:	187a      	adds	r2, r7, r1
 8003bf0:	23a0      	movs	r3, #160	; 0xa0
 8003bf2:	05db      	lsls	r3, r3, #23
 8003bf4:	0011      	movs	r1, r2
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f000 ff98 	bl	8004b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003bfc:	46c0      	nop			; (mov r8, r8)
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	b008      	add	sp, #32
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40021000 	.word	0x40021000

08003c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003c0c:	46c0      	nop			; (mov r8, r8)
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c16:	e7fe      	b.n	8003c16 <HardFault_Handler+0x4>

08003c18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003c1c:	46c0      	nop			; (mov r8, r8)
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c30:	f000 fa7e 	bl	8004130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c34:	46c0      	nop			; (mov r8, r8)
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
	...

08003c3c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003c40:	4b03      	ldr	r3, [pc, #12]	; (8003c50 <RTC_IRQHandler+0x14>)
 8003c42:	0018      	movs	r0, r3
 8003c44:	f002 fe58 	bl	80068f8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8003c48:	46c0      	nop			; (mov r8, r8)
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	46c0      	nop			; (mov r8, r8)
 8003c50:	200001f8 	.word	0x200001f8

08003c54 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003c58:	2004      	movs	r0, #4
 8003c5a:	f001 f931 	bl	8004ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003c68:	2380      	movs	r3, #128	; 0x80
 8003c6a:	019b      	lsls	r3, r3, #6
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	f001 f927 	bl	8004ec0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003c72:	2380      	movs	r3, #128	; 0x80
 8003c74:	01db      	lsls	r3, r3, #7
 8003c76:	0018      	movs	r0, r3
 8003c78:	f001 f922 	bl	8004ec0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003c7c:	2380      	movs	r3, #128	; 0x80
 8003c7e:	021b      	lsls	r3, r3, #8
 8003c80:	0018      	movs	r0, r3
 8003c82:	f001 f91d 	bl	8004ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003c86:	46c0      	nop			; (mov r8, r8)
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003c90:	4b03      	ldr	r3, [pc, #12]	; (8003ca0 <DMA1_Channel2_3_IRQHandler+0x14>)
 8003c92:	0018      	movs	r0, r3
 8003c94:	f000 fe9c 	bl	80049d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003c98:	46c0      	nop			; (mov r8, r8)
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	2000030c 	.word	0x2000030c

08003ca4 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8003ca8:	4b03      	ldr	r3, [pc, #12]	; (8003cb8 <LPTIM1_IRQHandler+0x14>)
 8003caa:	0018      	movs	r0, r3
 8003cac:	f001 f9a4 	bl	8004ff8 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8003cb0:	46c0      	nop			; (mov r8, r8)
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	46c0      	nop			; (mov r8, r8)
 8003cb8:	200001c8 	.word	0x200001c8

08003cbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003cc0:	4b03      	ldr	r3, [pc, #12]	; (8003cd0 <TIM2_IRQHandler+0x14>)
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	f003 fd40 	bl	8007748 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003cc8:	46c0      	nop			; (mov r8, r8)
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	46c0      	nop			; (mov r8, r8)
 8003cd0:	20000274 	.word	0x20000274

08003cd4 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8003cd8:	4b03      	ldr	r3, [pc, #12]	; (8003ce8 <TIM21_IRQHandler+0x14>)
 8003cda:	0018      	movs	r0, r3
 8003cdc:	f003 fd34 	bl	8007748 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8003ce0:	46c0      	nop			; (mov r8, r8)
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	46c0      	nop			; (mov r8, r8)
 8003ce8:	20000354 	.word	0x20000354

08003cec <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM22_IRQn 0 */

  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 8003cf0:	4b03      	ldr	r3, [pc, #12]	; (8003d00 <TIM22_IRQHandler+0x14>)
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	f003 fd28 	bl	8007748 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 8003cf8:	46c0      	nop			; (mov r8, r8)
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	2000018c 	.word	0x2000018c

08003d04 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003d08:	4b03      	ldr	r3, [pc, #12]	; (8003d18 <SPI1_IRQHandler+0x14>)
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	f003 f920 	bl	8006f50 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003d10:	46c0      	nop			; (mov r8, r8)
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	2000021c 	.word	0x2000021c

08003d1c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003d24:	4b11      	ldr	r3, [pc, #68]	; (8003d6c <_sbrk+0x50>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d102      	bne.n	8003d32 <_sbrk+0x16>
		heap_end = &end;
 8003d2c:	4b0f      	ldr	r3, [pc, #60]	; (8003d6c <_sbrk+0x50>)
 8003d2e:	4a10      	ldr	r2, [pc, #64]	; (8003d70 <_sbrk+0x54>)
 8003d30:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003d32:	4b0e      	ldr	r3, [pc, #56]	; (8003d6c <_sbrk+0x50>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003d38:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <_sbrk+0x50>)
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	18d3      	adds	r3, r2, r3
 8003d40:	466a      	mov	r2, sp
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d907      	bls.n	8003d56 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003d46:	f004 fa43 	bl	80081d0 <__errno>
 8003d4a:	0003      	movs	r3, r0
 8003d4c:	220c      	movs	r2, #12
 8003d4e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003d50:	2301      	movs	r3, #1
 8003d52:	425b      	negs	r3, r3
 8003d54:	e006      	b.n	8003d64 <_sbrk+0x48>
	}

	heap_end += incr;
 8003d56:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <_sbrk+0x50>)
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	18d2      	adds	r2, r2, r3
 8003d5e:	4b03      	ldr	r3, [pc, #12]	; (8003d6c <_sbrk+0x50>)
 8003d60:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8003d62:	68fb      	ldr	r3, [r7, #12]
}
 8003d64:	0018      	movs	r0, r3
 8003d66:	46bd      	mov	sp, r7
 8003d68:	b004      	add	sp, #16
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	20000108 	.word	0x20000108
 8003d70:	20000398 	.word	0x20000398

08003d74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8003d78:	4b17      	ldr	r3, [pc, #92]	; (8003dd8 <SystemInit+0x64>)
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	4b16      	ldr	r3, [pc, #88]	; (8003dd8 <SystemInit+0x64>)
 8003d7e:	2180      	movs	r1, #128	; 0x80
 8003d80:	0049      	lsls	r1, r1, #1
 8003d82:	430a      	orrs	r2, r1
 8003d84:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8003d86:	4b14      	ldr	r3, [pc, #80]	; (8003dd8 <SystemInit+0x64>)
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	4b13      	ldr	r3, [pc, #76]	; (8003dd8 <SystemInit+0x64>)
 8003d8c:	4913      	ldr	r1, [pc, #76]	; (8003ddc <SystemInit+0x68>)
 8003d8e:	400a      	ands	r2, r1
 8003d90:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003d92:	4b11      	ldr	r3, [pc, #68]	; (8003dd8 <SystemInit+0x64>)
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <SystemInit+0x64>)
 8003d98:	4911      	ldr	r1, [pc, #68]	; (8003de0 <SystemInit+0x6c>)
 8003d9a:	400a      	ands	r2, r1
 8003d9c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003d9e:	4b0e      	ldr	r3, [pc, #56]	; (8003dd8 <SystemInit+0x64>)
 8003da0:	689a      	ldr	r2, [r3, #8]
 8003da2:	4b0d      	ldr	r3, [pc, #52]	; (8003dd8 <SystemInit+0x64>)
 8003da4:	2101      	movs	r1, #1
 8003da6:	438a      	bics	r2, r1
 8003da8:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003daa:	4b0b      	ldr	r3, [pc, #44]	; (8003dd8 <SystemInit+0x64>)
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	4b0a      	ldr	r3, [pc, #40]	; (8003dd8 <SystemInit+0x64>)
 8003db0:	490c      	ldr	r1, [pc, #48]	; (8003de4 <SystemInit+0x70>)
 8003db2:	400a      	ands	r2, r1
 8003db4:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8003db6:	4b08      	ldr	r3, [pc, #32]	; (8003dd8 <SystemInit+0x64>)
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	4b07      	ldr	r3, [pc, #28]	; (8003dd8 <SystemInit+0x64>)
 8003dbc:	490a      	ldr	r1, [pc, #40]	; (8003de8 <SystemInit+0x74>)
 8003dbe:	400a      	ands	r2, r1
 8003dc0:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003dc2:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <SystemInit+0x64>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003dc8:	4b08      	ldr	r3, [pc, #32]	; (8003dec <SystemInit+0x78>)
 8003dca:	2280      	movs	r2, #128	; 0x80
 8003dcc:	0512      	lsls	r2, r2, #20
 8003dce:	609a      	str	r2, [r3, #8]
#endif
}
 8003dd0:	46c0      	nop			; (mov r8, r8)
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	88ff400c 	.word	0x88ff400c
 8003de0:	fef6fff6 	.word	0xfef6fff6
 8003de4:	fffbffff 	.word	0xfffbffff
 8003de8:	ff02ffff 	.word	0xff02ffff
 8003dec:	e000ed00 	.word	0xe000ed00

08003df0 <HAL_TIM_PeriodElapsedCallback>:
static uint32_t stopwatchPauseMarker = 0;
static uint8_t isMotorRunning = 0;
static uint8_t motorStateCounter = 0;

// important boye that is called for a bunch of different timers
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
//	else if (htim->Instance == TIM22) {
//		updateFace.clock = 1;
//	}

	// button's timer
	if (htim->Instance == TIM6) {
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a31      	ldr	r2, [pc, #196]	; (8003ec4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d110      	bne.n	8003e24 <HAL_TIM_PeriodElapsedCallback+0x34>
		// renable button interrupts and clear pending
		HAL_TIM_Base_Stop_IT(htim);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	0018      	movs	r0, r3
 8003e06:	f003 fb71 	bl	80074ec <HAL_TIM_Base_Stop_IT>
		HAL_NVIC_ClearPendingIRQ(EXTI2_3_IRQn);
 8003e0a:	2006      	movs	r0, #6
 8003e0c:	f000 fd10 	bl	8004830 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 8003e10:	2007      	movs	r0, #7
 8003e12:	f000 fd0d 	bl	8004830 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8003e16:	2006      	movs	r0, #6
 8003e18:	f000 fcdd 	bl	80047d6 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003e1c:	2007      	movs	r0, #7
 8003e1e:	f000 fcda 	bl	80047d6 <HAL_NVIC_EnableIRQ>
	}
	// sampler's timer
	else if (htim->Instance == TIM22) {
//		canSampleADC = 1;
	}
}
 8003e22:	e04b      	b.n	8003ebc <HAL_TIM_PeriodElapsedCallback+0xcc>
	else if (htim->Instance == TIM2) {
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	2380      	movs	r3, #128	; 0x80
 8003e2a:	05db      	lsls	r3, r3, #23
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d145      	bne.n	8003ebc <HAL_TIM_PeriodElapsedCallback+0xcc>
		if (motorStateCounter == 5) {
 8003e30:	4b25      	ldr	r3, [pc, #148]	; (8003ec8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	2b05      	cmp	r3, #5
 8003e36:	d10b      	bne.n	8003e50 <HAL_TIM_PeriodElapsedCallback+0x60>
			isMotorRunning = 0;
 8003e38:	4b24      	ldr	r3, [pc, #144]	; (8003ecc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	701a      	strb	r2, [r3, #0]
			motorStateCounter = 0;
 8003e3e:	4b22      	ldr	r3, [pc, #136]	; (8003ec8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET);
 8003e44:	4b22      	ldr	r3, [pc, #136]	; (8003ed0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	2101      	movs	r1, #1
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	f001 f809 	bl	8004e62 <HAL_GPIO_WritePin>
		if (isMotorRunning) {
 8003e50:	4b1e      	ldr	r3, [pc, #120]	; (8003ecc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d031      	beq.n	8003ebc <HAL_TIM_PeriodElapsedCallback+0xcc>
			switch(motorStateCounter) {
 8003e58:	4b1b      	ldr	r3, [pc, #108]	; (8003ec8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	d827      	bhi.n	8003eb0 <HAL_TIM_PeriodElapsedCallback+0xc0>
 8003e60:	009a      	lsls	r2, r3, #2
 8003e62:	4b1c      	ldr	r3, [pc, #112]	; (8003ed4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8003e64:	18d3      	adds	r3, r2, r3
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	469f      	mov	pc, r3
				case 0: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8003e6a:	4b19      	ldr	r3, [pc, #100]	; (8003ed0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	2101      	movs	r1, #1
 8003e70:	0018      	movs	r0, r3
 8003e72:	f000 fff6 	bl	8004e62 <HAL_GPIO_WritePin>
 8003e76:	e01b      	b.n	8003eb0 <HAL_TIM_PeriodElapsedCallback+0xc0>
				case 1: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET); break;
 8003e78:	4b15      	ldr	r3, [pc, #84]	; (8003ed0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	0018      	movs	r0, r3
 8003e80:	f000 ffef 	bl	8004e62 <HAL_GPIO_WritePin>
 8003e84:	e014      	b.n	8003eb0 <HAL_TIM_PeriodElapsedCallback+0xc0>
				case 2: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8003e86:	4b12      	ldr	r3, [pc, #72]	; (8003ed0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003e88:	2201      	movs	r2, #1
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f000 ffe8 	bl	8004e62 <HAL_GPIO_WritePin>
 8003e92:	e00d      	b.n	8003eb0 <HAL_TIM_PeriodElapsedCallback+0xc0>
				case 3: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET); break;
 8003e94:	4b0e      	ldr	r3, [pc, #56]	; (8003ed0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	2101      	movs	r1, #1
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	f000 ffe1 	bl	8004e62 <HAL_GPIO_WritePin>
 8003ea0:	e006      	b.n	8003eb0 <HAL_TIM_PeriodElapsedCallback+0xc0>
				case 4: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8003ea2:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	f000 ffda 	bl	8004e62 <HAL_GPIO_WritePin>
 8003eae:	46c0      	nop			; (mov r8, r8)
			++motorStateCounter;
 8003eb0:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	4b03      	ldr	r3, [pc, #12]	; (8003ec8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8003eba:	701a      	strb	r2, [r3, #0]
}
 8003ebc:	46c0      	nop			; (mov r8, r8)
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	b002      	add	sp, #8
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40001000 	.word	0x40001000
 8003ec8:	20000119 	.word	0x20000119
 8003ecc:	20000118 	.word	0x20000118
 8003ed0:	50000400 	.word	0x50000400
 8003ed4:	080091fc 	.word	0x080091fc

08003ed8 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM21) {
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a10      	ldr	r2, [pc, #64]	; (8003f28 <HAL_TIM_OC_DelayElapsedCallback+0x50>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d11a      	bne.n	8003f20 <HAL_TIM_OC_DelayElapsedCallback+0x48>
		// timer's channel
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	7e1b      	ldrb	r3, [r3, #24]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d10d      	bne.n	8003f0e <HAL_TIM_OC_DelayElapsedCallback+0x36>
			if (timerCounter != 0) --timerCounter;
 8003ef2:	4b0e      	ldr	r3, [pc, #56]	; (8003f2c <HAL_TIM_OC_DelayElapsedCallback+0x54>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d005      	beq.n	8003f06 <HAL_TIM_OC_DelayElapsedCallback+0x2e>
 8003efa:	4b0c      	ldr	r3, [pc, #48]	; (8003f2c <HAL_TIM_OC_DelayElapsedCallback+0x54>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	1e5a      	subs	r2, r3, #1
 8003f00:	4b0a      	ldr	r3, [pc, #40]	; (8003f2c <HAL_TIM_OC_DelayElapsedCallback+0x54>)
 8003f02:	601a      	str	r2, [r3, #0]
		// stopwatch's channel
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
			++stopwatchCounter;
		}
	}
}
 8003f04:	e00c      	b.n	8003f20 <HAL_TIM_OC_DelayElapsedCallback+0x48>
			else isTimerRunning = 0;
 8003f06:	4b0a      	ldr	r3, [pc, #40]	; (8003f30 <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	701a      	strb	r2, [r3, #0]
}
 8003f0c:	e008      	b.n	8003f20 <HAL_TIM_OC_DelayElapsedCallback+0x48>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	7e1b      	ldrb	r3, [r3, #24]
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d104      	bne.n	8003f20 <HAL_TIM_OC_DelayElapsedCallback+0x48>
			++stopwatchCounter;
 8003f16:	4b07      	ldr	r3, [pc, #28]	; (8003f34 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	1c5a      	adds	r2, r3, #1
 8003f1c:	4b05      	ldr	r3, [pc, #20]	; (8003f34 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8003f1e:	601a      	str	r2, [r3, #0]
}
 8003f20:	46c0      	nop			; (mov r8, r8)
 8003f22:	46bd      	mov	sp, r7
 8003f24:	b002      	add	sp, #8
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40010800 	.word	0x40010800
 8003f2c:	20000134 	.word	0x20000134
 8003f30:	2000017c 	.word	0x2000017c
 8003f34:	20000188 	.word	0x20000188

08003f38 <runStopwatch>:

// set stopwatch. using lptimer. maybe better with regular timer?
// can operate in stop mode if using lptimer
// modify to update screen/set flags when necessary
// uses TIM21 clocked by LSE (or at least should)
void runStopwatch(TIM_HandleTypeDef *htim) {
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
//	htim->Instance->CNT = tempStopwatchCounter;
//	HAL_TIM_Base_Start_IT(htim);
	TIM_OC_InitTypeDef *sConfig;
	sConfig->OCMode = TIM_OCMODE_TIMING;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
	sConfig->OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	609a      	str	r2, [r3, #8]
	sConfig->OCFastMode = TIM_OCFAST_DISABLE;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	60da      	str	r2, [r3, #12]

	// calculating pulse/OC trigger
	if (isStopwatchPaused == 0) {		// 1st run, hasn't been paused yet
 8003f52:	4b1d      	ldr	r3, [pc, #116]	; (8003fc8 <runStopwatch+0x90>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d105      	bne.n	8003f68 <runStopwatch+0x30>
		sConfig->Pulse = htim->Instance->CNT;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	605a      	str	r2, [r3, #4]
 8003f66:	e01f      	b.n	8003fa8 <runStopwatch+0x70>
	}
	else {		// unpausing
		uint32_t temp = htim->Instance->CNT;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	613b      	str	r3, [r7, #16]

		// count needed to get from pause marker to start marker - basically how many steps it would've taken to get to next cycle
		// shifted to account for negative behavior
		uint32_t diff = ((int)(stopwatchStartMarker-stopwatchPauseMarker)+0x8000) % 0x8000;
 8003f70:	4b16      	ldr	r3, [pc, #88]	; (8003fcc <runStopwatch+0x94>)
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	4b16      	ldr	r3, [pc, #88]	; (8003fd0 <runStopwatch+0x98>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2280      	movs	r2, #128	; 0x80
 8003f7c:	0212      	lsls	r2, r2, #8
 8003f7e:	4694      	mov	ip, r2
 8003f80:	4463      	add	r3, ip
 8003f82:	4a14      	ldr	r2, [pc, #80]	; (8003fd4 <runStopwatch+0x9c>)
 8003f84:	4013      	ands	r3, r2
 8003f86:	d503      	bpl.n	8003f90 <runStopwatch+0x58>
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	4a13      	ldr	r2, [pc, #76]	; (8003fd8 <runStopwatch+0xa0>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	3301      	adds	r3, #1
 8003f90:	60fb      	str	r3, [r7, #12]
		sConfig->Pulse = (temp+diff) % 0x8000;
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	18d3      	adds	r3, r2, r3
 8003f98:	045b      	lsls	r3, r3, #17
 8003f9a:	0c5a      	lsrs	r2, r3, #17
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	605a      	str	r2, [r3, #4]
		timerStartMarker = sConfig->Pulse;		// set new start marker
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	4b0d      	ldr	r3, [pc, #52]	; (8003fdc <runStopwatch+0xa4>)
 8003fa6:	601a      	str	r2, [r3, #0]
	}

	HAL_TIM_PWM_ConfigChannel(htim, sConfig, HAL_TIM_ACTIVE_CHANNEL_2);
 8003fa8:	6979      	ldr	r1, [r7, #20]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2202      	movs	r2, #2
 8003fae:	0018      	movs	r0, r3
 8003fb0:	f003 fd00 	bl	80079b4 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_OC_Start_IT(htim, HAL_TIM_ACTIVE_CHANNEL_2);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2102      	movs	r1, #2
 8003fb8:	0018      	movs	r0, r3
 8003fba:	f003 faed 	bl	8007598 <HAL_TIM_OC_Start_IT>
}
 8003fbe:	46c0      	nop			; (mov r8, r8)
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	b006      	add	sp, #24
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	2000017d 	.word	0x2000017d
 8003fcc:	20000110 	.word	0x20000110
 8003fd0:	20000114 	.word	0x20000114
 8003fd4:	80007fff 	.word	0x80007fff
 8003fd8:	ffff8000 	.word	0xffff8000
 8003fdc:	2000010c 	.word	0x2000010c

08003fe0 <pauseStopwatch>:

// stop the timer or pause it or whatever.
// counter value might reset and screw up timekeeping? should save?
void pauseStopwatch(TIM_HandleTypeDef *htim) {
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
	HAL_TIM_OC_Stop_IT(htim, HAL_TIM_ACTIVE_CHANNEL_2);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2102      	movs	r1, #2
 8003fec:	0018      	movs	r0, r3
 8003fee:	f003 fb25 	bl	800763c <HAL_TIM_OC_Stop_IT>
	stopwatchPauseMarker = htim->Instance->CNT;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ff8:	4b02      	ldr	r3, [pc, #8]	; (8004004 <pauseStopwatch+0x24>)
 8003ffa:	601a      	str	r2, [r3, #0]
}
 8003ffc:	46c0      	nop			; (mov r8, r8)
 8003ffe:	46bd      	mov	sp, r7
 8004000:	b002      	add	sp, #8
 8004002:	bd80      	pop	{r7, pc}
 8004004:	20000114 	.word	0x20000114

08004008 <clearStopwatch>:

void clearStopwatch(TIM_HandleTypeDef *htim) {
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
	HAL_TIM_OC_Stop_IT(htim, HAL_TIM_ACTIVE_CHANNEL_2);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2102      	movs	r1, #2
 8004014:	0018      	movs	r0, r3
 8004016:	f003 fb11 	bl	800763c <HAL_TIM_OC_Stop_IT>
	stopwatchPauseMarker = htim->Instance->CNT;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004020:	4b06      	ldr	r3, [pc, #24]	; (800403c <clearStopwatch+0x34>)
 8004022:	601a      	str	r2, [r3, #0]
	stopwatchStartMarker = htim->Instance->CNT;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800402a:	4b05      	ldr	r3, [pc, #20]	; (8004040 <clearStopwatch+0x38>)
 800402c:	601a      	str	r2, [r3, #0]

	stopwatchCounter = 0;
 800402e:	4b05      	ldr	r3, [pc, #20]	; (8004044 <clearStopwatch+0x3c>)
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
}
 8004034:	46c0      	nop			; (mov r8, r8)
 8004036:	46bd      	mov	sp, r7
 8004038:	b002      	add	sp, #8
 800403a:	bd80      	pop	{r7, pc}
 800403c:	20000114 	.word	0x20000114
 8004040:	20000110 	.word	0x20000110
 8004044:	20000188 	.word	0x20000188

08004048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004048:	480d      	ldr	r0, [pc, #52]	; (8004080 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800404a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800404c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800404e:	e003      	b.n	8004058 <LoopCopyDataInit>

08004050 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004050:	4b0c      	ldr	r3, [pc, #48]	; (8004084 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8004052:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004054:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004056:	3104      	adds	r1, #4

08004058 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8004058:	480b      	ldr	r0, [pc, #44]	; (8004088 <LoopForever+0xa>)
  ldr  r3, =_edata
 800405a:	4b0c      	ldr	r3, [pc, #48]	; (800408c <LoopForever+0xe>)
  adds  r2, r0, r1
 800405c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800405e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004060:	d3f6      	bcc.n	8004050 <CopyDataInit>
  ldr  r2, =_sbss
 8004062:	4a0b      	ldr	r2, [pc, #44]	; (8004090 <LoopForever+0x12>)
  b  LoopFillZerobss
 8004064:	e002      	b.n	800406c <LoopFillZerobss>

08004066 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8004066:	2300      	movs	r3, #0
  str  r3, [r2]
 8004068:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800406a:	3204      	adds	r2, #4

0800406c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 800406c:	4b09      	ldr	r3, [pc, #36]	; (8004094 <LoopForever+0x16>)
  cmp  r2, r3
 800406e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004070:	d3f9      	bcc.n	8004066 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004072:	f7ff fe7f 	bl	8003d74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004076:	f004 f8b1 	bl	80081dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800407a:	f7fd fccb 	bl	8001a14 <main>

0800407e <LoopForever>:

LoopForever:
    b LoopForever
 800407e:	e7fe      	b.n	800407e <LoopForever>
   ldr   r0, =_estack
 8004080:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8004084:	0800924c 	.word	0x0800924c
  ldr  r0, =_sdata
 8004088:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800408c:	200000bc 	.word	0x200000bc
  ldr  r2, =_sbss
 8004090:	200000bc 	.word	0x200000bc
  ldr  r3, = _ebss
 8004094:	20000398 	.word	0x20000398

08004098 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004098:	e7fe      	b.n	8004098 <ADC1_COMP_IRQHandler>
	...

0800409c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80040a2:	1dfb      	adds	r3, r7, #7
 80040a4:	2200      	movs	r2, #0
 80040a6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80040a8:	4b0b      	ldr	r3, [pc, #44]	; (80040d8 <HAL_Init+0x3c>)
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <HAL_Init+0x3c>)
 80040ae:	2140      	movs	r1, #64	; 0x40
 80040b0:	430a      	orrs	r2, r1
 80040b2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80040b4:	2000      	movs	r0, #0
 80040b6:	f000 f811 	bl	80040dc <HAL_InitTick>
 80040ba:	1e03      	subs	r3, r0, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80040be:	1dfb      	adds	r3, r7, #7
 80040c0:	2201      	movs	r2, #1
 80040c2:	701a      	strb	r2, [r3, #0]
 80040c4:	e001      	b.n	80040ca <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80040c6:	f7ff fc01 	bl	80038cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80040ca:	1dfb      	adds	r3, r7, #7
 80040cc:	781b      	ldrb	r3, [r3, #0]
}
 80040ce:	0018      	movs	r0, r3
 80040d0:	46bd      	mov	sp, r7
 80040d2:	b002      	add	sp, #8
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	46c0      	nop			; (mov r8, r8)
 80040d8:	40022000 	.word	0x40022000

080040dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80040e4:	230f      	movs	r3, #15
 80040e6:	18fb      	adds	r3, r7, r3
 80040e8:	2200      	movs	r2, #0
 80040ea:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80040ec:	4b0f      	ldr	r3, [pc, #60]	; (800412c <HAL_InitTick+0x50>)
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	23fa      	movs	r3, #250	; 0xfa
 80040f2:	0099      	lsls	r1, r3, #2
 80040f4:	0010      	movs	r0, r2
 80040f6:	f7fc f80f 	bl	8000118 <__udivsi3>
 80040fa:	0003      	movs	r3, r0
 80040fc:	0018      	movs	r0, r3
 80040fe:	f000 fb8a 	bl	8004816 <HAL_SYSTICK_Config>
 8004102:	1e03      	subs	r3, r0, #0
 8004104:	d004      	beq.n	8004110 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8004106:	230f      	movs	r3, #15
 8004108:	18fb      	adds	r3, r7, r3
 800410a:	2201      	movs	r2, #1
 800410c:	701a      	strb	r2, [r3, #0]
 800410e:	e006      	b.n	800411e <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8004110:	6879      	ldr	r1, [r7, #4]
 8004112:	2301      	movs	r3, #1
 8004114:	425b      	negs	r3, r3
 8004116:	2200      	movs	r2, #0
 8004118:	0018      	movs	r0, r3
 800411a:	f000 fb47 	bl	80047ac <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 800411e:	230f      	movs	r3, #15
 8004120:	18fb      	adds	r3, r7, r3
 8004122:	781b      	ldrb	r3, [r3, #0]
}
 8004124:	0018      	movs	r0, r3
 8004126:	46bd      	mov	sp, r7
 8004128:	b004      	add	sp, #16
 800412a:	bd80      	pop	{r7, pc}
 800412c:	20000054 	.word	0x20000054

08004130 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  uwTick++;
 8004134:	4b03      	ldr	r3, [pc, #12]	; (8004144 <HAL_IncTick+0x14>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	4b02      	ldr	r3, [pc, #8]	; (8004144 <HAL_IncTick+0x14>)
 800413c:	601a      	str	r2, [r3, #0]
}
 800413e:	46c0      	nop			; (mov r8, r8)
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	20000390 	.word	0x20000390

08004148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  return uwTick;
 800414c:	4b02      	ldr	r3, [pc, #8]	; (8004158 <HAL_GetTick+0x10>)
 800414e:	681b      	ldr	r3, [r3, #0]
}
 8004150:	0018      	movs	r0, r3
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	46c0      	nop			; (mov r8, r8)
 8004158:	20000390 	.word	0x20000390

0800415c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004164:	f7ff fff0 	bl	8004148 <HAL_GetTick>
 8004168:	0003      	movs	r3, r0
 800416a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	3301      	adds	r3, #1
 8004174:	d002      	beq.n	800417c <HAL_Delay+0x20>
  {
    wait++;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	3301      	adds	r3, #1
 800417a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800417c:	46c0      	nop			; (mov r8, r8)
 800417e:	f7ff ffe3 	bl	8004148 <HAL_GetTick>
 8004182:	0002      	movs	r2, r0
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	429a      	cmp	r2, r3
 800418c:	d8f7      	bhi.n	800417e <HAL_Delay+0x22>
  {
  }
}
 800418e:	46c0      	nop			; (mov r8, r8)
 8004190:	46bd      	mov	sp, r7
 8004192:	b004      	add	sp, #16
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e159      	b.n	800445e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10a      	bne.n	80041c8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2250      	movs	r2, #80	; 0x50
 80041bc:	2100      	movs	r1, #0
 80041be:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	0018      	movs	r0, r3
 80041c4:	f7ff fb96 	bl	80038f4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041cc:	2210      	movs	r2, #16
 80041ce:	4013      	ands	r3, r2
 80041d0:	2b10      	cmp	r3, #16
 80041d2:	d005      	beq.n	80041e0 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	2204      	movs	r2, #4
 80041dc:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80041de:	d00b      	beq.n	80041f8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e4:	2210      	movs	r2, #16
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2250      	movs	r2, #80	; 0x50
 80041f0:	2100      	movs	r1, #0
 80041f2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e132      	b.n	800445e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fc:	4a9a      	ldr	r2, [pc, #616]	; (8004468 <HAL_ADC_Init+0x2d0>)
 80041fe:	4013      	ands	r3, r2
 8004200:	2202      	movs	r2, #2
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	2203      	movs	r2, #3
 8004210:	4013      	ands	r3, r2
 8004212:	2b01      	cmp	r3, #1
 8004214:	d108      	bne.n	8004228 <HAL_ADC_Init+0x90>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2201      	movs	r2, #1
 800421e:	4013      	ands	r3, r2
 8004220:	2b01      	cmp	r3, #1
 8004222:	d101      	bne.n	8004228 <HAL_ADC_Init+0x90>
 8004224:	2301      	movs	r3, #1
 8004226:	e000      	b.n	800422a <HAL_ADC_Init+0x92>
 8004228:	2300      	movs	r3, #0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d149      	bne.n	80042c2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	23c0      	movs	r3, #192	; 0xc0
 8004234:	061b      	lsls	r3, r3, #24
 8004236:	429a      	cmp	r2, r3
 8004238:	d00b      	beq.n	8004252 <HAL_ADC_Init+0xba>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	2380      	movs	r3, #128	; 0x80
 8004240:	05db      	lsls	r3, r3, #23
 8004242:	429a      	cmp	r2, r3
 8004244:	d005      	beq.n	8004252 <HAL_ADC_Init+0xba>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	2380      	movs	r3, #128	; 0x80
 800424c:	061b      	lsls	r3, r3, #24
 800424e:	429a      	cmp	r2, r3
 8004250:	d111      	bne.n	8004276 <HAL_ADC_Init+0xde>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	691a      	ldr	r2, [r3, #16]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	0092      	lsls	r2, r2, #2
 800425e:	0892      	lsrs	r2, r2, #2
 8004260:	611a      	str	r2, [r3, #16]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	6919      	ldr	r1, [r3, #16]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	611a      	str	r2, [r3, #16]
 8004274:	e014      	b.n	80042a0 <HAL_ADC_Init+0x108>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	691a      	ldr	r2, [r3, #16]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	0092      	lsls	r2, r2, #2
 8004282:	0892      	lsrs	r2, r2, #2
 8004284:	611a      	str	r2, [r3, #16]
 8004286:	4b79      	ldr	r3, [pc, #484]	; (800446c <HAL_ADC_Init+0x2d4>)
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	4b78      	ldr	r3, [pc, #480]	; (800446c <HAL_ADC_Init+0x2d4>)
 800428c:	4978      	ldr	r1, [pc, #480]	; (8004470 <HAL_ADC_Init+0x2d8>)
 800428e:	400a      	ands	r2, r1
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	4b76      	ldr	r3, [pc, #472]	; (800446c <HAL_ADC_Init+0x2d4>)
 8004294:	6819      	ldr	r1, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	4b74      	ldr	r3, [pc, #464]	; (800446c <HAL_ADC_Init+0x2d4>)
 800429c:	430a      	orrs	r2, r1
 800429e:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68da      	ldr	r2, [r3, #12]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2118      	movs	r1, #24
 80042ac:	438a      	bics	r2, r1
 80042ae:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68d9      	ldr	r1, [r3, #12]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80042c2:	4b6a      	ldr	r3, [pc, #424]	; (800446c <HAL_ADC_Init+0x2d4>)
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	4b69      	ldr	r3, [pc, #420]	; (800446c <HAL_ADC_Init+0x2d4>)
 80042c8:	496a      	ldr	r1, [pc, #424]	; (8004474 <HAL_ADC_Init+0x2dc>)
 80042ca:	400a      	ands	r2, r1
 80042cc:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80042ce:	4b67      	ldr	r3, [pc, #412]	; (800446c <HAL_ADC_Init+0x2d4>)
 80042d0:	6819      	ldr	r1, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d6:	065a      	lsls	r2, r3, #25
 80042d8:	4b64      	ldr	r3, [pc, #400]	; (800446c <HAL_ADC_Init+0x2d4>)
 80042da:	430a      	orrs	r2, r1
 80042dc:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	2380      	movs	r3, #128	; 0x80
 80042e6:	055b      	lsls	r3, r3, #21
 80042e8:	4013      	ands	r3, r2
 80042ea:	d108      	bne.n	80042fe <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689a      	ldr	r2, [r3, #8]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2180      	movs	r1, #128	; 0x80
 80042f8:	0549      	lsls	r1, r1, #21
 80042fa:	430a      	orrs	r2, r1
 80042fc:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68da      	ldr	r2, [r3, #12]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	495b      	ldr	r1, [pc, #364]	; (8004478 <HAL_ADC_Init+0x2e0>)
 800430a:	400a      	ands	r2, r1
 800430c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68d9      	ldr	r1, [r3, #12]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	2b02      	cmp	r3, #2
 800431e:	d101      	bne.n	8004324 <HAL_ADC_Init+0x18c>
 8004320:	2304      	movs	r3, #4
 8004322:	e000      	b.n	8004326 <HAL_ADC_Init+0x18e>
 8004324:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004326:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2020      	movs	r0, #32
 800432c:	5c1b      	ldrb	r3, [r3, r0]
 800432e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004330:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	202c      	movs	r0, #44	; 0x2c
 8004336:	5c1b      	ldrb	r3, [r3, r0]
 8004338:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800433a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004340:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8004348:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004350:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800435e:	23c2      	movs	r3, #194	; 0xc2
 8004360:	33ff      	adds	r3, #255	; 0xff
 8004362:	429a      	cmp	r2, r3
 8004364:	d00b      	beq.n	800437e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68d9      	ldr	r1, [r3, #12]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004374:	431a      	orrs	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2221      	movs	r2, #33	; 0x21
 8004382:	5c9b      	ldrb	r3, [r3, r2]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d11a      	bne.n	80043be <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2220      	movs	r2, #32
 800438c:	5c9b      	ldrb	r3, [r3, r2]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d109      	bne.n	80043a6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68da      	ldr	r2, [r3, #12]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2180      	movs	r1, #128	; 0x80
 800439e:	0249      	lsls	r1, r1, #9
 80043a0:	430a      	orrs	r2, r1
 80043a2:	60da      	str	r2, [r3, #12]
 80043a4:	e00b      	b.n	80043be <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043aa:	2220      	movs	r2, #32
 80043ac:	431a      	orrs	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b6:	2201      	movs	r2, #1
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d11f      	bne.n	8004406 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	691a      	ldr	r2, [r3, #16]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	492a      	ldr	r1, [pc, #168]	; (800447c <HAL_ADC_Init+0x2e4>)
 80043d2:	400a      	ands	r2, r1
 80043d4:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6919      	ldr	r1, [r3, #16]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80043e4:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80043ea:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691a      	ldr	r2, [r3, #16]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2101      	movs	r1, #1
 8004400:	430a      	orrs	r2, r1
 8004402:	611a      	str	r2, [r3, #16]
 8004404:	e00e      	b.n	8004424 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	2201      	movs	r2, #1
 800440e:	4013      	ands	r3, r2
 8004410:	2b01      	cmp	r3, #1
 8004412:	d107      	bne.n	8004424 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	691a      	ldr	r2, [r3, #16]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2101      	movs	r1, #1
 8004420:	438a      	bics	r2, r1
 8004422:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695a      	ldr	r2, [r3, #20]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2107      	movs	r1, #7
 8004430:	438a      	bics	r2, r1
 8004432:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6959      	ldr	r1, [r3, #20]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004450:	2203      	movs	r2, #3
 8004452:	4393      	bics	r3, r2
 8004454:	2201      	movs	r2, #1
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	0018      	movs	r0, r3
 8004460:	46bd      	mov	sp, r7
 8004462:	b002      	add	sp, #8
 8004464:	bd80      	pop	{r7, pc}
 8004466:	46c0      	nop			; (mov r8, r8)
 8004468:	fffffefd 	.word	0xfffffefd
 800446c:	40012708 	.word	0x40012708
 8004470:	ffc3ffff 	.word	0xffc3ffff
 8004474:	fdffffff 	.word	0xfdffffff
 8004478:	fffe0219 	.word	0xfffe0219
 800447c:	fffffc03 	.word	0xfffffc03

08004480 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2250      	movs	r2, #80	; 0x50
 800448e:	5c9b      	ldrb	r3, [r3, r2]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <HAL_ADC_ConfigChannel+0x18>
 8004494:	2302      	movs	r3, #2
 8004496:	e085      	b.n	80045a4 <HAL_ADC_ConfigChannel+0x124>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2250      	movs	r2, #80	; 0x50
 800449c:	2101      	movs	r1, #1
 800449e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	2204      	movs	r2, #4
 80044a8:	4013      	ands	r3, r2
 80044aa:	d00b      	beq.n	80044c4 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b0:	2220      	movs	r2, #32
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2250      	movs	r2, #80	; 0x50
 80044bc:	2100      	movs	r1, #0
 80044be:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e06f      	b.n	80045a4 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	4a38      	ldr	r2, [pc, #224]	; (80045ac <HAL_ADC_ConfigChannel+0x12c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d035      	beq.n	800453a <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	035b      	lsls	r3, r3, #13
 80044da:	0b5a      	lsrs	r2, r3, #13
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	2380      	movs	r3, #128	; 0x80
 80044ea:	02db      	lsls	r3, r3, #11
 80044ec:	4013      	ands	r3, r2
 80044ee:	d009      	beq.n	8004504 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80044f0:	4b2f      	ldr	r3, [pc, #188]	; (80045b0 <HAL_ADC_ConfigChannel+0x130>)
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	4b2e      	ldr	r3, [pc, #184]	; (80045b0 <HAL_ADC_ConfigChannel+0x130>)
 80044f6:	2180      	movs	r1, #128	; 0x80
 80044f8:	0409      	lsls	r1, r1, #16
 80044fa:	430a      	orrs	r2, r1
 80044fc:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80044fe:	200a      	movs	r0, #10
 8004500:	f000 f85e 	bl	80045c0 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	2380      	movs	r3, #128	; 0x80
 800450a:	029b      	lsls	r3, r3, #10
 800450c:	4013      	ands	r3, r2
 800450e:	d006      	beq.n	800451e <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8004510:	4b27      	ldr	r3, [pc, #156]	; (80045b0 <HAL_ADC_ConfigChannel+0x130>)
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	4b26      	ldr	r3, [pc, #152]	; (80045b0 <HAL_ADC_ConfigChannel+0x130>)
 8004516:	2180      	movs	r1, #128	; 0x80
 8004518:	03c9      	lsls	r1, r1, #15
 800451a:	430a      	orrs	r2, r1
 800451c:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	2380      	movs	r3, #128	; 0x80
 8004524:	025b      	lsls	r3, r3, #9
 8004526:	4013      	ands	r3, r2
 8004528:	d037      	beq.n	800459a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 800452a:	4b21      	ldr	r3, [pc, #132]	; (80045b0 <HAL_ADC_ConfigChannel+0x130>)
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	4b20      	ldr	r3, [pc, #128]	; (80045b0 <HAL_ADC_ConfigChannel+0x130>)
 8004530:	2180      	movs	r1, #128	; 0x80
 8004532:	0449      	lsls	r1, r1, #17
 8004534:	430a      	orrs	r2, r1
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	e02f      	b.n	800459a <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	035b      	lsls	r3, r3, #13
 8004546:	0b5b      	lsrs	r3, r3, #13
 8004548:	43d9      	mvns	r1, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	400a      	ands	r2, r1
 8004550:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	2380      	movs	r3, #128	; 0x80
 8004558:	02db      	lsls	r3, r3, #11
 800455a:	4013      	ands	r3, r2
 800455c:	d005      	beq.n	800456a <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800455e:	4b14      	ldr	r3, [pc, #80]	; (80045b0 <HAL_ADC_ConfigChannel+0x130>)
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	4b13      	ldr	r3, [pc, #76]	; (80045b0 <HAL_ADC_ConfigChannel+0x130>)
 8004564:	4913      	ldr	r1, [pc, #76]	; (80045b4 <HAL_ADC_ConfigChannel+0x134>)
 8004566:	400a      	ands	r2, r1
 8004568:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	2380      	movs	r3, #128	; 0x80
 8004570:	029b      	lsls	r3, r3, #10
 8004572:	4013      	ands	r3, r2
 8004574:	d005      	beq.n	8004582 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8004576:	4b0e      	ldr	r3, [pc, #56]	; (80045b0 <HAL_ADC_ConfigChannel+0x130>)
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	4b0d      	ldr	r3, [pc, #52]	; (80045b0 <HAL_ADC_ConfigChannel+0x130>)
 800457c:	490e      	ldr	r1, [pc, #56]	; (80045b8 <HAL_ADC_ConfigChannel+0x138>)
 800457e:	400a      	ands	r2, r1
 8004580:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	2380      	movs	r3, #128	; 0x80
 8004588:	025b      	lsls	r3, r3, #9
 800458a:	4013      	ands	r3, r2
 800458c:	d005      	beq.n	800459a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 800458e:	4b08      	ldr	r3, [pc, #32]	; (80045b0 <HAL_ADC_ConfigChannel+0x130>)
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	4b07      	ldr	r3, [pc, #28]	; (80045b0 <HAL_ADC_ConfigChannel+0x130>)
 8004594:	4909      	ldr	r1, [pc, #36]	; (80045bc <HAL_ADC_ConfigChannel+0x13c>)
 8004596:	400a      	ands	r2, r1
 8004598:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2250      	movs	r2, #80	; 0x50
 800459e:	2100      	movs	r1, #0
 80045a0:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	0018      	movs	r0, r3
 80045a6:	46bd      	mov	sp, r7
 80045a8:	b002      	add	sp, #8
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	00001001 	.word	0x00001001
 80045b0:	40012708 	.word	0x40012708
 80045b4:	ff7fffff 	.word	0xff7fffff
 80045b8:	ffbfffff 	.word	0xffbfffff
 80045bc:	feffffff 	.word	0xfeffffff

080045c0 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80045c8:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <ADC_DelayMicroSecond+0x34>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	490a      	ldr	r1, [pc, #40]	; (80045f8 <ADC_DelayMicroSecond+0x38>)
 80045ce:	0018      	movs	r0, r3
 80045d0:	f7fb fda2 	bl	8000118 <__udivsi3>
 80045d4:	0003      	movs	r3, r0
 80045d6:	001a      	movs	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4353      	muls	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80045de:	e002      	b.n	80045e6 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	3b01      	subs	r3, #1
 80045e4:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1f9      	bne.n	80045e0 <ADC_DelayMicroSecond+0x20>
  } 
}
 80045ec:	46c0      	nop			; (mov r8, r8)
 80045ee:	46bd      	mov	sp, r7
 80045f0:	b004      	add	sp, #16
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	20000054 	.word	0x20000054
 80045f8:	000f4240 	.word	0x000f4240

080045fc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	0002      	movs	r2, r0
 8004604:	1dfb      	adds	r3, r7, #7
 8004606:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004608:	1dfb      	adds	r3, r7, #7
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	001a      	movs	r2, r3
 800460e:	231f      	movs	r3, #31
 8004610:	401a      	ands	r2, r3
 8004612:	4b04      	ldr	r3, [pc, #16]	; (8004624 <NVIC_EnableIRQ+0x28>)
 8004614:	2101      	movs	r1, #1
 8004616:	4091      	lsls	r1, r2
 8004618:	000a      	movs	r2, r1
 800461a:	601a      	str	r2, [r3, #0]
}
 800461c:	46c0      	nop			; (mov r8, r8)
 800461e:	46bd      	mov	sp, r7
 8004620:	b002      	add	sp, #8
 8004622:	bd80      	pop	{r7, pc}
 8004624:	e000e100 	.word	0xe000e100

08004628 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	0002      	movs	r2, r0
 8004630:	1dfb      	adds	r3, r7, #7
 8004632:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004634:	1dfb      	adds	r3, r7, #7
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	001a      	movs	r2, r3
 800463a:	231f      	movs	r3, #31
 800463c:	4013      	ands	r3, r2
 800463e:	4905      	ldr	r1, [pc, #20]	; (8004654 <NVIC_DisableIRQ+0x2c>)
 8004640:	2201      	movs	r2, #1
 8004642:	409a      	lsls	r2, r3
 8004644:	0013      	movs	r3, r2
 8004646:	2280      	movs	r2, #128	; 0x80
 8004648:	508b      	str	r3, [r1, r2]
}
 800464a:	46c0      	nop			; (mov r8, r8)
 800464c:	46bd      	mov	sp, r7
 800464e:	b002      	add	sp, #8
 8004650:	bd80      	pop	{r7, pc}
 8004652:	46c0      	nop			; (mov r8, r8)
 8004654:	e000e100 	.word	0xe000e100

08004658 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	0002      	movs	r2, r0
 8004660:	1dfb      	adds	r3, r7, #7
 8004662:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004664:	1dfb      	adds	r3, r7, #7
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	001a      	movs	r2, r3
 800466a:	231f      	movs	r3, #31
 800466c:	4013      	ands	r3, r2
 800466e:	4905      	ldr	r1, [pc, #20]	; (8004684 <NVIC_ClearPendingIRQ+0x2c>)
 8004670:	2201      	movs	r2, #1
 8004672:	409a      	lsls	r2, r3
 8004674:	23c0      	movs	r3, #192	; 0xc0
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	50ca      	str	r2, [r1, r3]
}
 800467a:	46c0      	nop			; (mov r8, r8)
 800467c:	46bd      	mov	sp, r7
 800467e:	b002      	add	sp, #8
 8004680:	bd80      	pop	{r7, pc}
 8004682:	46c0      	nop			; (mov r8, r8)
 8004684:	e000e100 	.word	0xe000e100

08004688 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004688:	b590      	push	{r4, r7, lr}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	0002      	movs	r2, r0
 8004690:	6039      	str	r1, [r7, #0]
 8004692:	1dfb      	adds	r3, r7, #7
 8004694:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8004696:	1dfb      	adds	r3, r7, #7
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	2b7f      	cmp	r3, #127	; 0x7f
 800469c:	d932      	bls.n	8004704 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800469e:	4a2f      	ldr	r2, [pc, #188]	; (800475c <NVIC_SetPriority+0xd4>)
 80046a0:	1dfb      	adds	r3, r7, #7
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	0019      	movs	r1, r3
 80046a6:	230f      	movs	r3, #15
 80046a8:	400b      	ands	r3, r1
 80046aa:	3b08      	subs	r3, #8
 80046ac:	089b      	lsrs	r3, r3, #2
 80046ae:	3306      	adds	r3, #6
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	18d3      	adds	r3, r2, r3
 80046b4:	3304      	adds	r3, #4
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	1dfa      	adds	r2, r7, #7
 80046ba:	7812      	ldrb	r2, [r2, #0]
 80046bc:	0011      	movs	r1, r2
 80046be:	2203      	movs	r2, #3
 80046c0:	400a      	ands	r2, r1
 80046c2:	00d2      	lsls	r2, r2, #3
 80046c4:	21ff      	movs	r1, #255	; 0xff
 80046c6:	4091      	lsls	r1, r2
 80046c8:	000a      	movs	r2, r1
 80046ca:	43d2      	mvns	r2, r2
 80046cc:	401a      	ands	r2, r3
 80046ce:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	019b      	lsls	r3, r3, #6
 80046d4:	22ff      	movs	r2, #255	; 0xff
 80046d6:	401a      	ands	r2, r3
 80046d8:	1dfb      	adds	r3, r7, #7
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	0018      	movs	r0, r3
 80046de:	2303      	movs	r3, #3
 80046e0:	4003      	ands	r3, r0
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80046e6:	481d      	ldr	r0, [pc, #116]	; (800475c <NVIC_SetPriority+0xd4>)
 80046e8:	1dfb      	adds	r3, r7, #7
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	001c      	movs	r4, r3
 80046ee:	230f      	movs	r3, #15
 80046f0:	4023      	ands	r3, r4
 80046f2:	3b08      	subs	r3, #8
 80046f4:	089b      	lsrs	r3, r3, #2
 80046f6:	430a      	orrs	r2, r1
 80046f8:	3306      	adds	r3, #6
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	18c3      	adds	r3, r0, r3
 80046fe:	3304      	adds	r3, #4
 8004700:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004702:	e027      	b.n	8004754 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004704:	4a16      	ldr	r2, [pc, #88]	; (8004760 <NVIC_SetPriority+0xd8>)
 8004706:	1dfb      	adds	r3, r7, #7
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	b25b      	sxtb	r3, r3
 800470c:	089b      	lsrs	r3, r3, #2
 800470e:	33c0      	adds	r3, #192	; 0xc0
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	589b      	ldr	r3, [r3, r2]
 8004714:	1dfa      	adds	r2, r7, #7
 8004716:	7812      	ldrb	r2, [r2, #0]
 8004718:	0011      	movs	r1, r2
 800471a:	2203      	movs	r2, #3
 800471c:	400a      	ands	r2, r1
 800471e:	00d2      	lsls	r2, r2, #3
 8004720:	21ff      	movs	r1, #255	; 0xff
 8004722:	4091      	lsls	r1, r2
 8004724:	000a      	movs	r2, r1
 8004726:	43d2      	mvns	r2, r2
 8004728:	401a      	ands	r2, r3
 800472a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	019b      	lsls	r3, r3, #6
 8004730:	22ff      	movs	r2, #255	; 0xff
 8004732:	401a      	ands	r2, r3
 8004734:	1dfb      	adds	r3, r7, #7
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	0018      	movs	r0, r3
 800473a:	2303      	movs	r3, #3
 800473c:	4003      	ands	r3, r0
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004742:	4807      	ldr	r0, [pc, #28]	; (8004760 <NVIC_SetPriority+0xd8>)
 8004744:	1dfb      	adds	r3, r7, #7
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	b25b      	sxtb	r3, r3
 800474a:	089b      	lsrs	r3, r3, #2
 800474c:	430a      	orrs	r2, r1
 800474e:	33c0      	adds	r3, #192	; 0xc0
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	501a      	str	r2, [r3, r0]
}
 8004754:	46c0      	nop			; (mov r8, r8)
 8004756:	46bd      	mov	sp, r7
 8004758:	b003      	add	sp, #12
 800475a:	bd90      	pop	{r4, r7, pc}
 800475c:	e000ed00 	.word	0xe000ed00
 8004760:	e000e100 	.word	0xe000e100

08004764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	3b01      	subs	r3, #1
 8004770:	4a0c      	ldr	r2, [pc, #48]	; (80047a4 <SysTick_Config+0x40>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d901      	bls.n	800477a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004776:	2301      	movs	r3, #1
 8004778:	e010      	b.n	800479c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800477a:	4b0b      	ldr	r3, [pc, #44]	; (80047a8 <SysTick_Config+0x44>)
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	3a01      	subs	r2, #1
 8004780:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004782:	2301      	movs	r3, #1
 8004784:	425b      	negs	r3, r3
 8004786:	2103      	movs	r1, #3
 8004788:	0018      	movs	r0, r3
 800478a:	f7ff ff7d 	bl	8004688 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800478e:	4b06      	ldr	r3, [pc, #24]	; (80047a8 <SysTick_Config+0x44>)
 8004790:	2200      	movs	r2, #0
 8004792:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004794:	4b04      	ldr	r3, [pc, #16]	; (80047a8 <SysTick_Config+0x44>)
 8004796:	2207      	movs	r2, #7
 8004798:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800479a:	2300      	movs	r3, #0
}
 800479c:	0018      	movs	r0, r3
 800479e:	46bd      	mov	sp, r7
 80047a0:	b002      	add	sp, #8
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	00ffffff 	.word	0x00ffffff
 80047a8:	e000e010 	.word	0xe000e010

080047ac <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60b9      	str	r1, [r7, #8]
 80047b4:	607a      	str	r2, [r7, #4]
 80047b6:	210f      	movs	r1, #15
 80047b8:	187b      	adds	r3, r7, r1
 80047ba:	1c02      	adds	r2, r0, #0
 80047bc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	187b      	adds	r3, r7, r1
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	b25b      	sxtb	r3, r3
 80047c6:	0011      	movs	r1, r2
 80047c8:	0018      	movs	r0, r3
 80047ca:	f7ff ff5d 	bl	8004688 <NVIC_SetPriority>
}
 80047ce:	46c0      	nop			; (mov r8, r8)
 80047d0:	46bd      	mov	sp, r7
 80047d2:	b004      	add	sp, #16
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b082      	sub	sp, #8
 80047da:	af00      	add	r7, sp, #0
 80047dc:	0002      	movs	r2, r0
 80047de:	1dfb      	adds	r3, r7, #7
 80047e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047e2:	1dfb      	adds	r3, r7, #7
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	b25b      	sxtb	r3, r3
 80047e8:	0018      	movs	r0, r3
 80047ea:	f7ff ff07 	bl	80045fc <NVIC_EnableIRQ>
}
 80047ee:	46c0      	nop			; (mov r8, r8)
 80047f0:	46bd      	mov	sp, r7
 80047f2:	b002      	add	sp, #8
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b082      	sub	sp, #8
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	0002      	movs	r2, r0
 80047fe:	1dfb      	adds	r3, r7, #7
 8004800:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004802:	1dfb      	adds	r3, r7, #7
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	b25b      	sxtb	r3, r3
 8004808:	0018      	movs	r0, r3
 800480a:	f7ff ff0d 	bl	8004628 <NVIC_DisableIRQ>
}
 800480e:	46c0      	nop			; (mov r8, r8)
 8004810:	46bd      	mov	sp, r7
 8004812:	b002      	add	sp, #8
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b082      	sub	sp, #8
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	0018      	movs	r0, r3
 8004822:	f7ff ff9f 	bl	8004764 <SysTick_Config>
 8004826:	0003      	movs	r3, r0
}
 8004828:	0018      	movs	r0, r3
 800482a:	46bd      	mov	sp, r7
 800482c:	b002      	add	sp, #8
 800482e:	bd80      	pop	{r7, pc}

08004830 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	0002      	movs	r2, r0
 8004838:	1dfb      	adds	r3, r7, #7
 800483a:	701a      	strb	r2, [r3, #0]
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800483c:	1dfb      	adds	r3, r7, #7
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	b25b      	sxtb	r3, r3
 8004842:	0018      	movs	r0, r3
 8004844:	f7ff ff08 	bl	8004658 <NVIC_ClearPendingIRQ>
}
 8004848:	46c0      	nop			; (mov r8, r8)
 800484a:	46bd      	mov	sp, r7
 800484c:	b002      	add	sp, #8
 800484e:	bd80      	pop	{r7, pc}

08004850 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e061      	b.n	8004926 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a32      	ldr	r2, [pc, #200]	; (8004930 <HAL_DMA_Init+0xe0>)
 8004868:	4694      	mov	ip, r2
 800486a:	4463      	add	r3, ip
 800486c:	2114      	movs	r1, #20
 800486e:	0018      	movs	r0, r3
 8004870:	f7fb fc52 	bl	8000118 <__udivsi3>
 8004874:	0003      	movs	r3, r0
 8004876:	009a      	lsls	r2, r3, #2
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a2d      	ldr	r2, [pc, #180]	; (8004934 <HAL_DMA_Init+0xe4>)
 8004880:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2225      	movs	r2, #37	; 0x25
 8004886:	2102      	movs	r1, #2
 8004888:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	4a28      	ldr	r2, [pc, #160]	; (8004938 <HAL_DMA_Init+0xe8>)
 8004896:	4013      	ands	r3, r2
 8004898:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80048a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	2380      	movs	r3, #128	; 0x80
 80048d6:	01db      	lsls	r3, r3, #7
 80048d8:	429a      	cmp	r2, r3
 80048da:	d018      	beq.n	800490e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80048dc:	4b17      	ldr	r3, [pc, #92]	; (800493c <HAL_DMA_Init+0xec>)
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e4:	211c      	movs	r1, #28
 80048e6:	400b      	ands	r3, r1
 80048e8:	210f      	movs	r1, #15
 80048ea:	4099      	lsls	r1, r3
 80048ec:	000b      	movs	r3, r1
 80048ee:	43d9      	mvns	r1, r3
 80048f0:	4b12      	ldr	r3, [pc, #72]	; (800493c <HAL_DMA_Init+0xec>)
 80048f2:	400a      	ands	r2, r1
 80048f4:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80048f6:	4b11      	ldr	r3, [pc, #68]	; (800493c <HAL_DMA_Init+0xec>)
 80048f8:	6819      	ldr	r1, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004902:	201c      	movs	r0, #28
 8004904:	4003      	ands	r3, r0
 8004906:	409a      	lsls	r2, r3
 8004908:	4b0c      	ldr	r3, [pc, #48]	; (800493c <HAL_DMA_Init+0xec>)
 800490a:	430a      	orrs	r2, r1
 800490c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2225      	movs	r2, #37	; 0x25
 8004918:	2101      	movs	r1, #1
 800491a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2224      	movs	r2, #36	; 0x24
 8004920:	2100      	movs	r1, #0
 8004922:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	0018      	movs	r0, r3
 8004928:	46bd      	mov	sp, r7
 800492a:	b004      	add	sp, #16
 800492c:	bd80      	pop	{r7, pc}
 800492e:	46c0      	nop			; (mov r8, r8)
 8004930:	bffdfff8 	.word	0xbffdfff8
 8004934:	40020000 	.word	0x40020000
 8004938:	ffff800f 	.word	0xffff800f
 800493c:	400200a8 	.word	0x400200a8

08004940 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004948:	230f      	movs	r3, #15
 800494a:	18fb      	adds	r3, r7, r3
 800494c:	2200      	movs	r2, #0
 800494e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2225      	movs	r2, #37	; 0x25
 8004954:	5c9b      	ldrb	r3, [r3, r2]
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d007      	beq.n	800496c <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2204      	movs	r2, #4
 8004960:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004962:	230f      	movs	r3, #15
 8004964:	18fb      	adds	r3, r7, r3
 8004966:	2201      	movs	r2, #1
 8004968:	701a      	strb	r2, [r3, #0]
 800496a:	e02a      	b.n	80049c2 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	210e      	movs	r1, #14
 8004978:	438a      	bics	r2, r1
 800497a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2101      	movs	r1, #1
 8004988:	438a      	bics	r2, r1
 800498a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004990:	221c      	movs	r2, #28
 8004992:	401a      	ands	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004998:	2101      	movs	r1, #1
 800499a:	4091      	lsls	r1, r2
 800499c:	000a      	movs	r2, r1
 800499e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2225      	movs	r2, #37	; 0x25
 80049a4:	2101      	movs	r1, #1
 80049a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2224      	movs	r2, #36	; 0x24
 80049ac:	2100      	movs	r1, #0
 80049ae:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d004      	beq.n	80049c2 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	0010      	movs	r0, r2
 80049c0:	4798      	blx	r3
    }
  }
  return status;
 80049c2:	230f      	movs	r3, #15
 80049c4:	18fb      	adds	r3, r7, r3
 80049c6:	781b      	ldrb	r3, [r3, #0]
}
 80049c8:	0018      	movs	r0, r3
 80049ca:	46bd      	mov	sp, r7
 80049cc:	b004      	add	sp, #16
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ec:	221c      	movs	r2, #28
 80049ee:	4013      	ands	r3, r2
 80049f0:	2204      	movs	r2, #4
 80049f2:	409a      	lsls	r2, r3
 80049f4:	0013      	movs	r3, r2
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	4013      	ands	r3, r2
 80049fa:	d026      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x7a>
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	2204      	movs	r2, #4
 8004a00:	4013      	ands	r3, r2
 8004a02:	d022      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	d107      	bne.n	8004a20 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2104      	movs	r1, #4
 8004a1c:	438a      	bics	r2, r1
 8004a1e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a24:	221c      	movs	r2, #28
 8004a26:	401a      	ands	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2c:	2104      	movs	r1, #4
 8004a2e:	4091      	lsls	r1, r2
 8004a30:	000a      	movs	r2, r1
 8004a32:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d100      	bne.n	8004a3e <HAL_DMA_IRQHandler+0x6e>
 8004a3c:	e071      	b.n	8004b22 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	0010      	movs	r0, r2
 8004a46:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8004a48:	e06b      	b.n	8004b22 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4e:	221c      	movs	r2, #28
 8004a50:	4013      	ands	r3, r2
 8004a52:	2202      	movs	r2, #2
 8004a54:	409a      	lsls	r2, r3
 8004a56:	0013      	movs	r3, r2
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	d02d      	beq.n	8004aba <HAL_DMA_IRQHandler+0xea>
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2202      	movs	r2, #2
 8004a62:	4013      	ands	r3, r2
 8004a64:	d029      	beq.n	8004aba <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	4013      	ands	r3, r2
 8004a70:	d10b      	bne.n	8004a8a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	210a      	movs	r1, #10
 8004a7e:	438a      	bics	r2, r1
 8004a80:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2225      	movs	r2, #37	; 0x25
 8004a86:	2101      	movs	r1, #1
 8004a88:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a8e:	221c      	movs	r2, #28
 8004a90:	401a      	ands	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	2102      	movs	r1, #2
 8004a98:	4091      	lsls	r1, r2
 8004a9a:	000a      	movs	r2, r1
 8004a9c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2224      	movs	r2, #36	; 0x24
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d039      	beq.n	8004b22 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	0010      	movs	r0, r2
 8004ab6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004ab8:	e033      	b.n	8004b22 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abe:	221c      	movs	r2, #28
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	2208      	movs	r2, #8
 8004ac4:	409a      	lsls	r2, r3
 8004ac6:	0013      	movs	r3, r2
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	4013      	ands	r3, r2
 8004acc:	d02a      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x154>
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	2208      	movs	r2, #8
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	d026      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	210e      	movs	r1, #14
 8004ae2:	438a      	bics	r2, r1
 8004ae4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aea:	221c      	movs	r2, #28
 8004aec:	401a      	ands	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	2101      	movs	r1, #1
 8004af4:	4091      	lsls	r1, r2
 8004af6:	000a      	movs	r2, r1
 8004af8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2225      	movs	r2, #37	; 0x25
 8004b04:	2101      	movs	r1, #1
 8004b06:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2224      	movs	r2, #36	; 0x24
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d005      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	0010      	movs	r0, r2
 8004b20:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004b22:	46c0      	nop			; (mov r8, r8)
 8004b24:	46c0      	nop			; (mov r8, r8)
}
 8004b26:	46bd      	mov	sp, r7
 8004b28:	b004      	add	sp, #16
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004b42:	e155      	b.n	8004df0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2101      	movs	r1, #1
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	4091      	lsls	r1, r2
 8004b4e:	000a      	movs	r2, r1
 8004b50:	4013      	ands	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d100      	bne.n	8004b5c <HAL_GPIO_Init+0x30>
 8004b5a:	e146      	b.n	8004dea <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d003      	beq.n	8004b6c <HAL_GPIO_Init+0x40>
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	2b12      	cmp	r3, #18
 8004b6a:	d123      	bne.n	8004bb4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	08da      	lsrs	r2, r3, #3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	3208      	adds	r2, #8
 8004b74:	0092      	lsls	r2, r2, #2
 8004b76:	58d3      	ldr	r3, [r2, r3]
 8004b78:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2207      	movs	r2, #7
 8004b7e:	4013      	ands	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	220f      	movs	r2, #15
 8004b84:	409a      	lsls	r2, r3
 8004b86:	0013      	movs	r3, r2
 8004b88:	43da      	mvns	r2, r3
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	691a      	ldr	r2, [r3, #16]
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	2107      	movs	r1, #7
 8004b98:	400b      	ands	r3, r1
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	409a      	lsls	r2, r3
 8004b9e:	0013      	movs	r3, r2
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	08da      	lsrs	r2, r3, #3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	3208      	adds	r2, #8
 8004bae:	0092      	lsls	r2, r2, #2
 8004bb0:	6939      	ldr	r1, [r7, #16]
 8004bb2:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d00b      	beq.n	8004bd4 <HAL_GPIO_Init+0xa8>
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d007      	beq.n	8004bd4 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004bc8:	2b11      	cmp	r3, #17
 8004bca:	d003      	beq.n	8004bd4 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	2b12      	cmp	r3, #18
 8004bd2:	d130      	bne.n	8004c36 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	2203      	movs	r2, #3
 8004be0:	409a      	lsls	r2, r3
 8004be2:	0013      	movs	r3, r2
 8004be4:	43da      	mvns	r2, r3
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	4013      	ands	r3, r2
 8004bea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	68da      	ldr	r2, [r3, #12]
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	409a      	lsls	r2, r3
 8004bf6:	0013      	movs	r3, r2
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	409a      	lsls	r2, r3
 8004c10:	0013      	movs	r3, r2
 8004c12:	43da      	mvns	r2, r3
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	4013      	ands	r3, r2
 8004c18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	091b      	lsrs	r3, r3, #4
 8004c20:	2201      	movs	r2, #1
 8004c22:	401a      	ands	r2, r3
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	409a      	lsls	r2, r3
 8004c28:	0013      	movs	r3, r2
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	2203      	movs	r2, #3
 8004c42:	409a      	lsls	r2, r3
 8004c44:	0013      	movs	r3, r2
 8004c46:	43da      	mvns	r2, r3
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	2203      	movs	r2, #3
 8004c54:	401a      	ands	r2, r3
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	409a      	lsls	r2, r3
 8004c5c:	0013      	movs	r3, r2
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	2203      	movs	r2, #3
 8004c76:	409a      	lsls	r2, r3
 8004c78:	0013      	movs	r3, r2
 8004c7a:	43da      	mvns	r2, r3
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	689a      	ldr	r2, [r3, #8]
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	409a      	lsls	r2, r3
 8004c8c:	0013      	movs	r3, r2
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	2380      	movs	r3, #128	; 0x80
 8004ca0:	055b      	lsls	r3, r3, #21
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	d100      	bne.n	8004ca8 <HAL_GPIO_Init+0x17c>
 8004ca6:	e0a0      	b.n	8004dea <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ca8:	4b57      	ldr	r3, [pc, #348]	; (8004e08 <HAL_GPIO_Init+0x2dc>)
 8004caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cac:	4b56      	ldr	r3, [pc, #344]	; (8004e08 <HAL_GPIO_Init+0x2dc>)
 8004cae:	2101      	movs	r1, #1
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8004cb4:	4a55      	ldr	r2, [pc, #340]	; (8004e0c <HAL_GPIO_Init+0x2e0>)
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	089b      	lsrs	r3, r3, #2
 8004cba:	3302      	adds	r3, #2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	589b      	ldr	r3, [r3, r2]
 8004cc0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	2203      	movs	r2, #3
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	220f      	movs	r2, #15
 8004ccc:	409a      	lsls	r2, r3
 8004cce:	0013      	movs	r3, r2
 8004cd0:	43da      	mvns	r2, r3
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	23a0      	movs	r3, #160	; 0xa0
 8004cdc:	05db      	lsls	r3, r3, #23
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d01f      	beq.n	8004d22 <HAL_GPIO_Init+0x1f6>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a4a      	ldr	r2, [pc, #296]	; (8004e10 <HAL_GPIO_Init+0x2e4>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d019      	beq.n	8004d1e <HAL_GPIO_Init+0x1f2>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a49      	ldr	r2, [pc, #292]	; (8004e14 <HAL_GPIO_Init+0x2e8>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d013      	beq.n	8004d1a <HAL_GPIO_Init+0x1ee>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a48      	ldr	r2, [pc, #288]	; (8004e18 <HAL_GPIO_Init+0x2ec>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d00d      	beq.n	8004d16 <HAL_GPIO_Init+0x1ea>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a47      	ldr	r2, [pc, #284]	; (8004e1c <HAL_GPIO_Init+0x2f0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d007      	beq.n	8004d12 <HAL_GPIO_Init+0x1e6>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a46      	ldr	r2, [pc, #280]	; (8004e20 <HAL_GPIO_Init+0x2f4>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d101      	bne.n	8004d0e <HAL_GPIO_Init+0x1e2>
 8004d0a:	2305      	movs	r3, #5
 8004d0c:	e00a      	b.n	8004d24 <HAL_GPIO_Init+0x1f8>
 8004d0e:	2306      	movs	r3, #6
 8004d10:	e008      	b.n	8004d24 <HAL_GPIO_Init+0x1f8>
 8004d12:	2304      	movs	r3, #4
 8004d14:	e006      	b.n	8004d24 <HAL_GPIO_Init+0x1f8>
 8004d16:	2303      	movs	r3, #3
 8004d18:	e004      	b.n	8004d24 <HAL_GPIO_Init+0x1f8>
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	e002      	b.n	8004d24 <HAL_GPIO_Init+0x1f8>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e000      	b.n	8004d24 <HAL_GPIO_Init+0x1f8>
 8004d22:	2300      	movs	r3, #0
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	2103      	movs	r1, #3
 8004d28:	400a      	ands	r2, r1
 8004d2a:	0092      	lsls	r2, r2, #2
 8004d2c:	4093      	lsls	r3, r2
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d34:	4935      	ldr	r1, [pc, #212]	; (8004e0c <HAL_GPIO_Init+0x2e0>)
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	089b      	lsrs	r3, r3, #2
 8004d3a:	3302      	adds	r3, #2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d42:	4b38      	ldr	r3, [pc, #224]	; (8004e24 <HAL_GPIO_Init+0x2f8>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	43da      	mvns	r2, r3
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	2380      	movs	r3, #128	; 0x80
 8004d58:	025b      	lsls	r3, r3, #9
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	d003      	beq.n	8004d66 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004d66:	4b2f      	ldr	r3, [pc, #188]	; (8004e24 <HAL_GPIO_Init+0x2f8>)
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004d6c:	4b2d      	ldr	r3, [pc, #180]	; (8004e24 <HAL_GPIO_Init+0x2f8>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	43da      	mvns	r2, r3
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	2380      	movs	r3, #128	; 0x80
 8004d82:	029b      	lsls	r3, r3, #10
 8004d84:	4013      	ands	r3, r2
 8004d86:	d003      	beq.n	8004d90 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004d90:	4b24      	ldr	r3, [pc, #144]	; (8004e24 <HAL_GPIO_Init+0x2f8>)
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d96:	4b23      	ldr	r3, [pc, #140]	; (8004e24 <HAL_GPIO_Init+0x2f8>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	43da      	mvns	r2, r3
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	4013      	ands	r3, r2
 8004da4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	2380      	movs	r3, #128	; 0x80
 8004dac:	035b      	lsls	r3, r3, #13
 8004dae:	4013      	ands	r3, r2
 8004db0:	d003      	beq.n	8004dba <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004dba:	4b1a      	ldr	r3, [pc, #104]	; (8004e24 <HAL_GPIO_Init+0x2f8>)
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004dc0:	4b18      	ldr	r3, [pc, #96]	; (8004e24 <HAL_GPIO_Init+0x2f8>)
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	43da      	mvns	r2, r3
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	2380      	movs	r3, #128	; 0x80
 8004dd6:	039b      	lsls	r3, r3, #14
 8004dd8:	4013      	ands	r3, r2
 8004dda:	d003      	beq.n	8004de4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004de4:	4b0f      	ldr	r3, [pc, #60]	; (8004e24 <HAL_GPIO_Init+0x2f8>)
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	3301      	adds	r3, #1
 8004dee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	40da      	lsrs	r2, r3
 8004df8:	1e13      	subs	r3, r2, #0
 8004dfa:	d000      	beq.n	8004dfe <HAL_GPIO_Init+0x2d2>
 8004dfc:	e6a2      	b.n	8004b44 <HAL_GPIO_Init+0x18>
  }
}
 8004dfe:	46c0      	nop			; (mov r8, r8)
 8004e00:	46bd      	mov	sp, r7
 8004e02:	b006      	add	sp, #24
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	46c0      	nop			; (mov r8, r8)
 8004e08:	40021000 	.word	0x40021000
 8004e0c:	40010000 	.word	0x40010000
 8004e10:	50000400 	.word	0x50000400
 8004e14:	50000800 	.word	0x50000800
 8004e18:	50000c00 	.word	0x50000c00
 8004e1c:	50001000 	.word	0x50001000
 8004e20:	50001c00 	.word	0x50001c00
 8004e24:	40010400 	.word	0x40010400

08004e28 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	000a      	movs	r2, r1
 8004e32:	1cbb      	adds	r3, r7, #2
 8004e34:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	1cba      	adds	r2, r7, #2
 8004e3c:	8812      	ldrh	r2, [r2, #0]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	d004      	beq.n	8004e4c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004e42:	230f      	movs	r3, #15
 8004e44:	18fb      	adds	r3, r7, r3
 8004e46:	2201      	movs	r2, #1
 8004e48:	701a      	strb	r2, [r3, #0]
 8004e4a:	e003      	b.n	8004e54 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e4c:	230f      	movs	r3, #15
 8004e4e:	18fb      	adds	r3, r7, r3
 8004e50:	2200      	movs	r2, #0
 8004e52:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004e54:	230f      	movs	r3, #15
 8004e56:	18fb      	adds	r3, r7, r3
 8004e58:	781b      	ldrb	r3, [r3, #0]
}
 8004e5a:	0018      	movs	r0, r3
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	b004      	add	sp, #16
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b082      	sub	sp, #8
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
 8004e6a:	0008      	movs	r0, r1
 8004e6c:	0011      	movs	r1, r2
 8004e6e:	1cbb      	adds	r3, r7, #2
 8004e70:	1c02      	adds	r2, r0, #0
 8004e72:	801a      	strh	r2, [r3, #0]
 8004e74:	1c7b      	adds	r3, r7, #1
 8004e76:	1c0a      	adds	r2, r1, #0
 8004e78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8004e7a:	1c7b      	adds	r3, r7, #1
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d004      	beq.n	8004e8c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e82:	1cbb      	adds	r3, r7, #2
 8004e84:	881a      	ldrh	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004e8a:	e003      	b.n	8004e94 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004e8c:	1cbb      	adds	r3, r7, #2
 8004e8e:	881a      	ldrh	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e94:	46c0      	nop			; (mov r8, r8)
 8004e96:	46bd      	mov	sp, r7
 8004e98:	b002      	add	sp, #8
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	000a      	movs	r2, r1
 8004ea6:	1cbb      	adds	r3, r7, #2
 8004ea8:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695a      	ldr	r2, [r3, #20]
 8004eae:	1cbb      	adds	r3, r7, #2
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	405a      	eors	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	615a      	str	r2, [r3, #20]
}
 8004eb8:	46c0      	nop			; (mov r8, r8)
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	b002      	add	sp, #8
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	0002      	movs	r2, r0
 8004ec8:	1dbb      	adds	r3, r7, #6
 8004eca:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8004ecc:	4b09      	ldr	r3, [pc, #36]	; (8004ef4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	1dba      	adds	r2, r7, #6
 8004ed2:	8812      	ldrh	r2, [r2, #0]
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	d008      	beq.n	8004eea <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ed8:	4b06      	ldr	r3, [pc, #24]	; (8004ef4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004eda:	1dba      	adds	r2, r7, #6
 8004edc:	8812      	ldrh	r2, [r2, #0]
 8004ede:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ee0:	1dbb      	adds	r3, r7, #6
 8004ee2:	881b      	ldrh	r3, [r3, #0]
 8004ee4:	0018      	movs	r0, r3
 8004ee6:	f7fd fa8b 	bl	8002400 <HAL_GPIO_EXTI_Callback>
  }
}
 8004eea:	46c0      	nop			; (mov r8, r8)
 8004eec:	46bd      	mov	sp, r7
 8004eee:	b002      	add	sp, #8
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	46c0      	nop			; (mov r8, r8)
 8004ef4:	40010400 	.word	0x40010400

08004ef8 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e06c      	b.n	8004fe4 <HAL_LPTIM_Init+0xec>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	222e      	movs	r2, #46	; 0x2e
 8004f0e:	5c9b      	ldrb	r3, [r3, r2]
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d107      	bne.n	8004f26 <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	222d      	movs	r2, #45	; 0x2d
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	0018      	movs	r0, r3
 8004f22:	f7fe fd25 	bl	8003970 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	222e      	movs	r2, #46	; 0x2e
 8004f2a:	2102      	movs	r1, #2
 8004f2c:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d005      	beq.n	8004f4a <HAL_LPTIM_Init+0x52>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f42:	2380      	movs	r3, #128	; 0x80
 8004f44:	041b      	lsls	r3, r3, #16
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d103      	bne.n	8004f52 <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	221e      	movs	r2, #30
 8004f4e:	4393      	bics	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	4a25      	ldr	r2, [pc, #148]	; (8004fec <HAL_LPTIM_Init+0xf4>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d003      	beq.n	8004f64 <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4a24      	ldr	r2, [pc, #144]	; (8004ff0 <HAL_LPTIM_Init+0xf8>)
 8004f60:	4013      	ands	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4a23      	ldr	r2, [pc, #140]	; (8004ff4 <HAL_LPTIM_Init+0xfc>)
 8004f68:	4013      	ands	r3, r2
 8004f6a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004f74:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8004f7a:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8004f80:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8004f86:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d005      	beq.n	8004fa2 <HAL_LPTIM_Init+0xaa>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f9a:	2380      	movs	r3, #128	; 0x80
 8004f9c:	041b      	lsls	r3, r3, #16
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d107      	bne.n	8004fb2 <HAL_LPTIM_Init+0xba>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004faa:	4313      	orrs	r3, r2
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	4a0d      	ldr	r2, [pc, #52]	; (8004fec <HAL_LPTIM_Init+0xf4>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d00a      	beq.n	8004fd2 <HAL_LPTIM_Init+0xda>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004fc4:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004fca:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	222e      	movs	r2, #46	; 0x2e
 8004fde:	2101      	movs	r1, #1
 8004fe0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	0018      	movs	r0, r3
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	b004      	add	sp, #16
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	0000ffff 	.word	0x0000ffff
 8004ff0:	ffff1f3f 	.word	0xffff1f3f
 8004ff4:	ff19f1f8 	.word	0xff19f1f8

08004ff8 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2201      	movs	r2, #1
 8005008:	4013      	ands	r3, r2
 800500a:	2b01      	cmp	r3, #1
 800500c:	d10e      	bne.n	800502c <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	2201      	movs	r2, #1
 8005016:	4013      	ands	r3, r2
 8005018:	2b01      	cmp	r3, #1
 800501a:	d107      	bne.n	800502c <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2201      	movs	r2, #1
 8005022:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	0018      	movs	r0, r3
 8005028:	f000 f888 	bl	800513c <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2202      	movs	r2, #2
 8005034:	4013      	ands	r3, r2
 8005036:	2b02      	cmp	r3, #2
 8005038:	d10e      	bne.n	8005058 <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	2202      	movs	r2, #2
 8005042:	4013      	ands	r3, r2
 8005044:	2b02      	cmp	r3, #2
 8005046:	d107      	bne.n	8005058 <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2202      	movs	r2, #2
 800504e:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	0018      	movs	r0, r3
 8005054:	f000 f87a 	bl	800514c <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2204      	movs	r2, #4
 8005060:	4013      	ands	r3, r2
 8005062:	2b04      	cmp	r3, #4
 8005064:	d10e      	bne.n	8005084 <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	2204      	movs	r2, #4
 800506e:	4013      	ands	r3, r2
 8005070:	2b04      	cmp	r3, #4
 8005072:	d107      	bne.n	8005084 <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2204      	movs	r2, #4
 800507a:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	0018      	movs	r0, r3
 8005080:	f000 f86c 	bl	800515c <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2208      	movs	r2, #8
 800508c:	4013      	ands	r3, r2
 800508e:	2b08      	cmp	r3, #8
 8005090:	d10e      	bne.n	80050b0 <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	2208      	movs	r2, #8
 800509a:	4013      	ands	r3, r2
 800509c:	2b08      	cmp	r3, #8
 800509e:	d107      	bne.n	80050b0 <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2208      	movs	r2, #8
 80050a6:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	0018      	movs	r0, r3
 80050ac:	f000 f85e 	bl	800516c <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2210      	movs	r2, #16
 80050b8:	4013      	ands	r3, r2
 80050ba:	2b10      	cmp	r3, #16
 80050bc:	d10e      	bne.n	80050dc <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	2210      	movs	r2, #16
 80050c6:	4013      	ands	r3, r2
 80050c8:	2b10      	cmp	r3, #16
 80050ca:	d107      	bne.n	80050dc <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2210      	movs	r2, #16
 80050d2:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	0018      	movs	r0, r3
 80050d8:	f000 f850 	bl	800517c <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2220      	movs	r2, #32
 80050e4:	4013      	ands	r3, r2
 80050e6:	2b20      	cmp	r3, #32
 80050e8:	d10e      	bne.n	8005108 <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	2220      	movs	r2, #32
 80050f2:	4013      	ands	r3, r2
 80050f4:	2b20      	cmp	r3, #32
 80050f6:	d107      	bne.n	8005108 <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2220      	movs	r2, #32
 80050fe:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	0018      	movs	r0, r3
 8005104:	f000 f842 	bl	800518c <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2240      	movs	r2, #64	; 0x40
 8005110:	4013      	ands	r3, r2
 8005112:	2b40      	cmp	r3, #64	; 0x40
 8005114:	d10e      	bne.n	8005134 <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	2240      	movs	r2, #64	; 0x40
 800511e:	4013      	ands	r3, r2
 8005120:	2b40      	cmp	r3, #64	; 0x40
 8005122:	d107      	bne.n	8005134 <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2240      	movs	r2, #64	; 0x40
 800512a:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	0018      	movs	r0, r3
 8005130:	f000 f834 	bl	800519c <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8005134:	46c0      	nop			; (mov r8, r8)
 8005136:	46bd      	mov	sp, r7
 8005138:	b002      	add	sp, #8
 800513a:	bd80      	pop	{r7, pc}

0800513c <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8005144:	46c0      	nop			; (mov r8, r8)
 8005146:	46bd      	mov	sp, r7
 8005148:	b002      	add	sp, #8
 800514a:	bd80      	pop	{r7, pc}

0800514c <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8005154:	46c0      	nop			; (mov r8, r8)
 8005156:	46bd      	mov	sp, r7
 8005158:	b002      	add	sp, #8
 800515a:	bd80      	pop	{r7, pc}

0800515c <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8005164:	46c0      	nop			; (mov r8, r8)
 8005166:	46bd      	mov	sp, r7
 8005168:	b002      	add	sp, #8
 800516a:	bd80      	pop	{r7, pc}

0800516c <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8005174:	46c0      	nop			; (mov r8, r8)
 8005176:	46bd      	mov	sp, r7
 8005178:	b002      	add	sp, #8
 800517a:	bd80      	pop	{r7, pc}

0800517c <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8005184:	46c0      	nop			; (mov r8, r8)
 8005186:	46bd      	mov	sp, r7
 8005188:	b002      	add	sp, #8
 800518a:	bd80      	pop	{r7, pc}

0800518c <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8005194:	46c0      	nop			; (mov r8, r8)
 8005196:	46bd      	mov	sp, r7
 8005198:	b002      	add	sp, #8
 800519a:	bd80      	pop	{r7, pc}

0800519c <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80051a4:	46c0      	nop			; (mov r8, r8)
 80051a6:	46bd      	mov	sp, r7
 80051a8:	b002      	add	sp, #8
 80051aa:	bd80      	pop	{r7, pc}

080051ac <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80051b0:	4b04      	ldr	r3, [pc, #16]	; (80051c4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	4b03      	ldr	r3, [pc, #12]	; (80051c4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80051b6:	2180      	movs	r1, #128	; 0x80
 80051b8:	0049      	lsls	r1, r1, #1
 80051ba:	430a      	orrs	r2, r1
 80051bc:	601a      	str	r2, [r3, #0]
}
 80051be:	46c0      	nop			; (mov r8, r8)
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	40007000 	.word	0x40007000

080051c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051c8:	b5b0      	push	{r4, r5, r7, lr}
 80051ca:	b08a      	sub	sp, #40	; 0x28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d102      	bne.n	80051dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	f000 fbbc 	bl	8005954 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051dc:	4bc8      	ldr	r3, [pc, #800]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	220c      	movs	r2, #12
 80051e2:	4013      	ands	r3, r2
 80051e4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051e6:	4bc6      	ldr	r3, [pc, #792]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	2380      	movs	r3, #128	; 0x80
 80051ec:	025b      	lsls	r3, r3, #9
 80051ee:	4013      	ands	r3, r2
 80051f0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2201      	movs	r2, #1
 80051f8:	4013      	ands	r3, r2
 80051fa:	d100      	bne.n	80051fe <HAL_RCC_OscConfig+0x36>
 80051fc:	e07e      	b.n	80052fc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	2b08      	cmp	r3, #8
 8005202:	d007      	beq.n	8005214 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	2b0c      	cmp	r3, #12
 8005208:	d112      	bne.n	8005230 <HAL_RCC_OscConfig+0x68>
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	2380      	movs	r3, #128	; 0x80
 800520e:	025b      	lsls	r3, r3, #9
 8005210:	429a      	cmp	r2, r3
 8005212:	d10d      	bne.n	8005230 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005214:	4bba      	ldr	r3, [pc, #744]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	2380      	movs	r3, #128	; 0x80
 800521a:	029b      	lsls	r3, r3, #10
 800521c:	4013      	ands	r3, r2
 800521e:	d100      	bne.n	8005222 <HAL_RCC_OscConfig+0x5a>
 8005220:	e06b      	b.n	80052fa <HAL_RCC_OscConfig+0x132>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d167      	bne.n	80052fa <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	f000 fb92 	bl	8005954 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685a      	ldr	r2, [r3, #4]
 8005234:	2380      	movs	r3, #128	; 0x80
 8005236:	025b      	lsls	r3, r3, #9
 8005238:	429a      	cmp	r2, r3
 800523a:	d107      	bne.n	800524c <HAL_RCC_OscConfig+0x84>
 800523c:	4bb0      	ldr	r3, [pc, #704]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	4baf      	ldr	r3, [pc, #700]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 8005242:	2180      	movs	r1, #128	; 0x80
 8005244:	0249      	lsls	r1, r1, #9
 8005246:	430a      	orrs	r2, r1
 8005248:	601a      	str	r2, [r3, #0]
 800524a:	e027      	b.n	800529c <HAL_RCC_OscConfig+0xd4>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	23a0      	movs	r3, #160	; 0xa0
 8005252:	02db      	lsls	r3, r3, #11
 8005254:	429a      	cmp	r2, r3
 8005256:	d10e      	bne.n	8005276 <HAL_RCC_OscConfig+0xae>
 8005258:	4ba9      	ldr	r3, [pc, #676]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	4ba8      	ldr	r3, [pc, #672]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 800525e:	2180      	movs	r1, #128	; 0x80
 8005260:	02c9      	lsls	r1, r1, #11
 8005262:	430a      	orrs	r2, r1
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	4ba6      	ldr	r3, [pc, #664]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	4ba5      	ldr	r3, [pc, #660]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 800526c:	2180      	movs	r1, #128	; 0x80
 800526e:	0249      	lsls	r1, r1, #9
 8005270:	430a      	orrs	r2, r1
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	e012      	b.n	800529c <HAL_RCC_OscConfig+0xd4>
 8005276:	4ba2      	ldr	r3, [pc, #648]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	4ba1      	ldr	r3, [pc, #644]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 800527c:	49a1      	ldr	r1, [pc, #644]	; (8005504 <HAL_RCC_OscConfig+0x33c>)
 800527e:	400a      	ands	r2, r1
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	4b9f      	ldr	r3, [pc, #636]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	2380      	movs	r3, #128	; 0x80
 8005288:	025b      	lsls	r3, r3, #9
 800528a:	4013      	ands	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	4b9b      	ldr	r3, [pc, #620]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	4b9a      	ldr	r3, [pc, #616]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 8005296:	499c      	ldr	r1, [pc, #624]	; (8005508 <HAL_RCC_OscConfig+0x340>)
 8005298:	400a      	ands	r2, r1
 800529a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d015      	beq.n	80052d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a4:	f7fe ff50 	bl	8004148 <HAL_GetTick>
 80052a8:	0003      	movs	r3, r0
 80052aa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052ac:	e009      	b.n	80052c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052ae:	f7fe ff4b 	bl	8004148 <HAL_GetTick>
 80052b2:	0002      	movs	r2, r0
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b64      	cmp	r3, #100	; 0x64
 80052ba:	d902      	bls.n	80052c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	f000 fb49 	bl	8005954 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052c2:	4b8f      	ldr	r3, [pc, #572]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	2380      	movs	r3, #128	; 0x80
 80052c8:	029b      	lsls	r3, r3, #10
 80052ca:	4013      	ands	r3, r2
 80052cc:	d0ef      	beq.n	80052ae <HAL_RCC_OscConfig+0xe6>
 80052ce:	e015      	b.n	80052fc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d0:	f7fe ff3a 	bl	8004148 <HAL_GetTick>
 80052d4:	0003      	movs	r3, r0
 80052d6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80052d8:	e008      	b.n	80052ec <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052da:	f7fe ff35 	bl	8004148 <HAL_GetTick>
 80052de:	0002      	movs	r2, r0
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	2b64      	cmp	r3, #100	; 0x64
 80052e6:	d901      	bls.n	80052ec <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e333      	b.n	8005954 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80052ec:	4b84      	ldr	r3, [pc, #528]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	2380      	movs	r3, #128	; 0x80
 80052f2:	029b      	lsls	r3, r3, #10
 80052f4:	4013      	ands	r3, r2
 80052f6:	d1f0      	bne.n	80052da <HAL_RCC_OscConfig+0x112>
 80052f8:	e000      	b.n	80052fc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052fa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2202      	movs	r2, #2
 8005302:	4013      	ands	r3, r2
 8005304:	d100      	bne.n	8005308 <HAL_RCC_OscConfig+0x140>
 8005306:	e098      	b.n	800543a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	2220      	movs	r2, #32
 8005312:	4013      	ands	r3, r2
 8005314:	d009      	beq.n	800532a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005316:	4b7a      	ldr	r3, [pc, #488]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	4b79      	ldr	r3, [pc, #484]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 800531c:	2120      	movs	r1, #32
 800531e:	430a      	orrs	r2, r1
 8005320:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	2220      	movs	r2, #32
 8005326:	4393      	bics	r3, r2
 8005328:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	2b04      	cmp	r3, #4
 800532e:	d005      	beq.n	800533c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	2b0c      	cmp	r3, #12
 8005334:	d13d      	bne.n	80053b2 <HAL_RCC_OscConfig+0x1ea>
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d13a      	bne.n	80053b2 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800533c:	4b70      	ldr	r3, [pc, #448]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2204      	movs	r2, #4
 8005342:	4013      	ands	r3, r2
 8005344:	d004      	beq.n	8005350 <HAL_RCC_OscConfig+0x188>
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e301      	b.n	8005954 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005350:	4b6b      	ldr	r3, [pc, #428]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	4a6d      	ldr	r2, [pc, #436]	; (800550c <HAL_RCC_OscConfig+0x344>)
 8005356:	4013      	ands	r3, r2
 8005358:	0019      	movs	r1, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	021a      	lsls	r2, r3, #8
 8005360:	4b67      	ldr	r3, [pc, #412]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 8005362:	430a      	orrs	r2, r1
 8005364:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005366:	4b66      	ldr	r3, [pc, #408]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2209      	movs	r2, #9
 800536c:	4393      	bics	r3, r2
 800536e:	0019      	movs	r1, r3
 8005370:	4b63      	ldr	r3, [pc, #396]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 8005372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005374:	430a      	orrs	r2, r1
 8005376:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005378:	f000 fc20 	bl	8005bbc <HAL_RCC_GetSysClockFreq>
 800537c:	0001      	movs	r1, r0
 800537e:	4b60      	ldr	r3, [pc, #384]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	091b      	lsrs	r3, r3, #4
 8005384:	220f      	movs	r2, #15
 8005386:	4013      	ands	r3, r2
 8005388:	4a61      	ldr	r2, [pc, #388]	; (8005510 <HAL_RCC_OscConfig+0x348>)
 800538a:	5cd3      	ldrb	r3, [r2, r3]
 800538c:	000a      	movs	r2, r1
 800538e:	40da      	lsrs	r2, r3
 8005390:	4b60      	ldr	r3, [pc, #384]	; (8005514 <HAL_RCC_OscConfig+0x34c>)
 8005392:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8005394:	2513      	movs	r5, #19
 8005396:	197c      	adds	r4, r7, r5
 8005398:	2000      	movs	r0, #0
 800539a:	f7fe fe9f 	bl	80040dc <HAL_InitTick>
 800539e:	0003      	movs	r3, r0
 80053a0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80053a2:	197b      	adds	r3, r7, r5
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d047      	beq.n	800543a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80053aa:	2313      	movs	r3, #19
 80053ac:	18fb      	adds	r3, r7, r3
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	e2d0      	b.n	8005954 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d027      	beq.n	8005408 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80053b8:	4b51      	ldr	r3, [pc, #324]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2209      	movs	r2, #9
 80053be:	4393      	bics	r3, r2
 80053c0:	0019      	movs	r1, r3
 80053c2:	4b4f      	ldr	r3, [pc, #316]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 80053c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053c6:	430a      	orrs	r2, r1
 80053c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ca:	f7fe febd 	bl	8004148 <HAL_GetTick>
 80053ce:	0003      	movs	r3, r0
 80053d0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053d2:	e008      	b.n	80053e6 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053d4:	f7fe feb8 	bl	8004148 <HAL_GetTick>
 80053d8:	0002      	movs	r2, r0
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e2b6      	b.n	8005954 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053e6:	4b46      	ldr	r3, [pc, #280]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2204      	movs	r2, #4
 80053ec:	4013      	ands	r3, r2
 80053ee:	d0f1      	beq.n	80053d4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053f0:	4b43      	ldr	r3, [pc, #268]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	4a45      	ldr	r2, [pc, #276]	; (800550c <HAL_RCC_OscConfig+0x344>)
 80053f6:	4013      	ands	r3, r2
 80053f8:	0019      	movs	r1, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	021a      	lsls	r2, r3, #8
 8005400:	4b3f      	ldr	r3, [pc, #252]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 8005402:	430a      	orrs	r2, r1
 8005404:	605a      	str	r2, [r3, #4]
 8005406:	e018      	b.n	800543a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005408:	4b3d      	ldr	r3, [pc, #244]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	4b3c      	ldr	r3, [pc, #240]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 800540e:	2101      	movs	r1, #1
 8005410:	438a      	bics	r2, r1
 8005412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005414:	f7fe fe98 	bl	8004148 <HAL_GetTick>
 8005418:	0003      	movs	r3, r0
 800541a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800541c:	e008      	b.n	8005430 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800541e:	f7fe fe93 	bl	8004148 <HAL_GetTick>
 8005422:	0002      	movs	r2, r0
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	2b02      	cmp	r3, #2
 800542a:	d901      	bls.n	8005430 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e291      	b.n	8005954 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005430:	4b33      	ldr	r3, [pc, #204]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2204      	movs	r2, #4
 8005436:	4013      	ands	r3, r2
 8005438:	d1f1      	bne.n	800541e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2210      	movs	r2, #16
 8005440:	4013      	ands	r3, r2
 8005442:	d100      	bne.n	8005446 <HAL_RCC_OscConfig+0x27e>
 8005444:	e09f      	b.n	8005586 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d13f      	bne.n	80054cc <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800544c:	4b2c      	ldr	r3, [pc, #176]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	2380      	movs	r3, #128	; 0x80
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4013      	ands	r3, r2
 8005456:	d005      	beq.n	8005464 <HAL_RCC_OscConfig+0x29c>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	69db      	ldr	r3, [r3, #28]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e277      	b.n	8005954 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005464:	4b26      	ldr	r3, [pc, #152]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	4a2b      	ldr	r2, [pc, #172]	; (8005518 <HAL_RCC_OscConfig+0x350>)
 800546a:	4013      	ands	r3, r2
 800546c:	0019      	movs	r1, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005472:	4b23      	ldr	r3, [pc, #140]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 8005474:	430a      	orrs	r2, r1
 8005476:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005478:	4b21      	ldr	r3, [pc, #132]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	021b      	lsls	r3, r3, #8
 800547e:	0a19      	lsrs	r1, r3, #8
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	061a      	lsls	r2, r3, #24
 8005486:	4b1e      	ldr	r3, [pc, #120]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 8005488:	430a      	orrs	r2, r1
 800548a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	0b5b      	lsrs	r3, r3, #13
 8005492:	3301      	adds	r3, #1
 8005494:	2280      	movs	r2, #128	; 0x80
 8005496:	0212      	lsls	r2, r2, #8
 8005498:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800549a:	4b19      	ldr	r3, [pc, #100]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	091b      	lsrs	r3, r3, #4
 80054a0:	210f      	movs	r1, #15
 80054a2:	400b      	ands	r3, r1
 80054a4:	491a      	ldr	r1, [pc, #104]	; (8005510 <HAL_RCC_OscConfig+0x348>)
 80054a6:	5ccb      	ldrb	r3, [r1, r3]
 80054a8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80054aa:	4b1a      	ldr	r3, [pc, #104]	; (8005514 <HAL_RCC_OscConfig+0x34c>)
 80054ac:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80054ae:	2513      	movs	r5, #19
 80054b0:	197c      	adds	r4, r7, r5
 80054b2:	2000      	movs	r0, #0
 80054b4:	f7fe fe12 	bl	80040dc <HAL_InitTick>
 80054b8:	0003      	movs	r3, r0
 80054ba:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80054bc:	197b      	adds	r3, r7, r5
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d060      	beq.n	8005586 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 80054c4:	2313      	movs	r3, #19
 80054c6:	18fb      	adds	r3, r7, r3
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	e243      	b.n	8005954 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	69db      	ldr	r3, [r3, #28]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d03e      	beq.n	8005552 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80054d4:	4b0a      	ldr	r3, [pc, #40]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	4b09      	ldr	r3, [pc, #36]	; (8005500 <HAL_RCC_OscConfig+0x338>)
 80054da:	2180      	movs	r1, #128	; 0x80
 80054dc:	0049      	lsls	r1, r1, #1
 80054de:	430a      	orrs	r2, r1
 80054e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e2:	f7fe fe31 	bl	8004148 <HAL_GetTick>
 80054e6:	0003      	movs	r3, r0
 80054e8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80054ea:	e017      	b.n	800551c <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054ec:	f7fe fe2c 	bl	8004148 <HAL_GetTick>
 80054f0:	0002      	movs	r2, r0
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d910      	bls.n	800551c <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e22a      	b.n	8005954 <HAL_RCC_OscConfig+0x78c>
 80054fe:	46c0      	nop			; (mov r8, r8)
 8005500:	40021000 	.word	0x40021000
 8005504:	fffeffff 	.word	0xfffeffff
 8005508:	fffbffff 	.word	0xfffbffff
 800550c:	ffffe0ff 	.word	0xffffe0ff
 8005510:	080091e0 	.word	0x080091e0
 8005514:	20000054 	.word	0x20000054
 8005518:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800551c:	4bc6      	ldr	r3, [pc, #792]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	2380      	movs	r3, #128	; 0x80
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4013      	ands	r3, r2
 8005526:	d0e1      	beq.n	80054ec <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005528:	4bc3      	ldr	r3, [pc, #780]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	4ac3      	ldr	r2, [pc, #780]	; (800583c <HAL_RCC_OscConfig+0x674>)
 800552e:	4013      	ands	r3, r2
 8005530:	0019      	movs	r1, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005536:	4bc0      	ldr	r3, [pc, #768]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 8005538:	430a      	orrs	r2, r1
 800553a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800553c:	4bbe      	ldr	r3, [pc, #760]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	021b      	lsls	r3, r3, #8
 8005542:	0a19      	lsrs	r1, r3, #8
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	061a      	lsls	r2, r3, #24
 800554a:	4bbb      	ldr	r3, [pc, #748]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 800554c:	430a      	orrs	r2, r1
 800554e:	605a      	str	r2, [r3, #4]
 8005550:	e019      	b.n	8005586 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005552:	4bb9      	ldr	r3, [pc, #740]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	4bb8      	ldr	r3, [pc, #736]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 8005558:	49b9      	ldr	r1, [pc, #740]	; (8005840 <HAL_RCC_OscConfig+0x678>)
 800555a:	400a      	ands	r2, r1
 800555c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800555e:	f7fe fdf3 	bl	8004148 <HAL_GetTick>
 8005562:	0003      	movs	r3, r0
 8005564:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005566:	e008      	b.n	800557a <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005568:	f7fe fdee 	bl	8004148 <HAL_GetTick>
 800556c:	0002      	movs	r2, r0
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	2b02      	cmp	r3, #2
 8005574:	d901      	bls.n	800557a <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e1ec      	b.n	8005954 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800557a:	4baf      	ldr	r3, [pc, #700]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	2380      	movs	r3, #128	; 0x80
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4013      	ands	r3, r2
 8005584:	d1f0      	bne.n	8005568 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2208      	movs	r2, #8
 800558c:	4013      	ands	r3, r2
 800558e:	d036      	beq.n	80055fe <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d019      	beq.n	80055cc <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005598:	4ba7      	ldr	r3, [pc, #668]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 800559a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800559c:	4ba6      	ldr	r3, [pc, #664]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 800559e:	2101      	movs	r1, #1
 80055a0:	430a      	orrs	r2, r1
 80055a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055a4:	f7fe fdd0 	bl	8004148 <HAL_GetTick>
 80055a8:	0003      	movs	r3, r0
 80055aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80055ac:	e008      	b.n	80055c0 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055ae:	f7fe fdcb 	bl	8004148 <HAL_GetTick>
 80055b2:	0002      	movs	r2, r0
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d901      	bls.n	80055c0 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e1c9      	b.n	8005954 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80055c0:	4b9d      	ldr	r3, [pc, #628]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 80055c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055c4:	2202      	movs	r2, #2
 80055c6:	4013      	ands	r3, r2
 80055c8:	d0f1      	beq.n	80055ae <HAL_RCC_OscConfig+0x3e6>
 80055ca:	e018      	b.n	80055fe <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055cc:	4b9a      	ldr	r3, [pc, #616]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 80055ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055d0:	4b99      	ldr	r3, [pc, #612]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 80055d2:	2101      	movs	r1, #1
 80055d4:	438a      	bics	r2, r1
 80055d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055d8:	f7fe fdb6 	bl	8004148 <HAL_GetTick>
 80055dc:	0003      	movs	r3, r0
 80055de:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80055e0:	e008      	b.n	80055f4 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055e2:	f7fe fdb1 	bl	8004148 <HAL_GetTick>
 80055e6:	0002      	movs	r2, r0
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d901      	bls.n	80055f4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e1af      	b.n	8005954 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80055f4:	4b90      	ldr	r3, [pc, #576]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 80055f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f8:	2202      	movs	r2, #2
 80055fa:	4013      	ands	r3, r2
 80055fc:	d1f1      	bne.n	80055e2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2204      	movs	r2, #4
 8005604:	4013      	ands	r3, r2
 8005606:	d100      	bne.n	800560a <HAL_RCC_OscConfig+0x442>
 8005608:	e0af      	b.n	800576a <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800560a:	2323      	movs	r3, #35	; 0x23
 800560c:	18fb      	adds	r3, r7, r3
 800560e:	2200      	movs	r2, #0
 8005610:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005612:	4b89      	ldr	r3, [pc, #548]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 8005614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005616:	2380      	movs	r3, #128	; 0x80
 8005618:	055b      	lsls	r3, r3, #21
 800561a:	4013      	ands	r3, r2
 800561c:	d10a      	bne.n	8005634 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800561e:	4b86      	ldr	r3, [pc, #536]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 8005620:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005622:	4b85      	ldr	r3, [pc, #532]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 8005624:	2180      	movs	r1, #128	; 0x80
 8005626:	0549      	lsls	r1, r1, #21
 8005628:	430a      	orrs	r2, r1
 800562a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800562c:	2323      	movs	r3, #35	; 0x23
 800562e:	18fb      	adds	r3, r7, r3
 8005630:	2201      	movs	r2, #1
 8005632:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005634:	4b83      	ldr	r3, [pc, #524]	; (8005844 <HAL_RCC_OscConfig+0x67c>)
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	2380      	movs	r3, #128	; 0x80
 800563a:	005b      	lsls	r3, r3, #1
 800563c:	4013      	ands	r3, r2
 800563e:	d11a      	bne.n	8005676 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005640:	4b80      	ldr	r3, [pc, #512]	; (8005844 <HAL_RCC_OscConfig+0x67c>)
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	4b7f      	ldr	r3, [pc, #508]	; (8005844 <HAL_RCC_OscConfig+0x67c>)
 8005646:	2180      	movs	r1, #128	; 0x80
 8005648:	0049      	lsls	r1, r1, #1
 800564a:	430a      	orrs	r2, r1
 800564c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800564e:	f7fe fd7b 	bl	8004148 <HAL_GetTick>
 8005652:	0003      	movs	r3, r0
 8005654:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005656:	e008      	b.n	800566a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005658:	f7fe fd76 	bl	8004148 <HAL_GetTick>
 800565c:	0002      	movs	r2, r0
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b64      	cmp	r3, #100	; 0x64
 8005664:	d901      	bls.n	800566a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e174      	b.n	8005954 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800566a:	4b76      	ldr	r3, [pc, #472]	; (8005844 <HAL_RCC_OscConfig+0x67c>)
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	2380      	movs	r3, #128	; 0x80
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	4013      	ands	r3, r2
 8005674:	d0f0      	beq.n	8005658 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	689a      	ldr	r2, [r3, #8]
 800567a:	2380      	movs	r3, #128	; 0x80
 800567c:	005b      	lsls	r3, r3, #1
 800567e:	429a      	cmp	r2, r3
 8005680:	d107      	bne.n	8005692 <HAL_RCC_OscConfig+0x4ca>
 8005682:	4b6d      	ldr	r3, [pc, #436]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 8005684:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005686:	4b6c      	ldr	r3, [pc, #432]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 8005688:	2180      	movs	r1, #128	; 0x80
 800568a:	0049      	lsls	r1, r1, #1
 800568c:	430a      	orrs	r2, r1
 800568e:	651a      	str	r2, [r3, #80]	; 0x50
 8005690:	e031      	b.n	80056f6 <HAL_RCC_OscConfig+0x52e>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10c      	bne.n	80056b4 <HAL_RCC_OscConfig+0x4ec>
 800569a:	4b67      	ldr	r3, [pc, #412]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 800569c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800569e:	4b66      	ldr	r3, [pc, #408]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 80056a0:	4967      	ldr	r1, [pc, #412]	; (8005840 <HAL_RCC_OscConfig+0x678>)
 80056a2:	400a      	ands	r2, r1
 80056a4:	651a      	str	r2, [r3, #80]	; 0x50
 80056a6:	4b64      	ldr	r3, [pc, #400]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 80056a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056aa:	4b63      	ldr	r3, [pc, #396]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 80056ac:	4966      	ldr	r1, [pc, #408]	; (8005848 <HAL_RCC_OscConfig+0x680>)
 80056ae:	400a      	ands	r2, r1
 80056b0:	651a      	str	r2, [r3, #80]	; 0x50
 80056b2:	e020      	b.n	80056f6 <HAL_RCC_OscConfig+0x52e>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689a      	ldr	r2, [r3, #8]
 80056b8:	23a0      	movs	r3, #160	; 0xa0
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	429a      	cmp	r2, r3
 80056be:	d10e      	bne.n	80056de <HAL_RCC_OscConfig+0x516>
 80056c0:	4b5d      	ldr	r3, [pc, #372]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 80056c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056c4:	4b5c      	ldr	r3, [pc, #368]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 80056c6:	2180      	movs	r1, #128	; 0x80
 80056c8:	00c9      	lsls	r1, r1, #3
 80056ca:	430a      	orrs	r2, r1
 80056cc:	651a      	str	r2, [r3, #80]	; 0x50
 80056ce:	4b5a      	ldr	r3, [pc, #360]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 80056d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056d2:	4b59      	ldr	r3, [pc, #356]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 80056d4:	2180      	movs	r1, #128	; 0x80
 80056d6:	0049      	lsls	r1, r1, #1
 80056d8:	430a      	orrs	r2, r1
 80056da:	651a      	str	r2, [r3, #80]	; 0x50
 80056dc:	e00b      	b.n	80056f6 <HAL_RCC_OscConfig+0x52e>
 80056de:	4b56      	ldr	r3, [pc, #344]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 80056e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056e2:	4b55      	ldr	r3, [pc, #340]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 80056e4:	4956      	ldr	r1, [pc, #344]	; (8005840 <HAL_RCC_OscConfig+0x678>)
 80056e6:	400a      	ands	r2, r1
 80056e8:	651a      	str	r2, [r3, #80]	; 0x50
 80056ea:	4b53      	ldr	r3, [pc, #332]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 80056ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056ee:	4b52      	ldr	r3, [pc, #328]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 80056f0:	4955      	ldr	r1, [pc, #340]	; (8005848 <HAL_RCC_OscConfig+0x680>)
 80056f2:	400a      	ands	r2, r1
 80056f4:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d015      	beq.n	800572a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056fe:	f7fe fd23 	bl	8004148 <HAL_GetTick>
 8005702:	0003      	movs	r3, r0
 8005704:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005706:	e009      	b.n	800571c <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005708:	f7fe fd1e 	bl	8004148 <HAL_GetTick>
 800570c:	0002      	movs	r2, r0
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	4a4e      	ldr	r2, [pc, #312]	; (800584c <HAL_RCC_OscConfig+0x684>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d901      	bls.n	800571c <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e11b      	b.n	8005954 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800571c:	4b46      	ldr	r3, [pc, #280]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 800571e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005720:	2380      	movs	r3, #128	; 0x80
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4013      	ands	r3, r2
 8005726:	d0ef      	beq.n	8005708 <HAL_RCC_OscConfig+0x540>
 8005728:	e014      	b.n	8005754 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800572a:	f7fe fd0d 	bl	8004148 <HAL_GetTick>
 800572e:	0003      	movs	r3, r0
 8005730:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005732:	e009      	b.n	8005748 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005734:	f7fe fd08 	bl	8004148 <HAL_GetTick>
 8005738:	0002      	movs	r2, r0
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	4a43      	ldr	r2, [pc, #268]	; (800584c <HAL_RCC_OscConfig+0x684>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d901      	bls.n	8005748 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e105      	b.n	8005954 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005748:	4b3b      	ldr	r3, [pc, #236]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 800574a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800574c:	2380      	movs	r3, #128	; 0x80
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4013      	ands	r3, r2
 8005752:	d1ef      	bne.n	8005734 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005754:	2323      	movs	r3, #35	; 0x23
 8005756:	18fb      	adds	r3, r7, r3
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d105      	bne.n	800576a <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800575e:	4b36      	ldr	r3, [pc, #216]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 8005760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005762:	4b35      	ldr	r3, [pc, #212]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 8005764:	493a      	ldr	r1, [pc, #232]	; (8005850 <HAL_RCC_OscConfig+0x688>)
 8005766:	400a      	ands	r2, r1
 8005768:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2220      	movs	r2, #32
 8005770:	4013      	ands	r3, r2
 8005772:	d049      	beq.n	8005808 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d026      	beq.n	80057ca <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800577c:	4b2e      	ldr	r3, [pc, #184]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	4b2d      	ldr	r3, [pc, #180]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 8005782:	2101      	movs	r1, #1
 8005784:	430a      	orrs	r2, r1
 8005786:	609a      	str	r2, [r3, #8]
 8005788:	4b2b      	ldr	r3, [pc, #172]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 800578a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800578c:	4b2a      	ldr	r3, [pc, #168]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 800578e:	2101      	movs	r1, #1
 8005790:	430a      	orrs	r2, r1
 8005792:	635a      	str	r2, [r3, #52]	; 0x34
 8005794:	4b2f      	ldr	r3, [pc, #188]	; (8005854 <HAL_RCC_OscConfig+0x68c>)
 8005796:	6a1a      	ldr	r2, [r3, #32]
 8005798:	4b2e      	ldr	r3, [pc, #184]	; (8005854 <HAL_RCC_OscConfig+0x68c>)
 800579a:	2180      	movs	r1, #128	; 0x80
 800579c:	0189      	lsls	r1, r1, #6
 800579e:	430a      	orrs	r2, r1
 80057a0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a2:	f7fe fcd1 	bl	8004148 <HAL_GetTick>
 80057a6:	0003      	movs	r3, r0
 80057a8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80057aa:	e008      	b.n	80057be <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057ac:	f7fe fccc 	bl	8004148 <HAL_GetTick>
 80057b0:	0002      	movs	r2, r0
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e0ca      	b.n	8005954 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80057be:	4b1e      	ldr	r3, [pc, #120]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	2202      	movs	r2, #2
 80057c4:	4013      	ands	r3, r2
 80057c6:	d0f1      	beq.n	80057ac <HAL_RCC_OscConfig+0x5e4>
 80057c8:	e01e      	b.n	8005808 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80057ca:	4b1b      	ldr	r3, [pc, #108]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 80057cc:	689a      	ldr	r2, [r3, #8]
 80057ce:	4b1a      	ldr	r3, [pc, #104]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 80057d0:	2101      	movs	r1, #1
 80057d2:	438a      	bics	r2, r1
 80057d4:	609a      	str	r2, [r3, #8]
 80057d6:	4b1f      	ldr	r3, [pc, #124]	; (8005854 <HAL_RCC_OscConfig+0x68c>)
 80057d8:	6a1a      	ldr	r2, [r3, #32]
 80057da:	4b1e      	ldr	r3, [pc, #120]	; (8005854 <HAL_RCC_OscConfig+0x68c>)
 80057dc:	491e      	ldr	r1, [pc, #120]	; (8005858 <HAL_RCC_OscConfig+0x690>)
 80057de:	400a      	ands	r2, r1
 80057e0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057e2:	f7fe fcb1 	bl	8004148 <HAL_GetTick>
 80057e6:	0003      	movs	r3, r0
 80057e8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80057ea:	e008      	b.n	80057fe <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057ec:	f7fe fcac 	bl	8004148 <HAL_GetTick>
 80057f0:	0002      	movs	r2, r0
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e0aa      	b.n	8005954 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80057fe:	4b0e      	ldr	r3, [pc, #56]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	2202      	movs	r2, #2
 8005804:	4013      	ands	r3, r2
 8005806:	d1f1      	bne.n	80057ec <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580c:	2b00      	cmp	r3, #0
 800580e:	d100      	bne.n	8005812 <HAL_RCC_OscConfig+0x64a>
 8005810:	e09f      	b.n	8005952 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	2b0c      	cmp	r3, #12
 8005816:	d100      	bne.n	800581a <HAL_RCC_OscConfig+0x652>
 8005818:	e078      	b.n	800590c <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581e:	2b02      	cmp	r3, #2
 8005820:	d159      	bne.n	80058d6 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005822:	4b05      	ldr	r3, [pc, #20]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	4b04      	ldr	r3, [pc, #16]	; (8005838 <HAL_RCC_OscConfig+0x670>)
 8005828:	490c      	ldr	r1, [pc, #48]	; (800585c <HAL_RCC_OscConfig+0x694>)
 800582a:	400a      	ands	r2, r1
 800582c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800582e:	f7fe fc8b 	bl	8004148 <HAL_GetTick>
 8005832:	0003      	movs	r3, r0
 8005834:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005836:	e01c      	b.n	8005872 <HAL_RCC_OscConfig+0x6aa>
 8005838:	40021000 	.word	0x40021000
 800583c:	ffff1fff 	.word	0xffff1fff
 8005840:	fffffeff 	.word	0xfffffeff
 8005844:	40007000 	.word	0x40007000
 8005848:	fffffbff 	.word	0xfffffbff
 800584c:	00001388 	.word	0x00001388
 8005850:	efffffff 	.word	0xefffffff
 8005854:	40010000 	.word	0x40010000
 8005858:	ffffdfff 	.word	0xffffdfff
 800585c:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005860:	f7fe fc72 	bl	8004148 <HAL_GetTick>
 8005864:	0002      	movs	r2, r0
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b02      	cmp	r3, #2
 800586c:	d901      	bls.n	8005872 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e070      	b.n	8005954 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005872:	4b3a      	ldr	r3, [pc, #232]	; (800595c <HAL_RCC_OscConfig+0x794>)
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	2380      	movs	r3, #128	; 0x80
 8005878:	049b      	lsls	r3, r3, #18
 800587a:	4013      	ands	r3, r2
 800587c:	d1f0      	bne.n	8005860 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800587e:	4b37      	ldr	r3, [pc, #220]	; (800595c <HAL_RCC_OscConfig+0x794>)
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	4a37      	ldr	r2, [pc, #220]	; (8005960 <HAL_RCC_OscConfig+0x798>)
 8005884:	4013      	ands	r3, r2
 8005886:	0019      	movs	r1, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005890:	431a      	orrs	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005896:	431a      	orrs	r2, r3
 8005898:	4b30      	ldr	r3, [pc, #192]	; (800595c <HAL_RCC_OscConfig+0x794>)
 800589a:	430a      	orrs	r2, r1
 800589c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800589e:	4b2f      	ldr	r3, [pc, #188]	; (800595c <HAL_RCC_OscConfig+0x794>)
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	4b2e      	ldr	r3, [pc, #184]	; (800595c <HAL_RCC_OscConfig+0x794>)
 80058a4:	2180      	movs	r1, #128	; 0x80
 80058a6:	0449      	lsls	r1, r1, #17
 80058a8:	430a      	orrs	r2, r1
 80058aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ac:	f7fe fc4c 	bl	8004148 <HAL_GetTick>
 80058b0:	0003      	movs	r3, r0
 80058b2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80058b4:	e008      	b.n	80058c8 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058b6:	f7fe fc47 	bl	8004148 <HAL_GetTick>
 80058ba:	0002      	movs	r2, r0
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d901      	bls.n	80058c8 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e045      	b.n	8005954 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80058c8:	4b24      	ldr	r3, [pc, #144]	; (800595c <HAL_RCC_OscConfig+0x794>)
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	2380      	movs	r3, #128	; 0x80
 80058ce:	049b      	lsls	r3, r3, #18
 80058d0:	4013      	ands	r3, r2
 80058d2:	d0f0      	beq.n	80058b6 <HAL_RCC_OscConfig+0x6ee>
 80058d4:	e03d      	b.n	8005952 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058d6:	4b21      	ldr	r3, [pc, #132]	; (800595c <HAL_RCC_OscConfig+0x794>)
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	4b20      	ldr	r3, [pc, #128]	; (800595c <HAL_RCC_OscConfig+0x794>)
 80058dc:	4921      	ldr	r1, [pc, #132]	; (8005964 <HAL_RCC_OscConfig+0x79c>)
 80058de:	400a      	ands	r2, r1
 80058e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e2:	f7fe fc31 	bl	8004148 <HAL_GetTick>
 80058e6:	0003      	movs	r3, r0
 80058e8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80058ea:	e008      	b.n	80058fe <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058ec:	f7fe fc2c 	bl	8004148 <HAL_GetTick>
 80058f0:	0002      	movs	r2, r0
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e02a      	b.n	8005954 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80058fe:	4b17      	ldr	r3, [pc, #92]	; (800595c <HAL_RCC_OscConfig+0x794>)
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	2380      	movs	r3, #128	; 0x80
 8005904:	049b      	lsls	r3, r3, #18
 8005906:	4013      	ands	r3, r2
 8005908:	d1f0      	bne.n	80058ec <HAL_RCC_OscConfig+0x724>
 800590a:	e022      	b.n	8005952 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005910:	2b01      	cmp	r3, #1
 8005912:	d101      	bne.n	8005918 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e01d      	b.n	8005954 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005918:	4b10      	ldr	r3, [pc, #64]	; (800595c <HAL_RCC_OscConfig+0x794>)
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	2380      	movs	r3, #128	; 0x80
 8005922:	025b      	lsls	r3, r3, #9
 8005924:	401a      	ands	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592a:	429a      	cmp	r2, r3
 800592c:	d10f      	bne.n	800594e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	23f0      	movs	r3, #240	; 0xf0
 8005932:	039b      	lsls	r3, r3, #14
 8005934:	401a      	ands	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800593a:	429a      	cmp	r2, r3
 800593c:	d107      	bne.n	800594e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800593e:	69ba      	ldr	r2, [r7, #24]
 8005940:	23c0      	movs	r3, #192	; 0xc0
 8005942:	041b      	lsls	r3, r3, #16
 8005944:	401a      	ands	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800594a:	429a      	cmp	r2, r3
 800594c:	d001      	beq.n	8005952 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e000      	b.n	8005954 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	0018      	movs	r0, r3
 8005956:	46bd      	mov	sp, r7
 8005958:	b00a      	add	sp, #40	; 0x28
 800595a:	bdb0      	pop	{r4, r5, r7, pc}
 800595c:	40021000 	.word	0x40021000
 8005960:	ff02ffff 	.word	0xff02ffff
 8005964:	feffffff 	.word	0xfeffffff

08005968 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005968:	b5b0      	push	{r4, r5, r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e10d      	b.n	8005b98 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800597c:	4b88      	ldr	r3, [pc, #544]	; (8005ba0 <HAL_RCC_ClockConfig+0x238>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2201      	movs	r2, #1
 8005982:	4013      	ands	r3, r2
 8005984:	683a      	ldr	r2, [r7, #0]
 8005986:	429a      	cmp	r2, r3
 8005988:	d911      	bls.n	80059ae <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800598a:	4b85      	ldr	r3, [pc, #532]	; (8005ba0 <HAL_RCC_ClockConfig+0x238>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2201      	movs	r2, #1
 8005990:	4393      	bics	r3, r2
 8005992:	0019      	movs	r1, r3
 8005994:	4b82      	ldr	r3, [pc, #520]	; (8005ba0 <HAL_RCC_ClockConfig+0x238>)
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	430a      	orrs	r2, r1
 800599a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800599c:	4b80      	ldr	r3, [pc, #512]	; (8005ba0 <HAL_RCC_ClockConfig+0x238>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2201      	movs	r2, #1
 80059a2:	4013      	ands	r3, r2
 80059a4:	683a      	ldr	r2, [r7, #0]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d001      	beq.n	80059ae <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e0f4      	b.n	8005b98 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2202      	movs	r2, #2
 80059b4:	4013      	ands	r3, r2
 80059b6:	d009      	beq.n	80059cc <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059b8:	4b7a      	ldr	r3, [pc, #488]	; (8005ba4 <HAL_RCC_ClockConfig+0x23c>)
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	22f0      	movs	r2, #240	; 0xf0
 80059be:	4393      	bics	r3, r2
 80059c0:	0019      	movs	r1, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689a      	ldr	r2, [r3, #8]
 80059c6:	4b77      	ldr	r3, [pc, #476]	; (8005ba4 <HAL_RCC_ClockConfig+0x23c>)
 80059c8:	430a      	orrs	r2, r1
 80059ca:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2201      	movs	r2, #1
 80059d2:	4013      	ands	r3, r2
 80059d4:	d100      	bne.n	80059d8 <HAL_RCC_ClockConfig+0x70>
 80059d6:	e089      	b.n	8005aec <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d107      	bne.n	80059f0 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059e0:	4b70      	ldr	r3, [pc, #448]	; (8005ba4 <HAL_RCC_ClockConfig+0x23c>)
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	2380      	movs	r3, #128	; 0x80
 80059e6:	029b      	lsls	r3, r3, #10
 80059e8:	4013      	ands	r3, r2
 80059ea:	d120      	bne.n	8005a2e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e0d3      	b.n	8005b98 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	2b03      	cmp	r3, #3
 80059f6:	d107      	bne.n	8005a08 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059f8:	4b6a      	ldr	r3, [pc, #424]	; (8005ba4 <HAL_RCC_ClockConfig+0x23c>)
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	2380      	movs	r3, #128	; 0x80
 80059fe:	049b      	lsls	r3, r3, #18
 8005a00:	4013      	ands	r3, r2
 8005a02:	d114      	bne.n	8005a2e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e0c7      	b.n	8005b98 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d106      	bne.n	8005a1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a10:	4b64      	ldr	r3, [pc, #400]	; (8005ba4 <HAL_RCC_ClockConfig+0x23c>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2204      	movs	r2, #4
 8005a16:	4013      	ands	r3, r2
 8005a18:	d109      	bne.n	8005a2e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e0bc      	b.n	8005b98 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005a1e:	4b61      	ldr	r3, [pc, #388]	; (8005ba4 <HAL_RCC_ClockConfig+0x23c>)
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	2380      	movs	r3, #128	; 0x80
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4013      	ands	r3, r2
 8005a28:	d101      	bne.n	8005a2e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e0b4      	b.n	8005b98 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a2e:	4b5d      	ldr	r3, [pc, #372]	; (8005ba4 <HAL_RCC_ClockConfig+0x23c>)
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	2203      	movs	r2, #3
 8005a34:	4393      	bics	r3, r2
 8005a36:	0019      	movs	r1, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	4b59      	ldr	r3, [pc, #356]	; (8005ba4 <HAL_RCC_ClockConfig+0x23c>)
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a42:	f7fe fb81 	bl	8004148 <HAL_GetTick>
 8005a46:	0003      	movs	r3, r0
 8005a48:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d111      	bne.n	8005a76 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a52:	e009      	b.n	8005a68 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a54:	f7fe fb78 	bl	8004148 <HAL_GetTick>
 8005a58:	0002      	movs	r2, r0
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	4a52      	ldr	r2, [pc, #328]	; (8005ba8 <HAL_RCC_ClockConfig+0x240>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d901      	bls.n	8005a68 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e097      	b.n	8005b98 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a68:	4b4e      	ldr	r3, [pc, #312]	; (8005ba4 <HAL_RCC_ClockConfig+0x23c>)
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	220c      	movs	r2, #12
 8005a6e:	4013      	ands	r3, r2
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	d1ef      	bne.n	8005a54 <HAL_RCC_ClockConfig+0xec>
 8005a74:	e03a      	b.n	8005aec <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	2b03      	cmp	r3, #3
 8005a7c:	d111      	bne.n	8005aa2 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a7e:	e009      	b.n	8005a94 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a80:	f7fe fb62 	bl	8004148 <HAL_GetTick>
 8005a84:	0002      	movs	r2, r0
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	4a47      	ldr	r2, [pc, #284]	; (8005ba8 <HAL_RCC_ClockConfig+0x240>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d901      	bls.n	8005a94 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e081      	b.n	8005b98 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a94:	4b43      	ldr	r3, [pc, #268]	; (8005ba4 <HAL_RCC_ClockConfig+0x23c>)
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	220c      	movs	r2, #12
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	2b0c      	cmp	r3, #12
 8005a9e:	d1ef      	bne.n	8005a80 <HAL_RCC_ClockConfig+0x118>
 8005aa0:	e024      	b.n	8005aec <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d11b      	bne.n	8005ae2 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005aaa:	e009      	b.n	8005ac0 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aac:	f7fe fb4c 	bl	8004148 <HAL_GetTick>
 8005ab0:	0002      	movs	r2, r0
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	4a3c      	ldr	r2, [pc, #240]	; (8005ba8 <HAL_RCC_ClockConfig+0x240>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d901      	bls.n	8005ac0 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e06b      	b.n	8005b98 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ac0:	4b38      	ldr	r3, [pc, #224]	; (8005ba4 <HAL_RCC_ClockConfig+0x23c>)
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	220c      	movs	r2, #12
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	2b04      	cmp	r3, #4
 8005aca:	d1ef      	bne.n	8005aac <HAL_RCC_ClockConfig+0x144>
 8005acc:	e00e      	b.n	8005aec <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ace:	f7fe fb3b 	bl	8004148 <HAL_GetTick>
 8005ad2:	0002      	movs	r2, r0
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	4a33      	ldr	r2, [pc, #204]	; (8005ba8 <HAL_RCC_ClockConfig+0x240>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e05a      	b.n	8005b98 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005ae2:	4b30      	ldr	r3, [pc, #192]	; (8005ba4 <HAL_RCC_ClockConfig+0x23c>)
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	220c      	movs	r2, #12
 8005ae8:	4013      	ands	r3, r2
 8005aea:	d1f0      	bne.n	8005ace <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005aec:	4b2c      	ldr	r3, [pc, #176]	; (8005ba0 <HAL_RCC_ClockConfig+0x238>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2201      	movs	r2, #1
 8005af2:	4013      	ands	r3, r2
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d211      	bcs.n	8005b1e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005afa:	4b29      	ldr	r3, [pc, #164]	; (8005ba0 <HAL_RCC_ClockConfig+0x238>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2201      	movs	r2, #1
 8005b00:	4393      	bics	r3, r2
 8005b02:	0019      	movs	r1, r3
 8005b04:	4b26      	ldr	r3, [pc, #152]	; (8005ba0 <HAL_RCC_ClockConfig+0x238>)
 8005b06:	683a      	ldr	r2, [r7, #0]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b0c:	4b24      	ldr	r3, [pc, #144]	; (8005ba0 <HAL_RCC_ClockConfig+0x238>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2201      	movs	r2, #1
 8005b12:	4013      	ands	r3, r2
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d001      	beq.n	8005b1e <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e03c      	b.n	8005b98 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2204      	movs	r2, #4
 8005b24:	4013      	ands	r3, r2
 8005b26:	d009      	beq.n	8005b3c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b28:	4b1e      	ldr	r3, [pc, #120]	; (8005ba4 <HAL_RCC_ClockConfig+0x23c>)
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	4a1f      	ldr	r2, [pc, #124]	; (8005bac <HAL_RCC_ClockConfig+0x244>)
 8005b2e:	4013      	ands	r3, r2
 8005b30:	0019      	movs	r1, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68da      	ldr	r2, [r3, #12]
 8005b36:	4b1b      	ldr	r3, [pc, #108]	; (8005ba4 <HAL_RCC_ClockConfig+0x23c>)
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2208      	movs	r2, #8
 8005b42:	4013      	ands	r3, r2
 8005b44:	d00a      	beq.n	8005b5c <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005b46:	4b17      	ldr	r3, [pc, #92]	; (8005ba4 <HAL_RCC_ClockConfig+0x23c>)
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	4a19      	ldr	r2, [pc, #100]	; (8005bb0 <HAL_RCC_ClockConfig+0x248>)
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	0019      	movs	r1, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	00da      	lsls	r2, r3, #3
 8005b56:	4b13      	ldr	r3, [pc, #76]	; (8005ba4 <HAL_RCC_ClockConfig+0x23c>)
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b5c:	f000 f82e 	bl	8005bbc <HAL_RCC_GetSysClockFreq>
 8005b60:	0001      	movs	r1, r0
 8005b62:	4b10      	ldr	r3, [pc, #64]	; (8005ba4 <HAL_RCC_ClockConfig+0x23c>)
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	091b      	lsrs	r3, r3, #4
 8005b68:	220f      	movs	r2, #15
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	4a11      	ldr	r2, [pc, #68]	; (8005bb4 <HAL_RCC_ClockConfig+0x24c>)
 8005b6e:	5cd3      	ldrb	r3, [r2, r3]
 8005b70:	000a      	movs	r2, r1
 8005b72:	40da      	lsrs	r2, r3
 8005b74:	4b10      	ldr	r3, [pc, #64]	; (8005bb8 <HAL_RCC_ClockConfig+0x250>)
 8005b76:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8005b78:	250b      	movs	r5, #11
 8005b7a:	197c      	adds	r4, r7, r5
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	f7fe faad 	bl	80040dc <HAL_InitTick>
 8005b82:	0003      	movs	r3, r0
 8005b84:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005b86:	197b      	adds	r3, r7, r5
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8005b8e:	230b      	movs	r3, #11
 8005b90:	18fb      	adds	r3, r7, r3
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	e000      	b.n	8005b98 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	0018      	movs	r0, r3
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	b004      	add	sp, #16
 8005b9e:	bdb0      	pop	{r4, r5, r7, pc}
 8005ba0:	40022000 	.word	0x40022000
 8005ba4:	40021000 	.word	0x40021000
 8005ba8:	00001388 	.word	0x00001388
 8005bac:	fffff8ff 	.word	0xfffff8ff
 8005bb0:	ffffc7ff 	.word	0xffffc7ff
 8005bb4:	080091e0 	.word	0x080091e0
 8005bb8:	20000054 	.word	0x20000054

08005bbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005bc2:	4b3b      	ldr	r3, [pc, #236]	; (8005cb0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	220c      	movs	r2, #12
 8005bcc:	4013      	ands	r3, r2
 8005bce:	2b08      	cmp	r3, #8
 8005bd0:	d00e      	beq.n	8005bf0 <HAL_RCC_GetSysClockFreq+0x34>
 8005bd2:	2b0c      	cmp	r3, #12
 8005bd4:	d00f      	beq.n	8005bf6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005bd6:	2b04      	cmp	r3, #4
 8005bd8:	d157      	bne.n	8005c8a <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005bda:	4b35      	ldr	r3, [pc, #212]	; (8005cb0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2210      	movs	r2, #16
 8005be0:	4013      	ands	r3, r2
 8005be2:	d002      	beq.n	8005bea <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005be4:	4b33      	ldr	r3, [pc, #204]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005be6:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005be8:	e05d      	b.n	8005ca6 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8005bea:	4b33      	ldr	r3, [pc, #204]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005bec:	613b      	str	r3, [r7, #16]
      break;
 8005bee:	e05a      	b.n	8005ca6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005bf0:	4b32      	ldr	r3, [pc, #200]	; (8005cbc <HAL_RCC_GetSysClockFreq+0x100>)
 8005bf2:	613b      	str	r3, [r7, #16]
      break;
 8005bf4:	e057      	b.n	8005ca6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	0c9b      	lsrs	r3, r3, #18
 8005bfa:	220f      	movs	r2, #15
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	4a30      	ldr	r2, [pc, #192]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x104>)
 8005c00:	5cd3      	ldrb	r3, [r2, r3]
 8005c02:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	0d9b      	lsrs	r3, r3, #22
 8005c08:	2203      	movs	r2, #3
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c10:	4b27      	ldr	r3, [pc, #156]	; (8005cb0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005c12:	68da      	ldr	r2, [r3, #12]
 8005c14:	2380      	movs	r3, #128	; 0x80
 8005c16:	025b      	lsls	r3, r3, #9
 8005c18:	4013      	ands	r3, r2
 8005c1a:	d00f      	beq.n	8005c3c <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8005c1c:	68b9      	ldr	r1, [r7, #8]
 8005c1e:	000a      	movs	r2, r1
 8005c20:	0152      	lsls	r2, r2, #5
 8005c22:	1a52      	subs	r2, r2, r1
 8005c24:	0193      	lsls	r3, r2, #6
 8005c26:	1a9b      	subs	r3, r3, r2
 8005c28:	00db      	lsls	r3, r3, #3
 8005c2a:	185b      	adds	r3, r3, r1
 8005c2c:	025b      	lsls	r3, r3, #9
 8005c2e:	6879      	ldr	r1, [r7, #4]
 8005c30:	0018      	movs	r0, r3
 8005c32:	f7fa fa71 	bl	8000118 <__udivsi3>
 8005c36:	0003      	movs	r3, r0
 8005c38:	617b      	str	r3, [r7, #20]
 8005c3a:	e023      	b.n	8005c84 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005c3c:	4b1c      	ldr	r3, [pc, #112]	; (8005cb0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2210      	movs	r2, #16
 8005c42:	4013      	ands	r3, r2
 8005c44:	d00f      	beq.n	8005c66 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8005c46:	68b9      	ldr	r1, [r7, #8]
 8005c48:	000a      	movs	r2, r1
 8005c4a:	0152      	lsls	r2, r2, #5
 8005c4c:	1a52      	subs	r2, r2, r1
 8005c4e:	0193      	lsls	r3, r2, #6
 8005c50:	1a9b      	subs	r3, r3, r2
 8005c52:	00db      	lsls	r3, r3, #3
 8005c54:	185b      	adds	r3, r3, r1
 8005c56:	021b      	lsls	r3, r3, #8
 8005c58:	6879      	ldr	r1, [r7, #4]
 8005c5a:	0018      	movs	r0, r3
 8005c5c:	f7fa fa5c 	bl	8000118 <__udivsi3>
 8005c60:	0003      	movs	r3, r0
 8005c62:	617b      	str	r3, [r7, #20]
 8005c64:	e00e      	b.n	8005c84 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8005c66:	68b9      	ldr	r1, [r7, #8]
 8005c68:	000a      	movs	r2, r1
 8005c6a:	0152      	lsls	r2, r2, #5
 8005c6c:	1a52      	subs	r2, r2, r1
 8005c6e:	0193      	lsls	r3, r2, #6
 8005c70:	1a9b      	subs	r3, r3, r2
 8005c72:	00db      	lsls	r3, r3, #3
 8005c74:	185b      	adds	r3, r3, r1
 8005c76:	029b      	lsls	r3, r3, #10
 8005c78:	6879      	ldr	r1, [r7, #4]
 8005c7a:	0018      	movs	r0, r3
 8005c7c:	f7fa fa4c 	bl	8000118 <__udivsi3>
 8005c80:	0003      	movs	r3, r0
 8005c82:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	613b      	str	r3, [r7, #16]
      break;
 8005c88:	e00d      	b.n	8005ca6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005c8a:	4b09      	ldr	r3, [pc, #36]	; (8005cb0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	0b5b      	lsrs	r3, r3, #13
 8005c90:	2207      	movs	r2, #7
 8005c92:	4013      	ands	r3, r2
 8005c94:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	2280      	movs	r2, #128	; 0x80
 8005c9c:	0212      	lsls	r2, r2, #8
 8005c9e:	409a      	lsls	r2, r3
 8005ca0:	0013      	movs	r3, r2
 8005ca2:	613b      	str	r3, [r7, #16]
      break;
 8005ca4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005ca6:	693b      	ldr	r3, [r7, #16]
}
 8005ca8:	0018      	movs	r0, r3
 8005caa:	46bd      	mov	sp, r7
 8005cac:	b006      	add	sp, #24
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	40021000 	.word	0x40021000
 8005cb4:	003d0900 	.word	0x003d0900
 8005cb8:	00f42400 	.word	0x00f42400
 8005cbc:	007a1200 	.word	0x007a1200
 8005cc0:	080091f0 	.word	0x080091f0

08005cc4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	d106      	bne.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	2380      	movs	r3, #128	; 0x80
 8005cdc:	011b      	lsls	r3, r3, #4
 8005cde:	4013      	ands	r3, r2
 8005ce0:	d100      	bne.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8005ce2:	e0dd      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8005ce4:	2317      	movs	r3, #23
 8005ce6:	18fb      	adds	r3, r7, r3
 8005ce8:	2200      	movs	r2, #0
 8005cea:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cec:	4ba4      	ldr	r3, [pc, #656]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005cee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cf0:	2380      	movs	r3, #128	; 0x80
 8005cf2:	055b      	lsls	r3, r3, #21
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	d10a      	bne.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cf8:	4ba1      	ldr	r3, [pc, #644]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005cfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cfc:	4ba0      	ldr	r3, [pc, #640]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005cfe:	2180      	movs	r1, #128	; 0x80
 8005d00:	0549      	lsls	r1, r1, #21
 8005d02:	430a      	orrs	r2, r1
 8005d04:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005d06:	2317      	movs	r3, #23
 8005d08:	18fb      	adds	r3, r7, r3
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d0e:	4b9d      	ldr	r3, [pc, #628]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	2380      	movs	r3, #128	; 0x80
 8005d14:	005b      	lsls	r3, r3, #1
 8005d16:	4013      	ands	r3, r2
 8005d18:	d11a      	bne.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d1a:	4b9a      	ldr	r3, [pc, #616]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	4b99      	ldr	r3, [pc, #612]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005d20:	2180      	movs	r1, #128	; 0x80
 8005d22:	0049      	lsls	r1, r1, #1
 8005d24:	430a      	orrs	r2, r1
 8005d26:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d28:	f7fe fa0e 	bl	8004148 <HAL_GetTick>
 8005d2c:	0003      	movs	r3, r0
 8005d2e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d30:	e008      	b.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d32:	f7fe fa09 	bl	8004148 <HAL_GetTick>
 8005d36:	0002      	movs	r2, r0
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	2b64      	cmp	r3, #100	; 0x64
 8005d3e:	d901      	bls.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e118      	b.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d44:	4b8f      	ldr	r3, [pc, #572]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	2380      	movs	r3, #128	; 0x80
 8005d4a:	005b      	lsls	r3, r3, #1
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	d0f0      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005d50:	4b8b      	ldr	r3, [pc, #556]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	23c0      	movs	r3, #192	; 0xc0
 8005d56:	039b      	lsls	r3, r3, #14
 8005d58:	4013      	ands	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	23c0      	movs	r3, #192	; 0xc0
 8005d62:	039b      	lsls	r3, r3, #14
 8005d64:	4013      	ands	r3, r2
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d107      	bne.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	689a      	ldr	r2, [r3, #8]
 8005d70:	23c0      	movs	r3, #192	; 0xc0
 8005d72:	039b      	lsls	r3, r3, #14
 8005d74:	4013      	ands	r3, r2
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d013      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	23c0      	movs	r3, #192	; 0xc0
 8005d82:	029b      	lsls	r3, r3, #10
 8005d84:	401a      	ands	r2, r3
 8005d86:	23c0      	movs	r3, #192	; 0xc0
 8005d88:	029b      	lsls	r3, r3, #10
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d10a      	bne.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005d8e:	4b7c      	ldr	r3, [pc, #496]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	2380      	movs	r3, #128	; 0x80
 8005d94:	029b      	lsls	r3, r3, #10
 8005d96:	401a      	ands	r2, r3
 8005d98:	2380      	movs	r3, #128	; 0x80
 8005d9a:	029b      	lsls	r3, r3, #10
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d101      	bne.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e0e8      	b.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005da4:	4b76      	ldr	r3, [pc, #472]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005da6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005da8:	23c0      	movs	r3, #192	; 0xc0
 8005daa:	029b      	lsls	r3, r3, #10
 8005dac:	4013      	ands	r3, r2
 8005dae:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d049      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	23c0      	movs	r3, #192	; 0xc0
 8005dbc:	029b      	lsls	r3, r3, #10
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d004      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2220      	movs	r2, #32
 8005dcc:	4013      	ands	r3, r2
 8005dce:	d10d      	bne.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689a      	ldr	r2, [r3, #8]
 8005dd4:	23c0      	movs	r3, #192	; 0xc0
 8005dd6:	029b      	lsls	r3, r3, #10
 8005dd8:	4013      	ands	r3, r2
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d034      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	2380      	movs	r3, #128	; 0x80
 8005de6:	011b      	lsls	r3, r3, #4
 8005de8:	4013      	ands	r3, r2
 8005dea:	d02e      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005dec:	4b64      	ldr	r3, [pc, #400]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005df0:	4a65      	ldr	r2, [pc, #404]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005df2:	4013      	ands	r3, r2
 8005df4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005df6:	4b62      	ldr	r3, [pc, #392]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005df8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005dfa:	4b61      	ldr	r3, [pc, #388]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005dfc:	2180      	movs	r1, #128	; 0x80
 8005dfe:	0309      	lsls	r1, r1, #12
 8005e00:	430a      	orrs	r2, r1
 8005e02:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e04:	4b5e      	ldr	r3, [pc, #376]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005e06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e08:	4b5d      	ldr	r3, [pc, #372]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005e0a:	4960      	ldr	r1, [pc, #384]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005e0c:	400a      	ands	r2, r1
 8005e0e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005e10:	4b5b      	ldr	r3, [pc, #364]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	2380      	movs	r3, #128	; 0x80
 8005e1a:	005b      	lsls	r3, r3, #1
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	d014      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e20:	f7fe f992 	bl	8004148 <HAL_GetTick>
 8005e24:	0003      	movs	r3, r0
 8005e26:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e28:	e009      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e2a:	f7fe f98d 	bl	8004148 <HAL_GetTick>
 8005e2e:	0002      	movs	r2, r0
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	4a56      	ldr	r2, [pc, #344]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d901      	bls.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e09b      	b.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e3e:	4b50      	ldr	r3, [pc, #320]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005e40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e42:	2380      	movs	r3, #128	; 0x80
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4013      	ands	r3, r2
 8005e48:	d0ef      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	23c0      	movs	r3, #192	; 0xc0
 8005e50:	029b      	lsls	r3, r3, #10
 8005e52:	401a      	ands	r2, r3
 8005e54:	23c0      	movs	r3, #192	; 0xc0
 8005e56:	029b      	lsls	r3, r3, #10
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d10c      	bne.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005e5c:	4b48      	ldr	r3, [pc, #288]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a4c      	ldr	r2, [pc, #304]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8005e62:	4013      	ands	r3, r2
 8005e64:	0019      	movs	r1, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685a      	ldr	r2, [r3, #4]
 8005e6a:	23c0      	movs	r3, #192	; 0xc0
 8005e6c:	039b      	lsls	r3, r3, #14
 8005e6e:	401a      	ands	r2, r3
 8005e70:	4b43      	ldr	r3, [pc, #268]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005e72:	430a      	orrs	r2, r1
 8005e74:	601a      	str	r2, [r3, #0]
 8005e76:	4b42      	ldr	r3, [pc, #264]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005e78:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	23c0      	movs	r3, #192	; 0xc0
 8005e80:	029b      	lsls	r3, r3, #10
 8005e82:	401a      	ands	r2, r3
 8005e84:	4b3e      	ldr	r3, [pc, #248]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005e86:	430a      	orrs	r2, r1
 8005e88:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e8a:	2317      	movs	r3, #23
 8005e8c:	18fb      	adds	r3, r7, r3
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d105      	bne.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e94:	4b3a      	ldr	r3, [pc, #232]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005e96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e98:	4b39      	ldr	r3, [pc, #228]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005e9a:	493f      	ldr	r1, [pc, #252]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005e9c:	400a      	ands	r2, r1
 8005e9e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	d009      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005eaa:	4b35      	ldr	r3, [pc, #212]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eae:	2203      	movs	r2, #3
 8005eb0:	4393      	bics	r3, r2
 8005eb2:	0019      	movs	r1, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	68da      	ldr	r2, [r3, #12]
 8005eb8:	4b31      	ldr	r3, [pc, #196]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005eba:	430a      	orrs	r2, r1
 8005ebc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	d009      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ec8:	4b2d      	ldr	r3, [pc, #180]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ecc:	220c      	movs	r2, #12
 8005ece:	4393      	bics	r3, r2
 8005ed0:	0019      	movs	r1, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691a      	ldr	r2, [r3, #16]
 8005ed6:	4b2a      	ldr	r3, [pc, #168]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2204      	movs	r2, #4
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	d009      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ee6:	4b26      	ldr	r3, [pc, #152]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eea:	4a2c      	ldr	r2, [pc, #176]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005eec:	4013      	ands	r3, r2
 8005eee:	0019      	movs	r1, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	695a      	ldr	r2, [r3, #20]
 8005ef4:	4b22      	ldr	r3, [pc, #136]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2208      	movs	r2, #8
 8005f00:	4013      	ands	r3, r2
 8005f02:	d009      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f04:	4b1e      	ldr	r3, [pc, #120]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f08:	4a25      	ldr	r2, [pc, #148]	; (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	0019      	movs	r1, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	699a      	ldr	r2, [r3, #24]
 8005f12:	4b1b      	ldr	r3, [pc, #108]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f14:	430a      	orrs	r2, r1
 8005f16:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	2380      	movs	r3, #128	; 0x80
 8005f1e:	005b      	lsls	r3, r3, #1
 8005f20:	4013      	ands	r3, r2
 8005f22:	d009      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f24:	4b16      	ldr	r3, [pc, #88]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f28:	4a17      	ldr	r2, [pc, #92]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	0019      	movs	r1, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	69da      	ldr	r2, [r3, #28]
 8005f32:	4b13      	ldr	r3, [pc, #76]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f34:	430a      	orrs	r2, r1
 8005f36:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2240      	movs	r2, #64	; 0x40
 8005f3e:	4013      	ands	r3, r2
 8005f40:	d009      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f42:	4b0f      	ldr	r3, [pc, #60]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f46:	4a17      	ldr	r2, [pc, #92]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005f48:	4013      	ands	r3, r2
 8005f4a:	0019      	movs	r1, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f50:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f52:	430a      	orrs	r2, r1
 8005f54:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2280      	movs	r2, #128	; 0x80
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	d009      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005f60:	4b07      	ldr	r3, [pc, #28]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f64:	4a10      	ldr	r2, [pc, #64]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005f66:	4013      	ands	r3, r2
 8005f68:	0019      	movs	r1, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a1a      	ldr	r2, [r3, #32]
 8005f6e:	4b04      	ldr	r3, [pc, #16]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f70:	430a      	orrs	r2, r1
 8005f72:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	0018      	movs	r0, r3
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	b006      	add	sp, #24
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	46c0      	nop			; (mov r8, r8)
 8005f80:	40021000 	.word	0x40021000
 8005f84:	40007000 	.word	0x40007000
 8005f88:	fffcffff 	.word	0xfffcffff
 8005f8c:	fff7ffff 	.word	0xfff7ffff
 8005f90:	00001388 	.word	0x00001388
 8005f94:	ffcfffff 	.word	0xffcfffff
 8005f98:	efffffff 	.word	0xefffffff
 8005f9c:	fffff3ff 	.word	0xfffff3ff
 8005fa0:	ffffcfff 	.word	0xffffcfff
 8005fa4:	fbffffff 	.word	0xfbffffff
 8005fa8:	fff3ffff 	.word	0xfff3ffff

08005fac <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e08e      	b.n	80060dc <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2221      	movs	r2, #33	; 0x21
 8005fc2:	5c9b      	ldrb	r3, [r3, r2]
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d107      	bne.n	8005fda <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2220      	movs	r2, #32
 8005fce:	2100      	movs	r1, #0
 8005fd0:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	0018      	movs	r0, r3
 8005fd6:	f7fd fceb 	bl	80039b0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2221      	movs	r2, #33	; 0x21
 8005fde:	2102      	movs	r1, #2
 8005fe0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	22ca      	movs	r2, #202	; 0xca
 8005fe8:	625a      	str	r2, [r3, #36]	; 0x24
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2253      	movs	r2, #83	; 0x53
 8005ff0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	0018      	movs	r0, r3
 8005ff6:	f000 fcf4 	bl	80069e2 <RTC_EnterInitMode>
 8005ffa:	1e03      	subs	r3, r0, #0
 8005ffc:	d009      	beq.n	8006012 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	22ff      	movs	r2, #255	; 0xff
 8006004:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2221      	movs	r2, #33	; 0x21
 800600a:	2104      	movs	r1, #4
 800600c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e064      	b.n	80060dc <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4931      	ldr	r1, [pc, #196]	; (80060e4 <HAL_RTC_Init+0x138>)
 800601e:	400a      	ands	r2, r1
 8006020:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6899      	ldr	r1, [r3, #8]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	431a      	orrs	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	431a      	orrs	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	430a      	orrs	r2, r1
 800603e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	68d2      	ldr	r2, [r2, #12]
 8006048:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6919      	ldr	r1, [r3, #16]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	041a      	lsls	r2, r3, #16
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	430a      	orrs	r2, r1
 800605c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68da      	ldr	r2, [r3, #12]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2180      	movs	r1, #128	; 0x80
 800606a:	438a      	bics	r2, r1
 800606c:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2103      	movs	r1, #3
 800607a:	438a      	bics	r2, r1
 800607c:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	69da      	ldr	r2, [r3, #28]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	695b      	ldr	r3, [r3, #20]
 800608c:	431a      	orrs	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	430a      	orrs	r2, r1
 8006094:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	2220      	movs	r2, #32
 800609e:	4013      	ands	r3, r2
 80060a0:	d113      	bne.n	80060ca <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	0018      	movs	r0, r3
 80060a6:	f000 fc75 	bl	8006994 <HAL_RTC_WaitForSynchro>
 80060aa:	1e03      	subs	r3, r0, #0
 80060ac:	d00d      	beq.n	80060ca <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	22ff      	movs	r2, #255	; 0xff
 80060b4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2221      	movs	r2, #33	; 0x21
 80060ba:	2104      	movs	r1, #4
 80060bc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2220      	movs	r2, #32
 80060c2:	2100      	movs	r1, #0
 80060c4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e008      	b.n	80060dc <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	22ff      	movs	r2, #255	; 0xff
 80060d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2221      	movs	r2, #33	; 0x21
 80060d6:	2101      	movs	r1, #1
 80060d8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80060da:	2300      	movs	r3, #0
  }
}
 80060dc:	0018      	movs	r0, r3
 80060de:	46bd      	mov	sp, r7
 80060e0:	b002      	add	sp, #8
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	ff8fffbf 	.word	0xff8fffbf

080060e8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80060e8:	b590      	push	{r4, r7, lr}
 80060ea:	b087      	sub	sp, #28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2220      	movs	r2, #32
 80060f8:	5c9b      	ldrb	r3, [r3, r2]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d101      	bne.n	8006102 <HAL_RTC_SetTime+0x1a>
 80060fe:	2302      	movs	r3, #2
 8006100:	e0ad      	b.n	800625e <HAL_RTC_SetTime+0x176>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2220      	movs	r2, #32
 8006106:	2101      	movs	r1, #1
 8006108:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2221      	movs	r2, #33	; 0x21
 800610e:	2102      	movs	r1, #2
 8006110:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d125      	bne.n	8006164 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	2240      	movs	r2, #64	; 0x40
 8006120:	4013      	ands	r3, r2
 8006122:	d102      	bne.n	800612a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	2200      	movs	r2, #0
 8006128:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	0018      	movs	r0, r3
 8006130:	f000 fc81 	bl	8006a36 <RTC_ByteToBcd2>
 8006134:	0003      	movs	r3, r0
 8006136:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	785b      	ldrb	r3, [r3, #1]
 800613c:	0018      	movs	r0, r3
 800613e:	f000 fc7a 	bl	8006a36 <RTC_ByteToBcd2>
 8006142:	0003      	movs	r3, r0
 8006144:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006146:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	789b      	ldrb	r3, [r3, #2]
 800614c:	0018      	movs	r0, r3
 800614e:	f000 fc72 	bl	8006a36 <RTC_ByteToBcd2>
 8006152:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006154:	0022      	movs	r2, r4
 8006156:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	78db      	ldrb	r3, [r3, #3]
 800615c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800615e:	4313      	orrs	r3, r2
 8006160:	617b      	str	r3, [r7, #20]
 8006162:	e017      	b.n	8006194 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	2240      	movs	r2, #64	; 0x40
 800616c:	4013      	ands	r3, r2
 800616e:	d102      	bne.n	8006176 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	2200      	movs	r2, #0
 8006174:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	785b      	ldrb	r3, [r3, #1]
 8006180:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006182:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006188:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	78db      	ldrb	r3, [r3, #3]
 800618e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006190:	4313      	orrs	r3, r2
 8006192:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	22ca      	movs	r2, #202	; 0xca
 800619a:	625a      	str	r2, [r3, #36]	; 0x24
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2253      	movs	r2, #83	; 0x53
 80061a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	0018      	movs	r0, r3
 80061a8:	f000 fc1b 	bl	80069e2 <RTC_EnterInitMode>
 80061ac:	1e03      	subs	r3, r0, #0
 80061ae:	d00d      	beq.n	80061cc <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	22ff      	movs	r2, #255	; 0xff
 80061b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2221      	movs	r2, #33	; 0x21
 80061bc:	2104      	movs	r1, #4
 80061be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2220      	movs	r2, #32
 80061c4:	2100      	movs	r1, #0
 80061c6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e048      	b.n	800625e <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	4925      	ldr	r1, [pc, #148]	; (8006268 <HAL_RTC_SetTime+0x180>)
 80061d4:	400a      	ands	r2, r1
 80061d6:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	689a      	ldr	r2, [r3, #8]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4922      	ldr	r1, [pc, #136]	; (800626c <HAL_RTC_SetTime+0x184>)
 80061e4:	400a      	ands	r2, r1
 80061e6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6899      	ldr	r1, [r3, #8]
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	68da      	ldr	r2, [r3, #12]
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	431a      	orrs	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	430a      	orrs	r2, r1
 80061fe:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68da      	ldr	r2, [r3, #12]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2180      	movs	r1, #128	; 0x80
 800620c:	438a      	bics	r2, r1
 800620e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	2220      	movs	r2, #32
 8006218:	4013      	ands	r3, r2
 800621a:	d113      	bne.n	8006244 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	0018      	movs	r0, r3
 8006220:	f000 fbb8 	bl	8006994 <HAL_RTC_WaitForSynchro>
 8006224:	1e03      	subs	r3, r0, #0
 8006226:	d00d      	beq.n	8006244 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	22ff      	movs	r2, #255	; 0xff
 800622e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2221      	movs	r2, #33	; 0x21
 8006234:	2104      	movs	r1, #4
 8006236:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2220      	movs	r2, #32
 800623c:	2100      	movs	r1, #0
 800623e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e00c      	b.n	800625e <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	22ff      	movs	r2, #255	; 0xff
 800624a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2221      	movs	r2, #33	; 0x21
 8006250:	2101      	movs	r1, #1
 8006252:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2220      	movs	r2, #32
 8006258:	2100      	movs	r1, #0
 800625a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800625c:	2300      	movs	r3, #0
  }
}
 800625e:	0018      	movs	r0, r3
 8006260:	46bd      	mov	sp, r7
 8006262:	b007      	add	sp, #28
 8006264:	bd90      	pop	{r4, r7, pc}
 8006266:	46c0      	nop			; (mov r8, r8)
 8006268:	007f7f7f 	.word	0x007f7f7f
 800626c:	fffbffff 	.word	0xfffbffff

08006270 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	045b      	lsls	r3, r3, #17
 800628e:	0c5a      	lsrs	r2, r3, #17
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a22      	ldr	r2, [pc, #136]	; (8006324 <HAL_RTC_GetTime+0xb4>)
 800629c:	4013      	ands	r3, r2
 800629e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	0c1b      	lsrs	r3, r3, #16
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	223f      	movs	r2, #63	; 0x3f
 80062a8:	4013      	ands	r3, r2
 80062aa:	b2da      	uxtb	r2, r3
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	0a1b      	lsrs	r3, r3, #8
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	227f      	movs	r2, #127	; 0x7f
 80062b8:	4013      	ands	r3, r2
 80062ba:	b2da      	uxtb	r2, r3
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	227f      	movs	r2, #127	; 0x7f
 80062c6:	4013      	ands	r3, r2
 80062c8:	b2da      	uxtb	r2, r3
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	0c1b      	lsrs	r3, r3, #16
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2240      	movs	r2, #64	; 0x40
 80062d6:	4013      	ands	r3, r2
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d11a      	bne.n	800631a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	0018      	movs	r0, r3
 80062ea:	f000 fbcd 	bl	8006a88 <RTC_Bcd2ToByte>
 80062ee:	0003      	movs	r3, r0
 80062f0:	001a      	movs	r2, r3
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	785b      	ldrb	r3, [r3, #1]
 80062fa:	0018      	movs	r0, r3
 80062fc:	f000 fbc4 	bl	8006a88 <RTC_Bcd2ToByte>
 8006300:	0003      	movs	r3, r0
 8006302:	001a      	movs	r2, r3
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	789b      	ldrb	r3, [r3, #2]
 800630c:	0018      	movs	r0, r3
 800630e:	f000 fbbb 	bl	8006a88 <RTC_Bcd2ToByte>
 8006312:	0003      	movs	r3, r0
 8006314:	001a      	movs	r2, r3
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	0018      	movs	r0, r3
 800631e:	46bd      	mov	sp, r7
 8006320:	b006      	add	sp, #24
 8006322:	bd80      	pop	{r7, pc}
 8006324:	007f7f7f 	.word	0x007f7f7f

08006328 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006328:	b590      	push	{r4, r7, lr}
 800632a:	b087      	sub	sp, #28
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2220      	movs	r2, #32
 8006338:	5c9b      	ldrb	r3, [r3, r2]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d101      	bne.n	8006342 <HAL_RTC_SetDate+0x1a>
 800633e:	2302      	movs	r3, #2
 8006340:	e099      	b.n	8006476 <HAL_RTC_SetDate+0x14e>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2220      	movs	r2, #32
 8006346:	2101      	movs	r1, #1
 8006348:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2221      	movs	r2, #33	; 0x21
 800634e:	2102      	movs	r1, #2
 8006350:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10e      	bne.n	8006376 <HAL_RTC_SetDate+0x4e>
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	785b      	ldrb	r3, [r3, #1]
 800635c:	001a      	movs	r2, r3
 800635e:	2310      	movs	r3, #16
 8006360:	4013      	ands	r3, r2
 8006362:	d008      	beq.n	8006376 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	785b      	ldrb	r3, [r3, #1]
 8006368:	2210      	movs	r2, #16
 800636a:	4393      	bics	r3, r2
 800636c:	b2db      	uxtb	r3, r3
 800636e:	330a      	adds	r3, #10
 8006370:	b2da      	uxtb	r2, r3
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d11c      	bne.n	80063b6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	78db      	ldrb	r3, [r3, #3]
 8006380:	0018      	movs	r0, r3
 8006382:	f000 fb58 	bl	8006a36 <RTC_ByteToBcd2>
 8006386:	0003      	movs	r3, r0
 8006388:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	785b      	ldrb	r3, [r3, #1]
 800638e:	0018      	movs	r0, r3
 8006390:	f000 fb51 	bl	8006a36 <RTC_ByteToBcd2>
 8006394:	0003      	movs	r3, r0
 8006396:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006398:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	789b      	ldrb	r3, [r3, #2]
 800639e:	0018      	movs	r0, r3
 80063a0:	f000 fb49 	bl	8006a36 <RTC_ByteToBcd2>
 80063a4:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80063a6:	0022      	movs	r2, r4
 80063a8:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80063b0:	4313      	orrs	r3, r2
 80063b2:	617b      	str	r3, [r7, #20]
 80063b4:	e00e      	b.n	80063d4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	78db      	ldrb	r3, [r3, #3]
 80063ba:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	785b      	ldrb	r3, [r3, #1]
 80063c0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80063c2:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80063c8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80063d0:	4313      	orrs	r3, r2
 80063d2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	22ca      	movs	r2, #202	; 0xca
 80063da:	625a      	str	r2, [r3, #36]	; 0x24
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2253      	movs	r2, #83	; 0x53
 80063e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	0018      	movs	r0, r3
 80063e8:	f000 fafb 	bl	80069e2 <RTC_EnterInitMode>
 80063ec:	1e03      	subs	r3, r0, #0
 80063ee:	d00d      	beq.n	800640c <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	22ff      	movs	r2, #255	; 0xff
 80063f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2221      	movs	r2, #33	; 0x21
 80063fc:	2104      	movs	r1, #4
 80063fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2220      	movs	r2, #32
 8006404:	2100      	movs	r1, #0
 8006406:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e034      	b.n	8006476 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	697a      	ldr	r2, [r7, #20]
 8006412:	491b      	ldr	r1, [pc, #108]	; (8006480 <HAL_RTC_SetDate+0x158>)
 8006414:	400a      	ands	r2, r1
 8006416:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68da      	ldr	r2, [r3, #12]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2180      	movs	r1, #128	; 0x80
 8006424:	438a      	bics	r2, r1
 8006426:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	2220      	movs	r2, #32
 8006430:	4013      	ands	r3, r2
 8006432:	d113      	bne.n	800645c <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	0018      	movs	r0, r3
 8006438:	f000 faac 	bl	8006994 <HAL_RTC_WaitForSynchro>
 800643c:	1e03      	subs	r3, r0, #0
 800643e:	d00d      	beq.n	800645c <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	22ff      	movs	r2, #255	; 0xff
 8006446:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2221      	movs	r2, #33	; 0x21
 800644c:	2104      	movs	r1, #4
 800644e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2220      	movs	r2, #32
 8006454:	2100      	movs	r1, #0
 8006456:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e00c      	b.n	8006476 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	22ff      	movs	r2, #255	; 0xff
 8006462:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2221      	movs	r2, #33	; 0x21
 8006468:	2101      	movs	r1, #1
 800646a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2220      	movs	r2, #32
 8006470:	2100      	movs	r1, #0
 8006472:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006474:	2300      	movs	r3, #0
  }
}
 8006476:	0018      	movs	r0, r3
 8006478:	46bd      	mov	sp, r7
 800647a:	b007      	add	sp, #28
 800647c:	bd90      	pop	{r4, r7, pc}
 800647e:	46c0      	nop			; (mov r8, r8)
 8006480:	00ffff3f 	.word	0x00ffff3f

08006484 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	4a21      	ldr	r2, [pc, #132]	; (800651c <HAL_RTC_GetDate+0x98>)
 8006498:	4013      	ands	r3, r2
 800649a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	0c1b      	lsrs	r3, r3, #16
 80064a0:	b2da      	uxtb	r2, r3
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	0a1b      	lsrs	r3, r3, #8
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	221f      	movs	r2, #31
 80064ae:	4013      	ands	r3, r2
 80064b0:	b2da      	uxtb	r2, r3
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	223f      	movs	r2, #63	; 0x3f
 80064bc:	4013      	ands	r3, r2
 80064be:	b2da      	uxtb	r2, r3
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	0b5b      	lsrs	r3, r3, #13
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2207      	movs	r2, #7
 80064cc:	4013      	ands	r3, r2
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d11a      	bne.n	8006510 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	78db      	ldrb	r3, [r3, #3]
 80064de:	0018      	movs	r0, r3
 80064e0:	f000 fad2 	bl	8006a88 <RTC_Bcd2ToByte>
 80064e4:	0003      	movs	r3, r0
 80064e6:	001a      	movs	r2, r3
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	785b      	ldrb	r3, [r3, #1]
 80064f0:	0018      	movs	r0, r3
 80064f2:	f000 fac9 	bl	8006a88 <RTC_Bcd2ToByte>
 80064f6:	0003      	movs	r3, r0
 80064f8:	001a      	movs	r2, r3
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	789b      	ldrb	r3, [r3, #2]
 8006502:	0018      	movs	r0, r3
 8006504:	f000 fac0 	bl	8006a88 <RTC_Bcd2ToByte>
 8006508:	0003      	movs	r3, r0
 800650a:	001a      	movs	r2, r3
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	0018      	movs	r0, r3
 8006514:	46bd      	mov	sp, r7
 8006516:	b006      	add	sp, #24
 8006518:	bd80      	pop	{r7, pc}
 800651a:	46c0      	nop			; (mov r8, r8)
 800651c:	00ffff3f 	.word	0x00ffff3f

08006520 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006520:	b590      	push	{r4, r7, lr}
 8006522:	b089      	sub	sp, #36	; 0x24
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2220      	movs	r2, #32
 8006530:	5c9b      	ldrb	r3, [r3, r2]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d101      	bne.n	800653a <HAL_RTC_SetAlarm_IT+0x1a>
 8006536:	2302      	movs	r3, #2
 8006538:	e130      	b.n	800679c <HAL_RTC_SetAlarm_IT+0x27c>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2220      	movs	r2, #32
 800653e:	2101      	movs	r1, #1
 8006540:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2221      	movs	r2, #33	; 0x21
 8006546:	2102      	movs	r1, #2
 8006548:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d136      	bne.n	80065be <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	2240      	movs	r2, #64	; 0x40
 8006558:	4013      	ands	r3, r2
 800655a:	d102      	bne.n	8006562 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	2200      	movs	r2, #0
 8006560:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	0018      	movs	r0, r3
 8006568:	f000 fa65 	bl	8006a36 <RTC_ByteToBcd2>
 800656c:	0003      	movs	r3, r0
 800656e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	785b      	ldrb	r3, [r3, #1]
 8006574:	0018      	movs	r0, r3
 8006576:	f000 fa5e 	bl	8006a36 <RTC_ByteToBcd2>
 800657a:	0003      	movs	r3, r0
 800657c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800657e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	789b      	ldrb	r3, [r3, #2]
 8006584:	0018      	movs	r0, r3
 8006586:	f000 fa56 	bl	8006a36 <RTC_ByteToBcd2>
 800658a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800658c:	0022      	movs	r2, r4
 800658e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	78db      	ldrb	r3, [r3, #3]
 8006594:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006596:	431a      	orrs	r2, r3
 8006598:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	2220      	movs	r2, #32
 800659e:	5c9b      	ldrb	r3, [r3, r2]
 80065a0:	0018      	movs	r0, r3
 80065a2:	f000 fa48 	bl	8006a36 <RTC_ByteToBcd2>
 80065a6:	0003      	movs	r3, r0
 80065a8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80065aa:	0022      	movs	r2, r4
 80065ac:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80065b2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80065b8:	4313      	orrs	r3, r2
 80065ba:	61fb      	str	r3, [r7, #28]
 80065bc:	e022      	b.n	8006604 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	2240      	movs	r2, #64	; 0x40
 80065c6:	4013      	ands	r3, r2
 80065c8:	d102      	bne.n	80065d0 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	2200      	movs	r2, #0
 80065ce:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	785b      	ldrb	r3, [r3, #1]
 80065da:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80065dc:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80065e2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	78db      	ldrb	r3, [r3, #3]
 80065e8:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80065ea:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	2120      	movs	r1, #32
 80065f0:	5c5b      	ldrb	r3, [r3, r1]
 80065f2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80065f4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80065fa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006600:	4313      	orrs	r3, r2
 8006602:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	685a      	ldr	r2, [r3, #4]
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	4313      	orrs	r3, r2
 800660e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	22ca      	movs	r2, #202	; 0xca
 8006616:	625a      	str	r2, [r3, #36]	; 0x24
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2253      	movs	r2, #83	; 0x53
 800661e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006624:	2380      	movs	r3, #128	; 0x80
 8006626:	005b      	lsls	r3, r3, #1
 8006628:	429a      	cmp	r2, r3
 800662a:	d14e      	bne.n	80066ca <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	689a      	ldr	r2, [r3, #8]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	495b      	ldr	r1, [pc, #364]	; (80067a4 <HAL_RTC_SetAlarm_IT+0x284>)
 8006638:	400a      	ands	r2, r1
 800663a:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	22ff      	movs	r2, #255	; 0xff
 8006644:	401a      	ands	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4957      	ldr	r1, [pc, #348]	; (80067a8 <HAL_RTC_SetAlarm_IT+0x288>)
 800664c:	430a      	orrs	r2, r1
 800664e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006650:	f7fd fd7a 	bl	8004148 <HAL_GetTick>
 8006654:	0003      	movs	r3, r0
 8006656:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006658:	e016      	b.n	8006688 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800665a:	f7fd fd75 	bl	8004148 <HAL_GetTick>
 800665e:	0002      	movs	r2, r0
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	1ad2      	subs	r2, r2, r3
 8006664:	23fa      	movs	r3, #250	; 0xfa
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	429a      	cmp	r2, r3
 800666a:	d90d      	bls.n	8006688 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	22ff      	movs	r2, #255	; 0xff
 8006672:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2221      	movs	r2, #33	; 0x21
 8006678:	2103      	movs	r1, #3
 800667a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2220      	movs	r2, #32
 8006680:	2100      	movs	r1, #0
 8006682:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e089      	b.n	800679c <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	2201      	movs	r2, #1
 8006690:	4013      	ands	r3, r2
 8006692:	d0e2      	beq.n	800665a <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	69fa      	ldr	r2, [r7, #28]
 800669a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	69ba      	ldr	r2, [r7, #24]
 80066a2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689a      	ldr	r2, [r3, #8]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2180      	movs	r1, #128	; 0x80
 80066b0:	0049      	lsls	r1, r1, #1
 80066b2:	430a      	orrs	r2, r1
 80066b4:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	689a      	ldr	r2, [r3, #8]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2180      	movs	r1, #128	; 0x80
 80066c2:	0149      	lsls	r1, r1, #5
 80066c4:	430a      	orrs	r2, r1
 80066c6:	609a      	str	r2, [r3, #8]
 80066c8:	e04d      	b.n	8006766 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	689a      	ldr	r2, [r3, #8]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4935      	ldr	r1, [pc, #212]	; (80067ac <HAL_RTC_SetAlarm_IT+0x28c>)
 80066d6:	400a      	ands	r2, r1
 80066d8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	22ff      	movs	r2, #255	; 0xff
 80066e2:	401a      	ands	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4931      	ldr	r1, [pc, #196]	; (80067b0 <HAL_RTC_SetAlarm_IT+0x290>)
 80066ea:	430a      	orrs	r2, r1
 80066ec:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80066ee:	f7fd fd2b 	bl	8004148 <HAL_GetTick>
 80066f2:	0003      	movs	r3, r0
 80066f4:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80066f6:	e016      	b.n	8006726 <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80066f8:	f7fd fd26 	bl	8004148 <HAL_GetTick>
 80066fc:	0002      	movs	r2, r0
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	1ad2      	subs	r2, r2, r3
 8006702:	23fa      	movs	r3, #250	; 0xfa
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	429a      	cmp	r2, r3
 8006708:	d90d      	bls.n	8006726 <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	22ff      	movs	r2, #255	; 0xff
 8006710:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2221      	movs	r2, #33	; 0x21
 8006716:	2103      	movs	r1, #3
 8006718:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2220      	movs	r2, #32
 800671e:	2100      	movs	r1, #0
 8006720:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e03a      	b.n	800679c <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	2202      	movs	r2, #2
 800672e:	4013      	ands	r3, r2
 8006730:	d0e2      	beq.n	80066f8 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	69fa      	ldr	r2, [r7, #28]
 8006738:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	69ba      	ldr	r2, [r7, #24]
 8006740:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	689a      	ldr	r2, [r3, #8]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2180      	movs	r1, #128	; 0x80
 800674e:	0089      	lsls	r1, r1, #2
 8006750:	430a      	orrs	r2, r1
 8006752:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689a      	ldr	r2, [r3, #8]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2180      	movs	r1, #128	; 0x80
 8006760:	0189      	lsls	r1, r1, #6
 8006762:	430a      	orrs	r2, r1
 8006764:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006766:	4b13      	ldr	r3, [pc, #76]	; (80067b4 <HAL_RTC_SetAlarm_IT+0x294>)
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	4b12      	ldr	r3, [pc, #72]	; (80067b4 <HAL_RTC_SetAlarm_IT+0x294>)
 800676c:	2180      	movs	r1, #128	; 0x80
 800676e:	0289      	lsls	r1, r1, #10
 8006770:	430a      	orrs	r2, r1
 8006772:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006774:	4b0f      	ldr	r3, [pc, #60]	; (80067b4 <HAL_RTC_SetAlarm_IT+0x294>)
 8006776:	689a      	ldr	r2, [r3, #8]
 8006778:	4b0e      	ldr	r3, [pc, #56]	; (80067b4 <HAL_RTC_SetAlarm_IT+0x294>)
 800677a:	2180      	movs	r1, #128	; 0x80
 800677c:	0289      	lsls	r1, r1, #10
 800677e:	430a      	orrs	r2, r1
 8006780:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	22ff      	movs	r2, #255	; 0xff
 8006788:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2221      	movs	r2, #33	; 0x21
 800678e:	2101      	movs	r1, #1
 8006790:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2220      	movs	r2, #32
 8006796:	2100      	movs	r1, #0
 8006798:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	0018      	movs	r0, r3
 800679e:	46bd      	mov	sp, r7
 80067a0:	b009      	add	sp, #36	; 0x24
 80067a2:	bd90      	pop	{r4, r7, pc}
 80067a4:	fffffeff 	.word	0xfffffeff
 80067a8:	fffffe7f 	.word	0xfffffe7f
 80067ac:	fffffdff 	.word	0xfffffdff
 80067b0:	fffffd7f 	.word	0xfffffd7f
 80067b4:	40010400 	.word	0x40010400

080067b8 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2220      	movs	r2, #32
 80067c6:	5c9b      	ldrb	r3, [r3, r2]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d101      	bne.n	80067d0 <HAL_RTC_DeactivateAlarm+0x18>
 80067cc:	2302      	movs	r3, #2
 80067ce:	e086      	b.n	80068de <HAL_RTC_DeactivateAlarm+0x126>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2220      	movs	r2, #32
 80067d4:	2101      	movs	r1, #1
 80067d6:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2221      	movs	r2, #33	; 0x21
 80067dc:	2102      	movs	r1, #2
 80067de:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	22ca      	movs	r2, #202	; 0xca
 80067e6:	625a      	str	r2, [r3, #36]	; 0x24
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2253      	movs	r2, #83	; 0x53
 80067ee:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80067f0:	683a      	ldr	r2, [r7, #0]
 80067f2:	2380      	movs	r3, #128	; 0x80
 80067f4:	005b      	lsls	r3, r3, #1
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d132      	bne.n	8006860 <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	689a      	ldr	r2, [r3, #8]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4938      	ldr	r1, [pc, #224]	; (80068e8 <HAL_RTC_DeactivateAlarm+0x130>)
 8006806:	400a      	ands	r2, r1
 8006808:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	689a      	ldr	r2, [r3, #8]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4935      	ldr	r1, [pc, #212]	; (80068ec <HAL_RTC_DeactivateAlarm+0x134>)
 8006816:	400a      	ands	r2, r1
 8006818:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800681a:	f7fd fc95 	bl	8004148 <HAL_GetTick>
 800681e:	0003      	movs	r3, r0
 8006820:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006822:	e016      	b.n	8006852 <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006824:	f7fd fc90 	bl	8004148 <HAL_GetTick>
 8006828:	0002      	movs	r2, r0
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	1ad2      	subs	r2, r2, r3
 800682e:	23fa      	movs	r3, #250	; 0xfa
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	429a      	cmp	r2, r3
 8006834:	d90d      	bls.n	8006852 <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	22ff      	movs	r2, #255	; 0xff
 800683c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2221      	movs	r2, #33	; 0x21
 8006842:	2103      	movs	r1, #3
 8006844:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2220      	movs	r2, #32
 800684a:	2100      	movs	r1, #0
 800684c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e045      	b.n	80068de <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	2201      	movs	r2, #1
 800685a:	4013      	ands	r3, r2
 800685c:	d0e2      	beq.n	8006824 <HAL_RTC_DeactivateAlarm+0x6c>
 800685e:	e031      	b.n	80068c4 <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	689a      	ldr	r2, [r3, #8]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4921      	ldr	r1, [pc, #132]	; (80068f0 <HAL_RTC_DeactivateAlarm+0x138>)
 800686c:	400a      	ands	r2, r1
 800686e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689a      	ldr	r2, [r3, #8]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	491e      	ldr	r1, [pc, #120]	; (80068f4 <HAL_RTC_DeactivateAlarm+0x13c>)
 800687c:	400a      	ands	r2, r1
 800687e:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8006880:	f7fd fc62 	bl	8004148 <HAL_GetTick>
 8006884:	0003      	movs	r3, r0
 8006886:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006888:	e016      	b.n	80068b8 <HAL_RTC_DeactivateAlarm+0x100>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800688a:	f7fd fc5d 	bl	8004148 <HAL_GetTick>
 800688e:	0002      	movs	r2, r0
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	1ad2      	subs	r2, r2, r3
 8006894:	23fa      	movs	r3, #250	; 0xfa
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	429a      	cmp	r2, r3
 800689a:	d90d      	bls.n	80068b8 <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	22ff      	movs	r2, #255	; 0xff
 80068a2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2221      	movs	r2, #33	; 0x21
 80068a8:	2103      	movs	r1, #3
 80068aa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2220      	movs	r2, #32
 80068b0:	2100      	movs	r1, #0
 80068b2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e012      	b.n	80068de <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	2202      	movs	r2, #2
 80068c0:	4013      	ands	r3, r2
 80068c2:	d0e2      	beq.n	800688a <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	22ff      	movs	r2, #255	; 0xff
 80068ca:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2221      	movs	r2, #33	; 0x21
 80068d0:	2101      	movs	r1, #1
 80068d2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2220      	movs	r2, #32
 80068d8:	2100      	movs	r1, #0
 80068da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	0018      	movs	r0, r3
 80068e0:	46bd      	mov	sp, r7
 80068e2:	b004      	add	sp, #16
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	46c0      	nop			; (mov r8, r8)
 80068e8:	fffffeff 	.word	0xfffffeff
 80068ec:	ffffefff 	.word	0xffffefff
 80068f0:	fffffdff 	.word	0xfffffdff
 80068f4:	ffffdfff 	.word	0xffffdfff

080068f8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689a      	ldr	r2, [r3, #8]
 8006906:	2380      	movs	r3, #128	; 0x80
 8006908:	015b      	lsls	r3, r3, #5
 800690a:	4013      	ands	r3, r2
 800690c:	d014      	beq.n	8006938 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68da      	ldr	r2, [r3, #12]
 8006914:	2380      	movs	r3, #128	; 0x80
 8006916:	005b      	lsls	r3, r3, #1
 8006918:	4013      	ands	r3, r2
 800691a:	d00d      	beq.n	8006938 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	0018      	movs	r0, r3
 8006920:	f7fa ffd0 	bl	80018c4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	22ff      	movs	r2, #255	; 0xff
 800692c:	401a      	ands	r2, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4915      	ldr	r1, [pc, #84]	; (8006988 <HAL_RTC_AlarmIRQHandler+0x90>)
 8006934:	430a      	orrs	r2, r1
 8006936:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	689a      	ldr	r2, [r3, #8]
 800693e:	2380      	movs	r3, #128	; 0x80
 8006940:	019b      	lsls	r3, r3, #6
 8006942:	4013      	ands	r3, r2
 8006944:	d014      	beq.n	8006970 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68da      	ldr	r2, [r3, #12]
 800694c:	2380      	movs	r3, #128	; 0x80
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4013      	ands	r3, r2
 8006952:	d00d      	beq.n	8006970 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	0018      	movs	r0, r3
 8006958:	f7fa ffce 	bl	80018f8 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	22ff      	movs	r2, #255	; 0xff
 8006964:	401a      	ands	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4908      	ldr	r1, [pc, #32]	; (800698c <HAL_RTC_AlarmIRQHandler+0x94>)
 800696c:	430a      	orrs	r2, r1
 800696e:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006970:	4b07      	ldr	r3, [pc, #28]	; (8006990 <HAL_RTC_AlarmIRQHandler+0x98>)
 8006972:	2280      	movs	r2, #128	; 0x80
 8006974:	0292      	lsls	r2, r2, #10
 8006976:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2221      	movs	r2, #33	; 0x21
 800697c:	2101      	movs	r1, #1
 800697e:	5499      	strb	r1, [r3, r2]
}
 8006980:	46c0      	nop			; (mov r8, r8)
 8006982:	46bd      	mov	sp, r7
 8006984:	b002      	add	sp, #8
 8006986:	bd80      	pop	{r7, pc}
 8006988:	fffffe7f 	.word	0xfffffe7f
 800698c:	fffffd7f 	.word	0xfffffd7f
 8006990:	40010400 	.word	0x40010400

08006994 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68da      	ldr	r2, [r3, #12]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	21a0      	movs	r1, #160	; 0xa0
 80069a8:	438a      	bics	r2, r1
 80069aa:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80069ac:	f7fd fbcc 	bl	8004148 <HAL_GetTick>
 80069b0:	0003      	movs	r3, r0
 80069b2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80069b4:	e00a      	b.n	80069cc <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80069b6:	f7fd fbc7 	bl	8004148 <HAL_GetTick>
 80069ba:	0002      	movs	r2, r0
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	1ad2      	subs	r2, r2, r3
 80069c0:	23fa      	movs	r3, #250	; 0xfa
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d901      	bls.n	80069cc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e006      	b.n	80069da <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	2220      	movs	r2, #32
 80069d4:	4013      	ands	r3, r2
 80069d6:	d0ee      	beq.n	80069b6 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	0018      	movs	r0, r3
 80069dc:	46bd      	mov	sp, r7
 80069de:	b004      	add	sp, #16
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b084      	sub	sp, #16
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	2240      	movs	r2, #64	; 0x40
 80069f2:	4013      	ands	r3, r2
 80069f4:	d11a      	bne.n	8006a2c <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2201      	movs	r2, #1
 80069fc:	4252      	negs	r2, r2
 80069fe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006a00:	f7fd fba2 	bl	8004148 <HAL_GetTick>
 8006a04:	0003      	movs	r3, r0
 8006a06:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006a08:	e00a      	b.n	8006a20 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006a0a:	f7fd fb9d 	bl	8004148 <HAL_GetTick>
 8006a0e:	0002      	movs	r2, r0
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	1ad2      	subs	r2, r2, r3
 8006a14:	23fa      	movs	r3, #250	; 0xfa
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d901      	bls.n	8006a20 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e006      	b.n	8006a2e <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	2240      	movs	r2, #64	; 0x40
 8006a28:	4013      	ands	r3, r2
 8006a2a:	d0ee      	beq.n	8006a0a <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	0018      	movs	r0, r3
 8006a30:	46bd      	mov	sp, r7
 8006a32:	b004      	add	sp, #16
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b084      	sub	sp, #16
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	0002      	movs	r2, r0
 8006a3e:	1dfb      	adds	r3, r7, #7
 8006a40:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8006a42:	2300      	movs	r3, #0
 8006a44:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8006a46:	230b      	movs	r3, #11
 8006a48:	18fb      	adds	r3, r7, r3
 8006a4a:	1dfa      	adds	r2, r7, #7
 8006a4c:	7812      	ldrb	r2, [r2, #0]
 8006a4e:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8006a50:	e008      	b.n	8006a64 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	3301      	adds	r3, #1
 8006a56:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8006a58:	220b      	movs	r2, #11
 8006a5a:	18bb      	adds	r3, r7, r2
 8006a5c:	18ba      	adds	r2, r7, r2
 8006a5e:	7812      	ldrb	r2, [r2, #0]
 8006a60:	3a0a      	subs	r2, #10
 8006a62:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8006a64:	230b      	movs	r3, #11
 8006a66:	18fb      	adds	r3, r7, r3
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	2b09      	cmp	r3, #9
 8006a6c:	d8f1      	bhi.n	8006a52 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	011b      	lsls	r3, r3, #4
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	230b      	movs	r3, #11
 8006a78:	18fb      	adds	r3, r7, r3
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	b2db      	uxtb	r3, r3
}
 8006a80:	0018      	movs	r0, r3
 8006a82:	46bd      	mov	sp, r7
 8006a84:	b004      	add	sp, #16
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	0002      	movs	r2, r0
 8006a90:	1dfb      	adds	r3, r7, #7
 8006a92:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006a94:	1dfb      	adds	r3, r7, #7
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	091b      	lsrs	r3, r3, #4
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	001a      	movs	r2, r3
 8006a9e:	0013      	movs	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	189b      	adds	r3, r3, r2
 8006aa4:	005b      	lsls	r3, r3, #1
 8006aa6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	1dfb      	adds	r3, r7, #7
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	210f      	movs	r1, #15
 8006ab2:	400b      	ands	r3, r1
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	18d3      	adds	r3, r2, r3
 8006ab8:	b2db      	uxtb	r3, r3
}
 8006aba:	0018      	movs	r0, r3
 8006abc:	46bd      	mov	sp, r7
 8006abe:	b004      	add	sp, #16
 8006ac0:	bd80      	pop	{r7, pc}
	...

08006ac4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d101      	bne.n	8006ad6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e059      	b.n	8006b8a <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2251      	movs	r2, #81	; 0x51
 8006ae0:	5c9b      	ldrb	r3, [r3, r2]
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d107      	bne.n	8006af8 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2250      	movs	r2, #80	; 0x50
 8006aec:	2100      	movs	r1, #0
 8006aee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	0018      	movs	r0, r3
 8006af4:	f7fc ff7c 	bl	80039f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2251      	movs	r2, #81	; 0x51
 8006afc:	2102      	movs	r1, #2
 8006afe:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2140      	movs	r1, #64	; 0x40
 8006b0c:	438a      	bics	r2, r1
 8006b0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685a      	ldr	r2, [r3, #4]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	431a      	orrs	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	431a      	orrs	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	431a      	orrs	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	431a      	orrs	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6999      	ldr	r1, [r3, #24]
 8006b30:	2380      	movs	r3, #128	; 0x80
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	400b      	ands	r3, r1
 8006b36:	431a      	orrs	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	69db      	ldr	r3, [r3, #28]
 8006b3c:	431a      	orrs	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	431a      	orrs	r2, r3
 8006b44:	0011      	movs	r1, r2
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	430a      	orrs	r2, r1
 8006b50:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	0c1b      	lsrs	r3, r3, #16
 8006b58:	2204      	movs	r2, #4
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	0019      	movs	r1, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	430a      	orrs	r2, r1
 8006b68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	69da      	ldr	r2, [r3, #28]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4907      	ldr	r1, [pc, #28]	; (8006b94 <HAL_SPI_Init+0xd0>)
 8006b76:	400a      	ands	r2, r1
 8006b78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2251      	movs	r2, #81	; 0x51
 8006b84:	2101      	movs	r1, #1
 8006b86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	0018      	movs	r0, r3
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	b002      	add	sp, #8
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	46c0      	nop			; (mov r8, r8)
 8006b94:	fffff7ff 	.word	0xfffff7ff

08006b98 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b088      	sub	sp, #32
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	603b      	str	r3, [r7, #0]
 8006ba4:	1dbb      	adds	r3, r7, #6
 8006ba6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ba8:	231f      	movs	r3, #31
 8006baa:	18fb      	adds	r3, r7, r3
 8006bac:	2200      	movs	r2, #0
 8006bae:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2250      	movs	r2, #80	; 0x50
 8006bb4:	5c9b      	ldrb	r3, [r3, r2]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d101      	bne.n	8006bbe <HAL_SPI_Transmit+0x26>
 8006bba:	2302      	movs	r3, #2
 8006bbc:	e136      	b.n	8006e2c <HAL_SPI_Transmit+0x294>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2250      	movs	r2, #80	; 0x50
 8006bc2:	2101      	movs	r1, #1
 8006bc4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bc6:	f7fd fabf 	bl	8004148 <HAL_GetTick>
 8006bca:	0003      	movs	r3, r0
 8006bcc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006bce:	2316      	movs	r3, #22
 8006bd0:	18fb      	adds	r3, r7, r3
 8006bd2:	1dba      	adds	r2, r7, #6
 8006bd4:	8812      	ldrh	r2, [r2, #0]
 8006bd6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2251      	movs	r2, #81	; 0x51
 8006bdc:	5c9b      	ldrb	r3, [r3, r2]
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d004      	beq.n	8006bee <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006be4:	231f      	movs	r3, #31
 8006be6:	18fb      	adds	r3, r7, r3
 8006be8:	2202      	movs	r2, #2
 8006bea:	701a      	strb	r2, [r3, #0]
    goto error;
 8006bec:	e113      	b.n	8006e16 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d003      	beq.n	8006bfc <HAL_SPI_Transmit+0x64>
 8006bf4:	1dbb      	adds	r3, r7, #6
 8006bf6:	881b      	ldrh	r3, [r3, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d104      	bne.n	8006c06 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006bfc:	231f      	movs	r3, #31
 8006bfe:	18fb      	adds	r3, r7, r3
 8006c00:	2201      	movs	r2, #1
 8006c02:	701a      	strb	r2, [r3, #0]
    goto error;
 8006c04:	e107      	b.n	8006e16 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2251      	movs	r2, #81	; 0x51
 8006c0a:	2103      	movs	r1, #3
 8006c0c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	68ba      	ldr	r2, [r7, #8]
 8006c18:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	1dba      	adds	r2, r7, #6
 8006c1e:	8812      	ldrh	r2, [r2, #0]
 8006c20:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	1dba      	adds	r2, r7, #6
 8006c26:	8812      	ldrh	r2, [r2, #0]
 8006c28:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	689a      	ldr	r2, [r3, #8]
 8006c4c:	2380      	movs	r3, #128	; 0x80
 8006c4e:	021b      	lsls	r3, r3, #8
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d108      	bne.n	8006c66 <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2180      	movs	r1, #128	; 0x80
 8006c60:	01c9      	lsls	r1, r1, #7
 8006c62:	430a      	orrs	r2, r1
 8006c64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2240      	movs	r2, #64	; 0x40
 8006c6e:	4013      	ands	r3, r2
 8006c70:	2b40      	cmp	r3, #64	; 0x40
 8006c72:	d007      	beq.n	8006c84 <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2140      	movs	r1, #64	; 0x40
 8006c80:	430a      	orrs	r2, r1
 8006c82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	68da      	ldr	r2, [r3, #12]
 8006c88:	2380      	movs	r3, #128	; 0x80
 8006c8a:	011b      	lsls	r3, r3, #4
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d14e      	bne.n	8006d2e <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d004      	beq.n	8006ca2 <HAL_SPI_Transmit+0x10a>
 8006c98:	2316      	movs	r3, #22
 8006c9a:	18fb      	adds	r3, r7, r3
 8006c9c:	881b      	ldrh	r3, [r3, #0]
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d13f      	bne.n	8006d22 <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca6:	881a      	ldrh	r2, [r3, #0]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb2:	1c9a      	adds	r2, r3, #2
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006cc6:	e02c      	b.n	8006d22 <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d112      	bne.n	8006cfc <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cda:	881a      	ldrh	r2, [r3, #0]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce6:	1c9a      	adds	r2, r3, #2
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	86da      	strh	r2, [r3, #54]	; 0x36
 8006cfa:	e012      	b.n	8006d22 <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cfc:	f7fd fa24 	bl	8004148 <HAL_GetTick>
 8006d00:	0002      	movs	r2, r0
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	683a      	ldr	r2, [r7, #0]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d802      	bhi.n	8006d12 <HAL_SPI_Transmit+0x17a>
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	d102      	bne.n	8006d18 <HAL_SPI_Transmit+0x180>
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d104      	bne.n	8006d22 <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 8006d18:	231f      	movs	r3, #31
 8006d1a:	18fb      	adds	r3, r7, r3
 8006d1c:	2203      	movs	r2, #3
 8006d1e:	701a      	strb	r2, [r3, #0]
          goto error;
 8006d20:	e079      	b.n	8006e16 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1cd      	bne.n	8006cc8 <HAL_SPI_Transmit+0x130>
 8006d2c:	e04f      	b.n	8006dce <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d004      	beq.n	8006d40 <HAL_SPI_Transmit+0x1a8>
 8006d36:	2316      	movs	r3, #22
 8006d38:	18fb      	adds	r3, r7, r3
 8006d3a:	881b      	ldrh	r3, [r3, #0]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d141      	bne.n	8006dc4 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	330c      	adds	r3, #12
 8006d4a:	7812      	ldrb	r2, [r2, #0]
 8006d4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d52:	1c5a      	adds	r2, r3, #1
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006d66:	e02d      	b.n	8006dc4 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	2202      	movs	r2, #2
 8006d70:	4013      	ands	r3, r2
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d113      	bne.n	8006d9e <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	330c      	adds	r3, #12
 8006d80:	7812      	ldrb	r2, [r2, #0]
 8006d82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d88:	1c5a      	adds	r2, r3, #1
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	3b01      	subs	r3, #1
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	86da      	strh	r2, [r3, #54]	; 0x36
 8006d9c:	e012      	b.n	8006dc4 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d9e:	f7fd f9d3 	bl	8004148 <HAL_GetTick>
 8006da2:	0002      	movs	r2, r0
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d802      	bhi.n	8006db4 <HAL_SPI_Transmit+0x21c>
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	3301      	adds	r3, #1
 8006db2:	d102      	bne.n	8006dba <HAL_SPI_Transmit+0x222>
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d104      	bne.n	8006dc4 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8006dba:	231f      	movs	r3, #31
 8006dbc:	18fb      	adds	r3, r7, r3
 8006dbe:	2203      	movs	r2, #3
 8006dc0:	701a      	strb	r2, [r3, #0]
          goto error;
 8006dc2:	e028      	b.n	8006e16 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1cc      	bne.n	8006d68 <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006dce:	69ba      	ldr	r2, [r7, #24]
 8006dd0:	6839      	ldr	r1, [r7, #0]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	0018      	movs	r0, r3
 8006dd6:	f000 fa99 	bl	800730c <SPI_EndRxTxTransaction>
 8006dda:	1e03      	subs	r3, r0, #0
 8006ddc:	d002      	beq.n	8006de4 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2220      	movs	r2, #32
 8006de2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10a      	bne.n	8006e02 <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006dec:	2300      	movs	r3, #0
 8006dee:	613b      	str	r3, [r7, #16]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	613b      	str	r3, [r7, #16]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	613b      	str	r3, [r7, #16]
 8006e00:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d004      	beq.n	8006e14 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8006e0a:	231f      	movs	r3, #31
 8006e0c:	18fb      	adds	r3, r7, r3
 8006e0e:	2201      	movs	r2, #1
 8006e10:	701a      	strb	r2, [r3, #0]
 8006e12:	e000      	b.n	8006e16 <HAL_SPI_Transmit+0x27e>
  }

error:
 8006e14:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2251      	movs	r2, #81	; 0x51
 8006e1a:	2101      	movs	r1, #1
 8006e1c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2250      	movs	r2, #80	; 0x50
 8006e22:	2100      	movs	r1, #0
 8006e24:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006e26:	231f      	movs	r3, #31
 8006e28:	18fb      	adds	r3, r7, r3
 8006e2a:	781b      	ldrb	r3, [r3, #0]
}
 8006e2c:	0018      	movs	r0, r3
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	b008      	add	sp, #32
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	1dbb      	adds	r3, r7, #6
 8006e40:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e42:	2317      	movs	r3, #23
 8006e44:	18fb      	adds	r3, r7, r3
 8006e46:	2200      	movs	r2, #0
 8006e48:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2250      	movs	r2, #80	; 0x50
 8006e4e:	5c9b      	ldrb	r3, [r3, r2]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d101      	bne.n	8006e58 <HAL_SPI_Transmit_IT+0x24>
 8006e54:	2302      	movs	r3, #2
 8006e56:	e072      	b.n	8006f3e <HAL_SPI_Transmit_IT+0x10a>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2250      	movs	r2, #80	; 0x50
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	5499      	strb	r1, [r3, r2]

  if ((pData == NULL) || (Size == 0U))
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d003      	beq.n	8006e6e <HAL_SPI_Transmit_IT+0x3a>
 8006e66:	1dbb      	adds	r3, r7, #6
 8006e68:	881b      	ldrh	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d104      	bne.n	8006e78 <HAL_SPI_Transmit_IT+0x44>
  {
    errorcode = HAL_ERROR;
 8006e6e:	2317      	movs	r3, #23
 8006e70:	18fb      	adds	r3, r7, r3
 8006e72:	2201      	movs	r2, #1
 8006e74:	701a      	strb	r2, [r3, #0]
    goto error;
 8006e76:	e05b      	b.n	8006f30 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2251      	movs	r2, #81	; 0x51
 8006e7c:	5c9b      	ldrb	r3, [r3, r2]
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d004      	beq.n	8006e8e <HAL_SPI_Transmit_IT+0x5a>
  {
    errorcode = HAL_BUSY;
 8006e84:	2317      	movs	r3, #23
 8006e86:	18fb      	adds	r3, r7, r3
 8006e88:	2202      	movs	r2, #2
 8006e8a:	701a      	strb	r2, [r3, #0]
    goto error;
 8006e8c:	e050      	b.n	8006f30 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2251      	movs	r2, #81	; 0x51
 8006e92:	2103      	movs	r1, #3
 8006e94:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	1dba      	adds	r2, r7, #6
 8006ea6:	8812      	ldrh	r2, [r2, #0]
 8006ea8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	1dba      	adds	r2, r7, #6
 8006eae:	8812      	ldrh	r2, [r2, #0]
 8006eb0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d003      	beq.n	8006eda <HAL_SPI_Transmit_IT+0xa6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	4a1c      	ldr	r2, [pc, #112]	; (8006f48 <HAL_SPI_Transmit_IT+0x114>)
 8006ed6:	645a      	str	r2, [r3, #68]	; 0x44
 8006ed8:	e002      	b.n	8006ee0 <HAL_SPI_Transmit_IT+0xac>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	4a1b      	ldr	r2, [pc, #108]	; (8006f4c <HAL_SPI_Transmit_IT+0x118>)
 8006ede:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	689a      	ldr	r2, [r3, #8]
 8006ee4:	2380      	movs	r3, #128	; 0x80
 8006ee6:	021b      	lsls	r3, r3, #8
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d108      	bne.n	8006efe <HAL_SPI_Transmit_IT+0xca>
  {
    SPI_1LINE_TX(hspi);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2180      	movs	r1, #128	; 0x80
 8006ef8:	01c9      	lsls	r1, r1, #7
 8006efa:	430a      	orrs	r2, r1
 8006efc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	685a      	ldr	r2, [r3, #4]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	21a0      	movs	r1, #160	; 0xa0
 8006f0a:	430a      	orrs	r2, r1
 8006f0c:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2240      	movs	r2, #64	; 0x40
 8006f16:	4013      	ands	r3, r2
 8006f18:	2b40      	cmp	r3, #64	; 0x40
 8006f1a:	d008      	beq.n	8006f2e <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2140      	movs	r1, #64	; 0x40
 8006f28:	430a      	orrs	r2, r1
 8006f2a:	601a      	str	r2, [r3, #0]
 8006f2c:	e000      	b.n	8006f30 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8006f2e:	46c0      	nop			; (mov r8, r8)
  __HAL_UNLOCK(hspi);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2250      	movs	r2, #80	; 0x50
 8006f34:	2100      	movs	r1, #0
 8006f36:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006f38:	2317      	movs	r3, #23
 8006f3a:	18fb      	adds	r3, r7, r3
 8006f3c:	781b      	ldrb	r3, [r3, #0]
}
 8006f3e:	0018      	movs	r0, r3
 8006f40:	46bd      	mov	sp, r7
 8006f42:	b006      	add	sp, #24
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	46c0      	nop			; (mov r8, r8)
 8006f48:	080071e7 	.word	0x080071e7
 8006f4c:	0800719f 	.word	0x0800719f

08006f50 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b088      	sub	sp, #32
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	099b      	lsrs	r3, r3, #6
 8006f6c:	001a      	movs	r2, r3
 8006f6e:	2301      	movs	r3, #1
 8006f70:	4013      	ands	r3, r2
 8006f72:	d10f      	bne.n	8006f94 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	2201      	movs	r2, #1
 8006f78:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006f7a:	d00b      	beq.n	8006f94 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	099b      	lsrs	r3, r3, #6
 8006f80:	001a      	movs	r2, r3
 8006f82:	2301      	movs	r3, #1
 8006f84:	4013      	ands	r3, r2
 8006f86:	d005      	beq.n	8006f94 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	0010      	movs	r0, r2
 8006f90:	4798      	blx	r3
    return;
 8006f92:	e0d6      	b.n	8007142 <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	085b      	lsrs	r3, r3, #1
 8006f98:	001a      	movs	r2, r3
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	d00b      	beq.n	8006fb8 <HAL_SPI_IRQHandler+0x68>
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	09db      	lsrs	r3, r3, #7
 8006fa4:	001a      	movs	r2, r3
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	4013      	ands	r3, r2
 8006faa:	d005      	beq.n	8006fb8 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	0010      	movs	r0, r2
 8006fb4:	4798      	blx	r3
    return;
 8006fb6:	e0c4      	b.n	8007142 <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	095b      	lsrs	r3, r3, #5
 8006fbc:	001a      	movs	r2, r3
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	d10c      	bne.n	8006fde <HAL_SPI_IRQHandler+0x8e>
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	099b      	lsrs	r3, r3, #6
 8006fc8:	001a      	movs	r2, r3
 8006fca:	2301      	movs	r3, #1
 8006fcc:	4013      	ands	r3, r2
 8006fce:	d106      	bne.n	8006fde <HAL_SPI_IRQHandler+0x8e>
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	0a1b      	lsrs	r3, r3, #8
 8006fd4:	001a      	movs	r2, r3
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	4013      	ands	r3, r2
 8006fda:	d100      	bne.n	8006fde <HAL_SPI_IRQHandler+0x8e>
 8006fdc:	e0b1      	b.n	8007142 <HAL_SPI_IRQHandler+0x1f2>
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	095b      	lsrs	r3, r3, #5
 8006fe2:	001a      	movs	r2, r3
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	d100      	bne.n	8006fec <HAL_SPI_IRQHandler+0x9c>
 8006fea:	e0aa      	b.n	8007142 <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	099b      	lsrs	r3, r3, #6
 8006ff0:	001a      	movs	r2, r3
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	d023      	beq.n	8007040 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2251      	movs	r2, #81	; 0x51
 8006ffc:	5c9b      	ldrb	r3, [r3, r2]
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b03      	cmp	r3, #3
 8007002:	d011      	beq.n	8007028 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007008:	2204      	movs	r2, #4
 800700a:	431a      	orrs	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007010:	2300      	movs	r3, #0
 8007012:	617b      	str	r3, [r7, #20]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	617b      	str	r3, [r7, #20]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	617b      	str	r3, [r7, #20]
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	e00b      	b.n	8007040 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007028:	2300      	movs	r3, #0
 800702a:	613b      	str	r3, [r7, #16]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	613b      	str	r3, [r7, #16]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	613b      	str	r3, [r7, #16]
 800703c:	693b      	ldr	r3, [r7, #16]
        return;
 800703e:	e080      	b.n	8007142 <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	095b      	lsrs	r3, r3, #5
 8007044:	001a      	movs	r2, r3
 8007046:	2301      	movs	r3, #1
 8007048:	4013      	ands	r3, r2
 800704a:	d014      	beq.n	8007076 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007050:	2201      	movs	r2, #1
 8007052:	431a      	orrs	r2, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007058:	2300      	movs	r3, #0
 800705a:	60fb      	str	r3, [r7, #12]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	60fb      	str	r3, [r7, #12]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2140      	movs	r1, #64	; 0x40
 8007070:	438a      	bics	r2, r1
 8007072:	601a      	str	r2, [r3, #0]
 8007074:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	0a1b      	lsrs	r3, r3, #8
 800707a:	001a      	movs	r2, r3
 800707c:	2301      	movs	r3, #1
 800707e:	4013      	ands	r3, r2
 8007080:	d00c      	beq.n	800709c <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007086:	2208      	movs	r2, #8
 8007088:	431a      	orrs	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800708e:	2300      	movs	r3, #0
 8007090:	60bb      	str	r3, [r7, #8]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	60bb      	str	r3, [r7, #8]
 800709a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d04d      	beq.n	8007140 <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	685a      	ldr	r2, [r3, #4]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	21e0      	movs	r1, #224	; 0xe0
 80070b0:	438a      	bics	r2, r1
 80070b2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2251      	movs	r2, #81	; 0x51
 80070b8:	2101      	movs	r1, #1
 80070ba:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	2202      	movs	r2, #2
 80070c0:	4013      	ands	r3, r2
 80070c2:	d103      	bne.n	80070cc <HAL_SPI_IRQHandler+0x17c>
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	2201      	movs	r2, #1
 80070c8:	4013      	ands	r3, r2
 80070ca:	d032      	beq.n	8007132 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2103      	movs	r1, #3
 80070d8:	438a      	bics	r2, r1
 80070da:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d010      	beq.n	8007106 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070e8:	4a17      	ldr	r2, [pc, #92]	; (8007148 <HAL_SPI_IRQHandler+0x1f8>)
 80070ea:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070f0:	0018      	movs	r0, r3
 80070f2:	f7fd fc25 	bl	8004940 <HAL_DMA_Abort_IT>
 80070f6:	1e03      	subs	r3, r0, #0
 80070f8:	d005      	beq.n	8007106 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070fe:	2240      	movs	r2, #64	; 0x40
 8007100:	431a      	orrs	r2, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800710a:	2b00      	cmp	r3, #0
 800710c:	d016      	beq.n	800713c <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007112:	4a0d      	ldr	r2, [pc, #52]	; (8007148 <HAL_SPI_IRQHandler+0x1f8>)
 8007114:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800711a:	0018      	movs	r0, r3
 800711c:	f7fd fc10 	bl	8004940 <HAL_DMA_Abort_IT>
 8007120:	1e03      	subs	r3, r0, #0
 8007122:	d00b      	beq.n	800713c <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007128:	2240      	movs	r2, #64	; 0x40
 800712a:	431a      	orrs	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007130:	e004      	b.n	800713c <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	0018      	movs	r0, r3
 8007136:	f000 f809 	bl	800714c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800713a:	e000      	b.n	800713e <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 800713c:	46c0      	nop			; (mov r8, r8)
    return;
 800713e:	46c0      	nop			; (mov r8, r8)
 8007140:	46c0      	nop			; (mov r8, r8)
  }
}
 8007142:	46bd      	mov	sp, r7
 8007144:	b008      	add	sp, #32
 8007146:	bd80      	pop	{r7, pc}
 8007148:	08007175 	.word	0x08007175

0800714c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007154:	46c0      	nop			; (mov r8, r8)
 8007156:	46bd      	mov	sp, r7
 8007158:	b002      	add	sp, #8
 800715a:	bd80      	pop	{r7, pc}

0800715c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2251      	movs	r2, #81	; 0x51
 8007168:	5c9b      	ldrb	r3, [r3, r2]
 800716a:	b2db      	uxtb	r3, r3
}
 800716c:	0018      	movs	r0, r3
 800716e:	46bd      	mov	sp, r7
 8007170:	b002      	add	sp, #8
 8007172:	bd80      	pop	{r7, pc}

08007174 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007180:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2200      	movs	r2, #0
 800718c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	0018      	movs	r0, r3
 8007192:	f7ff ffdb 	bl	800714c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007196:	46c0      	nop			; (mov r8, r8)
 8007198:	46bd      	mov	sp, r7
 800719a:	b004      	add	sp, #16
 800719c:	bd80      	pop	{r7, pc}

0800719e <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b082      	sub	sp, #8
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	330c      	adds	r3, #12
 80071b0:	7812      	ldrb	r2, [r2, #0]
 80071b2:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b8:	1c5a      	adds	r2, r3, #1
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	3b01      	subs	r3, #1
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d103      	bne.n	80071de <SPI_TxISR_8BIT+0x40>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	0018      	movs	r0, r3
 80071da:	f000 f8d5 	bl	8007388 <SPI_CloseTx_ISR>
  }
}
 80071de:	46c0      	nop			; (mov r8, r8)
 80071e0:	46bd      	mov	sp, r7
 80071e2:	b002      	add	sp, #8
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b082      	sub	sp, #8
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f2:	881a      	ldrh	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fe:	1c9a      	adds	r2, r3, #2
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007208:	b29b      	uxth	r3, r3
 800720a:	3b01      	subs	r3, #1
 800720c:	b29a      	uxth	r2, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007216:	b29b      	uxth	r3, r3
 8007218:	2b00      	cmp	r3, #0
 800721a:	d103      	bne.n	8007224 <SPI_TxISR_16BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	0018      	movs	r0, r3
 8007220:	f000 f8b2 	bl	8007388 <SPI_CloseTx_ISR>
  }
}
 8007224:	46c0      	nop			; (mov r8, r8)
 8007226:	46bd      	mov	sp, r7
 8007228:	b002      	add	sp, #8
 800722a:	bd80      	pop	{r7, pc}

0800722c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	603b      	str	r3, [r7, #0]
 8007238:	1dfb      	adds	r3, r7, #7
 800723a:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800723c:	e050      	b.n	80072e0 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	3301      	adds	r3, #1
 8007242:	d04d      	beq.n	80072e0 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007244:	f7fc ff80 	bl	8004148 <HAL_GetTick>
 8007248:	0002      	movs	r2, r0
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	683a      	ldr	r2, [r7, #0]
 8007250:	429a      	cmp	r2, r3
 8007252:	d902      	bls.n	800725a <SPI_WaitFlagStateUntilTimeout+0x2e>
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d142      	bne.n	80072e0 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	685a      	ldr	r2, [r3, #4]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	21e0      	movs	r1, #224	; 0xe0
 8007266:	438a      	bics	r2, r1
 8007268:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	685a      	ldr	r2, [r3, #4]
 800726e:	2382      	movs	r3, #130	; 0x82
 8007270:	005b      	lsls	r3, r3, #1
 8007272:	429a      	cmp	r2, r3
 8007274:	d113      	bne.n	800729e <SPI_WaitFlagStateUntilTimeout+0x72>
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	689a      	ldr	r2, [r3, #8]
 800727a:	2380      	movs	r3, #128	; 0x80
 800727c:	021b      	lsls	r3, r3, #8
 800727e:	429a      	cmp	r2, r3
 8007280:	d005      	beq.n	800728e <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	689a      	ldr	r2, [r3, #8]
 8007286:	2380      	movs	r3, #128	; 0x80
 8007288:	00db      	lsls	r3, r3, #3
 800728a:	429a      	cmp	r2, r3
 800728c:	d107      	bne.n	800729e <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2140      	movs	r1, #64	; 0x40
 800729a:	438a      	bics	r2, r1
 800729c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072a2:	2380      	movs	r3, #128	; 0x80
 80072a4:	019b      	lsls	r3, r3, #6
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d110      	bne.n	80072cc <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4914      	ldr	r1, [pc, #80]	; (8007308 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 80072b6:	400a      	ands	r2, r1
 80072b8:	601a      	str	r2, [r3, #0]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2180      	movs	r1, #128	; 0x80
 80072c6:	0189      	lsls	r1, r1, #6
 80072c8:	430a      	orrs	r2, r1
 80072ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2251      	movs	r2, #81	; 0x51
 80072d0:	2101      	movs	r1, #1
 80072d2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2250      	movs	r2, #80	; 0x50
 80072d8:	2100      	movs	r1, #0
 80072da:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80072dc:	2303      	movs	r3, #3
 80072de:	e00f      	b.n	8007300 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	68ba      	ldr	r2, [r7, #8]
 80072e8:	4013      	ands	r3, r2
 80072ea:	68ba      	ldr	r2, [r7, #8]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	425a      	negs	r2, r3
 80072f0:	4153      	adcs	r3, r2
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	001a      	movs	r2, r3
 80072f6:	1dfb      	adds	r3, r7, #7
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d19f      	bne.n	800723e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	0018      	movs	r0, r3
 8007302:	46bd      	mov	sp, r7
 8007304:	b004      	add	sp, #16
 8007306:	bd80      	pop	{r7, pc}
 8007308:	ffffdfff 	.word	0xffffdfff

0800730c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af02      	add	r7, sp, #8
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	685a      	ldr	r2, [r3, #4]
 800731c:	2382      	movs	r3, #130	; 0x82
 800731e:	005b      	lsls	r3, r3, #1
 8007320:	429a      	cmp	r2, r3
 8007322:	d112      	bne.n	800734a <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007324:	68ba      	ldr	r2, [r7, #8]
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	9300      	str	r3, [sp, #0]
 800732c:	0013      	movs	r3, r2
 800732e:	2200      	movs	r2, #0
 8007330:	2180      	movs	r1, #128	; 0x80
 8007332:	f7ff ff7b 	bl	800722c <SPI_WaitFlagStateUntilTimeout>
 8007336:	1e03      	subs	r3, r0, #0
 8007338:	d020      	beq.n	800737c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800733e:	2220      	movs	r2, #32
 8007340:	431a      	orrs	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007346:	2303      	movs	r3, #3
 8007348:	e019      	b.n	800737e <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2251      	movs	r2, #81	; 0x51
 800734e:	5c9b      	ldrb	r3, [r3, r2]
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b05      	cmp	r3, #5
 8007354:	d112      	bne.n	800737c <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007356:	68ba      	ldr	r2, [r7, #8]
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	9300      	str	r3, [sp, #0]
 800735e:	0013      	movs	r3, r2
 8007360:	2200      	movs	r2, #0
 8007362:	2101      	movs	r1, #1
 8007364:	f7ff ff62 	bl	800722c <SPI_WaitFlagStateUntilTimeout>
 8007368:	1e03      	subs	r3, r0, #0
 800736a:	d007      	beq.n	800737c <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007370:	2220      	movs	r2, #32
 8007372:	431a      	orrs	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e000      	b.n	800737e <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	0018      	movs	r0, r3
 8007380:	46bd      	mov	sp, r7
 8007382:	b004      	add	sp, #16
 8007384:	bd80      	pop	{r7, pc}
	...

08007388 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8007390:	4b2d      	ldr	r3, [pc, #180]	; (8007448 <SPI_CloseTx_ISR+0xc0>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	492d      	ldr	r1, [pc, #180]	; (800744c <SPI_CloseTx_ISR+0xc4>)
 8007396:	0018      	movs	r0, r3
 8007398:	f7f8 febe 	bl	8000118 <__udivsi3>
 800739c:	0003      	movs	r3, r0
 800739e:	001a      	movs	r2, r3
 80073a0:	2364      	movs	r3, #100	; 0x64
 80073a2:	4353      	muls	r3, r2
 80073a4:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073a6:	f7fc fecf 	bl	8004148 <HAL_GetTick>
 80073aa:	0003      	movs	r3, r0
 80073ac:	617b      	str	r3, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d106      	bne.n	80073c2 <SPI_CloseTx_ISR+0x3a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073b8:	2220      	movs	r2, #32
 80073ba:	431a      	orrs	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80073c0:	e008      	b.n	80073d4 <SPI_CloseTx_ISR+0x4c>
    }
    count--;
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	3b01      	subs	r3, #1
 80073c6:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	2202      	movs	r2, #2
 80073d0:	4013      	ands	r3, r2
 80073d2:	d0ec      	beq.n	80073ae <SPI_CloseTx_ISR+0x26>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	685a      	ldr	r2, [r3, #4]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	21a0      	movs	r1, #160	; 0xa0
 80073e0:	438a      	bics	r2, r1
 80073e2:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80073e4:	697a      	ldr	r2, [r7, #20]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2164      	movs	r1, #100	; 0x64
 80073ea:	0018      	movs	r0, r3
 80073ec:	f7ff ff8e 	bl	800730c <SPI_EndRxTxTransaction>
 80073f0:	1e03      	subs	r3, r0, #0
 80073f2:	d005      	beq.n	8007400 <SPI_CloseTx_ISR+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073f8:	2220      	movs	r2, #32
 80073fa:	431a      	orrs	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d10a      	bne.n	800741e <SPI_CloseTx_ISR+0x96>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007408:	2300      	movs	r3, #0
 800740a:	60fb      	str	r3, [r7, #12]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	60fb      	str	r3, [r7, #12]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	60fb      	str	r3, [r7, #12]
 800741c:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2251      	movs	r2, #81	; 0x51
 8007422:	2101      	movs	r1, #1
 8007424:	5499      	strb	r1, [r3, r2]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800742a:	2b00      	cmp	r3, #0
 800742c:	d004      	beq.n	8007438 <SPI_CloseTx_ISR+0xb0>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	0018      	movs	r0, r3
 8007432:	f7ff fe8b 	bl	800714c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8007436:	e003      	b.n	8007440 <SPI_CloseTx_ISR+0xb8>
    HAL_SPI_TxCpltCallback(hspi);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	0018      	movs	r0, r3
 800743c:	f7f9 f850 	bl	80004e0 <HAL_SPI_TxCpltCallback>
}
 8007440:	46c0      	nop			; (mov r8, r8)
 8007442:	46bd      	mov	sp, r7
 8007444:	b006      	add	sp, #24
 8007446:	bd80      	pop	{r7, pc}
 8007448:	20000054 	.word	0x20000054
 800744c:	00005dc0 	.word	0x00005dc0

08007450 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e01e      	b.n	80074a0 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2239      	movs	r2, #57	; 0x39
 8007466:	5c9b      	ldrb	r3, [r3, r2]
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d107      	bne.n	800747e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2238      	movs	r2, #56	; 0x38
 8007472:	2100      	movs	r1, #0
 8007474:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	0018      	movs	r0, r3
 800747a:	f7fc fb31 	bl	8003ae0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2239      	movs	r2, #57	; 0x39
 8007482:	2102      	movs	r1, #2
 8007484:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	3304      	adds	r3, #4
 800748e:	0019      	movs	r1, r3
 8007490:	0010      	movs	r0, r2
 8007492:	f000 fc1d 	bl	8007cd0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2239      	movs	r2, #57	; 0x39
 800749a:	2101      	movs	r1, #1
 800749c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	0018      	movs	r0, r3
 80074a2:	46bd      	mov	sp, r7
 80074a4:	b002      	add	sp, #8
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68da      	ldr	r2, [r3, #12]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2101      	movs	r1, #1
 80074bc:	430a      	orrs	r2, r1
 80074be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	2207      	movs	r2, #7
 80074c8:	4013      	ands	r3, r2
 80074ca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2b06      	cmp	r3, #6
 80074d0:	d007      	beq.n	80074e2 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2101      	movs	r1, #1
 80074de:	430a      	orrs	r2, r1
 80074e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	0018      	movs	r0, r3
 80074e6:	46bd      	mov	sp, r7
 80074e8:	b004      	add	sp, #16
 80074ea:	bd80      	pop	{r7, pc}

080074ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68da      	ldr	r2, [r3, #12]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2101      	movs	r1, #1
 8007500:	438a      	bics	r2, r1
 8007502:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	6a1b      	ldr	r3, [r3, #32]
 800750a:	4a08      	ldr	r2, [pc, #32]	; (800752c <HAL_TIM_Base_Stop_IT+0x40>)
 800750c:	4013      	ands	r3, r2
 800750e:	d107      	bne.n	8007520 <HAL_TIM_Base_Stop_IT+0x34>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2101      	movs	r1, #1
 800751c:	438a      	bics	r2, r1
 800751e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	0018      	movs	r0, r3
 8007524:	46bd      	mov	sp, r7
 8007526:	b002      	add	sp, #8
 8007528:	bd80      	pop	{r7, pc}
 800752a:	46c0      	nop			; (mov r8, r8)
 800752c:	00001111 	.word	0x00001111

08007530 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d101      	bne.n	8007542 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e01e      	b.n	8007580 <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2239      	movs	r2, #57	; 0x39
 8007546:	5c9b      	ldrb	r3, [r3, r2]
 8007548:	b2db      	uxtb	r3, r3
 800754a:	2b00      	cmp	r3, #0
 800754c:	d107      	bne.n	800755e <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2238      	movs	r2, #56	; 0x38
 8007552:	2100      	movs	r1, #0
 8007554:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	0018      	movs	r0, r3
 800755a:	f000 f815 	bl	8007588 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2239      	movs	r2, #57	; 0x39
 8007562:	2102      	movs	r1, #2
 8007564:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	3304      	adds	r3, #4
 800756e:	0019      	movs	r1, r3
 8007570:	0010      	movs	r0, r2
 8007572:	f000 fbad 	bl	8007cd0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2239      	movs	r2, #57	; 0x39
 800757a:	2101      	movs	r1, #1
 800757c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	0018      	movs	r0, r3
 8007582:	46bd      	mov	sp, r7
 8007584:	b002      	add	sp, #8
 8007586:	bd80      	pop	{r7, pc}

08007588 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007590:	46c0      	nop			; (mov r8, r8)
 8007592:	46bd      	mov	sp, r7
 8007594:	b002      	add	sp, #8
 8007596:	bd80      	pop	{r7, pc}

08007598 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	2b04      	cmp	r3, #4
 80075a6:	d011      	beq.n	80075cc <HAL_TIM_OC_Start_IT+0x34>
 80075a8:	d802      	bhi.n	80075b0 <HAL_TIM_OC_Start_IT+0x18>
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d005      	beq.n	80075ba <HAL_TIM_OC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 80075ae:	e028      	b.n	8007602 <HAL_TIM_OC_Start_IT+0x6a>
  switch (Channel)
 80075b0:	2b08      	cmp	r3, #8
 80075b2:	d014      	beq.n	80075de <HAL_TIM_OC_Start_IT+0x46>
 80075b4:	2b0c      	cmp	r3, #12
 80075b6:	d01b      	beq.n	80075f0 <HAL_TIM_OC_Start_IT+0x58>
      break;
 80075b8:	e023      	b.n	8007602 <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68da      	ldr	r2, [r3, #12]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2102      	movs	r1, #2
 80075c6:	430a      	orrs	r2, r1
 80075c8:	60da      	str	r2, [r3, #12]
      break;
 80075ca:	e01a      	b.n	8007602 <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68da      	ldr	r2, [r3, #12]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2104      	movs	r1, #4
 80075d8:	430a      	orrs	r2, r1
 80075da:	60da      	str	r2, [r3, #12]
      break;
 80075dc:	e011      	b.n	8007602 <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68da      	ldr	r2, [r3, #12]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2108      	movs	r1, #8
 80075ea:	430a      	orrs	r2, r1
 80075ec:	60da      	str	r2, [r3, #12]
      break;
 80075ee:	e008      	b.n	8007602 <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68da      	ldr	r2, [r3, #12]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2110      	movs	r1, #16
 80075fc:	430a      	orrs	r2, r1
 80075fe:	60da      	str	r2, [r3, #12]
      break;
 8007600:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	2201      	movs	r2, #1
 800760a:	0018      	movs	r0, r3
 800760c:	f000 fd5c 	bl	80080c8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	2207      	movs	r2, #7
 8007618:	4013      	ands	r3, r2
 800761a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2b06      	cmp	r3, #6
 8007620:	d007      	beq.n	8007632 <HAL_TIM_OC_Start_IT+0x9a>
  {
    __HAL_TIM_ENABLE(htim);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2101      	movs	r1, #1
 800762e:	430a      	orrs	r2, r1
 8007630:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	0018      	movs	r0, r3
 8007636:	46bd      	mov	sp, r7
 8007638:	b004      	add	sp, #16
 800763a:	bd80      	pop	{r7, pc}

0800763c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	2b04      	cmp	r3, #4
 800764a:	d011      	beq.n	8007670 <HAL_TIM_OC_Stop_IT+0x34>
 800764c:	d802      	bhi.n	8007654 <HAL_TIM_OC_Stop_IT+0x18>
 800764e:	2b00      	cmp	r3, #0
 8007650:	d005      	beq.n	800765e <HAL_TIM_OC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 8007652:	e028      	b.n	80076a6 <HAL_TIM_OC_Stop_IT+0x6a>
  switch (Channel)
 8007654:	2b08      	cmp	r3, #8
 8007656:	d014      	beq.n	8007682 <HAL_TIM_OC_Stop_IT+0x46>
 8007658:	2b0c      	cmp	r3, #12
 800765a:	d01b      	beq.n	8007694 <HAL_TIM_OC_Stop_IT+0x58>
      break;
 800765c:	e023      	b.n	80076a6 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68da      	ldr	r2, [r3, #12]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2102      	movs	r1, #2
 800766a:	438a      	bics	r2, r1
 800766c:	60da      	str	r2, [r3, #12]
      break;
 800766e:	e01a      	b.n	80076a6 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68da      	ldr	r2, [r3, #12]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2104      	movs	r1, #4
 800767c:	438a      	bics	r2, r1
 800767e:	60da      	str	r2, [r3, #12]
      break;
 8007680:	e011      	b.n	80076a6 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68da      	ldr	r2, [r3, #12]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2108      	movs	r1, #8
 800768e:	438a      	bics	r2, r1
 8007690:	60da      	str	r2, [r3, #12]
      break;
 8007692:	e008      	b.n	80076a6 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	68da      	ldr	r2, [r3, #12]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2110      	movs	r1, #16
 80076a0:	438a      	bics	r2, r1
 80076a2:	60da      	str	r2, [r3, #12]
      break;
 80076a4:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	2200      	movs	r2, #0
 80076ae:	0018      	movs	r0, r3
 80076b0:	f000 fd0a 	bl	80080c8 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	6a1b      	ldr	r3, [r3, #32]
 80076ba:	4a08      	ldr	r2, [pc, #32]	; (80076dc <HAL_TIM_OC_Stop_IT+0xa0>)
 80076bc:	4013      	ands	r3, r2
 80076be:	d107      	bne.n	80076d0 <HAL_TIM_OC_Stop_IT+0x94>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2101      	movs	r1, #1
 80076cc:	438a      	bics	r2, r1
 80076ce:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	0018      	movs	r0, r3
 80076d4:	46bd      	mov	sp, r7
 80076d6:	b002      	add	sp, #8
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	46c0      	nop			; (mov r8, r8)
 80076dc:	00001111 	.word	0x00001111

080076e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d101      	bne.n	80076f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e01e      	b.n	8007730 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2239      	movs	r2, #57	; 0x39
 80076f6:	5c9b      	ldrb	r3, [r3, r2]
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d107      	bne.n	800770e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2238      	movs	r2, #56	; 0x38
 8007702:	2100      	movs	r1, #0
 8007704:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	0018      	movs	r0, r3
 800770a:	f000 f815 	bl	8007738 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2239      	movs	r2, #57	; 0x39
 8007712:	2102      	movs	r1, #2
 8007714:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	3304      	adds	r3, #4
 800771e:	0019      	movs	r1, r3
 8007720:	0010      	movs	r0, r2
 8007722:	f000 fad5 	bl	8007cd0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2239      	movs	r2, #57	; 0x39
 800772a:	2101      	movs	r1, #1
 800772c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	0018      	movs	r0, r3
 8007732:	46bd      	mov	sp, r7
 8007734:	b002      	add	sp, #8
 8007736:	bd80      	pop	{r7, pc}

08007738 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007740:	46c0      	nop			; (mov r8, r8)
 8007742:	46bd      	mov	sp, r7
 8007744:	b002      	add	sp, #8
 8007746:	bd80      	pop	{r7, pc}

08007748 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	2202      	movs	r2, #2
 8007758:	4013      	ands	r3, r2
 800775a:	2b02      	cmp	r3, #2
 800775c:	d124      	bne.n	80077a8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	2202      	movs	r2, #2
 8007766:	4013      	ands	r3, r2
 8007768:	2b02      	cmp	r3, #2
 800776a:	d11d      	bne.n	80077a8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2203      	movs	r2, #3
 8007772:	4252      	negs	r2, r2
 8007774:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	2203      	movs	r2, #3
 8007784:	4013      	ands	r3, r2
 8007786:	d004      	beq.n	8007792 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	0018      	movs	r0, r3
 800778c:	f000 fa88 	bl	8007ca0 <HAL_TIM_IC_CaptureCallback>
 8007790:	e007      	b.n	80077a2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	0018      	movs	r0, r3
 8007796:	f7fc fb9f 	bl	8003ed8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	0018      	movs	r0, r3
 800779e:	f000 fa87 	bl	8007cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	2204      	movs	r2, #4
 80077b0:	4013      	ands	r3, r2
 80077b2:	2b04      	cmp	r3, #4
 80077b4:	d125      	bne.n	8007802 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	2204      	movs	r2, #4
 80077be:	4013      	ands	r3, r2
 80077c0:	2b04      	cmp	r3, #4
 80077c2:	d11e      	bne.n	8007802 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2205      	movs	r2, #5
 80077ca:	4252      	negs	r2, r2
 80077cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2202      	movs	r2, #2
 80077d2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	699a      	ldr	r2, [r3, #24]
 80077da:	23c0      	movs	r3, #192	; 0xc0
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	4013      	ands	r3, r2
 80077e0:	d004      	beq.n	80077ec <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	0018      	movs	r0, r3
 80077e6:	f000 fa5b 	bl	8007ca0 <HAL_TIM_IC_CaptureCallback>
 80077ea:	e007      	b.n	80077fc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	0018      	movs	r0, r3
 80077f0:	f7fc fb72 	bl	8003ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	0018      	movs	r0, r3
 80077f8:	f000 fa5a 	bl	8007cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	2208      	movs	r2, #8
 800780a:	4013      	ands	r3, r2
 800780c:	2b08      	cmp	r3, #8
 800780e:	d124      	bne.n	800785a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	2208      	movs	r2, #8
 8007818:	4013      	ands	r3, r2
 800781a:	2b08      	cmp	r3, #8
 800781c:	d11d      	bne.n	800785a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2209      	movs	r2, #9
 8007824:	4252      	negs	r2, r2
 8007826:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2204      	movs	r2, #4
 800782c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	69db      	ldr	r3, [r3, #28]
 8007834:	2203      	movs	r2, #3
 8007836:	4013      	ands	r3, r2
 8007838:	d004      	beq.n	8007844 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	0018      	movs	r0, r3
 800783e:	f000 fa2f 	bl	8007ca0 <HAL_TIM_IC_CaptureCallback>
 8007842:	e007      	b.n	8007854 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	0018      	movs	r0, r3
 8007848:	f7fc fb46 	bl	8003ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	0018      	movs	r0, r3
 8007850:	f000 fa2e 	bl	8007cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	2210      	movs	r2, #16
 8007862:	4013      	ands	r3, r2
 8007864:	2b10      	cmp	r3, #16
 8007866:	d125      	bne.n	80078b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	2210      	movs	r2, #16
 8007870:	4013      	ands	r3, r2
 8007872:	2b10      	cmp	r3, #16
 8007874:	d11e      	bne.n	80078b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2211      	movs	r2, #17
 800787c:	4252      	negs	r2, r2
 800787e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2208      	movs	r2, #8
 8007884:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	69da      	ldr	r2, [r3, #28]
 800788c:	23c0      	movs	r3, #192	; 0xc0
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	4013      	ands	r3, r2
 8007892:	d004      	beq.n	800789e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	0018      	movs	r0, r3
 8007898:	f000 fa02 	bl	8007ca0 <HAL_TIM_IC_CaptureCallback>
 800789c:	e007      	b.n	80078ae <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	0018      	movs	r0, r3
 80078a2:	f7fc fb19 	bl	8003ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	0018      	movs	r0, r3
 80078aa:	f000 fa01 	bl	8007cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	2201      	movs	r2, #1
 80078bc:	4013      	ands	r3, r2
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d10f      	bne.n	80078e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	2201      	movs	r2, #1
 80078ca:	4013      	ands	r3, r2
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d108      	bne.n	80078e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2202      	movs	r2, #2
 80078d6:	4252      	negs	r2, r2
 80078d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	0018      	movs	r0, r3
 80078de:	f7fc fa87 	bl	8003df0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	2240      	movs	r2, #64	; 0x40
 80078ea:	4013      	ands	r3, r2
 80078ec:	2b40      	cmp	r3, #64	; 0x40
 80078ee:	d10f      	bne.n	8007910 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	2240      	movs	r2, #64	; 0x40
 80078f8:	4013      	ands	r3, r2
 80078fa:	2b40      	cmp	r3, #64	; 0x40
 80078fc:	d108      	bne.n	8007910 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2241      	movs	r2, #65	; 0x41
 8007904:	4252      	negs	r2, r2
 8007906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	0018      	movs	r0, r3
 800790c:	f000 f9d8 	bl	8007cc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007910:	46c0      	nop			; (mov r8, r8)
 8007912:	46bd      	mov	sp, r7
 8007914:	b002      	add	sp, #8
 8007916:	bd80      	pop	{r7, pc}

08007918 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2238      	movs	r2, #56	; 0x38
 8007928:	5c9b      	ldrb	r3, [r3, r2]
 800792a:	2b01      	cmp	r3, #1
 800792c:	d101      	bne.n	8007932 <HAL_TIM_OC_ConfigChannel+0x1a>
 800792e:	2302      	movs	r3, #2
 8007930:	e03c      	b.n	80079ac <HAL_TIM_OC_ConfigChannel+0x94>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2238      	movs	r2, #56	; 0x38
 8007936:	2101      	movs	r1, #1
 8007938:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2239      	movs	r2, #57	; 0x39
 800793e:	2102      	movs	r1, #2
 8007940:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2b04      	cmp	r3, #4
 8007946:	d010      	beq.n	800796a <HAL_TIM_OC_ConfigChannel+0x52>
 8007948:	d802      	bhi.n	8007950 <HAL_TIM_OC_ConfigChannel+0x38>
 800794a:	2b00      	cmp	r3, #0
 800794c:	d005      	beq.n	800795a <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 800794e:	e024      	b.n	800799a <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 8007950:	2b08      	cmp	r3, #8
 8007952:	d012      	beq.n	800797a <HAL_TIM_OC_ConfigChannel+0x62>
 8007954:	2b0c      	cmp	r3, #12
 8007956:	d018      	beq.n	800798a <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 8007958:	e01f      	b.n	800799a <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	0011      	movs	r1, r2
 8007962:	0018      	movs	r0, r3
 8007964:	f000 fa12 	bl	8007d8c <TIM_OC1_SetConfig>
      break;
 8007968:	e017      	b.n	800799a <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	68ba      	ldr	r2, [r7, #8]
 8007970:	0011      	movs	r1, r2
 8007972:	0018      	movs	r0, r3
 8007974:	f000 fa46 	bl	8007e04 <TIM_OC2_SetConfig>
      break;
 8007978:	e00f      	b.n	800799a <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68ba      	ldr	r2, [r7, #8]
 8007980:	0011      	movs	r1, r2
 8007982:	0018      	movs	r0, r3
 8007984:	f000 fa80 	bl	8007e88 <TIM_OC3_SetConfig>
      break;
 8007988:	e007      	b.n	800799a <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68ba      	ldr	r2, [r7, #8]
 8007990:	0011      	movs	r1, r2
 8007992:	0018      	movs	r0, r3
 8007994:	f000 fab8 	bl	8007f08 <TIM_OC4_SetConfig>
      break;
 8007998:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2239      	movs	r2, #57	; 0x39
 800799e:	2101      	movs	r1, #1
 80079a0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2238      	movs	r2, #56	; 0x38
 80079a6:	2100      	movs	r1, #0
 80079a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	0018      	movs	r0, r3
 80079ae:	46bd      	mov	sp, r7
 80079b0:	b004      	add	sp, #16
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2238      	movs	r2, #56	; 0x38
 80079c4:	5c9b      	ldrb	r3, [r3, r2]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d101      	bne.n	80079ce <HAL_TIM_PWM_ConfigChannel+0x1a>
 80079ca:	2302      	movs	r3, #2
 80079cc:	e0a4      	b.n	8007b18 <HAL_TIM_PWM_ConfigChannel+0x164>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2238      	movs	r2, #56	; 0x38
 80079d2:	2101      	movs	r1, #1
 80079d4:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2239      	movs	r2, #57	; 0x39
 80079da:	2102      	movs	r1, #2
 80079dc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2b04      	cmp	r3, #4
 80079e2:	d029      	beq.n	8007a38 <HAL_TIM_PWM_ConfigChannel+0x84>
 80079e4:	d802      	bhi.n	80079ec <HAL_TIM_PWM_ConfigChannel+0x38>
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d005      	beq.n	80079f6 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 80079ea:	e08c      	b.n	8007b06 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 80079ec:	2b08      	cmp	r3, #8
 80079ee:	d046      	beq.n	8007a7e <HAL_TIM_PWM_ConfigChannel+0xca>
 80079f0:	2b0c      	cmp	r3, #12
 80079f2:	d065      	beq.n	8007ac0 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 80079f4:	e087      	b.n	8007b06 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	0011      	movs	r1, r2
 80079fe:	0018      	movs	r0, r3
 8007a00:	f000 f9c4 	bl	8007d8c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	699a      	ldr	r2, [r3, #24]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2108      	movs	r1, #8
 8007a10:	430a      	orrs	r2, r1
 8007a12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	699a      	ldr	r2, [r3, #24]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2104      	movs	r1, #4
 8007a20:	438a      	bics	r2, r1
 8007a22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	6999      	ldr	r1, [r3, #24]
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	68da      	ldr	r2, [r3, #12]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	430a      	orrs	r2, r1
 8007a34:	619a      	str	r2, [r3, #24]
      break;
 8007a36:	e066      	b.n	8007b06 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	0011      	movs	r1, r2
 8007a40:	0018      	movs	r0, r3
 8007a42:	f000 f9df 	bl	8007e04 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	699a      	ldr	r2, [r3, #24]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2180      	movs	r1, #128	; 0x80
 8007a52:	0109      	lsls	r1, r1, #4
 8007a54:	430a      	orrs	r2, r1
 8007a56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	699a      	ldr	r2, [r3, #24]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	492f      	ldr	r1, [pc, #188]	; (8007b20 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8007a64:	400a      	ands	r2, r1
 8007a66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	6999      	ldr	r1, [r3, #24]
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	021a      	lsls	r2, r3, #8
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	430a      	orrs	r2, r1
 8007a7a:	619a      	str	r2, [r3, #24]
      break;
 8007a7c:	e043      	b.n	8007b06 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	0011      	movs	r1, r2
 8007a86:	0018      	movs	r0, r3
 8007a88:	f000 f9fe 	bl	8007e88 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	69da      	ldr	r2, [r3, #28]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2108      	movs	r1, #8
 8007a98:	430a      	orrs	r2, r1
 8007a9a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	69da      	ldr	r2, [r3, #28]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2104      	movs	r1, #4
 8007aa8:	438a      	bics	r2, r1
 8007aaa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	69d9      	ldr	r1, [r3, #28]
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	68da      	ldr	r2, [r3, #12]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	430a      	orrs	r2, r1
 8007abc:	61da      	str	r2, [r3, #28]
      break;
 8007abe:	e022      	b.n	8007b06 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68ba      	ldr	r2, [r7, #8]
 8007ac6:	0011      	movs	r1, r2
 8007ac8:	0018      	movs	r0, r3
 8007aca:	f000 fa1d 	bl	8007f08 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	69da      	ldr	r2, [r3, #28]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2180      	movs	r1, #128	; 0x80
 8007ada:	0109      	lsls	r1, r1, #4
 8007adc:	430a      	orrs	r2, r1
 8007ade:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	69da      	ldr	r2, [r3, #28]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	490d      	ldr	r1, [pc, #52]	; (8007b20 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8007aec:	400a      	ands	r2, r1
 8007aee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	69d9      	ldr	r1, [r3, #28]
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	021a      	lsls	r2, r3, #8
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	430a      	orrs	r2, r1
 8007b02:	61da      	str	r2, [r3, #28]
      break;
 8007b04:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2239      	movs	r2, #57	; 0x39
 8007b0a:	2101      	movs	r1, #1
 8007b0c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2238      	movs	r2, #56	; 0x38
 8007b12:	2100      	movs	r1, #0
 8007b14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	0018      	movs	r0, r3
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	b004      	add	sp, #16
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	fffffbff 	.word	0xfffffbff

08007b24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2238      	movs	r2, #56	; 0x38
 8007b32:	5c9b      	ldrb	r3, [r3, r2]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d101      	bne.n	8007b3c <HAL_TIM_ConfigClockSource+0x18>
 8007b38:	2302      	movs	r3, #2
 8007b3a:	e0ab      	b.n	8007c94 <HAL_TIM_ConfigClockSource+0x170>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2238      	movs	r2, #56	; 0x38
 8007b40:	2101      	movs	r1, #1
 8007b42:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2239      	movs	r2, #57	; 0x39
 8007b48:	2102      	movs	r1, #2
 8007b4a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2277      	movs	r2, #119	; 0x77
 8007b58:	4393      	bics	r3, r2
 8007b5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	4a4f      	ldr	r2, [pc, #316]	; (8007c9c <HAL_TIM_ConfigClockSource+0x178>)
 8007b60:	4013      	ands	r3, r2
 8007b62:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b40      	cmp	r3, #64	; 0x40
 8007b72:	d100      	bne.n	8007b76 <HAL_TIM_ConfigClockSource+0x52>
 8007b74:	e06b      	b.n	8007c4e <HAL_TIM_ConfigClockSource+0x12a>
 8007b76:	d80e      	bhi.n	8007b96 <HAL_TIM_ConfigClockSource+0x72>
 8007b78:	2b10      	cmp	r3, #16
 8007b7a:	d100      	bne.n	8007b7e <HAL_TIM_ConfigClockSource+0x5a>
 8007b7c:	e077      	b.n	8007c6e <HAL_TIM_ConfigClockSource+0x14a>
 8007b7e:	d803      	bhi.n	8007b88 <HAL_TIM_ConfigClockSource+0x64>
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d100      	bne.n	8007b86 <HAL_TIM_ConfigClockSource+0x62>
 8007b84:	e073      	b.n	8007c6e <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007b86:	e07c      	b.n	8007c82 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8007b88:	2b20      	cmp	r3, #32
 8007b8a:	d100      	bne.n	8007b8e <HAL_TIM_ConfigClockSource+0x6a>
 8007b8c:	e06f      	b.n	8007c6e <HAL_TIM_ConfigClockSource+0x14a>
 8007b8e:	2b30      	cmp	r3, #48	; 0x30
 8007b90:	d100      	bne.n	8007b94 <HAL_TIM_ConfigClockSource+0x70>
 8007b92:	e06c      	b.n	8007c6e <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8007b94:	e075      	b.n	8007c82 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8007b96:	2b70      	cmp	r3, #112	; 0x70
 8007b98:	d00e      	beq.n	8007bb8 <HAL_TIM_ConfigClockSource+0x94>
 8007b9a:	d804      	bhi.n	8007ba6 <HAL_TIM_ConfigClockSource+0x82>
 8007b9c:	2b50      	cmp	r3, #80	; 0x50
 8007b9e:	d036      	beq.n	8007c0e <HAL_TIM_ConfigClockSource+0xea>
 8007ba0:	2b60      	cmp	r3, #96	; 0x60
 8007ba2:	d044      	beq.n	8007c2e <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8007ba4:	e06d      	b.n	8007c82 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8007ba6:	2280      	movs	r2, #128	; 0x80
 8007ba8:	0152      	lsls	r2, r2, #5
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d068      	beq.n	8007c80 <HAL_TIM_ConfigClockSource+0x15c>
 8007bae:	2280      	movs	r2, #128	; 0x80
 8007bb0:	0192      	lsls	r2, r2, #6
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d017      	beq.n	8007be6 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8007bb6:	e064      	b.n	8007c82 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6818      	ldr	r0, [r3, #0]
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	6899      	ldr	r1, [r3, #8]
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	685a      	ldr	r2, [r3, #4]
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	f000 fa5e 	bl	8008088 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2277      	movs	r2, #119	; 0x77
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	609a      	str	r2, [r3, #8]
      break;
 8007be4:	e04d      	b.n	8007c82 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6818      	ldr	r0, [r3, #0]
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	6899      	ldr	r1, [r3, #8]
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	685a      	ldr	r2, [r3, #4]
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	f000 fa47 	bl	8008088 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	689a      	ldr	r2, [r3, #8]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2180      	movs	r1, #128	; 0x80
 8007c06:	01c9      	lsls	r1, r1, #7
 8007c08:	430a      	orrs	r2, r1
 8007c0a:	609a      	str	r2, [r3, #8]
      break;
 8007c0c:	e039      	b.n	8007c82 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6818      	ldr	r0, [r3, #0]
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	6859      	ldr	r1, [r3, #4]
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	001a      	movs	r2, r3
 8007c1c:	f000 f9ba 	bl	8007f94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2150      	movs	r1, #80	; 0x50
 8007c26:	0018      	movs	r0, r3
 8007c28:	f000 fa14 	bl	8008054 <TIM_ITRx_SetConfig>
      break;
 8007c2c:	e029      	b.n	8007c82 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6818      	ldr	r0, [r3, #0]
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	6859      	ldr	r1, [r3, #4]
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	001a      	movs	r2, r3
 8007c3c:	f000 f9d8 	bl	8007ff0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2160      	movs	r1, #96	; 0x60
 8007c46:	0018      	movs	r0, r3
 8007c48:	f000 fa04 	bl	8008054 <TIM_ITRx_SetConfig>
      break;
 8007c4c:	e019      	b.n	8007c82 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6818      	ldr	r0, [r3, #0]
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	6859      	ldr	r1, [r3, #4]
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	001a      	movs	r2, r3
 8007c5c:	f000 f99a 	bl	8007f94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2140      	movs	r1, #64	; 0x40
 8007c66:	0018      	movs	r0, r3
 8007c68:	f000 f9f4 	bl	8008054 <TIM_ITRx_SetConfig>
      break;
 8007c6c:	e009      	b.n	8007c82 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	0019      	movs	r1, r3
 8007c78:	0010      	movs	r0, r2
 8007c7a:	f000 f9eb 	bl	8008054 <TIM_ITRx_SetConfig>
      break;
 8007c7e:	e000      	b.n	8007c82 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8007c80:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2239      	movs	r2, #57	; 0x39
 8007c86:	2101      	movs	r1, #1
 8007c88:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2238      	movs	r2, #56	; 0x38
 8007c8e:	2100      	movs	r1, #0
 8007c90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c92:	2300      	movs	r3, #0
}
 8007c94:	0018      	movs	r0, r3
 8007c96:	46bd      	mov	sp, r7
 8007c98:	b004      	add	sp, #16
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	ffff00ff 	.word	0xffff00ff

08007ca0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ca8:	46c0      	nop			; (mov r8, r8)
 8007caa:	46bd      	mov	sp, r7
 8007cac:	b002      	add	sp, #8
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007cb8:	46c0      	nop			; (mov r8, r8)
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	b002      	add	sp, #8
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007cc8:	46c0      	nop			; (mov r8, r8)
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	b002      	add	sp, #8
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	2380      	movs	r3, #128	; 0x80
 8007ce4:	05db      	lsls	r3, r3, #23
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d00b      	beq.n	8007d02 <TIM_Base_SetConfig+0x32>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a23      	ldr	r2, [pc, #140]	; (8007d7c <TIM_Base_SetConfig+0xac>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d007      	beq.n	8007d02 <TIM_Base_SetConfig+0x32>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a22      	ldr	r2, [pc, #136]	; (8007d80 <TIM_Base_SetConfig+0xb0>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d003      	beq.n	8007d02 <TIM_Base_SetConfig+0x32>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a21      	ldr	r2, [pc, #132]	; (8007d84 <TIM_Base_SetConfig+0xb4>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d108      	bne.n	8007d14 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2270      	movs	r2, #112	; 0x70
 8007d06:	4393      	bics	r3, r2
 8007d08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	2380      	movs	r3, #128	; 0x80
 8007d18:	05db      	lsls	r3, r3, #23
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d00b      	beq.n	8007d36 <TIM_Base_SetConfig+0x66>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4a16      	ldr	r2, [pc, #88]	; (8007d7c <TIM_Base_SetConfig+0xac>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d007      	beq.n	8007d36 <TIM_Base_SetConfig+0x66>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4a15      	ldr	r2, [pc, #84]	; (8007d80 <TIM_Base_SetConfig+0xb0>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d003      	beq.n	8007d36 <TIM_Base_SetConfig+0x66>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a14      	ldr	r2, [pc, #80]	; (8007d84 <TIM_Base_SetConfig+0xb4>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d108      	bne.n	8007d48 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	4a13      	ldr	r2, [pc, #76]	; (8007d88 <TIM_Base_SetConfig+0xb8>)
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2280      	movs	r2, #128	; 0x80
 8007d4c:	4393      	bics	r3, r2
 8007d4e:	001a      	movs	r2, r3
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	689a      	ldr	r2, [r3, #8]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2201      	movs	r2, #1
 8007d72:	615a      	str	r2, [r3, #20]
}
 8007d74:	46c0      	nop			; (mov r8, r8)
 8007d76:	46bd      	mov	sp, r7
 8007d78:	b004      	add	sp, #16
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	40000400 	.word	0x40000400
 8007d80:	40010800 	.word	0x40010800
 8007d84:	40011400 	.word	0x40011400
 8007d88:	fffffcff 	.word	0xfffffcff

08007d8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b086      	sub	sp, #24
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a1b      	ldr	r3, [r3, #32]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	4393      	bics	r3, r2
 8007d9e:	001a      	movs	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6a1b      	ldr	r3, [r3, #32]
 8007da8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	699b      	ldr	r3, [r3, #24]
 8007db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2270      	movs	r2, #112	; 0x70
 8007dba:	4393      	bics	r3, r2
 8007dbc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2203      	movs	r2, #3
 8007dc2:	4393      	bics	r3, r2
 8007dc4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68fa      	ldr	r2, [r7, #12]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	4393      	bics	r3, r2
 8007dd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	697a      	ldr	r2, [r7, #20]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	685a      	ldr	r2, [r3, #4]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	697a      	ldr	r2, [r7, #20]
 8007dfa:	621a      	str	r2, [r3, #32]
}
 8007dfc:	46c0      	nop			; (mov r8, r8)
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	b006      	add	sp, #24
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a1b      	ldr	r3, [r3, #32]
 8007e12:	2210      	movs	r2, #16
 8007e14:	4393      	bics	r3, r2
 8007e16:	001a      	movs	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a1b      	ldr	r3, [r3, #32]
 8007e20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	699b      	ldr	r3, [r3, #24]
 8007e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	4a13      	ldr	r2, [pc, #76]	; (8007e80 <TIM_OC2_SetConfig+0x7c>)
 8007e32:	4013      	ands	r3, r2
 8007e34:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	4a12      	ldr	r2, [pc, #72]	; (8007e84 <TIM_OC2_SetConfig+0x80>)
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	021b      	lsls	r3, r3, #8
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	2220      	movs	r2, #32
 8007e4e:	4393      	bics	r3, r2
 8007e50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	011b      	lsls	r3, r3, #4
 8007e58:	697a      	ldr	r2, [r7, #20]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	693a      	ldr	r2, [r7, #16]
 8007e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	685a      	ldr	r2, [r3, #4]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	697a      	ldr	r2, [r7, #20]
 8007e76:	621a      	str	r2, [r3, #32]
}
 8007e78:	46c0      	nop			; (mov r8, r8)
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	b006      	add	sp, #24
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	ffff8fff 	.word	0xffff8fff
 8007e84:	fffffcff 	.word	0xfffffcff

08007e88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b086      	sub	sp, #24
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a1b      	ldr	r3, [r3, #32]
 8007e96:	4a1a      	ldr	r2, [pc, #104]	; (8007f00 <TIM_OC3_SetConfig+0x78>)
 8007e98:	401a      	ands	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a1b      	ldr	r3, [r3, #32]
 8007ea2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	69db      	ldr	r3, [r3, #28]
 8007eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2270      	movs	r2, #112	; 0x70
 8007eb4:	4393      	bics	r3, r2
 8007eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2203      	movs	r2, #3
 8007ebc:	4393      	bics	r3, r2
 8007ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	4a0d      	ldr	r2, [pc, #52]	; (8007f04 <TIM_OC3_SetConfig+0x7c>)
 8007ece:	4013      	ands	r3, r2
 8007ed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	021b      	lsls	r3, r3, #8
 8007ed8:	697a      	ldr	r2, [r7, #20]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	693a      	ldr	r2, [r7, #16]
 8007ee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	685a      	ldr	r2, [r3, #4]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	697a      	ldr	r2, [r7, #20]
 8007ef6:	621a      	str	r2, [r3, #32]
}
 8007ef8:	46c0      	nop			; (mov r8, r8)
 8007efa:	46bd      	mov	sp, r7
 8007efc:	b006      	add	sp, #24
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	fffffeff 	.word	0xfffffeff
 8007f04:	fffffdff 	.word	0xfffffdff

08007f08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b086      	sub	sp, #24
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a1b      	ldr	r3, [r3, #32]
 8007f16:	4a1b      	ldr	r2, [pc, #108]	; (8007f84 <TIM_OC4_SetConfig+0x7c>)
 8007f18:	401a      	ands	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a1b      	ldr	r3, [r3, #32]
 8007f22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	69db      	ldr	r3, [r3, #28]
 8007f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	4a15      	ldr	r2, [pc, #84]	; (8007f88 <TIM_OC4_SetConfig+0x80>)
 8007f34:	4013      	ands	r3, r2
 8007f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	4a14      	ldr	r2, [pc, #80]	; (8007f8c <TIM_OC4_SetConfig+0x84>)
 8007f3c:	4013      	ands	r3, r2
 8007f3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	021b      	lsls	r3, r3, #8
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	4a10      	ldr	r2, [pc, #64]	; (8007f90 <TIM_OC4_SetConfig+0x88>)
 8007f50:	4013      	ands	r3, r2
 8007f52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	031b      	lsls	r3, r3, #12
 8007f5a:	697a      	ldr	r2, [r7, #20]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	693a      	ldr	r2, [r7, #16]
 8007f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	685a      	ldr	r2, [r3, #4]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	697a      	ldr	r2, [r7, #20]
 8007f78:	621a      	str	r2, [r3, #32]
}
 8007f7a:	46c0      	nop			; (mov r8, r8)
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	b006      	add	sp, #24
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	46c0      	nop			; (mov r8, r8)
 8007f84:	ffffefff 	.word	0xffffefff
 8007f88:	ffff8fff 	.word	0xffff8fff
 8007f8c:	fffffcff 	.word	0xfffffcff
 8007f90:	ffffdfff 	.word	0xffffdfff

08007f94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b086      	sub	sp, #24
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6a1b      	ldr	r3, [r3, #32]
 8007fa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6a1b      	ldr	r3, [r3, #32]
 8007faa:	2201      	movs	r2, #1
 8007fac:	4393      	bics	r3, r2
 8007fae:	001a      	movs	r2, r3
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	22f0      	movs	r2, #240	; 0xf0
 8007fbe:	4393      	bics	r3, r2
 8007fc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	011b      	lsls	r3, r3, #4
 8007fc6:	693a      	ldr	r2, [r7, #16]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	220a      	movs	r2, #10
 8007fd0:	4393      	bics	r3, r2
 8007fd2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fd4:	697a      	ldr	r2, [r7, #20]
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	693a      	ldr	r2, [r7, #16]
 8007fe0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	697a      	ldr	r2, [r7, #20]
 8007fe6:	621a      	str	r2, [r3, #32]
}
 8007fe8:	46c0      	nop			; (mov r8, r8)
 8007fea:	46bd      	mov	sp, r7
 8007fec:	b006      	add	sp, #24
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b086      	sub	sp, #24
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6a1b      	ldr	r3, [r3, #32]
 8008000:	2210      	movs	r2, #16
 8008002:	4393      	bics	r3, r2
 8008004:	001a      	movs	r2, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	699b      	ldr	r3, [r3, #24]
 800800e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6a1b      	ldr	r3, [r3, #32]
 8008014:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	4a0d      	ldr	r2, [pc, #52]	; (8008050 <TIM_TI2_ConfigInputStage+0x60>)
 800801a:	4013      	ands	r3, r2
 800801c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	031b      	lsls	r3, r3, #12
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	4313      	orrs	r3, r2
 8008026:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	22a0      	movs	r2, #160	; 0xa0
 800802c:	4393      	bics	r3, r2
 800802e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	011b      	lsls	r3, r3, #4
 8008034:	693a      	ldr	r2, [r7, #16]
 8008036:	4313      	orrs	r3, r2
 8008038:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	697a      	ldr	r2, [r7, #20]
 800803e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	693a      	ldr	r2, [r7, #16]
 8008044:	621a      	str	r2, [r3, #32]
}
 8008046:	46c0      	nop			; (mov r8, r8)
 8008048:	46bd      	mov	sp, r7
 800804a:	b006      	add	sp, #24
 800804c:	bd80      	pop	{r7, pc}
 800804e:	46c0      	nop			; (mov r8, r8)
 8008050:	ffff0fff 	.word	0xffff0fff

08008054 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2270      	movs	r2, #112	; 0x70
 8008068:	4393      	bics	r3, r2
 800806a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800806c:	683a      	ldr	r2, [r7, #0]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	4313      	orrs	r3, r2
 8008072:	2207      	movs	r2, #7
 8008074:	4313      	orrs	r3, r2
 8008076:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	68fa      	ldr	r2, [r7, #12]
 800807c:	609a      	str	r2, [r3, #8]
}
 800807e:	46c0      	nop			; (mov r8, r8)
 8008080:	46bd      	mov	sp, r7
 8008082:	b004      	add	sp, #16
 8008084:	bd80      	pop	{r7, pc}
	...

08008088 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b086      	sub	sp, #24
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	607a      	str	r2, [r7, #4]
 8008094:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	4a09      	ldr	r2, [pc, #36]	; (80080c4 <TIM_ETR_SetConfig+0x3c>)
 80080a0:	4013      	ands	r3, r2
 80080a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	021a      	lsls	r2, r3, #8
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	431a      	orrs	r2, r3
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	697a      	ldr	r2, [r7, #20]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	697a      	ldr	r2, [r7, #20]
 80080ba:	609a      	str	r2, [r3, #8]
}
 80080bc:	46c0      	nop			; (mov r8, r8)
 80080be:	46bd      	mov	sp, r7
 80080c0:	b006      	add	sp, #24
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	ffff00ff 	.word	0xffff00ff

080080c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b086      	sub	sp, #24
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	221f      	movs	r2, #31
 80080d8:	4013      	ands	r3, r2
 80080da:	2201      	movs	r2, #1
 80080dc:	409a      	lsls	r2, r3
 80080de:	0013      	movs	r3, r2
 80080e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6a1b      	ldr	r3, [r3, #32]
 80080e6:	697a      	ldr	r2, [r7, #20]
 80080e8:	43d2      	mvns	r2, r2
 80080ea:	401a      	ands	r2, r3
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6a1a      	ldr	r2, [r3, #32]
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	211f      	movs	r1, #31
 80080f8:	400b      	ands	r3, r1
 80080fa:	6879      	ldr	r1, [r7, #4]
 80080fc:	4099      	lsls	r1, r3
 80080fe:	000b      	movs	r3, r1
 8008100:	431a      	orrs	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	621a      	str	r2, [r3, #32]
}
 8008106:	46c0      	nop			; (mov r8, r8)
 8008108:	46bd      	mov	sp, r7
 800810a:	b006      	add	sp, #24
 800810c:	bd80      	pop	{r7, pc}

0800810e <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b084      	sub	sp, #16
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
 8008116:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2238      	movs	r2, #56	; 0x38
 800811c:	5c9b      	ldrb	r3, [r3, r2]
 800811e:	2b01      	cmp	r3, #1
 8008120:	d101      	bne.n	8008126 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008122:	2302      	movs	r3, #2
 8008124:	e032      	b.n	800818c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2238      	movs	r2, #56	; 0x38
 800812a:	2101      	movs	r1, #1
 800812c:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2239      	movs	r2, #57	; 0x39
 8008132:	2102      	movs	r1, #2
 8008134:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2270      	movs	r2, #112	; 0x70
 800814a:	4393      	bics	r3, r2
 800814c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	4313      	orrs	r3, r2
 8008156:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	2280      	movs	r2, #128	; 0x80
 800815c:	4393      	bics	r3, r2
 800815e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	68ba      	ldr	r2, [r7, #8]
 8008166:	4313      	orrs	r3, r2
 8008168:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68ba      	ldr	r2, [r7, #8]
 8008178:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2239      	movs	r2, #57	; 0x39
 800817e:	2101      	movs	r1, #1
 8008180:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2238      	movs	r2, #56	; 0x38
 8008186:	2100      	movs	r1, #0
 8008188:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	0018      	movs	r0, r3
 800818e:	46bd      	mov	sp, r7
 8008190:	b004      	add	sp, #16
 8008192:	bd80      	pop	{r7, pc}

08008194 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2238      	movs	r2, #56	; 0x38
 80081a2:	5c9b      	ldrb	r3, [r3, r2]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d101      	bne.n	80081ac <HAL_TIMEx_RemapConfig+0x18>
 80081a8:	2302      	movs	r3, #2
 80081aa:	e00c      	b.n	80081c6 <HAL_TIMEx_RemapConfig+0x32>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2238      	movs	r2, #56	; 0x38
 80081b0:	2101      	movs	r1, #1
 80081b2:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	683a      	ldr	r2, [r7, #0]
 80081ba:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2238      	movs	r2, #56	; 0x38
 80081c0:	2100      	movs	r1, #0
 80081c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	0018      	movs	r0, r3
 80081c8:	46bd      	mov	sp, r7
 80081ca:	b002      	add	sp, #8
 80081cc:	bd80      	pop	{r7, pc}
	...

080081d0 <__errno>:
 80081d0:	4b01      	ldr	r3, [pc, #4]	; (80081d8 <__errno+0x8>)
 80081d2:	6818      	ldr	r0, [r3, #0]
 80081d4:	4770      	bx	lr
 80081d6:	46c0      	nop			; (mov r8, r8)
 80081d8:	20000058 	.word	0x20000058

080081dc <__libc_init_array>:
 80081dc:	b570      	push	{r4, r5, r6, lr}
 80081de:	2600      	movs	r6, #0
 80081e0:	4d0c      	ldr	r5, [pc, #48]	; (8008214 <__libc_init_array+0x38>)
 80081e2:	4c0d      	ldr	r4, [pc, #52]	; (8008218 <__libc_init_array+0x3c>)
 80081e4:	1b64      	subs	r4, r4, r5
 80081e6:	10a4      	asrs	r4, r4, #2
 80081e8:	42a6      	cmp	r6, r4
 80081ea:	d109      	bne.n	8008200 <__libc_init_array+0x24>
 80081ec:	2600      	movs	r6, #0
 80081ee:	f000 fc29 	bl	8008a44 <_init>
 80081f2:	4d0a      	ldr	r5, [pc, #40]	; (800821c <__libc_init_array+0x40>)
 80081f4:	4c0a      	ldr	r4, [pc, #40]	; (8008220 <__libc_init_array+0x44>)
 80081f6:	1b64      	subs	r4, r4, r5
 80081f8:	10a4      	asrs	r4, r4, #2
 80081fa:	42a6      	cmp	r6, r4
 80081fc:	d105      	bne.n	800820a <__libc_init_array+0x2e>
 80081fe:	bd70      	pop	{r4, r5, r6, pc}
 8008200:	00b3      	lsls	r3, r6, #2
 8008202:	58eb      	ldr	r3, [r5, r3]
 8008204:	4798      	blx	r3
 8008206:	3601      	adds	r6, #1
 8008208:	e7ee      	b.n	80081e8 <__libc_init_array+0xc>
 800820a:	00b3      	lsls	r3, r6, #2
 800820c:	58eb      	ldr	r3, [r5, r3]
 800820e:	4798      	blx	r3
 8008210:	3601      	adds	r6, #1
 8008212:	e7f2      	b.n	80081fa <__libc_init_array+0x1e>
 8008214:	08009244 	.word	0x08009244
 8008218:	08009244 	.word	0x08009244
 800821c:	08009244 	.word	0x08009244
 8008220:	08009248 	.word	0x08009248

08008224 <memcpy>:
 8008224:	2300      	movs	r3, #0
 8008226:	b510      	push	{r4, lr}
 8008228:	429a      	cmp	r2, r3
 800822a:	d100      	bne.n	800822e <memcpy+0xa>
 800822c:	bd10      	pop	{r4, pc}
 800822e:	5ccc      	ldrb	r4, [r1, r3]
 8008230:	54c4      	strb	r4, [r0, r3]
 8008232:	3301      	adds	r3, #1
 8008234:	e7f8      	b.n	8008228 <memcpy+0x4>

08008236 <memset>:
 8008236:	0003      	movs	r3, r0
 8008238:	1812      	adds	r2, r2, r0
 800823a:	4293      	cmp	r3, r2
 800823c:	d100      	bne.n	8008240 <memset+0xa>
 800823e:	4770      	bx	lr
 8008240:	7019      	strb	r1, [r3, #0]
 8008242:	3301      	adds	r3, #1
 8008244:	e7f9      	b.n	800823a <memset+0x4>
	...

08008248 <siprintf>:
 8008248:	b40e      	push	{r1, r2, r3}
 800824a:	b500      	push	{lr}
 800824c:	490b      	ldr	r1, [pc, #44]	; (800827c <siprintf+0x34>)
 800824e:	b09c      	sub	sp, #112	; 0x70
 8008250:	ab1d      	add	r3, sp, #116	; 0x74
 8008252:	9002      	str	r0, [sp, #8]
 8008254:	9006      	str	r0, [sp, #24]
 8008256:	9107      	str	r1, [sp, #28]
 8008258:	9104      	str	r1, [sp, #16]
 800825a:	4809      	ldr	r0, [pc, #36]	; (8008280 <siprintf+0x38>)
 800825c:	4909      	ldr	r1, [pc, #36]	; (8008284 <siprintf+0x3c>)
 800825e:	cb04      	ldmia	r3!, {r2}
 8008260:	9105      	str	r1, [sp, #20]
 8008262:	6800      	ldr	r0, [r0, #0]
 8008264:	a902      	add	r1, sp, #8
 8008266:	9301      	str	r3, [sp, #4]
 8008268:	f000 f870 	bl	800834c <_svfiprintf_r>
 800826c:	2300      	movs	r3, #0
 800826e:	9a02      	ldr	r2, [sp, #8]
 8008270:	7013      	strb	r3, [r2, #0]
 8008272:	b01c      	add	sp, #112	; 0x70
 8008274:	bc08      	pop	{r3}
 8008276:	b003      	add	sp, #12
 8008278:	4718      	bx	r3
 800827a:	46c0      	nop			; (mov r8, r8)
 800827c:	7fffffff 	.word	0x7fffffff
 8008280:	20000058 	.word	0x20000058
 8008284:	ffff0208 	.word	0xffff0208

08008288 <__ssputs_r>:
 8008288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800828a:	688e      	ldr	r6, [r1, #8]
 800828c:	b085      	sub	sp, #20
 800828e:	0007      	movs	r7, r0
 8008290:	000c      	movs	r4, r1
 8008292:	9203      	str	r2, [sp, #12]
 8008294:	9301      	str	r3, [sp, #4]
 8008296:	429e      	cmp	r6, r3
 8008298:	d83c      	bhi.n	8008314 <__ssputs_r+0x8c>
 800829a:	2390      	movs	r3, #144	; 0x90
 800829c:	898a      	ldrh	r2, [r1, #12]
 800829e:	00db      	lsls	r3, r3, #3
 80082a0:	421a      	tst	r2, r3
 80082a2:	d034      	beq.n	800830e <__ssputs_r+0x86>
 80082a4:	2503      	movs	r5, #3
 80082a6:	6909      	ldr	r1, [r1, #16]
 80082a8:	6823      	ldr	r3, [r4, #0]
 80082aa:	1a5b      	subs	r3, r3, r1
 80082ac:	9302      	str	r3, [sp, #8]
 80082ae:	6963      	ldr	r3, [r4, #20]
 80082b0:	9802      	ldr	r0, [sp, #8]
 80082b2:	435d      	muls	r5, r3
 80082b4:	0feb      	lsrs	r3, r5, #31
 80082b6:	195d      	adds	r5, r3, r5
 80082b8:	9b01      	ldr	r3, [sp, #4]
 80082ba:	106d      	asrs	r5, r5, #1
 80082bc:	3301      	adds	r3, #1
 80082be:	181b      	adds	r3, r3, r0
 80082c0:	42ab      	cmp	r3, r5
 80082c2:	d900      	bls.n	80082c6 <__ssputs_r+0x3e>
 80082c4:	001d      	movs	r5, r3
 80082c6:	0553      	lsls	r3, r2, #21
 80082c8:	d532      	bpl.n	8008330 <__ssputs_r+0xa8>
 80082ca:	0029      	movs	r1, r5
 80082cc:	0038      	movs	r0, r7
 80082ce:	f000 fb19 	bl	8008904 <_malloc_r>
 80082d2:	1e06      	subs	r6, r0, #0
 80082d4:	d109      	bne.n	80082ea <__ssputs_r+0x62>
 80082d6:	230c      	movs	r3, #12
 80082d8:	603b      	str	r3, [r7, #0]
 80082da:	2340      	movs	r3, #64	; 0x40
 80082dc:	2001      	movs	r0, #1
 80082de:	89a2      	ldrh	r2, [r4, #12]
 80082e0:	4240      	negs	r0, r0
 80082e2:	4313      	orrs	r3, r2
 80082e4:	81a3      	strh	r3, [r4, #12]
 80082e6:	b005      	add	sp, #20
 80082e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082ea:	9a02      	ldr	r2, [sp, #8]
 80082ec:	6921      	ldr	r1, [r4, #16]
 80082ee:	f7ff ff99 	bl	8008224 <memcpy>
 80082f2:	89a3      	ldrh	r3, [r4, #12]
 80082f4:	4a14      	ldr	r2, [pc, #80]	; (8008348 <__ssputs_r+0xc0>)
 80082f6:	401a      	ands	r2, r3
 80082f8:	2380      	movs	r3, #128	; 0x80
 80082fa:	4313      	orrs	r3, r2
 80082fc:	81a3      	strh	r3, [r4, #12]
 80082fe:	9b02      	ldr	r3, [sp, #8]
 8008300:	6126      	str	r6, [r4, #16]
 8008302:	18f6      	adds	r6, r6, r3
 8008304:	6026      	str	r6, [r4, #0]
 8008306:	6165      	str	r5, [r4, #20]
 8008308:	9e01      	ldr	r6, [sp, #4]
 800830a:	1aed      	subs	r5, r5, r3
 800830c:	60a5      	str	r5, [r4, #8]
 800830e:	9b01      	ldr	r3, [sp, #4]
 8008310:	429e      	cmp	r6, r3
 8008312:	d900      	bls.n	8008316 <__ssputs_r+0x8e>
 8008314:	9e01      	ldr	r6, [sp, #4]
 8008316:	0032      	movs	r2, r6
 8008318:	9903      	ldr	r1, [sp, #12]
 800831a:	6820      	ldr	r0, [r4, #0]
 800831c:	f000 fa95 	bl	800884a <memmove>
 8008320:	68a3      	ldr	r3, [r4, #8]
 8008322:	2000      	movs	r0, #0
 8008324:	1b9b      	subs	r3, r3, r6
 8008326:	60a3      	str	r3, [r4, #8]
 8008328:	6823      	ldr	r3, [r4, #0]
 800832a:	199e      	adds	r6, r3, r6
 800832c:	6026      	str	r6, [r4, #0]
 800832e:	e7da      	b.n	80082e6 <__ssputs_r+0x5e>
 8008330:	002a      	movs	r2, r5
 8008332:	0038      	movs	r0, r7
 8008334:	f000 fb44 	bl	80089c0 <_realloc_r>
 8008338:	1e06      	subs	r6, r0, #0
 800833a:	d1e0      	bne.n	80082fe <__ssputs_r+0x76>
 800833c:	6921      	ldr	r1, [r4, #16]
 800833e:	0038      	movs	r0, r7
 8008340:	f000 fa96 	bl	8008870 <_free_r>
 8008344:	e7c7      	b.n	80082d6 <__ssputs_r+0x4e>
 8008346:	46c0      	nop			; (mov r8, r8)
 8008348:	fffffb7f 	.word	0xfffffb7f

0800834c <_svfiprintf_r>:
 800834c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800834e:	b0a1      	sub	sp, #132	; 0x84
 8008350:	9003      	str	r0, [sp, #12]
 8008352:	001d      	movs	r5, r3
 8008354:	898b      	ldrh	r3, [r1, #12]
 8008356:	000f      	movs	r7, r1
 8008358:	0016      	movs	r6, r2
 800835a:	061b      	lsls	r3, r3, #24
 800835c:	d511      	bpl.n	8008382 <_svfiprintf_r+0x36>
 800835e:	690b      	ldr	r3, [r1, #16]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d10e      	bne.n	8008382 <_svfiprintf_r+0x36>
 8008364:	2140      	movs	r1, #64	; 0x40
 8008366:	f000 facd 	bl	8008904 <_malloc_r>
 800836a:	6038      	str	r0, [r7, #0]
 800836c:	6138      	str	r0, [r7, #16]
 800836e:	2800      	cmp	r0, #0
 8008370:	d105      	bne.n	800837e <_svfiprintf_r+0x32>
 8008372:	230c      	movs	r3, #12
 8008374:	9a03      	ldr	r2, [sp, #12]
 8008376:	3801      	subs	r0, #1
 8008378:	6013      	str	r3, [r2, #0]
 800837a:	b021      	add	sp, #132	; 0x84
 800837c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800837e:	2340      	movs	r3, #64	; 0x40
 8008380:	617b      	str	r3, [r7, #20]
 8008382:	2300      	movs	r3, #0
 8008384:	ac08      	add	r4, sp, #32
 8008386:	6163      	str	r3, [r4, #20]
 8008388:	3320      	adds	r3, #32
 800838a:	7663      	strb	r3, [r4, #25]
 800838c:	3310      	adds	r3, #16
 800838e:	76a3      	strb	r3, [r4, #26]
 8008390:	9507      	str	r5, [sp, #28]
 8008392:	0035      	movs	r5, r6
 8008394:	782b      	ldrb	r3, [r5, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d001      	beq.n	800839e <_svfiprintf_r+0x52>
 800839a:	2b25      	cmp	r3, #37	; 0x25
 800839c:	d146      	bne.n	800842c <_svfiprintf_r+0xe0>
 800839e:	1bab      	subs	r3, r5, r6
 80083a0:	9305      	str	r3, [sp, #20]
 80083a2:	d00c      	beq.n	80083be <_svfiprintf_r+0x72>
 80083a4:	0032      	movs	r2, r6
 80083a6:	0039      	movs	r1, r7
 80083a8:	9803      	ldr	r0, [sp, #12]
 80083aa:	f7ff ff6d 	bl	8008288 <__ssputs_r>
 80083ae:	1c43      	adds	r3, r0, #1
 80083b0:	d100      	bne.n	80083b4 <_svfiprintf_r+0x68>
 80083b2:	e0ae      	b.n	8008512 <_svfiprintf_r+0x1c6>
 80083b4:	6962      	ldr	r2, [r4, #20]
 80083b6:	9b05      	ldr	r3, [sp, #20]
 80083b8:	4694      	mov	ip, r2
 80083ba:	4463      	add	r3, ip
 80083bc:	6163      	str	r3, [r4, #20]
 80083be:	782b      	ldrb	r3, [r5, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d100      	bne.n	80083c6 <_svfiprintf_r+0x7a>
 80083c4:	e0a5      	b.n	8008512 <_svfiprintf_r+0x1c6>
 80083c6:	2201      	movs	r2, #1
 80083c8:	2300      	movs	r3, #0
 80083ca:	4252      	negs	r2, r2
 80083cc:	6062      	str	r2, [r4, #4]
 80083ce:	a904      	add	r1, sp, #16
 80083d0:	3254      	adds	r2, #84	; 0x54
 80083d2:	1852      	adds	r2, r2, r1
 80083d4:	1c6e      	adds	r6, r5, #1
 80083d6:	6023      	str	r3, [r4, #0]
 80083d8:	60e3      	str	r3, [r4, #12]
 80083da:	60a3      	str	r3, [r4, #8]
 80083dc:	7013      	strb	r3, [r2, #0]
 80083de:	65a3      	str	r3, [r4, #88]	; 0x58
 80083e0:	7831      	ldrb	r1, [r6, #0]
 80083e2:	2205      	movs	r2, #5
 80083e4:	4853      	ldr	r0, [pc, #332]	; (8008534 <_svfiprintf_r+0x1e8>)
 80083e6:	f000 fa25 	bl	8008834 <memchr>
 80083ea:	1c75      	adds	r5, r6, #1
 80083ec:	2800      	cmp	r0, #0
 80083ee:	d11f      	bne.n	8008430 <_svfiprintf_r+0xe4>
 80083f0:	6822      	ldr	r2, [r4, #0]
 80083f2:	06d3      	lsls	r3, r2, #27
 80083f4:	d504      	bpl.n	8008400 <_svfiprintf_r+0xb4>
 80083f6:	2353      	movs	r3, #83	; 0x53
 80083f8:	a904      	add	r1, sp, #16
 80083fa:	185b      	adds	r3, r3, r1
 80083fc:	2120      	movs	r1, #32
 80083fe:	7019      	strb	r1, [r3, #0]
 8008400:	0713      	lsls	r3, r2, #28
 8008402:	d504      	bpl.n	800840e <_svfiprintf_r+0xc2>
 8008404:	2353      	movs	r3, #83	; 0x53
 8008406:	a904      	add	r1, sp, #16
 8008408:	185b      	adds	r3, r3, r1
 800840a:	212b      	movs	r1, #43	; 0x2b
 800840c:	7019      	strb	r1, [r3, #0]
 800840e:	7833      	ldrb	r3, [r6, #0]
 8008410:	2b2a      	cmp	r3, #42	; 0x2a
 8008412:	d016      	beq.n	8008442 <_svfiprintf_r+0xf6>
 8008414:	0035      	movs	r5, r6
 8008416:	2100      	movs	r1, #0
 8008418:	200a      	movs	r0, #10
 800841a:	68e3      	ldr	r3, [r4, #12]
 800841c:	782a      	ldrb	r2, [r5, #0]
 800841e:	1c6e      	adds	r6, r5, #1
 8008420:	3a30      	subs	r2, #48	; 0x30
 8008422:	2a09      	cmp	r2, #9
 8008424:	d94e      	bls.n	80084c4 <_svfiprintf_r+0x178>
 8008426:	2900      	cmp	r1, #0
 8008428:	d018      	beq.n	800845c <_svfiprintf_r+0x110>
 800842a:	e010      	b.n	800844e <_svfiprintf_r+0x102>
 800842c:	3501      	adds	r5, #1
 800842e:	e7b1      	b.n	8008394 <_svfiprintf_r+0x48>
 8008430:	4b40      	ldr	r3, [pc, #256]	; (8008534 <_svfiprintf_r+0x1e8>)
 8008432:	6822      	ldr	r2, [r4, #0]
 8008434:	1ac0      	subs	r0, r0, r3
 8008436:	2301      	movs	r3, #1
 8008438:	4083      	lsls	r3, r0
 800843a:	4313      	orrs	r3, r2
 800843c:	6023      	str	r3, [r4, #0]
 800843e:	002e      	movs	r6, r5
 8008440:	e7ce      	b.n	80083e0 <_svfiprintf_r+0x94>
 8008442:	9b07      	ldr	r3, [sp, #28]
 8008444:	1d19      	adds	r1, r3, #4
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	9107      	str	r1, [sp, #28]
 800844a:	2b00      	cmp	r3, #0
 800844c:	db01      	blt.n	8008452 <_svfiprintf_r+0x106>
 800844e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008450:	e004      	b.n	800845c <_svfiprintf_r+0x110>
 8008452:	425b      	negs	r3, r3
 8008454:	60e3      	str	r3, [r4, #12]
 8008456:	2302      	movs	r3, #2
 8008458:	4313      	orrs	r3, r2
 800845a:	6023      	str	r3, [r4, #0]
 800845c:	782b      	ldrb	r3, [r5, #0]
 800845e:	2b2e      	cmp	r3, #46	; 0x2e
 8008460:	d10a      	bne.n	8008478 <_svfiprintf_r+0x12c>
 8008462:	786b      	ldrb	r3, [r5, #1]
 8008464:	2b2a      	cmp	r3, #42	; 0x2a
 8008466:	d135      	bne.n	80084d4 <_svfiprintf_r+0x188>
 8008468:	9b07      	ldr	r3, [sp, #28]
 800846a:	3502      	adds	r5, #2
 800846c:	1d1a      	adds	r2, r3, #4
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	9207      	str	r2, [sp, #28]
 8008472:	2b00      	cmp	r3, #0
 8008474:	db2b      	blt.n	80084ce <_svfiprintf_r+0x182>
 8008476:	9309      	str	r3, [sp, #36]	; 0x24
 8008478:	4e2f      	ldr	r6, [pc, #188]	; (8008538 <_svfiprintf_r+0x1ec>)
 800847a:	7829      	ldrb	r1, [r5, #0]
 800847c:	2203      	movs	r2, #3
 800847e:	0030      	movs	r0, r6
 8008480:	f000 f9d8 	bl	8008834 <memchr>
 8008484:	2800      	cmp	r0, #0
 8008486:	d006      	beq.n	8008496 <_svfiprintf_r+0x14a>
 8008488:	2340      	movs	r3, #64	; 0x40
 800848a:	1b80      	subs	r0, r0, r6
 800848c:	4083      	lsls	r3, r0
 800848e:	6822      	ldr	r2, [r4, #0]
 8008490:	3501      	adds	r5, #1
 8008492:	4313      	orrs	r3, r2
 8008494:	6023      	str	r3, [r4, #0]
 8008496:	7829      	ldrb	r1, [r5, #0]
 8008498:	2206      	movs	r2, #6
 800849a:	4828      	ldr	r0, [pc, #160]	; (800853c <_svfiprintf_r+0x1f0>)
 800849c:	1c6e      	adds	r6, r5, #1
 800849e:	7621      	strb	r1, [r4, #24]
 80084a0:	f000 f9c8 	bl	8008834 <memchr>
 80084a4:	2800      	cmp	r0, #0
 80084a6:	d03c      	beq.n	8008522 <_svfiprintf_r+0x1d6>
 80084a8:	4b25      	ldr	r3, [pc, #148]	; (8008540 <_svfiprintf_r+0x1f4>)
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d125      	bne.n	80084fa <_svfiprintf_r+0x1ae>
 80084ae:	2207      	movs	r2, #7
 80084b0:	9b07      	ldr	r3, [sp, #28]
 80084b2:	3307      	adds	r3, #7
 80084b4:	4393      	bics	r3, r2
 80084b6:	3308      	adds	r3, #8
 80084b8:	9307      	str	r3, [sp, #28]
 80084ba:	6963      	ldr	r3, [r4, #20]
 80084bc:	9a04      	ldr	r2, [sp, #16]
 80084be:	189b      	adds	r3, r3, r2
 80084c0:	6163      	str	r3, [r4, #20]
 80084c2:	e766      	b.n	8008392 <_svfiprintf_r+0x46>
 80084c4:	4343      	muls	r3, r0
 80084c6:	2101      	movs	r1, #1
 80084c8:	189b      	adds	r3, r3, r2
 80084ca:	0035      	movs	r5, r6
 80084cc:	e7a6      	b.n	800841c <_svfiprintf_r+0xd0>
 80084ce:	2301      	movs	r3, #1
 80084d0:	425b      	negs	r3, r3
 80084d2:	e7d0      	b.n	8008476 <_svfiprintf_r+0x12a>
 80084d4:	2300      	movs	r3, #0
 80084d6:	200a      	movs	r0, #10
 80084d8:	001a      	movs	r2, r3
 80084da:	3501      	adds	r5, #1
 80084dc:	6063      	str	r3, [r4, #4]
 80084de:	7829      	ldrb	r1, [r5, #0]
 80084e0:	1c6e      	adds	r6, r5, #1
 80084e2:	3930      	subs	r1, #48	; 0x30
 80084e4:	2909      	cmp	r1, #9
 80084e6:	d903      	bls.n	80084f0 <_svfiprintf_r+0x1a4>
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d0c5      	beq.n	8008478 <_svfiprintf_r+0x12c>
 80084ec:	9209      	str	r2, [sp, #36]	; 0x24
 80084ee:	e7c3      	b.n	8008478 <_svfiprintf_r+0x12c>
 80084f0:	4342      	muls	r2, r0
 80084f2:	2301      	movs	r3, #1
 80084f4:	1852      	adds	r2, r2, r1
 80084f6:	0035      	movs	r5, r6
 80084f8:	e7f1      	b.n	80084de <_svfiprintf_r+0x192>
 80084fa:	ab07      	add	r3, sp, #28
 80084fc:	9300      	str	r3, [sp, #0]
 80084fe:	003a      	movs	r2, r7
 8008500:	4b10      	ldr	r3, [pc, #64]	; (8008544 <_svfiprintf_r+0x1f8>)
 8008502:	0021      	movs	r1, r4
 8008504:	9803      	ldr	r0, [sp, #12]
 8008506:	e000      	b.n	800850a <_svfiprintf_r+0x1be>
 8008508:	bf00      	nop
 800850a:	9004      	str	r0, [sp, #16]
 800850c:	9b04      	ldr	r3, [sp, #16]
 800850e:	3301      	adds	r3, #1
 8008510:	d1d3      	bne.n	80084ba <_svfiprintf_r+0x16e>
 8008512:	89bb      	ldrh	r3, [r7, #12]
 8008514:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008516:	065b      	lsls	r3, r3, #25
 8008518:	d400      	bmi.n	800851c <_svfiprintf_r+0x1d0>
 800851a:	e72e      	b.n	800837a <_svfiprintf_r+0x2e>
 800851c:	2001      	movs	r0, #1
 800851e:	4240      	negs	r0, r0
 8008520:	e72b      	b.n	800837a <_svfiprintf_r+0x2e>
 8008522:	ab07      	add	r3, sp, #28
 8008524:	9300      	str	r3, [sp, #0]
 8008526:	003a      	movs	r2, r7
 8008528:	4b06      	ldr	r3, [pc, #24]	; (8008544 <_svfiprintf_r+0x1f8>)
 800852a:	0021      	movs	r1, r4
 800852c:	9803      	ldr	r0, [sp, #12]
 800852e:	f000 f879 	bl	8008624 <_printf_i>
 8008532:	e7ea      	b.n	800850a <_svfiprintf_r+0x1be>
 8008534:	08009210 	.word	0x08009210
 8008538:	08009216 	.word	0x08009216
 800853c:	0800921a 	.word	0x0800921a
 8008540:	00000000 	.word	0x00000000
 8008544:	08008289 	.word	0x08008289

08008548 <_printf_common>:
 8008548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800854a:	0015      	movs	r5, r2
 800854c:	9301      	str	r3, [sp, #4]
 800854e:	688a      	ldr	r2, [r1, #8]
 8008550:	690b      	ldr	r3, [r1, #16]
 8008552:	9000      	str	r0, [sp, #0]
 8008554:	000c      	movs	r4, r1
 8008556:	4293      	cmp	r3, r2
 8008558:	da00      	bge.n	800855c <_printf_common+0x14>
 800855a:	0013      	movs	r3, r2
 800855c:	0022      	movs	r2, r4
 800855e:	602b      	str	r3, [r5, #0]
 8008560:	3243      	adds	r2, #67	; 0x43
 8008562:	7812      	ldrb	r2, [r2, #0]
 8008564:	2a00      	cmp	r2, #0
 8008566:	d001      	beq.n	800856c <_printf_common+0x24>
 8008568:	3301      	adds	r3, #1
 800856a:	602b      	str	r3, [r5, #0]
 800856c:	6823      	ldr	r3, [r4, #0]
 800856e:	069b      	lsls	r3, r3, #26
 8008570:	d502      	bpl.n	8008578 <_printf_common+0x30>
 8008572:	682b      	ldr	r3, [r5, #0]
 8008574:	3302      	adds	r3, #2
 8008576:	602b      	str	r3, [r5, #0]
 8008578:	2706      	movs	r7, #6
 800857a:	6823      	ldr	r3, [r4, #0]
 800857c:	401f      	ands	r7, r3
 800857e:	d027      	beq.n	80085d0 <_printf_common+0x88>
 8008580:	0023      	movs	r3, r4
 8008582:	3343      	adds	r3, #67	; 0x43
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	1e5a      	subs	r2, r3, #1
 8008588:	4193      	sbcs	r3, r2
 800858a:	6822      	ldr	r2, [r4, #0]
 800858c:	0692      	lsls	r2, r2, #26
 800858e:	d430      	bmi.n	80085f2 <_printf_common+0xaa>
 8008590:	0022      	movs	r2, r4
 8008592:	9901      	ldr	r1, [sp, #4]
 8008594:	3243      	adds	r2, #67	; 0x43
 8008596:	9800      	ldr	r0, [sp, #0]
 8008598:	9e08      	ldr	r6, [sp, #32]
 800859a:	47b0      	blx	r6
 800859c:	1c43      	adds	r3, r0, #1
 800859e:	d025      	beq.n	80085ec <_printf_common+0xa4>
 80085a0:	2306      	movs	r3, #6
 80085a2:	6820      	ldr	r0, [r4, #0]
 80085a4:	682a      	ldr	r2, [r5, #0]
 80085a6:	68e1      	ldr	r1, [r4, #12]
 80085a8:	4003      	ands	r3, r0
 80085aa:	2500      	movs	r5, #0
 80085ac:	2b04      	cmp	r3, #4
 80085ae:	d103      	bne.n	80085b8 <_printf_common+0x70>
 80085b0:	1a8d      	subs	r5, r1, r2
 80085b2:	43eb      	mvns	r3, r5
 80085b4:	17db      	asrs	r3, r3, #31
 80085b6:	401d      	ands	r5, r3
 80085b8:	68a3      	ldr	r3, [r4, #8]
 80085ba:	6922      	ldr	r2, [r4, #16]
 80085bc:	4293      	cmp	r3, r2
 80085be:	dd01      	ble.n	80085c4 <_printf_common+0x7c>
 80085c0:	1a9b      	subs	r3, r3, r2
 80085c2:	18ed      	adds	r5, r5, r3
 80085c4:	2700      	movs	r7, #0
 80085c6:	42bd      	cmp	r5, r7
 80085c8:	d120      	bne.n	800860c <_printf_common+0xc4>
 80085ca:	2000      	movs	r0, #0
 80085cc:	e010      	b.n	80085f0 <_printf_common+0xa8>
 80085ce:	3701      	adds	r7, #1
 80085d0:	68e3      	ldr	r3, [r4, #12]
 80085d2:	682a      	ldr	r2, [r5, #0]
 80085d4:	1a9b      	subs	r3, r3, r2
 80085d6:	42bb      	cmp	r3, r7
 80085d8:	ddd2      	ble.n	8008580 <_printf_common+0x38>
 80085da:	0022      	movs	r2, r4
 80085dc:	2301      	movs	r3, #1
 80085de:	3219      	adds	r2, #25
 80085e0:	9901      	ldr	r1, [sp, #4]
 80085e2:	9800      	ldr	r0, [sp, #0]
 80085e4:	9e08      	ldr	r6, [sp, #32]
 80085e6:	47b0      	blx	r6
 80085e8:	1c43      	adds	r3, r0, #1
 80085ea:	d1f0      	bne.n	80085ce <_printf_common+0x86>
 80085ec:	2001      	movs	r0, #1
 80085ee:	4240      	negs	r0, r0
 80085f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80085f2:	2030      	movs	r0, #48	; 0x30
 80085f4:	18e1      	adds	r1, r4, r3
 80085f6:	3143      	adds	r1, #67	; 0x43
 80085f8:	7008      	strb	r0, [r1, #0]
 80085fa:	0021      	movs	r1, r4
 80085fc:	1c5a      	adds	r2, r3, #1
 80085fe:	3145      	adds	r1, #69	; 0x45
 8008600:	7809      	ldrb	r1, [r1, #0]
 8008602:	18a2      	adds	r2, r4, r2
 8008604:	3243      	adds	r2, #67	; 0x43
 8008606:	3302      	adds	r3, #2
 8008608:	7011      	strb	r1, [r2, #0]
 800860a:	e7c1      	b.n	8008590 <_printf_common+0x48>
 800860c:	0022      	movs	r2, r4
 800860e:	2301      	movs	r3, #1
 8008610:	321a      	adds	r2, #26
 8008612:	9901      	ldr	r1, [sp, #4]
 8008614:	9800      	ldr	r0, [sp, #0]
 8008616:	9e08      	ldr	r6, [sp, #32]
 8008618:	47b0      	blx	r6
 800861a:	1c43      	adds	r3, r0, #1
 800861c:	d0e6      	beq.n	80085ec <_printf_common+0xa4>
 800861e:	3701      	adds	r7, #1
 8008620:	e7d1      	b.n	80085c6 <_printf_common+0x7e>
	...

08008624 <_printf_i>:
 8008624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008626:	b089      	sub	sp, #36	; 0x24
 8008628:	9204      	str	r2, [sp, #16]
 800862a:	000a      	movs	r2, r1
 800862c:	3243      	adds	r2, #67	; 0x43
 800862e:	9305      	str	r3, [sp, #20]
 8008630:	9003      	str	r0, [sp, #12]
 8008632:	9202      	str	r2, [sp, #8]
 8008634:	7e0a      	ldrb	r2, [r1, #24]
 8008636:	000c      	movs	r4, r1
 8008638:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800863a:	2a6e      	cmp	r2, #110	; 0x6e
 800863c:	d100      	bne.n	8008640 <_printf_i+0x1c>
 800863e:	e086      	b.n	800874e <_printf_i+0x12a>
 8008640:	d81f      	bhi.n	8008682 <_printf_i+0x5e>
 8008642:	2a63      	cmp	r2, #99	; 0x63
 8008644:	d033      	beq.n	80086ae <_printf_i+0x8a>
 8008646:	d808      	bhi.n	800865a <_printf_i+0x36>
 8008648:	2a00      	cmp	r2, #0
 800864a:	d100      	bne.n	800864e <_printf_i+0x2a>
 800864c:	e08c      	b.n	8008768 <_printf_i+0x144>
 800864e:	2a58      	cmp	r2, #88	; 0x58
 8008650:	d04d      	beq.n	80086ee <_printf_i+0xca>
 8008652:	0025      	movs	r5, r4
 8008654:	3542      	adds	r5, #66	; 0x42
 8008656:	702a      	strb	r2, [r5, #0]
 8008658:	e030      	b.n	80086bc <_printf_i+0x98>
 800865a:	2a64      	cmp	r2, #100	; 0x64
 800865c:	d001      	beq.n	8008662 <_printf_i+0x3e>
 800865e:	2a69      	cmp	r2, #105	; 0x69
 8008660:	d1f7      	bne.n	8008652 <_printf_i+0x2e>
 8008662:	6819      	ldr	r1, [r3, #0]
 8008664:	6825      	ldr	r5, [r4, #0]
 8008666:	1d0a      	adds	r2, r1, #4
 8008668:	0628      	lsls	r0, r5, #24
 800866a:	d529      	bpl.n	80086c0 <_printf_i+0x9c>
 800866c:	6808      	ldr	r0, [r1, #0]
 800866e:	601a      	str	r2, [r3, #0]
 8008670:	2800      	cmp	r0, #0
 8008672:	da03      	bge.n	800867c <_printf_i+0x58>
 8008674:	232d      	movs	r3, #45	; 0x2d
 8008676:	9a02      	ldr	r2, [sp, #8]
 8008678:	4240      	negs	r0, r0
 800867a:	7013      	strb	r3, [r2, #0]
 800867c:	4e6b      	ldr	r6, [pc, #428]	; (800882c <_printf_i+0x208>)
 800867e:	270a      	movs	r7, #10
 8008680:	e04f      	b.n	8008722 <_printf_i+0xfe>
 8008682:	2a73      	cmp	r2, #115	; 0x73
 8008684:	d074      	beq.n	8008770 <_printf_i+0x14c>
 8008686:	d808      	bhi.n	800869a <_printf_i+0x76>
 8008688:	2a6f      	cmp	r2, #111	; 0x6f
 800868a:	d01f      	beq.n	80086cc <_printf_i+0xa8>
 800868c:	2a70      	cmp	r2, #112	; 0x70
 800868e:	d1e0      	bne.n	8008652 <_printf_i+0x2e>
 8008690:	2220      	movs	r2, #32
 8008692:	6809      	ldr	r1, [r1, #0]
 8008694:	430a      	orrs	r2, r1
 8008696:	6022      	str	r2, [r4, #0]
 8008698:	e003      	b.n	80086a2 <_printf_i+0x7e>
 800869a:	2a75      	cmp	r2, #117	; 0x75
 800869c:	d016      	beq.n	80086cc <_printf_i+0xa8>
 800869e:	2a78      	cmp	r2, #120	; 0x78
 80086a0:	d1d7      	bne.n	8008652 <_printf_i+0x2e>
 80086a2:	0022      	movs	r2, r4
 80086a4:	2178      	movs	r1, #120	; 0x78
 80086a6:	3245      	adds	r2, #69	; 0x45
 80086a8:	7011      	strb	r1, [r2, #0]
 80086aa:	4e61      	ldr	r6, [pc, #388]	; (8008830 <_printf_i+0x20c>)
 80086ac:	e022      	b.n	80086f4 <_printf_i+0xd0>
 80086ae:	0025      	movs	r5, r4
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	3542      	adds	r5, #66	; 0x42
 80086b4:	1d11      	adds	r1, r2, #4
 80086b6:	6019      	str	r1, [r3, #0]
 80086b8:	6813      	ldr	r3, [r2, #0]
 80086ba:	702b      	strb	r3, [r5, #0]
 80086bc:	2301      	movs	r3, #1
 80086be:	e065      	b.n	800878c <_printf_i+0x168>
 80086c0:	6808      	ldr	r0, [r1, #0]
 80086c2:	601a      	str	r2, [r3, #0]
 80086c4:	0669      	lsls	r1, r5, #25
 80086c6:	d5d3      	bpl.n	8008670 <_printf_i+0x4c>
 80086c8:	b200      	sxth	r0, r0
 80086ca:	e7d1      	b.n	8008670 <_printf_i+0x4c>
 80086cc:	6819      	ldr	r1, [r3, #0]
 80086ce:	6825      	ldr	r5, [r4, #0]
 80086d0:	1d08      	adds	r0, r1, #4
 80086d2:	6018      	str	r0, [r3, #0]
 80086d4:	6808      	ldr	r0, [r1, #0]
 80086d6:	062e      	lsls	r6, r5, #24
 80086d8:	d505      	bpl.n	80086e6 <_printf_i+0xc2>
 80086da:	4e54      	ldr	r6, [pc, #336]	; (800882c <_printf_i+0x208>)
 80086dc:	2708      	movs	r7, #8
 80086de:	2a6f      	cmp	r2, #111	; 0x6f
 80086e0:	d01b      	beq.n	800871a <_printf_i+0xf6>
 80086e2:	270a      	movs	r7, #10
 80086e4:	e019      	b.n	800871a <_printf_i+0xf6>
 80086e6:	066d      	lsls	r5, r5, #25
 80086e8:	d5f7      	bpl.n	80086da <_printf_i+0xb6>
 80086ea:	b280      	uxth	r0, r0
 80086ec:	e7f5      	b.n	80086da <_printf_i+0xb6>
 80086ee:	3145      	adds	r1, #69	; 0x45
 80086f0:	4e4e      	ldr	r6, [pc, #312]	; (800882c <_printf_i+0x208>)
 80086f2:	700a      	strb	r2, [r1, #0]
 80086f4:	6818      	ldr	r0, [r3, #0]
 80086f6:	6822      	ldr	r2, [r4, #0]
 80086f8:	1d01      	adds	r1, r0, #4
 80086fa:	6800      	ldr	r0, [r0, #0]
 80086fc:	6019      	str	r1, [r3, #0]
 80086fe:	0615      	lsls	r5, r2, #24
 8008700:	d521      	bpl.n	8008746 <_printf_i+0x122>
 8008702:	07d3      	lsls	r3, r2, #31
 8008704:	d502      	bpl.n	800870c <_printf_i+0xe8>
 8008706:	2320      	movs	r3, #32
 8008708:	431a      	orrs	r2, r3
 800870a:	6022      	str	r2, [r4, #0]
 800870c:	2710      	movs	r7, #16
 800870e:	2800      	cmp	r0, #0
 8008710:	d103      	bne.n	800871a <_printf_i+0xf6>
 8008712:	2320      	movs	r3, #32
 8008714:	6822      	ldr	r2, [r4, #0]
 8008716:	439a      	bics	r2, r3
 8008718:	6022      	str	r2, [r4, #0]
 800871a:	0023      	movs	r3, r4
 800871c:	2200      	movs	r2, #0
 800871e:	3343      	adds	r3, #67	; 0x43
 8008720:	701a      	strb	r2, [r3, #0]
 8008722:	6863      	ldr	r3, [r4, #4]
 8008724:	60a3      	str	r3, [r4, #8]
 8008726:	2b00      	cmp	r3, #0
 8008728:	db58      	blt.n	80087dc <_printf_i+0x1b8>
 800872a:	2204      	movs	r2, #4
 800872c:	6821      	ldr	r1, [r4, #0]
 800872e:	4391      	bics	r1, r2
 8008730:	6021      	str	r1, [r4, #0]
 8008732:	2800      	cmp	r0, #0
 8008734:	d154      	bne.n	80087e0 <_printf_i+0x1bc>
 8008736:	9d02      	ldr	r5, [sp, #8]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d05a      	beq.n	80087f2 <_printf_i+0x1ce>
 800873c:	0025      	movs	r5, r4
 800873e:	7833      	ldrb	r3, [r6, #0]
 8008740:	3542      	adds	r5, #66	; 0x42
 8008742:	702b      	strb	r3, [r5, #0]
 8008744:	e055      	b.n	80087f2 <_printf_i+0x1ce>
 8008746:	0655      	lsls	r5, r2, #25
 8008748:	d5db      	bpl.n	8008702 <_printf_i+0xde>
 800874a:	b280      	uxth	r0, r0
 800874c:	e7d9      	b.n	8008702 <_printf_i+0xde>
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	680d      	ldr	r5, [r1, #0]
 8008752:	1d10      	adds	r0, r2, #4
 8008754:	6949      	ldr	r1, [r1, #20]
 8008756:	6018      	str	r0, [r3, #0]
 8008758:	6813      	ldr	r3, [r2, #0]
 800875a:	062e      	lsls	r6, r5, #24
 800875c:	d501      	bpl.n	8008762 <_printf_i+0x13e>
 800875e:	6019      	str	r1, [r3, #0]
 8008760:	e002      	b.n	8008768 <_printf_i+0x144>
 8008762:	066d      	lsls	r5, r5, #25
 8008764:	d5fb      	bpl.n	800875e <_printf_i+0x13a>
 8008766:	8019      	strh	r1, [r3, #0]
 8008768:	2300      	movs	r3, #0
 800876a:	9d02      	ldr	r5, [sp, #8]
 800876c:	6123      	str	r3, [r4, #16]
 800876e:	e04f      	b.n	8008810 <_printf_i+0x1ec>
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	1d11      	adds	r1, r2, #4
 8008774:	6019      	str	r1, [r3, #0]
 8008776:	6815      	ldr	r5, [r2, #0]
 8008778:	2100      	movs	r1, #0
 800877a:	6862      	ldr	r2, [r4, #4]
 800877c:	0028      	movs	r0, r5
 800877e:	f000 f859 	bl	8008834 <memchr>
 8008782:	2800      	cmp	r0, #0
 8008784:	d001      	beq.n	800878a <_printf_i+0x166>
 8008786:	1b40      	subs	r0, r0, r5
 8008788:	6060      	str	r0, [r4, #4]
 800878a:	6863      	ldr	r3, [r4, #4]
 800878c:	6123      	str	r3, [r4, #16]
 800878e:	2300      	movs	r3, #0
 8008790:	9a02      	ldr	r2, [sp, #8]
 8008792:	7013      	strb	r3, [r2, #0]
 8008794:	e03c      	b.n	8008810 <_printf_i+0x1ec>
 8008796:	6923      	ldr	r3, [r4, #16]
 8008798:	002a      	movs	r2, r5
 800879a:	9904      	ldr	r1, [sp, #16]
 800879c:	9803      	ldr	r0, [sp, #12]
 800879e:	9d05      	ldr	r5, [sp, #20]
 80087a0:	47a8      	blx	r5
 80087a2:	1c43      	adds	r3, r0, #1
 80087a4:	d03e      	beq.n	8008824 <_printf_i+0x200>
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	079b      	lsls	r3, r3, #30
 80087aa:	d415      	bmi.n	80087d8 <_printf_i+0x1b4>
 80087ac:	9b07      	ldr	r3, [sp, #28]
 80087ae:	68e0      	ldr	r0, [r4, #12]
 80087b0:	4298      	cmp	r0, r3
 80087b2:	da39      	bge.n	8008828 <_printf_i+0x204>
 80087b4:	0018      	movs	r0, r3
 80087b6:	e037      	b.n	8008828 <_printf_i+0x204>
 80087b8:	0022      	movs	r2, r4
 80087ba:	2301      	movs	r3, #1
 80087bc:	3219      	adds	r2, #25
 80087be:	9904      	ldr	r1, [sp, #16]
 80087c0:	9803      	ldr	r0, [sp, #12]
 80087c2:	9e05      	ldr	r6, [sp, #20]
 80087c4:	47b0      	blx	r6
 80087c6:	1c43      	adds	r3, r0, #1
 80087c8:	d02c      	beq.n	8008824 <_printf_i+0x200>
 80087ca:	3501      	adds	r5, #1
 80087cc:	68e3      	ldr	r3, [r4, #12]
 80087ce:	9a07      	ldr	r2, [sp, #28]
 80087d0:	1a9b      	subs	r3, r3, r2
 80087d2:	42ab      	cmp	r3, r5
 80087d4:	dcf0      	bgt.n	80087b8 <_printf_i+0x194>
 80087d6:	e7e9      	b.n	80087ac <_printf_i+0x188>
 80087d8:	2500      	movs	r5, #0
 80087da:	e7f7      	b.n	80087cc <_printf_i+0x1a8>
 80087dc:	2800      	cmp	r0, #0
 80087de:	d0ad      	beq.n	800873c <_printf_i+0x118>
 80087e0:	9d02      	ldr	r5, [sp, #8]
 80087e2:	0039      	movs	r1, r7
 80087e4:	f7f7 fd1e 	bl	8000224 <__aeabi_uidivmod>
 80087e8:	5c73      	ldrb	r3, [r6, r1]
 80087ea:	3d01      	subs	r5, #1
 80087ec:	702b      	strb	r3, [r5, #0]
 80087ee:	2800      	cmp	r0, #0
 80087f0:	d1f7      	bne.n	80087e2 <_printf_i+0x1be>
 80087f2:	2f08      	cmp	r7, #8
 80087f4:	d109      	bne.n	800880a <_printf_i+0x1e6>
 80087f6:	6823      	ldr	r3, [r4, #0]
 80087f8:	07db      	lsls	r3, r3, #31
 80087fa:	d506      	bpl.n	800880a <_printf_i+0x1e6>
 80087fc:	6863      	ldr	r3, [r4, #4]
 80087fe:	6922      	ldr	r2, [r4, #16]
 8008800:	4293      	cmp	r3, r2
 8008802:	dc02      	bgt.n	800880a <_printf_i+0x1e6>
 8008804:	2330      	movs	r3, #48	; 0x30
 8008806:	3d01      	subs	r5, #1
 8008808:	702b      	strb	r3, [r5, #0]
 800880a:	9b02      	ldr	r3, [sp, #8]
 800880c:	1b5b      	subs	r3, r3, r5
 800880e:	6123      	str	r3, [r4, #16]
 8008810:	9b05      	ldr	r3, [sp, #20]
 8008812:	aa07      	add	r2, sp, #28
 8008814:	9300      	str	r3, [sp, #0]
 8008816:	0021      	movs	r1, r4
 8008818:	9b04      	ldr	r3, [sp, #16]
 800881a:	9803      	ldr	r0, [sp, #12]
 800881c:	f7ff fe94 	bl	8008548 <_printf_common>
 8008820:	1c43      	adds	r3, r0, #1
 8008822:	d1b8      	bne.n	8008796 <_printf_i+0x172>
 8008824:	2001      	movs	r0, #1
 8008826:	4240      	negs	r0, r0
 8008828:	b009      	add	sp, #36	; 0x24
 800882a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800882c:	08009221 	.word	0x08009221
 8008830:	08009232 	.word	0x08009232

08008834 <memchr>:
 8008834:	b2c9      	uxtb	r1, r1
 8008836:	1882      	adds	r2, r0, r2
 8008838:	4290      	cmp	r0, r2
 800883a:	d101      	bne.n	8008840 <memchr+0xc>
 800883c:	2000      	movs	r0, #0
 800883e:	4770      	bx	lr
 8008840:	7803      	ldrb	r3, [r0, #0]
 8008842:	428b      	cmp	r3, r1
 8008844:	d0fb      	beq.n	800883e <memchr+0xa>
 8008846:	3001      	adds	r0, #1
 8008848:	e7f6      	b.n	8008838 <memchr+0x4>

0800884a <memmove>:
 800884a:	b510      	push	{r4, lr}
 800884c:	4288      	cmp	r0, r1
 800884e:	d902      	bls.n	8008856 <memmove+0xc>
 8008850:	188b      	adds	r3, r1, r2
 8008852:	4298      	cmp	r0, r3
 8008854:	d303      	bcc.n	800885e <memmove+0x14>
 8008856:	2300      	movs	r3, #0
 8008858:	e007      	b.n	800886a <memmove+0x20>
 800885a:	5c8b      	ldrb	r3, [r1, r2]
 800885c:	5483      	strb	r3, [r0, r2]
 800885e:	3a01      	subs	r2, #1
 8008860:	d2fb      	bcs.n	800885a <memmove+0x10>
 8008862:	bd10      	pop	{r4, pc}
 8008864:	5ccc      	ldrb	r4, [r1, r3]
 8008866:	54c4      	strb	r4, [r0, r3]
 8008868:	3301      	adds	r3, #1
 800886a:	429a      	cmp	r2, r3
 800886c:	d1fa      	bne.n	8008864 <memmove+0x1a>
 800886e:	e7f8      	b.n	8008862 <memmove+0x18>

08008870 <_free_r>:
 8008870:	b570      	push	{r4, r5, r6, lr}
 8008872:	0005      	movs	r5, r0
 8008874:	2900      	cmp	r1, #0
 8008876:	d010      	beq.n	800889a <_free_r+0x2a>
 8008878:	1f0c      	subs	r4, r1, #4
 800887a:	6823      	ldr	r3, [r4, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	da00      	bge.n	8008882 <_free_r+0x12>
 8008880:	18e4      	adds	r4, r4, r3
 8008882:	0028      	movs	r0, r5
 8008884:	f000 f8d4 	bl	8008a30 <__malloc_lock>
 8008888:	4a1d      	ldr	r2, [pc, #116]	; (8008900 <_free_r+0x90>)
 800888a:	6813      	ldr	r3, [r2, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d105      	bne.n	800889c <_free_r+0x2c>
 8008890:	6063      	str	r3, [r4, #4]
 8008892:	6014      	str	r4, [r2, #0]
 8008894:	0028      	movs	r0, r5
 8008896:	f000 f8cc 	bl	8008a32 <__malloc_unlock>
 800889a:	bd70      	pop	{r4, r5, r6, pc}
 800889c:	42a3      	cmp	r3, r4
 800889e:	d909      	bls.n	80088b4 <_free_r+0x44>
 80088a0:	6821      	ldr	r1, [r4, #0]
 80088a2:	1860      	adds	r0, r4, r1
 80088a4:	4283      	cmp	r3, r0
 80088a6:	d1f3      	bne.n	8008890 <_free_r+0x20>
 80088a8:	6818      	ldr	r0, [r3, #0]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	1841      	adds	r1, r0, r1
 80088ae:	6021      	str	r1, [r4, #0]
 80088b0:	e7ee      	b.n	8008890 <_free_r+0x20>
 80088b2:	0013      	movs	r3, r2
 80088b4:	685a      	ldr	r2, [r3, #4]
 80088b6:	2a00      	cmp	r2, #0
 80088b8:	d001      	beq.n	80088be <_free_r+0x4e>
 80088ba:	42a2      	cmp	r2, r4
 80088bc:	d9f9      	bls.n	80088b2 <_free_r+0x42>
 80088be:	6819      	ldr	r1, [r3, #0]
 80088c0:	1858      	adds	r0, r3, r1
 80088c2:	42a0      	cmp	r0, r4
 80088c4:	d10b      	bne.n	80088de <_free_r+0x6e>
 80088c6:	6820      	ldr	r0, [r4, #0]
 80088c8:	1809      	adds	r1, r1, r0
 80088ca:	1858      	adds	r0, r3, r1
 80088cc:	6019      	str	r1, [r3, #0]
 80088ce:	4282      	cmp	r2, r0
 80088d0:	d1e0      	bne.n	8008894 <_free_r+0x24>
 80088d2:	6810      	ldr	r0, [r2, #0]
 80088d4:	6852      	ldr	r2, [r2, #4]
 80088d6:	1841      	adds	r1, r0, r1
 80088d8:	6019      	str	r1, [r3, #0]
 80088da:	605a      	str	r2, [r3, #4]
 80088dc:	e7da      	b.n	8008894 <_free_r+0x24>
 80088de:	42a0      	cmp	r0, r4
 80088e0:	d902      	bls.n	80088e8 <_free_r+0x78>
 80088e2:	230c      	movs	r3, #12
 80088e4:	602b      	str	r3, [r5, #0]
 80088e6:	e7d5      	b.n	8008894 <_free_r+0x24>
 80088e8:	6821      	ldr	r1, [r4, #0]
 80088ea:	1860      	adds	r0, r4, r1
 80088ec:	4282      	cmp	r2, r0
 80088ee:	d103      	bne.n	80088f8 <_free_r+0x88>
 80088f0:	6810      	ldr	r0, [r2, #0]
 80088f2:	6852      	ldr	r2, [r2, #4]
 80088f4:	1841      	adds	r1, r0, r1
 80088f6:	6021      	str	r1, [r4, #0]
 80088f8:	6062      	str	r2, [r4, #4]
 80088fa:	605c      	str	r4, [r3, #4]
 80088fc:	e7ca      	b.n	8008894 <_free_r+0x24>
 80088fe:	46c0      	nop			; (mov r8, r8)
 8008900:	2000011c 	.word	0x2000011c

08008904 <_malloc_r>:
 8008904:	2303      	movs	r3, #3
 8008906:	b570      	push	{r4, r5, r6, lr}
 8008908:	1ccd      	adds	r5, r1, #3
 800890a:	439d      	bics	r5, r3
 800890c:	3508      	adds	r5, #8
 800890e:	0006      	movs	r6, r0
 8008910:	2d0c      	cmp	r5, #12
 8008912:	d21e      	bcs.n	8008952 <_malloc_r+0x4e>
 8008914:	250c      	movs	r5, #12
 8008916:	42a9      	cmp	r1, r5
 8008918:	d81d      	bhi.n	8008956 <_malloc_r+0x52>
 800891a:	0030      	movs	r0, r6
 800891c:	f000 f888 	bl	8008a30 <__malloc_lock>
 8008920:	4a25      	ldr	r2, [pc, #148]	; (80089b8 <_malloc_r+0xb4>)
 8008922:	6814      	ldr	r4, [r2, #0]
 8008924:	0021      	movs	r1, r4
 8008926:	2900      	cmp	r1, #0
 8008928:	d119      	bne.n	800895e <_malloc_r+0x5a>
 800892a:	4c24      	ldr	r4, [pc, #144]	; (80089bc <_malloc_r+0xb8>)
 800892c:	6823      	ldr	r3, [r4, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d103      	bne.n	800893a <_malloc_r+0x36>
 8008932:	0030      	movs	r0, r6
 8008934:	f000 f86a 	bl	8008a0c <_sbrk_r>
 8008938:	6020      	str	r0, [r4, #0]
 800893a:	0029      	movs	r1, r5
 800893c:	0030      	movs	r0, r6
 800893e:	f000 f865 	bl	8008a0c <_sbrk_r>
 8008942:	1c43      	adds	r3, r0, #1
 8008944:	d12b      	bne.n	800899e <_malloc_r+0x9a>
 8008946:	230c      	movs	r3, #12
 8008948:	0030      	movs	r0, r6
 800894a:	6033      	str	r3, [r6, #0]
 800894c:	f000 f871 	bl	8008a32 <__malloc_unlock>
 8008950:	e003      	b.n	800895a <_malloc_r+0x56>
 8008952:	2d00      	cmp	r5, #0
 8008954:	dadf      	bge.n	8008916 <_malloc_r+0x12>
 8008956:	230c      	movs	r3, #12
 8008958:	6033      	str	r3, [r6, #0]
 800895a:	2000      	movs	r0, #0
 800895c:	bd70      	pop	{r4, r5, r6, pc}
 800895e:	680b      	ldr	r3, [r1, #0]
 8008960:	1b5b      	subs	r3, r3, r5
 8008962:	d419      	bmi.n	8008998 <_malloc_r+0x94>
 8008964:	2b0b      	cmp	r3, #11
 8008966:	d903      	bls.n	8008970 <_malloc_r+0x6c>
 8008968:	600b      	str	r3, [r1, #0]
 800896a:	18cc      	adds	r4, r1, r3
 800896c:	6025      	str	r5, [r4, #0]
 800896e:	e003      	b.n	8008978 <_malloc_r+0x74>
 8008970:	684b      	ldr	r3, [r1, #4]
 8008972:	428c      	cmp	r4, r1
 8008974:	d10d      	bne.n	8008992 <_malloc_r+0x8e>
 8008976:	6013      	str	r3, [r2, #0]
 8008978:	0030      	movs	r0, r6
 800897a:	f000 f85a 	bl	8008a32 <__malloc_unlock>
 800897e:	0020      	movs	r0, r4
 8008980:	2207      	movs	r2, #7
 8008982:	300b      	adds	r0, #11
 8008984:	1d23      	adds	r3, r4, #4
 8008986:	4390      	bics	r0, r2
 8008988:	1ac3      	subs	r3, r0, r3
 800898a:	d0e7      	beq.n	800895c <_malloc_r+0x58>
 800898c:	425a      	negs	r2, r3
 800898e:	50e2      	str	r2, [r4, r3]
 8008990:	e7e4      	b.n	800895c <_malloc_r+0x58>
 8008992:	6063      	str	r3, [r4, #4]
 8008994:	000c      	movs	r4, r1
 8008996:	e7ef      	b.n	8008978 <_malloc_r+0x74>
 8008998:	000c      	movs	r4, r1
 800899a:	6849      	ldr	r1, [r1, #4]
 800899c:	e7c3      	b.n	8008926 <_malloc_r+0x22>
 800899e:	2303      	movs	r3, #3
 80089a0:	1cc4      	adds	r4, r0, #3
 80089a2:	439c      	bics	r4, r3
 80089a4:	42a0      	cmp	r0, r4
 80089a6:	d0e1      	beq.n	800896c <_malloc_r+0x68>
 80089a8:	1a21      	subs	r1, r4, r0
 80089aa:	0030      	movs	r0, r6
 80089ac:	f000 f82e 	bl	8008a0c <_sbrk_r>
 80089b0:	1c43      	adds	r3, r0, #1
 80089b2:	d1db      	bne.n	800896c <_malloc_r+0x68>
 80089b4:	e7c7      	b.n	8008946 <_malloc_r+0x42>
 80089b6:	46c0      	nop			; (mov r8, r8)
 80089b8:	2000011c 	.word	0x2000011c
 80089bc:	20000120 	.word	0x20000120

080089c0 <_realloc_r>:
 80089c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089c2:	0007      	movs	r7, r0
 80089c4:	000d      	movs	r5, r1
 80089c6:	0016      	movs	r6, r2
 80089c8:	2900      	cmp	r1, #0
 80089ca:	d105      	bne.n	80089d8 <_realloc_r+0x18>
 80089cc:	0011      	movs	r1, r2
 80089ce:	f7ff ff99 	bl	8008904 <_malloc_r>
 80089d2:	0004      	movs	r4, r0
 80089d4:	0020      	movs	r0, r4
 80089d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089d8:	2a00      	cmp	r2, #0
 80089da:	d103      	bne.n	80089e4 <_realloc_r+0x24>
 80089dc:	f7ff ff48 	bl	8008870 <_free_r>
 80089e0:	0034      	movs	r4, r6
 80089e2:	e7f7      	b.n	80089d4 <_realloc_r+0x14>
 80089e4:	f000 f826 	bl	8008a34 <_malloc_usable_size_r>
 80089e8:	002c      	movs	r4, r5
 80089ea:	42b0      	cmp	r0, r6
 80089ec:	d2f2      	bcs.n	80089d4 <_realloc_r+0x14>
 80089ee:	0031      	movs	r1, r6
 80089f0:	0038      	movs	r0, r7
 80089f2:	f7ff ff87 	bl	8008904 <_malloc_r>
 80089f6:	1e04      	subs	r4, r0, #0
 80089f8:	d0ec      	beq.n	80089d4 <_realloc_r+0x14>
 80089fa:	0029      	movs	r1, r5
 80089fc:	0032      	movs	r2, r6
 80089fe:	f7ff fc11 	bl	8008224 <memcpy>
 8008a02:	0029      	movs	r1, r5
 8008a04:	0038      	movs	r0, r7
 8008a06:	f7ff ff33 	bl	8008870 <_free_r>
 8008a0a:	e7e3      	b.n	80089d4 <_realloc_r+0x14>

08008a0c <_sbrk_r>:
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	b570      	push	{r4, r5, r6, lr}
 8008a10:	4c06      	ldr	r4, [pc, #24]	; (8008a2c <_sbrk_r+0x20>)
 8008a12:	0005      	movs	r5, r0
 8008a14:	0008      	movs	r0, r1
 8008a16:	6023      	str	r3, [r4, #0]
 8008a18:	f7fb f980 	bl	8003d1c <_sbrk>
 8008a1c:	1c43      	adds	r3, r0, #1
 8008a1e:	d103      	bne.n	8008a28 <_sbrk_r+0x1c>
 8008a20:	6823      	ldr	r3, [r4, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d000      	beq.n	8008a28 <_sbrk_r+0x1c>
 8008a26:	602b      	str	r3, [r5, #0]
 8008a28:	bd70      	pop	{r4, r5, r6, pc}
 8008a2a:	46c0      	nop			; (mov r8, r8)
 8008a2c:	20000394 	.word	0x20000394

08008a30 <__malloc_lock>:
 8008a30:	4770      	bx	lr

08008a32 <__malloc_unlock>:
 8008a32:	4770      	bx	lr

08008a34 <_malloc_usable_size_r>:
 8008a34:	1f0b      	subs	r3, r1, #4
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	1f18      	subs	r0, r3, #4
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	da01      	bge.n	8008a42 <_malloc_usable_size_r+0xe>
 8008a3e:	580b      	ldr	r3, [r1, r0]
 8008a40:	18c0      	adds	r0, r0, r3
 8008a42:	4770      	bx	lr

08008a44 <_init>:
 8008a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a46:	46c0      	nop			; (mov r8, r8)
 8008a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a4a:	bc08      	pop	{r3}
 8008a4c:	469e      	mov	lr, r3
 8008a4e:	4770      	bx	lr

08008a50 <_fini>:
 8008a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a52:	46c0      	nop			; (mov r8, r8)
 8008a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a56:	bc08      	pop	{r3}
 8008a58:	469e      	mov	lr, r3
 8008a5a:	4770      	bx	lr
